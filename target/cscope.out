cscope 15 $HOME/Hacking/OpenWrt/linino/openwrt-trunk/target -q 0000031436 0003991709
	@linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cas-771.c

12 
	~"˚Œvisi⁄.h
"

14 
adm5120_pci_úq
 
	gˇs771_pci_úqs
[] 
	g__öôd©a
 = {

15 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

16 
PCIIRQ
(3, 0, 1, 
ADM5120_IRQ_PCI1
),

17 
PCIIRQ
(3, 2, 3, 
ADM5120_IRQ_PCI2
)

20 
gpio_Àd
 
	gˇs771_gpio_Àds
[] 
	g__öôd©a
 = {

21 
GPIO_LED_STD
(
ADM5120_GPIO_PIN0
, "ˇm_Êash", 
NULL
),

23 
GPIO_LED_STD
(
ADM5120_GPIO_PIN6
, "ac˚ss", 
NULL
),

24 
GPIO_LED_STD
(
ADM5120_GPIO_P0L1
, "°©us", 
NULL
),

25 
GPIO_LED_STD
(
ADM5120_GPIO_P0L2
, "düg", 
NULL
),

28 
__öô
 
	$ˇs771_£tup
()

30 
	`ˇs7xx_£tup
();

31 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
ˇs771_gpio_Àds
),

32 
ˇs771_gpio_Àds
);

33 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
ˇs771_pci_úqs
), cas771_pci_irqs);

34 
	}
}

36 
MIPS_MACHINE
(
MACH_ADM5120_CAS771
, "CAS-771", "Cellvision CAS-771/771W",

37 
ˇs771_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cellvision.c

12 
	~"˚Œvisi⁄.h
"

14 
	~<¥om/admboŸ.h
>

16 
	#CELLVISION_GPIO_FLASH_A20
 
ADM5120_GPIO_PIN5


	)

17 
	#CELLVISION_GPIO_DEV_MASK
 (1 << 
CELLVISION_GPIO_FLASH_A20
)

	)

19 
	#CELLVISION_CONFIG_OFFSET
 0x8000

	)

20 
	#CELLVISION_CONFIG_SIZE
 0x1000

	)

22 
mtd_∑πôi⁄
 
	gˇs6xx_∑πôi⁄s
[] = {

24 .
«me
 = "admboot",

25 .
	goff£t
 = 0,

26 .
	gsize
 = 32*1024,

27 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

29 .
	g«me
 = "config",

30 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

31 .
	gsize
 = 32*1024,

33 .
	g«me
 = "nvfs1",

34 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

35 .
	gsize
 = 64*1024,

37 .
	g«me
 = "nvfs2",

38 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

39 .
	gsize
 = 64*1024,

41 .
	g«me
 = "firmware",

42 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

43 .
	gsize
 = 
MTDPART_SIZ_FULL
,

47 
mtd_∑πôi⁄
 
	gˇs7xx_∑πôi⁄s
[] = {

49 .
«me
 = "admboot",

50 .
	goff£t
 = 0,

51 .
	gsize
 = 32*1024,

52 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

54 .
	g«me
 = "config",

55 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

56 .
	gsize
 = 32*1024,

58 .
	g«me
 = "nvfs",

59 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

60 .
	gsize
 = 128*1024,

62 .
	g«me
 = "firmware",

63 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

64 .
	gsize
 = 
MTDPART_SIZ_FULL
,

68 
	$swôch_b™k_gpio5
(
b™k
)

70 
b™k
) {

72 
	`gpio_£t_vÆue
(
CELLVISION_GPIO_FLASH_A20
, 0);

75 
	`gpio_£t_vÆue
(
CELLVISION_GPIO_FLASH_A20
, 1);

78 
	}
}

80 
__öô
 
	$˚Œvisi⁄_Êash_£tup
()

83 
	`gpio_ªque°
(
CELLVISION_GPIO_FLASH_A20
, 
NULL
);

84 
	`gpio_dúe˘i⁄_ouçut
(
CELLVISION_GPIO_FLASH_A20
, 0);

86 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio5
;

87 
	`adm5120_add_devi˚_Êash
(0);

88 
	}
}

90 
__öô
 
	$˚Œvisi⁄_mac_£tup
()

92 
u8
 
mac_ba£
[6];

93 
îr
;

95 
îr
 = 
	`admboŸ_gë_mac_ba£
(
CELLVISION_CONFIG_OFFSET
,

96 
CELLVISION_CONFIG_SIZE
, 
mac_ba£
);

98 i‡((
îr
Ë|| !
	`is_vÆid_ëhî_addr
(
mac_ba£
))

99 
	`øndom_ëhî_addr
(
mac_ba£
);

101 
	`adm5120_£tup_ëh_macs
(
mac_ba£
);

102 
	}
}

104 
__öô
 
	$ˇs6xx_Êash_£tup
()

106 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
ˇs6xx_∑πôi⁄s
);

107 
adm5120_Êash0_d©a
.
∑πs
 = 
ˇs6xx_∑πôi⁄s
;

109 
	`˚Œvisi⁄_Êash_£tup
();

110 
	}
}

112 
__öô
 
	$ˇs7xx_Êash_£tup
()

114 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
ˇs7xx_∑πôi⁄s
);

115 
adm5120_Êash0_d©a
.
∑πs
 = 
ˇs7xx_∑πôi⁄s
;

117 
	`˚Œvisi⁄_Êash_£tup
();

118 
	}
}

120 
__öô
 
	$ˇs6xx_£tup
()

122 
	`ˇs6xx_Êash_£tup
();

123 
	`adm5120_add_devi˚_u¨t
(0);

124 
	`adm5120_add_devi˚_u¨t
(1);

125 
	`adm5120_add_devi˚_swôch
(1, 
NULL
);

126 
	}
}

128 
MIPS_MACHINE
(
MACH_ADM5120_CAS630
, "CAS-630", "Cellvision CAS-630/630W",

129 
ˇs6xx_£tup
);

130 
MIPS_MACHINE
(
MACH_ADM5120_CAS670
, "CAS-670", "Cellvision CAS-670/670W",

131 
ˇs6xx_£tup
);

133 
__öô
 
	$ˇs7xx_£tup
()

135 
	`ˇs7xx_Êash_£tup
();

136 
	`˚Œvisi⁄_mac_£tup
();

137 
	`adm5120_add_devi˚_u¨t
(0);

138 
	`adm5120_add_devi˚_u¨t
(1);

139 
	`adm5120_add_devi˚_swôch
(1, 
NULL
);

140 
	}
}

142 
MIPS_MACHINE
(
MACH_ADM5120_CAS700
, "CAS-700", "Cellvision CAS-700/700W",

143 
ˇs7xx_£tup
);

144 
MIPS_MACHINE
(
MACH_ADM5120_CAS790
, "CAS-790", "Cellvision CAS-790",

145 
ˇs7xx_£tup
);

146 
MIPS_MACHINE
(
MACH_ADM5120_CAS861
, "CAS-861", "Cellvision CAS-861/861W",

147 
ˇs7xx_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cellvision.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_öfo.h
>

21 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

23 
	$˚Œvisi⁄_mac_£tup
(Ë
__öô
;

25 
	$ˇs6xx_Êash_£tup
(Ë
__öô
;

26 
	$ˇs7xx_Êash_£tup
(Ë
__öô
;

27 
	$ˇs6xx_£tup
(Ë
__öô
;

28 
	$ˇs7xx_£tup
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/nfs-101.c

12 
	~"˚Œvisi⁄.h
"

14 
adm5120_pci_úq
 
	gnfs101_pci_úqs
[] 
	g__öôd©a
 = {

16 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

19 
PCIIRQ
(3, 0, 2, 
ADM5120_IRQ_PCI2
),

20 
PCIIRQ
(3, 3, 1, 
ADM5120_IRQ_PCI1
),

23 
PCIIRQ
(3, 0, 1, 
ADM5120_IRQ_PCI1
),

24 
PCIIRQ
(3, 1, 2, 
ADM5120_IRQ_PCI2
),

25 
PCIIRQ
(3, 2, 3, 
ADM5120_IRQ_PCI2
),

28 
u8
 
	gnfs101_vœns
[6] 
	g__öôd©a
 = {

33 
__öô
 
	$nfs101_£tup
()

35 
	`ˇs6xx_Êash_£tup
();

36 
	`˚Œvisi⁄_mac_£tup
();

38 
	`adm5120_add_devi˚_u¨t
(0);

39 
	`adm5120_add_devi˚_u¨t
(1);

40 
	`adm5120_add_devi˚_swôch
(1, 
nfs101_vœns
);

42 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
nfs101_pci_úqs
),

43 
nfs101_pci_úqs
);

44 
	}
}

46 
MIPS_MACHINE
(
MACH_ADM5120_NFS101U
, "NFS-101U", "Cellvision NFS-101U/101WU",

47 
nfs101_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/adm5120.c

10 
	~<löux/ty≥s.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/io.h
>

15 
	~<asm/addr•a˚.h
>

17 
	~<asm/mach-adm5120/adm5120_öfo.h
>

18 
	~<asm/mach-adm5120/adm5120_defs.h
>

19 
	~<asm/mach-adm5120/adm5120_swôch.h
>

21 
	gadm5120_¥odu˘_code
;

22 
	gadm5120_ªvisi⁄
;

23 
	gadm5120_∑ckage
;

24 
	gadm5120_«nd_boŸ
;

25 
	gadm5120_•ìd
;

30 
	#CODE_GET_PC
(
c
Ë((cË& 
CODE_PC_MASK
)

	)

31 
	#CODE_GET_REV
(
c
Ë(((cË>> 
CODE_REV_SHIFT
Ë& 
CODE_REV_MASK
)

	)

32 
	#CODE_GET_PK
(
c
Ë(((cË>> 
CODE_PK_SHIFT
Ë& 
CODE_PK_MASK
)

	)

33 
	#CODE_GET_CLKS
(
c
Ë(((cË>> 
CODE_CLKS_SHIFT
Ë& 
CODE_CLKS_MASK
)

	)

34 
	#CODE_GET_NAB
(
c
Ë(((cË& 
CODE_NAB
Ë!0)

	)

36 
	$adm5120_ndñay
(
u32
 
ns
)

38 
u32
 
t
;

40 
	`SW_WRITE_REG
(
SWITCH_REG_TIMER
, 
TIMER_PERIOD_DEFAULT
);

41 
	`SW_WRITE_REG
(
SWITCH_REG_TIMER_INT
, (
TIMER_INT_TOS
 | 
TIMER_INT_TOM
));

43 
t
 = (
ns
+640) / 640;

44 
t
 &
TIMER_PERIOD_MASK
;

45 
	`SW_WRITE_REG
(
SWITCH_REG_TIMER
, 
t
 | 
TIMER_TE
);

49 
t
 = 
	`SW_READ_REG
(
SWITCH_REG_TIMER_INT
);

50 } (
t
 & 
TIMER_INT_TOS
) == 0);

53 
	`SW_WRITE_REG
(
SWITCH_REG_TIMER
, 
TIMER_PERIOD_DEFAULT
);

54 
	`SW_WRITE_REG
(
SWITCH_REG_TIMER_INT
, (
TIMER_INT_TOS
 | 
TIMER_INT_TOM
));

55 
	}
}

57 
__öô
 
	$adm5120_soc_öô
()

59 
u32
 
code
;

60 
u32
 
˛ks
;

62 
code
 = 
	`SW_READ_REG
(
SWITCH_REG_CODE
);

64 
adm5120_¥odu˘_code
 = 
	`CODE_GET_PC
(
code
);

65 
adm5120_ªvisi⁄
 = 
	`CODE_GET_REV
(
code
);

66 
adm5120_∑ckage
 = (
	`CODE_GET_PK
(
code
Ë=
CODE_PK_BGA
) ?

67 
ADM5120_PACKAGE_BGA
 : 
ADM5120_PACKAGE_PQFP
;

68 
adm5120_«nd_boŸ
 = 
	`CODE_GET_NAB
(
code
);

70 
˛ks
 = 
	`CODE_GET_CLKS
(
code
);

71 
adm5120_•ìd
 = 
ADM5120_SPEED_175
;

72 i‡(
˛ks
 & 1)

73 
adm5120_•ìd
 += 25000000;

74 i‡(
˛ks
 & 2)

75 
adm5120_•ìd
 += 50000000;

76 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/clock.c

17 
	~<löux/kî√l.h
>

18 
	~<löux/°rög.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/îr.h
>

21 
	~<löux/˛k.h
>

22 
	~<löux/devi˚.h
>

24 
	~<asm/mach-adm5120/adm5120_defs.h
>

26 
	s˛k
 {

27 
	møã
;

30 
˛k
 
	gu¨t_˛k
 = {

31 .
øã
 = 
ADM5120_UART_CLOCK


34 
˛k
 *
	$˛k_gë
(
devi˚
 *
dev
, c⁄° *
id
)

36 c⁄° *
«me
 = 
	`dev_«me
(
dev
);

38 i‡(!
	`°rcmp
(
«me
, "apb:uart0") || !strcmp(name, "apb:uart1"))

39  &
u¨t_˛k
;

41  
	`ERR_PTR
(-
ENOENT
);

42 
	}
}

43 
EXPORT_SYMBOL
(
˛k_gë
);

45 
	$˛k_íabÀ
(
˛k
 *clk)

48 
	}
}

49 
EXPORT_SYMBOL
(
˛k_íabÀ
);

51 
	$˛k_dißbÀ
(
˛k
 *clk)

53 
	}
}

54 
EXPORT_SYMBOL
(
˛k_dißbÀ
);

56 
	$˛k_gë_øã
(
˛k
 *clk)

58  
˛k
->
øã
;

59 
	}
}

60 
EXPORT_SYMBOL
(
˛k_gë_øã
);

62 
	$˛k_put
(
˛k
 *clk)

64 
	}
}

65 
EXPORT_SYMBOL
(
˛k_put
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/early-printk.c

12 
	~<löux/öô.h
>

13 
	~<löux/io.h
>

15 
	~<asm/addr•a˚.h
>

16 
	~<asm/mach-adm5120/adm5120_defs.h
>

17 
	~<asm/mach-adm5120/adm5120_u¨t.h
>

19 
	#UART_READ
(
r
) \

20 
	`__øw_ªadl
((
__iomem
 *)(
	`KSEG1ADDR
(
ADM5120_UART0_BASE
)+(
r
)))

	)

21 
	#UART_WRITE
(
r
, 
v
) \

22 
	`__øw_wrôñ
((
v
), (
__iomem
 *)(
	`KSEG1ADDR
(
ADM5120_UART0_BASE
)+(
r
)))

	)

24 
__öô
 
	$¥om_putch¨
(
ch
)

26 (
	`UART_READ
(
UART_REG_FLAG
Ë& 
UART_FLAG_TXFE
) == 0)

28 
	`UART_WRITE
(
UART_REG_DATA
, 
ch
);

29 (
	`UART_READ
(
UART_REG_FLAG
Ë& 
UART_FLAG_TXFE
) == 0)

31 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/gpio.c

12 
	~<löux/öô.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/dñay.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/io.h
>

19 
	~<löux/gpio.h
>

21 
	~<asm/addr•a˚.h
>

23 
	~<asm/mach-adm5120/adm5120_defs.h
>

24 
	~<asm/mach-adm5120/adm5120_öfo.h
>

25 
	~<asm/mach-adm5120/adm5120_swôch.h
>

27 
	#GPIO_REG
(
r
Ë(
__iomem
 *)(
	`KSEG1ADDR
(
ADM5120_SWITCH_BASE
Ë+Ñ)

	)

29 
	sgpio1_desc
 {

30 
__iomem
 *
	mªg
;

31 
u8
 
	miv_shi·
;

32 
u8
 
	mmode_shi·
;

35 
	#GPIO1_DESC
(
p
, 
l
) { \

36 .
ªg
 = 
	`GPIO_REG
(
SWITCH_REG_PORT0_LED
 + ((
p
) * 4)), \

37 .
iv_shi·
 = 
LED0_IV_SHIFT
 + (
l
), \

38 .
mode_shi·
 = (
l
) * 4 \

39 }

	)

41 
gpio1_desc
 
	ggpio1_èbÀ
[15] = {

42 
GPIO1_DESC
(0, 0), GPIO1_DESC(0, 1), GPIO1_DESC(0, 2),

43 
GPIO1_DESC
(1, 0), GPIO1_DESC(1, 1), GPIO1_DESC(1, 2),

44 
GPIO1_DESC
(2, 0), GPIO1_DESC(2, 1), GPIO1_DESC(2, 2),

45 
GPIO1_DESC
(3, 0), GPIO1_DESC(3, 1), GPIO1_DESC(3, 2),

46 
GPIO1_DESC
(4, 0), GPIO1_DESC(4, 1), GPIO1_DESC(4, 2)

49 
u32
 
	ggpio_c⁄f2
;

51 
	$adm5120_gpio_to_úq
(
gpio
)

53 
ªt
;

55 
gpio
) {

56 
ADM5120_GPIO_PIN2
:

57 
ªt
 = 
ADM5120_IRQ_GPIO2
;

59 
ADM5120_GPIO_PIN4
:

60 
ªt
 = 
ADM5120_IRQ_GPIO4
;

63 
ªt
 = -
EINVAL
;

67  
ªt
;

68 
	}
}

69 
EXPORT_SYMBOL
(
adm5120_gpio_to_úq
);

71 
	$adm5120_úq_to_gpio
(
úq
)

73 
ªt
;

75 
úq
) {

76 
ADM5120_IRQ_GPIO2
:

77 
ªt
 = 
ADM5120_GPIO_PIN2
;

79 
ADM5120_IRQ_GPIO4
:

80 
ªt
 = 
ADM5120_GPIO_PIN4
;

83 
ªt
 = -
EINVAL
;

87  
ªt
;

88 
	}
}

89 
EXPORT_SYMBOL
(
adm5120_úq_to_gpio
);

94 
	#PIN_IM
(
p
Ë((1 << 
GPIO_CONF0_IM_SHIFT
Ë<<Ö)

	)

95 
	#PIN_IV
(
p
Ë((1 << 
GPIO_CONF0_IV_SHIFT
Ë<<Ö)

	)

96 
	#PIN_OE
(
p
Ë((1 << 
GPIO_CONF0_OE_SHIFT
Ë<<Ö)

	)

97 
	#PIN_OV
(
p
Ë((1 << 
GPIO_CONF0_OV_SHIFT
Ë<<Ö)

	)

99 
	$__adm5120_gpio0_gë_vÆue
(
off£t
)

101 
__iomem
 **
ªg
;

102 
u32
 
t
;

104 
ªg
 = 
	`GPIO_REG
(
SWITCH_REG_GPIO_CONF0
);

106 
t
 = 
	`__øw_ªadl
(
ªg
);

107 i‡((
t
 & 
	`PIN_IM
(
off£t
)) != 0)

108 
t
 &
	`PIN_IV
(
off£t
);

110 
t
 &
	`PIN_OV
(
off£t
);

112  (
t
) ? 1 : 0;

113 
	}
}

114 
EXPORT_SYMBOL
(
__adm5120_gpio0_gë_vÆue
);

116 
	$__adm5120_gpio0_£t_vÆue
(
off£t
, 
vÆue
)

118 
__iomem
 **
ªg
;

119 
u32
 
t
;

121 
ªg
 = 
	`GPIO_REG
(
SWITCH_REG_GPIO_CONF0
);

123 
t
 = 
	`__øw_ªadl
(
ªg
);

124 i‡(
vÆue
 == 0)

125 
t
 &~(
	`PIN_OV
(
off£t
));

127 
t
 |
	`PIN_OV
(
off£t
);

129 
	`__øw_wrôñ
(
t
, 
ªg
);

130 
	}
}

131 
EXPORT_SYMBOL
(
__adm5120_gpio0_£t_vÆue
);

133 
	$adm5120_gpio0_gë_vÆue
(
gpio_chù
 *
chù
, 
off£t
)

135  
	`__adm5120_gpio0_gë_vÆue
(
off£t
);

136 
	}
}

138 
	$adm5120_gpio0_£t_vÆue
(
gpio_chù
 *
chù
,

139 
off£t
, 
vÆue
)

141 
	`__adm5120_gpio0_£t_vÆue
(
off£t
, 
vÆue
);

142 
	}
}

144 
	$adm5120_gpio0_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

145 
off£t
)

147 
__iomem
 **
ªg
;

148 
u32
 
t
;

150 
ªg
 = 
	`GPIO_REG
(
SWITCH_REG_GPIO_CONF0
);

152 
t
 = 
	`__øw_ªadl
(
ªg
);

153 
t
 &~(
	`PIN_OE
(
off£t
));

154 
t
 |
	`PIN_IM
(
off£t
);

155 
	`__øw_wrôñ
(
t
, 
ªg
);

158 
	}
}

160 
	$adm5120_gpio0_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

161 
off£t
, 
vÆue
)

163 
__iomem
 **
ªg
;

164 
u32
 
t
;

166 
ªg
 = 
	`GPIO_REG
(
SWITCH_REG_GPIO_CONF0
);

168 
t
 = 
	`__øw_ªadl
(
ªg
);

169 
t
 &~(
	`PIN_IM
(
off£t
Ë| 
	`PIN_OV
(offset));

170 
t
 |
	`PIN_OE
(
off£t
);

172 i‡(
vÆue
)

173 
t
 |
	`PIN_OV
(
off£t
);

175 
	`__øw_wrôñ
(
t
, 
ªg
);

178 
	}
}

180 
gpio_chù
 
	gadm5120_gpio0_chù
 = {

181 .
œbñ
 = "adm5120 gpio0",

182 .
	ggë
 = 
adm5120_gpio0_gë_vÆue
,

183 .
	g£t
 = 
adm5120_gpio0_£t_vÆue
,

184 .
	gdúe˘i⁄_öput
 = 
adm5120_gpio0_dúe˘i⁄_öput
,

185 .
	gdúe˘i⁄_ouçut
 = 
adm5120_gpio0_dúe˘i⁄_ouçut
,

186 .
	gba£
 = 
ADM5120_GPIO_PIN0
,

187 .
	gngpio
 = 
ADM5120_GPIO_PIN7
 - 
ADM5120_GPIO_PIN0
 + 1,

190 
	$__adm5120_gpio1_gë_vÆue
(
off£t
)

192 
__iomem
 **
ªg
;

193 
u32
 
t
, 
m
;

195 
ªg
 = 
gpio1_èbÀ
[
off£t
].reg;

197 
t
 = 
	`__øw_ªadl
(
ªg
);

198 
m
 = (
t
 >> 
gpio1_èbÀ
[
off£t
].
mode_shi·
Ë& 
LED_MODE_MASK
;

199 i‡(
m
 =
LED_MODE_INPUT
)

200  (
t
 >> 
gpio1_èbÀ
[
off£t
].
iv_shi·
) & 1;

202 i‡(
m
 =
LED_MODE_OUT_LOW
)

206 
	}
}

207 
EXPORT_SYMBOL
(
__adm5120_gpio1_gë_vÆue
);

209 
	$__adm5120_gpio1_£t_vÆue
(
off£t
, 
vÆue
)

211 
__iomem
 **
ªg
;

212 
u32
 
t
, 
s
;

214 
ªg
 = 
gpio1_èbÀ
[
off£t
].reg;

215 
s
 = 
gpio1_èbÀ
[
off£t
].
mode_shi·
;

217 
t
 = 
	`__øw_ªadl
(
ªg
);

218 
t
 &~(
LED_MODE_MASK
 << 
s
);

220 
vÆue
) {

221 
ADM5120_GPIO_LOW
:

222 
t
 |(
LED_MODE_OUT_LOW
 << 
s
);

224 
ADM5120_GPIO_FLASH
:

225 
ADM5120_GPIO_LINK
:

226 
ADM5120_GPIO_SPEED
:

227 
ADM5120_GPIO_DUPLEX
:

228 
ADM5120_GPIO_ACT
:

229 
ADM5120_GPIO_COLL
:

230 
ADM5120_GPIO_LINK_ACT
:

231 
ADM5120_GPIO_DUPLEX_COLL
:

232 
ADM5120_GPIO_10M_ACT
:

233 
ADM5120_GPIO_100M_ACT
:

234 
t
 |((
vÆue
 & 
LED_MODE_MASK
Ë<< 
s
);

237 
t
 |(
LED_MODE_OUT_HIGH
 << 
s
);

241 
	`__øw_wrôñ
(
t
, 
ªg
);

242 
	}
}

243 
EXPORT_SYMBOL
(
__adm5120_gpio1_£t_vÆue
);

245 
	$adm5120_gpio1_gë_vÆue
(
gpio_chù
 *
chù
, 
off£t
)

247  
	`__adm5120_gpio1_gë_vÆue
(
off£t
);

248 
	}
}

250 
	$adm5120_gpio1_£t_vÆue
(
gpio_chù
 *
chù
,

251 
off£t
, 
vÆue
)

253 
	`__adm5120_gpio1_£t_vÆue
(
off£t
, 
vÆue
);

254 
	}
}

256 
	$adm5120_gpio1_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

257 
off£t
)

259 
__iomem
 **
ªg
;

260 
u32
 
t
;

262 
ªg
 = 
gpio1_èbÀ
[
off£t
].reg;

263 
t
 = 
	`__øw_ªadl
(
ªg
);

264 
t
 &~(
LED_MODE_MASK
 << 
gpio1_èbÀ
[
off£t
].
mode_shi·
);

265 
	`__øw_wrôñ
(
t
, 
ªg
);

268 
	}
}

270 
	$adm5120_gpio1_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

271 
off£t
, 
vÆue
)

273 
	`__adm5120_gpio1_£t_vÆue
(
off£t
, 
vÆue
);

275 
	}
}

277 
gpio_chù
 
	gadm5120_gpio1_chù
 = {

278 .
œbñ
 = "adm5120 gpio1",

279 .
	ggë
 = 
adm5120_gpio1_gë_vÆue
,

280 .
	g£t
 = 
adm5120_gpio1_£t_vÆue
,

281 .
	gdúe˘i⁄_öput
 = 
adm5120_gpio1_dúe˘i⁄_öput
,

282 .
	gdúe˘i⁄_ouçut
 = 
adm5120_gpio1_dúe˘i⁄_ouçut
,

283 .
	gba£
 = 
ADM5120_GPIO_P0L0
,

284 .
	gngpio
 = 
ADM5120_GPIO_P4L2
 - 
ADM5120_GPIO_P0L0
 + 1,

287 
__öô
 
	$adm5120_gpio_csx0_íabÀ
()

289 
gpio_c⁄f2
 |
GPIO_CONF2_CSX0
;

290 
	`SW_WRITE_REG
(
SWITCH_REG_GPIO_CONF2
, 
gpio_c⁄f2
);

292 
	`gpio_ªque°
(
ADM5120_GPIO_PIN1
, "CSX0");

293 
	}
}

295 
__öô
 
	$adm5120_gpio_csx1_íabÀ
()

297 
gpio_c⁄f2
 |
GPIO_CONF2_CSX1
;

298 
	`SW_WRITE_REG
(
SWITCH_REG_GPIO_CONF2
, 
gpio_c⁄f2
);

300 
	`gpio_ªque°
(
ADM5120_GPIO_PIN3
, "CSX1");

301 
	}
}

303 
__öô
 
	$adm5120_gpio_ew_íabÀ
()

305 
gpio_c⁄f2
 |
GPIO_CONF2_EW
;

306 
	`SW_WRITE_REG
(
SWITCH_REG_GPIO_CONF2
, 
gpio_c⁄f2
);

308 
	`gpio_ªque°
(
ADM5120_GPIO_PIN0
, "EW");

309 
	}
}

311 
__öô
 
	$adm5120_gpio_öô
()

313 
îr
;

315 
	`SW_WRITE_REG
(
SWITCH_REG_GPIO_CONF2
, 
gpio_c⁄f2
);

317 i‡(
	`adm5120_∑ckage_pqÂ
())

318 
adm5120_gpio0_chù
.
ngpio
 = 4;

320 
îr
 = 
	`gpiochù_add
(&
adm5120_gpio0_chù
);

321 i‡(
îr
)

322 
	`∑nic
("ˇ¬Ÿádd ADM5120 GPIO0 chù,Éº‹=%d", 
îr
);

324 
îr
 = 
	`gpiochù_add
(&
adm5120_gpio1_chù
);

325 i‡(
îr
)

326 
	`∑nic
("ˇ¬Ÿádd ADM5120 GPIO1 chù,Éº‹=%d", 
îr
);

328 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/irq.c

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/vîsi⁄.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/öãºu±.h
>

17 
	~<löux/i›‹t.h
>

18 
	~<löux/io.h
>

19 
	~<löux/bô›s.h
>

21 
	~<asm/úq_˝u.h
>

22 
	~<asm/mù§egs.h
>

24 
	~<asm/mach-adm5120/adm5120_defs.h
>

26 
adm5120_ötc_úq_unmask
(
úq_d©a
 *
d
);

27 
adm5120_ötc_úq_mask
(
úq_d©a
 *
d
);

28 
adm5120_ötc_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
);

30 
ölöe
 
	$ötc_wrôe_ªg
(
ªg
, 
u32
 
vÆ
)

32 
__iomem
 *
ba£
 = (__iomem *)
	`KSEG1ADDR
(
ADM5120_INTC_BASE
);

34 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
ªg
);

35 
	}
}

37 
ölöe
 
u32
 
	$ötc_ªad_ªg
(
ªg
)

39 
__iomem
 *
ba£
 = (__iomem *)
	`KSEG1ADDR
(
ADM5120_INTC_BASE
);

41  
	`__øw_ªadl
(
ba£
 + 
ªg
);

42 
	}
}

44 
úq_chù
 
	gadm5120_ötc_úq_chù
 = {

45 .
«me
 = "INTC",

46 .
	gúq_unmask
 = 
adm5120_ötc_úq_unmask
,

47 .
	gúq_mask
 = 
adm5120_ötc_úq_mask
,

48 .
	gúq_mask_ack
 = 
adm5120_ötc_úq_mask
,

49 .
	gúq_£t_ty≥
 = 
adm5120_ötc_úq_£t_ty≥


52 
úqa˘i⁄
 
	gadm5120_ötc_úq_a˘i⁄
 = {

53 .
h™dÀr
 = 
no_a˘i⁄
,

54 .
	g«me
 = "cascade [INTC]"

57 
	$adm5120_ötc_úq_unmask
(
úq_d©a
 *
d
)

59 
	`ötc_wrôe_ªg
(
INTC_REG_IRQ_ENABLE
, 1 << (
d
->
úq
 - 
ADM5120_INTC_IRQ_BASE
));

60 
	}
}

62 
	$adm5120_ötc_úq_mask
(
úq_d©a
 *
d
)

64 
	`ötc_wrôe_ªg
(
INTC_REG_IRQ_DISABLE
, 1 << (
d
->
úq
 - 
ADM5120_INTC_IRQ_BASE
));

65 
	}
}

67 
	$adm5120_ötc_úq_£t_ty≥
(
úq_d©a
 *
d
, 
Êow_ty≥
)

69 
úq
 = 
d
->irq;

70 
£n£
;

71 
mode
;

72 
îr
 = 0;

74 
£n£
 = 
Êow_ty≥
 & (
IRQ_TYPE_SENSE_MASK
);

75 
£n£
) {

76 
IRQ_TYPE_NONE
:

77 
IRQ_TYPE_LEVEL_HIGH
:

79 
IRQ_TYPE_LEVEL_LOW
:

80 
úq
) {

81 
ADM5120_IRQ_GPIO2
:

82 
ADM5120_IRQ_GPIO4
:

85 
îr
 = -
EINVAL
;

90 
îr
 = -
EINVAL
;

94 i‡(
îr
)

95  
îr
;

97 
úq
) {

98 
ADM5120_IRQ_GPIO2
:

99 
ADM5120_IRQ_GPIO4
:

100 
mode
 = 
	`ötc_ªad_ªg
(
INTC_REG_INT_MODE
);

101 i‡(
£n£
 =
IRQ_TYPE_LEVEL_LOW
)

102 
mode
 |(1 << (
úq
 - 
ADM5120_INTC_IRQ_BASE
));

104 
mode
 &~(1 << (
úq
 - 
ADM5120_INTC_IRQ_BASE
));

106 
	`ötc_wrôe_ªg
(
INTC_REG_INT_MODE
, 
mode
);

111 
	}
}

113 
	$adm5120_ötc_úq_di•©ch
()

115 
°©us
;

116 
úq
;

118 
°©us
 = 
	`ötc_ªad_ªg
(
INTC_REG_IRQ_STATUS
Ë& 
INTC_INT_ALL
;

119 i‡(
°©us
) {

120 
úq
 = 
ADM5120_INTC_IRQ_BASE
 + 
	`Ês
(
°©us
) - 1;

121 
	`do_IRQ
(
úq
);

123 
	`•urious_öãºu±
();

124 
	}
}

126 
asmlökage
 
	$∂©_úq_di•©ch
()

128 
≥ndög
;

130 
≥ndög
 = 
	`ªad_c0_°©us
(Ë& 
	`ªad_c0_ˇu£
(Ë& 
ST0_IM
;

132 i‡(
≥ndög
 & 
STATUSF_IP7
)

133 
	`do_IRQ
(
ADM5120_IRQ_COUNTER
);

134 i‡(
≥ndög
 & 
STATUSF_IP2
)

135 
	`adm5120_ötc_úq_di•©ch
();

137 
	`•urious_öãºu±
();

138 
	}
}

140 
	#INTC_IRQ_STATUS
 (
IRQ_LEVEL
 | 
IRQ_TYPE_LEVEL_HIGH
 | 
IRQ_DISABLED
)

	)

141 
__öô
 
	$adm5120_ötc_úq_öô
()

143 
i
;

146 
	`ötc_wrôe_ªg
(
INTC_REG_IRQ_DISABLE
, 
INTC_INT_ALL
);

149 
	`ötc_wrôe_ªg
(
INTC_REG_INT_MODE
, 0);

152 
	`ötc_wrôe_ªg
(
INTC_REG_INT_LEVEL
, 0);

155 
	`ötc_wrôe_ªg
(
INTC_REG_IRQ_SOURCE_SELECT
, 0);

157 
i
 = 
ADM5120_INTC_IRQ_BASE
;

158 
i
 <
ADM5120_INTC_IRQ_BASE
 + 
INTC_IRQ_LAST
;

159 
i
++) {

160 
	`úq_£t_chù_™d_h™dÀr
(
i
, &
adm5120_ötc_úq_chù
,

161 
h™dÀ_Àvñ_úq
);

164 
	`£tup_úq
(
ADM5120_IRQ_INTC
, &
adm5120_ötc_úq_a˘i⁄
);

165 
	}
}

167 
__öô
 
	$¨ch_öô_úq
()

169 
	`mùs_˝u_úq_öô
();

170 
	`adm5120_ötc_úq_öô
();

171 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/memory.c

10 
	~<löux/öô.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/io.h
>

15 
	~<asm/boŸöfo.h
>

16 
	~<asm/addr•a˚.h
>

18 
	~<asm/mach-adm5120/adm5120_öfo.h
>

19 
	~<asm/mach-adm5120/adm5120_defs.h
>

20 
	~<asm/mach-adm5120/adm5120_swôch.h
>

21 
	~<asm/mach-adm5120/adm5120_mpmc.h
>

23 #ifde‡
DEBUG


24 
	#mem_dbg
(
f
, 
a
...Ë
	`¥ötk
(
KERN_INFO
 "mem_dëe˘: " f, ##á)

	)

26 
	#mem_dbg
(
f
, 
a
...)

	)

29 
	gadm5120_memsize
;

31 
	#MEM_READL
(
a
Ë
	`__øw_ªadl
((
__iomem
 *)◊))

	)

32 
	#MEM_WRITEL
(
a
, 
v
Ë
	`__øw_wrôñ
((v), (
__iomem
 *)◊))

	)

34 
__öô
 
	$mem_check_∑âîn
(
u8
 *
addr
, 
offs
)

36 
u32
 *
p1
 = (u32 *)
addr
;

37 
u32
 *
p2
 = (u32 *)(
addr
+
offs
);

38 
u32
 
t
, 
u
, 
v
;

41 
t
 = 
	`MEM_READL
(
p1
);

43 
u
 = 
	`MEM_READL
(
p2
);

44 i‡(
t
 !
u
)

47 
v
 = 0x55555555;

48 i‡(
u
 =
v
)

49 
v
 = 0xAAAAAAAA;

51 
	`mem_dbg
("wrôê0x%08XÅÿ0x%08lX\n", 
v
, ()
p1
);

53 
	`MEM_WRITEL
(
p1
, 
v
);

54 
	`adm5120_ndñay
(1000);

55 
u
 = 
	`MEM_READL
(
p2
);

57 
	`mem_dbg
("∑âî¿© 0x%08lX i†0x%08X\n", ()
p2
, 
u
);

60 
	`MEM_WRITEL
(
p1
, 
t
);

62  (
v
 =
u
);

63 
	}
}

65 
__öô
 
	$adm5120_dëe˘_memsize
()

67 
u32
 
mem˘æ
;

68 
u32
 
size
, 
maxsize
;

69 
u8
 *
p
;

71 
mem˘æ
 = 
	`SW_READ_REG
(
SWITCH_REG_MEMCTRL
);

72 
mem˘æ
 & 
MEMCTRL_SDRS_MASK
) {

73 
MEMCTRL_SDRS_4M
:

74 
maxsize
 = 4 << 20;

76 
MEMCTRL_SDRS_8M
:

77 
maxsize
 = 8 << 20;

79 
MEMCTRL_SDRS_16M
:

80 
maxsize
 = 16 << 20;

83 
maxsize
 = 64 << 20;

87 
	`mem_dbg
("checkög f‹ %uMB chù i¿1° b™k\n", 
maxsize
 >> 20);

90 
p
 = (
u8
 *)
	`KSEG1ADDR
(0);

91 
size
 = 2<<20; sizê<(
maxsize
 >> 1); size <<= 1) {

92 i‡(
	`mem_check_∑âîn
(
p
, 
size
)) {

94 
	`mem_dbg
("múr‹ed d©®foundáàoff£à0x%08X\n", 
size
);

99 
	`mem_dbg
("chù sizêö 1° b™k i†%uMB\n", 
size
 >> 20);

100 
adm5120_memsize
 = 
size
;

102 i‡(
size
 !
maxsize
)

104 
out
;

106 i‡((
mem˘æ
 & 
MEMCTRL_SDR1_ENABLE
) == 0)

108 
out
;

114 
	`mem_dbg
("checkÖresence of 2nd bank\n");

116 
p
 = (
u8
 *)
	`KSEG1ADDR
(
maxsize
+
size
-4);

117 i‡(
	`mem_check_∑âîn
(
p
, 0))

118 
adm5120_memsize
 +
size
;

120 i‡(
maxsize
 !
size
) {

122 
mem˘æ
 &~(
MEMCTRL_SDRS_MASK
);

123 
size
>>20) {

125 
mem˘æ
 |
MEMCTRL_SDRS_4M
;

128 
mem˘æ
 |
MEMCTRL_SDRS_8M
;

131 
mem˘æ
 |
MEMCTRL_SDRS_16M
;

134 
mem˘æ
 |
MEMCTRL_SDRS_64M
;

137 
	`SW_WRITE_REG
(
SWITCH_REG_MEMCTRL
, 
mem˘æ
);

140 
out
:

141 
	`mem_dbg
("%dx%uMB mem‹y found\n", (
adm5120_memsize
 =
size
) ? 1 : 2 ,

142 
size
>>20);

143 
	}
}

145 
__öô
 
	$adm5120_mem_öô
()

147 
	`adm5120_dëe˘_memsize
();

148 
	`add_mem‹y_ªgi⁄
(0, 
adm5120_memsize
, 
BOOT_MEM_RAM
);

149 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/platform.c

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/li°.h
>

15 
	~<löux/devi˚.h
>

16 
	~<löux/dma-m≠pög.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/gpio.h
>

19 
	~<löux/úq.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/exp‹t.h
>

23 
	~<asm/boŸöfo.h
>

25 
	~<asm/mach-adm5120/adm5120_defs.h
>

26 
	~<asm/mach-adm5120/adm5120_öfo.h
>

27 
	~<asm/mach-adm5120/adm5120_swôch.h
>

28 
	~<asm/mach-adm5120/adm5120_«nd.h
>

29 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

36 
	gadm5120_ëh_num_p‹ts
 = 6;

37 
EXPORT_SYMBOL_GPL
(
adm5120_ëh_num_p‹ts
);

39 
	gadm5120_ëh_macs
[6][6] = {

47 
EXPORT_SYMBOL_GPL
(
adm5120_ëh_macs
);

49 
	gadm5120_ëh_vœns
[6] = {

52 
EXPORT_SYMBOL_GPL
(
adm5120_ëh_vœns
);

55 
__öô
 
	$adm5120_£tup_ëh_macs
(
u8
 *
mac_ba£
)

57 
u32
 
t
;

58 
i
, 
j
;

60 
t
 = ((
u32
Ë
mac_ba£
[3] << 16) | ((u32) mac_base[4] << 8)

61 | ((
u32
Ë
mac_ba£
[5]);

63 
i
 = 0; i < 
	`ARRAY_SIZE
(
adm5120_ëh_macs
); i++) {

64 
j
 = 0; j < 3; j++)

65 
adm5120_ëh_macs
[
i
][
j
] = 
mac_ba£
[j];

67 
adm5120_ëh_macs
[
i
][3] = (
t
 >> 16) & 0xff;

68 
adm5120_ëh_macs
[
i
][4] = (
t
 >> 8) & 0xff;

69 
adm5120_ëh_macs
[
i
][5] = 
t
 & 0xff;

71 
t
++;

73 
	}
}

78 
ªsour˚
 
	gadm5120_swôch_ªsour˚s
[] = {

80 .
°¨t
 = 
ADM5120_SWITCH_BASE
,

81 .
	gíd
 = 
ADM5120_SWITCH_BASE
+
ADM5120_SWITCH_SIZE
-1,

82 .
	gÊags
 = 
IORESOURCE_MEM
,

85 .
°¨t
 = 
ADM5120_IRQ_SWITCH
,

86 .
	gíd
 = 
ADM5120_IRQ_SWITCH
,

87 .
	gÊags
 = 
IORESOURCE_IRQ
,

91 
adm5120_swôch_∂©f‹m_d©a
 
	gadm5120_swôch_d©a
;

92 
∂©f‹m_devi˚
 
	gadm5120_swôch_devi˚
 = {

93 .
«me
 = "adm5120-switch",

94 .
	gid
 = -1,

95 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
adm5120_swôch_ªsour˚s
),

96 .
	gªsour˚
 = 
adm5120_swôch_ªsour˚s
,

97 .
	gdev
.
	g∂©f‹m_d©a
 = &
adm5120_swôch_d©a
,

100 
__öô
 
	$adm5120_add_devi˚_swôch
(
num_p‹ts
, 
u8
 *
vœn_m≠
)

102 i‡(
num_p‹ts
 > 0)

103 
adm5120_ëh_num_p‹ts
 = 
num_p‹ts
;

105 i‡(
vœn_m≠
)

106 
	`mem˝y
(
adm5120_ëh_vœns
, 
vœn_m≠
, (adm5120_eth_vlans));

108 
	`∂©f‹m_devi˚_ªgi°î
(&
adm5120_swôch_devi˚
);

109 
	}
}

114 
ªsour˚
 
	gadm5120_hcd_ªsour˚s
[] = {

116 .
°¨t
 = 
ADM5120_USBC_BASE
,

117 .
	gíd
 = 
ADM5120_USBC_BASE
+
ADM5120_USBC_SIZE
-1,

118 .
	gÊags
 = 
IORESOURCE_MEM
,

121 .
°¨t
 = 
ADM5120_IRQ_USBC
,

122 .
	gíd
 = 
ADM5120_IRQ_USBC
,

123 .
	gÊags
 = 
IORESOURCE_IRQ
,

127 
u64
 
	gadm5120_hcd_dma_mask
 = 
DMA_BIT_MASK
(24);

128 
∂©f‹m_devi˚
 
	gadm5120_hcd_devi˚
 = {

129 .
«me
 = "adm5120-hcd",

130 .
	gid
 = -1,

131 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
adm5120_hcd_ªsour˚s
),

132 .
	gªsour˚
 = 
adm5120_hcd_ªsour˚s
,

133 .
	gdev
 = {

134 .
dma_mask
 = &
adm5120_hcd_dma_mask
,

135 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(24),

139 
__öô
 
	$adm5120_add_devi˚_usb
()

141 
	`∂©f‹m_devi˚_ªgi°î
(&
adm5120_hcd_devi˚
);

142 
	}
}

147 
adm5120_Êash_∂©f‹m_d©a
 
	gadm5120_Êash0_d©a
;

148 
∂©f‹m_devi˚
 
	gadm5120_Êash0_devi˚
 = {

149 .
«me
 = "adm5120-flash",

150 .
	gid
 = 0,

151 .
	gdev
.
	g∂©f‹m_d©a
 = &
adm5120_Êash0_d©a
,

154 
adm5120_Êash_∂©f‹m_d©a
 
	gadm5120_Êash1_d©a
;

155 
∂©f‹m_devi˚
 
	gadm5120_Êash1_devi˚
 = {

156 .
«me
 = "adm5120-flash",

157 .
	gid
 = 1,

158 .
	gdev
.
	g∂©f‹m_d©a
 = &
adm5120_Êash1_d©a
,

161 
__öô
 
	$adm5120_add_devi˚_Êash
(
id
)

163 
∂©f‹m_devi˚
 *
pdev
;

165 
id
) {

167 
pdev
 = &
adm5120_Êash0_devi˚
;

170 
pdev
 = &
adm5120_Êash1_devi˚
;

173 
pdev
 = 
NULL
;

177 i‡(
pdev
)

178 
	`∂©f‹m_devi˚_ªgi°î
(
pdev
);

179 
	}
}

184 
	$adm5120_u¨t_£t_m˘æ
(
amba_devi˚
 *
dev
, 
__iomem
 *
ba£
,

185 
m˘æ
)

187 
	}
}

189 
amba_∂010_d©a
 
	gadm5120_u¨t0_d©a
 = {

190 .
£t_m˘æ
 = 
adm5120_u¨t_£t_m˘æ


193 
amba_devi˚
 
	gadm5120_u¨t0_devi˚
 = {

194 .
dev
 = {

195 .
öô_«me
 = "apb:uart0",

196 .
	g∂©f‹m_d©a
 = &
adm5120_u¨t0_d©a
,

198 .
	gªs
 = {

199 .
°¨t
 = 
ADM5120_UART0_BASE
,

200 .
	gíd
 = 
ADM5120_UART0_BASE
 + 
ADM5120_UART_SIZE
 - 1,

201 .
	gÊags
 = 
IORESOURCE_MEM
,

203 .
	gúq
 = { 
ADM5120_IRQ_UART0
, 0 },

204 .
	g≥rùhid
 = 0x0041010,

207 
amba_∂010_d©a
 
	gadm5120_u¨t1_d©a
 = {

208 .
£t_m˘æ
 = 
adm5120_u¨t_£t_m˘æ


211 
amba_devi˚
 
	gadm5120_u¨t1_devi˚
 = {

212 .
dev
 = {

213 .
öô_«me
 = "apb:uart1",

214 .
	g∂©f‹m_d©a
 = &
adm5120_u¨t1_d©a
,

216 .
	gªs
 = {

217 .
°¨t
 = 
ADM5120_UART1_BASE
,

218 .
	gíd
 = 
ADM5120_UART1_BASE
 + 
ADM5120_UART_SIZE
 - 1,

219 .
	gÊags
 = 
IORESOURCE_MEM
,

221 .
	gúq
 = { 
ADM5120_IRQ_UART1
, 0 },

222 .
	g≥rùhid
 = 0x0041010,

225 
__öô
 
	$adm5120_add_devi˚_u¨t
(
id
)

227 
amba_devi˚
 *
dev
;

229 
id
) {

231 
dev
 = &
adm5120_u¨t0_devi˚
;

234 
dev
 = &
adm5120_u¨t1_devi˚
;

237 
dev
 = 
NULL
;

241 i‡(
dev
)

242 
	`amba_devi˚_ªgi°î
(
dev
, &
iomem_ªsour˚
);

243 
	}
}

248 
__öô
 
	$adm5120_ªgi°î_gpio_buâ⁄s
(
id
,

249 
pﬁl_öãrvÆ
,

250 
nbuâ⁄s
,

251 
gpio_keys_buâ⁄
 *
buâ⁄s
)

253 
∂©f‹m_devi˚
 *
pdev
;

254 
gpio_keys_∂©f‹m_d©a
 
pd©a
;

255 
gpio_keys_buâ⁄
 *
p
;

256 
îr
;

258 
p
 = 
	`kmemdup
(
buâ⁄s
, 
nbuâ⁄s
 * (*p), 
GFP_KERNEL
);

259 i‡(!
p
)

262 
pdev
 = 
	`∂©f‹m_devi˚_Æloc
("gpio-keys-pﬁÀd", 
id
);

263 i‡(!
pdev
)

264 
îr_‰ì_buâ⁄s
;

266 
	`mem£t
(&
pd©a
, 0, (pdata));

267 
pd©a
.
pﬁl_öãrvÆ
 =Öoll_interval;

268 
pd©a
.
nbuâ⁄s
 =Çbuttons;

269 
pd©a
.
buâ⁄s
 = 
p
;

271 
îr
 = 
	`∂©f‹m_devi˚_add_d©a
(
pdev
, &
pd©a
, (pdata));

272 i‡(
îr
)

273 
îr_put_pdev
;

275 
îr
 = 
	`∂©f‹m_devi˚_add
(
pdev
);

276 i‡(
îr
)

277 
îr_put_pdev
;

281 
îr_put_pdev
:

282 
	`∂©f‹m_devi˚_put
(
pdev
);

284 
îr_‰ì_buâ⁄s
:

285 
	`k‰ì
(
p
);

286 
	}
}

291 
gpio_Àd_∂©f‹m_d©a
 
	gadm5120_gpio_Àds_d©a
;

292 
∂©f‹m_devi˚
 
	gadm5120_gpio_Àds_devi˚
 = {

293 .
«me
 = "leds-gpio",

294 .
	gid
 = -1,

295 .
	gdev
.
	g∂©f‹m_d©a
 = &
adm5120_gpio_Àds_d©a
,

298 
__öô
 
	$adm5120_add_devi˚_gpio_Àds
(
num_Àds
,

299 
gpio_Àd
 *
Àds
)

301 
gpio_Àd
 *
p
;

303 
p
 = 
	`kmÆloc
(
num_Àds
 * (*p), 
GFP_KERNEL
);

304 i‡(!
p
)

307 
	`mem˝y
(
p
, 
Àds
, 
num_Àds
 * (*p));

308 
adm5120_gpio_Àds_d©a
.
num_Àds
 =Çum_leds;

309 
adm5120_gpio_Àds_d©a
.
Àds
 = 
p
;

311 
	`∂©f‹m_devi˚_ªgi°î
(&
adm5120_gpio_Àds_devi˚
);

312 
	}
}

317 
ªsour˚
 
	gadm5120_«nd_ªsour˚s
[] = {

319 .
°¨t
 = 
ADM5120_NAND_BASE
,

320 .
	gíd
 = 
ADM5120_NAND_BASE
 + 
ADM5120_NAND_SIZE
-1,

321 .
	gÊags
 = 
IORESOURCE_MEM
,

325 
	$adm5120_«nd_ªady
(
mtd_öfo
 *
mtd
)

327  ((
	`adm5120_«nd_gë_°©us
(Ë& 
ADM5120_NAND_STATUS_READY
) != 0);

328 
	}
}

330 
	$adm5120_«nd_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
cmd
,

331 
˘æ
)

333 i‡(
˘æ
 & 
NAND_CTRL_CHANGE
) {

334 
	`adm5120_«nd_£t_˛e
(
˘æ
 & 
NAND_CLE
);

335 
	`adm5120_«nd_£t_Æe
(
˘æ
 & 
NAND_ALE
);

336 
	`adm5120_«nd_£t_˚n
(
˘æ
 & 
NAND_NCE
);

339 i‡(
cmd
 !
NAND_CMD_NONE
)

340 
	`NAND_WRITE_REG
(
NAND_REG_DATA
, 
cmd
);

341 
	}
}

343 
__öô
 
	$adm5120_add_devi˚_«nd
(
∂©f‹m_«nd_d©a
 *
pd©a
)

345 
∂©f‹m_devi˚
 *
pdev
;

346 
îr
;

348 
pdev
 = 
	`∂©f‹m_devi˚_Æloc
("gen_nand", -1);

349 i‡(!
pdev
)

350 
îr_out
;

352 
îr
 = 
	`∂©f‹m_devi˚_add_ªsour˚s
(
pdev
, 
adm5120_«nd_ªsour˚s
,

353 
	`ARRAY_SIZE
(
adm5120_«nd_ªsour˚s
));

354 i‡(
îr
)

355 
îr_put
;

357 
îr
 = 
	`∂©f‹m_devi˚_add_d©a
(
pdev
, 
pd©a
, (*pdata));

358 i‡(
îr
)

359 
îr_put
;

361 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

362 
pd©a
->
˘æ
.
dev_ªady
 = 
adm5120_«nd_ªady
;

363 
pd©a
->
˘æ
.
cmd_˘æ
 = 
adm5120_«nd_cmd_˘æ
;

365 
îr
 = 
	`∂©f‹m_devi˚_add
(
pdev
);

366 i‡(
îr
)

367 
îr_put
;

371 
îr_put
:

372 
	`∂©f‹m_devi˚_put
(
pdev
);

373 
îr_out
:

375 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/prom.c

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/°rög.h
>

15 
	~<löux/mm.h
>

17 
	~<asm/boŸöfo.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_öfo.h
>

22 
	~<¥om/c„.h
>

23 
	~<¥om/gíîic.h
>

24 
	~<¥om/rouãrboŸ.h
>

25 
	~<¥om/mylﬂdî.h
>

26 
	~<¥om/zynos.h
>

28 
	gadm5120_¥om_ty≥
 = 
ADM5120_PROM_GENERIC
;

30 
	sbﬂrd_desc
 {

31 
	mmach_ty≥
;

32 *
	m«me
;

35 
	#DEFBOARD
(
n
, 
mt
Ë{ .
mach_ty≥
 = (mt), .
«me
 = (n)}

	)

36 
bﬂrd_desc
 
	gcomm⁄_bﬂrds
[] 
	g__öôd©a
 = {

38 
DEFBOARD
("CAS-630", 
MACH_ADM5120_CAS630
),

39 
DEFBOARD
("CAS-670", 
MACH_ADM5120_CAS670
),

40 
DEFBOARD
("CAS-700", 
MACH_ADM5120_CAS700
),

41 
DEFBOARD
("CAS-771", 
MACH_ADM5120_CAS771
),

42 
DEFBOARD
("CAS-790", 
MACH_ADM5120_CAS790
),

43 
DEFBOARD
("CAS-861", 
MACH_ADM5120_CAS861
),

44 
DEFBOARD
("NFS-101U", 
MACH_ADM5120_NFS101U
),

46 
DEFBOARD
("WP54G-WRT", 
MACH_ADM5120_WP54G_WRT
),

48 
DEFBOARD
("BR-6104K", 
MACH_ADM5120_BR6104K
),

49 
DEFBOARD
("BR-6104KP", 
MACH_ADM5120_BR6104KP
),

50 
DEFBOARD
("BR-6104WG", 
MACH_ADM5120_BR61X4WG
),

51 
DEFBOARD
("BR-6114WG", 
MACH_ADM5120_BR61X4WG
),

53 
DEFBOARD
("EASY 5120P-ATA", 
MACH_ADM5120_EASY5120PATA
),

54 
DEFBOARD
("EASY 5120-RT", 
MACH_ADM5120_EASY5120RT
),

55 
DEFBOARD
("EASY 5120-WVoIP", 
MACH_ADM5120_EASY5120WVOIP
),

56 
DEFBOARD
("EASY 83000", 
MACH_ADM5120_EASY83000
),

58 
DEFBOARD
("111", 
MACH_ADM5120_RB_11X
),

59 
DEFBOARD
("112", 
MACH_ADM5120_RB_11X
),

60 
DEFBOARD
("133", 
MACH_ADM5120_RB_133
),

61 
DEFBOARD
("133C", 
MACH_ADM5120_RB_133C
),

62 
DEFBOARD
("133C3", 
MACH_ADM5120_RB_133C
),

63 
DEFBOARD
("150", 
MACH_ADM5120_RB_153
),

64 
DEFBOARD
("153", 
MACH_ADM5120_RB_153
),

65 
DEFBOARD
("192", 
MACH_ADM5120_RB_192
),

66 
DEFBOARD
("möiROUTER", 
MACH_ADM5120_RB_150
),

68 
DEFBOARD
("OSBRiDGE 5GXi", 
MACH_ADM5120_5GXI
),

70 
DEFBOARD
("PowîlöêMU G©eway", 
MACH_ADM5120_PMUGW
),

72 
DEFBOARD
("ADM5120", 
MACH_ADM5120_EB_214A
),

75 
__öô
 
	$föd_machty≥_by«me
(*
«me
)

77 
ªt
;

78 
i
;

80 
ªt
 = 
MACH_ADM5120_GENERIC
;

81 i‡(
«me
 =
NULL
)

82 
out
;

84 i‡(*
«me
 == '\0')

85 
out
;

87 
i
 = 0; i < 
	`ARRAY_SIZE
(
comm⁄_bﬂrds
); i++) {

88 i‡(
	`°rcmp
(
comm⁄_bﬂrds
[
i
].
«me
,Çame) == 0) {

89 
ªt
 = 
comm⁄_bﬂrds
[
i
].
mach_ty≥
;

94 
out
:

95  
ªt
;

96 
	}
}

98 
__öô
 
	$dëe˘_machty≥_rouãrboŸ
()

100 *
«me
;

102 
«me
 = 
	`rouãrboŸ_gë_bﬂrd«me
();

103  
	`föd_machty≥_by«me
(
«me
);

104 
	}
}

106 
__öô
 
	$dëe˘_machty≥_gíîic
()

108 *
«me
;

110 
«me
 = 
	`gíîic_¥om_gëív
("board_name");

111  
	`föd_machty≥_by«me
(
«me
);

112 
	}
}

114 
__öô
 
	$dëe˘_machty≥_c„
()

116 *
«me
;

118 
«me
 = 
	`c„_gëív
("BOARD_NAME");

119  
	`föd_machty≥_by«me
(
«me
);

120 
	}
}

123 
	mmach_ty≥
;

124 
u16
 
	mvíd‹_id
;

125 
u16
 
	mbﬂrd_id
;

126 } 
	gzynos_bﬂrds
[] 
	g__öôd©a
 = {

127 
	#ZYNOS_BOARD
(
vi
, 
bi
, 
mt
) \

128 {.
víd‹_id
 = (
vi
), .
bﬂrd_id
 = (
bi
), .
mach_ty≥
 = (
mt
)}

	)

130 
	#ZYXEL_BOARD
(
bi
, 
mt
Ë
	`ZYNOS_BOARD
(
ZYNOS_VENDOR_ID_ZYXEL
, bi, mt)

	)

131 
	#DLINK_BOARD
(
bi
, 
mt
Ë
	`ZYNOS_BOARD
(
ZYNOS_VENDOR_ID_DLINK
, bi, mt)

	)

132 
	#LUCENT_BOARD
(
bi
, 
mt
Ë
	`ZYNOS_BOARD
(
ZYNOS_VENDOR_ID_LUCENT
, bi, mt)

	)

133 
ZYXEL_BOARD
(
ZYNOS_BOARD_HS100
, 
MACH_ADM5120_HS100
),

134 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334U
, 
MACH_ADM5120_P334U
),

135 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334W
, 
MACH_ADM5120_P334W
),

136 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334WH
, 
MACH_ADM5120_P334WH
),

137 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334WHD
, 
MACH_ADM5120_P334WHD
),

138 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334WT
, 
MACH_ADM5120_P334WT
),

139 
ZYXEL_BOARD
(
ZYNOS_BOARD_P334WT_ALT
, 
MACH_ADM5120_P334WT
),

140 
ZYXEL_BOARD
(
ZYNOS_BOARD_P335
, 
MACH_ADM5120_P335
),

141 
ZYXEL_BOARD
(
ZYNOS_BOARD_P335PLUS
, 
MACH_ADM5120_P335PLUS
),

142 
ZYXEL_BOARD
(
ZYNOS_BOARD_P335U
, 
MACH_ADM5120_P335U
)

145 
__öô
 
	$dëe˘_machty≥_boŸba£
()

147 
i
;

149 
i
 = 0; i < 
	`ARRAY_SIZE
(
zynos_bﬂrds
); i++) {

150 i‡(
zynos_bﬂrds
[
i
].
víd‹_id
 =
boŸba£_öfo
.vendor_id &&

151 
zynos_bﬂrds
[
i
].
bﬂrd_id
 =
boŸba£_öfo
.board_id) {

152  
zynos_bﬂrds
[
i
].
mach_ty≥
;

157 
	`¥ötk
(
KERN_WARNING
 "Unknown ZyXEL model (%u)\n",

158 
boŸba£_öfo
.
bﬂrd_id
);

159  
MACH_ADM5120_GENERIC
;

160 
	}
}

163 
	mmach_ty≥
;

164 
u16
 
	mvid
;

165 
u16
 
	mdid
;

166 
u16
 
	msvid
;

167 
u16
 
	msdid
;

168 } 
	gmylo_bﬂrds
[] 
	g__öôd©a
 = {

169 
	#MYLO_BOARD
(
v
, 
d
, 
sv
, 
sd
, 
mt
) \

170 {.
vid
 = (
v
), .
did
 = (
d
), .
svid
 = (
sv
), .
sdid
 = (
sd
), .
mach_ty≥
 = (
mt
)}

	)

171 
	#COMPEX_BOARD
(
d
, 
mt
) \

172 
	`MYLO_BOARD
(
VENID_COMPEX
, (
d
), VENID_COMPEX, (d), (
mt
))

	)

174 
COMPEX_BOARD
(
DEVID_COMPEX_NP27G
, 
MACH_ADM5120_NP27G
),

175 
COMPEX_BOARD
(
DEVID_COMPEX_NP28G
, 
MACH_ADM5120_NP28G
),

176 
COMPEX_BOARD
(
DEVID_COMPEX_NP28GHS
, 
MACH_ADM5120_NP28GHS
),

177 
COMPEX_BOARD
(
DEVID_COMPEX_WP54G
, 
MACH_ADM5120_WP54
),

178 
COMPEX_BOARD
(
DEVID_COMPEX_WP54Gv1C
, 
MACH_ADM5120_WP54Gv1C
),

179 
COMPEX_BOARD
(
DEVID_COMPEX_WP54AG
, 
MACH_ADM5120_WP54
),

180 
COMPEX_BOARD
(
DEVID_COMPEX_WPP54G
, 
MACH_ADM5120_WP54
),

181 
COMPEX_BOARD
(
DEVID_COMPEX_WPP54AG
, 
MACH_ADM5120_WP54
),

184 
__öô
 
	$dëe˘_machty≥_mylﬂdî
()

186 
ªt
;

187 
i
;

189 
ªt
 = 
MACH_ADM5120_GENERIC
;

190 
i
 = 0; i < 
	`ARRAY_SIZE
(
mylo_bﬂrds
); i++) {

191 i‡(
mylo_bﬂrds
[
i
].
vid
 =
mylﬂdî_öfo
.vid &&

192 
mylo_bﬂrds
[
i
].
did
 =
mylﬂdî_öfo
.did &&

193 
mylo_bﬂrds
[
i
].
svid
 =
mylﬂdî_öfo
.svid &&

194 
mylo_bﬂrds
[
i
].
sdid
 =
mylﬂdî_öfo
.sdid) {

195 
ªt
 = 
mylo_bﬂrds
[
i
].
mach_ty≥
;

200  
ªt
;

201 
	}
}

203 
__öô
 
	$¥om_dëe˘_machty≥
()

205 i‡(
	`boŸba£_¥e£¡
()) {

206 
adm5120_¥om_ty≥
 = 
ADM5120_PROM_BOOTBASE
;

207 
mùs_machty≥
 = 
	`dëe˘_machty≥_boŸba£
();

211 i‡(
	`c„_¥e£¡
()) {

212 
adm5120_¥om_ty≥
 = 
ADM5120_PROM_CFE
;

213 
mùs_machty≥
 = 
	`dëe˘_machty≥_c„
();

217 i‡(
	`mylﬂdî_¥e£¡
()) {

218 
adm5120_¥om_ty≥
 = 
ADM5120_PROM_MYLOADER
;

219 
mùs_machty≥
 = 
	`dëe˘_machty≥_mylﬂdî
();

223 i‡(
	`rouãrboŸ_¥e£¡
()) {

224 
adm5120_¥om_ty≥
 = 
ADM5120_PROM_ROUTERBOOT
;

225 
mùs_machty≥
 = 
	`dëe˘_machty≥_rouãrboŸ
();

229 i‡(
	`gíîic_¥om_¥e£¡
()) {

230 
adm5120_¥om_ty≥
 = 
ADM5120_PROM_GENERIC
;

231 
mùs_machty≥
 = 
	`dëe˘_machty≥_gíîic
();

235 
mùs_machty≥
 = 
MACH_ADM5120_GENERIC
;

236 
	}
}

238 #ifde‡
CONFIG_IMAGE_CMDLINE_HACK


239 
__image_cmdlöe
[];

241 
__öô
 
	$¥om_öô_cmdlöe
()

243 *
cmd
;

246 
cmd
 = 
__image_cmdlöe
;

247 i‡(
	`°æí
(
cmd
) > 0)

248 
	`°æ˝y
(
¨cs_cmdlöe
, 
cmd
, (arcs_cmdline));

250 
	}
}

252 
ölöe
 
	$¥om_öô_cmdlöe
(Ë{
	}
}

255 
__öô
 
	$¥om_öô
()

257 
	`¥om_dëe˘_machty≥
();

258 
	`¥om_öô_cmdlöe
();

259 
	}
}

261 
__öô
 
	$¥om_‰ì_¥om_mem‹y
()

264 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/common/setup.c

20 
	~<löux/öô.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/io.h
>

23 
	~<löux/ªboŸ.h
>

24 
	~<löux/time.h
>

26 
	~<asm/ªboŸ.h
>

27 
	~<asm/time.h
>

28 
	~<asm/boŸöfo.h
>

29 
	~<asm/mùs_machöe.h
>

30 
	~<asm/idÀ.h
>

32 
	~<asm/mach-adm5120/adm5120_öfo.h
>

33 
	~<asm/mach-adm5120/adm5120_defs.h
>

34 
	~<asm/mach-adm5120/adm5120_swôch.h
>

35 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

37 
	#ADM5120_SYS_TYPE_LEN
 64

	)

39 
	gadm5120_sys_ty≥
[
ADM5120_SYS_TYPE_LEN
];

40 (*
adm5120_bﬂrd_ª£t
)();

42 *
¥om_«mes
[
ADM5120_PROM_LAST
+1] 
__öôd©a
 = {

43 [
ADM5120_PROM_GENERIC
] = "Generic",

44 [
ADM5120_PROM_CFE
] = "CFE",

45 [
ADM5120_PROM_UBOOT
] = "U-Boot",

46 [
ADM5120_PROM_MYLOADER
] = "MyLoader",

47 [
ADM5120_PROM_ROUTERBOOT
] = "RouterBOOT",

48 [
ADM5120_PROM_BOOTBASE
] = "Bootbase"

49 
	}
};

51 
__öô
 
	$adm5120_ªp‹t
()

53 
	`¥ötk
(
KERN_INFO
 "SoC : %s\n", 
adm5120_sys_ty≥
);

54 
	`¥ötk
(
KERN_INFO
 "Bootdev : %s flash\n",

55 
adm5120_«nd_boŸ
 ? "NAND" : "NOR");

56 
	`¥ötk
(
KERN_INFO
 "Prom : %s\n", 
¥om_«mes
[
adm5120_¥om_ty≥
]);

57 
	}
}

59 c⁄° *
	$gë_sy°em_ty≥
()

61  
adm5120_sys_ty≥
;

62 
	}
}

64 
	$adm5120_ª°¨t
(*
comm™d
)

68 i‡(
adm5120_bﬂrd_ª£t
)

69 
	`adm5120_bﬂrd_ª£t
();

71 
	`SW_WRITE_REG
(
SWITCH_REG_SOFT_RESET
, 1);

72 
	}
}

74 
	$adm5120_hÆt
()

76 
	`loˇl_úq_dißbÀ
();

79 i‡(
˝u_waô
)

80 
	`˝u_waô
();

82 
	}
}

84 
__öô
 
	$∂©_time_öô
()

86 
mùs_h±_‰equícy
 = 
adm5120_•ìd
 / 2;

87 
	}
}

89 
__öô
 
	$∂©_mem_£tup
()

91 
	`adm5120_soc_öô
();

92 
	`adm5120_mem_öô
();

94 
	`•rötf
(
adm5120_sys_ty≥
, "ADM%04X%sÑev %u,Ñunningát %lu.%03lu MHz",

95 
adm5120_¥odu˘_code
,

96 
	`adm5120_∑ckage_bga
() ? "" : "P",

97 
adm5120_ªvisi⁄
,

98 (
adm5120_•ìd
 / 1000000), (adm5120_speed / 1000) % 1000);

100 
	`adm5120_ªp‹t
();

102 
_machöe_ª°¨t
 = 
adm5120_ª°¨t
;

103 
_machöe_hÆt
 = 
adm5120_hÆt
;

104 
pm_powî_off
 = 
adm5120_hÆt
;

106 
	`£t_io_p‹t_ba£
(
KSEG1
);

107 
	}
}

109 
__öô
 
	$adm5120_bﬂrd_£tup
()

111 
	`adm5120_gpio_öô
();

113 
	`mùs_machöe_£tup
();

116 
	}
}

117 
¨ch_öôˇŒ
(
adm5120_bﬂrd_£tup
);

119 
__öô
 
	$adm5120_gíîic_bﬂrd_£tup
()

121 
	`adm5120_add_devi˚_u¨t
(0);

122 
	`adm5120_add_devi˚_u¨t
(1);

124 
	`adm5120_add_devi˚_Êash
(0);

125 
	`adm5120_add_devi˚_swôch
(6, 
NULL
);

126 
	}
}

128 
MIPS_MACHINE
(
MACH_ADM5120_GENERIC
, "Generic", "Generic ADM5120 board",

129 
adm5120_gíîic_bﬂrd_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/compex/compex.c

12 
	~"com≥x.h
"

14 
	~<asm/mach-adm5120/¥om/mylﬂdî.h
>

16 
	$swôch_b™k_gpio5
(
b™k
)

18 
b™k
) {

20 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 0);

23 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 1);

26 
	}
}

28 
__öô
 
	$com≥x_mac_£tup
()

30 i‡(
	`mylﬂdî_¥e£¡
()) {

31 
i
;

33 
i
 = 0; i < 6; i++) {

34 i‡(
	`is_vÆid_ëhî_addr
(
mylﬂdî_öfo
.
macs
[
i
]))

35 
	`mem˝y
(
adm5120_ëh_macs
[
i
],

36 
mylﬂdî_öfo
.
macs
[
i
], 
ETH_ALEN
);

38 
	`øndom_ëhî_addr
(
adm5120_ëh_macs
[
i
]);

41 
u8
 
mac
[
ETH_ALEN
];

43 
	`øndom_ëhî_addr
(
mac
);

44 
	`adm5120_£tup_ëh_macs
(
mac
);

46 
	}
}

48 
__öô
 
	$com≥x_gíîic_£tup
()

50 
	`gpio_ªque°
(
ADM5120_GPIO_PIN5
, 
NULL
);

51 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN5
, 0);

53 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio5
;

54 
	`adm5120_add_devi˚_Êash
(0);

56 
	`adm5120_add_devi˚_u¨t
(0);

57 
	`adm5120_add_devi˚_u¨t
(1);

59 
	`com≥x_mac_£tup
();

60 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/compex/compex.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_öfo.h
>

21 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

23 
	$com≥x_gíîic_£tup
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/adm5120/compex/np27g.c

12 
	~"com≥x.h
"

14 
u8
 
	g≈27g_vœns
[6] 
	g__öôd©a
 = {

19 
__öô
 
	$≈27g_£tup
()

21 
	`com≥x_gíîic_£tup
();

22 
	`adm5120_add_devi˚_swôch
(5, 
≈27g_vœns
);

23 
	`adm5120_add_devi˚_usb
();

26 
	}
}

28 
MIPS_MACHINE
(
MACH_ADM5120_NP27G
, "NP27G", "Com≥x NëPasßgê27G", 
≈27g_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/compex/np28g.c

12 
	~"com≥x.h
"

14 
adm5120_pci_úq
 
	g≈28g_pci_úqs
[] 
	g__öôd©a
 = {

15 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

16 
PCIIRQ
(3, 0, 1, 
ADM5120_IRQ_PCI0
),

17 
PCIIRQ
(3, 1, 2, 
ADM5120_IRQ_PCI1
),

18 
PCIIRQ
(3, 2, 3, 
ADM5120_IRQ_PCI2
)

21 
gpio_Àd
 
	g≈28g_gpio_Àds
[] 
	g__öôd©a
 = {

22 
GPIO_LED_INV
(
ADM5120_GPIO_PIN2
, "düg", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_PIN3
, "powî", 
NULL
),

24 
GPIO_LED_INV
(
ADM5120_GPIO_PIN6
, "w™_c⁄d", 
NULL
),

25 
GPIO_LED_INV
(
ADM5120_GPIO_PIN7
, "wifi", 
NULL
),

26 
GPIO_LED_INV
(
ADM5120_GPIO_P0L2
, "usb1", 
NULL
),

27 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn1", 
NULL
),

28 
GPIO_LED_INV
(
ADM5120_GPIO_P1L2
, "usb2", 
NULL
),

29 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2", 
NULL
),

30 
GPIO_LED_INV
(
ADM5120_GPIO_P2L2
, "usb3", 
NULL
),

31 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3", 
NULL
),

32 
GPIO_LED_INV
(
ADM5120_GPIO_P3L2
, "usb4", 
NULL
),

33 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "w™", 
NULL
),

36 
u8
 
	g≈28g_vœns
[6] 
	g__öôd©a
 = {

40 
	$≈28g_ª£t
()

42 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN4
, 0);

43 
	}
}

45 
__öô
 
	$≈28g_£tup
()

47 
	`com≥x_gíîic_£tup
();

50 
	`gpio_ªque°
(
ADM5120_GPIO_PIN4
, 
NULL
);

51 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN4
, 1);

52 
adm5120_bﬂrd_ª£t
 = 
≈28g_ª£t
;

54 
	`adm5120_add_devi˚_swôch
(4, 
≈28g_vœns
);

55 
	`adm5120_add_devi˚_usb
();

57 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
≈28g_gpio_Àds
),

58 
≈28g_gpio_Àds
);

60 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
≈28g_pci_úqs
),Çp28g_pci_irqs);

61 
	}
}

63 
MIPS_MACHINE
(
MACH_ADM5120_NP28G
, "NP28G", "Com≥x NëPasßgê28G", 
≈28g_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/compex/wp54.c

12 
	~"com≥x.h
"

14 
	#WP54_KEYS_POLL_INTERVAL
 20

	)

15 
	#WP54_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WP54_KEYS_POLL_INTERVAL
)

	)

17 
mtd_∑πôi⁄
 
	gwp54g_wπ_∑πôi⁄s
[] = {

19 .
«me
 = "cfe",

20 .
	goff£t
 = 0,

21 .
	gsize
 = 0x050000,

22 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

24 .
	g«me
 = "trx",

25 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

26 .
	gsize
 = 0x3A0000,

28 .
	g«me
 = "nvram",

29 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

30 .
	gsize
 = 0x010000,

34 
adm5120_pci_úq
 
	gwp54_pci_úqs
[] 
	g__öôd©a
 = {

35 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

38 
gpio_keys_buâ⁄
 
	gwp54_gpio_buâ⁄s
[] 
	g__öôd©a
 = {

40 .
desc
 = "reset_button",

41 .
	gty≥
 = 
EV_KEY
,

42 .
	gcode
 = 
KEY_RESTART
,

43 .
	gdeboun˚_öãrvÆ
 = 
WP54_KEYS_DEBOUNCE_INTERVAL
,

44 .
	ggpio
 = 
ADM5120_GPIO_PIN4
,

48 
gpio_Àd
 
	gwp54_gpio_Àds
[] 
	g__öôd©a
 = {

49 
GPIO_LED_INV
(
ADM5120_GPIO_PIN2
, "düg", 
NULL
),

50 
GPIO_LED_INV
(
ADM5120_GPIO_PIN6
, "wœn", 
NULL
),

51 
GPIO_LED_INV
(
ADM5120_GPIO_PIN7
, "w™", 
NULL
),

52 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn1", 
NULL
),

53 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn2", 
NULL
),

56 
u8
 
	gwp54_vœns
[6] 
	g__öôd©a
 = {

60 
	$wp54_ª£t
()

62 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN3
, 0);

63 
	}
}

65 
__öô
 
	$wp54_£tup
()

67 
	`com≥x_gíîic_£tup
();

70 
	`gpio_ªque°
(
ADM5120_GPIO_PIN3
, 
NULL
);

71 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN3
, 1);

72 
adm5120_bﬂrd_ª£t
 = 
wp54_ª£t
;

74 
	`adm5120_add_devi˚_swôch
(2, 
wp54_vœns
);

75 
	`adm5120_ªgi°î_gpio_buâ⁄s
(-1, 
WP54_KEYS_POLL_INTERVAL
,

76 
	`ARRAY_SIZE
(
wp54_gpio_buâ⁄s
),

77 
wp54_gpio_buâ⁄s
);

78 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
wp54_gpio_Àds
),

79 
wp54_gpio_Àds
);

81 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
wp54_pci_úqs
), wp54_pci_irqs);

82 
	}
}

84 
MIPS_MACHINE
(
MACH_ADM5120_WP54
, "WP54", "Com≥x WP54 famûy", 
wp54_£tup
);

86 
__öô
 
	$wp54_wπ_£tup
()

88 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
wp54g_wπ_∑πôi⁄s
);

89 
adm5120_Êash0_d©a
.
∑πs
 = 
wp54g_wπ_∑πôi⁄s
;

91 
	`wp54_£tup
();

92 
	}
}

94 
MIPS_MACHINE
(
MACH_ADM5120_WP54G_WRT
, "WP54G-WRT", "Compex WP54G-WRT",

95 
wp54_wπ_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-6104k.c

12 
	~"br-61xx.h
"

14 
gpio_Àd
 
	gbr6104k_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_STD
(
ADM5120_GPIO_PIN0
, "powî", 
NULL
),

16 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "w™_•ìd", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "w™_ ka˘", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn1_•ìd", 
NULL
),

19 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn1_ ka˘", 
NULL
),

20 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn2_•ìd", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2_ ka˘", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_•ìd", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_ ka˘", 
NULL
),

24 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "œn4_•ìd", 
NULL
),

25 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "œn4_ ka˘", 
NULL
),

28 
__öô
 
	$br6104k_£tup
()

30 
	`br61xx_gíîic_£tup
();

31 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
br6104k_gpio_Àds
),

32 
br6104k_gpio_Àds
);

33 
	}
}

35 
MIPS_MACHINE
(
MACH_ADM5120_BR6104K
, "BR-6104K", "Edimax BR-6104K",

36 
br6104k_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-6104kp.c

12 
	~"br-61xx.h
"

14 
gpio_Àd
 
	gbr6104kp_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_STD
(
ADM5120_GPIO_PIN0
, "powî", 
NULL
),

16 
GPIO_LED_INV
(
ADM5120_GPIO_PIN3
, "usb1", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_PIN1
, "usb2", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "w™_•ìd", 
NULL
),

19 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "w™_ ka˘", 
NULL
),

20 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn1_•ìd", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn1_ ka˘", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn2_•ìd", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2_ ka˘", 
NULL
),

24 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_•ìd", 
NULL
),

25 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_ ka˘", 
NULL
),

26 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "œn4_•ìd", 
NULL
),

27 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "œn4_ ka˘", 
NULL
),

30 
__öô
 
	$br6104kp_£tup
()

32 
	`br61xx_gíîic_£tup
();

33 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
br6104kp_gpio_Àds
),

34 
br6104kp_gpio_Àds
);

35 
	`adm5120_add_devi˚_usb
();

36 
	}
}

38 
MIPS_MACHINE
(
MACH_ADM5120_BR6104KP
, "BR-6104KP", "Edimax BR-6104KP",

39 
br6104kp_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61x4wg.c

12 
	~"br-61xx.h
"

14 
adm5120_pci_úq
 
	gbr61x4wg_pci_úqs
[] 
	g__öôd©a
 = {

15 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

18 
gpio_Àd
 
	gbr61x4wg_gpio_Àds
[] 
	g__öôd©a
 = {

19 
GPIO_LED_STD
(
ADM5120_GPIO_PIN0
, "powî", 
NULL
),

20 
GPIO_LED_STD
(
ADM5120_GPIO_PIN5
, "wœn", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "w™_•ìd", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "w™_ ka˘", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn1_•ìd", 
NULL
),

24 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn1_ ka˘", 
NULL
),

25 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn2_•ìd", 
NULL
),

26 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2_ ka˘", 
NULL
),

27 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_•ìd", 
NULL
),

28 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_ ka˘", 
NULL
),

29 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "œn4_•ìd", 
NULL
),

30 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "œn4_ ka˘", 
NULL
),

33 
__öô
 
	$br61x4wg_£tup
()

35 
	`br61xx_gíîic_£tup
();

36 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
br61x4wg_gpio_Àds
),

37 
br61x4wg_gpio_Àds
);

38 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
br61x4wg_pci_úqs
),

39 
br61x4wg_pci_úqs
);

40 
	}
}

42 
MIPS_MACHINE
(
MACH_ADM5120_BR61X4WG
, "BR-6104WG", "Edimax BR-6104WG/6114WG",

43 
br61x4wg_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61xx.c

12 
	~"br-61xx.h
"

14 
	~<¥om/admboŸ.h
>

16 
	#BR61XX_CONFIG_OFFSET
 0x8000

	)

17 
	#BR61XX_CONFIG_SIZE
 0x1000

	)

19 
	#BR61XX_KEYS_POLL_INTERVAL
 20

	)

20 
	#BR61XX_KEYS_DEBOUNCE_INTERVAL
 (3 * 
BR61XX_KEYS_POLL_INTERVAL
)

	)

22 
mtd_∑πôi⁄
 
	gbr61xx_∑πôi⁄s
[] = {

24 .
«me
 = "admboot",

25 .
	goff£t
 = 0,

26 .
	gsize
 = 32*1024,

27 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

29 .
	g«me
 = "config",

30 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

31 .
	gsize
 = 32*1024,

33 .
	g«me
 = "firmware",

34 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

35 .
	gsize
 = 
MTDPART_SIZ_FULL
,

39 
gpio_keys_buâ⁄
 
	gbr61xx_gpio_buâ⁄s
[] 
	g__öôd©a
 = {

41 .
desc
 = "reset_button",

42 .
	gty≥
 = 
EV_KEY
,

43 .
	gcode
 = 
KEY_RESTART
,

44 .
	gdeboun˚_öãrvÆ
 = 
BR61XX_KEYS_DEBOUNCE_INTERVAL
,

45 .
	ggpio
 = 
ADM5120_GPIO_PIN2
,

49 
u8
 
	gbr61xx_vœns
[6] 
	g__öôd©a
 = {

53 
__öô
 
	$br61xx_mac_£tup
()

55 
u8
 
mac_ba£
[6];

56 
îr
;

58 
îr
 = 
	`admboŸ_gë_mac_ba£
(
BR61XX_CONFIG_OFFSET
,

59 
BR61XX_CONFIG_SIZE
, 
mac_ba£
);

61 i‡((
îr
Ë|| !
	`is_vÆid_ëhî_addr
(
mac_ba£
))

62 
	`øndom_ëhî_addr
(
mac_ba£
);

64 
	`adm5120_£tup_ëh_macs
(
mac_ba£
);

65 
	}
}

67 
__öô
 
	$br61xx_gíîic_£tup
()

70 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
br61xx_∑πôi⁄s
);

71 
adm5120_Êash0_d©a
.
∑πs
 = 
br61xx_∑πôi⁄s
;

72 
	`adm5120_add_devi˚_Êash
(0);

74 
	`adm5120_add_devi˚_u¨t
(0);

75 
	`adm5120_add_devi˚_u¨t
(1);

77 
	`adm5120_add_devi˚_swôch
(5, 
br61xx_vœns
);

79 
	`adm5120_ªgi°î_gpio_buâ⁄s
(-1, 
BR61XX_KEYS_POLL_INTERVAL
,

80 
	`ARRAY_SIZE
(
br61xx_gpio_buâ⁄s
),

81 
br61xx_gpio_buâ⁄s
);

83 
	`br61xx_mac_£tup
();

84 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61xx.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_öfo.h
>

21 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

23 
__öô
 
	$br61xx_gíîic_£tup
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/adm5120/generic/eb-214a.c

13 
	~<asm/addr•a˚.h
>

14 
	~<asm/byã‹dî.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/gpio.h
>

18 
	~<löux/úq.h
>

19 
	~<löux/ëhîdevi˚.h
>

21 
	~<asm/mùs_machöe.h
>

23 
	~<asm/mach-adm5120/adm5120_öfo.h
>

24 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

25 
	~<asm/mach-adm5120/adm5120_defs.h
>

28 
	#EB214A_CONFIG_OFFSET
 0x4000

	)

30 
	#EB214A_KEYS_POLL_INTERVAL
 20

	)

31 
	#EB214A_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EB214A_KEYS_POLL_INTERVAL
)

	)

33 
mtd_∑πôi⁄
 
	geb214a_∑πôi⁄s
[] = {

35 .
«me
 = "bootloader",

36 .
	goff£t
 = 0,

37 .
	gsize
 = 32*1024,

38 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

40 .
	g«me
 = "config",

41 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

42 .
	gsize
 = 32*1024,

44 .
	g«me
 = "firmware",

45 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

46 .
	gsize
 = 
MTDPART_SIZ_FULL
,

50 
adm5120_pci_úq
 
	geb214a_pci_úqs
[] 
	g__öôd©a
 = {

51 
PCIIRQ
(4, 0, 1, 
ADM5120_IRQ_PCI0
),

52 
PCIIRQ
(4, 1, 2, 
ADM5120_IRQ_PCI0
),

53 
PCIIRQ
(4, 2, 3, 
ADM5120_IRQ_PCI0
),

56 
gpio_Àd
 
	geb214a_gpio_Àds
[] 
	g__öôd©a
 = {

57 
GPIO_LED_INV
(
ADM5120_GPIO_PIN7
, "powî", 
NULL
),

58 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn", 
NULL
),

59 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "usb1", 
NULL
),

60 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "usb2", 
NULL
),

61 
GPIO_LED_INV
(
ADM5120_GPIO_P4L2
, "usb3", 
NULL
),

62 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "usb4", 
NULL
),

65 
gpio_keys_buâ⁄
 
	geb214a_gpio_buâ⁄s
[] 
	g__öôd©a
 = {

67 .
desc
 = "reset",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
EB214A_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
ADM5120_GPIO_PIN1
,

75 
u8
 
	geb214a_vœns
[6] 
	g__öôd©a
 = {

79 
__öô
 
	$eb214a_mac_£tup
()

81 
u8
 
mac_ba£
[6];

82 
u8
 *
cfg
;

83 
i
;

85 
cfg
 = (
u8
 *Ë
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
 + 
EB214A_CONFIG_OFFSET
);

86 
i
 = 0; i < 6; i++)

87 
mac_ba£
[
i
] = 
cfg
[i];

89 i‡(!
	`is_vÆid_ëhî_addr
(
mac_ba£
))

90 
	`øndom_ëhî_addr
(
mac_ba£
);

92 
	`adm5120_£tup_ëh_macs
(
mac_ba£
);

93 
	}
}

95 
__öô
 
	$eb214a_£tup
()

97 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
eb214a_∑πôi⁄s
);

98 
adm5120_Êash0_d©a
.
∑πs
 = 
eb214a_∑πôi⁄s
;

99 
	`adm5120_add_devi˚_Êash
(0);

101 
	`adm5120_add_devi˚_u¨t
(0);

104 
	`adm5120_add_devi˚_swôch
(5, 
eb214a_vœns
);

106 
	`eb214a_mac_£tup
();

108 
	`adm5120_ªgi°î_gpio_buâ⁄s
(-1, 
EB214A_KEYS_POLL_INTERVAL
,

109 
	`ARRAY_SIZE
(
eb214a_gpio_buâ⁄s
),

110 
eb214a_gpio_buâ⁄s
);

112 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
eb214a_gpio_Àds
),

113 
eb214a_gpio_Àds
);

115 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
eb214a_pci_úqs
),

116 
eb214a_pci_úqs
);

118 
	}
}

120 
MIPS_MACHINE
(
MACH_ADM5120_EB_214A
, "EB-214A", "Gíîi¯EB-214A", 
eb214a_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120-rt.c

12 
	~"öföe⁄.h
"

14 
gpio_Àd
 
	gósy5120_π_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_INV
(
ADM5120_GPIO_PIN6
, "u£r", 
NULL
),

16 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn0_Àd1", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "œn0_Àd2", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn1_Àd1", 
NULL
),

19 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn1_Àd2", 
NULL
),

20 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2_Àd1", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn2_Àd2", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_Àd1", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_Àd2", 
NULL
),

24 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "w™", 
NULL
),

27 
adm5120_pci_úq
 
	gósy5120_π_pci_úqs
[] 
	g__öôd©a
 = {

28 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

31 
u8
 
	gósy5120_π_vœns
[6] 
	g__öôd©a
 = {

35 
__öô
 
	$ósy5120_π_£tup
()

37 
	`ósy_£tup_bga
();

39 
	`adm5120_add_devi˚_swôch
(5, 
ósy5120_π_vœns
);

40 
	`adm5120_add_devi˚_usb
();

41 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
ósy5120_π_gpio_Àds
),

42 
ósy5120_π_gpio_Àds
);

43 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
ósy5120_π_pci_úqs
),

44 
ósy5120_π_pci_úqs
);

45 
	}
}

47 
MIPS_MACHINE
(
MACH_ADM5120_EASY5120RT
, "EASY5120-RT",

48 "Inföe⁄ EASY 5120-RT Re„ªn˚ Bﬂrd", 
ósy5120_π_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120-wvoip.c

12 
	~"öföe⁄.h
"

14 
__öô
 
	$ósy5120wvoù_£tup
()

16 
	`ósy_£tup_bga
();

17 
	`adm5120_add_devi˚_swôch
(6, 
NULL
);

21 
	}
}

23 
MIPS_MACHINE
(
MACH_ADM5120_EASY5120WVOIP
, "EASY5120WVoIP",

24 "Inföe⁄ EASY 5120-WVoIP Re„ªn˚ Bﬂrd", 
ósy5120wvoù_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120p-ata.c

12 
	~"öföe⁄.h
"

14 
__öô
 
	$ósy5120∑è_£tup
()

16 
	`ósy_£tup_pqÂ
();

18 
	`adm5120_add_devi˚_swôch
(6, 
NULL
);

19 
	}
}

21 
MIPS_MACHINE
(
MACH_ADM5120_EASY5120PATA
, "EASY5120P-ATA",

22 "Inföe⁄ EASY 5120P-ATA Re„ªn˚ Bﬂrd", 
ósy5120∑è_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy83000.c

12 
	~"öföe⁄.h
"

14 
__öô
 
	$ósy83000_£tup
()

16 
	`ósy_£tup_pqÂ
();

17 
	`adm5120_add_devi˚_swôch
(6, 
NULL
);

20 
	}
}

22 
MIPS_MACHINE
(
MACH_ADM5120_EASY83000
, "EASY8300",

23 "Inföe⁄ EASY 83000 Re„ªn˚ Bﬂrd", 
ósy83000_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/infineon.c

12 
	~"öföe⁄.h
"

14 
	~<¥om/admboŸ.h
>

16 
	#EASY_CONFIG_OFFSET
 0x10000

	)

17 
	#EASY_CONFIG_SIZE
 0x1000

	)

19 
mtd_∑πôi⁄
 
	gósy_∑πôi⁄s
[] = {

21 .
«me
 = "admboot",

22 .
	goff£t
 = 0,

23 .
	gsize
 = 64*1024,

24 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

26 .
	g«me
 = "boardcfg",

27 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

28 .
	gsize
 = 64*1024,

30 .
	g«me
 = "firmware",

31 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

32 .
	gsize
 = 
MTDPART_SIZ_FULL
,

36 
__öô
 
	$ósy_£tup_mac
()

38 
u8
 
mac_ba£
[6];

39 
îr
;

41 
îr
 = 
	`admboŸ_gë_mac_ba£
(
EASY_CONFIG_OFFSET
,

42 
EASY_CONFIG_SIZE
, 
mac_ba£
);

44 i‡((
îr
Ë|| !
	`is_vÆid_ëhî_addr
(
mac_ba£
))

45 
	`øndom_ëhî_addr
(
mac_ba£
);

47 
	`adm5120_£tup_ëh_macs
(
mac_ba£
);

48 
	}
}

50 
	$swôch_b™k_gpio3
(
b™k
)

52 
b™k
) {

54 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN3
, 0);

57 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN3
, 1);

60 
	}
}

62 
__öô
 
	$ósy_£tup_pqÂ
()

65 
	`gpio_ªque°
(
ADM5120_GPIO_PIN3
, 
NULL
);

66 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN3
, 0);

67 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio3
;

69 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
ósy_∑πôi⁄s
);

70 
adm5120_Êash0_d©a
.
∑πs
 = 
ósy_∑πôi⁄s
;

72 
	`adm5120_add_devi˚_u¨t
(0);

73 
	`adm5120_add_devi˚_u¨t
(1);

75 
	`adm5120_add_devi˚_Êash
(0);

77 
	`ósy_£tup_mac
();

78 
	}
}

80 
	$swôch_b™k_gpio5
(
b™k
)

82 
b™k
) {

84 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 0);

87 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 1);

90 
	}
}

92 
__öô
 
	$ósy_£tup_bga
()

95 
	`gpio_ªque°
(
ADM5120_GPIO_PIN5
, 
NULL
);

96 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN5
, 0);

97 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio5
;

99 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
ósy_∑πôi⁄s
);

100 
adm5120_Êash0_d©a
.
∑πs
 = 
ósy_∑πôi⁄s
;

102 
	`adm5120_add_devi˚_u¨t
(0);

103 
	`adm5120_add_devi˚_u¨t
(1);

105 
	`adm5120_add_devi˚_Êash
(0);

107 
	`ósy_£tup_mac
();

108 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/infineon/infineon.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_defs.h
>

21 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

22 
	~<asm/mach-adm5120/adm5120_öfo.h
>

24 
	$ósy_£tup_pqÂ
(Ë
__öô
;

25 
	$ósy_£tup_bga
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-11x.c

12 
	~"rb-1xx.h
"

14 
gpio_Àd
 
	grb11x_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_STD
(
ADM5120_GPIO_PIN3
, "u£r", 
NULL
),

16 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "œn_•ìd", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn_ ka˘", 
NULL
),

20 
u8
 
	grb11x_vœns
[6] 
	g__öôd©a
 = {

24 
__öô
 
	$rb11x_£tup
()

26 
	`rb1xx_gíîic_£tup
();

27 
	`rb1xx_add_devi˚_«nd
();

29 
	`adm5120_add_devi˚_swôch
(1, 
rb11x_vœns
);

30 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
rb11x_gpio_Àds
),

31 
rb11x_gpio_Àds
);

32 
	}
}

34 
MIPS_MACHINE
(
MACH_ADM5120_RB_11X
, "11x", "Mikrotik RouterBOARD 111/112",

35 
rb11x_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-133.c

12 
	~"rb-1xx.h
"

14 
gpio_Àd
 
	grb133_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_STD
(
ADM5120_GPIO_PIN6
, "powî", 
NULL
),

16 
GPIO_LED_STD
(
ADM5120_GPIO_PIN5
, "u£r", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn1_•ìd", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn1_ ka˘", 
NULL
),

19 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn2_•ìd", 
NULL
),

20 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn2_ ka˘", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "œn3_•ìd", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn3_ ka˘", 
NULL
),

25 
u8
 
	grb133_vœns
[6] 
	g__öôd©a
 = {

29 
__öô
 
	$rb133_£tup
()

31 
	`rb1xx_gíîic_£tup
();

32 
	`rb1xx_add_devi˚_«nd
();

34 
	`adm5120_add_devi˚_swôch
(3, 
rb133_vœns
);

35 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
rb133_gpio_Àds
),

36 
rb133_gpio_Àds
);

37 
	}
}

39 
MIPS_MACHINE
(
MACH_ADM5120_RB_133
, "133", "Mikrotik RouterBOARD 133",

40 
rb133_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-133c.c

12 
	~"rb-1xx.h
"

14 
gpio_Àd
 
	grb133c_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_STD
(
ADM5120_GPIO_PIN6
, "powî", 
NULL
),

16 
GPIO_LED_STD
(
ADM5120_GPIO_PIN5
, "u£r", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn1_•ìd", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn1_ ka˘", 
NULL
),

21 
u8
 
	grb133c_vœns
[6] 
	g__öôd©a
 = {

25 
__öô
 
	$rb133c_£tup
()

27 
	`rb1xx_gíîic_£tup
();

28 
	`rb1xx_add_devi˚_«nd
();

30 
	`adm5120_add_devi˚_swôch
(1, 
rb133c_vœns
);

31 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
rb133c_gpio_Àds
),

32 
rb133c_gpio_Àds
);

33 
	}
}

35 
MIPS_MACHINE
(
MACH_ADM5120_RB_133C
, "133C", "Mikrotik RouterBOARD 133C",

36 
rb133c_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-150.c

12 
	~"rb-1xx.h
"

14 
	#RB150_NAND_BASE
 0x1FC80000

	)

15 
	#RB150_NAND_SIZE
 1

	)

17 
	#RB150_GPIO_NAND_READY
 
ADM5120_GPIO_PIN0


	)

18 
	#RB150_GPIO_NAND_NCE
 
ADM5120_GPIO_PIN1


	)

19 
	#RB150_GPIO_NAND_CLE
 
ADM5120_GPIO_P2L2


	)

20 
	#RB150_GPIO_NAND_ALE
 
ADM5120_GPIO_P3L2


	)

21 
	#RB150_GPIO_RESET_BUTTON
 
ADM5120_GPIO_PIN1


	)

23 
	#RB150_NAND_DELAY
 100

	)

25 
	#RB150_NAND_WRITE
(
v
) \

26 
	`wrôeb
((
v
), (
__iomem
 *)
	`KSEG1ADDR
(
RB150_NAND_BASE
))

	)

28 
ªsour˚
 
	grb150_«nd_ªsour˚s
[] 
	g__öôd©a
 = {

30 .
°¨t
 = 
RB150_NAND_BASE
,

31 .
	gíd
 = 
RB150_NAND_BASE
 + 
RB150_NAND_SIZE
-1,

32 .
	gÊags
 = 
IORESOURCE_MEM
,

36 
gpio_Àd
 
	grb150_gpio_Àds
[] 
	g__öôd©a
 = {

37 
GPIO_LED_STD
(
ADM5120_GPIO_P0L2
, "u£r", 
NULL
),

38 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "œn1_Àd1", 
NULL
),

39 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn1_Àd2", 
NULL
),

40 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn5_Àd1", 
NULL
),

41 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn5_Àd2", 
NULL
),

42 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn4_Àd1", 
NULL
),

43 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn4_Àd2", 
NULL
),

44 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_Àd1", 
NULL
),

45 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_Àd2", 
NULL
),

46 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "œn2_Àd1", 
NULL
),

47 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "œn2_Àd2", 
NULL
),

50 
u8
 
	grb150_vœns
[6] 
	g__öôd©a
 = {

54 
	$rb150_«nd_dev_ªady
(
mtd_öfo
 *
mtd
)

56  
	`gpio_gë_vÆue
(
RB150_GPIO_NAND_READY
);

57 
	}
}

59 
	$rb150_«nd_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
cmd
,

60 
˘æ
)

62 i‡(
˘æ
 & 
NAND_CTRL_CHANGE
) {

63 
	`gpio_£t_vÆue
(
RB150_GPIO_NAND_CLE
, (
˘æ
 & 
NAND_CLE
) ? 1 : 0);

64 
	`gpio_£t_vÆue
(
RB150_GPIO_NAND_ALE
, (
˘æ
 & 
NAND_ALE
) ? 1 : 0);

65 
	`gpio_£t_vÆue
(
RB150_GPIO_NAND_NCE
, (
˘æ
 & 
NAND_NCE
) ? 0 : 1);

68 
	`udñay
(
RB150_NAND_DELAY
);

70 i‡(
cmd
 !
NAND_CMD_NONE
)

71 
	`RB150_NAND_WRITE
(
cmd
);

72 
	}
}

74 
__öô
 
	$rb150_add_devi˚_«nd
()

76 
∂©f‹m_devi˚
 *
pdev
;

77 
îr
;

80 
	`gpio_ªque°
(
RB150_GPIO_NAND_READY
, "nand-ready");

81 
	`gpio_dúe˘i⁄_öput
(
RB150_GPIO_NAND_READY
);

82 
	`gpio_ªque°
(
RB150_GPIO_NAND_NCE
, "nand-nce");

83 
	`gpio_dúe˘i⁄_ouçut
(
RB150_GPIO_NAND_NCE
, 1);

84 
	`gpio_ªque°
(
RB150_GPIO_NAND_CLE
, "nand-cle");

85 
	`gpio_dúe˘i⁄_ouçut
(
RB150_GPIO_NAND_CLE
, 0);

86 
	`gpio_ªque°
(
RB150_GPIO_NAND_ALE
, "nand-ale");

87 
	`gpio_dúe˘i⁄_ouçut
(
RB150_GPIO_NAND_ALE
, 0);

89 
pdev
 = 
	`∂©f‹m_devi˚_Æloc
("gen_nand", -1);

90 i‡(!
pdev
)

91 
îr_out
;

93 
îr
 = 
	`∂©f‹m_devi˚_add_ªsour˚s
(
pdev
, 
rb150_«nd_ªsour˚s
,

94 
	`ARRAY_SIZE
(
rb150_«nd_ªsour˚s
));

95 i‡(
îr
)

96 
îr_put
;

99 
rb1xx_«nd_d©a
.
˘æ
.
cmd_˘æ
 = 
rb150_«nd_cmd_˘æ
;

100 
rb1xx_«nd_d©a
.
˘æ
.
dev_ªady
 = 
rb150_«nd_dev_ªady
;

102 
îr
 = 
	`∂©f‹m_devi˚_add_d©a
(
pdev
, &
rb1xx_«nd_d©a
,

103 (
rb1xx_«nd_d©a
));

104 i‡(
îr
)

105 
îr_put
;

107 
îr
 = 
	`∂©f‹m_devi˚_add
(
pdev
);

108 i‡(
îr
)

109 
îr_put
;

113 
îr_put
:

114 
	`∂©f‹m_devi˚_put
(
pdev
);

115 
îr_out
:

117 
	}
}

119 
__öô
 
	$rb150_£tup
()

121 
rb1xx_gpio_buâ⁄s
[0].
gpio
 = 
RB150_GPIO_RESET_BUTTON
;

122 
	`rb1xx_gíîic_£tup
();

123 
	`rb150_add_devi˚_«nd
();

125 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
rb150_gpio_Àds
),

126 
rb150_gpio_Àds
);

127 
	`adm5120_add_devi˚_swôch
(5, 
rb150_vœns
);

128 
	}
}

130 
MIPS_MACHINE
(
MACH_ADM5120_RB_150
, "miniROUTER", "Mikrotik RouterBOARD 150",

131 
rb150_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-153.c

12 
	~"rb-1xx.h
"

14 
ªsour˚
 
	grb153_cf_ªsour˚s
[] 
	g__öôd©a
 = {

16 .
«me
 = "cf_membase",

17 .
	g°¨t
 = 
ADM5120_EXTIO1_BASE
,

18 .
	gíd
 = 
ADM5120_EXTIO1_BASE
 + 
ADM5120_EXTIO1_SIZE
-1 ,

19 .
	gÊags
 = 
IORESOURCE_MEM


21 .
	g«me
 = "cf_irq",

22 .
	g°¨t
 = 
ADM5120_IRQ_GPIO4
,

23 .
	gíd
 = 
ADM5120_IRQ_GPIO4
,

24 .
	gÊags
 = 
IORESOURCE_IRQ


28 
gpio_Àd
 
	grb153_gpio_Àds
[] 
	g__öôd©a
 = {

29 
GPIO_LED_STD
(
ADM5120_GPIO_PIN5
, "u£r", 
NULL
),

30 
GPIO_LED_INV
(
ADM5120_GPIO_P0L1
, "œn1_•ìd", 
NULL
),

31 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn1_ ka˘", 
NULL
),

32 
GPIO_LED_INV
(
ADM5120_GPIO_P1L1
, "œn5_•ìd", 
NULL
),

33 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn5_ ka˘", 
NULL
),

34 
GPIO_LED_INV
(
ADM5120_GPIO_P2L1
, "œn4_•ìd", 
NULL
),

35 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn4_ ka˘", 
NULL
),

36 
GPIO_LED_INV
(
ADM5120_GPIO_P3L1
, "œn3_•ìd", 
NULL
),

37 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn3_ ka˘", 
NULL
),

38 
GPIO_LED_INV
(
ADM5120_GPIO_P4L1
, "œn2_•ìd", 
NULL
),

39 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "œn2_ ka˘", 
NULL
),

42 
u8
 
	grb153_vœns
[6] 
	g__öôd©a
 = {

46 
__öô
 
	$rb153_add_devi˚_cf
()

49 
	`adm5120_gpio_csx1_íabÀ
();

52 
	`adm5120_gpio_ew_íabÀ
();

54 
	`∂©f‹m_devi˚_ªgi°î_sim∂e
("pata-rb153-cf", -1,

55 
rb153_cf_ªsour˚s
, 
	`ARRAY_SIZE
(rb153_cf_resources));

56 
	}
}

58 
__öô
 
	$rb153_£tup
()

60 
	`rb1xx_gíîic_£tup
();

61 
	`rb1xx_add_devi˚_«nd
();

62 
	`rb153_add_devi˚_cf
();

64 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
rb153_gpio_Àds
),

65 
rb153_gpio_Àds
);

66 
	`adm5120_add_devi˚_swôch
(5, 
rb153_vœns
);

67 
	}
}

69 
MIPS_MACHINE
(
MACH_ADM5120_RB_153
, "150", "Mikrotik RouterBOARD 153",

70 
rb153_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-192.c

12 
	~"rb-1xx.h
"

14 
u8
 
	grb192_vœns
[6] 
	g__öôd©a
 = {

18 
__öô
 
	$rb192_£tup
()

20 
	`rb1xx_gíîic_£tup
();

21 
	`rb1xx_add_devi˚_«nd
();

23 
	`adm5120_add_devi˚_swôch
(6, 
rb192_vœns
);

24 
	}
}

26 
MIPS_MACHINE
(
MACH_ADM5120_RB_192
, "192", "Mikrotik RouterBOARD 192",

27 
rb192_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-1xx.c

18 
	~"rb-1xx.h
"

20 
	#RB1XX_NAND_CHIP_DELAY
 25

	)

22 
	#RB1XX_KEYS_POLL_INTERVAL
 20

	)

23 
	#RB1XX_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RB1XX_KEYS_POLL_INTERVAL
)

	)

25 
adm5120_pci_úq
 
	grb1xx_pci_úqs
[] 
	g__öôd©a
 = {

26 
PCIIRQ
(1, 0, 1, 
ADM5120_IRQ_PCI0
),

27 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI1
),

28 
PCIIRQ
(3, 0, 1, 
ADM5120_IRQ_PCI2
)

31 
mtd_∑πôi⁄
 
	grb1xx_n‹_∑πs
[] = {

33 .
«me
 = "booter",

34 .
	goff£t
 = 0,

35 .
	gsize
 = 64*1024,

36 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

38 .
	g«me
 = "firmware",

39 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

40 .
	gsize
 = 
MTDPART_SIZ_FULL
,

44 
mtd_∑πôi⁄
 
	grb1xx_«nd_∑πs
[] = {

46 .
«me
 = "kernel",

47 .
	goff£t
 = 0,

48 .
	gsize
 = 4 * 1024 * 1024,

50 .
	g«me
 = "rootfs",

51 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

52 .
	gsize
 = 
MTDPART_SIZ_FULL


61 
«nd_ec˛ayout
 
	grb1xx_«nd_ec˛ayout
 = {

62 .
eccbyãs
 = 6,

63 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

64 .
	goobavaû
 = 9,

65 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

70 
	$rb1xx_«nd_fixup
(
mtd_öfo
 *
mtd
)

72 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

74 i‡(
mtd
->
wrôesize
 == 512)

75 
chù
->
ecc
.
œyout
 = &
rb1xx_«nd_ec˛ayout
;

78 
	}
}

80 
∂©f‹m_«nd_d©a
 
rb1xx_«nd_d©a
 
	g__öôd©a
 = {

81 .
chù
 = {

82 .
ƒ_chùs
 = 1,

83 .
	gƒ_∑πôi⁄s
 = 
ARRAY_SIZE
(
rb1xx_«nd_∑πs
),

84 .
	g∑πôi⁄s
 = 
rb1xx_«nd_∑πs
,

85 .
	gchù_dñay
 = 
RB1XX_NAND_CHIP_DELAY
,

86 .
	gchù_fixup
 = 
rb1xx_«nd_fixup
,

90 
gpio_keys_buâ⁄
 
	grb1xx_gpio_buâ⁄s
[] 
	g__öôd©a
 = {

92 .
desc
 = "reset_button",

93 .
	gty≥
 = 
EV_KEY
,

94 .
	gcode
 = 
KEY_RESTART
,

95 .
	gdeboun˚_öãrvÆ
 = 
RB1XX_KEYS_DEBOUNCE_INTERVAL
,

96 .
	ggpio
 = 
ADM5120_GPIO_PIN7
,

100 
__öô
 
	$rb1xx_mac_£tup
()

102 i‡(
rb_hs
.
mac_ba£
 !
NULL
 && 
	`is_vÆid_ëhî_addr
(rb_hs.mac_base)) {

103 
	`adm5120_£tup_ëh_macs
(
rb_hs
.
mac_ba£
);

105 
u8
 
mac
[
ETH_ALEN
];

107 
	`øndom_ëhî_addr
(
mac
);

108 
	`adm5120_£tup_ëh_macs
(
mac
);

110 
	}
}

112 
__öô
 
	$rb1xx_add_devi˚_Êash
()

115 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
rb1xx_n‹_∑πs
);

116 
adm5120_Êash0_d©a
.
∑πs
 = 
rb1xx_n‹_∑πs
;

117 
adm5120_Êash0_d©a
.
wödow_size
 = 128*1024;

119 
	`adm5120_add_devi˚_Êash
(0);

120 
	}
}

122 
__öô
 
	$rb1xx_add_devi˚_«nd
()

125 
	`adm5120_«nd_íabÀ
();

128 
	`adm5120_«nd_£t_•n
(1);

129 
	`adm5120_«nd_£t_w≤
(0);

131 
	`adm5120_add_devi˚_«nd
(&
rb1xx_«nd_d©a
);

132 
	}
}

134 
__öô
 
	$rb1xx_gíîic_£tup
()

136 i‡(
	`adm5120_∑ckage_bga
())

137 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb1xx_pci_úqs
),

138 
rb1xx_pci_úqs
);

140 
	`adm5120_add_devi˚_u¨t
(0);

141 
	`adm5120_add_devi˚_u¨t
(1);

143 
	`adm5120_ªgi°î_gpio_buâ⁄s
(-1, 
RB1XX_KEYS_POLL_INTERVAL
,

144 
	`ARRAY_SIZE
(
rb1xx_gpio_buâ⁄s
),

145 
rb1xx_gpio_buâ⁄s
);

147 
	`rb1xx_add_devi˚_Êash
();

148 
	`rb1xx_mac_£tup
();

149 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-1xx.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/dñay.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/úq.h
>

17 
	~<löux/ëhîdevi˚.h
>

19 
	~<asm/mùs_machöe.h
>

21 
	~<asm/mach-adm5120/adm5120_defs.h
>

22 
	~<asm/mach-adm5120/adm5120_«nd.h
>

23 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

24 
	~<asm/mach-adm5120/adm5120_öfo.h
>

26 
	~<¥om/rouãrboŸ.h
>

28 
∂©f‹m_«nd_d©a
 
rb1xx_«nd_d©a
 
__öôd©a
;

29 
gpio_keys_buâ⁄
 
rb1xx_gpio_buâ⁄s
[] 
__öôd©a
;

31 
	$rb1xx_add_devi˚_Êash
(Ë
__öô
;

32 
	$rb1xx_add_devi˚_«nd
(Ë
__öô
;

33 
	$rb1xx_gíîic_£tup
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/adm5120/motorola/pmugw.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~<asm/mùs_machöe.h
>

20 
	~<asm/mach-adm5120/adm5120_defs.h
>

21 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

22 
	~<asm/mach-adm5120/adm5120_öfo.h
>

24 
	~<¥om/admboŸ.h
>

26 
	#PMUGW_CONFIG_OFFSET
 0x10000

	)

27 
	#PMUGW_CONFIG_SIZE
 0x1000

	)

29 
mtd_∑πôi⁄
 
	gpmugw_∑πôi⁄s
[] = {

31 .
«me
 = "admboot",

32 .
	goff£t
 = 0,

33 .
	gsize
 = 64*1024,

34 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

36 .
	g«me
 = "boardcfg",

37 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

38 .
	gsize
 = 64*1024,

40 .
	g«me
 = "firmware",

41 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

42 .
	gsize
 = 
MTDPART_SIZ_FULL
,

46 
u8
 
	gpmugw_vœns
[6] 
	g__öôd©a
 = {

50 
__öô
 
	$pmugw_£tup_mac
()

52 
u8
 
mac_ba£
[6];

53 
îr
;

55 
îr
 = 
	`admboŸ_gë_mac_ba£
(
PMUGW_CONFIG_OFFSET
,

56 
PMUGW_CONFIG_SIZE
, 
mac_ba£
);

58 i‡((
îr
Ë|| !
	`is_vÆid_ëhî_addr
(
mac_ba£
))

59 
	`øndom_ëhî_addr
(
mac_ba£
);

61 
	`adm5120_£tup_ëh_macs
(
mac_ba£
);

62 
	}
}

64 
	$swôch_b™k_gpio5
(
b™k
)

66 
b™k
) {

68 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 0);

71 
	`gpio_£t_vÆue
(
ADM5120_GPIO_PIN5
, 1);

74 
	}
}

76 
__öô
 
	$pmugw_£tup
()

79 
	`gpio_ªque°
(
ADM5120_GPIO_PIN5
, 
NULL
);

80 
	`gpio_dúe˘i⁄_ouçut
(
ADM5120_GPIO_PIN5
, 0);

81 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio5
;

83 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
pmugw_∑πôi⁄s
);

84 
adm5120_Êash0_d©a
.
∑πs
 = 
pmugw_∑πôi⁄s
;

86 
	`adm5120_add_devi˚_u¨t
(1);

87 
	`adm5120_add_devi˚_u¨t
(0);

89 
	`adm5120_add_devi˚_Êash
(0);

91 
	`pmugw_£tup_mac
();

92 
	`adm5120_add_devi˚_swôch
(5, 
pmugw_vœns
);

93 
	}
}

95 
MIPS_MACHINE
(
MACH_ADM5120_PMUGW
, "PMUGW", "Motorola Powerline MU Gateway",

96 
pmugw_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/osbridge/5gxi.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/úq.h
>

15 
	~<löux/ëhîdevi˚.h
>

17 
	~<asm/mùs_machöe.h
>

19 
	~<asm/mach-adm5120/adm5120_defs.h
>

20 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

21 
	~<asm/mach-adm5120/adm5120_öfo.h
>

23 
mtd_∑πôi⁄
 
	gosbridge_5gxi_∑πôi⁄s
[] = {

25 .
«me
 = "bootloader",

26 .
	goff£t
 = 0,

27 .
	gsize
 = 64*1024,

28 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

30 .
	g«me
 = "boardcfg",

31 .
	goff£t
 = 64*1024,

32 .
	gsize
 = 64*1024,

34 .
	g«me
 = "firmware",

35 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

36 .
	gsize
 = 
MTDPART_SIZ_FULL
,

40 
gpio_Àd
 
	gosbridge_5gxi_gpio_Àds
[] 
	g__öôd©a
 = {

41 
GPIO_LED_INV
(
ADM5120_GPIO_PIN6
, "5gxi:gªí:u£r", 
NULL
),

42 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "5gxi:yñlow:œn", 
NULL
),

45 
adm5120_pci_úq
 
	gosbridge_5gxi_pci_úqs
[] 
	g__öôd©a
 = {

46 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

49 
u8
 
	gosbridge_5gxi_vœns
[6] 
	g__öôd©a
 = {

53 
__öô
 
	$osbridge_5gxi_£tup
()

55 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
osbridge_5gxi_∑πôi⁄s
);

56 
adm5120_Êash0_d©a
.
∑πs
 = 
osbridge_5gxi_∑πôi⁄s
;

58 
	`adm5120_add_devi˚_u¨t
(0);

59 
	`adm5120_add_devi˚_u¨t
(1);

61 
	`adm5120_add_devi˚_Êash
(0);

63 
	`adm5120_add_devi˚_swôch
(1, 
osbridge_5gxi_vœns
);

64 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
osbridge_5gxi_gpio_Àds
),

65 
osbridge_5gxi_gpio_Àds
);

66 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
osbridge_5gxi_pci_úqs
),

67 
osbridge_5gxi_pci_úqs
);

68 
	}
}

70 
MIPS_MACHINE
(
MACH_ADM5120_5GXI
, "5GXi", "OSBRiDGE 5GXi/5XLi board",

71 
osbridge_5gxi_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/admboot.c

12 
	~<löux/ty≥s.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/î∫o.h
>

16 
	~<asm/addr•a˚.h
>

17 
	~<asm/byã‹dî.h
>

19 
	~<asm/mach-adm5120/adm5120_defs.h
>

20 
	~<¥om/admboŸ.h
>

21 
	~"¥om_ªad.h
"

23 
	#ADMBOOT_MAGIC_MAC_BASE
 0x636D676D

	)

24 
	#ADMBOOT_MAGIC_MAC_BASE_BR6104XX
 0x31305348

	)

26 
__öô
 
	$admboŸ_gë_mac_ba£
(
u32
 
off£t
, u32 
Àn
, 
u8
 *
mac
)

28 
u8
 *
cfg
;

29 
i
;

31 
cfg
 = (
u8
 *Ë
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
 + 
off£t
);

32 
i
 = 0; i < 
Àn
; i += 4) {

33 
u32
 
magic
;

35 
magic
 = 
	`¥om_ªad_À32
(
cfg
 + 
i
);

36 i‡(
magic
 =
ADMBOOT_MAGIC_MAC_BASE
) {

37 
j
;

39 
j
 = 0; j < 6; j++)

40 
mac
[
j
] = 
cfg
[
i
 + 4 + j];

44 i‡(
magic
 =
ADMBOOT_MAGIC_MAC_BASE_BR6104XX
) {

45 
j
;

47 
j
 = 0; j < 6; j++)

48 
mac
[
j
] = 
cfg
[
i
 + 7 + j];

54  -
ENXIO
;

55 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/bootbase.c

12 
	~<löux/ty≥s.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/°rög.h
>

17 
	~<asm/boŸöfo.h
>

18 
	~<asm/addr•a˚.h
>

19 
	~<asm/byã‹dî.h
>

21 
	~<asm/mach-adm5120/adm5120_defs.h
>

22 
	~<¥om/zynos.h
>

23 
	~"¥om_ªad.h
"

25 
	#ZYNOS_INFO_ADDR
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
+0x3F90)

	)

26 
	#ZYNOS_HDBG_ADDR
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
+0x4000)

	)

27 
	#BOOTEXT_ADDR_MIN
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
)

	)

28 
	#BOOTEXT_ADDR_MAX
 (
BOOTEXT_ADDR_MIN
 + (2*1024*1024))

	)

30 
	gboŸba£_found
;

31 
zynos_bﬂrd_öfo
 *
	gbﬂrd_öfo
;

33 
boŸba£_öfo
 
	gboŸba£_öfo
;

35 
ölöe
 
	$boŸba£_dbg¨ó_¥e£¡
(
u8
 *
d©a
)

37 
u32
 
t
;

39 
t
 = 
	`¥om_ªad_be32
(
d©a
+5);

40 i‡(
t
 !
ZYNOS_MAGIC_DBGAREA1
)

43 
t
 = 
	`¥om_ªad_be32
(
d©a
+9);

44 i‡(
t
 !
ZYNOS_MAGIC_DBGAREA2
)

48 
	}
}

50 
ölöe
 
u32
 
	$boŸba£_gë_boŸext_addr
()

52  
	`¥om_ªad_be32
(&
bﬂrd_öfo
->
boŸext_addr
);

53 
	}
}

55 
ölöe
 
	$boŸba£_gë_mac
(
u8
 *
mac
)

57 
i
;

59 
i
 = 0; i < 6; i++)

60 
mac
[
i
] = 
bﬂrd_öfo
->mac[i];

61 
	}
}

63 
ölöe
 
u16
 
	$boŸba£_gë_víd‹_id
()

65 
	#CHECK_VENDOR
(
n
Ë(
	`°∫icmp
(
bﬂrd_öfo
->
víd‹
, (n), 
	`°æí
“)Ë=0)

	)

66 
víd‹
[
ZYNOS_NAME_LEN
];

67 
i
;

69 
i
 = 0; i < 
ZYNOS_NAME_LEN
; i++)

70 
víd‹
[
i
] = 
bﬂrd_öfo
->vendor[i];

72 
	`CHECK_VENDOR
(
ZYNOS_VENDOR_ZYXEL
)

73  
ZYNOS_VENDOR_ID_ZYXEL
;

75 
	`CHECK_VENDOR
(
ZYNOS_VENDOR_DLINK
)

76  
ZYNOS_VENDOR_ID_DLINK
;

78 
	`CHECK_VENDOR
(
ZYNOS_VENDOR_LUCENT
)

79  
ZYNOS_VENDOR_ID_LUCENT
;

81 
	`CHECK_VENDOR
(
ZYNOS_VENDOR_NETGEAR
)

82  
ZYNOS_VENDOR_ID_NETGEAR
;

84  
ZYNOS_VENDOR_ID_OTHER
;

85 
	}
}

87 
ölöe
 
u16
 
	$boŸba£_gë_bﬂrd_id
()

89  
	`¥om_ªad_be16
(&
bﬂrd_öfo
->
bﬂrd_id
);

90 
	}
}

92 
__öô
 
	$boŸba£_¥e£¡
()

94 
u32
 
t
;

96 i‡(
boŸba£_found
)

97 
out
;

100 i‡(
	`boŸba£_dbg¨ó_¥e£¡
((
u8
 *)
ZYNOS_HDBG_ADDR
) == 0)

101 
out
;

103 
bﬂrd_öfo
 = (
zynos_bﬂrd_öfo
 *)(
ZYNOS_INFO_ADDR
);

106 
t
 = 
	`boŸba£_gë_boŸext_addr
();

107 i‡((
t
 < 
BOOTEXT_ADDR_MIN
Ë|| (à> 
BOOTEXT_ADDR_MAX
))

108 
out
;

110 
boŸba£_öfo
.
víd‹_id
 = 
	`boŸba£_gë_víd‹_id
();

111 
boŸba£_öfo
.
bﬂrd_id
 = 
	`boŸba£_gë_bﬂrd_id
();

112 
	`boŸba£_gë_mac
(
boŸba£_öfo
.
mac
);

114 
boŸba£_found
 = 1;

116 
out
:

117  
boŸba£_found
;

118 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/cfe.c

12 
	~<löux/ty≥s.h
>

13 
	~<löux/öô.h
>

15 
	~<asm/boŸöfo.h
>

16 
	~<asm/addr•a˚.h
>

18 
	~<¥om/c„.h
>

19 
	~"¥om_ªad.h
"

24 
	#CFE_EPTSEAL
 0x43464531

	)

27 
	gc„_found
;

29 
u32
 
	gc„_h™dÀ
;

30 
u32
 
	gc„_íåy
;

31 
u32
 
	gc„_£Æ
;

33 
__öô
 
	$c„_¥e£¡
()

38 
u32
 
a1
 = (u32Ë
fw_¨g1
;

40 i‡(
c„_found
)

43 
c„_h™dÀ
 = (
u32
Ë
fw_¨g0
;

44 
c„_íåy
 = (
u32
Ë
fw_¨g2
;

45 
c„_£Æ
 = (
u32
Ë
fw_¨g3
;

48 i‡(
c„_£Æ
 !
CFE_EPTSEAL
)

52 i‡(
a1
 != 0)

56 i‡((
c„_h™dÀ
 < 
KSEG0
Ë|| (
c„_íåy
 < KSEG0))

59 
c„_found
 = 1;

61 
	}
}

63 *
	$c„_gëív
(*
ív«me
)

65 i‡(
c„_found
 == 0)

66  
NULL
;

68  
NULL
;

69 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/generic.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/°rög.h
>

16 
	~<asm/boŸöfo.h
>

18 
	~<¥om/gíîic.h
>

20 *
	g_¥om_¨gc
;

21 **
	g_¥om_¨gv
;

22 **
	g_¥om_ívp
;

24 *
	$gíîic_¥om_gëív
(*
ív«me
)

26 **
ív
;

27 *
ªt
;

29 
ªt
 = 
NULL
;

30 
ív
 = 
_¥om_ívp
; *ív !
NULL
;Énv++) {

31 i‡(
	`°rcmp
(
ív«me
, *
ív
++) == 0) {

32 
ªt
 = *
ív
;

37  
ªt
;

38 
	}
}

40 
	$gíîic_¥om_¥e£¡
()

42 
_¥om_¨gc
 = (*)
fw_¨g0
;

43 
_¥om_¨gv
 = (**)
fw_¨g1
;

44 
_¥om_ívp
 = (**)
fw_¨g2
;

47 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/myloader.c

12 
	~<löux/ty≥s.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/°rög.h
>

17 
	~<asm/boŸöfo.h
>

18 
	~<asm/addr•a˚.h
>

19 
	~<asm/byã‹dî.h
>

21 
	~<asm/mach-adm5120/adm5120_defs.h
>

22 
	~<¥om/mylﬂdî.h
>

23 
	~"¥om_ªad.h
"

25 
	#SYS_PARAMS_ADDR
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
+0x0F000)

	)

26 
	#BOARD_PARAMS_ADDR
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
+0x0F800)

	)

27 
	#PART_TABLE_ADDR
 
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
+0x10000)

	)

29 
	gmylﬂdî_found
;

31 
mylﬂdî_öfo
 
	gmylﬂdî_öfo
;

33 
__öô
 
	$mylﬂdî_¥e£¡
()

35 
mylo_sy°em_∑øms
 *
sy•
;

36 
mylo_bﬂrd_∑øms
 *
bﬂrdp
;

37 
mylo_∑πôi⁄_èbÀ
 *
∑πs
;

38 
i
;

40 i‡(
mylﬂdî_found
)

41 
out
;

43 
sy•
 = (
mylo_sy°em_∑øms
 *)(
SYS_PARAMS_ADDR
);

44 
bﬂrdp
 = (
mylo_bﬂrd_∑øms
 *)(
BOARD_PARAMS_ADDR
);

45 
∑πs
 = (
mylo_∑πôi⁄_èbÀ
 *)(
PART_TABLE_ADDR
);

48 i‡((
	`À32_to_˝u
(
sy•
->
magic
Ë!
MYLO_MAGIC_SYS_PARAMS
) ||

49 (
	`À32_to_˝u
(
bﬂrdp
->
magic
Ë!
MYLO_MAGIC_BOARD_PARAMS
) ||

50 (
	`À32_to_˝u
(
∑πs
->
magic
Ë!
MYLO_MAGIC_PARTITIONS
))

51 
out
;

53 
mylﬂdî_öfo
.
vid
 = 
	`À32_to_˝u
(
sy•
->vid);

54 
mylﬂdî_öfo
.
did
 = 
	`À32_to_˝u
(
sy•
->did);

55 
mylﬂdî_öfo
.
svid
 = 
	`À32_to_˝u
(
sy•
->svid);

56 
mylﬂdî_öfo
.
sdid
 = 
	`À32_to_˝u
(
sy•
->sdid);

58 
i
 = 0; i < 
MYLO_ETHADDR_COUNT
; i++) {

59 
j
;

60 
j
 = 0; j < 6; j++)

61 
mylﬂdî_öfo
.
macs
[
i
][
j
] = 
bﬂrdp
->
addr
[i].
mac
[j];

64 
mylﬂdî_found
 = 1;

66 
out
:

67  
mylﬂdî_found
;

68 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/prom_read.h

12 #i‚de‡
_ADM5120_PROM_H_


13 
	#_ADM5120_PROM_H_


	)

18 
ölöe
 
u16
 
	$¥om_ªad_À16
(*
buf
)

20 
u8
 *
p
 = 
buf
;

22  ((
u16
)
p
[0] + ((u16)p[1] << 8));

23 
	}
}

25 
ölöe
 
u32
 
	$¥om_ªad_À32
(*
buf
)

27 
u8
 *
p
 = 
buf
;

29  ((
u32
)
p
[0] + ((u32)p[1] << 8) + ((u32)p[2] << 16) +

30 ((
u32
)
p
[3] << 24));

31 
	}
}

33 
ölöe
 
u16
 
	$¥om_ªad_be16
(*
buf
)

35 
u8
 *
p
 = 
buf
;

37  (((
u16
)
p
[0] << 8) + (u16)p[1]);

38 
	}
}

40 
ölöe
 
u32
 
	$¥om_ªad_be32
(*
buf
)

42 
u8
 *
p
 = 
buf
;

44  (((
u32
)
p
[0] << 24) + ((u32)p[1] << 16) + ((u32)p[2] << 8) +

45 ((
u32
)
p
[3]));

46 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/prom/routerboot.c

12 
	~<löux/ty≥s.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/°rög.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/rouãrboŸ.h
>

19 
	~<asm/boŸöfo.h
>

20 
	~<asm/addr•a˚.h
>

22 
	~<asm/mach-adm5120/adm5120_defs.h
>

23 
	~<¥om/rouãrboŸ.h
>

24 
	~"¥om_ªad.h
"

26 
rb_h¨d_£âögs
 
	grb_hs
;

27 
	grb_found
;

29 
__öô
 
	$rouãrboŸ_lﬂd_hs
(
u8
 *
buf
, 
u16
 
buÊí
)

31 
u16
 
id
, 
Àn
;

33 
	`mem£t
(&
rb_hs
, 0, (rb_hs));

35 i‡(
buÊí
 < 4)

38 i‡(
	`¥om_ªad_À32
(
buf
Ë!
RB_MAGIC_HARD
)

42 
buf
 += 4;

43 
buÊí
 -= 4;

45 
buÊí
 > 2) {

46 
id
 = 
	`¥om_ªad_À16
(
buf
);

47 
buf
 += 2;

48 
buÊí
 -= 2;

49 i‡(
id
 =
RB_ID_TERMINATOR
 || 
buÊí
 < 2)

52 
Àn
 = 
	`¥om_ªad_À16
(
buf
);

53 
buf
 += 2;

54 
buÊí
 -= 2;

56 i‡(
buÊí
 < 
Àn
)

59 
id
) {

60 
RB_ID_BIOS_VERSION
:

61 
rb_hs
.
bios_vî
 = (*)
buf
;

63 
RB_ID_BOARD_NAME
:

64 
rb_hs
.
«me
 = (*)
buf
;

66 
RB_ID_MEMORY_SIZE
:

67 
rb_hs
.
mem_size
 = 
	`¥om_ªad_À32
(
buf
);

69 
RB_ID_MAC_ADDRESS_COUNT
:

70 
rb_hs
.
mac_cou¡
 = 
	`¥om_ªad_À32
(
buf
);

72 
RB_ID_MAC_ADDRESS_PACK
:

73 i‡((
Àn
 / 
RB_MAC_SIZE
) > 0)

74 
rb_hs
.
mac_ba£
 = 
buf
;

78 
buf
 +
Àn
;

79 
buÊí
 -
Àn
;

84 
	}
}

86 
	#RB_BS_OFFS
 0x14

	)

87 
	#RB_OFFS_MAX
 (128*1024)

	)

89 
__öô
 
	$rouãrboŸ_¥e£¡
()

91 
rb_bios_£âögs
 *
bs
;

92 
u8
 *
ba£
;

93 
u32
 
off
, 
Àn
;

95 i‡(
rb_found
)

96 
out
;

98 
ba£
 = (
u8
 *)
	`KSEG1ADDR
(
ADM5120_SRAM0_BASE
);

99 
bs
 = (
rb_bios_£âögs
 *)(
ba£
 + 
RB_BS_OFFS
);

101 
off
 = 
	`¥om_ªad_À32
(&
bs
->
hs_offs
);

102 
Àn
 = 
	`¥om_ªad_À32
(&
bs
->
hs_size
);

103 i‡(
off
 > 
RB_OFFS_MAX
)

104 
out
;

106 i‡(
	`rouãrboŸ_lﬂd_hs
(
ba£
+
off
, 
Àn
) != 0)

107 
out
;

109 
rb_found
 = 1;

111 
out
:

112  
rb_found
;

113 
	}
}

115 *
	$rouãrboŸ_gë_bﬂrd«me
()

117 i‡(
rb_found
 == 0)

118  
NULL
;

120  
rb_hs
.
«me
;

121 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-334wt.c

12 
	~"p-33x.h
"

14 
gpio_Àd
 
	gp334wt_gpio_Àds
[] 
	g__öôd©a
 = {

15 
GPIO_LED_INV
(
ADM5120_GPIO_PIN2
, "powî", 
NULL
),

16 
GPIO_LED_INV
(
ADM5120_GPIO_P3L0
, "œn1", 
NULL
),

17 
GPIO_LED_INV
(
ADM5120_GPIO_P2L0
, "œn2", 
NULL
),

18 
GPIO_LED_INV
(
ADM5120_GPIO_P1L0
, "œn3", 
NULL
),

19 
GPIO_LED_INV
(
ADM5120_GPIO_P0L0
, "œn4", 
NULL
),

20 
GPIO_LED_INV
(
ADM5120_GPIO_P4L0
, "w™", 
NULL
),

21 
GPIO_LED_INV
(
ADM5120_GPIO_P4L2
, "wœn", 
NULL
),

22 
GPIO_LED_INV
(
ADM5120_GPIO_P2L2
, "Ÿi°", 
NULL
),

23 
GPIO_LED_INV
(
ADM5120_GPIO_P1L2
, "hiddí", 
NULL
),

26 
__öô
 
	$p334wt_£tup
()

28 
	`p33x_gíîic_£tup
();

29 
	`adm5120_add_devi˚_gpio_Àds
(
	`ARRAY_SIZE
(
p334wt_gpio_Àds
),

30 
p334wt_gpio_Àds
);

31 
	}
}

33 
MIPS_MACHINE
(
MACH_ADM5120_P334WT
, "P-334WT", "ZyXEL Prestige 334WT",

34 
p334wt_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-335.c

12 
	~"p-33x.h
"

14 
__öô
 
	$p335_£tup
()

16 
	`p33x_gíîic_£tup
();

17 
	`adm5120_add_devi˚_usb
();

18 
	}
}

20 
MIPS_MACHINE
(
MACH_ADM5120_P335
, "P-335", "ZyXEL Prestige 335/335WT",

21 
p335_£tup
);

	@linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-33x.c

12 
	~"p-33x.h
"

14 
	~<¥om/zynos.h
>

16 
	#P33X_GPIO_FLASH_A20
 
ADM5120_GPIO_PIN5


	)

17 
mtd_∑πôi⁄
 
	gp33x_∑πôi⁄s
[] = {

19 .
«me
 = "bootbase",

20 .
	goff£t
 = 0,

21 .
	gsize
 = 16*1024,

22 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

24 .
	g«me
 = "rom",

25 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

26 .
	gsize
 = 16*1024,

27 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

29 .
	g«me
 = "bootext1",

30 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

31 .
	gsize
 = 32*1024,

33 .
	g«me
 = "bootext2",

34 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

35 .
	gsize
 = 64*1024,

37 .
	g«me
 = "trx",

38 .
	goff£t
 = 
MTDPART_OFS_APPEND
,

39 .
	gsize
 = 
MTDPART_SIZ_FULL
,

41 .
	g«me
 = "firmware",

42 .
	goff£t
 = 32*1024,

43 .
	gsize
 = 
MTDPART_SIZ_FULL
,

47 
adm5120_pci_úq
 
	gp33x_pci_úqs
[] 
	g__öôd©a
 = {

48 
PCIIRQ
(2, 0, 1, 
ADM5120_IRQ_PCI0
),

51 
u8
 
	gp33x_vœns
[6] 
	g__öôd©a
 = {

56 
	$swôch_b™k_gpio5
(
b™k
)

58 
b™k
) {

60 
	`gpio_£t_vÆue
(
P33X_GPIO_FLASH_A20
, 0);

63 
	`gpio_£t_vÆue
(
P33X_GPIO_FLASH_A20
, 1);

66 
	}
}

68 
__öô
 
	$p33x_gíîic_£tup
()

71 
	`gpio_ªque°
(
P33X_GPIO_FLASH_A20
, 
NULL
);

72 
	`gpio_dúe˘i⁄_ouçut
(
P33X_GPIO_FLASH_A20
, 0);

73 
adm5120_Êash0_d©a
.
swôch_b™k
 = 
swôch_b™k_gpio5
;

74 
adm5120_Êash0_d©a
.
ƒ_∑πs
 = 
	`ARRAY_SIZE
(
p33x_∑πôi⁄s
);

75 
adm5120_Êash0_d©a
.
∑πs
 = 
p33x_∑πôi⁄s
;

76 
	`adm5120_add_devi˚_Êash
(0);

78 
	`adm5120_add_devi˚_u¨t
(0);

79 
	`adm5120_add_devi˚_u¨t
(1);

81 
	`adm5120_£tup_ëh_macs
(
boŸba£_öfo
.
mac
);

82 
	`adm5120_add_devi˚_swôch
(6, 
p33x_vœns
);

84 
	`adm5120_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
p33x_pci_úqs
),Ö33x_pci_irqs);

85 
	}
}

	@linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-33x.h

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/úq.h
>

17 
	~<asm/mùs_machöe.h
>

19 
	~<asm/mach-adm5120/adm5120_öfo.h
>

20 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

22 
	$p33x_gíîic_£tup
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_defs.h

13 #i‚de‡
_ASM_MIPS_MACH_ADM5120_DEFS_H


14 
	#_ASM_MIPS_MACH_ADM5120_DEFS_H


	)

16 
	#ADM5120_SDRAM0_BASE
 0x00000000

	)

17 
	#ADM5120_SDRAM1_BASE
 0x01000000

	)

18 
	#ADM5120_SRAM1_BASE
 0x10000000

	)

19 
	#ADM5120_EXTIO0_BASE
 0x10C00000

	)

20 
	#ADM5120_EXTIO0_SIZE
 0x00200000

	)

21 
	#ADM5120_EXTIO1_BASE
 0x10E00000

	)

22 
	#ADM5120_EXTIO1_SIZE
 0x00200000

	)

23 
	#ADM5120_MPMC_BASE
 0x11000000

	)

24 
	#ADM5120_MPMC_SIZE
 0x00200000

	)

25 
	#ADM5120_USBC_BASE
 0x11200000

	)

26 
	#ADM5120_USBC_SIZE
 0x00200000

	)

27 
	#ADM5120_PCIMEM_BASE
 0x11400000

	)

28 
	#ADM5120_PCIMEM_SIZE
 0x00100000

	)

29 
	#ADM5120_PCIIO_BASE
 0x11500000

	)

30 
	#ADM5120_PCIIO_SIZE
 0x000FFFF0

	)

31 
	#ADM5120_PCICFG_ADDR
 0x115FFFF0

	)

32 
	#ADM5120_PCICFG_DATA
 0x115FFFF8

	)

33 
	#ADM5120_PCICFG_SIZE
 0x00000010

	)

34 
	#ADM5120_SWITCH_BASE
 0x12000000

	)

35 
	#ADM5120_SWITCH_SIZE
 0x00200000

	)

36 
	#ADM5120_INTC_BASE
 0x12200000

	)

37 
	#ADM5120_INTC_SIZE
 0x00200000

	)

38 
	#ADM5120_UART0_BASE
 0x12600000

	)

39 
	#ADM5120_UART1_BASE
 0x12800000

	)

40 
	#ADM5120_UART_SIZE
 0x00200000

	)

41 
	#ADM5120_SRAM0_BASE
 0x1FC00000

	)

43 
	#ADM5120_NAND_BASE
 
ADM5120_SRAM1_BASE


	)

44 
	#ADM5120_NAND_SIZE
 0xB

	)

46 
	#ADM5120_CLK_175
 175000000

	)

47 
	#ADM5120_CLK_200
 200000000

	)

48 
	#ADM5120_CLK_225
 225000000

	)

49 
	#ADM5120_CLK_250
 250000000

	)

51 
	#ADM5120_UART_CLOCK
 62500000

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_info.h

10 #i‚de‡
_MACH_ADM5120_INFO_H


11 
	#_MACH_ADM5120_INFO_H


	)

13 
	~<löux/ty≥s.h
>

15 
adm5120_¥om_ty≥
;

16 
	#ADM5120_PROM_GENERIC
 0

	)

17 
	#ADM5120_PROM_CFE
 1

	)

18 
	#ADM5120_PROM_MYLOADER
 2

	)

19 
	#ADM5120_PROM_ROUTERBOOT
 3

	)

20 
	#ADM5120_PROM_BOOTBASE
 4

	)

21 
	#ADM5120_PROM_UBOOT
 5

	)

22 
	#ADM5120_PROM_LAST
 5

	)

24 
adm5120_¥odu˘_code
;

25 
adm5120_ªvisi⁄
;

26 
adm5120_«nd_boŸ
;

28 
adm5120_•ìd
;

29 
	#ADM5120_SPEED_175
 175000000

	)

30 
	#ADM5120_SPEED_200
 200000000

	)

31 
	#ADM5120_SPEED_225
 225000000

	)

32 
	#ADM5120_SPEED_250
 250000000

	)

34 
adm5120_∑ckage
;

35 
	#ADM5120_PACKAGE_PQFP
 0

	)

36 
	#ADM5120_PACKAGE_BGA
 1

	)

38 
adm5120_memsize
;

41 
	mMACH_ADM5120_GENERIC
 = 0,

42 
	mMACH_ADM5120_5GXI
,

43 
	mMACH_ADM5120_BR6104K
,

44 
	mMACH_ADM5120_BR6104KP
,

45 
	mMACH_ADM5120_BR61X4WG
,

46 
	mMACH_ADM5120_CAS630
,

47 
	mMACH_ADM5120_CAS670
,

48 
	mMACH_ADM5120_CAS700
,

49 
	mMACH_ADM5120_CAS771
,

50 
	mMACH_ADM5120_CAS790
,

51 
	mMACH_ADM5120_CAS861
,

52 
	mMACH_ADM5120_EASY5120PATA
,

53 
	mMACH_ADM5120_EASY5120RT
,

54 
	mMACH_ADM5120_EASY5120WVOIP
,

55 
	mMACH_ADM5120_EASY83000
,

56 
	mMACH_ADM5120_ES2108
,

57 
	mMACH_ADM5120_ES2108F
,

58 
	mMACH_ADM5120_ES2108G
,

59 
	mMACH_ADM5120_ES2108LC
,

60 
	mMACH_ADM5120_ES2108PWR
,

61 
	mMACH_ADM5120_ES2024A
,

62 
	mMACH_ADM5120_ES2024PWR
,

63 
	mMACH_ADM5120_HS100
,

64 
	mMACH_ADM5120_NFS101U
,

65 
	mMACH_ADM5120_NFS202U
,

66 
	mMACH_ADM5120_NP28G
,

67 
	mMACH_ADM5120_NP28GHS
,

68 
	mMACH_ADM5120_NP27G
,

69 
	mMACH_ADM5120_RB_11X
,

70 
	mMACH_ADM5120_RB_133
,

71 
	mMACH_ADM5120_RB_133C
,

72 
	mMACH_ADM5120_RB_150
,

73 
	mMACH_ADM5120_RB_153
,

74 
	mMACH_ADM5120_RB_192
,

75 
	mMACH_ADM5120_P334U
,

76 
	mMACH_ADM5120_P334W
,

77 
	mMACH_ADM5120_P334WH
,

78 
	mMACH_ADM5120_P334WHD
,

79 
	mMACH_ADM5120_P334WT
,

80 
	mMACH_ADM5120_P335
,

81 
	mMACH_ADM5120_P335PLUS
,

82 
	mMACH_ADM5120_P335U
,

83 
	mMACH_ADM5120_PMUGW
,

84 
	mMACH_ADM5120_WP54
,

85 
	mMACH_ADM5120_WP54G_WRT
,

86 
	mMACH_ADM5120_WP54Gv1C
,

87 
	mMACH_ADM5120_EB_214A
,

94 
adm5120_ëh_num_p‹ts
;

95 
adm5120_ëh_macs
[6][6];

96 
adm5120_ëh_vœns
[6];

98 
	$adm5120_soc_öô
(Ë
__öô
;

99 
	$adm5120_mem_öô
(Ë
__öô
;

100 
	`adm5120_ndñay
(
u32
 
ns
);

102 (*
adm5120_bﬂrd_ª£t
)();

104 
	$adm5120_gpio_öô
(Ë
__öô
;

105 
	$adm5120_gpio_csx0_íabÀ
(Ë
__öô
;

106 
	$adm5120_gpio_csx1_íabÀ
(Ë
__öô
;

107 
	$adm5120_gpio_ew_íabÀ
(Ë
__öô
;

109 
ölöe
 
	$adm5120_∑ckage_pqÂ
()

111  (
adm5120_∑ckage
 =
ADM5120_PACKAGE_PQFP
);

112 
	}
}

114 
ölöe
 
	$adm5120_∑ckage_bga
()

116  (
adm5120_∑ckage
 =
ADM5120_PACKAGE_BGA
);

117 
	}
}

119 
ölöe
 
	$adm5120_has_pci
()

121  (
adm5120_∑ckage
 =
ADM5120_PACKAGE_BGA
);

122 
	}
}

124 
ölöe
 
	$adm5120_has_gmii
()

126  (
adm5120_∑ckage
 =
ADM5120_PACKAGE_BGA
);

127 
	}
}

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_intc.h

15 #i‚de‡
_MACH_ADM5120_INTC_H


16 
	#_MACH_ADM5120_INTC_H


	)

21 
	#INTC_REG_IRQ_STATUS
 0x00

	)

22 
	#INTC_REG_IRQ_RAW_STATUS
 0x04

	)

23 
	#INTC_REG_IRQ_ENABLE
 0x08

	)

24 
	#INTC_REG_IRQ_ENABLE_CLEAR
 0x0C

	)

25 
	#INTC_REG_IRQ_DISABLE
 
INTC_REG_IRQ_ENABLE_CLEAR


	)

26 
	#INTC_REG_INT_MODE
 0x14

	)

27 
	#INTC_REG_FIQ_STATUS
 0x18

	)

28 
	#INTC_REG_IRQ_TEST_SOURCE
 0x1C

	)

29 
	#INTC_REG_IRQ_SOURCE_SELECT
 0x20

	)

30 
	#INTC_REG_INT_LEVEL
 0x24

	)

35 
	#INTC_IRQ_TIMER
 0

	)

36 
	#INTC_IRQ_UART0
 1

	)

37 
	#INTC_IRQ_UART1
 2

	)

38 
	#INTC_IRQ_USBC
 3

	)

39 
	#INTC_IRQ_GPIO2
 4

	)

40 
	#INTC_IRQ_GPIO4
 5

	)

41 
	#INTC_IRQ_PCI0
 6

	)

42 
	#INTC_IRQ_PCI1
 7

	)

43 
	#INTC_IRQ_PCI2
 8

	)

44 
	#INTC_IRQ_SWITCH
 9

	)

45 
	#INTC_IRQ_LAST
 
INTC_IRQ_SWITCH


	)

46 
	#INTC_IRQ_COUNT
 10

	)

51 
	#INTC_INT_TIMER
 (1 << 
INTC_IRQ_TIMER
)

	)

52 
	#INTC_INT_UART0
 (1 << 
INTC_IRQ_UART0
)

	)

53 
	#INTC_INT_UART1
 (1 << 
INTC_IRQ_UART1
)

	)

54 
	#INTC_INT_USBC
 (1 << 
INTC_IRQ_USBC
)

	)

55 
	#INTC_INT_INTX0
 (1 << 
INTC_IRQ_INTX0
)

	)

56 
	#INTC_INT_INTX1
 (1 << 
INTC_IRQ_INTX1
)

	)

57 
	#INTC_INT_PCI0
 (1 << 
INTC_IRQ_PCI0
)

	)

58 
	#INTC_INT_PCI1
 (1 << 
INTC_IRQ_PCI1
)

	)

59 
	#INTC_INT_PCI2
 (1 << 
INTC_IRQ_PCI2
)

	)

60 
	#INTC_INT_SWITCH
 (1 << 
INTC_IRQ_SWITCH
)

	)

61 
	#INTC_INT_ALL
 ((1 << 
INTC_IRQ_COUNT
Ë- 1)

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_mpmc.h

12 #i‚de‡
_MACH_ADM5120_MPMC_H


13 
	#_MACH_ADM5120_MPMC_H


	)

15 
	#MPMC_READ_REG
(
r
Ë
	`__øw_ªadl
( \

16 (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_MPMC_BASE
Ë+ 
MPMC_REG_
 ## 
r
)

	)

17 
	#MPMC_WRITE_REG
(
r
, 
v
Ë
	`__øw_wrôñ
((v), \

18 (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_MPMC_BASE
Ë+ 
MPMC_REG_
 ## 
r
)

	)

20 
	#MPMC_REG_CTRL
 0x0000

	)

21 
	#MPMC_REG_STATUS
 0x0004

	)

22 
	#MPMC_REG_CONF
 0x0008

	)

23 
	#MPMC_REG_DC
 0x0020

	)

24 
	#MPMC_REG_DR
 0x0024

	)

25 
	#MPMC_REG_DRP
 0x0030

	)

27 
	#MPMC_REG_DC0
 0x0100

	)

28 
	#MPMC_REG_DRC0
 0x0104

	)

29 
	#MPMC_REG_DC1
 0x0120

	)

30 
	#MPMC_REG_DRC1
 0x0124

	)

31 
	#MPMC_REG_DC2
 0x0140

	)

32 
	#MPMC_REG_DRC2
 0x0144

	)

33 
	#MPMC_REG_DC3
 0x0160

	)

34 
	#MPMC_REG_DRC3
 0x0164

	)

35 
	#MPMC_REG_SC0
 0x0200

	)

36 
	#MPMC_REG_SC1
 0x0220

	)

37 
	#MPMC_REG_SC2
 0x0240

	)

38 
	#MPMC_REG_WEN2
 0x0244

	)

39 
	#MPMC_REG_OEN2
 0x0248

	)

40 
	#MPMC_REG_RD2
 0x024C

	)

41 
	#MPMC_REG_PG2
 0x0250

	)

42 
	#MPMC_REG_WR2
 0x0254

	)

43 
	#MPMC_REG_TN2
 0x0258

	)

44 
	#MPMC_REG_SC3
 0x0260

	)

47 
	#MPMC_CTRL_AM
 (1 << 1Ë

	)

48 
	#MPMC_CTRL_LPM
 (1 << 2Ë

	)

49 
	#MPMC_CTRL_DWB
 (1 << 3Ë

	)

52 
	#MPMC_STATUS_BUSY
 (1 << 0Ë

	)

53 
	#MPMC_STATUS_WBS
 (1 << 1Ë

	)

54 
	#MPMC_STATUS_SRA
 (1 << 2Ë

	)

57 
	#MPMC_DC_CE
 (1 << 0)

	)

58 
	#MPMC_DC_DMC
 (1 << 1)

	)

59 
	#MPMC_DC_SRR
 (1 << 2)

	)

60 
	#MPMC_DC_SI_SHIFT
 7

	)

61 
	#MPMC_DC_SI_MASK
 (3 << 7)

	)

62 
	#MPMC_DC_SI_NORMAL
 (0 << 7)

	)

63 
	#MPMC_DC_SI_MODE
 (1 << 7)

	)

64 
	#MPMC_DC_SI_PALL
 (2 << 7)

	)

65 
	#MPMC_DC_SI_NOP
 (3 << 7)

	)

67 
	#SRAM_REG_CONF
 0x00

	)

68 
	#SRAM_REG_WWE
 0x04

	)

69 
	#SRAM_REG_WOE
 0x08

	)

70 
	#SRAM_REG_WRD
 0x0C

	)

71 
	#SRAM_REG_WPG
 0x10

	)

72 
	#SRAM_REG_WWR
 0x14

	)

73 
	#SRAM_REG_WTR
 0x18

	)

76 
	#DC_BE
 (1 << 19Ë

	)

77 
	#DC_RW_SHIFT
 28

	)

78 
	#DC_RW_MASK
 0x03

	)

79 
	#DC_NB_SHIFT
 26

	)

80 
	#DC_NB_MASK
 0x01

	)

81 
	#DC_CW_SHIFT
 22

	)

82 
	#DC_CW_MASK
 0x07

	)

83 
	#DC_DW_SHIFT
 7

	)

84 
	#DC_DW_MASK
 0x03

	)

87 
	#SC_MW_MASK
 0x03

	)

88 
	#SC_MW_8
 0x00

	)

89 
	#SC_MW_16
 0x01

	)

90 
	#SC_MW_32
 0x02

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_nand.h

21 #i‚de‡
_MACH_ADM5120_NAND_H


22 
	#_MACH_ADM5120_NAND_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/io.h
>

27 
	~<asm/mach-adm5120/adm5120_defs.h
>

28 
	~<asm/mach-adm5120/adm5120_swôch.h
>

31 
	#NAND_REG_DATA
 0x0

	)

32 
	#NAND_REG_SET_CEn
 0x1

	)

33 
	#NAND_REG_CLR_CEn
 0x2

	)

34 
	#NAND_REG_CLR_CLE
 0x3

	)

35 
	#NAND_REG_SET_CLE
 0x4

	)

36 
	#NAND_REG_CLR_ALE
 0x5

	)

37 
	#NAND_REG_SET_ALE
 0x6

	)

38 
	#NAND_REG_SET_SPn
 0x7

	)

39 
	#NAND_REG_CLR_SPn
 0x8

	)

40 
	#NAND_REG_SET_WPn
 0x9

	)

41 
	#NAND_REG_CLR_WPn
 0xA

	)

42 
	#NAND_REG_STATUS
 0xB

	)

44 
	#ADM5120_NAND_STATUS_READY
 0x80

	)

46 
	#NAND_READ_REG
(
r
) \

47 
	`ªadb
((
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_NAND_BASE
Ë+ (
r
))

	)

48 
	#NAND_WRITE_REG
(
r
, 
v
) \

49 
	`wrôeb
((
v
), (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_NAND_BASE
Ë+ (
r
))

	)

53 
ölöe
 
	$adm5120_«nd_íabÀ
()

55 
	`SW_WRITE_REG
(
SWITCH_REG_BW_CNTL1
, 
BW_CNTL1_NAND_ENABLE
);

56 
	`SW_WRITE_REG
(
SWITCH_REG_BOOT_DONE
, 1);

57 
	}
}

59 
ölöe
 
	$adm5120_«nd_£t_w≤
(
£t
)

61 
	`NAND_WRITE_REG
((
£t
Ë? 
NAND_REG_SET_WPn
 : 
NAND_REG_CLR_WPn
, 1);

62 
	}
}

64 
ölöe
 
	$adm5120_«nd_£t_•n
(
£t
)

66 
	`NAND_WRITE_REG
((
£t
Ë? 
NAND_REG_SET_SPn
 : 
NAND_REG_CLR_SPn
, 1);

67 
	}
}

69 
ölöe
 
	$adm5120_«nd_£t_˛e
(
£t
)

71 
	`NAND_WRITE_REG
((
£t
Ë? 
NAND_REG_SET_CLE
 : 
NAND_REG_CLR_CLE
, 1);

72 
	}
}

74 
ölöe
 
	$adm5120_«nd_£t_Æe
(
£t
)

76 
	`NAND_WRITE_REG
((
£t
Ë? 
NAND_REG_SET_ALE
 : 
NAND_REG_CLR_ALE
, 1);

77 
	}
}

79 
ölöe
 
	$adm5120_«nd_£t_˚n
(
£t
)

81 
	`NAND_WRITE_REG
((
£t
Ë? 
NAND_REG_SET_CEn
 : 
NAND_REG_CLR_CEn
, 1);

82 
	}
}

84 
ölöe
 
u8
 
	$adm5120_«nd_gë_°©us
()

86  
	`NAND_READ_REG
(
NAND_REG_STATUS
);

87 
	}
}

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_platform.h

12 #i‚de‡
_ASM_MIPS_MACH_ADM5120_PLATFORM_H


13 
	#_ASM_MIPS_MACH_ADM5120_PLATFORM_H


	)

15 
	~<löux/devi˚.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/öput.h
>

18 
	~<löux/Àds.h
>

19 
	~<löux/mtd/mtd.h
>

20 
	~<löux/mtd/m≠.h
>

21 
	~<löux/mtd/∑πôi⁄s.h
>

22 
	~<löux/mtd/«nd.h
>

23 
	~<löux/öput.h
>

24 
	~<löux/gpio_keys.h
>

25 
	~<löux/amba/bus.h
>

26 
	~<löux/amba/£rül.h
>

28 
	sadm5120_Êash_∂©f‹m_d©a
 {

29 (*
	m£t_vµ
)(
	mm≠_öfo
 *, );

30 (*
	mswôch_b™k
)();

31 
u32
 
	mwödow_size
;

32 
	mƒ_∑πs
;

33 
mtd_∑πôi⁄
 *
	m∑πs
;

36 
	sadm5120_swôch_∂©f‹m_d©a
 {

40 
	sadm5120_pci_úq
 {

41 
u8
 
	m¶Ÿ
;

42 
u8
 
	mfunc
;

43 
u8
 
	mpö
;

44 
	múq
;

47 
	#PCIIRQ
(
s
, 
f
, 
p
, 
i
Ë{.
¶Ÿ
 = (s), .
func
 = (f), .
pö
 = (p), .
úq
 = (i)}

	)

49 #ifde‡
CONFIG_PCI


50 
	$adm5120_pci_£t_úq_m≠
(
ƒ_úqs
,

51 
adm5120_pci_úq
 *
m≠
Ë
__öô
;

53 
ölöe
 
	$adm5120_pci_£t_úq_m≠
(
ƒ_úqs
,

54 
adm5120_pci_úq
 *
m≠
)

56 
	}
}

59 
	$adm5120_£tup_ëh_macs
(
u8
 *
mac_ba£
Ë
__öô
;

61 
adm5120_Êash_∂©f‹m_d©a
 
adm5120_Êash0_d©a
;

62 
adm5120_Êash_∂©f‹m_d©a
 
adm5120_Êash1_d©a
;

64 
	$adm5120_add_devi˚_Êash
(
id
Ë
__öô
;

65 
	$adm5120_add_devi˚_usb
(Ë
__öô
;

66 
	$adm5120_add_devi˚_u¨t
(
id
Ë
__öô
;

67 
	$adm5120_add_devi˚_«nd
(
∂©f‹m_«nd_d©a
 *
pd©a
Ë
__öô
;

68 
	$adm5120_add_devi˚_swôch
(
num_p‹ts
, 
u8
 *
vœn_m≠
Ë
__öô
;

69 
	`adm5120_ªgi°î_gpio_buâ⁄s
(
id
,

70 
pﬁl_öãrvÆ
,

71 
nbuâ⁄s
,

72 
gpio_keys_buâ⁄
 *
buâ⁄s
);

74 
	#GPIO_LED_DEF
(
g
, 
n
, 
t
, 
a
) { \

75 .
«me
 = (
n
), \

76 .
deÁu…_åiggî
 = (
t
), \

77 .
gpio
 = (
g
), \

78 .
a˘ive_low
 = (
a
) \

79 
	}

	)
}

81 
	#GPIO_LED_STD
(
g
, 
n
, 
t
Ë
	`GPIO_LED_DEF
((g), (n), (t), 0)

	)

82 
	#GPIO_LED_INV
(
g
, 
n
, 
t
Ë
	`GPIO_LED_DEF
((g), (n), (t), 1)

	)

84 
	$adm5120_add_devi˚_gpio_Àds
(
num_Àds
,

85 
gpio_Àd
 *
Àds
Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_switch.h

15 #i‚de‡
_MACH_ADM5120_SWITCH_H


16 
	#_MACH_ADM5120_SWITCH_H


	)

18 #i‚de‡
BIT


19 
	#BIT
(
©
Ë(1 << (©))

	)

21 
	#BITMASK
(
Àn
Ë(
	`BIT
÷í)-1)

	)

23 
	#SW_READ_REG
(
r
Ë
	`__øw_ªadl
( \

24 (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_SWITCH_BASE
Ë+ 
r
)

	)

25 
	#SW_WRITE_REG
(
r
, 
v
Ë
	`__øw_wrôñ
((v), \

26 (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_SWITCH_BASE
Ë+ 
r
)

	)

29 
	#SWITCH_REG_CODE
 0x0000

	)

30 
	#SWITCH_REG_SOFT_RESET
 0x0004

	)

31 
	#SWITCH_REG_BOOT_DONE
 0x0008

	)

32 
	#SWITCH_REG_SW_RESET
 0x000C

	)

33 
	#SWITCH_REG_PHY_STATUS
 0x0014

	)

34 
	#SWITCH_REG_MEMCTRL
 0x001C

	)

35 
	#SWITCH_REG_CPUP_CONF
 0x0024

	)

36 
	#SWITCH_REG_PORT_CONF0
 0x0028

	)

37 
	#SWITCH_REG_PORT_CONF1
 0x002C

	)

38 
	#SWITCH_REG_PORT_CONF2
 0x0030

	)

39 
	#SWITCH_REG_VLAN_G1
 0x0040

	)

40 
	#SWITCH_REG_VLAN_G2
 0x0044

	)

41 
	#SWITCH_REG_SEND_TRIG
 0x0048

	)

42 
	#SWITCH_REG_MAC_WT0
 0x0058

	)

43 
	#SWITCH_REG_MAC_WT1
 0x005C

	)

44 
	#SWITCH_REG_BW_CNTL0
 0x0060

	)

45 
	#SWITCH_REG_BW_CNTL1
 0x0064

	)

46 
	#SWITCH_REG_PHY_CNTL0
 0x0068

	)

47 
	#SWITCH_REG_PHY_CNTL1
 0x006C

	)

48 
	#SWITCH_REG_PORT_TH
 0x0078

	)

49 
	#SWITCH_REG_PHY_CNTL2
 0x007C

	)

50 
	#SWITCH_REG_PHY_CNTL3
 0x0080

	)

51 
	#SWITCH_REG_PRI_CNTL
 0x0084

	)

52 
	#SWITCH_REG_PHY_CNTL4
 0x00A0

	)

53 
	#SWITCH_REG_EMPTY_CNT
 0x00A4

	)

54 
	#SWITCH_REG_PORT_CNTLS
 0x00A8

	)

55 
	#SWITCH_REG_PORT_CNTL
 0x00AC

	)

56 
	#SWITCH_REG_INT_STATUS
 0x00B0

	)

57 
	#SWITCH_REG_INT_MASK
 0x00B4

	)

58 
	#SWITCH_REG_GPIO_CONF0
 0x00B8

	)

59 
	#SWITCH_REG_GPIO_CONF2
 0x00BC

	)

60 
	#SWITCH_REG_WDOG0
 0x00C0

	)

61 
	#SWITCH_REG_WDOG1
 0x00C4

	)

63 
	#SWITCH_REG_SHDA
 0x00D0

	)

64 
	#SWITCH_REG_SLDA
 0x00D4

	)

65 
	#SWITCH_REG_RHDA
 0x00D8

	)

66 
	#SWITCH_REG_RLDA
 0x00DC

	)

67 
	#SWITCH_REG_SHWA
 0x00E0

	)

68 
	#SWITCH_REG_SLWA
 0x00E4

	)

69 
	#SWITCH_REG_RHWA
 0x00E8

	)

70 
	#SWITCH_REG_RLWA
 0x00EC

	)

72 
	#SWITCH_REG_TIMER_INT
 0x00F0

	)

73 
	#SWITCH_REG_TIMER
 0x00F4

	)

75 
	#SWITCH_REG_PORT0_LED
 0x0100

	)

76 
	#SWITCH_REG_PORT1_LED
 0x0104

	)

77 
	#SWITCH_REG_PORT2_LED
 0x0108

	)

78 
	#SWITCH_REG_PORT3_LED
 0x010C

	)

79 
	#SWITCH_REG_PORT4_LED
 0x0110

	)

82 
	#CODE_PC_MASK
 
	`BITMASK
(16Ë

	)

83 
	#CODE_REV_SHIFT
 16

	)

84 
	#CODE_REV_MASK
 
	`BITMASK
(4Ë

	)

85 
	#CODE_CLKS_SHIFT
 20

	)

86 
	#CODE_CLKS_MASK
 
	`BITMASK
(2Ë

	)

87 
	#CODE_CLKS_175
 0

	)

88 
	#CODE_CLKS_200
 1

	)

89 
	#CODE_CLKS_225
 2

	)

90 
	#CODE_CLKS_250
 3

	)

91 
	#CODE_NAB
 
	`BIT
(24Ë

	)

92 
	#CODE_PK_MASK
 
	`BITMASK
(1Ë

	)

93 
	#CODE_PK_SHIFT
 29

	)

94 
	#CODE_PK_BGA
 0

	)

95 
	#CODE_PK_PQFP
 1

	)

98 
	#MEMCTRL_SDRS_MASK
 
	`BITMASK
(3Ë

	)

99 
	#MEMCTRL_SDRS_4M
 0x01

	)

100 
	#MEMCTRL_SDRS_8M
 0x02

	)

101 
	#MEMCTRL_SDRS_16M
 0x03

	)

102 
	#MEMCTRL_SDRS_64M
 0x04

	)

103 
	#MEMCTRL_SDRS_128M
 0x05

	)

104 
	#MEMCTRL_SDR1_ENABLE
 
	`BIT
(5Ë

	)

106 
	#MEMCTRL_SRS0_SHIFT
 8

	)

107 
	#MEMCTRL_SRS1_SHIFT
 16

	)

108 
	#MEMCTRL_SRS_MASK
 
	`BITMASK
(3Ë

	)

109 
	#MEMCTRL_SRS_DISABLED
 0x00

	)

110 
	#MEMCTRL_SRS_512K
 0x01

	)

111 
	#MEMCTRL_SRS_1M
 0x02

	)

112 
	#MEMCTRL_SRS_2M
 0x03

	)

113 
	#MEMCTRL_SRS_4M
 0x04

	)

116 
	#SWITCH_PORT_PHY0
 
	`BIT
(0)

	)

117 
	#SWITCH_PORT_PHY1
 
	`BIT
(1)

	)

118 
	#SWITCH_PORT_PHY2
 
	`BIT
(2)

	)

119 
	#SWITCH_PORT_PHY3
 
	`BIT
(3)

	)

120 
	#SWITCH_PORT_PHY4
 
	`BIT
(4)

	)

121 
	#SWITCH_PORT_MII
 
	`BIT
(5)

	)

122 
	#SWITCH_PORT_CPU
 
	`BIT
(6)

	)

125 
	#SWITCH_PORTS_PHY
 0x1F

	)

126 
	#SWITCH_PORTS_NOCPU
 0x3F

	)

127 
	#SWITCH_PORTS_ALL
 0x7F

	)

130 
	#CPUP_CONF_DCPUP
 
	`BIT
(0Ë

	)

131 
	#CPUP_CONF_CRCP
 
	`BIT
(1Ë

	)

132 
	#CPUP_CONF_BTM
 
	`BIT
(2Ë

	)

133 
	#CPUP_CONF_DUNP_SHIFT
 9

	)

134 
	#CPUP_CONF_DMCP_SHIFT
 16

	)

135 
	#CPUP_CONF_DBCP_SHIFT
 24

	)

138 
	#PORT_CONF0_DP_SHIFT
 0

	)

139 
	#PORT_CONF0_EMCP_SHIFT
 8

	)

140 
	#PORT_CONF0_BP_SHIFT
 16

	)

143 
	#PORT_CONF1_DISL_SHIFT
 0

	)

144 
	#PORT_CONF1_BS_SHIFT
 6

	)

145 
	#PORT_CONF1_BM_SHIFT
 12

	)

148 
	#SEND_TRIG_STL
 
	`BIT
(0Ë

	)

149 
	#SEND_TRIG_STH
 
	`BIT
(1Ë

	)

152 
	#MAC_WT0_MAWC
 
	`BIT
(0Ë

	)

153 
	#MAC_WT0_MWD_SHIFT
 1

	)

154 
	#MAC_WT0_MWD
 
	`BIT
(1Ë

	)

155 
	#MAC_WT0_WFB
 
	`BIT
(2Ë

	)

156 
	#MAC_WT0_WVN_SHIFT
 3

	)

157 
	#MAC_WT0_WVE
 
	`BIT
(6Ë

	)

158 
	#MAC_WT0_WPMN_SHIFT
 7

	)

159 
	#MAC_WT0_WAF_SHIFT
 13

	)

160 
	#MAC_WT0_WAF_EMPTY
 0

	)

161 
	#MAC_WT0_WAF_STATIC
 7

	)

162 
	#MAC_WT0_MAC0_SHIFT
 16

	)

163 
	#MAC_WT0_MAC1_SHIFT
 24

	)

166 
	#MAC_WT1_MAC2_SHIFT
 0

	)

167 
	#MAC_WT1_MAC3_SHIFT
 8

	)

168 
	#MAC_WT1_MAC4_SHIFT
 16

	)

169 
	#MAC_WT1_MAC5_SHIFT
 24

	)

172 
	#BW_CNTL_DISABLE
 0x00

	)

173 
	#BW_CNTL_64K
 0x01

	)

174 
	#BW_CNTL_128K
 0x02

	)

175 
	#BW_CNTL_256K
 0x03

	)

176 
	#BW_CNTL_512K
 0x04

	)

177 
	#BW_CNTL_1M
 0x05

	)

178 
	#BW_CNTL_4M
 0x06

	)

179 
	#BW_CNTL_10M
 0x07

	)

181 
	#P4TBC_SHIFT
 0

	)

182 
	#P4RBC_SHIFT
 4

	)

183 
	#P5TBC_SHIFT
 8

	)

184 
	#P5RBC_SHIFT
 12

	)

186 
	#BW_CNTL1_NAND_ENABLE
 0x100

	)

189 
	#PHY_CNTL0_PHYA_MASK
 
	`BITMASK
(5)

	)

190 
	#PHY_CNTL0_PHYR_MASK
 
	`BITMASK
(5)

	)

191 
	#PHY_CNTL0_PHYR_SHIFT
 8

	)

192 
	#PHY_CNTL0_WC
 
	`BIT
(13Ë

	)

193 
	#PHY_CNTL0_RC
 
	`BIT
(14Ë

	)

194 
	#PHY_CNTL0_WTD_MASK
 
	`BIT
(16Ë

	)

195 
	#PHY_CNTL0_WTD_SHIFT
 16

	)

198 
	#PHY_CNTL1_WOD
 
	`BIT
(0Ë

	)

199 
	#PHY_CNTL1_ROD
 
	`BIT
(1Ë

	)

200 
	#PHY_CNTL1_RD_MASK
 
	`BITMASK
(16)

	)

201 
	#PHY_CNTL1_RD_SHIFT
 16

	)

204 
	#PHY_CNTL2_ANE_SHIFT
 0

	)

205 
	#PHY_CNTL2_SC_SHIFT
 5

	)

206 
	#PHY_CNTL2_DC_SHIFT
 10

	)

207 
	#PHY_CNTL2_FNCV_SHIFT
 15

	)

208 
	#PHY_CNTL2_PHYR_SHIFT
 20

	)

209 
	#PHY_CNTL2_AMDIX_SHIFT
 25

	)

211 
	#PHY_CNTL2_RMAE
 
	`BIT
(31Ë

	)

214 
	#PHY_CNTL3_RNT
 
	`BIT
(10Ë

	)

217 
	#PORT_TH_PPT_MASK
 
	`BITMASK
(8Ë

	)

218 
	#PORT_TH_CPUT_SHIFT
 8

	)

219 
	#PORT_TH_CPUT_MASK
 
	`BITMASK
(8)

	)

220 
	#PORT_TH_CPUHT_SHIFT
 16

	)

221 
	#PORT_TH_CPUHT_MASK
 
	`BITMASK
(8)

	)

222 
	#PORT_TH_CPURT_SHIFT
 24

	)

223 
	#PORT_TH_CPURT_MASK
 
	`BITMASK
(8)

	)

226 
	#EMPTY_CNT_EBGB_MASK
 
	`BITMASK
(9Ë

	)

229 
	#GPIO_CONF0_MASK
 
	`BITMASK
(8)

	)

230 
	#GPIO_CONF0_IM_SHIFT
 0

	)

231 
	#GPIO_CONF0_IV_SHIFT
 8

	)

232 
	#GPIO_CONF0_OE_SHIFT
 16

	)

233 
	#GPIO_CONF0_OV_SHIFT
 24

	)

234 
	#GPIO_CONF0_IM_MASK
 (0xFF << 
GPIO_CONF0_IM_SHIFT
)

	)

235 
	#GPIO_CONF0_IV_MASK
 (0xFF << 
GPIO_CONF0_IV_SHIFT
)

	)

236 
	#GPIO_CONF0_OE_MASK
 (0xFF << 
GPIO_CONF0_OE_SHIFT
)

	)

237 
	#GPIO_CONF0_OV_MASK
 (0xFF << 
GPIO_CONF0_OV_SHIFT
)

	)

240 
	#GPIO_CONF2_CSX0
 
	`BIT
(4Ë

	)

241 
	#GPIO_CONF2_CSX1
 
	`BIT
(5Ë

	)

242 
	#GPIO_CONF2_EW
 
	`BIT
(6Ë

	)

245 
	#SWITCH_INT_SHD
 
	`BIT
(0Ë

	)

246 
	#SWITCH_INT_SLD
 
	`BIT
(1Ë

	)

247 
	#SWITCH_INT_RHD
 
	`BIT
(2Ë

	)

248 
	#SWITCH_INT_RLD
 
	`BIT
(3Ë

	)

249 
	#SWITCH_INT_HDF
 
	`BIT
(4Ë

	)

250 
	#SWITCH_INT_LDF
 
	`BIT
(5Ë

	)

251 
	#SWITCH_INT_P0QF
 
	`BIT
(6Ë

	)

252 
	#SWITCH_INT_P1QF
 
	`BIT
(7Ë

	)

253 
	#SWITCH_INT_P2QF
 
	`BIT
(8Ë

	)

254 
	#SWITCH_INT_P3QF
 
	`BIT
(9Ë

	)

255 
	#SWITCH_INT_P4QF
 
	`BIT
(10Ë

	)

256 
	#SWITCH_INT_P5QF
 
	`BIT
(11Ë

	)

257 
	#SWITCH_INT_CPQF
 
	`BIT
(13Ë

	)

258 
	#SWITCH_INT_GQF
 
	`BIT
(14Ë

	)

259 
	#SWITCH_INT_MD
 
	`BIT
(15Ë

	)

260 
	#SWITCH_INT_BCS
 
	`BIT
(16Ë

	)

261 
	#SWITCH_INT_PSC
 
	`BIT
(18Ë

	)

262 
	#SWITCH_INT_ID
 
	`BIT
(19Ë

	)

263 
	#SWITCH_INT_W0TE
 
	`BIT
(20Ë

	)

264 
	#SWITCH_INT_W1TE
 
	`BIT
(21Ë

	)

265 
	#SWITCH_INT_RDE
 
	`BIT
(22Ë

	)

266 
	#SWITCH_INT_SDE
 
	`BIT
(23Ë

	)

267 
	#SWITCH_INT_CPUH
 
	`BIT
(24Ë

	)

270 
	#TIMER_INT_TOS
 
	`BIT
(0Ë

	)

271 
	#TIMER_INT_TOM
 
	`BIT
(16Ë

	)

274 
	#TIMER_PERIOD_MASK
 
	`BITMASK
(16Ë

	)

275 
	#TIMER_PERIOD_DEFAULT
 0xFFFF

	)

276 
	#TIMER_TE
 
	`BIT
(16Ë

	)

279 
	#LED_MODE_MASK
 
	`BITMASK
(4)

	)

280 
	#LED_MODE_INPUT
 0

	)

281 
	#LED_MODE_FLASH
 1

	)

282 
	#LED_MODE_OUT_HIGH
 2

	)

283 
	#LED_MODE_OUT_LOW
 3

	)

284 
	#LED_MODE_LINK
 4

	)

285 
	#LED_MODE_SPEED
 5

	)

286 
	#LED_MODE_DUPLEX
 6

	)

287 
	#LED_MODE_ACT
 7

	)

288 
	#LED_MODE_COLL
 8

	)

289 
	#LED_MODE_LINK_ACT
 9

	)

290 
	#LED_MODE_DUPLEX_COLL
 10

	)

291 
	#LED_MODE_10M_ACT
 11

	)

292 
	#LED_MODE_100M_ACT
 12

	)

293 
	#LED0_MODE_SHIFT
 0

	)

294 
	#LED1_MODE_SHIFT
 4

	)

295 
	#LED2_MODE_SHIFT
 8

	)

296 
	#LED0_IV_SHIFT
 12

	)

297 
	#LED1_IV_SHIFT
 13

	)

298 
	#LED2_IV_SHIFT
 14

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_uart.h

15 #i‚de‡
_MACH_ADM5120_UART_H


16 
	#_MACH_ADM5120_UART_H


	)

18 
	#UART_BAUDDIV
(
˛k
, 
baud
Ë((˛k/(16 * (baud)))-1)

	)

20 
	#UART_REG_DATA
 0x00

	)

21 
	#UART_REG_RSR
 0x04

	)

22 
	#UART_REG_ECR
 
UART_REG_RSR


	)

23 
	#UART_REG_LCRH
 0x08

	)

24 
	#UART_REG_LCRM
 0x0C

	)

25 
	#UART_REG_LCRL
 0x10

	)

26 
	#UART_REG_CTRL
 0x14

	)

27 
	#UART_REG_FLAG
 0x18

	)

30 
	#UART_RSR_FE
 (1 << 0)

	)

31 
	#UART_RSR_PE
 (1 << 1)

	)

32 
	#UART_RSR_BE
 (1 << 2)

	)

33 
	#UART_RSR_OE
 (1 << 3)

	)

34 
	#UART_RSR_ERR
 (
UART_RSR_FE
 | 
UART_RSR_PE
 | 
UART_RSR_BE
)

	)

36 
	#UART_ECR_ALL
 0xFF

	)

39 
	#UART_LCRH_BRK
 (1 << 0Ë

	)

40 
	#UART_LCRH_PEN
 (1 << 1Ë

	)

41 
	#UART_LCRH_EPS
 (1 << 2Ë

	)

42 
	#UART_LCRH_STP1
 (0 << 3Ë

	)

43 
	#UART_LCRH_STP2
 (1 << 3Ë

	)

44 
	#UART_LCRH_FEN
 (1 << 4Ë

	)

46 
	#UART_LCRH_WLEN5
 (0 << 5)

	)

47 
	#UART_LCRH_WLEN6
 (1 << 5)

	)

48 
	#UART_LCRH_WLEN7
 (2 << 5)

	)

49 
	#UART_LCRH_WLEN8
 (3 << 5)

	)

52 
	#UART_CTRL_EN
 (1 << 0)

	)

55 
	#UART_FLAG_CTS
 (1 << 0)

	)

56 
	#UART_FLAG_DSR
 (1 << 1)

	)

57 
	#UART_FLAG_DCD
 (1 << 2)

	)

58 
	#UART_FLAG_BUSY
 (1 << 3)

	)

59 
	#UART_FLAG_RXFE
 (1 << 4)

	)

60 
	#UART_FLAG_TXFF
 (1 << 5)

	)

61 
	#UART_FLAG_RXFF
 (1 << 6)

	)

62 
	#UART_FLAG_TXFE
 (1 << 7)

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/asm/sizes.h

23 #i‚de‡
__sizes_h


24 
	#__sizes_h
 1

	)

27 
	#SZ_16
 0x00000010

	)

28 
	#SZ_256
 0x00000100

	)

29 
	#SZ_512
 0x00000200

	)

31 
	#SZ_1K
 0x00000400

	)

32 
	#SZ_4K
 0x00001000

	)

33 
	#SZ_8K
 0x00002000

	)

34 
	#SZ_16K
 0x00004000

	)

35 
	#SZ_64K
 0x00010000

	)

36 
	#SZ_128K
 0x00020000

	)

37 
	#SZ_256K
 0x00040000

	)

38 
	#SZ_512K
 0x00080000

	)

40 
	#SZ_1M
 0x00100000

	)

41 
	#SZ_2M
 0x00200000

	)

42 
	#SZ_4M
 0x00400000

	)

43 
	#SZ_8M
 0x00800000

	)

44 
	#SZ_16M
 0x01000000

	)

45 
	#SZ_32M
 0x02000000

	)

46 
	#SZ_64M
 0x04000000

	)

47 
	#SZ_128M
 0x08000000

	)

48 
	#SZ_256M
 0x10000000

	)

49 
	#SZ_512M
 0x20000000

	)

51 
	#SZ_1G
 0x40000000

	)

52 
	#SZ_2G
 0x80000000

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/cpu-feature-overrides.h

15 #i‚de‡
__ASM_MACH_ADM5120_CPU_FEATURE_OVERRIDES_H


16 
	#__ASM_MACH_ADM5120_CPU_FEATURE_OVERRIDES_H


	)

21 
	#˝u_has_éb
 1

	)

22 
	#˝u_has_4kex
 1

	)

23 
	#˝u_has_3k_ˇche
 0

	)

24 
	#˝u_has_4k_ˇche
 1

	)

25 
	#˝u_has_tx39_ˇche
 0

	)

26 
	#˝u_has_sb1_ˇche
 0

	)

27 
	#˝u_has_Âu
 0

	)

28 
	#˝u_has_32Âr
 0

	)

29 
	#˝u_has_cou¡î
 1

	)

30 
	#˝u_has_w©ch
 1

	)

31 
	#˝u_has_divec
 1

	)

35 
	#˝u_has_¥e„tch
 1

	)

37 
	#˝u_has_ejèg
 1

	)

38 
	#˝u_has_Œsc
 1

	)

40 
	#˝u_has_mùs16
 0

	)

41 
	#˝u_has_mdmx
 0

	)

42 
	#˝u_has_mùs3d
 0

	)

43 
	#˝u_has_sm¨tmùs
 0

	)

52 
	#˝u_has_mùs32r1
 1

	)

53 
	#˝u_has_mùs32r2
 0

	)

54 
	#˝u_has_mùs64r1
 0

	)

55 
	#˝u_has_mùs64r2
 0

	)

57 
	#˝u_has_d•
 0

	)

58 
	#˝u_has_mùsmt
 0

	)

61 
	#˝u_has_64bôs
 0

	)

62 
	#˝u_has_64bô_zîo_ªg
 0

	)

63 
	#˝u_has_64bô_gp_ªgs
 0

	)

64 
	#˝u_has_64bô_addªs£s
 0

	)

68 
	#˝u_dˇche_löe_size
(Ë16

	)

69 
	#˝u_iˇche_löe_size
(Ë16

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/gpio.h

12 #i‚de‡
_ASM_MIPS_MACH_ADM5120_GPIO_H


13 
	#_ASM_MIPS_MACH_ADM5120_GPIO_H


	)

15 
	#ARCH_NR_GPIOS
 64

	)

17 
	~<asm-gíîic/gpio.h
>

19 
	~<asm/mach-adm5120/adm5120_swôch.h
>

21 
	#ADM5120_GPIO_PIN0
 0

	)

22 
	#ADM5120_GPIO_PIN1
 1

	)

23 
	#ADM5120_GPIO_PIN2
 2

	)

24 
	#ADM5120_GPIO_PIN3
 3

	)

25 
	#ADM5120_GPIO_PIN4
 4

	)

26 
	#ADM5120_GPIO_PIN5
 5

	)

27 
	#ADM5120_GPIO_PIN6
 6

	)

28 
	#ADM5120_GPIO_PIN7
 7

	)

29 
	#ADM5120_GPIO_P0L0
 8

	)

30 
	#ADM5120_GPIO_P0L1
 9

	)

31 
	#ADM5120_GPIO_P0L2
 10

	)

32 
	#ADM5120_GPIO_P1L0
 11

	)

33 
	#ADM5120_GPIO_P1L1
 12

	)

34 
	#ADM5120_GPIO_P1L2
 13

	)

35 
	#ADM5120_GPIO_P2L0
 14

	)

36 
	#ADM5120_GPIO_P2L1
 15

	)

37 
	#ADM5120_GPIO_P2L2
 16

	)

38 
	#ADM5120_GPIO_P3L0
 17

	)

39 
	#ADM5120_GPIO_P3L1
 18

	)

40 
	#ADM5120_GPIO_P3L2
 19

	)

41 
	#ADM5120_GPIO_P4L0
 20

	)

42 
	#ADM5120_GPIO_P4L1
 21

	)

43 
	#ADM5120_GPIO_P4L2
 22

	)

44 
	#ADM5120_GPIO_MAX
 22

	)

45 
	#ADM5120_GPIO_COUNT
 
ADM5120_GPIO_MAX
+1

	)

47 
	#ADM5120_GPIO_LOW
 0

	)

48 
	#ADM5120_GPIO_HIGH
 1

	)

50 
	#ADM5120_GPIO_SWITCH
 0x10

	)

51 
	#ADM5120_GPIO_FLASH
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_FLASH
)

	)

52 
	#ADM5120_GPIO_LINK
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_LINK
)

	)

53 
	#ADM5120_GPIO_SPEED
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_SPEED
)

	)

54 
	#ADM5120_GPIO_DUPLEX
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_DUPLEX
)

	)

55 
	#ADM5120_GPIO_ACT
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_ACT
)

	)

56 
	#ADM5120_GPIO_COLL
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_COLL
)

	)

57 
	#ADM5120_GPIO_LINK_ACT
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_LINK_ACT
)

	)

58 
	#ADM5120_GPIO_DUPLEX_COLL
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_DUPLEX_COLL
)

	)

59 
	#ADM5120_GPIO_10M_ACT
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_10M_ACT
)

	)

60 
	#ADM5120_GPIO_100M_ACT
 (
ADM5120_GPIO_SWITCH
 | 
LED_MODE_100M_ACT
)

	)

62 
__adm5120_gpio0_gë_vÆue
(
gpio
);

63 
__adm5120_gpio0_£t_vÆue
(
gpio
, 
vÆue
);

64 
__adm5120_gpio1_gë_vÆue
(
gpio
);

65 
__adm5120_gpio1_£t_vÆue
(
gpio
, 
vÆue
);

66 
adm5120_gpio_to_úq
(
gpio
);

67 
adm5120_úq_to_gpio
(
úq
);

69 
ölöe
 
	$gpio_gë_vÆue
(
gpio
)

71 
ªt
;

73 
gpio
) {

74 
ADM5120_GPIO_PIN0
 ... 
ADM5120_GPIO_PIN7
:

75 
ªt
 = 
	`__adm5120_gpio0_gë_vÆue
(
gpio
);

77 
ADM5120_GPIO_P0L0
 ... 
ADM5120_GPIO_P4L2
:

78 
ªt
 = 
	`__adm5120_gpio1_gë_vÆue
(
gpio
 - 
ADM5120_GPIO_P0L0
);

81 
ªt
 = 
	`__gpio_gë_vÆue
(
gpio
);

85  
ªt
;

86 
	}
}

88 
ölöe
 
	$gpio_£t_vÆue
(
gpio
, 
vÆue
)

90 
gpio
) {

91 
ADM5120_GPIO_PIN0
 ... 
ADM5120_GPIO_PIN7
:

92 
	`__adm5120_gpio0_£t_vÆue
(
gpio
, 
vÆue
);

94 
ADM5120_GPIO_P0L0
 ... 
ADM5120_GPIO_P4L2
:

95 
	`__adm5120_gpio1_£t_vÆue
(
gpio
 - 
ADM5120_GPIO_P0L0
, 
vÆue
);

98 
	`__gpio_£t_vÆue
(
gpio
, 
vÆue
);

101 
	}
}

103 
ölöe
 
	$gpio_to_úq
(
gpio
)

105  
	`adm5120_gpio_to_úq
(
gpio
);

106 
	}
}

108 
ölöe
 
	$úq_to_gpio
(
úq
)

110  
	`adm5120_úq_to_gpio
(
úq
);

111 
	}
}

113 
	#gpio_ˇn¶ìp
 
__gpio_ˇn¶ìp


	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/irq.h

11 #i‚de‡
_ASM_MIPS_MACH_ADM5120_IRQ_H


12 
	#_ASM_MIPS_MACH_ADM5120_IRQ_H


	)

14 
	#MIPS_CPU_IRQ_BASE
 0

	)

15 
	#NR_IRQS
 24

	)

17 #ö˛ude_√xà<
úq
.
h
>

19 
	~<asm/mach-adm5120/adm5120_ötc.h
>

21 
	#NO_IRQ
 (-1)

	)

23 
	#MIPS_CPU_IRQ_COUNT
 8

	)

24 
	#MIPS_CPU_IRQ
(
x
Ë(
MIPS_CPU_IRQ_BASE
 + (x))

	)

26 
	#ADM5120_INTC_IRQ_BASE
 (
MIPS_CPU_IRQ_BASE
 + 
MIPS_CPU_IRQ_COUNT
)

	)

27 
	#ADM5120_INTC_IRQ
(
x
Ë(
ADM5120_INTC_IRQ_BASE
 + (x))

	)

29 
	#ADM5120_IRQ_INTC
 
	`MIPS_CPU_IRQ
(2)

	)

30 
	#ADM5120_IRQ_COUNTER
 
	`MIPS_CPU_IRQ
(7)

	)

32 
	#ADM5120_IRQ_TIMER
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_TIMER
)

	)

33 
	#ADM5120_IRQ_UART0
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_UART0
)

	)

34 
	#ADM5120_IRQ_UART1
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_UART1
)

	)

35 
	#ADM5120_IRQ_USBC
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_USBC
)

	)

36 
	#ADM5120_IRQ_GPIO2
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_GPIO2
)

	)

37 
	#ADM5120_IRQ_GPIO4
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_GPIO4
)

	)

38 
	#ADM5120_IRQ_PCI0
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_PCI0
)

	)

39 
	#ADM5120_IRQ_PCI1
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_PCI1
)

	)

40 
	#ADM5120_IRQ_PCI2
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_PCI2
)

	)

41 
	#ADM5120_IRQ_SWITCH
 
	`ADM5120_INTC_IRQ
(
INTC_IRQ_SWITCH
)

	)

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/admboot.h

12 #i‚de‡
_ADMBOOT_H


13 
	#_ADMBOOT_H


	)

15 
	$admboŸ_gë_mac_ba£
(
u32
 
off£t
, u32 
Àn
, 
u8
 *
mac
Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/cfe.h

12 #i‚de‡
_PROM_CFE_H_


13 
	#_PROM_CFE_H_


	)

15 
	$c„_¥e£¡
(Ë
__öô
;

16 *
	`c„_gëív
(*);

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/generic.h

12 #i‚de‡
_PROM_GENERIC_H_


13 
	#_PROM_GENERIC_H_


	)

15 
	$gíîic_¥om_¥e£¡
(Ë
__öô
;

16 *
	`gíîic_¥om_gëív
(*);

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/myloader.h

12 #i‚de‡
_MYLOADER_H_


13 
	#_MYLOADER_H_


	)

31 
	#MYLO_MAGIC_FIRMWARE
 0x4C594D00

	)

32 
	#MYLO_MAGIC_20021103
 0x20021103

	)

33 
	#MYLO_MAGIC_20021107
 0x20021107

	)

35 
	#MYLO_MAGIC_SYS_PARAMS
 
MYLO_MAGIC_20021107


	)

36 
	#MYLO_MAGIC_PARTITIONS
 
MYLO_MAGIC_20021103


	)

37 
	#MYLO_MAGIC_BOARD_PARAMS
 
MYLO_MAGIC_20021103


	)

42 
	#MYLO_MIPS_SYS_PARAMS
 0x80000800

	)

43 
	#MYLO_MIPS_BOARD_PARAMS
 0x80000A00

	)

44 
	#MYLO_MIPS_PARTITIONS
 0x80000C00

	)

45 
	#MYLO_MIPS_BOOT_PARAMS
 0x80000E00

	)

48 
	#VENID_COMPEX
 0x11F6

	)

51 
	#DEVID_COMPEX_NP27G
 0x0078

	)

52 
	#DEVID_COMPEX_NP28G
 0x044C

	)

53 
	#DEVID_COMPEX_NP28GHS
 0x044E

	)

54 
	#DEVID_COMPEX_WP54Gv1C
 0x0514

	)

55 
	#DEVID_COMPEX_WP54G
 0x0515

	)

56 
	#DEVID_COMPEX_WP54AG
 0x0546

	)

57 
	#DEVID_COMPEX_WPP54AG
 0x0550

	)

58 
	#DEVID_COMPEX_WPP54G
 0x0555

	)

61 
	#DEVID_COMPEX_WP18
 0x047E

	)

62 
	#DEVID_COMPEX_NP18A
 0x0489

	)

65 
	#DEVID_COMPEX_NP26G8M
 0x03E8

	)

66 
	#DEVID_COMPEX_NP26G16M
 0x03E9

	)

68 
	smylo_fw_hódî
 {

69 
uöt32_t
 
	mmagic
;

70 
uöt32_t
 
	m¸c
;

71 
uöt32_t
 
	mªs0
;

72 
uöt32_t
 
	mªs1
;

73 
uöt16_t
 
	mvid
;

74 
uöt16_t
 
	mdid
;

75 
uöt16_t
 
	msvid
;

76 
uöt16_t
 
	msdid
;

77 
uöt32_t
 
	mªv
;

78 
uöt32_t
 
	mfwhi
;

79 
uöt32_t
 
	mfwlo
;

80 
uöt32_t
 
	mÊags
;

83 
	#FW_FLAG_BOARD_PARAMS_WP
 0x01

	)

84 
	#FW_FLAG_BOOT_SECTOR_WE
 0x02

	)

86 
	smylo_fw_blockdesc
 {

87 
uöt32_t
 
	mty≥
;

88 
uöt32_t
 
	maddr
;

89 
uöt32_t
 
	mdÀn
;

90 
uöt32_t
 
	mbÀn
;

93 
	#FW_DESC_TYPE_UNUSED
 0

	)

94 
	#FW_DESC_TYPE_USED
 1

	)

96 
	smylo_∑πôi⁄
 {

97 
uöt16_t
 
	mÊags
;

98 
uöt16_t
 
	mty≥
;

99 
uöt32_t
 
	maddr
;

101 
uöt32_t
 
	msize
;

102 
uöt32_t
 
	m∑øm
;

106 
	#PARTITION_FLAG_ACTIVE
 0x8000

	)

108 
	#PARTITION_FLAG_ISRAM
 0x2000

	)

109 
	#PARTIIION_FLAG_RAMLOAD
 0x1000

	)

110 
	#PARTITION_FLAG_PRELOAD
 0x0800

	)

112 
	#PARTITION_FLAG_HAVEHDR
 0x0002

	)

114 
	#PARTITION_TYPE_FREE
 0

	)

115 
	#PARTITION_TYPE_USED
 1

	)

117 
	#MYLO_MAX_PARTITIONS
 8

	)

120 
	smylo_∑πôi⁄_èbÀ
 {

121 
uöt32_t
 
	mmagic
;

122 
uöt32_t
 
	mªs0
;

123 
uöt32_t
 
	mªs1
;

124 
uöt32_t
 
	mªs2
;

125 
mylo_∑πôi⁄
 
	m∑πôi⁄s
[
MYLO_MAX_PARTITIONS
];

128 
	smylo_∑πôi⁄_hódî
 {

129 
uöt32_t
 
	mÀn
;

130 
uöt32_t
 
	m¸c
;

133 
	smylo_sy°em_∑øms
 {

134 
uöt32_t
 
	mmagic
;

135 
uöt32_t
 
	mªs0
;

136 
uöt32_t
 
	mªs1
;

137 
uöt32_t
 
	mmylo_vî
;

138 
uöt16_t
 
	mvid
;

139 
uöt16_t
 
	mdid
;

140 
uöt16_t
 
	msvid
;

141 
uöt16_t
 
	msdid
;

142 
uöt32_t
 
	mªv
;

143 
uöt32_t
 
	mfwhi
;

144 
uöt32_t
 
	mfwlo
;

145 
uöt32_t
 
	mt·p_addr
;

146 
uöt32_t
 
	m¥og_°¨t
;

147 
uöt32_t
 
	mÊash_size
;

148 
uöt32_t
 
	mdøm_size
;

152 
	smylo_ëh_addr
 {

153 
uöt8_t
 
	mmac
[6];

154 
uöt8_t
 
	mcsum
[2];

157 
	#MYLO_ETHADDR_COUNT
 8

	)

160 
	smylo_bﬂrd_∑øms
 {

161 
uöt32_t
 
	mmagic
;

162 
uöt32_t
 
	mªs0
;

163 
uöt32_t
 
	mªs1
;

164 
uöt32_t
 
	mªs2
;

165 
mylo_ëh_addr
 
	maddr
[
MYLO_ETHADDR_COUNT
];

168 
	smylﬂdî_öfo
 {

169 
u32
 
	mvid
;

170 
u32
 
	mdid
;

171 
u32
 
	msvid
;

172 
u32
 
	msdid
;

173 
uöt8_t
 
	mmacs
[
MYLO_ETHADDR_COUNT
][6];

176 
mylﬂdî_öfo
 myloader_info;

177 
	$mylﬂdî_¥e£¡
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/routerboot.h

12 #i‚de‡
_PROM_ROUTERBOOT_H_


13 
	#_PROM_ROUTERBOOT_H_


	)

15 
	srb_bios_£âögs
 {

16 
u32
 
	mhs_offs
;

17 
u32
 
	mhs_size
;

18 
u32
 
	mfw_offs
;

19 
u32
 
	mss_offs
;

20 
u32
 
	mss_size
;

23 
	srb_h¨d_£âögs
 {

24 *
	m«me
;

25 *
	mbios_vî
;

26 
u32
 
	mmem_size
;

27 
u32
 
	mmac_cou¡
;

28 
u8
 *
	mmac_ba£
;

31 
	$rouãrboŸ_¥e£¡
(Ë
__öô
;

32 *
	`rouãrboŸ_gë_bﬂrd«me
();

34 
rb_h¨d_£âögs
 
rb_hs
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/zynos.h

12 #i‚de‡
_ZYNOS_H


13 
	#_ZYNOS_H


	)

15 
	#ZYNOS_NAME_LEN
 32

	)

16 
	#ZYNOS_FEAT_BYTES
 22

	)

17 
	#ZYNOS_MAC_LEN
 6

	)

19 
	szynos_bﬂrd_öfo
 {

20 
	mvíd‹
[
ZYNOS_NAME_LEN
];

21 
	m¥odu˘
[
ZYNOS_NAME_LEN
];

22 
u32
 
	mboŸext_addr
;

23 
u32
 
	mªs0
;

24 
u16
 
	mbﬂrd_id
;

25 
u8
 
	mªs1
[6];

26 
u8
 
	m„©_Ÿhî
[
ZYNOS_FEAT_BYTES
];

27 
u8
 
	m„©_maö
;

28 
u8
 
	mªs2
;

29 
u8
 
	mmac
[
ZYNOS_MAC_LEN
];

30 
u8
 
	mcou¡ry
;

31 
u8
 
	mdbgÊag
;

32 } 
__©åibuã__
 ((
∑cked
));

37 
	#ZYNOS_VENDOR_ID_ZYXEL
 0

	)

38 
	#ZYNOS_VENDOR_ID_NETGEAR
 1

	)

39 
	#ZYNOS_VENDOR_ID_DLINK
 2

	)

40 
	#ZYNOS_VENDOR_ID_OTHER
 3

	)

41 
	#ZYNOS_VENDOR_ID_LUCENT
 4

	)

46 
	#ZYNOS_VENDOR_DLINK
 "D-Lök"

	)

47 
	#ZYNOS_VENDOR_LUCENT
 "LUCENT"

	)

48 
	#ZYNOS_VENDOR_NETGEAR
 "NëGór"

	)

49 
	#ZYNOS_VENDOR_ZYXEL
 "ZyXEL"

	)

54 
	#ZYNOS_BOARD_ES2108
 0x00F2

	)

55 
	#ZYNOS_BOARD_ES2108F
 0x01AF

	)

56 
	#ZYNOS_BOARD_ES2108G
 0x00F3

	)

57 
	#ZYNOS_BOARD_ES2108LC
 0x00FC

	)

58 
	#ZYNOS_BOARD_ES2108PWR
 0x00F4

	)

59 
	#ZYNOS_BOARD_HS100
 0x9FF1

	)

60 
	#ZYNOS_BOARD_P334
 0x9FF5

	)

61 
	#ZYNOS_BOARD_P334U
 0x9FDD

	)

62 
	#ZYNOS_BOARD_P334W
 0x9FF3

	)

63 
	#ZYNOS_BOARD_P334WH
 0x00E0

	)

64 
	#ZYNOS_BOARD_P334WHD
 0x00E1

	)

65 
	#ZYNOS_BOARD_P334WT
 0x9FEF

	)

66 
	#ZYNOS_BOARD_P334WT_ALT
 0x9F02

	)

67 
	#ZYNOS_BOARD_P335
 0x9FED

	)

68 
	#ZYNOS_BOARD_P335PLUS
 0x0025

	)

69 
	#ZYNOS_BOARD_P335U
 0x9FDC

	)

74 
	#ZYNOS_MAGIC_DBGAREA1
 0x48646267

	)

75 
	#ZYNOS_MAGIC_DBGAREA2
 0x61726561

	)

77 
	sboŸba£_öfo
 {

78 
u16
 
	mvíd‹_id
;

79 
u16
 
	mbﬂrd_id
;

80 
u8
 
	mmac
[6];

83 
boŸba£_öfo
 bootbase_info;

84 
	$boŸba£_¥e£¡
(Ë
__öô
;

	@linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/war.h

8 #i‚de‡
__ASM_MIPS_MACH_ADM5120_WAR_H


9 
	#__ASM_MIPS_MACH_ADM5120_WAR_H


	)

11 
	#R4600_V1_INDEX_ICACHEOP_WAR
 0

	)

12 
	#R4600_V1_HIT_CACHEOP_WAR
 0

	)

13 
	#R4600_V2_HIT_CACHEOP_WAR
 0

	)

14 
	#R5432_CP0_INTERRUPT_WAR
 0

	)

15 
	#BCM1250_M3_WAR
 0

	)

16 
	#SIBYTE_1956_WAR
 0

	)

17 
	#MIPS4K_ICACHE_REFILL_WAR
 0

	)

18 
	#MIPS_CACHE_SYNC_WAR
 0

	)

19 
	#TX49XX_ICACHE_INDEX_INV_WAR
 0

	)

20 
	#RM9000_CDEX_SMP_WAR
 0

	)

21 
	#ICACHE_REFILLS_WORKAROUND_WAR
 0

	)

22 
	#R10000_LLSC_WAR
 0

	)

23 
	#MIPS34K_MISSED_ITLB_WAR
 0

	)

	@linux/adm5120/files-3.18/arch/mips/pci/pci-adm5120.c

19 
	~<löux/ty≥s.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/io.h
>

24 
	~<löux/dñay.h
>

26 
	~<löux/pci.h
>

27 
	~<löux/pci_ids.h
>

28 
	~<löux/pci_ªgs.h
>

30 
	~<asm/boŸöfo.h
>

32 
	~<asm/mach-adm5120/adm5120_defs.h
>

33 
	~<asm/mach-adm5120/adm5120_öfo.h
>

34 
	~<asm/mach-adm5120/adm5120_defs.h
>

35 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

37 #unde‡
DEBUG


39 #ifde‡
DEBUG


40 
	#DBG
(
f
, 
a
...Ë
	`¥ötk
(
KERN_DEBUG
 f, ##á)

	)

42 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

45 
	#PCI_ENABLE
 0x80000000

	)

49 
adm5120_pci_ƒ_úqs
 
	g__öôd©a
;

50 
adm5120_pci_úq
 *
adm5120_pci_úq_m≠
 
	g__öôd©a
;

52 
DEFINE_SPINLOCK
(
pci_lock
);

56 
ölöe
 
	$wrôe_cfgaddr
(
u32
 
addr
)

58 
	`__øw_wrôñ
((
addr
 | 
PCI_ENABLE
),

59 (
__iomem
 *)(
	`KSEG1ADDR
(
ADM5120_PCICFG_ADDR
)));

60 
	}
}

62 
ölöe
 
	$wrôe_cfgd©a
(
u32
 
d©a
)

64 
	`__øw_wrôñ
(
d©a
, (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_PCICFG_DATA
));

65 
	}
}

67 
ölöe
 
u32
 
	$ªad_cfgd©a
()

69  
	`__øw_ªadl
((
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_PCICFG_DATA
));

70 
	}
}

72 
ölöe
 
u32
 
	$mkaddr
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
)

74  ((
bus
->
numbî
 & 0xFFË<< 16Ë| ((
dev‚
 & 0xFF) << 8) | \

75 (
whîe
 & 0xFC);

76 
	}
}

80 
	$pci_c⁄fig_ªad
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
,

81 
size
, 
u32
 *
vÆ
)

83 
Êags
;

84 
u32
 
d©a
;

86 
	`•ö_lock_úqßve
(&
pci_lock
, 
Êags
);

88 
	`wrôe_cfgaddr
(
	`mkaddr
(
bus
, 
dev‚
, 
whîe
));

89 
d©a
 = 
	`ªad_cfgd©a
();

91 
	`DBG
("PCI: cfg_read %02u.%02u.%01u/%02X:%01d, cfg:0x%08X",

92 
bus
->
numbî
, 
	`PCI_SLOT
(
dev‚
), 
	`PCI_FUNC
(devfn),

93 
whîe
, 
size
, 
d©a
);

95 
size
) {

97 i‡(
whîe
 & 1)

98 
d©a
 >>= 8;

99 i‡(
whîe
 & 2)

100 
d©a
 >>= 16;

101 
d©a
 &= 0xFF;

104 i‡(
whîe
 & 2)

105 
d©a
 >>= 16;

106 
d©a
 &= 0xFFFF;

110 *
vÆ
 = 
d©a
;

111 
	`DBG
(", 0x%08XÑëu∫ed\n", 
d©a
);

113 
	`•ö_u∆ock_úqª°‹e
(&
pci_lock
, 
Êags
);

115  
PCIBIOS_SUCCESSFUL
;

116 
	}
}

118 
	$pci_c⁄fig_wrôe
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
,

119 
size
, 
u32
 
vÆ
)

121 
Êags
;

122 
u32
 
d©a
;

123 
s
;

125 
	`•ö_lock_úqßve
(&
pci_lock
, 
Êags
);

127 
	`wrôe_cfgaddr
(
	`mkaddr
(
bus
, 
dev‚
, 
whîe
));

128 
d©a
 = 
	`ªad_cfgd©a
();

130 
	`DBG
("PCI: cfg_write %02u.%02u.%01u/%02X:%01d, cfg:0x%08X",

131 
bus
->
numbî
, 
	`PCI_SLOT
(
dev‚
), 
	`PCI_FUNC
(devfn),

132 
whîe
, 
size
, 
d©a
);

134 
size
) {

136 
s
 = ((
whîe
 & 3) << 3);

137 
d©a
 &~(0xFF << 
s
);

138 
d©a
 |((
vÆ
 & 0xFFË<< 
s
);

141 
s
 = ((
whîe
 & 2) << 4);

142 
d©a
 &~(0xFFFF << 
s
);

143 
d©a
 |((
vÆ
 & 0xFFFFË<< 
s
);

146 
d©a
 = 
vÆ
;

150 
	`wrôe_cfgd©a
(
d©a
);

151 
	`DBG
(", 0x%08X wrôãn\n", 
d©a
);

153 
	`•ö_u∆ock_úqª°‹e
(&
pci_lock
, 
Êags
);

155  
PCIBIOS_SUCCESSFUL
;

156 
	}
}

158 
pci_›s
 
	gadm5120_pci_›s
 = {

159 .
ªad
 = 
pci_c⁄fig_ªad
,

160 .
	gwrôe
 = 
pci_c⁄fig_wrôe
,

165 
	$adm5120_pci_fixup
(
pci_dev
 *
dev
)

167 i‡(
dev
->
dev‚
 != 0)

171 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
,

172 (
PCI_COMMAND_IO
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
));

175 
	`pci_wrôe_c⁄fig_byã
(
dev
, 
PCI_CACHE_LINE_SIZE
, 4);

178 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0);

179 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_1
, 0);

180 
	}
}

182 
DECLARE_PCI_FIXUP_HEADER
(
PCI_VENDOR_ID_ADMTEK
, 
PCI_DEVICE_ID_ADMTEK_ADM5120
,

183 
adm5120_pci_fixup
);

187 
__öô
 
	$adm5120_pci_£t_úq_m≠
(
ƒ_úqs
,

188 
adm5120_pci_úq
 *
m≠
)

190 
adm5120_pci_ƒ_úqs
 = 
ƒ_úqs
;

191 
adm5120_pci_úq_m≠
 = 
m≠
;

192 
	}
}

194 
__öô
 
	$pcibios_m≠_úq
(c⁄° 
pci_dev
 *
dev
, 
u8
 
¶Ÿ
, u8 
pö
)

196 
úq
 = -1;

197 
i
;

199 i‡((!
adm5120_pci_ƒ_úqs
Ë|| (!
adm5120_pci_úq_m≠
)) {

200 
	`¥ötk
(
KERN_ALERT
 "PCI:Öci_irq_map isÇot initialized\n");

201 
out
;

204 i‡(
¶Ÿ
 < 1 || slot > 4) {

205 
	`¥ötk
(
KERN_ALERT
 "PCI: slotÇumber %u isÇot supported\n",

206 
¶Ÿ
);

207 
out
;

210 
i
 = 0; i < 
adm5120_pci_ƒ_úqs
; i++) {

211 i‡((
adm5120_pci_úq_m≠
[
i
].
¶Ÿ
 == slot)

212 && (
adm5120_pci_úq_m≠
[
i
].
func
 =
	`PCI_FUNC
(
dev
->
dev‚
))

213 && (
adm5120_pci_úq_m≠
[
i
].
pö
 ==Öin)) {

214 
úq
 = 
adm5120_pci_úq_m≠
[
i
].irq;

219 i‡(
úq
 < 0) {

220 
	`¥ötk
(
KERN_ALERT
 "PCI:Ço irq found for %sÖin:%u\n",

221 
	`pci_«me
((
pci_dev
 *)
dev
), 
pö
);

223 
	`¥ötk
(
KERN_INFO
 "PCI: mapping irq for %sÖin:%u, irq:%d\n",

224 
	`pci_«me
((
pci_dev
 *)
dev
), 
pö
, 
úq
);

227 
out
:

228  
úq
;

229 
	}
}

231 
	$pcibios_∂©_dev_öô
(
pci_dev
 *
dev
)

234 
	}
}

238 
ªsour˚
 
	gpci_io_ªsour˚
 = {

239 .
«me
 = "ADM5120 PCI I/O",

240 .
	g°¨t
 = 
ADM5120_PCIIO_BASE
,

241 .
	gíd
 = 
ADM5120_PCICFG_ADDR
-1,

242 .
	gÊags
 = 
IORESOURCE_IO


245 
ªsour˚
 
	gpci_mem_ªsour˚
 = {

246 .
«me
 = "ADM5120 PCI MEM",

247 .
	g°¨t
 = 
ADM5120_PCIMEM_BASE
,

248 .
	gíd
 = 
ADM5120_PCIIO_BASE
-1,

249 .
	gÊags
 = 
IORESOURCE_MEM


252 
pci_c⁄åﬁÀr
 
	gadm5120_c⁄åﬁÀr
 = {

253 .
pci_›s
 = &
adm5120_pci_›s
,

254 .
	gio_ªsour˚
 = &
pci_io_ªsour˚
,

255 .
	gmem_ªsour˚
 = &
pci_mem_ªsour˚
,

258 
__öô
 
	$adm5120_pci_£tup
()

260 i‡(
	`adm5120_∑ckage_pqÂ
()) {

261 
	`¥ötk
(
KERN_INFO
 "PCI:Çotávailable on ADM5120P\n");

266 
PCIBIOS_MIN_IO
 = 0x00000000;

267 
PCIBIOS_MIN_MEM
 = 0x00000000;

270 
i›‹t_ªsour˚
.
íd
 = 0x1fffffff;

271 
iomem_ªsour˚
.
íd
 = 0xffffffff;

273 
	`ªgi°î_pci_c⁄åﬁÀr
(&
adm5120_c⁄åﬁÀr
);

275 
	}
}

277 
¨ch_öôˇŒ
(
adm5120_pci_£tup
);

	@linux/adm5120/files-3.18/drivers/ata/pata_rb153_cf.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/io.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/úq.h
>

26 
	~<löux/gpio.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

29 
	~<löux/lib©a.h
>

30 
	~<scsi/scsi_ho°.h
>

32 
	#DRV_NAME
 "∑è-rb153-cf"

	)

33 
	#DRV_VERSION
 "0.5.0"

	)

34 
	#DRV_DESC
 "PATA drivî f‹ RouãrBOARD 153 Com∑˘ Fœsh"

	)

36 
	#RB153_CF_MAXPORTS
 1

	)

37 
	#RB153_CF_IO_DELAY
 100

	)

39 
	#RB153_CF_REG_CMD
 0x0800

	)

40 
	#RB153_CF_REG_CTRL
 0x080E

	)

41 
	#RB153_CF_REG_DATA
 0x0C00

	)

43 
	srb153_cf_öfo
 {

44 
__iomem
 *
	mioba£
;

45 
	mgpio_löe
;

46 
	m‰ozí
;

47 
	múq
;

50 
ölöe
 
	$rb153_∑è_föish_io
(
©a_p‹t
 *
≠
)

52 
rb153_cf_öfo
 *
öfo
 = 
≠
->
ho°
->
¥iv©e_d©a
;

56 
	`©a_sff_dma_∑u£
(
≠
);

57 
	`ndñay
(
RB153_CF_IO_DELAY
);

59 
	`úq_£t_úq_ty≥
(
öfo
->
úq
, 
IRQ_TYPE_LEVEL_HIGH
);

60 
	}
}

62 
	$rb153_∑è_exec_comm™d
(
©a_p‹t
 *
≠
,

63 c⁄° 
©a_èskfûe
 *
tf
)

65 
	`wrôeb
(
tf
->
comm™d
, 
≠
->
iﬂddr
.
comm™d_addr
);

66 
	`rb153_∑è_föish_io
(
≠
);

67 
	}
}

69 
	$rb153_∑è_d©a_x„r
(
©a_devi˚
 *
adev
,

70 *
buf
,

71 
buÊí
,

72 
wrôe_d©a
)

74 
__iomem
 *
iﬂddr
 = 
adev
->
lök
->
≠
->iﬂddr.
d©a_addr
;

75 
t
;

77 
t
 = 
buÊí
;

78 i‡(
wrôe_d©a
) {

79 ; 
t
 > 0;Å--, 
buf
++)

80 
	`wrôeb
(*
buf
, 
iﬂddr
);

82 ; 
t
 > 0;Å--, 
buf
++)

83 *
buf
 = 
	`ªadb
(
iﬂddr
);

86 
	`rb153_∑è_föish_io
(
adev
->
lök
->
≠
);

87  
buÊí
;

88 
	}
}

90 
	$rb153_∑è_‰ìze
(
©a_p‹t
 *
≠
)

92 
rb153_cf_öfo
 *
öfo
 = 
≠
->
ho°
->
¥iv©e_d©a
;

94 
öfo
->
‰ozí
 = 1;

95 
	}
}

97 
	$rb153_∑è_thaw
(
©a_p‹t
 *
≠
)

99 
rb153_cf_öfo
 *
öfo
 = 
≠
->
ho°
->
¥iv©e_d©a
;

101 
öfo
->
‰ozí
 = 0;

102 
	}
}

104 
úqªtu∫_t
 
	$rb153_∑è_úq_h™dÀr
(
úq
, *
dev_ö°™˚
)

106 
©a_ho°
 *
ah
 = 
dev_ö°™˚
;

107 
rb153_cf_öfo
 *
öfo
 = 
ah
->
¥iv©e_d©a
;

109 i‡(
	`gpio_gë_vÆue
(
öfo
->
gpio_löe
)) {

110 
	`úq_£t_úq_ty≥
(
öfo
->
úq
, 
IRQ_TYPE_LEVEL_LOW
);

111 i‡(!
öfo
->
‰ozí
)

112 
	`©a_sff_öãºu±
(
úq
, 
dev_ö°™˚
);

114 
	`úq_£t_úq_ty≥
(
öfo
->
úq
, 
IRQ_TYPE_LEVEL_HIGH
);

117  
IRQ_HANDLED
;

118 
	}
}

120 
©a_p‹t_›î©i⁄s
 
	grb153_∑è_p‹t_›s
 = {

121 .
öhîôs
 = &
©a_sff_p‹t_›s
,

122 .
	gsff_exec_comm™d
 = 
rb153_∑è_exec_comm™d
,

123 .
	gsff_d©a_x„r
 = 
rb153_∑è_d©a_x„r
,

124 .
	g‰ìze
 = 
rb153_∑è_‰ìze
,

125 .
	gthaw
 = 
rb153_∑è_thaw
,

128 
scsi_ho°_ãm∂©e
 
	grb153_∑è_sht
 = {

129 
ATA_PIO_SHT
(
DRV_NAME
),

132 
	$rb153_∑è_£tup_p‹t
(
©a_ho°
 *
ah
)

134 
rb153_cf_öfo
 *
öfo
 = 
ah
->
¥iv©e_d©a
;

135 
©a_p‹t
 *
≠
;

137 
≠
 = 
ah
->
p‹ts
[0];

139 
≠
->
›s
 = &
rb153_∑è_p‹t_›s
;

140 
≠
->
pio_mask
 = 0x1f;

142 
≠
->
iﬂddr
.
cmd_addr
 = 
öfo
->
ioba£
 + 
RB153_CF_REG_CMD
;

143 
≠
->
iﬂddr
.
˘l_addr
 = 
öfo
->
ioba£
 + 
RB153_CF_REG_CTRL
;

144 
≠
->
iﬂddr
.
Æt°©us_addr
 = 
öfo
->
ioba£
 + 
RB153_CF_REG_CTRL
;

146 
	`©a_sff_°d_p‹ts
(&
≠
->
iﬂddr
);

148 
≠
->
iﬂddr
.
d©a_addr
 = 
öfo
->
ioba£
 + 
RB153_CF_REG_DATA
;

149 
	}
}

151 
	$rb153_∑è_drivî_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

153 
úq
;

154 
gpio
;

155 
ªsour˚
 *
ªs
;

156 
©a_ho°
 *
ah
;

157 
rb153_cf_öfo
 *
öfo
;

158 
ªt
;

160 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

161 i‡(!
ªs
) {

162 
	`dev_îr
(&
pdev
->
dev
, "no IOMEMÑesource found\n");

163  -
EINVAL
;

166 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

167 i‡(
úq
 <= 0) {

168 
	`dev_îr
(&
pdev
->
dev
, "no IRQÑesource found\n");

169  -
ENOENT
;

172 
gpio
 = 
	`úq_to_gpio
(
úq
);

173 i‡(
gpio
 < 0) {

174 
	`dev_îr
(&
pdev
->
dev
, "nÿGPIO found f‹ irq%d\n", 
úq
);

175  -
ENOENT
;

178 
ªt
 = 
	`gpio_ªque°
(
gpio
, 
DRV_NAME
);

179 i‡(
ªt
) {

180 
	`dev_îr
(&
pdev
->
dev
, "GPIOÑequest failed\n");

181  
ªt
;

184 
ah
 = 
	`©a_ho°_Æloc
(&
pdev
->
dev
, 
RB153_CF_MAXPORTS
);

185 i‡(!
ah
)

186  -
ENOMEM
;

188 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
ah
);

190 
öfo
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*öfo), 
GFP_KERNEL
);

191 i‡(!
öfo
)

192  -
ENOMEM
;

194 
ah
->
¥iv©e_d©a
 = 
öfo
;

195 
öfo
->
gpio_löe
 = 
gpio
;

196 
öfo
->
úq
 = irq;

198 
öfo
->
ioba£
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
ªs
->
°¨t
,

199 
ªs
->
íd
 -Ñes->
°¨t
 + 1);

200 i‡(!
öfo
->
ioba£
)

201  -
ENOMEM
;

203 
ªt
 = 
	`gpio_dúe˘i⁄_öput
(
gpio
);

204 i‡(
ªt
) {

205 
	`dev_îr
(&
pdev
->
dev
, "unableÅo set GPIO direction,Érr=%d\n",

206 
ªt
);

207 
îr_‰ì_gpio
;

210 
	`rb153_∑è_£tup_p‹t
(
ah
);

212 
ªt
 = 
	`©a_ho°_a˘iv©e
(
ah
, 
úq
, 
rb153_∑è_úq_h™dÀr
,

213 
IRQF_TRIGGER_LOW
, &
rb153_∑è_sht
);

214 i‡(
ªt
)

215 
îr_‰ì_gpio
;

219 
îr_‰ì_gpio
:

220 
	`gpio_‰ì
(
gpio
);

222  
ªt
;

223 
	}
}

225 
	$rb153_∑è_drivî_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

227 
©a_ho°
 *
ah
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

228 
rb153_cf_öfo
 *
öfo
 = 
ah
->
¥iv©e_d©a
;

230 
	`©a_ho°_dëach
(
ah
);

231 
	`gpio_‰ì
(
öfo
->
gpio_löe
);

234 
	}
}

236 
∂©f‹m_drivî
 
	grb153_∑è_∂©f‹m_drivî
 = {

237 .
¥obe
 = 
rb153_∑è_drivî_¥obe
,

238 .
	gªmove
 = 
rb153_∑è_drivî_ªmove
,

239 .
	gdrivî
 = {

240 .
«me
 = 
DRV_NAME
,

241 .
	gow√r
 = 
THIS_MODULE
,

247 
	#DRV_INFO
 
DRV_DESC
 " vîsi⁄ " 
DRV_VERSION


	)

249 
__öô
 
	$rb153_∑è_moduÀ_öô
()

251 
	`¥ötk
(
KERN_INFO
 
DRV_INFO
 "\n");

253  
	`∂©f‹m_drivî_ªgi°î
(&
rb153_∑è_∂©f‹m_drivî
);

254 
	}
}

256 
__exô
 
	$rb153_∑è_moduÀ_exô
()

258 
	`∂©f‹m_drivî_uƒegi°î
(&
rb153_∑è_∂©f‹m_drivî
);

259 
	}
}

261 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

262 
MODULE_DESCRIPTION
(
DRV_DESC
);

263 
MODULE_VERSION
(
DRV_VERSION
);

264 
MODULE_LICENSE
("GPL v2");

266 
moduÀ_öô
(
rb153_∑è_moduÀ_öô
);

267 
moduÀ_exô
(
rb153_∑è_moduÀ_exô
);

	@linux/adm5120/files-3.18/drivers/leds/ledtrig-adm5120-switch.c

17 
	~<löux/kî√l.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/devi˚.h
>

22 
	~<löux/gpio.h
>

24 
	~"Àds.h
"

26 
	#DRV_NAME
 "p‹t_°©e"

	)

27 
	#DRV_DESC
 "LED ADM5120 Swôch P‹àSèã Triggî"

	)

29 
	sp‹t_°©e
 {

30 *
	m«me
;

31 
	mvÆue
;

34 
	#PORT_STATE
(
n
, 
v
Ë{.
«me
 = (n), .
vÆue
 = (v)}

	)

36 
p‹t_°©e
 
	gp‹t_°©es
[] = {

37 
PORT_STATE
("off", 
LED_OFF
),

38 
PORT_STATE
("⁄", 
LED_FULL
),

39 
PORT_STATE
("Êash", 
ADM5120_GPIO_FLASH
),

40 
PORT_STATE
("lök", 
ADM5120_GPIO_LINK
),

41 
PORT_STATE
("•ìd", 
ADM5120_GPIO_SPEED
),

42 
PORT_STATE
("du∂ex", 
ADM5120_GPIO_DUPLEX
),

43 
PORT_STATE
("a˘", 
ADM5120_GPIO_ACT
),

44 
PORT_STATE
("cﬁl", 
ADM5120_GPIO_COLL
),

45 
PORT_STATE
("lök_a˘", 
ADM5120_GPIO_LINK_ACT
),

46 
PORT_STATE
("du∂ex_cﬁl", 
ADM5120_GPIO_DUPLEX_COLL
),

47 
PORT_STATE
("10M_a˘", 
ADM5120_GPIO_10M_ACT
),

48 
PORT_STATE
("100M_a˘", 
ADM5120_GPIO_100M_ACT
),

51 
ssize_t
 
	$Àd_p‹t_°©e_show
(
devi˚
 *
dev
,

52 
devi˚_©åibuã
 *
©å
, *
buf
)

54 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

55 
p‹t_°©e
 *
°©e
 = 
Àd_cdev
->
åiggî_d©a
;

56 
Àn
 = 0;

57 
i
;

59 *
buf
 = '\0';

60 
i
 = 0; i < 
	`ARRAY_SIZE
(
p‹t_°©es
); i++) {

61 i‡(&
p‹t_°©es
[
i
] =
°©e
)

62 
Àn
 +
	`•rötf
(
buf
+Àn, "[%s] ", 
p‹t_°©es
[
i
].
«me
);

64 
Àn
 +
	`•rötf
(
buf
+Àn, "%†", 
p‹t_°©es
[
i
].
«me
);

66 
Àn
 +
	`•rötf
(
buf
+len, "\n");

68  
Àn
;

69 
	}
}

71 
ssize_t
 
	$Àd_p‹t_°©e_°‹e
(
devi˚
 *
dev
,

72 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

74 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

75 
size_t
 
Àn
;

76 
i
;

78 
i
 = 0; i < 
	`ARRAY_SIZE
(
p‹t_°©es
); i++) {

79 
Àn
 = 
	`°æí
(
p‹t_°©es
[
i
].
«me
);

80 i‡(
	`°∫cmp
(
p‹t_°©es
[
i
].
«me
, 
buf
, 
Àn
) != 0)

83 i‡(
buf
[
Àn
] != '\0' && buf[len] != '\n')

86 
Àd_cdev
->
åiggî_d©a
 = &
p‹t_°©es
[
i
];

87 
	`Àd_£t_brighäess
(
Àd_cdev
, 
p‹t_°©es
[
i
].
vÆue
);

88  
size
;

91  -
EINVAL
;

92 
	}
}

94 
DEVICE_ATTR
(
p‹t_°©e
, 0644, 
Àd_p‹t_°©e_show
,

95 
Àd_p‹t_°©e_°‹e
);

97 
	$adm5120_swôch_åig_a˘iv©e
(
Àd_˛assdev
 *
Àd_cdev
)

99 
p‹t_°©e
 *
°©e
 = 
p‹t_°©es
;

100 
rc
;

102 
Àd_cdev
->
åiggî_d©a
 = 
°©e
;

104 
rc
 = 
	`devi˚_¸óã_fûe
(
Àd_cdev
->
dev
, &
dev_©å_p‹t_°©e
);

105 i‡(
rc
)

106 
îr
;

108 
	`Àd_£t_brighäess
(
Àd_cdev
, 
°©e
->
vÆue
);

111 
îr
:

112 
Àd_cdev
->
åiggî_d©a
 = 
NULL
;

113 
	}
}

115 
	$adm5120_swôch_åig_dó˘iv©e
(
Àd_˛assdev
 *
Àd_cdev
)

117 
p‹t_°©e
 *
°©e
 = 
Àd_cdev
->
åiggî_d©a
;

119 i‡(!
°©e
)

122 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_p‹t_°©e
);

124 
	}
}

126 
Àd_åiggî
 
	gadm5120_swôch_Àd_åiggî
 = {

127 .
«me
 = 
DRV_NAME
,

128 .
	ga˘iv©e
 = 
adm5120_swôch_åig_a˘iv©e
,

129 .
	gdó˘iv©e
 = 
adm5120_swôch_åig_dó˘iv©e
,

132 
__öô
 
	$adm5120_swôch_åig_öô
()

134 
	`Àd_åiggî_ªgi°î
(&
adm5120_swôch_Àd_åiggî
);

136 
	}
}

138 
__exô
 
	$adm5120_swôch_åig_exô
()

140 
	`Àd_åiggî_uƒegi°î
(&
adm5120_swôch_Àd_åiggî
);

141 
	}
}

143 
moduÀ_öô
(
adm5120_swôch_åig_öô
);

144 
moduÀ_exô
(
adm5120_swôch_åig_exô
);

146 
MODULE_AUTHOR
("Bernhard Held <bernhardát bernhardheld.de>, "

148 
MODULE_DESCRIPTION
(
DRV_DESC
);

149 
MODULE_LICENSE
("GPL v2");

	@linux/adm5120/files-3.18/drivers/mtd/maps/adm5120-flash.c

16 
	~<löux/moduÀ.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/io.h
>

22 
	~<löux/devi˚.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/mtd/mtd.h
>

26 
	~<löux/mtd/m≠.h
>

27 
	~<löux/mtd/∑πôi⁄s.h
>

29 
	~<asm/mach-adm5120/adm5120_defs.h
>

30 
	~<asm/mach-adm5120/adm5120_swôch.h
>

31 
	~<asm/mach-adm5120/adm5120_mpmc.h
>

32 
	~<asm/mach-adm5120/adm5120_∂©f‹m.h
>

34 
	#DRV_NAME
 "adm5120-Êash"

	)

35 
	#DRV_DESC
 "ADM5120 fœsh MAP drivî"

	)

36 
	#MAX_PARSED_PARTS
 8

	)

38 #ifde‡
ADM5120_FLASH_DEBUG


39 
	#MAP_DBG
(
m
, 
f
, 
a
...Ë
	`¥ötk
(
KERN_INFO
 "%s: " f, (m->
«me
Ë, ##á)

	)

41 
	#MAP_DBG
(
m
, 
f
, 
a
...Ëdÿ{} 0)

	)

43 
	#MAP_ERR
(
m
, 
f
, 
a
...Ë
	`¥ötk
(
KERN_ERR
 "%s: " f, (m->
«me
Ë, ##á)

	)

44 
	#MAP_INFO
(
m
, 
f
, 
a
...Ë
	`¥ötk
(
KERN_INFO
 "%s: " f, (m->
«me
Ë, ##á)

	)

46 
	sadm5120_m≠_öfo
 {

47 
m≠_öfo
 
	mm≠
;

48 (*
	mswôch_b™k
)();

49 
	mwödow_size
;

52 
	sadm5120_Êash_öfo
 {

53 
mtd_öfo
 *
	mmtd
;

54 
ªsour˚
 *
	mªs
;

55 
∂©f‹m_devi˚
 *
	mdev
;

56 
adm5120_m≠_öfo
 
	mam≠
;

59 
	sÊash_desc
 {

60 
u32
 
	mphys
;

61 
u32
 
	m§s_shi·
;

67 
DEFINE_SPINLOCK
(
adm5120_Êash_•ö
);

68 
	#FLASH_LOCK
(Ë
	`•ö_lock
(&
adm5120_Êash_•ö
)

	)

69 
	#FLASH_UNLOCK
(Ë
	`•ö_u∆ock
(&
adm5120_Êash_•ö
)

	)

71 
u32
 
	gÊash_b™kwidths
[4] = { 1, 2, 4, 0 };

73 
u32
 
	gÊash_sizes
[8] = {

78 
Êash_desc
 
	gÊash_descs
[2] = {

80 .
phys
 = 
ADM5120_SRAM0_BASE
,

81 .
	g§s_shi·
 = 
MEMCTRL_SRS0_SHIFT
,

83 .
	gphys
 = 
ADM5120_SRAM1_BASE
,

84 .
	g§s_shi·
 = 
MEMCTRL_SRS1_SHIFT
,

88 c⁄° c⁄° *
	g¥obe_ty≥s
[] = {

92 
NULL


95 c⁄° c⁄° *
	g∑r£_ty≥s
[] = {

97 #ifde‡
CONFIG_MTD_REDBOOT_PARTS


100 #ifde‡
CONFIG_MTD_MYLOADER_PARTS


103 
NULL
,

106 
	#BANK_SIZE
 (2<<20)

	)

107 
	#BANK_SIZE_MAX
 (4<<20)

	)

108 
	#BANK_OFFS_MASK
 (
BANK_SIZE
-1)

	)

109 
	#BANK_START_MASK
 (~
BANK_OFFS_MASK
)

	)

111 
ölöe
 
adm5120_m≠_öfo
 *
	$m≠_to_am≠
(
m≠_öfo
 *
m≠
)

113  (
adm5120_m≠_öfo
 *)
m≠
;

114 
	}
}

116 
	$adm5120_Êash_swôchb™k
(
m≠_öfo
 *
m≠
,

117 
ofs
)

119 
adm5120_m≠_öfo
 *
am≠
 = 
	`m≠_to_am≠
(
m≠
);

120 
b™k
;

122 i‡(
am≠
->
swôch_b™k
 =
NULL
)

125 
b™k
 = (
ofs
 & 
BANK_START_MASK
) >> 21;

126 i‡(
b™k
 > 1)

127 
	`BUG
();

129 
	`MAP_DBG
(
m≠
, "swôchögÅÿb™k %u, ofs=%lX\n", 
b™k
, 
ofs
);

130 
am≠
->
	`swôch_b™k
(
b™k
);

131 
	}
}

133 
m≠_w‹d
 
	$adm5120_Êash_ªad
(
m≠_öfo
 *
m≠
, 
ofs
)

135 
adm5120_m≠_öfo
 *
am≠
 = 
	`m≠_to_am≠
(
m≠
);

136 
m≠_w‹d
 
ªt
;

138 
	`MAP_DBG
(
m≠
, "ªadög from of†%lX\n", 
ofs
);

140 i‡(
ofs
 >
am≠
->
wödow_size
)

141  
	`m≠_w‹d_ff
(
m≠
);

143 
	`FLASH_LOCK
();

144 
	`adm5120_Êash_swôchb™k
(
m≠
, 
ofs
);

145 
ªt
 = 
	`ölöe_m≠_ªad
(
m≠
, (
ofs
 & (
am≠
->
wödow_size
-1)));

146 
	`FLASH_UNLOCK
();

148  
ªt
;

149 
	}
}

151 
	$adm5120_Êash_wrôe
(
m≠_öfo
 *
m≠
, c⁄° 
m≠_w‹d
 
d©um
,

152 
ofs
)

154 
adm5120_m≠_öfo
 *
am≠
 = 
	`m≠_to_am≠
(
m≠
);

156 
	`MAP_DBG
(
m≠
, "wrôögÅÿof†%lX\n", 
ofs
);

158 i‡(
ofs
 > 
am≠
->
wödow_size
)

161 
	`FLASH_LOCK
();

162 
	`adm5120_Êash_swôchb™k
(
m≠
, 
ofs
);

163 
	`ölöe_m≠_wrôe
(
m≠
, 
d©um
, (
ofs
 & (
am≠
->
wödow_size
-1)));

164 
	`FLASH_UNLOCK
();

165 
	}
}

167 
	$adm5120_Êash_c›y_‰om
(
m≠_öfo
 *
m≠
, *
to
,

168 
‰om
, 
ssize_t
 
Àn
)

170 
adm5120_m≠_öfo
 *
am≠
 = 
	`m≠_to_am≠
(
m≠
);

171 *
p
;

172 
ssize_t
 
t
;

174 
	`MAP_DBG
(
m≠
, "copy_from,Åo=%lX, from=%lX,Üen=%lX\n",

175 ()
to
, 
‰om
, ()
Àn
);

177 i‡(
‰om
 > 
am≠
->
wödow_size
)

180 
p
 = (*)
to
;

181 
Àn
 > 0) {

182 
t
 = 
Àn
;

183 i‡((
‰om
 < 
BANK_SIZE
Ë&& ((‰om+
Àn
) > BANK_SIZE))

184 
t
 = 
BANK_SIZE
-
‰om
;

186 
	`FLASH_LOCK
();

187 
	`MAP_DBG
(
m≠
, "copying %lu byte(s) from %lXÅo %lX\n",

188 ()
t
, (
‰om
 & (
am≠
->
wödow_size
-1)),

189 ()
p
);

190 
	`adm5120_Êash_swôchb™k
(
m≠
, 
‰om
);

191 
	`ölöe_m≠_c›y_‰om
(
m≠
, 
p
, (
‰om
 & (
am≠
->
wödow_size
-1)), 
t
);

192 
	`FLASH_UNLOCK
();

193 
p
 +
t
;

194 
‰om
 +
t
;

195 
Àn
 -
t
;

197 
	}
}

199 
	$adm5120_Êash_öôªs
(
adm5120_Êash_öfo
 *
öfo
)

201 
m≠_öfo
 *
m≠
 = &
öfo
->
am≠
.map;

202 
îr
 = 0;

204 
öfo
->
ªs
 = 
	`ªque°_mem_ªgi⁄
(
m≠
->
phys
, info->
am≠
.
wödow_size
,

205 
m≠
->
«me
);

206 i‡(
öfo
->
ªs
 =
NULL
) {

207 
	`MAP_ERR
(
m≠
, "couldÇotÑeserve memoryÑegion\n");

208 
îr
 = -
ENOMEM
;

209 
out
;

212 
m≠
->
vút
 = 
	`i‹em≠_noˇche
(m≠->
phys
, 
öfo
->
am≠
.
wödow_size
);

213 i‡(
m≠
->
vút
 =
NULL
) {

214 
	`MAP_ERR
(
m≠
, "failedÅo ioremap flashÑegion\n");

215 
îr
 = -
ENOMEM
;

216 
out
;

219 
out
:

220  
îr
;

221 
	}
}

223 
	$adm5120_Êash_öôöfo
(
adm5120_Êash_öfo
 *
öfo
,

224 
∂©f‹m_devi˚
 *
dev
)

226 
m≠_öfo
 *
m≠
 = &
öfo
->
am≠
.map;

227 
adm5120_Êash_∂©f‹m_d©a
 *
pd©a
 = 
dev
->dev.
∂©f‹m_d©a
;

228 
Êash_desc
 *
fdesc
;

229 
u32
 
t
 = 0;

231 
m≠
->
«me
 = 
	`dev_«me
(&
dev
->dev);

233 i‡(
dev
->
id
 > 1) {

234 
	`MAP_ERR
(
m≠
, "invalid flash id\n");

235 
îr_out
;

238 
fdesc
 = &
Êash_descs
[
dev
->
id
];

240 i‡(
pd©a
)

241 
öfo
->
am≠
.
wödow_size
 = 
pd©a
->window_size;

243 i‡(
öfo
->
am≠
.
wödow_size
 == 0) {

245 
t
 = 
	`SW_READ_REG
(
SWITCH_REG_MEMCTRL
Ë>> 
fdesc
->
§s_shi·
;

246 
t
 &
MEMCTRL_SRS_MASK
;

247 
öfo
->
am≠
.
wödow_size
 = 
Êash_sizes
[
t
];

250 i‡(
öfo
->
am≠
.
wödow_size
 == 0) {

251 
	`MAP_ERR
(
m≠
, "unableÅo determine window size\n");

252 
îr_out
;

256 
dev
->
id
) {

258 
t
 = 
	`MPMC_READ_REG
(
SC1
Ë& 
SC_MW_MASK
;

261 
t
 = 
	`MPMC_READ_REG
(
SC0
Ë& 
SC_MW_MASK
;

264 
m≠
->
b™kwidth
 = 
Êash_b™kwidths
[
t
];

265 i‡(
m≠
->
b™kwidth
 == 0) {

266 
	`MAP_ERR
(
m≠
, "invalid bus width detected\n");

267 
îr_out
;

270 
m≠
->
phys
 = 
fdesc
->phys;

271 
m≠
->
size
 = 
BANK_SIZE_MAX
;

273 
	`sim∂e_m≠_öô
(
m≠
);

274 
m≠
->
ªad
 = 
adm5120_Êash_ªad
;

275 
m≠
->
wrôe
 = 
adm5120_Êash_wrôe
;

276 
m≠
->
c›y_‰om
 = 
adm5120_Êash_c›y_‰om
;

278 i‡(
pd©a
) {

279 
m≠
->
£t_vµ
 = 
pd©a
->set_vpp;

280 
öfo
->
am≠
.
swôch_b™k
 = 
pd©a
->switch_bank;

283 
öfo
->
dev
 = dev;

285 
	`MAP_INFO
(
m≠
, "probingát 0x%lX, size:%ldKiB, width:%d bits\n",

286 ()
m≠
->
phys
,

287 ()
öfo
->
am≠
.
wödow_size
 >> 10,

288 
m≠
->
b™kwidth
*8);

292 
îr_out
:

293  -
ENODEV
;

294 
	}
}

296 
	$adm5120_Êash_öôb™ks
(
adm5120_Êash_öfo
 *
öfo
)

298 
m≠_öfo
 *
m≠
 = &
öfo
->
am≠
.map;

300 i‡(
öfo
->
mtd
->
size
 <
BANK_SIZE
)

304 i‡(
öfo
->
am≠
.
swôch_b™k
) {

305 
öfo
->
am≠
.
wödow_size
 = info->
mtd
->
size
;

309 
	`MAP_ERR
(
m≠
, "reduce visibility from %ldKiBÅo %ldKiB\n",

310 ()
m≠
->
size
 >> 10,

311 ()
öfo
->
mtd
->
size
 >> 10);

313 
öfo
->
mtd
->
size
 = info->
am≠
.
wödow_size
;

314 
	}
}

316 
	$adm5120_Êash_ªmove
(
∂©f‹m_devi˚
 *
dev
)

318 
adm5120_Êash_öfo
 *
öfo
;

320 
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

321 i‡(
öfo
 =
NULL
)

324 
	`∂©f‹m_£t_drvd©a
(
dev
, 
NULL
);

326 i‡(
öfo
->
mtd
 !
NULL
) {

327 
	`mtd_devi˚_uƒegi°î
(
öfo
->
mtd
);

328 
	`m≠_de°roy
(
öfo
->
mtd
);

331 i‡(
öfo
->
am≠
.
m≠
.
vút
 !
NULL
)

332 
	`iounm≠
(
öfo
->
am≠
.
m≠
.
vút
);

334 i‡(
öfo
->
ªs
 !
NULL
) {

335 
	`ªÀa£_ªsour˚
(
öfo
->
ªs
);

336 
	`k‰ì
(
öfo
->
ªs
);

340 
	}
}

342 
	$adm5120_Êash_¥obe
(
∂©f‹m_devi˚
 *
dev
)

344 
adm5120_Êash_∂©f‹m_d©a
 *
pd©a
;

345 
adm5120_Êash_öfo
 *
öfo
;

346 
m≠_öfo
 *
m≠
;

347 c⁄° **
¥obe_ty≥
;

348 
îr
;

350 
pd©a
 = 
dev
->dev.
∂©f‹m_d©a
;

351 i‡(!
pd©a
) {

352 
	`dev_îr
(&
dev
->dev, "noÖlatform data\n");

353  -
EINVAL
;

356 
öfo
 = 
	`kzÆloc
((*öfo), 
GFP_KERNEL
);

357 i‡(
öfo
 =
NULL
) {

358 
îr
 = -
ENOMEM
;

359 
îr_out
;

362 
	`∂©f‹m_£t_drvd©a
(
dev
, 
öfo
);

364 
îr
 = 
	`adm5120_Êash_öôöfo
(
öfo
, 
dev
);

365 i‡(
îr
)

366 
îr_out
;

368 
îr
 = 
	`adm5120_Êash_öôªs
(
öfo
);

369 i‡(
îr
)

370 
îr_out
;

372 
m≠
 = &
öfo
->
am≠
.map;

373 
¥obe_ty≥
 = 
¥obe_ty≥s
; 
öfo
->
mtd
 =
NULL
 && *probe_type != NULL;

374 
¥obe_ty≥
++)

375 
öfo
->
mtd
 = 
	`do_m≠_¥obe
(*
¥obe_ty≥
, 
m≠
);

377 i‡(
öfo
->
mtd
 =
NULL
) {

378 
	`MAP_ERR
(
m≠
, "map_probe failed\n");

379 
îr
 = -
ENXIO
;

380 
îr_out
;

383 
	`adm5120_Êash_öôb™ks
(
öfo
);

385 i‡(
öfo
->
mtd
->
size
 < info->
am≠
.
wödow_size
) {

387 
	`iounm≠
(
m≠
->
vút
);

388 
	`ªÀa£_ªsour˚
(
öfo
->
ªs
);

389 
	`k‰ì
(
öfo
->
ªs
);

391 
öfo
->
am≠
.
wödow_size
 = info->
mtd
->
size
;

392 
m≠
->
size
 = 
öfo
->
mtd
->size;

393 
	`MAP_INFO
(
m≠
, "reducing map sizeÅo %ldKiB\n",

394 ()
m≠
->
size
 >> 10);

395 
îr
 = 
	`adm5120_Êash_öôªs
(
öfo
);

396 i‡(
îr
)

397 
îr_out
;

400 
	`MAP_INFO
(
m≠
, "foundát 0x%lX, size:%ldKiB, width:%d bits\n",

401 ()
m≠
->
phys
, ()
öfo
->
mtd
->
size
 >> 10,

402 
m≠
->
b™kwidth
*8);

404 
öfo
->
mtd
->
ow√r
 = 
THIS_MODULE
;

406 
îr
 = 
	`mtd_devi˚_∑r£_ªgi°î
(
öfo
->
mtd
, 
∑r£_ty≥s
, 0,

407 
pd©a
->
∑πs
,Öd©a->
ƒ_∑πs
);

408 i‡(
îr
)

409 
îr_out
;

413 
îr_out
:

414 
	`adm5120_Êash_ªmove
(
dev
);

415  
îr
;

416 
	}
}

418 #ifde‡
CONFIG_PM


419 
	$adm5120_Êash_su•íd
(
∂©f‹m_devi˚
 *
dev
,

420 
pm_mesßge_t
 
°©e
)

422 
adm5120_Êash_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

423 
ªt
 = 0;

425 i‡(
öfo
)

426 
ªt
 = 
öfo
->
mtd
->
	`su•íd
(info->mtd);

428  
ªt
;

429 
	}
}

431 
	$adm5120_Êash_ªsume
(
∂©f‹m_devi˚
 *
dev
)

433 
adm5120_Êash_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

435 i‡(
öfo
)

436 
öfo
->
mtd
->
	`ªsume
(info->mtd);

439 
	}
}

441 
	$adm5120_Êash_shutdown
(
∂©f‹m_devi˚
 *
dev
)

443 
adm5120_Êash_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

445 i‡(
öfo
 && info->
mtd
->
	`su•íd
(info->mtd) == 0)

446 
öfo
->
mtd
->
	`ªsume
(info->mtd);

447 
	}
}

450 
∂©f‹m_drivî
 
	gadm5120_Êash_drivî
 = {

451 .
¥obe
 = 
adm5120_Êash_¥obe
,

452 .
	gªmove
 = 
adm5120_Êash_ªmove
,

453 #ifde‡
CONFIG_PM


454 .
	gsu•íd
 = 
adm5120_Êash_su•íd
,

455 .
	gªsume
 = 
adm5120_Êash_ªsume
,

456 .
	gshutdown
 = 
adm5120_Êash_shutdown
,

458 .
	gdrivî
 = {

459 .
«me
 = 
DRV_NAME
,

463 
__öô
 
	$adm5120_Êash_öô
()

465 
îr
;

467 
îr
 = 
	`∂©f‹m_drivî_ªgi°î
(&
adm5120_Êash_drivî
);

469  
îr
;

470 
	}
}

472 
__exô
 
	$adm5120_Êash_exô
()

474 
	`∂©f‹m_drivî_uƒegi°î
(&
adm5120_Êash_drivî
);

475 
	}
}

477 
moduÀ_öô
(
adm5120_Êash_öô
);

478 
moduÀ_exô
(
adm5120_Êash_exô
);

480 
MODULE_LICENSE
("GPL v2");

481 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

482 
MODULE_DESCRIPTION
(
DRV_DESC
);

	@linux/adm5120/files-3.18/drivers/mtd/trxsplit.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/li°.h
>

15 
	~<löux/kmod.h
>

16 
	~<löux/roŸ_dev.h
>

18 
	~<löux/mtd/mtd.h
>

19 
	~<löux/mtd/∑πôi⁄s.h
>

21 
	~<löux/byã‹dî/gíîic.h
>

23 
	#PFX
 "åx•lô: "

	)

25 
	#TRX_MAGIC
 0x30524448

	)

26 
	#TRX_VERSION
 1

	)

27 
	#TRX_MAX_LEN
 0x3A0000

	)

28 
	#TRX_NO_HEADER
 0x1

	)

29 
	#TRX_GZ_FILES
 0x2

	)

30 
	#TRX_MAX_OFFSET
 3

	)

31 
	#TRX_MIN_KERNEL_SIZE
 (256 * 1024)

	)

33 
	såx_hódî
 {

34 
u32
 
	mmagic
;

35 
u32
 
	mÀn
;

36 
u32
 
	m¸c32
;

37 
u32
 
	mÊag_vîsi⁄
;

38 
u32
 
	moff£ts
[
TRX_MAX_OFFSET
];

41 
	#TRX_ALIGN
 0x1000

	)

43 
	gåx_ƒ_∑πs
;

44 
	gåx_off£t
;

45 
mtd_öfo
 *
	gåx_mtd
;

46 
mtd_∑πôi⁄
 
	gåx_∑πs
[
TRX_MAX_OFFSET
];

47 
åx_hódî
 
	gåx_hdr
;

49 
åx•lô_ª‰esh_∑πôi⁄s
(
mtd_öfo
 *
mtd
);

51 
	$åx•lô_checkåx
(
mtd_öfo
 *
mtd
, 
off£t
)

53 
size_t
 
ªéí
;

54 
îr
;

56 
îr
 = 
	`mtd_ªad
(
mtd
, 
off£t
, (
åx_hdr
), &
ªéí
, (*)&trx_hdr);

57 i‡(
îr
) {

58 
	`¥ötk
(
KERN_ALERT
 
PFX
 "u«bÀÅÿªad from '%s'\n", 
mtd
->
«me
);

59 
îr_out
;

62 i‡(
ªéí
 !(
åx_hdr
)) {

63 
	`¥ötk
(
KERN_ALERT
 
PFX
 "ªadög faûed o¿'%s'\n", 
mtd
->
«me
);

64 
îr_out
;

67 
åx_hdr
.
magic
 = 
	`À32_to_˝u
(trx_hdr.magic);

68 
åx_hdr
.
Àn
 = 
	`À32_to_˝u
(trx_hdr.len);

69 
åx_hdr
.
¸c32
 = 
	`À32_to_˝u
(trx_hdr.crc32);

70 
åx_hdr
.
Êag_vîsi⁄
 = 
	`À32_to_˝u
(trx_hdr.flag_version);

71 
åx_hdr
.
off£ts
[0] = 
	`À32_to_˝u
(trx_hdr.offsets[0]);

72 
åx_hdr
.
off£ts
[1] = 
	`À32_to_˝u
(trx_hdr.offsets[1]);

73 
åx_hdr
.
off£ts
[2] = 
	`À32_to_˝u
(trx_hdr.offsets[2]);

76 i‡(
åx_hdr
.
magic
 !
TRX_MAGIC
)

77 
îr_out
;

79 i‡(
åx_hdr
.
Àn
 > 
mtd
->
size
 - 
off£t
)

80 
îr_out
;

86 
îr_out
:

88 
	}
}

90 
	$åx•lô_födåx
(
mtd_öfo
 *
mtd
)

92 
off£t
;

93 
îr
;

95 
	`¥ötk
(
KERN_INFO
 
PFX
 "£¨chög TRX hódî i¿'%s'\n", 
mtd
->
«me
);

97 
îr
 = 0;

98 
off£t
 = 0; off£à< 
mtd
->
size
; off£à+
TRX_ALIGN
) {

99 
îr
 = 
	`åx•lô_checkåx
(
mtd
, 
off£t
);

100 i‡(
îr
 == 0)

104 i‡(
îr
)

107 
	`¥ötk
(
KERN_INFO
 
PFX
 "TRX hódî foundáà0x%lX\n", 
off£t
);

109 
åx_mtd
 = 
mtd
;

110 
åx_off£t
 = 
off£t
;

111 
	}
}

113 
	$åx•lô_¸óã_∑πôi⁄s
(
mtd_öfo
 *
mtd
)

115 
mtd_∑πôi⁄
 *
∑π
 = 
åx_∑πs
;

116 
îr
;

117 
i
;

119 
i
 = 0; i < 
TRX_MAX_OFFSET
; i++) {

120 
∑π
 = &
åx_∑πs
[
i
];

121 i‡(
åx_hdr
.
off£ts
[
i
] == 0)

123 
∑π
->
off£t
 = 
åx_off£t
 + 
åx_hdr
.
off£ts
[
i
];

124 
åx_ƒ_∑πs
++;

127 
i
 = 0; i < 
åx_ƒ_∑πs
-1; i++)

128 
åx_∑πs
[
i
].
size
 =Årx_∑πs[i+1].
off£t
 -Årx_parts[i].offset;

130 
åx_∑πs
[
i
].
size
 = 
mtd
->sizê-Årx_∑πs[i].
off£t
;

132 
i
 = 0;

133 
∑π
 = &
åx_∑πs
[
i
];

134 i‡(
∑π
->
size
 < 
TRX_MIN_KERNEL_SIZE
) {

135 
∑π
->
«me
 = "loader";

136 
i
++;

139 
∑π
 = &
åx_∑πs
[
i
];

140 
∑π
->
«me
 = "kernel";

141 
i
++;

143 
∑π
 = &
åx_∑πs
[
i
];

144 
∑π
->
«me
 = "rootfs";

146 
îr
 = 
	`mtd_devi˚_ªgi°î
(
mtd
, 
åx_∑πs
, 
åx_ƒ_∑πs
);

147 i‡(
îr
) {

148 
	`¥ötk
(
KERN_ALERT
 
PFX
 "adding TRXÖartitions failed\n");

152 
mtd
->
ª‰esh_devi˚
 = 
åx•lô_ª‰esh_∑πôi⁄s
;

153 
	}
}

155 
	$åx•lô_ª‰esh_∑πôi⁄s
(
mtd_öfo
 *
mtd
)

157 
	`¥ötk
(
KERN_INFO
 
PFX
 "refreshing TRXÖartitions in '%s' (%d,%d)\n",

158 
mtd
->
«me
, 
MTD_BLOCK_MAJOR
, mtd->
ödex
);

161 
	`mtd_devi˚_uƒegi°î
(
mtd
);

163 
	`åx•lô_födåx
(
mtd
);

164 i‡(!
åx_mtd
)

165 
îr
;

167 
	`åx•lô_¸óã_∑πôi⁄s
(
åx_mtd
);

170 
îr
:

172 
	}
}

174 
__öô
 
	$åx•lô_add_mtd
(
mtd_öfo
 *
mtd
)

176 i‡(
mtd
->
ty≥
 !
MTD_NORFLASH
) {

177 
	`¥ötk
(
KERN_INFO
 
PFX
 "'%s' isÇotá NOR flash, skipped\n",

178 
mtd
->
«me
);

182 i‡(!
åx_mtd
)

183 
	`åx•lô_födåx
(
mtd
);

184 
	}
}

186 
__öô
 
	$åx•lô_ªmove_mtd
(
mtd_öfo
 *
mtd
)

189 
	}
}

191 
mtd_nŸifõr
 
åx•lô_nŸifõr
 
	g__öôd©a
 = {

192 .
add
 = 
åx•lô_add_mtd
,

193 .
	gªmove
 = 
åx•lô_ªmove_mtd
,

196 
__öô
 
	$åx•lô_sˇn
()

198 
	`ªgi°î_mtd_u£r
(&
åx•lô_nŸifõr
);

199 
	`uƒegi°î_mtd_u£r
(&
åx•lô_nŸifõr
);

200 
	}
}

202 
__öô
 
	$åx•lô_öô
()

204 
	`åx•lô_sˇn
();

206 i‡(
åx_mtd
) {

207 
	`¥ötk
(
KERN_INFO
 
PFX
 "creating TRXÖartitions in '%s' "

208 "(%d,%d)\n", 
åx_mtd
->
«me
, 
MTD_BLOCK_MAJOR
,

209 
åx_mtd
->
ödex
);

210 
	`åx•lô_¸óã_∑πôi⁄s
(
åx_mtd
);

214 
	}
}

216 
œã_öôˇŒ
(
åx•lô_öô
);

	@linux/adm5120/files-3.18/drivers/net/adm5120sw.c

20 
	~<löux/kî√l.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/î∫o.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/i›‹t.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/io.h
>

28 
	~<löux/úq.h
>

30 
	~<löux/√tdevi˚.h
>

31 
	~<löux/ëhîdevi˚.h
>

32 
	~<löux/skbuff.h
>

34 
	~<asm/mù§egs.h
>

36 
	~<asm/mach-adm5120/adm5120_öfo.h
>

37 
	~<asm/mach-adm5120/adm5120_defs.h
>

38 
	~<asm/mach-adm5120/adm5120_swôch.h
>

40 
	~"adm5120sw.h
"

41 
	~<löux/dma-m≠pög.h
>

43 
	#DRV_NAME
 "adm5120-swôch"

	)

44 
	#DRV_DESC
 "ADM5120 buût-öÉthî√àswôch drivî"

	)

45 
	#DRV_VERSION
 "0.1.1"

	)

47 
	#CONFIG_ADM5120_SWITCH_NAPI
 1

	)

48 #unde‡
CONFIG_ADM5120_SWITCH_DEBUG


52 #ifde‡
CONFIG_ADM5120_SWITCH_DEBUG


53 
	#SW_DBG
(
f
, 
a
...Ë
	`¥ötk
(
KERN_DEBUG
 "%s: " f, 
DRV_NAME
 , ##á)

	)

55 
	#SW_DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

57 
	#SW_ERR
(
f
, 
a
...Ë
	`¥ötk
(
KERN_ERR
 "%s: " f, 
DRV_NAME
 , ##á)

	)

58 
	#SW_INFO
(
f
, 
a
...Ë
	`¥ötk
(
KERN_INFO
 "%s: " f, 
DRV_NAME
 , ##á)

	)

60 
	#SWITCH_NUM_PORTS
 6

	)

61 
	#ETH_CSUM_LEN
 4

	)

63 
	#RX_MAX_PKTLEN
 1550

	)

64 
	#RX_RING_SIZE
 64

	)

66 
	#TX_RING_SIZE
 32

	)

67 
	#TX_QUEUE_LEN
 28

	)

68 
	#TX_TIMEOUT
 (
HZ
 * 400)

	)

70 
	#RX_DESCS_SIZE
 (
RX_RING_SIZE
 * (
dma_desc
 *))

	)

71 
	#RX_SKBS_SIZE
 (
RX_RING_SIZE
 * (
sk_buff
 *))

	)

72 
	#TX_DESCS_SIZE
 (
TX_RING_SIZE
 * (
dma_desc
 *))

	)

73 
	#TX_SKBS_SIZE
 (
TX_RING_SIZE
 * (
sk_buff
 *))

	)

75 
	#SKB_ALLOC_LEN
 (
RX_MAX_PKTLEN
 + 32)

	)

76 
	#SKB_RESERVE_LEN
 (
NET_IP_ALIGN
 + 
NET_SKB_PAD
)

	)

78 
	#SWITCH_INTS_HIGH
 (
SWITCH_INT_SHD
 | 
SWITCH_INT_RHD
 | 
SWITCH_INT_HDF
)

	)

79 
	#SWITCH_INTS_LOW
 (
SWITCH_INT_SLD
 | 
SWITCH_INT_RLD
 | 
SWITCH_INT_LDF
)

	)

80 
	#SWITCH_INTS_ERR
 (
SWITCH_INT_RDE
 | 
SWITCH_INT_SDE
 | 
SWITCH_INT_CPUH
)

	)

81 
	#SWITCH_INTS_Q
 (
SWITCH_INT_P0QF
 | 
SWITCH_INT_P1QF
 | 
SWITCH_INT_P2QF
 | \

82 
SWITCH_INT_P3QF
 | 
SWITCH_INT_P4QF
 | 
SWITCH_INT_P5QF
 | \

83 
SWITCH_INT_CPQF
 | 
SWITCH_INT_GQF
)

	)

85 
	#SWITCH_INTS_ALL
 (
SWITCH_INTS_HIGH
 | 
SWITCH_INTS_LOW
 | \

86 
SWITCH_INTS_ERR
 | 
SWITCH_INTS_Q
 | \

87 
SWITCH_INT_MD
 | 
SWITCH_INT_PSC
)

	)

89 
	#SWITCH_INTS_USED
 (
SWITCH_INTS_LOW
 | 
SWITCH_INT_PSC
)

	)

90 
	#SWITCH_INTS_POLL
 (
SWITCH_INT_RLD
 | 
SWITCH_INT_LDF
 | 
SWITCH_INT_SLD
)

	)

94 
	sadm5120_if_¥iv
 {

95 
√t_devi˚
 *
	mdev
;

97 
	mvœn_no
;

98 
	mp‹t_mask
;

100 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


101 
«pi_°ru˘
 
	m«pi
;

105 
	sdma_desc
 {

106 
__u32
 
	mbuf1
;

107 
	#DESC_OWN
 (1UL << 31Ë

	)

108 
	#DESC_EOR
 (1UL << 28Ë

	)

109 
	#DESC_ADDR_MASK
 0x1FFFFFF

	)

110 
	#DESC_ADDR
(
x
Ë((
__u32
)(xË& 
DESC_ADDR_MASK
)

	)

111 
__u32
 
	mbuf2
;

112 
	#DESC_BUF2_EN
 (1UL << 31Ë

	)

113 
__u32
 
	mbuÊí
;

114 
__u32
 
	mmisc
;

116 
	#DESC_PKTLEN_SHIFT
 16

	)

117 
	#DESC_PKTLEN_MASK
 0x7FF

	)

119 
	#DESC_CSUM
 (1UL << 31Ë

	)

120 
	#DESC_DSTPORT_SHIFT
 8

	)

121 
	#DESC_DSTPORT_MASK
 0x3F

	)

122 
	#DESC_VLAN_MASK
 0x3F

	)

124 
	#DESC_SRCPORT_SHIFT
 12

	)

125 
	#DESC_SRCPORT_MASK
 0x7

	)

126 
	#DESC_DA_MASK
 0x3

	)

127 
	#DESC_DA_SHIFT
 4

	)

128 
	#DESC_IPCSUM_FAIL
 (1UL << 3Ë

	)

129 
	#DESC_VLAN_TAG
 (1UL << 2Ë

	)

130 
	#DESC_TYPE_MASK
 0x3

	)

131 
	#DESC_TYPE_IP
 0x0

	)

132 
	#DESC_TYPE_PPPoE
 0x1

	)

133 } 
__©åibuã__
 ((
Æig√d
(16)));

137 
	gadm5120_ƒdevs
;

139 
√t_devi˚
 *
	gadm5120_devs
[
SWITCH_NUM_PORTS
];

141 
√t_devi˚
 *
	gadm5120_p‹t
[
SWITCH_NUM_PORTS
];

143 
dma_desc
 *
	gtxl_descs
;

144 
dma_desc
 *
	grxl_descs
;

146 
dma_addr_t
 
	gtxl_descs_dma
;

147 
dma_addr_t
 
	grxl_descs_dma
;

149 
sk_buff
 **
	gtxl_skbuff
;

150 
sk_buff
 **
	grxl_skbuff
;

152 
	gcur_rxl
, 
	gdúty_rxl
;

153 
	gcur_txl
, 
	gdúty_txl
;

155 
	gsw_u£d
;

157 
DEFINE_SPINLOCK
(
tx_lock
);

161 
ölöe
 
u32
 
	$sw_ªad_ªg
(
u32
 
ªg
)

163  
	`__øw_ªadl
((
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_SWITCH_BASE
)+
ªg
);

164 
	}
}

166 
ölöe
 
	$sw_wrôe_ªg
(
u32
 
ªg
, u32 
vÆ
)

168 
	`__øw_wrôñ
(
vÆ
, (
__iomem
 *)
	`KSEG1ADDR
(
ADM5120_SWITCH_BASE
)+
ªg
);

169 
	}
}

171 
ölöe
 
	$sw_öt_mask
(
u32
 
mask
)

173 
u32
 
t
;

175 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_INT_MASK
);

176 
t
 |
mask
;

177 
	`sw_wrôe_ªg
(
SWITCH_REG_INT_MASK
, 
t
);

178 
	}
}

180 
ölöe
 
	$sw_öt_unmask
(
u32
 
mask
)

182 
u32
 
t
;

184 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_INT_MASK
);

185 
t
 &~
mask
;

186 
	`sw_wrôe_ªg
(
SWITCH_REG_INT_MASK
, 
t
);

187 
	}
}

189 
ölöe
 
	$sw_öt_ack
(
u32
 
mask
)

191 
	`sw_wrôe_ªg
(
SWITCH_REG_INT_STATUS
, 
mask
);

192 
	}
}

194 
ölöe
 
u32
 
	$sw_öt_°©us
()

196 
u32
 
t
;

198 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_INT_STATUS
);

199 
t
 &~
	`sw_ªad_ªg
(
SWITCH_REG_INT_MASK
);

200  
t
;

201 
	}
}

203 
ölöe
 
u32
 
	$desc_gë_§˝‹t
(
dma_desc
 *
desc
)

205  (
desc
->
misc
 >> 
DESC_SRCPORT_SHIFT
Ë& 
DESC_SRCPORT_MASK
;

206 
	}
}

208 
ölöe
 
u32
 
	$desc_gë_pkéí
(
dma_desc
 *
desc
)

210  (
desc
->
misc
 >> 
DESC_PKTLEN_SHIFT
Ë& 
DESC_PKTLEN_MASK
;

211 
	}
}

213 
ölöe
 
	$desc_ùcsum_Áû
(
dma_desc
 *
desc
)

215  ((
desc
->
misc
 & 
DESC_IPCSUM_FAIL
) != 0);

216 
	}
}

220 #ifde‡
CONFIG_ADM5120_SWITCH_DEBUG


221 
	$sw_dump_desc
(*
œbñ
, 
dma_desc
 *
desc
, 
tx
)

223 
u32
 
t
;

225 
	`SW_DBG
("%†%†desc/%p\n", 
œbñ
, 
tx
 ? "tx" : "rx", 
desc
);

227 
t
 = 
desc
->
buf1
;

228 
	`SW_DBG
(" buf1 %08Xáddr=%08X;Üí=%08X %s%s\n", 
t
,

229 
t
 & 
DESC_ADDR_MASK
,

230 
desc
->
buÊí
,

231 (
t
 & 
DESC_OWN
) ? "SWITCH" : "CPU",

232 (
t
 & 
DESC_EOR
) ? " RE" : "");

234 
t
 = 
desc
->
buf2
;

235 
	`SW_DBG
(" buf2 %08Xáddr=%08X%s\n", 
desc
->
buf2
,

236 
t
 & 
DESC_ADDR_MASK
,

237 (
t
 & 
DESC_BUF2_EN
) ? " EN" : "");

239 
t
 = 
desc
->
misc
;

240 i‡(
tx
)

241 
	`SW_DBG
(" mis¯%08X%†pkéí=%04XÖ‹ts=%02X vœn=%02X\n", 
t
,

242 (
t
 & 
DESC_CSUM
) ? " CSUM" : "",

243 (
t
 >> 
DESC_PKTLEN_SHIFT
Ë& 
DESC_PKTLEN_MASK
,

244 (
t
 >> 
DESC_DSTPORT_SHIFT
Ë& 
DESC_DSTPORT_MASK
,

245 
t
 & 
DESC_VLAN_MASK
);

247 
	`SW_DBG
(" misc %08XÖktlen=%04XÖort=%d DA=%d%s%sÅype=%d\n",

248 
t
,

249 (
t
 >> 
DESC_PKTLEN_SHIFT
Ë& 
DESC_PKTLEN_MASK
,

250 (
t
 >> 
DESC_SRCPORT_SHIFT
Ë& 
DESC_SRCPORT_MASK
,

251 (
t
 >> 
DESC_DA_SHIFT
Ë& 
DESC_DA_MASK
,

252 (
t
 & 
DESC_IPCSUM_FAIL
) ? " IPCF" : "",

253 (
t
 & 
DESC_VLAN_TAG
) ? " VLAN" : "",

254 (
t
 & 
DESC_TYPE_MASK
));

255 
	}
}

257 
	$sw_dump_öå_mask
(*
œbñ
, 
u32
 
mask
)

259 
	`SW_DBG
("%s %08X%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",

260 
œbñ
, 
mask
,

261 (
mask
 & 
SWITCH_INT_SHD
) ? " SHD" : "",

262 (
mask
 & 
SWITCH_INT_SLD
) ? " SLD" : "",

263 (
mask
 & 
SWITCH_INT_RHD
) ? " RHD" : "",

264 (
mask
 & 
SWITCH_INT_RLD
) ? " RLD" : "",

265 (
mask
 & 
SWITCH_INT_HDF
) ? " HDF" : "",

266 (
mask
 & 
SWITCH_INT_LDF
) ? " LDF" : "",

267 (
mask
 & 
SWITCH_INT_P0QF
) ? " P0QF" : "",

268 (
mask
 & 
SWITCH_INT_P1QF
) ? " P1QF" : "",

269 (
mask
 & 
SWITCH_INT_P2QF
) ? " P2QF" : "",

270 (
mask
 & 
SWITCH_INT_P3QF
) ? " P3QF" : "",

271 (
mask
 & 
SWITCH_INT_P4QF
) ? " P4QF" : "",

272 (
mask
 & 
SWITCH_INT_CPQF
) ? " CPQF" : "",

273 (
mask
 & 
SWITCH_INT_GQF
) ? " GQF" : "",

274 (
mask
 & 
SWITCH_INT_MD
) ? " MD" : "",

275 (
mask
 & 
SWITCH_INT_BCS
) ? " BCS" : "",

276 (
mask
 & 
SWITCH_INT_PSC
) ? " PSC" : "",

277 (
mask
 & 
SWITCH_INT_ID
) ? " ID" : "",

278 (
mask
 & 
SWITCH_INT_W0TE
) ? " W0TE" : "",

279 (
mask
 & 
SWITCH_INT_W1TE
) ? " W1TE" : "",

280 (
mask
 & 
SWITCH_INT_RDE
) ? " RDE" : "",

281 (
mask
 & 
SWITCH_INT_SDE
) ? " SDE" : "",

282 (
mask
 & 
SWITCH_INT_CPUH
) ? " CPUH" : "");

283 
	}
}

285 
	$sw_dump_ªgs
()

287 
u32
 
t
;

289 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_STATUS
);

290 
	`SW_DBG
("phy_°©us: %08X\n", 
t
);

292 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_CPUP_CONF
);

293 
	`SW_DBG
("˝up_c⁄f: %08X%s%s%s\n", 
t
,

294 (
t
 & 
CPUP_CONF_DCPUP
) ? " DCPUP" : "",

295 (
t
 & 
CPUP_CONF_CRCP
) ? " CRCP" : "",

296 (
t
 & 
CPUP_CONF_BTM
) ? " BTM" : "");

298 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PORT_CONF0
);

299 
	`SW_DBG
("p‹t_c⁄f0: %08X\n", 
t
);

300 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PORT_CONF1
);

301 
	`SW_DBG
("p‹t_c⁄f1: %08X\n", 
t
);

302 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PORT_CONF2
);

303 
	`SW_DBG
("p‹t_c⁄f2: %08X\n", 
t
);

305 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_VLAN_G1
);

306 
	`SW_DBG
("vœ¿g1: %08X\n", 
t
);

307 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_VLAN_G2
);

308 
	`SW_DBG
("vœ¿g2: %08X\n", 
t
);

310 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_BW_CNTL0
);

311 
	`SW_DBG
("bw_˙é0: %08X\n", 
t
);

312 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_BW_CNTL1
);

313 
	`SW_DBG
("bw_˙é1: %08X\n", 
t
);

315 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL0
);

316 
	`SW_DBG
("phy_˙é0: %08X\n", 
t
);

317 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL1
);

318 
	`SW_DBG
("phy_˙é1: %08X\n", 
t
);

319 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL2
);

320 
	`SW_DBG
("phy_˙é2: %08X\n", 
t
);

321 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL3
);

322 
	`SW_DBG
("phy_˙é3: %08X\n", 
t
);

323 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL4
);

324 
	`SW_DBG
("phy_˙é4: %08X\n", 
t
);

326 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_INT_STATUS
);

327 
	`sw_dump_öå_mask
("öt_°©us: ", 
t
);

329 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_INT_MASK
);

330 
	`sw_dump_öå_mask
("öt_mask: ", 
t
);

332 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_SHDA
);

333 
	`SW_DBG
("shda: %08X\n", 
t
);

334 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_SLDA
);

335 
	`SW_DBG
("¶da: %08X\n", 
t
);

336 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_RHDA
);

337 
	`SW_DBG
("rhda: %08X\n", 
t
);

338 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_RLDA
);

339 
	`SW_DBG
("æda: %08X\n", 
t
);

340 
	}
}

342 
ölöe
 
	$sw_dump_desc
(*
œbñ
, 
dma_desc
 *
desc
, 
tx
Ë{
	}
}

343 
	$sw_dump_öå_mask
(*
œbñ
, 
u32
 
mask
Ë{
	}
}

344 
ölöe
 
	$sw_dump_ªgs
(Ë{
	}
}

349 
ölöe
 
	$adm5120_rx_dma_upd©e
(
dma_desc
 *
desc
,

350 
sk_buff
 *
skb
, 
íd
)

352 
desc
->
misc
 = 0;

353 
desc
->
buf2
 = 0;

354 
desc
->
buÊí
 = 
RX_MAX_PKTLEN
;

355 
desc
->
buf1
 = 
	`DESC_ADDR
(
skb
->
d©a
) |

356 
DESC_OWN
 | (
íd
 ? 
DESC_EOR
 : 0);

357 
	}
}

359 
	$adm5120_swôch_rx_ªfûl
()

361 
íåy
;

363 ; 
cur_rxl
 - 
dúty_rxl
 > 0; dirty_rxl++) {

364 
dma_desc
 *
desc
;

365 
sk_buff
 *
skb
;

367 
íåy
 = 
dúty_rxl
 % 
RX_RING_SIZE
;

368 
desc
 = &
rxl_descs
[
íåy
];

370 
skb
 = 
rxl_skbuff
[
íåy
];

371 i‡(
skb
 =
NULL
) {

372 
skb
 = 
	`Æloc_skb
(
SKB_ALLOC_LEN
, 
GFP_ATOMIC
);

373 i‡(
skb
) {

374 
	`skb_ª£rve
(
skb
, 
SKB_RESERVE_LEN
);

375 
rxl_skbuff
[
íåy
] = 
skb
;

377 
	`SW_ERR
("no memory for skb\n");

378 
desc
->
buÊí
 = 0;

379 
desc
->
buf2
 = 0;

380 
desc
->
misc
 = 0;

381 
desc
->
buf1
 = (desc->buf1 & 
DESC_EOR
Ë| 
DESC_OWN
;

386 
desc
->
buf2
 = 0;

387 
desc
->
buÊí
 = 
RX_MAX_PKTLEN
;

388 
desc
->
misc
 = 0;

389 
desc
->
buf1
 = (desc->buf1 & 
DESC_EOR
Ë| 
DESC_OWN
 |

390 
	`DESC_ADDR
(
skb
->
d©a
);

392 
	}
}

394 
	$adm5120_swôch_rx
(
limô
)

396 
d⁄e
 = 0;

398 
	`SW_DBG
("rx start,Üimit=%d, cur_rxl=%u, dirty_rxl=%u\n",

399 
limô
, 
cur_rxl
, 
dúty_rxl
);

401 
d⁄e
 < 
limô
) {

402 
íåy
 = 
cur_rxl
 % 
RX_RING_SIZE
;

403 
dma_desc
 *
desc
 = &
rxl_descs
[
íåy
];

404 
√t_devi˚
 *
rdev
;

405 
p‹t
;

407 i‡(
desc
->
buf1
 & 
DESC_OWN
)

410 i‡(
dúty_rxl
 + 
RX_RING_SIZE
 =
cur_rxl
)

413 
p‹t
 = 
	`desc_gë_§˝‹t
(
desc
);

414 
rdev
 = 
adm5120_p‹t
[
p‹t
];

416 
	`SW_DBG
("rx des¸ùt‹ %u, desc=%p, skb=%p\n", 
íåy
, 
desc
,

417 
rxl_skbuff
[
íåy
]);

419 i‡((
rdev
Ë&& 
	`√tif_ru¬ög
(rdev)) {

420 
sk_buff
 *
skb
 = 
rxl_skbuff
[
íåy
];

421 
pkéí
;

423 
pkéí
 = 
	`desc_gë_pkéí
(
desc
);

424 
pkéí
 -
ETH_CSUM_LEN
;

426 i‡((
pkéí
 =0Ë|| 
	`desc_ùcsum_Áû
(
desc
)) {

427 
rdev
->
°©s
.
rx_îr‹s
++;

428 i‡(
pkéí
 == 0)

429 
rdev
->
°©s
.
rx_Àngth_îr‹s
++;

430 i‡(
	`desc_ùcsum_Áû
(
desc
))

431 
rdev
->
°©s
.
rx_¸c_îr‹s
++;

432 
	`SW_DBG
("rxÉº‹,Ñecy˛ög skb %u\n", 
íåy
);

434 
	`skb_put
(
skb
, 
pkéí
);

436 
skb
->
dev
 = 
rdev
;

437 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
rdev
);

438 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

440 
	`dma_ˇche_wback_öv
(()
skb
->
d©a
,

441 
skb
->
Àn
);

443 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


444 
	`√tif_ª˚ive_skb
(
skb
);

446 
	`√tif_rx
(
skb
);

449 
rdev
->
œ°_rx
 = 
jiffõs
;

450 
rdev
->
°©s
.
rx_∑ckës
++;

451 
rdev
->
°©s
.
rx_byãs
 +
pkéí
;

453 
rxl_skbuff
[
íåy
] = 
NULL
;

454 
d⁄e
++;

457 
	`SW_DBG
("nÿrx devi˚,Ñecy˛ög skb %u\n", 
íåy
);

460 
cur_rxl
++;

461 i‡(
cur_rxl
 - 
dúty_rxl
 > 
RX_RING_SIZE
 / 4)

462 
	`adm5120_swôch_rx_ªfûl
();

465 
	`adm5120_swôch_rx_ªfûl
();

467 
	`SW_DBG
("rx finished, cur_rxl=%u, dirty_rxl=%u,Örocessed %d\n",

468 
cur_rxl
, 
dúty_rxl
, 
d⁄e
);

470  
d⁄e
;

471 
	}
}

473 
	$adm5120_swôch_tx
()

475 
íåy
;

477 
	`•ö_lock
(&
tx_lock
);

478 
íåy
 = 
dúty_txl
 % 
TX_RING_SIZE
;

479 
dúty_txl
 !
cur_txl
) {

480 
dma_desc
 *
desc
 = &
txl_descs
[
íåy
];

481 
sk_buff
 *
skb
 = 
txl_skbuff
[
íåy
];

483 i‡(
desc
->
buf1
 & 
DESC_OWN
)

486 i‡(
	`√tif_ru¬ög
(
skb
->
dev
)) {

487 
skb
->
dev
->
°©s
.
tx_byãs
 +skb->
Àn
;

488 
skb
->
dev
->
°©s
.
tx_∑ckës
++;

491 
	`dev_k‰ì_skb_úq
(
skb
);

492 
txl_skbuff
[
íåy
] = 
NULL
;

493 
íåy
 = (++
dúty_txl
Ë% 
TX_RING_SIZE
;

496 i‡((
cur_txl
 - 
dúty_txl
Ë< 
TX_QUEUE_LEN
 - 4) {

497 
i
;

498 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

499 i‡(!
adm5120_devs
[
i
])

501 
	`√tif_wake_queue
(
adm5120_devs
[
i
]);

504 
	`•ö_u∆ock
(&
tx_lock
);

505 
	}
}

507 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


508 
	$adm5120_if_pﬁl
(
«pi_°ru˘
 *
«pi
, 
limô
)

510 
adm5120_if_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
«pi
,

511 
adm5120_if_¥iv
, 
«pi
);

512 
√t_devi˚
 *
dev
 
__maybe_unu£d
 = 
¥iv
->dev;

513 
d⁄e
;

514 
u32
 
°©us
;

516 
	`sw_öt_ack
(
SWITCH_INTS_POLL
);

518 
	`SW_DBG
("%s:Öro˚ssög TXÑög\n", 
dev
->
«me
);

519 
	`adm5120_swôch_tx
();

521 
	`SW_DBG
("%s:Öro˚ssög RXÑög\n", 
dev
->
«me
);

522 
d⁄e
 = 
	`adm5120_swôch_rx
(
limô
);

524 
°©us
 = 
	`sw_öt_°©us
(Ë& 
SWITCH_INTS_POLL
;

525 i‡((
d⁄e
 < 
limô
Ë&& (!
°©us
)) {

526 
	`SW_DBG
("dißbÀÖﬁlög modêf‹ %s\n", 
dev
->
«me
);

527 
	`«pi_com∂ëe
(
«pi
);

528 
	`sw_öt_unmask
(
SWITCH_INTS_POLL
);

532 
	`SW_DBG
("%s still inÖolling mode, done=%d, status=%x\n",

533 
dev
->
«me
, 
d⁄e
, 
°©us
);

535 
	}
}

539 
úqªtu∫_t
 
	$adm5120_swôch_úq
(
úq
, *
dev_id
)

541 
u32
 
°©us
;

543 
°©us
 = 
	`sw_öt_°©us
();

544 
°©us
 &
SWITCH_INTS_ALL
;

545 i‡(!
°©us
)

546  
IRQ_NONE
;

548 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


549 
	`sw_öt_ack
(
°©us
 & ~
SWITCH_INTS_POLL
);

551 i‡(
°©us
 & 
SWITCH_INTS_POLL
) {

552 
√t_devi˚
 *
dev
 = 
dev_id
;

553 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

555 
	`sw_dump_öå_mask
("pﬁ»öts", 
°©us
);

556 
	`SW_DBG
("íabÀÖﬁlög modêf‹ %s\n", 
dev
->
«me
);

557 
	`sw_öt_mask
(
SWITCH_INTS_POLL
);

558 
	`«pi_scheduÀ
(&
¥iv
->
«pi
);

561 
	`sw_öt_ack
(
°©us
);

563 i‡(
°©us
 & (
SWITCH_INT_RLD
 | 
SWITCH_INT_LDF
))

564 
	`adm5120_swôch_rx
(
RX_RING_SIZE
);

566 i‡(
°©us
 & 
SWITCH_INT_SLD
)

567 
	`adm5120_swôch_tx
();

570  
IRQ_HANDLED
;

571 
	}
}

573 
	$adm5120_£t_bw
(*
m©rix
)

575 
vÆ
;

578 
vÆ
 = 
m©rix
[0] + (matrix[1]<<8) + (matrix[2]<<16) + (matrix[3]<<24);

579 
	`sw_wrôe_ªg
(
SWITCH_REG_BW_CNTL0
, 
vÆ
);

582 
vÆ
 = 
m©rix
[4];

583 i‡(
m©rix
[5] == 1)

584 
	`sw_wrôe_ªg
(
SWITCH_REG_BW_CNTL1
, 
vÆ
 | 0x80000000);

586 
	`sw_wrôe_ªg
(
SWITCH_REG_BW_CNTL1
, 
vÆ
 & ~0x8000000);

588 
	`SW_DBG
("D: cé0 0x%ux, cé1 0x%ux\n", 
	`sw_ªad_ªg
(
SWITCH_REG_BW_CNTL0
),

589 
	`sw_ªad_ªg
(
SWITCH_REG_BW_CNTL1
));

590 
	}
}

592 
	$adm5120_swôch_tx_rög_ª£t
(
dma_desc
 *
desc
,

593 
sk_buff
 **
skbl
, 
num
)

595 
	`mem£t
(
desc
, 0, 
num
 * (*desc));

596 
desc
[
num
-1].
buf1
 |
DESC_EOR
;

597 
	`mem£t
(
skbl
, 0, (
skb
 *Ë* 
num
);

599 
cur_txl
 = 0;

600 
dúty_txl
 = 0;

601 
	}
}

603 
	$adm5120_swôch_rx_rög_ª£t
(
dma_desc
 *
desc
,

604 
sk_buff
 **
skbl
, 
num
)

606 
i
;

608 
	`mem£t
(
desc
, 0, 
num
 * (*desc));

609 
i
 = 0; i < 
num
; i++) {

610 
skbl
[
i
] = 
	`dev_Æloc_skb
(
SKB_ALLOC_LEN
);

611 i‡(!
skbl
[
i
]) {

612 
i
 = 
num
;

615 
	`skb_ª£rve
(
skbl
[
i
], 
SKB_RESERVE_LEN
);

616 
	`adm5120_rx_dma_upd©e
(&
desc
[
i
], 
skbl
[i], (
num
 - 1 == i));

619 
cur_rxl
 = 0;

620 
dúty_rxl
 = 0;

621 
	}
}

623 
	$adm5120_swôch_tx_rög_Æloc
()

625 
îr
;

627 
txl_descs
 = 
	`dma_Æloc_cohîít
(
NULL
, 
TX_DESCS_SIZE
, &
txl_descs_dma
,

628 
GFP_ATOMIC
);

629 i‡(!
txl_descs
) {

630 
îr
 = -
ENOMEM
;

631 
îr
;

634 
txl_skbuff
 = 
	`kzÆloc
(
TX_SKBS_SIZE
, 
GFP_KERNEL
);

635 i‡(!
txl_skbuff
) {

636 
îr
 = -
ENOMEM
;

637 
îr
;

642 
îr
:

643  
îr
;

644 
	}
}

646 
	$adm5120_swôch_tx_rög_‰ì
()

648 
i
;

650 i‡(
txl_skbuff
) {

651 
i
 = 0; i < 
TX_RING_SIZE
; i++)

652 i‡(
txl_skbuff
[
i
])

653 
	`k‰ì_skb
(
txl_skbuff
[
i
]);

654 
	`k‰ì
(
txl_skbuff
);

657 i‡(
txl_descs
)

658 
	`dma_‰ì_cohîít
(
NULL
, 
TX_DESCS_SIZE
, 
txl_descs
,

659 
txl_descs_dma
);

660 
	}
}

662 
	$adm5120_swôch_rx_rög_Æloc
()

664 
îr
;

665 
i
;

668 
rxl_descs
 = 
	`dma_Æloc_cohîít
(
NULL
, 
RX_DESCS_SIZE
, &
rxl_descs_dma
,

669 
GFP_ATOMIC
);

670 i‡(!
rxl_descs
) {

671 
îr
 = -
ENOMEM
;

672 
îr
;

675 
rxl_skbuff
 = 
	`kzÆloc
(
RX_SKBS_SIZE
, 
GFP_KERNEL
);

676 i‡(!
rxl_skbuff
) {

677 
îr
 = -
ENOMEM
;

678 
îr
;

681 
i
 = 0; i < 
RX_RING_SIZE
; i++) {

682 
sk_buff
 *
skb
;

683 
skb
 = 
	`Æloc_skb
(
SKB_ALLOC_LEN
, 
GFP_ATOMIC
);

684 i‡(!
skb
) {

685 
îr
 = -
ENOMEM
;

686 
îr
;

688 
rxl_skbuff
[
i
] = 
skb
;

689 
	`skb_ª£rve
(
skb
, 
SKB_RESERVE_LEN
);

694 
îr
:

695  
îr
;

696 
	}
}

698 
	$adm5120_swôch_rx_rög_‰ì
()

700 
i
;

702 i‡(
rxl_skbuff
) {

703 
i
 = 0; i < 
RX_RING_SIZE
; i++)

704 i‡(
rxl_skbuff
[
i
])

705 
	`k‰ì_skb
(
rxl_skbuff
[
i
]);

706 
	`k‰ì
(
rxl_skbuff
);

709 i‡(
rxl_descs
)

710 
	`dma_‰ì_cohîít
(
NULL
, 
RX_DESCS_SIZE
, 
rxl_descs
,

711 
rxl_descs_dma
);

712 
	}
}

714 
	$adm5120_wrôe_mac
(
√t_devi˚
 *
dev
)

716 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

717 *
mac
 = 
dev
->
dev_addr
;

718 
u32
 
t
;

720 
t
 = 
mac
[2] | (mac[3] << 
MAC_WT1_MAC3_SHIFT
) |

721 (
mac
[4] << 
MAC_WT1_MAC4_SHIFT
Ë| (mac[5] << 
MAC_WT1_MAC5_SHIFT
);

722 
	`sw_wrôe_ªg
(
SWITCH_REG_MAC_WT1
, 
t
);

724 
t
 = (
mac
[0] << 
MAC_WT0_MAC0_SHIFT
Ë| (mac[1] << 
MAC_WT0_MAC1_SHIFT
) |

725 
MAC_WT0_MAWC
 | 
MAC_WT0_WVE
 | (
¥iv
->
vœn_no
<<3);

727 
	`sw_wrôe_ªg
(
SWITCH_REG_MAC_WT0
, 
t
);

729 !(
	`sw_ªad_ªg
(
SWITCH_REG_MAC_WT0
Ë& 
MAC_WT0_MWD
))

731 
	}
}

733 
	$adm5120_£t_vœn
(*
m©rix
)

735 
vÆ
;

736 
vœn_p‹t
, 
p‹t
;

738 
vÆ
 = 
m©rix
[0] + (matrix[1]<<8) + (matrix[2]<<16) + (matrix[3]<<24);

739 
	`sw_wrôe_ªg
(
SWITCH_REG_VLAN_G1
, 
vÆ
);

740 
vÆ
 = 
m©rix
[4] + (matrix[5]<<8);

741 
	`sw_wrôe_ªg
(
SWITCH_REG_VLAN_G2
, 
vÆ
);

744 
p‹t
 = 0;Ö‹à< 
SWITCH_NUM_PORTS
;Öort++) {

745 
vœn_p‹t
 = 0; vœn_p‹à< 
SWITCH_NUM_PORTS
 && !(
m©rix
[vœn_p‹t] & (0x00000001 << 
p‹t
)); vlan_port++)

747 i‡(
vœn_p‹t
 < 
SWITCH_NUM_PORTS
)

748 
adm5120_p‹t
[
p‹t
] = 
adm5120_devs
[
vœn_p‹t
];

750 
adm5120_p‹t
[
p‹t
] = 
NULL
;

752 
	}
}

754 
	$adm5120_swôch_£t_vœn_mac
(
vœn
, *
mac
)

756 
u32
 
t
;

758 
t
 = 
mac
[2] | (mac[3] << 
MAC_WT1_MAC3_SHIFT
)

759 | (
mac
[4] << 
MAC_WT1_MAC4_SHIFT
)

760 | (
mac
[5] << 
MAC_WT1_MAC5_SHIFT
);

761 
	`sw_wrôe_ªg
(
SWITCH_REG_MAC_WT1
, 
t
);

763 
t
 = (
mac
[0] << 
MAC_WT0_MAC0_SHIFT
Ë| (mac[1] << 
MAC_WT0_MAC1_SHIFT
) |

764 
MAC_WT0_MAWC
 | 
MAC_WT0_WVE
 | (
vœn
 << 
MAC_WT0_WVN_SHIFT
) |

765 (
MAC_WT0_WAF_STATIC
 << 
MAC_WT0_WAF_SHIFT
);

766 
	`sw_wrôe_ªg
(
SWITCH_REG_MAC_WT0
, 
t
);

769 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_MAC_WT0
);

770 } (
t
 & 
MAC_WT0_MWD
) == 0);

771 
	}
}

773 
	$adm5120_swôch_£t_vœn_p‹ts
(
vœn
, 
u32
 
p‹ts
)

775 
ªg
;

776 
u32
 
t
;

778 i‡(
vœn
 < 4)

779 
ªg
 = 
SWITCH_REG_VLAN_G1
;

781 
vœn
 -= 4;

782 
ªg
 = 
SWITCH_REG_VLAN_G2
;

785 
t
 = 
	`sw_ªad_ªg
(
ªg
);

786 
t
 &~(0xFF << (
vœn
*8));

787 
t
 |(
p‹ts
 << (
vœn
*8));

788 
	`sw_wrôe_ªg
(
ªg
, 
t
);

789 
	}
}

793 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


794 
ölöe
 
	$adm5120_if_«pi_íabÀ
(
√t_devi˚
 *
dev
)

796 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

797 
	`«pi_íabÀ
(&
¥iv
->
«pi
);

798 
	}
}

800 
ölöe
 
	$adm5120_if_«pi_dißbÀ
(
√t_devi˚
 *
dev
)

802 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

803 
	`«pi_dißbÀ
(&
¥iv
->
«pi
);

804 
	}
}

806 
ölöe
 
	$adm5120_if_«pi_íabÀ
(
√t_devi˚
 *
dev
Ë{
	}
}

807 
ölöe
 
	$adm5120_if_«pi_dißbÀ
(
√t_devi˚
 *
dev
Ë{
	}
}

810 
	$adm5120_if_›í
(
√t_devi˚
 *
dev
)

812 
u32
 
t
;

813 
îr
;

814 
i
;

816 
	`adm5120_if_«pi_íabÀ
(
dev
);

818 
îr
 = 
	`ªque°_úq
(
dev
->
úq
, 
adm5120_swôch_úq
, 
IRQF_SHARED
,

819 
dev
->
«me
, dev);

820 i‡(
îr
) {

821 
	`SW_ERR
("u«bÀÅÿgë irq f‹ %s\n", 
dev
->
«me
);

822 
îr
;

825 i‡(!
sw_u£d
++)

827 
	`sw_öt_unmask
(
SWITCH_INTS_USED
);

830 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PORT_CONF0
);

831 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

832 i‡(
dev
 =
adm5120_devs
[
i
])

833 
t
 &~
adm5120_ëh_vœns
[
i
];

835 
	`sw_wrôe_ªg
(
SWITCH_REG_PORT_CONF0
, 
t
);

837 
	`√tif_°¨t_queue
(
dev
);

841 
îr
:

842 
	`adm5120_if_«pi_dißbÀ
(
dev
);

843  
îr
;

844 
	}
}

846 
	$adm5120_if_°›
(
√t_devi˚
 *
dev
)

848 
u32
 
t
;

849 
i
;

851 
	`√tif_°›_queue
(
dev
);

852 
	`adm5120_if_«pi_dißbÀ
(
dev
);

855 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PORT_CONF0
);

856 
t
 |
SWITCH_PORTS_NOCPU
;

857 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

858 i‡((
dev
 !
adm5120_devs
[
i
]Ë&& 
	`√tif_ru¬ög
(adm5120_devs[i]))

859 
t
 &~
adm5120_ëh_vœns
[
i
];

861 
	`sw_wrôe_ªg
(
SWITCH_REG_PORT_CONF0
, 
t
);

863 i‡(!--
sw_u£d
)

864 
	`sw_öt_mask
(
SWITCH_INTS_USED
);

866 
	`‰ì_úq
(
dev
->
úq
, dev);

869 
	}
}

871 
	$adm5120_if_h¨d_°¨t_xmô
(
sk_buff
 *
skb
,

872 
√t_devi˚
 *
dev
)

874 
dma_desc
 *
desc
;

875 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

876 
íåy
;

877 
d©a
;

878 
i
;

881 
	`•ö_lock_úq
(&
tx_lock
);

884 
íåy
 = 
cur_txl
 % 
TX_RING_SIZE
;

886 
desc
 = &
txl_descs
[
íåy
];

887 i‡(
desc
->
buf1
 & 
DESC_OWN
) {

890 
	`SW_DBG
("%†u«bÀÅÿå™smô,Öackë d›≥d\n", 
dev
->
«me
);

891 
	`dev_k‰ì_skb
(
skb
);

892 
dev
->
°©s
.
tx_dr›≥d
++;

896 
txl_skbuff
[
íåy
] = 
skb
;

897 
d©a
 = (
desc
->
buf1
 & 
DESC_EOR
);

898 
d©a
 |
	`DESC_ADDR
(
skb
->data);

900 
desc
->
misc
 =

901 ((
skb
->
Àn
 < 
ETH_ZLEN
 ? ETH_ZLEN : skb->ÀnË<< 
DESC_PKTLEN_SHIFT
) |

902 (0x1 << 
¥iv
->
vœn_no
);

904 
desc
->
buÊí
 = 
skb
->
Àn
 < 
ETH_ZLEN
 ? ETH_ZLEN : skb->len;

906 
desc
->
buf1
 = 
d©a
 | 
DESC_OWN
;

907 
	`sw_wrôe_ªg
(
SWITCH_REG_SEND_TRIG
, 
SEND_TRIG_STL
);

909 
cur_txl
++;

910 i‡(
cur_txl
 =
dúty_txl
 + 
TX_QUEUE_LEN
) {

911 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

912 i‡(!
adm5120_devs
[
i
])

914 
	`√tif_°›_queue
(
adm5120_devs
[
i
]);

918 
dev
->
å™s_°¨t
 = 
jiffõs
;

920 
	`•ö_u∆ock_úq
(&
tx_lock
);

923 
	}
}

925 
	$adm5120_if_tx_timeout
(
√t_devi˚
 *
dev
)

927 
	`SW_INFO
("TXÅimeouà⁄ %s\n", 
dev
->
«me
);

928 
	}
}

930 
	$adm5120_if_£t_rx_mode
(
√t_devi˚
 *
dev
)

932 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

933 
u32
 
p‹ts
;

934 
u32
 
t
;

936 
p‹ts
 = 
adm5120_ëh_vœns
[
¥iv
->
vœn_no
] & 
SWITCH_PORTS_NOCPU
;

938 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_CPUP_CONF
);

939 i‡(
dev
->
Êags
 & 
IFF_PROMISC
)

941 
t
 &~(
p‹ts
 << 
CPUP_CONF_DUNP_SHIFT
);

944 
t
 |(
p‹ts
 << 
CPUP_CONF_DUNP_SHIFT
);

946 i‡(
dev
->
Êags
 & 
IFF_PROMISC
 || dev->Êag†& 
IFF_ALLMULTI
 ||

947 
	`√tdev_mc_cou¡
(
dev
))

949 
t
 &~(
p‹ts
 << 
CPUP_CONF_DMCP_SHIFT
);

952 
t
 |(
p‹ts
 << 
CPUP_CONF_DMCP_SHIFT
);

972 i‡(~
t
 & (
SWITCH_PORTS_NOCPU
 << 
CPUP_CONF_DUNP_SHIFT
))

973 
t
 |
CPUP_CONF_BTM
;

975 
t
 &~
CPUP_CONF_BTM
;

977 
	`sw_wrôe_ªg
(
SWITCH_REG_CPUP_CONF
, 
t
);

979 
	}
}

981 
	$adm5120_if_£t_mac_addªss
(
√t_devi˚
 *
dev
, *
p
)

983 
ªt
;

985 
ªt
 = 
	`ëh_mac_addr
(
dev
, 
p
);

986 i‡(
ªt
)

987  
ªt
;

989 
	`adm5120_wrôe_mac
(
dev
);

991 
	}
}

993 
	$adm5120_if_do_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
,

994 
cmd
)

996 
îr
;

997 
adm5120_sw_öfo
 
öfo
;

998 
adm5120_if_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1000 
cmd
) {

1001 
SIOCGADMINFO
:

1002 
öfo
.
magic
 = 0x5120;

1003 
öfo
.
p‹ts
 = 
adm5120_ƒdevs
;

1004 
öfo
.
vœn
 = 
¥iv
->
vœn_no
;

1005 
îr
 = 
	`c›y_to_u£r
(
rq
->
i‰_d©a
, &
öfo
, (info));

1006 i‡(
îr
)

1007  -
EFAULT
;

1009 
SIOCSMATRIX
:

1010 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1011  -
EPERM
;

1012 
îr
 = 
	`c›y_‰om_u£r
(
adm5120_ëh_vœns
, 
rq
->
i‰_d©a
,

1013 (
adm5120_ëh_vœns
));

1014 i‡(
îr
)

1015  -
EFAULT
;

1016 
	`adm5120_£t_vœn
(
adm5120_ëh_vœns
);

1018 
SIOCGMATRIX
:

1019 
îr
 = 
	`c›y_to_u£r
(
rq
->
i‰_d©a
, 
adm5120_ëh_vœns
,

1020 (
adm5120_ëh_vœns
));

1021 i‡(
îr
)

1022  -
EFAULT
;

1025  -
EOPNOTSUPP
;

1028 
	}
}

1030 c⁄° 
√t_devi˚_›s
 
	gadm5120sw_√tdev_›s
 = {

1031 .
ndo_›í
 = 
adm5120_if_›í
,

1032 .
	gndo_°›
 = 
adm5120_if_°›
,

1033 .
	gndo_°¨t_xmô
 = 
adm5120_if_h¨d_°¨t_xmô
,

1034 .
	gndo_£t_rx_mode
 = 
adm5120_if_£t_rx_mode
,

1035 .
	gndo_do_io˘l
 = 
adm5120_if_do_io˘l
,

1036 .
	gndo_tx_timeout
 = 
adm5120_if_tx_timeout
,

1037 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1038 .
	gndo_ch™ge_mtu
 = 
ëh_ch™ge_mtu
,

1039 .
	gndo_£t_mac_addªss
 = 
adm5120_if_£t_mac_addªss
,

1042 
√t_devi˚
 *
	$adm5120_if_Æloc
()

1044 
√t_devi˚
 *
dev
;

1045 
adm5120_if_¥iv
 *
¥iv
;

1047 
dev
 = 
	`Æloc_ëhîdev
((*
¥iv
));

1048 i‡(!
dev
)

1049  
NULL
;

1051 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1052 
¥iv
->
dev
 = dev;

1054 
dev
->
úq
 = 
ADM5120_IRQ_SWITCH
;

1055 
dev
->
√tdev_›s
 = &
adm5120sw_√tdev_›s
;

1056 
dev
->
w©chdog_timeo
 = 
TX_TIMEOUT
;

1058 #ifde‡
CONFIG_ADM5120_SWITCH_NAPI


1059 
	`√tif_«pi_add
(
dev
, &
¥iv
->
«pi
, 
adm5120_if_pﬁl
, 64);

1062  
dev
;

1063 
	}
}

1067 
	$adm5120_swôch_˛ónup
()

1069 
i
;

1072 
	`sw_öt_mask
(
SWITCH_INTS_ALL
);

1074 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

1075 
√t_devi˚
 *
dev
 = 
adm5120_devs
[
i
];

1076 i‡(
dev
) {

1077 
	`uƒegi°î_√tdev
(
dev
);

1078 
	`‰ì_√tdev
(
dev
);

1082 
	`adm5120_swôch_tx_rög_‰ì
();

1083 
	`adm5120_swôch_rx_rög_‰ì
();

1084 
	}
}

1086 
	$adm5120_swôch_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1088 
u32
 
t
;

1089 
i
, 
îr
;

1091 
adm5120_ƒdevs
 = 
adm5120_ëh_num_p‹ts
;

1093 
t
 = 
CPUP_CONF_DCPUP
 | 
CPUP_CONF_CRCP
 |

1094 
SWITCH_PORTS_NOCPU
 << 
CPUP_CONF_DUNP_SHIFT
 |

1095 
SWITCH_PORTS_NOCPU
 << 
CPUP_CONF_DMCP_SHIFT
 ;

1096 
	`sw_wrôe_ªg
(
SWITCH_REG_CPUP_CONF
, 
t
);

1098 
t
 = (
SWITCH_PORTS_NOCPU
 << 
PORT_CONF0_EMCP_SHIFT
) |

1099 (
SWITCH_PORTS_NOCPU
 << 
PORT_CONF0_BP_SHIFT
) |

1100 (
SWITCH_PORTS_NOCPU
);

1101 
	`sw_wrôe_ªg
(
SWITCH_REG_PORT_CONF0
, 
t
);

1104 
t
 = 
SWITCH_PORTS_PHY
 |

1105 (
SWITCH_PORTS_PHY
 << 
PHY_CNTL2_SC_SHIFT
) |

1106 (
SWITCH_PORTS_PHY
 << 
PHY_CNTL2_DC_SHIFT
) |

1107 (
SWITCH_PORTS_PHY
 << 
PHY_CNTL2_PHYR_SHIFT
) |

1108 (
SWITCH_PORTS_PHY
 << 
PHY_CNTL2_AMDIX_SHIFT
) |

1109 
PHY_CNTL2_RMAE
;

1110 
	`sw_wrôe_ªg
(
SWITCH_REG_PHY_CNTL2
, 
t
);

1112 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_PHY_CNTL3
);

1113 
t
 |
PHY_CNTL3_RNT
;

1114 
	`sw_wrôe_ªg
(
SWITCH_REG_PHY_CNTL3
, 
t
);

1117 
	`sw_wrôe_ªg
(
SWITCH_REG_PRI_CNTL
, 0);

1119 
	`sw_öt_mask
(
SWITCH_INTS_ALL
);

1120 
	`sw_öt_ack
(
SWITCH_INTS_ALL
);

1122 
îr
 = 
	`adm5120_swôch_rx_rög_Æloc
();

1123 i‡(
îr
)

1124 
îr
;

1126 
îr
 = 
	`adm5120_swôch_tx_rög_Æloc
();

1127 i‡(
îr
)

1128 
îr
;

1130 
	`adm5120_swôch_tx_rög_ª£t
(
txl_descs
, 
txl_skbuff
, 
TX_RING_SIZE
);

1131 
	`adm5120_swôch_rx_rög_ª£t
(
rxl_descs
, 
rxl_skbuff
, 
RX_RING_SIZE
);

1133 
	`sw_wrôe_ªg
(
SWITCH_REG_SHDA
, 0);

1134 
	`sw_wrôe_ªg
(
SWITCH_REG_SLDA
, 
	`KSEG1ADDR
(
txl_descs
));

1135 
	`sw_wrôe_ªg
(
SWITCH_REG_RHDA
, 0);

1136 
	`sw_wrôe_ªg
(
SWITCH_REG_RLDA
, 
	`KSEG1ADDR
(
rxl_descs
));

1138 
i
 = 0; i < 
SWITCH_NUM_PORTS
; i++) {

1139 
√t_devi˚
 *
dev
;

1140 
adm5120_if_¥iv
 *
¥iv
;

1142 
dev
 = 
	`adm5120_if_Æloc
();

1143 i‡(!
dev
) {

1144 
îr
 = -
ENOMEM
;

1145 
îr
;

1148 
adm5120_devs
[
i
] = 
dev
;

1149 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1151 
¥iv
->
vœn_no
 = 
i
;

1152 
¥iv
->
p‹t_mask
 = 
adm5120_ëh_vœns
[
i
];

1154 
	`mem˝y
(
dev
->
dev_addr
, 
adm5120_ëh_macs
[
i
], 6);

1155 
	`adm5120_wrôe_mac
(
dev
);

1157 
îr
 = 
	`ªgi°î_√tdev
(
dev
);

1158 i‡(
îr
) {

1159 
	`SW_INFO
("%sÑegister failed,Érror=%d\n",

1160 
dev
->
«me
, 
îr
);

1161 
îr
;

1166 
	`adm5120_£t_vœn
(
adm5120_ëh_vœns
);

1169 
t
 = 
	`sw_ªad_ªg
(
SWITCH_REG_CPUP_CONF
);

1170 
t
 &~
CPUP_CONF_DCPUP
;

1171 
	`sw_wrôe_ªg
(
SWITCH_REG_CPUP_CONF
, 
t
);

1175 
îr
:

1176 
	`adm5120_swôch_˛ónup
();

1178 
	`SW_ERR
("init failed\n");

1179  
îr
;

1180 
	}
}

1182 
	$adm5120_swôch_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1184 
	`adm5120_swôch_˛ónup
();

1186 
	}
}

1188 
∂©f‹m_drivî
 
	gadm5120_swôch_drivî
 = {

1189 .
¥obe
 = 
adm5120_swôch_¥obe
,

1190 .
	gªmove
 = 
adm5120_swôch_ªmove
,

1191 .
	gdrivî
 = {

1192 .
«me
 = 
DRV_NAME
,

1198 
__öô
 
	$adm5120_swôch_mod_öô
()

1200 
îr
;

1202 
	`¥_öfo
(
DRV_DESC
 " vîsi⁄ " 
DRV_VERSION
 "\n");

1203 
îr
 = 
	`∂©f‹m_drivî_ªgi°î
(&
adm5120_swôch_drivî
);

1205  
îr
;

1206 
	}
}

1208 
__exô
 
	$adm5120_swôch_mod_exô
()

1210 
	`∂©f‹m_drivî_uƒegi°î
(&
adm5120_swôch_drivî
);

1211 
	}
}

1213 
moduÀ_öô
(
adm5120_swôch_mod_öô
);

1214 
moduÀ_exô
(
adm5120_swôch_mod_exô
);

1216 
MODULE_LICENSE
("GPL v2");

1217 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1218 
MODULE_DESCRIPTION
(
DRV_DESC
);

1219 
MODULE_VERSION
(
DRV_VERSION
);

	@linux/adm5120/files-3.18/drivers/net/adm5120sw.h

10 #i‚de‡
_INCLUDE_ADM5120SW_H_


11 
	#_INCLUDE_ADM5120SW_H_


	)

13 
	#SIOCSMATRIX
 
SIOCDEVPRIVATE


	)

14 
	#SIOCGMATRIX
 (
SIOCDEVPRIVATE
 + 1)

	)

15 
	#SIOCGADMINFO
 (
SIOCDEVPRIVATE
 + 2)

	)

17 
	sadm5120_sw_öfo
 {

18 
u16
 
	mmagic
;

19 
u16
 
	mp‹ts
;

20 
u16
 
	mvœn
;

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-dbg.c

18 
ölöe
 *
	$ed_ty≥°rög
(
ed_ty≥
)

20 
ed_ty≥
) {

21 
PIPE_CONTROL
:

23 
PIPE_BULK
:

25 
PIPE_INTERRUPT
:

27 
PIPE_ISOCHRONOUS
:

31 
	}
}

33 
ölöe
 *
	$ed_°©e°rög
(
°©e
)

35 
°©e
) {

36 
ED_IDLE
:

38 
ED_UNLINK
:

40 
ED_OPER
:

44 
	}
}

46 
ölöe
 *
	$pùe°rög
(
pùe
)

48  
	`ed_ty≥°rög
(
	`usb_pùëy≥
(
pùe
));

49 
	}
}

51 
ölöe
 *
	$td_pid°rög
(
u32
 
öfo
)

53 
öfo
 & 
TD_DP
) {

54 
TD_DP_SETUP
:

56 
TD_DP_IN
:

58 
TD_DP_OUT
:

62 
	}
}

64 
ölöe
 *
	$td_toggÀ°rög
(
u32
 
öfo
)

66 
öfo
 & 
TD_T
) {

67 
TD_T_DATA0
:

69 
TD_T_DATA1
:

71 
TD_T_CARRY
:

75 
	}
}

79 #ifde‡
DEBUG


84 
__©åibuã__
((
unu£d
))

85 
	$urb_¥öt
(
admhcd
 *
ahcd
, 
urb
 *urb, *
°r
, 
smÆl
, 
°©us
)

87 
pùe
 = 
urb
->pipe;

89 i‡(!
urb
->
dev
 || !urb->dev->
bus
) {

90 
	`admhc_dbg
(
ahcd
, "%†URB:Çÿdev", 
°r
);

94 #i‚def 
ADMHC_VERBOSE_DEBUG


95 i‡(
°©us
 != 0)

97 
	`admhc_dbg
(
ahcd
, "URB-%s %p dev=%dÉp=%d%s-%s flags=%xÜen=%d/%d "

99 
°r
,

100 
urb
,

101 
	`usb_pùedevi˚
(
pùe
),

102 
	`usb_pùìndpoöt
(
pùe
),

103 
	`usb_pùeout
(
pùe
) ? "out" : "in",

104 
	`pùe°rög
(
pùe
),

105 
urb
->
å™s„r_Êags
,

106 
urb
->
a˘uÆ_Àngth
,

107 
urb
->
å™s„r_buf„r_Àngth
,

108 
°©us
);

110 #ifdef 
ADMHC_VERBOSE_DEBUG


111 i‡(!
smÆl
) {

112 
i
, 
Àn
;

114 i‡(
	`usb_pùec⁄åﬁ
(
pùe
)) {

115 
	`admhc_dbg
(
ahcd
, "setup(8):");

116 
i
 = 0; i < 8 ; i++)

117 
	`¥ötk
(
KERN_INFO
" %02x", ((
__u8
 *)
urb
->
£tup_∑ckë
)[
i
]);

118 
	`¥ötk
(
KERN_INFO
 "\n");

120 i‡(
urb
->
å™s„r_buf„r_Àngth
 > 0 && urb->
å™s„r_buf„r
) {

121 
	`admhc_dbg
(
ahcd
, "data(%d/%d):",

122 
urb
->
a˘uÆ_Àngth
,

123 
urb
->
å™s„r_buf„r_Àngth
);

124 
Àn
 = 
	`usb_pùeout
(
pùe
) ?

125 
urb
->
å™s„r_buf„r_Àngth
 : urb->
a˘uÆ_Àngth
;

126 
i
 = 0; i < 16 && i < 
Àn
; i++)

127 
	`¥ötk
(
KERN_INFO
 " %02x", ((
__u8
 *)
urb
->
å™s„r_buf„r
)[
i
]);

128 
	`¥ötk
(
KERN_INFO
 "%†°©:%d\n", 
i
 < 
Àn
 ? "..." : "", 
°©us
);

132 
	}
}

134 
	#admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
, 
f‹m©
, 
¨g
...) \

136 i‡(
√xt
) { \

137 
s_Àn
; \

138 
s_Àn
 = 
	`s˙¥ötf
(*
√xt
, *
size
, 
f‹m©
, ## 
¨g
); \

139 *
size
 -
s_Àn
; *
√xt
 += s_len; \

141 
	`admhc_dbg
(
ahcd
, 
f‹m©
, ## 
¨g
); \

142 } 0);

	)

145 
	$admhc_dump_öå_mask
(
admhcd
 *
ahcd
, *
œbñ
, 
u32
 
mask
,

146 **
√xt
, *
size
)

148 
	`admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
, "%s 0x%08x%s%s%s%s%s%s%s%s%s%s%s%s\n",

149 
œbñ
,

150 
mask
,

151 (
mask
 & 
ADMHC_INTR_INTA
) ? " INTA" : "",

152 (
mask
 & 
ADMHC_INTR_FATI
) ? " FATI" : "",

153 (
mask
 & 
ADMHC_INTR_SWI
) ? " SWI" : "",

154 (
mask
 & 
ADMHC_INTR_TDC
) ? " TDC" : "",

155 (
mask
 & 
ADMHC_INTR_FNO
) ? " FNO" : "",

156 (
mask
 & 
ADMHC_INTR_SO
) ? " SO" : "",

157 (
mask
 & 
ADMHC_INTR_INSM
) ? " INSM" : "",

158 (
mask
 & 
ADMHC_INTR_BABI
) ? " BABI" : "",

159 (
mask
 & 
ADMHC_INTR_7
) ? " !7!" : "",

160 (
mask
 & 
ADMHC_INTR_6
) ? " !6!" : "",

161 (
mask
 & 
ADMHC_INTR_RESI
) ? " RESI" : "",

162 (
mask
 & 
ADMHC_INTR_SOFI
) ? " SOFI" : ""

164 
	}
}

166 
	$maybe_¥öt_eds
(
admhcd
 *
ahcd
, *
œbñ
, 
u32
 
vÆue
,

167 **
√xt
, *
size
)

169 i‡(
vÆue
)

170 
	`admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
, "%†%08x\n", 
œbñ
, 
vÆue
);

171 
	}
}

173 *
	$buss2°rög
(
°©e
)

175 
°©e
) {

176 
ADMHC_BUSS_RESET
:

178 
ADMHC_BUSS_RESUME
:

180 
ADMHC_BUSS_OPER
:

182 
ADMHC_BUSS_SUSPEND
:

186 
	}
}

189 
	$admhc_dump_°©us
(
admhcd
 *
ahcd
, **
√xt
, *
size
)

191 
admhcd_ªgs
 
__iomem
 *
ªgs
 = 
ahcd
->regs;

192 
u32
 
ãmp
;

194 
ãmp
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
gíc⁄åﬁ
);

195 
	`admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
,

197 
ãmp
,

198 (
ãmp
 & 
ADMHC_CTRL_UHFE
) ? " UHFE" : "",

199 (
ãmp
 & 
ADMHC_CTRL_SIR
) ? " SIR" : "",

200 (
ãmp
 & 
ADMHC_CTRL_DMAA
) ? " DMAA" : "",

201 (
ãmp
 & 
ADMHC_CTRL_SR
) ? " SR" : ""

204 
ãmp
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
ho°_c⁄åﬁ
);

205 
	`admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
,

207 
ãmp
,

208 
	`buss2°rög
(
ãmp
 & 
ADMHC_HC_BUSS
),

209 (
ãmp
 & 
ADMHC_HC_DMAE
) ? " DMAE" : ""

212 
	`admhc_dump_öå_mask
(
ahcd
, "int_status",

213 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
öt_°©us
),

214 
√xt
, 
size
);

215 
	`admhc_dump_öå_mask
(
ahcd
, "int_enable",

216 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
öt_íabÀ
),

217 
√xt
, 
size
);

219 
	`maybe_¥öt_eds
(
ahcd
, "hosthead",

220 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
ho°hód
), 
√xt
, 
size
);

221 
	}
}

223 
	#dbg_p‹t_sw
(
hc
, 
num
, 
vÆue
, 
√xt
, 
size
) \

224 
	`admhc_dbg_sw
(
hc
, 
√xt
, 
size
, \

227 
num
, 
ãmp
, \

228 (
ãmp
 & 
ADMHC_PS_PRSC
) ? " PRSC" : "", \

229 (
ãmp
 & 
ADMHC_PS_OCIC
) ? " OCIC" : "", \

230 (
ãmp
 & 
ADMHC_PS_PSSC
) ? " PSSC" : "", \

231 (
ãmp
 & 
ADMHC_PS_PESC
) ? " PESC" : "", \

232 (
ãmp
 & 
ADMHC_PS_CSC
) ? " CSC" : "", \

234 (
ãmp
 & 
ADMHC_PS_LSDA
) ? " LSDA" : "", \

235 (
ãmp
 & 
ADMHC_PS_PPS
) ? " PPS" : "", \

236 (
ãmp
 & 
ADMHC_PS_PRS
) ? " PRS" : "", \

237 (
ãmp
 & 
ADMHC_PS_POCI
) ? " POCI" : "", \

238 (
ãmp
 & 
ADMHC_PS_PSS
) ? " PSS" : "", \

240 (
ãmp
 & 
ADMHC_PS_PES
) ? " PES" : "", \

241 (
ãmp
 & 
ADMHC_PS_CCS
) ? " CCS" : "" \

242 );

	)

246 
	$admhc_dump_roŸhub
(

247 
admhcd
 *
ahcd
,

248 
vîbo£
,

249 **
√xt
,

250 *
size
)

252 
u32
 
ãmp
, 
i
;

254 
ãmp
 = 
	`admhc_ªad_rhdesc
(
ahcd
);

255 i‡(
ãmp
 =~(
u32
)0)

258 i‡(
vîbo£
) {

259 
	`admhc_dbg_sw
(
ahcd
, 
√xt
, 
size
,

261 
ãmp
,

262 (
ãmp
 & 
ADMHC_RH_CRWE
) ? " CRWE" : "",

263 (
ãmp
 & 
ADMHC_RH_OCIC
) ? " OCIC" : "",

264 (
ãmp
 & 
ADMHC_RH_LPSC
) ? " LPSC" : "",

265 (
ãmp
 & 
ADMHC_RH_LPSC
) ? " DRWE" : "",

266 (
ãmp
 & 
ADMHC_RH_LPSC
) ? " OCI" : "",

267 (
ãmp
 & 
ADMHC_RH_LPSC
) ? " LPS" : "",

268 ((
ãmp
 & 
ADMHC_RH_PPCM
) >> 16),

269 (
ãmp
 & 
ADMHC_RH_NOCP
) ? " NOCP" : "",

270 (
ãmp
 & 
ADMHC_RH_OCPM
) ? " OCPM" : "",

271 (
ãmp
 & 
ADMHC_RH_NPS
) ? " NPS" : "",

272 (
ãmp
 & 
ADMHC_RH_PSM
) ? " PSM" : "",

273 (
ãmp
 & 
ADMHC_RH_NUMP
), 
ahcd
->
num_p‹ts


277 
i
 = 0; i < 
ahcd
->
num_p‹ts
; i++) {

278 
ãmp
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
i
);

279 
	`dbg_p‹t_sw
(
ahcd
, 
i
, 
ãmp
, 
√xt
, 
size
);

281 
	}
}

283 
	$admhc_dump
(
admhcd
 *
ahcd
, 
vîbo£
)

285 
	`admhc_dbg
(
ahcd
, "ADMHCáhcd state\n");

288 
	`admhc_dump_°©us
(
ahcd
, 
NULL
, NULL);

289 
	`admhc_dbg
(
ahcd
, "current frame #%04x\n",

290 
	`admhc_‰ame_no
(
ahcd
));

292 
	`admhc_dump_roŸhub
(
ahcd
, 
vîbo£
, 
NULL
, NULL);

293 
	}
}

295 c⁄° 
	gd©a0
[] = "DATA0";

296 c⁄° 
	gd©a1
[] = "DATA1";

298 
	$admhc_dump_td
(c⁄° 
admhcd
 *
ahcd
, c⁄° *
œbñ
,

299 c⁄° 
td
 *td)

301 
u32
 
tmp
;

303 
	`admhc_dbg
(
ahcd
, "%sÅd %p; urb %p index %d; hwNextTD %08x\n",

304 
œbñ
, 
td
,

305 
td
->
urb
,Åd->
ödex
,

306 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwNextTD
));

308 
tmp
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwINFO
);

309 
	`admhc_dbg
(
ahcd
, " status %08x%s CC=%x EC=%d %s %s ISI=%x FN=%x\n",

310 
tmp
,

311 (
tmp
 & 
TD_OWN
) ? " OWN" : "",

312 
	`TD_CC_GET
(
tmp
),

313 
	`TD_EC_GET
(
tmp
),

314 
	`td_toggÀ°rög
(
tmp
),

315 
	`td_pid°rög
(
tmp
),

316 
	`TD_ISI_GET
(
tmp
),

317 
	`TD_FN_GET
(
tmp
));

319 
tmp
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwCBL
);

320 
	`admhc_dbg
(
ahcd
, " dbp %08x; cbl %08x; LEN=%d%s\n",

321 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwDBP
),

322 
tmp
,

323 
	`TD_BL_GET
(
tmp
),

324 (
tmp
 & 
TD_IE
) ? " IE" : "");

325 
	}
}

328 
__©åibuã__
((
unu£d
))

329 
	$admhc_dump_ed
(c⁄° 
admhcd
 *
ahcd
, c⁄° *
œbñ
,

330 c⁄° 
ed
 *ed, 
vîbo£
)

332 
u32
 
tmp
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwINFO
);

334 
	`admhc_dbg
(
ahcd
, "%sÉd %p %sÅype %s;ÇextÉd %08x\n",

335 
œbñ
,

336 
ed
, 
	`ed_°©e°rög
”d->
°©e
), 
	`ed_ty≥°rög
”d->
ty≥
),

337 
	`hc32_to_˝up
(
ahcd
, &
ed
->
hwNextED
));

339 
	`admhc_dbg
(
ahcd
, " infÿ%08x MAX=%d%s%s%s%†EP=%d DEV=%d\n", 
tmp
,

340 
	`ED_MPS_GET
(
tmp
),

341 (
tmp
 & 
ED_ISO
) ? " ISO" : "",

342 (
tmp
 & 
ED_SKIP
) ? " SKIP" : "",

343 (
tmp
 & 
ED_SPEED_FULL
) ? " FULL" : " LOW",

344 (
tmp
 & 
ED_INT
) ? " INT" : "",

345 
	`ED_EN_GET
(
tmp
),

346 
	`ED_FA_GET
(
tmp
));

348 
tmp
 = 
	`hc32_to_˝up
(
ahcd
, &
ed
->
hwHódP
);

349 
	`admhc_dbg
(
ahcd
, "Åds: head %08xÅail %08x %s%s%s\n",

350 
tmp
 & 
TD_MASK
,

351 
	`hc32_to_˝up
(
ahcd
, &
ed
->
hwTaûP
),

352 (
tmp
 & 
ED_C
Ë? 
d©a1
 : 
d©a0
,

353 (
tmp
 & 
ED_H
) ? " HALT" : "",

354 
vîbo£
 ? "ÅdÜist follows" : " (notÜisting)");

356 i‡(
vîbo£
) {

357 
li°_hód
 *
tmp
;

362 
	`li°_f‹_óch
(
tmp
, &
ed
->
td_li°
) {

363 
td
 *td;

364 
td
 = 
	`li°_íåy
(
tmp
, td, 
td_li°
);

365 
	`admhc_dump_td
(
ahcd
, " ->", 
td
);

368 
	}
}

372 
ölöe
 
	$urb_¥öt
(
admhcd
 *
ahcd
, 
urb
 * urb, * 
°r
,

373 
smÆl
, 
°©us
Ë{
	}
}

374 
ölöe
 
	$admhc_dump_ed
(c⁄° 
admhcd
 *
ahcd
, c⁄° *
œbñ
,

375 c⁄° 
ed
 *ed, 
vîbo£
Ë{
	}
}

376 
ölöe
 
	$admhc_dump_td
(c⁄° 
admhcd
 *
ahcd
, c⁄° *
œbñ
,

377 c⁄° 
td
 *tdË{
	}
}

378 
ölöe
 
	$admhc_dump
(
admhcd
 *
ahcd
, 
vîbo£
Ë{
	}
}

380 #unde‡
ADMHC_VERBOSE_DEBUG


386 #ifde‡
STUB_DEBUG_FILES


388 
ölöe
 
	$¸óã_debug_fûes
(
admhcd
 *
bus
Ë{ 
	}
}

389 
ölöe
 
	$ªmove_debug_fûes
(
admhcd
 *
bus
Ë{ 
	}
}

393 
debug_async_›í
(
öode
 *, 
fûe
 *);

394 
debug_≥riodic_›í
(
öode
 *, 
fûe
 *);

395 
debug_ªgi°îs_›í
(
öode
 *, 
fûe
 *);

396 
ssize_t
 
debug_ouçut
(
fûe
*, 
__u£r
*, 
size_t
, 
loff_t
*);

397 
debug_˛o£
(
öode
 *, 
fûe
 *);

399 c⁄° 
fûe_›î©i⁄s
 
	gdebug_async_f›s
 = {

400 .
ow√r
 = 
THIS_MODULE
,

401 .
	g›í
 = 
debug_async_›í
,

402 .
	gªad
 = 
debug_ouçut
,

403 .
	gªÀa£
 = 
debug_˛o£
,

404 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

406 c⁄° 
fûe_›î©i⁄s
 
	gdebug_≥riodic_f›s
 = {

407 .
ow√r
 = 
THIS_MODULE
,

408 .
	g›í
 = 
debug_≥riodic_›í
,

409 .
	gªad
 = 
debug_ouçut
,

410 .
	gªÀa£
 = 
debug_˛o£
,

411 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

413 c⁄° 
fûe_›î©i⁄s
 
	gdebug_ªgi°îs_f›s
 = {

414 .
ow√r
 = 
THIS_MODULE
,

415 .
	g›í
 = 
debug_ªgi°îs_›í
,

416 .
	gªad
 = 
debug_ouçut
,

417 .
	gªÀa£
 = 
debug_˛o£
,

418 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

421 
díåy
 *
	gadmhc_debug_roŸ
;

423 
	sdebug_buf„r
 {

424 
ssize_t
 (*
fûl_func
)(
	mdebug_buf„r
 *);

425 
admhcd
 *
	mahcd
;

426 
muãx
 
	mmuãx
;

427 
size_t
 
	mcou¡
;

428 *
	m∑ge
;

431 
ssize_t


432 
	$show_li°
(
admhcd
 *
ahcd
, *
buf
, 
size_t
 
cou¡
, 
ed
 *ed)

434 
ãmp
;

435 
size
 = 
cou¡
;

437 i‡(!
ed
)

441 
ed
) {

442 
u32
 
öfo
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwINFO
);

443 
u32
 
hódp
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwHódP
);

444 
u32
 
èûp
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwTaûP
);

445 
li°_hód
 *
íåy
;

446 
td
 *td;

448 
ãmp
 = 
	`s˙¥ötf
(
buf
, 
size
,

451 
ed
,

452 
	`ed_°©e°rög
(
ed
->
°©e
),

453 
	`ed_ty≥°rög
(
ed
->
ty≥
),

454 (
öfo
 & 
ED_SPEED_FULL
) ? 'f' : 'l',

455 
öfo
 & 
ED_FA_MASK
,

456 (
öfo
 >> 
ED_EN_SHIFT
Ë& 
ED_EN_MASK
,

457 (
öfo
 & 
ED_INT
) ? "INT " : "",

458 (
öfo
 & 
ED_ISO
) ? "ISO " : "",

459 (
öfo
 >> 
ED_MPS_SHIFT
Ë& 
ED_MPS_MASK
 ,

460 
öfo
,

461 (
öfo
 & 
ED_SKIP
) ? " S" : "",

462 (
hódp
 & 
ED_H
) ? " H" : "",

463 (
hódp
 & 
ED_C
Ë? 
d©a1
 : 
d©a0
,

464 
hódp
 & 
ED_MASK
, 
èûp
);

465 
size
 -
ãmp
;

466 
buf
 +
ãmp
;

468 
	`li°_f‹_óch
(
íåy
, &
ed
->
td_li°
) {

469 
u32
 
dbp
, 
cbl
;

471 
td
 = 
	`li°_íåy
(
íåy
, td, 
td_li°
);

472 
öfo
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwINFO
);

473 
dbp
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwDBP
);

474 
cbl
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwCBL
);

476 
ãmp
 = 
	`s˙¥ötf
(
buf
, 
size
,

478 
td
,

479 
	`td_pid°rög
(
öfo
),

480 
	`TD_BL_GET
(
cbl
),

481 (
öfo
 & 
TD_OWN
) ? "" : "DONE ",

482 (
cbl
 & 
TD_IE
) ? "IE " : "",

483 
	`TD_CC_GET
(
öfo
), 
td
->
urb
, info, 
cbl
);

484 
size
 -
ãmp
;

485 
buf
 +
ãmp
;

488 
ãmp
 = 
	`s˙¥ötf
(
buf
, 
size
, "\n");

489 
size
 -
ãmp
;

490 
buf
 +
ãmp
;

492 
ed
 =Éd->
ed_√xt
;

495  
cou¡
 - 
size
;

496 
	}
}

498 
ssize_t
 
	$fûl_async_buf„r
(
debug_buf„r
 *
buf
)

500 
admhcd
 *
ahcd
;

501 
size_t
 
ãmp
;

502 
Êags
;

504 
ahcd
 = 
buf
->ahcd;

506 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

507 
ãmp
 = 
	`show_li°
(
ahcd
, 
buf
->
∑ge
, 
PAGE_SIZE
,áhcd->
ed_hód
);

508 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

510  
ãmp
;

511 
	}
}

514 
	#DBG_SCHED_LIMIT
 64

	)

516 
ssize_t
 
	$fûl_≥riodic_buf„r
(
debug_buf„r
 *
buf
)

518 
admhcd
 *
ahcd
;

519 
ed
 **
£í
, *ed;

520 
Êags
;

521 
ãmp
, 
size
, 
£í_cou¡
;

522 *
√xt
;

523 
i
;

525 
£í
 = 
	`kmÆloc
(
DBG_SCHED_LIMIT
 * (*£í), 
GFP_ATOMIC
);

526 i‡(!
£í
)

528 
£í_cou¡
 = 0;

530 
ahcd
 = 
buf
->ahcd;

531 
√xt
 = 
buf
->
∑ge
;

532 
size
 = 
PAGE_SIZE
;

534 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "sizê%d\n", 
NUM_INTS
);

535 
size
 -
ãmp
;

536 
√xt
 +
ãmp
;

539 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

540 
i
 = 0; i < 
NUM_INTS
; i++) {

541 
ed
 = 
ahcd
->
≥riodic
[
i
];

542 i‡(!
ed
)

545 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "%2d [%3d]:", 
i
, 
ahcd
->
lﬂd
[i]);

546 
size
 -
ãmp
;

547 
√xt
 +
ãmp
;

550 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "Éd%d/%p",

551 
ed
->
öãrvÆ
,Éd);

552 
size
 -
ãmp
;

553 
√xt
 +
ãmp
;

554 
ãmp
 = 0;Åem∞< 
£í_cou¡
;Åemp++) {

555 i‡(
£í
[
ãmp
] =
ed
)

560 i‡(
ãmp
 =
£í_cou¡
) {

561 
u32
 
öfo
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwINFO
);

562 
li°_hód
 *
íåy
;

563 
qÀn
 = 0;

566 
	`li°_f‹_óch
(
íåy
, &
ed
->
td_li°
)

567 
qÀn
++;

568 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
,

571 (
öfo
 & 
ED_SPEED_FULL
) ? 'f' : 'l',

572 
	`ED_FA_GET
(
öfo
),

573 
	`ED_EN_GET
(
öfo
),

574 (
öfo
 & 
ED_ISO
) ? "iso" : "int",

575 
qÀn
,

576 
	`ED_MPS_GET
(
öfo
),

577 
öfo
,

578 (
öfo
 & 
ED_SKIP
) ? " K" : "",

579 (
ed
->
hwHódP
 &

580 
	`˝u_to_hc32
(
ahcd
, 
ED_H
)) ?

582 
size
 -
ãmp
;

583 
√xt
 +
ãmp
;

585 i‡(
£í_cou¡
 < 
DBG_SCHED_LIMIT
)

586 
£í
[
£í_cou¡
++] = 
ed
;

588 
ed
 =Éd->
ed_√xt
;

592 
ãmp
 = 0;

593 
ed
 = 
NULL
;

596 } 
ed
);

598 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "\n");

599 
size
 -
ãmp
;

600 
√xt
 +
ãmp
;

602 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

603 
	`k‰ì
(
£í
);

605  
PAGE_SIZE
 - 
size
;

606 
	}
}

609 #unde‡
DBG_SCHED_LIMIT


611 
ssize_t
 
	$fûl_ªgi°îs_buf„r
(
debug_buf„r
 *
buf
)

613 
usb_hcd
 *
hcd
;

614 
admhcd
 *
ahcd
;

615 
admhcd_ªgs
 
__iomem
 *
ªgs
;

616 
Êags
;

617 
ãmp
, 
size
;

618 *
√xt
;

619 
u32
 
rd©a
;

621 
ahcd
 = 
buf
->ahcd;

622 
hcd
 = 
	`admhc_to_hcd
(
ahcd
);

623 
ªgs
 = 
ahcd
->regs;

624 
√xt
 = 
buf
->
∑ge
;

625 
size
 = 
PAGE_SIZE
;

627 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

631 
	`admhc_dbg_sw
(
ahcd
, &
√xt
, &
size
,

635 
hcd
->
£lf
.
c⁄åﬁÀr
->
bus
->
«me
,

636 
	`dev_«me
(
hcd
->
£lf
.
c⁄åﬁÀr
),

637 
hcd
->
¥odu˘_desc
,

638 
hcd_«me
);

640 i‡(!
	`HCD_HW_ACCESSIBLE
(
hcd
)) {

641 
size
 -
	`s˙¥ötf
(
√xt
, size,

643 
d⁄e
;

646 
	`admhc_dump_°©us
(
ahcd
, &
√xt
, &
size
);

649 
rd©a
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
fmöãrvÆ
);

650 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
,

652 
rd©a
, (rd©®& 
ADMHC_SFI_FIT
) ? "FIT " : "",

653 (
rd©a
 >> 
ADMHC_SFI_FSLDP_SHIFT
Ë& 
ADMHC_SFI_FSLDP_MASK
,

654 
rd©a
 & 
ADMHC_SFI_FI_MASK
);

655 
size
 -
ãmp
;

656 
√xt
 +
ãmp
;

658 
rd©a
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
fmnumbî
);

659 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "fmnumber 0x%08x %sFR=0x%04x FN=%04x\n",

660 
rd©a
, (rd©®& 
ADMHC_SFN_FRT
) ? "FRT " : "",

661 (
rd©a
 >> 
ADMHC_SFN_FR_SHIFT
Ë& 
ADMHC_SFN_FR_MASK
,

662 
rd©a
 & 
ADMHC_SFN_FN_MASK
);

663 
size
 -
ãmp
;

664 
√xt
 +
ãmp
;

667 
rd©a
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
l°hªsh
);

668 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "lsthresh 0x%04x\n",

669 
rd©a
 & 0x3fff);

670 
size
 -
ãmp
;

671 
√xt
 +
ãmp
;

673 
ãmp
 = 
	`s˙¥ötf
(
√xt
, 
size
, "hubÖollÅimer: %s\n",

674 
	`admhcd_to_hcd
(
ahcd
)->
pﬁl_rh
 ? "ON" : "OFF");

675 
size
 -
ãmp
;

676 
√xt
 +
ãmp
;

679 
	`admhc_dump_roŸhub
(
ahcd
, 1, &
√xt
, &
size
);

681 
d⁄e
:

682 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

683  
PAGE_SIZE
 - 
size
;

684 
	}
}

687 
debug_buf„r
 *
	$Æloc_buf„r
(
admhcd
 *
ahcd
,

688 
	$ssize_t
 (*
fûl_func
)(
debug_buf„r
 *))

690 
debug_buf„r
 *
buf
;

692 
buf
 = 
	`kzÆloc
((
debug_buf„r
), 
GFP_KERNEL
);

694 i‡(
buf
) {

695 
buf
->
ahcd
 =áhcd;

696 
buf
->
fûl_func
 = fill_func;

697 
	`muãx_öô
(&
buf
->
muãx
);

700  
buf
;

701 
	}
}

703 
	$fûl_buf„r
(
debug_buf„r
 *
buf
)

705 
ªt
 = 0;

707 i‡(!
buf
->
∑ge
)

708 
buf
->
∑ge
 = (*)
	`gë_zî€d_∑ge
(
GFP_KERNEL
);

710 i‡(!
buf
->
∑ge
) {

711 
ªt
 = -
ENOMEM
;

712 
out
;

715 
ªt
 = 
buf
->
	`fûl_func
(buf);

717 i‡(
ªt
 >= 0) {

718 
buf
->
cou¡
 = 
ªt
;

719 
ªt
 = 0;

722 
out
:

723  
ªt
;

724 
	}
}

726 
ssize_t
 
	$debug_ouçut
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

727 
size_t
 
Àn
, 
loff_t
 *
off£t
)

729 
debug_buf„r
 *
buf
 = 
fûe
->
¥iv©e_d©a
;

730 
ªt
 = 0;

732 
	`muãx_lock
(&
buf
->
muãx
);

733 i‡(
buf
->
cou¡
 == 0) {

734 
ªt
 = 
	`fûl_buf„r
(
buf
);

735 i‡(
ªt
 != 0) {

736 
	`muãx_u∆ock
(&
buf
->
muãx
);

737 
out
;

740 
	`muãx_u∆ock
(&
buf
->
muãx
);

742 
ªt
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
Àn
, 
off£t
,

743 
buf
->
∑ge
, buf->
cou¡
);

745 
out
:

746  
ªt
;

747 
	}
}

749 
	$debug_˛o£
(
öode
 *öode, 
fûe
 *file)

751 
debug_buf„r
 *
buf
 = 
fûe
->
¥iv©e_d©a
;

753 i‡(
buf
) {

754 i‡(
buf
->
∑ge
)

755 
	`‰ì_∑ge
(()
buf
->
∑ge
);

756 
	`k‰ì
(
buf
);

760 
	}
}

762 
	$debug_async_›í
(
öode
 *öode, 
fûe
 *file)

764 
fûe
->
¥iv©e_d©a
 = 
	`Æloc_buf„r
(
öode
->
i_¥iv©e
, 
fûl_async_buf„r
);

766  
fûe
->
¥iv©e_d©a
 ? 0 : -
ENOMEM
;

767 
	}
}

769 
	$debug_≥riodic_›í
(
öode
 *öode, 
fûe
 *file)

771 
fûe
->
¥iv©e_d©a
 = 
	`Æloc_buf„r
(
öode
->
i_¥iv©e
,

772 
fûl_≥riodic_buf„r
);

774  
fûe
->
¥iv©e_d©a
 ? 0 : -
ENOMEM
;

775 
	}
}

777 
	$debug_ªgi°îs_›í
(
öode
 *öode, 
fûe
 *file)

779 
fûe
->
¥iv©e_d©a
 = 
	`Æloc_buf„r
(
öode
->
i_¥iv©e
,

780 
fûl_ªgi°îs_buf„r
);

782  
fûe
->
¥iv©e_d©a
 ? 0 : -
ENOMEM
;

783 
	}
}

785 
ölöe
 
	$¸óã_debug_fûes
(
admhcd
 *
ahcd
)

787 
usb_bus
 *
bus
 = &
	`admhcd_to_hcd
(
ahcd
)->
£lf
;

789 
ahcd
->
debug_dú
 = 
	`debugfs_¸óã_dú
(
bus
->
bus_«me
, 
admhc_debug_roŸ
);

790 i‡(!
ahcd
->
debug_dú
)

791 
dú_îr‹
;

793 
ahcd
->
debug_async
 = 
	`debugfs_¸óã_fûe
("async", 
S_IRUGO
,

794 
ahcd
->
debug_dú
,áhcd,

795 &
debug_async_f›s
);

796 i‡(!
ahcd
->
debug_async
)

797 
async_îr‹
;

799 
ahcd
->
debug_≥riodic
 = 
	`debugfs_¸óã_fûe
("≥riodic", 
S_IRUGO
,

800 
ahcd
->
debug_dú
,áhcd,

801 &
debug_≥riodic_f›s
);

802 i‡(!
ahcd
->
debug_≥riodic
)

803 
≥riodic_îr‹
;

805 
ahcd
->
debug_ªgi°îs
 = 
	`debugfs_¸óã_fûe
("ªgi°îs", 
S_IRUGO
,

806 
ahcd
->
debug_dú
,áhcd,

807 &
debug_ªgi°îs_f›s
);

808 i‡(!
ahcd
->
debug_ªgi°îs
)

809 
ªgi°îs_îr‹
;

811 
	`admhc_dbg
(
ahcd
, "created debug files\n");

814 
ªgi°îs_îr‹
:

815 
	`debugfs_ªmove
(
ahcd
->
debug_≥riodic
);

816 
≥riodic_îr‹
:

817 
	`debugfs_ªmove
(
ahcd
->
debug_async
);

818 
async_îr‹
:

819 
	`debugfs_ªmove
(
ahcd
->
debug_dú
);

820 
dú_îr‹
:

821 
ahcd
->
debug_≥riodic
 = 
NULL
;

822 
ahcd
->
debug_async
 = 
NULL
;

823 
ahcd
->
debug_dú
 = 
NULL
;

824 
	}
}

826 
ölöe
 
	$ªmove_debug_fûes
(
admhcd
 *
ahcd
)

828 
	`debugfs_ªmove
(
ahcd
->
debug_ªgi°îs
);

829 
	`debugfs_ªmove
(
ahcd
->
debug_≥riodic
);

830 
	`debugfs_ªmove
(
ahcd
->
debug_async
);

831 
	`debugfs_ªmove
(
ahcd
->
debug_dú
);

832 
	}
}

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-drv.c

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/sig«l.h
>

28 
	~<asm/boŸöfo.h
>

29 
	~<asm/mach-adm5120/adm5120_defs.h
>

31 #ifde‡
DEBUG


32 
	#HCD_DBG
(
f
, 
a
...Ë
	`¥ötk
(
KERN_DEBUG
 "%s: " f, 
hcd_«me
, ##á)

	)

34 
	#HCD_DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

36 
	#HCD_ERR
(
f
, 
a
...Ë
	`¥ötk
(
KERN_ERR
 "%s: " f, 
hcd_«me
, ##á)

	)

37 
	#HCD_INFO
(
f
, 
a
...Ë
	`¥ötk
(
KERN_INFO
 "%s: " f, 
hcd_«me
, ##á)

	)

41 
	$admhc_adm5120_¥obe
(c⁄° 
hc_drivî
 *
drivî
,

42 
∂©f‹m_devi˚
 *
dev
)

44 
ªtvÆ
;

45 
usb_hcd
 *
hcd
;

46 
úq
;

47 
ªsour˚
 *
ªgs
;

50 
ªgs
 = 
	`∂©f‹m_gë_ªsour˚
(
dev
, 
IORESOURCE_MEM
, 0);

51 i‡(!
ªgs
) {

52 
	`HCD_DBG
("no IOMEMÑesource found\n");

53  -
ENODEV
;

56 
úq
 = 
	`∂©f‹m_gë_úq
(
dev
, 0);

57 i‡(
úq
 < 0) {

58 
	`HCD_DBG
("no IRQÑesource found\n");

59  -
ENODEV
;

62 
hcd
 = 
	`usb_¸óã_hcd
(
drivî
, &
dev
->dev, "ADM5120");

63 i‡(!
hcd
)

64  -
ENOMEM
;

66 
hcd
->
r§c_°¨t
 = 
ªgs
->
°¨t
;

67 
hcd
->
r§c_Àn
 = 
ªgs
->
íd
 -Ñegs->
°¨t
 + 1;

69 i‡(!
	`ªque°_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
, 
hcd_«me
)) {

70 
	`HCD_DBG
("request_mem_region failed\n");

71 
ªtvÆ
 = -
EBUSY
;

72 
îr_dev
;

75 
hcd
->
ªgs
 = 
	`i‹em≠
(hcd->
r§c_°¨t
, hcd->
r§c_Àn
);

76 i‡(!
hcd
->
ªgs
) {

77 
	`HCD_DBG
("ioremap failed\n");

78 
ªtvÆ
 = -
ENOMEM
;

79 
îr_mem
;

82 
	`admhc_hcd_öô
(
	`hcd_to_admhcd
(
hcd
));

84 
ªtvÆ
 = 
	`usb_add_hcd
(
hcd
, 
úq
, 0);

85 i‡(
ªtvÆ
)

86 
îr_io
;

90 
îr_io
:

91 
	`iounm≠
(
hcd
->
ªgs
);

92 
îr_mem
:

93 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

94 
îr_dev
:

95 
	`usb_put_hcd
(
hcd
);

96  
ªtvÆ
;

97 
	}
}

103 
	$admhc_adm5120_ªmove
(
usb_hcd
 *
hcd
,

104 
∂©f‹m_devi˚
 *
dev
)

106 
	`usb_ªmove_hcd
(
hcd
);

107 
	`iounm≠
(
hcd
->
ªgs
);

108 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

109 
	`usb_put_hcd
(
hcd
);

110 
	}
}

112 
	$admhc_adm5120_°¨t
(
usb_hcd
 *
hcd
)

114 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

115 
ªt
;

117 
ªt
 = 
	`admhc_öô
(
ahcd
);

118 i‡(
ªt
 < 0) {

119 
	`HCD_ERR
("u«bÀÅÿöô %s\n", 
hcd
->
£lf
.
bus_«me
);

120 
îr
;

123 
ªt
 = 
	`admhc_run
(
ahcd
);

124 i‡(
ªt
 < 0) {

125 
	`HCD_ERR
("u«bÀÅÿru¿%s\n", 
hcd
->
£lf
.
bus_«me
);

126 
îr_°›
;

131 
îr_°›
:

132 
	`admhc_°›
(
hcd
);

133 
îr
:

134  
ªt
;

135 
	}
}

137 c⁄° 
hc_drivî
 
	gadm5120_hc_drivî
 = {

138 .
des¸ùti⁄
 = 
hcd_«me
,

139 .
	g¥odu˘_desc
 = "ADM5120 built-in USB 1.1 Host Controller",

140 .
	ghcd_¥iv_size
 = (
admhcd
),

145 .
	gúq
 = 
admhc_úq
,

146 .
	gÊags
 = 
HCD_USB11
 | 
HCD_MEMORY
,

151 .
	g°¨t
 = 
admhc_adm5120_°¨t
,

152 .
	g°›
 = 
admhc_°›
,

153 .
	gshutdown
 = 
admhc_shutdown
,

158 .
	gurb_íqueue
 = 
admhc_urb_íqueue
,

159 .
	gurb_dequeue
 = 
admhc_urb_dequeue
,

160 .
	gídpoöt_dißbÀ
 = 
admhc_ídpoöt_dißbÀ
,

165 .
	ggë_‰ame_numbî
 = 
admhc_gë_‰ame_numbî
,

170 .
	ghub_°©us_d©a
 = 
admhc_hub_°©us_d©a
,

171 .
	ghub_c⁄åﬁ
 = 
admhc_hub_c⁄åﬁ
,

172 #ifde‡
CONFIG_PM


173 .
	gbus_su•íd
 = 
admhc_bus_su•íd
,

174 .
	gbus_ªsume
 = 
admhc_bus_ªsume
,

176 .
	g°¨t_p‹t_ª£t
 = 
admhc_°¨t_p‹t_ª£t
,

179 
	$usb_hcd_adm5120_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

181 
ªt
;

183 
ªt
 = 
	`admhc_adm5120_¥obe
(&
adm5120_hc_drivî
, 
pdev
);

185  
ªt
;

186 
	}
}

188 
	$usb_hcd_adm5120_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

190 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

192 
	`admhc_adm5120_ªmove
(
hcd
, 
pdev
);

195 
	}
}

197 #ifde‡
CONFIG_PM


199 
	$usb_hcd_adm5120_su•íd
(
∂©f‹m_devi˚
 *
dev
)

201 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

204 
	}
}

206 
	$usb_hcd_adm5120_ªsume
(
∂©f‹m_devi˚
 *
dev
)

208 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

211 
	}
}

213 
	#usb_hcd_adm5120_su•íd
 
NULL


	)

214 
	#usb_hcd_adm5120_ªsume
 
NULL


	)

217 
∂©f‹m_drivî
 
	gusb_hcd_adm5120_drivî
 = {

218 .
¥obe
 = 
usb_hcd_adm5120_¥obe
,

219 .
	gªmove
 = 
usb_hcd_adm5120_ªmove
,

220 .
	gshutdown
 = 
usb_hcd_∂©f‹m_shutdown
,

221 .
	gsu•íd
 = 
usb_hcd_adm5120_su•íd
,

222 .
	gªsume
 = 
usb_hcd_adm5120_ªsume
,

223 .
	gdrivî
 = {

224 .
«me
 = "adm5120-hcd",

225 .
	gow√r
 = 
THIS_MODULE
,

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-hcd.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/moduÀ∑øm.h
>

23 
	~<löux/pci.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/dñay.h
>

26 
	~<löux/i›‹t.h
>

27 
	~<löux/sched.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/öô.h
>

31 
	~<löux/timî.h
>

32 
	~<löux/li°.h
>

33 
	~<löux/usb.h
>

34 
	~<löux/usb/Ÿg.h
>

35 
	~<löux/usb/hcd.h
>

36 
	~<löux/dma-m≠pög.h
>

37 
	~<löux/dm≠oﬁ.h
>

38 
	~<löux/debugfs.h
>

39 
	~<löux/io.h
>

41 
	~<asm/úq.h
>

42 
	~<asm/u«lig√d.h
>

43 
	~<asm/byã‹dî.h
>

45 
	#DRIVER_VERSION
 "0.27.0"

	)

46 
	#DRIVER_AUTHOR
 "Gab‹ Juho†<juhosg@›íwπ.‹g>"

	)

47 
	#DRIVER_DESC
 "ADMãk USB 1.1 Ho° C⁄åﬁÀ∏Drivî"

	)

51 #unde‡
ADMHC_VERBOSE_DEBUG


54 
	#OHCI_CONTROL_INIT
 
OHCI_CTRL_CBSR


	)

56 
	#ADMHC_INTR_INIT
 \

57 (
ADMHC_INTR_MIE
 | 
ADMHC_INTR_INSM
 | 
ADMHC_INTR_FATI
 \

58 | 
ADMHC_INTR_RESI
 | 
ADMHC_INTR_TDC
 | 
ADMHC_INTR_BABI
)

	)

62 c⁄° 
	ghcd_«me
[] = "admhc-hcd";

64 
	#STATECHANGE_DELAY
 
	`m£cs_to_jiffõs
(300)

	)

66 
	~"adm5120.h
"

68 
admhc_dump
(
admhcd
 *
ahcd
, 
vîbo£
);

69 
admhc_öô
(
admhcd
 *
ahcd
);

70 
admhc_°›
(
usb_hcd
 *
hcd
);

72 
	~"adm5120-dbg.c
"

73 
	~"adm5120-mem.c
"

74 
	~"adm5120-pm.c
"

75 
	~"adm5120-hub.c
"

76 
	~"adm5120-q.c
"

83 
	$admhc_urb_íqueue
(
usb_hcd
 *
hcd
, 
urb
 *urb,

84 
gÂ_t
 
mem_Êags
)

86 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

87 
ed
 *ed;

88 
urb_¥iv
 *urb_priv;

89 
pùe
 = 
urb
->pipe;

90 
td_˙t
 = 0;

91 
Êags
;

92 
ªt
 = 0;

94 #ifde‡
ADMHC_VERBOSE_DEBUG


95 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

96 
	`urb_¥öt
(
ahcd
, 
urb
, "ENQEUE", 
	`usb_pùeö
(
pùe
), -
EINPROGRESS
);

97 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

101 
ed
 = 
	`ed_gë
(
ahcd
, 
urb
->
ï
, urb->
dev
, 
pùe
, urb->
öãrvÆ
);

102 i‡(!
ed
)

103  -
ENOMEM
;

106 
ed
->
ty≥
) {

107 
PIPE_CONTROL
:

108 i‡(
urb
->
å™s„r_buf„r_Àngth
 > 
TD_DATALEN_MAX
)

110  -
EMSGSIZE
;

113 
td_˙t
 = 2;

115 
PIPE_BULK
:

117 
td_˙t
 +
urb
->
å™s„r_buf„r_Àngth
 / 
TD_DATALEN_MAX
;

119 i‡((
urb
->
å™s„r_buf„r_Àngth
 % 
TD_DATALEN_MAX
) != 0)

120 
td_˙t
++;

122 i‡(
td_˙t
 == 0)

123 
td_˙t
++;

124 i‡((
urb
->
å™s„r_Êags
 & 
URB_ZERO_PACKET
) != 0

125 && (
urb
->
å™s„r_buf„r_Àngth


126 % 
	`usb_max∑ckë
(
urb
->
dev
, 
pùe
,

127 
	`usb_pùeout
(
pùe
))) == 0)

128 
td_˙t
++;

130 
PIPE_INTERRUPT
:

136 
td_˙t
 = 1;

138 
PIPE_ISOCHRONOUS
:

140 
td_˙t
 = 
urb
->
numbî_of_∑ckës
;

144 
urb_¥iv
 = 
	`urb_¥iv_Æloc
(
ahcd
, 
td_˙t
, 
mem_Êags
);

145 i‡(!
urb_¥iv
)

146  -
ENOMEM
;

148 
urb_¥iv
->
ed
 =Éd;

150 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

152 i‡(!
	`HCD_HW_ACCESSIBLE
(
hcd
)) {

153 
ªt
 = -
ENODEV
;

154 
Áû
;

156 i‡(!
	`HC_IS_RUNNING
(
hcd
->
°©e
)) {

157 
ªt
 = -
ENODEV
;

158 
Áû
;

161 
ªt
 = 
	`usb_hcd_lök_urb_to_ï
(
hcd
, 
urb
);

162 i‡(
ªt
)

163 
Áû
;

166 i‡(
ed
->
°©e
 =
ED_IDLE
) {

167 
ªt
 = 
	`ed_scheduÀ
(
ahcd
, 
ed
);

168 i‡(
ªt
 < 0) {

169 
	`usb_hcd_u∆ök_urb_‰om_ï
(
hcd
, 
urb
);

170 
Áû
;

172 i‡(
ed
->
ty≥
 =
PIPE_ISOCHRONOUS
) {

173 
u16
 
‰ame
 = 
	`admhc_‰ame_no
(
ahcd
);

176 
‰ame
 +
	`max_t
 (
u16
, 8, 
ed
->
öãrvÆ
);

177 
‰ame
 &~(
ed
->
öãrvÆ
 - 1);

178 
‰ame
 |
ed
->
bønch
;

179 
urb
->
°¨t_‰ame
 = 
‰ame
;

185 } i‡(
ed
->
ty≥
 =
PIPE_ISOCHRONOUS
)

186 
urb
->
°¨t_‰ame
 = 
ed
->
œ°_iso
 +Éd->
öãrvÆ
;

192 
urb
->
h˝riv
 = 
urb_¥iv
;

193 
	`td_submô_urb
(
ahcd
, 
urb
);

195 #ifde‡
ADMHC_VERBOSE_DEBUG


196 
	`admhc_dump_ed
(
ahcd
, "admhc_urb_íqueue", 
urb_¥iv
->
ed
, 1);

199 
Áû
:

200 i‡(
ªt
)

201 
	`urb_¥iv_‰ì
(
ahcd
, 
urb_¥iv
);

203 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

204  
ªt
;

205 
	}
}

213 
	$admhc_urb_dequeue
(
usb_hcd
 *
hcd
, 
urb
 *urb,

214 
°©us
)

216 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

217 
Êags
;

218 
ªt
;

220 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

222 #ifde‡
ADMHC_VERBOSE_DEBUG


223 
	`urb_¥öt
(
ahcd
, 
urb
, "DEQUEUE", 1, 
°©us
);

225 
ªt
 = 
	`usb_hcd_check_u∆ök_urb
(
hcd
, 
urb
, 
°©us
);

226 i‡(
ªt
) {

229 } i‡(
	`HC_IS_RUNNING
(
hcd
->
°©e
)) {

230 
urb_¥iv
 *urb_priv;

236 
urb_¥iv
 = 
urb
->
h˝riv
;

237 i‡(
urb_¥iv
) {

238 i‡(
urb_¥iv
->
ed
->
°©e
 =
ED_OPER
)

239 
	`°¨t_ed_u∆ök
(
ahcd
, 
urb_¥iv
->
ed
);

246 i‡(
urb
->
h˝riv
)

247 
	`föish_urb
(
ahcd
, 
urb
, 
°©us
);

249 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

251  
ªt
;

252 
	}
}

260 
	$admhc_ídpoöt_dißbÀ
(
usb_hcd
 *
hcd
,

261 
usb_ho°_ídpoöt
 *
ï
)

263 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

264 
Êags
;

265 
ed
 *ed = 
ï
->
h˝riv
;

266 
limô
 = 1000;

271 i‡(!
ed
)

274 #ifde‡
ADMHC_VERBOSE_DEBUG


275 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

276 
	`admhc_dump_ed
(
ahcd
, "EP-DISABLE", 
ed
, 1);

277 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

280 
ªsˇn
:

281 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

283 i‡(!
	`HC_IS_RUNNING
(
hcd
->
°©e
)) {

284 
ßnôize
:

285 
ed
->
°©e
 = 
ED_IDLE
;

286 
	`föish_u∆öks
(
ahcd
, 0);

289 
ed
->
°©e
) {

290 
ED_UNLINK
:

292 i‡(
limô
-- == 0) {

293 
	`admhc_w¨n
(
ahcd
, "IRQ INTR_SOFIÜossage\n");

294 
ßnôize
;

296 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

297 
	`scheduÀ_timeout_unöãºu±ibÀ
(1);

298 
ªsˇn
;

299 
ED_IDLE
:

300 i‡(
	`li°_em±y
(&
ed
->
td_li°
)) {

301 
	`td_‰ì
(
ahcd
, 
ed
->
dummy
);

302 
	`ed_‰ì
(
ahcd
, 
ed
);

310 
	`admhc_îr
(
ahcd
, "leakÉd %p (#%02x) state %d%s\n",

311 
ed
, 
ï
->
desc
.
bEndpoötAddªss
,Éd->
°©e
,

312 
	`li°_em±y
(&
ed
->
td_li°
) ? "" : " (hasÅds)");

313 
	`td_‰ì
(
ahcd
, 
ed
->
dummy
);

317 
ï
->
h˝riv
 = 
NULL
;

319 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

320 
	}
}

322 
	$admhc_gë_‰ame_numbî
(
usb_hcd
 *
hcd
)

324 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

326  
	`admhc_‰ame_no
(
ahcd
);

327 
	}
}

329 
	$admhc_usb_ª£t
(
admhcd
 *
ahcd
)

332 
ahcd
->
hc_c⁄åﬁ
 = 
	`admhc_ªadl
◊hcd, &ahcd->
ªgs
->
c⁄åﬁ
);

333 
ahcd
->
hc_c⁄åﬁ
 &
OHCI_CTRL_RWC
;

334 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->
ªgs
->
c⁄åﬁ
);

337 
ahcd
->
ho°_c⁄åﬁ
 = 
ADMHC_BUSS_RESET
;

338 
	`admhc_wrôñ
(
ahcd
,áhcd->
ho°_c⁄åﬁ
, &ahcd->
ªgs
->host_control);

340 
	}
}

347 
	$admhc_shutdown
(
usb_hcd
 *
hcd
)

349 
admhcd
 *
ahcd
;

351 
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

352 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_MIE
);

353 
	`admhc_dma_dißbÀ
(
ahcd
);

354 
	`admhc_usb_ª£t
(
ahcd
);

356 
	`admhc_wrôñ_Êush
(
ahcd
);

357 
	}
}

363 
	$admhc_eds_˛ónup
(
admhcd
 *
ahcd
)

365 i‡(
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
]) {

366 
	`ed_‰ì
(
ahcd
,áhcd->
ed_èûs
[
PIPE_INTERRUPT
]);

367 
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
] = 
NULL
;

370 i‡(
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
]) {

371 
	`ed_‰ì
(
ahcd
,áhcd->
ed_èûs
[
PIPE_ISOCHRONOUS
]);

372 
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
] = 
NULL
;

375 i‡(
ahcd
->
ed_èûs
[
PIPE_CONTROL
]) {

376 
	`ed_‰ì
(
ahcd
,áhcd->
ed_èûs
[
PIPE_CONTROL
]);

377 
ahcd
->
ed_èûs
[
PIPE_CONTROL
] = 
NULL
;

380 i‡(
ahcd
->
ed_èûs
[
PIPE_BULK
]) {

381 
	`ed_‰ì
(
ahcd
,áhcd->
ed_èûs
[
PIPE_BULK
]);

382 
ahcd
->
ed_èûs
[
PIPE_BULK
] = 
NULL
;

385 
ahcd
->
ed_hód
 = 
NULL
;

386 
	}
}

388 
	#ED_DUMMY_INFO
 (
ED_SPEED_FULL
 | 
ED_SKIP
)

	)

390 
	$admhc_eds_öô
(
admhcd
 *
ahcd
)

392 
ed
 *ed;

394 
ed
 = 
	`ed_¸óã
(
ahcd
, 
PIPE_INTERRUPT
, 
ED_DUMMY_INFO
);

395 i‡(!
ed
)

396 
îr
;

398 
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
] = 
ed
;

400 
ed
 = 
	`ed_¸óã
(
ahcd
, 
PIPE_ISOCHRONOUS
, 
ED_DUMMY_INFO
);

401 i‡(!
ed
)

402 
îr
;

404 
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
] = 
ed
;

405 
ed
->
ed_¥ev
 = 
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
];

406 
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
]->
ed_√xt
 = 
ed
;

407 
ahcd
->
ed_èûs
[
PIPE_INTERRUPT
]->
hwNextED
 = 
	`˝u_to_hc32
◊hcd, 
ed
->
dma
);

409 
ed
 = 
	`ed_¸óã
(
ahcd
, 
PIPE_CONTROL
, 
ED_DUMMY_INFO
);

410 i‡(!
ed
)

411 
îr
;

413 
ahcd
->
ed_èûs
[
PIPE_CONTROL
] = 
ed
;

414 
ed
->
ed_¥ev
 = 
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
];

415 
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
]->
ed_√xt
 = 
ed
;

416 
ahcd
->
ed_èûs
[
PIPE_ISOCHRONOUS
]->
hwNextED
 = 
	`˝u_to_hc32
◊hcd, 
ed
->
dma
);

418 
ed
 = 
	`ed_¸óã
(
ahcd
, 
PIPE_BULK
, 
ED_DUMMY_INFO
);

419 i‡(!
ed
)

420 
îr
;

422 
ahcd
->
ed_èûs
[
PIPE_BULK
] = 
ed
;

423 
ed
->
ed_¥ev
 = 
ahcd
->
ed_èûs
[
PIPE_CONTROL
];

424 
ahcd
->
ed_èûs
[
PIPE_CONTROL
]->
ed_√xt
 = 
ed
;

425 
ahcd
->
ed_èûs
[
PIPE_CONTROL
]->
hwNextED
 = 
	`˝u_to_hc32
◊hcd, 
ed
->
dma
);

427 
ahcd
->
ed_hód
 =áhcd->
ed_èûs
[
PIPE_INTERRUPT
];

429 #ifde‡
ADMHC_VERBOSE_DEBUG


430 
	`admhc_dump_ed
(
ahcd
, "ed i¡r",áhcd->
ed_èûs
[
PIPE_INTERRUPT
], 1);

431 
	`admhc_dump_ed
(
ahcd
, "ed isoc",áhcd->
ed_èûs
[
PIPE_ISOCHRONOUS
], 1);

432 
	`admhc_dump_ed
(
ahcd
, "ed cål",áhcd->
ed_èûs
[
PIPE_CONTROL
], 1);

433 
	`admhc_dump_ed
(
ahcd
, "ed bulk",áhcd->
ed_èûs
[
PIPE_BULK
], 1);

438 
îr
:

439 
	`admhc_eds_˛ónup
(
ahcd
);

440  -
ENOMEM
;

441 
	}
}

445 
	$admhc_öô
(
admhcd
 *
ahcd
)

447 
usb_hcd
 *
hcd
 = 
	`admhcd_to_hcd
(
ahcd
);

448 
ªt
;

450 
	`admhc_dißbÀ
(
ahcd
);

451 
ahcd
->
ªgs
 = 
hcd
->regs;

454 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_MIE
);

457 i‡(
ahcd
->
num_p‹ts
 == 0)

458 
ahcd
->
num_p‹ts
 = 
	`admhc_ªad_rhdesc
◊hcdË& 
ADMHC_RH_NUMP
;

460 
ªt
 = 
	`admhc_mem_öô
(
ahcd
);

461 i‡(
ªt
)

462 
îr
;

465 
ªt
 = 
	`admhc_eds_öô
(
ahcd
);

466 i‡(
ªt
)

467 
îr
;

469 
	`¸óã_debug_fûes
(
ahcd
);

473 
îr
:

474 
	`admhc_°›
(
hcd
);

475  
ªt
;

476 
	}
}

484 
	$admhc_run
(
admhcd
 *
ahcd
)

486 
u32
 
vÆ
;

487 
fú°
 = 
ahcd
->
fmöãrvÆ
 == 0;

488 
usb_hcd
 *
hcd
 = 
	`admhcd_to_hcd
(
ahcd
);

490 
	`admhc_dißbÀ
(
ahcd
);

493 i‡(
fú°
) {

494 
vÆ
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
fmöãrvÆ
);

495 
ahcd
->
fmöãrvÆ
 = 
vÆ
 & 
ADMHC_SFI_FI_MASK
;

496 i‡(
ahcd
->
fmöãrvÆ
 !
FI
)

497 
	`admhc_dbg
(
ahcd
, "fminterval delta %d\n",

498 
ahcd
->
fmöãrvÆ
 - 
FI
);

499 
ahcd
->
fmöãrvÆ
 |=

500 (
	`FSLDP
(
ahcd
->
fmöãrvÆ
Ë<< 
ADMHC_SFI_FSLDP_SHIFT
);

511 i‡((
ahcd
->
hc_c⁄åﬁ
 & 
OHCI_CTRL_RWC
) != 0)

512 
	`devi˚_£t_wakeup_ˇ∑bÀ
(
hcd
->
£lf
.
c⁄åﬁÀr
, 1);

515 
ahcd
->
ho°_c⁄åﬁ
 & 
ADMHC_HC_BUSS
) {

516 
ADMHC_BUSS_OPER
:

517 
vÆ
 = 0;

519 
ADMHC_BUSS_SUSPEND
:

521 
ADMHC_BUSS_RESUME
:

522 
ahcd
->
ho°_c⁄åﬁ
 = 
ADMHC_BUSS_RESUME
;

523 
vÆ
 = 10 ;

527 
ahcd
->
ho°_c⁄åﬁ
 = 
ADMHC_BUSS_RESET
;

528 
vÆ
 = 50 ;

531 
	`admhc_wrôñ
(
ahcd
,áhcd->
ho°_c⁄åﬁ
, &ahcd->
ªgs
->host_control);

534 
	`admhc_wrôñ_Êush
(
ahcd
);

536 
	`m¶ìp
(
vÆ
);

537 
vÆ
 = 
	`admhc_ªad_rhdesc
(
ahcd
);

538 i‡(!(
vÆ
 & 
ADMHC_RH_NPS
)) {

540 
vÆ
 = 0; vÆ < 
ahcd
->
num_p‹ts
; val++)

541 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
vÆ
, 
ADMHC_PS_CPP
);

544 
	`admhc_wrôñ_Êush
(
ahcd
);

547 
	`•ö_lock_úq
(&
ahcd
->
lock
);

549 
	`admhc_wrôñ
(
ahcd
, 
ADMHC_CTRL_SR
, &ahcd->
ªgs
->
gíc⁄åﬁ
);

550 
vÆ
 = 30;

551 (
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
gíc⁄åﬁ
Ë& 
ADMHC_CTRL_SR
) != 0) {

552 i‡(--
vÆ
 == 0) {

553 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

554 
	`admhc_îr
(
ahcd
, "USB HCÑesetÅimed out!\n");

557 
	`udñay
(1);

561 
	`admhc_wrôñ
(
ahcd
, 
ADMHC_CTRL_UHFE
, &ahcd->
ªgs
->
gíc⁄åﬁ
);

564 
	`admhc_wrôñ
(
ahcd
, (
u32
Ôhcd->
ed_hód
->
dma
, &ahcd->
ªgs
->
ho°hód
);

566 
	`≥riodic_ªöô
(
ahcd
);

569 
	`£t_bô
(
HCD_FLAG_POLL_RH
, &
hcd
->
Êags
);

570 
hcd
->
u£s_√w_pﬁlög
 = 1;

574 
	`admhc_wrôñ
(
ahcd
, 
RH_HS_DRWE
, &ahcd->
ªgs
->
roŸhub
.
°©us
);

580 
	`admhc_öå_ack
(
ahcd
, ~0);

581 
	`admhc_öå_íabÀ
(
ahcd
, 
ADMHC_INTR_INIT
);

583 
	`admhc_wrôñ
(
ahcd
, 
ADMHC_RH_NPS
 | 
ADMHC_RH_LPSC
, &ahcd->
ªgs
->
rhdesc
);

586 
	`admhc_wrôñ_Êush
(
ahcd
);

589 
ahcd
->
ho°_c⁄åﬁ
 = 
ADMHC_BUSS_OPER
;

590 
	`admhc_wrôñ
(
ahcd
,áhcd->
ho°_c⁄åﬁ
, &ahcd->
ªgs
->host_control);

592 
vÆ
 = 20;

593 (
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
)

594 & 
ADMHC_HC_BUSS
Ë!
ADMHC_BUSS_OPER
) {

595 i‡(--
vÆ
 == 0) {

596 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

597 
	`admhc_îr
(
ahcd
, "unableÅo setup operational mode!\n");

600 
	`mdñay
(1);

603 
hcd
->
°©e
 = 
HC_STATE_RUNNING
;

605 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 + 
STATECHANGE_DELAY
;

609 
	`admhc_dma_íabÀ
(
ahcd
);

611 
vÆ
 = 200;

612 (
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
)

613 & 
ADMHC_HC_DMAE
) != ADMHC_HC_DMAE) {

614 i‡(--
vÆ
 == 0) {

615 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

616 
	`admhc_îr
(
ahcd
, "unableÅoÉnable DMA!\n");

617 
	`admhc_dump
(
ahcd
, 1);

620 
	`mdñay
(1);

625 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

627 
	`mdñay
(
ADMHC_POTPGT
);

630 
	}
}

636 
úqªtu∫_t
 
	$admhc_úq
(
usb_hcd
 *
hcd
)

638 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

639 
admhcd_ªgs
 
__iomem
 *
ªgs
 = 
ahcd
->regs;

640 
u32
 
öts
;

642 
öts
 = 
	`admhc_ªadl
(
ahcd
, &
ªgs
->
öt_°©us
);

643 i‡((
öts
 & 
ADMHC_INTR_INTA
) == 0) {

645  
IRQ_NONE
;

648 
öts
 &
	`admhc_ªadl
(
ahcd
, &
ªgs
->
öt_íabÀ
);

650 i‡(
öts
 & 
ADMHC_INTR_FATI
) {

652 
	`admhc_dißbÀ
(
ahcd
);

653 
	`admhc_îr
(
ahcd
, "Fatal Error, controller disabled\n");

654 
	`admhc_dump
(
ahcd
, 1);

655 
	`admhc_usb_ª£t
(
ahcd
);

658 i‡(
öts
 & 
ADMHC_INTR_BABI
) {

659 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_BABI
);

660 
	`admhc_öå_ack
(
ahcd
, 
ADMHC_INTR_BABI
);

661 
	`admhc_îr
(
ahcd
, "Babble Detected\n");

664 i‡(
öts
 & 
ADMHC_INTR_INSM
) {

665 
	`admhc_vdbg
(
ahcd
, "Root Hub Status Change\n");

666 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 + 
STATECHANGE_DELAY
;

667 
	`admhc_öå_ack
(
ahcd
, 
ADMHC_INTR_RESI
 | 
ADMHC_INTR_INSM
);

677 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_INSM
);

678 
	`usb_hcd_pﬁl_rh_°©us
(
hcd
);

679 } i‡(
öts
 & 
ADMHC_INTR_RESI
) {

684 
	`admhc_vdbg
(
ahcd
, "Resume Detect\n");

685 
	`admhc_öå_ack
(
ahcd
, 
ADMHC_INTR_RESI
);

686 
	`£t_bô
(
HCD_FLAG_POLL_RH
, &
hcd
->
Êags
);

687 i‡(
ahcd
->
auto°›
) {

688 
	`•ö_lock
(&
ahcd
->
lock
);

689 
	`admhc_rh_ªsume
(
ahcd
);

690 
	`•ö_u∆ock
(&
ahcd
->
lock
);

692 
	`usb_hcd_ªsume_roŸ_hub
(
hcd
);

695 i‡(
öts
 & 
ADMHC_INTR_TDC
) {

696 
	`admhc_vdbg
(
ahcd
, "Transfer Descriptor Complete\n");

697 
	`admhc_öå_ack
(
ahcd
, 
ADMHC_INTR_TDC
);

698 i‡(
	`HC_IS_RUNNING
(
hcd
->
°©e
))

699 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_TDC
);

700 
	`•ö_lock
(&
ahcd
->
lock
);

701 
	`admhc_td_com∂ëe
(
ahcd
);

702 
	`•ö_u∆ock
(&
ahcd
->
lock
);

703 i‡(
	`HC_IS_RUNNING
(
hcd
->
°©e
))

704 
	`admhc_öå_íabÀ
(
ahcd
, 
ADMHC_INTR_TDC
);

707 i‡(
öts
 & 
ADMHC_INTR_SO
) {

709 
	`admhc_vdbg
(
ahcd
, "Schedule Overrun\n");

713 
	`•ö_lock
(&
ahcd
->
lock
);

714 i‡(
ahcd
->
ed_rm_li°
)

715 
	`föish_u∆öks
(
ahcd
, 
	`admhc_‰ame_no
(ahcd));

717 i‡((
öts
 & 
ADMHC_INTR_SOFI
Ë!0 && !
ahcd
->
ed_rm_li°


718 && 
	`HC_IS_RUNNING
(
hcd
->
°©e
))

719 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_SOFI
);

720 
	`•ö_u∆ock
(&
ahcd
->
lock
);

722 i‡(
öts
 & 
ADMHC_INTR_SOFI
) {

723 
	`admhc_vdbg
(
ahcd
, "Start Of Frame\n");

724 
	`•ö_lock
(&
ahcd
->
lock
);

727 
	`föish_u∆öks
(
ahcd
, 
	`admhc_‰amío
(ahcd));

732 i‡((
ahcd
->
ed_rm_li°
 =
NULL
) ||

733 
	`HC_IS_RUNNING
(
hcd
->
°©e
) == 0)

738 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_SOFI
);

740 
	`•ö_u∆ock
(&
ahcd
->
lock
);

744 i‡(
	`HC_IS_RUNNING
(
hcd
->
°©e
)) {

745 
	`admhc_öå_ack
(
ahcd
, 
öts
);

746 
	`admhc_öå_íabÀ
(
ahcd
, 
ADMHC_INTR_MIE
);

747 
	`admhc_wrôñ_Êush
(
ahcd
);

750  
IRQ_HANDLED
;

751 
	}
}

755 
	$admhc_°›
(
usb_hcd
 *
hcd
)

757 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

759 
	`admhc_dump
(
ahcd
, 1);

761 
	`Êush_scheduÀd_w‹k
();

763 
	`admhc_usb_ª£t
(
ahcd
);

764 
	`admhc_öå_dißbÀ
(
ahcd
, 
ADMHC_INTR_MIE
);

766 
	`‰ì_úq
(
hcd
->
úq
, hcd);

767 
hcd
->
úq
 = -1;

769 
	`ªmove_debug_fûes
(
ahcd
);

770 
	`admhc_eds_˛ónup
(
ahcd
);

771 
	`admhc_mem_˛ónup
(
ahcd
);

772 
	}
}

776 #ifde‡
CONFIG_ADM5120


777 
	~"adm5120-drv.c
"

778 
	#PLATFORM_DRIVER
 
usb_hcd_adm5120_drivî


	)

781 #if !
deföed
(
PLATFORM_DRIVER
)

785 
	#DRIVER_INFO
 
DRIVER_DESC
 " vîsi⁄ " 
DRIVER_VERSION


	)

787 
__öô
 
	$admhc_hcd_mod_öô
()

789 
ªt
 = 0;

791 i‡(
	`usb_dißbÀd
())

792  -
ENODEV
;

794 
	`¥_öfo
("%s: " 
DRIVER_INFO
 "\n", 
hcd_«me
);

795 
	`¥_öfo
("%s: block sizes:Éd %ZdÅd %Zd\n", 
hcd_«me
,

796 (
ed
), (
td
));

797 
	`£t_bô
(
USB_OHCI_LOADED
, &
usb_hcds_lﬂded
);

799 #ifde‡
DEBUG


800 
admhc_debug_roŸ
 = 
	`debugfs_¸óã_dú
("admhc", 
usb_debug_roŸ
);

801 i‡(!
admhc_debug_roŸ
) {

802 
ªt
 = -
ENOENT
;

803 
îr‹_debug
;

807 #ifde‡
PLATFORM_DRIVER


808 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
PLATFORM_DRIVER
);

809 i‡(
ªt
 < 0)

810 
îr‹_∂©f‹m
;

813  
ªt
;

815 #ifde‡
PLATFORM_DRIVER


816 
	`∂©f‹m_drivî_uƒegi°î
(&
PLATFORM_DRIVER
);

817 
îr‹_∂©f‹m
:

820 #ifde‡
DEBUG


821 
	`debugfs_ªmove
(
admhc_debug_roŸ
);

822 
admhc_debug_roŸ
 = 
NULL
;

823 
îr‹_debug
:

825 
	`˛ór_bô
(
USB_OHCI_LOADED
, &
usb_hcds_lﬂded
);

826  
ªt
;

827 
	}
}

828 
moduÀ_öô
(
admhc_hcd_mod_öô
);

830 
__exô
 
	$admhc_hcd_mod_exô
()

832 
	`∂©f‹m_drivî_uƒegi°î
(&
PLATFORM_DRIVER
);

833 #ifde‡
DEBUG


834 
	`debugfs_ªmove
(
admhc_debug_roŸ
);

836 
	`˛ór_bô
(
USB_OHCI_LOADED
, &
usb_hcds_lﬂded
);

837 
	}
}

838 
moduÀ_exô
(
admhc_hcd_mod_exô
);

840 
MODULE_AUTHOR
(
DRIVER_AUTHOR
);

841 
MODULE_DESCRIPTION
(
DRIVER_INFO
);

842 
MODULE_VERSION
(
DRIVER_VERSION
);

843 
MODULE_LICENSE
("GPL v2");

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-hub.c

22 
	#dbg_p‹t
(
hc
, 
œbñ
, 
num
, 
vÆue
) \

23 
	`admhc_dbg
(
hc
, \

26 
œbñ
, 
num
, 
vÆue
, \

27 (
vÆue
 & 
ADMHC_PS_PRSC
) ? " PRSC" : "", \

28 (
vÆue
 & 
ADMHC_PS_OCIC
) ? " OCIC" : "", \

29 (
vÆue
 & 
ADMHC_PS_PSSC
) ? " PSSC" : "", \

30 (
vÆue
 & 
ADMHC_PS_PESC
) ? " PESC" : "", \

31 (
vÆue
 & 
ADMHC_PS_CSC
) ? " CSC" : "", \

33 (
vÆue
 & 
ADMHC_PS_LSDA
) ? " LSDA" : "", \

34 (
vÆue
 & 
ADMHC_PS_PPS
) ? " PPS" : "", \

35 (
vÆue
 & 
ADMHC_PS_PRS
) ? " PRS" : "", \

36 (
vÆue
 & 
ADMHC_PS_POCI
) ? " POCI" : "", \

37 (
vÆue
 & 
ADMHC_PS_PSS
) ? " PSS" : "", \

39 (
vÆue
 & 
ADMHC_PS_PES
) ? " PES" : "", \

40 (
vÆue
 & 
ADMHC_PS_CCS
) ? " CCS" : "" \

41 );

	)

43 
	#dbg_p‹t_wrôe
(
hc
, 
œbñ
, 
num
, 
vÆue
) \

44 
	`admhc_dbg
(
hc
, \

47 
œbñ
, 
num
, 
vÆue
, \

48 (
vÆue
 & 
ADMHC_PS_PRSC
) ? " PRSC" : "", \

49 (
vÆue
 & 
ADMHC_PS_OCIC
) ? " OCIC" : "", \

50 (
vÆue
 & 
ADMHC_PS_PSSC
) ? " PSSC" : "", \

51 (
vÆue
 & 
ADMHC_PS_PESC
) ? " PESC" : "", \

52 (
vÆue
 & 
ADMHC_PS_CSC
) ? " CSC" : "", \

54 (
vÆue
 & 
ADMHC_PS_CPP
) ? " CPP" : "", \

55 (
vÆue
 & 
ADMHC_PS_SPP
) ? " SPP" : "", \

56 (
vÆue
 & 
ADMHC_PS_SPR
) ? " SPR" : "", \

57 (
vÆue
 & 
ADMHC_PS_CPS
) ? " CPS" : "", \

58 (
vÆue
 & 
ADMHC_PS_SPS
) ? " SPS" : "", \

60 (
vÆue
 & 
ADMHC_PS_SPE
) ? " SPE" : "", \

61 (
vÆue
 & 
ADMHC_PS_CPE
) ? " CPE" : "" \

62 );

	)

69 
	$admhc_hub_°©us_d©a
(
usb_hcd
 *
hcd
, *
buf
)

71 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

72 
i
, 
ch™ged
 = 0, 
Àngth
 = 1;

73 
™y_c⁄√˘ed
 = 0;

74 
Êags
;

75 
u32
 
°©us
;

77 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

78 i‡(!
	`HCD_HW_ACCESSIBLE
(
hcd
))

79 
d⁄e
;

82 
°©us
 = 
	`admhc_ªad_rhdesc
(
ahcd
);

83 i‡(
°©us
 & (
ADMHC_RH_LPSC
 | 
ADMHC_RH_OCIC
))

84 
buf
[0] = 
ch™ged
 = 1;

86 
buf
[0] = 0;

87 i‡(
ahcd
->
num_p‹ts
 > 7) {

88 
buf
[1] = 0;

89 
Àngth
++;

93 
i
 = 0; i < 
ahcd
->
num_p‹ts
; i++) {

94 
°©us
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
i
);

97 
™y_c⁄√˘ed
 |(
°©us
 & 
ADMHC_PS_CCS
);

99 i‡(
°©us
 & (
ADMHC_PS_CSC
 | 
ADMHC_PS_PESC
 | 
ADMHC_PS_PSSC


100 | 
ADMHC_PS_OCIC
 | 
ADMHC_PS_PRSC
)) {

101 
ch™ged
 = 1;

102 i‡(
i
 < 7)

103 
buf
[0] |1 << (
i
 + 1);

105 
buf
[1] |1 << (
i
 - 7);

109 i‡(
	`admhc_roŸ_hub_°©e_ch™ges
(
ahcd
, 
ch™ged
,

110 
™y_c⁄√˘ed
))

111 
	`£t_bô
(
HCD_FLAG_POLL_RH
, &
hcd
->
Êags
);

113 
	`˛ór_bô
(
HCD_FLAG_POLL_RH
, &
hcd
->
Êags
);

115 
d⁄e
:

116 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

118  
ch™ged
 ? 
Àngth
 : 0;

119 
	}
}

123 
	$admhc_gë_hub_des¸ùt‹
(
admhcd
 *
ahcd
, *
buf
)

125 
usb_hub_des¸ùt‹
 *
desc
 = (usb_hub_des¸ùt‹ *)
buf
;

126 
u32
 
rh
 = 
	`admhc_ªad_rhdesc
(
ahcd
);

127 
u16
 
ãmp
;

129 
desc
->
bDes¸ùt‹Ty≥
 = 
USB_DT_HUB
;

130 
desc
->
bPwrOn2PwrGood
 = 
ADMHC_POTPGT
/2;

131 
desc
->
bHubC⁄åCuºít
 = 0x00;

133 
desc
->
bNbrP‹ts
 = 
ahcd
->
num_p‹ts
;

134 
ãmp
 = 1 + (
ahcd
->
num_p‹ts
 / 8);

135 
desc
->
bDescLígth
 = 
USB_DT_HUB_NONVAR_SIZE
 + 2 * 
ãmp
;

138 
ãmp
 = 0;

139 i‡(
rh
 & 
ADMHC_RH_NPS
)

140 
ãmp
 |= 0x0002;

141 i‡(
rh
 & 
ADMHC_RH_PSM
)

142 
ãmp
 |= 0x0001;

143 i‡(
rh
 & 
ADMHC_RH_NOCP
)

144 
ãmp
 |= 0x0010;

145 i‡(
rh
 & 
ADMHC_RH_OCPM
)

146 
ãmp
 |= 0x0008;

147 
desc
->
wHubCh¨a˘îi°ics
 = (
__f‹˚
 
__u16
)
	`˝u_to_hc16
(
ahcd
, 
ãmp
);

150 
desc
->
u
.
hs
.
Devi˚RemovabÀ
[0] = 0;

151 
desc
->
u
.
hs
.
Devi˚RemovabÀ
[0] = ~0;

154 
	}
}

156 
	$admhc_gë_hub_°©us
(
admhcd
 *
ahcd
, *
buf
)

158 
usb_hub_°©us
 *
hs
 = (usb_hub_°©u†*)
buf
;

159 
u32
 
t
 = 
	`admhc_ªad_rhdesc
(
ahcd
);

160 
u16
 
°©us
, 
ch™ge
;

162 
°©us
 = 0;

163 
°©us
 |(
t
 & 
ADMHC_RH_LPS
Ë? 
HUB_STATUS_LOCAL_POWER
 : 0;

164 
°©us
 |(
t
 & 
ADMHC_RH_OCI
Ë? 
HUB_STATUS_OVERCURRENT
 : 0;

166 
ch™ge
 = 0;

167 
ch™ge
 |(
t
 & 
ADMHC_RH_LPSC
Ë? 
HUB_CHANGE_LOCAL_POWER
 : 0;

168 
ch™ge
 |(
t
 & 
ADMHC_RH_OCIC
Ë? 
HUB_CHANGE_OVERCURRENT
 : 0;

170 
hs
->
wHubSètus
 = (
__f‹˚
 
__u16
)
	`˝u_to_hc16
(
ahcd
, 
°©us
);

171 
hs
->
wHubCh™ge
 = (
__f‹˚
 
__u16
)
	`˝u_to_hc16
(
ahcd
, 
ch™ge
);

174 
	}
}

176 
	$admhc_gë_p‹t_°©us
(
admhcd
 *
ahcd
, 
p‹t
, *
buf
)

178 
usb_p‹t_°©us
 *
ps
 = (usb_p‹t_°©u†*)
buf
;

179 
u32
 
t
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
p‹t
);

180 
u16
 
°©us
, 
ch™ge
;

182 
°©us
 = 0;

183 
°©us
 |(
t
 & 
ADMHC_PS_CCS
Ë? 
USB_PORT_STAT_CONNECTION
 : 0;

184 
°©us
 |(
t
 & 
ADMHC_PS_PES
Ë? 
USB_PORT_STAT_ENABLE
 : 0;

185 
°©us
 |(
t
 & 
ADMHC_PS_PSS
Ë? 
USB_PORT_STAT_SUSPEND
 : 0;

186 
°©us
 |(
t
 & 
ADMHC_PS_POCI
Ë? 
USB_PORT_STAT_OVERCURRENT
 : 0;

187 
°©us
 |(
t
 & 
ADMHC_PS_PRS
Ë? 
USB_PORT_STAT_RESET
 : 0;

188 
°©us
 |(
t
 & 
ADMHC_PS_PPS
Ë? 
USB_PORT_STAT_POWER
 : 0;

189 
°©us
 |(
t
 & 
ADMHC_PS_LSDA
Ë? 
USB_PORT_STAT_LOW_SPEED
 : 0;

191 
ch™ge
 = 0;

192 
ch™ge
 |(
t
 & 
ADMHC_PS_CSC
Ë? 
USB_PORT_STAT_C_CONNECTION
 : 0;

193 
ch™ge
 |(
t
 & 
ADMHC_PS_PESC
Ë? 
USB_PORT_STAT_C_ENABLE
 : 0;

194 
ch™ge
 |(
t
 & 
ADMHC_PS_PSSC
Ë? 
USB_PORT_STAT_C_SUSPEND
 : 0;

195 
ch™ge
 |(
t
 & 
ADMHC_PS_OCIC
Ë? 
USB_PORT_STAT_C_OVERCURRENT
 : 0;

196 
ch™ge
 |(
t
 & 
ADMHC_PS_PRSC
Ë? 
USB_PORT_STAT_C_RESET
 : 0;

198 
ps
->
wP‹tSètus
 = (
__f‹˚
 
__u16
)
	`˝u_to_hc16
(
ahcd
, 
°©us
);

199 
ps
->
wP‹tCh™ge
 = (
__f‹˚
 
__u16
)
	`˝u_to_hc16
(
ahcd
, 
ch™ge
);

202 
	}
}

206 #ifdef 
CONFIG_USB_OTG


208 
	$admhc_°¨t_p‹t_ª£t
(
usb_hcd
 *
hcd
, 
p‹t
)

210 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

211 
u32
 
°©us
;

213 i‡(!
p‹t
)

214  -
EINVAL
;

215 
p‹t
--;

218 
°©us
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
p‹t
);

219 i‡(!(
°©us
 & 
ADMHC_PS_CCS
))

220  -
ENODEV
;

223 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, 
ADMHC_PS_PRS
);

225 
	}
}

227 
°¨t_h≈
(
admhcd
 *
ahcd
);

231 
	#admhc_°¨t_p‹t_ª£t
 
NULL


	)

243 #ifdef 
CONFIG_USB_SUSPEND


244 
	#PORT_RESET_MSEC
 50

	)

246 
	#PORT_RESET_MSEC
 10

	)

250 
	#PORT_RESET_HW_MSEC
 10

	)

253 
	#tick_bef‹e
(
t1
, 
t2
Ë((
s16
)(((s16)—1)Ë- ((s16)—2))Ë< 0)

	)

256 
ölöe
 
	$admhc_p‹t_ª£t
(
admhcd
 *
ahcd
, 
p‹t
)

258 
u32
 
t
;

260 
	`admhc_vdbg
(
ahcd
, "ª£àp‹t%d\n", 
p‹t
);

261 
t
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
p‹t
);

262 i‡(!(
t
 & 
ADMHC_PS_CCS
))

263  -
ENODEV
;

265 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, 
ADMHC_PS_SPR
);

266 
	`mdñay
(10);

267 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, (
ADMHC_PS_SPE
 | 
ADMHC_PS_CSC
));

268 
	`mdñay
(100);

271 
	}
}

273 
ölöe
 
	$admhc_p‹t_íabÀ
(
admhcd
 *
ahcd
, 
p‹t
)

275 
u32
 
t
;

277 
	`admhc_vdbg
(
ahcd
, "íabÀÖ‹t%d\n", 
p‹t
);

278 
t
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
p‹t
);

279 i‡(!(
t
 & 
ADMHC_PS_CCS
))

280  -
ENODEV
;

282 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, 
ADMHC_PS_SPE
);

285 
	}
}

287 
ölöe
 
	$admhc_p‹t_dißbÀ
(
admhcd
 *
ahcd
, 
p‹t
)

289 
u32
 
t
;

291 
	`admhc_vdbg
(
ahcd
, "dißbÀÖ‹t%d\n", 
p‹t
);

292 
t
 = 
	`admhc_ªad_p‹t°©us
(
ahcd
, 
p‹t
);

293 i‡(!(
t
 & 
ADMHC_PS_CCS
))

294  -
ENODEV
;

296 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, 
ADMHC_PS_CPE
);

299 
	}
}

301 
ölöe
 
	$admhc_p‹t_wrôe
(
admhcd
 *
ahcd
, 
p‹t
,

302 
u32
 
vÆ
)

304 #ifde‡
ADMHC_VERBOSE_DEBUG


305 
	`dbg_p‹t_wrôe
(
ahcd
, "wrôe", 
p‹t
, 
vÆ
);

307 
	`admhc_wrôe_p‹t°©us
(
ahcd
, 
p‹t
, 
vÆ
);

310 
	}
}

312 
	$admhc_hub_c⁄åﬁ
(
usb_hcd
 *
hcd
, 
u16
 
ty≥Req
, u16 
wVÆue
,

313 
u16
 
wIndex
, *
buf
, u16 
wLígth
)

315 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

316 
p‹ts
 = 
ahcd
->
num_p‹ts
;

317 
ªt
 = 0;

319 i‡(
	`u∆ikñy
(!
	`HCD_HW_ACCESSIBLE
(
hcd
)))

320  -
ESHUTDOWN
;

322 
ty≥Req
) {

323 
CÀ¨HubFótuª
:

324 
wVÆue
) {

325 
C_HUB_OVER_CURRENT
:

327 
	`admhc_wrôñ
(
ahcd
, 
ADMHC_RH_OCIC
,

328 &
ahcd
->
ªgs
->
roŸhub
.
°©us
);

330 
C_HUB_LOCAL_POWER
:

333 
îr‹
;

336 
CÀ¨P‹tFótuª
:

337 i‡(!
wIndex
 || wIndex > 
p‹ts
)

338 
îr‹
;

339 
wIndex
--;

341 
wVÆue
) {

342 
USB_PORT_FEAT_ENABLE
:

343 
ªt
 = 
	`admhc_p‹t_dißbÀ
(
ahcd
, 
wIndex
);

345 
USB_PORT_FEAT_SUSPEND
:

346 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_CPS
);

348 
USB_PORT_FEAT_POWER
:

349 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_CPP
);

351 
USB_PORT_FEAT_C_CONNECTION
:

352 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_CSC
);

354 
USB_PORT_FEAT_C_ENABLE
:

355 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_PESC
);

357 
USB_PORT_FEAT_C_SUSPEND
:

358 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_PSSC
);

360 
USB_PORT_FEAT_C_OVER_CURRENT
:

361 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_OCIC
);

363 
USB_PORT_FEAT_C_RESET
:

364 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_PRSC
);

367 
îr‹
;

370 
GëHubDes¸ùt‹
:

371 
ªt
 = 
	`admhc_gë_hub_des¸ùt‹
(
ahcd
, 
buf
);

373 
GëHubSètus
:

374 
ªt
 = 
	`admhc_gë_hub_°©us
(
ahcd
, 
buf
);

376 
GëP‹tSètus
:

377 i‡(!
wIndex
 || wIndex > 
p‹ts
)

378 
îr‹
;

379 
wIndex
--;

381 
ªt
 = 
	`admhc_gë_p‹t_°©us
(
ahcd
, 
wIndex
, 
buf
);

383 
SëHubFótuª
:

384 
wVÆue
) {

385 
C_HUB_OVER_CURRENT
:

387 
C_HUB_LOCAL_POWER
:

390 
îr‹
;

393 
SëP‹tFótuª
:

394 i‡(!
wIndex
 || wIndex > 
p‹ts
)

395 
îr‹
;

396 
wIndex
--;

398 
wVÆue
) {

399 
USB_PORT_FEAT_ENABLE
:

400 
ªt
 = 
	`admhc_p‹t_íabÀ
(
ahcd
, 
wIndex
);

402 
USB_PORT_FEAT_RESET
:

403 
ªt
 = 
	`admhc_p‹t_ª£t
(
ahcd
, 
wIndex
);

405 
USB_PORT_FEAT_SUSPEND
:

406 #ifdef 
CONFIG_USB_OTG


407 i‡(
hcd
->
£lf
.
Ÿg_p‹t
 =(
wIndex
 + 1)

408 && 
hcd
->
£lf
.
b_h≈_íabÀ
)

409 
	`°¨t_h≈
(
ahcd
);

412 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_SPS
);

414 
USB_PORT_FEAT_POWER
:

415 
ªt
 = 
	`admhc_p‹t_wrôe
(
ahcd
, 
wIndex
, 
ADMHC_PS_SPP
);

418 
îr‹
;

423 
îr‹
:

425 
ªt
 = -
EPIPE
;

428  
ªt
;

429 
	}
}

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-mem.c

32 
	$admhc_hcd_öô
(
admhcd
 *
ahcd
)

34 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
;

35 
	`•ö_lock_öô
(&
ahcd
->
lock
);

36 
	`INIT_LIST_HEAD
(&
ahcd
->
≥ndög
);

37 
	}
}

41 
	$admhc_mem_öô
(
admhcd
 *
ahcd
)

43 
ahcd
->
td_ˇche
 = 
	`dma_poﬁ_¸óã
("admhc_td",

44 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
c⁄åﬁÀr
,

45 (
td
),

46 
TD_ALIGN
,

49 i‡(!
ahcd
->
td_ˇche
)

50 
îr
;

52 
ahcd
->
ed_ˇche
 = 
	`dma_poﬁ_¸óã
("admhc_ed",

53 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
c⁄åﬁÀr
,

54 (
ed
),

55 
ED_ALIGN
,

58 i‡(!
ahcd
->
ed_ˇche
)

59 
îr_td_ˇche
;

63 
îr_td_ˇche
:

64 
	`dma_poﬁ_de°roy
(
ahcd
->
td_ˇche
);

65 
ahcd
->
td_ˇche
 = 
NULL
;

66 
îr
:

67  -
ENOMEM
;

68 
	}
}

70 
	$admhc_mem_˛ónup
(
admhcd
 *
ahcd
)

72 i‡(
ahcd
->
td_ˇche
) {

73 
	`dma_poﬁ_de°roy
(
ahcd
->
td_ˇche
);

74 
ahcd
->
td_ˇche
 = 
NULL
;

77 i‡(
ahcd
->
ed_ˇche
) {

78 
	`dma_poﬁ_de°roy
(
ahcd
->
ed_ˇche
);

79 
ahcd
->
ed_ˇche
 = 
NULL
;

81 
	}
}

86 
ölöe
 
td
 *
	$dma_to_td
(
admhcd
 *
ahcd
, 
dma_addr_t
 
td_dma
)

88 
td
 *td;

90 
td_dma
 &
TD_MASK
;

91 
td
 = 
ahcd
->
td_hash
[
	`TD_HASH_FUNC
(
td_dma
)];

92 
td
 &&Åd->
td_dma
 !=Åd_dma)

93 
td
 =Åd->
td_hash
;

95  
td
;

96 
	}
}

99 
td
 *
	$td_Æloc
(
admhcd
 *
ahcd
, 
gÂ_t
 
mem_Êags
)

101 
dma_addr_t
 
dma
;

102 
td
 *td;

104 
td
 = 
	`dma_poﬁ_Æloc
(
ahcd
->
td_ˇche
, 
mem_Êags
, &
dma
);

105 i‡(!
td
)

106  
NULL
;

109 
	`mem£t
(
td
, 0,  *td);

110 
td
->
hwNextTD
 = 
	`˝u_to_hc32
(
ahcd
, 
dma
);

111 
td
->
td_dma
 = 
dma
;

114  
td
;

115 
	}
}

117 
	$td_‰ì
(
admhcd
 *
ahcd
, 
td
 *td)

119 
td
 **
¥ev
 = &
ahcd
->
td_hash
[
	`TD_HASH_FUNC
—d->
td_dma
)];

121 *
¥ev
 && *¥ev !
td
)

122 
¥ev
 = &(*¥ev)->
td_hash
;

123 i‡(*
¥ev
)

124 *
¥ev
 = 
td
->
td_hash
;

127 i‡((
td
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
, 
TD_DONE
)) != 0)

128 
	`admhc_dbg
(
ahcd
, "nÿhash f‹Åd %p\n", 
td
);

130 i‡((
td
->
Êags
 & 
TD_FLAG_DONE
) != 0)

131 
	`admhc_dbg
(
ahcd
, "nÿhash f‹Åd %p\n", 
td
);

133 
	`dma_poﬁ_‰ì
(
ahcd
->
td_ˇche
, 
td
,Åd->
td_dma
);

134 
	}
}

139 
ed
 *
	$ed_Æloc
(
admhcd
 *
ahcd
, 
gÂ_t
 
mem_Êags
)

141 
dma_addr_t
 
dma
;

142 
ed
 *ed;

144 
ed
 = 
	`dma_poﬁ_Æloc
(
ahcd
->
ed_ˇche
, 
mem_Êags
, &
dma
);

145 i‡(!
ed
)

146  
NULL
;

148 
	`mem£t
(
ed
, 0, (*ed));

149 
ed
->
dma
 = dma;

151 
	`INIT_LIST_HEAD
(&
ed
->
td_li°
);

152 
	`INIT_LIST_HEAD
(&
ed
->
urb_li°
);

154  
ed
;

155 
	}
}

157 
	$ed_‰ì
(
admhcd
 *
ahcd
, 
ed
 *ed)

159 
	`dma_poﬁ_‰ì
(
ahcd
->
ed_ˇche
, 
ed
,Éd->
dma
);

160 
	}
}

165 
	$urb_¥iv_‰ì
(
admhcd
 *
ahcd
, 
urb_¥iv
 *urb_priv)

167 
i
;

169 
i
 = 0; i < 
urb_¥iv
->
td_˙t
; i++)

170 i‡(
urb_¥iv
->
td
[
i
])

171 
	`td_‰ì
(
ahcd
, 
urb_¥iv
->
td
[
i
]);

173 
	`li°_dñ
(&
urb_¥iv
->
≥ndög
);

174 
	`k‰ì
(
urb_¥iv
);

175 
	}
}

177 
urb_¥iv
 *
	$urb_¥iv_Æloc
(
admhcd
 *
ahcd
, 
num_tds
,

178 
gÂ_t
 
mem_Êags
)

180 
urb_¥iv
 *
¥iv
;

183 
¥iv
 = 
	`kzÆloc
((*¥ivË+ (
td
Ë* 
num_tds
, 
mem_Êags
);

184 i‡(!
¥iv
)

185 
îr
;

188 
¥iv
->
td_˙t
 = 0;Öriv->td_˙à< 
num_tds
;Öriv->td_cnt++) {

189 
¥iv
->
td
[¥iv->
td_˙t
] = 
	`td_Æloc
(
ahcd
, 
mem_Êags
);

190 i‡(
¥iv
->
td
[¥iv->
td_˙t
] =
NULL
)

191 
îr_‰ì
;

194 
	`INIT_LIST_HEAD
(&
¥iv
->
≥ndög
);

196  
¥iv
;

198 
îr_‰ì
:

199 
	`urb_¥iv_‰ì
(
ahcd
, 
¥iv
);

200 
îr
:

201  
NULL
;

202 
	}
}

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-pm.c

16 
	#OHCI_SCHED_ENABLES
 \

17 (
OHCI_CTRL_CLE
|
OHCI_CTRL_BLE
|
OHCI_CTRL_PLE
|
OHCI_CTRL_IE
)

	)

19 #ifdef 
CONFIG_PM


20 
admhc_ª°¨t
(
admhcd
 *
ahcd
);

22 
	$admhc_rh_su•íd
(
admhcd
 *
ahcd
, 
auto°›
)

23 
	`__ªÀa£s
(
ahcd
->
lock
)

24 
	`__acquúes
(
ahcd
->
lock
)

26 
°©us
 = 0;

28 
ahcd
->
hc_c⁄åﬁ
 = 
	`admhc_ªadl
◊hcd, &ahcd->
ªgs
->
c⁄åﬁ
);

29 
ahcd
->
hc_c⁄åﬁ
 & 
OHCI_CTRL_HCFS
) {

30 
OHCI_USB_RESUME
:

31 
	`admhc_dbg
(
ahcd
, "resume/suspend?\n");

32 
ahcd
->
hc_c⁄åﬁ
 &~
OHCI_CTRL_HCFS
;

33 
ahcd
->
hc_c⁄åﬁ
 |
OHCI_USB_RESET
;

34 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->ahcd->
ªgs
->
c⁄åﬁ
);

35 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

37 
OHCI_USB_RESET
:

38 
°©us
 = -
EBUSY
;

39 
	`admhc_dbg
(
ahcd
, "needsÑeinit!\n");

40 
d⁄e
;

41 
OHCI_USB_SUSPEND
:

42 i‡(!
ahcd
->
auto°›
) {

43 
	`admhc_dbg
(
ahcd
, "already suspended\n");

44 
d⁄e
;

47 
	`admhc_dbg
(
ahcd
, "%sÑoot hub\n",

48 
auto°›
 ? "auto-stop" : "suspend");

51 i‡(!
auto°›
 && (
ahcd
->
hc_c⁄åﬁ
 & 
OHCI_SCHED_ENABLES
)) {

52 
ahcd
->
hc_c⁄åﬁ
 &~
OHCI_SCHED_ENABLES
;

53 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->ahcd->
ªgs
->
c⁄åﬁ
);

54 
ahcd
->
hc_c⁄åﬁ
 = 
	`admhc_ªadl
◊hcd, &ahcd->
ªgs
->
c⁄åﬁ
);

55 
	`admhc_wrôñ
(
ahcd
, 
OHCI_INTR_SF
, &ahcd->
ªgs
->
öå°©us
);

60 
	`admhc_dbg
(
ahcd
, "stopping schedules ...\n");

61 
ahcd
->
auto°›
 = 0;

62 
	`•ö_u∆ock_úq
 (&
ahcd
->
lock
);

63 
	`m¶ìp
 (8);

64 
	`•ö_lock_úq
(&
ahcd
->
lock
);

66 
	`dl_d⁄e_li°
 (
ahcd
);

67 
	`föish_u∆öks
 (
ahcd
, 
	`admhc_‰ame_no
(ahcd));

70 i‡(
	`devi˚_may_wakeup
(&
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
roŸ_hub
->
dev
) ||

71 
auto°›
)

72 
ahcd
->
hc_c⁄åﬁ
 |
OHCI_CTRL_RWE
;

74 
	`admhc_wrôñ
(
ahcd
, 
OHCI_INTR_RHSC
, &ahcd->
ªgs
->
öådißbÀ
);

75 
ahcd
->
hc_c⁄åﬁ
 &~
OHCI_CTRL_RWE
;

81 
ahcd
->
hc_c⁄åﬁ
 &~
OHCI_CTRL_HCFS
;

82 
ahcd
->
hc_c⁄åﬁ
 |
OHCI_USB_SUSPEND
;

83 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->ahcd->
ªgs
->
c⁄åﬁ
);

84 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

87 i‡(!
auto°›
) {

88 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
 (5);

89 
ahcd
->
auto°›
 = 0;

92 
d⁄e
:

93  
°©us
;

94 
	}
}

96 
ölöe
 
ed
 *
	$föd_hód
(
ed
 *ed)

99 
ed
->
ed_¥ev
)

100 
ed
 =Éd->
ed_¥ev
;

101  
ed
;

102 
	}
}

105 
	$admhc_rh_ªsume
(
admhcd
 *
ahcd
)

106 
	`__ªÀa£s
(
ahcd
->
lock
)

107 
	`__acquúes
(
ahcd
->
lock
)

109 
usb_hcd
 *
hcd
 = 
	`admhcd_to_hcd
 (
ahcd
);

110 
u32
 
ãmp
, 
íabÀs
;

111 
°©us
 = -
EINPROGRESS
;

112 
auto°›≥d
 = 
ahcd
->
auto°›
;

114 
ahcd
->
auto°›
 = 0;

115 
ahcd
->
hc_c⁄åﬁ
 = 
	`admhc_ªadl
◊hcd, &ahcd->
ªgs
->
c⁄åﬁ
);

117 i‡(
ahcd
->
hc_c⁄åﬁ
 & (
OHCI_CTRL_IR
 | 
OHCI_SCHED_ENABLES
)) {

119 i‡(
hcd
->
°©e
 =
HC_STATE_RESUMING
) {

120 
	`admhc_dbg
(
ahcd
, "BIOS/SMMáctive, control %03x\n",

121 
ahcd
->
hc_c⁄åﬁ
);

122 
°©us
 = -
EBUSY
;

125 
	`admhc_dbg
(
ahcd
, "duplicateÑesume\n");

126 
°©us
 = 0;

128 } 
ahcd
->
hc_c⁄åﬁ
 & 
OHCI_CTRL_HCFS
) {

129 
OHCI_USB_SUSPEND
:

130 
ahcd
->
hc_c⁄åﬁ
 &~(
OHCI_CTRL_HCFS
|
OHCI_SCHED_ENABLES
);

131 
ahcd
->
hc_c⁄åﬁ
 |
OHCI_USB_RESUME
;

132 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->ahcd->
ªgs
->
c⁄åﬁ
);

133 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

134 
	`admhc_dbg
(
ahcd
, "%sÑoot hub\n",

135 
auto°›≥d
 ? "auto-start" : "resume");

137 
OHCI_USB_RESUME
:

139 
	`admhc_dbg
(
ahcd
, "%swakeupÑoot hub\n",

140 
auto°›≥d
 ? "auto-" : "");

142 
OHCI_USB_OPER
:

144 
	`admhc_dbg
(
ahcd
, "snapshotÑesume?Ñeinit\n");

145 
°©us
 = -
EBUSY
;

148 
	`admhc_dbg
(
ahcd
, "lostÖower\n");

149 
°©us
 = -
EBUSY
;

151 i‡(
°©us
 =-
EBUSY
) {

152 i‡(!
auto°›≥d
) {

153 
	`•ö_u∆ock_úq
 (&
ahcd
->
lock
);

154 (Ë
	`ahcd_öô
 (
ahcd
);

155 
°©us
 = 
	`admhc_ª°¨t
 (
ahcd
);

156 
	`•ö_lock_úq
(&
ahcd
->
lock
);

158  
°©us
;

160 i‡(
°©us
 !-
EINPROGRESS
)

161  
°©us
;

162 i‡(
auto°›≥d
)

163 
skù_ªsume
;

164 
	`•ö_u∆ock_úq
 (&
ahcd
->
lock
);

167 
	`m¶ìp
 (20 + 12 + 1);

169 
ãmp
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

170 
ãmp
 &
OHCI_CTRL_HCFS
;

171 i‡(
ãmp
 !
OHCI_USB_RESUME
) {

172 
	`admhc_îr
 (
ahcd
, "controller won'tÑesume\n");

173 
	`•ö_lock_úq
(&
ahcd
->
lock
);

174  -
EBUSY
;

178 
	`admhc_wrôñ
(
ahcd
, 0, &ahcd->
ªgs
->
ed_c⁄åﬁhód
);

179 
	`admhc_wrôñ
(
ahcd
, 0, &ahcd->
ªgs
->
ed_c⁄åﬁcuºít
);

180 
	`admhc_wrôñ
(
ahcd
, 0, &ahcd->
ªgs
->
ed_bulkhód
);

181 
	`admhc_wrôñ
(
ahcd
, 0, &ahcd->
ªgs
->
ed_bulkcuºít
);

182 
	`admhc_wrôñ
(
ahcd
, 0, &ahcd->
ªgs
->
ed_≥riodcuºít
);

183 
	`admhc_wrôñ
(
ahcd
, (
u32
Ëahcd->
hcˇ_dma
, &ahcd->ahcd->
ªgs
->
hcˇ
);

186 
	`≥riodic_ªöô
(
ahcd
);

192 
skù_ªsume
:

194 
	`admhc_wrôñ
(
ahcd
, 
OHCI_INTR_INIT
, &ahcd->
ªgs
->
öt_íabÀ
);

195 i‡(
ahcd
->
ed_rm_li°
)

196 
	`admhc_wrôñ
(
ahcd
, 
OHCI_INTR_SF
, &ahcd->
ªgs
->
öt_íabÀ
);

199 
	`admhc_wrôñ
(
ahcd
, 
OHCI_USB_OPER
, &ahcd->
ªgs
->
c⁄åﬁ
);

200 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

201 i‡(!
auto°›≥d
)

202 
	`m¶ìp
 (3);

204 
ãmp
 = 
ahcd
->
hc_c⁄åﬁ
;

205 
ãmp
 &
OHCI_CTRL_RWC
;

206 
ãmp
 |
OHCI_CONTROL_INIT
 | 
OHCI_USB_OPER
;

207 
ahcd
->
hc_c⁄åﬁ
 = 
ãmp
;

208 
	`admhc_wrôñ
(
ahcd
, 
ãmp
, &ahcd->
ªgs
->
c⁄åﬁ
);

209 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

212 i‡(!
auto°›≥d
) {

213 
	`m¶ìp
 (10);

214 
	`•ö_lock_úq
(&
ahcd
->
lock
);

219 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 + 
STATECHANGE_DELAY
;

222 
íabÀs
 = 0;

223 
ãmp
 = 0;

224 i‡(!
ahcd
->
ed_rm_li°
) {

225 i‡(
ahcd
->
ed_c⁄åﬁèû
) {

226 
	`admhc_wrôñ
(
ahcd
,

227 
	`föd_hód
 (
ahcd
->
ed_c⁄åﬁèû
)->
dma
,

228 &
ahcd
->
ªgs
->
ed_c⁄åﬁhód
);

229 
íabÀs
 |
OHCI_CTRL_CLE
;

230 
ãmp
 |
OHCI_CLF
;

232 i‡(
ahcd
->
ed_bulkèû
) {

233 
	`admhc_wrôñ
(
ahcd
, 
	`föd_hód
 (ahcd->
ed_bulkèû
)->
dma
,

234 &
ahcd
->
ªgs
->
ed_bulkhód
);

235 
íabÀs
 |
OHCI_CTRL_BLE
;

236 
ãmp
 |
OHCI_BLF
;

239 i‡(
hcd
->
£lf
.
b™dwidth_isoc_ªqs
 || hcd->£lf.
b™dwidth_öt_ªqs
)

240 
íabÀs
 |
OHCI_CTRL_PLE
|
OHCI_CTRL_IE
;

241 i‡(
íabÀs
) {

242 
	`admhc_dbg
(
ahcd
, "ª°¨tög scheduÀ†... %08x\n", 
íabÀs
);

243 
ahcd
->
hc_c⁄åﬁ
 |
íabÀs
;

244 
	`admhc_wrôñ
(
ahcd
,áhcd->
hc_c⁄åﬁ
, &ahcd->ahcd->
ªgs
->
c⁄åﬁ
);

245 i‡(
ãmp
)

246 
	`admhc_wrôñ
(
ahcd
, 
ãmp
, &ahcd->
ªgs
->
cmd°©us
);

247 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
c⁄åﬁ
);

251 
	}
}

253 
	$admhc_bus_su•íd
(
usb_hcd
 *
hcd
)

255 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

256 
rc
;

258 
	`•ö_lock_úq
(&
ahcd
->
lock
);

260 i‡(
	`u∆ikñy
(!
	`HCD_HW_ACCESSIBLE
(
hcd
)))

261 
rc
 = -
ESHUTDOWN
;

263 
rc
 = 
	`admhc_rh_su•íd
(
ahcd
, 0);

264 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

265  
rc
;

266 
	}
}

268 
	$admhc_bus_ªsume
(
usb_hcd
 *
hcd
)

270 
admhcd
 *
ahcd
 = 
	`hcd_to_admhcd
(
hcd
);

271 
rc
;

273 i‡(
	`time_bef‹e
(
jiffõs
, 
ahcd
->
√xt_°©ech™ge
))

274 
	`m¶ìp
(5);

276 
	`•ö_lock_úq
(&
ahcd
->
lock
);

278 i‡(
	`u∆ikñy
(!
	`HCD_HW_ACCESSIBLE
(
hcd
)))

279 
rc
 = -
ESHUTDOWN
;

281 
rc
 = 
	`admhc_rh_ªsume
(
ahcd
);

282 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

285 i‡(
rc
 == 0)

286 
	`usb_hcd_pﬁl_rh_°©us
(
hcd
);

287  
rc
;

288 
	}
}

291 
	$admhc_roŸ_hub_°©e_ch™ges
(
admhcd
 *
ahcd
, 
ch™ged
,

292 
™y_c⁄√˘ed
)

294 
pﬁl_rh
 = 1;

296 
ahcd
->
hc_c⁄åﬁ
 & 
OHCI_CTRL_HCFS
) {

298 
OHCI_USB_OPER
:

301 i‡(!
ahcd
->
auto°›
) {

302 i‡(
™y_c⁄√˘ed
 ||

303 !
	`devi˚_may_wakeup
(&
	`admhcd_to_hcd
(
ahcd
)

304 ->
£lf
.
roŸ_hub
->
dev
)) {

305 i‡(
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
öt_íabÀ
) &

306 
OHCI_INTR_RHSC
)

307 
pﬁl_rh
 = 0;

309 
ahcd
->
auto°›
 = 1;

310 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 + 
HZ
;

315 i‡(
ch™ged
 || 
™y_c⁄√˘ed
) {

316 
ahcd
->
auto°›
 = 0;

317 
ahcd
->
√xt_°©ech™ge
 = 
jiffõs
 +

318 
STATECHANGE_DELAY
;

319 } i‡(
	`time_a·î_eq
(
jiffõs
,

320 
ahcd
->
√xt_°©ech™ge
)

321 && !
ahcd
->
ed_rm_li°


322 && !(
ahcd
->
hc_c⁄åﬁ
 &

323 
OHCI_SCHED_ENABLES
)) {

324 
	`ahcd_rh_su•íd
(
ahcd
, 1);

330 
OHCI_USB_SUSPEND
:

331 
OHCI_USB_RESUME
:

332 i‡(
ch™ged
) {

333 i‡(
ahcd
->
auto°›
)

334 
	`admhc_rh_ªsume
(
ahcd
);

336 
	`usb_hcd_ªsume_roŸ_hub
(
	`admhcd_to_hcd
(
ahcd
));

339 
pﬁl_rh
 = 0;

343  
pﬁl_rh
;

344 
	}
}

349 
	$admhc_ª°¨t
(
admhcd
 *
ahcd
)

351 
ãmp
;

352 
i
;

353 
urb_¥iv
 *
¥iv
;

360 
	`•ö_lock_úq
(&
ahcd
->
lock
);

361 
	`admhc_dißbÀ
(
ahcd
);

362 
	`usb_roŸ_hub_lo°_powî
(
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
roŸ_hub
);

363 i‡(!
	`li°_em±y
(&
ahcd
->
≥ndög
))

364 
	`admhc_dbg
(
ahcd
, "abort schedule...\n");

365 
	`li°_f‹_óch_íåy
(
¥iv
, &
ahcd
->
≥ndög
,Öending) {

366 
urb
 *urb = 
¥iv
->
td
[0]->urb;

367 
ed
 *ed = 
¥iv
->ed;

369 
ed
->
°©e
) {

370 
ED_OPER
:

371 
ed
->
°©e
 = 
ED_UNLINK
;

372 
ed
->
hwINFO
 |
	`˝u_to_hc32
(
ahcd
, 
ED_DEQUEUE
);

373 
	`ed_descheduÀ
 (
ahcd
, 
ed
);

375 
ed
->
ed_√xt
 = 
ahcd
->
ed_rm_li°
;

376 
ed
->
ed_¥ev
 = 
NULL
;

377 
ahcd
->
ed_rm_li°
 = 
ed
;

379 
ED_UNLINK
:

382 
	`admhc_dbg
(
ahcd
, "bogusÉd %p state %d\n",

383 
ed
,Éd->
°©e
);

386 i‡(!
urb
->
u∆öked
)

387 
urb
->
u∆öked
 = -
ESHUTDOWN
;

389 
	`föish_u∆öks
(
ahcd
, 0);

390 
	`•ö_u∆ock_úq
(&
ahcd
->
lock
);

395 
i
 = 0; i < 
NUM_INTS
; i++Ë
ahcd
->
lﬂd
[i] = 0;

396 
i
 = 0; i < 
NUM_INTS
; i++Ë
ahcd
->
hcˇ
->
öt_èbÀ
[i] = 0;

399 
ahcd
->
ed_rm_li°
 = 
NULL
;

402 
ahcd
->
ed_c⁄åﬁèû
 = 
NULL
;

403 
ahcd
->
ed_bulkèû
 = 
NULL
;

405 i‡((
ãmp
 = 
	`admhc_run
(
ahcd
)) < 0) {

406 
	`admhc_îr
(
ahcd
, "ˇn'àª°¨t, %d\n", 
ãmp
);

407  
ãmp
;

413 
i
 = 
ahcd
->
num_p‹ts
;

414 
i
--)

415 
	`admhc_wrôñ
(
ahcd
, 
RH_PS_PSS
,

416 &
ahcd
->
ªgs
->
p‹t°©us
[
i
]);

417 
	`admhc_dbg
(
ahcd
, "restart complete\n");

420 
	}
}

424 
ölöe
 
	$admhc_rh_ªsume
(
admhcd
 *
ahcd
)

427 
	}
}

432 
	$admhc_roŸ_hub_°©e_ch™ges
(
admhcd
 *
ahcd
, 
ch™ged
,

433 
™y_c⁄√˘ed
)

436 i‡(
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
öt_íabÀ
Ë& 
ADMHC_INTR_INSM
)

440 i‡(!
ch™ged
) {

441 
	`admhc_öå_íabÀ
(
ahcd
, 
ADMHC_INTR_INSM
);

446 
	}
}

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120-q.c

16 
	~<löux/úq.h
>

17 
	~<löux/¶ab.h
>

27 
	$föish_urb
(
admhcd
 *
ahcd
, 
urb
 *urb, 
°©us
)

28 
	`__ªÀa£s
(
ahcd
->
lock
)

29 
	`__acquúes
(
ahcd
->
lock
)

31 
	`urb_¥iv_‰ì
(
ahcd
, 
urb
->
h˝riv
);

33 i‡(
	`likñy
(
°©us
 =-
EINPROGRESS
))

34 
°©us
 = 0;

36 
	`usb_pùëy≥
(
urb
->
pùe
)) {

37 
PIPE_ISOCHRONOUS
:

38 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_isoc_ªqs
--;

40 
PIPE_INTERRUPT
:

41 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_öt_ªqs
--;

45 #ifde‡
ADMHC_VERBOSE_DEBUG


46 
	`urb_¥öt
(
ahcd
, 
urb
, "RET", 
	`usb_pùeout
(urb->
pùe
), 
°©us
);

50 
	`usb_hcd_u∆ök_urb_‰om_ï
(
	`admhcd_to_hcd
(
ahcd
), 
urb
);

51 
	`•ö_u∆ock
(&
ahcd
->
lock
);

52 
	`usb_hcd_giveback_urb
(
	`admhcd_to_hcd
(
ahcd
), 
urb
, 
°©us
);

53 
	`•ö_lock
(&
ahcd
->
lock
);

54 
	}
}

65 
	$bÆ™˚
(
admhcd
 *
ahcd
, 
öãrvÆ
, 
lﬂd
)

67 
i
, 
bønch
 = -
ENOSPC
;

70 i‡(
öãrvÆ
 > 
NUM_INTS
)

71 
öãrvÆ
 = 
NUM_INTS
;

76 
i
 = 0; i < 
öãrvÆ
 ; i++) {

77 i‡(
bønch
 < 0 || 
ahcd
->
lﬂd
[bønch] >áhcd->lﬂd[
i
]) {

78 
j
;

81 
j
 = 
i
; j < 
NUM_INTS
; j +
öãrvÆ
) {

82 i‡((
ahcd
->
lﬂd
[
j
] +Üoad) > 900)

85 i‡(
j
 < 
NUM_INTS
)

87 
bønch
 = 
i
;

90  
bønch
;

91 
	}
}

101 
	$≥riodic_lök
(
admhcd
 *
ahcd
, 
ed
 *ed)

103 
i
;

105 
	`admhc_vdbg
(
ahcd
, "link %sed %p branch %d [%dus.], interval %d\n",

106 (
ed
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
, 
ED_ISO
)) ? "iso " : "",

107 
ed
,Éd->
bønch
,Éd->
lﬂd
,Éd->
öãrvÆ
);

109 
i
 = 
ed
->
bønch
; i < 
NUM_INTS
; i +ed->
öãrvÆ
) {

110 
ed
 **
¥ev
 = &
ahcd
->
≥riodic
[
i
];

111 
__hc32
 *
¥ev_p
 = &
ahcd
->
hcˇ
->
öt_èbÀ
[
i
];

112 
ed
 *
hîe
 = *
¥ev
;

118 
hîe
 && 
ed
 != here) {

119 i‡(
ed
->
öãrvÆ
 > 
hîe
->interval)

121 
¥ev
 = &
hîe
->
ed_√xt
;

122 
¥ev_p
 = &
hîe
->
hwNextED
;

123 
hîe
 = *
¥ev
;

125 i‡(
ed
 !
hîe
) {

126 
ed
->
ed_√xt
 = 
hîe
;

127 i‡(
hîe
)

128 
ed
->
hwNextED
 = *
¥ev_p
;

129 
	`wmb
();

130 *
¥ev
 = 
ed
;

131 *
¥ev_p
 = 
	`˝u_to_hc32
(
ahcd
, 
ed
->
dma
);

132 
	`wmb
();

134 
ahcd
->
lﬂd
[
i
] +
ed
->load;

136 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_Æloˇãd
 +
ed
->
lﬂd
 /Éd->
öãrvÆ
;

137 
	}
}

142 
	$ed_scheduÀ
(
admhcd
 *
ahcd
, 
ed
 *ed)

144 
ed
 *
ﬁd_èû
;

146 i‡(
	`admhcd_to_hcd
(
ahcd
)->
°©e
 =
HC_STATE_QUIESCING
)

147  -
EAGAIN
;

149 
ed
->
°©e
 = 
ED_OPER
;

151 
ﬁd_èû
 = 
ahcd
->
ed_èûs
[
ed
->
ty≥
];

153 
ed
->
ed_√xt
 = 
ﬁd_èû
->ed_next;

154 i‡(
ed
->
ed_√xt
) {

155 
ed
->
ed_√xt
->
ed_¥ev
 =Éd;

156 
ed
->
hwNextED
 = 
	`˝u_to_hc32
(
ahcd
,Éd->
ed_√xt
->
dma
);

158 
ed
->
ed_¥ev
 = 
ﬁd_èû
;

160 
ﬁd_èû
->
ed_√xt
 = 
ed
;

161 
ﬁd_èû
->
hwNextED
 = 
	`˝u_to_hc32
(
ahcd
, 
ed
->
dma
);

163 
ahcd
->
ed_èûs
[
ed
->
ty≥
] =Éd;

165 
	`admhc_dma_íabÀ
(
ahcd
);

168 
	}
}

174 
	$≥riodic_u∆ök
(
admhcd
 *
ahcd
, 
ed
 *ed)

176 
i
;

178 
i
 = 
ed
->
bønch
; i < 
NUM_INTS
; i +ed->
öãrvÆ
) {

179 
ed
 *
ãmp
;

180 
ed
 **
¥ev
 = &
ahcd
->
≥riodic
[
i
];

181 
__hc32
 *
¥ev_p
 = &
ahcd
->
hcˇ
->
öt_èbÀ
[
i
];

183 *
¥ev
 && (
ãmp
 = *¥evË!
ed
) {

184 
¥ev_p
 = &
ãmp
->
hwNextED
;

185 
¥ev
 = &
ãmp
->
ed_√xt
;

187 i‡(*
¥ev
) {

188 *
¥ev_p
 = 
ed
->
hwNextED
;

189 *
¥ev
 = 
ed
->
ed_√xt
;

191 
ahcd
->
lﬂd
[
i
] -
ed
->load;

194 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_Æloˇãd
 -
ed
->
lﬂd
 /Éd->
öãrvÆ
;

195 
	`admhc_vdbg
(
ahcd
, "unlink %sed %p branch %d [%dus.], interval %d\n",

196 (
ed
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
, 
ED_ISO
)) ? "iso " : "",

197 
ed
,Éd->
bønch
,Éd->
lﬂd
,Éd->
öãrvÆ
);

198 
	}
}

223 
	$ed_descheduÀ
(
admhcd
 *
ahcd
, 
ed
 *ed)

226 #ifde‡
ADMHC_VERBOSE_DEBUG


227 
	`admhc_dump_ed
(
ahcd
, "ED-DESCHED", 
ed
, 1);

230 
ed
->
hwINFO
 |
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
);

231 
	`wmb
();

232 
ed
->
°©e
 = 
ED_UNLINK
;

235 
ed
->
ed_¥ev
->
hwNextED
 =Éd->hwNextED;

238 
ed
->
ed_¥ev
->
ed_√xt
 =Éd->ed_next;

240 i‡(
ed
->
ed_√xt
)

241 
ed
->
ed_√xt
->
ed_¥ev
 =Éd->ed_prev;

243 i‡(
ahcd
->
ed_èûs
[
ed
->
ty≥
] ==Éd)

244 
ahcd
->
ed_èûs
[
ed
->
ty≥
] =Éd->
ed_¥ev
;

245 
	}
}

249 
ed
 *
	$ed_¸óã
(
admhcd
 *
ahcd
, 
ty≥
, 
u32
 
öfo
)

251 
ed
 *ed;

252 
td
 *td;

254 
ed
 = 
	`ed_Æloc
(
ahcd
, 
GFP_ATOMIC
);

255 i‡(!
ed
)

256 
îr
;

259 
td
 = 
	`td_Æloc
(
ahcd
, 
GFP_ATOMIC
);

260 i‡(!
td
)

261 
îr_‰ì_ed
;

263 
ty≥
) {

264 
PIPE_INTERRUPT
:

265 
öfo
 |
ED_INT
;

267 
PIPE_ISOCHRONOUS
:

268 
öfo
 |
ED_ISO
;

272 
ed
->
dummy
 = 
td
;

273 
ed
->
°©e
 = 
ED_IDLE
;

274 
ed
->
ty≥
 =Åype;

276 
ed
->
hwINFO
 = 
	`˝u_to_hc32
(
ahcd
, 
öfo
);

277 
ed
->
hwTaûP
 = 
	`˝u_to_hc32
(
ahcd
, 
td
->
td_dma
);

278 
ed
->
hwHódP
 =Éd->
hwTaûP
;

280  
ed
;

282 
îr_‰ì_ed
:

283 
	`ed_‰ì
(
ahcd
, 
ed
);

284 
îr
:

285  
NULL
;

286 
	}
}

291 
ed
 *
	$ed_gë
(
admhcd
 *
ahcd
, 
usb_ho°_ídpoöt
 *
ï
,

292 
usb_devi˚
 *
udev
, 
pùe
, 
öãrvÆ
)

294 
ed
 *ed;

295 
Êags
;

297 
	`•ö_lock_úqßve
(&
ahcd
->
lock
, 
Êags
);

299 
ed
 = 
ï
->
h˝riv
;

300 i‡(!
ed
) {

301 
u32
 
öfo
;

306 
öfo
 = 
	`usb_pùedevi˚
(
pùe
);

307 
öfo
 |(
ï
->
desc
.
bEndpoötAddªss
 & ~
USB_DIR_IN
Ë<< 
ED_EN_SHIFT
;

308 
öfo
 |
	`À16_to_˝u
(
ï
->
desc
.
wMaxPackëSize
Ë<< 
ED_MPS_SHIFT
;

309 i‡(
udev
->
•ìd
 =
USB_SPEED_FULL
)

310 
öfo
 |
ED_SPEED_FULL
;

312 
ed
 = 
	`ed_¸óã
(
ahcd
, 
	`usb_pùëy≥
(
pùe
), 
öfo
);

313 i‡(
ed
)

314 
ï
->
h˝riv
 = 
ed
;

317 
	`•ö_u∆ock_úqª°‹e
(&
ahcd
->
lock
, 
Êags
);

319  
ed
;

320 
	}
}

330 
	$°¨t_ed_u∆ök
(
admhcd
 *
ahcd
, 
ed
 *ed)

333 #ifde‡
ADMHC_VERBOSE_DEBUG


334 
	`admhc_dump_ed
(
ahcd
, "ED-UNLINK", 
ed
, 1);

337 
ed
->
hwINFO
 |
	`˝u_to_hc32
(
ahcd
, 
ED_DEQUEUE
);

338 
	`ed_descheduÀ
(
ahcd
, 
ed
);

341 
ed
->
ed_rm_√xt
 = 
ahcd
->
ed_rm_li°
;

342 
ahcd
->
ed_rm_li°
 = 
ed
;

345 
	`admhc_öå_ack
(
ahcd
, 
ADMHC_INTR_SOFI
);

346 
	`admhc_öå_íabÀ
(
ahcd
, 
ADMHC_INTR_SOFI
);

348 
	`admhc_wrôñ_Êush
(
ahcd
);

355 
ed
->
tick
 = 
	`admhc_‰ame_no
(
ahcd
) + 1;

356 
	}
}

365 
	$td_fûl
(
admhcd
 *
ahcd
, 
u32
 
öfo
, 
dma_addr_t
 
d©a
, 
Àn
,

366 
urb
 *urb, 
ödex
)

368 
td
 *td, *
td_±
;

369 
urb_¥iv
 *urb_¥iv = 
urb
->
h˝riv
;

370 
hash
;

371 
u32
 
cbl
 = 0;

374 i‡(
ödex
 =(
urb_¥iv
->
td_˙t
 - 1) &&

375 ((
urb
->
å™s„r_Êags
 & 
URB_NO_INTERRUPT
) == 0))

376 
cbl
 |
TD_IE
;

378 i‡(
ödex
 =(
urb_¥iv
->
td_˙t
 - 1))

379 
cbl
 |
TD_IE
;

383 
td_±
 = 
urb_¥iv
->
td
[
ödex
];

386 
td
 = 
urb_¥iv
->td[
ödex
] = urb_¥iv->
ed
->
dummy
;

387 
urb_¥iv
->
ed
->
dummy
 = 
td_±
;

389 
td
->
ed
 = 
urb_¥iv
->ed;

390 
td
->
√xt_dl_td
 = 
NULL
;

391 
td
->
ödex
 = index;

392 
td
->
urb
 = urb;

393 
td
->
d©a_dma
 = 
d©a
;

394 i‡(!
Àn
)

395 
d©a
 = 0;

397 i‡(
d©a
)

398 
cbl
 |(
Àn
 & 
TD_BL_MASK
);

400 
öfo
 |
TD_OWN
;

403 
td
->
hwINFO
 = 
	`˝u_to_hc32
(
ahcd
, 
öfo
);

404 
td
->
hwDBP
 = 
	`˝u_to_hc32
(
ahcd
, 
d©a
);

405 
td
->
hwCBL
 = 
	`˝u_to_hc32
(
ahcd
, 
cbl
);

406 
td
->
hwNextTD
 = 
	`˝u_to_hc32
(
ahcd
, 
td_±
->
td_dma
);

409 
	`li°_add_èû
(&
td
->
td_li°
, &td->
ed
->td_list);

412 
hash
 = 
	`TD_HASH_FUNC
(
td
->
td_dma
);

413 
td
->
td_hash
 = 
ahcd
->td_hash[
hash
];

414 
ahcd
->
td_hash
[
hash
] = 
td
;

417 
	`wmb
();

418 
td
->
ed
->
hwTaûP
 =Åd->
hwNextTD
;

419 
	}
}

428 
	$td_submô_urb
(
admhcd
 *
ahcd
, 
urb
 *urb)

430 
urb_¥iv
 *urb_¥iv = 
urb
->
h˝riv
;

431 
dma_addr_t
 
d©a
;

432 
d©a_Àn
 = 
urb
->
å™s„r_buf„r_Àngth
;

433 
˙t
 = 0;

434 
u32
 
öfo
 = 0;

435 
is_out
 = 
	`usb_pùeout
(
urb
->
pùe
);

436 
u32
 
toggÀ
 = 0;

443 i‡(
	`usb_gëtoggÀ
(
urb
->
dev
, 
	`usb_pùìndpoöt
(urb->
pùe
), 
is_out
)) {

444 
toggÀ
 = 
TD_T_CARRY
;

446 
toggÀ
 = 
TD_T_DATA0
;

447 
	`usb_£âoggÀ
(
urb
->
dev
, 
	`usb_pùìndpoöt
 (urb->
pùe
),

448 
is_out
, 1);

451 
urb_¥iv
->
td_idx
 = 0;

452 
	`li°_add
(&
urb_¥iv
->
≥ndög
, &
ahcd
->pending);

454 i‡(
d©a_Àn
)

455 
d©a
 = 
urb
->
å™s„r_dma
;

457 
d©a
 = 0;

463 
urb_¥iv
->
ed
->
ty≥
) {

464 
PIPE_INTERRUPT
:

465 
öfo
 = 
is_out


466 ? 
TD_T_CARRY
 | 
TD_SCC_NOTACCESSED
 | 
TD_DP_OUT


467 : 
TD_T_CARRY
 | 
TD_SCC_NOTACCESSED
 | 
TD_DP_IN
;

470 
öfo
 |(
urb
->
°¨t_‰ame
 & 
TD_FN_MASK
);

471 
öfo
 |(
urb
->
öãrvÆ
 & 
TD_ISI_MASK
Ë<< 
TD_ISI_SHIFT
;

473 
	`td_fûl
(
ahcd
, 
öfo
, 
d©a
, 
d©a_Àn
, 
urb
, 
˙t
);

474 
˙t
++;

476 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_öt_ªqs
++;

479 
PIPE_BULK
:

480 
öfo
 = 
is_out


481 ? 
TD_SCC_NOTACCESSED
 | 
TD_DP_OUT


482 : 
TD_SCC_NOTACCESSED
 | 
TD_DP_IN
;

485 
d©a_Àn
 > 
TD_DATALEN_MAX
) {

486 
	`td_fûl
(
ahcd
, 
öfo
 | ((
˙t
Ë? 
TD_T_CARRY
 : 
toggÀ
),

487 
d©a
, 
TD_DATALEN_MAX
, 
urb
, 
˙t
);

488 
d©a
 +
TD_DATALEN_MAX
;

489 
d©a_Àn
 -
TD_DATALEN_MAX
;

490 
˙t
++;

493 
	`td_fûl
(
ahcd
, 
öfo
 | ((
˙t
Ë? 
TD_T_CARRY
 : 
toggÀ
), 
d©a
,

494 
d©a_Àn
, 
urb
, 
˙t
);

495 
˙t
++;

497 i‡((
urb
->
å™s„r_Êags
 & 
URB_ZERO_PACKET
)

498 && (
˙t
 < 
urb_¥iv
->
td_˙t
)) {

499 
	`td_fûl
(
ahcd
, 
öfo
 | ((
˙t
Ë? 
TD_T_CARRY
 : 
toggÀ
),

500 0, 0, 
urb
, 
˙t
);

501 
˙t
++;

508 
PIPE_CONTROL
:

510 
öfo
 = 
TD_SCC_NOTACCESSED
 | 
TD_DP_SETUP
 | 
TD_T_DATA0
;

511 
	`td_fûl
(
ahcd
, 
öfo
, 
urb
->
£tup_dma
, 8, urb, 
˙t
++);

513 i‡(
d©a_Àn
 > 0) {

515 
öfo
 = 
TD_SCC_NOTACCESSED
 | 
TD_T_DATA1
;

516 
öfo
 |
is_out
 ? 
TD_DP_OUT
 : 
TD_DP_IN
;

518 
	`td_fûl
(
ahcd
, 
öfo
, 
d©a
, 
d©a_Àn
, 
urb
, 
˙t
++);

522 
öfo
 = (
is_out
 || 
d©a_Àn
 == 0)

523 ? 
TD_SCC_NOTACCESSED
 | 
TD_DP_IN
 | 
TD_T_DATA1


524 : 
TD_SCC_NOTACCESSED
 | 
TD_DP_OUT
 | 
TD_T_DATA1
;

525 
	`td_fûl
(
ahcd
, 
öfo
, 
d©a
, 0, 
urb
, 
˙t
++);

533 
PIPE_ISOCHRONOUS
:

534 
öfo
 = 
is_out


535 ? 
TD_T_CARRY
 | 
TD_SCC_NOTACCESSED
 | 
TD_DP_OUT


536 : 
TD_T_CARRY
 | 
TD_SCC_NOTACCESSED
 | 
TD_DP_IN
;

538 
˙t
 = 0; c¡ < 
urb
->
numbî_of_∑ckës
; cnt++) {

539 
‰ame
 = 
urb
->
°¨t_‰ame
;

541 
‰ame
 +
˙t
 * 
urb
->
öãrvÆ
;

542 
‰ame
 &
TD_FN_MASK
;

543 
	`td_fûl
(
ahcd
, 
öfo
 | 
‰ame
,

544 
d©a
 + 
urb
->
iso_‰ame_desc
[
˙t
].
off£t
,

545 
urb
->
iso_‰ame_desc
[
˙t
].
Àngth
, urb, cnt);

547 
	`admhcd_to_hcd
(
ahcd
)->
£lf
.
b™dwidth_isoc_ªqs
++;

551 i‡(
urb_¥iv
->
td_˙t
 !
˙t
)

552 
	`admhc_îr
(
ahcd
, "badÇumbî o‡td†¸óãd f‹ urb %p\n", 
urb
);

553 
	}
}

560 
	$td_d⁄e
(
admhcd
 *
ahcd
, 
urb
 *urb, 
td
 *td)

562 
urb_¥iv
 *urb_¥iv = 
urb
->
h˝riv
;

563 
u32
 
öfo
;

564 
u32
 
bl
;

565 
u32
 
tdDBP
;

566 
ty≥
 = 
	`usb_pùëy≥
(
urb
->
pùe
);

567 
cc
;

568 
°©us
 = -
EINPROGRESS
;

570 
öfo
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwINFO
);

571 
tdDBP
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwDBP
);

572 
bl
 = 
	`TD_BL_GET
(
	`hc32_to_˝up
(
ahcd
, &
td
->
hwCBL
));

573 
cc
 = 
	`TD_CC_GET
(
öfo
);

576 i‡(
ty≥
 =
PIPE_ISOCHRONOUS
) {

578 
dÀn
 = 0;

583 i‡(
öfo
 & 
TD_CC
)

584  
°©us
;

586 i‡(
	`usb_pùeout
(
urb
->
pùe
))

587 
dÀn
 = 
urb
->
iso_‰ame_desc
[
td
->
ödex
].
Àngth
;

590 i‡(
cc
 =
TD_CC_DATAUNDERRUN
)

591 
cc
 = 
TD_CC_NOERROR
;

592 
dÀn
 = 
tdDBP
 - 
td
->
d©a_dma
 + 
bl
;

595 
urb
->
a˘uÆ_Àngth
 +
dÀn
;

596 
urb
->
iso_‰ame_desc
[
td
->
ödex
].
a˘uÆ_Àngth
 = 
dÀn
;

597 
urb
->
iso_‰ame_desc
[
td
->
ödex
].
°©us
 = 
cc_to_îr‹
[
cc
];

599 i‡(
cc
 !
TD_CC_NOERROR
)

600 
	`admhc_vdbg
(
ahcd
,

602 
urb
, 
td
, 1 +Åd->
ödex
, 
dÀn
, 
cc
);

610 i‡(
cc
 =
TD_CC_DATAUNDERRUN


611 && !(
urb
->
å™s„r_Êags
 & 
URB_SHORT_NOT_OK
))

612 
cc
 = 
TD_CC_NOERROR
;

614 i‡(
cc
 !
TD_CC_NOERROR
 && c¯< 
TD_CC_HCD0
)

615 
°©us
 = 
cc_to_îr‹
[
cc
];

619 i‡((
ty≥
 !
PIPE_CONTROL
 || 
td
->
ödex
 !0Ë&& 
tdDBP
 != 0)

620 
urb
->
a˘uÆ_Àngth
 +
tdDBP
 - 
td
->
d©a_dma
 + 
bl
;

622 i‡(
cc
 !
TD_CC_NOERROR
 && c¯< 
TD_CC_HCD0
)

623 
	`admhc_vdbg
(
ahcd
,

625 
urb
, 
td
,Åd->
ödex
, 
cc
,

626 
urb
->
a˘uÆ_Àngth
,

627 
urb
->
å™s„r_buf„r_Àngth
);

630 
	`li°_dñ
(&
td
->
td_li°
);

631 
urb_¥iv
->
td_idx
++;

633  
°©us
;

634 
	}
}

638 
	$ed_hÆãd
(
admhcd
 *
ahcd
, 
td
 *td, 
cc
)

640 
urb
 *urb = 
td
->urb;

641 
urb_¥iv
 *urb_¥iv = 
urb
->
h˝riv
;

642 
ed
 *ed = 
td
->ed;

643 
li°_hód
 *
tmp
 = 
td
->
td_li°
.
√xt
;

644 
__hc32
 
toggÀ
 = 
ed
->
hwHódP
 & 
	`˝u_to_hc32
(
ahcd
, 
ED_C
);

646 
	`admhc_dump_ed
(
ahcd
, "ed hÆãd", 
td
->
ed
, 1);

650 
ed
->
hwINFO
 |
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
);

651 
	`wmb
();

652 
ed
->
hwHódP
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_H
);

658 
tmp
 !&
ed
->
td_li°
) {

659 
td
 *
√xt
;

661 
√xt
 = 
	`li°_íåy
(
tmp
, 
td
, 
td_li°
);

662 
tmp
 = 
√xt
->
td_li°
.next;

664 i‡(
√xt
->
urb
 != urb)

674 
	`li°_dñ
(&
√xt
->
td_li°
);

675 
urb_¥iv
->
td_˙t
++;

676 
ed
->
hwHódP
 = 
√xt
->
hwNextTD
 | 
toggÀ
;

683 
cc
) {

684 
TD_CC_DATAUNDERRUN
:

685 i‡((
urb
->
å™s„r_Êags
 & 
URB_SHORT_NOT_OK
) == 0)

688 
TD_CC_STALL
:

689 i‡(
	`usb_pùec⁄åﬁ
(
urb
->
pùe
))

693 
	`admhc_dbg
(
ahcd
,

695 
urb
, urb->
dev
->
dev∑th
,

696 
	`usb_pùìndpoöt
 (
urb
->
pùe
),

697 
	`usb_pùeö
(
urb
->
pùe
) ? "in" : "out",

698 
	`hc32_to_˝u
(
ahcd
, 
td
->
hwINFO
),

699 
cc
, 
cc_to_îr‹
[cc]);

701 
	}
}

707 
	$föish_u∆öks
(
admhcd
 *
ahcd
, 
u16
 
tick
)

709 
ed
 *ed, **
œ°
;

711 
ªsˇn_Æl
:

712 
œ°
 = &
ahcd
->
ed_rm_li°
, 
ed
 = *œ°;Éd !
NULL
;Éd = *last) {

713 
li°_hód
 *
íåy
, *
tmp
;

714 
com∂ëed
, 
modifõd
;

715 
__hc32
 *
¥ev
;

720 i‡(
	`likñy
(
	`HC_IS_RUNNING
(
	`admhcd_to_hcd
(
ahcd
)->
°©e
))) {

721 i‡(
	`tick_bef‹e
(
tick
, 
ed
->tick)) {

722 
skù_ed
:

723 
œ°
 = &
ed
->
ed_rm_√xt
;

727 i‡(!
	`li°_em±y
(&
ed
->
td_li°
)) {

728 
td
 *td;

729 
u32
 
hód
;

731 
td
 = 
	`li°_íåy
(
ed
->
td_li°
.
√xt
, td,

732 
td_li°
);

733 
hód
 = 
	`hc32_to_˝u
(
ahcd
, 
ed
->
hwHódP
) &

734 
TD_MASK
;

737 i‡(
td
->
td_dma
 !
hód
)

738 
skù_ed
;

747 *
œ°
 = 
ed
->
ed_rm_√xt
;

748 
ed
->
ed_rm_√xt
 = 
NULL
;

749 
modifõd
 = 0;

759 
ªsˇn_this
:

760 
com∂ëed
 = 0;

761 
¥ev
 = &
ed
->
hwHódP
;

762 
	`li°_f‹_óch_ß„
(
íåy
, 
tmp
, &
ed
->
td_li°
) {

763 
td
 *td;

764 
urb
 *urb;

765 
urb_¥iv
 *urb_priv;

766 
__hc32
 
ßvebôs
;

767 
u32
 
tdINFO
;

768 
°©us
;

770 
td
 = 
	`li°_íåy
(
íåy
, td, 
td_li°
);

771 
urb
 = 
td
->urb;

772 
urb_¥iv
 = 
td
->
urb
->
h˝riv
;

774 i‡(!
urb
->
u∆öked
) {

775 
¥ev
 = &
td
->
hwNextTD
;

779 i‡((
urb_¥iv
Ë=
NULL
)

783 
ßvebôs
 = *
¥ev
 & ~
	`˝u_to_hc32
(
ahcd
, 
TD_MASK
);

784 *
¥ev
 = 
td
->
hwNextTD
 | 
ßvebôs
;

790 
tdINFO
 = 
	`hc32_to_˝up
(
ahcd
, &
td
->
hwINFO
);

791 i‡((
tdINFO
 & 
TD_T
Ë=
TD_T_DATA0
)

792 
ed
->
hwHódP
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_C
);

793 i‡((
tdINFO
 & 
TD_T
Ë=
TD_T_DATA1
)

794 
ed
->
hwHódP
 |
	`˝u_to_hc32
(
ahcd
, 
ED_C
);

797 #ifde‡
ADMHC_VERBOSE_DEBUG


798 
	`urb_¥öt
(
ahcd
, 
urb
, "PARTIAL", 0);

800 
°©us
 = 
	`td_d⁄e
(
ahcd
, 
urb
, 
td
);

803 i‡(
urb_¥iv
->
td_idx
 =urb_¥iv->
td_˙t
) {

804 
modifõd
 = 
com∂ëed
 = 1;

805 
	`föish_urb
(
ahcd
, 
urb
, 
°©us
);

808 i‡(
com∂ëed
 && !
	`li°_em±y
(&
ed
->
td_li°
))

809 
ªsˇn_this
;

812 
ed
->
°©e
 = 
ED_IDLE
;

813 
ed
->
hwHódP
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_H
);

814 
ed
->
hwNextED
 = 0;

815 
	`wmb
();

816 
ed
->
hwINFO
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
 | 
ED_DEQUEUE
);

819 i‡(!
	`li°_em±y
(&
ed
->
td_li°
)) {

820 i‡(
	`HC_IS_RUNNING
(
	`admhcd_to_hcd
(
ahcd
)->
°©e
))

821 
	`ed_scheduÀ
(
ahcd
, 
ed
);

824 i‡(
modifõd
)

825 
ªsˇn_Æl
;

827 
	}
}

838 
	$ed_unhÆt
(
admhcd
 *
ahcd
, 
ed
 *ed, 
urb
 *urb)

840 
li°_hód
 *
íåy
, *
tmp
;

841 
__hc32
 
toggÀ
 = 
ed
->
hwHódP
 & 
	`˝u_to_hc32
(
ahcd
, 
ED_C
);

843 #ifde‡
ADMHC_VERBOSE_DEBUG


844 
	`admhc_dump_ed
(
ahcd
, "UNHALT", 
ed
, 0);

849 
ed
->
hwINFO
 |
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
);

850 
	`wmb
();

851 
ed
->
hwHódP
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_H
);

853 
	`li°_f‹_óch_ß„
(
íåy
, 
tmp
, &
ed
->
td_li°
) {

854 
td
 *td = 
	`li°_íåy
(
íåy
, td, 
td_li°
);

855 
__hc32
 
öfo
;

857 i‡(
td
->
urb
 != urb)

860 
öfo
 = 
td
->
hwINFO
;

861 
öfo
 &~
	`˝u_to_hc32
(
ahcd
, 
TD_CC
 | 
TD_OWN
);

862 
td
->
hwINFO
 = 
öfo
;

864 
ed
->
hwHódP
 = 
td
->
hwNextTD
 | 
toggÀ
;

865 
	`wmb
();

868 
	}
}

870 
	$ed_öå_ªfûl
(
admhcd
 *
ahcd
, 
ed
 *ed)

872 
__hc32
 
toggÀ
 = 
ed
->
hwHódP
 & 
	`˝u_to_hc32
(
ahcd
, 
ED_C
);

874 
ed
->
hwHódP
 =Éd->
hwTaûP
 | 
toggÀ
;

875 
	}
}

878 
ölöe
 
	$is_ed_hÆãd
(
admhcd
 *
ahcd
, 
ed
 *ed)

880  ((
	`hc32_to_˝up
(
ahcd
, &
ed
->
hwHódP
Ë& 
ED_H
) == ED_H);

881 
	}
}

883 
ölöe
 
	$is_td_hÆãd
(
admhcd
 *
ahcd
, 
ed
 *ed,

884 
td
 *td)

886  ((
	`hc32_to_˝up
(
ahcd
, &
ed
->
hwHódP
Ë& 
TD_MASK
) ==

887 (
	`hc32_to_˝up
(
ahcd
, &
td
->
hwNextTD
Ë& 
TD_MASK
));

888 
	}
}

890 
	$ed_upd©e
(
admhcd
 *
ahcd
, 
ed
 *ed)

892 
li°_hód
 *
íåy
, *
tmp
;

894 #ifde‡
ADMHC_VERBOSE_DEBUG


895 
	`admhc_dump_ed
(
ahcd
, "UPDATE", 
ed
, 1);

898 
	`li°_f‹_óch_ß„
(
íåy
, 
tmp
, &
ed
->
td_li°
) {

899 
td
 *td = 
	`li°_íåy
(
íåy
, td, 
td_li°
);

900 
urb
 *urb = 
td
->urb;

901 
urb_¥iv
 *urb_¥iv = 
urb
->
h˝riv
;

902 
°©us
;

904 i‡(
	`hc32_to_˝up
(
ahcd
, &
td
->
hwINFO
Ë& 
TD_OWN
)

908 
°©us
 = 
	`td_d⁄e
(
ahcd
, 
urb
, 
td
);

909 i‡(
	`is_ed_hÆãd
(
ahcd
, 
ed
Ë&& 
	`is_td_hÆãd
◊hcd,Éd, 
td
))

910 
	`ed_unhÆt
(
ahcd
, 
ed
, 
urb
);

912 i‡(
ed
->
ty≥
 =
PIPE_INTERRUPT
)

913 
	`ed_öå_ªfûl
(
ahcd
, 
ed
);

916 i‡(
urb_¥iv
->
td_idx
 =urb_¥iv->
td_˙t
)

917 
	`föish_urb
(
ahcd
, 
urb
, 
°©us
);

920 i‡(
	`li°_em±y
(&
ed
->
td_li°
)) {

921 i‡(
ed
->
°©e
 =
ED_OPER
)

922 
	`°¨t_ed_u∆ök
(
ahcd
, 
ed
);

925 } i‡((
ed
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
,

926 
ED_SKIP
 | 
ED_DEQUEUE
))

927 =
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
)) {

928 
td
 = 
	`li°_íåy
(
ed
->
td_li°
.
√xt
, td,Åd_list);

930 i‡(!(
td
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
, 
TD_DONE
))) {

931 
ed
->
hwINFO
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
);

933 
ed
->
ty≥
) {

934 
PIPE_CONTROL
:

935 
	`admhc_wrôñ
(
ahcd
, 
OHCI_CLF
,

936 &
ahcd
->
ªgs
->
cmd°©us
);

938 
PIPE_BULK
:

939 
	`admhc_wrôñ
(
ahcd
, 
OHCI_BLF
,

940 &
ahcd
->
ªgs
->
cmd°©us
);

945 i‡((
td
->
hwINFO
 & 
	`˝u_to_hc32
(
ahcd
, 
TD_OWN
)))

946 
ed
->
hwINFO
 &~
	`˝u_to_hc32
(
ahcd
, 
ED_SKIP
);

951 
	}
}

954 
	$admhc_td_com∂ëe
(
admhcd
 *
ahcd
)

956 
ed
 *ed;

958 
ed
 = 
ahcd
->
ed_hód
;Éd;Éd =Éd->
ed_√xt
) {

959 i‡(
ed
->
°©e
 !
ED_OPER
)

962 
	`ed_upd©e
(
ahcd
, 
ed
);

964 
	}
}

	@linux/adm5120/files-3.18/drivers/usb/host/adm5120.h

21 
__u32
 
	t__bôwi£
 
	t__hc32
;

22 
__u16
 
	t__bôwi£
 
	t__hc16
;

32 
	#TD_DATALEN_MAX
 4096

	)

34 
	#ED_ALIGN
 16

	)

35 
	#ED_MASK
 ((
u32
)~(
ED_ALIGN
-1)Ë

	)

37 
	sed
 {

39 
__hc32
 
	mhwINFO
;

41 
	#ED_DEQUEUE
 (1 << 27)

	)

43 
	#ED_MPS_SHIFT
 16

	)

44 
	#ED_MPS_MASK
 ((1 << 11)-1)

	)

45 
	#ED_MPS_GET
(
x
Ë(((xË>> 
ED_MPS_SHIFT
Ë& 
ED_MPS_MASK
)

	)

46 
	#ED_ISO
 (1 << 15Ë

	)

47 
	#ED_SKIP
 (1 << 14)

	)

48 
	#ED_SPEED_FULL
 (1 << 13Ë

	)

49 
	#ED_INT
 (1 << 11Ë

	)

50 
	#ED_EN_SHIFT
 7

	)

51 
	#ED_EN_MASK
 ((1 << 4)-1Ë

	)

52 
	#ED_EN_GET
(
x
Ë(((xË>> 
ED_EN_SHIFT
Ë& 
ED_EN_MASK
)

	)

53 
	#ED_FA_MASK
 ((1 << 7)-1Ë

	)

54 
	#ED_FA_GET
(
x
Ë((xË& 
ED_FA_MASK
)

	)

55 
__hc32
 
	mhwTaûP
;

56 
__hc32
 
	mhwHódP
;

57 
	#ED_C
 (0x02Ë

	)

58 
	#ED_H
 (0x01Ë

	)

59 
__hc32
 
	mhwNextED
;

62 
dma_addr_t
 
	mdma
;

63 
td
 *
	mdummy
;

65 
li°_hód
 
	murb_li°
;

68 
ed
 *
	med_√xt
;

69 
ed
 *
	med_¥ev
;

70 
ed
 *
	med_rm_√xt
;

71 
li°_hód
 
	mtd_li°
;

76 
u8
 
	m°©e
;

77 
	#ED_IDLE
 0x00

	)

78 
	#ED_UNLINK
 0x01

	)

79 
	#ED_OPER
 0x02

	)

81 
u8
 
	mty≥
;

84 
u8
 
	mbønch
;

85 
u16
 
	möãrvÆ
;

86 
u16
 
	mlﬂd
;

87 
u16
 
	mœ°_iso
;

90 
u16
 
	mtick
;

91 } 
__©åibuã__
 ((
Æig√d
(
ED_ALIGN
)));

99 
	#TD_ALIGN
 32

	)

100 
	#TD_MASK
 ((
u32
)~(
TD_ALIGN
-1)Ë

	)

102 
	std
 {

104 
__hc32
 
	mhwINFO
;

107 
	#TD_OWN
 (1 << 31Ë

	)

108 
	#TD_CC_SHIFT
 27

	)

109 
	#TD_CC_MASK
 0xf

	)

110 
	#TD_CC
 (
TD_CC_MASK
 << 
TD_CC_SHIFT
)

	)

111 
	#TD_CC_GET
(
x
Ë(((xË>> 
TD_CC_SHIFT
Ë& 
TD_CC_MASK
)

	)

113 
	#TD_EC_SHIFT
 25

	)

114 
	#TD_EC_MASK
 0x3

	)

115 
	#TD_EC
 (
TD_EC_MASK
 << 
TD_EC_SHIFT
)

	)

116 
	#TD_EC_GET
(
x
Ë((x >> 
TD_EC_SHIFT
Ë& 
TD_EC_MASK
)

	)

117 
	#TD_T_SHIFT
 23

	)

118 
	#TD_T_MASK
 0x3

	)

119 
	#TD_T
 (
TD_T_MASK
 << 
TD_T_SHIFT
)

	)

120 
	#TD_T_DATA0
 (0x2 << 
TD_T_SHIFT
Ë

	)

121 
	#TD_T_DATA1
 (0x3 << 
TD_T_SHIFT
Ë

	)

122 
	#TD_T_CARRY
 (0x0 << 
TD_T_SHIFT
Ë

	)

123 
	#TD_T_GET
(
x
Ë(((xË>> 
TD_T_SHIFT
Ë& 
TD_T_MASK
)

	)

124 
	#TD_DP_SHIFT
 21

	)

125 
	#TD_DP_MASK
 0x3

	)

126 
	#TD_DP
 (
TD_DP_MASK
 << 
TD_DP_SHIFT
)

	)

127 
	#TD_DP_GET
 (((
x
Ë>> 
TD_DP_SHIFT
Ë& 
TD_DP_MASK
)

	)

128 
	#TD_DP_SETUP
 (0x0 << 
TD_DP_SHIFT
Ë

	)

129 
	#TD_DP_OUT
 (0x1 << 
TD_DP_SHIFT
Ë

	)

130 
	#TD_DP_IN
 (0x2 << 
TD_DP_SHIFT
Ë

	)

131 
	#TD_ISI_SHIFT
 8

	)

132 
	#TD_ISI_MASK
 0x3f

	)

133 
	#TD_ISI_GET
(
x
Ë(((xË>> 
TD_ISI_SHIFT
Ë& 
TD_ISI_MASK
)

	)

134 
	#TD_FN_MASK
 0x3‡

	)

135 
	#TD_FN_GET
(
x
Ë((xË& 
TD_FN_MASK
)

	)

137 
__hc32
 
	mhwDBP
;

138 
__hc32
 
	mhwCBL
;

141 
	#TD_BL_MASK
 0xfff‡

	)

142 
	#TD_BL_GET
(
x
Ë((xË& 
TD_BL_MASK
)

	)

143 
	#TD_IE
 (1 << 16Ë

	)

144 
__hc32
 
	mhwNextTD
;

147 
__u8
 
	mödex
;

148 
ed
 *
	med
;

149 
td
 *
	mtd_hash
;

150 
td
 *
	m√xt_dl_td
;

151 
urb
 *
	murb
;

153 
dma_addr_t
 
	mtd_dma
;

154 
dma_addr_t
 
	md©a_dma
;

156 
li°_hód
 
	mtd_li°
;

158 
u32
 
	mÊags
;

159 
	#TD_FLAG_DONE
 (1 << 17Ë

	)

160 
	#TD_FLAG_ISO
 (1 << 16Ë

	)

161 } 
__©åibuã__
 ((
Æig√d
(
TD_ALIGN
)));

166 
	#TD_CC_NOERROR
 0x00

	)

167 
	#TD_CC_CRC
 0x01

	)

168 
	#TD_CC_BITSTUFFING
 0x02

	)

169 
	#TD_CC_DATATOGGLEM
 0x03

	)

170 
	#TD_CC_STALL
 0x04

	)

171 
	#TD_CC_DEVNOTRESP
 0x05

	)

172 
	#TD_CC_PIDCHECKFAIL
 0x06

	)

173 
	#TD_CC_UNEXPECTEDPID
 0x07

	)

174 
	#TD_CC_DATAOVERRUN
 0x08

	)

175 
	#TD_CC_DATAUNDERRUN
 0x09

	)

177 
	#TD_CC_BUFFEROVERRUN
 0x0C

	)

178 
	#TD_CC_BUFFERUNDERRUN
 0x0D

	)

180 
	#TD_CC_HCD0
 0x0E

	)

181 
	#TD_CC_NOTACCESSED
 0x0F

	)

186 
	#TD_SCC_NOTACCESSED
 (
TD_CC_NOTACCESSED
 << 
TD_CC_SHIFT
)

	)

190 c⁄° 
	gcc_to_îr‹
[16] = {

192  -
EILSEQ
,

193  -
EPROTO
,

194  -
EILSEQ
,

195  -
EPIPE
,

196  -
ETIME
,

197  -
EPROTO
,

198  -
EPROTO
,

199  -
EOVERFLOW
,

200  -
EREMOTEIO
,

201  -
EIO
,

202  -
EIO
,

203  -
ECOMM
,

204  -
ENOSR
,

205  -
EALREADY
,

206  -
EALREADY


209 
	#NUM_INTS
 32

	)

216 
	sadmhcd_ªgs
 {

217 
__hc32
 
	mgíc⁄åﬁ
;

218 
__hc32
 
	möt_°©us
;

219 
__hc32
 
	möt_íabÀ
;

220 
__hc32
 
	mª£rved00
;

221 
__hc32
 
	mho°_c⁄åﬁ
;

222 
__hc32
 
	mª£rved01
;

223 
__hc32
 
	mfmöãrvÆ
;

224 
__hc32
 
	mfmnumbî
;

225 
__hc32
 
	mª£rved02
;

226 
__hc32
 
	mª£rved03
;

227 
__hc32
 
	mª£rved04
;

228 
__hc32
 
	mª£rved05
;

229 
__hc32
 
	mª£rved06
;

230 
__hc32
 
	mª£rved07
;

231 
__hc32
 
	mª£rved08
;

232 
__hc32
 
	mª£rved09
;

233 
__hc32
 
	mª£rved10
;

234 
__hc32
 
	mª£rved11
;

235 
__hc32
 
	mª£rved12
;

236 
__hc32
 
	mª£rved13
;

237 
__hc32
 
	mª£rved14
;

238 
__hc32
 
	mª£rved15
;

239 
__hc32
 
	mª£rved16
;

240 
__hc32
 
	mª£rved17
;

241 
__hc32
 
	mª£rved18
;

242 
__hc32
 
	mª£rved19
;

243 
__hc32
 
	mª£rved20
;

244 
__hc32
 
	mª£rved21
;

245 
__hc32
 
	ml°hªsh
;

246 
__hc32
 
	mrhdesc
;

247 
	#MAX_ROOT_PORTS
 2

	)

248 
__hc32
 
	mp‹t°©us
[
MAX_ROOT_PORTS
];

249 
__hc32
 
	mho°hód
;

250 } 
__©åibuã__
 ((
Æig√d
(32)));

255 
	#ADMHC_CTRL_UHFE
 (1 << 0Ë

	)

256 
	#ADMHC_CTRL_SIR
 (1 << 1Ë

	)

257 
	#ADMHC_CTRL_DMAA
 (1 << 2Ë

	)

258 
	#ADMHC_CTRL_SR
 (1 << 3Ë

	)

263 
	#ADMHC_HC_BUSS
 0x3

	)

264 
	#ADMHC_BUSS_RESET
 0x0

	)

265 
	#ADMHC_BUSS_RESUME
 0x1

	)

266 
	#ADMHC_BUSS_OPER
 0x2

	)

267 
	#ADMHC_BUSS_SUSPEND
 0x3

	)

268 
	#ADMHC_HC_DMAE
 (1 << 2Ë

	)

273 
	#ADMHC_INTR_SOFI
 (1 << 4Ë

	)

274 
	#ADMHC_INTR_RESI
 (1 << 5Ë

	)

275 
	#ADMHC_INTR_6
 (1 << 6Ë

	)

276 
	#ADMHC_INTR_7
 (1 << 7Ë

	)

277 
	#ADMHC_INTR_BABI
 (1 << 8Ë

	)

278 
	#ADMHC_INTR_INSM
 (1 << 9Ë

	)

279 
	#ADMHC_INTR_SO
 (1 << 10Ë

	)

280 
	#ADMHC_INTR_FNO
 (1 << 11Ë

	)

281 
	#ADMHC_INTR_TDC
 (1 << 20Ë

	)

282 
	#ADMHC_INTR_SWI
 (1 << 29Ë

	)

283 
	#ADMHC_INTR_FATI
 (1 << 30Ë

	)

284 
	#ADMHC_INTR_INTA
 (1 << 31Ë

	)

286 
	#ADMHC_INTR_MIE
 (1 << 31Ë

	)

291 
	#ADMHC_SFI_FI_MASK
 ((1 << 14)-1Ë

	)

292 
	#ADMHC_SFI_FSLDP_SHIFT
 16

	)

293 
	#ADMHC_SFI_FSLDP_MASK
 ((1 << 15)-1)

	)

294 
	#ADMHC_SFI_FIT
 (1 << 31Ë

	)

299 
	#ADMHC_SFN_FN_MASK
 ((1 << 16)-1Ë

	)

300 
	#ADMHC_SFN_FR_SHIFT
 16

	)

301 
	#ADMHC_SFN_FR_MASK
 ((1 << 14)-1Ë

	)

302 
	#ADMHC_SFN_FRT
 (1 << 31Ë

	)

307 
	#ADMHC_RH_NUMP
 0xf‡

	)

308 
	#ADMHC_RH_PSM
 (1 << 8Ë

	)

309 
	#ADMHC_RH_NPS
 (1 << 9Ë

	)

310 
	#ADMHC_RH_OCPM
 (1 << 10Ë

	)

311 
	#ADMHC_RH_NOCP
 (1 << 11Ë

	)

312 
	#ADMHC_RH_PPCM
 (0xf‡<< 16Ë

	)

314 
	#ADMHC_RH_LPS
 (1 << 24Ë

	)

315 
	#ADMHC_RH_OCI
 (1 << 25Ë

	)

318 
	#ADMHC_RH_LPSC
 (1 << 26Ë

	)

319 
	#ADMHC_RH_OCIC
 (1 << 27Ë

	)

321 
	#ADMHC_RH_DRWE
 (1 << 28Ë

	)

322 
	#ADMHC_RH_CRWE
 (1 << 29Ë

	)

324 
	#ADMHC_RH_CGP
 (1 << 24Ë

	)

325 
	#ADMHC_RH_SGP
 (1 << 26Ë

	)

330 
	#ADMHC_PS_CCS
 (1 << 0Ë

	)

331 
	#ADMHC_PS_PES
 (1 << 1Ë

	)

332 
	#ADMHC_PS_PSS
 (1 << 2Ë

	)

333 
	#ADMHC_PS_POCI
 (1 << 3Ë

	)

334 
	#ADMHC_PS_PRS
 (1 << 4Ë

	)

335 
	#ADMHC_PS_PPS
 (1 << 8Ë

	)

336 
	#ADMHC_PS_LSDA
 (1 << 9Ë

	)

339 
	#ADMHC_PS_CSC
 (1 << 16Ë

	)

340 
	#ADMHC_PS_PESC
 (1 << 17Ë

	)

341 
	#ADMHC_PS_PSSC
 (1 << 18Ë

	)

342 
	#ADMHC_PS_OCIC
 (1 << 19Ë

	)

343 
	#ADMHC_PS_PRSC
 (1 << 20Ë

	)

346 
	#ADMHC_PS_CPE
 (1 << 0Ë

	)

347 
	#ADMHC_PS_SPE
 (1 << 1Ë

	)

348 
	#ADMHC_PS_SPS
 (1 << 2Ë

	)

349 
	#ADMHC_PS_CPS
 (1 << 3Ë

	)

350 
	#ADMHC_PS_SPR
 (1 << 4Ë

	)

351 
	#ADMHC_PS_SPP
 (1 << 8Ë

	)

352 
	#ADMHC_PS_CPP
 (1 << 9Ë

	)

357 
	#ADMHC_POTPGT
 2

	)

360 
	surb_¥iv
 {

361 
ed
 *
	med
;

362 
li°_hód
 
	m≥ndög
;

364 
u32
 
	mtd_˙t
;

365 
u32
 
	mtd_idx
;

366 
td
 *
	mtd
[0];

369 
	#TD_HASH_SIZE
 64

	)

371 
	#TD_HASH_FUNC
(
td_dma
Ë(—d_dm®^ (td_dm®>> 6)Ë% 
TD_HASH_SIZE
)

	)

380 
	sadmhcd
 {

381 
•ölock_t
 
	mlock
;

386 
admhcd_ªgs
 
__iomem
 *
	mªgs
;

393 
ed
 *
	med_hód
;

394 
ed
 *
	med_èûs
[4];

396 
ed
 *
	med_rm_li°
;

398 
ed
 *
	m≥riodic
[
NUM_INTS
];

405 
Ÿg_å™s˚ivî
 *
	må™s˚ivî
;

406 (*
	m°¨t_h≈
)(
admhcd
 *
	mahcd
);

412 
dma_poﬁ
 *
	mtd_ˇche
;

413 
dma_poﬁ
 *
	med_ˇche
;

414 
td
 *
	mtd_hash
[
TD_HASH_SIZE
];

415 
li°_hód
 
	m≥ndög
;

420 
	mnum_p‹ts
;

421 
	mlﬂd
[
NUM_INTS
];

422 
u32
 
	mho°_c⁄åﬁ
;

423 
	m√xt_°©ech™ge
;

424 
u32
 
	mfmöãrvÆ
;

425 
	mauto°›
:1;

427 
	mÊags
;

428 
	#OHCI_QUIRK_AMD756
 0x01

	)

429 
	#OHCI_QUIRK_SUPERIO
 0x02

	)

430 
	#OHCI_QUIRK_INITRESET
 0x04

	)

431 
	#OHCI_QUIRK_BE_DESC
 0x08

	)

432 
	#OHCI_QUIRK_BE_MMIO
 0x10

	)

433 
	#OHCI_QUIRK_ZFMICRO
 0x20

	)

436 #ifde‡
DEBUG


437 
díåy
 *
	mdebug_dú
;

438 
díåy
 *
	mdebug_async
;

439 
díåy
 *
	mdebug_≥riodic
;

440 
díåy
 *
	mdebug_ªgi°îs
;

445 
ölöe
 
admhcd
 *
	$hcd_to_admhcd
(
usb_hcd
 *
hcd
)

447  (
admhcd
 *)(
hcd
->
hcd_¥iv
);

448 
	}
}

449 
ölöe
 
usb_hcd
 *
	$admhcd_to_hcd
(c⁄° 
admhcd
 *
ahcd
)

451  
	`c⁄èöî_of
((*)
ahcd
, 
usb_hcd
, 
hcd_¥iv
);

452 
	}
}

456 #i‚de‡
DEBUG


457 
	#STUB_DEBUG_FILES


	)

460 #ifde‡
DEBUG


461 
	#admhc_dbg
(
ahcd
, 
fmt
, 
¨gs
...) \

462 
	`¥ötk
(
KERN_DEBUG
 "adm5120-hcd: " 
fmt
, ## 
¨gs
)

	)

464 
	#admhc_dbg
(
ahcd
, 
fmt
, 
¨gs
...Ëdÿ{ } 0)

	)

467 
	#admhc_îr
(
ahcd
, 
fmt
, 
¨gs
...) \

468 
	`¥ötk
(
KERN_ERR
 "adm5120-hcd: " 
fmt
, ## 
¨gs
)

	)

469 
	#admhc_öfo
(
ahcd
, 
fmt
, 
¨gs
...) \

470 
	`¥ötk
(
KERN_INFO
 "adm5120-hcd: " 
fmt
, ## 
¨gs
)

	)

471 
	#admhc_w¨n
(
ahcd
, 
fmt
, 
¨gs
...) \

472 
	`¥ötk
(
KERN_WARNING
 "adm5120-hcd: " 
fmt
, ## 
¨gs
)

	)

474 #ifde‡
ADMHC_VERBOSE_DEBUG


475 
	#admhc_vdbg
 
admhc_dbg


	)

477 
	#admhc_vdbg
(
ahcd
, 
fmt
, 
¨gs
...Ëdÿ{ } 0)

	)

517 #ifde‡
CONFIG_USB_ADMHC_BIG_ENDIAN_DESC


518 #ifde‡
CONFIG_USB_ADMHC_LITTLE_ENDIAN


519 
	#big_ídün_desc
(
ahcd
Ë◊hcd->
Êags
 & 
OHCI_QUIRK_BE_DESC
)

	)

521 
	#big_ídün_desc
(
ahcd
Ë1

	)

524 
	#big_ídün_desc
(
ahcd
Ë0

	)

527 #ifde‡
CONFIG_USB_ADMHC_BIG_ENDIAN_MMIO


528 #ifde‡
CONFIG_USB_ADMHC_LITTLE_ENDIAN


529 
	#big_ídün_mmio
(
ahcd
Ë◊hcd->
Êags
 & 
OHCI_QUIRK_BE_MMIO
)

	)

531 
	#big_ídün_mmio
(
ahcd
Ë1

	)

534 
	#big_ídün_mmio
(
ahcd
Ë0

	)

542 
ölöe
 
	$admhc_ªadl
(c⁄° 
admhcd
 *
ahcd
,

543 
__hc32
 
__iomem
 *
ªgs
)

545 #ifde‡
CONFIG_USB_ADMHC_BIG_ENDIAN_MMIO


546  
	`big_ídün_mmio
(
ahcd
) ?

547 
	`ªadl_be
(
ªgs
) :

548 
	`ªadl
(
ªgs
);

550  
	`ªadl
(
ªgs
);

552 
	}
}

554 
ölöe
 
	$admhc_wrôñ
(c⁄° 
admhcd
 *
ahcd
,

555 c⁄° 
vÆ
, 
__hc32
 
__iomem
 *
ªgs
)

557 #ifde‡
CONFIG_USB_ADMHC_BIG_ENDIAN_MMIO


558 
	`big_ídün_mmio
(
ahcd
) ?

559 
	`wrôñ_be
(
vÆ
, 
ªgs
) :

560 
	`wrôñ
(
vÆ
, 
ªgs
);

562 
	`wrôñ
(
vÆ
, 
ªgs
);

564 
	}
}

566 
ölöe
 
	$admhc_wrôñ_Êush
(c⁄° 
admhcd
 *
ahcd
)

570 (Ë
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
gíc⁄åﬁ
);

572 
	}
}

578 
ölöe
 
__hc16
 
	$˝u_to_hc16
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
u16
 
x
)

580  
	`big_ídün_desc
(
ahcd
) ?

581 (
__f‹˚
 
__hc16
)
	`˝u_to_be16
(
x
) :

582 (
__f‹˚
 
__hc16
)
	`˝u_to_À16
(
x
);

583 
	}
}

585 
ölöe
 
__hc16
 
	$˝u_to_hc16p
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
u16
 *
x
)

587  
	`big_ídün_desc
(
ahcd
) ?

588 
	`˝u_to_be16p
(
x
) :

589 
	`˝u_to_À16p
(
x
);

590 
	}
}

592 
ölöe
 
__hc32
 
	$˝u_to_hc32
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
u32
 
x
)

594  
	`big_ídün_desc
(
ahcd
) ?

595 (
__f‹˚
 
__hc32
)
	`˝u_to_be32
(
x
) :

596 (
__f‹˚
 
__hc32
)
	`˝u_to_À32
(
x
);

597 
	}
}

599 
ölöe
 
__hc32
 
	$˝u_to_hc32p
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
u32
 *
x
)

601  
	`big_ídün_desc
(
ahcd
) ?

602 
	`˝u_to_be32p
(
x
) :

603 
	`˝u_to_À32p
(
x
);

604 
	}
}

607 
ölöe
 
u16
 
	$hc16_to_˝u
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
__hc16
 
x
)

609  
	`big_ídün_desc
(
ahcd
) ?

610 
	`be16_to_˝u
((
__f‹˚
 
__be16
)
x
) :

611 
	`À16_to_˝u
((
__f‹˚
 
__À16
)
x
);

612 
	}
}

614 
ölöe
 
u16
 
	$hc16_to_˝up
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
__hc16
 *
x
)

616  
	`big_ídün_desc
(
ahcd
) ?

617 
	`be16_to_˝up
((
__f‹˚
 
__be16
 *)
x
) :

618 
	`À16_to_˝up
((
__f‹˚
 
__À16
 *)
x
);

619 
	}
}

621 
ölöe
 
u32
 
	$hc32_to_˝u
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
__hc32
 
x
)

623  
	`big_ídün_desc
(
ahcd
) ?

624 
	`be32_to_˝u
((
__f‹˚
 
__be32
)
x
) :

625 
	`À32_to_˝u
((
__f‹˚
 
__À32
)
x
);

626 
	}
}

628 
ölöe
 
u32
 
	$hc32_to_˝up
(c⁄° 
admhcd
 *
ahcd
, c⁄° 
__hc32
 *
x
)

630  
	`big_ídün_desc
(
ahcd
) ?

631 
	`be32_to_˝up
((
__f‹˚
 
__be32
 *)
x
) :

632 
	`À32_to_˝up
((
__f‹˚
 
__À32
 *)
x
);

633 
	}
}

637 
ölöe
 
u16
 
	$admhc_‰ame_no
(c⁄° 
admhcd
 *
ahcd
)

639 
u32
 
t
;

641 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
fmnumbî
Ë& 
ADMHC_SFN_FN_MASK
;

642  (
u16
)
t
;

643 
	}
}

645 
ölöe
 
u16
 
	$admhc_‰ame_ªmaö
(c⁄° 
admhcd
 *
ahcd
)

647 
u32
 
t
;

649 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
fmnumbî
Ë>> 
ADMHC_SFN_FR_SHIFT
;

650 
t
 &
ADMHC_SFN_FR_MASK
;

651  (
u16
)
t
;

652 
	}
}

656 
ölöe
 
	$admhc_dißbÀ
(
admhcd
 *
ahcd
)

658 
	`admhcd_to_hcd
(
ahcd
)->
°©e
 = 
HC_STATE_HALT
;

659 
	}
}

661 
	#FI
 0x2ed‡

	)

662 
	#FSLDP
(
fi
Ë(0x7ff‡& ((6 * ((fiË- 1200)Ë/ 7))

	)

663 
	#FIT
 
ADMHC_SFI_FIT


	)

664 
	#LSTHRESH
 0x628

	)

666 
ölöe
 
	$≥riodic_ªöô
(
admhcd
 *
ahcd
)

669 
u32
 
fi
 = 
ahcd
->
fmöãrvÆ
 & 
ADMHC_SFI_FI_MASK
;

670 
u32
 
fô
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
fmöãrvÆ
Ë& 
FIT
;

673 
	`admhc_wrôñ
(
ahcd
, (
fô
 ^ 
FIT
Ë|áhcd->
fmöãrvÆ
,

674 &
ahcd
->
ªgs
->
fmöãrvÆ
);

676 
u32
 
fô
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
fmöãrvÆ
Ë& 
FIT
;

679 
	`admhc_wrôñ
(
ahcd
, (
fô
 ^ 
FIT
Ë|áhcd->
fmöãrvÆ
,

680 &
ahcd
->
ªgs
->
fmöãrvÆ
);

682 
	}
}

684 
ölöe
 
u32
 
	$admhc_ªad_rhdesc
(
admhcd
 *
ahcd
)

686  
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
rhdesc
);

687 
	}
}

689 
ölöe
 
u32
 
	$admhc_ªad_p‹t°©us
(
admhcd
 *
ahcd
, 
p‹t
)

691  
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
p‹t°©us
[
p‹t
]);

692 
	}
}

694 
ölöe
 
	$admhc_wrôe_p‹t°©us
(
admhcd
 *
ahcd
, 
p‹t
,

695 
u32
 
vÆue
)

697 
	`admhc_wrôñ
(
ahcd
, 
vÆue
, &ahcd->
ªgs
->
p‹t°©us
[
p‹t
]);

698 
	}
}

700 
ölöe
 
	$roŸhub_wrôe_°©us
(
admhcd
 *
ahcd
, 
u32
 
vÆue
)

703 
	`admhc_wrôñ
(
ahcd
, 
vÆue
, &ahcd->
ªgs
->
rhdesc
);

704 
	}
}

706 
ölöe
 
	$admhc_öå_dißbÀ
(
admhcd
 *
ahcd
, 
u32
 
öts
)

708 
u32
 
t
;

710 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
öt_íabÀ
);

711 
t
 &~(
öts
);

712 
	`admhc_wrôñ
(
ahcd
, 
t
, &ahcd->
ªgs
->
öt_íabÀ
);

714 
	}
}

716 
ölöe
 
	$admhc_öå_íabÀ
(
admhcd
 *
ahcd
, 
u32
 
öts
)

718 
u32
 
t
;

720 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
öt_íabÀ
);

721 
t
 |
öts
;

722 
	`admhc_wrôñ
(
ahcd
, 
t
, &ahcd->
ªgs
->
öt_íabÀ
);

724 
	}
}

726 
ölöe
 
	$admhc_öå_ack
(
admhcd
 *
ahcd
, 
u32
 
öts
)

728 
	`admhc_wrôñ
(
ahcd
, 
öts
, &ahcd->
ªgs
->
öt_°©us
);

729 
	}
}

731 
ölöe
 
	$admhc_dma_íabÀ
(
admhcd
 *
ahcd
)

733 
u32
 
t
;

735 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
);

736 i‡(
t
 & 
ADMHC_HC_DMAE
)

739 
t
 |
ADMHC_HC_DMAE
;

740 
	`admhc_wrôñ
(
ahcd
, 
t
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
);

741 
	`admhc_vdbg
(
ahcd
, "DMAÉnabled\n");

742 
	}
}

744 
ölöe
 
	$admhc_dma_dißbÀ
(
admhcd
 *
ahcd
)

746 
u32
 
t
;

748 
t
 = 
	`admhc_ªadl
(
ahcd
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
);

749 i‡(!(
t
 & 
ADMHC_HC_DMAE
))

752 
t
 &~
ADMHC_HC_DMAE
;

753 
	`admhc_wrôñ
(
ahcd
, 
t
, &ahcd->
ªgs
->
ho°_c⁄åﬁ
);

754 
	`admhc_vdbg
(
ahcd
, "DMA disabled\n");

755 
	}
}

	@linux/adm5120/files-3.18/drivers/watchdog/adm5120_wdt.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/fs.h
>

18 
	~<löux/miscdevi˚.h
>

19 
	~<löux/w©chdog.h
>

20 
	~<löux/úq.h
>

22 
	~<asm/boŸöfo.h
>

24 
	~<asm/mach-adm5120/adm5120_öfo.h
>

25 
	~<asm/mach-adm5120/adm5120_defs.h
>

26 
	~<asm/mach-adm5120/adm5120_swôch.h
>

28 
	#DEFAULT_TIMEOUT
 15

	)

29 
	#MAX_TIMEOUT
 327

	)

32 
	#NAME
 "adm5120_wdt"

	)

33 
	#VERSION
 "0.1"

	)

35 
	gex≥˘_˛o£
;

36 
	gac˚ss
;

37 
	gtimeout
 = 
DEFAULT_TIMEOUT
;

39 
	gnowayout
 = 
WATCHDOG_NOWAYOUT
;

40 
moduÀ_∑øm
(
nowayout
, , 0);

41 
MODULE_PARM_DESC
(
nowayout
, "W©chdog c™nŸ bê°›≥d on˚ sèπed (deÁu…=" 
__MODULE_STRING
(
WATCHDOG_NOWAYOUT
) ")");

42 
MODULE_LICENSE
("GPL");

45 
ölöe
 
	$wdt_£t_timeout
()

47 
u32
 
vÆ
 = (1 << 31Ë| (((
timeout
 * 100) & 0x7FFF) << 16);

48 
	`SW_WRITE_REG
(
SWITCH_REG_WDOG0
, 
vÆ
);

49 
	}
}

56 
ölöe
 
	$wdt_ª£t_cou¡î
()

58 
	`SW_READ_REG
(
SWITCH_REG_WDOG0
);

59 
	}
}

61 
ölöe
 
	$wdt_dißbÀ
()

63 
	`SW_WRITE_REG
(
SWITCH_REG_WDOG0
, 0x7FFF0000);

64 
	}
}

68 
	$wdt_›í
(
öode
 *öode, 
fûe
 *file)

71 i‡(
ac˚ss
)

72  -
EBUSY
;

74 i‡(
nowayout
)

75 
	`__moduÀ_gë
(
THIS_MODULE
);

78 
	`wdt_ª£t_cou¡î
();

79 
	`wdt_£t_timeout
();

80 
	`¥ötk
(
KERN_INFO
 
NAME
 ":Énabling watchdogÅimer\n");

81 
ac˚ss
 = 1;

83 
	}
}

85 
	$wdt_ªÀa£
(
öode
 *öode, 
fûe
 *file)

91 i‡(
ex≥˘_˛o£
 && (
nowayout
 == 0)) {

92 
	`wdt_dißbÀ
();

93 
	`¥ötk
(
KERN_INFO
 
NAME
 ": disabling watchdogÅimer\n");

94 
	`moduÀ_put
(
THIS_MODULE
);

96 
	`¥ötk
(
KERN_CRIT
 
NAME
 ": device closed unexpectedly. WDT willÇot stop!\n");

98 
ac˚ss
 = 0;

100 
	}
}

102 
ssize_t
 
	$wdt_wrôe
(
fûe
 *fûe, c⁄° *
d©a
, 
size_t
 
Àn
, 
loff_t
 *
µos
)

105 i‡(
Àn
) {

106 i‡(!
nowayout
) {

107 
size_t
 
i
;

110 
ex≥˘_˛o£
 = 0;

112 
i
 = 0; i !
Àn
; i++) {

113 
c
;

114 i‡(
	`gë_u£r
(
c
, 
d©a
 + 
i
))

115  -
EFAULT
;

116 i‡(
c
 == 'V')

117 
ex≥˘_˛o£
 = 1;

120 
	`wdt_ª£t_cou¡î
();

121  
Àn
;

124 
	}
}

126 
	$wdt_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

128 
√w_timeout
;

129 
w©chdog_öfo
 
idít
 = {

130 .
›ti⁄s
 = 
WDIOF_SETTIMEOUT
 |

131 
WDIOF_KEEPALIVEPING
 |

132 
WDIOF_MAGICCLOSE
,

133 .
fúmw¨e_vîsi⁄
 = 0,

134 .
idítôy
 = "ADM5120_WDT Watchdog",

136 
cmd
) {

138  -
ENOTTY
;

139 
WDIOC_GETSUPPORT
:

140 i‡(
	`c›y_to_u£r
((
w©chdog_öfo
 *)
¨g
, &
idít
, (ident)))

141  -
EFAULT
;

143 
WDIOC_GETSTATUS
:

144 
WDIOC_GETBOOTSTATUS
:

145  
	`put_u£r
(0, (*)
¨g
);

146 
WDIOC_KEEPALIVE
:

147 
	`wdt_ª£t_cou¡î
();

149 
WDIOC_SETTIMEOUT
:

150 i‡(
	`gë_u£r
(
√w_timeout
, (*)
¨g
))

151  -
EFAULT
;

152 i‡(
√w_timeout
 < 1)

153  -
EINVAL
;

154 i‡(
√w_timeout
 > 
MAX_TIMEOUT
)

155  -
EINVAL
;

156 
timeout
 = 
√w_timeout
;

157 
	`wdt_£t_timeout
();

159 
WDIOC_GETTIMEOUT
:

160  
	`put_u£r
(
timeout
, (*)
¨g
);

162 
	}
}

164 c⁄° 
fûe_›î©i⁄s
 
	gwdt_f›s
 = {

165 .
ow√r
 = 
THIS_MODULE
,

166 .
	gŒ£ek
 = 
no_Œ£ek
,

167 .
	gwrôe
 = 
wdt_wrôe
,

168 .
	gu∆ocked_io˘l
 = 
wdt_io˘l
,

169 .
	g›í
 = 
wdt_›í
,

170 .
	gªÀa£
 = 
wdt_ªÀa£
,

173 
miscdevi˚
 
	gwdt_miscdev
 = {

174 .
mö‹
 = 
WATCHDOG_MINOR
,

175 .
	g«me
 = "watchdog",

176 .
	gf›s
 = &
wdt_f›s
,

179 
	gb™√r
[] 
	g__öôd©a
 = 
KERN_INFO
 
NAME
 ": W©chdog Timî vîsi⁄ " 
VERSION
 "\n";

181 
__öô
 
	$w©chdog_öô
()

183 
ªt
;

185 
ªt
 = 
	`misc_ªgi°î
(&
wdt_miscdev
);

187 i‡(
ªt
)

188  
ªt
;

190 
	`wdt_dißbÀ
();

191 
	`¥ötk
(
b™√r
);

194 
	}
}

196 
__exô
 
	$w©chdog_exô
()

198 
	`misc_dîegi°î
(&
wdt_miscdev
);

199 
	}
}

201 
moduÀ_öô
(
w©chdog_öô
);

202 
moduÀ_exô
(
w©chdog_exô
);

	@linux/adm5120/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 
	#kNumT›Bôs
 24

	)

25 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

27 
	#kNumBôModñTŸÆBôs
 11

	)

28 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

29 
	#kNumMoveBôs
 5

	)

31 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

33 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

34 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

36 #ifde‡
_LZMA_IN_CB


38 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

39 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

40 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

42 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

46 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

48 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

52 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

54 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

55 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

56 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

58 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

59 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

60 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

62 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

64 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

65 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

66 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

67 
ªs
 -(1 << 
numLevñs
); }

	)

70 
	#kNumPosBôsMax
 4

	)

71 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

73 
	#kLíNumLowBôs
 3

	)

74 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

75 
	#kLíNumMidBôs
 3

	)

76 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

77 
	#kLíNumHighBôs
 8

	)

78 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

80 
	#LíChoi˚
 0

	)

81 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

82 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

83 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

84 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

85 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

88 
	#kNumSèãs
 12

	)

89 
	#kNumLôSèãs
 7

	)

91 
	#kSèπPosModñIndex
 4

	)

92 
	#kEndPosModñIndex
 14

	)

93 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

95 
	#kNumPosSlŸBôs
 6

	)

96 
	#kNumLíToPosSèãs
 4

	)

98 
	#kNumAlignBôs
 4

	)

99 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

101 
	#kM©chMöLí
 2

	)

103 
	#IsM©ch
 0

	)

104 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

105 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

106 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

107 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

108 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

109 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

110 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

111 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

112 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

113 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

114 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

116 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


117 
	gSt›CompûögDueBUG


120 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

122 
¥›0
;

123 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

124  
LZMA_RESULT_DATA_ERROR
;

125 
¥›0
 = 
¥›sD©a
[0];

126 i‡(
¥›0
 >= (9 * 5 * 5))

127  
LZMA_RESULT_DATA_ERROR
;

129 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

130 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

131 
¥›sRes
->
lc
 = 
¥›0
;

140 #ifde‡
_LZMA_OUT_READ


142 
i
;

143 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

144 
i
 = 0; i < 4; i++)

145 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

146 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

147 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

150  
LZMA_RESULT_OK
;

151 
	}
}

153 
	#kLzmaSåómWasFöishedId
 (-1)

	)

155 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

156 #ifde‡
_LZMA_IN_CB


157 
ILzmaInCÆlback
 *
InCÆlback
,

159 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

161 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

163 
CProb
 *
	gp
 = 
vs
->
Probs
;

164 
SizeT
 
	gnowPos
 = 0;

165 
Byã
 
	g¥eviousByã
 = 0;

166 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

167 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

168 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

170 #ifde‡
_LZMA_OUT_READ


172 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

173 
UI¡32
 
	gCode
 = 
vs
->
Code
;

174 #ifde‡
_LZMA_IN_CB


175 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

176 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

178 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

179 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

181 
	g°©e
 = 
vs
->
Sèã
;

182 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

183 
	gÀn
 = 
vs
->
RemaöLí
;

184 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

185 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

187 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

188 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

189 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

191 
Byã
 
	gãmpDi˘i⁄¨y
[4];

193 #i‚de‡
_LZMA_IN_CB


194 *
	göSizePro˚s£d
 = 0;

196 *
	goutSizePro˚s£d
 = 0;

197 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

198  
LZMA_RESULT_OK
;

200 i‡(
	gdi˘i⁄¨ySize
 == 0)

202 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

203 
	gdi˘i⁄¨ySize
 = 1;

204 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

207 i‡(
	gÀn
 =
kLzmaNìdInôId
)

210 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

211 
UI¡32
 
	gi
;

212 
	gi
 = 0; i < 
	gnumProbs
; i++)

213 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

214 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

215 
	g°©e
 = 0;

216 
	gglobÆPos
 = 0;

217 
	gdi°™˚Limô
 = 0;

218 
	gdi˘i⁄¨yPos
 = 0;

219 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

220 #ifde‡
_LZMA_IN_CB


221 
	gRC_INIT
;

223 
RC_INIT
(
öSåóm
, 
öSize
);

226 
	gÀn
 = 0;

228 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

230 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

231 i‡(
	gpos
 >
di˘i⁄¨ySize
)

232 
pos
 +
di˘i⁄¨ySize
;

233 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

234 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

235 
di˘i⁄¨yPos
 = 0;

236 
	gÀn
--;

238 i‡(
	gdi˘i⁄¨yPos
 == 0)

239 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

241 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

245 
	g°©e
 = 0;

246 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

247 
	gÀn
 = 0;

248 c⁄° 
Byã
 *
	gBuf„r
;

249 c⁄° 
Byã
 *
	gBuf„rLim
;

250 
UI¡32
 
	gR™ge
;

251 
UI¡32
 
	gCode
;

253 #i‚de‡
_LZMA_IN_CB


254 *
	göSizePro˚s£d
 = 0;

256 *
	goutSizePro˚s£d
 = 0;

259 
UI¡32
 
	gi
;

260 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

261 
	gi
 = 0; i < 
	gnumProbs
; i++)

262 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

265 #ifde‡
_LZMA_IN_CB


266 
	gRC_INIT
;

268 
RC_INIT
(
öSåóm
, 
öSize
);

273 
	gnowPos
 < 
	goutSize
)

275 
CProb
 *
	g¥ob
;

276 
UI¡32
 
	gbound
;

277 
	gposSèã
 = ()(

278 (
nowPos


279 #ifde‡
_LZMA_OUT_READ


280 + 
globÆPos


283 & 
posSèãMask
);

285 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

286 
IfBô0
(
¥ob
)

288 
	gsymbﬁ
 = 1;

289 
Upd©eBô0
(
¥ob
)

290 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

292 (
nowPos


293 #ifde‡
_LZMA_OUT_READ


294 + 
globÆPos


297 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

299 i‡(
	g°©e
 >
kNumLôSèãs
)

301 
m©chByã
;

302 #ifde‡
_LZMA_OUT_READ


303 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

304 i‡(
	gpos
 >
di˘i⁄¨ySize
)

305 
pos
 +
di˘i⁄¨ySize
;

306 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

308 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

312 
	gbô
;

313 
CProb
 *
	g¥obLô
;

314 
	gm©chByã
 <<= 1;

315 
	gbô
 = (
m©chByã
 & 0x100);

316 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

317 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

319 
	gsymbﬁ
 < 0x100);

321 
	gsymbﬁ
 < 0x100)

323 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

324 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

326 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

328 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

329 #ifde‡
_LZMA_OUT_READ


330 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

331 
	gdi°™˚Limô
++;

333 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

334 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

335 
di˘i⁄¨yPos
 = 0;

337 i‡(
	g°©e
 < 4) state = 0;

338 i‡(
	g°©e
 < 10) state -= 3;

339 
	g°©e
 -= 6;

343 
Upd©eBô1
(
¥ob
);

344 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

345 
IfBô0
(
¥ob
)

347 
Upd©eBô0
(
¥ob
);

348 
	gªp3
 = 
ªp2
;

349 
	gªp2
 = 
ªp1
;

350 
	gªp1
 = 
ªp0
;

351 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

352 
	g¥ob
 = 
p
 + 
LíCodî
;

356 
Upd©eBô1
(
¥ob
);

357 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

358 
IfBô0
(
¥ob
)

360 
Upd©eBô0
(
¥ob
);

361 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

362 
IfBô0
(
¥ob
)

364 #ifde‡
_LZMA_OUT_READ


365 
UI¡32
 
	gpos
;

367 
Upd©eBô0
(
¥ob
);

369 #ifde‡
_LZMA_OUT_READ


370 i‡(
	gdi°™˚Limô
 == 0)

372 i‡(
nowPos
 == 0)

374  
LZMA_RESULT_DATA_ERROR
;

376 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

377 #ifde‡
_LZMA_OUT_READ


378 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

379 i‡(
	gpos
 >
di˘i⁄¨ySize
)

380 
pos
 +
di˘i⁄¨ySize
;

381 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

382 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

383 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

384 
di˘i⁄¨yPos
 = 0;

386 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

388 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

389 #ifde‡
_LZMA_OUT_READ


390 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

391 
	gdi°™˚Limô
++;

398 
Upd©eBô1
(
¥ob
);

403 
UI¡32
 
	gdi°™˚
;

404 
Upd©eBô1
(
¥ob
);

405 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

406 
IfBô0
(
¥ob
)

408 
Upd©eBô0
(
¥ob
);

409 
	gdi°™˚
 = 
ªp1
;

413 
Upd©eBô1
(
¥ob
);

414 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

415 
IfBô0
(
¥ob
)

417 
Upd©eBô0
(
¥ob
);

418 
	gdi°™˚
 = 
ªp2
;

422 
Upd©eBô1
(
¥ob
);

423 
	gdi°™˚
 = 
ªp3
;

424 
	gªp3
 = 
ªp2
;

426 
	gªp2
 = 
ªp1
;

428 
	gªp1
 = 
ªp0
;

429 
	gªp0
 = 
di°™˚
;

431 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

432 
	g¥ob
 = 
p
 + 
RïLíCodî
;

435 
	gnumBôs
, 
	goff£t
;

436 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

437 
IfBô0
(
¥obLí
)

439 
Upd©eBô0
(
¥obLí
);

440 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

441 
	goff£t
 = 0;

442 
	gnumBôs
 = 
kLíNumLowBôs
;

446 
Upd©eBô1
(
¥obLí
);

447 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

448 
IfBô0
(
¥obLí
)

450 
Upd©eBô0
(
¥obLí
);

451 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

452 
	goff£t
 = 
kLíNumLowSymbﬁs
;

453 
	gnumBôs
 = 
kLíNumMidBôs
;

457 
Upd©eBô1
(
¥obLí
);

458 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

459 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

460 
	gnumBôs
 = 
kLíNumHighBôs
;

463 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

464 
	gÀn
 +
off£t
;

467 i‡(
	g°©e
 < 4)

469 
	gposSlŸ
;

470 
	g°©e
 +
kNumLôSèãs
;

471 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

472 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

473 
kNumPosSlŸBôs
);

474 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

475 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

477 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

478 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

479 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

481 
	gªp0
 <<
numDúe˘Bôs
;

482 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

486 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

489 
RC_NORMALIZE


490 
	gR™ge
 >>= 1;

491 
	gªp0
 <<= 1;

492 i‡(
	gCode
 >
R™ge
)

494 
Code
 -
R™ge
;

495 
	gªp0
 |= 1;

498 --
	gnumDúe˘Bôs
 != 0);

499 
	g¥ob
 = 
p
 + 
Align
;

500 
	gªp0
 <<
kNumAlignBôs
;

501 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

504 
	gi
 = 1;

505 
	gmi
 = 1;

508 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

509 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

510 
	gi
 <<= 1;

512 --
	gnumDúe˘Bôs
 != 0);

516 
	gªp0
 = 
posSlŸ
;

517 i‡(++
	gªp0
 =(
UI¡32
)(0))

520 
Àn
 = 
kLzmaSåómWasFöishedId
;

525 
	gÀn
 +
kM©chMöLí
;

526 #ifde‡
_LZMA_OUT_READ


527 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

529 i‡(
	gªp0
 > 
	gnowPos
)

531  
	gLZMA_RESULT_DATA_ERROR
;

533 #ifde‡
_LZMA_OUT_READ


534 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

535 
	gdi°™˚Limô
 +
Àn
;

537 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

542 #ifde‡
_LZMA_OUT_READ


543 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

544 i‡(
	gpos
 >
di˘i⁄¨ySize
)

545 
pos
 +
di˘i⁄¨ySize
;

546 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

547 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

548 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

549 
di˘i⁄¨yPos
 = 0;

551 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

553 
	gÀn
--;

554 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

556 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

559 
	gRC_NORMALIZE
;

561 #ifde‡
_LZMA_OUT_READ


562 
	gvs
->
	gR™ge
 = 
R™ge
;

563 
	gvs
->
	gCode
 = 
Code
;

564 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

565 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

566 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

567 
	gvs
->
	gRïs
[0] = 
ªp0
;

568 
	gvs
->
	gRïs
[1] = 
ªp1
;

569 
	gvs
->
	gRïs
[2] = 
ªp2
;

570 
	gvs
->
	gRïs
[3] = 
ªp3
;

571 
	gvs
->
	gSèã
 = 
°©e
;

572 
	gvs
->
	gRemaöLí
 = 
Àn
;

573 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

576 #ifde‡
_LZMA_IN_CB


577 
	gvs
->
	gBuf„r
 = 
Buf„r
;

578 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

580 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

582 *
	goutSizePro˚s£d
 = 
nowPos
;

583  
	gLZMA_RESULT_OK
;

	@linux/adm5120/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

25 
	~"LzmaTy≥s.h
"

40 #ifde‡
_LZMA_PROB32


41 
	#CProb
 
UI¡32


	)

43 
	#CProb
 
UI¡16


	)

46 
	#LZMA_RESULT_OK
 0

	)

47 
	#LZMA_RESULT_DATA_ERROR
 1

	)

49 #ifde‡
_LZMA_IN_CB


50 
	s_ILzmaInCÆlback


52 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

53 } 
	tILzmaInCÆlback
;

56 
	#LZMA_BASE_SIZE
 1846

	)

57 
	#LZMA_LIT_SIZE
 768

	)

59 
	#LZMA_PROPERTIES_SIZE
 5

	)

61 
	s_CLzmaPr›îtõs


63 
	mlc
;

64 
	mÕ
;

65 
	mpb
;

66 #ifde‡
_LZMA_OUT_READ


67 
UI¡32
 
	mDi˘i⁄¨ySize
;

69 }
	tCLzmaPr›îtõs
;

71 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

73 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

75 
	#kLzmaNìdInôId
 (-2)

	)

77 
	s_CLzmaDecodîSèã


79 
CLzmaPr›îtõs
 
	mPr›îtõs
;

80 
CProb
 *
	mProbs
;

82 #ifde‡
_LZMA_IN_CB


83 c⁄° *
	mBuf„r
;

84 c⁄° *
	mBuf„rLim
;

87 #ifde‡
_LZMA_OUT_READ


88 *
	mDi˘i⁄¨y
;

89 
UI¡32
 
	mR™ge
;

90 
UI¡32
 
	mCode
;

91 
UI¡32
 
	mDi˘i⁄¨yPos
;

92 
UI¡32
 
	mGlobÆPos
;

93 
UI¡32
 
	mDi°™˚Limô
;

94 
UI¡32
 
	mRïs
[4];

95 
	mSèã
;

96 
	mRemaöLí
;

97 
	mTempDi˘i⁄¨y
[4];

99 } 
	tCLzmaDecodîSèã
;

101 #ifde‡
_LZMA_OUT_READ


102 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

105 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

106 #ifde‡
_LZMA_IN_CB


107 
ILzmaInCÆlback
 *
öCÆlback
,

109 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

111 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/adm5120/image/lzma-loader/src/LzmaTypes.h

10 #i‚de‡
__LZMATYPES_H


11 
	#__LZMATYPES_H


	)

13 #i‚de‡
_7ZIP_BYTE_DEFINED


14 
	#_7ZIP_BYTE_DEFINED


	)

15 
	tByã
;

18 #i‚de‡
_7ZIP_UINT16_DEFINED


19 
	#_7ZIP_UINT16_DEFINED


	)

20 
	tUI¡16
;

23 #i‚de‡
_7ZIP_UINT32_DEFINED


24 
	#_7ZIP_UINT32_DEFINED


	)

25 #ifde‡
_LZMA_UINT32_IS_ULONG


26 
	tUI¡32
;

28 
	tUI¡32
;

35 #i‚de‡
_7ZIP_SIZET_DEFINED


36 
	#_7ZIP_SIZET_DEFINED


	)

37 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


38 
UI¡32
 
	tSizeT
;

40 
	~<°ddef.h
>

41 
size_t
 
	tSizeT
;

	@linux/adm5120/image/lzma-loader/src/board.c

22 
	~"c⁄fig.h
"

23 
	~<°ddef.h
>

25 
	#READREG
(
r
Ë*(vﬁ©ûê*)‘)

	)

26 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê*)‘Ë
	)
v

31 
	#INTC_BASE
 0xB2200000

	)

34 
	#INTC_REG_IRQ_DISABLE
 0x0C

	)

39 
	#UART0_BASE
 0xB2600000

	)

40 
	#UART1_BASE
 0xB2800000

	)

42 
	#UART_REG_DATA
 0x00

	)

43 
	#UART_REG_ECR
 0x04

	)

44 
	#UART_REG_LCRH
 0x08

	)

45 
	#UART_REG_LCRM
 0x0C

	)

46 
	#UART_REG_LCRL
 0x10

	)

47 
	#UART_REG_CTRL
 0x14

	)

48 
	#UART_REG_FLAG
 0x18

	)

51 
	#UART_CTRL_EN
 ( 1 << 0 )

	)

54 
	#UART_LCRH_FEN
 ( 1 << 4 )

	)

57 
	#UART_FLAG_CTS
 ( 1 << 0 )

	)

58 
	#UART_FLAG_DSR
 ( 1 << 1 )

	)

59 
	#UART_FLAG_DCD
 ( 1 << 2 )

	)

60 
	#UART_FLAG_BUSY
 ( 1 << 3 )

	)

61 
	#UART_FLAG_RXFE
 ( 1 << 4 )

	)

62 
	#UART_FLAG_TXFF
 ( 1 << 5 )

	)

63 
	#UART_FLAG_RXFF
 ( 1 << 6 )

	)

64 
	#UART_FLAG_TXFE
 ( 1 << 7 )

	)

69 
	#SWITCH_BASE
 0xB2000000

	)

71 
	#SWITCH_REG_CPUP_CONF
 0x0024

	)

72 
	#SWITCH_REG_PORT_CONF0
 0x0028

	)

74 
	#SWITCH_REG_GPIO_CONF0
 0x00B8

	)

75 
	#SWITCH_REG_GPIO_CONF2
 0x00BC

	)

77 
	#SWITCH_REG_PORT0_LED
 0x0100

	)

78 
	#SWITCH_REG_PORT1_LED
 0x0104

	)

79 
	#SWITCH_REG_PORT2_LED
 0x0108

	)

80 
	#SWITCH_REG_PORT3_LED
 0x010C

	)

81 
	#SWITCH_REG_PORT4_LED
 0x0110

	)

83 
	#SWITCH_PORTS_HW
 0x3F

	)

86 
	#CPUP_CONF_DCPUP
 ( 1 << 0 )

	)

89 
	#PORT_CONF0_DP_SHIFT
 0

	)

96 #i‡
deföed
(
CONFIG_USE_UART0
)

97 
	#UART_READ
(
r
Ë
	`READREG
(
UART0_BASE
+‘))

	)

98 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART0_BASE
+‘),(v))

	)

100 
	#UART_READ
(
r
Ë
	`READREG
(
UART1_BASE
+‘))

	)

101 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART1_BASE
+‘),(v))

	)

104 
	$u¨t_öô
()

107 
t
;

110 
	`UART_WRITE
(
UART_REG_CTRL
, 0);

113 
t
 = 
	`UART_READ
(
UART_REG_LCRM
);

114 
	`UART_WRITE
(
UART_REG_LCRM
, 
t
);

115 
t
 = 
	`UART_READ
(
UART_REG_LCRL
);

116 
	`UART_WRITE
(
UART_REG_LCRL
, 
t
);

119 
t
 = 
	`UART_READ
(
UART_REG_LCRH
);

120 
t
 &~(
UART_LCRH_FEN
);

121 
	`UART_WRITE
(
UART_REG_LCRH
, 
t
 );

124 
	`UART_WRITE
(
UART_REG_ECR
, 0xFF);

127 
	`UART_WRITE
(
UART_REG_CTRL
, 
UART_CTRL_EN
);

129 
	}
}

135 
	#INTC_READ
(
r
Ë
	`READREG
(
INTC_BASE
+‘))

	)

136 
	#INTC_WRITE
(
r
,
v
Ë
	`WRITEREG
(
INTC_BASE
+‘),v)

	)

138 
	$ötc_öô
()

140 
	`INTC_WRITE
(
INTC_REG_IRQ_DISABLE
, 0xFFFFFFFF);

141 
	}
}

147 
	#SWITCH_READ
(
r
Ë
	`READREG
(
SWITCH_BASE
+‘))

	)

148 
	#SWITCH_WRITE
(
r
,
v
Ë
	`WRITEREG
(
SWITCH_BASE
+‘),v)

	)

150 
	$swôch_öô
()

153 
	`SWITCH_WRITE
(
SWITCH_REG_PORT_CONF0
,

154 (
SWITCH_PORTS_HW
 << 
PORT_CONF0_DP_SHIFT
));

157 
	`SWITCH_WRITE
(
SWITCH_REG_CPUP_CONF
, 
CPUP_CONF_DCPUP
);

160 
	`SWITCH_WRITE
(
SWITCH_REG_GPIO_CONF0
, 0);

161 
	`SWITCH_WRITE
(
SWITCH_REG_GPIO_CONF2
, 0);

164 
	`SWITCH_WRITE
(
SWITCH_REG_PORT0_LED
, 0);

165 
	`SWITCH_WRITE
(
SWITCH_REG_PORT1_LED
, 0);

166 
	`SWITCH_WRITE
(
SWITCH_REG_PORT2_LED
, 0);

167 
	`SWITCH_WRITE
(
SWITCH_REG_PORT3_LED
, 0);

168 
	`SWITCH_WRITE
(
SWITCH_REG_PORT4_LED
, 0);

169 
	}
}

171 
	$bﬂrd_putc
(
ch
)

173 (
	`UART_READ
(
UART_REG_FLAG
Ë& 
UART_FLAG_TXFE
) == 0);

175 
	`UART_WRITE
(
UART_REG_DATA
, 
ch
);

177 (
	`UART_READ
(
UART_REG_FLAG
Ë& 
UART_FLAG_TXFE
) == 0);

178 
	}
}

180 
	$bﬂrd_öô
()

182 
	`ötc_öô
();

183 
	`swôch_öô
();

184 
	`u¨t_öô
();

185 
	}
}

	@linux/adm5120/image/lzma-loader/src/config.h

1 #i‚de‡
_CONFIG_H_


2 
	#_CONFIG_H_


	)

4 
	#FLASH_2M
 (2<<20)

	)

5 
	#FLASH_4M
 (4<<20)

	)

11 #i‡
deföed
(
CONFIG_BOARD_CAS630
)

12 
	#CONFIG_BOARD_NAME
 "CAS-630"

	)

13 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

16 #i‡
deföed
(
CONFIG_BOARD_CAS670
)

17 
	#CONFIG_BOARD_NAME
 "CAS-670"

	)

18 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

21 #i‡
deföed
(
CONFIG_BOARD_CAS700
)

22 
	#CONFIG_BOARD_NAME
 "CAS-700"

	)

23 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

26 #i‡
deföed
(
CONFIG_BOARD_CAS790
)

27 
	#CONFIG_BOARD_NAME
 "CAS-790"

	)

28 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

31 #i‡
deföed
(
CONFIG_BOARD_CAS771
)

32 
	#CONFIG_BOARD_NAME
 "CAS-771"

	)

33 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

36 #i‡
deföed
(
CONFIG_BOARD_CAS861
)

37 
	#CONFIG_BOARD_NAME
 "CAS-861"

	)

38 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

41 #i‡
deföed
(
CONFIG_BOARD_NFS101U
)

42 
	#CONFIG_BOARD_NAME
 "NFS-101U"

	)

43 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

46 #i‡
deföed
(
CONFIG_BOARD_NFS202U
)

47 
	#CONFIG_BOARD_NAME
 "NFS-202U"

	)

48 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

54 #i‡
deföed
(
CONFIG_BOARD_WP54GWRT
)

55 
	#CONFIG_BOARD_NAME
 "WP54G-WRT"

	)

56 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

62 #i‡
deföed
(
CONFIG_BOARD_BR6104K
)

63 
	#CONFIG_BOARD_NAME
 "BR-6104K"

	)

64 
	#CONFIG_FLASH_SIZE
 
FLASH_2M


	)

67 #i‡
deföed
(
CONFIG_BOARD_BR6104KP
)

68 
	#CONFIG_BOARD_NAME
 "BR-6104KP"

	)

69 
	#CONFIG_FLASH_SIZE
 
FLASH_2M


	)

72 #i‡
deföed
(
CONFIG_BOARD_BR6104WG
)

73 
	#CONFIG_BOARD_NAME
 "BR-6104WG"

	)

74 
	#CONFIG_FLASH_SIZE
 
FLASH_2M


	)

80 #i‡
deföed
(
CONFIG_BOARD_EASY5120PATA
)

81 
	#CONFIG_BOARD_NAME
 "EASY 5120P-ATA"

	)

82 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

85 #i‡
deföed
(
CONFIG_BOARD_EASY5120RT
)

86 
	#CONFIG_BOARD_NAME
 "EASY 5120-RT"

	)

87 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

90 #i‡
deföed
(
CONFIG_BOARD_EASY5120WVOIP
)

91 
	#CONFIG_BOARD_NAME
 "EASY 5120-WVOIP"

	)

92 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

95 #i‡
deföed
(
CONFIG_BOARD_EASY83000
)

96 
	#CONFIG_BOARD_NAME
 "EASY 83000"

	)

97 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

103 #i‡
deföed
(
CONFIG_BOARD_POWERLINEMUGW
)

104 
	#CONFIG_BOARD_NAME
 "PowîlöêMU G©eway"

	)

105 
	#CONFIG_USE_UART1
 1

	)

111 #i‡
deföed
(
CONFIG_BOARD_5GXI
)

112 
	#CONFIG_BOARD_NAME
 "OSBRiDGE 5GXi"

	)

118 #i‡
deföed
(
CONFIG_BOARD_P334WT
)

119 
	#CONFIG_BOARD_NAME
 "P-334WT"

	)

120 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

123 #i‡
deföed
(
CONFIG_BOARD_P335
)

124 
	#CONFIG_BOARD_NAME
 "P-335"

	)

125 
	#CONFIG_FLASH_SIZE
 
FLASH_4M


	)

131 #i‚de‡
CONFIG_BOARD_NAME


132 
	#CONFIG_BOARD_NAME
 "ADM5120"

	)

135 #i‚de‡
CONFIG_FLASH_SIZE


136 
	#CONFIG_FLASH_SIZE
 
FLASH_2M


	)

139 #i‡!
deföed
(
CONFIG_USE_UART0
Ë&& !deföed(
CONFIG_USE_UART1
)

140 
	#CONFIG_USE_UART0


	)

	@linux/adm5120/image/lzma-loader/src/decompress.c

45 
	~<°ddef.h
>

47 
	~"c⁄fig.h
"

48 
	~"¥ötf.h
"

49 
	~"LzmaDecode.h
"

51 
	#ADM5120_FLASH_START
 0x1fc00000

	)

52 
	#ADM5120_FLASH_END
 0x1„00000

	)

54 
	#KSEG0
 0x80000000

	)

55 
	#KSEG1
 0xa0000000

	)

57 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

59 
	#Index_InvÆid©e_I
 0x00

	)

60 
	#Index_Wrôeback_Inv_D
 0x01

	)

62 
	#ˇche_uƒﬁl
(
ba£
,
›
) \

63 
__asm__
 
	`__vﬁ©ûe__
( \

70 : "r" (
ba£
), \

71 "i" (
›
));

	)

73 #ifde‡
LZMA_DEBUG


74 
	#DBG
(
f
, 
a
...Ë
	`¥ötf
(f, ##á)

	)

76 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

79 
__ölöe__
 
	$bœ°_iˇche
(
size
, 
lsize
)

81 
°¨t
 = 
KSEG0
;

82 
íd
 = (
°¨t
 + 
size
);

84 
°¨t
 < 
íd
) {

85 
	`ˇche_uƒﬁl
(
°¨t
,
Index_InvÆid©e_I
);

86 
°¨t
 +
lsize
;

88 
	}
}

90 
__ölöe__
 
	$bœ°_dˇche
(
size
, 
lsize
)

92 
°¨t
 = 
KSEG0
;

93 
íd
 = (
°¨t
 + 
size
);

95 
°¨t
 < 
íd
) {

96 
	`ˇche_uƒﬁl
(
°¨t
,
Index_Wrôeback_Inv_D
);

97 
°¨t
 +
lsize
;

99 
	}
}

101 
	#TRX_MAGIC
 0x30524448

	)

102 
	#TRX_ALIGN
 0x1000

	)

104 
	såx_hódî
 {

105 
	mmagic
;

106 
	mÀn
;

107 
	m¸c32
;

108 
	mÊag_vîsi⁄
;

109 
	moff£ts
[3];

112 
	sív_v¨
 {

113 *
	m«me
;

114 *
	mvÆue
;

118 
w‹k•a˚
[];

119 
bﬂrd_öô
();

121 
CLzmaDecodîSèã
 
	glzma_°©e
;

123 (*
	tkî√l_íåy
)(
	tªg_a0
, 
	tªg_a1
,

124 
	tªg_a2
, 
	tªg_a3
);

126 
	`decom¥ess_d©a
(
CLzmaDecodîSèã
 *
vs
, *
outSåóm
,

127 
UI¡32
 
outSize
);

129 #ifde‡
CONFIG_PASS_KARGS


130 
	#ENVV
(
n
,
v
Ë{.
«me
 = (n), .
vÆue
 = (v)
	}

	)
}

131 
ív_v¨
 
	gív_v¨s
[] = {

132 
ENVV
("bﬂrd_«me", 
CONFIG_BOARD_NAME
),

133 
ENVV
(
NULL
, NULL)

137 
	$hÆt
()

139 
	`¥ötf
("\nSystem halted!\n");

141 
	}
}

143 #i‡(
LZMA_WRAPPER
)

144 
_lzma_d©a_°¨t
[];

145 
_lzma_d©a_íd
[];

147 *
	gd©a
;

148 
	gd©Æí
;

150 
__ölöe__
 
	$gë_byã
()

152 
d©Æí
--;

153  *
d©a
++;

154 
	}
}

156 
	$decom¥ess_öô
()

158 
d©a
 = 
_lzma_d©a_°¨t
;

159 
d©Æí
 = 
_lzma_d©a_íd
 - 
_lzma_d©a_°¨t
;

160 
	}
}

162 
	$decom¥ess_d©a
(
CLzmaDecodîSèã
 *
vs
, *
outSåóm
,

163 
SizeT
 
outSize
)

165 
SizeT
 
ù
, 
›
;

167  
	`LzmaDecode
(
vs
, 
d©a
, 
d©Æí
, &
ù
, 
outSåóm
, 
outSize
, &
›
);

168 
	}
}

171 #i‡!(
LZMA_WRAPPER
)

173 
	#FLASH_BANK_SIZE
 (2<<20)

	)

175 *
	gÊash_ba£
 = (*Ë
KSEG1ADDR
(
ADM5120_FLASH_START
);

176 
	gÊash_ofs
 = 0;

177 
	gÊash_max
 = 0;

178 
	gÊash_ofs_mask
 = (
FLASH_BANK_SIZE
-1);

180 
__ölöe__
 
	$gë_byã
()

182  *(
Êash_ba£
+
Êash_ofs
++);

183 
	}
}

185 
	$lzma_ªad_byã
(*
obje˘
, c⁄° **
buf„r
,

186 
SizeT
 *
buf„rSize
)

188 
Àn
;

190 i‡(
Êash_ofs
 >
Êash_max
)

191  
LZMA_RESULT_DATA_ERROR
;

193 
Àn
 = 
Êash_max
-
Êash_ofs
;

195 #i‡(
CONFIG_FLASH_SIZE
 > 
FLASH_BANK_SIZE
)

196 i‡(
Êash_ofs
 < 
FLASH_BANK_SIZE
) {

198 
	`DBG
("lzma_read_byte: switchÅo bank 0\n");

200 i‡(
Àn
 > 
FLASH_BANK_SIZE
-
Êash_ofs
)

201 
Àn
 = 
FLASH_BANK_SIZE
-
Êash_ofs
;

204 
	`DBG
("lzma_read_byte: switchÅo bank 1\n");

207 
	`DBG
("lzma_ªad_byã: ofs=%08X,Üí=%08X\n", 
Êash_ofs
, 
Àn
);

209 *
buf„r
 = 
Êash_ba£
+(
Êash_ofs
 & 
Êash_ofs_mask
);

210 *
buf„rSize
 = 
Àn
;

211 
Êash_ofs
 +
Àn
;

213  
LZMA_RESULT_OK
;

214 
	}
}

216 
ILzmaInCÆlback
 
	glzma_ˇŒback
 = {

217 .
Ród
 = 
lzma_ªad_byã
,

220 
__ölöe__
 
	$ªad_À32
(*
buf
)

222 *
p
 = 
buf
;

224  (()
p
[0] + (()p[1] << 8) +

225 (()
p
[2] << 16) +(()p[3] << 24));

226 
	}
}

228 
	$decom¥ess_öô
()

230 
åx_hódî
 *
hdr
 = 
NULL
;

231 
kofs
,
kÀn
;

233 
	`¥ötf
("Looking for TRX header... ");

235 
Êash_ofs
 = 0; fœsh_of†< 
FLASH_BANK_SIZE
; fœsh_of†+
TRX_ALIGN
) {

236 i‡(
	`ªad_À32
(&
Êash_ba£
[
Êash_ofs
]Ë=
TRX_MAGIC
) {

237 
hdr
 = (
åx_hódî
 *)&
Êash_ba£
[
Êash_ofs
];

242 i‡(
hdr
 =
NULL
) {

243 
	`¥ötf
("not found!\n");

245 
	`hÆt
();

249 
kofs
 = 
	`ªad_À32
(&
hdr
->
off£ts
[1]);

250 i‡(
kofs
 == 0 || kofs > 65536) {

251 
kÀn
 = 
kofs
-
	`ªad_À32
(&
hdr
->
off£ts
[0]);

252 
kofs
 = 
	`ªad_À32
(&
hdr
->
off£ts
[0]);

254 
kÀn
 = 
	`ªad_À32
(&
hdr
->
off£ts
[2]);

255 i‡(
kÀn
 > 
kofs
)

256 
kÀn
 -
kofs
;

258 
kÀn
 = 
	`ªad_À32
(&
hdr
->
Àn
)-
kofs
;

261 
	`¥ötf
("foundáà%08X, kî√l:%08XÜí:%08X\n", 
Êash_ofs
,

262 
kofs
, 
kÀn
);

264 
Êash_ofs
 +
kofs
;

265 
Êash_max
 = 
Êash_ofs
+
kÀn
;

266 
	}
}

268 
	$decom¥ess_d©a
(
CLzmaDecodîSèã
 *
vs
, *
outSåóm
,

269 
SizeT
 
outSize
)

271 
SizeT
 
›
;

274 
vs
->
Buf„r
 = 
d©a
;

275 
vs
->
Buf„rLim
 = 
d©Æí
;

278  
	`LzmaDecode
(
vs
, &
lzma_ˇŒback
, 
outSåóm
, 
outSize
, &
›
);

279 
	}
}

283 
	$decom¥ess_íåy
(
ªg_a0
, 
ªg_a1
,

284 
ªg_a2
, 
ªg_a3
,

285 
iˇche_size
, 
iˇche_lsize
,

286 
dˇche_size
, 
dˇche_lsize
)

288 
¥›s
[
LZMA_PROPERTIES_SIZE
];

289 
i
;

290 
SizeT
 
osize
;

291 
ªs
;

293 
	`bﬂrd_öô
();

295 
	`¥ötf
("\n\nLZMAÜﬂdî f‹ " 
CONFIG_BOARD_NAME


298 
	`decom¥ess_öô
();

301 
i
 = 0; i < 
LZMA_PROPERTIES_SIZE
; i++)

302 
¥›s
[
i
] = 
	`gë_byã
();

306 
osize
 = ((
SizeT
)
	`gë_byã
()) +

307 ((
SizeT
)
	`gë_byã
() << 8) +

308 ((
SizeT
)
	`gë_byã
() << 16) +

309 ((
SizeT
)
	`gë_byã
() << 24);

312 
i
 = 0; i < 4; i++)

313 
	`gë_byã
();

315 
ªs
 = 
	`LzmaDecodePr›îtõs
(&
lzma_°©e
.
Pr›îtõs
, 
¥›s
,

316 
LZMA_PROPERTIES_SIZE
);

317 i‡(
ªs
 !
LZMA_RESULT_OK
) {

318 
	`¥ötf
("Incorrect LZMA streamÖroperties!\n");

319 
	`hÆt
();

322 
	`¥ötf
("decompressing kernel... ");

324 
lzma_°©e
.
Probs
 = (
CProb
 *)
w‹k•a˚
;

325 
ªs
 = 
	`decom¥ess_d©a
(&
lzma_°©e
, (*)
LOADADDR
, 
osize
);

327 i‡(
ªs
 !
LZMA_RESULT_OK
) {

328 
	`¥ötf
("failed, ");

329 
ªs
) {

330 
LZMA_RESULT_DATA_ERROR
:

331 
	`¥ötf
("dataÉrror!\n");

334 
	`¥ötf
("unknow¿îr‹ %d!\n", 
ªs
);

336 
	`hÆt
();

338 
	`¥ötf
("done!\n");

340 
	`bœ°_dˇche
(
dˇche_size
, 
dˇche_lsize
);

341 
	`bœ°_iˇche
(
iˇche_size
, 
iˇche_lsize
);

343 
	`¥ötf
("launching kernel...\n\n");

345 #ifde‡
CONFIG_PASS_KARGS


346 
ªg_a0
 = 0;

347 
ªg_a1
 = 0;

348 
ªg_a2
 = ()
ív_v¨s
;

349 
ªg_a3
 = 0;

352 ((
kî√l_íåy
Ë
LOADADDR
)(
ªg_a0
, 
ªg_a1
, 
ªg_a2
, 
ªg_a3
);

353 
	}
}

	@linux/adm5120/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

14 
bﬂrd_putc
(
ch
);

17 
	#LP_MAX_BUF
 256

	)

20 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

21 
	#Ctod
(
x
Ë–(xË- '0')

	)

24 
PrötCh¨
(*, , , );

25 
PrötSåög
(*, *, , );

26 
PrötNum
(*, , , , , , , );

29 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

35 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

36 * 
¨g
,

37 *
fmt
,

38 
va_li°
 
≠
)

41 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

42 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

43 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

45 (*
ouçut
)(
¨g
, 
s
, 
l
); \

47 }

	)

49 
buf
[
LP_MAX_BUF
];

51 
c
;

52 *
s
;

53 
num
;

55 
l⁄gFœg
;

56 
√gFœg
;

57 
width
;

58 
¥ec
;

59 
œdju°
;

60 
∑dc
;

62 
Àngth
;

67 *
fmtSèπ
 = 
fmt
;

68  (*
fmt
 != '\0') && (*fmt != '%')) {

69 
fmt
 ++;

73 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

76 i‡(*
fmt
 == '\0') ;

80 
fmt
 ++;

83 i‡(*
fmt
 == 'l') {

84 
l⁄gFœg
 = 1;

85 
fmt
 ++;

87 
l⁄gFœg
 = 0;

91 
width
 = 0;

92 
¥ec
 = -1;

93 
œdju°
 = 0;

94 
∑dc
 = ' ';

96 i‡(*
fmt
 == '-') {

97 
œdju°
 = 1;

98 
fmt
 ++;

101 i‡(*
fmt
 == '0') {

102 
∑dc
 = '0';

103 
fmt
++;

106 i‡(
	`IsDigô
(*
fmt
)) {

107 
	`IsDigô
(*
fmt
)) {

108 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

112 i‡(*
fmt
 == '.') {

113 
fmt
 ++;

114 i‡(
	`IsDigô
(*
fmt
)) {

115 
¥ec
 = 0;

116 
	`IsDigô
(*
fmt
)) {

117 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

124 
√gFœg
 = 0;

125 *
fmt
) {

127 i‡(
l⁄gFœg
) {

128 
num
 = 
	`va_¨g
(
≠
, );

130 
num
 = 
	`va_¨g
(
≠
, );

132 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

133 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

138 i‡(
l⁄gFœg
) {

139 
num
 = 
	`va_¨g
(
≠
, );

141 
num
 = 
	`va_¨g
(
≠
, );

143 i‡(
num
 < 0) {

144 
num
 = -Çum;

145 
√gFœg
 = 1;

147 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

148 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

153 i‡(
l⁄gFœg
) {

154 
num
 = 
	`va_¨g
(
≠
, );

156 
num
 = 
	`va_¨g
(
≠
, );

158 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

159 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

164 i‡(
l⁄gFœg
) {

165 
num
 = 
	`va_¨g
(
≠
, );

167 
num
 = 
	`va_¨g
(
≠
, );

169 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

170 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

174 i‡(
l⁄gFœg
) {

175 
num
 = 
	`va_¨g
(
≠
, );

177 
num
 = 
	`va_¨g
(
≠
, );

179 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

180 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

184 i‡(
l⁄gFœg
) {

185 
num
 = 
	`va_¨g
(
≠
, );

187 
num
 = 
	`va_¨g
(
≠
, );

189 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

190 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

194 
c
 = ()
	`va_¨g
(
≠
, );

195 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

196 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

200 
s
 = (*)
	`va_¨g
(
≠
, *);

201 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

202 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

206 
fmt
 --;

211 
	`OUTPUT
(
¨g
, 
fmt
, 1);

214 
fmt
 ++;

218 
	`OUTPUT
(
¨g
, "\0", 1);

219 
	}
}

224 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

226 
i
;

228 i‡(
Àngth
 < 1)Üength = 1;

229 i‡(
œdju°
) {

230 *
buf
 = 
c
;

231 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

233 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

234 
buf
[
Àngth
 - 1] = 
c
;

236  
Àngth
;

237 
	}
}

240 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

242 
i
;

243 
Àn
=0;

244 * 
s1
 = 
s
;

245 *
s1
++Ë
Àn
++;

246 i‡(
Àngth
 < 
Àn
)Üength =Üen;

248 i‡(
œdju°
) {

249 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

250 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

252 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

253 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

255  
Àngth
;

256 
	}
}

259 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

260 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

272 
a˘uÆLígth
 =0;

273 *
p
 = 
buf
;

274 
i
;

277 
tmp
 = 
u
 %
ba£
;

278 i‡(
tmp
 <= 9) {

279 *
p
++ = '0' + 
tmp
;

280 } i‡(
upˇ£
) {

281 *
p
++ = 'A' + 
tmp
 - 10;

283 *
p
++ = 'a' + 
tmp
 - 10;

285 
u
 /
ba£
;

286 } 
u
 != 0);

288 i‡(
√gFœg
) {

289 *
p
++ = '-';

293 
a˘uÆLígth
 = 
p
 - 
buf
;

294 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

297 i‡(
œdju°
) {

298 
∑dc
 = ' ';

300 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

301 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

302 
buf
[
Àngth
 -1] = '-';

304 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

310 
begö
 = 0;

311 
íd
;

312 i‡(
œdju°
) {

313 
íd
 = 
a˘uÆLígth
 - 1;

315 
íd
 = 
Àngth
 -1;

318 
íd
 > 
begö
) {

319 
tmp
 = 
buf
[
begö
];

320 
buf
[
begö
] = buf[
íd
];

321 
buf
[
íd
] = 
tmp
;

322 
begö
 ++;

323 
íd
 --;

328  
Àngth
;

329 
	}
}

331 
	$¥ötf_ouçut
(*
¨g
, *
s
, 
l
)

333 
i
;

336 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

338 
i
=0; i< 
l
; i++) {

339 
	`bﬂrd_putc
(
s
[
i
]);

340 i‡(
s
[
i
] ='\n'Ë
	`bﬂrd_putc
('\r');

342 
	}
}

344 
	$¥ötf
(*
fmt
, ...)

346 
va_li°
 
≠
;

347 
	`va_°¨t
(
≠
, 
fmt
);

348 
	`Õ_Pröt
(
¥ötf_ouçut
, 0, 
fmt
, 
≠
);

349 
	`va_íd
(
≠
);

350 
	}
}

	@linux/adm5120/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/adm8668/files-3.18/arch/mips/adm8668/clock.c

9 
	~<löux/kî√l.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/devi˚.h
>

12 
	~<löux/îr.h
>

13 
	~<löux/˛k.h
>

15 
	~<adm8668.h
>

17 
	s˛k
 {

18 
	møã
;

21 
˛k
 
	gu¨t_˛k
 = {

22 .
øã
 = 62500000,

25 
˛k
 
	gsys_˛k
;

27 
˛k
 *
	$˛k_gë
(
devi˚
 *
dev
, c⁄° *
id
)

29 c⁄° *
lookup
 = 
id
;

31 i‡(
dev
)

32 
lookup
 = 
	`dev_«me
(
dev
);

34 i‡(!
	`°rcmp
(
lookup
, "apb:uart0"))

35  &
u¨t_˛k
;

36 i‡(!
	`°rcmp
(
lookup
, "sys"))

37  &
sys_˛k
;

39  
	`ERR_PTR
(-
ENOENT
);

40 
	}
}

41 
EXPORT_SYMBOL
(
˛k_gë
);

43 
	$˛k_íabÀ
(
˛k
 *clk)

46 
	}
}

47 
EXPORT_SYMBOL
(
˛k_íabÀ
);

49 
	$˛k_dißbÀ
(
˛k
 *clk)

51 
	}
}

52 
EXPORT_SYMBOL
(
˛k_dißbÀ
);

54 
	$˛k_gë_øã
(
˛k
 *clk)

56  
˛k
->
øã
;

57 
	}
}

58 
EXPORT_SYMBOL
(
˛k_gë_øã
);

60 
	$˛k_put
(
˛k
 *clk)

62 
	}
}

63 
EXPORT_SYMBOL
(
˛k_put
);

65 
__öô
 
	$adm8668_öô_˛ocks
()

67 
u32
 
adj
;

72 
adj
 = (
	`ADM8668_CONFIG_REG
(
ADM8668_CR3
) >> 11) & 0xf;

73 
sys_˛k
.
øã
 = 175000000 + (
adj
 * 5000000);

75 
	`¥_öfo
("ADM8668 CPU clock: %lu MHz\n", 
sys_˛k
.
øã
 / 1000000);

76 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/early_printk.c

1 
	~<löux/io.h
>

2 
	~<löux/amba/£rül.h
>

3 
	~<adm8668.h
>

5 
	#UART_READ
(
r
) \

6 
	`__øw_ªadl
((
__iomem
 *)(
	`KSEG1ADDR
(
ADM8668_UART0_BASE
Ë+ (
r
)))

	)

8 
	#UART_WRITE
(
v
, 
r
) \

9 
	`__øw_wrôñ
((
v
), (
__iomem
 *)(
	`KSEG1ADDR
(
ADM8668_UART0_BASE
Ë+ (
r
)))

	)

11 
	$¥om_putch¨
(
c
)

13 
	`UART_WRITE
(
c
, 
UART01x_DR
);

14 (
	`UART_READ
(
UART01x_FR
Ë& 
UART01x_FR_TXFF
) != 0)

16 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/gpio.c

9 
	~<löux/kî√l.h
>

10 
	~<löux/gpio.h
>

11 
	~<löux/io.h
>

13 
	~<adm8668.h
>

15 
	#GPIO_MASK
 0x3f

	)

17 
	#GPIO_IN_OFS
 0

	)

18 
	#GPIO_OUT_OFS
 6

	)

19 
	#GPIO_OE_OFS
 12

	)

21 
	sadm8668_gpio_chù
 {

22 
__iomem
 *
	mba£
;

23 
gpio_chù
 
	mchù
;

26 
	$adm8668_gpio_dú_out
(
gpio_chù
 *
chù
,

27 
off£t
, 
vÆue
)

29 
adm8668_gpio_chù
 *
c
 =

30 
	`c⁄èöî_of
(
chù
, 
adm8668_gpio_chù
, chip);

31 
u32
 
mask
;

34 
mask
 = 
	`__øw_ªadl
(
c
->
ba£
);

35 
mask
 &~(1 << 
off£t
);

36 
mask
 |(1 << (
off£t
 + 
GPIO_OE_OFS
));

37 i‡(
vÆue
)

38 
mask
 |(1 << (
off£t
 + 
GPIO_OUT_OFS
));

40 
mask
 &~(1 << (
off£t
 + 
GPIO_OUT_OFS
));

41 
	`__øw_wrôñ
(
mask
, 
c
->
ba£
);

44 
	}
}

46 
	$adm8668_gpio_dú_ö
(
gpio_chù
 *
chù
,

47 
off£t
)

49 
adm8668_gpio_chù
 *
c
 =

50 
	`c⁄èöî_of
(
chù
, 
adm8668_gpio_chù
, chip);

51 
u32
 
mask
;

53 
mask
 = 
	`__øw_ªadl
(
c
->
ba£
);

54 
mask
 &~(((1 << (
off£t
 + 
GPIO_OE_OFS
)Ë| (1 << (off£à+ 
GPIO_OUT_OFS
))));

55 
mask
 |(1 << 
off£t
);

56 
	`__øw_wrôñ
(
mask
, 
c
->
ba£
);

59 
	}
}

61 
	$adm8668_gpio_£t
(
gpio_chù
 *
chù
,

62 
off£t
, 
vÆue
)

64 
adm8668_gpio_chù
 *
c
 =

65 
	`c⁄èöî_of
(
chù
, 
adm8668_gpio_chù
, chip);

66 
u32
 
mask
;

68 
mask
 = 
	`__øw_ªadl
(
c
->
ba£
);

69 i‡(
vÆue
)

70 
mask
 |(1 << (
off£t
 + 
GPIO_OUT_OFS
));

72 
mask
 &~(1 << (
off£t
 + 
GPIO_OUT_OFS
));

73 
	`__øw_wrôñ
(
mask
, 
c
->
ba£
);

74 
	}
}

76 
	$adm8668_gpio_gë
(
gpio_chù
 *
chù
,

77 
off£t
)

79 
adm8668_gpio_chù
 *
c
 =

80 
	`c⁄èöî_of
(
chù
, 
adm8668_gpio_chù
, chip);

81 
u32
 
vÆue
;

83 
vÆue
 = 
	`__øw_ªadl
(
c
->
ba£
Ë& 
GPIO_MASK
;

85  
vÆue
 & (1 << 
off£t
);

86 
	}
}

88 
adm8668_gpio_chù
 
	gadm8668_gpio_˝u
 = {

89 .
ba£
 = (
__iomem
 *)
KSEG1ADDR
(
ADM8668_CONFIG_BASE
 + 
CRGPIO_REG
),

90 .
	gchù
 = {

91 .
œbñ
 = "adm8668-cpu-gpio",

92 .
	gdúe˘i⁄_ouçut
 = 
adm8668_gpio_dú_out
,

93 .
	gdúe˘i⁄_öput
 = 
adm8668_gpio_dú_ö
,

94 .
	g£t
 = 
adm8668_gpio_£t
,

95 .
	ggë
 = 
adm8668_gpio_gë
,

96 .
	gngpio
 = 6,

100 
adm8668_gpio_chù
 
	gadm8668_gpio_wœn
 = {

101 .
ba£
 = (
__iomem
 *)
KSEG1ADDR
(
ADM8668_WLAN_BASE
 + 
GPIO_REG
),

102 .
	gchù
 = {

103 .
œbñ
 = "adm8668-wlan-gpio",

104 .
	gdúe˘i⁄_ouçut
 = 
adm8668_gpio_dú_out
,

105 .
	gdúe˘i⁄_öput
 = 
adm8668_gpio_dú_ö
,

106 .
	g£t
 = 
adm8668_gpio_£t
,

107 .
	ggë
 = 
adm8668_gpio_gë
,

108 .
	gngpio
 = 6,

109 .
	gba£
 = 6,

113 
__öô
 
	$adm8668_gpio_öô
()

115 
ªt
;

117 
ªt
 = 
	`gpiochù_add
(&
adm8668_gpio_˝u
.
chù
);

118 i‡(
ªt
)

119  
ªt
;

121  
	`gpiochù_add
(&
adm8668_gpio_wœn
.
chù
);

122 
	}
}

123 
¨ch_öôˇŒ
(
adm8668_gpio_öô
);

	@linux/adm8668/files-3.18/arch/mips/adm8668/irq.c

10 
	~<löux/öô.h
>

11 
	~<löux/kî√l_°©.h
>

12 
	~<löux/sig«l.h
>

13 
	~<löux/sched.h
>

14 
	~<löux/öãºu±.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/øndom.h
>

17 
	~<löux/pm.h
>

18 
	~<löux/úq.h
>

19 
	~<asm/mù§egs.h
>

20 
	~<asm/úq_˝u.h
>

21 
	~<asm/úq.h
>

22 
	~<adm8668.h
>

25 
	#IRQ_STATUS_REG
 0x00

	)

26 
	#IRQ_ENABLE_REG
 0x08

	)

27 
	#IRQ_DISABLE_REG
 0x0C

	)

29 
	#IRQ_MASK
 0xffff

	)

31 
ölöe
 
	$ötc_wrôe_ªg
(
u32
 
vÆ
, 
ªg
)

33 
__iomem
 *
ba£
 = (__iomem *)
	`KSEG1ADDR
(
ADM8668_INTC_BASE
);

35 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
ªg
);

36 
	}
}

38 
ölöe
 
u32
 
	$ötc_ªad_ªg
(
ªg
)

40 
__iomem
 *
ba£
 = (__iomem *)
	`KSEG1ADDR
(
ADM8668_INTC_BASE
);

42  
	`__øw_ªadl
(
ba£
 + 
ªg
);

43 
	}
}

45 
	$adm8668_úq_ˇsˇde
()

47 
úq
;

48 
u32
 
öt§c
;

50 
öt§c
 = 
	`ötc_ªad_ªg
(
IRQ_STATUS_REG
Ë& 
IRQ_MASK
;

51 i‡(
öt§c
) {

52 
úq
 = 
	`Ês
(
öt§c
) - 1;

53 
	`do_IRQ
(
úq
);

55 
	`•urious_öãºu±
();

56 
	}
}

61 
	$∂©_úq_di•©ch
()

63 
≥ndög
;

65 
≥ndög
 = 
	`ªad_c0_ˇu£
(Ë& 
	`ªad_c0_°©us
(Ë& 
ST0_IM
;

68 i‡(
≥ndög
 & 
STATUSF_IP7
)

69 
	`do_IRQ
(
MIPS_CPU_IRQ_BASE
 + 7);

70 i‡(
≥ndög
 & 
STATUSF_IP2
)

71 
	`adm8668_úq_ˇsˇde
();

73 
	`•urious_öãºu±
();

74 
	}
}

79 
	$íabÀ_adm8668_úq
(
úq_d©a
 *
d
)

81 
	`ötc_wrôe_ªg
((1 << 
d
->
úq
), 
IRQ_ENABLE_REG
);

82 
	}
}

85 
	$ack_adm8668_úq
(
úq_d©a
 *
d
)

87 
	`ötc_wrôe_ªg
((1 << 
d
->
úq
), 
IRQ_DISABLE_REG
);

88 
	}
}

94 
úq_chù
 
	gadm8668_úq_ty≥
 = {

95 .
«me
 = "adm8668",

96 .
	gúq_ack
 = 
ack_adm8668_úq
,

97 .
	gúq_mask
 = 
ack_adm8668_úq
,

98 .
	gúq_unmask
 = 
íabÀ_adm8668_úq


104 
__öô
 
	$öô_adm8668_úqs
()

106 
i
;

109 
	`ötc_wrôe_ªg
(
IRQ_MASK
, 
IRQ_DISABLE_REG
);

111 
i
 = 0; i <
ADM8668_IRQ_MAX
; i++)

112 
	`úq_£t_chù_™d_h™dÀr
(
i
, &
adm8668_úq_ty≥
,

113 
h™dÀ_Àvñ_úq
);

116 
	`£t_c0_°©us
(
IE_IRQ0
);

117 
	}
}

122 
__öô
 
	$¨ch_öô_úq
()

124 
	`mùs_˝u_úq_öô
();

125 
	`öô_adm8668_úqs
();

126 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/platform.c

10 
	~<löux/öô.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/∂©f‹m_d©a/tulù.h
>

14 
	~<löux/usb/ehci_pdrivî.h
>

15 
	~<löux/mtd/physm≠.h
>

16 
	~<löux/pci.h
>

17 
	~<löux/¶ab.h
>

18 
	~<löux/i›‹t.h
>

19 
	~<löux/amba/bus.h
>

20 
	~<löux/amba/£rül.h
>

22 
	~<asm/ªboŸ.h
>

23 
	~<asm/time.h
>

24 
	~<asm/addr•a˚.h
>

25 
	~<asm/boŸöfo.h
>

26 
	~<asm/io.h
>

27 
	~<adm8668.h
>

29 
	#ADM8868_UBOOT_ENV
 0x20000

	)

30 
	#ADM8868_UBOOT_WAN_MAC
 0x5ac

	)

31 
	#ADM8868_UBOOT_LAN_MAC
 0x404

	)

33 
	$adm8668_u¨t_£t_m˘æ
(
amba_devi˚
 *
dev
,

34 
__iomem
 *
ba£
,

35 
m¸é
)

37 
	}
}

39 
amba_∂010_d©a
 
	gadm8668_u¨t0_d©a
 = {

40 .
£t_m˘æ
 = 
adm8668_u¨t_£t_m˘æ
,

43 
amba_devi˚
 
	gadm8668_u¨t0_devi˚
 = {

44 .
dev
 = {

45 .
öô_«me
 = "apb:uart0",

46 .
	g∂©f‹m_d©a
 = &
adm8668_u¨t0_d©a
,

48 .
	gªs
 = {

49 .
°¨t
 = 
ADM8668_UART0_BASE
,

50 .
	gíd
 = 
ADM8668_UART0_BASE
 + 0xF,

51 .
	gÊags
 = 
IORESOURCE_MEM
,

53 .
	gúq
 = {

54 
ADM8668_UART0_IRQ
,

57 .
	g≥rùhid
 = 0x0041010,

60 
ªsour˚
 
	gëh0_ªsour˚s
[] = {

62 .
°¨t
 = 
ADM8668_LAN_BASE
,

63 .
	gíd
 = 
ADM8668_LAN_BASE
 + 256,

64 .
	gÊags
 = 
IORESOURCE_MEM
,

67 .
	g°¨t
 = 
ADM8668_LAN_IRQ
,

68 .
	gÊags
 = 
IORESOURCE_IRQ
,

72 
tulù_∂©f‹m_d©a
 
	gëh0_pd©a
 = {

73 .
chù_id
 = 
ADM8668
,

76 
∂©f‹m_devi˚
 
	gadm8668_ëh0_devi˚
 = {

77 .
«me
 = "tulip",

78 .
	gid
 = 0,

79 .
	gªsour˚
 = 
ëh0_ªsour˚s
,

80 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
ëh0_ªsour˚s
),

81 .
	gdev
.
	g∂©f‹m_d©a
 = &
ëh0_pd©a
,

84 
ªsour˚
 
	gëh1_ªsour˚s
[] = {

86 .
°¨t
 = 
ADM8668_WAN_BASE
,

87 .
	gíd
 = 
ADM8668_WAN_BASE
 + 256,

88 .
	gÊags
 = 
IORESOURCE_MEM
,

91 .
	g°¨t
 = 
ADM8668_WAN_IRQ
,

92 .
	gÊags
 = 
IORESOURCE_IRQ
,

96 
tulù_∂©f‹m_d©a
 
	gëh1_pd©a
 = {

97 .
chù_id
 = 
ADM8668
,

100 
∂©f‹m_devi˚
 
	gadm8668_ëh1_devi˚
 = {

101 .
«me
 = "tulip",

102 .
	gid
 = 1,

103 .
	gªsour˚
 = 
ëh1_ªsour˚s
,

104 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
ëh1_ªsour˚s
),

105 .
	gdev
.
	g∂©f‹m_d©a
 = &
ëh1_pd©a
,

108 
ªsour˚
 
	gusb_ªsour˚s
[] = {

110 .
°¨t
 = 
ADM8668_USB_BASE
,

111 .
	gíd
 = 
ADM8668_USB_BASE
 + 0x1FFFFF,

112 .
	gÊags
 = 
IORESOURCE_MEM
,

115 .
	g°¨t
 = 
ADM8668_USB_IRQ
,

116 .
	gíd
 = 
ADM8668_USB_IRQ
,

117 .
	gÊags
 = 
IORESOURCE_IRQ
,

121 
usb_ehci_pd©a
 
	gusb_pd©a
 = {

122 .
ˇps_off£t
 = 0x100,

123 .
	ghas_â
 = 1,

126 
∂©f‹m_devi˚
 
	gadm8668_usb_devi˚
 = {

127 .
«me
 = "ehci-platform",

128 .
	gid
 = -1,

129 .
	gªsour˚
 = 
usb_ªsour˚s
,

130 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
usb_ªsour˚s
),

131 .
	gdev
.
	g∂©f‹m_d©a
 = &
usb_pd©a
,

134 
∂©f‹m_devi˚
 *
	gadm8668_devs
[] = {

135 &
adm8668_ëh0_devi˚
,

136 &
adm8668_ëh1_devi˚
,

137 &
adm8668_usb_devi˚
,

140 
	$adm8668_„tch_mac
(
unô
)

142 
u8
 *
mac
;

143 
u32
 
off£t
;

144 
tulù_∂©f‹m_d©a
 *
pd©a
;

146 
unô
) {

149 
off£t
 = 
ADM8868_UBOOT_LAN_MAC
;

150 
pd©a
 = &
ëh0_pd©a
;

153 
off£t
 = 
ADM8868_UBOOT_WAN_MAC
;

154 
pd©a
 = &
ëh1_pd©a
;

157 
	`¥_îr
("unsuµ‹ãdÉthî√àunô: %d\n", 
unô
);

161 
mac
 = (
u8
 *)(
	`KSEG1ADDR
(
ADM8668_SMEM1_BASE
Ë+ 
ADM8868_UBOOT_ENV
 + 
off£t
);

163 
	`mem˝y
(
pd©a
->
mac
, mac, (pdata->mac));

164 
	}
}

166 
	$adm8668_ehci_w‹k¨ound
()

168 
u32
 
chùid
;

170 
chùid
 = 
	`ADM8668_CONFIG_REG
(
ADM8668_CR0
);

171 
	`ADM8668_CONFIG_REG
(
ADM8668_CR66
) = 0x0C1600D9;

173 i‡(
chùid
 == 0x86880001)

176 
	`ADM8668_CONFIG_REG
(
ADM8668_CR66
) &= ~(3 << 20);

177 
	`ADM8668_CONFIG_REG
(
ADM8668_CR66
) |= (1 << 20);

178 
	`¥_öfo
("ADM8668:ápplied USB workaround\n");

179 
	}
}

182 
__öô
 
	$adm8668_devs_ªgi°î
()

184 
ªt
;

186 
ªt
 = 
	`amba_devi˚_ªgi°î
(&
adm8668_u¨t0_devi˚
, &
iomem_ªsour˚
);

187 i‡(
ªt
)

188 
	`∑nic
("failedÅoÑegister AMBA UART");

190 
	`adm8668_„tch_mac
(0);

191 
	`adm8668_„tch_mac
(1);

192 
	`adm8668_ehci_w‹k¨ound
();

194  
	`∂©f‹m_add_devi˚s
(
adm8668_devs
, 
	`ARRAY_SIZE
(adm8668_devs));

195 
	}
}

196 
¨ch_öôˇŒ
(
adm8668_devs_ªgi°î
);

	@linux/adm8668/files-3.18/arch/mips/adm8668/prom.c

16 
	~<löux/öô.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/ty≥s.h
>

19 
	~<löux/c⁄sﬁe.h
>

20 
	~<löux/°rög.h
>

21 
	~<löux/£rül_c‹e.h
>

22 
	~<asm/boŸöfo.h
>

23 
	~<adm8668.h
>

24 
	~"u-boŸ.h
"

26 vﬁ©ûê
globÆ_d©a
 *
gd
 
asm
 ("k0");

28 
__öô
 
	$¥om_‰ì_¥om_mem‹y
()

31 
	}
}

33 
ölöe
 
	$m©ch_èg
(*
¨g
, c⁄° *
èg
)

35  
	`°∫cmp
(
¨g
, 
èg
, 
	`°æí
(tag)) == 0;

36 
	}
}

38 
ölöe
 
	$èg2ul
(*
¨g
, c⁄° *
èg
)

40 *
num
;

42 
num
 = 
¨g
 + 
	`°æí
(
èg
);

43  
	`sim∂e_°πoul
(
num
, 0, 10);

44 
	}
}

46 
__öô
 
	$¥om_£tup_cmdlöe
()

48 *
˝
;

49 
¥om_¨gc
;

50 **
¥om_¨gv
;

51 
i
;

53 
¥om_¨gc
 = 
fw_¨g0
;

54 
¥om_¨gv
 = (**)
	`KSEG0ADDR
(
fw_¨g1
);

56 
˝
 = &(
¨cs_cmdlöe
[0]);

57 
i
 = 1; i < 
¥om_¨gc
; i++) {

58 
¥om_¨gv
[
i
] = (*)
	`KSEG0ADDR
(prom_argv[i]);

62 i‡(
	`m©ch_èg
(
¥om_¨gv
[
i
], "console=/dev/")) {

63 *
±r
 = 
¥om_¨gv
[
i
] + 
	`°æí
("console=/dev/");

65 
	`°r˝y
(
˝
, "console=");

66 
˝
 +
	`°æí
("console=");

67 
	`°r˝y
(
˝
, 
±r
);

68 
˝
 +
	`°æí
(
±r
);

69 *
˝
++ = ' ';

72 
	`°r˝y
(
˝
, 
¥om_¨gv
[
i
]);

73 
˝
 +
	`°æí
(
¥om_¨gv
[
i
]);

74 *
˝
++ = ' ';

76 i‡(
¥om_¨gc
 > 1)

77 --
˝
;

79 *
˝
 = '\0';

80 
	}
}

82 
__öô
 
	$¥om_öô
()

84 
bd_t
 *
bd
 = 
gd
->bd;

85 
memsize
;

87 
memsize
 = 
bd
->
bi_memsize
;

88 
	`¥ötk
("Board info:\n");

89 
	`¥ötk
(" RAM size: %d MB\n", ()
memsize
/(1024*1024));

90 
	`¥ötk
(" NOR sèπ: %#lx\n", 
bd
->
bi_Êash°¨t
);

91 
	`¥ötk
(" NOR size: %#lx\n", 
bd
->
bi_Êashsize
);

93 
	`¥om_£tup_cmdlöe
();

94 
	`add_mem‹y_ªgi⁄
(0, 
memsize
, 
BOOT_MEM_RAM
);

95 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/setup.c

1 
	~<löux/öô.h
>

2 
	~<löux/ªboŸ.h
>

4 
	~<asm/ªboŸ.h
>

5 
	~<adm8668.h
>

7 
	$adm8668_ª°¨t
(*
cmd
)

9 
i
;

12 
i
 = 0; i < 1000; i++)

14 
	`ADM8668_CONFIG_REG
(
ADM8668_CR1
) = 1;

15 
	}
}

17 
__öô
 
	$∂©_mem_£tup
()

19 
_machöe_ª°¨t
 = 
adm8668_ª°¨t
;

20 
	}
}

22 c⁄° *
	$gë_sy°em_ty≥
()

24 
chùid
 = 
	`ADM8668_CONFIG_REG
(
ADM8668_CR0
);

25 
¥odu˘
, 
ªvisi⁄
;

26 
ªt
[32];

28 
¥odu˘
 = 
chùid
 >> 16;

29 
ªvisi⁄
 = 
chùid
 & 0xffff;

32 
	`¢¥ötf
(
ªt
, ‘ë), "ADM%xr%x", 
¥odu˘
, 
ªvisi⁄
);

34  
ªt
;

35 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/time.c

1 
	~<löux/öô.h
>

2 
	~<löux/kî√l.h
>

3 
	~<löux/˛k.h
>

5 
	~<asm/time.h
>

6 
	~<adm8668.h
>

8 
__öô
 
	$∂©_time_öô
()

10 
˛k
 *
sys_˛k
;

12 
	`adm8668_öô_˛ocks
();

14 
sys_˛k
 = 
	`˛k_gë
(
NULL
, "sys");

15 i‡(
	`IS_ERR
(
sys_˛k
))

16 
	`∑nic
("unableÅo get system clock\n");

18 
mùs_h±_‰equícy
 = 
	`˛k_gë_øã
(
sys_˛k
) / 2;

19 
	}
}

	@linux/adm8668/files-3.18/arch/mips/adm8668/u-boot.h

24 #i‚de‡
_U_BOOT_H_


25 
	#_U_BOOT_H_
 1

	)

27 
	sbd_öfo
 {

28 
	mbi_baudøã
;

29 
	mbi_ù_addr
;

30 
	mbi_íëaddr
[6];

31 
	mbi_¨ch_numbî
;

32 
	mbi_boŸ_∑øms
;

33 
	mbi_mem°¨t
;

34 
	mbi_memsize
;

35 
	mbi_Êash°¨t
;

36 
	mbi_Êashsize
;

37 
	mbi_Êashoff£t
;

38 } 
	tbd_t
;

40 
	sglobÆ_d©a
 {

41 
bd_t
 *
	mbd
;

42 
	mÊags
;

43 
	mbaudøã
;

44 
	mhave_c⁄sﬁe
;

45 
	møm_size
;

46 
	mªloc_off
;

47 
	mív_addr
;

48 
	mív_vÆid
;

49 **
	mjt
;

	@linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/adm8668.h

9 #i‚de‡ 
__ADM8668_H__


10 
	#__ADM8668_H__


	)

13 
	#ADM8668_SDRAM_BASE
 0

	)

14 
	#ADM8668_SMEM1_BASE
 0x10000000

	)

15 
	#ADM8668_MPMC_BASE
 0x11000000

	)

16 
	#ADM8668_USB_BASE
 0x11200000

	)

17 
	#ADM8668_CONFIG_BASE
 0x11400000

	)

18 
	#ADM8668_WAN_BASE
 0x11600000

	)

19 
	#ADM8668_WLAN_BASE
 0x11800000

	)

20 
	#ADM8668_LAN_BASE
 0x11A00000

	)

21 
	#ADM8668_INTC_BASE
 0x1E000000

	)

22 
	#ADM8668_TMR_BASE
 0x1E200000

	)

23 
	#ADM8668_UART0_BASE
 0x1E400000

	)

24 
	#ADM8668_SMEM0_BASE
 0x1FC00000

	)

25 
	#ADM8668_NAND_BASE
 0x1FFFFF00

	)

27 
	#ADM8668_PCICFG_BASE
 0x12200000

	)

28 
	#ADM8668_PCIDAT_BASE
 0x12400000

	)

31 
	#ADM8668_SWI_IRQ
 1

	)

32 
	#ADM8668_COMMS_RX_IRQ
 2

	)

33 
	#ADM8668_COMMS_TX_IRQ
 3

	)

34 
	#ADM8668_TIMER0_IRQ
 4

	)

35 
	#ADM8668_TIMER1_IRQ
 5

	)

36 
	#ADM8668_UART0_IRQ
 6

	)

37 
	#ADM8668_LAN_IRQ
 7

	)

38 
	#ADM8668_WAN_IRQ
 8

	)

39 
	#ADM8668_WLAN_IRQ
 9

	)

40 
	#ADM8668_GPIO_IRQ
 10

	)

41 
	#ADM8668_IDE_IRQ
 11

	)

42 
	#ADM8668_PCI2_IRQ
 12

	)

43 
	#ADM8668_PCI1_IRQ
 13

	)

44 
	#ADM8668_PCI0_IRQ
 14

	)

45 
	#ADM8668_USB_IRQ
 15

	)

46 
	#ADM8668_IRQ_MAX
 
ADM8668_USB_IRQ


	)

49 
	#ADM8668_CONFIG_REG
(
_ªg
) \

50 (*((vﬁ©ûê*)(
	`KSEG1ADDR
(
ADM8668_CONFIG_BASE
 + (
_ªg
)))))

	)

53 
	#NETCSR6
 0x30

	)

54 
	#NETCSR7
 0x38

	)

55 
	#NETCSR37
 0xF8

	)

58 
	#ADM8668_CR0
 0x00

	)

59 
	#ADM8668_CR1
 0x04

	)

60 
	#ADM8668_CR3
 0x0C

	)

61 
	#ADM8668_CR66
 0x108

	)

64 
	#GPIO_REG
 0x5C

	)

65 
	#CRGPIO_REG
 0x20

	)

67 
adm8668_öô_˛ocks
();

	@linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/asm/sizes.h

23 #i‚de‡
__sizes_h


24 
	#__sizes_h
 1

	)

27 
	#SZ_16
 0x00000010

	)

28 
	#SZ_256
 0x00000100

	)

29 
	#SZ_512
 0x00000200

	)

31 
	#SZ_1K
 0x00000400

	)

32 
	#SZ_4K
 0x00001000

	)

33 
	#SZ_8K
 0x00002000

	)

34 
	#SZ_16K
 0x00004000

	)

35 
	#SZ_64K
 0x00010000

	)

36 
	#SZ_128K
 0x00020000

	)

37 
	#SZ_256K
 0x00040000

	)

38 
	#SZ_512K
 0x00080000

	)

40 
	#SZ_1M
 0x00100000

	)

41 
	#SZ_2M
 0x00200000

	)

42 
	#SZ_4M
 0x00400000

	)

43 
	#SZ_8M
 0x00800000

	)

44 
	#SZ_16M
 0x01000000

	)

45 
	#SZ_32M
 0x02000000

	)

46 
	#SZ_64M
 0x04000000

	)

47 
	#SZ_128M
 0x08000000

	)

48 
	#SZ_256M
 0x10000000

	)

49 
	#SZ_512M
 0x20000000

	)

51 
	#SZ_1G
 0x40000000

	)

52 
	#SZ_2G
 0x80000000

	)

	@linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/gpio.h

1 #i‚de‡
__ADM8668_GPIO_H__


2 
	#__ADM8668_GPIO_H__


	)

4 
	#gpio_to_úq
(
gpio
Ë-1

	)

6 
	#gpio_gë_vÆue
 
__gpio_gë_vÆue


	)

7 
	#gpio_£t_vÆue
 
__gpio_£t_vÆue


	)

9 
	#gpio_ˇn¶ìp
 
__gpio_ˇn¶ìp


	)

11 
	~<asm-gíîic/gpio.h
>

	@linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/irq.h

8 #i‚de‡
__ASM_MACH_ADM8668_IRQ_H


9 
	#__ASM_MACH_ADM8668_IRQ_H


	)

11 
	#NR_IRQS
 32

	)

12 
	#MIPS_CPU_IRQ_BASE
 16

	)

	@linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/war.h

8 #i‚de‡
__ASM_MIPS_MACH_ADM8668_WAR_H


9 
	#__ASM_MIPS_MACH_ADM8668_WAR_H


	)

11 
	#R4600_V1_INDEX_ICACHEOP_WAR
 0

	)

12 
	#R4600_V1_HIT_CACHEOP_WAR
 0

	)

13 
	#R4600_V2_HIT_CACHEOP_WAR
 0

	)

14 
	#R5432_CP0_INTERRUPT_WAR
 0

	)

15 
	#BCM1250_M3_WAR
 0

	)

16 
	#SIBYTE_1956_WAR
 0

	)

17 
	#MIPS4K_ICACHE_REFILL_WAR
 0

	)

18 
	#MIPS_CACHE_SYNC_WAR
 0

	)

19 
	#TX49XX_ICACHE_INDEX_INV_WAR
 0

	)

20 
	#RM9000_CDEX_SMP_WAR
 0

	)

21 
	#ICACHE_REFILLS_WORKAROUND_WAR
 0

	)

22 
	#R10000_LLSC_WAR
 0

	)

23 
	#MIPS34K_MISSED_ITLB_WAR
 0

	)

	@linux/adm8668/files-3.18/arch/mips/pci/pci-adm8668.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/pci.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/•ölock.h
>

18 
	~<asm/byã‹dî.h
>

19 
	~<asm/pci.h
>

20 
	~<adm8668.h
>

22 
DEFINE_SPINLOCK
(
pci_lock
);

24 
	#PCI_ENABLE
 0x80000000

	)

25 
	#ADMPCI_IO_BASE
 0x12600000

	)

26 
	#ADMPCI_IO_SIZE
 0x1fffff

	)

27 
	#ADMPCI_MEM_BASE
 0x16000000

	)

28 
	#ADMPCI_MEM_SIZE
 0x7ffffff

	)

30 
ölöe
 
	$wrôe_cfgaddr
(
u32
 
addr
)

32 
	`__øw_wrôñ
((
addr
 | 
PCI_ENABLE
),

33 (
__iomem
 *)
	`KSEG1ADDR
(
ADM8668_PCICFG_BASE
));

34 
	}
}

36 
ölöe
 
	$wrôe_cfgd©a
(
u32
 
d©a
)

38 
	`__øw_wrôñ
(
d©a
, (
__iomem
 *)
	`KSEG1ADDR
(
ADM8668_PCIDAT_BASE
));

39 
	}
}

41 
ölöe
 
u32
 
	$ªad_cfgd©a
()

43  
	`__øw_ªadl
((
__iomem
 *)
	`KSEG1ADDR
(
ADM8668_PCIDAT_BASE
));

44 
	}
}

46 
ölöe
 
u32
 
	$mkaddr
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
)

48  ((
bus
->
numbî
 & 0xffË<< 16Ë| ((
dev‚
 & 0xff) << 8) |

49 (
whîe
 & 0xfc);

50 
	}
}

52 
	$pci_ªad_c⁄fig
(
pci_bus
 *
bus
, 
dev‚
,

53 
whîe
, 
size
, 
u32
 *
vÆ
)

55 
Êags
;

56 
u32
 
d©a
;

58 
	`•ö_lock_úqßve
(&
pci_lock
, 
Êags
);

59 
	`wrôe_cfgaddr
(
	`mkaddr
(
bus
, 
dev‚
, 
whîe
));

60 
d©a
 = 
	`ªad_cfgd©a
();

62 
size
) {

64 i‡(
whîe
 & 1)

65 
d©a
 >>= 8;

66 i‡(
whîe
 & 2)

67 
d©a
 >>= 16;

68 
d©a
 &= 0xff;

71 i‡(
whîe
 & 2)

72 
d©a
 >>= 16;

73 
d©a
 &= 0xffff;

77 *
vÆ
 = 
d©a
;

79 
	`•ö_u∆ock_úqª°‹e
(&
pci_lock
, 
Êags
);

81  
PCIBIOS_SUCCESSFUL
;

82 
	}
}

84 
	$pci_wrôe_c⁄fig
(
pci_bus
 *
bus
, 
dev‚
,

85 
whîe
, 
size
, 
u32
 
vÆ
)

87 
Êags
;

88 
u32
 
d©a
;

89 
s
;

91 
	`•ö_lock_úqßve
(&
pci_lock
, 
Êags
);

93 
	`wrôe_cfgaddr
(
	`mkaddr
(
bus
, 
dev‚
, 
whîe
));

94 
d©a
 = 
	`ªad_cfgd©a
();

96 
size
) {

98 
s
 = ((
whîe
 & 3) << 3);

99 
d©a
 &~(0xf‡<< 
s
);

100 
d©a
 |((
vÆ
 & 0xffË<< 
s
);

103 
s
 = ((
whîe
 & 2) << 4);

104 
d©a
 &~(0xfff‡<< 
s
);

105 
d©a
 |((
vÆ
 & 0xffffË<< 
s
);

108 
d©a
 = 
vÆ
;

112 
	`wrôe_cfgd©a
(
d©a
);

114 
	`•ö_u∆ock_úqª°‹e
(&
pci_lock
, 
Êags
);

116  
PCIBIOS_SUCCESSFUL
;

117 
	}
}

119 
pci_›s
 
	gadm8668_pci_›s
 = {

120 .
ªad
 = 
pci_ªad_c⁄fig
,

121 .
	gwrôe
 = 
pci_wrôe_c⁄fig


125 
ªsour˚
 
	gpcii›‹t_ªsour˚
 = {

126 .
«me
 = "adm8668_pci",

127 .
	g°¨t
 = 
ADMPCI_IO_BASE
,

128 .
	gíd
 = 
ADMPCI_IO_BASE
 + 
ADMPCI_IO_SIZE
,

129 .
	gÊags
 = 
IORESOURCE_IO


132 
ªsour˚
 
	gpciiomem_ªsour˚
 = {

133 .
«me
 = "adm8668_pci",

134 .
	g°¨t
 = 
ADMPCI_MEM_BASE
,

135 .
	gíd
 = 
ADMPCI_MEM_BASE
 + 
ADMPCI_MEM_SIZE
,

136 .
	gÊags
 = 
IORESOURCE_MEM


139 
pci_c⁄åﬁÀr
 
	gadm8668_pci_c⁄åﬁÀr
 = {

140 .
pci_›s
 = &
adm8668_pci_›s
,

141 .
	gio_ªsour˚
 = &
pcii›‹t_ªsour˚
,

142 .
	gmem_ªsour˚
 = &
pciiomem_ªsour˚
,

145 
	$pcibios_m≠_úq
(c⁄° 
pci_dev
 *
dev
, 
u8
 
¶Ÿ
, u8 
pö
)

147 
¶Ÿ
) {

155  
dev
->
úq
;

157 
	}
}

159 
	$pcibios_∂©_dev_öô
(
pci_dev
 *
dev
)

162 
	}
}

164 
	$adm8668_pci_fixup
(
pci_dev
 *
dev
)

166 i‡(
dev
->
dev‚
 != 0)

169 
	`¥_öfo
("PCI: fixing up ADM8668 controller\n");

172 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
,

173 (
PCI_COMMAND_IO
 | 
PCI_COMMAND_MEMORY
 | 
PCI_COMMAND_MASTER
));

176 
	`pci_wrôe_c⁄fig_byã
(
dev
, 
PCI_CACHE_LINE_SIZE
, 4);

179 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0);

180 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_1
, 0);

181 
	}
}

182 
DECLARE_PCI_FIXUP_HEADER
(0x1317, 0x8688, 
adm8668_pci_fixup
);

184 
__öô
 
	$adm8668_pci_öô
()

186 
__iomem
 *
io_m≠_ba£
;

188 
i›‹t_ªsour˚
.
°¨t
 = 
ADMPCI_IO_BASE
;

189 
i›‹t_ªsour˚
.
íd
 = 
ADMPCI_IO_BASE
 + 
ADMPCI_IO_SIZE
;

191 
io_m≠_ba£
 = 
	`i‹em≠
(
ADMPCI_IO_BASE
, 
ADMPCI_IO_SIZE
);

192 i‡(!
io_m≠_ba£
)

193 
	`¥ötk
("io_map_base didn't work.\n");

195 
adm8668_pci_c⁄åﬁÀr
.
io_m≠_ba£
 = ()io_map_base;

196 
	`ªgi°î_pci_c⁄åﬁÀr
(&
adm8668_pci_c⁄åﬁÀr
);

199 
	}
}

200 
¨ch_öôˇŒ
(
adm8668_pci_öô
);

	@linux/adm8668/files-3.18/drivers/mtd/maps/adm8668.c

42 
	~<löux/moduÀ.h
>

43 
	~<löux/ty≥s.h
>

44 
	~<löux/kî√l.h
>

45 
	~<löux/sched.h
>

46 
	~<löux/waô.h
>

47 
	~<löux/mtd/mtd.h
>

48 
	~<löux/mtd/m≠.h
>

49 
	~<löux/¶ab.h
>

50 
	~<löux/mtd/∑πôi⁄s.h
>

51 
	~<löux/¸c32.h
>

52 
	~<löux/magic.h
>

53 
	~<asm/io.h
>

55 
	#WINDOW_ADDR
 0x10000000

	)

56 
	#WINDOW_SIZE
 0x800000

	)

57 
	#BANKWIDTH
 2

	)

62 
	ssquashfs_su≥r_block
 {

63 
__À32
 
	ms_magic
;

64 
__À32
 
	m∑d0
[9];

65 
__À64
 
	mbyãs_u£d
;

68 
	#IH_MAGIC
 0x56190527

	)

69 
	suboŸ_hódî
 {

70 
uöt32_t
 
	mih_magic
;

71 
uöt32_t
 
	mih_h¸c
;

72 
uöt32_t
 
	mih_time
;

73 
uöt32_t
 
	mih_size
;

74 
uöt32_t
 
	mih_lﬂd
;

75 
uöt32_t
 
	mih_ï
;

76 
uöt32_t
 
	mih_d¸c
;

77 
uöt8_t
 
	mih_os
;

78 
uöt8_t
 
	mih_¨ch
;

79 
uöt8_t
 
	mih_ty≥
;

80 
uöt8_t
 
	mih_comp
;

81 
	mih_«me
[32];

86 
mtd_öfo
 *
	gadm8668_mtd
;

88 
m≠_öfo
 
	gadm8668_m≠
 = {

89 
«me
: "adm8668-nor",

90 
size
: 
WINDOW_SIZE
,

91 
phys
: 
WINDOW_ADDR
,

92 
b™kwidth
: 
BANKWIDTH
,

107 
	$îa£_ˇŒback
(
îa£_öfo
 *
d⁄e
)

109 
waô_queue_hód_t
 *
waô_q
 = (waô_queue_hód_à*)
d⁄e
->
¥iv
;

110 
	`wake_up
(
waô_q
);

111 
	}
}

113 
	$îa£_wrôe
 (
mtd_öfo
 *
mtd
, 
pos
,

114 
Àn
, c⁄° *
buf
)

116 
îa£_öfo
 
îa£
;

117 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

118 
waô_queue_hód_t
 
waô_q
;

119 
size_t
 
ªéí
;

120 
ªt
;

126 
	`öô_waôqueue_hód
(&
waô_q
);

127 
îa£
.
mtd
 = mtd;

128 
îa£
.
ˇŒback
 = 
îa£_ˇŒback
;

129 
îa£
.
addr
 = 
pos
;

130 
îa£
.
Àn
 =Üen;

131 
îa£
.
¥iv
 = (
u_l⁄g
)&
waô_q
;

133 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

134 
	`add_waô_queue
(&
waô_q
, &
waô
);

136 
ªt
 = 
mtd
->
	`_îa£
(mtd, &
îa£
);

137 i‡(
ªt
) {

138 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

139 
	`ªmove_waô_queue
(&
waô_q
, &
waô
);

140 
	`¥ötk
 (
KERN_WARNING
 "erase ofÑegion [0x%lx, 0x%x] "

142 
pos
, 
Àn
, 
mtd
->
«me
);

143  
ªt
;

146 
	`scheduÀ
();

147 
	`ªmove_waô_queue
(&
waô_q
, &
waô
);

153 
ªt
 = 
mtd
->
	`_wrôe
 (mtd, 
pos
, 
Àn
, &
ªéí
, 
buf
);

154 i‡(
ªt
)

155  
ªt
;

156 i‡(
ªéí
 !
Àn
)

157  -
EIO
;

159 
	}
}

162 
mtd_∑πôi⁄
 
	gadm8668_∑πs
[] = {

163 { 
«me
: "löux", 
off£t
: 0x40000, 
size
: 
WINDOW_SIZE
-0x40000, },

164 { 
«me
: "roŸfs", 
off£t
: 0xe0000, 
size
: 0x140000, },

165 { 
«me
: "uboŸ_ív", 
off£t
: 0x20000, 
size
: 0x20000, },

166 { 
«me
: 
NULL
, },

170 
	#PART_LINUX
 0

	)

171 
	#PART_ROOTFS
 1

	)

172 
	#NR_PARTS
 3

	)

174 
__öô


175 
	$öô_mtd_∑πôi⁄s
(
mtd_öfo
 *
mtd
, 
size_t
 
size
)

177 
uboŸ_hódî
 
uhdr
;

178 
off
, 
blocksize
;

179 
size_t
 
Àn
, 
löux_Àn
;

180 
squashfs_su≥r_block
 
shdr
;

182 
blocksize
 = 
mtd
->
îa£size
;

183 i‡(
blocksize
 < 0x10000)

184 
blocksize
 = 0x10000;

187 
	`mem£t
(&
shdr
, 0xe5, (shdr));

188 
off
 = 
adm8668_∑πs
[
PART_LINUX
].
off£t
; of‡< 
size
; of‡+
blocksize
) {

192 i‡(
mtd
->
	`_ªad
(mtd, 
off
, (
shdr
), &
Àn
, (*)&shdr) ||

193 
Àn
 !(
shdr
))

196 i‡(
shdr
.
s_magic
 =
SQUASHFS_MAGIC
) {

197 
uöt32_t
 
fs_size
 = (uöt32_t)
shdr
.
byãs_u£d
;

199 
	`¥ötk
(
KERN_INFO
 "%s: FilesystemÅype: squashfs, size=%dkB\n",

200 
mtd
->
«me
, 
fs_size
>>10);

204 
adm8668_∑πs
[
PART_ROOTFS
].
off£t
 = 
off
;

205 
adm8668_∑πs
[
PART_ROOTFS
].
size
 = 
mtd
->size -

206 
adm8668_∑πs
[
PART_ROOTFS
].
off£t
;

210 
löux_Àn
 = 
adm8668_∑πs
[
PART_LINUX
+1].
off£t
 -

211 
adm8668_∑πs
[
PART_LINUX
].
off£t
;

213 
adm8668_∑πs
[
PART_LINUX
].
size
 = 
mtd
->size -

214 
adm8668_∑πs
[
PART_LINUX
].
off£t
;

216 
adm8668_∑πs
[
PART_LINUX
].
size
 = 
löux_Àn
;

218 
found
;

222 
	`¥ötk
(
KERN_NOTICE


224 
mtd
->
«me
);

225  
NR_PARTS
;

227 
found
:

228 i‡(
mtd
->
	`_ªad
(mtd, 
adm8668_∑πs
[
PART_LINUX
].
off£t
, (
uhdr
), &
Àn
, (*)&uhdr) ||

229 
Àn
 !(
uhdr
))

230  
NR_PARTS
;

233 i‡(
uhdr
.
ih_magic
 !
IH_MAGIC
)

234  
NR_PARTS
;

236 i‡(
	`be32_to_˝u
(
uhdr
.
ih_size
Ë!(
löux_Àn
 - (uhdr))) {

237 *
block
, *
d©a
;

238 
off£t
;

240 
off£t
 = 
adm8668_∑πs
[
PART_LINUX
].offset +

241 (
uboŸ_hódî
);

242 
d©a
 = (*)(
WINDOW_ADDR
 | 0xA0000000 | 
off£t
);

244 
	`¥ötk
(
KERN_NOTICE
 "Updating U-boot image:\n");

245 
	`¥ötk
(
KERN_NOTICE
 " old: [size: %8d crc32: 0x%08x]\n",

246 
	`be32_to_˝u
(
uhdr
.
ih_size
), be32_to_˝u(uhdr.
ih_d¸c
));

249 
uhdr
.
ih_size
 = 
	`˝u_to_be32
(
löux_Àn
 - (uhdr));

250 
uhdr
.
ih_d¸c
 = 
	`¸c32_À
(~0, 
d©a
, 
löux_Àn
 - (uhdr)) ^ (~0);

251 
uhdr
.
ih_d¸c
 = 
	`˝u_to_be32
(uhdr.ih_dcrc);

253 
	`¥ötk
(
KERN_NOTICE
 "Çew: [size: %8d crc32: 0x%08x]\n",

254 
	`be32_to_˝u
(
uhdr
.
ih_size
), be32_to_˝u(uhdr.
ih_d¸c
));

257 
uhdr
.
ih_h¸c
 = 0;

258 
uhdr
.
ih_h¸c
 = 
	`¸c32_À
(~0, (*)&uhdr,

259 (
uhdr
)) ^ (~0);

260 
uhdr
.
ih_h¸c
 = 
	`˝u_to_be32
(uhdr.ih_hcrc);

263 
block
 = 
	`kmÆloc
(
mtd
->
îa£size
, 
GFP_KERNEL
);

264 i‡(
mtd
->
	`_ªad
(mtd, 
adm8668_∑πs
[
PART_LINUX
].
off£t
, mtd->
îa£size
, &
Àn
, 
block
) ||Üen != mtd->erasesize) {

265 
	`¥ötk
("Error copying firstÉraseblock\n");

270 
	`mem˝y
(
block
, &
uhdr
, (uhdr));

271 i‡(
mtd
->
_u∆ock
)

272 
mtd
->
	`_u∆ock
(mtd, 
off
, mtd->
îa£size
);

273 
	`îa£_wrôe
(
mtd
, 
adm8668_∑πs
[
PART_LINUX
].
off£t
, mtd->
îa£size
, 
block
);

274 i‡(
mtd
->
_sync
)

275 
mtd
->
	`_sync
(mtd);

276 
	`k‰ì
(
block
);

277 
	`¥ötk
(
KERN_NOTICE
 "Done\n");

280  
NR_PARTS
;

281 
	}
}

283 
__öô
 
	$öô_adm8668_m≠
()

285 
ƒ_∑πs
, 
ªt
;

287 
adm8668_m≠
.
vút
 = 
	`i‹em≠
(
WINDOW_ADDR
, 
WINDOW_SIZE
);

289 i‡(!
adm8668_m≠
.
vút
) {

290 
	`¥ötk
(
KERN_ERR
 "FailedÅo ioremap\n");

291  -
EIO
;

294 
	`sim∂e_m≠_öô
(&
adm8668_m≠
);

295 i‡(!(
adm8668_mtd
 = 
	`do_m≠_¥obe
("cfi_¥obe", &
adm8668_m≠
))) {

296 
	`¥ötk
(
KERN_ERR
 "cfi_probe failed\n");

297 
	`iounm≠
((*)
adm8668_m≠
.
vút
);

298  -
ENXIO
;

301 
adm8668_mtd
->
ow√r
 = 
THIS_MODULE
;

303 
ƒ_∑πs
 = 
	`öô_mtd_∑πôi⁄s
(
adm8668_mtd
,ádm8668_mtd->
size
);

304 
ªt
 = 
	`mtd_devi˚_ªgi°î
(
adm8668_mtd
, 
adm8668_∑πs
, 
ƒ_∑πs
);

305 i‡(
ªt
) {

306 
	`¥ötk
(
KERN_ERR
 "Flash: mtd_device_register failed\n");

307 
Áû
;

312 
Áû
:

313 i‡(
adm8668_mtd
)

314 
	`m≠_de°roy
(
adm8668_mtd
);

315 i‡(
adm8668_m≠
.
vút
)

316 
	`iounm≠
((*Ë
adm8668_m≠
.
vút
);

317 
adm8668_m≠
.
vút
 = 0;

318  
ªt
;

319 
	}
}

321 
__exô
 
	$˛ónup_adm8668_m≠
()

323 
	`mtd_devi˚_uƒegi°î
(
adm8668_mtd
);

324 
	`m≠_de°roy
(
adm8668_mtd
);

325 
	`iounm≠
((*Ë
adm8668_m≠
.
vút
);

326 
adm8668_m≠
.
vút
 = 0;

327 
	}
}

329 
moduÀ_öô
(
öô_adm8668_m≠
);

330 
moduÀ_exô
(
˛ónup_adm8668_m≠
);

332 
MODULE_LICENSE
("GPL");

333 
MODULE_AUTHOR
("Scott Nicholas <neutronscott@scottn.us>");

334 
MODULE_DESCRIPTION
("MTD map driver for ADM8668 NOR Flash");

	@linux/adm8668/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 #i‚de‡
Byã


25 
	#Byã
 

	)

28 
	#kNumT›Bôs
 24

	)

29 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

31 
	#kNumBôModñTŸÆBôs
 11

	)

32 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

33 
	#kNumMoveBôs
 5

	)

35 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

37 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

38 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

40 #ifde‡
_LZMA_IN_CB


42 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

43 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

44 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

46 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

50 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

52 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

56 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

58 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

59 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

60 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

62 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

63 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

64 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

66 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

68 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

69 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

70 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

71 
ªs
 -(1 << 
numLevñs
); }

	)

74 
	#kNumPosBôsMax
 4

	)

75 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

77 
	#kLíNumLowBôs
 3

	)

78 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

79 
	#kLíNumMidBôs
 3

	)

80 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

81 
	#kLíNumHighBôs
 8

	)

82 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

84 
	#LíChoi˚
 0

	)

85 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

86 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

87 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

88 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

89 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

92 
	#kNumSèãs
 12

	)

93 
	#kNumLôSèãs
 7

	)

95 
	#kSèπPosModñIndex
 4

	)

96 
	#kEndPosModñIndex
 14

	)

97 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

99 
	#kNumPosSlŸBôs
 6

	)

100 
	#kNumLíToPosSèãs
 4

	)

102 
	#kNumAlignBôs
 4

	)

103 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

105 
	#kM©chMöLí
 2

	)

107 
	#IsM©ch
 0

	)

108 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

109 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

110 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

111 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

112 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

113 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

114 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

115 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

116 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

117 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

118 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

120 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


121 
	gSt›CompûögDueBUG


125 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

127 
¥›0
;

128 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

129  
LZMA_RESULT_DATA_ERROR
;

130 
¥›0
 = 
¥›sD©a
[0];

131 i‡(
¥›0
 >= (9 * 5 * 5))

132  
LZMA_RESULT_DATA_ERROR
;

134 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

135 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

136 
¥›sRes
->
lc
 = 
¥›0
;

145 #ifde‡
_LZMA_OUT_READ


147 
i
;

148 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

149 
i
 = 0; i < 4; i++)

150 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

151 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

152 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

155  
LZMA_RESULT_OK
;

156 
	}
}

159 
	#kLzmaSåómWasFöishedId
 (-1)

	)

161 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

162 #ifde‡
_LZMA_IN_CB


163 
ILzmaInCÆlback
 *
InCÆlback
,

165 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

167 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

169 
CProb
 *
	gp
 = 
vs
->
Probs
;

170 
SizeT
 
	gnowPos
 = 0;

171 
Byã
 
	g¥eviousByã
 = 0;

172 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

173 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

174 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

176 #ifde‡
_LZMA_OUT_READ


178 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

179 
UI¡32
 
	gCode
 = 
vs
->
Code
;

180 #ifde‡
_LZMA_IN_CB


181 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

182 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

184 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

185 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

187 
	g°©e
 = 
vs
->
Sèã
;

188 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

189 
	gÀn
 = 
vs
->
RemaöLí
;

190 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

191 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

193 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

194 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

195 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

197 
Byã
 
	gãmpDi˘i⁄¨y
[4];

199 #i‚de‡
_LZMA_IN_CB


200 *
	göSizePro˚s£d
 = 0;

202 *
	goutSizePro˚s£d
 = 0;

203 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

204  
LZMA_RESULT_OK
;

206 i‡(
	gdi˘i⁄¨ySize
 == 0)

208 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

209 
	gdi˘i⁄¨ySize
 = 1;

210 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

213 i‡(
	gÀn
 =
kLzmaNìdInôId
)

216 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

217 
UI¡32
 
	gi
;

218 
	gi
 = 0; i < 
	gnumProbs
; i++)

219 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

220 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

221 
	g°©e
 = 0;

222 
	gglobÆPos
 = 0;

223 
	gdi°™˚Limô
 = 0;

224 
	gdi˘i⁄¨yPos
 = 0;

225 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

226 #ifde‡
_LZMA_IN_CB


227 
	gRC_INIT
;

229 
RC_INIT
(
öSåóm
, 
öSize
);

232 
	gÀn
 = 0;

234 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

236 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

237 i‡(
	gpos
 >
di˘i⁄¨ySize
)

238 
pos
 +
di˘i⁄¨ySize
;

239 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

240 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

241 
di˘i⁄¨yPos
 = 0;

242 
	gÀn
--;

244 i‡(
	gdi˘i⁄¨yPos
 == 0)

245 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

247 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

251 
	g°©e
 = 0;

252 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

253 
	gÀn
 = 0;

254 c⁄° 
Byã
 *
	gBuf„r
;

255 c⁄° 
Byã
 *
	gBuf„rLim
;

256 
UI¡32
 
	gR™ge
;

257 
UI¡32
 
	gCode
;

259 #i‚de‡
_LZMA_IN_CB


260 *
	göSizePro˚s£d
 = 0;

262 *
	goutSizePro˚s£d
 = 0;

265 
UI¡32
 
	gi
;

266 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

267 
	gi
 = 0; i < 
	gnumProbs
; i++)

268 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

271 #ifde‡
_LZMA_IN_CB


272 
	gRC_INIT
;

274 
RC_INIT
(
öSåóm
, 
öSize
);

279 
	gnowPos
 < 
	goutSize
)

281 
CProb
 *
	g¥ob
;

282 
UI¡32
 
	gbound
;

283 
	gposSèã
 = ()(

284 (
nowPos


285 #ifde‡
_LZMA_OUT_READ


286 + 
globÆPos


289 & 
posSèãMask
);

291 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

292 
IfBô0
(
¥ob
)

294 
	gsymbﬁ
 = 1;

295 
Upd©eBô0
(
¥ob
)

296 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

298 (
nowPos


299 #ifde‡
_LZMA_OUT_READ


300 + 
globÆPos


303 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

305 i‡(
	g°©e
 >
kNumLôSèãs
)

307 
m©chByã
;

308 #ifde‡
_LZMA_OUT_READ


309 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

310 i‡(
	gpos
 >
di˘i⁄¨ySize
)

311 
pos
 +
di˘i⁄¨ySize
;

312 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

314 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

318 
	gbô
;

319 
CProb
 *
	g¥obLô
;

320 
	gm©chByã
 <<= 1;

321 
	gbô
 = (
m©chByã
 & 0x100);

322 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

323 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

325 
	gsymbﬁ
 < 0x100);

327 
	gsymbﬁ
 < 0x100)

329 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

330 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

332 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

334 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

335 #ifde‡
_LZMA_OUT_READ


336 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

337 
	gdi°™˚Limô
++;

339 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

340 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

341 
di˘i⁄¨yPos
 = 0;

343 i‡(
	g°©e
 < 4) state = 0;

344 i‡(
	g°©e
 < 10) state -= 3;

345 
	g°©e
 -= 6;

349 
Upd©eBô1
(
¥ob
);

350 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

351 
IfBô0
(
¥ob
)

353 
Upd©eBô0
(
¥ob
);

354 
	gªp3
 = 
ªp2
;

355 
	gªp2
 = 
ªp1
;

356 
	gªp1
 = 
ªp0
;

357 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

358 
	g¥ob
 = 
p
 + 
LíCodî
;

362 
Upd©eBô1
(
¥ob
);

363 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

364 
IfBô0
(
¥ob
)

366 
Upd©eBô0
(
¥ob
);

367 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

368 
IfBô0
(
¥ob
)

370 #ifde‡
_LZMA_OUT_READ


371 
UI¡32
 
	gpos
;

373 
Upd©eBô0
(
¥ob
);

375 #ifde‡
_LZMA_OUT_READ


376 i‡(
	gdi°™˚Limô
 == 0)

378 i‡(
nowPos
 == 0)

380  
LZMA_RESULT_DATA_ERROR
;

382 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

383 #ifde‡
_LZMA_OUT_READ


384 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

385 i‡(
	gpos
 >
di˘i⁄¨ySize
)

386 
pos
 +
di˘i⁄¨ySize
;

387 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

388 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

389 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

390 
di˘i⁄¨yPos
 = 0;

392 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

394 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

395 #ifde‡
_LZMA_OUT_READ


396 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

397 
	gdi°™˚Limô
++;

404 
Upd©eBô1
(
¥ob
);

409 
UI¡32
 
	gdi°™˚
;

410 
Upd©eBô1
(
¥ob
);

411 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

412 
IfBô0
(
¥ob
)

414 
Upd©eBô0
(
¥ob
);

415 
	gdi°™˚
 = 
ªp1
;

419 
Upd©eBô1
(
¥ob
);

420 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

421 
IfBô0
(
¥ob
)

423 
Upd©eBô0
(
¥ob
);

424 
	gdi°™˚
 = 
ªp2
;

428 
Upd©eBô1
(
¥ob
);

429 
	gdi°™˚
 = 
ªp3
;

430 
	gªp3
 = 
ªp2
;

432 
	gªp2
 = 
ªp1
;

434 
	gªp1
 = 
ªp0
;

435 
	gªp0
 = 
di°™˚
;

437 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

438 
	g¥ob
 = 
p
 + 
RïLíCodî
;

441 
	gnumBôs
, 
	goff£t
;

442 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

443 
IfBô0
(
¥obLí
)

445 
Upd©eBô0
(
¥obLí
);

446 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

447 
	goff£t
 = 0;

448 
	gnumBôs
 = 
kLíNumLowBôs
;

452 
Upd©eBô1
(
¥obLí
);

453 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

454 
IfBô0
(
¥obLí
)

456 
Upd©eBô0
(
¥obLí
);

457 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

458 
	goff£t
 = 
kLíNumLowSymbﬁs
;

459 
	gnumBôs
 = 
kLíNumMidBôs
;

463 
Upd©eBô1
(
¥obLí
);

464 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

465 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

466 
	gnumBôs
 = 
kLíNumHighBôs
;

469 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

470 
	gÀn
 +
off£t
;

473 i‡(
	g°©e
 < 4)

475 
	gposSlŸ
;

476 
	g°©e
 +
kNumLôSèãs
;

477 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

478 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

479 
kNumPosSlŸBôs
);

480 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

481 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

483 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

484 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

485 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

487 
	gªp0
 <<
numDúe˘Bôs
;

488 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

492 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

495 
RC_NORMALIZE


496 
	gR™ge
 >>= 1;

497 
	gªp0
 <<= 1;

498 i‡(
	gCode
 >
R™ge
)

500 
Code
 -
R™ge
;

501 
	gªp0
 |= 1;

504 --
	gnumDúe˘Bôs
 != 0);

505 
	g¥ob
 = 
p
 + 
Align
;

506 
	gªp0
 <<
kNumAlignBôs
;

507 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

510 
	gi
 = 1;

511 
	gmi
 = 1;

514 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

515 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

516 
	gi
 <<= 1;

518 --
	gnumDúe˘Bôs
 != 0);

522 
	gªp0
 = 
posSlŸ
;

523 i‡(++
	gªp0
 =(
UI¡32
)(0))

526 
Àn
 = 
kLzmaSåómWasFöishedId
;

531 
	gÀn
 +
kM©chMöLí
;

532 #ifde‡
_LZMA_OUT_READ


533 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

535 i‡(
	gªp0
 > 
	gnowPos
)

537  
	gLZMA_RESULT_DATA_ERROR
;

539 #ifde‡
_LZMA_OUT_READ


540 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

541 
	gdi°™˚Limô
 +
Àn
;

543 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

548 #ifde‡
_LZMA_OUT_READ


549 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

550 i‡(
	gpos
 >
di˘i⁄¨ySize
)

551 
pos
 +
di˘i⁄¨ySize
;

552 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

553 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

554 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

555 
di˘i⁄¨yPos
 = 0;

557 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

559 
	gÀn
--;

560 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

562 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

565 
	gRC_NORMALIZE
;

567 #ifde‡
_LZMA_OUT_READ


568 
	gvs
->
	gR™ge
 = 
R™ge
;

569 
	gvs
->
	gCode
 = 
Code
;

570 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

571 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

572 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

573 
	gvs
->
	gRïs
[0] = 
ªp0
;

574 
	gvs
->
	gRïs
[1] = 
ªp1
;

575 
	gvs
->
	gRïs
[2] = 
ªp2
;

576 
	gvs
->
	gRïs
[3] = 
ªp3
;

577 
	gvs
->
	gSèã
 = 
°©e
;

578 
	gvs
->
	gRemaöLí
 = 
Àn
;

579 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

582 #ifde‡
_LZMA_IN_CB


583 
	gvs
->
	gBuf„r
 = 
Buf„r
;

584 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

586 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

588 *
	goutSizePro˚s£d
 = 
nowPos
;

589  
	gLZMA_RESULT_OK
;

	@linux/adm8668/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

41 #i‚de‡
UI¡32


42 #ifde‡
_LZMA_UINT32_IS_ULONG


43 
	#UI¡32
 

	)

45 
	#UI¡32
 

	)

49 #i‚de‡
SizeT


50 #ifde‡
_LZMA_SYSTEM_SIZE_T


51 
	~<°ddef.h
>

52 
	#SizeT
 
size_t


	)

54 
	#SizeT
 
UI¡32


	)

58 #ifde‡
_LZMA_PROB32


59 
	#CProb
 
UI¡32


	)

61 
	#CProb
 

	)

64 
	#LZMA_RESULT_OK
 0

	)

65 
	#LZMA_RESULT_DATA_ERROR
 1

	)

67 #ifde‡
_LZMA_IN_CB


68 
	s_ILzmaInCÆlback


70 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

71 } 
	tILzmaInCÆlback
;

74 
	#LZMA_BASE_SIZE
 1846

	)

75 
	#LZMA_LIT_SIZE
 768

	)

77 
	#LZMA_PROPERTIES_SIZE
 5

	)

79 
	s_CLzmaPr›îtõs


81 
	mlc
;

82 
	mÕ
;

83 
	mpb
;

84 #ifde‡
_LZMA_OUT_READ


85 
UI¡32
 
	mDi˘i⁄¨ySize
;

87 }
	tCLzmaPr›îtõs
;

89 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

91 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

93 
	#kLzmaNìdInôId
 (-2)

	)

95 
	s_CLzmaDecodîSèã


97 
CLzmaPr›îtõs
 
	mPr›îtõs
;

98 
CProb
 *
	mProbs
;

100 #ifde‡
_LZMA_IN_CB


101 c⁄° *
	mBuf„r
;

102 c⁄° *
	mBuf„rLim
;

105 #ifde‡
_LZMA_OUT_READ


106 *
	mDi˘i⁄¨y
;

107 
UI¡32
 
	mR™ge
;

108 
UI¡32
 
	mCode
;

109 
UI¡32
 
	mDi˘i⁄¨yPos
;

110 
UI¡32
 
	mGlobÆPos
;

111 
UI¡32
 
	mDi°™˚Limô
;

112 
UI¡32
 
	mRïs
[4];

113 
	mSèã
;

114 
	mRemaöLí
;

115 
	mTempDi˘i⁄¨y
[4];

117 } 
	tCLzmaDecodîSèã
;

119 #ifde‡
_LZMA_OUT_READ


120 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

123 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

124 #ifde‡
_LZMA_IN_CB


125 
ILzmaInCÆlback
 *
öCÆlback
,

127 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

129 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/adm8668/image/lzma-loader/src/decompress.c

37 
	~"LzmaDecode.h
"

38 
	~<exp‹ts.h
>

40 
	#KSEG0ADDR
(
addr
Ë(0x80000000|addr)

	)

42 vﬁ©ûê
gd_t
 *
gd
 
asm
 ("k0");

43 *
	gd©a
;

45 
__ölöe__
 
	$gë_byã
()

47 *
buf„r
;

49 
buf„r
 = 
d©a
;

50 
d©a
++;

52  *
buf„r
;

53 
	}
}

58 *
	gbuf„r
 = (*)(
RAMSTART
 + 
RAMSIZE
 - 0x00020000);

59 
_bö¨y_vmlöux_lzma_°¨t
[];

60 
_bö¨y_vmlöux_lzma_íd
[];

61 
lzma_°¨t
[];

62 
lzma_íd
[];

65 
	$íåy
(
¨g0
, 
¨g1
,

66 
¨g2
, 
¨g3
)

68 
i
;

69 
isize
;

70 
osize
;

71 
¨gc
 = 
¨g0
;

72 **
¨gv
 = (**)
¨g1
;

73 **
ívp
 = (**)
¨g2
;

75 
CLzmaDecodîSèã
 
vs
;

77 
d©a
 = (*)
_bö¨y_vmlöux_lzma_°¨t
;

78 
isize
 = 
_bö¨y_vmlöux_lzma_íd
 - 
_bö¨y_vmlöux_lzma_°¨t
 + 1;

80 
	`puts
("\nLZMA kernelÜoader\n");

82 
	`¥ötf
("lzm®d©®@ %#x - %#x\n", 
_bö¨y_vmlöux_lzma_°¨t
, 
_bö¨y_vmlöux_lzma_íd
);

83 
	`¥ötf
("lﬂdádd∏@ %#x\n\n", 
KERNEL_ENTRY
);

84 
	`¥ötf
("jum∞èbÀ @ %#x\n", 
gd
->
jt
[3]);

87 
i
 = 
	`gë_byã
();

88 
vs
.
Pr›îtõs
.
lc
 = 
i
 % 9, i = i / 9;

89 
vs
.
Pr›îtõs
.
Õ
 = 
i
 % 5, vs.Pr›îtõs.
pb
 = i / 5;

91 
vs
.
Probs
 = (
CProb
 *)
buf„r
;

94 
d©a
 += 4;

97 
osize
 = (()
	`gë_byã
()) +

98 (()
	`gë_byã
() << 8) +

99 (()
	`gë_byã
() << 16) +

100 (()
	`gë_byã
() << 24);

103 
d©a
 += 4;

106 
	`puts
("\nDecompressing kernel...");

107 i‡((
i
 = 
	`LzmaDecode
(&
vs
,

108 (*)
d©a
, 
isize
, &isize,

109 (*)
KERNEL_ENTRY
, 
osize
, &osize)Ë=
LZMA_RESULT_OK
)

111 
	`puts
("success!\n");

115 (((*)(
a0
, 
a1
, 
a2
, 
a3
))
KERNEL_ENTRY
)(
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
);

117 
	`puts
("failure!\n");

118 
	}
}

	@linux/adm8668/image/lzma-loader/src/include/_exports.h

1 
	$EXPORT_FUNC
(
gë_vîsi⁄
)

2 
	$EXPORT_FUNC
(
gëc
)

3 
	$EXPORT_FUNC
(
t°c
)

4 
	$EXPORT_FUNC
(
putc
)

5 
	$EXPORT_FUNC
(
puts
)

6 
	$EXPORT_FUNC
(
¥ötf
)

7 
	$EXPORT_FUNC
(
ö°Æl_hdÃ
)

8 
	$EXPORT_FUNC
(
‰ì_hdÃ
)

9 
	$EXPORT_FUNC
(
mÆloc
)

10 
	$EXPORT_FUNC
(
‰ì
)

11 
	$EXPORT_FUNC
(
udñay
)

12 
	$EXPORT_FUNC
(
gë_timî
)

13 
	$EXPORT_FUNC
(
v¥ötf
)

14 
	$EXPORT_FUNC
(
do_ª£t
)

15 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_I2C
)

16 
	$EXPORT_FUNC
(
i2c_wrôe
)

17 
	$EXPORT_FUNC
(
i2c_ªad
)

	@linux/adm8668/image/lzma-loader/src/include/asm/global_data.h

24 #i‚def 
__ASM_GBL_DATA_H


25 
	#__ASM_GBL_DATA_H


	)

27 
	~<asm/ªgdef.h
>

39 
	sglobÆ_d©a
 {

40 
bd_t
 *
	mbd
;

41 
	mÊags
;

42 
	mbaudøã
;

43 
	mhave_c⁄sﬁe
;

44 
	møm_size
;

45 
	mªloc_off
;

46 
	mív_addr
;

47 
	mív_vÆid
;

48 **
	mjt
;

49 } 
	tgd_t
;

54 
	#GD_FLG_RELOC
 0x00001

	)

55 
	#GD_FLG_DEVINIT
 0x00002

	)

56 
	#GD_FLG_SILENT
 0x00004

	)

58 
	#DECLARE_GLOBAL_DATA_PTR
 vﬁ©ûê
gd_t
 *
gd
 
	`asm
 ("k0")

	)

	@linux/adm8668/image/lzma-loader/src/include/asm/u-boot.h

24 #i‚de‡
_U_BOOT_H_


25 
	#_U_BOOT_H_
 1

	)

27 
	sbd_öfo
 {

28 
	mbi_baudøã
;

29 
	mbi_ù_addr
;

30 
	mbi_íëaddr
[6];

31 
	mbi_¨ch_numbî
;

32 
	mbi_boŸ_∑øms
;

33 
	mbi_mem°¨t
;

34 
	mbi_memsize
;

35 
	mbi_Êash°¨t
;

36 
	mbi_Êashsize
;

37 
	mbi_Êashoff£t
;

38 } 
	tbd_t
;

39 
	#bi_ív_d©a
 
bi_ív
->
d©a


	)

40 
	#bi_ív_¸c
 
bi_ív
->
¸c


	)

	@linux/adm8668/image/lzma-loader/src/include/common.h

24 #i‚de‡
__COMMON_H_


25 
	#__COMMON_H_
 1

	)

27 #unde‡
_LINUX_CONFIG_H


28 
	#_LINUX_CONFIG_H
 1

	)

30 
	tuch¨
;

31 vﬁ©ûê
	tvu_l⁄g
;

32 vﬁ©ûê
	tvu_sh‹t
;

33 vﬁ©ûê
	tvu_ch¨
;

35 
	~<öây≥s.h
>

36 
	~<löux/ty≥s.h
>

37 
	~<löux/°rög.h
>

38 
	~<asm/±ø˚.h
>

39 
	~<°d¨g.h
>

40 
	~<image.h
>

42 (
	töãºu±_h™dÀr_t
)(*);

44 
	~<asm/u-boŸ.h
>

45 
	~<asm/globÆ_d©a.h
>

	@linux/adm8668/image/lzma-loader/src/include/exports.h

1 #i‚de‡
__EXPORTS_H__


2 
	#__EXPORTS_H__


	)

3 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

4 #i‚de‡
__ASSEMBLY__


6 
	~<comm⁄.h
>

9 
gë_vîsi⁄
();

10 
gëc
();

11 
t°c
();

12 
putc
(const );

13 
puts
(const *);

14 
¥ötf
(c⁄° * 
fmt
, ...);

15 
ö°Æl_hdÃ
(, 
öãºu±_h™dÀr_t
*, *);

16 
‰ì_hdÃ
();

17 *
mÆloc
(
size_t
);

18 
‰ì
(*);

19 
udñay
();

20 
gë_timî
();

21 
v¥ötf
(c⁄° *, 
va_li°
);

22 
do_ª£t
 ();

24 
≠p_°¨tup
(**);

29 
	#EXPORT_FUNC
(
x
Ë
XF_
 ## x ,

	)

30 
	~<_exp‹ts.h
>

31 #unde‡
EXPORT_FUNC


33 
	mXF_MAX


36 
	#XF_VERSION
 2

	)

	@linux/adm8668/image/lzma-loader/src/include/image.h

24 #i‚de‡
__IMAGE_H__


25 
	#__IMAGE_H__


	)

30 
	#IH_OS_INVALID
 0

	)

31 
	#IH_OS_OPENBSD
 1

	)

32 
	#IH_OS_NETBSD
 2

	)

33 
	#IH_OS_FREEBSD
 3

	)

34 
	#IH_OS_4_4BSD
 4

	)

35 
	#IH_OS_LINUX
 5

	)

36 
	#IH_OS_SVR4
 6

	)

37 
	#IH_OS_ESIX
 7

	)

38 
	#IH_OS_SOLARIS
 8

	)

39 
	#IH_OS_IRIX
 9

	)

40 
	#IH_OS_SCO
 10

	)

41 
	#IH_OS_DELL
 11

	)

42 
	#IH_OS_NCR
 12

	)

43 
	#IH_OS_LYNXOS
 13

	)

44 
	#IH_OS_VXWORKS
 14

	)

45 
	#IH_OS_PSOS
 15

	)

46 
	#IH_OS_QNX
 16

	)

47 
	#IH_OS_U_BOOT
 17

	)

48 
	#IH_OS_RTEMS
 18

	)

49 
	#IH_OS_ARTOS
 19

	)

50 
	#IH_OS_UNITY
 20

	)

55 
	#IH_CPU_INVALID
 0

	)

56 
	#IH_CPU_ALPHA
 1

	)

57 
	#IH_CPU_ARM
 2

	)

58 
	#IH_CPU_I386
 3

	)

59 
	#IH_CPU_IA64
 4

	)

60 
	#IH_CPU_MIPS
 5

	)

61 
	#IH_CPU_MIPS64
 6

	)

62 
	#IH_CPU_PPC
 7

	)

63 
	#IH_CPU_S390
 8

	)

64 
	#IH_CPU_SH
 9

	)

65 
	#IH_CPU_SPARC
 10

	)

66 
	#IH_CPU_SPARC64
 11

	)

67 
	#IH_CPU_M68K
 12

	)

68 
	#IH_CPU_NIOS
 13

	)

69 
	#IH_CPU_MICROBLAZE
 14

	)

70 
	#IH_CPU_NIOS2
 15

	)

111 
	#IH_TYPE_INVALID
 0

	)

112 
	#IH_TYPE_STANDALONE
 1

	)

113 
	#IH_TYPE_KERNEL
 2

	)

114 
	#IH_TYPE_RAMDISK
 3

	)

115 
	#IH_TYPE_MULTI
 4

	)

116 
	#IH_TYPE_FIRMWARE
 5

	)

117 
	#IH_TYPE_SCRIPT
 6

	)

118 
	#IH_TYPE_FILESYSTEM
 7

	)

123 
	#IH_COMP_NONE
 0

	)

124 
	#IH_COMP_GZIP
 1

	)

125 
	#IH_COMP_BZIP2
 2

	)

127 
	#IH_MAGIC
 0x27051956

	)

128 
	#IH_NMLEN
 32

	)

130 
	#IH_NAMEMAGIC
 0x86680001

	)

131 
	#IH_SIZEMAX
 5800000

	)

136 
	simage_hódî
 {

137 
uöt32_t
 
	mih_magic
;

138 
uöt32_t
 
	mih_h¸c
;

139 
uöt32_t
 
	mih_time
;

140 
uöt32_t
 
	mih_size
;

141 
uöt32_t
 
	mih_lﬂd
;

142 
uöt32_t
 
	mih_ï
;

143 
uöt32_t
 
	mih_d¸c
;

144 
uöt8_t
 
	mih_os
;

145 
uöt8_t
 
	mih_¨ch
;

146 
uöt8_t
 
	mih_ty≥
;

147 
uöt8_t
 
	mih_comp
;

148 #ifde‡
NEW_IMAGE_HEADER


149 
uöt32_t
 
	mih_«memagic
;

150 
uöt8_t
 
	mih_«me
[
IH_NMLEN
-4];

152 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

154 } 
	timage_hódî_t
;

	@linux/adm8668/image/lzma-loader/src/stubs.c

1 
	~<exp‹ts.h
>

3 #i‚de‡
GCC_VERSION


4 
	#GCC_VERSION
 (
__GNUC__
 * 1000 + 
__GNUC_MINOR__
)

	)

14 
	#EXPORT_FUNC
(
x
) \

15 
asm
 volatile ( \

21 : : "i"(
	`off£tof
(
gd_t
, 
jt
)), "i"(
XF_
 ## 
x
 * (*)Ë: "t9");

	)

30 #i‡
GCC_VERSION
 < 3004

33 
__©åibuã__
((
unu£d
)Ë
	$dummy
()

35 
	~<_exp‹ts.h
>

36 
	}
}

39 
__bss_°¨t
, 
_íd
;

41 
	$≠p_°¨tup
(**
¨gv
)

43 * 
˝
 = &
__bss_°¨t
;

46 
˝
 < &
_íd
) {

47 *
˝
++ = 0;

49 
	}
}

52 #unde‡
EXPORT_FUNC


	@linux/apm821xx/files/arch/powerpc/platforms/44x/wndr4700.c

12 
	~<asm/machdï.h
>

13 
	~<asm/pci-bridge.h
>

14 
	~<asm/µc4xx.h
>

15 
	~<asm/¥om.h
>

16 
	~<asm/time.h
>

17 
	~<asm/udbg.h
>

18 
	~<asm/uic.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/of_∂©f‹m.h
>

22 
	~<löux/pci.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/fúmw¨e.h
>

26 
	~<löux/dñay.h
>

27 
	~<asm/u«lig√d.h
>

29 c⁄° 
of_devi˚_id
 
	gµc44x_of_bus
[] 
	g__öôc⁄°
 = {

30 { .
com∑tibÀ
 = "ibm,plb4", },

31 { .
	gcom∑tibÀ
 = "ibm,opb", },

32 { .
	gcom∑tibÀ
 = "ibm,ebc", },

33 { .
	gcom∑tibÀ
 = "simple-bus", },

37 
__öô
 
	$µc44x_devi˚_¥obe
()

39 
	`of_∂©f‹m_bus_¥obe
(
NULL
, 
µc44x_of_bus
, NULL);

42 
	}
}

43 
machöe_devi˚_öôˇŒ
(
wndr4700
, 
µc44x_devi˚_¥obe
);

45 *
	gbﬂrd
[] 
	g__öôd©a
 = {

49 
__öô
 
	$µc44x_¥obe
()

51 
roŸ
 = 
	`of_gë_Ê©_dt_roŸ
();

52 
i
 = 0;

54 
pcõ_bus_c⁄fig
 = 
PCIE_BUS_PEER2PEER
;

56 
i
 = 0; i < 
	`ARRAY_SIZE
(
bﬂrd
); i++) {

57 i‡(
	`of_Ê©_dt_is_com∑tibÀ
(
roŸ
, 
bﬂrd
[
i
])) {

58 
	`pci_£t_Êags
(
PCI_REASSIGN_ALL_RSRC
);

64 
	}
}

66 
	$deföe_machöe
(
wndr4700
) {

67 .
«me
 = "WNDR4700 Platform",

68 .
¥obe
 = 
µc44x_¥obe
,

69 .
¥ogªss
 = 
udbg_¥ogªss
,

70 .
öô_IRQ
 = 
uic_öô_åì
,

71 .
gë_úq
 = 
uic_gë_úq
,

72 .
ª°¨t
 = 
µc4xx_ª£t_sy°em
,

73 .
ˇlibøã_de¸
 = 
gíîic_ˇlibøã_de¸
,

74 
	}
};

76 
©h9k_∂©f‹m_d©a
 
	g¨9380_wmac0_d©a
 = {

77 .
Àd_pö
 = -1,

78 .
	gì¥om_«me
 = "pci_wmac1.eeprom",

80 
©h9k_∂©f‹m_d©a
 
	g¨9580_wmac1_d©a
 = {

81 .
Àd_pö
 = -1,

82 .
	gì¥om_«me
 = "pci_wmac0.eeprom",

85 
__öô
 
	$wndr4700_©h9k_ì¥om_lﬂd
()

87 
pci_dev
 *
dev
;

89 
dev
 = 
	`pci_gë_devi˚
(
PCI_VENDOR_ID_ATHEROS
, 0x0030, 
NULL
);

90 i‡(
dev
)

91 
dev
->dev.
∂©f‹m_d©a
 = &
¨9380_wmac0_d©a
;

93 
dev
 = 
	`pci_gë_devi˚
(
PCI_VENDOR_ID_ATHEROS
, 0x0033, 
NULL
);

94 i‡(
dev
)

95 
dev
->dev.
∂©f‹m_d©a
 = &
¨9580_wmac1_d©a
;

98 
	}
}

99 
machöe_devi˚_öôˇŒ
(
wndr4700
, 
wndr4700_©h9k_ì¥om_lﬂd
);

	@linux/ar7/files/drivers/mtd/ac49xpart.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/¶ab.h
>

24 
	~<löux/mtd/mtd.h
>

25 
	~<löux/mtd/∑πôi⁄s.h
>

26 
	~<löux/boŸmem.h
>

27 
	~<löux/magic.h
>

28 
	~<löux/moduÀ.h
>

30 
	~<asm/mach-¨7/¥om.h
>

32 
	#AC49X_MAXENVPARTS
 8

	)

34 
	#AC49X_PARTTYPE_LOADER
 0

	)

35 
	#AC49X_PARTTYPE_BOOTENV
 1

	)

36 
	#AC49X_PARTTYPE_LINUX
 2

	)

37 
	#AC49X_PARTTYPE_ROOTFS
 3

	)

38 
	#AC49X_PARTTYPE_UNKNOWN
 4

	)

39 
	#AC49X_NUM_PARTTYPES
 5

	)

41 
	#AC49X_FLASH_ADDRMASK
 0x00FFFFFF

	)

43 
	#AC49X_LOADER_MAGIC
 0x40809000

	)

44 
	#AC49X_LINUX_MAGIC
 0x464c457‡

	)

45 
	#AC49X_BOOTENV_MAGIC
 0x4578614d

	)

47 
	#ROOTFS_MIN_OFFSET
 0xC0000

	)

49 
	$∑r£_∑πv¨
(c⁄° *
∑πv¨
, 
mtd_∑πôi⁄
 *
∑π
)

51 
∑π°¨t
, 
∑πíd
;

52 
≤um
;

54 
≤um
 = 
	`ssˇnf
(
∑πv¨
, "0x%x,0x%x", &
∑π°¨t
, &
∑πíd
);

55 i‡(
≤um
 != 2)

58 
∑π
->
off£t
 = 
∑π°¨t
 & 
AC49X_FLASH_ADDRMASK
;

59 
∑π
->
size
 = 
∑πíd
 - 
∑π°¨t
;

62 
	}
}

64 
	$dëe˘_∑πty≥
(
mtd_öfo
 *
ma°î
, 
mtd_∑πôi⁄
 
∑π
)

66 
magic
;

67 
size_t
 
Àn
;

69 i‡(
∑π
.
size
 < 4)

72 
	`mtd_ªad
(
ma°î
, 
∑π
.
off£t
, (
magic
), &
Àn
,

73 (
uöt8_t
 *)&
magic
);

75 i‡(
Àn
 !(
magic
))

78 
magic
) {

79 
AC49X_LOADER_MAGIC
:

80  
AC49X_PARTTYPE_LOADER
;

81 
AC49X_LINUX_MAGIC
:

82  
AC49X_PARTTYPE_LINUX
;

83 
SQUASHFS_MAGIC
:

84 
CRAMFS_MAGIC
:

85 
CRAMFS_MAGIC_WEND
:

86  
AC49X_PARTTYPE_ROOTFS
;

87 
AC49X_BOOTENV_MAGIC
:

88  
AC49X_PARTTYPE_BOOTENV
;

90 
magic
 & 0xFF) {

91 
JFFS2_SUPER_MAGIC
:

92  
AC49X_PARTTYPE_ROOTFS
;

94 
magic
 >> 8) {

95 
JFFS2_SUPER_MAGIC
:

96  
AC49X_PARTTYPE_ROOTFS
;

98  
AC49X_PARTTYPE_UNKNOWN
;

100 
	}
}

102 c⁄° *
	g∑π«mes
[] = {

110 
	$gí_∑π«me
(
ty≥
,

111 *
ty≥numî©i⁄
,

112 
mtd_∑πôi⁄
 *
∑π
)

114 *
s
 = 
	`kzÆloc
((Ë* 8, 
GFP_KERNEL
);

116 (
ty≥numî©i⁄
[
ty≥
])++;

117 i‡(
ty≥numî©i⁄
[
ty≥
] == 1)

118 
	`•rötf
(
s
, "%s", 
∑π«mes
[
ty≥
]);

120 
	`•rötf
(
s
, "%s%d", 
∑π«mes
[
ty≥
], 
ty≥numî©i⁄
[type]);

122 
∑π
->
«me
 = 
s
;

123 
	}
}

125 
	$¸óã_mtd_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

126 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

127 
mtd_∑π_∑r£r_d©a
 *
d©a
)

129 
ív∑πnum
 = 0, 
löux∑πnum
 = 0;

130 
ty≥numî©i⁄
[5] = { 0, 0, 0, 0, 0 };

131 
evn
[5];

132 c⁄° *
∑πv¨
 = 
NULL
;

134 
mtd_∑πôi⁄
 *
ac49x_∑πs
;

136 
ac49x_∑πs
 = 
	`kzÆloc
((*ac49x_∑πsË* 
AC49X_MAXENVPARTS
,

137 
GFP_KERNEL
);

139 i‡(!
ac49x_∑πs
)

140  -
ENOMEM
;

142 
löux∑πnum
 = 0;

143 
ív∑πnum
 = 0;Énv∑πnum < 
AC49X_MAXENVPARTS
;Énvpartnum++) {

144 
mtd_∑πôi⁄
 
∑r£∑π
;

145 
off£t
, 
size
, 
ty≥
;

146 
îr
;

147 
	`•rötf
(
evn
, "mtd%d", 
ív∑πnum
);

148 
∑πv¨
 = 
	`¥om_gëív
(
evn
);

149 i‡(!
∑πv¨
)

151 
îr
 = 
	`∑r£_∑πv¨
(
∑πv¨
, &
∑r£∑π
);

152 i‡(
îr
)

154 
off£t
 = 
∑r£∑π
.offset;

155 
size
 = 
∑r£∑π
.size;

156 
ty≥
 = 
	`dëe˘_∑πty≥
(
ma°î
, 
∑r£∑π
);

157 
	`gí_∑π«me
(
ty≥
, 
ty≥numî©i⁄
, &
∑r£∑π
);

159 i‡(
ty≥
 =
AC49X_PARTTYPE_LOADER
)

160 
∑r£∑π
.
mask_Êags
 = 
MTD_WRITEABLE
;

162 
∑r£∑π
.
mask_Êags
 = 0;

164 
	`mem˝y
(&(
ac49x_∑πs
[
löux∑πnum
]), &
∑r£∑π
,

165 (
mtd_∑πôi⁄
));

168 i‡(
ty≥
 =
AC49X_PARTTYPE_LINUX
) {

169 
∑r£∑π
.
off£t
 +
ROOTFS_MIN_OFFSET
 &

170 ~(
ma°î
->
îa£size
 - 1);

171 
∑r£∑π
.
size
 -
ROOTFS_MIN_OFFSET
 &

172 ~(
ma°î
->
îa£size
 - 1);

174 
size
, 
off£t
;

175 
size
 = 
∑r£∑π
.size;

176 
off£t
 = 
∑r£∑π
.offset;

178 
ty≥
 = 
	`dëe˘_∑πty≥
(
ma°î
, 
∑r£∑π
);

179 i‡(
ty≥
 =
AC49X_PARTTYPE_ROOTFS
) {

180 
	`gí_∑π«me
(
ty≥
, 
ty≥numî©i⁄
,

181 &
∑r£∑π
);

182 
	`¥ötk
(
KERN_INFO


185 
∑r£∑π
.
«me
,

186 ()
∑r£∑π
.
size
,

187 ()
∑r£∑π
.
off£t
);

188 
löux∑πnum
++;

189 
	`mem˝y
(&(
ac49x_∑πs
[
löux∑πnum
]),

190 &
∑r£∑π
,

191 (
mtd_∑πôi⁄
));

194 
∑r£∑π
.
off£t
 +
ma°î
->
îa£size
;

195 
∑r£∑π
.
size
 -
ma°î
->
îa£size
;

196 } 
∑r£∑π
.
size
 >
ma°î
->
îa£size
);

198 
löux∑πnum
++;

201 *
µ¨ts
 = 
ac49x_∑πs
;

202  
löux∑πnum
;

203 
	}
}

205 
mtd_∑π_∑r£r
 
	gac49x_∑r£r
 = {

206 .
ow√r
 = 
THIS_MODULE
,

207 .
	g∑r£_‚
 = 
¸óã_mtd_∑πôi⁄s
,

208 .
	g«me
 = "ac49xpart",

211 
__öô
 
	$ac49x_∑r£r_öô
()

213 
	`ªgi°î_mtd_∑r£r
(&
ac49x_∑r£r
);

215 
	}
}

217 
moduÀ_öô
(
ac49x_∑r£r_öô
);

219 
MODULE_LICENSE
("GPL");

220 
MODULE_AUTHOR
("Daniel Golle <daniel.golle@gmail.com>");

221 
MODULE_DESCRIPTION
("MTDÖartitioning for AudioCodes AC49x");

	@linux/ar7/files/drivers/mtd/titanpart.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/¶ab.h
>

4 
	~<löux/mtd/mtd.h
>

5 
	~<löux/mtd/∑πôi⁄s.h
>

6 
	~<löux/boŸmem.h
>

7 
	~<löux/magic.h
>

8 
	~<asm/mach-¨7/¥om.h
>

10 
	#IMAGE_A_SIZE
 0X3c0000

	)

11 
	#WRTP_PARTS
 14

	)

12 
	#NSP_IMG_MAGIC_NUMBER
 
	`À32_to_˝u
(0x4D544443)

	)

13 
	#NSP_IMG_SECTION_TYPE_KERNEL
 (0x01)

	)

14 
	#NSP_IMG_SECTION_TYPE_FILESYSTEM_ROOT
 (0x02)

	)

15 
	#NSP_IMG_SECTION_TYPE_FILESYSTEM
 (0x03)

	)

16 
	#MAX_NUM_PARTITIONS
 14

	)

18 
	g∑π_cou¡
=0;

19 
mtd_∑πôi⁄
 
	gtô™_∑πs
[
WRTP_PARTS
];

22 
	sn•_img_hdr_hód


24 
	mmagic
;

25 
	mboŸ_off£t
;

26 
	mÊags
;

27 
	mhdr_vîsi⁄
;

28 
	mhdr_size
;

29 
	m¥od_id
;

30 
	mªl_id
;

31 
	mvîsi⁄
;

33 
	mimage_size
;

34 
	möfo_off£t
;

35 
	m£˘_öfo_off£t
;

36 
	mchksum_off£t
;

37 
	m∑d1
;

40 
	sn•_img_hdr_£˘i⁄_öfo


42 
	mnum_£˘s
;

43 
	m£˘_size
;

44 
	m£˘i⁄s_off£t
;

49 
	sn•_img_hdr_£˘i⁄s


51 
	moff£t
;

52 
	mtŸÆ_size
;

53 
	møw_size
;

54 
	mÊags
;

55 
	mchksum
;

56 
	mty≥
;

57 
	m«me
[16];

64 
	$tô™_∑r£_ív_addªss
(*
ív_«me
, *
Êash_ba£
,

65 *
Êash_íd
)

67 
image_«me
[30];

68 *
ív_±r
;

69 *
ba£_±r
;

70 *
íd_±r
;

71 * 
°rög_±r
;

73 
ív_±r
 = 
	`¥om_gëív
(
ív_«me
);

74 if(!
ív_±r
){

75 
	`¥ötk
("tô™: invÆidÉnvÇame, %s.\n", 
ív_«me
);

78 
	`°∫˝y
(
image_«me
, 
ív_±r
, 30);

79 
image_«me
[29]=0;

80 
°rög_±r
 = 
image_«me
;

82 
ba£_±r
 = 
	`°r£p
(&
°rög_±r
, ",");

83 
íd_±r
 = 
	`°r£p
(&
°rög_±r
, ",");

84 i‡((
ba£_±r
 =
NULL
Ë|| (
íd_±r
 == NULL)) {

85 
	`¥ötk
("tô™: Couldn'àtokíizê%†°¨t,íd.\n", 
image_«me
);

89 *
Êash_ba£
 = (Ë
	`sim∂e_°πﬁ
(
ba£_±r
, 
NULL
, 0);

90 *
Êash_íd
 = (Ë
	`sim∂e_°πﬁ
(
íd_±r
, 
NULL
, 0);

91 if((!*
Êash_ba£
Ë|| (!*
Êash_íd
)) {

92 
	`¥ötk
("titan: UnableÅo convert :%s: :%s: into start,end values.\n",

93 
ív_«me
, 
image_«me
);

96 *
Êash_ba£
 &= 0x0fffffff;

97 *
Êash_íd
 &= 0x0fffffff;

99 
	}
}

103 
	$tô™_gë_sögÀ_image
(*
boŸcfg_«me
, *
Êash_ba£
,

104 *
Êash_íd
)

106 *
ív_±r
;

107 *
ba£_±r
;

108 *
íd_±r
;

109 
image_«me
[30];

110 * 
°rög_±r
;

112 if(!
boŸcfg_«me
 || !
Êash_ba£
 || !
Êash_íd
)

115 
ív_±r
 = 
	`¥om_gëív
(
boŸcfg_«me
);

116 if(!
ív_±r
){

117 
	`¥ötk
("tô™: %†v¨übÀÇŸ found.\n", 
boŸcfg_«me
);

121 
°rög_±r
 = 
image_«me
;

123 
	`°∫˝y
(
image_«me
, 
ív_±r
, 30);

124 
image_«me
[29]=0;

126 
íd_±r
=
	`°r£p
(&
°rög_±r
, "\"");

127 
ba£_±r
=
	`°r£p
(&
°rög_±r
, "\"");

128 if(!
íd_±r
 || !
ba£_±r
){

129 
	`¥ötk
("tô™: invÆid boŸcfg f‹m©, %s.\n", 
image_«me
);

134  
	`tô™_∑r£_ív_addªss
(
ba£_±r
, 
Êash_ba£
, 
Êash_íd
);

135 
	}
}

139 
	$tô™_add_∑πôi⁄
(* 
ív_«me
, 
Êash_ba£
, 
Êash_íd
)

141 
tô™_∑πs
[
∑π_cou¡
].
«me
 = 
ív_«me
;

142 
tô™_∑πs
[
∑π_cou¡
].
off£t
 = 
Êash_ba£
;

143 
tô™_∑πs
[
∑π_cou¡
].
size
 = 
Êash_íd
-
Êash_ba£
;

144 
tô™_∑πs
[
∑π_cou¡
].
mask_Êags
 = (
	`°rcmp
(
ív_«me
, "bootloader")==0||

145 
	`°rcmp
(
ív_«me
, "boot_env")==0 ||

146 
	`°rcmp
(
ív_«me
, "fuŒ_image")==0 )?
MTD_WRITEABLE
:0;

147 
∑π_cou¡
++;

149 
	}
}

150 
	$¸óã_tô™_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

151 
mtd_∑πôi⁄
 **
µ¨ts
,

152 
‹igö
)

154 
n•_img_hdr_hód
 
hdr
;

155 
n•_img_hdr_£˘i⁄_öfo
 
£˘_öfo
;

156 
n•_img_hdr_£˘i⁄s
 
£˘i⁄
;

157 
Êash_ba£
, 
Êash_íd
;

158 
°¨t
, 
íd
;

159 *
«me
;

160 
i
;

161 
tŸÆ_£˘s
=0;

162 
size_t
 
Àn
;

165 if(
	`tô™_gë_sögÀ_image
("BOOTCFG", &
Êash_ba£
, &
Êash_íd
)) {

172 
	`mtd_ªad
(
ma°î
, 
Êash_ba£
, (
n•_img_hdr_hód
), &
Àn
, (
uöt8_t
 *)&
hdr
);

173 if(
hdr
.
magic
 !
NSP_IMG_MAGIC_NUMBER
)

176 
	`mtd_ªad
(
ma°î
, 
Êash_ba£
 + 
hdr
.
£˘_öfo_off£t
, (
n•_img_hdr_£˘i⁄_öfo
), &
Àn
, (
uöt8_t
 *)&
£˘_öfo
);

179 
i
=0; i< 
£˘_öfo
.
num_£˘s
 && i<
MAX_NUM_PARTITIONS
; i++){

180 
	`mtd_ªad
(
ma°î
, 
Êash_ba£
 + 
£˘_öfo
.
£˘i⁄s_off£t
 + (
i
 * se˘_öfo.
£˘_size
Ë, (
n•_img_hdr_£˘i⁄s
), &
Àn
, (
uöt8_t
 *)&
£˘i⁄
);

182 if(
£˘i⁄
.
ty≥
 !
NSP_IMG_SECTION_TYPE_FILESYSTEM_ROOT
){

185 
°¨t
=
Êash_ba£
 + 
£˘i⁄
.
off£t
;

186 
íd
=
°¨t
 + 
£˘i⁄
.
tŸÆ_size
;

187 
	`tô™_add_∑πôi⁄
("roŸ", 
°¨t
, 
íd
);

188 
tŸÆ_£˘s
++;

192 
i
=0; i< 
£˘_öfo
.
num_£˘s
 && i<
MAX_NUM_PARTITIONS
; i++){

194 
	`mtd_ªad
(
ma°î
, 
Êash_ba£
 + 
£˘_öfo
.
£˘i⁄s_off£t
 + (
i
 * se˘_öfo.
£˘_size
Ë, (
n•_img_hdr_£˘i⁄s
), &
Àn
, (
uöt8_t
 *)&
£˘i⁄
);

196 
«me
=
£˘i⁄
.name;

197 if(
£˘i⁄
.
ty≥
 =
NSP_IMG_SECTION_TYPE_FILESYSTEM_ROOT
)

199 
«me
 = "rootfs";

200 
°¨t
=
Êash_ba£
 + 
£˘i⁄
.
off£t
;

201 
íd
=
Êash_íd
;

202 
	`tô™_add_∑πôi⁄
(
«me
, 
°¨t
, 
íd
);

203 
tŸÆ_£˘s
++;

205 if(
£˘i⁄
.
ty≥
 =
NSP_IMG_SECTION_TYPE_KERNEL
)

207 
«me
 = "kernel";

208 
°¨t
=
Êash_ba£
 + 
£˘i⁄
.
off£t
;

209 
íd
=
°¨t
 + 
£˘i⁄
.
tŸÆ_size
;

210 
	`tô™_add_∑πôi⁄
(
«me
, 
°¨t
, 
íd
);

211 
tŸÆ_£˘s
++;

217 
	`tô™_add_∑πôi⁄
("¥im¨y_image", 
Êash_ba£
, 
Êash_íd
);

218 
tŸÆ_£˘s
++;

221 
	`tô™_add_∑πôi⁄
("fuŒ_image", 0, 
ma°î
->
size
);

222 
tŸÆ_£˘s
++;

224 i‡(!
	`tô™_∑r£_ív_addªss
("BOOTLOADER", &
°¨t
, &
íd
)){

225 
	`tô™_add_∑πôi⁄
("boŸlﬂdî", 
°¨t
, 
íd
);

226 
tŸÆ_£˘s
++;

228 i‡(!
	`tô™_∑r£_ív_addªss
("boŸ_ív", &
°¨t
, &
íd
)){

229 
	`tô™_add_∑πôi⁄
("boŸ_ív", 
°¨t
, 
íd
);

230 
tŸÆ_£˘s
++;

232 *
µ¨ts
 = 
tô™_∑πs
;

233  
tŸÆ_£˘s
;

234 
	}
}

	@linux/ar7/src/adam2patcher.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°ddef.h
>

20 
	~<uni°d.h
>

21 
	~<f˙é.h
>

22 
	~<°döt.h
>

23 
	~<sys/mm™.h
>

24 
	~<sys/°©.h
>

25 
	~<°rög.h
>

27 
	~<sys/io˘l.h
>

29 
	$maö
(
¨gc
, **
¨gv
)

31 
fd
;

32 *
±r
;

33 
uöt32_t
 *
i
;

35 i‡(
¨gc
 != 2) {

36 
	`Ârötf
(
°dîr
, "Ußge: %†<fûíame>\n", 
¨gv
[0]);

37 
	`exô
(1);

40 i‡(((
fd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
)) < 0)

41 || ((
±r
 = 
	`mm≠
(0, 128 * 1024, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0)) == (*) (-1))) {

42 
	`Ârötf
(
°dîr
, "Can't open file\n");

43 
	`exô
(1);

46 
i
 = (
uöt32_t
 *Ë&
±r
[0x3944];

47 i‡(*
i
 == 0x0c000944) {

48 
	`Ârötf
(
°dîr
, "Unpatched ADAM2 detected. Patching... ");

49 *
i
 = 0x00000000;

50 
	`msync
(
i
, (*i), 
MS_SYNC
|
MS_INVALIDATE
);

51 
	`Ârötf
(
°dîr
, "done!\n");

52 } i‡(*
i
 == 0x00000000) {

53 
	`Ârötf
(
°dîr
, "Patched ADAM2 detected.\n");

55 
	`Ârötf
(
°dîr
, "Unknown ADAM2 detected. Can'tÖatch!\n");

58 
	`˛o£
(
fd
);

59 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-ap9x-pci.c

11 
	~<löux/pci.h
>

12 
	~<löux/©h9k_∂©f‹m.h
>

13 
	~<löux/dñay.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-≠9x-pci.h
"

18 
	~"pci-©h9k-fixup.h
"

19 
	~"pci.h
"

21 
©h9k_∂©f‹m_d©a
 
	g≠9x_wmac0_d©a
 = {

22 .
Àd_pö
 = -1,

24 
©h9k_∂©f‹m_d©a
 
	g≠9x_wmac1_d©a
 = {

25 .
Àd_pö
 = -1,

27 
	g≠9x_wmac0_mac
[6];

28 
	g≠9x_wmac1_mac
[6];

30 
__öô
 
	$≠9x_pci_£tup_wmac_Àd_pö
(
wmac
, 
pö
)

32 
wmac
) {

34 
≠9x_wmac0_d©a
.
Àd_pö
 = 
pö
;

37 
≠9x_wmac1_d©a
.
Àd_pö
 = 
pö
;

40 
	}
}

42 
__öô
 
©h9k_∂©f‹m_d©a
 *
	$≠9x_pci_gë_wmac_d©a
(
wmac
)

44 
wmac
) {

46  &
≠9x_wmac0_d©a
;

49  &
≠9x_wmac1_d©a
;

52  
NULL
;

53 
	}
}

55 
__öô
 
	$≠9x_pci_£tup_wmac_gpio
(
wmac
, 
u32
 
mask
, u32 
vÆ
)

57 
wmac
) {

59 
≠9x_wmac0_d©a
.
gpio_mask
 = 
mask
;

60 
≠9x_wmac0_d©a
.
gpio_vÆ
 = 
vÆ
;

63 
≠9x_wmac1_d©a
.
gpio_mask
 = 
mask
;

64 
≠9x_wmac1_d©a
.
gpio_vÆ
 = 
vÆ
;

67 
	}
}

69 
__öô
 
	$≠9x_pci_£tup_wmac_Àds
(
wmac
, 
gpio_Àd
 *
Àds
,

70 
num_Àds
)

72 
wmac
) {

74 
≠9x_wmac0_d©a
.
Àds
 =Üeds;

75 
≠9x_wmac0_d©a
.
num_Àds
 =Çum_leds;

78 
≠9x_wmac1_d©a
.
Àds
 =Üeds;

79 
≠9x_wmac1_d©a
.
num_Àds
 =Çum_leds;

82 
	}
}

84 
__öô
 
	$≠9x_pci_£tup_wmac_bäs
(
wmac
,

85 
gpio_keys_buâ⁄
 *
bäs
,

86 
num_bäs
, 
pﬁl_öãrvÆ
)

88 
©h9k_∂©f‹m_d©a
 *
≠9x_wmac_d©a
;

90 i‡(!(
≠9x_wmac_d©a
 = 
	`≠9x_pci_gë_wmac_d©a
(
wmac
)))

93 
≠9x_wmac_d©a
->
bäs
 = btns;

94 
≠9x_wmac_d©a
->
num_bäs
 =Çum_btns;

95 
≠9x_wmac_d©a
->
bä_pﬁl_öãrvÆ
 = 
pﬁl_öãrvÆ
;

96 
	}
}

98 
	$≠91_pci_∂©_dev_öô
(
pci_dev
 *
dev
)

100 
	`PCI_SLOT
(
dev
->
dev‚
)) {

102 
dev
->dev.
∂©f‹m_d©a
 = &
≠9x_wmac0_d©a
;

107 
	}
}

109 
__öô
 
	$≠91_pci_öô
(
u8
 *
ˇl_d©a
, u8 *
mac_addr
)

111 i‡(
ˇl_d©a
)

112 
	`mem˝y
(
≠9x_wmac0_d©a
.
ì¥om_d©a
, 
ˇl_d©a
,

113 (
≠9x_wmac0_d©a
.
ì¥om_d©a
));

115 i‡(
mac_addr
) {

116 
	`mem˝y
(
≠9x_wmac0_mac
, 
mac_addr
, (ap9x_wmac0_mac));

117 
≠9x_wmac0_d©a
.
maˇddr
 = 
≠9x_wmac0_mac
;

120 
	`©h79_pci_£t_∂©_dev_öô
(
≠91_pci_∂©_dev_öô
);

121 
	`©h79_ªgi°î_pci
();

123 
	`pci_íabÀ_©h9k_fixup
(0, 
≠9x_wmac0_d©a
.
ì¥om_d©a
);

124 
	}
}

126 
__öô
 
	$≠91_pci_öô_sim∂e
()

128 
	`≠91_pci_öô
(
NULL
, NULL);

129 
≠9x_wmac0_d©a
.
ì¥om_«me
 = "pci_wmac0.eeprom";

130 
	}
}

132 
	$≠94_pci_∂©_dev_öô
(
pci_dev
 *
dev
)

134 
	`PCI_SLOT
(
dev
->
dev‚
)) {

136 
dev
->dev.
∂©f‹m_d©a
 = &
≠9x_wmac0_d©a
;

140 
dev
->dev.
∂©f‹m_d©a
 = &
≠9x_wmac1_d©a
;

145 
	}
}

147 
__öô
 
	$≠94_pci_öô
(
u8
 *
ˇl_d©a0
, u8 *
mac_addr0
,

148 
u8
 *
ˇl_d©a1
, u8 *
mac_addr1
)

150 i‡(
ˇl_d©a0
)

151 
	`mem˝y
(
≠9x_wmac0_d©a
.
ì¥om_d©a
, 
ˇl_d©a0
,

152 (
≠9x_wmac0_d©a
.
ì¥om_d©a
));

154 i‡(
ˇl_d©a1
)

155 
	`mem˝y
(
≠9x_wmac1_d©a
.
ì¥om_d©a
, 
ˇl_d©a1
,

156 (
≠9x_wmac1_d©a
.
ì¥om_d©a
));

158 i‡(
mac_addr0
) {

159 
	`mem˝y
(
≠9x_wmac0_mac
, 
mac_addr0
, (ap9x_wmac0_mac));

160 
≠9x_wmac0_d©a
.
maˇddr
 = 
≠9x_wmac0_mac
;

163 i‡(
mac_addr1
) {

164 
	`mem˝y
(
≠9x_wmac1_mac
, 
mac_addr1
, (ap9x_wmac1_mac));

165 
≠9x_wmac1_d©a
.
maˇddr
 = 
≠9x_wmac1_mac
;

168 
	`©h79_pci_£t_∂©_dev_öô
(
≠94_pci_∂©_dev_öô
);

169 
	`©h79_ªgi°î_pci
();

171 
	`pci_íabÀ_©h9k_fixup
(17, 
≠9x_wmac0_d©a
.
ì¥om_d©a
);

172 
	`pci_íabÀ_©h9k_fixup
(18, 
≠9x_wmac1_d©a
.
ì¥om_d©a
);

173 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-ap9x-pci.h

11 #i‚de‡
_ATH79_DEV_AP9X_PCI_H


12 
	#_ATH79_DEV_AP9X_PCI_H


	)

14 
	ggpio_Àd
;

15 
	ggpio_keys_buâ⁄
;

16 
	g©h9k_∂©f‹m_d©a
;

18 #i‡
deföed
(
CONFIG_ATH79_DEV_AP9X_PCI
)

19 
≠9x_pci_£tup_wmac_Àd_pö
(
wmac
, 
pö
);

20 
≠9x_pci_£tup_wmac_gpio
(
wmac
, 
u32
 
mask
, u32 
vÆ
);

21 
≠9x_pci_£tup_wmac_Àds
(
wmac
, 
gpio_Àd
 *
Àds
,

22 
num_Àds
);

23 
≠9x_pci_£tup_wmac_bäs
(
wmac
, 
gpio_keys_buâ⁄
 *
bäs
,

24 
num_bäs
, 
pﬁl_öãrvÆ
);

25 
©h9k_∂©f‹m_d©a
 *
≠9x_pci_gë_wmac_d©a
(
wmac
);

27 
≠91_pci_öô
(
u8
 *
ˇl_d©a
, u8 *
mac_addr
);

28 
≠91_pci_öô_sim∂e
();

29 
≠94_pci_öô
(
u8
 *
ˇl_d©a0
, u8 *
mac_addr0
,

30 
u8
 *
ˇl_d©a1
, u8 *
mac_addr1
);

33 
ölöe
 
	$≠9x_pci_£tup_wmac_Àd_pö
(
wmac
, 
pö
Ë{
	}
}

34 
ölöe
 
	$≠9x_pci_£tup_wmac_gpio
(
wmac
,

35 
u32
 
mask
, u32 
vÆ
Ë{
	}
}

36 
ölöe
 
	$≠9x_pci_£tup_wmac_Àds
(
wmac
,

37 
gpio_Àd
 *
Àds
,

38 
num_Àds
Ë{
	}
}

39 
ölöe
 
	$≠9x_pci_£tup_wmac_bäs
(
wmac
,

40 
gpio_keys_buâ⁄
 *
bäs
,

41 
num_bäs
,

42 
pﬁl_öãrvÆ
Ë{
	}
}

43 
ölöe
 
©h9k_∂©f‹m_d©a
 *
	$≠9x_pci_gë_wmac_d©a
(
wmac
)

45  
NULL
;

46 
	}
}

48 
ölöe
 
	$≠91_pci_öô
(
u8
 *
ˇl_d©a
, u8 *
mac_addr
Ë{
	}
}

49 
ölöe
 
	$≠91_pci_öô_sim∂e
(Ë{
	}
}

50 
ölöe
 
	$≠94_pci_öô
(
u8
 *
ˇl_d©a0
, u8 *
mac_addr0
,

51 
u8
 *
ˇl_d©a1
, u8 *
mac_addr1
Ë{
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-dsa.c

12 
	~<löux/öô.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-dß.h
"

19 
∂©f‹m_devi˚
 
	g¨71xx_dß_swôch_devi˚
 = {

20 .
«me
 = "dsa",

21 .
	gid
 = 0,

24 
__öô
 
	$©h79_ªgi°î_dß
(
devi˚
 *
√tdev
,

25 
devi˚
 *
miidev
,

26 
dß_∂©f‹m_d©a
 *
d
)

28 
i
;

30 
d
->
√tdev
 =Çetdev;

31 
i
 = 0; i < 
d
->
ƒ_chùs
; i++)

32 
d
->
chù
[
i
].
ho°_dev
 = 
miidev
;

34 
¨71xx_dß_swôch_devi˚
.
dev
.
∂©f‹m_d©a
 = 
d
;

35 
	`∂©f‹m_devi˚_ªgi°î
(&
¨71xx_dß_swôch_devi˚
);

36 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-dsa.h

12 #i‚de‡
_ATH79_DEV_DSA_H


13 
	#_ATH79_DEV_DSA_H


	)

15 
	~<√t/dß.h
>

17 
©h79_ªgi°î_dß
(
devi˚
 *
√tdev
,

18 
devi˚
 *
miidev
,

19 
dß_∂©f‹m_d©a
 *
d
);

	@linux/ar71xx/files/arch/mips/ath79/dev-eth.c

16 
	~<löux/kî√l.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/dñay.h
>

19 
	~<löux/ëhîdevi˚.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/£rül_8250.h
>

22 
	~<löux/˛k.h
>

23 
	~<löux/sizes.h
>

25 
	~<asm/mach-©h79/©h79.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~<asm/mach-©h79/úq.h
>

29 
	~"comm⁄.h
"

30 
	~"dev-ëh.h
"

32 
	g©h79_mac_ba£
[
ETH_ALEN
] 
	g__öôd©a
;

34 
ªsour˚
 
	g©h79_mdio0_ªsour˚s
[] = {

36 .
«me
 = "mdio_base",

37 .
	gÊags
 = 
IORESOURCE_MEM
,

38 .
	g°¨t
 = 
AR71XX_GE0_BASE
,

39 .
	gíd
 = 
AR71XX_GE0_BASE
 + 0x200 - 1,

43 
ag71xx_mdio_∂©f‹m_d©a
 
	g©h79_mdio0_d©a
;

45 
∂©f‹m_devi˚
 
	g©h79_mdio0_devi˚
 = {

46 .
«me
 = "ag71xx-mdio",

47 .
	gid
 = 0,

48 .
	gªsour˚
 = 
©h79_mdio0_ªsour˚s
,

49 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
©h79_mdio0_ªsour˚s
),

50 .
	gdev
 = {

51 .
∂©f‹m_d©a
 = &
©h79_mdio0_d©a
,

55 
ªsour˚
 
	g©h79_mdio1_ªsour˚s
[] = {

57 .
«me
 = "mdio_base",

58 .
	gÊags
 = 
IORESOURCE_MEM
,

59 .
	g°¨t
 = 
AR71XX_GE1_BASE
,

60 .
	gíd
 = 
AR71XX_GE1_BASE
 + 0x200 - 1,

64 
ag71xx_mdio_∂©f‹m_d©a
 
	g©h79_mdio1_d©a
;

66 
∂©f‹m_devi˚
 
	g©h79_mdio1_devi˚
 = {

67 .
«me
 = "ag71xx-mdio",

68 .
	gid
 = 1,

69 .
	gªsour˚
 = 
©h79_mdio1_ªsour˚s
,

70 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
©h79_mdio1_ªsour˚s
),

71 .
	gdev
 = {

72 .
∂©f‹m_d©a
 = &
©h79_mdio1_d©a
,

76 
	$©h79_£t_∂l
(
u32
 
cfg_ªg
, u32 
∂l_ªg
, u32 
∂l_vÆ
, u32 
shi·
)

78 
__iomem
 *
ba£
;

79 
u32
 
t
;

81 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

83 
t
 = 
	`__øw_ªadl
(
ba£
 + 
cfg_ªg
);

84 
t
 &~(3 << 
shi·
);

85 
t
 |(2 << 
shi·
);

86 
	`__øw_wrôñ
(
t
, 
ba£
 + 
cfg_ªg
);

87 
	`udñay
(100);

89 
	`__øw_wrôñ
(
∂l_vÆ
, 
ba£
 + 
∂l_ªg
);

91 
t
 |(3 << 
shi·
);

92 
	`__øw_wrôñ
(
t
, 
ba£
 + 
cfg_ªg
);

93 
	`udñay
(100);

95 
t
 &~(3 << 
shi·
);

96 
	`__øw_wrôñ
(
t
, 
ba£
 + 
cfg_ªg
);

97 
	`udñay
(100);

99 
	`¥ötk
(
KERN_DEBUG
 "ar71xx:Öll_reg %#x: %#x\n",

100 ()(
ba£
 + 
∂l_ªg
), 
	`__øw_ªadl
(base +Öll_reg));

102 
	`iounm≠
(
ba£
);

103 
	}
}

105 
__öô
 
	$©h79_mii_˘æ_£t_if
(
ªg
,

106 
mii_if
)

108 
__iomem
 *
ba£
;

109 
u32
 
t
;

111 
ba£
 = 
	`i‹em≠
(
AR71XX_MII_BASE
, 
AR71XX_MII_SIZE
);

113 
t
 = 
	`__øw_ªadl
(
ba£
 + 
ªg
);

114 
t
 &~(
AR71XX_MII_CTRL_IF_MASK
);

115 
t
 |(
mii_if
 & 
AR71XX_MII_CTRL_IF_MASK
);

116 
	`__øw_wrôñ
(
t
, 
ba£
 + 
ªg
);

118 
	`iounm≠
(
ba£
);

119 
	}
}

121 
	$©h79_mii_˘æ_£t_•ìd
(
ªg
, 
•ìd
)

123 
__iomem
 *
ba£
;

124 
mii_•ìd
;

125 
u32
 
t
;

127 
•ìd
) {

128 
SPEED_10
:

129 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_10
;

131 
SPEED_100
:

132 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_100
;

134 
SPEED_1000
:

135 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_1000
;

138 
	`BUG
();

141 
ba£
 = 
	`i‹em≠
(
AR71XX_MII_BASE
, 
AR71XX_MII_SIZE
);

143 
t
 = 
	`__øw_ªadl
(
ba£
 + 
ªg
);

144 
t
 &~(
AR71XX_MII_CTRL_SPEED_MASK
 << 
AR71XX_MII_CTRL_SPEED_SHIFT
);

145 
t
 |
mii_•ìd
 << 
AR71XX_MII_CTRL_SPEED_SHIFT
;

146 
	`__øw_wrôñ
(
t
, 
ba£
 + 
ªg
);

148 
	`iounm≠
(
ba£
);

149 
	}
}

151 
	$¨934x_gë_mdio_ªf_˛ock
()

153 
__iomem
 *
ba£
;

154 
ªt
;

155 
u32
 
t
;

157 
ba£
 = 
	`i‹em≠
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

159 
ªt
 = 0;

160 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR934X_PLL_SWITCH_CLOCK_CONTROL_REG
);

161 i‡(
t
 & 
AR934X_PLL_SWITCH_CLOCK_CONTROL_MDIO_CLK_SEL
) {

162 
ªt
 = 100 * 1000 * 1000;

164 
˛k
 *clk;

166 
˛k
 = 
	`˛k_gë
(
NULL
, "ref");

167 i‡(!
	`IS_ERR
(
˛k
))

168 
ªt
 = 
	`˛k_gë_øã
(
˛k
);

171 
	`iounm≠
(
ba£
);

173  
ªt
;

174 
	}
}

176 
__öô
 
	$©h79_ªgi°î_mdio
(
id
, 
u32
 
phy_mask
)

178 
∂©f‹m_devi˚
 *
mdio_dev
;

179 
ag71xx_mdio_∂©f‹m_d©a
 *
mdio_d©a
;

180 
max_id
;

182 i‡(
©h79_soc
 =
ATH79_SOC_AR9341
 ||

183 
©h79_soc
 =
ATH79_SOC_AR9342
 ||

184 
©h79_soc
 =
ATH79_SOC_AR9344
 ||

185 
©h79_soc
 =
ATH79_SOC_QCA9556
 ||

186 
©h79_soc
 =
ATH79_SOC_QCA9558
 ||

187 
©h79_soc
 =
ATH79_SOC_QCA956X
)

188 
max_id
 = 1;

190 
max_id
 = 0;

192 i‡(
id
 > 
max_id
) {

193 
	`¥ötk
(
KERN_ERR
 "¨71xx: invÆid MDIO id %u\n", 
id
);

197 
©h79_soc
) {

198 
ATH79_SOC_AR7241
:

199 
ATH79_SOC_AR9330
:

200 
ATH79_SOC_AR9331
:

201 
ATH79_SOC_QCA9533
:

202 
ATH79_SOC_TP9343
:

203 
mdio_dev
 = &
©h79_mdio1_devi˚
;

204 
mdio_d©a
 = &
©h79_mdio1_d©a
;

207 
ATH79_SOC_AR9341
:

208 
ATH79_SOC_AR9342
:

209 
ATH79_SOC_AR9344
:

210 
ATH79_SOC_QCA9556
:

211 
ATH79_SOC_QCA9558
:

212 
ATH79_SOC_QCA956X
:

213 i‡(
id
 == 0) {

214 
mdio_dev
 = &
©h79_mdio0_devi˚
;

215 
mdio_d©a
 = &
©h79_mdio0_d©a
;

217 
mdio_dev
 = &
©h79_mdio1_devi˚
;

218 
mdio_d©a
 = &
©h79_mdio1_d©a
;

222 
ATH79_SOC_AR7242
:

223 
	`©h79_£t_∂l
(
AR71XX_PLL_REG_SEC_CONFIG
,

224 
AR7242_PLL_REG_ETH0_INT_CLOCK
, 0x62000000,

225 
AR71XX_ETH0_PLL_SHIFT
);

228 
mdio_dev
 = &
©h79_mdio0_devi˚
;

229 
mdio_d©a
 = &
©h79_mdio0_d©a
;

233 
mdio_d©a
->
phy_mask
 =Öhy_mask;

235 
©h79_soc
) {

236 
ATH79_SOC_AR7240
:

237 
mdio_d©a
->
is_¨7240
 = 1;

239 
ATH79_SOC_AR7241
:

240 
mdio_d©a
->
buûtö_swôch
 = 1;

243 
ATH79_SOC_AR9330
:

244 
mdio_d©a
->
is_¨9330
 = 1;

246 
ATH79_SOC_AR9331
:

247 
mdio_d©a
->
buûtö_swôch
 = 1;

250 
ATH79_SOC_AR9341
:

251 
ATH79_SOC_AR9342
:

252 
ATH79_SOC_AR9344
:

253 i‡(
id
 == 1) {

254 
mdio_d©a
->
buûtö_swôch
 = 1;

255 
mdio_d©a
->
ªf_˛ock
 = 
	`¨934x_gë_mdio_ªf_˛ock
();

256 
mdio_d©a
->
mdio_˛ock
 = 6250000;

258 
mdio_d©a
->
is_¨934x
 = 1;

261 
ATH79_SOC_QCA9533
:

262 
ATH79_SOC_TP9343
:

263 
mdio_d©a
->
buûtö_swôch
 = 1;

266 
ATH79_SOC_QCA9556
:

267 
ATH79_SOC_QCA9558
:

268 
mdio_d©a
->
is_¨934x
 = 1;

271 
ATH79_SOC_QCA956X
:

272 i‡(
id
 == 1)

273 
mdio_d©a
->
buûtö_swôch
 = 1;

274 
mdio_d©a
->
is_¨934x
 = 1;

281 
	`∂©f‹m_devi˚_ªgi°î
(
mdio_dev
);

282 
	}
}

284 
©h79_ëh_∂l_d©a
 
	g©h79_ëh0_∂l_d©a
;

285 
©h79_ëh_∂l_d©a
 
	g©h79_ëh1_∂l_d©a
;

287 
u32
 
	$©h79_gë_ëh_∂l
(
mac
, 
•ìd
)

289 
©h79_ëh_∂l_d©a
 *
∂l_d©a
;

290 
u32
 
∂l_vÆ
;

292 
mac
) {

294 
∂l_d©a
 = &
©h79_ëh0_∂l_d©a
;

297 
∂l_d©a
 = &
©h79_ëh1_∂l_d©a
;

300 
	`BUG
();

303 
•ìd
) {

304 
SPEED_10
:

305 
∂l_vÆ
 = 
∂l_d©a
->
∂l_10
;

307 
SPEED_100
:

308 
∂l_vÆ
 = 
∂l_d©a
->
∂l_100
;

310 
SPEED_1000
:

311 
∂l_vÆ
 = 
∂l_d©a
->
∂l_1000
;

314 
	`BUG
();

317  
∂l_vÆ
;

318 
	}
}

320 
	$©h79_£t_•ìd_ge0
(
•ìd
)

322 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

324 
	`©h79_£t_∂l
(
AR71XX_PLL_REG_SEC_CONFIG
, 
AR71XX_PLL_REG_ETH0_INT_CLOCK
,

325 
vÆ
, 
AR71XX_ETH0_PLL_SHIFT
);

326 
	`©h79_mii_˘æ_£t_•ìd
(
AR71XX_MII_REG_MII0_CTRL
, 
•ìd
);

327 
	}
}

329 
	$©h79_£t_•ìd_ge1
(
•ìd
)

331 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(1, 
•ìd
);

333 
	`©h79_£t_∂l
(
AR71XX_PLL_REG_SEC_CONFIG
, 
AR71XX_PLL_REG_ETH1_INT_CLOCK
,

334 
vÆ
, 
AR71XX_ETH1_PLL_SHIFT
);

335 
	`©h79_mii_˘æ_£t_•ìd
(
AR71XX_MII_REG_MII1_CTRL
, 
•ìd
);

336 
	}
}

338 
	$¨7242_£t_•ìd_ge0
(
•ìd
)

340 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

341 
__iomem
 *
ba£
;

343 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

344 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
AR7242_PLL_REG_ETH0_INT_CLOCK
);

345 
	`iounm≠
(
ba£
);

346 
	}
}

348 
	$¨91xx_£t_•ìd_ge0
(
•ìd
)

350 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

352 
	`©h79_£t_∂l
(
AR913X_PLL_REG_ETH_CONFIG
, 
AR913X_PLL_REG_ETH0_INT_CLOCK
,

353 
vÆ
, 
AR913X_ETH0_PLL_SHIFT
);

354 
	`©h79_mii_˘æ_£t_•ìd
(
AR71XX_MII_REG_MII0_CTRL
, 
•ìd
);

355 
	}
}

357 
	$¨91xx_£t_•ìd_ge1
(
•ìd
)

359 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(1, 
•ìd
);

361 
	`©h79_£t_∂l
(
AR913X_PLL_REG_ETH_CONFIG
, 
AR913X_PLL_REG_ETH1_INT_CLOCK
,

362 
vÆ
, 
AR913X_ETH1_PLL_SHIFT
);

363 
	`©h79_mii_˘æ_£t_•ìd
(
AR71XX_MII_REG_MII1_CTRL
, 
•ìd
);

364 
	}
}

366 
	$¨934x_£t_•ìd_ge0
(
•ìd
)

368 
__iomem
 *
ba£
;

369 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

371 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

372 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
AR934X_PLL_ETH_XMII_CONTROL_REG
);

373 
	`iounm≠
(
ba£
);

374 
	}
}

376 
	$qˇ955x_£t_•ìd_xmii
(
•ìd
)

378 
__iomem
 *
ba£
;

379 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

381 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

382 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
QCA955X_PLL_ETH_XMII_CONTROL_REG
);

383 
	`iounm≠
(
ba£
);

384 
	}
}

386 
	$qˇ955x_£t_•ìd_sgmii
(
id
, 
•ìd
)

388 
__iomem
 *
ba£
;

389 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(
id
, 
•ìd
);

391 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

392 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
QCA955X_PLL_ETH_SGMII_CONTROL_REG
);

393 
	`iounm≠
(
ba£
);

394 
	}
}

396 
	$qˇ9556_£t_•ìd_sgmii
(
•ìd
)

398 
	`qˇ955x_£t_•ìd_sgmii
(0, 
•ìd
);

399 
	}
}

401 
	$qˇ9558_£t_•ìd_sgmii
(
•ìd
)

403 
	`qˇ955x_£t_•ìd_sgmii
(1, 
•ìd
);

404 
	}
}

406 
	$qˇ956x_£t_•ìd_sgmii
(
•ìd
)

408 
__iomem
 *
ba£
;

409 
u32
 
vÆ
 = 
	`©h79_gë_ëh_∂l
(0, 
•ìd
);

411 
ba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

412 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
QCA955X_PLL_ETH_SGMII_CONTROL_REG
);

413 
	`iounm≠
(
ba£
);

414 
	}
}

416 
	$©h79_£t_•ìd_dummy
(
•ìd
)

418 
	}
}

420 
	$©h79_ddr_Êush_ge0
()

422 
	`©h79_ddr_wb_Êush
(0);

423 
	}
}

425 
	$©h79_ddr_Êush_ge1
()

427 
	`©h79_ddr_wb_Êush
(1);

428 
	}
}

430 
ªsour˚
 
	g©h79_ëh0_ªsour˚s
[] = {

432 .
«me
 = "mac_base",

433 .
	gÊags
 = 
IORESOURCE_MEM
,

434 .
	g°¨t
 = 
AR71XX_GE0_BASE
,

435 .
	gíd
 = 
AR71XX_GE0_BASE
 + 0x200 - 1,

437 .
	g«me
 = "mac_irq",

438 .
	gÊags
 = 
IORESOURCE_IRQ
,

439 .
	g°¨t
 = 
ATH79_CPU_IRQ
(4),

440 .
	gíd
 = 
ATH79_CPU_IRQ
(4),

444 
ag71xx_∂©f‹m_d©a
 
	g©h79_ëh0_d©a
 = {

445 .
ª£t_bô
 = 
AR71XX_RESET_GE0_MAC
,

448 
∂©f‹m_devi˚
 
	g©h79_ëh0_devi˚
 = {

449 .
«me
 = "ag71xx",

450 .
	gid
 = 0,

451 .
	gªsour˚
 = 
©h79_ëh0_ªsour˚s
,

452 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
©h79_ëh0_ªsour˚s
),

453 .
	gdev
 = {

454 .
∂©f‹m_d©a
 = &
©h79_ëh0_d©a
,

458 
ªsour˚
 
	g©h79_ëh1_ªsour˚s
[] = {

460 .
«me
 = "mac_base",

461 .
	gÊags
 = 
IORESOURCE_MEM
,

462 .
	g°¨t
 = 
AR71XX_GE1_BASE
,

463 .
	gíd
 = 
AR71XX_GE1_BASE
 + 0x200 - 1,

465 .
	g«me
 = "mac_irq",

466 .
	gÊags
 = 
IORESOURCE_IRQ
,

467 .
	g°¨t
 = 
ATH79_CPU_IRQ
(5),

468 .
	gíd
 = 
ATH79_CPU_IRQ
(5),

472 
ag71xx_∂©f‹m_d©a
 
	g©h79_ëh1_d©a
 = {

473 .
ª£t_bô
 = 
AR71XX_RESET_GE1_MAC
,

476 
∂©f‹m_devi˚
 
	g©h79_ëh1_devi˚
 = {

477 .
«me
 = "ag71xx",

478 .
	gid
 = 1,

479 .
	gªsour˚
 = 
©h79_ëh1_ªsour˚s
,

480 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
©h79_ëh1_ªsour˚s
),

481 .
	gdev
 = {

482 .
∂©f‹m_d©a
 = &
©h79_ëh1_d©a
,

486 
ag71xx_swôch_∂©f‹m_d©a
 
	g©h79_swôch_d©a
;

488 
	#AR71XX_PLL_VAL_1000
 0x00110000

	)

489 
	#AR71XX_PLL_VAL_100
 0x00001099

	)

490 
	#AR71XX_PLL_VAL_10
 0x00991099

	)

492 
	#AR724X_PLL_VAL_1000
 0x00110000

	)

493 
	#AR724X_PLL_VAL_100
 0x00001099

	)

494 
	#AR724X_PLL_VAL_10
 0x00991099

	)

496 
	#AR7242_PLL_VAL_1000
 0x16000000

	)

497 
	#AR7242_PLL_VAL_100
 0x00000101

	)

498 
	#AR7242_PLL_VAL_10
 0x00001616

	)

500 
	#AR913X_PLL_VAL_1000
 0x1a000000

	)

501 
	#AR913X_PLL_VAL_100
 0x13000a44

	)

502 
	#AR913X_PLL_VAL_10
 0x00441099

	)

504 
	#AR933X_PLL_VAL_1000
 0x00110000

	)

505 
	#AR933X_PLL_VAL_100
 0x00001099

	)

506 
	#AR933X_PLL_VAL_10
 0x00991099

	)

508 
	#AR934X_PLL_VAL_1000
 0x16000000

	)

509 
	#AR934X_PLL_VAL_100
 0x00000101

	)

510 
	#AR934X_PLL_VAL_10
 0x00001616

	)

512 
	#QCA956X_PLL_VAL_1000
 0x03000000

	)

513 
	#QCA956X_PLL_VAL_100
 0x00000101

	)

514 
	#QCA956X_PLL_VAL_10
 0x00001919

	)

516 
__öô
 
	$©h79_öô_ëh_∂l_d©a
(
id
)

518 
©h79_ëh_∂l_d©a
 *
∂l_d©a
;

519 
u32
 
∂l_10
, 
∂l_100
, 
∂l_1000
;

521 
id
) {

523 
∂l_d©a
 = &
©h79_ëh0_∂l_d©a
;

526 
∂l_d©a
 = &
©h79_ëh1_∂l_d©a
;

529 
	`BUG
();

532 
©h79_soc
) {

533 
ATH79_SOC_AR7130
:

534 
ATH79_SOC_AR7141
:

535 
ATH79_SOC_AR7161
:

536 
∂l_10
 = 
AR71XX_PLL_VAL_10
;

537 
∂l_100
 = 
AR71XX_PLL_VAL_100
;

538 
∂l_1000
 = 
AR71XX_PLL_VAL_1000
;

541 
ATH79_SOC_AR7240
:

542 
ATH79_SOC_AR7241
:

543 
∂l_10
 = 
AR724X_PLL_VAL_10
;

544 
∂l_100
 = 
AR724X_PLL_VAL_100
;

545 
∂l_1000
 = 
AR724X_PLL_VAL_1000
;

548 
ATH79_SOC_AR7242
:

549 
∂l_10
 = 
AR7242_PLL_VAL_10
;

550 
∂l_100
 = 
AR7242_PLL_VAL_100
;

551 
∂l_1000
 = 
AR7242_PLL_VAL_1000
;

554 
ATH79_SOC_AR9130
:

555 
ATH79_SOC_AR9132
:

556 
∂l_10
 = 
AR913X_PLL_VAL_10
;

557 
∂l_100
 = 
AR913X_PLL_VAL_100
;

558 
∂l_1000
 = 
AR913X_PLL_VAL_1000
;

561 
ATH79_SOC_AR9330
:

562 
ATH79_SOC_AR9331
:

563 
∂l_10
 = 
AR933X_PLL_VAL_10
;

564 
∂l_100
 = 
AR933X_PLL_VAL_100
;

565 
∂l_1000
 = 
AR933X_PLL_VAL_1000
;

568 
ATH79_SOC_AR9341
:

569 
ATH79_SOC_AR9342
:

570 
ATH79_SOC_AR9344
:

571 
ATH79_SOC_QCA9533
:

572 
ATH79_SOC_QCA9556
:

573 
ATH79_SOC_QCA9558
:

574 
ATH79_SOC_TP9343
:

575 
∂l_10
 = 
AR934X_PLL_VAL_10
;

576 
∂l_100
 = 
AR934X_PLL_VAL_100
;

577 
∂l_1000
 = 
AR934X_PLL_VAL_1000
;

580 
ATH79_SOC_QCA956X
:

581 
∂l_10
 = 
QCA956X_PLL_VAL_10
;

582 
∂l_100
 = 
QCA956X_PLL_VAL_100
;

583 
∂l_1000
 = 
QCA956X_PLL_VAL_1000
;

587 
	`BUG
();

590 i‡(!
∂l_d©a
->
∂l_10
)

591 
∂l_d©a
->
∂l_10
 =Öll_10;

593 i‡(!
∂l_d©a
->
∂l_100
)

594 
∂l_d©a
->
∂l_100
 =Öll_100;

596 i‡(!
∂l_d©a
->
∂l_1000
)

597 
∂l_d©a
->
∂l_1000
 =Öll_1000;

598 
	}
}

600 
__öô
 
	$©h79_£tup_phy_if_mode
(
id
,

601 
ag71xx_∂©f‹m_d©a
 *
pd©a
)

603 
mii_if
;

605 
id
) {

607 
©h79_soc
) {

608 
ATH79_SOC_AR7130
:

609 
ATH79_SOC_AR7141
:

610 
ATH79_SOC_AR7161
:

611 
ATH79_SOC_AR9130
:

612 
ATH79_SOC_AR9132
:

613 
pd©a
->
phy_if_mode
) {

614 
PHY_INTERFACE_MODE_MII
:

615 
mii_if
 = 
AR71XX_MII0_CTRL_IF_MII
;

617 
PHY_INTERFACE_MODE_GMII
:

618 
mii_if
 = 
AR71XX_MII0_CTRL_IF_GMII
;

620 
PHY_INTERFACE_MODE_RGMII
:

621 
mii_if
 = 
AR71XX_MII0_CTRL_IF_RGMII
;

623 
PHY_INTERFACE_MODE_RMII
:

624 
mii_if
 = 
AR71XX_MII0_CTRL_IF_RMII
;

627  -
EINVAL
;

629 
	`©h79_mii_˘æ_£t_if
(
AR71XX_MII_REG_MII0_CTRL
, 
mii_if
);

632 
ATH79_SOC_AR7240
:

633 
ATH79_SOC_AR7241
:

634 
ATH79_SOC_AR9330
:

635 
ATH79_SOC_AR9331
:

636 
ATH79_SOC_QCA9533
:

637 
ATH79_SOC_TP9343
:

638 
pd©a
->
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

641 
ATH79_SOC_AR7242
:

644 
ATH79_SOC_AR9341
:

645 
ATH79_SOC_AR9342
:

646 
ATH79_SOC_AR9344
:

647 
pd©a
->
phy_if_mode
) {

648 
PHY_INTERFACE_MODE_MII
:

649 
PHY_INTERFACE_MODE_GMII
:

650 
PHY_INTERFACE_MODE_RGMII
:

651 
PHY_INTERFACE_MODE_RMII
:

654  -
EINVAL
;

658 
ATH79_SOC_QCA9556
:

659 
ATH79_SOC_QCA9558
:

660 
ATH79_SOC_QCA956X
:

661 
pd©a
->
phy_if_mode
) {

662 
PHY_INTERFACE_MODE_MII
:

663 
PHY_INTERFACE_MODE_RGMII
:

664 
PHY_INTERFACE_MODE_SGMII
:

667  -
EINVAL
;

672 
	`BUG
();

676 
©h79_soc
) {

677 
ATH79_SOC_AR7130
:

678 
ATH79_SOC_AR7141
:

679 
ATH79_SOC_AR7161
:

680 
ATH79_SOC_AR9130
:

681 
ATH79_SOC_AR9132
:

682 
pd©a
->
phy_if_mode
) {

683 
PHY_INTERFACE_MODE_RMII
:

684 
mii_if
 = 
AR71XX_MII1_CTRL_IF_RMII
;

686 
PHY_INTERFACE_MODE_RGMII
:

687 
mii_if
 = 
AR71XX_MII1_CTRL_IF_RGMII
;

690  -
EINVAL
;

692 
	`©h79_mii_˘æ_£t_if
(
AR71XX_MII_REG_MII1_CTRL
, 
mii_if
);

695 
ATH79_SOC_AR7240
:

696 
ATH79_SOC_AR7241
:

697 
ATH79_SOC_AR9330
:

698 
ATH79_SOC_AR9331
:

699 
ATH79_SOC_TP9343
:

700 
pd©a
->
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

703 
ATH79_SOC_AR7242
:

706 
ATH79_SOC_AR9341
:

707 
ATH79_SOC_AR9342
:

708 
ATH79_SOC_AR9344
:

709 
ATH79_SOC_QCA9533
:

710 
ATH79_SOC_QCA956X
:

711 
pd©a
->
phy_if_mode
) {

712 
PHY_INTERFACE_MODE_MII
:

713 
PHY_INTERFACE_MODE_GMII
:

716  -
EINVAL
;

720 
ATH79_SOC_QCA9556
:

721 
ATH79_SOC_QCA9558
:

722 
pd©a
->
phy_if_mode
) {

723 
PHY_INTERFACE_MODE_MII
:

724 
PHY_INTERFACE_MODE_RGMII
:

725 
PHY_INTERFACE_MODE_SGMII
:

728  -
EINVAL
;

733 
	`BUG
();

739 
	}
}

741 
__öô
 
	$©h79_£tup_¨933x_phy4_swôch
(
boﬁ
 
mac
, boﬁ 
mdio
)

743 
__iomem
 *
ba£
;

744 
u32
 
t
;

746 
ba£
 = 
	`i‹em≠
(
AR933X_GMAC_BASE
, 
AR933X_GMAC_SIZE
);

748 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR933X_GMAC_REG_ETH_CFG
);

749 
t
 &~(
AR933X_ETH_CFG_SW_PHY_SWAP
 | 
AR933X_ETH_CFG_SW_PHY_ADDR_SWAP
);

750 i‡(
mac
)

751 
t
 |
AR933X_ETH_CFG_SW_PHY_SWAP
;

752 i‡(
mdio
)

753 
t
 |
AR933X_ETH_CFG_SW_PHY_ADDR_SWAP
;

754 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR933X_GMAC_REG_ETH_CFG
);

756 
	`iounm≠
(
ba£
);

757 
	}
}

759 
__öô
 
	$©h79_£tup_¨934x_ëh_cfg
(
u32
 
mask
)

761 
__iomem
 *
ba£
;

762 
u32
 
t
;

764 
ba£
 = 
	`i‹em≠
(
AR934X_GMAC_BASE
, 
AR934X_GMAC_SIZE
);

766 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

768 
t
 &~(
AR934X_ETH_CFG_RGMII_GMAC0
 |

769 
AR934X_ETH_CFG_MII_GMAC0
 |

770 
AR934X_ETH_CFG_GMII_GMAC0
 |

771 
AR934X_ETH_CFG_SW_ONLY_MODE
 |

772 
AR934X_ETH_CFG_SW_PHY_SWAP
);

774 
t
 |
mask
;

776 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

778 
	`__øw_ªadl
(
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

780 
	`iounm≠
(
ba£
);

781 
	}
}

783 
__öô
 
	$©h79_£tup_¨934x_ëh_rx_dñay
(
rxd
,

784 
rxdv
)

786 
__iomem
 *
ba£
;

787 
u32
 
t
;

789 
rxd
 &
AR934X_ETH_CFG_RXD_DELAY_MASK
;

790 
rxdv
 &
AR934X_ETH_CFG_RDV_DELAY_MASK
;

792 
ba£
 = 
	`i‹em≠
(
AR934X_GMAC_BASE
, 
AR934X_GMAC_SIZE
);

794 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

796 
t
 &~(
AR934X_ETH_CFG_RXD_DELAY_MASK
 << 
AR934X_ETH_CFG_RXD_DELAY_SHIFT
 |

797 
AR934X_ETH_CFG_RDV_DELAY_MASK
 << 
AR934X_ETH_CFG_RDV_DELAY_SHIFT
);

799 
t
 |(
rxd
 << 
AR934X_ETH_CFG_RXD_DELAY_SHIFT
 |

800 
rxdv
 << 
AR934X_ETH_CFG_RDV_DELAY_SHIFT
);

802 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

804 
	`__øw_ªadl
(
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

806 
	`iounm≠
(
ba£
);

807 
	}
}

809 
__öô
 
	$©h79_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
)

811 
__iomem
 *
ba£
;

812 
u32
 
t
;

814 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

816 
t
 = 
	`__øw_ªadl
(
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

818 
t
 &~(
QCA955X_ETH_CFG_RGMII_EN
 | 
QCA955X_ETH_CFG_GE0_SGMII
);

820 
t
 |
mask
;

822 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

824 
	`iounm≠
(
ba£
);

825 
	}
}

827 
__öô
 
	$©h79_£tup_qˇ956x_ëh_cfg
(
u32
 
mask
)

829 
__iomem
 *
ba£
;

830 
u32
 
t
;

832 
ba£
 = 
	`i‹em≠
(
QCA956X_GMAC_BASE
, 
QCA956X_GMAC_SIZE
);

834 
t
 = 
	`__øw_ªadl
(
ba£
 + 
QCA956X_GMAC_REG_ETH_CFG
);

836 
t
 &~(
QCA956X_ETH_CFG_SW_ONLY_MODE
 |

837 
QCA956X_ETH_CFG_SW_PHY_SWAP
);

839 
t
 |
mask
;

841 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA956X_GMAC_REG_ETH_CFG
);

843 
	`__øw_ªadl
(
ba£
 + 
QCA956X_GMAC_REG_ETH_CFG
);

845 
	`iounm≠
(
ba£
);

846 
	}
}

848 
©h79_ëh_ö°™˚
 
	g__öôd©a
;

849 
__öô
 
	$©h79_ªgi°î_ëh
(
id
)

851 
∂©f‹m_devi˚
 *
pdev
;

852 
ag71xx_∂©f‹m_d©a
 *
pd©a
;

853 
îr
;

855 i‡(
id
 > 1) {

856 
	`¥ötk
(
KERN_ERR
 "¨71xx: invÆidÉthî√àid %d\n", 
id
);

860 
	`©h79_öô_ëh_∂l_d©a
(
id
);

862 i‡(
id
 == 0)

863 
pdev
 = &
©h79_ëh0_devi˚
;

865 
pdev
 = &
©h79_ëh1_devi˚
;

867 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

869 
pd©a
->
max_‰ame_Àn
 = 1540;

870 
pd©a
->
desc_pkéí_mask
 = 0xfff;

872 
îr
 = 
	`©h79_£tup_phy_if_mode
(
id
, 
pd©a
);

873 i‡(
îr
) {

874 
	`¥ötk
(
KERN_ERR


875 "¨71xx: invÆid PHY i¡îÁ˚ modêf‹ GE%u\n", 
id
);

879 i‡(
id
 == 0)

880 
pd©a
->
ddr_Êush
 = 
©h79_ddr_Êush_ge0
;

882 
pd©a
->
ddr_Êush
 = 
©h79_ddr_Êush_ge1
;

884 
©h79_soc
) {

885 
ATH79_SOC_AR7130
:

886 i‡(
id
 == 0)

887 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_ge0
;

889 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_ge1
;

892 
ATH79_SOC_AR7141
:

893 
ATH79_SOC_AR7161
:

894 i‡(
id
 == 0)

895 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_ge0
;

897 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_ge1
;

898 
pd©a
->
has_gbô
 = 1;

901 
ATH79_SOC_AR7242
:

902 i‡(
id
 == 0) {

903 
pd©a
->
ª£t_bô
 |
AR724X_RESET_GE0_MDIO
 |

904 
AR71XX_RESET_GE0_PHY
;

905 
pd©a
->
£t_•ìd
 = 
¨7242_£t_•ìd_ge0
;

907 
pd©a
->
ª£t_bô
 |
AR724X_RESET_GE1_MDIO
 |

908 
AR71XX_RESET_GE1_PHY
;

909 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

911 
pd©a
->
has_gbô
 = 1;

912 
pd©a
->
is_¨724x
 = 1;

915 
ATH79_SOC_AR7241
:

916 i‡(
id
 == 0)

917 
pd©a
->
ª£t_bô
 |
AR724X_RESET_GE0_MDIO
;

919 
pd©a
->
ª£t_bô
 |
AR724X_RESET_GE1_MDIO
;

921 
ATH79_SOC_AR7240
:

922 i‡(
id
 == 0) {

923 
pd©a
->
ª£t_bô
 |
AR71XX_RESET_GE0_PHY
;

924 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

926 
pd©a
->
phy_mask
 = 
	`BIT
(4);

928 
pd©a
->
ª£t_bô
 |
AR71XX_RESET_GE1_PHY
;

929 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

931 
pd©a
->
•ìd
 = 
SPEED_1000
;

932 
pd©a
->
du∂ex
 = 
DUPLEX_FULL
;

933 
pd©a
->
swôch_d©a
 = &
©h79_swôch_d©a
;

934 
pd©a
->
u£_Êow_c⁄åﬁ
 = 1;

936 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

938 
pd©a
->
has_gbô
 = 1;

939 
pd©a
->
is_¨724x
 = 1;

940 i‡(
©h79_soc
 =
ATH79_SOC_AR7240
)

941 
pd©a
->
is_¨7240
 = 1;

944 
ATH79_SOC_AR9132
:

945 
pd©a
->
has_gbô
 = 1;

947 
ATH79_SOC_AR9130
:

948 i‡(
id
 == 0)

949 
pd©a
->
£t_•ìd
 = 
¨91xx_£t_•ìd_ge0
;

951 
pd©a
->
£t_•ìd
 = 
¨91xx_£t_•ìd_ge1
;

952 
pd©a
->
is_¨91xx
 = 1;

955 
ATH79_SOC_AR9330
:

956 
ATH79_SOC_AR9331
:

957 i‡(
id
 == 0) {

958 
pd©a
->
ª£t_bô
 = 
AR933X_RESET_GE0_MAC
 |

959 
AR933X_RESET_GE0_MDIO
;

960 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

962 
pd©a
->
phy_mask
 = 
	`BIT
(4);

964 
pd©a
->
ª£t_bô
 = 
AR933X_RESET_GE1_MAC
 |

965 
AR933X_RESET_GE1_MDIO
;

966 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

968 
pd©a
->
•ìd
 = 
SPEED_1000
;

969 
pd©a
->
has_gbô
 = 1;

970 
pd©a
->
du∂ex
 = 
DUPLEX_FULL
;

971 
pd©a
->
swôch_d©a
 = &
©h79_swôch_d©a
;

972 
pd©a
->
u£_Êow_c⁄åﬁ
 = 1;

974 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

977 
pd©a
->
is_¨724x
 = 1;

980 
ATH79_SOC_AR9341
:

981 
ATH79_SOC_AR9342
:

982 
ATH79_SOC_AR9344
:

983 
ATH79_SOC_QCA9533
:

984 i‡(
id
 == 0) {

985 
pd©a
->
ª£t_bô
 = 
AR934X_RESET_GE0_MAC
 |

986 
AR934X_RESET_GE0_MDIO
;

987 
pd©a
->
£t_•ìd
 = 
¨934x_£t_•ìd_ge0
;

989 i‡(
©h79_soc
 =
ATH79_SOC_QCA9533
)

990 
pd©a
->
dißbÀ_ölöe_checksum_ígöe
 = 1;

992 
pd©a
->
ª£t_bô
 = 
AR934X_RESET_GE1_MAC
 |

993 
AR934X_RESET_GE1_MDIO
;

994 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

996 
pd©a
->
swôch_d©a
 = &
©h79_swôch_d©a
;

999 
	`©h79_devi˚_ª£t_£t
(
AR934X_RESET_ETH_SWITCH
);

1000 
	`©h79_devi˚_ª£t_˛ór
(
AR934X_RESET_ETH_SWITCH
);

1003 
pd©a
->
has_gbô
 = 1;

1004 
pd©a
->
is_¨724x
 = 1;

1006 
pd©a
->
max_‰ame_Àn
 = 
SZ_16K
 - 1;

1007 
pd©a
->
desc_pkéí_mask
 = 
SZ_16K
 - 1;

1010 
ATH79_SOC_TP9343
:

1011 i‡(
id
 == 0) {

1012 
pd©a
->
ª£t_bô
 = 
AR933X_RESET_GE0_MAC
 |

1013 
AR933X_RESET_GE0_MDIO
;

1014 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

1016 i‡(!
pd©a
->
phy_mask
)

1017 
pd©a
->
phy_mask
 = 
	`BIT
(4);

1019 
pd©a
->
ª£t_bô
 = 
AR933X_RESET_GE1_MAC
 |

1020 
AR933X_RESET_GE1_MDIO
;

1021 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

1023 
pd©a
->
•ìd
 = 
SPEED_1000
;

1024 
pd©a
->
du∂ex
 = 
DUPLEX_FULL
;

1025 
pd©a
->
swôch_d©a
 = &
©h79_swôch_d©a
;

1026 
pd©a
->
u£_Êow_c⁄åﬁ
 = 1;

1028 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

1031 
pd©a
->
has_gbô
 = 1;

1032 
pd©a
->
is_¨724x
 = 1;

1035 
ATH79_SOC_QCA9556
:

1036 
ATH79_SOC_QCA9558
:

1037 i‡(
id
 == 0) {

1038 
pd©a
->
ª£t_bô
 = 
QCA955X_RESET_GE0_MAC
 |

1039 
QCA955X_RESET_GE0_MDIO
;

1040 
pd©a
->
£t_•ìd
 = 
qˇ955x_£t_•ìd_xmii
;

1043 i‡(
©h79_soc
 =
ATH79_SOC_QCA9556
)

1044 
pd©a
->
£t_•ìd
 = 
qˇ9556_£t_•ìd_sgmii
;

1046 
pd©a
->
ª£t_bô
 = 
QCA955X_RESET_GE1_MAC
 |

1047 
QCA955X_RESET_GE1_MDIO
;

1048 
pd©a
->
£t_•ìd
 = 
qˇ9558_£t_•ìd_sgmii
;

1051 
pd©a
->
has_gbô
 = 1;

1052 
pd©a
->
is_¨724x
 = 1;

1062 
pd©a
->
max_‰ame_Àn
 = 
SZ_4K
 - 1;

1063 
pd©a
->
desc_pkéí_mask
 = 
SZ_16K
 - 1;

1066 
ATH79_SOC_QCA956X
:

1067 i‡(
id
 == 0) {

1068 
pd©a
->
ª£t_bô
 = 
QCA955X_RESET_GE0_MAC
 |

1069 
QCA955X_RESET_GE0_MDIO
;

1071 i‡(
pd©a
->
phy_if_mode
 =
PHY_INTERFACE_MODE_SGMII
)

1072 
pd©a
->
£t_•ìd
 = 
qˇ956x_£t_•ìd_sgmii
;

1074 
pd©a
->
£t_•ìd
 = 
¨934x_£t_•ìd_ge0
;

1076 
pd©a
->
dißbÀ_ölöe_checksum_ígöe
 = 1;

1078 
pd©a
->
ª£t_bô
 = 
QCA955X_RESET_GE1_MAC
 |

1079 
QCA955X_RESET_GE1_MDIO
;

1081 
pd©a
->
£t_•ìd
 = 
©h79_£t_•ìd_dummy
;

1083 
pd©a
->
swôch_d©a
 = &
©h79_swôch_d©a
;

1085 
pd©a
->
•ìd
 = 
SPEED_1000
;

1086 
pd©a
->
du∂ex
 = 
DUPLEX_FULL
;

1087 
pd©a
->
u£_Êow_c⁄åﬁ
 = 1;

1090 
	`©h79_devi˚_ª£t_£t
(
AR934X_RESET_ETH_SWITCH
);

1091 
	`©h79_devi˚_ª£t_˛ór
(
AR934X_RESET_ETH_SWITCH
);

1094 
pd©a
->
has_gbô
 = 1;

1095 
pd©a
->
is_¨724x
 = 1;

1099 
	`BUG
();

1102 
pd©a
->
phy_if_mode
) {

1103 
PHY_INTERFACE_MODE_GMII
:

1104 
PHY_INTERFACE_MODE_RGMII
:

1105 
PHY_INTERFACE_MODE_SGMII
:

1106 i‡(!
pd©a
->
has_gbô
) {

1107 
	`¥ötk
(
KERN_ERR
 "ar71xx:Ço gbitávailable onÉth%d\n",

1108 
id
);

1116 i‡(!
	`is_vÆid_ëhî_addr
(
pd©a
->
mac_addr
)) {

1117 
	`øndom_ëhî_addr
(
pd©a
->
mac_addr
);

1118 
	`¥ötk
(
KERN_DEBUG


1120 
©h79_ëh_ö°™˚
);

1123 i‡(
pd©a
->
mii_bus_dev
 =
NULL
) {

1124 
©h79_soc
) {

1125 
ATH79_SOC_AR9341
:

1126 
ATH79_SOC_AR9342
:

1127 
ATH79_SOC_AR9344
:

1128 i‡(
id
 == 0)

1129 
pd©a
->
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

1131 
pd©a
->
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

1134 
ATH79_SOC_AR7241
:

1135 
ATH79_SOC_AR9330
:

1136 
ATH79_SOC_AR9331
:

1137 
ATH79_SOC_QCA9533
:

1138 
ATH79_SOC_TP9343
:

1139 
pd©a
->
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

1142 
ATH79_SOC_QCA9556
:

1143 
ATH79_SOC_QCA9558
:

1147 
ATH79_SOC_QCA956X
:

1148 i‡(
pd©a
->
phy_if_mode
 !
PHY_INTERFACE_MODE_SGMII
)

1149 
pd©a
->
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

1153 
pd©a
->
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

1159 
	`©h79_devi˚_ª£t_£t
(
pd©a
->
ª£t_bô
);

1160 
	`m¶ìp
(100);

1162 
	`©h79_devi˚_ª£t_˛ór
(
pd©a
->
ª£t_bô
);

1163 
	`m¶ìp
(100);

1165 
	`∂©f‹m_devi˚_ªgi°î
(
pdev
);

1166 
©h79_ëh_ö°™˚
++;

1167 
	}
}

1169 
__öô
 
	$©h79_£t_mac_ba£
(*
mac
)

1171 
	`mem˝y
(
©h79_mac_ba£
, 
mac
, 
ETH_ALEN
);

1172 
	}
}

1174 
__öô
 
	$©h79_∑r£_ascii_mac
(*
mac_°r
, 
u8
 *
mac
)

1176 
t
;

1178 
t
 = 
	`ssˇnf
(
mac_°r
, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",

1179 &
mac
[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);

1181 i‡(
t
 !
ETH_ALEN
)

1182 
t
 = 
	`ssˇnf
(
mac_°r
, "%02hhx.%02hhx.%02hhx.%02hhx.%02hhx.%02hhx",

1183 &
mac
[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);

1185 i‡(
t
 !
ETH_ALEN
 || !
	`is_vÆid_ëhî_addr
(
mac
)) {

1186 
	`mem£t
(
mac
, 0, 
ETH_ALEN
);

1187 
	`¥ötk
(
KERN_DEBUG
 "ar71xx: invalid macáddress \"%s\"\n",

1188 
mac_°r
);

1190 
	}
}

1192 
__öô
 
	$©h79_exåa˘_mac_ªvî£
(
u8
 *
±r
, u8 *
out
)

1194 
i
;

1196 
i
 = 0; i < 
ETH_ALEN
; i++) {

1197 
out
[
i
] = 
±r
[
ETH_ALEN
-i-1];

1199 
	}
}

1201 
__öô
 
	$©h79_£t_mac_ba£_ascii
(*
°r
)

1203 
u8
 
mac
[
ETH_ALEN
];

1205 
	`©h79_∑r£_ascii_mac
(
°r
, 
mac
);

1206 
	`©h79_£t_mac_ba£
(
mac
);

1207 
	}
}

1209 
__öô
 
	$©h79_ëhaddr_£tup
(*
°r
)

1211 
	`©h79_£t_mac_ba£_ascii
(
°r
);

1213 
	}
}

1214 
__£tup
("ëhaddr=", 
©h79_ëhaddr_£tup
);

1216 
__öô
 
	$©h79_kmac_£tup
(*
°r
)

1218 
	`©h79_£t_mac_ba£_ascii
(
°r
);

1220 
	}
}

1221 
__£tup
("kmac=", 
©h79_kmac_£tup
);

1223 
__öô
 
	$©h79_öô_mac
(*
d°
, c⁄° *
§c
,

1224 
off£t
)

1226 
t
;

1228 i‡(!
d°
)

1231 i‡(!
§c
 || !
	`is_vÆid_ëhî_addr
(src)) {

1232 
	`mem£t
(
d°
, '\0', 
ETH_ALEN
);

1236 
t
 = (((
u32
Ë
§c
[3]) << 16) + (((u32) src[4]) << 8) + ((u32) src[5]);

1237 
t
 +
off£t
;

1239 
d°
[0] = 
§c
[0];

1240 
d°
[1] = 
§c
[1];

1241 
d°
[2] = 
§c
[2];

1242 
d°
[3] = (
t
 >> 16) & 0xff;

1243 
d°
[4] = (
t
 >> 8) & 0xff;

1244 
d°
[5] = 
t
 & 0xff;

1245 
	}
}

1247 
__öô
 
	$©h79_öô_loˇl_mac
(*
d°
, c⁄° *
§c
)

1249 
i
;

1251 i‡(!
d°
)

1254 i‡(!
§c
 || !
	`is_vÆid_ëhî_addr
(src)) {

1255 
	`mem£t
(
d°
, '\0', 
ETH_ALEN
);

1259 
i
 = 0; i < 
ETH_ALEN
; i++)

1260 
d°
[
i
] = 
§c
[i];

1261 
d°
[0] |= 0x02;

1262 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-eth.h

12 #i‚de‡
_ATH79_DEV_ETH_H


13 
	#_ATH79_DEV_ETH_H


	)

15 
	~<asm/mach-©h79/ag71xx_∂©f‹m.h
>

17 
	g∂©f‹m_devi˚
;

19 
©h79_mac_ba£
[] 
__öôd©a
;

20 
©h79_∑r£_ascii_mac
(*
mac_°r
, 
u8
 *
mac
);

21 
©h79_exåa˘_mac_ªvî£
(
u8
 *
±r
, u8 *
out
);

22 
©h79_öô_mac
(*
d°
, c⁄° *
§c
,

23 
off£t
);

24 
©h79_öô_loˇl_mac
(*
d°
, c⁄° *
§c
);

26 
	s©h79_ëh_∂l_d©a
 {

27 
u32
 
	m∂l_10
;

28 
u32
 
	m∂l_100
;

29 
u32
 
	m∂l_1000
;

32 
©h79_ëh_∂l_d©a
 
©h79_ëh0_∂l_d©a
;

33 
©h79_ëh_∂l_d©a
 
©h79_ëh1_∂l_d©a
;

35 
ag71xx_∂©f‹m_d©a
 
©h79_ëh0_d©a
;

36 
ag71xx_∂©f‹m_d©a
 
©h79_ëh1_d©a
;

37 
∂©f‹m_devi˚
 
©h79_ëh0_devi˚
;

38 
∂©f‹m_devi˚
 
©h79_ëh1_devi˚
;

39 
©h79_ªgi°î_ëh
(
id
);

41 
ag71xx_swôch_∂©f‹m_d©a
 
©h79_swôch_d©a
;

43 
ag71xx_mdio_∂©f‹m_d©a
 
©h79_mdio0_d©a
;

44 
ag71xx_mdio_∂©f‹m_d©a
 
©h79_mdio1_d©a
;

45 
∂©f‹m_devi˚
 
©h79_mdio0_devi˚
;

46 
∂©f‹m_devi˚
 
©h79_mdio1_devi˚
;

47 
©h79_ªgi°î_mdio
(
id
, 
u32
 
phy_mask
);

49 
©h79_£tup_¨933x_phy4_swôch
(
boﬁ
 
mac
, boﬁ 
mdio
);

50 
©h79_£tup_¨934x_ëh_cfg
(
u32
 
mask
);

51 
©h79_£tup_¨934x_ëh_rx_dñay
(
rxd
, 
rxdv
);

52 
©h79_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
);

53 
©h79_£tup_qˇ956x_ëh_cfg
(
u32
 
mask
);

	@linux/ar71xx/files/arch/mips/ath79/dev-m25p80.c

9 
	~<löux/öô.h
>

10 
	~<löux/•i/•i.h
>

11 
	~<löux/•i/Êash.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

14 
	~<löux/mtd/c⁄ˇt.h
>

16 
	~"dev-•i.h
"

17 
	~"dev-m25p80.h
"

19 
•i_bﬂrd_öfo
 
	g©h79_•i_öfo
[] = {

21 .
bus_num
 = 0,

22 .
	gchù_£À˘
 = 0,

23 .
	gmax_•ìd_hz
 = 25000000,

24 .
	gmodÆüs
 = "m25p80",

27 .
	gbus_num
 = 0,

28 .
	gchù_£À˘
 = 1,

29 .
	gmax_•ìd_hz
 = 25000000,

30 .
	gmodÆüs
 = "m25p80",

34 
©h79_•i_∂©f‹m_d©a
 
	g©h79_•i_d©a
;

36 
__öô
 
	$©h79_ªgi°î_m25p80
(
Êash_∂©f‹m_d©a
 *
pd©a
)

38 
©h79_•i_d©a
.
bus_num
 = 0;

39 
©h79_•i_d©a
.
num_chù£À˘
 = 1;

40 
©h79_•i_öfo
[0].
∂©f‹m_d©a
 = 
pd©a
;

41 
	`©h79_ªgi°î_•i
(&
©h79_•i_d©a
, 
©h79_•i_öfo
, 1);

42 
	}
}

44 
Êash_∂©f‹m_d©a
 *
	gmu…i_pd©a
;

46 
mtd_öfo
 *
	gc⁄ˇt_devs
[2] = { 
NULL
, NULL };

47 
w‹k_°ru˘
 
	gmtd_c⁄ˇt_w‹k
;

49 
	$mtd_c⁄ˇt_add_w‹k
(
w‹k_°ru˘
 *
w‹k
)

51 
mtd_öfo
 *
mtd
;

53 
mtd
 = 
	`mtd_c⁄ˇt_¸óã
(
c⁄ˇt_devs
, 
	`ARRAY_SIZE
(concat_devs), "flash");

55 
	`mtd_devi˚_ªgi°î
(
mtd
, 
mu…i_pd©a
->
∑πs
, mu…i_pd©a->
ƒ_∑πs
);

56 
	}
}

58 
	$mtd_c⁄ˇt_add
(
mtd_öfo
 *
mtd
)

60 
boﬁ
 
ªgi°îed
 = 
Ál£
;

62 i‡(
ªgi°îed
)

65 i‡(!
	`°rcmp
(
mtd
->
«me
, "spi0.0"))

66 
c⁄ˇt_devs
[0] = 
mtd
;

67 i‡(!
	`°rcmp
(
mtd
->
«me
, "spi0.1"))

68 
c⁄ˇt_devs
[1] = 
mtd
;

72 i‡(!
c⁄ˇt_devs
[0] || !concat_devs[1])

75 
ªgi°îed
 = 
åue
;

76 
	`INIT_WORK
(&
mtd_c⁄ˇt_w‹k
, 
mtd_c⁄ˇt_add_w‹k
);

77 
	`scheduÀ_w‹k
(&
mtd_c⁄ˇt_w‹k
);

78 
	}
}

80 
	$mtd_c⁄ˇt_ªmove
(
mtd_öfo
 *
mtd
)

82 
	}
}

84 
	$add_mtd_c⁄ˇt_nŸifõr
()

86 
mtd_nŸifõr
 
nŸ
 = {

87 .
add
 = 
mtd_c⁄ˇt_add
,

88 .
ªmove
 = 
mtd_c⁄ˇt_ªmove
,

91 
	`ªgi°î_mtd_u£r
(&
nŸ
);

92 
	}
}

94 
__öô
 
	$©h79_ªgi°î_m25p80_mu…i
(
Êash_∂©f‹m_d©a
 *
pd©a
)

96 
mu…i_pd©a
 = 
pd©a
;

97 
	`add_mtd_c⁄ˇt_nŸifõr
();

98 
©h79_•i_d©a
.
bus_num
 = 0;

99 
©h79_•i_d©a
.
num_chù£À˘
 = 2;

100 
	`©h79_ªgi°î_•i
(&
©h79_•i_d©a
, 
©h79_•i_öfo
, 2);

101 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-m25p80.h

9 #i‚de‡
_ATH79_DEV_M25P80_H


10 
	#_ATH79_DEV_M25P80_H


	)

12 
	~<löux/•i/Êash.h
>

14 
	$©h79_ªgi°î_m25p80
(
Êash_∂©f‹m_d©a
 *
pd©a
Ë
__öô
;

15 
	$©h79_ªgi°î_m25p80_mu…i
(
Êash_∂©f‹m_d©a
 *
pd©a
Ë
__öô
;

	@linux/ar71xx/files/arch/mips/ath79/dev-nfc.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/dñay.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/úq.h
>

15 
	~<löux/dma-m≠pög.h
>

16 
	~<löux/ëhîdevi˚.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/∂©f‹m/¨934x_nfc.h
>

20 
	~<asm/mach-©h79/©h79.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~"dev-nfc.h
"

25 
ªsour˚
 
	g©h79_nfc_ªsour˚s
[2];

26 
u64
 
	g¨934x_nfc_dmamask
 = 
DMA_BIT_MASK
(32);

27 
¨934x_nfc_∂©f‹m_d©a
 
	g©h79_nfc_d©a
;

29 
∂©f‹m_devi˚
 
	g©h79_nfc_devi˚
 = {

30 .
«me
 = 
AR934X_NFC_DRIVER_NAME
,

31 .
	gid
 = -1,

32 .
	gªsour˚
 = 
©h79_nfc_ªsour˚s
,

33 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
©h79_nfc_ªsour˚s
),

34 .
	gdev
 = {

35 .
dma_mask
 = &
¨934x_nfc_dmamask
,

36 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(32),

37 .
	g∂©f‹m_d©a
 = &
©h79_nfc_d©a
,

41 
__öô
 
	$©h79_nfc_öô_ªsour˚
(
ªsour˚
 
ªs
[2],

42 
ba£
,

43 
size
,

44 
úq
)

46 
	`mem£t
(
ªs
, 0, (
ªsour˚
) * 2);

48 
ªs
[0].
Êags
 = 
IORESOURCE_MEM
;

49 
ªs
[0].
°¨t
 = 
ba£
;

50 
ªs
[0].
íd
 = 
ba£
 + 
size
 - 1;

52 
ªs
[1].
Êags
 = 
IORESOURCE_IRQ
;

53 
ªs
[1].
°¨t
 = 
úq
;

54 
ªs
[1].
íd
 = 
úq
;

55 
	}
}

57 
	$¨934x_nfc_hw_ª£t
(
boﬁ
 
a˘ive
)

59 i‡(
a˘ive
) {

60 
	`©h79_devi˚_ª£t_£t
(
AR934X_RESET_NANDF
);

61 
	`udñay
(100);

63 
	`©h79_devi˚_ª£t_£t
(
AR934X_RESET_ETH_SWITCH_ANALOG
);

64 
	`udñay
(250);

66 
	`©h79_devi˚_ª£t_˛ór
(
AR934X_RESET_ETH_SWITCH_ANALOG
);

67 
	`udñay
(250);

69 
	`©h79_devi˚_ª£t_˛ór
(
AR934X_RESET_NANDF
);

70 
	`udñay
(100);

72 
	}
}

74 
	$¨934x_nfc_£tup
()

76 
©h79_nfc_d©a
.
hw_ª£t
 = 
¨934x_nfc_hw_ª£t
;

78 
	`©h79_nfc_öô_ªsour˚
(
©h79_nfc_ªsour˚s
,

79 
AR934X_NFC_BASE
, 
AR934X_NFC_SIZE
,

80 
	`ATH79_MISC_IRQ
(21));

82 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_nfc_devi˚
);

83 
	}
}

85 
	$qˇ955x_nfc_hw_ª£t
(
boﬁ
 
a˘ive
)

87 i‡(
a˘ive
) {

88 
	`©h79_devi˚_ª£t_£t
(
QCA955X_RESET_NANDF
);

89 
	`udñay
(250);

91 
	`©h79_devi˚_ª£t_˛ór
(
QCA955X_RESET_NANDF
);

92 
	`udñay
(100);

94 
	}
}

96 
	$qˇ955x_nfc_£tup
()

98 
©h79_nfc_d©a
.
hw_ª£t
 = 
qˇ955x_nfc_hw_ª£t
;

100 
	`©h79_nfc_öô_ªsour˚
(
©h79_nfc_ªsour˚s
,

101 
QCA955X_NFC_BASE
, 
QCA955X_NFC_SIZE
,

102 
	`ATH79_MISC_IRQ
(21));

104 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_nfc_devi˚
);

105 
	}
}

107 
__öô
 
	$©h79_nfc_£t_£À˘_chù
((*
f
)(
chù_no
))

109 
©h79_nfc_d©a
.
£À˘_chù
 = 
f
;

110 
	}
}

112 
__öô
 
	$©h79_nfc_£t_sˇn_fixup
((*
f
)(
mtd_öfo
 *
mtd
))

114 
©h79_nfc_d©a
.
sˇn_fixup
 = 
f
;

115 
	}
}

117 
__öô
 
	$©h79_nfc_£t_sw≠_dma
(
boﬁ
 
íabÀ
)

119 
©h79_nfc_d©a
.
sw≠_dma
 = 
íabÀ
;

120 
	}
}

122 
__öô
 
	$©h79_nfc_£t_ecc_mode
(
¨934x_nfc_ecc_mode
 
mode
)

124 
©h79_nfc_d©a
.
ecc_mode
 = 
mode
;

125 
	}
}

127 
__öô
 
	$©h79_nfc_£t_∑πs
(
mtd_∑πôi⁄
 *
∑πs
, 
ƒ_∑πs
)

129 
©h79_nfc_d©a
.
∑πs
 =Öarts;

130 
©h79_nfc_d©a
.
ƒ_∑πs
 =Çr_parts;

131 
	}
}

133 
__öô
 
	$©h79_ªgi°î_nfc
()

135 i‡(
	`soc_is_¨934x
())

136 
	`¨934x_nfc_£tup
();

137 i‡(
	`soc_is_qˇ955x
())

138 
	`qˇ955x_nfc_£tup
();

140 
	`BUG
();

141 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/dev-nfc.h

11 #i‚de‡
_ATH79_DEV_NFC_H


12 
	#_ATH79_DEV_NFC_H


	)

14 
	gmtd_∑πôi⁄
;

15 
	g¨934x_nfc_ecc_mode
;

17 #ifde‡
CONFIG_ATH79_DEV_NFC


18 
©h79_nfc_£t_∑πs
(
mtd_∑πôi⁄
 *
∑πs
, 
ƒ_∑πs
);

19 
©h79_nfc_£t_£À˘_chù
((*
f
)(
chù_no
));

20 
	`©h79_nfc_£t_sˇn_fixup
((*
f
)(
mtd_öfo
 *
mtd
));

21 
	`©h79_nfc_£t_sw≠_dma
(
boﬁ
 
íabÀ
);

22 
	`©h79_nfc_£t_ecc_mode
(
¨934x_nfc_ecc_mode
 
mode
);

23 
	`©h79_ªgi°î_nfc
();

25 
ölöe
 
	$©h79_nfc_£t_∑πs
(
mtd_∑πôi⁄
 *
∑πs
,

26 
ƒ_∑πs
Ë{
	}
}

27 
ölöe
 
	$©h79_nfc_£t_£À˘_chù
((*
f
)(
chù_no
)Ë{
	}
}

28 
ölöe
 
	$©h79_nfc_£t_sˇn_fixup
((*
f
)(
mtd_öfo
 *
mtd
)Ë{
	}
}

29 
ölöe
 
	$©h79_nfc_£t_sw≠_dma
(
boﬁ
 
íabÀ
Ë{
	}
}

30 
ölöe
 
	$©h79_nfc_£t_ecc_mode
(
¨934x_nfc_ecc_mode
 
mode
Ë{
	}
}

31 
ölöe
 
	$©h79_ªgi°î_nfc
(Ë{
	}
}

	@linux/ar71xx/files/arch/mips/ath79/mach-a60.c

12 
	~<löux/gpio.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~<asm/mach-©h79/©h79.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

29 
	~"pci.h
"

30 
	~"dev-usb.h
"

32 
	#A60_GPIO_LED_RED
 22

	)

33 
	#A60_GPIO_LED_GREEN
 23

	)

34 
	#A60_GPIO_LED_BLUE
 13

	)

36 
	#A60_GPIO_BTN_RESET
 17

	)

38 
	#A60_KEYS_POLL_INTERVAL
 20

	)

39 
	#A60_KEYS_DEBOUNCE_INTERVAL
 (3 * 
A60_KEYS_POLL_INTERVAL
)

	)

41 
	#A60_WMAC_CALDATA_OFFSET
 0x1000

	)

43 
gpio_Àd
 
	ga40_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "a40:red:status",

46 .
	ggpio
 = 
A60_GPIO_LED_RED
,

48 .
	g«me
 = "a40:green:status",

49 .
	ggpio
 = 
A60_GPIO_LED_GREEN
,

51 .
	g«me
 = "a40:blue:status",

52 .
	ggpio
 = 
A60_GPIO_LED_BLUE
,

56 
gpio_Àd
 
	ga60_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "a60:red:status",

59 .
	ggpio
 = 
A60_GPIO_LED_RED
,

61 .
	g«me
 = "a60:green:status",

62 .
	ggpio
 = 
A60_GPIO_LED_GREEN
,

64 .
	g«me
 = "a60:blue:status",

65 .
	ggpio
 = 
A60_GPIO_LED_BLUE
,

69 
gpio_keys_buâ⁄
 
	ga60_gpio_keys
[] 
	g__öôd©a
 = {

71 .
desc
 = "Reset button",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_RESTART
,

74 .
	gdeboun˚_öãrvÆ
 = 
A60_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
A60_GPIO_BTN_RESET
,

76 .
	ga˘ive_low
 = 1,

80 
©803x_∂©f‹m_d©a
 
	ga60_©803x_d©a
 = {

81 .
dißbÀ_sm¨ãì
 = 1,

82 .
	gíabÀ_rgmii_rx_dñay
 = 1,

83 .
	gíabÀ_rgmii_tx_dñay
 = 1,

86 
mdio_bﬂrd_öfo
 
	ga60_mdio0_öfo
[] = {

88 .
bus_id
 = "ag71xx-mdio.0",

89 .
	gmdio_addr
 = 1,

90 .
	g∂©f‹m_d©a
 = &
a60_©803x_d©a
,

93 .
	gbus_id
 = "ag71xx-mdio.0",

94 .
	gmdio_addr
 = 2,

95 .
	g∂©f‹m_d©a
 = &
a60_©803x_d©a
,

99 
__öô
 
	$a60_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

100 
rxd
,

101 
rxdv
,

102 
txd
,

103 
txe
)

105 
__iomem
 *
ba£
;

106 
u32
 
t
;

108 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

110 
t
 = 
mask
;

111 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

112 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

113 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

114 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

116 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

118 
	`iounm≠
(
ba£
);

119 
	}
}

121 
__öô
 
	$a60_£tup_comm⁄
()

123 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

124 
u8
 
mac
[6];

126 
	`©h79_ªgi°î_usb
();

128 
	`©h79_ªgi°î_m25p80
(
NULL
);

129 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
A60_KEYS_POLL_INTERVAL
,

130 
	`ARRAY_SIZE
(
a60_gpio_keys
),

131 
a60_gpio_keys
);

133 
	`©h79_öô_mac
(
mac
, 
¨t
, 0x02);

134 
	`©h79_ªgi°î_wmac
(
¨t
 + 
A60_WMAC_CALDATA_OFFSET
, 
mac
);

136 
	`a60_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 3, 3, 0, 0);

137 
	`©h79_ªgi°î_mdio
(0, 0x0);

139 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
a60_mdio0_öfo
, 
	`ARRAY_SIZE
(a60_mdio0_info));

141 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0x00);

142 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 0x01);

145 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

146 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

147 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(1);

148 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x82000101;

149 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x80000101;

150 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

151 
	`©h79_ªgi°î_ëh
(0);

154 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

155 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

156 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(2);

157 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

158 
©h79_ëh1_∂l_d©a
.
∂l_100
 = 0x80000101;

159 
©h79_ëh1_∂l_d©a
.
∂l_10
 = 0x80001313;

160 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

161 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

162 
	`©h79_ªgi°î_ëh
(1);

164 
	`©h79_ªgi°î_pci
();

165 
	}
}

167 
__öô
 
	$a40_£tup
()

169 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
a40_Àds_gpio
),á40_leds_gpio);

170 
	`a60_£tup_comm⁄
();

171 
	}
}

173 
MIPS_MACHINE
(
ATH79_MACH_A40
, "A40", "O≥nMesh A40", 
a40_£tup
);

175 
__öô
 
	$a60_£tup
()

177 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
a60_Àds_gpio
),á60_leds_gpio);

178 
	`a60_£tup_comm⁄
();

179 
	}
}

181 
MIPS_MACHINE
(
ATH79_MACH_A60
, "A60", "O≥nMesh A60", 
a60_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-alfa-ap120c.c

12 
	~<löux/öô.h
>

13 
	~<löux/bô›s.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/•i/•i.h
>

17 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<löux/©h9k_∂©f‹m.h
>

20 
	~<asm/mach-©h79/©h79.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~"comm⁄.h
"

24 
	~"dev-ëh.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-Àds-gpio.h
"

27 
	~"dev-m25p80.h
"

28 
	~"dev-•i.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-wmac.h
"

31 
	~"machty≥s.h
"

33 
	#ALFA_AP120C_GPIO_LED
 0

	)

35 
	#ALFA_AP120C_GPIO_BUTTON_WIFI
 16

	)

37 
	#ALFA_AP120C_GPIO_WATCH_DOG
 20

	)

39 
	#ALFA_AP120C_KEYS_POLL_INTERVAL
 20

	)

40 
	#ALFA_AP120C_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ALFA_AP120C_KEYS_POLL_INTERVAL
)

	)

42 
	#ALFA_AP120C_MAC_OFFSET
 0x1002

	)

43 
	#ALFA_AP120C_CAL0_OFFSET
 0x1000

	)

45 
gpio_keys_buâ⁄
 
	gÆÁ_≠120c_gpio_keys
[] 
	g__öôd©a
 = {

47 .
desc
 = "Wireless button",

48 .
	gty≥
 = 
EV_KEY
,

49 .
	gcode
 = 
KEY_RFKILL
,

50 .
	gdeboun˚_öãrvÆ
 = 
ALFA_AP120C_KEYS_DEBOUNCE_INTERVAL
,

51 .
	ggpio
 = 
ALFA_AP120C_GPIO_BUTTON_WIFI
,

52 .
	ga˘ive_low
 = 1,

56 
gpio_Àd
 
	gÆÁ_≠120c_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "ap120c:red:wlan",

59 .
	ggpio
 = 
ALFA_AP120C_GPIO_LED
,

60 .
	ga˘ive_low
 = 0,

64 
¨8327_∑d_cfg
 
	g≠120c_¨8327_∑d0_cfg
 = {

65 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

66 .
	gtx˛k_dñay_í
 = 
åue
,

67 .
	grx˛k_dñay_í
 = 
åue
,

68 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

69 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

72 
¨8327_∂©f‹m_d©a
 
	g≠120c_¨8327_d©a
 = {

73 .
∑d0_cfg
 = &
≠120c_¨8327_∑d0_cfg
,

74 .
	gp‹t0_cfg
 = {

75 .
f‹˚_lök
 = 1,

76 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

77 .
	gdu∂ex
 = 1,

78 .
	gtx∑u£
 = 1,

79 .
	grx∑u£
 = 1,

83 
mdio_bﬂrd_öfo
 
	g≠120c_mdio0_öfo
[] = {

85 .
bus_id
 = "ag71xx-mdio.0",

86 .
	gmdio_addr
 = 0,

87 .
	g∂©f‹m_d©a
 = &
≠120c_¨8327_d©a
,

91 
Êash_∂©f‹m_d©a
 
Êash
 
	g__öôd©a
 = { 
NULL
, NULL, 0 };

93 
	#ALFA_AP120C_LAN_PHYMASK
 
	`BIT
(5)

	)

94 
	#ALFA_AP120C_MDIO_PHYMASK
 
ALFA_AP120C_LAN_PHYMASK


	)

96 
__öô
 
	$ÆÁ_≠120c_öô
()

98 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

99 
u8
 
mac
[
ETH_ALEN
];

101 
©h9k_∂©f‹m_d©a
 *
pd©a
;

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ÆÁ_≠120c_Àds_gpio
),

104 
ÆÁ_≠120c_Àds_gpio
);

105 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ALFA_AP120C_KEYS_POLL_INTERVAL
,

106 
	`ARRAY_SIZE
(
ÆÁ_≠120c_gpio_keys
),

107 
ÆÁ_≠120c_gpio_keys
);

109 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR71XX_GPIO_FUNC_SPI_CS1_EN
 |

110 
AR71XX_GPIO_FUNC_SPI_CS2_EN
);

112 
	`©h79_ªgi°î_m25p80_mu…i
(&
Êash
);

114 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
ALFA_AP120C_MAC_OFFSET
, 1);

115 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ALFA_AP120C_CAL0_OFFSET
, 
mac
);

117 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
ALFA_AP120C_MAC_OFFSET
, 2);

118 
	`≠91_pci_öô
(
NULL
, 
mac
);

119 
pd©a
 = 
	`≠9x_pci_gë_wmac_d©a
(0);

120 i‡(!
pd©a
) {

121 
	`¥_îr
("ap120c: unableÅo getáddress of wlan data\n");

124 
pd©a
->
u£_ì¥om
 = 
åue
;

126 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

127 
	`BIT
(15) | BIT(17) | BIT(19) | BIT(21));

129 
	`©h79_ªgi°î_mdio
(0, 0x0);

131 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
ALFA_AP120C_MAC_OFFSET
, 0);

133 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
≠120c_mdio0_öfo
, 
	`ARRAY_SIZE
(ap120c_mdio0_info));

135 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

136 
©h79_ëh0_d©a
.
phy_mask
 = 
ALFA_AP120C_LAN_PHYMASK
;

138 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x42000000;

139 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

141 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

143 
	`©h79_ªgi°î_ëh
(0);

144 
	}
}

146 
MIPS_MACHINE
(
ATH79_MACH_ALFA_AP120C
, "ALFA-AP120C", "ALFA Network AP120C",

147 
ÆÁ_≠120c_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-alfa-ap96.c

11 
	~<löux/öô.h
>

12 
	~<löux/bô›s.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/mmc/ho°.h
>

16 
	~<löux/•i/•i.h
>

17 
	~<löux/•i/mmc_•i.h
>

19 
	~<asm/mach-©h79/©h79.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~"comm⁄.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-•i.h
"

26 
	~"dev-usb.h
"

27 
	~"machty≥s.h
"

28 
	~"pci.h
"

30 
	#ALFA_AP96_GPIO_PCIE_RESET
 2

	)

31 
	#ALFA_AP96_GPIO_SIM_DETECT
 3

	)

32 
	#ALFA_AP96_GPIO_MICROSD_CD
 4

	)

33 
	#ALFA_AP96_GPIO_PCIE_W_DISABLE
 5

	)

35 
	#ALFA_AP96_GPIO_BUTTON_RESET
 11

	)

37 
	#ALFA_AP96_KEYS_POLL_INTERVAL
 20

	)

38 
	#ALFA_AP96_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ALFA_AP96_KEYS_POLL_INTERVAL
)

	)

40 
gpio_keys_buâ⁄
 
	gÆÁ_≠96_gpio_keys
[] 
	g__öôd©a
 = {

42 .
desc
 = "Reset button",

43 .
	gty≥
 = 
EV_KEY
,

44 .
	gcode
 = 
KEY_RESTART
,

45 .
	gdeboun˚_öãrvÆ
 = 
ALFA_AP96_KEYS_DEBOUNCE_INTERVAL
,

46 .
	ggpio
 = 
ALFA_AP96_GPIO_BUTTON_RESET
,

47 .
	ga˘ive_low
 = 1,

51 
mmc_•i_∂©f‹m_d©a
 
	gÆÁ_≠96_mmc_d©a
 = {

52 .
Êags
 = 
MMC_SPI_USE_CD_GPIO
,

53 .
	gcd_gpio
 = 
ALFA_AP96_GPIO_MICROSD_CD
,

54 .
	gcd_deboun˚
 = 1,

55 .
	gˇps
 = 
MMC_CAP_NEEDS_POLL
,

56 .
	go¸_mask
 = 
MMC_VDD_32_33
 | 
MMC_VDD_33_34
,

59 
•i_bﬂrd_öfo
 
	gÆÁ_≠96_•i_öfo
[] = {

61 .
bus_num
 = 0,

62 .
	gchù_£À˘
 = 0,

63 .
	gmax_•ìd_hz
 = 25000000,

64 .
	gmodÆüs
 = "m25p80",

66 .
	gbus_num
 = 0,

67 .
	gchù_£À˘
 = 1,

68 .
	gmax_•ìd_hz
 = 25000000,

69 .
	gmodÆüs
 = "mmc_spi",

70 .
	g∂©f‹m_d©a
 = &
ÆÁ_≠96_mmc_d©a
,

72 .
	gbus_num
 = 0,

73 .
	gchù_£À˘
 = 2,

74 .
	gmax_•ìd_hz
 = 6250000,

75 .
	gmodÆüs
 = "rtc-pcf2123",

79 
©h79_•i_∂©f‹m_d©a
 
	gÆÁ_≠96_•i_d©a
 = {

80 .
bus_num
 = 0,

81 .
	gnum_chù£À˘
 = 3,

84 
__öô
 
	$ÆÁ_≠96_gpio_£tup
()

86 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR71XX_GPIO_FUNC_SPI_CS1_EN
 |

87 
AR71XX_GPIO_FUNC_SPI_CS2_EN
);

89 
	`gpio_ªque°
(
ALFA_AP96_GPIO_MICROSD_CD
, "microSD CD");

90 
	`gpio_dúe˘i⁄_öput
(
ALFA_AP96_GPIO_MICROSD_CD
);

91 
	`gpio_ªque°
(
ALFA_AP96_GPIO_PCIE_RESET
, "PCIeÑeset");

92 
	`gpio_dúe˘i⁄_ouçut
(
ALFA_AP96_GPIO_PCIE_RESET
, 1);

93 
	`gpio_ªque°
(
ALFA_AP96_GPIO_PCIE_W_DISABLE
, "PCIe write disable");

94 
	`gpio_dúe˘i⁄_ouçut
(
ALFA_AP96_GPIO_PCIE_W_DISABLE
, 1);

95 
	}
}

97 
	#ALFA_AP96_WAN_PHYMASK
 
	`BIT
(4)

	)

98 
	#ALFA_AP96_LAN_PHYMASK
 
	`BIT
(5)

	)

99 
	#ALFA_AP96_MDIO_PHYMASK
 (
ALFA_AP96_LAN_PHYMASK
 | 
ALFA_AP96_WAN_PHYMASK
)

	)

101 
__öô
 
	$ÆÁ_≠96_öô
()

103 
	`ÆÁ_≠96_gpio_£tup
();

105 
	`©h79_ªgi°î_mdio
(0, ~
ALFA_AP96_MDIO_PHYMASK
);

107 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

108 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

109 
©h79_ëh0_d©a
.
phy_mask
 = 
ALFA_AP96_WAN_PHYMASK
;

110 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x110000;

112 
	`©h79_ªgi°î_ëh
(0);

114 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

115 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

116 
©h79_ëh1_d©a
.
phy_mask
 = 
ALFA_AP96_LAN_PHYMASK
;

117 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x110000;

119 
	`©h79_ªgi°î_ëh
(1);

121 
	`©h79_ªgi°î_pci
();

122 
	`©h79_ªgi°î_•i
(&
ÆÁ_≠96_•i_d©a
, 
ÆÁ_≠96_•i_öfo
,

123 
	`ARRAY_SIZE
(
ÆÁ_≠96_•i_öfo
));

125 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ALFA_AP96_KEYS_POLL_INTERVAL
,

126 
	`ARRAY_SIZE
(
ÆÁ_≠96_gpio_keys
),

127 
ÆÁ_≠96_gpio_keys
);

128 
	`©h79_ªgi°î_usb
();

129 
	}
}

131 
MIPS_MACHINE
(
ATH79_MACH_ALFA_AP96
, "ALFA-AP96", "ALFA Network AP96",

132 
ÆÁ_≠96_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-alfa-nx.c

11 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"comm⁄.h
"

15 
	~"dev-ëh.h
"

16 
	~"dev-≠9x-pci.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"machty≥s.h
"

22 
	#ALFA_NX_GPIO_LED_2
 17

	)

23 
	#ALFA_NX_GPIO_LED_3
 16

	)

24 
	#ALFA_NX_GPIO_LED_5
 12

	)

25 
	#ALFA_NX_GPIO_LED_6
 8

	)

26 
	#ALFA_NX_GPIO_LED_7
 6

	)

27 
	#ALFA_NX_GPIO_LED_8
 7

	)

29 
	#ALFA_NX_GPIO_BTN_RESET
 11

	)

31 
	#ALFA_NX_KEYS_POLL_INTERVAL
 20

	)

32 
	#ALFA_NX_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ALFA_NX_KEYS_POLL_INTERVAL
)

	)

34 
	#ALFA_NX_MAC0_OFFSET
 0

	)

35 
	#ALFA_NX_MAC1_OFFSET
 6

	)

36 
	#ALFA_NX_CALDATA_OFFSET
 0x1000

	)

38 
gpio_keys_buâ⁄
 
	gÆÁ_nx_gpio_keys
[] 
	g__öôd©a
 = {

40 .
desc
 = "Reset button",

41 .
	gty≥
 = 
EV_KEY
,

42 .
	gcode
 = 
KEY_RESTART
,

43 .
	gdeboun˚_öãrvÆ
 = 
ALFA_NX_KEYS_DEBOUNCE_INTERVAL
,

44 .
	ggpio
 = 
ALFA_NX_GPIO_BTN_RESET
,

45 .
	ga˘ive_low
 = 1,

49 
gpio_Àd
 
	gÆÁ_nx_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "alfa:green:led_2",

52 .
	ggpio
 = 
ALFA_NX_GPIO_LED_2
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "alfa:green:led_3",

56 .
	ggpio
 = 
ALFA_NX_GPIO_LED_3
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "alfa:red:led_5",

60 .
	ggpio
 = 
ALFA_NX_GPIO_LED_5
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "alfa:amber:led_6",

64 .
	ggpio
 = 
ALFA_NX_GPIO_LED_6
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "alfa:green:led_7",

68 .
	ggpio
 = 
ALFA_NX_GPIO_LED_7
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "alfa:green:led_8",

72 .
	ggpio
 = 
ALFA_NX_GPIO_LED_8
,

73 .
	ga˘ive_low
 = 1,

77 
__öô
 
	$ÆÁ_nx_£tup
()

79 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

81 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
,

82 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

83 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

84 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

85 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

86 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

88 
	`©h79_ªgi°î_m25p80
(
NULL
);

90 
	`©h79_ªgi°î_Àds_gpio
(0, 
	`ARRAY_SIZE
(
ÆÁ_nx_Àds_gpio
),

91 
ÆÁ_nx_Àds_gpio
);

93 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ALFA_NX_KEYS_POLL_INTERVAL
,

94 
	`ARRAY_SIZE
(
ÆÁ_nx_gpio_keys
),

95 
ÆÁ_nx_gpio_keys
);

97 
	`©h79_ªgi°î_mdio
(0, 0x0);

99 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

100 
¨t
 + 
ALFA_NX_MAC0_OFFSET
, 0);

101 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

102 
¨t
 + 
ALFA_NX_MAC1_OFFSET
, 0);

105 
	`©h79_ªgi°î_ëh
(0);

107 
	`©h79_ªgi°î_ëh
(1);

109 
	`≠91_pci_öô
(
¨t
 + 
ALFA_NX_CALDATA_OFFSET
, 
NULL
);

110 
	}
}

112 
MIPS_MACHINE
(
ATH79_MACH_ALFA_NX
, "ALFA-NX", "ALFA Network N2/N5",

113 
ÆÁ_nx_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-all0258n.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-≠9x-pci.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"machty≥s.h
"

21 
	#ALL0258N_GPIO_BTN_RESET
 1

	)

22 
	#ALL0258N_GPIO_LED_RSSIHIGH
 13

	)

23 
	#ALL0258N_GPIO_LED_RSSIMEDIUM
 15

	)

24 
	#ALL0258N_GPIO_LED_RSSILOW
 14

	)

27 
	#ALL0258N_KEYS_POLL_INTERVAL
 20

	)

28 
	#ALL0258N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ALL0258N_KEYS_POLL_INTERVAL
)

	)

31 
	#ALL0258N_SEC_PHYMASK
 
	`BIT
(3)

	)

33 
gpio_Àd
 
	gÆl0258n_Àds_gpio
[] 
	g__öôd©a
 = {

35 .
«me
 = "all0258n:green:rssihigh",

36 .
	ggpio
 = 
ALL0258N_GPIO_LED_RSSIHIGH
,

37 .
	ga˘ive_low
 = 1,

39 .
	g«me
 = "all0258n:yellow:rssimedium",

40 .
	ggpio
 = 
ALL0258N_GPIO_LED_RSSIMEDIUM
,

41 .
	ga˘ive_low
 = 1,

43 .
	g«me
 = "all0258n:red:rssilow",

44 .
	ggpio
 = 
ALL0258N_GPIO_LED_RSSILOW
,

45 .
	ga˘ive_low
 = 1,

49 
gpio_keys_buâ⁄
 
	gÆl0258n_gpio_keys
[] 
	g__öôd©a
 = {

51 .
desc
 = "reset",

52 .
	gty≥
 = 
EV_KEY
,

53 .
	gcode
 = 
KEY_RESTART
,

54 .
	gdeboun˚_öãrvÆ
 = 
ALL0258N_KEYS_DEBOUNCE_INTERVAL
,

55 .
	ggpio
 = 
ALL0258N_GPIO_BTN_RESET
,

56 .
	ga˘ive_low
 = 1,

60 
__öô
 
	$Æl0258n_£tup
()

62 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f0000);

63 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f1000);

65 
	`©h79_ªgi°î_m25p80
(
NULL
);

67 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
Æl0258n_Àds_gpio
),

68 
Æl0258n_Àds_gpio
);

70 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ALL0258N_KEYS_POLL_INTERVAL
,

71 
	`ARRAY_SIZE
(
Æl0258n_gpio_keys
),

72 
Æl0258n_gpio_keys
);

74 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

75 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

77 
©h79_ëh1_d©a
.
phy_mask
 = 
ALL0258N_SEC_PHYMASK
;

79 
	`©h79_ªgi°î_mdio
(0, 0x0);

81 
	`©h79_ªgi°î_ëh
(0);

82 
	`©h79_ªgi°î_ëh
(1);

84 
	`≠91_pci_öô
(
ì
, 
mac
);

85 
	}
}

87 
MIPS_MACHINE
(
ATH79_MACH_ALL0258N
, "ALL0258N", "Allnet ALL0258N",

88 
Æl0258n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-all0315n.c

12 
	~<asm/mach-©h79/©h79.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"machty≥s.h
"

22 
	~"pci.h
"

24 
	#ALL0315N_GPIO_BTN_RESET
 0

	)

25 
	#ALL0315N_GPIO_LED_RSSIHIGH
 14

	)

26 
	#ALL0315N_GPIO_LED_RSSIMEDIUM
 15

	)

27 
	#ALL0315N_GPIO_LED_RSSILOW
 16

	)

29 
	#ALL0315N_KEYS_POLL_INTERVAL
 20

	)

30 
	#ALL0315N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ALL0315N_KEYS_POLL_INTERVAL
)

	)

32 
gpio_Àd
 
	gÆl0315n_Àds_gpio
[] 
	g__öôd©a
 = {

34 .
«me
 = "all0315n:green:rssihigh",

35 .
	ggpio
 = 
ALL0315N_GPIO_LED_RSSIHIGH
,

36 .
	ga˘ive_low
 = 1,

38 .
	g«me
 = "all0315n:yellow:rssimedium",

39 .
	ggpio
 = 
ALL0315N_GPIO_LED_RSSIMEDIUM
,

40 .
	ga˘ive_low
 = 1,

42 .
	g«me
 = "all0315n:red:rssilow",

43 .
	ggpio
 = 
ALL0315N_GPIO_LED_RSSILOW
,

44 .
	ga˘ive_low
 = 1,

48 
gpio_keys_buâ⁄
 
	gÆl0315n_gpio_keys
[] 
	g__öôd©a
 = {

50 .
desc
 = "reset",

51 .
	gty≥
 = 
EV_KEY
,

52 .
	gcode
 = 
KEY_RESTART
,

53 .
	gdeboun˚_öãrvÆ
 = 
ALL0315N_KEYS_DEBOUNCE_INTERVAL
,

54 .
	ggpio
 = 
ALL0315N_GPIO_BTN_RESET
,

55 .
	ga˘ive_low
 = 1,

59 
__öô
 
	$Æl0315n_£tup
()

61 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffc0000);

62 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffc1000);

64 
	`©h79_ªgi°î_m25p80
(
NULL
);

66 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

67 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

68 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

70 
	`©h79_ªgi°î_mdio
(0, 0x0);

71 
	`©h79_ªgi°î_ëh
(0);

73 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
Æl0315n_Àds_gpio
),

74 
Æl0315n_Àds_gpio
);

76 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ALL0315N_KEYS_POLL_INTERVAL
,

77 
	`ARRAY_SIZE
(
Æl0315n_gpio_keys
),

78 
Æl0315n_gpio_keys
);

80 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 1);

81 
	`≠91_pci_öô
(
ì
, 
NULL
);

82 
	}
}

84 
MIPS_MACHINE
(
ATH79_MACH_ALL0315N
, "ALL0315N", "Allnet ALL0315N",

85 
Æl0315n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-antminer-s1.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

23 
	~"dev-usb.h
"

25 
	#ANTMINER_S1_GPIO_BTN_RESET
 11

	)

27 
	#ANTMINER_S1_GPIO_LED_SYSTEM
 23

	)

28 
	#ANTMINER_S1_GPIO_LED_WLAN
 0

	)

29 
	#ANTMINER_S1_GPIO_USB_POWER
 26

	)

31 
	#ANTMINER_S1_KEYSPOLL_INTERVAL
 20

	)

32 
	#ANTMINER_S1_KEYSDEBOUNCE_INTERVAL
 (3 * 
ANTMINER_S1_KEYSPOLL_INTERVAL
)

	)

34 c⁄° *
	gANTMINER_S1_∑π_¥obes
[] = {

36 
NULL
,

39 
Êash_∂©f‹m_d©a
 
	gANTMINER_S1_Êash_d©a
 = {

40 .
∑π_¥obes
 = 
ANTMINER_S1_∑π_¥obes
,

43 
gpio_Àd
 
	gANTMINER_S1_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "antminer-s1:green:system",

46 .
	ggpio
 = 
ANTMINER_S1_GPIO_LED_SYSTEM
,

47 .
	ga˘ive_low
 = 0,

49 .
	g«me
 = "antminer-s1:green:wlan",

50 .
	ggpio
 = 
ANTMINER_S1_GPIO_LED_WLAN
,

51 .
	ga˘ive_low
 = 0,

55 
gpio_keys_buâ⁄
 
	gANTMINER_S1_GPIO_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
ANTMINER_S1_KEYSDEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
ANTMINER_S1_GPIO_BTN_RESET
,

62 .
	ga˘ive_low
 = 0,

66 
__öô
 
	$™tmöî_s1_£tup
()

68 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

69 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

72 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

74 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ANTMINER_S1_Àds_gpio
),

75 
ANTMINER_S1_Àds_gpio
);

77 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ANTMINER_S1_KEYSPOLL_INTERVAL
,

78 
	`ARRAY_SIZE
(
ANTMINER_S1_GPIO_keys
),

79 
ANTMINER_S1_GPIO_keys
);

81 
	`gpio_ªque°_⁄e
(
ANTMINER_S1_GPIO_USB_POWER
,

82 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

84 
	`©h79_ªgi°î_usb
();

86 
	`©h79_ªgi°î_m25p80
(&
ANTMINER_S1_Êash_d©a
);

87 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

88 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

90 
	`©h79_ªgi°î_mdio
(0, 0x0);

91 
	`©h79_ªgi°î_ëh
(0);

92 
	`©h79_ªgi°î_ëh
(1);

94 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

95 
	}
}

97 
MIPS_MACHINE
(
ATH79_MACH_ANTMINER_S1
, "ANTMINER-S1",

98 "A¡möî-S1", 
™tmöî_s1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-antminer-s3.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

23 
	~"dev-usb.h
"

25 
	#ANTMINER_S3_GPIO_LED_WLAN
 0

	)

26 
	#ANTMINER_S3_GPIO_LED_SYSTEM
 17

	)

27 
	#ANTMINER_S3_GPIO_LED_LAN
 22

	)

28 
	#ANTMINER_S3_GPIO_USB_POWER
 26

	)

30 
	#ANTMINER_S3_GPIO_BTN_RESET
 11

	)

32 
	#ANTMINER_S3_KEYSPOLL_INTERVAL
 88

	)

33 
	#ANTMINER_S3_KEYSDEBOUNCE_INTERVAL
 (3 * 
ANTMINER_S3_KEYSPOLL_INTERVAL
)

	)

35 c⁄° *
	gANTMINER_S3_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gANTMINER_S3_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
ANTMINER_S3_∑π_¥obes
,

44 
gpio_Àd
 
	gANTMINER_S3_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "antminer-s3:green:wlan",

47 .
	ggpio
 = 
ANTMINER_S3_GPIO_LED_WLAN
,

48 .
	ga˘ive_low
 = 0,

50 .
	g«me
 = "antminer-s3:green:system",

51 .
	ggpio
 = 
ANTMINER_S3_GPIO_LED_SYSTEM
,

52 .
	ga˘ive_low
 = 0,

54 .
	g«me
 = "antminer-s3:yellow:lan",

55 .
	ggpio
 = 
ANTMINER_S3_GPIO_LED_LAN
,

56 .
	ga˘ive_low
 = 0,

60 
gpio_keys_buâ⁄
 
	gANTMINER_S3_GPIO_keys
[] 
	g__öôd©a
 = {

62 .
desc
 = "reset",

63 .
	gty≥
 = 
EV_KEY
,

64 .
	gcode
 = 
KEY_RESTART
,

65 .
	gdeboun˚_öãrvÆ
 = 
ANTMINER_S3_KEYSDEBOUNCE_INTERVAL
,

66 .
	ggpio
 = 
ANTMINER_S3_GPIO_BTN_RESET
,

67 .
	ga˘ive_low
 = 0,

71 
__öô
 
	$™tmöî_s3_£tup
()

73 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

74 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

77 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

79 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ANTMINER_S3_Àds_gpio
),

80 
ANTMINER_S3_Àds_gpio
);

82 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ANTMINER_S3_KEYSPOLL_INTERVAL
,

83 
	`ARRAY_SIZE
(
ANTMINER_S3_GPIO_keys
),

84 
ANTMINER_S3_GPIO_keys
);

86 
	`gpio_ªque°_⁄e
(
ANTMINER_S3_GPIO_USB_POWER
,

87 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

89 
	`©h79_ªgi°î_usb
();

91 
	`©h79_ªgi°î_m25p80
(&
ANTMINER_S3_Êash_d©a
);

92 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

93 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

95 
	`©h79_ªgi°î_mdio
(0, 0x0);

96 
	`©h79_ªgi°î_ëh
(0);

97 
	`©h79_ªgi°î_ëh
(1);

99 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

100 
	}
}

102 
MIPS_MACHINE
(
ATH79_MACH_ANTMINER_S3
, "ANTMINER-S3",

103 "A¡möî-S3", 
™tmöî_s3_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-antrouter-r1.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

23 
	~"dev-usb.h
"

25 
	#ANTROUTER_R1_GPIO_BTN_RESET
 11

	)

27 
	#ANTROUTER_R1_GPIO_LED_WLAN
 0

	)

28 
	#ANTROUTER_R1_GPIO_LED_BTC
 22

	)

29 
	#ANTROUTER_R1_GPIO_USB_POWER
 18

	)

31 
	#ANTROUTER_R1_KEYSPOLL_INTERVAL
 44

	)

32 
	#ANTROUTER_R1_KEYSDEBOUNCE_INTERVAL
 (4 * 
ANTROUTER_R1_KEYSPOLL_INTERVAL
)

	)

34 c⁄° *
	gANTROUTER_R1_∑π_¥obes
[] = {

36 
NULL
,

39 
Êash_∂©f‹m_d©a
 
	gANTROUTER_R1_Êash_d©a
 = {

40 .
∑π_¥obes
 = 
ANTROUTER_R1_∑π_¥obes
,

43 
gpio_Àd
 
	gANTROUTER_R1_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "antrouter-r1:green:wlan",

46 .
	ggpio
 = 
ANTROUTER_R1_GPIO_LED_WLAN
,

47 .
	ga˘ive_low
 = 0,

49 .
	g«me
 = "antrouter-r1:green:system",

50 .
	ggpio
 = 
ANTROUTER_R1_GPIO_LED_BTC
,

51 .
	ga˘ive_low
 = 0,

55 
gpio_keys_buâ⁄
 
	gANTROUTER_R1_GPIO_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
ANTROUTER_R1_KEYSDEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
ANTROUTER_R1_GPIO_BTN_RESET
,

62 .
	ga˘ive_low
 = 0,

66 
__öô
 
	$™åouãr_r1_£tup
()

68 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

69 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

72 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

74 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ANTROUTER_R1_Àds_gpio
),

75 
ANTROUTER_R1_Àds_gpio
);

77 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ANTROUTER_R1_KEYSPOLL_INTERVAL
,

78 
	`ARRAY_SIZE
(
ANTROUTER_R1_GPIO_keys
),

79 
ANTROUTER_R1_GPIO_keys
);

81 
	`gpio_ªque°_⁄e
(
ANTROUTER_R1_GPIO_USB_POWER
,

82 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

84 
	`©h79_ªgi°î_usb
();

86 
	`©h79_ªgi°î_m25p80
(&
ANTROUTER_R1_Êash_d©a
);

87 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

88 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

90 
	`©h79_ªgi°î_mdio
(0, 0x0);

91 
	`©h79_ªgi°î_ëh
(0);

92 
	`©h79_ªgi°î_ëh
(1);

94 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

95 
	}
}

97 
MIPS_MACHINE
(
ATH79_MACH_ANTROUTER_R1
, "ANTROUTER-R1",

98 "A¡rouãr-R1", 
™åouãr_r1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap121f.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#AP121F_GPIO_LED_LAN
 17

	)

27 
	#AP121F_GPIO_LED_VPN
 27

	)

28 
	#AP121F_GPIO_LED_WLAN
 0

	)

30 
	#AP121F_GPIO_MICROSD_EN
 26

	)

32 
	#AP121F_GPIO_BTN_RESET
 12

	)

33 
	#AP121F_GPIO_BTN_SWITCH
 21

	)

35 
	#AP121F_KEYS_POLL_INTERVAL
 20

	)

36 
	#AP121F_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP121F_KEYS_POLL_INTERVAL
)

	)

38 
	#AP121F_WMAC_CALDATA_OFFSET
 0x1000

	)

40 
gpio_Àd
 
	g≠121f_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "ap121f:green:lan",

43 .
	ggpio
 = 
AP121F_GPIO_LED_LAN
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "ap121f:green:vpn",

47 .
	ggpio
 = 
AP121F_GPIO_LED_VPN
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "ap121f:green:wlan",

51 .
	ggpio
 = 
AP121F_GPIO_LED_WLAN
,

52 .
	ga˘ive_low
 = 0,

56 
gpio_keys_buâ⁄
 
	g≠121f_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "reset",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
AP121F_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
AP121F_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

65 .
	gdesc
 = "switch",

66 .
	gty≥
 = 
EV_KEY
,

67 .
	gcode
 = 
BTN_0
,

68 .
	gdeboun˚_öãrvÆ
 = 
AP121F_KEYS_DEBOUNCE_INTERVAL
,

69 .
	ggpio
 = 
AP121F_GPIO_BTN_SWITCH
,

70 .
	ga˘ive_low
 = 0,

74 
__öô
 
	$≠121f_£tup
()

76 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f040000);

78 
	`©h79_ªgi°î_m25p80
(
NULL
);

80 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

83 
	`©h79_ªgi°î_mdio
(0, 0x0);

84 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

85 
	`©h79_ªgi°î_ëh
(0);

87 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠121f_Àds_gpio
),

88 
≠121f_Àds_gpio
);

90 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP121F_KEYS_POLL_INTERVAL
,

91 
	`ARRAY_SIZE
(
≠121f_gpio_keys
),

92 
≠121f_gpio_keys
);

94 
	`gpio_ªque°_⁄e
(
AP121F_GPIO_MICROSD_EN
,

95 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

98 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP121F_WMAC_CALDATA_OFFSET
, 
NULL
);

100 
	`©h79_ªgi°î_usb
();

101 
	}
}

103 
MIPS_MACHINE
(
ATH79_MACH_AP121F
, "AP121F", "ALFA Nëw‹k AP121F", 
≠121f_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap132.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-≠9x-pci.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-m25p80.h
"

33 
	~"dev-usb.h
"

34 
	~"dev-wmac.h
"

35 
	~"machty≥s.h
"

37 
	#AP132_GPIO_LED_USB
 4

	)

38 
	#AP132_GPIO_LED_WLAN_5G
 12

	)

39 
	#AP132_GPIO_LED_WLAN_2G
 13

	)

40 
	#AP132_GPIO_LED_STATUS_RED
 14

	)

41 
	#AP132_GPIO_LED_WPS_RED
 15

	)

43 
	#AP132_GPIO_BTN_WPS
 16

	)

45 
	#AP132_KEYS_POLL_INTERVAL
 20

	)

46 
	#AP132_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP132_KEYS_POLL_INTERVAL
)

	)

48 
	#AP132_MAC0_OFFSET
 0

	)

49 
	#AP132_WMAC_CALDATA_OFFSET
 0x1000

	)

51 
gpio_Àd
 
	g≠132_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "ap132:red:status",

54 .
	ggpio
 = 
AP132_GPIO_LED_STATUS_RED
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "ap132:red:wps",

59 .
	ggpio
 = 
AP132_GPIO_LED_WPS_RED
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "ap132:red:wlan-2g",

64 .
	ggpio
 = 
AP132_GPIO_LED_WLAN_2G
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "ap132:red:usb",

69 .
	ggpio
 = 
AP132_GPIO_LED_USB
,

70 .
	ga˘ive_low
 = 1,

74 
gpio_keys_buâ⁄
 
	g≠132_gpio_keys
[] 
	g__öôd©a
 = {

76 .
desc
 = "WPS button",

77 .
	gty≥
 = 
EV_KEY
,

78 .
	gcode
 = 
KEY_WPS_BUTTON
,

79 .
	gdeboun˚_öãrvÆ
 = 
AP132_KEYS_DEBOUNCE_INTERVAL
,

80 .
	ggpio
 = 
AP132_GPIO_BTN_WPS
,

81 .
	ga˘ive_low
 = 1,

85 
¨8327_∑d_cfg
 
	g≠132_¨8327_∑d0_cfg
;

87 
¨8327_∂©f‹m_d©a
 
	g≠132_¨8327_d©a
 = {

88 .
∑d0_cfg
 = &
≠132_¨8327_∑d0_cfg
,

89 .
	gp‹t0_cfg
 = {

90 .
f‹˚_lök
 = 1,

91 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

92 .
	gdu∂ex
 = 1,

93 .
	gtx∑u£
 = 1,

94 .
	grx∑u£
 = 1,

98 
mdio_bﬂrd_öfo
 
	g≠132_mdio1_öfo
[] = {

100 .
bus_id
 = "ag71xx-mdio.1",

101 .
	gmdio_addr
 = 0,

102 .
	g∂©f‹m_d©a
 = &
≠132_¨8327_d©a
,

106 
__öô
 
	$≠132_mdio_£tup
()

108 
__iomem
 *
ba£
;

109 
u32
 
t
;

111 
	#GPIO_IN_ENABLE3_ADDRESS
 0x0050

	)

112 
	#GPIO_IN_ENABLE3_MII_GE1_MDI_MASK
 0x00ff0000

	)

113 
	#GPIO_IN_ENABLE3_MII_GE1_MDI_LSB
 16

	)

114 
	#GPIO_IN_ENABLE3_MII_GE1_MDI_SET
(
x
Ë(((xË<< 
GPIO_IN_ENABLE3_MII_GE1_MDI_LSB
Ë& 
GPIO_IN_ENABLE3_MII_GE1_MDI_MASK
)

	)

115 
	#GPIO_OUT_FUNCTION4_ADDRESS
 0x003c

	)

116 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_MASK
 0xff000000

	)

117 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_LSB
 24

	)

118 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_SET
(
x
Ë(((xË<< 
GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_LSB
Ë& 
GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_MASK
)

	)

119 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_MASK
 0x0000ff00

	)

120 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_LSB
 8

	)

121 
	#GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_SET
(
x
Ë(((xË<< 
GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_LSB
Ë& 
GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_MASK
)

	)

123 
ba£
 = 
	`i‹em≠
(
AR71XX_GPIO_BASE
, 
AR71XX_GPIO_SIZE
);

125 
t
 = 
	`__øw_ªadl
(
ba£
 + 
GPIO_IN_ENABLE3_ADDRESS
);

126 
t
 &~
GPIO_IN_ENABLE3_MII_GE1_MDI_MASK
;

127 
t
 |
	`GPIO_IN_ENABLE3_MII_GE1_MDI_SET
(19);

128 
	`__øw_wrôñ
(
t
, 
ba£
 + 
GPIO_IN_ENABLE3_ADDRESS
);

131 
	`__øw_wrôñ
(
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
) & ~(1 << 19), base + AR71XX_GPIO_REG_OE);

133 
	`__øw_wrôñ
(
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
) & ~(1 << 17), base + AR71XX_GPIO_REG_OE);

136 
t
 = 
	`__øw_ªadl
(
ba£
 + 
GPIO_OUT_FUNCTION4_ADDRESS
);

137 
t
 &~(
GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_MASK
 | 
GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_MASK
);

138 
t
 |
	`GPIO_OUT_FUNCTION4_ENABLE_GPIO_19_SET
(0x20Ë| 
	`GPIO_OUT_FUNCTION4_ENABLE_GPIO_17_SET
(0x21);

139 
	`__øw_wrôñ
(
t
, 
ba£
 + 
GPIO_OUT_FUNCTION4_ADDRESS
);

141 
	`iounm≠
(
ba£
);

143 
	}
}

145 
__öô
 
	$≠132_£tup
()

147 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

149 
	`©h79_ªgi°î_m25p80
(
NULL
);

151 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠132_Àds_gpio
),

152 
≠132_Àds_gpio
);

153 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP132_KEYS_POLL_INTERVAL
,

154 
	`ARRAY_SIZE
(
≠132_gpio_keys
),

155 
≠132_gpio_keys
);

157 
	`©h79_ªgi°î_usb
();

159 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP132_WMAC_CALDATA_OFFSET
, 
NULL
);

162 
≠132_¨8327_∑d0_cfg
.
mode
 = 
AR8327_PAD_MAC_SGMII
;

163 
≠132_¨8327_∑d0_cfg
.
sgmii_dñay_í
 = 
åue
;

165 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

167 
	`≠132_mdio_£tup
();

169 
	`©h79_ªgi°î_mdio
(1, 0x0);

171 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
AP132_MAC0_OFFSET
, 0);

173 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
≠132_mdio1_öfo
,

174 
	`ARRAY_SIZE
(
≠132_mdio1_öfo
));

177 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

178 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

179 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

180 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(0);

181 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

183 
	`©h79_ªgi°î_ëh
(1);

184 
	}
}

186 
MIPS_MACHINE
(
ATH79_MACH_AP132
, "AP132",

188 
≠132_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap143.c

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/©h9k_∂©f‹m.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-ëh.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-Àds-gpio.h
"

31 
	~"dev-m25p80.h
"

32 
	~"dev-•i.h
"

33 
	~"dev-usb.h
"

34 
	~"dev-wmac.h
"

35 
	~"machty≥s.h
"

37 
	#AP143_GPIO_LED_WLAN
 12

	)

38 
	#AP143_GPIO_LED_WPS
 13

	)

39 
	#AP143_GPIO_LED_STATUS
 13

	)

41 
	#AP143_GPIO_LED_WAN
 4

	)

42 
	#AP143_GPIO_LED_LAN1
 16

	)

43 
	#AP143_GPIO_LED_LAN2
 15

	)

44 
	#AP143_GPIO_LED_LAN3
 14

	)

45 
	#AP143_GPIO_LED_LAN4
 11

	)

47 
	#AP143_GPIO_BTN_WPS
 17

	)

49 
	#AP143_KEYS_POLL_INTERVAL
 20

	)

50 
	#AP143_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP143_KEYS_POLL_INTERVAL
)

	)

52 
	#AP143_MAC0_OFFSET
 0

	)

53 
	#AP143_MAC1_OFFSET
 6

	)

54 
	#AP143_WMAC_CALDATA_OFFSET
 0x1000

	)

56 
gpio_Àd
 
	g≠143_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "ap143:green:status",

59 .
	ggpio
 = 
AP143_GPIO_LED_STATUS
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "ap143:green:wlan",

64 .
	ggpio
 = 
AP143_GPIO_LED_WLAN
,

65 .
	ga˘ive_low
 = 1,

69 
gpio_keys_buâ⁄
 
	g≠143_gpio_keys
[] 
	g__öôd©a
 = {

71 .
desc
 = "WPS button",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_WPS_BUTTON
,

74 .
	gdeboun˚_öãrvÆ
 = 
AP143_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
AP143_GPIO_BTN_WPS
,

76 .
	ga˘ive_low
 = 1,

80 
__öô
 
	$≠143_gpio_Àd_£tup
()

82 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP143_GPIO_LED_WAN
, 
åue
);

83 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP143_GPIO_LED_LAN1
, 
åue
);

84 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP143_GPIO_LED_LAN2
, 
åue
);

85 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP143_GPIO_LED_LAN3
, 
åue
);

86 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP143_GPIO_LED_LAN4
, 
åue
);

88 
	`©h79_gpio_ouçut_£À˘
(
AP143_GPIO_LED_WAN
,

89 
QCA953X_GPIO_OUT_MUX_LED_LINK5
);

90 
	`©h79_gpio_ouçut_£À˘
(
AP143_GPIO_LED_LAN1
,

91 
QCA953X_GPIO_OUT_MUX_LED_LINK1
);

92 
	`©h79_gpio_ouçut_£À˘
(
AP143_GPIO_LED_LAN2
,

93 
QCA953X_GPIO_OUT_MUX_LED_LINK2
);

94 
	`©h79_gpio_ouçut_£À˘
(
AP143_GPIO_LED_LAN3
,

95 
QCA953X_GPIO_OUT_MUX_LED_LINK3
);

96 
	`©h79_gpio_ouçut_£À˘
(
AP143_GPIO_LED_LAN4
,

97 
QCA953X_GPIO_OUT_MUX_LED_LINK4
);

99 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠143_Àds_gpio
),

100 
≠143_Àds_gpio
);

101 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP143_KEYS_POLL_INTERVAL
,

102 
	`ARRAY_SIZE
(
≠143_gpio_keys
),

103 
≠143_gpio_keys
);

104 
	}
}

106 
__öô
 
	$≠143_£tup
()

108 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

110 
	`©h79_ªgi°î_m25p80
(
NULL
);

112 
	`≠143_gpio_Àd_£tup
();

114 
	`©h79_ªgi°î_usb
();

116 
	`©h79_wmac_£t_Àd_pö
(
AP143_GPIO_LED_WLAN
);

117 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP143_WMAC_CALDATA_OFFSET
, 
NULL
);

119 
	`©h79_ªgi°î_mdio
(0, 0x0);

120 
	`©h79_ªgi°î_mdio
(1, 0x0);

122 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
AP143_MAC0_OFFSET
, 0);

123 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
AP143_MAC1_OFFSET
, 0);

126 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

127 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

128 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

129 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

130 
	`©h79_ªgi°î_ëh
(0);

133 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

134 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

135 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

136 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

137 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

138 
	`©h79_ªgi°î_ëh
(1);

139 
	}
}

141 
MIPS_MACHINE
(
ATH79_MACH_AP143
, "AP143", "Qualcomm Atheros AP143Ñeference board",

142 
≠143_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap147.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/¨8216_∂©f‹m.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

27 
	~"pci.h
"

29 
	#AP147_GPIO_LED_WAN
 4

	)

30 
	#AP147_GPIO_LED_LAN1
 16

	)

31 
	#AP147_GPIO_LED_LAN2
 15

	)

32 
	#AP147_GPIO_LED_LAN3
 14

	)

33 
	#AP147_GPIO_LED_LAN4
 11

	)

34 
	#AP147_GPIO_LED_STATUS
 13

	)

35 
	#AP147_GPIO_LED_WLAN_2G
 12

	)

37 
	#AP147_GPIO_BTN_WPS
 17

	)

39 
	#AP147_KEYS_POLL_INTERVAL
 20

	)

40 
	#AP147_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP147_KEYS_POLL_INTERVAL
)

	)

42 
	#AP147_MAC0_OFFSET
 0x1000

	)

44 
gpio_Àd
 
	g≠147_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "ap147:green:status",

47 .
	ggpio
 = 
AP147_GPIO_LED_STATUS
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "ap147:green:wlan-2g",

51 .
	ggpio
 = 
AP147_GPIO_LED_WLAN_2G
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "ap147:green:lan1",

55 .
	ggpio
 = 
AP147_GPIO_LED_LAN1
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "ap147:green:lan2",

59 .
	ggpio
 = 
AP147_GPIO_LED_LAN2
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "ap147:green:lan3",

63 .
	ggpio
 = 
AP147_GPIO_LED_LAN3
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "ap147:green:lan4",

67 .
	ggpio
 = 
AP147_GPIO_LED_LAN4
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "ap147:green:wan",

71 .
	ggpio
 = 
AP147_GPIO_LED_WAN
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	g≠147_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "wps button",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_WPS_BUTTON
,

81 .
	gdeboun˚_öãrvÆ
 = 
AP147_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
AP147_GPIO_BTN_WPS
,

83 .
	ga˘ive_low
 = 1,

87 
__öô
 
	$≠147_£tup
()

89 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

91 
	`©h79_ªgi°î_m25p80
(
NULL
);

92 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠147_Àds_gpio
),

93 
≠147_Àds_gpio
);

94 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP147_KEYS_POLL_INTERVAL
,

95 
	`ARRAY_SIZE
(
≠147_gpio_keys
),

96 
≠147_gpio_keys
);

98 
	`©h79_ªgi°î_usb
();

100 
	`©h79_ªgi°î_pci
();

102 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP147_MAC0_OFFSET
, 
NULL
);

104 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

106 
	`©h79_ªgi°î_mdio
(0, 0x0);

109 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

110 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

111 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

112 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 0);

113 
	`©h79_ªgi°î_ëh
(1);

116 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

117 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

118 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

119 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

120 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

121 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 1);

122 
	`©h79_ªgi°î_ëh
(0);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_AP147_010
, "AP147-010", "Athîo†AP147-010Ñe„ªn˚ bﬂrd", 
≠147_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap152.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-m25p80.h
"

29 
	~"machty≥s.h
"

30 
	~"pci.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-gpio-buâ⁄s.h
"

33 
	~"dev-Àds-gpio.h
"

34 
	~"dev-•i.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-wmac.h
"

38 
	#AP152_GPIO_LED_USB0
 7

	)

39 
	#AP152_GPIO_LED_USB1
 8

	)

41 
	#AP152_GPIO_BTN_RESET
 2

	)

42 
	#AP152_GPIO_BTN_WPS
 1

	)

43 
	#AP152_KEYS_POLL_INTERVAL
 20

	)

44 
	#AP152_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP152_KEYS_POLL_INTERVAL
)

	)

46 
	#AP152_MAC0_OFFSET
 0

	)

47 
	#AP152_WMAC_CALDATA_OFFSET
 0x1000

	)

49 
gpio_Àd
 
	g≠152_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "ap152:green:usb0",

52 .
	ggpio
 = 
AP152_GPIO_LED_USB0
,

53 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "ap152:green:usb1",

57 .
	ggpio
 = 
AP152_GPIO_LED_USB1
,

58 .
	ga˘ive_low
 = 1,

62 
gpio_keys_buâ⁄
 
	g≠152_gpio_keys
[] 
	g__öôd©a
 = {

64 .
desc
 = "WPS button",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
KEY_WPS_BUTTON
,

67 .
	gdeboun˚_öãrvÆ
 = 
AP152_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 
AP152_GPIO_BTN_WPS
,

69 .
	ga˘ive_low
 = 1,

72 .
	gdesc
 = "Reset button",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_RESTART
,

75 .
	gdeboun˚_öãrvÆ
 = 
AP152_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
AP152_GPIO_BTN_RESET
,

77 .
	ga˘ive_low
 = 1,

81 
¨8327_∑d_cfg
 
	g≠152_¨8337_∑d0_cfg
 = {

82 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

83 .
	gsgmii_dñay_í
 = 
åue
,

86 
¨8327_∂©f‹m_d©a
 
	g≠152_¨8337_d©a
 = {

87 .
∑d0_cfg
 = &
≠152_¨8337_∑d0_cfg
,

88 .
	gp‹t0_cfg
 = {

89 .
f‹˚_lök
 = 1,

90 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

91 .
	gdu∂ex
 = 1,

92 .
	gtx∑u£
 = 1,

93 .
	grx∑u£
 = 1,

97 
mdio_bﬂrd_öfo
 
	g≠152_mdio0_öfo
[] = {

99 .
bus_id
 = "ag71xx-mdio.0",

100 .
	gmdio_addr
 = 0,

101 .
	g∂©f‹m_d©a
 = &
≠152_¨8337_d©a
,

105 
__öô
 
	$≠152_£tup
()

107 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

109 
	`©h79_ªgi°î_m25p80
(
NULL
);

111 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠152_Àds_gpio
),

112 
≠152_Àds_gpio
);

113 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP152_KEYS_POLL_INTERVAL
,

114 
	`ARRAY_SIZE
(
≠152_gpio_keys
),

115 
≠152_gpio_keys
);

117 
	`©h79_ªgi°î_usb
();

119 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_mdio0_devi˚
);

121 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
≠152_mdio0_öfo
,

122 
	`ARRAY_SIZE
(
≠152_mdio0_öfo
));

124 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP152_WMAC_CALDATA_OFFSET
, 
NULL
);

125 
	`©h79_ªgi°î_pci
();

127 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
AP152_MAC0_OFFSET
, 0);

130 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

131 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

132 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

133 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

134 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

136 
	`©h79_ªgi°î_ëh
(0);

137 
	}
}

139 
MIPS_MACHINE
(
ATH79_MACH_AP152
, "AP152", "Qualcomm Atheros AP152Ñeference board",

140 
≠152_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap531b0.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/©h9k_∂©f‹m.h
>

14 
	~<löux/¨8216_∂©f‹m.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-•i.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

27 
	~"pci.h
"

28 
	~"dev-≠9x-pci.h
"

30 
	#AP531B0_GPIO_LED_WLAN
 12

	)

31 
	#AP531B0_GPIO_LED_STATUS
 11

	)

33 
	#AP531B0_GPIO_RST_BTN
 17

	)

35 
	#AP531B0_KEYS_POLL_INTERVAL
 20

	)

36 
	#AP531B0_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP531B0_KEYS_POLL_INTERVAL
)

	)

38 
	#AP531B0_WMAC_CALDATA_OFFSET
 0x1000

	)

41 
gpio_Àd
 
	g≠531b0_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "ap531b0:green:status",

44 .
	ggpio
 = 
AP531B0_GPIO_LED_STATUS
,

45 .
	ga˘ive_low
 = 1,

48 .
	g«me
 = "ap531b0:green:wlan",

49 .
	ggpio
 = 
AP531B0_GPIO_LED_WLAN
,

50 .
	ga˘ive_low
 = 1,

54 
gpio_keys_buâ⁄
 
	g≠531b0_gpio_keys
[] 
	g__öôd©a
 = {

56 .
desc
 = "reset",

57 .
	gty≥
 = 
EV_KEY
,

58 .
	gcode
 = 
KEY_RESTART
,

59 .
	gdeboun˚_öãrvÆ
 = 
AP531B0_KEYS_DEBOUNCE_INTERVAL
,

60 .
	ggpio
 = 
AP531B0_GPIO_RST_BTN
,

61 .
	ga˘ive_low
 = 1,

66 
__öô
 
	$≠531b0_gpio_Àd_£tup
()

69 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠531b0_Àds_gpio
),

70 
≠531b0_Àds_gpio
);

72 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP531B0_KEYS_POLL_INTERVAL
,

73 
	`ARRAY_SIZE
(
≠531b0_gpio_keys
),

74 
≠531b0_gpio_keys
);

75 
	}
}

77 
__öô
 
	$≠531b0_£tup
()

79 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

80 
u8
 *
pmac
;

82 
	`©h79_ªgi°î_m25p80
(
NULL
);

83 
	`≠531b0_gpio_Àd_£tup
();

84 
	`©h79_ªgi°î_usb
();

85 
	`©h79_ªgi°î_pci
();

87 
	`©h79_ªgi°î_mdio
(0, 0x0);

89 
pmac
 = 
¨t
 + 
AP531B0_WMAC_CALDATA_OFFSET
 + 2;

90 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
pmac
, 1);

91 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
pmac
, 2);

93 
	`©h79_ªgi°î_wmac
(
¨t
 + 
AP531B0_WMAC_CALDATA_OFFSET
, 
pmac
);

96 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

97 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

98 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

99 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

100 
	`©h79_ªgi°î_ëh
(0);

103 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

104 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

105 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

106 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

107 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

108 
	`©h79_ªgi°î_ëh
(1);

109 
	}
}

111 
MIPS_MACHINE
(
ATH79_MACH_AP531B0
, "AP531B0", "Rockeetech AP531B0",

112 
≠531b0_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap90q.c

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

29 
	#AP90Q_GPIO_LED_WAN
 4

	)

30 
	#AP90Q_GPIO_LED_WLAN
 12

	)

31 
	#AP90Q_GPIO_LED_LAN
 16

	)

33 
	#AP90Q_GPIO_BTN_RESET
 17

	)

35 
	#AP90Q_KEYS_POLL_INTERVAL
 20

	)

36 
	#AP90Q_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP90Q_KEYS_POLL_INTERVAL
)

	)

38 
gpio_Àd
 
	g≠90q_Àds_gpio
[] 
	g__öôd©a
 = {

40 .
«me
 = "ap90q:green:lan",

41 .
	ggpio
 = 
AP90Q_GPIO_LED_LAN
,

42 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "ap90q:green:wan",

46 .
	ggpio
 = 
AP90Q_GPIO_LED_WAN
,

47 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "ap90q:green:wlan",

51 .
	ggpio
 = 
AP90Q_GPIO_LED_WLAN
,

52 .
	ga˘ive_low
 = 1,

56 
gpio_keys_buâ⁄
 
	g≠90q_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "reset",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
AP90Q_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
AP90Q_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

68 
	#CPE830_GPIO_LED_LINK4
 0

	)

69 
	#CPE830_GPIO_LED_LINK1
 1

	)

70 
	#CPE830_GPIO_LED_LINK2
 2

	)

71 
	#CPE830_GPIO_LED_LINK3
 3

	)

72 
	#CPE830_GPIO_LED_WAN
 4

	)

73 
	#CPE830_GPIO_LED_WLAN
 12

	)

74 
	#CPE830_GPIO_LED_LAN
 16

	)

76 
	#CPE830_GPIO_BTN_RESET
 17

	)

78 
gpio_Àd
 
	g˝e830_Àds_gpio
[] 
	g__öôd©a
 = {

80 .
«me
 = "cpe830:green:lan",

81 .
	ggpio
 = 
CPE830_GPIO_LED_LAN
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "cpe830:green:wan",

86 .
	ggpio
 = 
CPE830_GPIO_LED_WAN
,

87 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "cpe830:green:wlan",

91 .
	ggpio
 = 
CPE830_GPIO_LED_WLAN
,

92 .
	ga˘ive_low
 = 1,

95 .
	g«me
 = "cpe830:green:link1",

96 .
	ggpio
 = 
CPE830_GPIO_LED_LINK1
,

97 .
	ga˘ive_low
 = 1,

100 .
	g«me
 = "cpe830:green:link2",

101 .
	ggpio
 = 
CPE830_GPIO_LED_LINK2
,

102 .
	ga˘ive_low
 = 1,

105 .
	g«me
 = "cpe830:green:link3",

106 .
	ggpio
 = 
CPE830_GPIO_LED_LINK3
,

107 .
	ga˘ive_low
 = 1,

110 .
	g«me
 = "cpe830:green:link4",

111 .
	ggpio
 = 
CPE830_GPIO_LED_LINK4
,

112 .
	ga˘ive_low
 = 1,

116 
__öô
 
	$≠90q_˝e830_comm⁄_£tup
()

118 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

119 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

121 
	`©h79_ªgi°î_m25p80
(
NULL
);

123 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

125 
	`©h79_ªgi°î_mdio
(0, 0x0);

127 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

128 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

131 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

132 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

133 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

134 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

135 
	`©h79_ªgi°î_ëh
(1);

138 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

139 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

140 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

141 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

142 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

143 
	`©h79_ªgi°î_ëh
(0);

145 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

148 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

150 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP90Q_GPIO_LED_LAN
, 
åue
);

151 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP90Q_GPIO_LED_WAN
, 
åue
);

152 
	`©h79_gpio_dúe˘i⁄_£À˘
(
AP90Q_GPIO_LED_WLAN
, 
åue
);

155 
	`gpio_£t_vÆue
(
AP90Q_GPIO_LED_LAN
, 1);

156 
	`gpio_£t_vÆue
(
AP90Q_GPIO_LED_WAN
, 1);

158 
	`©h79_gpio_ouçut_£À˘
(
AP90Q_GPIO_LED_LAN
, 0);

159 
	`©h79_gpio_ouçut_£À˘
(
AP90Q_GPIO_LED_WAN
, 0);

160 
	`©h79_gpio_ouçut_£À˘
(
AP90Q_GPIO_LED_WLAN
, 0);

162 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP90Q_KEYS_POLL_INTERVAL
,

163 
	`ARRAY_SIZE
(
≠90q_gpio_keys
),

164 
≠90q_gpio_keys
);

165 
	}
}

167 
__öô
 
	$≠90q_£tup
()

169 
	`≠90q_˝e830_comm⁄_£tup
();

171 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠90q_Àds_gpio
),

172 
≠90q_Àds_gpio
);

173 
	}
}

175 
MIPS_MACHINE
(
ATH79_MACH_AP90Q
, "AP90Q", "YunC‹êAP80Q/AP90Q", 
≠90q_£tup
);

177 
__öô
 
	$˝e830_£tup
()

179 
	`≠90q_˝e830_comm⁄_£tup
();

181 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE830_GPIO_LED_LINK1
, 
åue
);

182 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE830_GPIO_LED_LINK2
, 
åue
);

183 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE830_GPIO_LED_LINK3
, 
åue
);

184 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE830_GPIO_LED_LINK4
, 
åue
);

187 
	`gpio_£t_vÆue
(
CPE830_GPIO_LED_LINK1
, 1);

188 
	`gpio_£t_vÆue
(
CPE830_GPIO_LED_LINK2
, 1);

189 
	`gpio_£t_vÆue
(
CPE830_GPIO_LED_LINK3
, 1);

190 
	`gpio_£t_vÆue
(
CPE830_GPIO_LED_LINK4
, 1);

192 
	`©h79_gpio_ouçut_£À˘
(
CPE830_GPIO_LED_LINK1
, 0);

193 
	`©h79_gpio_ouçut_£À˘
(
CPE830_GPIO_LED_LINK2
, 0);

194 
	`©h79_gpio_ouçut_£À˘
(
CPE830_GPIO_LED_LINK3
, 0);

195 
	`©h79_gpio_ouçut_£À˘
(
CPE830_GPIO_LED_LINK4
, 0);

197 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e830_Àds_gpio
),

198 
˝e830_Àds_gpio
);

199 
	}
}

201 
MIPS_MACHINE
(
ATH79_MACH_CPE830
, "CPE830", "YunC‹êCPE830", 
˝e830_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap91-5g.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"machty≥s.h
"

25 
	#AP91_5G_GPIO_LED_LAN
 17

	)

26 
	#AP91_5G_GPIO_LED_SIGNAL1
 12

	)

27 
	#AP91_5G_GPIO_LED_SIGNAL2
 8

	)

28 
	#AP91_5G_GPIO_LED_SIGNAL3
 6

	)

29 
	#AP91_5G_GPIO_LED_SIGNAL4
 7

	)

31 
	#AP91_5G_GPIO_WDT_EN
 1

	)

32 
	#AP91_5G_GPIO_WDT_IN
 0

	)

34 
	#AP91_5G_GPIO_BTN_RESET
 11

	)

36 
	#AP91_5G_KEYS_POLL_INTERVAL
 20

	)

37 
	#AP91_5G_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP91_5G_KEYS_POLL_INTERVAL
)

	)

39 
	#AP91_5G_WMAC_CALDATA_OFFSET
 0x1000

	)

41 
gpio_Àd
 
	g≠91_5g_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "ap91-5g:green:lan",

44 .
	ggpio
 = 
AP91_5G_GPIO_LED_LAN
,

45 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "ap91-5g:red:signal1",

48 .
	ggpio
 = 
AP91_5G_GPIO_LED_SIGNAL1
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "ap91-5g:orange:signal2",

52 .
	ggpio
 = 
AP91_5G_GPIO_LED_SIGNAL2
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "ap91-5g:green:signal3",

56 .
	ggpio
 = 
AP91_5G_GPIO_LED_SIGNAL3
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "ap91-5g:green:signal4",

60 .
	ggpio
 = 
AP91_5G_GPIO_LED_SIGNAL4
,

61 .
	ga˘ive_low
 = 1,

65 
gpio_keys_buâ⁄
 
	g≠91_5g_gpio_keys
[] 
	g__öôd©a
 = {

67 .
desc
 = "reset",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
AP91_5G_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
AP91_5G_GPIO_BTN_RESET
,

72 .
	ga˘ive_low
 = 1,

76 
__öô
 
	$≠91_5g_£tup
()

78 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

80 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
,

81 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

83 
	`gpio_£t_vÆue
(
AP91_5G_GPIO_LED_LAN
, 1);

84 
	`gpio_£t_vÆue
(
AP91_5G_GPIO_LED_SIGNAL3
, 1);

85 
	`gpio_£t_vÆue
(
AP91_5G_GPIO_LED_SIGNAL4
, 1);

87 
	`©h79_ªgi°î_m25p80
(
NULL
);

89 
	`©h79_ªgi°î_mdio
(0, 0x0);

92 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

93 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

94 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

95 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

96 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

97 
	`©h79_ªgi°î_ëh
(0);

99 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠91_5g_Àds_gpio
),

100 
≠91_5g_Àds_gpio
);

102 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP91_5G_KEYS_POLL_INTERVAL
,

103 
	`ARRAY_SIZE
(
≠91_5g_gpio_keys
),

104 
≠91_5g_gpio_keys
);

106 
	`gpio_ªque°_⁄e
(
AP91_5G_GPIO_WDT_IN
,

107 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

110 
	`gpio_ªque°_⁄e
(
AP91_5G_GPIO_WDT_EN
,

111 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

114 
	`≠91_pci_öô
(
¨t
 + 
AP91_5G_WMAC_CALDATA_OFFSET
, 
NULL
);

115 
	}
}

117 
MIPS_MACHINE
(
ATH79_MACH_AP91_5G
, "AP91-5G", "ALFA Network AP91-5G",

118 
≠91_5g_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ap96.c

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/dñay.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-usb.h
"

24 
	~"machty≥s.h
"

26 
	#AP96_GPIO_LED_12_GREEN
 0

	)

27 
	#AP96_GPIO_LED_3_GREEN
 1

	)

28 
	#AP96_GPIO_LED_2_GREEN
 2

	)

29 
	#AP96_GPIO_LED_WPS_GREEN
 4

	)

30 
	#AP96_GPIO_LED_5_GREEN
 5

	)

31 
	#AP96_GPIO_LED_4_ORANGE
 6

	)

34 
	#AP96_GPIO_BTN_RESET
 3

	)

36 
	#AP96_GPIO_BTN_WPS
 8

	)

38 
	#AP96_KEYS_POLL_INTERVAL
 20

	)

39 
	#AP96_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AP96_KEYS_POLL_INTERVAL
)

	)

41 
	#AP96_WMAC0_MAC_OFFSET
 0x120c

	)

42 
	#AP96_WMAC1_MAC_OFFSET
 0x520c

	)

43 
	#AP96_CALDATA0_OFFSET
 0x1000

	)

44 
	#AP96_CALDATA1_OFFSET
 0x5000

	)

54 
gpio_Àd
 
	g≠96_Àds_gpio
[] 
	g__öôd©a
 = {

56 .
«me
 = "ap96:green:led2",

57 .
	ggpio
 = 
AP96_GPIO_LED_2_GREEN
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "ap96:green:led3",

61 .
	ggpio
 = 
AP96_GPIO_LED_3_GREEN
,

62 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "ap96:orange:led4",

65 .
	ggpio
 = 
AP96_GPIO_LED_4_ORANGE
,

66 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "ap96:green:led5",

69 .
	ggpio
 = 
AP96_GPIO_LED_5_GREEN
,

70 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "ap96:green:led12",

73 .
	ggpio
 = 
AP96_GPIO_LED_12_GREEN
,

74 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "ap96:green:wps",

77 .
	ggpio
 = 
AP96_GPIO_LED_WPS_GREEN
,

78 .
	ga˘ive_low
 = 1,

82 
gpio_keys_buâ⁄
 
	g≠96_gpio_keys
[] 
	g__öôd©a
 = {

84 .
desc
 = "reset",

85 .
	gty≥
 = 
EV_KEY
,

86 .
	gcode
 = 
KEY_RESTART
,

87 .
	gdeboun˚_öãrvÆ
 = 
AP96_KEYS_DEBOUNCE_INTERVAL
,

88 .
	ggpio
 = 
AP96_GPIO_BTN_RESET
,

89 .
	ga˘ive_low
 = 1,

91 .
	gdesc
 = "wps",

92 .
	gty≥
 = 
EV_KEY
,

93 .
	gcode
 = 
KEY_WPS_BUTTON
,

94 .
	gdeboun˚_öãrvÆ
 = 
AP96_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ggpio
 = 
AP96_GPIO_BTN_WPS
,

96 .
	ga˘ive_low
 = 1,

100 
	#AP96_WAN_PHYMASK
 0x10

	)

101 
	#AP96_LAN_PHYMASK
 0x0f

	)

103 
__öô
 
	$≠96_£tup
()

105 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

107 
	`©h79_ªgi°î_mdio
(0, ~(
AP96_WAN_PHYMASK
 | 
AP96_LAN_PHYMASK
));

109 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

110 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

111 
©h79_ëh0_d©a
.
phy_mask
 = 
AP96_LAN_PHYMASK
;

112 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

113 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

115 
	`©h79_ªgi°î_ëh
(0);

117 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 1);

118 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

119 
©h79_ëh1_d©a
.
phy_mask
 = 
AP96_WAN_PHYMASK
;

121 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x1f000000;

123 
	`©h79_ªgi°î_ëh
(1);

125 
	`©h79_ªgi°î_usb
();

127 
	`©h79_ªgi°î_m25p80
(
NULL
);

129 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
≠96_Àds_gpio
),

130 
≠96_Àds_gpio
);

132 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AP96_KEYS_POLL_INTERVAL
,

133 
	`ARRAY_SIZE
(
≠96_gpio_keys
),

134 
≠96_gpio_keys
);

136 
	`≠94_pci_öô
(
¨t
 + 
AP96_CALDATA0_OFFSET
,

137 
¨t
 + 
AP96_WMAC0_MAC_OFFSET
,

138 
¨t
 + 
AP96_CALDATA1_OFFSET
,

139 
¨t
 + 
AP96_WMAC1_MAC_OFFSET
);

140 
	}
}

142 
MIPS_MACHINE
(
ATH79_MACH_AP96
, "AP96", "Athîo†AP96", 
≠96_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c25-v1.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/©h9k_∂©f‹m.h
>

14 
	~<löux/¨8216_∂©f‹m.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~<löux/gpio.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-m25p80.h
"

20 
	~"machty≥s.h
"

21 
	~"pci.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~<löux/•i/•i_gpio.h
>

30 
	~<löux/•i/74x164.h
>

32 
	#ARCHER_C25_GPIO_SHIFT_OE
 21

	)

33 
	#ARCHER_C25_GPIO_SHIFT_SER
 14

	)

34 
	#ARCHER_C25_GPIO_SHIFT_SRCLK
 15

	)

35 
	#ARCHER_C25_GPIO_SHIFT_SRCLR
 19

	)

36 
	#ARCHER_C25_GPIO_SHIFT_RCLK
 16

	)

38 
	#ARCHER_C25_74HC_GPIO_BASE
 32

	)

39 
	#ARCHER_C25_74HC_GPIO_LED_WAN_AMBER
 (
ARCHER_C25_74HC_GPIO_BASE
 + 4)

	)

40 
	#ARCHER_C25_74HC_GPIO_LED_WAN_GREEN
 (
ARCHER_C25_74HC_GPIO_BASE
 + 5)

	)

41 
	#ARCHER_C25_74HC_GPIO_LED_WLAN2
 (
ARCHER_C25_74HC_GPIO_BASE
 + 6)

	)

42 
	#ARCHER_C25_74HC_GPIO_LED_WLAN5
 (
ARCHER_C25_74HC_GPIO_BASE
 + 7)

	)

43 
	#ARCHER_C25_74HC_GPIO_LED_LAN1
 (
ARCHER_C25_74HC_GPIO_BASE
 + 0)

	)

44 
	#ARCHER_C25_74HC_GPIO_LED_LAN2
 (
ARCHER_C25_74HC_GPIO_BASE
 + 1)

	)

45 
	#ARCHER_C25_74HC_GPIO_LED_LAN3
 (
ARCHER_C25_74HC_GPIO_BASE
 + 2)

	)

46 
	#ARCHER_C25_74HC_GPIO_LED_LAN4
 (
ARCHER_C25_74HC_GPIO_BASE
 + 3)

	)

48 
	#ARCHER_C25_V1_SSR_BIT_0
 0

	)

49 
	#ARCHER_C25_V1_SSR_BIT_1
 1

	)

50 
	#ARCHER_C25_V1_SSR_BIT_2
 2

	)

51 
	#ARCHER_C25_V1_SSR_BIT_3
 3

	)

52 
	#ARCHER_C25_V1_SSR_BIT_4
 4

	)

53 
	#ARCHER_C25_V1_SSR_BIT_5
 5

	)

54 
	#ARCHER_C25_V1_SSR_BIT_6
 6

	)

55 
	#ARCHER_C25_V1_SSR_BIT_7
 7

	)

58 
	#ARCHER_C25_V1_KEYS_POLL_INTERVAL
 20

	)

59 
	#ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL
 \

60 (3 * 
ARCHER_C25_V1_KEYS_POLL_INTERVAL
)

	)

62 
	#ARCHER_C25_V1_GPIO_BTN_RESET
 1

	)

63 
	#ARCHER_C25_V1_GPIO_BTN_RFKILL
 22

	)

65 
	#ARCHER_C25_V1_GPIO_LED_POWER
 17

	)

66 
	#ARCHER_C25_V1_GPIO_LED_WPS
 2

	)

68 
	#ARCHER_C25_V1_WMAC_CALDATA_OFFSET
 0x1000

	)

70 
•i_gpio_∂©f‹m_d©a
 
	g¨chî_c25_v1_•i_d©a
 = {

71 .
sck
 = 
ARCHER_C25_GPIO_SHIFT_SRCLK
,

72 .
	gmiso
 = 
SPI_GPIO_NO_MISO
,

73 .
	gmosi
 = 
ARCHER_C25_GPIO_SHIFT_SER
,

74 .
	gnum_chù£À˘
 = 1,

77 
u8
 
	g¨chî_c25_v1_s§_öôd©a
[] = {

78 
BIT
(
ARCHER_C25_V1_SSR_BIT_7
) |

79 
BIT
(
ARCHER_C25_V1_SSR_BIT_6
) |

80 
BIT
(
ARCHER_C25_V1_SSR_BIT_5
) |

81 
BIT
(
ARCHER_C25_V1_SSR_BIT_4
) |

82 
BIT
(
ARCHER_C25_V1_SSR_BIT_3
) |

83 
BIT
(
ARCHER_C25_V1_SSR_BIT_2
) |

84 
BIT
(
ARCHER_C25_V1_SSR_BIT_1
)

87 
gí_74x164_chù_∂©f‹m_d©a
 
	g¨chî_c25_v1_s§_d©a
 = {

88 .
ba£
 = 
ARCHER_C25_74HC_GPIO_BASE
,

89 .
	gnum_ªgi°îs
 = 
ARRAY_SIZE
(
¨chî_c25_v1_s§_öôd©a
),

90 .
	göô_d©a
 = 
¨chî_c25_v1_s§_öôd©a
,

93 
∂©f‹m_devi˚
 
	g¨chî_c25_v1_•i_devi˚
 = {

94 .
«me
 = "spi_gpio",

95 .
	gid
 = 1,

96 .
	gdev
 = {

97 .
∂©f‹m_d©a
 = &
¨chî_c25_v1_•i_d©a
,

101 
•i_bﬂrd_öfo
 
	g¨chî_c25_v1_•i_öfo
[] = {

103 .
bus_num
 = 1,

104 .
	gchù_£À˘
 = 0,

105 .
	gmax_•ìd_hz
 = 10000000,

106 .
	gmodÆüs
 = "74x164",

107 .
	g∂©f‹m_d©a
 = &
¨chî_c25_v1_s§_d©a
,

108 .
	gc⁄åﬁÀr_d©a
 = (*Ë
ARCHER_C25_GPIO_SHIFT_RCLK
,

112 
gpio_Àd
 
	g¨chî_c25_v1_Àds_gpio
[] 
	g__öôd©a
 = {

114 .
«me
 = "archer-c25-v1:green:power",

115 .
	ggpio
 = 
ARCHER_C25_V1_GPIO_LED_POWER
,

116 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "archer-c25-v1:green:wps",

119 .
	ggpio
 = 
ARCHER_C25_V1_GPIO_LED_WPS
,

120 .
	ga˘ive_low
 = 1,

122 .
	g«me
 = "archer-c25-v1:green:wlan2g",

123 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_WLAN2
,

124 .
	ga˘ive_low
 = 1,

126 .
	g«me
 = "archer-c25-v1:green:wlan5g",

127 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_WLAN5
,

128 .
	ga˘ive_low
 = 1,

130 .
	g«me
 = "archer-c25-v1:green:lan1",

131 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_LAN1
,

132 .
	ga˘ive_low
 = 1,

134 .
	g«me
 = "archer-c25-v1:green:lan2",

135 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_LAN2
,

136 .
	ga˘ive_low
 = 1,

138 .
	g«me
 = "archer-c25-v1:green:lan3",

139 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_LAN3
,

140 .
	ga˘ive_low
 = 1,

142 .
	g«me
 = "archer-c25-v1:green:lan4",

143 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_LAN4
,

144 .
	ga˘ive_low
 = 1,

146 .
	g«me
 = "archer-c25-v1:green:wan",

147 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_WAN_GREEN
,

148 .
	ga˘ive_low
 = 1,

150 .
	g«me
 = "archer-c25-v1:amber:wan",

151 .
	ggpio
 = 
ARCHER_C25_74HC_GPIO_LED_WAN_AMBER
,

152 .
	ga˘ive_low
 = 1,

156 
gpio_keys_buâ⁄
 
	g¨chî_c25_v1_gpio_keys
[] 
	g__öôd©a
 = {

158 .
desc
 = "Reset button",

159 .
	gty≥
 = 
EV_KEY
,

160 .
	gcode
 = 
KEY_RESTART
,

161 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL
,

162 .
	ggpio
 = 
ARCHER_C25_V1_GPIO_BTN_RESET
,

163 .
	ga˘ive_low
 = 1,

165 .
	gdesc
 = "RFKILL button",

166 .
	gty≥
 = 
EV_KEY
,

167 .
	gcode
 = 
KEY_RFKILL
,

168 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL
,

169 .
	ggpio
 = 
ARCHER_C25_V1_GPIO_BTN_RFKILL
,

170 .
	ga˘ive_low
 = 1,

174 
__öô
 
	$¨chî_c25_v1_£tup
()

176 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7e0008);

177 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f0000);

179 
	`©h79_ªgi°î_m25p80
(
NULL
);

181 
	`•i_ªgi°î_bﬂrd_öfo
(
¨chî_c25_v1_•i_öfo
,

182 
	`ARRAY_SIZE
(
¨chî_c25_v1_•i_öfo
));

184 
	`∂©f‹m_devi˚_ªgi°î
(&
¨chî_c25_v1_•i_devi˚
);

186 
	`gpio_ªque°_⁄e
(
ARCHER_C25_GPIO_SHIFT_OE
,

187 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

190 
	`gpio_ªque°_⁄e
(
ARCHER_C25_GPIO_SHIFT_SRCLR
,

191 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

194 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c25_v1_Àds_gpio
),

195 
¨chî_c25_v1_Àds_gpio
);

197 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C25_V1_KEYS_POLL_INTERVAL
,

198 
	`ARRAY_SIZE
(
¨chî_c25_v1_gpio_keys
),

199 
¨chî_c25_v1_gpio_keys
);

201 
	`©h79_ªgi°î_mdio
(0, 0x0);

202 
	`©h79_ªgi°î_mdio
(1, 0x0);

204 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

205 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

208 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

209 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

210 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

211 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

212 
	`©h79_ªgi°î_ëh
(0);

215 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

216 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

217 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

218 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

219 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

220 
	`©h79_ªgi°î_ëh
(1);

222 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C25_V1_WMAC_CALDATA_OFFSET
, 
mac
);

223 
	`≠91_pci_öô
(
NULL
, NULL);

224 
	}
}

226 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C25_V1
, "ARCHER-C25-V1", "TP-LINK Archer C25 v1",

227 
¨chî_c25_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c59-v1.c

10 
	~<löux/∂©f‹m_devi˚.h
>

11 
	~<löux/©h9k_∂©f‹m.h
>

12 
	~<löux/¨8216_∂©f‹m.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/•i/•i_gpio.h
>

17 
	~<löux/•i/74x164.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-m25p80.h
"

21 
	~"machty≥s.h
"

22 
	~"pci.h
"

23 
	~"dev-≠9x-pci.h
"

24 
	~"dev-ëh.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-Àds-gpio.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-usb.h
"

29 
	~"dev-wmac.h
"

31 
	#ARCHER_C59_V1_KEYS_POLL_INTERVAL
 20

	)

32 
	#ARCHER_C59_V1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ARCHER_C59_V1_KEYS_POLL_INTERVAL
)

	)

34 
	#ARCHER_C59_V1_GPIO_BTN_RESET
 21

	)

35 
	#ARCHER_C59_V1_GPIO_BTN_RFKILL
 2

	)

36 
	#ARCHER_C59_V1_GPIO_BTN_WPS
 1

	)

38 
	#ARCHER_C59_V1_GPIO_USB_POWER
 22

	)

40 
	#ARCHER_C59_GPIO_SHIFT_OE
 16

	)

41 
	#ARCHER_C59_GPIO_SHIFT_SER
 17

	)

42 
	#ARCHER_C59_GPIO_SHIFT_SRCLK
 18

	)

43 
	#ARCHER_C59_GPIO_SHIFT_SRCLR
 19

	)

44 
	#ARCHER_C59_GPIO_SHIFT_RCLK
 20

	)

46 
	#ARCHER_C59_74HC_GPIO_BASE
 32

	)

47 
	#ARCHER_C59_74HC_GPIO_LED_POWER
 (
ARCHER_C59_74HC_GPIO_BASE
 + 0)

	)

48 
	#ARCHER_C59_74HC_GPIO_LED_WLAN2
 (
ARCHER_C59_74HC_GPIO_BASE
 + 1)

	)

49 
	#ARCHER_C59_74HC_GPIO_LED_WLAN5
 (
ARCHER_C59_74HC_GPIO_BASE
 + 2)

	)

50 
	#ARCHER_C59_74HC_GPIO_LED_LAN
 (
ARCHER_C59_74HC_GPIO_BASE
 + 3)

	)

51 
	#ARCHER_C59_74HC_GPIO_LED_WAN_GREEN
 (
ARCHER_C59_74HC_GPIO_BASE
 + 4)

	)

52 
	#ARCHER_C59_74HC_GPIO_LED_WAN_AMBER
 (
ARCHER_C59_74HC_GPIO_BASE
 + 5)

	)

53 
	#ARCHER_C59_74HC_GPIO_LED_WPS
 (
ARCHER_C59_74HC_GPIO_BASE
 + 6)

	)

54 
	#ARCHER_C59_74HC_GPIO_LED_USB
 (
ARCHER_C59_74HC_GPIO_BASE
 + 7)

	)

56 
	#ARCHER_C59_V1_SSR_BIT_0
 0

	)

57 
	#ARCHER_C59_V1_SSR_BIT_1
 1

	)

58 
	#ARCHER_C59_V1_SSR_BIT_2
 2

	)

59 
	#ARCHER_C59_V1_SSR_BIT_3
 3

	)

60 
	#ARCHER_C59_V1_SSR_BIT_4
 4

	)

61 
	#ARCHER_C59_V1_SSR_BIT_5
 5

	)

62 
	#ARCHER_C59_V1_SSR_BIT_6
 6

	)

63 
	#ARCHER_C59_V1_SSR_BIT_7
 7

	)

65 
	#ARCHER_C59_V1_WMAC_CALDATA_OFFSET
 0x1000

	)

66 
	#ARCHER_C59_V1_PCI_CALDATA_OFFSET
 0x5000

	)

68 
gpio_Àd
 
	g¨chî_c58_v1_Àds_gpio
[] 
	g__öôd©a
 = {

70 .
«me
 = "archer-c58-v1:green:power",

71 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_POWER
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "archer-c58-v1:green:wlan2g",

76 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN2
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "archer-c58-v1:green:wlan5g",

81 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN5
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "archer-c58-v1:green:lan",

86 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_LAN
,

87 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "archer-c58-v1:green:wan",

91 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_GREEN
,

92 .
	ga˘ive_low
 = 1,

95 .
	g«me
 = "archer-c58-v1:amber:wan",

96 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_AMBER
,

97 .
	ga˘ive_low
 = 1,

100 .
	g«me
 = "archer-c58-v1:green:wps",

101 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WPS
,

102 .
	ga˘ive_low
 = 1,

106 
gpio_Àd
 
	g¨chî_c59_v1_Àds_gpio
[] 
	g__öôd©a
 = {

108 .
«me
 = "archer-c59-v1:green:power",

109 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_POWER
,

110 .
	ga˘ive_low
 = 1,

113 .
	g«me
 = "archer-c59-v1:green:wlan2g",

114 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN2
,

115 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "archer-c59-v1:green:wlan5g",

119 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN5
,

120 .
	ga˘ive_low
 = 1,

123 .
	g«me
 = "archer-c59-v1:green:lan",

124 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_LAN
,

125 .
	ga˘ive_low
 = 1,

128 .
	g«me
 = "archer-c59-v1:green:wan",

129 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_GREEN
,

130 .
	ga˘ive_low
 = 1,

133 .
	g«me
 = "archer-c59-v1:amber:wan",

134 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_AMBER
,

135 .
	ga˘ive_low
 = 1,

138 .
	g«me
 = "archer-c59-v1:green:wps",

139 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WPS
,

140 .
	ga˘ive_low
 = 1,

143 .
	g«me
 = "archer-c59-v1:green:usb",

144 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_USB
,

145 .
	ga˘ive_low
 = 1,

149 
gpio_Àd
 
	g¨chî_c59_v2_Àds_gpio
[] 
	g__öôd©a
 = {

151 .
«me
 = "archer-c59-v2:green:power",

152 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_POWER
,

153 .
	ga˘ive_low
 = 1,

156 .
	g«me
 = "archer-c59-v2:green:wlan2g",

157 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN2
,

158 .
	ga˘ive_low
 = 1,

161 .
	g«me
 = "archer-c59-v2:green:wlan5g",

162 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WLAN5
,

163 .
	ga˘ive_low
 = 1,

166 .
	g«me
 = "archer-c59-v2:green:lan",

167 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_LAN
,

168 .
	ga˘ive_low
 = 1,

171 .
	g«me
 = "archer-c59-v2:green:wan",

172 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_GREEN
,

173 .
	ga˘ive_low
 = 1,

176 .
	g«me
 = "archer-c59-v2:amber:wan",

177 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WAN_AMBER
,

178 .
	ga˘ive_low
 = 1,

181 .
	g«me
 = "archer-c59-v2:green:wps",

182 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_WPS
,

183 .
	ga˘ive_low
 = 1,

186 .
	g«me
 = "archer-c59-v2:green:usb",

187 .
	ggpio
 = 
ARCHER_C59_74HC_GPIO_LED_USB
,

188 .
	ga˘ive_low
 = 1,

192 
gpio_keys_buâ⁄
 
	g¨chî_c59_v1_gpio_keys
[] 
	g__öôd©a
 = {

194 .
desc
 = "Reset button",

195 .
	gty≥
 = 
EV_KEY
,

196 .
	gcode
 = 
KEY_RESTART
,

197 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C59_V1_KEYS_DEBOUNCE_INTERVAL
,

198 .
	ggpio
 = 
ARCHER_C59_V1_GPIO_BTN_RESET
,

199 .
	ga˘ive_low
 = 1,

202 .
	gdesc
 = "RFKILL button",

203 .
	gty≥
 = 
EV_KEY
,

204 .
	gcode
 = 
KEY_RFKILL
,

205 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C59_V1_KEYS_DEBOUNCE_INTERVAL
,

206 .
	ggpio
 = 
ARCHER_C59_V1_GPIO_BTN_RFKILL
,

207 .
	ga˘ive_low
 = 1,

210 .
	gdesc
 = "WPS button",

211 .
	gty≥
 = 
EV_KEY
,

212 .
	gcode
 = 
KEY_WPS_BUTTON
,

213 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C59_V1_KEYS_DEBOUNCE_INTERVAL
,

214 .
	ggpio
 = 
ARCHER_C59_V1_GPIO_BTN_WPS
,

215 .
	ga˘ive_low
 = 1,

219 
•i_gpio_∂©f‹m_d©a
 
	g¨chî_c59_v1_•i_d©a
 = {

220 .
sck
 = 
ARCHER_C59_GPIO_SHIFT_SRCLK
,

221 .
	gmiso
 = 
SPI_GPIO_NO_MISO
,

222 .
	gmosi
 = 
ARCHER_C59_GPIO_SHIFT_SER
,

223 .
	gnum_chù£À˘
 = 1,

226 
u8
 
	g¨chî_c59_v1_s§_öôd©a
[] = {

227 
BIT
(
ARCHER_C59_V1_SSR_BIT_7
) |

228 
BIT
(
ARCHER_C59_V1_SSR_BIT_6
) |

229 
BIT
(
ARCHER_C59_V1_SSR_BIT_5
) |

230 
BIT
(
ARCHER_C59_V1_SSR_BIT_4
) |

231 
BIT
(
ARCHER_C59_V1_SSR_BIT_3
) |

232 
BIT
(
ARCHER_C59_V1_SSR_BIT_2
) |

233 
BIT
(
ARCHER_C59_V1_SSR_BIT_1
)

236 
gí_74x164_chù_∂©f‹m_d©a
 
	g¨chî_c59_v1_s§_d©a
 = {

237 .
ba£
 = 
ARCHER_C59_74HC_GPIO_BASE
,

238 .
	gnum_ªgi°îs
 = 
ARRAY_SIZE
(
¨chî_c59_v1_s§_öôd©a
),

239 .
	göô_d©a
 = 
¨chî_c59_v1_s§_öôd©a
,

242 
∂©f‹m_devi˚
 
	g¨chî_c59_v1_•i_devi˚
 = {

243 .
«me
 = "spi_gpio",

244 .
	gid
 = 1,

245 .
	gdev
 = {

246 .
∂©f‹m_d©a
 = &
¨chî_c59_v1_•i_d©a
,

250 
•i_bﬂrd_öfo
 
	g¨chî_c59_v1_•i_öfo
[] = {

252 .
bus_num
 = 1,

253 .
	gchù_£À˘
 = 0,

254 .
	gmax_•ìd_hz
 = 10000000,

255 .
	gmodÆüs
 = "74x164",

256 .
	g∂©f‹m_d©a
 = &
¨chî_c59_v1_s§_d©a
,

257 .
	gc⁄åﬁÀr_d©a
 = (*Ë
ARCHER_C59_GPIO_SHIFT_RCLK
,

261 
__öô
 
	$¨chî_c5x_v1_£tup
(
u32
 
macLoˇti⁄
)

263 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
macLoˇti⁄
);

264 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

266 
	`©h79_ªgi°î_m25p80
(
NULL
);

267 
	`•i_ªgi°î_bﬂrd_öfo
(
¨chî_c59_v1_•i_öfo
,

268 
	`ARRAY_SIZE
(
¨chî_c59_v1_•i_öfo
));

269 
	`∂©f‹m_devi˚_ªgi°î
(&
¨chî_c59_v1_•i_devi˚
);

271 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C59_V1_KEYS_POLL_INTERVAL
,

272 
	`ARRAY_SIZE
(
¨chî_c59_v1_gpio_keys
),

273 
¨chî_c59_v1_gpio_keys
);

275 
	`©h79_£tup_qˇ956x_ëh_cfg
(
QCA956X_ETH_CFG_SW_PHY_SWAP
 |

276 
QCA956X_ETH_CFG_SW_PHY_ADDR_SWAP
);

278 
	`©h79_ªgi°î_mdio
(0, 0x0);

279 
	`©h79_ªgi°î_mdio
(1, 0x0);

281 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

282 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

285 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

286 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

287 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

288 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

289 
	`©h79_ªgi°î_ëh
(0);

292 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

293 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

294 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

295 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(0);

296 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

297 
	`©h79_ªgi°î_ëh
(1);

299 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C59_V1_WMAC_CALDATA_OFFSET
, 
mac
);

300 
	`≠91_pci_öô
(
¨t
 + 
ARCHER_C59_V1_PCI_CALDATA_OFFSET
, 
NULL
);

302 
	`©h79_ªgi°î_usb
();

303 
	`gpio_ªque°_⁄e
(
ARCHER_C59_V1_GPIO_USB_POWER
,

304 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

306 
	`gpio_ªque°_⁄e
(
ARCHER_C59_GPIO_SHIFT_OE
,

307 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

309 
	`gpio_ªque°_⁄e
(
ARCHER_C59_GPIO_SHIFT_SRCLR
,

310 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

312 
	}
}

314 
__öô
 
	$¨chî_c58_v1_£tup
()

316 
	`¨chî_c5x_v1_£tup
(0x1f010008);

317 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c58_v1_Àds_gpio
),

318 
¨chî_c58_v1_Àds_gpio
);

319 
	}
}

321 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C58_V1
, "ARCHER-C58-V1",

322 "TP-LINK Archî C58 v1", 
¨chî_c58_v1_£tup
);

324 
__öô
 
	$¨chî_c59_v1_£tup
()

326 
	`¨chî_c5x_v1_£tup
(0x1f010008);

327 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c59_v1_Àds_gpio
),

328 
¨chî_c59_v1_Àds_gpio
);

329 
	}
}

331 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C59_V1
, "ARCHER-C59-V1",

332 "TP-LINK Archî C59 v1", 
¨chî_c59_v1_£tup
);

334 
__öô
 
	$¨chî_c59_v2_£tup
()

336 
	`¨chî_c5x_v1_£tup
(0x1f030008);

337 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c59_v2_Àds_gpio
),

338 
¨chî_c59_v2_Àds_gpio
);

339 
	}
}

341 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C59_V2
, "ARCHER-C59-V2",

342 "TP-LINK Archî C59 v2", 
¨chî_c59_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c60-v1.c

10 
	~<löux/∂©f‹m_devi˚.h
>

11 
	~<löux/©h9k_∂©f‹m.h
>

12 
	~<löux/¨8216_∂©f‹m.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~<löux/gpio.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-m25p80.h
"

18 
	~"machty≥s.h
"

19 
	~"pci.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-•i.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

28 
	#ARCHER_C60_V1_GPIO_LED_LAN
 2

	)

29 
	#ARCHER_C60_V1_GPIO_LED_POWER
 16

	)

30 
	#ARCHER_C60_V1_GPIO_LED_WLAN2
 17

	)

31 
	#ARCHER_C60_V1_GPIO_LED_WLAN5
 18

	)

32 
	#ARCHER_C60_V1_GPIO_LED_WPS
 19

	)

33 
	#ARCHER_C60_V1_GPIO_LED_WAN_GREEN
 20

	)

34 
	#ARCHER_C60_V1_GPIO_LED_WAN_AMBER
 22

	)

37 
	#ARCHER_C60_V1_KEYS_POLL_INTERVAL
 20

	)

38 
	#ARCHER_C60_V1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ARCHER_C60_V1_KEYS_POLL_INTERVAL
)

	)

40 
	#ARCHER_C60_V1_GPIO_BTN_RESET
 21

	)

41 
	#ARCHER_C60_V1_GPIO_BTN_RFKILL
 1

	)

45 
	#ARCHER_C60_V1_WMAC_CALDATA_OFFSET
 0x1000

	)

46 
	#ARCHER_C60_V1_PCI_CALDATA_OFFSET
 0x5000

	)

48 
gpio_Àd
 
	g¨chî_c60_v1_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "archer-c60-v1:green:power",

51 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_POWER
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "archer-c60-v1:green:wlan2g",

56 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WLAN2
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "archer-c60-v1:green:wlan5g",

61 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WLAN5
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "archer-c60-v1:green:lan",

66 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_LAN
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "archer-c60-v1:green:wan",

71 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WAN_GREEN
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "archer-c60-v1:amber:wan",

76 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WAN_AMBER
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "archer-c60-v1:green:wps",

81 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WPS
,

82 .
	ga˘ive_low
 = 1,

86 
gpio_Àd
 
	g¨chî_c60_v2_Àds_gpio
[] 
	g__öôd©a
 = {

88 .
«me
 = "archer-c60-v2:green:power",

89 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_POWER
,

90 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "archer-c60-v2:green:wlan2g",

94 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WLAN2
,

95 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "archer-c60-v2:green:wlan5g",

99 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WLAN5
,

100 .
	ga˘ive_low
 = 1,

103 .
	g«me
 = "archer-c60-v2:green:lan",

104 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_LAN
,

105 .
	ga˘ive_low
 = 1,

108 .
	g«me
 = "archer-c60-v2:green:wan",

109 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WAN_GREEN
,

110 .
	ga˘ive_low
 = 1,

113 .
	g«me
 = "archer-c60-v2:amber:wan",

114 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WAN_AMBER
,

115 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "archer-c60-v2:green:wps",

119 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_LED_WPS
,

120 .
	ga˘ive_low
 = 1,

124 
gpio_keys_buâ⁄
 
	g¨chî_c60_v1_gpio_keys
[] 
	g__öôd©a
 = {

126 .
desc
 = "Reset button",

127 .
	gty≥
 = 
EV_KEY
,

128 .
	gcode
 = 
KEY_RESTART
,

129 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C60_V1_KEYS_DEBOUNCE_INTERVAL
,

130 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_BTN_RESET
,

131 .
	ga˘ive_low
 = 1,

134 .
	gdesc
 = "RFKILL button",

135 .
	gty≥
 = 
EV_KEY
,

136 .
	gcode
 = 
KEY_RFKILL
,

137 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C60_V1_KEYS_DEBOUNCE_INTERVAL
,

138 .
	ggpio
 = 
ARCHER_C60_V1_GPIO_BTN_RFKILL
,

139 .
	ga˘ive_low
 = 1,

143 
__öô
 
	$¨chî_c60_v1_£tup
()

145 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f010008);

146 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f0000);

148 
	`©h79_ªgi°î_m25p80
(
NULL
);

150 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c60_v1_Àds_gpio
),

151 
¨chî_c60_v1_Àds_gpio
);

153 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C60_V1_KEYS_POLL_INTERVAL
,

154 
	`ARRAY_SIZE
(
¨chî_c60_v1_gpio_keys
),

155 
¨chî_c60_v1_gpio_keys
);

157 
	`©h79_ªgi°î_mdio
(0, 0x0);

158 
	`©h79_ªgi°î_mdio
(1, 0x0);

160 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

161 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

164 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

165 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

166 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

167 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

168 
	`©h79_ªgi°î_ëh
(0);

171 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

172 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

173 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

174 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

175 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

176 
	`©h79_ªgi°î_ëh
(1);

178 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C60_V1_WMAC_CALDATA_OFFSET
, 
mac
);

179 
	`≠91_pci_öô
(
¨t
 + 
ARCHER_C60_V1_PCI_CALDATA_OFFSET
, 
NULL
);

180 
	}
}

182 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C60_V1
, "ARCHER-C60-V1",

183 "TP-LINK Archî C60 v1", 
¨chî_c60_v1_£tup
);

185 
__öô
 
	$¨chî_c60_v2_£tup
()

187 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fb08);

188 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f0000);

190 
	`©h79_ªgi°î_m25p80
(
NULL
);

192 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c60_v2_Àds_gpio
),

193 
¨chî_c60_v2_Àds_gpio
);

195 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C60_V1_KEYS_POLL_INTERVAL
,

196 
	`ARRAY_SIZE
(
¨chî_c60_v1_gpio_keys
),

197 
¨chî_c60_v1_gpio_keys
);

199 
	`©h79_ªgi°î_mdio
(0, 0x0);

200 
	`©h79_ªgi°î_mdio
(1, 0x0);

202 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

203 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

206 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

207 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

208 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

209 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

210 
	`©h79_ªgi°î_ëh
(0);

213 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

214 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

215 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

216 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

217 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

218 
	`©h79_ªgi°î_ëh
(1);

220 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C60_V1_WMAC_CALDATA_OFFSET
, 
mac
);

221 
	`≠91_pci_öô
(
¨t
 + 
ARCHER_C60_V1_PCI_CALDATA_OFFSET
, 
NULL
);

222 
	}
}

224 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C60_V2
, "ARCHER-C60-V2",

225 "TP-LINK Archî C60 v2", 
¨chî_c60_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c7-v4.c

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<löux/¥oc_fs.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/•i/•i_gpio.h
>

29 
	~<löux/•i/74x164.h
>

31 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

33 
	~"comm⁄.h
"

34 
	~"dev-m25p80.h
"

35 
	~"machty≥s.h
"

36 
	~"pci.h
"

37 
	~"dev-ëh.h
"

38 
	~"dev-gpio-buâ⁄s.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-•i.h
"

41 
	~"dev-usb.h
"

42 
	~"dev-wmac.h
"

45 
	#ARCHER_C7_GPIO_SHIFT_OE
 1

	)

46 
	#ARCHER_C7_GPIO_SHIFT_SER
 14

	)

47 
	#ARCHER_C7_GPIO_SHIFT_SRCLK
 15

	)

48 
	#ARCHER_C7_GPIO_SHIFT_RCLK
 16

	)

49 
	#ARCHER_C7_GPIO_SHIFT_SRCLR
 21

	)

51 
	#ARCHER_C7_GPIO_BTN_RESET
 5

	)

52 
	#ARCHER_C7_GPIO_BTN_WPS_WIFI
 2

	)

54 
	#ARCHER_C7_GPIO_LED_WLAN5
 9

	)

55 
	#ARCHER_C7_GPIO_LED_POWER
 6

	)

56 
	#ARCHER_C7_GPIO_LED_USB1
 7

	)

57 
	#ARCHER_C7_GPIO_LED_USB2
 8

	)

59 
	#ARCHER_C7_74HC_GPIO_BASE
 32

	)

60 
	#ARCHER_C7_GPIO_LED_WPS
 (
ARCHER_C7_74HC_GPIO_BASE
 + 0)

	)

61 
	#ARCHER_C7_GPIO_LED_LAN1
 (
ARCHER_C7_74HC_GPIO_BASE
 + 1)

	)

62 
	#ARCHER_C7_GPIO_LED_LAN2
 (
ARCHER_C7_74HC_GPIO_BASE
 + 2)

	)

63 
	#ARCHER_C7_GPIO_LED_LAN3
 (
ARCHER_C7_74HC_GPIO_BASE
 + 3)

	)

64 
	#ARCHER_C7_GPIO_LED_LAN4
 (
ARCHER_C7_74HC_GPIO_BASE
 + 4)

	)

65 
	#ARCHER_C7_GPIO_LED_WAN_GREEN
 (
ARCHER_C7_74HC_GPIO_BASE
 + 5)

	)

66 
	#ARCHER_C7_GPIO_LED_WAN_AMBER
 (
ARCHER_C7_74HC_GPIO_BASE
 + 6)

	)

67 
	#ARCHER_C7_GPIO_LED_WLAN2
 (
ARCHER_C7_74HC_GPIO_BASE
 + 7)

	)

69 
	#ARCHER_C7_KEYS_POLL_INTERVAL
 20

	)

70 
	#ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ARCHER_C7_KEYS_POLL_INTERVAL
)

	)

72 
	#ARCHER_C7_MAC0_OFFSET
 0

	)

73 
	#ARCHER_C7_MAC1_OFFSET
 6

	)

74 
	#ARCHER_C7_WMAC_CALDATA_OFFSET
 0x1000

	)

76 
	#ARCHER_C7_GPIO_MDC
 3

	)

77 
	#ARCHER_C7_GPIO_MDIO
 4

	)

79 
•i_gpio_∂©f‹m_d©a
 
	g¨chî_c7_v4_•i_d©a
 = {

80 .
sck
 = 
ARCHER_C7_GPIO_SHIFT_SRCLK
,

81 .
	gmiso
 = 
SPI_GPIO_NO_MISO
,

82 .
	gmosi
 = 
ARCHER_C7_GPIO_SHIFT_SER
,

83 .
	gnum_chù£À˘
 = 1,

86 
u8
 
	g¨chî_c7_v4_s§_öôd©a
 = 0xff;

88 
gí_74x164_chù_∂©f‹m_d©a
 
	g¨chî_c7_v4_s§_d©a
 = {

89 .
ba£
 = 
ARCHER_C7_74HC_GPIO_BASE
,

90 .
	gnum_ªgi°îs
 = 1,

91 .
	göô_d©a
 = &
¨chî_c7_v4_s§_öôd©a
,

94 
∂©f‹m_devi˚
 
	g¨chî_c7_v4_•i_devi˚
 = {

95 .
«me
 = "spi_gpio",

96 .
	gid
 = 1,

97 .
	gdev
 = {

98 .
∂©f‹m_d©a
 = &
¨chî_c7_v4_•i_d©a
,

102 
•i_bﬂrd_öfo
 
	g¨chî_c7_v4_•i_öfo
[] = {

104 .
bus_num
 = 1,

105 .
	gchù_£À˘
 = 0,

106 .
	gmax_•ìd_hz
 = 10000000,

107 .
	gmodÆüs
 = "74x164",

108 .
	g∂©f‹m_d©a
 = &
¨chî_c7_v4_s§_d©a
,

109 .
	gc⁄åﬁÀr_d©a
 = (*Ë
ARCHER_C7_GPIO_SHIFT_RCLK
,

113 
gpio_Àd
 
	g¨chî_c7_v4_Àds_gpio
[] 
	g__öôd©a
 = {

115 .
«me
 = "archer-c7-v4:green:power",

116 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_POWER
,

117 .
	ga˘ive_low
 = 1,

119 .
	g«me
 = "archer-c7-v4:green:wps",

120 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WPS
,

121 .
	ga˘ive_low
 = 1,

123 .
	g«me
 = "archer-c7-v4:green:wlan2g",

124 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN2
,

125 .
	ga˘ive_low
 = 1,

127 .
	g«me
 = "archer-c7-v4:green:wlan5g",

128 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN5
,

129 .
	ga˘ive_low
 = 1,

131 .
	g«me
 = "archer-c7-v4:green:lan1",

132 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN1
,

133 .
	ga˘ive_low
 = 1,

135 .
	g«me
 = "archer-c7-v4:green:lan2",

136 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN2
,

137 .
	ga˘ive_low
 = 1,

139 .
	g«me
 = "archer-c7-v4:green:lan3",

140 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN3
,

141 .
	ga˘ive_low
 = 1,

143 .
	g«me
 = "archer-c7-v4:green:lan4",

144 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN4
,

145 .
	ga˘ive_low
 = 1,

147 .
	g«me
 = "archer-c7-v4:green:wan",

148 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WAN_GREEN
,

149 .
	ga˘ive_low
 = 1,

151 .
	g«me
 = "archer-c7-v4:amber:wan",

152 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WAN_AMBER
,

153 .
	ga˘ive_low
 = 1,

155 .
	g«me
 = "archer-c7-v4:green:usb1",

156 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_USB1
,

157 .
	ga˘ive_low
 = 1,

159 .
	g«me
 = "archer-c7-v4:green:usb2",

160 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_USB2
,

161 .
	ga˘ive_low
 = 1,

165 
gpio_keys_buâ⁄
 
	g¨chî_c7_v4_gpio_keys
[] 
	g__öôd©a
 = {

167 .
desc
 = "WPSánd WIFI button",

168 .
	gty≥
 = 
EV_KEY
,

169 .
	gcode
 = 
KEY_WPS_BUTTON
,

170 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

171 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_WPS_WIFI
,

172 .
	ga˘ive_low
 = 1,

175 .
	gdesc
 = "Reset button",

176 .
	gty≥
 = 
EV_KEY
,

177 .
	gcode
 = 
KEY_RESTART
,

178 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

179 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_RESET
,

180 .
	ga˘ive_low
 = 1,

184 
¨8327_∑d_cfg
 
	g¨chî_c7_v4_¨8337_∑d0_cfg
 = {

185 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

186 .
	gsgmii_dñay_í
 = 
åue
,

189 
¨8327_∂©f‹m_d©a
 
	g¨chî_c7_v4_¨8337_d©a
 = {

190 .
∑d0_cfg
 = &
¨chî_c7_v4_¨8337_∑d0_cfg
,

191 .
	gp‹t0_cfg
 = {

192 .
f‹˚_lök
 = 1,

193 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

194 .
	gdu∂ex
 = 1,

195 .
	gtx∑u£
 = 1,

196 .
	grx∑u£
 = 1,

200 
mdio_bﬂrd_öfo
 
	g¨chî_c7_v4_mdio0_öfo
[] = {

202 .
bus_id
 = "ag71xx-mdio.0",

203 .
	gmdio_addr
 = 0,

204 .
	g∂©f‹m_d©a
 = &
¨chî_c7_v4_¨8337_d©a
,

209 
__öô
 
	$¨chî_c7_v4_£tup
()

211 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

212 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ff00008);

214 
	`©h79_ªgi°î_m25p80
(
NULL
);

216 
	`•i_ªgi°î_bﬂrd_öfo
(
¨chî_c7_v4_•i_öfo
,

217 
	`ARRAY_SIZE
(
¨chî_c7_v4_•i_öfo
));

219 
	`∂©f‹m_devi˚_ªgi°î
(&
¨chî_c7_v4_•i_devi˚
);

221 
	`gpio_ªque°_⁄e
(
ARCHER_C7_GPIO_SHIFT_OE
,

222 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

225 
	`gpio_ªque°_⁄e
(
ARCHER_C7_GPIO_SHIFT_SRCLR
,

226 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

229 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c7_v4_Àds_gpio
),

230 
¨chî_c7_v4_Àds_gpio
);

232 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

233 
	`ARRAY_SIZE
(
¨chî_c7_v4_gpio_keys
),

234 
¨chî_c7_v4_gpio_keys
);

236 
	`©h79_ªgi°î_usb
();

238 
	`©h79_gpio_ouçut_£À˘
(
ARCHER_C7_GPIO_MDC
, 
QCA956X_GPIO_OUT_MUX_GE0_MDC
);

239 
	`©h79_gpio_ouçut_£À˘
(
ARCHER_C7_GPIO_MDIO
, 
QCA956X_GPIO_OUT_MUX_GE0_MDO
);

241 
	`©h79_ªgi°î_mdio
(0, 0x0);

243 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
¨chî_c7_v4_mdio0_öfo
,

244 
	`ARRAY_SIZE
(
¨chî_c7_v4_mdio0_öfo
));

246 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C7_WMAC_CALDATA_OFFSET
, 
mac
);

247 
	`©h79_ªgi°î_pci
();

250 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

251 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

252 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

253 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

254 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

255 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

256 
	`©h79_ªgi°î_ëh
(0);

257 
	}
}

259 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C7_V4
, "ARCHER-C7-V4", "TP-LINK Archer C7 v4",

260 
¨chî_c7_v4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c7-v5.c

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<löux/¥oc_fs.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/•i/•i_gpio.h
>

29 
	~<löux/•i/74x164.h
>

31 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

33 
	~"comm⁄.h
"

34 
	~"dev-m25p80.h
"

35 
	~"machty≥s.h
"

36 
	~"pci.h
"

37 
	~"dev-ëh.h
"

38 
	~"dev-gpio-buâ⁄s.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-•i.h
"

41 
	~"dev-usb.h
"

42 
	~"dev-wmac.h
"

45 
	#ARCHER_C7_GPIO_BTN_RESET
 5

	)

46 
	#ARCHER_C7_GPIO_BTN_WPS_WIFI
 2

	)

48 
	#ARCHER_C7_GPIO_LED_WLAN5
 9

	)

49 
	#ARCHER_C7_GPIO_LED_POWER
 6

	)

50 
	#ARCHER_C7_GPIO_LED_USB
 7

	)

51 
	#ARCHER_C7_GPIO_LED_WPS
 1

	)

52 
	#ARCHER_C7_GPIO_LED_LAN1
 8

	)

53 
	#ARCHER_C7_GPIO_LED_LAN2
 17

	)

54 
	#ARCHER_C7_GPIO_LED_LAN3
 16

	)

55 
	#ARCHER_C7_GPIO_LED_LAN4
 15

	)

56 
	#ARCHER_C7_GPIO_LED_WAN_GREEN
 21

	)

57 
	#ARCHER_C7_GPIO_LED_WAN_AMBER
 20

	)

58 
	#ARCHER_C7_GPIO_LED_WLAN2
 14

	)

59 
	#ARCHER_C7_GPIO_USB_PWR
 19

	)

61 
	#ARCHER_C7_KEYS_POLL_INTERVAL
 20

	)

62 
	#ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ARCHER_C7_KEYS_POLL_INTERVAL
)

	)

64 
	#ARCHER_C7_MAC0_OFFSET
 0

	)

65 
	#ARCHER_C7_MAC1_OFFSET
 6

	)

66 
	#ARCHER_C7_WMAC_CALDATA_OFFSET
 0x1000

	)

68 
	#ARCHER_C7_GPIO_MDC
 3

	)

69 
	#ARCHER_C7_GPIO_MDIO
 4

	)

71 
gpio_Àd
 
	g¨chî_c7_v5_Àds_gpio
[] 
	g__öôd©a
 = {

73 .
«me
 = "archer-c7-v5:green:power",

74 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_POWER
,

75 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "archer-c7-v5:green:wps",

78 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WPS
,

79 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "archer-c7-v5:green:wlan2g",

82 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN2
,

83 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "archer-c7-v5:green:wlan5g",

86 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN5
,

87 .
	ga˘ive_low
 = 1,

89 .
	g«me
 = "archer-c7-v5:green:lan1",

90 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN1
,

91 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "archer-c7-v5:green:lan2",

94 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN2
,

95 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "archer-c7-v5:green:lan3",

98 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN3
,

99 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "archer-c7-v5:green:lan4",

102 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_LAN4
,

103 .
	ga˘ive_low
 = 1,

105 .
	g«me
 = "archer-c7-v5:green:wan",

106 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WAN_GREEN
,

107 .
	ga˘ive_low
 = 1,

109 .
	g«me
 = "archer-c7-v5:amber:wan",

110 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WAN_AMBER
,

111 .
	ga˘ive_low
 = 1,

113 .
	g«me
 = "archer-c7-v5:green:usb",

114 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_USB
,

115 .
	ga˘ive_low
 = 1,

119 
gpio_keys_buâ⁄
 
	g¨chî_c7_v5_gpio_keys
[] 
	g__öôd©a
 = {

121 .
desc
 = "WPSánd WIFI button",

122 .
	gty≥
 = 
EV_KEY
,

123 .
	gcode
 = 
KEY_WPS_BUTTON
,

124 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

125 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_WPS_WIFI
,

126 .
	ga˘ive_low
 = 1,

129 .
	gdesc
 = "Reset button",

130 .
	gty≥
 = 
EV_KEY
,

131 .
	gcode
 = 
KEY_RESTART
,

132 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

133 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_RESET
,

134 .
	ga˘ive_low
 = 1,

139 
¨8327_∑d_cfg
 
	g¨chî_c7_v5_¨8337_∑d0_cfg
 = {

140 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

141 .
	gsgmii_dñay_í
 = 
åue
,

144 
¨8327_∂©f‹m_d©a
 
	g¨chî_c7_v5_¨8337_d©a
 = {

145 .
∑d0_cfg
 = &
¨chî_c7_v5_¨8337_∑d0_cfg
,

146 .
	gp‹t0_cfg
 = {

147 .
f‹˚_lök
 = 1,

148 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

149 .
	gdu∂ex
 = 1,

150 .
	gtx∑u£
 = 1,

151 .
	grx∑u£
 = 1,

155 
mdio_bﬂrd_öfo
 
	g¨chî_c7_v5_mdio0_öfo
[] = {

157 .
bus_id
 = "ag71xx-mdio.0",

158 .
	gmdio_addr
 = 0,

159 .
	g∂©f‹m_d©a
 = &
¨chî_c7_v5_¨8337_d©a
,

164 
__öô
 
	$¨chî_c7_v5_£tup
()

166 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050000);

167 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f060008);

169 
	`©h79_ªgi°î_m25p80
(
NULL
);

172 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c7_v5_Àds_gpio
),

173 
¨chî_c7_v5_Àds_gpio
);

175 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

176 
	`ARRAY_SIZE
(
¨chî_c7_v5_gpio_keys
),

177 
¨chî_c7_v5_gpio_keys
);

179 
	`©h79_ªgi°î_usb
();

181 
	`©h79_gpio_ouçut_£À˘
(
ARCHER_C7_GPIO_MDC
, 
QCA956X_GPIO_OUT_MUX_GE0_MDC
);

182 
	`©h79_gpio_ouçut_£À˘
(
ARCHER_C7_GPIO_MDIO
, 
QCA956X_GPIO_OUT_MUX_GE0_MDO
);

184 
	`©h79_ªgi°î_mdio
(0, 0x0);

186 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
¨chî_c7_v5_mdio0_öfo
,

187 
	`ARRAY_SIZE
(
¨chî_c7_v5_mdio0_öfo
));

189 
	`gpio_ªque°_⁄e
(
ARCHER_C7_GPIO_USB_PWR
,

190 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

193 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C7_WMAC_CALDATA_OFFSET
, 
mac
);

194 
	`©h79_ªgi°î_pci
();

197 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

198 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

199 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

200 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

201 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

202 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

203 
	`©h79_ªgi°î_ëh
(0);

204 
	}
}

206 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C7_V5
, "ARCHER-C7-V5", "TP-LINK Archer C7 v5",

207 
¨chî_c7_v5_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-archer-c7.c

25 
	~<löux/pci.h
>

26 
	~<löux/phy.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/∂©f‹m_devi˚.h
>

29 
	~<löux/©h9k_∂©f‹m.h
>

30 
	~<löux/¨8216_∂©f‹m.h
>

32 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

34 
	~"comm⁄.h
"

35 
	~"dev-≠9x-pci.h
"

36 
	~"dev-ëh.h
"

37 
	~"dev-gpio-buâ⁄s.h
"

38 
	~"dev-Àds-gpio.h
"

39 
	~"dev-m25p80.h
"

40 
	~"dev-•i.h
"

41 
	~"dev-usb.h
"

42 
	~"dev-wmac.h
"

43 
	~"machty≥s.h
"

44 
	~"pci.h
"

46 
	#ARCHER_C7_GPIO_LED_WLAN2G
 12

	)

47 
	#ARCHER_C7_GPIO_LED_SYSTEM
 14

	)

48 
	#ARCHER_C7_GPIO_LED_QSS
 15

	)

49 
	#ARCHER_C7_GPIO_LED_WLAN5G
 17

	)

50 
	#ARCHER_C7_GPIO_LED_USB1
 18

	)

51 
	#ARCHER_C7_GPIO_LED_USB2
 19

	)

53 
	#ARCHER_C7_GPIO_BTN_RFKILL
 13

	)

54 
	#ARCHER_C7_V2_GPIO_BTN_RFKILL
 23

	)

55 
	#ARCHER_C7_GPIO_BTN_RESET
 16

	)

57 
	#ARCHER_C7_GPIO_USB1_POWER
 22

	)

58 
	#ARCHER_C7_GPIO_USB2_POWER
 21

	)

60 
	#ARCHER_C7_KEYS_POLL_INTERVAL
 20

	)

61 
	#ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ARCHER_C7_KEYS_POLL_INTERVAL
)

	)

63 
	#ARCHER_C7_WMAC_CALDATA_OFFSET
 0x1000

	)

64 
	#ARCHER_C7_PCIE_CALDATA_OFFSET
 0x5000

	)

66 c⁄° *
	g¨chî_c7_∑π_¥obes
[] = {

68 
NULL
,

71 
Êash_∂©f‹m_d©a
 
	g¨chî_c7_Êash_d©a
 = {

72 .
∑π_¥obes
 = 
¨chî_c7_∑π_¥obes
,

75 
gpio_Àd
 
	g¨chî_c7_Àds_gpio
[] 
	g__öôd©a
 = {

77 .
«me
 = "tp-link:blue:qss",

78 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_QSS
,

79 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "tp-link:blue:system",

83 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_SYSTEM
,

84 .
	ga˘ive_low
 = 1,

87 .
	g«me
 = "tp-link:blue:wlan2g",

88 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN2G
,

89 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "tp-link:blue:wlan5g",

93 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_WLAN5G
,

94 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "tp-link:green:usb1",

98 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_USB1
,

99 .
	ga˘ive_low
 = 1,

102 .
	g«me
 = "tp-link:green:usb2",

103 .
	ggpio
 = 
ARCHER_C7_GPIO_LED_USB2
,

104 .
	ga˘ive_low
 = 1,

108 
gpio_keys_buâ⁄
 
	g¨chî_c7_gpio_keys
[] 
	g__öôd©a
 = {

110 .
desc
 = "Reset button",

111 .
	gty≥
 = 
EV_KEY
,

112 .
	gcode
 = 
KEY_WPS_BUTTON
,

113 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

114 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_RESET
,

115 .
	ga˘ive_low
 = 1,

118 .
	gdesc
 = "RFKILL switch",

119 .
	gty≥
 = 
EV_SW
,

120 .
	gcode
 = 
KEY_RFKILL
,

121 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

122 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_RFKILL
,

126 
gpio_keys_buâ⁄
 
	g¨chî_c7_v2_gpio_keys
[] 
	g__öôd©a
 = {

128 .
desc
 = "Reset button",

129 .
	gty≥
 = 
EV_KEY
,

130 .
	gcode
 = 
KEY_WPS_BUTTON
,

131 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

132 .
	ggpio
 = 
ARCHER_C7_GPIO_BTN_RESET
,

133 .
	ga˘ive_low
 = 1,

136 .
	gdesc
 = "RFKILL switch",

137 .
	gty≥
 = 
EV_SW
,

138 .
	gcode
 = 
KEY_RFKILL
,

139 .
	gdeboun˚_öãrvÆ
 = 
ARCHER_C7_KEYS_DEBOUNCE_INTERVAL
,

140 .
	ggpio
 = 
ARCHER_C7_V2_GPIO_BTN_RFKILL
,

144 c⁄° 
¨8327_Àd_öfo
 
	g¨chî_c7_Àds_¨8327
[] = {

145 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "tp-link:blue:wan"),

146 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "tp-link:blue:lan1"),

147 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "tp-link:blue:lan2"),

148 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "tp-link:blue:lan3"),

149 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "tp-link:blue:lan4"),

153 
¨8327_∑d_cfg
 
	g¨chî_c7_¨8327_∑d0_cfg
 = {

154 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

155 .
	gsgmii_dñay_í
 = 
åue
,

159 
¨8327_∑d_cfg
 
	g¨chî_c7_¨8327_∑d6_cfg
 = {

160 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

161 .
	gtx˛k_dñay_í
 = 
åue
,

162 .
	grx˛k_dñay_í
 = 
åue
,

163 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

164 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

167 
¨8327_Àd_cfg
 
	g¨chî_c7_¨8327_Àd_cfg
 = {

168 .
Àd_˘æ0
 = 0xc737c737,

169 .
	gÀd_˘æ1
 = 0x00000000,

170 .
	gÀd_˘æ2
 = 0x00000000,

171 .
	gÀd_˘æ3
 = 0x0030c300,

172 .
	g›í_døö
 = 
Ál£
,

175 
¨8327_∂©f‹m_d©a
 
	g¨chî_c7_¨8327_d©a
 = {

176 .
∑d0_cfg
 = &
¨chî_c7_¨8327_∑d0_cfg
,

177 .
	g∑d6_cfg
 = &
¨chî_c7_¨8327_∑d6_cfg
,

178 .
	gp‹t0_cfg
 = {

179 .
f‹˚_lök
 = 1,

180 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

181 .
	gdu∂ex
 = 1,

182 .
	gtx∑u£
 = 1,

183 .
	grx∑u£
 = 1,

185 .
	gp‹t6_cfg
 = {

186 .
f‹˚_lök
 = 1,

187 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

188 .
	gdu∂ex
 = 1,

189 .
	gtx∑u£
 = 1,

190 .
	grx∑u£
 = 1,

192 .
	gÀd_cfg
 = &
¨chî_c7_¨8327_Àd_cfg
,

193 .
	gnum_Àds
 = 
ARRAY_SIZE
(
¨chî_c7_Àds_¨8327
),

194 .
	gÀds
 = 
¨chî_c7_Àds_¨8327
,

197 
mdio_bﬂrd_öfo
 
	g¨chî_c7_mdio0_öfo
[] = {

199 .
bus_id
 = "ag71xx-mdio.0",

200 .
	gmdio_addr
 = 0,

201 .
	g∂©f‹m_d©a
 = &
¨chî_c7_¨8327_d©a
,

205 
__öô
 
	$comm⁄_£tup
(
boﬁ
 
pcõ_¶Ÿ
)

207 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

208 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

209 
u8
 
tmpmac
[
ETH_ALEN
];

211 
	`©h79_ªgi°î_m25p80
(&
¨chî_c7_Êash_d©a
);

212 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¨chî_c7_Àds_gpio
),

213 
¨chî_c7_Àds_gpio
);

215 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

216 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ARCHER_C7_WMAC_CALDATA_OFFSET
, 
tmpmac
);

218 i‡(
pcõ_¶Ÿ
) {

219 
	`©h79_ªgi°î_pci
();

221 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

222 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

223 
	`≠91_pci_öô
(
¨t
 + 
ARCHER_C7_PCIE_CALDATA_OFFSET
, 
tmpmac
);

226 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
¨chî_c7_mdio0_öfo
,

227 
	`ARRAY_SIZE
(
¨chî_c7_mdio0_öfo
));

228 
	`©h79_ªgi°î_mdio
(0, 0x0);

230 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

233 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

234 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

235 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

236 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

238 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

239 
	`©h79_ªgi°î_ëh
(0);

242 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

243 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

244 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

245 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

247 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

248 
	`©h79_ªgi°î_ëh
(1);

250 
	`gpio_ªque°_⁄e
(
ARCHER_C7_GPIO_USB1_POWER
,

251 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

253 
	`gpio_ªque°_⁄e
(
ARCHER_C7_GPIO_USB2_POWER
,

254 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

256 
	`©h79_ªgi°î_usb
();

257 
	}
}

259 
__öô
 
	$¨chî_c5_£tup
()

261 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

262 
	`ARRAY_SIZE
(
¨chî_c7_gpio_keys
),

263 
¨chî_c7_gpio_keys
);

264 
	`comm⁄_£tup
(
åue
);

265 
	}
}

267 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C5
, "ARCHER-C5", "TP-LINK Archer C5",

268 
¨chî_c5_£tup
);

270 
__öô
 
	$¨chî_c7_£tup
()

272 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

273 
	`ARRAY_SIZE
(
¨chî_c7_gpio_keys
),

274 
¨chî_c7_gpio_keys
);

275 
	`comm⁄_£tup
(
åue
);

276 
	}
}

278 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C7
, "ARCHER-C7", "TP-LINK Archer C7",

279 
¨chî_c7_£tup
);

281 
__öô
 
	$¨chî_c7_v2_£tup
()

283 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

284 
	`ARRAY_SIZE
(
¨chî_c7_v2_gpio_keys
),

285 
¨chî_c7_v2_gpio_keys
);

286 
	`comm⁄_£tup
(
åue
);

287 
	}
}

289 
MIPS_MACHINE
(
ATH79_MACH_ARCHER_C7_V2
, "ARCHER-C7-V2", "TP-LINK Archer C7",

290 
¨chî_c7_v2_£tup
);

292 
__öô
 
	$é_wdr4900_v2_£tup
()

294 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ARCHER_C7_KEYS_POLL_INTERVAL
,

295 
	`ARRAY_SIZE
(
¨chî_c7_gpio_keys
),

296 
¨chî_c7_gpio_keys
);

297 
	`comm⁄_£tup
(
Ál£
);

298 
	}
}

300 
MIPS_MACHINE
(
ATH79_MACH_TL_WDR4900_V2
, "TL-WDR4900-v2", "TP-LINK TL-WDR4900 v2",

301 
é_wdr4900_v2_£tup
)

	@linux/ar71xx/files/arch/mips/ath79/mach-arduino-yun.c

12 
	~"dev-ëh.h
"

13 
	~"dev-gpio-buâ⁄s.h
"

14 
	~"dev-Àds-gpio.h
"

15 
	~"dev-m25p80.h
"

16 
	~"dev-•i.h
"

17 
	~"dev-usb.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~<asm/mach-©h79/©h79.h
>

22 
	~<asm/mach-©h79/mach-lööo.h
>

23 
	~<löux/gpio.h
>

24 
	~"comm⁄.h
"

25 
	~<löux/•i/•i_gpio.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

29 
	#DS2_B


	)

31 
	#DS_GPIO_LED_WLAN
 0

	)

32 
	#DS_GPIO_LED_USB
 1

	)

34 
	#DS_GPIO_OE
 21

	)

35 
	#DS_GPIO_AVR_RESET
 18

	)

38 
	#DS_GPIO_AVR_RESET_DS2
 7

	)

40 
	#DS_GPIO_OE2
 22

	)

41 
	#DS_GPIO_UART_ENA
 23

	)

42 
	#DS_GPIO_CONF_BTN
 20

	)

44 
	#DS_KEYS_POLL_INTERVAL
 20

	)

45 
	#DS_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DS_KEYS_POLL_INTERVAL
)

	)

47 
	#DS_MAC0_OFFSET
 0x0000

	)

48 
	#DS_MAC1_OFFSET
 0x0006

	)

49 
	#DS_CALDATA_OFFSET
 0x1000

	)

50 
	#DS_WMAC_MAC_OFFSET
 0x1002

	)

53 
gpio_Àd
 
	gds_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "arduino:white:usb",

56 .
	ggpio
 = 
DS_GPIO_LED_USB
,

57 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "arduino:blue:wlan",

61 .
	ggpio
 = 
DS_GPIO_LED_WLAN
,

62 .
	ga˘ive_low
 = 0,

66 
gpio_keys_buâ⁄
 
	gds_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "configuration button",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_WPS_BUTTON
,

71 .
	gdeboun˚_öãrvÆ
 = 
DS_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
DS_GPIO_CONF_BTN
,

73 .
	ga˘ive_low
 = 1,

85 
•i_gpio_∂©f‹m_d©a
 
	g•i_bus1
 = {

86 .
sck
 = 
LININO_GPIO_SPI_SCK
,

87 .
	gmosi
 = 
LININO_GPIO_SPI_MOSI
,

88 .
	gmiso
 = 
LININO_GPIO_SPI_MISO
,

89 .
	gnum_chù£À˘
 = 
LININO_N_SPI_CHIP_SELECT
,

92 
∂©f‹m_devi˚
 
	glööo_•i1_devi˚
 = {

93 .
«me
 = "spi_gpio",

94 .
	gid
 = 1,

95 .
	gdev
.
	g∂©f‹m_d©a
 = &
•i_bus1
,

99 
•i_bﬂrd_öfo
 
	glööo_•i_öfo
[] = {

109 .
bus_num
 = 1,

110 .
	gchù_£À˘
 = 0,

111 .
	gmax_•ìd_hz
 = 10000000,

112 .
	gmode
 = 0,

113 .
	gmodÆüs
 = "atmega32u4",

114 .
	gc⁄åﬁÀr_d©a
 = (*Ë
LININO_GPIO_SPI_CS0
,

115 .
	g∂©f‹m_d©a
 = (*Ë
LININO_GPIO_SPI_INTERRUPT
,

122 
	$ds_ªgi°î_•i
() {

123 
	`¥_öfo
("mach-linino:Énabling GPIO SPI Controller");

126 
	`gpio_£t_vÆue
(
DS_GPIO_OE
, 1);

128 
	`gpio_£t_vÆue
(
DS_GPIO_OE2
, 1);

130 
	`•i_ªgi°î_bﬂrd_öfo
(
lööo_•i_öfo
, 
	`ARRAY_SIZE
(linino_spi_info));

132 
	`∂©f‹m_devi˚_ªgi°î
(&
lööo_•i1_devi˚
);

133 
	}
}

134 
__öô
 
	$ds_comm⁄_£tup
()

136 
u8
 
mac
[6];

138 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

139 
	`©h79_ªgi°î_m25p80
(
NULL
);

141 i‡(
	`¨93xx_wmac_ªad_mac_addªss
(
mac
)) {

142 
	`©h79_ªgi°î_wmac
(
NULL
, NULL);

144 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DS_CALDATA_OFFSET
,

145 
¨t
 + 
DS_WMAC_MAC_OFFSET
);

146 
	`mem˝y
(
mac
, 
¨t
 + 
DS_WMAC_MAC_OFFSET
, (mac));

149 
mac
[3] |= 0x08;

150 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

152 
mac
[3] &= 0xF7;

153 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

154 
	`©h79_ªgi°î_mdio
(0, 0x0);

157 
	`©h79_ªgi°î_ëh
(1);

160 
	`©h79_ªgi°î_ëh
(0);

161 
	}
}

163 
__öô
 
	$ds_£tup
()

165 
u32
 
t
;

167 
	`ds_comm⁄_£tup
();

169 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ds_Àds_gpio
),

170 
ds_Àds_gpio
);

171 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DS_KEYS_POLL_INTERVAL
,

172 
	`ARRAY_SIZE
(
ds_gpio_keys
),

173 
ds_gpio_keys
);

174 
	`©h79_ªgi°î_usb
();

177 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

178 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

179 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

180 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

181 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

185 
	`©h79_gpio_fun˘i⁄_£tup
(
AR933X_GPIO_FUNC_JTAG_DISABLE
 | 
AR933X_GPIO_FUNC_I2S_MCK_EN
, 0);

187 
	`©h79_gpio_fun˘i⁄2_£tup
(
AR933X_GPIO_FUNC2_JUMPSTART_DISABLE
, 0);

189 
	`¥ötk
("Setting DogStick2 GPIO\n");

191 
t
 = 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
);

192 
t
 |
AR933X_BOOTSTRAP_MDIO_GPIO_EN
;

193 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
, 
t
);

196 i‡(
	`gpio_ªque°_⁄e
(
DS_GPIO_AVR_RESET_DS2
,

197 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
, "OE-1") != 0)

198 
	`¥ötk
("Error setting GPIO OE\n");

199 
	`gpio_u√xp‹t
(
DS_GPIO_AVR_RESET_DS2
);

200 
	`gpio_‰ì
(
DS_GPIO_AVR_RESET_DS2
);

203 i‡(
	`gpio_ªque°_⁄e
(
DS_GPIO_OE
,

204 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
, "OE-1") != 0)

205 
	`¥ötk
("Error setting GPIO OE\n");

207 i‡(
	`gpio_ªque°_⁄e
(
DS_GPIO_UART_ENA
,

208 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
, "UART-ENA") != 0)

209 
	`¥ötk
("Error setting GPIO Uart Enable\n");

212 i‡(
	`gpio_ªque°_⁄e
(
DS_GPIO_OE2
,

213 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
, "OE-2") != 0)

214 
	`¥ötk
("Error setting GPIO OE2\n");

217 
	`ds_ªgi°î_•i
();

218 
	}
}

220 
MIPS_MACHINE
(
ATH79_MACH_ARDUINO_YUN
, "Yun", "ArduöÿYun", 
ds_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-aw-nr580.c

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"dev-ëh.h
"

15 
	~"dev-m25p80.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"machty≥s.h
"

19 
	~"pci.h
"

21 
	#AW_NR580_GPIO_LED_READY_RED
 0

	)

22 
	#AW_NR580_GPIO_LED_WLAN
 1

	)

23 
	#AW_NR580_GPIO_LED_READY_GREEN
 2

	)

24 
	#AW_NR580_GPIO_LED_WPS_GREEN
 4

	)

25 
	#AW_NR580_GPIO_LED_WPS_AMBER
 5

	)

27 
	#AW_NR580_GPIO_BTN_WPS
 3

	)

28 
	#AW_NR580_GPIO_BTN_RESET
 11

	)

30 
	#AW_NR580_KEYS_POLL_INTERVAL
 20

	)

31 
	#AW_NR580_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AW_NR580_KEYS_POLL_INTERVAL
)

	)

33 
gpio_Àd
 
	gaw_ƒ580_Àds_gpio
[] 
	g__öôd©a
 = {

35 .
«me
 = "aw-nr580:red:ready",

36 .
	ggpio
 = 
AW_NR580_GPIO_LED_READY_RED
,

37 .
	ga˘ive_low
 = 0,

39 .
	g«me
 = "aw-nr580:green:ready",

40 .
	ggpio
 = 
AW_NR580_GPIO_LED_READY_GREEN
,

41 .
	ga˘ive_low
 = 0,

43 .
	g«me
 = "aw-nr580:green:wps",

44 .
	ggpio
 = 
AW_NR580_GPIO_LED_WPS_GREEN
,

45 .
	ga˘ive_low
 = 0,

47 .
	g«me
 = "aw-nr580:amber:wps",

48 .
	ggpio
 = 
AW_NR580_GPIO_LED_WPS_AMBER
,

49 .
	ga˘ive_low
 = 0,

51 .
	g«me
 = "aw-nr580:green:wlan",

52 .
	ggpio
 = 
AW_NR580_GPIO_LED_WLAN
,

53 .
	ga˘ive_low
 = 0,

57 
gpio_keys_buâ⁄
 
	gaw_ƒ580_gpio_keys
[] 
	g__öôd©a
 = {

59 .
desc
 = "reset",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
KEY_RESTART
,

62 .
	gdeboun˚_öãrvÆ
 = 
AW_NR580_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
AW_NR580_GPIO_BTN_RESET
,

64 .
	ga˘ive_low
 = 1,

66 .
	gdesc
 = "wps",

67 .
	gty≥
 = 
EV_KEY
,

68 .
	gcode
 = 
KEY_WPS_BUTTON
,

69 .
	gdeboun˚_öãrvÆ
 = 
AW_NR580_KEYS_DEBOUNCE_INTERVAL
,

70 .
	ggpio
 = 
AW_NR580_GPIO_BTN_WPS
,

71 .
	ga˘ive_low
 = 1,

75 c⁄° *
	gaw_ƒ580_∑π_¥obes
[] = {

77 
NULL
,

80 
Êash_∂©f‹m_d©a
 
	gaw_ƒ580_Êash_d©a
 = {

81 .
∑π_¥obes
 = 
aw_ƒ580_∑π_¥obes
,

84 
__öô
 
	$aw_ƒ580_£tup
()

86 
	`©h79_ªgi°î_mdio
(0, 0x0);

88 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

89 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

90 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

92 
	`©h79_ªgi°î_ëh
(0);

94 
	`©h79_ªgi°î_pci
();

96 
	`©h79_ªgi°î_m25p80
(&
aw_ƒ580_Êash_d©a
);

98 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
aw_ƒ580_Àds_gpio
),

99 
aw_ƒ580_Àds_gpio
);

101 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AW_NR580_KEYS_POLL_INTERVAL
,

102 
	`ARRAY_SIZE
(
aw_ƒ580_gpio_keys
),

103 
aw_ƒ580_gpio_keys
);

104 
	}
}

106 
MIPS_MACHINE
(
ATH79_MACH_AW_NR580
, "AW-NR580", "AzureWave AW-NR580",

107 
aw_ƒ580_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-bhr-4grv2.c

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

27 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

29 
	~"comm⁄.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"machty≥s.h
"

36 
	#BHR_4GRV2_GPIO_LED_VPN_RED
 3

	)

37 
	#BHR_4GRV2_GPIO_LED_VPN_GREEN
 18

	)

38 
	#BHR_4GRV2_GPIO_LED_POWER_GREEN
 19

	)

39 
	#BHR_4GRV2_GPIO_LED_DIAG_RED
 20

	)

41 
	#BHR_4GRV2_GPIO_BTN_RESET
 17

	)

42 
	#BHR_4GRV2_GPIO_BTN_ECO
 21

	)

44 
	#BHR_4GRV2_KEYS_POLL_INTERVAL
 20

	)

45 
	#BHR_4GRV2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
BHR_4GRV2_KEYS_POLL_INTERVAL
)

	)

46 
	#BHR_4GRV2_MAC0_OFFSET
 0

	)

47 
	#BHR_4GRV2_MAC1_OFFSET
 6

	)

49 
gpio_Àd
 
	gbhr_4grv2_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "buffalo:red:vpn",

52 .
	ggpio
 = 
BHR_4GRV2_GPIO_LED_VPN_RED
,

53 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "buffalo:green:vpn",

57 .
	ggpio
 = 
BHR_4GRV2_GPIO_LED_VPN_GREEN
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "buffalo:green:power",

62 .
	ggpio
 = 
BHR_4GRV2_GPIO_LED_POWER_GREEN
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "buffalo:red:diag",

67 .
	ggpio
 = 
BHR_4GRV2_GPIO_LED_DIAG_RED
,

68 .
	ga˘ive_low
 = 1,

72 
gpio_keys_buâ⁄
 
	gbhr_4grv2_gpio_keys
[] 
	g__öôd©a
 = {

74 .
desc
 = "Reset button",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
KEY_RESTART
,

77 .
	gdeboun˚_öãrvÆ
 = 
BHR_4GRV2_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
BHR_4GRV2_GPIO_BTN_RESET
,

79 .
	ga˘ive_low
 = 1,

82 .
	gdesc
 = "ECO button",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
BTN_0
,

85 .
	gdeboun˚_öãrvÆ
 = 
BHR_4GRV2_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
BHR_4GRV2_GPIO_BTN_ECO
,

87 .
	ga˘ive_low
 = 1,

92 
¨8327_∑d_cfg
 
	gbhr_4grv2_¨8327_∑d0_cfg
 = {

93 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

94 .
	gsgmii_dñay_í
 = 
åue
,

98 
¨8327_∑d_cfg
 
	gbhr_4grv2_¨8327_∑d6_cfg
 = {

99 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

100 .
	gtx˛k_dñay_í
 = 
åue
,

101 .
	grx˛k_dñay_í
 = 
åue
,

102 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

103 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

106 
¨8327_∂©f‹m_d©a
 
	gbhr_4grv2_¨8327_d©a
 = {

107 .
∑d0_cfg
 = &
bhr_4grv2_¨8327_∑d0_cfg
,

108 .
	g∑d6_cfg
 = &
bhr_4grv2_¨8327_∑d6_cfg
,

109 .
	gp‹t0_cfg
 = {

110 .
f‹˚_lök
 = 1,

111 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

112 .
	gdu∂ex
 = 1,

113 .
	gtx∑u£
 = 1,

114 .
	grx∑u£
 = 1,

116 .
	gp‹t6_cfg
 = {

117 .
f‹˚_lök
 = 1,

118 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

119 .
	gdu∂ex
 = 1,

120 .
	gtx∑u£
 = 1,

121 .
	grx∑u£
 = 1,

125 
mdio_bﬂrd_öfo
 
	gbhr_4grv2_mdio0_öfo
[] = {

127 .
bus_id
 = "ag71xx-mdio.0",

128 .
	gmdio_addr
 = 0,

129 .
	g∂©f‹m_d©a
 = &
bhr_4grv2_¨8327_d©a
,

133 
__öô
 
	$bhr_4grv2_£tup
()

135 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

137 
	`©h79_ªgi°î_m25p80
(
NULL
);

139 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
bhr_4grv2_Àds_gpio
),

140 
bhr_4grv2_Àds_gpio
);

141 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
BHR_4GRV2_KEYS_POLL_INTERVAL
,

142 
	`ARRAY_SIZE
(
bhr_4grv2_gpio_keys
),

143 
bhr_4grv2_gpio_keys
);

145 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
bhr_4grv2_mdio0_öfo
,

146 
	`ARRAY_SIZE
(
bhr_4grv2_mdio0_öfo
));

147 
	`©h79_ªgi°î_mdio
(0, 0x0);

149 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

152 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

153 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

154 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

155 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

157 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
BHR_4GRV2_MAC0_OFFSET
, 0);

158 
	`©h79_ªgi°î_ëh
(0);

161 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

162 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

163 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

164 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

166 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
BHR_4GRV2_MAC1_OFFSET
, 0);

167 
	`©h79_ªgi°î_ëh
(1);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_BHR_4GRV2
, "BHR-4GRV2",

171 "BufÁlÿBHR-4GRV2", 
bhr_4grv2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-bhu-bxu2000n2-a.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#BHU_BXU2000N2_A1_GPIO_LED_WLAN
 13

	)

27 
	#BHU_BXU2000N2_A1_GPIO_LED_WAN
 19

	)

28 
	#BHU_BXU2000N2_A1_GPIO_LED_LAN
 21

	)

29 
	#BHU_BXU2000N2_A1_GPIO_LED_SYSTEM
 14

	)

31 
	#BHU_BXU2000N2_A1_GPIO_BTN_RESET
 17

	)

33 
	#BHU_BXU2000N2_KEYS_POLL_INTERVAL
 20

	)

34 
	#BHU_BXU2000N2_KEYS_DEBOUNCE_INTERVAL
 \

35 (3 * 
BHU_BXU2000N2_KEYS_POLL_INTERVAL
)

	)

37 c⁄° *
	gbhu_bxu2000n2_∑π_¥obes
[] = {

39 
NULL
,

42 
Êash_∂©f‹m_d©a
 
	gbhu_bxu2000n2_Êash_d©a
 = {

43 .
∑π_¥obes
 = 
bhu_bxu2000n2_∑π_¥obes
,

46 
gpio_Àd
 
	gbhu_bxu2000n2_a1_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "bhu:green:status",

49 .
	ggpio
 = 
BHU_BXU2000N2_A1_GPIO_LED_SYSTEM
,

50 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "bhu:green:lan",

53 .
	ggpio
 = 
BHU_BXU2000N2_A1_GPIO_LED_LAN
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "bhu:green:wan",

57 .
	ggpio
 = 
BHU_BXU2000N2_A1_GPIO_LED_WAN
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "bhu:green:wlan",

61 .
	ggpio
 = 
BHU_BXU2000N2_A1_GPIO_LED_WLAN
,

62 .
	ga˘ive_low
 = 1,

66 
gpio_keys_buâ⁄
 
	gbhu_bxu2000n2_a1_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "Reset button",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_RESTART
,

71 .
	gdeboun˚_öãrvÆ
 = 
BHU_BXU2000N2_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
BHU_BXU2000N2_A1_GPIO_BTN_RESET
,

73 .
	ga˘ive_low
 = 1,

77 
__öô
 
	$bhu_≠123_£tup
()

79 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

80 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

82 
	`©h79_ªgi°î_m25p80
(&
bhu_bxu2000n2_Êash_d©a
);

84 
	`©h79_ªgi°î_mdio
(1, 0x0);

86 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

87 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

90 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

91 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

92 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

93 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

94 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

95 
	`©h79_ªgi°î_ëh
(0);

98 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

99 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(3);

100 
	`©h79_ªgi°î_ëh
(1);

102 
	`©h79_ªgi°î_wmac
(
ì
,Ée+2);

103 
	}
}

105 
__öô
 
	$bhu_bxu2000n2_a1_£tup
()

107 
	`bhu_≠123_£tup
();

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
bhu_bxu2000n2_a1_Àds_gpio
),

110 
bhu_bxu2000n2_a1_Àds_gpio
);

112 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
BHU_BXU2000N2_KEYS_POLL_INTERVAL
,

113 
	`ARRAY_SIZE
(
bhu_bxu2000n2_a1_gpio_keys
),

114 
bhu_bxu2000n2_a1_gpio_keys
);

115 
	}
}

117 
MIPS_MACHINE
(
ATH79_MACH_BHU_BXU2000N2_A1
, "BXU2000n-2-A1",

119 
bhu_bxu2000n2_a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-bsb.c

11 
	~<asm/mach-©h79/©h79.h
>

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

13 
	~"comm⁄.h
"

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-•i.h
"

19 
	~"dev-usb.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#BSB_GPIO_LED_SYS
 27

	)

25 
	#BSB_GPIO_BTN_RESET
 11

	)

27 
	#BSB_KEYS_POLL_INTERVAL
 20

	)

28 
	#BSB_KEYS_DEBOUNCE_INTERVAL
 (3 * 
BSB_KEYS_POLL_INTERVAL
)

	)

30 
	#BSB_MAC_OFFSET
 0x0000

	)

31 
	#BSB_CALDATA_OFFSET
 0x1000

	)

33 
gpio_Àd
 
	gbsb_Àds_gpio
[] 
	g__öôd©a
 = {

35 .
«me
 = "bsb:red:sys",

36 .
	ggpio
 = 
BSB_GPIO_LED_SYS
,

37 .
	ga˘ive_low
 = 1,

41 
gpio_keys_buâ⁄
 
	gbsb_gpio_keys
[] 
	g__öôd©a
 = {

43 .
desc
 = "reset button",

44 .
	gty≥
 = 
EV_KEY
,

45 .
	gcode
 = 
KEY_RESTART
,

46 .
	gdeboun˚_öãrvÆ
 = 
BSB_KEYS_DEBOUNCE_INTERVAL
,

47 .
	ggpio
 = 
BSB_GPIO_BTN_RESET
,

48 .
	ga˘ive_low
 = 1,

52 
__öô
 
	$bsb_£tup
()

54 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

57 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
,false);

59 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
bsb_Àds_gpio
),

60 
bsb_Àds_gpio
);

61 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
BSB_KEYS_POLL_INTERVAL
,

62 
	`ARRAY_SIZE
(
bsb_gpio_keys
),

63 
bsb_gpio_keys
);

65 
	`©h79_ªgi°î_usb
();

67 
	`©h79_ªgi°î_m25p80
(
NULL
);

69 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
BSB_MAC_OFFSET
, 1);

70 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
BSB_MAC_OFFSET
, 2);

72 
	`©h79_ªgi°î_mdio
(0, 0x0);

74 
	`©h79_ªgi°î_ëh
(0);

75 
	`©h79_ªgi°î_ëh
(1);

77 
	`©h79_ªgi°î_wmac
(
¨t
 + 
BSB_CALDATA_OFFSET
,

78 
¨t
 + 
BSB_MAC_OFFSET
);

79 
	}
}

81 
MIPS_MACHINE
(
ATH79_MACH_BSB
, "BSB", "Smart Electronics Black Swift board",

82 
bsb_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-c55.c

15 
	~<löux/pci.h
>

16 
	~<löux/phy.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/mtd/physm≠.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/©h9k_∂©f‹m.h
>

23 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

25 
	~"comm⁄.h
"

26 
	~"pci.h
"

27 
	~"dev-≠9x-pci.h
"

28 
	~"dev-ëh.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-Àds-gpio.h
"

31 
	~"dev-m25p80.h
"

32 
	~"dev-•i.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

36 
	#C55_GPIO_LED_PWR_GREEN
 12

	)

37 
	#C55_GPIO_LED_PWR_AMBER
 13

	)

38 
	#C55_GPIO_LED_LAN_GREEN
 14

	)

39 
	#C55_GPIO_LED_LAN_AMBER
 15

	)

40 
	#C55_GPIO_LED_WLAN_GREEN
 18

	)

41 
	#C55_GPIO_LED_WLAN_AMBER
 19

	)

43 
	#C55_GPIO_BTN_RESET
 17

	)

45 
	#C55_KEYS_POLL_INTERVAL
 20

	)

46 
	#C55_KEYS_DEBOUNCE_INTERVAL
 (3 * 
C55_KEYS_POLL_INTERVAL
)

	)

48 
	#C55_MAC_OFFSET
 0

	)

49 
	#C55_WMAC_CALDATA_OFFSET
 0x1000

	)

50 
	#C55_PCIE_CALDATA_OFFSET
 0x5000

	)

52 
gpio_Àd
 
	gc55_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "c-55:green:pwr",

55 .
	ggpio
 = 
C55_GPIO_LED_PWR_GREEN
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "c-55:amber:pwr",

60 .
	ggpio
 = 
C55_GPIO_LED_PWR_AMBER
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "c-55:green:lan",

65 .
	ggpio
 = 
C55_GPIO_LED_LAN_GREEN
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "c-55:amber:lan",

70 .
	ggpio
 = 
C55_GPIO_LED_LAN_AMBER
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "c-55:green:wlan",

75 .
	ggpio
 = 
C55_GPIO_LED_WLAN_GREEN
,

76 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "c-55:amber:wlan",

80 .
	ggpio
 = 
C55_GPIO_LED_WLAN_AMBER
,

81 .
	ga˘ive_low
 = 1,

85 
gpio_keys_buâ⁄
 
	gc55_gpio_keys
[] 
	g__öôd©a
 = {

87 .
desc
 = "Reset button",

88 .
	gty≥
 = 
EV_KEY
,

89 .
	gcode
 = 
KEY_RESTART
,

90 .
	gdeboun˚_öãrvÆ
 = 
C55_KEYS_DEBOUNCE_INTERVAL
,

91 .
	ggpio
 = 
C55_GPIO_BTN_RESET
,

92 .
	ga˘ive_low
 = 1,

96 
__öô
 
	$c55_£tup
()

99 
	`©h79_ªgi°î_m25p80
(
NULL
);

102 
	`©h79_ªgi°î_mdio
(0, 0x0);

105 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

106 
AR934X_ETH_CFG_SW_ONLY_MODE
);

107 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
NULL
, 0);

108 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

109 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

110 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

111 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

112 
	`©h79_ªgi°î_ëh
(0);

115 
	`©h79_gpio_ouçut_£À˘
(
C55_GPIO_LED_LAN_GREEN
,

116 
AR934X_GPIO_OUT_GPIO
);

117 
	`©h79_gpio_ouçut_£À˘
(
C55_GPIO_LED_LAN_AMBER
,

118 
AR934X_GPIO_OUT_GPIO
);

119 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
c55_Àds_gpio
),

120 
c55_Àds_gpio
);

121 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
C55_KEYS_POLL_INTERVAL
,

122 
	`ARRAY_SIZE
(
c55_gpio_keys
),

123 
c55_gpio_keys
);

126 
	`©h79_wmac_dißbÀ_2ghz
();

127 
	`©h79_ªgi°î_wmac_sim∂e
();

128 
	`≠91_pci_öô_sim∂e
();

130 
	}
}

131 
MIPS_MACHINE
(
ATH79_MACH_C55
, "C-55", "AirTight Networks C-55",

132 
c55_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-c60.c

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/pci.h
>

17 
	~<löux/phy.h
>

18 
	~<löux/mtd/mtd.h
>

19 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

20 
	~<löux/mtd/«nd.h
>

22 
	~<löux/mtd/øw«nd.h
>

24 
	~<löux/mtd/∑πôi⁄s.h
>

25 
	~<löux/mtd/physm≠.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/∂©f‹m/¨934x_nfc.h
>

28 
	~<löux/¨8216_∂©f‹m.h
>

29 
	~<löux/©h9k_∂©f‹m.h
>

30 
	~<löux/vîsi⁄.h
>

32 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

34 
	~"comm⁄.h
"

35 
	~"pci.h
"

36 
	~"dev-≠9x-pci.h
"

37 
	~"dev-ëh.h
"

38 
	~"dev-gpio-buâ⁄s.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-m25p80.h
"

41 
	~"dev-•i.h
"

42 
	~"dev-wmac.h
"

43 
	~"dev-usb.h
"

44 
	~"dev-nfc.h
"

45 
	~"machty≥s.h
"

47 
	#C60_GPIO_LED_PWR_AMBER
 11

	)

48 
	#C60_GPIO_LED_WLAN2_GREEN
 12

	)

49 
	#C60_GPIO_LED_WLAN2_AMBER
 13

	)

50 
	#C60_GPIO_LED_PWR_GREEN
 16

	)

52 
	#C60_GPIO_BTN_RESET
 17

	)

55 
	#C60_GPIO_WMAC_LED_WLAN1_AMBER
 0

	)

56 
	#C60_GPIO_WMAC_LED_WLAN1_GREEN
 3

	)

58 
	#C60_KEYS_POLL_INTERVAL
 20

	)

59 
	#C60_KEYS_DEBOUNCE_INTERVAL
 (3 * 
C60_KEYS_POLL_INTERVAL
)

	)

61 
	#C60_ART_ADDR
 0x1f7f0000

	)

62 
	#C60_ART_SIZE
 0xffff

	)

63 
	#C60_MAC_OFFSET
 0

	)

64 
	#C60_WMAC_CALDATA_OFFSET
 0x1000

	)

65 
	#C60_PCIE_CALDATA_OFFSET
 0x5000

	)

67 
gpio_Àd
 
	gc60_Àds_gpio
[] 
	g__öôd©a
 = {

69 .
«me
 = "c-60:amber:pwr",

70 .
	ggpio
 = 
C60_GPIO_LED_PWR_AMBER
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "c-60:green:pwr",

75 .
	ggpio
 = 
C60_GPIO_LED_PWR_GREEN
,

76 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "c-60:green:wlan2",

80 .
	ggpio
 = 
C60_GPIO_LED_WLAN2_GREEN
,

81 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "c-60:amber:wlan2",

85 .
	ggpio
 = 
C60_GPIO_LED_WLAN2_AMBER
,

86 .
	ga˘ive_low
 = 1,

90 
gpio_keys_buâ⁄
 
	gc60_gpio_keys
[] 
	g__öôd©a
 = {

92 .
desc
 = "Reset button",

93 .
	gty≥
 = 
EV_KEY
,

94 .
	gcode
 = 
KEY_RESTART
,

95 .
	gdeboun˚_öãrvÆ
 = 
C60_KEYS_DEBOUNCE_INTERVAL
,

96 .
	ggpio
 = 
C60_GPIO_BTN_RESET
,

97 .
	ga˘ive_low
 = 1,

101 
¨8327_∑d_cfg
 
	gc60_¨8327_∑d0_cfg
 = {

102 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

103 .
	gtx˛k_dñay_í
 = 
åue
,

104 .
	grx˛k_dñay_í
 = 
åue
,

105 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

106 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

109 
¨8327_∂©f‹m_d©a
 
	gc60_¨8327_d©a
 = {

110 .
∑d0_cfg
 = &
c60_¨8327_∑d0_cfg
,

111 .
	gp‹t0_cfg
 = {

112 .
f‹˚_lök
 = 1,

113 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

114 .
	gdu∂ex
 = 1,

115 .
	gtx∑u£
 = 1,

116 .
	grx∑u£
 = 1,

120 
mdio_bﬂrd_öfo
 
	gc60_mdio0_öfo
[] = {

122 .
bus_id
 = "ag71xx-mdio.0",

123 .
	gmdio_addr
 = 0,

124 .
	g∂©f‹m_d©a
 = &
c60_¨8327_d©a
,

128 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

129 
«nd_ec˛ayout
 
	gc60_«nd_ec˛ayout
 = {

130 .
eccbyãs
 = 7,

131 .
	gec˝os
 = { 4, 8, 9, 10, 13, 14, 15 },

132 .
	goobavaû
 = 9,

133 .
	goob‰ì
 = { { 0, 3 }, { 6, 2 }, { 11, 2 }, }

138 
	$c60_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

139 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

141 
£˘i⁄
) {

143 
oobªgi⁄
->
off£t
 = 4;

144 
oobªgi⁄
->
Àngth
 = 1;

147 
oobªgi⁄
->
off£t
 = 8;

148 
oobªgi⁄
->
Àngth
 = 3;

151 
oobªgi⁄
->
off£t
 = 13;

152 
oobªgi⁄
->
Àngth
 = 3;

155  -
ERANGE
;

157 
	}
}

159 
	$c60_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

160 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

162 
£˘i⁄
) {

164 
oobªgi⁄
->
off£t
 = 0;

165 
oobªgi⁄
->
Àngth
 = 3;

168 
oobªgi⁄
->
off£t
 = 6;

169 
oobªgi⁄
->
Àngth
 = 2;

172 
oobªgi⁄
->
off£t
 = 11;

173 
oobªgi⁄
->
Àngth
 = 2;

176  -
ERANGE
;

178 
	}
}

180 c⁄° 
mtd_oobœyout_›s
 
	gc60_«nd_ec˛ayout_›s
 = {

181 .
ecc
 = 
c60_oobœyout_ecc
,

182 .
	g‰ì
 = 
c60_oobœyout_‰ì
,

186 
	$c60_«nd_sˇn_fixup
(
mtd_öfo
 *
mtd
)

188 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

189 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

191 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

194 
chù
->
ecc
.
size
 = 512;

195 
chù
->
ecc
.
°ªngth
 = 4;

196 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

197 
chù
->
ecc
.
œyout
 = &
c60_«nd_ec˛ayout
;

199 
	`mtd_£t_oobœyout
(
mtd
, &
c60_«nd_ec˛ayout_›s
);

202 
	}
}

204 
gpio_Àd
 
	gc60_wmac0_Àds_gpio
[] = {

206 .
«me
 = "c-60:amber:wlan1",

207 .
	ggpio
 = 
C60_GPIO_WMAC_LED_WLAN1_AMBER
,

208 .
	ga˘ive_low
 = 1,

211 .
	g«me
 = "c-60:green:wlan1",

212 .
	ggpio
 = 
C60_GPIO_WMAC_LED_WLAN1_GREEN
,

213 .
	ga˘ive_low
 = 1,

217 
__öô
 
	$c60_£tup
()

219 
u8
 
tmpmac
[6];

220 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
C60_ART_ADDR
);

223 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_SOFT_BCH
);

224 
	`©h79_nfc_£t_sˇn_fixup
(
c60_«nd_sˇn_fixup
);

225 
	`©h79_ªgi°î_nfc
();

228 
	`©h79_ªgi°î_m25p80
(
NULL
);

232 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

234 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
c60_mdio0_öfo
,

235 
	`ARRAY_SIZE
(
c60_mdio0_öfo
));

237 
	`©h79_ªgi°î_mdio
(0, 0x0);

240 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
C60_MAC_OFFSET
, 0);

241 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

242 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

243 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

244 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

245 
	`©h79_ªgi°î_ëh
(0);

248 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
c60_Àds_gpio
),

249 
c60_Àds_gpio
);

250 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
C60_KEYS_POLL_INTERVAL
,

251 
	`ARRAY_SIZE
(
c60_gpio_keys
),

252 
c60_gpio_keys
);

253 
	`≠9x_pci_£tup_wmac_Àds
(0, 
c60_wmac0_Àds_gpio
,

254 
	`ARRAY_SIZE
(
c60_wmac0_Àds_gpio
));

256 
	`©h79_ªgi°î_usb
();

259 
	`©h79_öô_mac
(
tmpmac
, 
¨t
 + 
C60_MAC_OFFSET
, 1);

260 
	`≠91_pci_öô
(
¨t
 + 
C60_PCIE_CALDATA_OFFSET
, 
tmpmac
);

261 
	`©h79_öô_mac
(
tmpmac
, 
¨t
 + 
C60_MAC_OFFSET
, 2);

262 
	`©h79_ªgi°î_wmac
(
¨t
 + 
C60_WMAC_CALDATA_OFFSET
, 
tmpmac
);

263 
	}
}

264 
MIPS_MACHINE
(
ATH79_MACH_C60
, "C-60", "AirTight Networks C-60",

265 
c60_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cap324.c

13 
	~<löux/pci.h
>

14 
	~<löux/phy.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#CAP324_GPIO_LED_POWER_GREEN
 12

	)

32 
	#CAP324_GPIO_LED_POWER_AMBER
 13

	)

33 
	#CAP324_GPIO_LED_LAN_GREEN
 14

	)

34 
	#CAP324_GPIO_LED_LAN_AMBER
 15

	)

35 
	#CAP324_GPIO_LED_WLAN_GREEN
 18

	)

36 
	#CAP324_GPIO_LED_WLAN_AMBER
 19

	)

38 
	#CAP324_GPIO_BTN_RESET
 17

	)

40 
	#CAP324_KEYS_POLL_INTERVAL
 20

	)

41 
	#CAP324_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CAP324_KEYS_POLL_INTERVAL
)

	)

43 
	#CAP324_MAC_OFFSET
 0

	)

44 
	#CAP324_WMAC_CALDATA_OFFSET
 0x1000

	)

45 
	#CAP324_PCIE_CALDATA_OFFSET
 0x5000

	)

47 
gpio_Àd
 
	gˇp324_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "pcs:green:power",

50 .
	ggpio
 = 
CAP324_GPIO_LED_POWER_GREEN
,

51 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "pcs:amber:power",

55 .
	ggpio
 = 
CAP324_GPIO_LED_POWER_AMBER
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "pcs:green:lan",

60 .
	ggpio
 = 
CAP324_GPIO_LED_LAN_GREEN
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "pcs:amber:lan",

65 .
	ggpio
 = 
CAP324_GPIO_LED_LAN_AMBER
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "pcs:green:wlan",

70 .
	ggpio
 = 
CAP324_GPIO_LED_WLAN_GREEN
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "pcs:amber:wlan",

75 .
	ggpio
 = 
CAP324_GPIO_LED_WLAN_AMBER
,

76 .
	ga˘ive_low
 = 1,

80 
gpio_keys_buâ⁄
 
	gˇp324_gpio_keys
[] 
	g__öôd©a
 = {

82 .
desc
 = "Reset button",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RESTART
,

85 .
	gdeboun˚_öãrvÆ
 = 
CAP324_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
CAP324_GPIO_BTN_RESET
,

87 .
	ga˘ive_low
 = 1,

91 
__öô
 
	$ˇp324_£tup
()

93 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

94 
u8
 
mac
[6];

96 
	`©h79_gpio_ouçut_£À˘
(
CAP324_GPIO_LED_LAN_GREEN
,

97 
AR934X_GPIO_OUT_GPIO
);

98 
	`©h79_gpio_ouçut_£À˘
(
CAP324_GPIO_LED_LAN_AMBER
,

99 
AR934X_GPIO_OUT_GPIO
);

101 
	`©h79_ªgi°î_m25p80
(
NULL
);

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ˇp324_Àds_gpio
),

104 
ˇp324_Àds_gpio
);

105 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CAP324_KEYS_POLL_INTERVAL
,

106 
	`ARRAY_SIZE
(
ˇp324_gpio_keys
),

107 
ˇp324_gpio_keys
);

109 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
CAP324_MAC_OFFSET
, -2);

110 
	`©h79_wmac_dißbÀ_2ghz
();

111 
	`©h79_ªgi°î_wmac
(
¨t
 + 
CAP324_WMAC_CALDATA_OFFSET
, 
mac
);

113 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
CAP324_MAC_OFFSET
, -1);

114 
	`≠91_pci_öô
(
¨t
 + 
CAP324_PCIE_CALDATA_OFFSET
, 
mac
);

116 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

117 
AR934X_ETH_CFG_SW_ONLY_MODE
);

119 
	`©h79_ªgi°î_mdio
(0, 0x0);

121 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

122 
¨t
 + 
CAP324_MAC_OFFSET
, 0);

125 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

126 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

127 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

128 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

129 
	`©h79_ªgi°î_ëh
(0);

130 
	}
}

132 
MIPS_MACHINE
(
ATH79_MACH_CAP324
, "CAP324", "PowerCloud Systems CAP324",

133 
ˇp324_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cap4200ag.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-•i.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

27 
	~"machty≥s.h
"

29 
	#CAP4200AG_GPIO_LED_PWR_GREEN
 12

	)

30 
	#CAP4200AG_GPIO_LED_PWR_AMBER
 13

	)

31 
	#CAP4200AG_GPIO_LED_LAN_GREEN
 14

	)

32 
	#CAP4200AG_GPIO_LED_LAN_AMBER
 15

	)

33 
	#CAP4200AG_GPIO_LED_WLAN_GREEN
 18

	)

34 
	#CAP4200AG_GPIO_LED_WLAN_AMBER
 19

	)

36 
	#CAP4200AG_GPIO_BTN_RESET
 17

	)

38 
	#CAP4200AG_KEYS_POLL_INTERVAL
 20

	)

39 
	#CAP4200AG_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CAP4200AG_KEYS_POLL_INTERVAL
)

	)

41 
	#CAP4200AG_MAC_OFFSET
 0

	)

42 
	#CAP4200AG_WMAC_CALDATA_OFFSET
 0x1000

	)

43 
	#CAP4200AG_PCIE_CALDATA_OFFSET
 0x5000

	)

45 
gpio_Àd
 
	gˇp4200ag_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "senao:green:pwr",

48 .
	ggpio
 = 
CAP4200AG_GPIO_LED_PWR_GREEN
,

49 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "senao:amber:pwr",

53 .
	ggpio
 = 
CAP4200AG_GPIO_LED_PWR_AMBER
,

54 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "senao:green:lan",

58 .
	ggpio
 = 
CAP4200AG_GPIO_LED_LAN_GREEN
,

59 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "senao:amber:lan",

63 .
	ggpio
 = 
CAP4200AG_GPIO_LED_LAN_AMBER
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "senao:green:wlan",

68 .
	ggpio
 = 
CAP4200AG_GPIO_LED_WLAN_GREEN
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "senao:amber:wlan",

73 .
	ggpio
 = 
CAP4200AG_GPIO_LED_WLAN_AMBER
,

74 .
	ga˘ive_low
 = 1,

78 
gpio_keys_buâ⁄
 
	gˇp4200ag_gpio_keys
[] 
	g__öôd©a
 = {

80 .
desc
 = "Reset button",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
KEY_RESTART
,

83 .
	gdeboun˚_öãrvÆ
 = 
CAP4200AG_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
CAP4200AG_GPIO_BTN_RESET
,

85 .
	ga˘ive_low
 = 1,

89 
__öô
 
	$ˇp4200ag_£tup
()

91 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

92 
u8
 
mac
[6];

94 
	`©h79_gpio_ouçut_£À˘
(
CAP4200AG_GPIO_LED_LAN_GREEN
,

95 
AR934X_GPIO_OUT_GPIO
);

96 
	`©h79_gpio_ouçut_£À˘
(
CAP4200AG_GPIO_LED_LAN_AMBER
,

97 
AR934X_GPIO_OUT_GPIO
);

99 
	`©h79_ªgi°î_m25p80
(
NULL
);

101 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ˇp4200ag_Àds_gpio
),

102 
ˇp4200ag_Àds_gpio
);

103 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CAP4200AG_KEYS_POLL_INTERVAL
,

104 
	`ARRAY_SIZE
(
ˇp4200ag_gpio_keys
),

105 
ˇp4200ag_gpio_keys
);

107 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
CAP4200AG_MAC_OFFSET
, -1);

108 
	`©h79_wmac_dißbÀ_2ghz
();

109 
	`©h79_ªgi°î_wmac
(
¨t
 + 
CAP4200AG_WMAC_CALDATA_OFFSET
, 
mac
);

111 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
CAP4200AG_MAC_OFFSET
, -2);

112 
	`≠91_pci_öô
(
¨t
 + 
CAP4200AG_PCIE_CALDATA_OFFSET
, 
mac
);

114 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

115 
AR934X_ETH_CFG_SW_ONLY_MODE
);

117 
	`©h79_ªgi°î_mdio
(0, 0x0);

119 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

120 
¨t
 + 
CAP4200AG_MAC_OFFSET
, -2);

123 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

124 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

125 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

126 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

127 
	`©h79_ªgi°î_ëh
(0);

128 
	}
}

130 
MIPS_MACHINE
(
ATH79_MACH_CAP4200AG
, "CAP4200AG", "Senao CAP4200AG",

131 
ˇp4200ag_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-carambola2.c

11 
	~<asm/mach-©h79/©h79.h
>

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

13 
	~"comm⁄.h
"

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-•i.h
"

19 
	~"dev-usb.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#CARAMBOLA2_GPIO_LED_WLAN
 0

	)

24 
	#CARAMBOLA2_GPIO_LED_ETH0
 14

	)

25 
	#CARAMBOLA2_GPIO_LED_ETH1
 13

	)

27 
	#CARAMBOLA2_GPIO_BTN_JUMPSTART
 11

	)

29 
	#CARAMBOLA2_KEYS_POLL_INTERVAL
 20

	)

30 
	#CARAMBOLA2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CARAMBOLA2_KEYS_POLL_INTERVAL
)

	)

32 
	#CARAMBOLA2_MAC0_OFFSET
 0x0000

	)

33 
	#CARAMBOLA2_MAC1_OFFSET
 0x0006

	)

34 
	#CARAMBOLA2_CALDATA_OFFSET
 0x1000

	)

35 
	#CARAMBOLA2_WMAC_MAC_OFFSET
 0x1002

	)

37 
gpio_Àd
 
	gˇømbﬁa2_Àds_gpio
[] 
	g__öôd©a
 = {

39 .
«me
 = "carambola2:green:wlan",

40 .
	ggpio
 = 
CARAMBOLA2_GPIO_LED_WLAN
,

41 .
	ga˘ive_low
 = 1,

43 .
	g«me
 = "carambola2:orange:eth0",

44 .
	ggpio
 = 
CARAMBOLA2_GPIO_LED_ETH0
,

45 .
	ga˘ive_low
 = 0,

47 .
	g«me
 = "carambola2:orange:eth1",

48 .
	ggpio
 = 
CARAMBOLA2_GPIO_LED_ETH1
,

49 .
	ga˘ive_low
 = 0,

53 
gpio_keys_buâ⁄
 
	gˇømbﬁa2_gpio_keys
[] 
	g__öôd©a
 = {

55 .
desc
 = "jumpstart button",

56 .
	gty≥
 = 
EV_KEY
,

57 .
	gcode
 = 
KEY_WPS_BUTTON
,

58 .
	gdeboun˚_öãrvÆ
 = 
CARAMBOLA2_KEYS_DEBOUNCE_INTERVAL
,

59 .
	ggpio
 = 
CARAMBOLA2_GPIO_BTN_JUMPSTART
,

60 .
	ga˘ive_low
 = 1,

64 
__öô
 
	$ˇømbﬁa2_comm⁄_£tup
()

66 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

68 
	`©h79_ªgi°î_m25p80
(
NULL
);

69 
	`©h79_ªgi°î_wmac
(
¨t
 + 
CARAMBOLA2_CALDATA_OFFSET
,

70 
¨t
 + 
CARAMBOLA2_WMAC_MAC_OFFSET
);

72 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

74 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
CARAMBOLA2_MAC0_OFFSET
, 0);

75 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
CARAMBOLA2_MAC1_OFFSET
, 0);

77 
	`©h79_ªgi°î_mdio
(0, 0x0);

80 
	`©h79_ªgi°î_ëh
(1);

83 
	`©h79_ªgi°î_ëh
(0);

84 
	}
}

86 
__öô
 
	$ˇømbﬁa2_£tup
()

88 
	`ˇømbﬁa2_comm⁄_£tup
();

90 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

91 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

92 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

93 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

94 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

96 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ˇømbﬁa2_Àds_gpio
),

97 
ˇømbﬁa2_Àds_gpio
);

98 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CARAMBOLA2_KEYS_POLL_INTERVAL
,

99 
	`ARRAY_SIZE
(
ˇømbﬁa2_gpio_keys
),

100 
ˇømbﬁa2_gpio_keys
);

101 
	`©h79_ªgi°î_usb
();

102 
	}
}

104 
MIPS_MACHINE
(
ATH79_MACH_CARAMBOLA2
, "CARAMBOLA2", "8devices Carambola2 board",

105 
ˇømbﬁa2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cf-e316n-v2.c

21 
	~<löux/gpio.h
>

22 
	~<löux/¨8216_∂©f‹m.h
>

23 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/timî.h
>

27 
	~<asm/mach-©h79/©h79.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~"comm⁄.h
"

31 
	~"dev-≠9x-pci.h
"

32 
	~"dev-ëh.h
"

33 
	~"dev-gpio-buâ⁄s.h
"

34 
	~"dev-Àds-gpio.h
"

35 
	~"dev-m25p80.h
"

36 
	~"dev-wmac.h
"

37 
	~"dev-usb.h
"

38 
	~"machty≥s.h
"

39 
	~"pci.h
"

41 
	#CF_EXXXN_KEYS_POLL_INTERVAL
 20

	)

42 
	#CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CF_EXXXN_KEYS_POLL_INTERVAL
)

	)

45 
	#CF_E316N_V2_GPIO_LED_DIAG_B
 0

	)

46 
	#CF_E316N_V2_GPIO_LED_DIAG_R
 2

	)

47 
	#CF_E316N_V2_GPIO_LED_DIAG_G
 3

	)

48 
	#CF_E316N_V2_GPIO_LED_WLAN
 12

	)

49 
	#CF_E316N_V2_GPIO_LED_WAN
 17

	)

50 
	#CF_E316N_V2_GPIO_LED_LAN
 19

	)

52 
	#CF_E316N_V2_GPIO_EXT_WDT
 16

	)

54 
	#CF_E316N_V2_GPIO_EXTERNAL_PA0
 13

	)

55 
	#CF_E316N_V2_GPIO_EXTERNAL_PA1
 14

	)

57 
	#CF_E316N_V2_GPIO_BTN_RESET
 20

	)

59 
gpio_Àd
 
	gcf_e316n_v2_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "cf-e316n-v2:blue:diag",

62 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_DIAG_B
,

63 .
	ga˘ive_low
 = 0,

65 .
	g«me
 = "cf-e316n-v2:red:diag",

66 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_DIAG_R
,

67 .
	ga˘ive_low
 = 0,

69 .
	g«me
 = "cf-e316n-v2:green:diag",

70 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_DIAG_G
,

71 .
	ga˘ive_low
 = 0,

73 .
	g«me
 = "cf-e316n-v2:blue:wlan",

74 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_WLAN
,

75 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "cf-e316n-v2:blue:wan",

78 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_WAN
,

79 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "cf-e316n-v2:blue:lan",

82 .
	ggpio
 = 
CF_E316N_V2_GPIO_LED_LAN
,

83 .
	ga˘ive_low
 = 1,

87 
gpio_keys_buâ⁄
 
	gcf_e316n_v2_gpio_keys
[] 
	g__öôd©a
 = {

89 .
desc
 = "reset",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_RESTART
,

92 .
	gdeboun˚_öãrvÆ
 = 
CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
CF_E316N_V2_GPIO_BTN_RESET
,

94 .
	ga˘ive_low
 = 1,

99 
	#CF_E320N_V2_GPIO_LED_WLAN
 0

	)

100 
	#CF_E320N_V2_GPIO_LED_WAN
 2

	)

101 
	#CF_E320N_V2_GPIO_LED_LAN
 3

	)

103 
	#CF_E320N_V2_GPIO_HEADER_J9_1
 14

	)

104 
	#CF_E320N_V2_GPIO_HEADER_J9_2
 12

	)

105 
	#CF_E320N_V2_GPIO_HEADER_J9_3
 11

	)

106 
	#CF_E320N_V2_GPIO_HEADER_J9_4
 16

	)

108 
	#CF_E320N_V2_GPIO_EXT_WDT
 13

	)

110 
	#CF_E320N_V2_GPIO_BTN_RESET
 17

	)

112 
gpio_Àd
 
	gcf_e320n_v2_Àds_gpio
[] 
	g__öôd©a
 = {

114 .
«me
 = "cf-e320n-v2:green:lan",

115 .
	ggpio
 = 
CF_E320N_V2_GPIO_LED_LAN
,

116 .
	ga˘ive_low
 = 0,

118 .
	g«me
 = "cf-e320n-v2:red:wan",

119 .
	ggpio
 = 
CF_E320N_V2_GPIO_LED_WAN
,

120 .
	ga˘ive_low
 = 0,

122 .
	g«me
 = "cf-e320n-v2:blue:wlan",

123 .
	ggpio
 = 
CF_E320N_V2_GPIO_LED_WLAN
,

124 .
	ga˘ive_low
 = 0,

128 
gpio_keys_buâ⁄
 
	gcf_e320n_v2_gpio_keys
[] 
	g__öôd©a
 = {

130 .
desc
 = "Reset button",

131 .
	gty≥
 = 
EV_KEY
,

132 .
	gcode
 = 
KEY_RESTART
,

133 .
	gdeboun˚_öãrvÆ
 = 
CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
,

134 .
	ggpio
 = 
CF_E320N_V2_GPIO_BTN_RESET
,

135 .
	ga˘ive_low
 = 1,

140 
	#CF_E355AC_GPIO_LED_LAN
 3

	)

141 
	#CF_E355AC_GPIO_LED_WLAN2G
 0

	)

142 
	#CF_E355AC_GPIO_LED_WLAN5G
 2

	)

144 
	#CF_E355AC_GPIO_EXT_WDT
 13

	)

146 
	#CF_E355AC_GPIO_BTN_RESET
 17

	)

148 
gpio_Àd
 
	gcf_e355ac_v1_Àds_gpio
[] 
	g__öôd©a
 = {

150 .
«me
 = "cf-e355ac-v1:green:lan",

151 .
	ggpio
 = 
CF_E355AC_GPIO_LED_LAN
,

152 .
	ga˘ive_low
 = 0,

154 .
	g«me
 = "cf-e355ac-v1:blue:wlan2g",

155 .
	ggpio
 = 
CF_E355AC_GPIO_LED_WLAN2G
,

156 .
	ga˘ive_low
 = 0,

158 .
	g«me
 = "cf-e355ac-v1:red:wlan5g",

159 .
	ggpio
 = 
CF_E355AC_GPIO_LED_WLAN5G
,

160 .
	ga˘ive_low
 = 0,

164 
gpio_Àd
 
	gcf_e355ac_v2_Àds_gpio
[] 
	g__öôd©a
 = {

166 .
«me
 = "cf-e355ac-v2:green:lan",

167 .
	ggpio
 = 
CF_E355AC_GPIO_LED_LAN
,

168 .
	ga˘ive_low
 = 0,

170 .
	g«me
 = "cf-e355ac-v2:blue:wlan2g",

171 .
	ggpio
 = 
CF_E355AC_GPIO_LED_WLAN2G
,

172 .
	ga˘ive_low
 = 0,

174 .
	g«me
 = "cf-e355ac-v2:red:wlan5g",

175 .
	ggpio
 = 
CF_E355AC_GPIO_LED_WLAN5G
,

176 .
	ga˘ive_low
 = 0,

180 
gpio_keys_buâ⁄
 
	gcf_e355ac_gpio_keys
[] 
	g__öôd©a
 = {

182 .
desc
 = "Reset button",

183 .
	gty≥
 = 
EV_KEY
,

184 .
	gcode
 = 
KEY_RESTART
,

185 .
	gdeboun˚_öãrvÆ
 = 
CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
,

186 .
	ggpio
 = 
CF_E355AC_GPIO_BTN_RESET
,

187 .
	ga˘ive_low
 = 1,

192 
	#CF_E375AC_GPIO_LED_LAN
 17

	)

193 
	#CF_E375AC_GPIO_LED_WLAN2G
 16

	)

194 
	#CF_E375AC_GPIO_LED_WLAN5G
 15

	)

196 
	#CF_E375AC_GPIO_EXT_WDT
 6

	)

198 
	#CF_E375AC_GPIO_BTN_RESET
 2

	)

200 
gpio_Àd
 
	gcf_e375ac_Àds_gpio
[] 
	g__öôd©a
 = {

202 .
«me
 = "cf-e375ac:green:lan",

203 .
	ggpio
 = 
CF_E375AC_GPIO_LED_LAN
,

204 .
	ga˘ive_low
 = 0,

206 .
	g«me
 = "cf-e375ac:red:wlan5g",

207 .
	ggpio
 = 
CF_E375AC_GPIO_LED_WLAN5G
,

208 .
	ga˘ive_low
 = 0,

210 .
	g«me
 = "cf-e375ac:blue:wlan2g",

211 .
	ggpio
 = 
CF_E375AC_GPIO_LED_WLAN2G
,

212 .
	ga˘ive_low
 = 0,

216 
gpio_keys_buâ⁄
 
	gcf_e375ac_gpio_keys
[] 
	g__öôd©a
 = {

218 .
desc
 = "Reset button",

219 .
	gty≥
 = 
EV_KEY
,

220 .
	gcode
 = 
KEY_RESTART
,

221 .
	gdeboun˚_öãrvÆ
 = 
CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
,

222 .
	ggpio
 = 
CF_E375AC_GPIO_BTN_RESET
,

223 .
	ga˘ive_low
 = 1,

227 
¨8327_∑d_cfg
 
	gcf_e375ac_¨8337_∑d0_cfg
 = {

228 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

229 .
	gsgmii_dñay_í
 = 
åue
,

232 
¨8327_∂©f‹m_d©a
 
	gcf_e375ac_¨8337_d©a
 = {

233 .
∑d0_cfg
 = &
cf_e375ac_¨8337_∑d0_cfg
,

234 .
	gp‹t0_cfg
 = {

235 .
f‹˚_lök
 = 1,

236 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

237 .
	gdu∂ex
 = 1,

238 .
	gtx∑u£
 = 1,

239 .
	grx∑u£
 = 1,

243 
mdio_bﬂrd_öfo
 
	gcf_e375ac_mdio0_öfo
[] = {

245 .
bus_id
 = "ag71xx-mdio.0",

246 .
	gmdio_addr
 = 0,

247 .
	g∂©f‹m_d©a
 = &
cf_e375ac_¨8337_d©a
,

252 
	#CF_E38XAC_GPIO_LED_LAN
 0

	)

253 
	#CF_E38XAC_GPIO_LED_WLAN2G
 2

	)

254 
	#CF_E38XAC_GPIO_LED_WLAN5G
 3

	)

256 
	#CF_E38XAC_GPIO_EXT_WDT
 17

	)

258 
	#CF_E38XAC_GPIO_BTN_RESET
 19

	)

260 
gpio_Àd
 
	gcf_e380ac_v1_Àds_gpio
[] 
	g__öôd©a
 = {

262 .
«me
 = "cf-e380ac-v1:green:lan",

263 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_LAN
,

264 .
	ga˘ive_low
 = 0,

266 .
	g«me
 = "cf-e380ac-v1:blue:wlan2g",

267 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN2G
,

268 .
	ga˘ive_low
 = 0,

270 .
	g«me
 = "cf-e380ac-v1:red:wlan5g",

271 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN5G
,

272 .
	ga˘ive_low
 = 0,

276 
gpio_Àd
 
	gcf_e380ac_v2_Àds_gpio
[] 
	g__öôd©a
 = {

278 .
«me
 = "cf-e380ac-v2:green:lan",

279 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_LAN
,

280 .
	ga˘ive_low
 = 0,

282 .
	g«me
 = "cf-e380ac-v2:blue:wlan2g",

283 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN2G
,

284 .
	ga˘ive_low
 = 0,

286 .
	g«me
 = "cf-e380ac-v2:red:wlan5g",

287 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN5G
,

288 .
	ga˘ive_low
 = 0,

292 
gpio_Àd
 
	gcf_e385ac_Àds_gpio
[] 
	g__öôd©a
 = {

294 .
«me
 = "cf-e385ac:green:lan",

295 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_LAN
,

296 .
	ga˘ive_low
 = 0,

298 .
	g«me
 = "cf-e385ac:blue:wlan2g",

299 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN2G
,

300 .
	ga˘ive_low
 = 0,

302 .
	g«me
 = "cf-e385ac:red:wlan5g",

303 .
	ggpio
 = 
CF_E38XAC_GPIO_LED_WLAN5G
,

304 .
	ga˘ive_low
 = 0,

308 
gpio_keys_buâ⁄
 
	gcf_e38xac_gpio_keys
[] 
	g__öôd©a
 = {

310 .
desc
 = "Reset button",

311 .
	gty≥
 = 
EV_KEY
,

312 .
	gcode
 = 
KEY_RESTART
,

313 .
	gdeboun˚_öãrvÆ
 = 
CF_EXXXN_KEYS_DEBOUNCE_INTERVAL
,

314 .
	ggpio
 = 
CF_E38XAC_GPIO_BTN_RESET
,

315 .
	ga˘ive_low
 = 1,

319 
©803x_∂©f‹m_d©a
 
	gcf_e380ac_v1v2_©803x_d©a
 = {

320 .
dißbÀ_sm¨ãì
 = 1,

323 
mdio_bﬂrd_öfo
 
	gcf_e380ac_v1v2_mdio0_öfo
[] = {

325 .
bus_id
 = "ag71xx-mdio.0",

326 .
	gmdio_addr
 = 0,

327 .
	g∂©f‹m_d©a
 = &
cf_e380ac_v1v2_©803x_d©a
,

332 
	#CF_E5X0N_GPIO_LED_WAN
 11

	)

333 
	#CF_E5X0N_GPIO_BTN_RESET
 17

	)

335 
gpio_Àd
 
	gcf_e520n_Àds_gpio
[] 
	g__öôd©a
 = {

337 .
«me
 = "cf-e520n:blue:wan",

338 .
	ggpio
 = 
CF_E5X0N_GPIO_LED_WAN
,

339 .
	ga˘ive_low
 = 1,

343 
gpio_Àd
 
	gcf_e530n_Àds_gpio
[] 
	g__öôd©a
 = {

345 .
«me
 = "cf-e530n:blue:wan",

346 .
	ggpio
 = 
CF_E5X0N_GPIO_LED_WAN
,

347 .
	ga˘ive_low
 = 1,

356 
	#CF_EXXXN_EXT_WDT_TIMEOUT_MS
 500

	)

358 
timî_li°
 
	ggpio_wdt_timî
;

360 
	$gpio_wdt_toggÀ
(
gpio
)

362 
°©e
;

364 
°©e
 = !state;

365 
	`gpio_£t_vÆue
(
gpio
, 
°©e
);

367 
	`mod_timî
(&
gpio_wdt_timî
,

368 
jiffõs
 + 
	`m£cs_to_jiffõs
(
CF_EXXXN_EXT_WDT_TIMEOUT_MS
));

369 
	}
}

371 
__öô
 
	$cf_exxxn_comm⁄_£tup
(
¨t_ofs
, 
gpio_wdt
)

373 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f001000 + 
¨t_ofs
);

375 i‡(
gpio_wdt
 > -1) {

376 
	`gpio_ªque°_⁄e
(
gpio_wdt
, 
GPIOF_OUT_INIT_HIGH
,

379 
	`£tup_timî
(&
gpio_wdt_timî
, 
gpio_wdt_toggÀ
, 
gpio_wdt
);

380 
	`gpio_wdt_toggÀ
(
gpio_wdt
);

383 
	`©h79_ªgi°î_m25p80
(
NULL
);

385 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

387 
	`©h79_ªgi°î_usb
();

388 
	}
}

390 
__öô
 
	$cf_e316n_v2_£tup
()

392 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f010000);

394 
	`cf_exxxn_comm⁄_£tup
(0x10000, 
CF_E316N_V2_GPIO_EXT_WDT
);

396 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

398 
	`©h79_ªgi°î_mdio
(1, 0x0);

401 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

402 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

403 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

404 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

405 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

406 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

407 
	`©h79_ªgi°î_ëh
(0);

410 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

411 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 2);

412 
	`©h79_ªgi°î_ëh
(1);

415 
	`gpio_ªque°_⁄e
(
CF_E316N_V2_GPIO_EXTERNAL_PA0
, 
GPIOF_OUT_INIT_HIGH
,

417 
	`gpio_ªque°_⁄e
(
CF_E316N_V2_GPIO_EXTERNAL_PA1
, 
GPIOF_OUT_INIT_HIGH
,

420 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e316n_v2_Àds_gpio
),

421 
cf_e316n_v2_Àds_gpio
);

423 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

424 
	`ARRAY_SIZE
(
cf_e316n_v2_gpio_keys
),

425 
cf_e316n_v2_gpio_keys
);

426 
	}
}

428 
MIPS_MACHINE
(
ATH79_MACH_CF_E316N_V2
, "CF-E316N-V2", "COMFAST CF-E316N v2",

429 
cf_e316n_v2_£tup
);

431 
__öô
 
	$cf_exxxn_qˇ953x_ëh_£tup
()

433 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f010000);

435 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

437 
	`©h79_ªgi°î_mdio
(0, 0x0);

439 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

440 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

443 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

444 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

445 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

446 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 2);

447 
	`©h79_ªgi°î_ëh
(1);

450 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

451 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

452 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

453 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

454 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

455 
	`©h79_ªgi°î_ëh
(0);

456 
	}
}

458 
__öô
 
	$cf_e320n_v2_£tup
()

460 
	`cf_exxxn_comm⁄_£tup
(0x10000, 
CF_E320N_V2_GPIO_EXT_WDT
);

462 
	`cf_exxxn_qˇ953x_ëh_£tup
();

465 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

467 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E320N_V2_GPIO_LED_LAN
, 
åue
);

468 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E320N_V2_GPIO_LED_WAN
, 
åue
);

469 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E320N_V2_GPIO_LED_WLAN
, 
åue
);

471 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_LED_LAN
, 0);

472 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_LED_WAN
, 0);

473 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_LED_WLAN
, 0);

476 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_HEADER_J9_1
, 0);

477 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_HEADER_J9_2
, 0);

478 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_HEADER_J9_3
, 0);

479 
	`©h79_gpio_ouçut_£À˘
(
CF_E320N_V2_GPIO_HEADER_J9_4
, 0);

481 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e320n_v2_Àds_gpio
),

482 
cf_e320n_v2_Àds_gpio
);

484 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

485 
	`ARRAY_SIZE
(
cf_e320n_v2_gpio_keys
),

486 
cf_e320n_v2_gpio_keys
);

487 
	}
}

489 
MIPS_MACHINE
(
ATH79_MACH_CF_E320N_V2
, "CF-E320N-V2", "COMFAST CF-E320N v2",

490 
cf_e320n_v2_£tup
);

492 
__öô
 
	$cf_e355ac_£tup
()

494 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f010000);

497 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
, 0);

499 
	`cf_exxxn_comm⁄_£tup
(0x10000, 
CF_E355AC_GPIO_EXT_WDT
);

501 
	`cf_exxxn_qˇ953x_ëh_£tup
();

503 
	`©h79_gpio_ouçut_£À˘
(
CF_E355AC_GPIO_LED_LAN
, 0);

504 
	`©h79_gpio_ouçut_£À˘
(
CF_E355AC_GPIO_LED_WLAN2G
, 0);

505 
	`©h79_gpio_ouçut_£À˘
(
CF_E355AC_GPIO_LED_WLAN5G
, 0);

507 
	`≠91_pci_öô
(
¨t
 + 0x5000, 
NULL
);

509 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

510 
	`ARRAY_SIZE
(
cf_e355ac_gpio_keys
),

511 
cf_e355ac_gpio_keys
);

512 
	}
}

514 
__öô
 
	$cf_e355ac_v1_£tup
()

516 
	`cf_e355ac_£tup
();

518 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e355ac_v1_Àds_gpio
),

519 
cf_e355ac_v1_Àds_gpio
);

520 
	}
}

522 
__öô
 
	$cf_e355ac_v2_£tup
()

524 
	`cf_e355ac_£tup
();

526 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e355ac_v2_Àds_gpio
),

527 
cf_e355ac_v2_Àds_gpio
);

528 
	}
}

530 
MIPS_MACHINE
(
ATH79_MACH_CF_E355AC
, "CF-E355AC-V1", "COMFAST CF-E355AC v1",

531 
cf_e355ac_v1_£tup
);

533 
MIPS_MACHINE
(
ATH79_MACH_CF_E355AC_V2
, "CF-E355AC-V2", "COMFAST CF-E355AC v2",

534 
cf_e355ac_v2_£tup
);

536 
__öô
 
	$cf_e375ac_£tup
()

538 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f040000);

541 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
, 0);

543 
	`cf_exxxn_comm⁄_£tup
(0x40000, 
CF_E375AC_GPIO_EXT_WDT
);

545 
	`©h79_gpio_ouçut_£À˘
(
CF_E375AC_GPIO_LED_LAN
, 0);

546 
	`©h79_gpio_ouçut_£À˘
(
CF_E375AC_GPIO_LED_WLAN2G
, 0);

547 
	`©h79_gpio_ouçut_£À˘
(
CF_E375AC_GPIO_LED_WLAN5G
, 0);

549 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e375ac_Àds_gpio
),

550 
cf_e375ac_Àds_gpio
);

552 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

553 
	`ARRAY_SIZE
(
cf_e375ac_gpio_keys
),

554 
cf_e375ac_gpio_keys
);

556 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_mdio0_devi˚
);

558 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
cf_e375ac_mdio0_öfo
,

559 
	`ARRAY_SIZE
(
cf_e375ac_mdio0_öfo
));

562 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

563 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

564 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

565 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

566 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

567 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

568 
	`©h79_ªgi°î_ëh
(0);

570 
	`©h79_ªgi°î_pci
();

571 
	}
}

573 
MIPS_MACHINE
(
ATH79_MACH_CF_E375AC
, "CF-E375AC", "COMFAST CF-E375AC",

574 
cf_e375ac_£tup
);

576 
__öô
 
	$cf_e38xac_comm⁄_£tup
(
¨t_ofs
)

578 
	`cf_exxxn_comm⁄_£tup
(
¨t_ofs
, 
CF_E38XAC_GPIO_EXT_WDT
);

580 
	`©h79_ªgi°î_pci
();

583 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

585 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E38XAC_GPIO_LED_LAN
, 
åue
);

586 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E38XAC_GPIO_LED_WLAN2G
, 
åue
);

587 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E38XAC_GPIO_LED_WLAN5G
, 
åue
);

589 
	`©h79_gpio_ouçut_£À˘
(
CF_E38XAC_GPIO_LED_LAN
, 0);

590 
	`©h79_gpio_ouçut_£À˘
(
CF_E38XAC_GPIO_LED_WLAN2G
, 0);

591 
	`©h79_gpio_ouçut_£À˘
(
CF_E38XAC_GPIO_LED_WLAN5G
, 0);

594 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

596 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

597 
	`ARRAY_SIZE
(
cf_e38xac_gpio_keys
),

598 
cf_e38xac_gpio_keys
);

599 
	}
}

601 
__öô
 
	$cf_e380ac_v1v2_comm⁄_£tup
(
¨t_ofs
)

603 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f000000 + 
¨t_ofs
);

605 
	`cf_e38xac_comm⁄_£tup
(
¨t_ofs
);

607 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

609 
	`©h79_ªgi°î_mdio
(0, 0x0);

610 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
cf_e380ac_v1v2_mdio0_öfo
,

611 
	`ARRAY_SIZE
(
cf_e380ac_v1v2_mdio0_öfo
));

614 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

615 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

616 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

617 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xbe000000;

618 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xb0000101;

619 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xb0001313;

620 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

621 
	`©h79_ªgi°î_ëh
(0);

622 
	}
}

624 
__öô
 
	$cf_e380ac_v1_£tup
()

626 
	`cf_e380ac_v1v2_comm⁄_£tup
(0x20000);

628 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e380ac_v1_Àds_gpio
),

629 
cf_e380ac_v1_Àds_gpio
);

630 
	}
}

632 
MIPS_MACHINE
(
ATH79_MACH_CF_E380AC_V1
, "CF-E380AC-V1", "COMFAST CF-E380AC v1",

633 
cf_e380ac_v1_£tup
);

635 
__öô
 
	$cf_e380ac_v2_£tup
()

637 
	`cf_e380ac_v1v2_comm⁄_£tup
(0x40000);

639 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e380ac_v2_Àds_gpio
),

640 
cf_e380ac_v2_Àds_gpio
);

641 
	}
}

643 
MIPS_MACHINE
(
ATH79_MACH_CF_E380AC_V2
, "CF-E380AC-V2", "COMFAST CF-E380AC v2",

644 
cf_e380ac_v2_£tup
);

647 
¨8327_∑d_cfg
 
	gcf_e385ac_qˇ8337_∑d0_cfg
 = {

648 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

649 .
	gtx˛k_dñay_í
 = 
åue
,

650 .
	grx˛k_dñay_í
 = 
åue
,

651 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

652 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

656 
¨8327_∑d_cfg
 
	gcf_e385ac_qˇ8337_∑d6_cfg
 = {

657 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

658 .
	gsgmii_dñay_í
 = 
åue
,

659 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

662 
¨8327_∂©f‹m_d©a
 
	gcf_e385ac_qˇ8337_d©a
 = {

663 .
∑d0_cfg
 = &
cf_e385ac_qˇ8337_∑d0_cfg
,

664 .
	g∑d6_cfg
 = &
cf_e385ac_qˇ8337_∑d6_cfg
,

665 .
	gp‹t0_cfg
 = {

666 .
f‹˚_lök
 = 1,

667 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

668 .
	gdu∂ex
 = 1,

669 .
	gtx∑u£
 = 1,

670 .
	grx∑u£
 = 1,

672 .
	gp‹t6_cfg
 = {

673 .
f‹˚_lök
 = 1,

674 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

675 .
	gdu∂ex
 = 1,

676 .
	gtx∑u£
 = 1,

677 .
	grx∑u£
 = 1,

681 
mdio_bﬂrd_öfo
 
	gcf_e385ac_mdio0_öfo
[] = {

683 .
bus_id
 = "ag71xx-mdio.0",

684 .
	gmdio_addr
 = 0,

685 .
	g∂©f‹m_d©a
 = &
cf_e385ac_qˇ8337_d©a
,

689 
__öô
 
	$cf_e385ac_£tup
()

691 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f040000);

693 
	`cf_e38xac_comm⁄_£tup
(0x40000);

695 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e385ac_Àds_gpio
),

696 
cf_e385ac_Àds_gpio
);

698 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
cf_e385ac_mdio0_öfo
,

699 
	`ARRAY_SIZE
(
cf_e385ac_mdio0_öfo
));

700 
	`©h79_ªgi°î_mdio
(0, 0x0);

702 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

705 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

706 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

707 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

708 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x96000000;

710 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

711 
	`©h79_ªgi°î_ëh
(0);

714 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

715 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

716 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

717 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

719 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

720 
	`©h79_ªgi°î_ëh
(1);

721 
	}
}

723 
MIPS_MACHINE
(
ATH79_MACH_CF_E385AC
, "CF-E385AC", "COMFAST CF-E385AC",

724 
cf_e385ac_£tup
);

726 
__öô
 
	$cf_e5x0n_gpio_£tup
()

728 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CF_E5X0N_GPIO_LED_WAN
, 
åue
);

730 
	`©h79_gpio_ouçut_£À˘
(
CF_E5X0N_GPIO_LED_WAN
, 0);

732 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CF_EXXXN_KEYS_POLL_INTERVAL
,

733 
	`ARRAY_SIZE
(
cf_e320n_v2_gpio_keys
),

734 
cf_e320n_v2_gpio_keys
);

735 
	}
}

737 
__öô
 
	$cf_e520n_£tup
()

739 
	`cf_exxxn_comm⁄_£tup
(0x10000, -1);

741 
	`cf_exxxn_qˇ953x_ëh_£tup
();

743 
	`cf_e5x0n_gpio_£tup
();

745 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e520n_Àds_gpio
),

746 
cf_e520n_Àds_gpio
);

747 
	}
}

749 
MIPS_MACHINE
(
ATH79_MACH_CF_E520N
, "CF-E520N", "COMFAST CF-E520N",

750 
cf_e520n_£tup
);

752 
__öô
 
	$cf_e530n_£tup
()

754 
	`cf_exxxn_comm⁄_£tup
(0x10000, -1);

756 
	`cf_exxxn_qˇ953x_ëh_£tup
();

758 
	`cf_e5x0n_gpio_£tup
();

760 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
cf_e530n_Àds_gpio
),

761 
cf_e530n_Àds_gpio
);

762 
	}
}

764 
MIPS_MACHINE
(
ATH79_MACH_CF_E530N
, "CF-E530N", "COMFAST CF-E530N",

765 
cf_e530n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cpe510.c

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

27 
	#CPE510_GPIO_LED_LAN0
 11

	)

28 
	#CPE510_GPIO_LED_LAN1
 12

	)

29 
	#CPE510_GPIO_LED_L1
 13

	)

30 
	#CPE510_GPIO_LED_L2
 14

	)

31 
	#CPE510_GPIO_LED_L3
 15

	)

32 
	#CPE510_GPIO_LED_L4
 16

	)

35 
	#WBS510_GPIO_LED_L4
 2

	)

37 
	#CPE510_GPIO_EXTERNAL_LNA0
 18

	)

38 
	#CPE510_GPIO_EXTERNAL_LNA1
 19

	)

40 
	#CPE510_GPIO_BTN_RESET
 4

	)

42 
	#CPE510_KEYS_POLL_INTERVAL
 20

	)

43 
	#CPE510_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CPE510_KEYS_POLL_INTERVAL
)

	)

46 
	#CPE210_V2_GPIO_BTN_RESET
 17

	)

48 
gpio_Àd
 
	g˝e510_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tp-link:green:lan0",

51 .
	ggpio
 = 
CPE510_GPIO_LED_LAN0
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:lan1",

55 .
	ggpio
 = 
CPE510_GPIO_LED_LAN1
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:green:link1",

59 .
	ggpio
 = 
CPE510_GPIO_LED_L1
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "tp-link:green:link2",

63 .
	ggpio
 = 
CPE510_GPIO_LED_L2
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "tp-link:green:link3",

67 .
	ggpio
 = 
CPE510_GPIO_LED_L3
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "tp-link:green:link4",

71 .
	ggpio
 = 
CPE510_GPIO_LED_L4
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_Àd
 
	gwbs510_Àds_gpio
[] 
	g__öôd©a
 = {

78 .
«me
 = "tp-link:green:lan0",

79 .
	ggpio
 = 
CPE510_GPIO_LED_LAN0
,

80 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "tp-link:green:lan1",

83 .
	ggpio
 = 
CPE510_GPIO_LED_LAN1
,

84 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "tp-link:green:link1",

87 .
	ggpio
 = 
CPE510_GPIO_LED_L1
,

88 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "tp-link:green:link2",

91 .
	ggpio
 = 
CPE510_GPIO_LED_L2
,

92 .
	ga˘ive_low
 = 1,

94 .
	g«me
 = "tp-link:green:link3",

95 .
	ggpio
 = 
CPE510_GPIO_LED_L3
,

96 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "tp-link:green:link4",

99 .
	ggpio
 = 
WBS510_GPIO_LED_L4
,

100 .
	ga˘ive_low
 = 1,

104 
gpio_Àd
 
	g˝e210_v2_Àds_gpio
[] 
	g__öôd©a
 = {

106 .
«me
 = "tp-link:green:lan0",

107 .
	ggpio
 = 
CPE510_GPIO_LED_LAN0
,

108 .
	ga˘ive_low
 = 1,

110 .
	g«me
 = "tp-link:green:link1",

111 .
	ggpio
 = 
CPE510_GPIO_LED_L1
,

112 .
	ga˘ive_low
 = 1,

114 .
	g«me
 = "tp-link:green:link2",

115 .
	ggpio
 = 
CPE510_GPIO_LED_L2
,

116 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "tp-link:green:link3",

119 .
	ggpio
 = 
CPE510_GPIO_LED_L3
,

120 .
	ga˘ive_low
 = 1,

122 .
	g«me
 = "tp-link:green:link4",

123 .
	ggpio
 = 
CPE510_GPIO_LED_L4
,

124 .
	ga˘ive_low
 = 1,

128 
gpio_keys_buâ⁄
 
	g˝e510_gpio_keys
[] 
	g__öôd©a
 = {

130 .
desc
 = "Reset button",

131 .
	gty≥
 = 
EV_KEY
,

132 .
	gcode
 = 
KEY_RESTART
,

133 .
	gdeboun˚_öãrvÆ
 = 
CPE510_KEYS_DEBOUNCE_INTERVAL
,

134 .
	ggpio
 = 
CPE510_GPIO_BTN_RESET
,

135 .
	ga˘ive_low
 = 1,

139 
gpio_keys_buâ⁄
 
	g˝e210_v2_gpio_keys
[] 
	g__öôd©a
 = {

141 .
desc
 = "Reset button",

142 .
	gty≥
 = 
EV_KEY
,

143 .
	gcode
 = 
KEY_RESTART
,

144 .
	gdeboun˚_öãrvÆ
 = 
CPE510_KEYS_DEBOUNCE_INTERVAL
,

145 .
	ggpio
 = 
CPE210_V2_GPIO_BTN_RESET
,

146 .
	ga˘ive_low
 = 1,

150 
__öô
 
	$˝e_£tup
(
u8
 *
mac
)

154 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

155 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

157 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
CPE510_KEYS_POLL_INTERVAL
,

158 
	`ARRAY_SIZE
(
˝e510_gpio_keys
),

159 
˝e510_gpio_keys
);

161 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
CPE510_GPIO_EXTERNAL_LNA0
);

162 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
CPE510_GPIO_EXTERNAL_LNA1
);

164 
	`©h79_ªgi°î_m25p80
(
NULL
);

166 
	`©h79_ªgi°î_mdio
(1, 0);

167 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

168 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

169 
	`©h79_ªgi°î_ëh
(1);

170 
	}
}

173 
__öô
 
	$˝e210_£tup
()

175 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f830008);

176 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

178 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e510_Àds_gpio
),

179 
˝e510_Àds_gpio
);

181 
	`˝e_£tup
(
mac
);

183 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

184 
	}
}

186 
__öô
 
	$˝e510_£tup
()

188 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f830008);

189 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

191 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e510_Àds_gpio
),

192 
˝e510_Àds_gpio
);

194 
	`˝e_£tup
(
mac
);

196 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

197 
	}
}

199 
__öô
 
	$wbs_£tup
()

201 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f830008);

202 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

204 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wbs510_Àds_gpio
),

205 
wbs510_Àds_gpio
);

207 
	`˝e_£tup
(
mac
);

209 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

210 
	}
}

212 
__öô
 
	$˝e210_v2_£tup
()

214 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f830008);

215 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

217 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e210_v2_Àds_gpio
),

218 
˝e210_v2_Àds_gpio
);

219 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CPE510_KEYS_POLL_INTERVAL
,

220 
	`ARRAY_SIZE
(
˝e210_v2_gpio_keys
),

221 
˝e210_v2_gpio_keys
);

222 
	`©h79_ªgi°î_m25p80
(
NULL
);

223 
	`©h79_ªgi°î_mdio
(0, 0x0);

224 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

225 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

226 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

227 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

228 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

229 
	`©h79_ªgi°î_ëh
(0);

230 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

231 
	}
}

233 
MIPS_MACHINE
(
ATH79_MACH_CPE210
, "CPE210", "TP-LINK CPE210/220",

234 
˝e210_£tup
);

236 
MIPS_MACHINE
(
ATH79_MACH_CPE210_V2
, "CPE210V2", "TP-LINK CPE210 v2",

237 
˝e210_v2_£tup
);

239 
MIPS_MACHINE
(
ATH79_MACH_CPE510
, "CPE510", "TP-LINK CPE510/520",

240 
˝e510_£tup
);

242 
MIPS_MACHINE
(
ATH79_MACH_WBS210
, "WBS210", "TP-LINK WBS210",

243 
wbs_£tup
);

245 
MIPS_MACHINE
(
ATH79_MACH_WBS510
, "WBS510", "TP-LINK WBS510",

246 
wbs_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cpe870.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#CPE870_GPIO_LED_LINK1
 0

	)

27 
	#CPE870_GPIO_LED_LINK2
 1

	)

28 
	#CPE870_GPIO_LED_LINK3
 2

	)

29 
	#CPE870_GPIO_LED_LINK4
 3

	)

30 
	#CPE870_GPIO_LED_WLAN
 13

	)

31 
	#CPE870_GPIO_LED_WAN
 19

	)

32 
	#CPE870_GPIO_LED_LAN
 20

	)

34 
	#CPE870_GPIO_BTN_RESET
 16

	)

36 
	#CPE870_KEYS_POLL_INTERVAL
 20

	)

37 
	#CPE870_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CPE870_KEYS_POLL_INTERVAL
)

	)

39 
gpio_Àd
 
	g˝e870_Àds_gpio
[] 
	g__öôd©a
 = {

41 .
«me
 = "cpe870:green:lan",

42 .
	ggpio
 = 
CPE870_GPIO_LED_LAN
,

43 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "cpe870:green:wan",

47 .
	ggpio
 = 
CPE870_GPIO_LED_WAN
,

48 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "cpe870:green:wlan",

52 .
	ggpio
 = 
CPE870_GPIO_LED_WLAN
,

53 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "cpe870:green:link1",

57 .
	ggpio
 = 
CPE870_GPIO_LED_LINK1
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "cpe870:green:link2",

62 .
	ggpio
 = 
CPE870_GPIO_LED_LINK2
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "cpe870:green:link3",

67 .
	ggpio
 = 
CPE870_GPIO_LED_LINK3
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "cpe870:green:link4",

72 .
	ggpio
 = 
CPE870_GPIO_LED_LINK4
,

73 .
	ga˘ive_low
 = 1,

77 
gpio_keys_buâ⁄
 
	g˝e870_gpio_keys
[] 
	g__öôd©a
 = {

79 .
desc
 = "reset",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_RESTART
,

82 .
	gdeboun˚_öãrvÆ
 = 
CPE870_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
CPE870_GPIO_BTN_RESET
,

84 .
	ga˘ive_low
 = 1,

88 
__öô
 
	$˝e870_gpio_£tup
()

91 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

93 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE870_GPIO_LED_LINK1
, 
åue
);

94 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE870_GPIO_LED_LINK2
, 
åue
);

95 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE870_GPIO_LED_LINK3
, 
åue
);

96 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE870_GPIO_LED_LINK4
, 
åue
);

99 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_LAN
, 1);

100 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_WAN
, 1);

101 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_LINK1
, 1);

102 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_LINK2
, 1);

103 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_LINK3
, 1);

104 
	`gpio_£t_vÆue
(
CPE870_GPIO_LED_LINK4
, 1);

106 
	`©h79_gpio_ouçut_£À˘
(
CPE870_GPIO_LED_LINK1
, 0);

107 
	`©h79_gpio_ouçut_£À˘
(
CPE870_GPIO_LED_LINK2
, 0);

108 
	`©h79_gpio_ouçut_£À˘
(
CPE870_GPIO_LED_LINK3
, 0);

109 
	`©h79_gpio_ouçut_£À˘
(
CPE870_GPIO_LED_LINK4
, 0);

111 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e870_Àds_gpio
),

112 
˝e870_Àds_gpio
);

114 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CPE870_KEYS_POLL_INTERVAL
,

115 
	`ARRAY_SIZE
(
˝e870_gpio_keys
),

116 
˝e870_gpio_keys
);

117 
	}
}

119 
__öô
 
	$˝e870_£tup
()

121 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

122 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

124 
	`©h79_ªgi°î_m25p80
(
NULL
);

126 
	`˝e870_gpio_£tup
();

128 
	`©h79_ªgi°î_mdio
(1, 0x0);

130 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

131 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

134 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

135 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

136 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

137 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

138 
	`©h79_ªgi°î_ëh
(1);

141 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

142 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

143 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

144 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

145 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

146 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

147 
	`©h79_ªgi°î_ëh
(0);

149 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

150 
	}
}

152 
MIPS_MACHINE
(
ATH79_MACH_CPE870
, "CPE870", "YunC‹êCPE870", 
˝e870_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cr3000.c

23 
	~<löux/gpio.h
>

24 
	~<löux/phy.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/©h9k_∂©f‹m.h
>

27 
	~<löux/¨8216_∂©f‹m.h
>

29 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~<asm/mach-©h79/©h79.h
>

32 
	~"comm⁄.h
"

33 
	~"dev-ëh.h
"

34 
	~"dev-gpio-buâ⁄s.h
"

35 
	~"dev-Àds-gpio.h
"

36 
	~"dev-m25p80.h
"

37 
	~"dev-•i.h
"

38 
	~"dev-wmac.h
"

39 
	~"machty≥s.h
"

41 
	#CR3000_GPIO_LED_WLAN_2G
 13

	)

42 
	#CR3000_GPIO_LED_POWER_AMBER
 15

	)

43 
	#CR3000_GPIO_LED_WAN
 18

	)

44 
	#CR3000_GPIO_LED_LAN1
 19

	)

45 
	#CR3000_GPIO_LED_LAN2
 20

	)

46 
	#CR3000_GPIO_LED_LAN3
 21

	)

47 
	#CR3000_GPIO_LED_LAN4
 22

	)

49 
	#CR3000_GPIO_BTN_WPS
 16

	)

50 
	#CR3000_GPIO_BTN_RESET
 17

	)

52 
	#CR3000_KEYS_POLL_INTERVAL
 20

	)

53 
	#CR3000_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CR3000_KEYS_POLL_INTERVAL
)

	)

55 
	#CR3000_MAC0_OFFSET
 0

	)

56 
	#CR3000_MAC1_OFFSET
 6

	)

57 
	#CR3000_WMAC_CALDATA_OFFSET
 0x1000

	)

58 
	#CR3000_WMAC_MAC_OFFSET
 0x1002

	)

60 
gpio_Àd
 
	g¸3000_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "pcs:amber:power",

63 .
	ggpio
 = 
CR3000_GPIO_LED_POWER_AMBER
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "pcs:blue:wlan",

68 .
	ggpio
 = 
CR3000_GPIO_LED_WLAN_2G
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "pcs:blue:wan",

73 .
	ggpio
 = 
CR3000_GPIO_LED_WAN
,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "pcs:blue:lan1",

78 .
	ggpio
 = 
CR3000_GPIO_LED_LAN1
,

79 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "pcs:blue:lan2",

83 .
	ggpio
 = 
CR3000_GPIO_LED_LAN2
,

84 .
	ga˘ive_low
 = 1,

87 .
	g«me
 = "pcs:blue:lan3",

88 .
	ggpio
 = 
CR3000_GPIO_LED_LAN3
,

89 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "pcs:blue:lan4",

93 .
	ggpio
 = 
CR3000_GPIO_LED_LAN4
,

94 .
	ga˘ive_low
 = 1,

98 
gpio_keys_buâ⁄
 
	g¸3000_gpio_keys
[] 
	g__öôd©a
 = {

100 .
desc
 = "WPS button",

101 .
	gty≥
 = 
EV_KEY
,

102 .
	gcode
 = 
KEY_WPS_BUTTON
,

103 .
	gdeboun˚_öãrvÆ
 = 
CR3000_KEYS_DEBOUNCE_INTERVAL
,

104 .
	ggpio
 = 
CR3000_GPIO_BTN_WPS
,

105 .
	ga˘ive_low
 = 1,

108 .
	gdesc
 = "Reset button",

109 .
	gty≥
 = 
EV_KEY
,

110 .
	gcode
 = 
KEY_WPS_BUTTON
,

111 .
	gdeboun˚_öãrvÆ
 = 
CR3000_KEYS_DEBOUNCE_INTERVAL
,

112 .
	ggpio
 = 
CR3000_GPIO_BTN_RESET
,

113 .
	ga˘ive_low
 = 1,

117 
__öô
 
	$¸3000_£tup
()

119 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

121 
	`©h79_ªgi°î_m25p80
(
NULL
);

123 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¸3000_Àds_gpio
),

124 
¸3000_Àds_gpio
);

126 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CR3000_KEYS_POLL_INTERVAL
,

127 
	`ARRAY_SIZE
(
¸3000_gpio_keys
),

128 
¸3000_gpio_keys
);

131 
	`©h79_ªgi°î_wmac
(
¨t
 + 
CR3000_WMAC_CALDATA_OFFSET
,áπ + 
CR3000_WMAC_MAC_OFFSET
);

140 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

143 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

145 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0x1;

148 
	`©h79_ªgi°î_mdio
(1, 0x0);

151 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

152 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0x1;

155 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
CR3000_MAC0_OFFSET
, 0);

156 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

157 
	`©h79_ªgi°î_ëh
(1);

160 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
CR3000_MAC0_OFFSET
, 1);

161 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

162 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

163 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

164 
	`©h79_ªgi°î_ëh
(0);

165 
	}
}

167 
MIPS_MACHINE
(
ATH79_MACH_CR3000
, "CR3000", "PowerCloud Systems CR3000",

168 
¸3000_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-cr5000.c

23 
	~<löux/gpio.h
>

24 
	~<löux/pci.h
>

25 
	~<löux/phy.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/©h9k_∂©f‹m.h
>

28 
	~<löux/¨8216_∂©f‹m.h
>

30 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

31 
	~<asm/mach-©h79/©h79.h
>

33 
	~"comm⁄.h
"

34 
	~"dev-≠9x-pci.h
"

35 
	~"dev-ëh.h
"

36 
	~"dev-gpio-buâ⁄s.h
"

37 
	~"dev-Àds-gpio.h
"

38 
	~"dev-m25p80.h
"

39 
	~"dev-•i.h
"

40 
	~"dev-usb.h
"

41 
	~"dev-wmac.h
"

42 
	~"machty≥s.h
"

44 
	#CR5000_GPIO_LED_WLAN_2G
 14

	)

45 
	#CR5000_GPIO_LED_WPS
 12

	)

46 
	#CR5000_GPIO_LED_POWER_AMBER
 4

	)

50 
	#CR5000_GPIO_LED_POWER_ENABLE
 2

	)

51 
	#CR5000_GPIO_BTN_WPS
 16

	)

52 
	#CR5000_GPIO_BTN_RESET
 17

	)

54 
	#CR5000_KEYS_POLL_INTERVAL
 20

	)

55 
	#CR5000_KEYS_DEBOUNCE_INTERVAL
 (3 * 
CR5000_KEYS_POLL_INTERVAL
)

	)

57 
	#CR5000_MAC0_OFFSET
 0

	)

58 
	#CR5000_WMAC_CALDATA_OFFSET
 0x1000

	)

59 
	#CR5000_WMAC_MAC_OFFSET
 0x1002

	)

60 
	#CR5000_PCIE_CALDATA_OFFSET
 0x5000

	)

61 
	#CR5000_PCIE_WMAC_OFFSET
 0x5002

	)

63 
gpio_Àd
 
	g¸5000_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "pcs:amber:power",

66 .
	ggpio
 = 
CR5000_GPIO_LED_POWER_AMBER
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "pcs:white:wps",

71 .
	ggpio
 = 
CR5000_GPIO_LED_WPS
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "pcs:blue:wlan",

76 .
	ggpio
 = 
CR5000_GPIO_LED_WLAN_2G
,

77 .
	ga˘ive_low
 = 1,

81 
gpio_keys_buâ⁄
 
	g¸5000_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "WPS button",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_WPS_BUTTON
,

86 .
	gdeboun˚_öãrvÆ
 = 
CR5000_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
CR5000_GPIO_BTN_WPS
,

88 .
	ga˘ive_low
 = 1,

91 .
	gdesc
 = "Reset button",

92 .
	gty≥
 = 
EV_KEY
,

93 .
	gcode
 = 
KEY_RESTART
,

94 .
	gdeboun˚_öãrvÆ
 = 
CR5000_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ggpio
 = 
CR5000_GPIO_BTN_RESET
,

96 .
	ga˘ive_low
 = 1,

100 
¨8327_∑d_cfg
 
	g¸5000_¨8327_∑d0_cfg
 = {

101 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

102 .
	gtx˛k_dñay_í
 = 
åue
,

103 .
	grx˛k_dñay_í
 = 
åue
,

104 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

105 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

108 
¨8327_Àd_cfg
 
	g¸5000_¨8327_Àd_cfg
 = {

109 .
Àd_˘æ0
 = 0xcc35cc35,

110 .
	gÀd_˘æ1
 = 0xca35ca35,

111 .
	gÀd_˘æ2
 = 0xc935c935,

112 .
	gÀd_˘æ3
 = 0x03ffff00,

113 .
	g›í_døö
 = 
åue
,

116 
¨8327_∂©f‹m_d©a
 
	g¸5000_¨8327_d©a
 = {

117 .
∑d0_cfg
 = &
¸5000_¨8327_∑d0_cfg
,

118 .
	gp‹t0_cfg
 = {

119 .
f‹˚_lök
 = 1,

120 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

121 .
	gdu∂ex
 = 1,

122 .
	gtx∑u£
 = 1,

123 .
	grx∑u£
 = 1,

125 .
	gÀd_cfg
 = &
¸5000_¨8327_Àd_cfg
,

128 
mdio_bﬂrd_öfo
 
	g¸5000_mdio0_öfo
[] = {

130 .
bus_id
 = "ag71xx-mdio.0",

131 .
	gmdio_addr
 = 0,

132 .
	g∂©f‹m_d©a
 = &
¸5000_¨8327_d©a
,

136 
__öô
 
	$¸5000_£tup
()

138 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

139 
©h9k_∂©f‹m_d©a
 *
pd©a
;

141 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

142 
	`gpio_ªque°_⁄e
(
CR5000_GPIO_LED_POWER_ENABLE
,

143 
GPIOF_OUT_INIT_LOW
, "Power LEDÉnable");

144 
	`©h79_gpio_ouçut_£À˘
(
CR5000_GPIO_LED_POWER_AMBER
, 
AR934X_GPIO_OUT_GPIO
);

145 
	`©h79_gpio_ouçut_£À˘
(
CR5000_GPIO_LED_WLAN_2G
, 
AR934X_GPIO_OUT_GPIO
);

146 
	`©h79_gpio_ouçut_£À˘
(
CR5000_GPIO_LED_WPS
, 
AR934X_GPIO_OUT_GPIO
);

148 
	`©h79_ªgi°î_m25p80
(
NULL
);

150 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
¸5000_Àds_gpio
),

151 
¸5000_Àds_gpio
);

152 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
CR5000_KEYS_POLL_INTERVAL
,

153 
	`ARRAY_SIZE
(
¸5000_gpio_keys
),

154 
¸5000_gpio_keys
);

155 
	`©h79_ªgi°î_usb
();

156 
	`©h79_ªgi°î_wmac
(
¨t
 + 
CR5000_WMAC_CALDATA_OFFSET
,áπ + 
CR5000_WMAC_MAC_OFFSET
);

157 
	`≠91_pci_öô
(
NULL
, 
¨t
 + 
CR5000_PCIE_WMAC_OFFSET
);

158 
pd©a
 = 
	`≠9x_pci_gë_wmac_d©a
(0);

159 i‡(
pd©a
)

160 
pd©a
->
u£_ì¥om
 = 
åue
;

162 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

163 
	`©h79_ªgi°î_mdio
(0, 0x0);

165 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
CR5000_MAC0_OFFSET
, 0);

167 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
¸5000_mdio0_öfo
,

168 
	`ARRAY_SIZE
(
¸5000_mdio0_öfo
));

171 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

172 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

173 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

174 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

175 
	`©h79_ªgi°î_ëh
(0);

176 
	}
}

178 
MIPS_MACHINE
(
ATH79_MACH_CR5000
, "CR5000", "PowerCloud Systems CR5000",

179 
¸5000_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dap-1330-a1.c

22 
	~<löux/gpio.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<asm/mach-©h79/©h79.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

28 
	~"comm⁄.h
"

29 
	~"dev-ëh.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-m25p80.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

35 
	~"nvøm.h
"

37 
	~<löux/kî√l.h
>

38 
	~<löux/vmÆloc.h
>

39 
	~<löux/î∫o.h
>

40 
	~<löux/öô.h
>

41 
	~<löux/°rög.h
>

43 
	#DAP_1330_GPIO_LED_GREEN_POWER
 13

	)

44 
	#DAP_1330_GPIO_LED_RED_POWER
 3

	)

45 
	#DAP_1330_GPIO_LED_GREEN_WIFI
 14

	)

46 
	#DAP_1330_GPIO_LED_RED_WIFI
 11

	)

47 
	#DAP_1330_GPIO_LED_SIGNAL1
 15

	)

48 
	#DAP_1330_GPIO_LED_SIGNAL2
 16

	)

50 
	#DAP_1330_GPIO_BTN_WPS
 2

	)

51 
	#DAP_1330_GPIO_BTN_RESET
 17

	)

53 
	#DAP_1330_KEYS_POLL_INTERVAL
 20

	)

54 
	#DAP_1330_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DAP_1330_KEYS_POLL_INTERVAL
)

	)

56 
	#DAP1330_MAC_ADDR
 0x1f020001

	)

58 
	#DAP1330_WMAC_CALDATA_ADDR
 0x1f010000

	)

59 
	#DAP_1330_WMAC_CALDATA_OFFSET
 0x1000

	)

61 
gpio_Àd
 
	gd≠_1330_Àds_gpio
[] 
	g__öôd©a
 = {

63 .
«me
 = "d-link:green:power",

64 .
	ggpio
 = 
DAP_1330_GPIO_LED_GREEN_POWER
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "d-link:red:power",

69 .
	ggpio
 = 
DAP_1330_GPIO_LED_RED_POWER
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "d-link:green:wifi",

74 .
	ggpio
 = 
DAP_1330_GPIO_LED_GREEN_WIFI
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "d-link:red:wifi",

79 .
	ggpio
 = 
DAP_1330_GPIO_LED_RED_WIFI
,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "d-link:green:signal1",

84 .
	ggpio
 = 
DAP_1330_GPIO_LED_SIGNAL1
,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "d-link:green:signal2",

89 .
	ggpio
 = 
DAP_1330_GPIO_LED_SIGNAL2
,

90 .
	ga˘ive_low
 = 1,

94 
gpio_keys_buâ⁄
 
	gd≠_1330_gpio_keys
[] 
	g__öôd©a
 = {

96 .
desc
 = "WPS button",

97 .
	gty≥
 = 
EV_KEY
,

98 .
	gcode
 = 
KEY_WPS_BUTTON
,

99 .
	gdeboun˚_öãrvÆ
 = 
DAP_1330_KEYS_DEBOUNCE_INTERVAL
,

100 .
	ggpio
 = 
DAP_1330_GPIO_BTN_WPS
,

101 .
	ga˘ive_low
 = 1,

104 .
	gdesc
 = "Reset button",

105 .
	gty≥
 = 
EV_KEY
,

106 .
	gcode
 = 
KEY_RESTART
,

107 .
	gdeboun˚_öãrvÆ
 = 
DAP_1330_KEYS_DEBOUNCE_INTERVAL
,

108 .
	ggpio
 = 
DAP_1330_GPIO_BTN_RESET
,

109 .
	ga˘ive_low
 = 1,

113 
__öô
 
	$d≠_1330_£tup
()

115 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
DAP1330_WMAC_CALDATA_ADDR
);

116 
u8
 *
mac_±r
 = (u8 *Ë
	`KSEG1ADDR
(
DAP1330_MAC_ADDR
);

117 
u8
 
mac
[
ETH_ALEN
];

119 
	`©h79_∑r£_ascii_mac
((*Ë
mac_±r
, 
mac
);

121 
	`©h79_ªgi°î_m25p80
(
NULL
);

123 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
d≠_1330_Àds_gpio
),

124 
d≠_1330_Àds_gpio
);

126 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DAP_1330_KEYS_POLL_INTERVAL
,

127 
	`ARRAY_SIZE
(
d≠_1330_gpio_keys
),

128 
d≠_1330_gpio_keys
);

130 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DAP_1330_WMAC_CALDATA_OFFSET
, 
mac
);

132 
	`©h79_ªgi°î_mdio
(0, 0x0);

134 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

137 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

138 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

139 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

140 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

141 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

142 
	`©h79_ªgi°î_ëh
(1);

143 
	}
}

145 
MIPS_MACHINE
(
ATH79_MACH_DAP_1330_A1
, "DAP-1330-A1",

146 "D-Lök DAP-1330 Rev. A1", 
d≠_1330_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dap-2695-a1.c

22 
	~<löux/mtd/mtd.h
>

23 
	~<löux/mtd/∑πôi⁄s.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

27 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

29 
	~"comm⁄.h
"

30 
	~"pci.h
"

31 
	~"dev-≠9x-pci.h
"

32 
	~"dev-gpio-buâ⁄s.h
"

33 
	~"dev-ëh.h
"

34 
	~"dev-Àds-gpio.h
"

35 
	~"dev-m25p80.h
"

36 
	~"dev-•i.h
"

37 
	~"dev-wmac.h
"

38 
	~"machty≥s.h
"

39 
	~"nvøm.h
"

41 
	#DAP2695_GPIO_LED_GREEN_POWER
 23

	)

42 
	#DAP2695_GPIO_LED_RED_POWER
 14

	)

43 
	#DAP2695_GPIO_LED_WLAN_2G
 13

	)

45 
	#DAP2695_GPIO_BTN_RESET
 17

	)

47 
	#DAP2695_KEYS_POLL_INTERVAL
 20

	)

48 
	#DAP2695_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DAP2695_KEYS_POLL_INTERVAL
)

	)

50 
	#DAP2695_NVRAM_ADDR
 0x1f040000

	)

51 
	#DAP2695_NVRAM_SIZE
 0x10000

	)

53 
	#DAP2695_MAC0_OFFSET
 1

	)

54 
	#DAP2695_MAC1_OFFSET
 2

	)

55 
	#DAP2695_WMAC_CALDATA_OFFSET
 0x1000

	)

57 
gpio_Àd
 
	gd≠2695_Àds_gpio
[] 
	g__öôd©a
 = {

59 .
«me
 = "d-link:green:power",

60 .
	ggpio
 = 
DAP2695_GPIO_LED_GREEN_POWER
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "d-link:red:power",

65 .
	ggpio
 = 
DAP2695_GPIO_LED_RED_POWER
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "d-link:green:wlan2g",

70 .
	ggpio
 = 
DAP2695_GPIO_LED_WLAN_2G
,

71 .
	ga˘ive_low
 = 1,

75 
gpio_keys_buâ⁄
 
	gd≠2695_gpio_keys
[] 
	g__öôd©a
 = {

77 .
desc
 = "SoftÑeset",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_RESTART
,

80 .
	gdeboun˚_öãrvÆ
 = 
DAP2695_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
DAP2695_GPIO_BTN_RESET
,

82 .
	ga˘ive_low
 = 1,

86 
¨8327_∑d_cfg
 
	gd≠2695_¨8327_∑d0_cfg
 = {

87 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

88 .
	gtx˛k_dñay_í
 = 
åue
,

89 .
	grx˛k_dñay_í
 = 
åue
,

90 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

91 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

92 .
	gmac06_exch™ge_dis
 = 
åue
,

95 
¨8327_∑d_cfg
 
	gd≠2695_¨8327_∑d6_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

97 .
	gsgmii_dñay_í
 = 
åue
,

100 
¨8327_∂©f‹m_d©a
 
	gd≠2695_¨8327_d©a
 = {

101 .
∑d0_cfg
 = &
d≠2695_¨8327_∑d0_cfg
,

102 .
	g∑d6_cfg
 = &
d≠2695_¨8327_∑d6_cfg
,

103 .
	gp‹t0_cfg
 = {

104 .
f‹˚_lök
 = 1,

105 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

106 .
	gdu∂ex
 = 1,

107 .
	gtx∑u£
 = 1,

108 .
	grx∑u£
 = 1,

110 .
	gp‹t6_cfg
 = {

111 .
f‹˚_lök
 = 1,

112 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

113 .
	gdu∂ex
 = 1,

114 .
	gtx∑u£
 = 1,

115 .
	grx∑u£
 = 1,

119 
mdio_bﬂrd_öfo
 
	gd≠2695_mdio0_öfo
[] = {

121 .
bus_id
 = "ag71xx-mdio.0",

122 .
	gmdio_addr
 = 0,

123 .
	g∂©f‹m_d©a
 = &
d≠2695_¨8327_d©a
,

127 
Êash_∂©f‹m_d©a
 
	gd≠2695_Êash_d©a
 = {

128 .
ty≥
 = "mx25l12805d",

131 
	$d≠2695_gë_mac
(c⁄° *
«me
, *
mac
)

133 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
DAP2695_NVRAM_ADDR
);

134 
îr
;

136 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
DAP2695_NVRAM_SIZE
,

137 
«me
, 
mac
);

138 i‡(
îr
)

139 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

140 
	}
}

142 
__öô
 
	$d≠2695_£tup
()

144 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

145 
u8
 
mac0
[
ETH_ALEN
], 
mac1
[ETH_ALEN], 
wmac0
[ETH_ALEN];

147 
	`d≠2695_gë_mac
("œnmac=", 
mac0
);

148 
	`d≠2695_gë_mac
("w™mac=", 
mac1
);

149 
	`d≠2695_gë_mac
("wœnmac=", 
wmac0
);

151 
	`©h79_ªgi°î_m25p80
(&
d≠2695_Êash_d©a
);

153 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
d≠2695_Àds_gpio
),

154 
d≠2695_Àds_gpio
);

155 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DAP2695_KEYS_POLL_INTERVAL
,

156 
	`ARRAY_SIZE
(
d≠2695_gpio_keys
),

157 
d≠2695_gpio_keys
);

159 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DAP2695_WMAC_CALDATA_OFFSET
, 
wmac0
);

161 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

163 
	`©h79_ªgi°î_mdio
(0, 0x0);

165 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
d≠2695_mdio0_öfo
,

166 
	`ARRAY_SIZE
(
d≠2695_mdio0_öfo
));

169 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 
DAP2695_MAC0_OFFSET
);

170 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

171 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

172 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

173 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

175 
	`©h79_ªgi°î_ëh
(0);

178 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac1
, 
DAP2695_MAC1_OFFSET
);

179 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

180 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

181 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

182 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

184 
	`©h79_ªgi°î_ëh
(1);

186 
	`©h79_ªgi°î_pci
();

187 
	}
}

189 
MIPS_MACHINE
(
ATH79_MACH_DAP_2695_A1
, "DAP-2695-A1",

191 
d≠2695_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dgl-5500-a1.c

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/¨8216_∂©f‹m.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"pci.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#DGL_5500_A1_GPIO_LED_POWER_ORANGE
 14

	)

29 
	#DGL_5500_A1_GPIO_LED_POWER_GREEN
 19

	)

30 
	#DGL_5500_A1_GPIO_LED_PLANET_GREEN
 22

	)

31 
	#DGL_5500_A1_GPIO_LED_PLANET_ORANGE
 23

	)

33 
	#DGL_5500_A1_GPIO_BTN_WPS
 16

	)

34 
	#DGL_5500_A1_GPIO_BTN_RESET
 17

	)

36 
	#DGL_5500_A1_KEYS_POLL_INTERVAL
 20

	)

37 
	#DGL_5500_A1_KEYS_DEBOUNCE_INTERVAL
 \

38 (3 * 
DGL_5500_A1_KEYS_POLL_INTERVAL
)

	)

40 
	#DGL_5500_A1_WMAC_CALDATA_OFFSET
 0x1000

	)

42 
	#DGL_5500_A1_LAN_MAC_OFFSET
 0x04

	)

43 
	#DGL_5500_A1_WAN_MAC_OFFSET
 0x16

	)

45 
gpio_Àd
 
	gdgl_5500_a1_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "d-link:green:power",

48 .
	ggpio
 = 
DGL_5500_A1_GPIO_LED_POWER_GREEN
,

49 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "d-link:orange:power",

53 .
	ggpio
 = 
DGL_5500_A1_GPIO_LED_POWER_ORANGE
,

54 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "d-link:green:planet",

58 .
	ggpio
 = 
DGL_5500_A1_GPIO_LED_PLANET_GREEN
,

59 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "d-link:orange:planet",

63 .
	ggpio
 = 
DGL_5500_A1_GPIO_LED_PLANET_ORANGE
,

64 .
	ga˘ive_low
 = 1,

68 
gpio_keys_buâ⁄
 
	gdgl_5500_a1_gpio_keys
[] 
	g__öôd©a
 = {

70 .
desc
 = "Reset button",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_RESTART
,

73 .
	gdeboun˚_öãrvÆ
 = 
DGL_5500_A1_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
DGL_5500_A1_GPIO_BTN_RESET
,

75 .
	ga˘ive_low
 = 1,

78 .
	gdesc
 = "WPS button",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_WPS_BUTTON
,

81 .
	gdeboun˚_öãrvÆ
 = 
DGL_5500_A1_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
DGL_5500_A1_GPIO_BTN_WPS
,

83 .
	ga˘ive_low
 = 1,

87 
¨8327_∑d_cfg
 
	gdgl_5500_a1_¨8327_∑d0_cfg
 = {

89 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

90 .
	gsgmii_dñay_í
 = 
åue
,

93 
¨8327_∂©f‹m_d©a
 
	gdgl_5500_a1_¨8327_d©a
 = {

94 .
∑d0_cfg
 = &
dgl_5500_a1_¨8327_∑d0_cfg
,

95 .
	gp‹t0_cfg
 = {

96 .
f‹˚_lök
 = 1,

97 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

98 .
	gdu∂ex
 = 1,

99 .
	gtx∑u£
 = 1,

100 .
	grx∑u£
 = 1,

104 
mdio_bﬂrd_öfo
 
	gdgl_5500_a1_mdio0_öfo
[] = {

106 .
bus_id
 = "ag71xx-mdio.0",

107 .
	gmdio_addr
 = 0,

108 .
	g∂©f‹m_d©a
 = &
dgl_5500_a1_¨8327_d©a
,

112 
__öô
 
	$dgl_5500_a1_£tup
()

114 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffe0000);

115 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

116 
u8
 
œn_mac
[
ETH_ALEN
];

118 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DGL_5500_A1_LAN_MAC_OFFSET
, 
œn_mac
);

120 
	`©h79_ªgi°î_m25p80
(
NULL
);

122 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dgl_5500_a1_Àds_gpio
),

123 
dgl_5500_a1_Àds_gpio
);

124 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DGL_5500_A1_KEYS_POLL_INTERVAL
,

125 
	`ARRAY_SIZE
(
dgl_5500_a1_gpio_keys
),

126 
dgl_5500_a1_gpio_keys
);

128 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DGL_5500_A1_WMAC_CALDATA_OFFSET
, 
œn_mac
);

130 
	`©h79_ªgi°î_mdio
(0, 0x0);

131 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dgl_5500_a1_mdio0_öfo
,

132 
	`ARRAY_SIZE
(
dgl_5500_a1_mdio0_öfo
));

134 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
œn_mac
, 0);

137 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

138 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(0);

139 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

141 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

143 
	`©h79_ªgi°î_ëh
(1);

145 
	`©h79_ªgi°î_usb
();

146 
	`©h79_ªgi°î_pci
();

147 
	}
}

149 
MIPS_MACHINE
(
ATH79_MACH_DGL_5500_A1
, "DGL-5500-A1", "D-Link DGL-5500Ñev. A1",

150 
dgl_5500_a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dhp-1565-a1.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#DHP1565A1_GPIO_LED_BLUE_USB
 11

	)

32 
	#DHP1565A1_GPIO_LED_AMBER_POWER
 14

	)

33 
	#DHP1565A1_GPIO_LED_BLUE_POWER
 22

	)

34 
	#DHP1565A1_GPIO_LED_BLUE_WPS
 15

	)

35 
	#DHP1565A1_GPIO_LED_AMBER_PLANET
 19

	)

36 
	#DHP1565A1_GPIO_LED_BLUE_PLANET
 18

	)

37 
	#DHP1565A1_GPIO_LED_WLAN_2G
 13

	)

39 
	#DHP1565A1_GPIO_WAN_LED_ENABLE
 20

	)

41 
	#DHP1565A1_GPIO_BTN_RESET
 17

	)

42 
	#DHP1565A1_GPIO_BTN_WPS
 16

	)

44 
	#DHP1565A1_KEYS_POLL_INTERVAL
 20

	)

45 
	#DHP1565A1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DHP1565A1_KEYS_POLL_INTERVAL
)

	)

47 
	#DHP1565A1_MAC0_OFFSET
 0xFFA0

	)

48 
	#DHP1565A1_MAC1_OFFSET
 0xFFB4

	)

49 
	#DHP1565A1_WMAC0_OFFSET
 0x5

	)

50 
	#DHP1565A1_WMAC_CALDATA_OFFSET
 0x1000

	)

51 
	#DHP1565A1_PCIE_CALDATA_OFFSET
 0x5000

	)

53 
gpio_Àd
 
	gdhp1565a1_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "d-link:amber:power",

56 .
	ggpio
 = 
DHP1565A1_GPIO_LED_AMBER_POWER
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "d-link:green:power",

61 .
	ggpio
 = 
DHP1565A1_GPIO_LED_BLUE_POWER
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "d-link:amber:planet",

66 .
	ggpio
 = 
DHP1565A1_GPIO_LED_AMBER_PLANET
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "d-link:green:planet",

71 .
	ggpio
 = 
DHP1565A1_GPIO_LED_BLUE_PLANET
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gdhp1565a1_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "SoftÑeset",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_RESTART
,

81 .
	gdeboun˚_öãrvÆ
 = 
DHP1565A1_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
DHP1565A1_GPIO_BTN_RESET
,

83 .
	ga˘ive_low
 = 1,

86 .
	gdesc
 = "WPS button",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_WPS_BUTTON
,

89 .
	gdeboun˚_öãrvÆ
 = 
DHP1565A1_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
DHP1565A1_GPIO_BTN_WPS
,

91 .
	ga˘ive_low
 = 1,

95 
¨8327_∑d_cfg
 
	gdhp1565a1_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

103 
¨8327_∂©f‹m_d©a
 
	gdhp1565a1_¨8327_d©a
 = {

104 .
∑d0_cfg
 = &
dhp1565a1_¨8327_∑d0_cfg
,

105 .
	gp‹t0_cfg
 = {

106 .
f‹˚_lök
 = 1,

107 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

108 .
	gdu∂ex
 = 1,

109 .
	gtx∑u£
 = 1,

110 .
	grx∑u£
 = 1,

114 
mdio_bﬂrd_öfo
 
	gdhp1565a1_mdio0_öfo
[] = {

116 .
bus_id
 = "ag71xx-mdio.0",

117 .
	gmdio_addr
 = 0,

118 .
	g∂©f‹m_d©a
 = &
dhp1565a1_¨8327_d©a
,

122 
__öô
 
	$dhp1565a1_gíîic_£tup
()

124 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffe0000);

125 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

126 
u8
 
mac0
[
ETH_ALEN
], 
mac1
[ETH_ALEN];

127 
u8
 
wmac0
[
ETH_ALEN
];

129 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DHP1565A1_MAC0_OFFSET
, 
mac0
);

130 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DHP1565A1_MAC1_OFFSET
, 
mac1
);

132 
	`©h79_ªgi°î_m25p80
(
NULL
);

134 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DHP1565A1_KEYS_POLL_INTERVAL
,

135 
	`ARRAY_SIZE
(
dhp1565a1_gpio_keys
),

136 
dhp1565a1_gpio_keys
);

138 
	`©h79_öô_mac
(
wmac0
, 
mac0
, 0);

139 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DHP1565A1_WMAC_CALDATA_OFFSET
, 
wmac0
);

141 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

143 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dhp1565a1_mdio0_öfo
,

144 
	`ARRAY_SIZE
(
dhp1565a1_mdio0_öfo
));

146 
	`©h79_ªgi°î_mdio
(0, 0x0);

148 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 1);

151 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

152 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

153 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

154 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

155 
	`©h79_ªgi°î_ëh
(0);

157 
	`©h79_ªgi°î_usb
();

158 
	}
}

160 
__öô
 
	$dhp1565a1_£tup
()

162 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dhp1565a1_Àds_gpio
),

163 
dhp1565a1_Àds_gpio
);

165 
	`dhp1565a1_gíîic_£tup
();

166 
	}
}

168 
MIPS_MACHINE
(
ATH79_MACH_DHP_1565_A1
, "DHP-1565-A1",

170 
dhp1565a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-505-a1.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"dev-usb.h
"

23 
	~"machty≥s.h
"

25 
	#DIR_505A1_GPIO_BTN_WPS
 11

	)

26 
	#DIR_505A1_GPIO_BTN_RESET
 12

	)

28 
	#DIR_505A1_GPIO_LED_RED
 26

	)

29 
	#DIR_505A1_GPIO_LED_GREEN
 27

	)

31 
	#DIR_505A1_GPIO_WAN_LED_ENABLE
 1

	)

33 
	#DIR_505A1_KEYS_POLL_INTERVAL
 20

	)

34 
	#DIR_505A1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR_505A1_KEYS_POLL_INTERVAL
)

	)

36 
	#DIR_505A1_ART_ADDRESS
 0x1f010000

	)

37 
	#DIR_505A1_CALDATA_OFFSET
 0x1000

	)

39 
	#DIR_505A1_MAC_PART_ADDRESS
 0x1f020000

	)

40 
	#DIR_505A1_LAN_MAC_OFFSET
 0x04

	)

41 
	#DIR_505A1_WAN_MAC_OFFSET
 0x16

	)

43 
gpio_Àd
 
	gdú_505_a1_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "d-link:green:power",

46 .
	ggpio
 = 
DIR_505A1_GPIO_LED_GREEN
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "d-link:red:status",

50 .
	ggpio
 = 
DIR_505A1_GPIO_LED_RED
,

51 .
	ga˘ive_low
 = 1,

55 
gpio_keys_buâ⁄
 
	gdú_505_a1_gpio_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "Reset button",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
DIR_505A1_KEYS_DEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
DIR_505A1_GPIO_BTN_RESET
,

62 .
	ga˘ive_low
 = 0,

64 .
	gdesc
 = "WPS button",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
KEY_WPS_BUTTON
,

67 .
	gdeboun˚_öãrvÆ
 = 
DIR_505A1_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 
DIR_505A1_GPIO_BTN_WPS
,

69 .
	ga˘ive_low
 = 1,

73 
__öô
 
	$dú_505_a1_£tup
()

75 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
DIR_505A1_ART_ADDRESS
);

76 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
DIR_505A1_MAC_PART_ADDRESS
);

77 
u8
 
œn_mac
[
ETH_ALEN
];

78 
u8
 
w™_mac
[
ETH_ALEN
];

80 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

82 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

83 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

84 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

85 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

86 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

88 
	`gpio_ªque°_⁄e
(
DIR_505A1_GPIO_WAN_LED_ENABLE
,

89 
GPIOF_OUT_INIT_LOW
, "WAN LEDÉnable");

91 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú_505_a1_Àds_gpio
),

92 
dú_505_a1_Àds_gpio
);

94 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
DIR_505A1_KEYS_POLL_INTERVAL
,

95 
	`ARRAY_SIZE
(
dú_505_a1_gpio_keys
),

96 
dú_505_a1_gpio_keys
);

98 
	`©h79_ªgi°î_m25p80
(
NULL
);

100 
	`©h79_ªgi°î_usb
();

102 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DIR_505A1_LAN_MAC_OFFSET
, 
œn_mac
);

103 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DIR_505A1_WAN_MAC_OFFSET
, 
w™_mac
);

105 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
w™_mac
, 0);

106 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
œn_mac
, 0);

108 
	`©h79_ªgi°î_mdio
(0, 0x0);

109 
	`©h79_ªgi°î_ëh
(1);

110 
	`©h79_ªgi°î_ëh
(0);

112 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DIR_505A1_CALDATA_OFFSET
, 
œn_mac
);

113 
	}
}

115 
MIPS_MACHINE
(
ATH79_MACH_DIR_505_A1
, "DIR-505-A1",

116 "D-Lök DIR-505Ñev. A1", 
dú_505_a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-600-a1.c

12 
	~<asm/mach-©h79/©h79.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-≠9x-pci.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"machty≥s.h
"

22 
	~"nvøm.h
"

24 
	#DIR_600_A1_GPIO_LED_WPS
 0

	)

25 
	#DIR_600_A1_GPIO_LED_POWER_AMBER
 1

	)

26 
	#DIR_600_A1_GPIO_LED_POWER_GREEN
 6

	)

27 
	#DIR_600_A1_GPIO_LED_LAN1
 13

	)

28 
	#DIR_600_A1_GPIO_LED_LAN2
 14

	)

29 
	#DIR_600_A1_GPIO_LED_LAN3
 15

	)

30 
	#DIR_600_A1_GPIO_LED_LAN4
 16

	)

31 
	#DIR_600_A1_GPIO_LED_WAN_AMBER
 7

	)

32 
	#DIR_600_A1_GPIO_LED_WAN_GREEN
 17

	)

34 
	#DIR_600_A1_GPIO_BTN_RESET
 8

	)

35 
	#DIR_600_A1_GPIO_BTN_WPS
 12

	)

37 
	#DIR_600_A1_KEYS_POLL_INTERVAL
 20

	)

38 
	#DIR_600_A1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR_600_A1_KEYS_POLL_INTERVAL
)

	)

40 
	#DIR_600_A1_NVRAM_ADDR
 0x1f030000

	)

41 
	#DIR_600_A1_NVRAM_SIZE
 0x10000

	)

43 
gpio_Àd
 
	gdú_600_a1_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "d-link:green:power",

46 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_POWER_GREEN
,

48 .
	g«me
 = "d-link:amber:power",

49 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_POWER_AMBER
,

51 .
	g«me
 = "d-link:amber:wan",

52 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_WAN_AMBER
,

54 .
	g«me
 = "d-link:green:wan",

55 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_WAN_GREEN
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "d-link:green:lan1",

59 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_LAN1
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "d-link:green:lan2",

63 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_LAN2
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "d-link:green:lan3",

67 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_LAN3
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "d-link:green:lan4",

71 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_LAN4
,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "d-link:blue:wps",

75 .
	ggpio
 = 
DIR_600_A1_GPIO_LED_WPS
,

76 .
	ga˘ive_low
 = 1,

80 
gpio_keys_buâ⁄
 
	gdú_600_a1_gpio_keys
[] 
	g__öôd©a
 = {

82 .
desc
 = "reset",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RESTART
,

85 .
	gdeboun˚_öãrvÆ
 = 
DIR_600_A1_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
DIR_600_A1_GPIO_BTN_RESET
,

87 .
	ga˘ive_low
 = 1,

89 .
	gdesc
 = "wps",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_WPS_BUTTON
,

92 .
	gdeboun˚_öãrvÆ
 = 
DIR_600_A1_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
DIR_600_A1_GPIO_BTN_WPS
,

94 .
	ga˘ive_low
 = 1,

98 
__öô
 
	$dú_600_a1_£tup
()

100 c⁄° *
nvøm
 = (*Ë
	`KSEG1ADDR
(
DIR_600_A1_NVRAM_ADDR
);

101 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

102 
u8
 
mac_buff
[6];

103 
u8
 *
mac
 = 
NULL
;

105 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
DIR_600_A1_NVRAM_SIZE
,

106 "œn_mac=", 
mac_buff
) == 0) {

107 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac_buff
, 0);

108 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac_buff
, 1);

109 
mac
 = 
mac_buff
;

112 
	`©h79_ªgi°î_m25p80
(
NULL
);

114 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

115 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

116 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

117 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

118 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

120 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú_600_a1_Àds_gpio
),

121 
dú_600_a1_Àds_gpio
);

123 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR_600_A1_KEYS_POLL_INTERVAL
,

124 
	`ARRAY_SIZE
(
dú_600_a1_gpio_keys
),

125 
dú_600_a1_gpio_keys
);

127 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

128 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

130 
	`©h79_ªgi°î_mdio
(0, 0x0);

133 
	`©h79_ªgi°î_ëh
(1);

136 
	`©h79_ªgi°î_ëh
(0);

138 
	`≠91_pci_öô
(
ì
, 
mac
);

139 
	}
}

141 
MIPS_MACHINE
(
ATH79_MACH_DIR_600_A1
, "DIR-600-A1", "D-Link DIR-600Ñev. A1",

142 
dú_600_a1_£tup
);

144 
MIPS_MACHINE
(
ATH79_MACH_EBR_2310_C1
, "EBR-2310-C1", "D-Link EBR-2310Ñev. C1",

145 
dú_600_a1_£tup
);

147 
__öô
 
	$dú_615_e1_£tup
()

149 
	`dú_600_a1_£tup
();

150 
	}
}

152 
MIPS_MACHINE
(
ATH79_MACH_DIR_615_E1
, "DIR-615-E1", "D-Link DIR-615Ñev. E1",

153 
dú_615_e1_£tup
);

155 
__öô
 
	$dú_615_e4_£tup
()

157 
	`dú_600_a1_£tup
();

158 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 1);

159 
	}
}

161 
MIPS_MACHINE
(
ATH79_MACH_DIR_615_E4
, "DIR-615-E4", "D-Link DIR-615Ñev. E4",

162 
dú_615_e4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-615-c1.c

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

20 
	~"nvøm.h
"

22 
	#DIR_615C1_GPIO_LED_ORANGE_STATUS
 1

	)

23 
	#DIR_615C1_GPIO_LED_BLUE_WPS
 3

	)

24 
	#DIR_615C1_GPIO_LED_GREEN_WAN
 4

	)

25 
	#DIR_615C1_GPIO_LED_GREEN_WANCPU
 5

	)

26 
	#DIR_615C1_GPIO_LED_GREEN_WLAN
 6

	)

27 
	#DIR_615C1_GPIO_LED_GREEN_STATUS
 14

	)

28 
	#DIR_615C1_GPIO_LED_ORANGE_WAN
 15

	)

32 
	#DIR_615C1_GPIO_BTN_WPS
 12

	)

33 
	#DIR_615C1_GPIO_BTN_RESET
 21

	)

35 
	#DIR_615C1_KEYS_POLL_INTERVAL
 20

	)

36 
	#DIR_615C1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR_615C1_KEYS_POLL_INTERVAL
)

	)

38 
	#DIR_615C1_CONFIG_ADDR
 0x1f020000

	)

39 
	#DIR_615C1_CONFIG_SIZE
 0x10000

	)

41 
	#DIR_615C1_WLAN_MAC_ADDR
 0x1f3fffb4

	)

43 
gpio_Àd
 
	gdú_615c1_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "d-link:orange:status",

46 .
	ggpio
 = 
DIR_615C1_GPIO_LED_ORANGE_STATUS
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "d-link:blue:wps",

50 .
	ggpio
 = 
DIR_615C1_GPIO_LED_BLUE_WPS
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "d-link:green:wan",

54 .
	ggpio
 = 
DIR_615C1_GPIO_LED_GREEN_WAN
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "d-link:green:wancpu",

58 .
	ggpio
 = 
DIR_615C1_GPIO_LED_GREEN_WANCPU
,

59 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "d-link:green:wlan",

62 .
	ggpio
 = 
DIR_615C1_GPIO_LED_GREEN_WLAN
,

63 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "d-link:green:status",

66 .
	ggpio
 = 
DIR_615C1_GPIO_LED_GREEN_STATUS
,

67 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "d-link:orange:wan",

70 .
	ggpio
 = 
DIR_615C1_GPIO_LED_ORANGE_WAN
,

71 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gdú_615c1_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "reset",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_RESTART
,

81 .
	gdeboun˚_öãrvÆ
 = 
DIR_615C1_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
DIR_615C1_GPIO_BTN_RESET
,

84 .
	gdesc
 = "wps",

85 .
	gty≥
 = 
EV_KEY
,

86 .
	gcode
 = 
KEY_WPS_BUTTON
,

87 .
	gdeboun˚_öãrvÆ
 = 
DIR_615C1_KEYS_DEBOUNCE_INTERVAL
,

88 .
	ggpio
 = 
DIR_615C1_GPIO_BTN_WPS
,

92 
	#DIR_615C1_LAN_PHYMASK
 
	`BIT
(0)

	)

93 
	#DIR_615C1_WAN_PHYMASK
 
	`BIT
(4)

	)

94 
	#DIR_615C1_MDIO_MASK
 (~(
DIR_615C1_LAN_PHYMASK
 | \

95 
DIR_615C1_WAN_PHYMASK
))

	)

97 
__öô
 
	$dú_615c1_£tup
()

99 c⁄° *
c⁄fig
 = (*Ë
	`KSEG1ADDR
(
DIR_615C1_CONFIG_ADDR
);

100 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

101 
u8
 
mac
[
ETH_ALEN
], 
wœn_mac
[ETH_ALEN];

103 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
c⁄fig
, 
DIR_615C1_CONFIG_SIZE
,

104 "œn_mac=", 
mac
) == 0) {

105 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

106 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

109 
	`©h79_∑r£_ascii_mac
((*Ë
	`KSEG1ADDR
(
DIR_615C1_WLAN_MAC_ADDR
), 
wœn_mac
);

111 
	`©h79_ªgi°î_mdio
(0, 
DIR_615C1_MDIO_MASK
);

113 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

114 
©h79_ëh0_d©a
.
phy_mask
 = 
DIR_615C1_LAN_PHYMASK
;

116 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

117 
©h79_ëh1_d©a
.
phy_mask
 = 
DIR_615C1_WAN_PHYMASK
;

119 
	`©h79_ªgi°î_ëh
(0);

120 
	`©h79_ªgi°î_ëh
(1);

122 
	`©h79_ªgi°î_m25p80
(
NULL
);

124 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú_615c1_Àds_gpio
),

125 
dú_615c1_Àds_gpio
);

127 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR_615C1_KEYS_POLL_INTERVAL
,

128 
	`ARRAY_SIZE
(
dú_615c1_gpio_keys
),

129 
dú_615c1_gpio_keys
);

131 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
wœn_mac
);

132 
	}
}

134 
MIPS_MACHINE
(
ATH79_MACH_DIR_615_C1
, "DIR-615-C1", "D-Link DIR-615Ñev. C1",

135 
dú_615c1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-615-i1.c

17 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<asm/mach-©h79/©h79.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~"comm⁄.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#DIR_615_I1_GPIO_LED_WPS
 15

	)

31 
	#DIR_615_I1_GPIO_LED_POWER_AMBER
 14

	)

32 
	#DIR_615_I1_GPIO_LED_POWER_GREEN
 4

	)

33 
	#DIR_615_I1_GPIO_LED_WAN_AMBER
 22

	)

34 
	#DIR_615_I1_GPIO_LED_WAN_GREEN
 12

	)

35 
	#DIR_615_I1_GPIO_LED_WLAN_GREEN
 13

	)

37 
	#DIR_615_I1_GPIO_BTN_WPS
 16

	)

38 
	#DIR_615_I1_GPIO_BTN_RESET
 17

	)

40 
	#DIR_615_I1_KEYS_POLL_INTERVAL
 20

	)

41 
	#DIR_615_I1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR_615_I1_KEYS_POLL_INTERVAL
)

	)

43 
	#DIR_615_I1_LAN_PHYMASK
 
	`BIT
(0)

	)

44 
	#DIR_615_I1_WAN_PHYMASK
 
	`BIT
(4)

	)

45 
	#DIR_615_I1_WLAN_MAC_ADDR
 0x1fffffb4

	)

47 
gpio_Àd
 
	gdú_615_i1_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "d-link:green:power",

50 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_POWER_GREEN
,

52 .
	g«me
 = "d-link:amber:power",

53 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_POWER_AMBER
,

55 .
	g«me
 = "d-link:amber:wan",

56 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_WAN_AMBER
,

58 .
	g«me
 = "d-link:green:wan",

59 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_WAN_GREEN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "d-link:green:wlan",

63 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_WLAN_GREEN
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "d-link:blue:wps",

67 .
	ggpio
 = 
DIR_615_I1_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 1,

72 
gpio_keys_buâ⁄
 
	gdú_615_i1_gpio_keys
[] 
	g__öôd©a
 = {

74 .
desc
 = "reset",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
KEY_RESTART
,

77 .
	gdeboun˚_öãrvÆ
 = 
DIR_615_I1_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
DIR_615_I1_GPIO_BTN_RESET
,

79 .
	ga˘ive_low
 = 1,

81 .
	gdesc
 = "wps",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
KEY_WPS_BUTTON
,

84 .
	gdeboun˚_öãrvÆ
 = 
DIR_615_I1_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
DIR_615_I1_GPIO_BTN_WPS
,

86 .
	ga˘ive_low
 = 1,

90 
__öô
 
	$dú_615_i1_£tup
()

92 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

93 
u8
 
mac
[
ETH_ALEN
];

95 
	`©h79_ªgi°î_mdio
(0, 0x0);

96 
	`©h79_ªgi°î_mdio
(1, ~(
DIR_615_I1_WAN_PHYMASK
));

98 
	`©h79_∑r£_ascii_mac
((*Ë
	`KSEG1ADDR
(
DIR_615_I1_WLAN_MAC_ADDR
), 
mac
);

99 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

100 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

103 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

104 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

105 
©h79_ëh0_d©a
.
phy_mask
 = 
DIR_615_I1_WAN_PHYMASK
;

106 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

109 
©h79_ëh1_d©a
.
phy_mask
 = 
DIR_615_I1_LAN_PHYMASK
;

110 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

112 
	`©h79_ªgi°î_ëh
(0);

113 
	`©h79_ªgi°î_ëh
(1);

115 
	`©h79_ªgi°î_m25p80
(
NULL
);

119 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

120 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

122 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú_615_i1_Àds_gpio
),

123 
dú_615_i1_Àds_gpio
);

125 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR_615_I1_KEYS_POLL_INTERVAL
,

126 
	`ARRAY_SIZE
(
dú_615_i1_gpio_keys
),

127 
dú_615_i1_gpio_keys
);

129 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

130 
	}
}

132 
MIPS_MACHINE
(
ATH79_MACH_DIR_615_I1
, "DIR-615-I1", "D-Link DIR-615Ñev. I1",

133 
dú_615_i1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-825-b1.c

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/dñay.h
>

15 
	~<löux/πl8366.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"dev-ëh.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"machty≥s.h
"

27 
	#DIR825B1_GPIO_LED_BLUE_USB
 0

	)

28 
	#DIR825B1_GPIO_LED_ORANGE_POWER
 1

	)

29 
	#DIR825B1_GPIO_LED_BLUE_POWER
 2

	)

30 
	#DIR825B1_GPIO_LED_BLUE_WPS
 4

	)

31 
	#DIR825B1_GPIO_LED_ORANGE_PLANET
 6

	)

32 
	#DIR825B1_GPIO_LED_BLUE_PLANET
 11

	)

34 
	#DIR825B1_GPIO_BTN_RESET
 3

	)

35 
	#DIR825B1_GPIO_BTN_WPS
 8

	)

37 
	#DIR825B1_GPIO_RTL8366_SDA
 5

	)

38 
	#DIR825B1_GPIO_RTL8366_SCK
 7

	)

40 
	#DIR825B1_KEYS_POLL_INTERVAL
 20

	)

41 
	#DIR825B1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR825B1_KEYS_POLL_INTERVAL
)

	)

43 
	#DIR825B1_CAL0_OFFSET
 0x1000

	)

44 
	#DIR825B1_CAL1_OFFSET
 0x5000

	)

45 
	#DIR825B1_MAC0_OFFSET
 0xfÁ0

	)

46 
	#DIR825B1_MAC1_OFFSET
 0xffb4

	)

48 
	#DIR825B1_CAL_LOCATION_0
 0x1f660000

	)

49 
	#DIR825B1_CAL_LOCATION_1
 0x1f7f0000

	)

51 
gpio_Àd
 
	gdú825b1_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "d-link:blue:usb",

54 .
	ggpio
 = 
DIR825B1_GPIO_LED_BLUE_USB
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "d-link:orange:power",

58 .
	ggpio
 = 
DIR825B1_GPIO_LED_ORANGE_POWER
,

59 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "d-link:blue:power",

62 .
	ggpio
 = 
DIR825B1_GPIO_LED_BLUE_POWER
,

63 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "d-link:blue:wps",

66 .
	ggpio
 = 
DIR825B1_GPIO_LED_BLUE_WPS
,

67 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "d-link:orange:planet",

70 .
	ggpio
 = 
DIR825B1_GPIO_LED_ORANGE_PLANET
,

71 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "d-link:blue:planet",

74 .
	ggpio
 = 
DIR825B1_GPIO_LED_BLUE_PLANET
,

75 .
	ga˘ive_low
 = 1,

79 
gpio_keys_buâ⁄
 
	gdú825b1_gpio_keys
[] 
	g__öôd©a
 = {

81 .
desc
 = "reset",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
KEY_RESTART
,

84 .
	gdeboun˚_öãrvÆ
 = 
DIR825B1_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
DIR825B1_GPIO_BTN_RESET
,

86 .
	ga˘ive_low
 = 1,

88 .
	gdesc
 = "wps",

89 .
	gty≥
 = 
EV_KEY
,

90 .
	gcode
 = 
KEY_WPS_BUTTON
,

91 .
	gdeboun˚_öãrvÆ
 = 
DIR825B1_KEYS_DEBOUNCE_INTERVAL
,

92 .
	ggpio
 = 
DIR825B1_GPIO_BTN_WPS
,

93 .
	ga˘ive_low
 = 1,

97 
πl8366_öôvÆ
 
	gdú825b1_πl8366s_öôvÆs
[] = {

98 { .
ªg
 = 0x06, .
	gvÆ
 = 0x0108 },

101 
πl8366_∂©f‹m_d©a
 
	gdú825b1_πl8366s_d©a
 = {

102 .
gpio_sda
 = 
DIR825B1_GPIO_RTL8366_SDA
,

103 .
	ggpio_sck
 = 
DIR825B1_GPIO_RTL8366_SCK
,

104 .
	gnum_öôvÆs
 = 
ARRAY_SIZE
(
dú825b1_πl8366s_öôvÆs
),

105 .
	göôvÆs
 = 
dú825b1_πl8366s_öôvÆs
,

108 
∂©f‹m_devi˚
 
	gdú825b1_πl8366s_devi˚
 = {

109 .
«me
 = 
RTL8366S_DRIVER_NAME
,

110 .
	gid
 = -1,

111 .
	gdev
 = {

112 .
∂©f‹m_d©a
 = &
dú825b1_πl8366s_d©a
,

116 
boﬁ
 
__öô
 
	$dú825b1_is_ˇld©a_vÆid
(
u8
 *
p
)

118 
u16
 *
magic0
, *
magic1
;

120 
magic0
 = (
u16
 *)(
p
 + 
DIR825B1_CAL0_OFFSET
);

121 
magic1
 = (
u16
 *)(
p
 + 
DIR825B1_CAL1_OFFSET
);

123  (*
magic0
 =0xa55®&& *
magic1
 == 0xa55a);

124 
	}
}

126 
__öô
 
	$dú825b1_wœn_öô
()

128 
u8
 *
ˇld©a
;

129 
u8
 
mac0
[
ETH_ALEN
], 
mac1
[ETH_ALEN];

130 
u8
 
wmac0
[
ETH_ALEN
], 
wmac1
[ETH_ALEN];

132 
ˇld©a
 = (
u8
 *Ë
	`KSEG1ADDR
(
DIR825B1_CAL_LOCATION_0
);

133 i‡(!
	`dú825b1_is_ˇld©a_vÆid
(
ˇld©a
)) {

134 
ˇld©a
 = (
u8
 *)
	`KSEG1ADDR
(
DIR825B1_CAL_LOCATION_1
);

135 i‡(!
	`dú825b1_is_ˇld©a_vÆid
(
ˇld©a
)) {

136 
	`¥_îr
("no calibration data found\n");

141 
	`©h79_∑r£_ascii_mac
(
ˇld©a
 + 
DIR825B1_MAC0_OFFSET
, 
mac0
);

142 
	`©h79_∑r£_ascii_mac
(
ˇld©a
 + 
DIR825B1_MAC1_OFFSET
, 
mac1
);

144 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 0);

145 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac1
, 0);

146 
	`©h79_öô_mac
(
wmac0
, 
mac0
, 0);

147 
	`©h79_öô_mac
(
wmac1
, 
mac1
, 1);

149 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 5);

150 
	`≠9x_pci_£tup_wmac_Àd_pö
(1, 5);

152 
	`≠94_pci_öô
(
ˇld©a
 + 
DIR825B1_CAL0_OFFSET
, 
wmac0
,

153 
ˇld©a
 + 
DIR825B1_CAL1_OFFSET
, 
wmac1
);

154 
	}
}

156 
__öô
 
	$dú825b1_£tup
()

158 
	`dú825b1_wœn_öô
();

160 
	`©h79_ªgi°î_mdio
(0, 0x0);

162 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
dú825b1_πl8366s_devi˚
.
dev
;

163 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

164 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

165 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

166 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x11110000;

168 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
dú825b1_πl8366s_devi˚
.
dev
;

169 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

170 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

171 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x11110000;

173 
	`©h79_ªgi°î_ëh
(0);

174 
	`©h79_ªgi°î_ëh
(1);

176 
	`©h79_ªgi°î_m25p80
(
NULL
);

178 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú825b1_Àds_gpio
),

179 
dú825b1_Àds_gpio
);

181 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR825B1_KEYS_POLL_INTERVAL
,

182 
	`ARRAY_SIZE
(
dú825b1_gpio_keys
),

183 
dú825b1_gpio_keys
);

185 
	`©h79_ªgi°î_usb
();

187 
	`∂©f‹m_devi˚_ªgi°î
(&
dú825b1_πl8366s_devi˚
);

188 
	}
}

190 
MIPS_MACHINE
(
ATH79_MACH_DIR_825_B1
, "DIR-825-B1", "D-Link DIR-825Ñev. B1",

191 
dú825b1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-825-c1.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#DIR825C1_GPIO_LED_BLUE_USB
 11

	)

32 
	#DIR825C1_GPIO_LED_AMBER_POWER
 14

	)

33 
	#DIR825C1_GPIO_LED_BLUE_POWER
 22

	)

34 
	#DIR825C1_GPIO_LED_BLUE_WPS
 15

	)

35 
	#DIR825C1_GPIO_LED_AMBER_PLANET
 19

	)

36 
	#DIR825C1_GPIO_LED_BLUE_PLANET
 18

	)

37 
	#DIR825C1_GPIO_LED_WLAN_2G
 13

	)

39 
	#DIR825C1_GPIO_WAN_LED_ENABLE
 20

	)

41 
	#DIR825C1_GPIO_BTN_RESET
 17

	)

42 
	#DIR825C1_GPIO_BTN_WPS
 16

	)

44 
	#DIR825C1_KEYS_POLL_INTERVAL
 20

	)

45 
	#DIR825C1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR825C1_KEYS_POLL_INTERVAL
)

	)

47 
	#DIR825C1_MAC0_OFFSET
 0x4

	)

48 
	#DIR825C1_MAC1_OFFSET
 0x18

	)

49 
	#DIR825C1_WMAC_CALDATA_OFFSET
 0x1000

	)

50 
	#DIR825C1_PCIE_CALDATA_OFFSET
 0x5000

	)

52 
gpio_Àd
 
	gdú825c1_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "d-link:blue:usb",

55 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_USB
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "d-link:amber:power",

60 .
	ggpio
 = 
DIR825C1_GPIO_LED_AMBER_POWER
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "d-link:blue:power",

65 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_POWER
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "d-link:blue:wps",

70 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_WPS
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "d-link:amber:planet",

75 .
	ggpio
 = 
DIR825C1_GPIO_LED_AMBER_PLANET
,

76 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "d-link:blue:wlan2g",

80 .
	ggpio
 = 
DIR825C1_GPIO_LED_WLAN_2G
,

81 .
	ga˘ive_low
 = 1,

85 
gpio_Àd
 
	gdú835a1_Àds_gpio
[] 
	g__öôd©a
 = {

87 .
«me
 = "d-link:amber:power",

88 .
	ggpio
 = 
DIR825C1_GPIO_LED_AMBER_POWER
,

89 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "d-link:green:power",

93 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_POWER
,

94 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "d-link:blue:wps",

98 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_WPS
,

99 .
	ga˘ive_low
 = 1,

102 .
	g«me
 = "d-link:amber:planet",

103 .
	ggpio
 = 
DIR825C1_GPIO_LED_AMBER_PLANET
,

104 .
	ga˘ive_low
 = 1,

107 .
	g«me
 = "d-link:green:planet",

108 .
	ggpio
 = 
DIR825C1_GPIO_LED_BLUE_PLANET
,

109 .
	ga˘ive_low
 = 1,

113 
gpio_keys_buâ⁄
 
	gdú825c1_gpio_keys
[] 
	g__öôd©a
 = {

115 .
desc
 = "SoftÑeset",

116 .
	gty≥
 = 
EV_KEY
,

117 .
	gcode
 = 
KEY_RESTART
,

118 .
	gdeboun˚_öãrvÆ
 = 
DIR825C1_KEYS_DEBOUNCE_INTERVAL
,

119 .
	ggpio
 = 
DIR825C1_GPIO_BTN_RESET
,

120 .
	ga˘ive_low
 = 1,

123 .
	gdesc
 = "WPS button",

124 .
	gty≥
 = 
EV_KEY
,

125 .
	gcode
 = 
KEY_WPS_BUTTON
,

126 .
	gdeboun˚_öãrvÆ
 = 
DIR825C1_KEYS_DEBOUNCE_INTERVAL
,

127 .
	ggpio
 = 
DIR825C1_GPIO_BTN_WPS
,

128 .
	ga˘ive_low
 = 1,

132 
¨8327_∑d_cfg
 
	gdú825c1_¨8327_∑d0_cfg
 = {

133 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

134 .
	gtx˛k_dñay_í
 = 
åue
,

135 .
	grx˛k_dñay_í
 = 
åue
,

136 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

137 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

140 
¨8327_Àd_cfg
 
	gdú825c1_¨8327_Àd_cfg
 = {

141 .
Àd_˘æ0
 = 0x00000000,

142 .
	gÀd_˘æ1
 = 0xc737c737,

143 .
	gÀd_˘æ2
 = 0x00000000,

144 .
	gÀd_˘æ3
 = 0x00c30c00,

145 .
	g›í_døö
 = 
åue
,

148 
¨8327_∂©f‹m_d©a
 
	gdú825c1_¨8327_d©a
 = {

149 .
∑d0_cfg
 = &
dú825c1_¨8327_∑d0_cfg
,

150 .
	gp‹t0_cfg
 = {

151 .
f‹˚_lök
 = 1,

152 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

153 .
	gdu∂ex
 = 1,

154 .
	gtx∑u£
 = 1,

155 .
	grx∑u£
 = 1,

157 .
	gÀd_cfg
 = &
dú825c1_¨8327_Àd_cfg
,

160 
mdio_bﬂrd_öfo
 
	gdú825c1_mdio0_öfo
[] = {

162 .
bus_id
 = "ag71xx-mdio.0",

163 .
	gmdio_addr
 = 0,

164 .
	g∂©f‹m_d©a
 = &
dú825c1_¨8327_d©a
,

168 
__öô
 
	$dú825c1_gíîic_£tup
()

170 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffe0000);

171 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

172 
u8
 
mac0
[
ETH_ALEN
], 
mac1
[ETH_ALEN];

173 
u8
 
wmac0
[
ETH_ALEN
], 
wmac1
[ETH_ALEN];

175 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DIR825C1_MAC0_OFFSET
, 
mac0
);

176 
	`©h79_∑r£_ascii_mac
(
mac
 + 
DIR825C1_MAC1_OFFSET
, 
mac1
);

178 
	`©h79_ªgi°î_m25p80
(
NULL
);

180 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR825C1_KEYS_POLL_INTERVAL
,

181 
	`ARRAY_SIZE
(
dú825c1_gpio_keys
),

182 
dú825c1_gpio_keys
);

184 
	`©h79_öô_mac
(
wmac0
, 
mac0
, 0);

185 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DIR825C1_WMAC_CALDATA_OFFSET
, 
wmac0
);

187 
	`©h79_öô_mac
(
wmac1
, 
mac1
, 1);

188 
	`≠91_pci_öô
(
¨t
 + 
DIR825C1_PCIE_CALDATA_OFFSET
, 
wmac1
);

190 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

192 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dú825c1_mdio0_öfo
,

193 
	`ARRAY_SIZE
(
dú825c1_mdio0_öfo
));

195 
	`©h79_ªgi°î_mdio
(0, 0x0);

197 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 0);

200 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

201 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

202 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

203 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

204 
	`©h79_ªgi°î_ëh
(0);

206 
	`©h79_ªgi°î_usb
();

207 
	}
}

209 
__öô
 
	$dú825c1_£tup
()

211 
	`©h79_gpio_ouçut_£À˘
(
DIR825C1_GPIO_LED_BLUE_USB
,

212 
AR934X_GPIO_OUT_GPIO
);

214 
	`gpio_ªque°_⁄e
(
DIR825C1_GPIO_WAN_LED_ENABLE
,

215 
GPIOF_OUT_INIT_LOW
, "WAN LEDÉnable");

217 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú825c1_Àds_gpio
),

218 
dú825c1_Àds_gpio
);

220 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

222 
	`dú825c1_gíîic_£tup
();

223 
	}
}

225 
__öô
 
	$dú835a1_£tup
()

227 
dú825c1_¨8327_d©a
.
Àd_cfg
 = 
NULL
;

229 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú835a1_Àds_gpio
),

230 
dú835a1_Àds_gpio
);

232 
	`dú825c1_gíîic_£tup
();

233 
	}
}

235 
MIPS_MACHINE
(
ATH79_MACH_DIR_825_C1
, "DIR-825-C1",

237 
dú825c1_£tup
);

239 
MIPS_MACHINE
(
ATH79_MACH_DIR_835_A1
, "DIR-835-A1",

241 
dú835a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dir-869-a1.c

15 
	~<löux/gpio.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/pci.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/©h9k_∂©f‹m.h
>

21 
	~<asm/mach-©h79/©h79.h
>

22 
	~<asm/mach-©h79/úq.h
>

23 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

25 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

26 
	~<löux/¨8216_∂©f‹m.h
>

28 
	~"comm⁄.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-wmac.h
"

35 
	~"machty≥s.h
"

36 
	~"nvøm.h
"

39 
	#DIR869A1_GPIO_BTN_RESET
 1

	)

40 
	#DIR869A1_GPIO_BTN_WPS
 2

	)

41 
	#DIR869A1_GPIO_SWITCH_MODE
 8

	)

43 
	#DIR869A1_GPIO_ENABLE_SWITCH
 11

	)

45 
	#DIR869A1_GPIO_LED_ORANGE
 15

	)

46 
	#DIR869A1_GPIO_LED_WHITE
 16

	)

48 
	#DIR869A1_KEYS_POLL_INTERVAL
 20

	)

49 
	#DIR869A1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DIR869A1_KEYS_POLL_INTERVAL
)

	)

52 
	#DIR869A1_DEVDATA_ADDR
 0x1f050000

	)

53 
	#DIR869A1_DEVDATA_SIZE
 0x10000

	)

55 
	#DIR869A1_EEPROM_ADDR
 0x1fff0000

	)

56 
	#DIR869A1_WMAC_CALDATA_OFFSET
 0x1000

	)

57 
	#DIR869A1_PCI_CALDATA_OFFSET
 0x5000

	)

60 
gpio_Àd
 
	gdú869a1_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "d-link:white:status",

63 .
	ggpio
 = 
DIR869A1_GPIO_LED_WHITE
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "d-link:orange:status",

68 .
	ggpio
 = 
DIR869A1_GPIO_LED_ORANGE
,

69 .
	ga˘ive_low
 = 1,

73 
gpio_keys_buâ⁄
 
	gdú869a1_gpio_keys
[] 
	g__öôd©a
 = {

75 .
desc
 = "reset",

76 .
	gty≥
 = 
EV_KEY
,

77 .
	gcode
 = 
KEY_RESTART
,

78 .
	gdeboun˚_öãrvÆ
 = 
DIR869A1_KEYS_DEBOUNCE_INTERVAL
,

79 .
	ggpio
 = 
DIR869A1_GPIO_BTN_RESET
,

80 .
	ga˘ive_low
 = 1,

83 .
	gdesc
 = "wps",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_WPS_BUTTON
,

86 .
	gdeboun˚_öãrvÆ
 = 
DIR869A1_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
DIR869A1_GPIO_BTN_WPS
,

88 .
	ga˘ive_low
 = 1,

91 .
	gdesc
 = "mode",

92 .
	gty≥
 = 
EV_SW
,

93 .
	gcode
 = 
BTN_0
,

94 .
	gdeboun˚_öãrvÆ
 = 
DIR869A1_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ggpio
 = 
DIR869A1_GPIO_SWITCH_MODE
,

96 .
	ga˘ive_low
 = 0,

101 
¨8327_∑d_cfg
 
	gdú869a1_¨8327_∑d0_cfg
 = {

102 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

103 .
	gsgmii_dñay_í
 = 
åue
,

106 
¨8327_∂©f‹m_d©a
 
	gdú869a1_¨8327_d©a
 = {

107 .
∑d0_cfg
 = &
dú869a1_¨8327_∑d0_cfg
,

108 .
	gp‹t0_cfg
 = {

109 .
f‹˚_lök
 = 1,

110 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

111 .
	gdu∂ex
 = 1,

112 .
	gtx∑u£
 = 1,

113 .
	grx∑u£
 = 1,

118 
mdio_bﬂrd_öfo
 
	gdú869a1_mdio0_öfo
[] = {

120 .
bus_id
 = "ag71xx-mdio.0",

121 .
	gmdio_addr
 = 0,

122 .
	g∂©f‹m_d©a
 = &
dú869a1_¨8327_d©a
,

127 
	$dú869a1_gë_mac
(c⁄° *
«me
, *
mac
)

129 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
DIR869A1_DEVDATA_ADDR
);

130 
îr
;

132 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
DIR869A1_DEVDATA_SIZE
,

133 
«me
, 
mac
);

134 i‡(
îr
)

135 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

136 
	}
}

138 
__öô
 
	$dú869a1_£tup
()

140 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(
DIR869A1_EEPROM_ADDR
);

141 
u8
 
wœn24mac
[
ETH_ALEN
] = {}, 
wœn5mac
[ETH_ALEN] = {};

143 
	`©h79_ªgi°î_m25p80
(
NULL
);

145 
	`gpio_ªque°_⁄e
(
DIR869A1_GPIO_ENABLE_SWITCH
,

146 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

149 
	`dú869a1_gë_mac
("œnmac=", 
©h79_ëh0_d©a
.
mac_addr
);

150 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

151 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

152 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

154 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dú869a1_mdio0_öfo
,

155 
	`ARRAY_SIZE
(
dú869a1_mdio0_öfo
));

157 
	`©h79_ªgi°î_mdio
(0, 0);

158 
	`©h79_ªgi°î_ëh
(0);

160 
	`dú869a1_gë_mac
("wœn24mac=", 
wœn24mac
);

161 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
DIR869A1_WMAC_CALDATA_OFFSET
, 
wœn24mac
);

163 
	`dú869a1_gë_mac
("wœn5mac=", 
wœn5mac
);

164 
	`≠91_pci_öô
(
ì¥om
 + 
DIR869A1_PCI_CALDATA_OFFSET
, 
wœn5mac
);

166 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dú869a1_Àds_gpio
),

167 
dú869a1_Àds_gpio
);

169 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DIR869A1_KEYS_POLL_INTERVAL
,

170 
	`ARRAY_SIZE
(
dú869a1_gpio_keys
),

171 
dú869a1_gpio_keys
);

172 
	}
}

174 
MIPS_MACHINE
(
ATH79_MACH_DIR_869_A1
, "DIR-869-A1", "D-Link DIR-869Ñev. A1",

175 
dú869a1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dlan-hotspot.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#DLAN_HOTSPOT_GPIO_LED_WIFI
 0

	)

26 
	#DLAN_HOTSPOT_GPIO_BTN_RESET
 11

	)

27 
	#DLAN_HOTSPOT_GPIO_BTN_PLC_PAIRING
 12

	)

28 
	#DLAN_HOTSPOT_GPIO_BTN_WIFI
 21

	)

30 
	#DLAN_HOTSPOT_GPIO_PLC_POWER
 22

	)

31 
	#DLAN_HOTSPOT_GPIO_PLC_RESET
 20

	)

32 
	#DLAN_HOTSPOT_GPIO_PLC_DISABLE_LEDS
 18

	)

34 
	#DLAN_HOTSPOT_KEYS_POLL_INTERVAL
 20

	)

35 
	#DLAN_HOTSPOT_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DLAN_HOTSPOT_KEYS_POLL_INTERVAL
)

	)

37 
	#DLAN_HOTSPOT_ART_ADDRESS
 0x1fff0000

	)

38 
	#DLAN_HOTSPOT_CALDATA_OFFSET
 0x00001000

	)

39 
	#DLAN_HOTSPOT_MAC_ADDRESS_OFFSET
 0x00001002

	)

41 
gpio_Àd
 
	gdœn_hŸ•Ÿ_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "devolo:green:wifi",

44 .
	ggpio
 = 
DLAN_HOTSPOT_GPIO_LED_WIFI
,

45 .
	ga˘ive_low
 = 0,

49 
gpio_keys_buâ⁄
 
	gdœn_hŸ•Ÿ_gpio_keys
[] 
	g__öôd©a
 = {

51 .
desc
 = "Reset button",

52 .
	gty≥
 = 
EV_KEY
,

53 .
	gcode
 = 
KEY_RESTART
,

54 .
	gdeboun˚_öãrvÆ
 = 
DLAN_HOTSPOT_KEYS_DEBOUNCE_INTERVAL
,

55 .
	ggpio
 = 
DLAN_HOTSPOT_GPIO_BTN_RESET
,

56 .
	ga˘ive_low
 = 0,

59 .
	gdesc
 = "Pairing button",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
BTN_0
,

62 .
	gdeboun˚_öãrvÆ
 = 
DLAN_HOTSPOT_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
DLAN_HOTSPOT_GPIO_BTN_PLC_PAIRING
,

64 .
	ga˘ive_low
 = 0,

67 .
	gdesc
 = "WLAN button",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_WPS_BUTTON
,

70 .
	gdeboun˚_öãrvÆ
 = 
DLAN_HOTSPOT_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
DLAN_HOTSPOT_GPIO_BTN_WIFI
,

72 .
	ga˘ive_low
 = 0,

76 
__öô
 
	$dœn_hŸ•Ÿ_£tup
()

78 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
DLAN_HOTSPOT_ART_ADDRESS
);

79 
u8
 *
ˇl
 = 
¨t
 + 
DLAN_HOTSPOT_CALDATA_OFFSET
;

80 
u8
 *
wifi_mac
 = 
¨t
 + 
DLAN_HOTSPOT_MAC_ADDRESS_OFFSET
;

83 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

85 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dœn_hŸ•Ÿ_Àds_gpio
),

86 
dœn_hŸ•Ÿ_Àds_gpio
);

88 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DLAN_HOTSPOT_KEYS_POLL_INTERVAL
,

89 
	`ARRAY_SIZE
(
dœn_hŸ•Ÿ_gpio_keys
),

90 
dœn_hŸ•Ÿ_gpio_keys
);

92 
	`gpio_ªque°_⁄e
(
DLAN_HOTSPOT_GPIO_PLC_POWER
,

93 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

95 
	`gpio_ªque°_⁄e
(
DLAN_HOTSPOT_GPIO_PLC_RESET
,

96 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

98 
	`gpio_ªque°_⁄e
(
DLAN_HOTSPOT_GPIO_PLC_DISABLE_LEDS
,

99 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

102 
	`©h79_ªgi°î_usb
();

104 
	`©h79_ªgi°î_m25p80
(
NULL
);

106 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
wifi_mac
, 1);

107 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
wifi_mac
, 2);

109 
	`©h79_ªgi°î_mdio
(0, 0x0);

110 
	`©h79_ªgi°î_ëh
(0);

111 
	`©h79_ªgi°î_ëh
(1);

113 
	`©h79_ªgi°î_wmac
(
ˇl
, 
wifi_mac
);

114 
	}
}

116 
MIPS_MACHINE
(
ATH79_MACH_DLAN_HOTSPOT
, "dLAN-Hotspot",

117 "dLAN HŸ•Ÿ", 
dœn_hŸ•Ÿ_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dlan-pro-1200-ac.c

21 
	~<löux/pci.h
>

22 
	~<löux/phy.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<löux/gpio.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~"comm⁄.h
"

31 
	~"dev-≠9x-pci.h
"

32 
	~"dev-ëh.h
"

33 
	~"dev-gpio-buâ⁄s.h
"

34 
	~"dev-Àds-gpio.h
"

35 
	~"dev-m25p80.h
"

36 
	~"dev-nfc.h
"

37 
	~"dev-•i.h
"

38 
	~"dev-wmac.h
"

39 
	~"machty≥s.h
"

41 
	#DLAN_PRO_1200_AC_GPIO_DLAN_POWER_ENABLE
 13

	)

42 
	#DLAN_PRO_1200_AC_GPIO_WLAN_POWER_ENABLE
 21

	)

43 
	#DLAN_PRO_1200_AC_GPIO_LED_WLAN
 12

	)

44 
	#DLAN_PRO_1200_AC_GPIO_LED_DLAN
 14

	)

45 
	#DLAN_PRO_1200_AC_GPIO_LED_DLAN_ERR
 15

	)

47 
	#DLAN_PRO_1200_AC_GPIO_BTN_WLAN
 20

	)

48 
	#DLAN_PRO_1200_AC_GPIO_BTN_DLAN
 22

	)

49 
	#DLAN_PRO_1200_AC_GPIO_BTN_RESET
 4

	)

50 
	#DLAN_PRO_1200_AC_GPIO_DLAN_IND
 17

	)

51 
	#DLAN_PRO_1200_AC_GPIO_DLAN_ERR_IND
 16

	)

53 
	#DLAN_PRO_1200_AC_KEYS_POLL_INTERVAL
 20

	)

54 
	#DLAN_PRO_1200_AC_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DLAN_PRO_1200_AC_KEYS_POLL_INTERVAL
)

	)

56 
	#DLAN_PRO_1200_AC_ART_ADDRESS
 0x1fff0000

	)

57 
	#DLAN_PRO_1200_AC_CALDATA_OFFSET
 0x1000

	)

58 
	#DLAN_PRO_1200_AC_WIFIMAC_OFFSET
 0x1002

	)

59 
	#DLAN_PRO_1200_AC_PCIE_CALDATA_OFFSET
 0x5000

	)

61 
gpio_Àd
 
	gdœn_¥o_1200_ac_Àds_gpio
[] 
	g__öôd©a
 = {

63 .
«me
 = "devolo:status:wlan",

64 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_LED_WLAN
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "devolo:status:dlan",

69 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_LED_DLAN
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "devolo:error:dlan",

74 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_LED_DLAN_ERR
,

75 .
	ga˘ive_low
 = 0,

79 
gpio_keys_buâ⁄
 
	gdœn_¥o_1200_ac_gpio_keys
[] 
	g__öôd©a
 = {

81 .
desc
 = "dLAN button",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
BTN_0
,

84 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_1200_AC_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_BTN_DLAN
,

86 .
	ga˘ive_low
 = 1,

89 .
	gdesc
 = "WLAN button",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_WPS_BUTTON
,

92 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_1200_AC_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_BTN_WLAN
,

94 .
	ga˘ive_low
 = 0,

97 .
	gdesc
 = "Reset button",

98 .
	gty≥
 = 
EV_KEY
,

99 .
	gcode
 = 
KEY_RESTART
,

100 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_1200_AC_KEYS_DEBOUNCE_INTERVAL
,

101 .
	ggpio
 = 
DLAN_PRO_1200_AC_GPIO_BTN_RESET
,

102 .
	ga˘ive_low
 = 1,

106 
¨8327_∑d_cfg
 
	gdœn_¥o_1200_ac_¨8327_∑d0_cfg
 = {

107 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

108 .
	gtx˛k_dñay_í
 = 
åue
,

109 .
	grx˛k_dñay_í
 = 
Ál£
,

110 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

111 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

112 .
	gmac06_exch™ge_dis
 = 
åue
,

115 
¨8327_∑d_cfg
 
	gdœn_¥o_1200_ac_¨8327_∑d5_cfg
 = {

116 .
mode
 = 0,

117 .
	gtx˛k_dñay_í
 = 0,

118 .
	grx˛k_dñay_í
 = 0,

119 .
	gtx˛k_dñay_£l
 = 0,

120 .
	grx˛k_dñay_£l
 = 0,

123 
¨8327_∂©f‹m_d©a
 
	gdœn_¥o_1200_ac_¨8327_d©a
 = {

124 .
∑d0_cfg
 = &
dœn_¥o_1200_ac_¨8327_∑d0_cfg
,

125 .
	g∑d5_cfg
 = &
dœn_¥o_1200_ac_¨8327_∑d5_cfg
,

126 .
	gp‹t0_cfg
 = {

127 .
f‹˚_lök
 = 1,

128 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

129 .
	gdu∂ex
 = 1,

130 .
	gtx∑u£
 = 1,

131 .
	grx∑u£
 = 1,

135 
mdio_bﬂrd_öfo
 
	gdœn_¥o_1200_ac_mdio0_öfo
[] = {

137 .
bus_id
 = "ag71xx-mdio.0",

138 .
	gmdio_addr
 = 0,

139 .
	g∂©f‹m_d©a
 = &
dœn_¥o_1200_ac_¨8327_d©a
,

143 
__öô
 
	$dœn_¥o_1200_ac_£tup
()

145 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
DLAN_PRO_1200_AC_ART_ADDRESS
);

146 
u8
 *
ˇl
 = 
¨t
 + 
DLAN_PRO_1200_AC_CALDATA_OFFSET
;

147 
u8
 *
wifi_mac
 = 
¨t
 + 
DLAN_PRO_1200_AC_WIFIMAC_OFFSET
;

149 
	`©h79_ªgi°î_m25p80
(
NULL
);

151 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dœn_¥o_1200_ac_Àds_gpio
),

152 
dœn_¥o_1200_ac_Àds_gpio
);

154 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DLAN_PRO_1200_AC_KEYS_POLL_INTERVAL
,

155 
	`ARRAY_SIZE
(
dœn_¥o_1200_ac_gpio_keys
),

156 
dœn_¥o_1200_ac_gpio_keys
);

159 
	`gpio_ªque°_⁄e
(
DLAN_PRO_1200_AC_GPIO_DLAN_POWER_ENABLE
,

160 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

164 
	`gpio_ªque°_⁄e
(
DLAN_PRO_1200_AC_GPIO_WLAN_POWER_ENABLE
,

165 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

168 
	`©h79_ªgi°î_wmac
(
ˇl
, 
wifi_mac
);

169 
	`≠91_pci_öô
(
¨t
 + 
DLAN_PRO_1200_AC_PCIE_CALDATA_OFFSET
, 
NULL
);

171 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 | 
AR934X_ETH_CFG_SW_ONLY_MODE
);

173 
	`©h79_ªgi°î_mdio
(1, 0x0);

174 
	`©h79_ªgi°î_mdio
(0, 0x0);

176 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
wifi_mac
, 2);

178 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dœn_¥o_1200_ac_mdio0_öfo
,

179 
	`ARRAY_SIZE
(
dœn_¥o_1200_ac_mdio0_öfo
));

182 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

183 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

184 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

185 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x02000000;

186 
	`©h79_ªgi°î_ëh
(0);

187 
	}
}

189 
MIPS_MACHINE
(
ATH79_MACH_DLAN_PRO_1200_AC
, "dLAN-pro-1200-ac", "devolo dLANÖro 1200+ WiFiác",

190 
dœn_¥o_1200_ac_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dlan-pro-500-wp.c

21 
	~<löux/pci.h
>

22 
	~<löux/phy.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<löux/gpio.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~"comm⁄.h
"

31 
	~"dev-≠9x-pci.h
"

32 
	~"dev-ëh.h
"

33 
	~"dev-gpio-buâ⁄s.h
"

34 
	~"dev-Àds-gpio.h
"

35 
	~"dev-m25p80.h
"

36 
	~"dev-•i.h
"

37 
	~"dev-wmac.h
"

38 
	~"machty≥s.h
"

40 
	#DLAN_PRO_500_WP_GPIO_DLAN_POWER_ENABLE
 13

	)

41 
	#DLAN_PRO_500_WP_GPIO_DLAN_LED_ENABLE
 17

	)

42 
	#DLAN_PRO_500_WP_GPIO_LED_WLAN_5G
 11

	)

43 
	#DLAN_PRO_500_WP_GPIO_LED_WLAN_2G
 12

	)

44 
	#DLAN_PRO_500_WP_GPIO_LED_STATUS
 16

	)

45 
	#DLAN_PRO_500_WP_GPIO_LED_ETH
 14

	)

47 
	#DLAN_PRO_500_WP_GPIO_BTN_WPS
 20

	)

48 
	#DLAN_PRO_500_WP_GPIO_BTN_WLAN
 22

	)

49 
	#DLAN_PRO_500_WP_GPIO_BTN_DLAN
 21

	)

50 
	#DLAN_PRO_500_WP_GPIO_BTN_RESET
 4

	)

52 
	#DLAN_PRO_500_WP_KEYS_POLL_INTERVAL
 20

	)

53 
	#DLAN_PRO_500_WP_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DLAN_PRO_500_WP_KEYS_POLL_INTERVAL
)

	)

55 
	#DLAN_PRO_500_WP_ART_ADDRESS
 0x1fff0000

	)

56 
	#DLAN_PRO_500_WP_CALDATA_OFFSET
 0x1000

	)

57 
	#DLAN_PRO_500_WP_MAC_ADDRESS_OFFSET
 0x1002

	)

58 
	#DLAN_PRO_500_WP_PCIE_CALDATA_OFFSET
 0x5000

	)

60 
gpio_Àd
 
	gdœn_¥o_500_wp_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "devolo:green:status",

63 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_LED_STATUS
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "devolo:green:eth",

68 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_LED_ETH
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "devolo:blue:wlan-5g",

73 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_LED_WLAN_5G
,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "devolo:green:wlan-2g",

78 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_LED_WLAN_2G
,

79 .
	ga˘ive_low
 = 1,

83 
gpio_keys_buâ⁄
 
	gdœn_¥o_500_wp_gpio_keys
[] 
	g__öôd©a
 = {

85 .
desc
 = "dLAN button",

86 .
	gty≥
 = 
EV_KEY
,

87 .
	gcode
 = 
BTN_0
,

88 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_500_WP_KEYS_DEBOUNCE_INTERVAL
,

89 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_BTN_DLAN
,

90 .
	ga˘ive_low
 = 0,

93 .
	gdesc
 = "WPS button",

94 .
	gty≥
 = 
EV_KEY
,

95 .
	gcode
 = 
KEY_WPS_BUTTON
,

96 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_500_WP_KEYS_DEBOUNCE_INTERVAL
,

97 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_BTN_WPS
,

98 .
	ga˘ive_low
 = 0,

101 .
	gdesc
 = "WLAN button",

102 .
	gty≥
 = 
EV_KEY
,

103 .
	gcode
 = 
BTN_2
,

104 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_500_WP_KEYS_DEBOUNCE_INTERVAL
,

105 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_BTN_WLAN
,

106 .
	ga˘ive_low
 = 1,

109 .
	gdesc
 = "Reset button",

110 .
	gty≥
 = 
EV_KEY
,

111 .
	gcode
 = 
KEY_RESTART
,

112 .
	gdeboun˚_öãrvÆ
 = 
DLAN_PRO_500_WP_KEYS_DEBOUNCE_INTERVAL
,

113 .
	ggpio
 = 
DLAN_PRO_500_WP_GPIO_BTN_RESET
,

114 .
	ga˘ive_low
 = 1,

118 
¨8327_∑d_cfg
 
	gdœn_¥o_500_wp_¨8327_∑d0_cfg
 = {

119 .
mode
 = 
AR8327_PAD_PHY_RGMII
,

120 .
	gtx˛k_dñay_í
 = 
Ál£
,

121 .
	grx˛k_dñay_í
 = 
Ál£
,

122 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

123 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

126 
¨8327_Àd_cfg
 
	gdœn_¥o_500_wp_¨8327_Àd_cfg
 = {

127 .
Àd_˘æ0
 = 0x00000000,

128 .
	gÀd_˘æ1
 = 0xc737c737,

129 .
	gÀd_˘æ2
 = 0x00000000,

130 .
	gÀd_˘æ3
 = 0x00c30c00,

131 .
	g›í_døö
 = 
åue
,

134 
¨8327_∂©f‹m_d©a
 
	gdœn_¥o_500_wp_¨8327_d©a
 = {

135 .
∑d0_cfg
 = &
dœn_¥o_500_wp_¨8327_∑d0_cfg
,

136 .
	gp‹t0_cfg
 = {

137 .
f‹˚_lök
 = 1,

138 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

139 .
	gdu∂ex
 = 1,

140 .
	gtx∑u£
 = 0,

141 .
	grx∑u£
 = 0,

143 .
	gÀd_cfg
 = &
dœn_¥o_500_wp_¨8327_Àd_cfg
,

146 
mdio_bﬂrd_öfo
 
	gdœn_¥o_500_wp_mdio0_öfo
[] = {

148 .
bus_id
 = "ag71xx-mdio.0",

149 .
	gmdio_addr
 = 0,

150 .
	g∂©f‹m_d©a
 = &
dœn_¥o_500_wp_¨8327_d©a
,

154 
__öô
 
	$dœn_¥o_500_wp_£tup
()

156 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
DLAN_PRO_500_WP_ART_ADDRESS
);

157 
u8
 *
ˇl
 = 
¨t
 + 
DLAN_PRO_500_WP_CALDATA_OFFSET
;

158 
u8
 *
wifi_mac
 = 
¨t
 + 
DLAN_PRO_500_WP_MAC_ADDRESS_OFFSET
;

160 
	`©h79_ªgi°î_m25p80
(
NULL
);

162 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dœn_¥o_500_wp_Àds_gpio
),

163 
dœn_¥o_500_wp_Àds_gpio
);

165 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DLAN_PRO_500_WP_KEYS_POLL_INTERVAL
,

166 
	`ARRAY_SIZE
(
dœn_¥o_500_wp_gpio_keys
),

167 
dœn_¥o_500_wp_gpio_keys
);

169 
	`gpio_ªque°_⁄e
(
DLAN_PRO_500_WP_GPIO_DLAN_POWER_ENABLE
,

170 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

172 
	`gpio_ªque°_⁄e
(
DLAN_PRO_500_WP_GPIO_DLAN_LED_ENABLE
,

173 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

176 
	`©h79_ªgi°î_wmac
(
ˇl
, 
wifi_mac
);

178 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

180 
	`©h79_ªgi°î_mdio
(1, 0x0);

181 
	`©h79_ªgi°î_mdio
(0, 0x0);

183 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dœn_¥o_500_wp_mdio0_öfo
,

184 
	`ARRAY_SIZE
(
dœn_¥o_500_wp_mdio0_öfo
));

187 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
wifi_mac
, 2);

188 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

189 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x0e000000;

190 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

191 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

192 
	`©h79_ªgi°î_ëh
(0);

195 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
wifi_mac
, 1);

196 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

197 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

198 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

199 
	`©h79_ªgi°î_ëh
(1);

200 
	}
}

202 
MIPS_MACHINE
(
ATH79_MACH_DLAN_PRO_500_WP
, "dLAN-pro-500-wp", "devolo dLANÖro 500 Wireless+",

203 
dœn_¥o_500_wp_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-domywifi-dw33d.c

21 
	~<löux/vîsi⁄.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

24 
	~<löux/mtd/mtd.h
>

25 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

26 
	~<löux/mtd/«nd.h
>

28 
	~<löux/mtd/øw«nd.h
>

30 
	~<löux/∂©f‹m/¨934x_nfc.h
>

32 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

34 
	~"comm⁄.h
"

35 
	~"pci.h
"

36 
	~"dev-≠9x-pci.h
"

37 
	~"dev-gpio-buâ⁄s.h
"

38 
	~"dev-ëh.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-m25p80.h
"

41 
	~"dev-nfc.h
"

42 
	~"dev-usb.h
"

43 
	~"dev-wmac.h
"

44 
	~"machty≥s.h
"

46 
	#DW33D_GPIO_LED_MMC
 4

	)

47 
	#DW33D_GPIO_LED_WLAN_2G
 13

	)

48 
	#DW33D_GPIO_LED_STATUS
 14

	)

49 
	#DW33D_GPIO_LED_USB
 15

	)

50 
	#DW33D_GPIO_LED_INTERNET
 22

	)

52 
	#DW33D_GPIO_BTN_RESET
 17

	)

54 
	#DW33D_KEYS_POLL_INTERVAL
 20

	)

55 
	#DW33D_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DW33D_KEYS_POLL_INTERVAL
)

	)

57 
	#DW33D_MAC0_OFFSET
 0

	)

58 
	#DW33D_MAC1_OFFSET
 6

	)

59 
	#DW33D_WMAC_OFFSET
 12

	)

60 
	#DW33D_WMAC_CALDATA_OFFSET
 0x1000

	)

61 
	#DW33D_PCIE_CALDATA_OFFSET
 0x5000

	)

63 
gpio_Àd
 
	gdw33d_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "dw33d:blue:status",

66 .
	ggpio
 = 
DW33D_GPIO_LED_STATUS
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "dw33d:blue:mmc",

71 .
	ggpio
 = 
DW33D_GPIO_LED_MMC
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "dw33d:blue:usb",

76 .
	ggpio
 = 
DW33D_GPIO_LED_USB
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "dw33d:blue:wlan-2g",

81 .
	ggpio
 = 
DW33D_GPIO_LED_WLAN_2G
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "dw33d:blue:internet",

86 .
	ggpio
 = 
DW33D_GPIO_LED_INTERNET
,

87 .
	ga˘ive_low
 = 1,

91 
gpio_keys_buâ⁄
 
	gdw33d_gpio_keys
[] 
	g__öôd©a
 = {

93 .
desc
 = "Reset button",

94 .
	gty≥
 = 
EV_KEY
,

95 .
	gcode
 = 
KEY_RESTART
,

96 .
	gdeboun˚_öãrvÆ
 = 
DW33D_KEYS_DEBOUNCE_INTERVAL
,

97 .
	ggpio
 = 
DW33D_GPIO_BTN_RESET
,

98 .
	ga˘ive_low
 = 1,

103 
¨8327_∑d_cfg
 
	gdw33d_qˇ8337_∑d6_cfg
 = {

104 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

105 .
	gsgmii_dñay_í
 = 
åue
,

109 
¨8327_∑d_cfg
 
	gdw33d_qˇ8337_∑d0_cfg
 = {

110 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

111 .
	gtx˛k_dñay_í
 = 
åue
,

112 .
	grx˛k_dñay_í
 = 
åue
,

113 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

114 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

117 
¨8327_∂©f‹m_d©a
 
	gdw33d_qˇ8337_d©a
 = {

118 .
∑d0_cfg
 = &
dw33d_qˇ8337_∑d0_cfg
,

119 .
	g∑d6_cfg
 = &
dw33d_qˇ8337_∑d6_cfg
,

120 .
	gp‹t0_cfg
 = {

121 .
f‹˚_lök
 = 1,

122 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

123 .
	gdu∂ex
 = 1,

124 .
	gtx∑u£
 = 1,

125 .
	grx∑u£
 = 1,

127 .
	gp‹t6_cfg
 = {

128 .
f‹˚_lök
 = 1,

129 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

130 .
	gdu∂ex
 = 1,

131 .
	gtx∑u£
 = 1,

132 .
	grx∑u£
 = 1,

136 
mdio_bﬂrd_öfo
 
	gdw33d_mdio0_öfo
[] = {

138 .
bus_id
 = "ag71xx-mdio.0",

139 .
	gmdio_addr
 = 0,

140 .
	g∂©f‹m_d©a
 = &
dw33d_qˇ8337_d©a
,

144 
__öô
 
	$dw33d_£tup
()

146 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

148 
	`©h79_ªgi°î_m25p80
(
NULL
);

150 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dw33d_Àds_gpio
),

151 
dw33d_Àds_gpio
);

152 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DW33D_KEYS_POLL_INTERVAL
,

153 
	`ARRAY_SIZE
(
dw33d_gpio_keys
),

154 
dw33d_gpio_keys
);

156 
	`©h79_ªgi°î_usb
();

157 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

158 
	`©h79_ªgi°î_nfc
();

159 
	`©h79_ªgi°î_pci
();

161 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DW33D_WMAC_CALDATA_OFFSET
,áπ + 
DW33D_WMAC_OFFSET
);

163 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

165 
	`©h79_ªgi°î_mdio
(0, 0x0);

167 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
DW33D_MAC0_OFFSET
, 0);

168 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
DW33D_MAC1_OFFSET
, 0);

170 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dw33d_mdio0_öfo
,

171 
	`ARRAY_SIZE
(
dw33d_mdio0_öfo
));

174 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

175 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

176 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

177 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

179 
	`©h79_ªgi°î_ëh
(0);

182 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

183 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

184 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

185 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

187 
	`©h79_ªgi°î_ëh
(1);

188 
	}
}

190 
MIPS_MACHINE
(
ATH79_MACH_DOMYWIFI_DW33D
, "DW33D",

192 
dw33d_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dr344.c

23 
	~<löux/gpio.h
>

24 
	~<löux/phy.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/©h9k_∂©f‹m.h
>

27 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

29 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

31 
	~"comm⁄.h
"

32 
	~"pci.h
"

33 
	~"dev-≠9x-pci.h
"

34 
	~"dev-gpio-buâ⁄s.h
"

35 
	~"dev-ëh.h
"

36 
	~"dev-usb.h
"

37 
	~"dev-Àds-gpio.h
"

38 
	~"dev-m25p80.h
"

39 
	~"dev-•i.h
"

40 
	~"dev-wmac.h
"

41 
	~"machty≥s.h
"

43 
	#DR34X_GPIO_LED_SIG1
 12

	)

44 
	#DR34X_GPIO_LED_SIG2
 13

	)

45 
	#DR34X_GPIO_LED_SIG3
 14

	)

46 
	#DR34X_GPIO_LED_SIG4
 15

	)

47 
	#DR34X_GPIO_LED_STATUS
 11

	)

48 
	#DR344_GPIO_LED_LAN
 17

	)

49 
	#DR344_GPIO_EXTERNAL_LNA0
 18

	)

50 
	#DR344_GPIO_EXTERNAL_LNA1
 19

	)

52 
	#DR34X_GPIO_BTN_RESET
 16

	)

54 
	#DR344_KEYS_POLL_INTERVAL
 20

	)

55 
	#DR344_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DR344_KEYS_POLL_INTERVAL
)

	)

57 
	#DR34X_MAC0_OFFSET
 0

	)

58 
	#DR34X_MAC1_OFFSET
 8

	)

59 
	#DR34X_WMAC_CALDATA_OFFSET
 0x1000

	)

61 
gpio_Àd
 
	gdr342_Àds_gpio
[] 
	g__öôd©a
 = {

63 .
«me
 = "dr342:green:status",

64 .
	ggpio
 = 
DR34X_GPIO_LED_STATUS
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "dr342:green:sig1",

69 .
	ggpio
 = 
DR34X_GPIO_LED_SIG1
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "dr342:green:sig2",

74 .
	ggpio
 = 
DR34X_GPIO_LED_SIG2
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "dr342:green:sig3",

79 .
	ggpio
 = 
DR34X_GPIO_LED_SIG3
,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "dr342:green:sig4",

84 .
	ggpio
 = 
DR34X_GPIO_LED_SIG4
,

85 .
	ga˘ive_low
 = 1,

89 
gpio_Àd
 
	gdr344_Àds_gpio
[] 
	g__öôd©a
 = {

91 .
«me
 = "dr344:green:lan",

92 .
	ggpio
 = 
DR344_GPIO_LED_LAN
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "dr344:green:status",

97 .
	ggpio
 = 
DR34X_GPIO_LED_STATUS
,

98 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "dr344:green:sig1",

102 .
	ggpio
 = 
DR34X_GPIO_LED_SIG1
,

103 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "dr344:green:sig2",

107 .
	ggpio
 = 
DR34X_GPIO_LED_SIG2
,

108 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "dr344:green:sig3",

112 .
	ggpio
 = 
DR34X_GPIO_LED_SIG3
,

113 .
	ga˘ive_low
 = 1,

116 .
	g«me
 = "dr344:green:sig4",

117 .
	ggpio
 = 
DR34X_GPIO_LED_SIG4
,

118 .
	ga˘ive_low
 = 1,

122 
gpio_keys_buâ⁄
 
	gdr34x_gpio_keys
[] 
	g__öôd©a
 = {

124 .
desc
 = "reset",

125 .
	gty≥
 = 
EV_KEY
,

126 .
	gcode
 = 
KEY_RESTART
,

127 .
	gdeboun˚_öãrvÆ
 = 
DR344_KEYS_DEBOUNCE_INTERVAL
,

128 .
	ggpio
 = 
DR34X_GPIO_BTN_RESET
,

129 .
	ga˘ive_low
 = 1,

133 
©803x_∂©f‹m_d©a
 
	gdr34x_©803x_d©a
 = {

134 .
dißbÀ_sm¨ãì
 = 1,

135 .
	gíabÀ_rgmii_rx_dñay
 = 1,

136 .
	gíabÀ_rgmii_tx_dñay
 = 1,

139 
mdio_bﬂrd_öfo
 
	gdr34x_mdio0_öfo
[] = {

141 .
bus_id
 = "ag71xx-mdio.0",

142 .
	gmdio_addr
 = 0,

143 .
	g∂©f‹m_d©a
 = &
dr34x_©803x_d©a
,

147 
__öô
 
	$dr34x_£tup
()

149 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

150 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f03f810);

152 
	`©h79_ªgi°î_m25p80
(
NULL
);

154 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR34X_GPIO_LED_STATUS
, 
åue
);

155 
	`gpio_£t_vÆue
(
DR34X_GPIO_LED_STATUS
, 1);

156 
	`©h79_gpio_ouçut_£À˘
(
DR34X_GPIO_LED_STATUS
, 0);

158 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DR344_KEYS_POLL_INTERVAL
,

159 
	`ARRAY_SIZE
(
dr34x_gpio_keys
),

160 
dr34x_gpio_keys
);

162 
	`©h79_ªgi°î_usb
();

164 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DR34X_WMAC_CALDATA_OFFSET
, 
NULL
);

166 
	`©h79_ªgi°î_pci
();

168 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
dr34x_mdio0_öfo
,

169 
	`ARRAY_SIZE
(
dr34x_mdio0_öfo
));

171 
	`©h79_ªgi°î_mdio
(0, 0x0);

173 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

174 
AR934X_ETH_CFG_SW_ONLY_MODE
);

177 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

178 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

179 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

180 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x02000000;

181 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x0101;

182 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x1313;

184 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
DR34X_MAC0_OFFSET
, 0);

185 
	`©h79_ªgi°î_ëh
(0);

186 
	}
}

188 
__öô
 
	$dr342_£tup
()

190 
	`dr34x_£tup
();

192 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dr342_Àds_gpio
),

193 
dr342_Àds_gpio
);

194 
	}
}

196 
__öô
 
	$dr344_£tup
()

198 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f03f810);

200 
	`dr34x_£tup
();

202 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR344_GPIO_LED_LAN
, 
åue
);

203 
	`gpio_£t_vÆue
(
DR344_GPIO_LED_LAN
, 1);

204 
	`©h79_gpio_ouçut_£À˘
(
DR344_GPIO_LED_LAN
, 0);

206 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dr344_Àds_gpio
),

207 
dr344_Àds_gpio
);

209 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
DR344_GPIO_EXTERNAL_LNA0
);

210 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
DR344_GPIO_EXTERNAL_LNA1
);

212 
	`©h79_ªgi°î_mdio
(1, 0x0);

215 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

216 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

217 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

219 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 
DR34X_MAC1_OFFSET
, 0);

220 
	`©h79_ªgi°î_ëh
(1);

221 
	}
}

223 
MIPS_MACHINE
(
ATH79_MACH_DR342
, "DR342", "WÆly†DR342", 
dr342_£tup
);

224 
MIPS_MACHINE
(
ATH79_MACH_DR344
, "DR344", "WÆly†DR344", 
dr344_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dr531.c

13 
	~<löux/pci.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<asm/mach-©h79/©h79.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

29 
	~"pci.h
"

31 
	#DR531_GPIO_BUZZER
 4

	)

32 
	#DR531_GPIO_LED_WAN
 11

	)

33 
	#DR531_GPIO_LED_LAN
 14

	)

34 
	#DR531_GPIO_LED_SIG1
 12

	)

35 
	#DR531_GPIO_LED_SIG2
 16

	)

36 
	#DR531_GPIO_LED_SIG3
 15

	)

37 
	#DR531_GPIO_LED_SIG4
 13

	)

39 
	#DR531_GPIO_BTN_RESET
 17

	)

41 
	#DR531_KEYS_POLL_INTERVAL
 20

	)

42 
	#DR531_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DR531_KEYS_POLL_INTERVAL
)

	)

44 
	#DR531_MAC0_OFFSET
 0x0

	)

45 
	#DR531_MAC1_OFFSET
 0x8

	)

46 
	#DR531_WMAC_CALDATA_OFFSET
 0x1000

	)

48 
gpio_Àd
 
	gdr531_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "dr531:green:wan",

51 .
	ggpio
 = 
DR531_GPIO_LED_WAN
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "dr531:green:lan",

56 .
	ggpio
 = 
DR531_GPIO_LED_LAN
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "dr531:green:sig1",

61 .
	ggpio
 = 
DR531_GPIO_LED_SIG1
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "dr531:green:sig2",

66 .
	ggpio
 = 
DR531_GPIO_LED_SIG2
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "dr531:green:sig3",

71 .
	ggpio
 = 
DR531_GPIO_LED_SIG3
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "dr531:green:sig4",

76 .
	ggpio
 = 
DR531_GPIO_LED_SIG4
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "dr531:buzzer",

81 .
	ggpio
 = 
DR531_GPIO_BUZZER
,

82 .
	ga˘ive_low
 = 0,

86 
gpio_keys_buâ⁄
 
	gdr531_gpio_keys
[] 
	g__öôd©a
 = {

88 .
desc
 = "reset",

89 .
	gty≥
 = 
EV_KEY
,

90 .
	gcode
 = 
KEY_RESTART
,

91 .
	gdeboun˚_öãrvÆ
 = 
DR531_KEYS_DEBOUNCE_INTERVAL
,

92 .
	ggpio
 = 
DR531_GPIO_BTN_RESET
,

93 .
	ga˘ive_low
 = 1,

97 
__öô
 
	$dr531_gpio_£tup
()

99 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_BUZZER
, 
åue
);

100 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_WAN
, 
åue
);

101 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_LAN
, 
åue
);

102 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_SIG1
, 
åue
);

103 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_SIG2
, 
åue
);

104 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_SIG3
, 
åue
);

105 
	`©h79_gpio_dúe˘i⁄_£À˘
(
DR531_GPIO_LED_SIG4
, 
åue
);

107 
	`©h79_gpio_ouçut_£À˘
(
DR531_GPIO_BUZZER
, 0);

108 
	`©h79_gpio_ouçut_£À˘
(
DR531_GPIO_LED_WAN
, 0);

109 
	`©h79_gpio_ouçut_£À˘
(
DR531_GPIO_LED_LAN
, 0);

111 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
dr531_Àds_gpio
),

112 
dr531_Àds_gpio
);

114 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DR531_KEYS_POLL_INTERVAL
,

115 
	`ARRAY_SIZE
(
dr531_gpio_keys
),

116 
dr531_gpio_keys
);

117 
	}
}

119 
__öô
 
	$dr531_£tup
()

121 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

122 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f03f810);

124 
	`©h79_ªgi°î_m25p80
(
NULL
);

126 
	`dr531_gpio_£tup
();

128 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

130 
	`©h79_ªgi°î_mdio
(0, 0x0);

133 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

134 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

135 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

136 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

137 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
DR531_MAC1_OFFSET
, 0);

138 
	`©h79_ªgi°î_ëh
(0);

141 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

142 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

143 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

144 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

145 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

146 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 
DR531_MAC0_OFFSET
, 0);

147 
	`©h79_ªgi°î_ëh
(1);

149 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DR531_WMAC_CALDATA_OFFSET
, 
NULL
);

151 
	`©h79_ªgi°î_pci
();

152 
	`©h79_ªgi°î_usb
();

153 
	}
}

155 
MIPS_MACHINE
(
ATH79_MACH_DR531
, "DR531", "WÆly†DR531", 
dr531_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-dragino2.c

13 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-•i.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#DRAGINO2_GPIO_LED_WLAN
 0

	)

27 
	#DRAGINO2_GPIO_LED_LAN
 13

	)

28 
	#DRAGINO2_GPIO_LED_WAN
 17

	)

36 
	#DRAGINO2_GPIO_LED_SYS
 28

	)

37 
	#DRAGINO2_GPIO_BTN_JUMPSTART
 11

	)

38 
	#DRAGINO2_GPIO_BTN_RESET
 12

	)

40 
	#DRAGINO2_KEYS_POLL_INTERVAL
 20

	)

41 
	#DRAGINO2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DRAGINO2_KEYS_POLL_INTERVAL
)

	)

43 
	#DRAGINO2_MAC0_OFFSET
 0x0000

	)

44 
	#DRAGINO2_MAC1_OFFSET
 0x0006

	)

45 
	#DRAGINO2_CALDATA_OFFSET
 0x1000

	)

46 
	#DRAGINO2_WMAC_MAC_OFFSET
 0x1002

	)

48 
gpio_Àd
 
	gdøgöo2_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "dragino2:red:wlan",

51 .
	ggpio
 = 
DRAGINO2_GPIO_LED_WLAN
,

52 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "dragino2:red:wan",

56 .
	ggpio
 = 
DRAGINO2_GPIO_LED_WAN
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "dragino2:red:lan",

61 .
	ggpio
 = 
DRAGINO2_GPIO_LED_LAN
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "dragino2:red:system",

66 .
	ggpio
 = 
DRAGINO2_GPIO_LED_SYS
,

67 .
	ga˘ive_low
 = 0,

71 
gpio_keys_buâ⁄
 
	gdøgöo2_gpio_keys
[] 
	g__öôd©a
 = {

73 .
desc
 = "jumpstart button",

74 .
	gty≥
 = 
EV_KEY
,

75 .
	gcode
 = 
KEY_WPS_BUTTON
,

76 .
	gdeboun˚_öãrvÆ
 = 
DRAGINO2_KEYS_DEBOUNCE_INTERVAL
,

77 .
	ggpio
 = 
DRAGINO2_GPIO_BTN_JUMPSTART
,

78 .
	ga˘ive_low
 = 1,

81 .
	gdesc
 = "reset button",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
KEY_RESTART
,

84 .
	gdeboun˚_öãrvÆ
 = 
DRAGINO2_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
DRAGINO2_GPIO_BTN_RESET
,

86 .
	ga˘ive_low
 = 1,

90 
__öô
 
	$døgöo2_comm⁄_£tup
()

92 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

94 
	`©h79_ªgi°î_m25p80
(
NULL
);

95 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DRAGINO2_CALDATA_OFFSET
,

96 
¨t
 + 
DRAGINO2_WMAC_MAC_OFFSET
);

98 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
DRAGINO2_MAC0_OFFSET
, 0);

99 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
DRAGINO2_MAC1_OFFSET
, 0);

101 
	`©h79_ªgi°î_mdio
(0, 0x0);

104 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

105 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

106 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

107 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

108 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

111 
	`©h79_ªgi°î_ëh
(1);

114 
	`©h79_ªgi°î_ëh
(0);

117 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
,

118 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
) |

119 
AR933X_BOOTSTRAP_MDIO_GPIO_EN
);

120 
	}
}

122 
__öô
 
	$døgöo2_£tup
()

124 
	`døgöo2_comm⁄_£tup
();

126 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
døgöo2_Àds_gpio
),

127 
døgöo2_Àds_gpio
);

128 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DRAGINO2_KEYS_POLL_INTERVAL
,

129 
	`ARRAY_SIZE
(
døgöo2_gpio_keys
),

130 
døgöo2_gpio_keys
);

131 
	`©h79_ªgi°î_usb
();

132 
	}
}

134 
MIPS_MACHINE
(
ATH79_MACH_DRAGINO2
, "DRAGINO2", "Dragino Dragino v2",

135 
døgöo2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e1700ac-v2.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/¨8216_∂©f‹m.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

23 
	~"pci.h
"

25 
	#E1700AC_V2_GPIO_LED_SYS
 1

	)

26 
	#E1700AC_V2_GPIO_LED_USB
 7

	)

27 
	#E1700AC_V2_GPIO_LED_WLAN2G
 19

	)

29 
	#E1700AC_V2_GPIO_BTN_SW1
 2

	)

30 
	#E1700AC_V2_GPIO_BTN_RESET
 11

	)

32 
	#E1700AC_V2_KEYS_POLL_INTERVAL
 20

	)

33 
	#E1700AC_V2_KEYS_DEBOUNCE_INTERVAL
 \

34 (3 * 
E1700AC_V2_KEYS_POLL_INTERVAL
)

	)

36 
gpio_Àd
 
	ge1700ac_v2_Àds_gpio
[] 
	g__öôd©a
 = {

38 .
«me
 = "e1700ac-v2:green:system",

39 .
	ggpio
 = 
E1700AC_V2_GPIO_LED_SYS
,

40 .
	ga˘ive_low
 = 1,

42 .
	g«me
 = "e1700ac-v2:green:usb",

43 .
	ggpio
 = 
E1700AC_V2_GPIO_LED_USB
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "e1700ac-v2:green:wlan2g",

47 .
	ggpio
 = 
E1700AC_V2_GPIO_LED_WLAN2G
,

48 .
	ga˘ive_low
 = 1,

52 
gpio_keys_buâ⁄
 
	ge1700ac_v2_gpio_keys
[] 
	g__öôd©a
 = {

54 .
desc
 = "reset",

55 .
	gty≥
 = 
EV_KEY
,

56 .
	gcode
 = 
KEY_RESTART
,

57 .
	gdeboun˚_öãrvÆ
 = 
E1700AC_V2_KEYS_DEBOUNCE_INTERVAL
,

58 .
	ggpio
 = 
E1700AC_V2_GPIO_BTN_RESET
,

59 .
	ga˘ive_low
 = 1,

61 .
	gdesc
 = "sw1",

62 .
	gty≥
 = 
EV_KEY
,

63 .
	gcode
 = 
BTN_0
,

64 .
	gdeboun˚_öãrvÆ
 = 
E1700AC_V2_KEYS_DEBOUNCE_INTERVAL
,

65 .
	ggpio
 = 
E1700AC_V2_GPIO_BTN_SW1
,

66 .
	ga˘ive_low
 = 1,

70 c⁄° 
¨8327_Àd_öfo
 
	ge1700ac_v2_Àds_qˇ8334
[] = {

71 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "e1700ac-v2:green:lan"),

72 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "e1700ac-v2:green:wan"),

76 
¨8327_Àd_cfg
 
	ge1700ac_v2_qˇ8334_Àd_cfg
 = {

77 .
Àd_˘æ0
 = 0xcf37cf37,

78 .
	gÀd_˘æ1
 = 0xcf37cf37,

79 .
	gÀd_˘æ2
 = 0xcf37cf37,

80 .
	gÀd_˘æ3
 = 0x0,

81 .
	g›í_døö
 = 
åue
,

84 
¨8327_∑d_cfg
 
	ge1700ac_v2_qˇ8334_∑d0_cfg
 = {

85 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

86 .
	gsgmii_dñay_í
 = 
åue
,

89 
¨8327_∂©f‹m_d©a
 
	ge1700ac_v2_qˇ8334_d©a
 = {

90 .
∑d0_cfg
 = &
e1700ac_v2_qˇ8334_∑d0_cfg
,

91 .
	gp‹t0_cfg
 = {

92 .
f‹˚_lök
 = 1,

93 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

94 .
	gdu∂ex
 = 1,

95 .
	gtx∑u£
 = 1,

96 .
	grx∑u£
 = 1,

98 .
	gÀd_cfg
 = &
e1700ac_v2_qˇ8334_Àd_cfg
,

99 .
	gÀds
 = 
e1700ac_v2_Àds_qˇ8334
,

100 .
	gnum_Àds
 = 
ARRAY_SIZE
(
e1700ac_v2_Àds_qˇ8334
),

103 
mdio_bﬂrd_öfo
 
	ge1700ac_v2_mdio0_öfo
[] = {

105 .
bus_id
 = "ag71xx-mdio.0",

106 .
	gmdio_addr
 = 0,

107 .
	g∂©f‹m_d©a
 = &
e1700ac_v2_qˇ8334_d©a
,

111 
__öô
 
	$e1700ac_v2_£tup
()

113 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050400);

114 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f061000);

116 
	`©h79_ªgi°î_m25p80
(
NULL
);

118 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e1700ac_v2_Àds_gpio
),

119 
e1700ac_v2_Àds_gpio
);

121 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E1700AC_V2_KEYS_POLL_INTERVAL
,

122 
	`ARRAY_SIZE
(
e1700ac_v2_gpio_keys
),

123 
e1700ac_v2_gpio_keys
);

125 
	`©h79_ªgi°î_mdio
(0, 0x0);

126 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
e1700ac_v2_mdio0_öfo
,

127 
	`ARRAY_SIZE
(
e1700ac_v2_mdio0_öfo
));

130 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

131 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

132 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

133 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

134 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

135 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x03000101;

136 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

137 
	`©h79_ªgi°î_ëh
(0);

139 
	`©h79_ªgi°î_pci
();

140 
	`©h79_ªgi°î_usb
();

141 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

142 
	}
}

144 
MIPS_MACHINE
(
ATH79_MACH_E1700AC_V2
, "E1700AC-V2", "Qxwlan E1700AC v2",

145 
e1700ac_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e2100l.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-Àds-gpio.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"dev-wmac.h
"

19 
	~"nvøm.h
"

20 
	~"machty≥s.h
"

22 
	#E2100L_GPIO_LED_POWER
 14

	)

23 
	#E2100L_GPIO_LED_WPS_AMBER
 9

	)

24 
	#E2100L_GPIO_LED_WPS_BLUE
 8

	)

25 
	#E2100L_GPIO_LED_WLAN
 6

	)

27 
	#E2100L_GPIO_BTN_WPS
 7

	)

28 
	#E2100L_GPIO_BTN_RESET
 21

	)

30 
	#E2100L_KEYS_POLL_INTERVAL
 20

	)

31 
	#E2100L_KEYS_DEBOUNCE_INTERVAL
 (3 * 
E2100L_KEYS_POLL_INTERVAL
)

	)

33 
	#E2100L_NVRAM_ADDR
 0x1f7e0000

	)

34 
	#E2100L_NVRAM_SIZE
 0x10000

	)

36 c⁄° *
	ge2100l_∑π_¥obes
[] = {

38 
NULL
,

41 
Êash_∂©f‹m_d©a
 
	ge2100l_Êash_d©a
 = {

42 .
∑π_¥obes
 = 
e2100l_∑π_¥obes
,

45 
gpio_Àd
 
	ge2100l_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "e2100l:blue:power",

48 .
	ggpio
 = 
E2100L_GPIO_LED_POWER
,

49 .
	ga˘ive_low
 = 1,

50 .
	gdeÁu…_åiggî
 = "default-on",

52 .
	g«me
 = "e2100l:amber:wps",

53 .
	ggpio
 = 
E2100L_GPIO_LED_WPS_AMBER
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "e2100l:blue:wps",

57 .
	ggpio
 = 
E2100L_GPIO_LED_WPS_BLUE
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "e2100l:blue:wlan",

61 .
	ggpio
 = 
E2100L_GPIO_LED_WLAN
,

62 .
	ga˘ive_low
 = 1,

66 
gpio_keys_buâ⁄
 
	ge2100l_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "reset",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_RESTART
,

71 .
	gdeboun˚_öãrvÆ
 = 
E2100L_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
E2100L_GPIO_BTN_RESET
,

73 .
	ga˘ive_low
 = 1,

75 .
	gdesc
 = "wps",

76 .
	gty≥
 = 
EV_KEY
,

77 .
	gcode
 = 
KEY_WPS_BUTTON
,

78 .
	gdeboun˚_öãrvÆ
 = 
E2100L_KEYS_DEBOUNCE_INTERVAL
,

79 .
	ggpio
 = 
E2100L_GPIO_BTN_WPS
,

80 .
	ga˘ive_low
 = 1,

84 
__öô
 
	$e2100l_£tup
()

86 c⁄° *
nvøm
 = (*Ë
	`KSEG1ADDR
(
E2100L_NVRAM_ADDR
);

87 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

88 
u8
 
mac
[6];

90 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
E2100L_NVRAM_SIZE
,

91 "œn_hwaddr=", 
mac
) == 0) {

92 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

93 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

96 
	`©h79_ªgi°î_mdio
(0, 0x0);

98 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

99 
©h79_ëh0_d©a
.
phy_mask
 = 0x01;

101 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

102 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

104 
	`©h79_ªgi°î_ëh
(0);

105 
	`©h79_ªgi°î_ëh
(1);

107 
	`©h79_ªgi°î_m25p80
(&
e2100l_Êash_d©a
);

109 
	`©h79_ªgi°î_usb
();

111 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
E2100L_NVRAM_SIZE
,

112 "wl0_hwaddr=", 
mac
) == 0)

113 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

115 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

117 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e2100l_Àds_gpio
),

118 
e2100l_Àds_gpio
);

120 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E2100L_KEYS_POLL_INTERVAL
,

121 
	`ARRAY_SIZE
(
e2100l_gpio_keys
),

122 
e2100l_gpio_keys
);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_E2100L
, "E2100L", "Linksys E2100L",

126 
e2100l_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e558-v2.c

11 
	~<löux/phy.h
>

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

15 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-•i.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

29 
	~"pci.h
"

31 
	#E558_V2_GPIO_LED_WLAN
 13

	)

32 
	#E558_V2_GPIO_LED_SYSTEM
 14

	)

33 
	#E558_V2_GPIO_LED_QSS
 15

	)

35 
	#E558_V2_GPIO_BTN_RESET
 16

	)

37 
	#E558_V2_KEYS_POLL_INTERVAL
 20

	)

38 
	#E558_V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
E558_V2_KEYS_POLL_INTERVAL
)

	)

40 
gpio_Àd
 
	ge558_v2_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "e558-v2:green:qss",

43 .
	ggpio
 = 
E558_V2_GPIO_LED_QSS
,

44 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "e558-v2:green:system",

48 .
	ggpio
 = 
E558_V2_GPIO_LED_SYSTEM
,

49 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "e558-v2:green:wlan",

53 .
	ggpio
 = 
E558_V2_GPIO_LED_WLAN
,

54 .
	ga˘ive_low
 = 1,

58 
gpio_keys_buâ⁄
 
	ge558_v2_gpio_keys
[] 
	g__öôd©a
 = {

60 .
desc
 = "reset",

61 .
	gty≥
 = 
EV_KEY
,

62 .
	gcode
 = 
KEY_RESTART
,

63 .
	gdeboun˚_öãrvÆ
 = 
E558_V2_KEYS_DEBOUNCE_INTERVAL
,

64 .
	ggpio
 = 
E558_V2_GPIO_BTN_RESET
,

65 .
	ga˘ive_low
 = 1,

70 
¨8327_∑d_cfg
 
	ge558_v2_¨8327_∑d0_cfg
 = {

71 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

72 .
	gsgmii_dñay_í
 = 
åue
,

76 
¨8327_∑d_cfg
 
	ge558_v2_¨8327_∑d6_cfg
 = {

77 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

78 .
	gtx˛k_dñay_í
 = 
åue
,

79 .
	grx˛k_dñay_í
 = 
åue
,

80 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

81 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

84 c⁄° 
¨8327_Àd_öfo
 
	ge558_v2_Àds_qˇ8334
[] = {

85 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "e558-v2:green:wan"),

86 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "e558-v2:green:lan1"),

87 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "e558-v2:green:lan2"),

90 
¨8327_Àd_cfg
 
	ge558_v2_¨8327_Àd_cfg
 = {

91 .
Àd_˘æ0
 = 0xc737c737,

92 .
	gÀd_˘æ1
 = 0x00000000,

93 .
	gÀd_˘æ2
 = 0x00000000,

94 .
	gÀd_˘æ3
 = 0x0030c300,

95 .
	g›í_døö
 = 
Ál£
,

98 
¨8327_∂©f‹m_d©a
 
	ge558_v2_¨8327_d©a
 = {

99 .
∑d0_cfg
 = &
e558_v2_¨8327_∑d0_cfg
,

100 .
	g∑d6_cfg
 = &
e558_v2_¨8327_∑d6_cfg
,

101 .
	gp‹t0_cfg
 = {

102 .
f‹˚_lök
 = 1,

103 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

104 .
	gdu∂ex
 = 1,

105 .
	gtx∑u£
 = 1,

106 .
	grx∑u£
 = 1,

108 .
	gp‹t6_cfg
 = {

109 .
f‹˚_lök
 = 1,

110 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

111 .
	gdu∂ex
 = 1,

112 .
	gtx∑u£
 = 1,

113 .
	grx∑u£
 = 1,

115 .
	gÀd_cfg
 = &
e558_v2_¨8327_Àd_cfg
,

116 .
	gÀds
 = 
e558_v2_Àds_qˇ8334
,

117 .
	gnum_Àds
 = 
ARRAY_SIZE
(
e558_v2_Àds_qˇ8334
),

120 
mdio_bﬂrd_öfo
 
	ge558_v2_mdio0_öfo
[] = {

122 .
bus_id
 = "ag71xx-mdio.0",

123 .
	gmdio_addr
 = 0,

124 .
	g∂©f‹m_d©a
 = &
e558_v2_¨8327_d©a
,

128 
__öô
 
	$e558_v2_£tup
()

130 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050400);

131 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f061000);

133 
	`©h79_ªgi°î_m25p80
(
NULL
);

134 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e558_v2_Àds_gpio
),

135 
e558_v2_Àds_gpio
);

137 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E558_V2_KEYS_POLL_INTERVAL
,

138 
	`ARRAY_SIZE
(
e558_v2_gpio_keys
),

139 
e558_v2_gpio_keys
);

141 
	`©h79_ªgi°î_mdio
(0, 0x0);

142 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
e558_v2_mdio0_öfo
,

143 
	`ARRAY_SIZE
(
e558_v2_mdio0_öfo
));

145 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

148 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

149 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

150 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

151 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

152 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

153 
	`©h79_ªgi°î_ëh
(0);

156 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

157 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

158 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

159 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

160 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

161 
	`©h79_ªgi°î_ëh
(1);

163 
	`©h79_ªgi°î_pci
();

164 
	`©h79_ªgi°î_usb
();

165 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

166 
	}
}

168 
MIPS_MACHINE
(
ATH79_MACH_E558_V2
, "E558-V2", "Qxwlan E558 v2",

169 
e558_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e600g-v2.c

12 
	~"comm⁄.h
"

13 
	~"dev-ëh.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-Àds-gpio.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

20 
	~"pci.h
"

22 
	#E600G_V2_GPIO_LED_LAN
 16

	)

23 
	#E600G_V2_GPIO_LED_SYS
 13

	)

24 
	#E600G_V2_GPIO_LED_WAN_B
 4

	)

25 
	#E600G_V2_GPIO_LED_WAN_G
 15

	)

27 
	#E600GAC_V2_GPIO_LED_CTRL_B
 14

	)

28 
	#E600GAC_V2_GPIO_LED_CTRL_G
 11

	)

29 
	#E600GAC_V2_GPIO_LED_CTRL_R
 12

	)

30 
	#E600GAC_V2_GPIO_LED_LAN
 16

	)

31 
	#E600GAC_V2_GPIO_LED_SYS
 13

	)

32 
	#E600GAC_V2_GPIO_LED_WAN_G
 15

	)

33 
	#E600GAC_V2_GPIO_LED_WAN_O
 4

	)

35 
	#E600G_V2_GPIO_BTN_RESET
 17

	)

36 
	#E600GAC_V2_GPIO_BTN_WPS
 1

	)

38 
	#E600G_V2_KEYS_POLL_INTERVAL
 20

	)

39 
	#E600G_V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
E600G_V2_KEYS_POLL_INTERVAL
)

	)

41 
gpio_Àd
 
	ge600g_v2_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "e600g-v2:blue:system",

44 .
	ggpio
 = 
E600G_V2_GPIO_LED_SYS
,

45 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "e600g-v2:blue:wan",

48 .
	ggpio
 = 
E600G_V2_GPIO_LED_WAN_B
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "e600g-v2:green:lan",

52 .
	ggpio
 = 
E600G_V2_GPIO_LED_LAN
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "e600g-v2:green:wan",

56 .
	ggpio
 = 
E600G_V2_GPIO_LED_WAN_G
,

57 .
	ga˘ive_low
 = 1,

61 
gpio_Àd
 
	ge600gac_v2_Àds_gpio
[] 
	g__öôd©a
 = {

63 .
«me
 = "e600gac-v2:blue:control",

64 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_CTRL_B
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "e600gac-v2:green:control",

68 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_CTRL_G
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "e600gac-v2:red:control",

72 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_CTRL_R
,

73 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "e600gac-v2:green:system",

76 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_SYS
,

77 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "e600gac-v2:orange:wan",

80 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_WAN_O
,

81 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "e600gac-v2:green:lan",

84 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_LAN
,

85 .
	ga˘ive_low
 = 1,

87 .
	g«me
 = "e600gac-v2:green:wan",

88 .
	ggpio
 = 
E600GAC_V2_GPIO_LED_WAN_G
,

89 .
	ga˘ive_low
 = 1,

93 
gpio_keys_buâ⁄
 
	ge600g_v2_gpio_keys
[] 
	g__öôd©a
 = {

95 .
desc
 = "reset",

96 .
	gty≥
 = 
EV_KEY
,

97 .
	gcode
 = 
KEY_RESTART
,

98 .
	gdeboun˚_öãrvÆ
 = 
E600G_V2_KEYS_DEBOUNCE_INTERVAL
,

99 .
	ggpio
 = 
E600G_V2_GPIO_BTN_RESET
,

100 .
	ga˘ive_low
 = 1,

104 
gpio_keys_buâ⁄
 
	ge600gac_v2_gpio_keys
[] 
	g__öôd©a
 = {

106 .
desc
 = "reset",

107 .
	gty≥
 = 
EV_KEY
,

108 .
	gcode
 = 
KEY_RESTART
,

109 .
	gdeboun˚_öãrvÆ
 = 
E600G_V2_KEYS_DEBOUNCE_INTERVAL
,

110 .
	ggpio
 = 
E600G_V2_GPIO_BTN_RESET
,

111 .
	ga˘ive_low
 = 1,

113 .
	gdesc
 = "wps",

114 .
	gty≥
 = 
EV_KEY
,

115 .
	gcode
 = 
KEY_WPS_BUTTON
,

116 .
	gdeboun˚_öãrvÆ
 = 
E600G_V2_KEYS_DEBOUNCE_INTERVAL
,

117 .
	ggpio
 = 
E600GAC_V2_GPIO_BTN_WPS
,

118 .
	ga˘ive_low
 = 1,

122 
__öô
 
	$e600g_v2_comm⁄_£tup
()

124 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050400);

125 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f061000);

127 
	`©h79_ªgi°î_m25p80
(
NULL
);

129 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

131 
	`©h79_ªgi°î_mdio
(0, 0x0);

133 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

134 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xfe;

137 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

138 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

139 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

140 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

141 
	`©h79_ªgi°î_ëh
(0);

144 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

145 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

146 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(0);

147 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

148 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

149 
	`©h79_ªgi°î_ëh
(1);

151 
	`©h79_ªgi°î_pci
();

152 
	`©h79_ªgi°î_usb
();

153 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

154 
	}
}

156 
__öô
 
	$e600g_v2_£tup
()

158 
	`e600g_v2_comm⁄_£tup
();

160 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e600g_v2_Àds_gpio
),

161 
e600g_v2_Àds_gpio
);

163 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E600G_V2_KEYS_POLL_INTERVAL
,

164 
	`ARRAY_SIZE
(
e600g_v2_gpio_keys
),

165 
e600g_v2_gpio_keys
);

166 
	}
}

168 
__öô
 
	$e600gac_v2_£tup
()

170 
	`e600g_v2_comm⁄_£tup
();

172 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e600gac_v2_Àds_gpio
),

173 
e600gac_v2_Àds_gpio
);

175 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E600G_V2_KEYS_POLL_INTERVAL
,

176 
	`ARRAY_SIZE
(
e600gac_v2_gpio_keys
),

177 
e600gac_v2_gpio_keys
);

178 
	}
}

180 
MIPS_MACHINE
(
ATH79_MACH_E600G_V2
, "E600G-V2", "Qxwlan E600G v2",

181 
e600g_v2_£tup
);

183 
MIPS_MACHINE
(
ATH79_MACH_E600GAC_V2
, "E600GAC-V2", "Qxwlan E600GAC v2",

184 
e600gac_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e750a-v4.c

11 
	~<löux/phy.h
>

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

15 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

27 
	~"pci.h
"

29 
	#E750A_V4_GPIO_LED_SYS
 14

	)

30 
	#E750A_V4_GPIO_LED_LAN
 19

	)

31 
	#E750A_V4_GPIO_LED_WAN
 18

	)

32 
	#E750A_V4_GPIO_LED_DS10
 15

	)

33 
	#E750A_V4_GPIO_LED_DS20
 20

	)

34 
	#E750A_V4_GPIO_LED_WLAN
 21

	)

36 
	#E750A_V4_GPIO_BTN_RESET
 12

	)

38 
	#E750A_V4_KEYS_POLL_INTERVAL
 20

	)

39 
	#E750A_V4_KEYS_DEBOUNCE_INTERVAL
 (3 * 
E750A_V4_KEYS_POLL_INTERVAL
)

	)

41 
gpio_Àd
 
	ge750a_v4_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "e750a-v4:green:system",

44 .
	ggpio
 = 
E750A_V4_GPIO_LED_SYS
,

45 .
	ga˘ive_low
 = 1,

48 .
	g«me
 = "e750a-v4:green:lan",

49 .
	ggpio
 = 
E750A_V4_GPIO_LED_LAN
,

50 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "e750a-v4:green:wan",

54 .
	ggpio
 = 
E750A_V4_GPIO_LED_WAN
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "e750a-v4:green:wlan",

59 .
	ggpio
 = 
E750A_V4_GPIO_LED_WLAN
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "e750a-v4:green:ds10",

64 .
	ggpio
 = 
E750A_V4_GPIO_LED_DS10
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "e750a-v4:green:ds20",

69 .
	ggpio
 = 
E750A_V4_GPIO_LED_DS20
,

70 .
	ga˘ive_low
 = 1,

74 
gpio_keys_buâ⁄
 
	ge750a_v4_gpio_keys
[] 
	g__öôd©a
 = {

76 .
desc
 = "reset",

77 .
	gty≥
 = 
EV_KEY
,

78 .
	gcode
 = 
KEY_RESTART
,

79 .
	gdeboun˚_öãrvÆ
 = 
E750A_V4_KEYS_DEBOUNCE_INTERVAL
,

80 .
	ggpio
 = 
E750A_V4_GPIO_BTN_RESET
,

81 .
	ga˘ive_low
 = 1,

86 
__öô
 
	$e750a_v4_£tup
()

88 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050400);

89 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f061000);

91 
	`©h79_ªgi°î_m25p80
(
NULL
);

93 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e750a_v4_Àds_gpio
),

94 
e750a_v4_Àds_gpio
);

95 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E750A_V4_KEYS_POLL_INTERVAL
,

96 
	`ARRAY_SIZE
(
e750a_v4_gpio_keys
),

97 
e750a_v4_gpio_keys
);

99 
	`©h79_ªgi°î_mdio
(1, 0x0);

100 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

103 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

104 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

105 
	`©h79_ªgi°î_ëh
(1);

108 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

109 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

110 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

111 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

112 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

113 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

114 
	`©h79_ªgi°î_ëh
(0);

116 
	`©h79_ªgi°î_pci
();

117 
	`©h79_ªgi°î_usb
();

118 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

119 
	}
}

121 
MIPS_MACHINE
(
ATH79_MACH_E750A_V4
, "E750A-V4", "Qxlan E750A v4",

122 
e750a_v4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-e750g-v8.c

11 
	~<löux/phy.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/©h9k_∂©f‹m.h
>

14 
	~<löux/¨8216_∂©f‹m.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"pci.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#E750G_V8_GPIO_LED_SYS
 14

	)

31 
	#E750G_V8_GPIO_LED_DS20
 15

	)

32 
	#E750G_V8_GPIO_LED_DS10
 20

	)

33 
	#E750G_V8_GPIO_LED_WLAN
 21

	)

35 
	#E750G_V8_GPIO_BTN_RESET
 12

	)

37 
	#E750G_V8_KEYS_POLL_INTERVAL
 20

	)

38 
	#E750G_V8_KEYS_DEBOUNCE_INTERVAL
 (3 * 
E750G_V8_KEYS_POLL_INTERVAL
)

	)

40 
gpio_Àd
 
	ge750g_v8_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "e750g-v8:green:system",

43 .
	ggpio
 = 
E750G_V8_GPIO_LED_SYS
,

44 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "e750g-v8:green:ds10",

48 .
	ggpio
 = 
E750G_V8_GPIO_LED_DS10
,

49 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "e750g-v8:green:ds20",

53 .
	ggpio
 = 
E750G_V8_GPIO_LED_DS20
,

54 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "e750g-v8:green:wlan",

58 .
	ggpio
 = 
E750G_V8_GPIO_LED_WLAN
,

59 .
	ga˘ive_low
 = 1,

63 
gpio_keys_buâ⁄
 
	ge750g_v8_gpio_keys
[] 
	g__öôd©a
 = {

65 .
desc
 = "reset",

66 .
	gty≥
 = 
EV_KEY
,

67 .
	gcode
 = 
KEY_RESTART
,

68 .
	gdeboun˚_öãrvÆ
 = 
E750G_V8_KEYS_DEBOUNCE_INTERVAL
,

69 .
	ggpio
 = 
E750G_V8_GPIO_BTN_RESET
,

70 .
	ga˘ive_low
 = 1,

74 c⁄° 
¨8327_Àd_öfo
 
	ge750g_v8_Àds_qˇ8334
[] = {

75 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "e750g-v8:green:lan"),

76 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "e750g-v8:green:wan"),

79 
¨8327_∑d_cfg
 
	ge750g_v8_¨8327_∑d0_cfg
 = {

80 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

81 .
	gtx˛k_dñay_í
 = 
åue
,

82 .
	grx˛k_dñay_í
 = 
åue
,

83 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

84 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

85 .
	gmac06_exch™ge_dis
 = 
åue
,

88 
¨8327_Àd_cfg
 
	ge750g_v8_¨8327_Àd_cfg
 = {

89 .
Àd_˘æ0
 = 0x00000000,

90 .
	gÀd_˘æ1
 = 0xc737c737,

91 .
	gÀd_˘æ2
 = 0x00000000,

92 .
	gÀd_˘æ3
 = 0x00c30c00,

93 .
	g›í_døö
 = 
åue
,

96 
¨8327_∂©f‹m_d©a
 
	ge750g_v8_¨8327_d©a
 = {

97 .
∑d0_cfg
 = &
e750g_v8_¨8327_∑d0_cfg
,

98 .
	gp‹t0_cfg
 = {

99 .
f‹˚_lök
 = 1,

100 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

101 .
	gdu∂ex
 = 1,

102 .
	gtx∑u£
 = 1,

103 .
	grx∑u£
 = 1,

105 .
	gÀd_cfg
 = &
e750g_v8_¨8327_Àd_cfg
,

106 .
	gÀds
 = 
e750g_v8_Àds_qˇ8334
,

107 .
	gnum_Àds
 = 
ARRAY_SIZE
(
e750g_v8_Àds_qˇ8334
),

110 
mdio_bﬂrd_öfo
 
	ge750g_v8_mdio0_öfo
[] = {

112 .
bus_id
 = "ag71xx-mdio.0",

113 .
	gmdio_addr
 = 0,

114 .
	g∂©f‹m_d©a
 = &
e750g_v8_¨8327_d©a
,

118 
__öô
 
	$e750g_v8_£tup
()

120 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050400);

121 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f061000);

123 
	`©h79_ªgi°î_m25p80
(
NULL
);

124 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e750g_v8_Àds_gpio
),

125 
e750g_v8_Àds_gpio
);

126 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
E750G_V8_KEYS_POLL_INTERVAL
,

127 
	`ARRAY_SIZE
(
e750g_v8_gpio_keys
),

128 
e750g_v8_gpio_keys
);

130 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
e750g_v8_mdio0_öfo
,

131 
	`ARRAY_SIZE
(
e750g_v8_mdio0_öfo
));

133 
	`©h79_ªgi°î_mdio
(0, 0x0);

134 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

135 
AR934X_ETH_CFG_SW_ONLY_MODE
);

138 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

139 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

140 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

141 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

142 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

143 
	`©h79_ªgi°î_ëh
(0);

145 
	`©h79_ªgi°î_pci
();

146 
	`©h79_ªgi°î_usb
();

147 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

148 
	}
}

150 
MIPS_MACHINE
(
ATH79_MACH_E750G_V8
, "E750G-V8", "Qxwlan E750G v8",

151 
e750g_v8_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-eap120.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

27 
	#EAP120_GPIO_LED_RED
 12

	)

28 
	#EAP120_GPIO_LED_YEL
 13

	)

29 
	#EAP120_GPIO_LED_GRN
 15

	)

30 
	#EAP120_GPIO_BTN_RESET
 4

	)

32 
	#EAP120_KEYS_POLL_INTERVAL
 20

	)

33 
	#EAP120_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EAP120_KEYS_POLL_INTERVAL
)

	)

35 
	#EAP120_GPIO_SMI_MDIO
 16

	)

36 
	#EAP120_GPIO_SMI_MDC
 17

	)

38 
	#EAP120_LAN_PHYADDR
 4

	)

40 
gpio_Àd
 
	góp120_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "eap120:red:system",

43 .
	ggpio
 = 
EAP120_GPIO_LED_RED
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "eap120:yellow:system",

47 .
	ggpio
 = 
EAP120_GPIO_LED_YEL
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "eap120:green:system",

51 .
	ggpio
 = 
EAP120_GPIO_LED_GRN
,

52 .
	ga˘ive_low
 = 1,

56 
gpio_keys_buâ⁄
 
	góp120_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "Reset button",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
EAP120_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
EAP120_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

67 
mdio_gpio_∂©f‹m_d©a
 
	góp120_mdio
 = {

68 .
mdc
 = 
EAP120_GPIO_SMI_MDC
,

69 .
	gmdio
 = 
EAP120_GPIO_SMI_MDIO
,

70 .
	gphy_mask
 = ~
BIT
(
EAP120_LAN_PHYADDR
),

73 
©803x_∂©f‹m_d©a
 
	góp120_¨8035_d©a
 = {

74 .
dißbÀ_sm¨ãì
 = 0,

75 .
	gíabÀ_rgmii_rx_dñay
 = 1,

76 .
	gíabÀ_rgmii_tx_dñay
 = 0,

77 .
	gfixup_rgmii_tx_dñay
 = 1,

80 
∂©f‹m_devi˚
 
	góp120_phy_devi˚
 = {

81 .
«me
 = "mdio-gpio",

82 .
	gid
 = 0,

83 .
	gdev
 = {

84 .
∂©f‹m_d©a
 = &
óp120_mdio
, &
	góp120_¨8035_d©a


88 
__öô
 
	$óp_£tup
(
u8
 *
mac
)

90 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
óp120_Àds_gpio
),

91 
óp120_Àds_gpio
);

93 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
EAP120_KEYS_POLL_INTERVAL
,

94 
	`ARRAY_SIZE
(
óp120_gpio_keys
),

95 
óp120_gpio_keys
);

97 
	`©h79_ªgi°î_m25p80
(
NULL
);

100 
	`∂©f‹m_devi˚_ªgi°î
(&
óp120_phy_devi˚
);

101 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

104 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

105 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
óp120_phy_devi˚
.
dev
;

106 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

107 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
EAP120_LAN_PHYADDR
);

108 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x0e000000;

109 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x00000101;

110 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

111 
	`©h79_ªgi°î_ëh
(0);

112 
	}
}

114 
__öô
 
	$óp120_£tup
()

116 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f030008);

117 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

119 
	`óp_£tup
(
mac
);

121 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

122 
	}
}

124 
MIPS_MACHINE
(
ATH79_MACH_EAP120
, "EAP120", "TP-LINK EAP120",

125 
óp120_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-eap300v2.c

11 
	~<löux/gpio.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

27 
	#EAP300V2_GPIO_LED_POWER
 0

	)

28 
	#EAP300V2_GPIO_LED_LAN
 16

	)

29 
	#EAP300V2_GPIO_LED_WLAN
 17

	)

31 
	#EAP300V2_GPIO_BTN_RESET
 1

	)

33 
	#EAP300V2_KEYS_POLL_INTERVAL
 20

	)

34 
	#EAP300V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EAP300V2_KEYS_POLL_INTERVAL
)

	)

36 
gpio_Àd
 
	góp300v2_Àds_gpio
[] 
	g__öôd©a
 = {

38 .
«me
 = "engenius:blue:power",

39 .
	ggpio
 = 
EAP300V2_GPIO_LED_POWER
,

40 .
	ga˘ive_low
 = 1,

42 .
	g«me
 = "engenius:blue:lan",

43 .
	ggpio
 = 
EAP300V2_GPIO_LED_LAN
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "engenius:blue:wlan",

47 .
	ggpio
 = 
EAP300V2_GPIO_LED_WLAN
,

48 .
	ga˘ive_low
 = 1,

52 
gpio_keys_buâ⁄
 
	góp300v2_gpio_keys
[] 
	g__öôd©a
 = {

54 .
desc
 = "reset",

55 .
	gty≥
 = 
EV_KEY
,

56 .
	gcode
 = 
KEY_RESTART
,

57 .
	gdeboun˚_öãrvÆ
 = 
EAP300V2_KEYS_DEBOUNCE_INTERVAL
,

58 .
	ggpio
 = 
EAP300V2_GPIO_BTN_RESET
,

59 .
	ga˘ive_low
 = 1,

63 
	#EAP300V2_ART_MAC_OFFSET
 2

	)

65 
	#EAP300V2_LAN_PHYMASK
 
	`BIT
(0)

	)

67 
__öô
 
	$óp300v2_£tup
()

69 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff1000);

71 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

73 
	`©h79_gpio_ouçut_£À˘
(
EAP300V2_GPIO_LED_POWER
, 
AR934X_GPIO_OUT_GPIO
);

74 
	`©h79_gpio_ouçut_£À˘
(
EAP300V2_GPIO_LED_LAN
, 
AR934X_GPIO_OUT_GPIO
);

75 
	`©h79_gpio_ouçut_£À˘
(
EAP300V2_GPIO_LED_WLAN
, 
AR934X_GPIO_OUT_GPIO
);

77 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
óp300v2_Àds_gpio
),

78 
óp300v2_Àds_gpio
);

79 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
EAP300V2_KEYS_POLL_INTERVAL
,

80 
	`ARRAY_SIZE
(
óp300v2_gpio_keys
),

81 
óp300v2_gpio_keys
);

83 
	`©h79_ªgi°î_m25p80
(
NULL
);

84 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

85 
	`©h79_ªgi°î_mdio
(1, 0x0);

87 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

89 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

90 
¨t
 + 
EAP300V2_ART_MAC_OFFSET
, 0);

92 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

93 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
EAP300V2_LAN_PHYMASK
;

94 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

95 
©h79_ëh0_d©a
.
phy_mask
 = 
EAP300V2_LAN_PHYMASK
;

96 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

97 
	`©h79_ªgi°î_ëh
(0);

98 
	}
}

100 
MIPS_MACHINE
(
ATH79_MACH_EAP300V2
, "EAP300V2", "EnGenius EAP300 v2",

101 
óp300v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-eap7660d.c

13 
	~<löux/pci.h
>

14 
	~<löux/©h5k_∂©f‹m.h
>

15 
	~<löux/dñay.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"machty≥s.h
"

24 
	~"pci.h
"

26 
	#EAP7660D_KEYS_POLL_INTERVAL
 20

	)

27 
	#EAP7660D_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EAP7660D_KEYS_POLL_INTERVAL
)

	)

29 
	#EAP7660D_GPIO_DS4
 7

	)

30 
	#EAP7660D_GPIO_DS5
 2

	)

31 
	#EAP7660D_GPIO_DS7
 0

	)

32 
	#EAP7660D_GPIO_DS8
 4

	)

33 
	#EAP7660D_GPIO_SW1
 3

	)

34 
	#EAP7660D_GPIO_SW3
 8

	)

35 
	#EAP7660D_PHYMASK
 
	`BIT
(20)

	)

36 
	#EAP7660D_BOARDCONFIG
 0x1F7F0000

	)

37 
	#EAP7660D_GBIC_MAC_OFFSET
 0x1000

	)

38 
	#EAP7660D_WMAC0_MAC_OFFSET
 0x1010

	)

39 
	#EAP7660D_WMAC1_MAC_OFFSET
 0x1016

	)

40 
	#EAP7660D_WMAC0_CALDATA_OFFSET
 0x2000

	)

41 
	#EAP7660D_WMAC1_CALDATA_OFFSET
 0x3000

	)

43 #ifde‡
CONFIG_PCI


44 
©h5k_∂©f‹m_d©a
 
	góp7660d_wmac0_d©a
;

45 
©h5k_∂©f‹m_d©a
 
	góp7660d_wmac1_d©a
;

46 
	góp7660d_wmac0_mac
[6];

47 
	góp7660d_wmac1_mac
[6];

48 
u16
 
	góp7660d_wmac0_ì¥om
[
ATH5K_PLAT_EEP_MAX_WORDS
];

49 
u16
 
	góp7660d_wmac1_ì¥om
[
ATH5K_PLAT_EEP_MAX_WORDS
];

51 
	$óp7660d_pci_∂©_dev_öô
(
pci_dev
 *
dev
)

53 
	`PCI_SLOT
(
dev
->
dev‚
)) {

55 
dev
->dev.
∂©f‹m_d©a
 = &
óp7660d_wmac0_d©a
;

59 
dev
->dev.
∂©f‹m_d©a
 = &
óp7660d_wmac1_d©a
;

64 
	}
}

66 
__öô
 
	$óp7660d_pci_öô
(
u8
 *
ˇl_d©a0
, u8 *
mac_addr0
,

67 
u8
 *
ˇl_d©a1
, u8 *
mac_addr1
)

69 i‡(
ˇl_d©a0
 && *cal_data0 == 0xa55a) {

70 
	`mem˝y
(
óp7660d_wmac0_ì¥om
, 
ˇl_d©a0
,

71 
ATH5K_PLAT_EEP_MAX_WORDS
);

72 
óp7660d_wmac0_d©a
.
ì¥om_d©a
 = 
óp7660d_wmac0_ì¥om
;

75 i‡(
ˇl_d©a1
 && *cal_data1 == 0xa55a) {

76 
	`mem˝y
(
óp7660d_wmac1_ì¥om
, 
ˇl_d©a1
,

77 
ATH5K_PLAT_EEP_MAX_WORDS
);

78 
óp7660d_wmac1_d©a
.
ì¥om_d©a
 = 
óp7660d_wmac1_ì¥om
;

81 i‡(
mac_addr0
) {

82 
	`mem˝y
(
óp7660d_wmac0_mac
, 
mac_addr0
,

83 (
óp7660d_wmac0_mac
));

84 
óp7660d_wmac0_d©a
.
maˇddr
 = 
óp7660d_wmac0_mac
;

87 i‡(
mac_addr1
) {

88 
	`mem˝y
(
óp7660d_wmac1_mac
, 
mac_addr1
,

89 (
óp7660d_wmac1_mac
));

90 
óp7660d_wmac1_d©a
.
maˇddr
 = 
óp7660d_wmac1_mac
;

93 
	`©h79_pci_£t_∂©_dev_öô
(
óp7660d_pci_∂©_dev_öô
);

94 
	`©h79_ªgi°î_pci
();

95 
	}
}

97 
ölöe
 
	$óp7660d_pci_öô
(
u8
 *
ˇl_d©a0
, u8 *
mac_addr0
,

98 
u8
 *
ˇl_d©a1
, u8 *
mac_addr1
)

100 
	}
}

103 
gpio_Àd
 
	góp7660d_Àds_gpio
[] 
	g__öôd©a
 = {

105 .
«me
 = "eap7660d:green:ds8",

106 .
	ggpio
 = 
EAP7660D_GPIO_DS8
,

107 .
	ga˘ive_low
 = 0,

110 .
	g«me
 = "eap7660d:green:ds5",

111 .
	ggpio
 = 
EAP7660D_GPIO_DS5
,

112 .
	ga˘ive_low
 = 0,

115 .
	g«me
 = "eap7660d:green:ds7",

116 .
	ggpio
 = 
EAP7660D_GPIO_DS7
,

117 .
	ga˘ive_low
 = 0,

120 .
	g«me
 = "eap7660d:green:ds4",

121 .
	ggpio
 = 
EAP7660D_GPIO_DS4
,

122 .
	ga˘ive_low
 = 0,

126 
gpio_keys_buâ⁄
 
	góp7660d_gpio_keys
[] 
	g__öôd©a
 = {

128 .
desc
 = "reset",

129 .
	gty≥
 = 
EV_KEY
,

130 .
	gcode
 = 
KEY_RESTART
,

131 .
	gdeboun˚_öãrvÆ
 = 
EAP7660D_KEYS_DEBOUNCE_INTERVAL
,

132 .
	ggpio
 = 
EAP7660D_GPIO_SW1
,

133 .
	ga˘ive_low
 = 1,

136 .
	gdesc
 = "wps",

137 .
	gty≥
 = 
EV_KEY
,

138 .
	gcode
 = 
KEY_WPS_BUTTON
,

139 .
	gdeboun˚_öãrvÆ
 = 
EAP7660D_KEYS_DEBOUNCE_INTERVAL
,

140 .
	ggpio
 = 
EAP7660D_GPIO_SW3
,

141 .
	ga˘ive_low
 = 1,

145 c⁄° *
	góp7660d_∑π_¥obes
[] = {

147 
NULL
,

150 
Êash_∂©f‹m_d©a
 
	góp7660d_Êash_d©a
 = {

151 .
∑π_¥obes
 = 
óp7660d_∑π_¥obes
,

154 
__öô
 
	$óp7660d_£tup
()

156 
u8
 *
bﬂrdc⁄fig
 = (u8 *Ë
	`KSEG1ADDR
(
EAP7660D_BOARDCONFIG
);

158 
	`©h79_ªgi°î_mdio
(0, ~
EAP7660D_PHYMASK
);

160 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

161 
bﬂrdc⁄fig
 + 
EAP7660D_GBIC_MAC_OFFSET
, 0);

162 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

163 
©h79_ëh0_d©a
.
phy_mask
 = 
EAP7660D_PHYMASK
;

164 
	`©h79_ªgi°î_ëh
(0);

165 
	`©h79_ªgi°î_m25p80
(&
óp7660d_Êash_d©a
);

166 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
óp7660d_Àds_gpio
),

167 
óp7660d_Àds_gpio
);

168 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
EAP7660D_KEYS_POLL_INTERVAL
,

169 
	`ARRAY_SIZE
(
óp7660d_gpio_keys
),

170 
óp7660d_gpio_keys
);

171 
	`óp7660d_pci_öô
(
bﬂrdc⁄fig
 + 
EAP7660D_WMAC0_CALDATA_OFFSET
,

172 
bﬂrdc⁄fig
 + 
EAP7660D_WMAC0_MAC_OFFSET
,

173 
bﬂrdc⁄fig
 + 
EAP7660D_WMAC1_CALDATA_OFFSET
,

174 
bﬂrdc⁄fig
 + 
EAP7660D_WMAC1_MAC_OFFSET
);

175 
	}
};

177 
MIPS_MACHINE
(
ATH79_MACH_EAP7660D
, "EAP7660D", "Senao EAP7660D",

178 
óp7660d_£tup
);

180 
MIPS_MACHINE
(
ATH79_MACH_ALL0305
, "ALL0305", "Allnet ALL0305",

181 
óp7660d_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-el-m150.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

24 
	~"dev-usb.h
"

26 
	#EL_M150_GPIO_BTN6
 6

	)

27 
	#EL_M150_GPIO_BTN7
 7

	)

28 
	#EL_M150_GPIO_BTN_RESET
 11

	)

30 
	#EL_M150_GPIO_LED_SYSTEM
 27

	)

31 
	#EL_M150_GPIO_USB_POWER
 8

	)

33 
	#EL_M150_KEYS_POLL_INTERVAL
 20

	)

34 
	#EL_M150_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EL_M150_KEYS_POLL_INTERVAL
)

	)

36 c⁄° *
	gEL_M150_∑π_¥obes
[] = {

38 
NULL
,

41 
Êash_∂©f‹m_d©a
 
	gEL_M150_Êash_d©a
 = {

42 .
∑π_¥obes
 = 
EL_M150_∑π_¥obes
,

45 
gpio_Àd
 
	gEL_M150_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "easylink:green:system",

48 .
	ggpio
 = 
EL_M150_GPIO_LED_SYSTEM
,

49 .
	ga˘ive_low
 = 1,

53 
gpio_keys_buâ⁄
 
	gEL_M150_gpio_keys
[] 
	g__öôd©a
 = {

55 .
desc
 = "reset",

56 .
	gty≥
 = 
EV_KEY
,

57 .
	gcode
 = 
KEY_RESTART
,

58 .
	gdeboun˚_öãrvÆ
 = 
EL_M150_KEYS_DEBOUNCE_INTERVAL
,

59 .
	ggpio
 = 
EL_M150_GPIO_BTN_RESET
,

60 .
	ga˘ive_low
 = 0,

63 .
	gdesc
 = "BTN_6",

64 .
	gty≥
 = 
EV_KEY
,

65 .
	gcode
 = 
BTN_6
,

66 .
	gdeboun˚_öãrvÆ
 = 
EL_M150_KEYS_DEBOUNCE_INTERVAL
,

67 .
	ggpio
 = 
EL_M150_GPIO_BTN6
,

68 .
	ga˘ive_low
 = 1,

71 .
	gdesc
 = "BTN_7",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
BTN_7
,

74 .
	gdeboun˚_öãrvÆ
 = 
EL_M150_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
EL_M150_GPIO_BTN7
,

76 .
	ga˘ive_low
 = 1,

80 
__öô
 
	$ñ_m150_£tup
()

82 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

83 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

86 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

88 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
EL_M150_Àds_gpio
),

89 
EL_M150_Àds_gpio
);

91 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
EL_M150_KEYS_POLL_INTERVAL
,

92 
	`ARRAY_SIZE
(
EL_M150_gpio_keys
),

93 
EL_M150_gpio_keys
);

95 
	`gpio_ªque°_⁄e
(
EL_M150_GPIO_USB_POWER
,

96 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

98 
	`©h79_ªgi°î_usb
();

100 
	`©h79_ªgi°î_m25p80
(&
EL_M150_Êash_d©a
);

101 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

102 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

104 
	`©h79_ªgi°î_mdio
(0, 0x0);

105 
	`©h79_ªgi°î_ëh
(0);

106 
	`©h79_ªgi°î_ëh
(1);

108 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

109 
	}
}

111 
MIPS_MACHINE
(
ATH79_MACH_EL_M150
, "EL-M150",

112 "EasyLök EL-M150", 
ñ_m150_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-el-mini.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#MINI_GPIO_LED_SYSTEM
 27

	)

25 
	#MINI_GPIO_BTN_RESET
 11

	)

27 
	#MINI_GPIO_USB_POWER
 8

	)

29 
	#MINI_KEYS_POLL_INTERVAL
 20

	)

30 
	#MINI_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MINI_KEYS_POLL_INTERVAL
)

	)

32 c⁄° *
	gmöi_∑π_¥obes
[] = {

34 
NULL
,

37 
Êash_∂©f‹m_d©a
 
	gmöi_Êash_d©a
 = {

38 .
∑π_¥obes
 = 
möi_∑π_¥obes
,

41 
gpio_Àd
 
	gmöi_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "easylink:green:system",

44 .
	ggpio
 = 
MINI_GPIO_LED_SYSTEM
,

45 .
	ga˘ive_low
 = 1,

49 
gpio_keys_buâ⁄
 
	gmöi_gpio_keys
[] 
	g__öôd©a
 = {

51 .
desc
 = "reset",

52 .
	gty≥
 = 
EV_KEY
,

53 .
	gcode
 = 
KEY_RESTART
,

54 .
	gdeboun˚_öãrvÆ
 = 
MINI_KEYS_DEBOUNCE_INTERVAL
,

55 .
	ggpio
 = 
MINI_GPIO_BTN_RESET
,

56 .
	ga˘ive_low
 = 0,

60 
__öô
 
	$ñ_möi_£tup
()

62 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

63 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

65 
	`©h79_ªgi°î_m25p80
(&
möi_Êash_d©a
);

66 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
möi_Àds_gpio
),

67 
möi_Àds_gpio
);

68 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MINI_KEYS_POLL_INTERVAL
,

69 
	`ARRAY_SIZE
(
möi_gpio_keys
),

70 
möi_gpio_keys
);

72 
	`gpio_ªque°_⁄e
(
MINI_GPIO_USB_POWER
,

73 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

75 
	`©h79_ªgi°î_usb
();

77 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

79 
	`©h79_ªgi°î_mdio
(0, 0x0);

80 
	`©h79_ªgi°î_ëh
(0);

82 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

83 
	}
}

85 
MIPS_MACHINE
(
ATH79_MACH_EL_MINI
, "EL-MINI", "EasyLink EL-MINI",

86 
ñ_möi_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ens202ext.c

11 
	~<löux/gpio.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

26 
	~"nvøm.h
"

28 
	#ENS202_GPIO_LED_WLAN4
 0

	)

29 
	#ENS202_GPIO_LED_POWER
 14

	)

30 
	#ENS202_GPIO_LED_WLAN2
 16

	)

31 
	#ENS202_GPIO_LED_WLAN3
 17

	)

32 
	#ENS202_GPIO_LED_WLAN1
 18

	)

34 
	#ENS202_GPIO_BTN_RESET
 1

	)

36 
	#ENS202_KEYS_POLL_INTERVAL
 20

	)

37 
	#ENS202_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ENS202_KEYS_POLL_INTERVAL
)

	)

39 
gpio_Àd
 
	gís202_Àds_gpio
[] 
	g__öôd©a
 = {

41 .
«me
 = "engenius:amber:wlan1",

42 .
	ggpio
 = 
ENS202_GPIO_LED_WLAN1
,

43 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "engenius:red:wlan2",

46 .
	ggpio
 = 
ENS202_GPIO_LED_WLAN2
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "engenius:amber:wlan3",

50 .
	ggpio
 = 
ENS202_GPIO_LED_WLAN3
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "engenius:green:wlan4",

54 .
	ggpio
 = 
ENS202_GPIO_LED_WLAN4
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "engenius:amber:power",

58 .
	ggpio
 = 
ENS202_GPIO_LED_POWER
,

59 .
	ga˘ive_low
 = 1,

63 
gpio_keys_buâ⁄
 
	gís202_gpio_keys
[] 
	g__öôd©a
 = {

65 .
desc
 = "reset",

66 .
	gty≥
 = 
EV_KEY
,

67 .
	gcode
 = 
KEY_RESTART
,

68 .
	gdeboun˚_öãrvÆ
 = 
ENS202_KEYS_DEBOUNCE_INTERVAL
,

69 .
	ggpio
 = 
ENS202_GPIO_BTN_RESET
,

70 .
	ga˘ive_low
 = 1,

74 
__öô
 
	$ís202_£tup
()

76 c⁄° *
nvøm
 = (*Ë
	`KSEG1ADDR
(0x1f040000);

77 
u8
 
mac_buff
[6];

78 
u8
 *
mac
 = 
NULL
;

79 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

81 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 0x10000,

82 "ëhaddr=", 
mac_buff
) == 0) {

83 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac_buff
, 0);

84 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac_buff
, 1);

85 
mac
 = 
mac_buff
;

88 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

90 
	`©h79_gpio_ouçut_£À˘
(
ENS202_GPIO_LED_POWER
, 
AR934X_GPIO_OUT_GPIO
);

91 
	`©h79_gpio_ouçut_£À˘
(
ENS202_GPIO_LED_WLAN1
, 
AR934X_GPIO_OUT_GPIO
);

92 
	`©h79_gpio_ouçut_£À˘
(
ENS202_GPIO_LED_WLAN2
, 
AR934X_GPIO_OUT_GPIO
);

93 
	`©h79_gpio_ouçut_£À˘
(
ENS202_GPIO_LED_WLAN3
, 
AR934X_GPIO_OUT_GPIO
);

94 
	`©h79_gpio_ouçut_£À˘
(
ENS202_GPIO_LED_WLAN4
, 
AR934X_GPIO_OUT_GPIO
);

96 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ís202_Àds_gpio
),

97 
ís202_Àds_gpio
);

98 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ENS202_KEYS_POLL_INTERVAL
,

99 
	`ARRAY_SIZE
(
ís202_gpio_keys
),

100 
ís202_gpio_keys
);

102 
	`©h79_ªgi°î_m25p80
(
NULL
);

104 
	`©h79_ªgi°î_wmac
(
¨t
 + 0x1000, 
NULL
);

106 
	`©h79_ªgi°î_mdio
(1, 0);

108 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

109 
AR934X_ETH_CFG_SW_ONLY_MODE
);

110 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

111 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

112 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

113 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

115 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

116 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

117 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

119 
	`©h79_ªgi°î_ëh
(0);

120 
	`©h79_ªgi°î_ëh
(1);

121 
	}
}

123 
MIPS_MACHINE
(
ATH79_MACH_ENS202EXT
, "ENS202EXT", "EnGenius ENS202EXT",

124 
ís202_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-epg5000.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/¨8216_∂©f‹m.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"pci.h
"

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

27 
	~"nvøm.h
"

29 
	#EPG5000_GPIO_LED_WLAN_5G
 23

	)

30 
	#EPG5000_GPIO_LED_WLAN_2G
 13

	)

31 
	#EPG5000_GPIO_LED_POWER_AMBER
 2

	)

32 
	#EPG5000_GPIO_LED_WPS_AMBER
 22

	)

33 
	#EPG5000_GPIO_LED_WPS_BLUE
 19

	)

35 
	#EPG5000_GPIO_BTN_WPS
 16

	)

36 
	#EPG5000_GPIO_BTN_RESET
 17

	)

38 
	#EPG5000_KEYS_POLL_INTERVAL
 20

	)

39 
	#EPG5000_KEYS_DEBOUNCE_INTERVAL
 (3 * 
EPG5000_KEYS_POLL_INTERVAL
)

	)

41 
	#EPG5000_CALDATA_ADDR
 0x1fff0000

	)

42 
	#EPG5000_WMAC_CALDATA_OFFSET
 0x1000

	)

43 
	#EPG5000_PCIE_CALDATA_OFFSET
 0x5000

	)

45 
	#EPG5000_NVRAM_ADDR
 0x1f030000

	)

46 
	#EPG5000_NVRAM_SIZE
 0x10000

	)

48 
gpio_Àd
 
	gïg5000_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "epg5000:amber:power",

51 .
	ggpio
 = 
EPG5000_GPIO_LED_POWER_AMBER
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "epg5000:blue:wps",

56 .
	ggpio
 = 
EPG5000_GPIO_LED_WPS_BLUE
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "epg5000:amber:wps",

61 .
	ggpio
 = 
EPG5000_GPIO_LED_WPS_AMBER
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "epg5000:blue:wlan-2g",

66 .
	ggpio
 = 
EPG5000_GPIO_LED_WLAN_2G
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "epg5000:blue:wlan-5g",

71 .
	ggpio
 = 
EPG5000_GPIO_LED_WLAN_5G
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gïg5000_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "WPS button",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_WPS_BUTTON
,

81 .
	gdeboun˚_öãrvÆ
 = 
EPG5000_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
EPG5000_GPIO_BTN_WPS
,

83 .
	ga˘ive_low
 = 1,

86 .
	gdesc
 = "Reset button",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
EPG5000_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
EPG5000_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
¨8327_∑d_cfg
 
	gïg5000_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

103 
¨8327_∂©f‹m_d©a
 
	gïg5000_¨8327_d©a
 = {

104 .
∑d0_cfg
 = &
ïg5000_¨8327_∑d0_cfg
,

105 .
	gp‹t0_cfg
 = {

106 .
f‹˚_lök
 = 1,

107 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

108 .
	gdu∂ex
 = 1,

109 .
	gtx∑u£
 = 1,

110 .
	grx∑u£
 = 1,

114 
mdio_bﬂrd_öfo
 
	gïg5000_mdio0_öfo
[] = {

116 .
bus_id
 = "ag71xx-mdio.0",

117 .
	gmdio_addr
 = 0,

118 .
	g∂©f‹m_d©a
 = &
ïg5000_¨8327_d©a
,

122 
	$ïg5000_gë_mac
(c⁄° *
«me
, *
mac
)

124 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
EPG5000_NVRAM_ADDR
);

125 
îr
;

127 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
EPG5000_NVRAM_SIZE
,

128 
«me
, 
mac
);

129 i‡(
îr
) {

130 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

131  
Ál£
;

134  
åue
;

135 
	}
}

137 
__öô
 
	$ïg5000_£tup
()

139 
u8
 *
ˇld©a
 = (u8 *Ë
	`KSEG1ADDR
(
EPG5000_CALDATA_ADDR
);

140 
u8
 
mac1
[
ETH_ALEN
];

142 
	`©h79_ªgi°î_m25p80
(
NULL
);

144 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ïg5000_Àds_gpio
),

145 
ïg5000_Àds_gpio
);

146 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
EPG5000_KEYS_POLL_INTERVAL
,

147 
	`ARRAY_SIZE
(
ïg5000_gpio_keys
),

148 
ïg5000_gpio_keys
);

150 
	`©h79_ªgi°î_usb
();

152 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

154 
	`©h79_ªgi°î_mdio
(0, 0x0);

156 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ïg5000_mdio0_öfo
,

157 
	`ARRAY_SIZE
(
ïg5000_mdio0_öfo
));

160 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

161 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

162 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

164 i‡(
	`ïg5000_gë_mac
("ëhaddr=", 
mac1
))

165 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

167 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

168 
	`©h79_ªgi°î_ëh
(0);

170 
	`©h79_ªgi°î_wmac
(
ˇld©a
 + 
EPG5000_WMAC_CALDATA_OFFSET
, 
mac1
);

172 
	`©h79_ªgi°î_pci
();

173 
	}
}

175 
MIPS_MACHINE
(
ATH79_MACH_EPG5000
, "EPG5000",

177 
ïg5000_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-esr1750.c

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/¨8216_∂©f‹m.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"pci.h
"

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

26 
	~"nvøm.h
"

28 
	#ESR1750_GPIO_LED_WLAN_5G
 23

	)

29 
	#ESR1750_GPIO_LED_WLAN_2G
 13

	)

30 
	#ESR1750_GPIO_LED_POWER_AMBER
 2

	)

31 
	#ESR1750_GPIO_LED_WPS_AMBER
 22

	)

32 
	#ESR1750_GPIO_LED_WPS_BLUE
 19

	)

34 
	#ESR1750_GPIO_BTN_WPS
 16

	)

35 
	#ESR1750_GPIO_BTN_RESET
 17

	)

37 
	#ESR1750_KEYS_POLL_INTERVAL
 20

	)

38 
	#ESR1750_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ESR1750_KEYS_POLL_INTERVAL
)

	)

40 
	#ESR1750_CALDATA_ADDR
 0x1fff0000

	)

41 
	#ESR1750_WMAC_CALDATA_OFFSET
 0x1000

	)

42 
	#ESR1750_PCIE_CALDATA_OFFSET
 0x5000

	)

44 
	#ESR1750_NVRAM_ADDR
 0x1f030000

	)

45 
	#ESR1750_NVRAM_SIZE
 0x10000

	)

47 
gpio_Àd
 
	ge§1750_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "esr1750:amber:power",

50 .
	ggpio
 = 
ESR1750_GPIO_LED_POWER_AMBER
,

51 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "esr1750:blue:wps",

55 .
	ggpio
 = 
ESR1750_GPIO_LED_WPS_BLUE
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "esr1750:amber:wps",

60 .
	ggpio
 = 
ESR1750_GPIO_LED_WPS_AMBER
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "esr1750:blue:wlan-2g",

65 .
	ggpio
 = 
ESR1750_GPIO_LED_WLAN_2G
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "esr1750:blue:wlan-5g",

70 .
	ggpio
 = 
ESR1750_GPIO_LED_WLAN_5G
,

71 .
	ga˘ive_low
 = 1,

75 
gpio_keys_buâ⁄
 
	ge§1750_gpio_keys
[] 
	g__öôd©a
 = {

77 .
desc
 = "WPS button",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_WPS_BUTTON
,

80 .
	gdeboun˚_öãrvÆ
 = 
ESR1750_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
ESR1750_GPIO_BTN_WPS
,

82 .
	ga˘ive_low
 = 1,

85 .
	gdesc
 = "Reset button",

86 .
	gty≥
 = 
EV_KEY
,

87 .
	gcode
 = 
KEY_RESTART
,

88 .
	gdeboun˚_öãrvÆ
 = 
ESR1750_KEYS_DEBOUNCE_INTERVAL
,

89 .
	ggpio
 = 
ESR1750_GPIO_BTN_RESET
,

90 .
	ga˘ive_low
 = 1,

94 
¨8327_∑d_cfg
 
	ge§1750_¨8327_∑d0_cfg
 = {

95 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

96 .
	gtx˛k_dñay_í
 = 
åue
,

97 .
	grx˛k_dñay_í
 = 
åue
,

98 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

99 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

102 
¨8327_∂©f‹m_d©a
 
	ge§1750_¨8327_d©a
 = {

103 .
∑d0_cfg
 = &
e§1750_¨8327_∑d0_cfg
,

104 .
	gp‹t0_cfg
 = {

105 .
f‹˚_lök
 = 1,

106 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

107 .
	gdu∂ex
 = 1,

108 .
	gtx∑u£
 = 1,

109 .
	grx∑u£
 = 1,

113 
mdio_bﬂrd_öfo
 
	ge§1750_mdio0_öfo
[] = {

115 .
bus_id
 = "ag71xx-mdio.0",

116 .
	gmdio_addr
 = 0,

117 .
	g∂©f‹m_d©a
 = &
e§1750_¨8327_d©a
,

121 
	$e§1750_gë_mac
(c⁄° *
«me
, *
mac
)

123 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
ESR1750_NVRAM_ADDR
);

124 
îr
;

126 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
ESR1750_NVRAM_SIZE
,

127 
«me
, 
mac
);

128 i‡(
îr
) {

129 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

130  
Ál£
;

133  
åue
;

134 
	}
}

136 
__öô
 
	$e§1750_£tup
()

138 
u8
 *
ˇld©a
 = (u8 *Ë
	`KSEG1ADDR
(
ESR1750_CALDATA_ADDR
);

139 
u8
 
mac1
[
ETH_ALEN
];

141 
	`©h79_ªgi°î_m25p80
(
NULL
);

143 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e§1750_Àds_gpio
),

144 
e§1750_Àds_gpio
);

145 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ESR1750_KEYS_POLL_INTERVAL
,

146 
	`ARRAY_SIZE
(
e§1750_gpio_keys
),

147 
e§1750_gpio_keys
);

149 
	`©h79_ªgi°î_usb
();

151 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

153 
	`©h79_ªgi°î_mdio
(0, 0x0);

155 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
e§1750_mdio0_öfo
,

156 
	`ARRAY_SIZE
(
e§1750_mdio0_öfo
));

159 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

160 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

161 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

163 i‡(
	`e§1750_gë_mac
("ëhaddr=", 
mac1
))

164 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

166 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

167 
	`©h79_ªgi°î_ëh
(0);

169 
	`©h79_ªgi°î_wmac
(
ˇld©a
 + 
ESR1750_WMAC_CALDATA_OFFSET
, 
mac1
);

171 
	`©h79_ªgi°î_pci
();

172 
	}
}

174 
MIPS_MACHINE
(
ATH79_MACH_ESR1750
, "ESR1750",

176 
e§1750_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-esr900.c

12 
	#¥_fmt
(
fmt
Ë"e§900: " 
	)
fmt

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"pci.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

29 
	~"nvøm.h
"

31 
	#ESR900_GPIO_LED_POWER
 2

	)

32 
	#ESR900_GPIO_LED_WLAN_2G
 13

	)

33 
	#ESR900_GPIO_LED_WPS_BLUE
 19

	)

34 
	#ESR900_GPIO_LED_WPS_AMBER
 22

	)

35 
	#ESR900_GPIO_LED_WLAN_5G
 23

	)

37 
	#ESR900_GPIO_BTN_WPS
 16

	)

38 
	#ESR900_GPIO_BTN_RESET
 17

	)

40 
	#ESR900_KEYS_POLL_INTERVAL
 20

	)

41 
	#ESR900_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ESR900_KEYS_POLL_INTERVAL
)

	)

43 
	#ESR900_CALDATA_ADDR
 0x1fff0000

	)

44 
	#ESR900_WMAC_CALDATA_OFFSET
 0x1000

	)

45 
	#ESR900_PCIE_CALDATA_OFFSET
 0x5000

	)

47 
	#ESR900_CONFIG_ADDR
 0x1f030000

	)

48 
	#ESR900_CONFIG_SIZE
 0x10000

	)

50 
	#ESR900_LAN_PHYMASK
 
	`BIT
(0)

	)

51 
	#ESR900_WAN_PHYMASK
 
	`BIT
(5)

	)

52 
	#ESR900_MDIO_MASK
 (~(
ESR900_LAN_PHYMASK
 | 
ESR900_WAN_PHYMASK
))

	)

54 
gpio_Àd
 
	ge§900_Àds_gpio
[] 
	g__öôd©a
 = {

56 .
«me
 = "engenius:amber:power",

57 .
	ggpio
 = 
ESR900_GPIO_LED_POWER
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "engenius:blue:wlan-2g",

62 .
	ggpio
 = 
ESR900_GPIO_LED_WLAN_2G
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "engenius:blue:wps",

67 .
	ggpio
 = 
ESR900_GPIO_LED_WPS_BLUE
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "engenius:amber:wps",

72 .
	ggpio
 = 
ESR900_GPIO_LED_WPS_AMBER
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "engenius:blue:wlan-5g",

77 .
	ggpio
 = 
ESR900_GPIO_LED_WLAN_5G
,

78 .
	ga˘ive_low
 = 1,

82 
gpio_keys_buâ⁄
 
	ge§900_gpio_keys
[] 
	g__öôd©a
 = {

84 .
desc
 = "WPS button",

85 .
	gty≥
 = 
EV_KEY
,

86 .
	gcode
 = 
KEY_WPS_BUTTON
,

87 .
	gdeboun˚_öãrvÆ
 = 
ESR900_KEYS_DEBOUNCE_INTERVAL
,

88 .
	ggpio
 = 
ESR900_GPIO_BTN_WPS
,

89 .
	ga˘ive_low
 = 1,

92 .
	gdesc
 = "Reset button",

93 .
	gty≥
 = 
EV_KEY
,

94 .
	gcode
 = 
KEY_RESTART
,

95 .
	gdeboun˚_öãrvÆ
 = 
ESR900_KEYS_DEBOUNCE_INTERVAL
,

96 .
	ggpio
 = 
ESR900_GPIO_BTN_RESET
,

97 .
	ga˘ive_low
 = 1,

101 
¨8327_∑d_cfg
 
	ge§900_¨8327_∑d0_cfg
 = {

103 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

104 .
	gtx˛k_dñay_í
 = 
åue
,

105 .
	grx˛k_dñay_í
 = 
åue
,

106 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

107 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

110 
¨8327_∑d_cfg
 
	ge§900_¨8327_∑d6_cfg
 = {

112 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

113 .
	grx˛k_dñay_í
 = 
åue
,

114 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

117 
¨8327_∂©f‹m_d©a
 
	ge§900_¨8327_d©a
 = {

118 .
∑d0_cfg
 = &
e§900_¨8327_∑d0_cfg
,

119 .
	g∑d6_cfg
 = &
e§900_¨8327_∑d6_cfg
,

120 .
	gp‹t0_cfg
 = {

121 .
f‹˚_lök
 = 1,

122 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

123 .
	gdu∂ex
 = 1,

124 .
	gtx∑u£
 = 1,

125 .
	grx∑u£
 = 1,

127 .
	gp‹t6_cfg
 = {

128 .
f‹˚_lök
 = 1,

129 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

130 .
	gdu∂ex
 = 1,

131 .
	gtx∑u£
 = 1,

132 .
	grx∑u£
 = 1,

136 
mdio_bﬂrd_öfo
 
	ge§900_mdio0_öfo
[] = {

138 .
bus_id
 = "ag71xx-mdio.0",

139 .
	gmdio_addr
 = 0,

140 .
	g∂©f‹m_d©a
 = &
e§900_¨8327_d©a
,

144 
__öô
 
	$e§900_£tup
()

146 c⁄° *
c⁄fig
 = (*Ë
	`KSEG1ADDR
(
ESR900_CONFIG_ADDR
);

147 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
ESR900_CALDATA_ADDR
);

148 
u8
 
œn_mac
[
ETH_ALEN
];

149 
u8
 
wœn0_mac
[
ETH_ALEN
];

150 
u8
 
wœn1_mac
[
ETH_ALEN
];

152 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
c⁄fig
, 
ESR900_CONFIG_SIZE
,

153 "ëhaddr=", 
œn_mac
) == 0) {

154 
	`©h79_öô_loˇl_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
œn_mac
);

155 
	`©h79_öô_mac
(
wœn0_mac
, 
œn_mac
, 0);

156 
	`©h79_öô_mac
(
wœn1_mac
, 
œn_mac
, 1);

158 
	`¥_îr
("couldÇot findÉthaddr in u-bootÉnvironment\n");

161 
	`©h79_ªgi°î_m25p80
(
NULL
);

163 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
e§900_Àds_gpio
),

164 
e§900_Àds_gpio
);

165 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ESR900_KEYS_POLL_INTERVAL
,

166 
	`ARRAY_SIZE
(
e§900_gpio_keys
),

167 
e§900_gpio_keys
);

169 
	`©h79_ªgi°î_usb
();

171 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ESR900_WMAC_CALDATA_OFFSET
, 
wœn0_mac
);

173 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

175 
	`©h79_ªgi°î_mdio
(0, 0x0);

177 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
e§900_mdio0_öfo
,

178 
	`ARRAY_SIZE
(
e§900_mdio0_öfo
));

181 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

182 
©h79_ëh0_d©a
.
phy_mask
 = 
ESR900_LAN_PHYMASK
;

183 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

185 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

186 
	`©h79_ªgi°î_ëh
(0);

189 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

190 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

191 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

193 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

194 
	`©h79_ªgi°î_ëh
(1);

196 
	`≠91_pci_öô
(
¨t
 + 
ESR900_PCIE_CALDATA_OFFSET
, 
wœn1_mac
);

197 
	}
}

199 
MIPS_MACHINE
(
ATH79_MACH_ESR900
, "ESR900", "EnGíiu†ESR900", 
e§900_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ew-balin.c

23 
	~<löux/pci.h
>

24 
	~<löux/phy.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/©h9k_∂©f‹m.h
>

27 
	~<löux/¨8216_∂©f‹m.h
>

29 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

31 
	~"comm⁄.h
"

32 
	~"dev-≠9x-pci.h
"

33 
	~"dev-ëh.h
"

34 
	~"dev-gpio-buâ⁄s.h
"

35 
	~"dev-Àds-gpio.h
"

36 
	~"dev-m25p80.h
"

37 
	~"dev-•i.h
"

38 
	~"dev-usb.h
"

39 
	~"dev-wmac.h
"

40 
	~"machty≥s.h
"

41 
	~"pci.h
"

43 
	#BALIN_GPIO_LED_STATUS
 14

	)

45 
	#BALIN_GPIO_BTN_WPS
 18

	)

47 
	#BALIN_KEYS_POLL_INTERVAL
 20

	)

48 
	#BALIN_KEYS_DEBOUNCE_INTERVAL
 (3 * 
BALIN_KEYS_POLL_INTERVAL
)

	)

50 
	#BALIN_CALDATA_OFFSET
 0x1000

	)

51 
	#BALIN_WMAC_MAC_OFFSET
 (
BALIN_CALDATA_OFFSET
 + 0x02)

	)

53 
gpio_Àd
 
	gbÆö_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "balin:green:status",

56 .
	ggpio
 = 
BALIN_GPIO_LED_STATUS
,

57 .
	ga˘ive_low
 = 1,

61 
gpio_keys_buâ⁄
 
	gbÆö_gpio_keys
[] 
	g__öôd©a
 = {

63 .
desc
 = "WPS button",

64 .
	gty≥
 = 
EV_KEY
,

65 .
	gcode
 = 
KEY_WPS_BUTTON
,

66 .
	gdeboun˚_öãrvÆ
 = 
BALIN_KEYS_DEBOUNCE_INTERVAL
,

67 .
	ggpio
 = 
BALIN_GPIO_BTN_WPS
,

68 .
	ga˘ive_low
 = 0,

73 
__öô
 
	$bÆö_£tup
()

75 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

76 
u8
 
mac
[6];

78 
	`©h79_ªgi°î_m25p80
(
NULL
);

80 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
bÆö_Àds_gpio
),

81 
bÆö_Àds_gpio
);

83 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
BALIN_KEYS_POLL_INTERVAL
,

84 
	`ARRAY_SIZE
(
bÆö_gpio_keys
),

85 
bÆö_gpio_keys
);

87 
	`©h79_ªgi°î_usb
();

89 
	`©h79_ªgi°î_wmac
(
¨t
 + 
BALIN_CALDATA_OFFSET
, 
NULL
);

91 
	`©h79_ªgi°î_pci
();

93 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

94 
AR934X_ETH_CFG_SW_ONLY_MODE
);

96 
	`©h79_ªgi°î_mdio
(1, 0x0);

99 
	`mem˝y
(
mac
, 
¨t
 + 
BALIN_WMAC_MAC_OFFSET
, (mac));

100 
mac
[3] |= 0x40;

101 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

102 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

103 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

104 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

106 
	`©h79_ªgi°î_ëh
(1);

107 
	}
}

109 
MIPS_MACHINE
(
ATH79_MACH_EW_BALIN
, "EW-BALIN", "EmbWir-Balin",

110 
bÆö_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ew-dorin.c

12 
	~<asm/mach-©h79/©h79.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-•i.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#DORIN_KEYS_POLL_INTERVAL
 20

	)

25 
	#DORIN_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DORIN_KEYS_POLL_INTERVAL
)

	)

27 
	#DORIN_CALDATA_OFFSET
 0x1000

	)

28 
	#DORIN_WMAC_MAC_OFFSET
 0x1002

	)

30 
	#DORIN_GPIO_LED_STATUS
 21

	)

32 
	#DORIN_GPIO_BTN_JUMPSTART
 11

	)

33 
	#DORIN_GPIO_BTN_RESET
 6

	)

35 
gpio_Àd
 
	gd‹ö_Àds_gpio
[] 
	g__öôd©a
 = {

37 .
«me
 = "dorin:green:status",

38 .
	ggpio
 = 
DORIN_GPIO_LED_STATUS
,

39 .
	ga˘ive_low
 = 1,

43 
gpio_keys_buâ⁄
 
	gd‹ö_gpio_keys
[] 
	g__öôd©a
 = {

45 .
desc
 = "jumpstart button",

46 .
	gty≥
 = 
EV_KEY
,

47 .
	gcode
 = 
KEY_WPS_BUTTON
,

48 .
	gdeboun˚_öãrvÆ
 = 
DORIN_KEYS_DEBOUNCE_INTERVAL
,

49 .
	ggpio
 = 
DORIN_GPIO_BTN_JUMPSTART
,

50 .
	ga˘ive_low
 = 1,

53 .
	gdesc
 = "reset button",

54 .
	gty≥
 = 
EV_KEY
,

55 .
	gcode
 = 
KEY_RESTART
,

56 .
	gdeboun˚_öãrvÆ
 = 
DORIN_KEYS_DEBOUNCE_INTERVAL
,

57 .
	ggpio
 = 
DORIN_GPIO_BTN_RESET
,

58 .
	ga˘ive_low
 = 0,

62 
__öô
 
	$ew_d‹ö_£tup
()

64 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

65 
u8
 
mac
[6];

67 
	`©h79_ªgi°î_m25p80
(
NULL
);

69 
	`©h79_ªgi°î_usb
();

71 i‡(
	`¨93xx_wmac_ªad_mac_addªss
(
mac
)) {

72 
	`©h79_ªgi°î_wmac
(
NULL
, NULL);

74 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DORIN_CALDATA_OFFSET
,

75 
¨t
 + 
DORIN_WMAC_MAC_OFFSET
);

76 
	`mem˝y
(
mac
, 
¨t
 + 
DORIN_WMAC_MAC_OFFSET
, (mac));

79 
mac
[3] |= 0x40;

80 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

82 
	`©h79_ªgi°î_mdio
(0, 0x0);

85 
	`©h79_ªgi°î_ëh
(1);

87 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
d‹ö_Àds_gpio
),

88 
d‹ö_Àds_gpio
);

89 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DORIN_KEYS_POLL_INTERVAL
,

90 
	`ARRAY_SIZE
(
d‹ö_gpio_keys
),

91 
d‹ö_gpio_keys
);

92 
	}
}

94 
MIPS_MACHINE
(
ATH79_MACH_EW_DORIN
, "EW-DORIN", "EmbWir-Dorin",

95 
ew_d‹ö_£tup
);

98 
__öô
 
	$ew_d‹ö_rouãr_£tup
()

100 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

101 
u8
 
mac
[6];

103 
	`©h79_ªgi°î_m25p80
(
NULL
);

105 
	`©h79_ªgi°î_usb
();

107 i‡(
	`¨93xx_wmac_ªad_mac_addªss
(
mac
)) {

108 
	`©h79_ªgi°î_wmac
(
NULL
, NULL);

110 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DORIN_CALDATA_OFFSET
,

111 
¨t
 + 
DORIN_WMAC_MAC_OFFSET
);

112 
	`mem˝y
(
mac
, 
¨t
 + 
DORIN_WMAC_MAC_OFFSET
, (mac));

115 
mac
[3] |= 0x40;

116 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

118 
mac
[3] &= 0x3F;

119 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

120 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

122 
	`©h79_ªgi°î_mdio
(0, 0x0);

125 
	`©h79_ªgi°î_ëh
(1);

128 
	`©h79_ªgi°î_ëh
(0);

130 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
d‹ö_Àds_gpio
),

131 
d‹ö_Àds_gpio
);

132 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DORIN_KEYS_POLL_INTERVAL
,

133 
	`ARRAY_SIZE
(
d‹ö_gpio_keys
),

134 
d‹ö_gpio_keys
);

135 
	}
}

137 
MIPS_MACHINE
(
ATH79_MACH_EW_DORIN_ROUTER
, "EW-DORIN-ROUTER",

138 "EmbWú-D‹ö-Rouãr", 
ew_d‹ö_rouãr_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-f9k1115v2.c

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/¨8216_∂©f‹m.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"pci.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#F9K1115V2_GPIO_LED_USB2
 4

	)

29 
	#F9K1115V2_GPIO_LED_WPS_AMBER
 14

	)

30 
	#F9K1115V2_GPIO_LED_STATUS_AMBER
 15

	)

31 
	#F9K1115V2_GPIO_LED_WPS_BLUE
 19

	)

32 
	#F9K1115V2_GPIO_LED_STATUS_BLUE
 20

	)

34 
	#F9K1115V2_GPIO_BTN_WPS
 16

	)

35 
	#F9K1115V2_GPIO_BTN_RESET
 17

	)

37 
	#F9K1115V2_GPIO_USB2_POWER
 21

	)

39 
	#F9K1115V2_KEYS_POLL_INTERVAL
 20

	)

40 
	#F9K1115V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
F9K1115V2_KEYS_POLL_INTERVAL
)

	)

42 
	#F9K1115V2_WAN_MAC_OFFSET
 0

	)

43 
	#F9K1115V2_LAN_MAC_OFFSET
 6

	)

44 
	#F9K1115V2_WMAC_CALDATA_OFFSET
 0x1000

	)

45 
	#F9K1115V2_PCIE_CALDATA_OFFSET
 0x5000

	)

47 
gpio_Àd
 
	gf9k1115v2_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "belkin:amber:status",

50 .
	ggpio
 = 
F9K1115V2_GPIO_LED_STATUS_AMBER
,

51 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "belkin:blue:status",

55 .
	ggpio
 = 
F9K1115V2_GPIO_LED_STATUS_BLUE
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "belkin:blue:wps",

60 .
	ggpio
 = 
F9K1115V2_GPIO_LED_WPS_BLUE
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "belkin:amber:wps",

65 .
	ggpio
 = 
F9K1115V2_GPIO_LED_WPS_AMBER
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "belkin:green:usb2",

70 .
	ggpio
 = 
F9K1115V2_GPIO_LED_USB2
,

71 .
	ga˘ive_low
 = 1,

75 
gpio_keys_buâ⁄
 
	gf9k1115v2_gpio_keys
[] 
	g__öôd©a
 = {

77 .
desc
 = "Reset button",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_RESTART
,

80 .
	gdeboun˚_öãrvÆ
 = 
F9K1115V2_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
F9K1115V2_GPIO_BTN_RESET
,

82 .
	ga˘ive_low
 = 1,

85 .
	gdesc
 = "WPS button",

86 .
	gty≥
 = 
EV_KEY
,

87 .
	gcode
 = 
KEY_WPS_BUTTON
,

88 .
	gdeboun˚_öãrvÆ
 = 
F9K1115V2_KEYS_DEBOUNCE_INTERVAL
,

89 .
	ggpio
 = 
F9K1115V2_GPIO_BTN_WPS
,

90 .
	ga˘ive_low
 = 1,

94 
¨8327_∑d_cfg
 
	gf9k1115v2_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

103 
¨8327_∑d_cfg
 
	gf9k1115v2_¨8327_∑d6_cfg
 = {

105 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

106 .
	grx˛k_dñay_í
 = 
åue
,

107 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

110 
¨8327_∂©f‹m_d©a
 
	gf9k1115v2_¨8327_d©a
 = {

111 .
∑d0_cfg
 = &
f9k1115v2_¨8327_∑d0_cfg
,

112 .
	g∑d6_cfg
 = &
f9k1115v2_¨8327_∑d6_cfg
,

113 .
	gp‹t0_cfg
 = {

114 .
f‹˚_lök
 = 1,

115 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

116 .
	gdu∂ex
 = 1,

117 .
	gtx∑u£
 = 1,

118 .
	grx∑u£
 = 1,

120 .
	gp‹t6_cfg
 = {

121 .
f‹˚_lök
 = 1,

122 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

123 .
	gdu∂ex
 = 1,

124 .
	gtx∑u£
 = 1,

125 .
	grx∑u£
 = 1,

129 
mdio_bﬂrd_öfo
 
	gf9k1115v2_mdio0_öfo
[] = {

131 .
bus_id
 = "ag71xx-mdio.0",

132 .
	gmdio_addr
 = 0,

133 .
	g∂©f‹m_d©a
 = &
f9k1115v2_¨8327_d©a
,

137 
__öô
 
	$f9k1115v2_£tup
()

139 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

141 
	`©h79_ªgi°î_m25p80
(
NULL
);

143 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
f9k1115v2_Àds_gpio
),

144 
f9k1115v2_Àds_gpio
);

145 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
F9K1115V2_KEYS_POLL_INTERVAL
,

146 
	`ARRAY_SIZE
(
f9k1115v2_gpio_keys
),

147 
f9k1115v2_gpio_keys
);

149 
	`©h79_ªgi°î_wmac
(
¨t
 + 
F9K1115V2_WMAC_CALDATA_OFFSET
, 
NULL
);

151 
	`©h79_ªgi°î_mdio
(0, 0x0);

152 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
f9k1115v2_mdio0_öfo
,

153 
	`ARRAY_SIZE
(
f9k1115v2_mdio0_öfo
));

155 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

157 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

158 
¨t
 + 
F9K1115V2_WAN_MAC_OFFSET
, 0);

160 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

161 
¨t
 + 
F9K1115V2_LAN_MAC_OFFSET
, 0);

163 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

164 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

167 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

168 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

169 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

171 
	`©h79_ªgi°î_ëh
(0);

174 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

175 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

176 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

178 
	`©h79_ªgi°î_ëh
(1);

180 
	`©h79_ªgi°î_pci
();

182 
	`©h79_ªgi°î_usb
();

183 
	`gpio_ªque°_⁄e
(
F9K1115V2_GPIO_USB2_POWER
,

184 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

186 
	}
}

188 
MIPS_MACHINE
(
ATH79_MACH_F9K1115V2
, "F9K1115V2", "Belkin AC1750DB",

189 
f9k1115v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-fritz300e.c

11 
	~<löux/gpio.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~"dev-≠9x-pci.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"machty≥s.h
"

22 
	#FRITZ300E_KEYS_POLL_INTERVAL
 20

	)

23 
	#FRITZ300E_KEYS_DEBOUNCE_INTERVAL
 (3 * 
FRITZ300E_KEYS_POLL_INTERVAL
)

	)

25 
mtd_∑πôi⁄
 
	g‰ôz300e_Êash_∑πôi⁄s
[] = {

27 .
«me
 = "urloader",

28 .
	goff£t
 = 0,

29 .
	gsize
 = 0x0020000,

30 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

32 .
	g«me
 = "firmware",

33 .
	goff£t
 = 0x0020000,

34 .
	gsize
 = 0x0ee0000,

36 .
	g«me
 = "tffs (1)",

37 .
	goff£t
 = 0x0f00000,

38 .
	gsize
 = 0x0080000,

39 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

41 .
	g«me
 = "tffs (2)",

42 .
	goff£t
 = 0x0f80000,

43 .
	gsize
 = 0x0080000,

44 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

48 
Êash_∂©f‹m_d©a
 
	g‰ôz300e_Êash_d©a
 = {

49 .
∑πs
 = 
‰ôz300e_Êash_∑πôi⁄s
,

50 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
‰ôz300e_Êash_∑πôi⁄s
),

53 
gpio_Àd
 
	g‰ôz300e_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "fritz300e:green:power",

56 .
	ggpio
 = 13,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "fritz300e:green:lan",

60 .
	ggpio
 = 15,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "fritz300e:green:wlan",

64 .
	ggpio
 = 16,

65 .
	ga˘ive_low
 = 1,

69 
gpio_Àd
 
	g‰ôz300e_wmac_Àds_gpio
[] = {

71 .
«me
 = "fritz300e:green:rssi0",

72 .
	ggpio
 = 10,

73 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "fritz300e:green:rssi1",

76 .
	ggpio
 = 4,

77 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "fritz300e:green:rssi2",

80 .
	ggpio
 = 6,

81 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "fritz300e:green:rssi3",

84 .
	ggpio
 = 7,

85 .
	ga˘ive_low
 = 1,

87 .
	g«me
 = "fritz300e:green:rssi4",

88 .
	ggpio
 = 5,

89 .
	ga˘ive_low
 = 1,

93 
gpio_keys_buâ⁄
 
	g‰ôz300e_gpio_keys
[] 
	g__öôd©a
 = {

95 .
desc
 = "wps",

96 .
	gty≥
 = 
EV_KEY
,

97 .
	gcode
 = 
KEY_WPS_BUTTON
,

98 .
	gdeboun˚_öãrvÆ
 = 
FRITZ300E_KEYS_DEBOUNCE_INTERVAL
,

99 .
	ggpio
 = 12,

100 .
	ga˘ive_low
 = 1,

104 
__öô
 
	$‰ôz300e_£tup
()

107 
	`gpio_ªque°_⁄e
(11, 
GPIOF_OUT_INIT_HIGH
, "phyÑeset");

109 
	`©h79_ªgi°î_m25p80
(&
‰ôz300e_Êash_d©a
);

111 
	`©h79_ªgi°î_mdio
(0, ~(
	`BIT
(0)));

113 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

114 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

115 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

116 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

118 
	`©h79_ªgi°î_ëh
(0);

120 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
‰ôz300e_Àds_gpio
),

121 
‰ôz300e_Àds_gpio
);

122 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
FRITZ300E_KEYS_POLL_INTERVAL
,

123 
	`ARRAY_SIZE
(
‰ôz300e_gpio_keys
),

124 
‰ôz300e_gpio_keys
);

126 
	`≠9x_pci_£tup_wmac_Àds
(0, 
‰ôz300e_wmac_Àds_gpio
,

127 
	`ARRAY_SIZE
(
‰ôz300e_wmac_Àds_gpio
));

128 
	`≠91_pci_öô_sim∂e
();

129 
	}
}

131 
MIPS_MACHINE
(
ATH79_MACH_FRITZ300E
, "FRITZ300E",

132 "AVM FRITZ!WLAN Rïóã∏300E", 
‰ôz300e_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-fritz4020.c

11 
	~<löux/öô.h
>

12 
	~<löux/©h9k_∂©f‹m.h
>

13 
	~<löux/ëhîdevi˚.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

20 
	~<löux/•i/•i_gpio.h
>

21 
	~<löux/•i/74x164.h
>

23 
	~<asm/mach-©h79/©h79.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~"comm⁄.h
"

27 
	~"dev-ëh.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-m25p80.h
"

31 
	~"dev-•i.h
"

32 
	~"dev-usb.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

37 
	#FRITZ4020_GPIO_SHIFT_SER
 19

	)

38 
	#FRITZ4020_GPIO_SHIFT_SRCLK
 20

	)

40 
	#FRITZ4020_SSR_BIT_0
 0

	)

41 
	#FRITZ4020_SSR_BIT_1
 1

	)

42 
	#FRITZ4020_SSR_BIT_2
 2

	)

43 
	#FRITZ4020_SSR_BIT_3
 3

	)

44 
	#FRITZ4020_SSR_BIT_4
 4

	)

45 
	#FRITZ4020_SSR_BIT_5
 5

	)

46 
	#FRITZ4020_SSR_BIT_6
 6

	)

47 
	#FRITZ4020_SSR_BIT_7
 7

	)

49 
	#FRITZ4020_74HC_GPIO_BASE
 32

	)

50 
	#FRITZ4020_74HC_GPIO_LED_LAN
 (
FRITZ4020_74HC_GPIO_BASE
 + 0)

	)

51 
	#FRITZ4020_74HC_GPIO_LED_INFO_RED
 (
FRITZ4020_74HC_GPIO_BASE
 + 1)

	)

52 
	#FRITZ4020_74HC_GPIO_LED_POWER
 (
FRITZ4020_74HC_GPIO_BASE
 + 2)

	)

53 
	#FRITZ4020_74HC_GPIO_LED_WLAN
 (
FRITZ4020_74HC_GPIO_BASE
 + 3)

	)

54 
	#FRITZ4020_74HC_GPIO_LED_WAN
 (
FRITZ4020_74HC_GPIO_BASE
 + 4)

	)

55 
	#FRITZ4020_74HC_GPIO_USB_RST
 (
FRITZ4020_74HC_GPIO_BASE
 + 5)

	)

56 
	#FRITZ4020_74HC_GPIO_LED_INFO
 (
FRITZ4020_74HC_GPIO_BASE
 + 6)

	)

59 
	#FRITZ4020_GPIO_BTN_WPS
 2

	)

60 
	#FRITZ4020_GPIO_BTN_WLAN
 21

	)

61 
	#FRITZ4020_KEYS_POLL_INTERVAL
 20

	)

62 
	#FRITZ4020_KEYS_DEBOUNCE_INTERVAL
 (3 * 
FRITZ4020_KEYS_POLL_INTERVAL
)

	)

64 
	#FRTIZ4020_OFFSET_URLADER_WIFI_MAC_REVERSE
 0x1979

	)

67 
•i_gpio_∂©f‹m_d©a
 
	g‰ôz4020_•i_d©a
 = {

68 .
sck
 = 
FRITZ4020_GPIO_SHIFT_SRCLK
,

69 .
	gmiso
 = 
SPI_GPIO_NO_MISO
,

70 .
	gmosi
 = 
FRITZ4020_GPIO_SHIFT_SER
,

71 .
	gnum_chù£À˘
 = 1,

74 
u8
 
	g‰ôz4020_s§_öôd©a
[] = {

75 
BIT
(
FRITZ4020_SSR_BIT_7
) |

76 
BIT
(
FRITZ4020_SSR_BIT_6
) |

77 
BIT
(
FRITZ4020_SSR_BIT_5
) |

78 
BIT
(
FRITZ4020_SSR_BIT_4
) |

79 
BIT
(
FRITZ4020_SSR_BIT_3
) |

80 
BIT
(
FRITZ4020_SSR_BIT_2
) |

81 
BIT
(
FRITZ4020_SSR_BIT_1
)

84 
gí_74x164_chù_∂©f‹m_d©a
 
	g‰ôz4020_s§_d©a
 = {

85 .
ba£
 = 
FRITZ4020_74HC_GPIO_BASE
,

86 .
	gnum_ªgi°îs
 = 
ARRAY_SIZE
(
‰ôz4020_s§_öôd©a
),

87 .
	göô_d©a
 = 
‰ôz4020_s§_öôd©a
,

90 
∂©f‹m_devi˚
 
	g‰ôz4020_•i_devi˚
 = {

91 .
«me
 = "spi_gpio",

92 .
	gid
 = 1,

93 .
	gdev
 = {

94 .
∂©f‹m_d©a
 = &
‰ôz4020_•i_d©a
,

98 
•i_bﬂrd_öfo
 
	g‰ôz4020_•i_öfo
[] = {

100 .
bus_num
 = 1,

101 .
	gchù_£À˘
 = 0,

102 .
	gmax_•ìd_hz
 = 10000000,

103 .
	gmodÆüs
 = "74x164",

104 .
	g∂©f‹m_d©a
 = &
‰ôz4020_s§_d©a
,

105 .
	gc⁄åﬁÀr_d©a
 = (*) 0x0,

109 
mtd_∑πôi⁄
 
	g‰ôz4020_Êash_∑πôi⁄s
[] = {

111 .
«me
 = "urlader",

112 .
	goff£t
 = 0,

113 .
	gsize
 = 0x0020000,

114 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

116 .
	g«me
 = "firmware",

117 .
	goff£t
 = 0x0020000,

118 .
	gsize
 = 0x0EE0000,

120 .
	g«me
 = "tffs (1)",

121 .
	goff£t
 = 0x0f00000,

122 .
	gsize
 = 0x0080000,

123 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

125 .
	g«me
 = "tffs (2)",

126 .
	goff£t
 = 0x0f80000,

127 .
	gsize
 = 0x0080000,

128 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

132 
Êash_∂©f‹m_d©a
 
	g‰ôz4020_Êash_d©a
 = {

133 .
∑πs
 = 
‰ôz4020_Êash_∑πôi⁄s
,

134 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
‰ôz4020_Êash_∑πôi⁄s
),

137 
gpio_Àd
 
	g‰ôz4020_Àds_gpio
[] 
	g__öôd©a
 = {

139 .
«me
 = "fritz4020:green:lan",

140 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_LAN
,

141 .
	ga˘ive_low
 = 1,

143 .
	g«me
 = "fritz4020:green:info",

144 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_INFO
,

145 .
	ga˘ive_low
 = 1,

147 .
	g«me
 = "fritz4020:red:info",

148 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_INFO_RED
,

149 .
	ga˘ive_low
 = 1,

151 .
	g«me
 = "fritz4020:green:power",

152 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_POWER
,

153 .
	ga˘ive_low
 = 1,

155 .
	g«me
 = "fritz4020:green:wlan",

156 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_WLAN
,

157 .
	ga˘ive_low
 = 1,

159 .
	g«me
 = "fritz4020:green:wan",

160 .
	ggpio
 = 
FRITZ4020_74HC_GPIO_LED_WAN
,

161 .
	ga˘ive_low
 = 1,

165 
gpio_keys_buâ⁄
 
	g‰ôz4020_gpio_keys
[] 
	g__öôd©a
 = {

167 .
desc
 = "RFKILL button",

168 .
	gty≥
 = 
EV_KEY
,

169 .
	gcode
 = 
KEY_RFKILL
,

170 .
	gdeboun˚_öãrvÆ
 = 
FRITZ4020_KEYS_DEBOUNCE_INTERVAL
,

171 .
	ggpio
 = 
FRITZ4020_GPIO_BTN_WLAN
,

172 .
	ga˘ive_low
 = 1,

175 .
	gdesc
 = "WPS button",

176 .
	gty≥
 = 
EV_KEY
,

177 .
	gcode
 = 
KEY_WPS_BUTTON
,

178 .
	gdeboun˚_öãrvÆ
 = 
FRITZ4020_KEYS_DEBOUNCE_INTERVAL
,

179 .
	ggpio
 = 
FRITZ4020_GPIO_BTN_WPS
,

180 .
	ga˘ive_low
 = 1,

184 
__öô
 
	$‰ôz4020_£tup
() {

185 
u8
 *
uæadî
 = (u8 *Ë
	`KSEG1ADDR
(0x1f000000);

186 
u8
 
wifi_mac
[
ETH_ALEN
];

188 
	`©h79_ªgi°î_m25p80
(&
‰ôz4020_Êash_d©a
);

191 
	`©h79_exåa˘_mac_ªvî£
(
uæadî
 + 
FRTIZ4020_OFFSET_URLADER_WIFI_MAC_REVERSE
, 
wifi_mac
);

192 
	`©h79_£tup_qˇ956x_ëh_cfg
(
QCA956X_ETH_CFG_SW_PHY_SWAP
 |

193 
QCA956X_ETH_CFG_SW_PHY_ADDR_SWAP
);

195 
	`©h79_ªgi°î_mdio
(0, 0x0);

196 
	`©h79_ªgi°î_mdio
(1, 0x0);

197 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
wifi_mac
, -1);

198 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
wifi_mac
, -2);

201 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

202 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

203 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

204 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

205 
	`©h79_ªgi°î_ëh
(0);

208 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

209 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

210 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

211 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(0);

212 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

213 
	`©h79_ªgi°î_ëh
(1);

216 
	`©h79_ªgi°î_wmac_sim∂e
();

219 
	`gpio_ªque°_⁄e
(
FRITZ4020_74HC_GPIO_USB_RST
,

220 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

224 
	`©h79_ªgi°î_usb
();

227 
	`•i_ªgi°î_bﬂrd_öfo
(
‰ôz4020_•i_öfo
,

228 
	`ARRAY_SIZE
(
‰ôz4020_•i_öfo
));

229 
	`∂©f‹m_devi˚_ªgi°î
(&
‰ôz4020_•i_devi˚
);

232 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
FRITZ4020_KEYS_POLL_INTERVAL
,

233 
	`ARRAY_SIZE
(
‰ôz4020_gpio_keys
),

234 
‰ôz4020_gpio_keys
);

237 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
‰ôz4020_Àds_gpio
),

238 
‰ôz4020_Àds_gpio
);

239 
	}
}

241 
MIPS_MACHINE
(
ATH79_MACH_FRITZ4020
, "FRITZ4020",

242 "AVM FRITZ!Box 4020", 
‰ôz4020_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-fritz450e.c

11 
	~<löux/öô.h
>

12 
	~<löux/©h9k_∂©f‹m.h
>

13 
	~<löux/ëhîdevi˚.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

20 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

21 
	~<löux/•i/•i_gpio.h
>

22 
	~<löux/•i/74x164.h
>

24 
	~<asm/mach-©h79/©h79.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-ëh.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-Àds-gpio.h
"

31 
	~"dev-m25p80.h
"

32 
	~"dev-•i.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

36 
	#FRITZ450E_GPIO_LED_POWER
 14

	)

37 
	#FRITZ450E_GPIO_LED_LAN
 13

	)

38 
	#FRITZ450E_GPIO_LED_WLAN
 15

	)

39 
	#FRITZ450E_GPIO_LED_RSSI2
 16

	)

40 
	#FRITZ450E_GPIO_LED_RSSI3
 17

	)

41 
	#FRITZ450E_GPIO_LED_RSSI4
 18

	)

43 
	#FRITZ450E_GPIO_BTN_WPS
 4

	)

44 
	#FRITZ450E_KEYS_POLL_INTERVAL
 20

	)

45 
	#FRITZ450E_KEYS_DEBOUNCE_INTERVAL
 (3 * 
FRITZ450E_KEYS_POLL_INTERVAL
)

	)

47 
	#FRITZ450E_PHY_ADDRESS
 0

	)

48 
	#FRITZ450E_GPIO_PHY_RESET
 11

	)

49 
	#FRITZ450E_GPIO_MDIO_CLK
 12

	)

50 
	#FRITZ450E_GPIO_MDIO_DATA
 19

	)

52 
	#FRITZ450E_OFFSET_URLADER_WIFI_MAC_REVERSE
 0x1979

	)

55 
mtd_∑πôi⁄
 
	g‰ôz450E_Êash_∑πôi⁄s
[] = {

57 .
«me
 = "urlader",

58 .
	goff£t
 = 0,

59 .
	gsize
 = 0x0020000,

60 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

62 .
	g«me
 = "firmware",

63 .
	goff£t
 = 0x0020000,

64 .
	gsize
 = 0x0EE0000,

66 .
	g«me
 = "tffs (1)",

67 .
	goff£t
 = 0x0f00000,

68 .
	gsize
 = 0x0080000,

69 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

71 .
	g«me
 = "tffs (2)",

72 .
	goff£t
 = 0x0f80000,

73 .
	gsize
 = 0x0080000,

74 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

78 
Êash_∂©f‹m_d©a
 
	g‰ôz450E_Êash_d©a
 = {

79 .
∑πs
 = 
‰ôz450E_Êash_∑πôi⁄s
,

80 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
‰ôz450E_Êash_∑πôi⁄s
),

83 
gpio_Àd
 
	g‰ôz450E_Àds_gpio
[] 
	g__öôd©a
 = {

85 .
«me
 = "fritz450e:green:lan",

86 .
	ggpio
 = 
FRITZ450E_GPIO_LED_LAN
,

87 .
	ga˘ive_low
 = 1,

89 .
	g«me
 = "fritz450e:green:rssi2",

90 .
	ggpio
 = 
FRITZ450E_GPIO_LED_RSSI2
,

91 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "fritz450e:green:rssi3",

94 .
	ggpio
 = 
FRITZ450E_GPIO_LED_RSSI3
,

95 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "fritz450e:green:rssi4",

98 .
	ggpio
 = 
FRITZ450E_GPIO_LED_RSSI4
,

99 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "fritz450e:green:wlan",

102 .
	ggpio
 = 
FRITZ450E_GPIO_LED_WLAN
,

103 .
	ga˘ive_low
 = 1,

105 .
	g«me
 = "fritz450e:green:power",

106 .
	ggpio
 = 
FRITZ450E_GPIO_LED_POWER
,

107 .
	ga˘ive_low
 = 0,

111 
gpio_keys_buâ⁄
 
	g‰ôz450E_gpio_keys
[] 
	g__öôd©a
 = {

113 .
desc
 = "WPS Button",

114 .
	gty≥
 = 
EV_KEY
,

115 .
	gcode
 = 
KEY_WPS_BUTTON
,

116 .
	gdeboun˚_öãrvÆ
 = 
FRITZ450E_KEYS_DEBOUNCE_INTERVAL
,

117 .
	ggpio
 = 
FRITZ450E_GPIO_BTN_WPS
,

118 .
	ga˘ive_low
 = 1,

122 
©803x_∂©f‹m_d©a
 
	g‰ôz450E_©803x_d©a
 = {

123 .
dißbÀ_sm¨ãì
 = 1,

124 .
	ghas_ª£t_gpio
 = 1,

125 .
	govîride_sgmii_™eg
 = 1,

126 .
	gª£t_gpio
 = 
FRITZ450E_GPIO_PHY_RESET
,

129 
mdio_bﬂrd_öfo
 
	g‰ôz450E_mdio_öfo
[] = {

131 .
bus_id
 = "ag71xx-mdio.1",

132 .
	gmdio_addr
 = 
FRITZ450E_PHY_ADDRESS
,

133 .
	g∂©f‹m_d©a
 = &
‰ôz450E_©803x_d©a
,

137 
__öô
 
	$‰ôz450E_£tup
() {

138 
u8
 *
uæadî
 = (u8 *Ë
	`KSEG1ADDR
(0x1f000000);

139 
u8
 
wifi_mac
[
ETH_ALEN
];

141 
	`©h79_ªgi°î_m25p80
(&
‰ôz450E_Êash_d©a
);

143 
	`gpio_ªque°_⁄e
(
FRITZ450E_GPIO_MDIO_CLK
, 
GPIOF_OUT_INIT_HIGH
, "MDC Pull-UP");

144 
	`gpio_ªque°_⁄e
(
FRITZ450E_GPIO_MDIO_DATA
, 
GPIOF_OUT_INIT_HIGH
, "MDIO Pull-UP");

145 
	`gpio_ªque°_⁄e
(
FRITZ450E_GPIO_PHY_RESET
, 
GPIOF_OUT_INIT_HIGH
, "PHYÑeset");

148 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
‰ôz450E_mdio_öfo
,

149 
	`ARRAY_SIZE
(
‰ôz450E_mdio_öfo
));

152 
	`©h79_exåa˘_mac_ªvî£
(
uæadî
 + 
FRITZ450E_OFFSET_URLADER_WIFI_MAC_REVERSE
, 
wifi_mac
);

153 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
wifi_mac
, -2);

155 
	`©h79_ªgi°î_mdio
(1, ~
	`BIT
(
FRITZ450E_PHY_ADDRESS
));

156 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

157 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

158 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
FRITZ450E_PHY_ADDRESS
);

159 
©h79_ëh0_d©a
.
íabÀ_sgmii_fixup
 = 1;

160 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x03000000;

161 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x00000101;

162 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

163 
	`©h79_ªgi°î_ëh
(0);

166 
	`©h79_ªgi°î_wmac_sim∂e
();

169 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
FRITZ450E_KEYS_POLL_INTERVAL
,

170 
	`ARRAY_SIZE
(
‰ôz450E_gpio_keys
),

171 
‰ôz450E_gpio_keys
);

174 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
‰ôz450E_Àds_gpio
),

175 
‰ôz450E_Àds_gpio
);

176 
	}
}

178 
MIPS_MACHINE
(
ATH79_MACH_FRITZ450E
, "FRITZ450E",

179 "AVM FRITZ!WLAN Rïóã∏450E", 
‰ôz450E_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-ar150.c

14 
	~<löux/gpio.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#GL_AR150_GPIO_LED_WLAN
 0

	)

27 
	#GL_AR150_GPIO_LED_LAN
 13

	)

28 
	#GL_AR150_GPIO_LED_WAN
 15

	)

30 
	#GL_AR150_GPIO_BIN_USB
 6

	)

31 
	#GL_AR150_GPIO_BTN_MANUAL
 7

	)

32 
	#GL_AR150_GPIO_BTN_AUTO
 8

	)

33 
	#GL_AR150_GPIO_BTN_RESET
 11

	)

35 
	#GL_AR150_KEYS_POLL_INTERVAL
 20

	)

36 
	#GL_AR150_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_AR150_KEYS_POLL_INTERVAL
)

	)

38 
	#GL_AR150_MAC0_OFFSET
 0x0000

	)

39 
	#GL_AR150_MAC1_OFFSET
 0x0000

	)

40 
	#GL_AR150_CALDATA_OFFSET
 0x1000

	)

41 
	#GL_AR150_WMAC_MAC_OFFSET
 0x0000

	)

43 
gpio_Àd
 
	ggl_¨150_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "gl-ar150:orange:wlan",

46 .
	ggpio
 = 
GL_AR150_GPIO_LED_WLAN
,

47 .
	ga˘ive_low
 = 0,

50 .
	g«me
 = "gl-ar150:green:lan",

51 .
	ggpio
 = 
GL_AR150_GPIO_LED_LAN
,

52 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "gl-ar150:green:wan",

56 .
	ggpio
 = 
GL_AR150_GPIO_LED_WAN
,

57 .
	ga˘ive_low
 = 0,

58 .
	gdeÁu…_°©e
 = 1,

62 
gpio_keys_buâ⁄
 
	ggl_¨150_gpio_keys
[] 
	g__öôd©a
 = {

64 .
desc
 = "BTN_7",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
BTN_7
,

67 .
	gdeboun˚_öãrvÆ
 = 
GL_AR150_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 
GL_AR150_GPIO_BTN_MANUAL
,

69 .
	ga˘ive_low
 = 0,

72 .
	gdesc
 = "BTN_8",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
BTN_8
,

75 .
	gdeboun˚_öãrvÆ
 = 
GL_AR150_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
GL_AR150_GPIO_BTN_AUTO
,

77 .
	ga˘ive_low
 = 0,

80 .
	gdesc
 = "reset",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
KEY_RESTART
,

83 .
	gdeboun˚_öãrvÆ
 = 
GL_AR150_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
GL_AR150_GPIO_BTN_RESET
,

85 .
	ga˘ive_low
 = 0,

89 
__öô
 
	$gl_¨150_£tup
()

93 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

96 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

99 
	`©h79_ªgi°î_m25p80
(
NULL
);

102 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_¨150_Àds_gpio
),

103 
gl_¨150_Àds_gpio
);

104 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_AR150_KEYS_POLL_INTERVAL
,

105 
	`ARRAY_SIZE
(
gl_¨150_gpio_keys
),

106 
gl_¨150_gpio_keys
);

109 
	`gpio_ªque°_⁄e
(
GL_AR150_GPIO_BIN_USB
,

110 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

112 
	`©h79_ªgi°î_usb
();

115 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
GL_AR150_MAC0_OFFSET
, 0);

116 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
GL_AR150_MAC1_OFFSET
, 0);

117 
	`©h79_ªgi°î_mdio
(0, 0x0);

118 
	`©h79_ªgi°î_ëh
(0);

119 
	`©h79_ªgi°î_ëh
(1);

122 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_AR150_CALDATA_OFFSET
,áπ + 
GL_AR150_WMAC_MAC_OFFSET
);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_GL_AR150
, "GL-AR150", "GL.iNë GL-AR150", 
gl_¨150_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-ar300.c

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~<asm/mach-©h79/©h79.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

27 
	~"machty≥s.h
"

29 
	#GL_AR300_GPIO_LED_WLAN
 13

	)

30 
	#GL_AR300_GPIO_LED_WAN
 14

	)

31 
	#GL_AR300_GPIO_BTN_RESET
 16

	)

34 
	#GL_AR300_KEYS_POLL_INTERVAL
 20

	)

35 
	#GL_AR300_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_AR300_KEYS_POLL_INTERVAL
)

	)

37 
	#GL_AR300_MAC0_OFFSET
 0x0000

	)

38 
	#GL_AR300_MAC1_OFFSET
 0x0000

	)

39 
	#GL_AR300_CALDATA_OFFSET
 0x1000

	)

40 
	#GL_AR300_WMAC_MAC_OFFSET
 0x0000

	)

42 
gpio_Àd
 
	ggl_¨300_Àds_gpio
[] 
	g__öôd©a
 = {

44 .
«me
 = "gl-ar300:wlan",

45 .
	ggpio
 = 
GL_AR300_GPIO_LED_WLAN
,

46 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "gl-ar300:wan",

50 .
	ggpio
 = 
GL_AR300_GPIO_LED_WAN
,

51 .
	ga˘ive_low
 = 1,

55 
gpio_keys_buâ⁄
 
	ggl_¨300_gpio_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
GL_AR300_KEYS_DEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
GL_AR300_GPIO_BTN_RESET
,

62 .
	ga˘ive_low
 = 1,

66 
__öô
 
	$gl_¨300_£tup
()

70 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

73 
	`©h79_ªgi°î_m25p80
(
NULL
);

76 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_¨300_Àds_gpio
),

77 
gl_¨300_Àds_gpio
);

78 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_AR300_KEYS_POLL_INTERVAL
,

79 
	`ARRAY_SIZE
(
gl_¨300_gpio_keys
),

80 
gl_¨300_gpio_keys
);

83 
	`©h79_ªgi°î_usb
();

84 
	`©h79_ªgi°î_mdio
(1, 0x0);

87 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
GL_AR300_MAC0_OFFSET
, 0);

88 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

89 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

90 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

91 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

92 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

93 
	`©h79_ªgi°î_ëh
(0);

95 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
GL_AR300_MAC1_OFFSET
, 0);

96 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

97 
	`©h79_ªgi°î_ëh
(1);

100 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_AR300_CALDATA_OFFSET
,áπ + 
GL_AR300_WMAC_MAC_OFFSET
);

101 
	}
}

103 
MIPS_MACHINE
(
ATH79_MACH_GL_AR300
, "GL-AR300", "GL.iNë GL-AR300", 
gl_¨300_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-ar300m.c

14 
	~<löux/gpio.h
>

15 
	~<löux/pci.h
>

17 
	~<asm/mach-©h79/©h79.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

30 
	~"pci.h
"

32 
	#GL_AR300M_GPIO_LED_USB
 2

	)

33 
	#GL_AR300M_GPIO_LED_WLAN
 14

	)

34 
	#GL_AR300M_GPIO_LED_LAN
 13

	)

35 
	#GL_AR300M_GPIO_LED_SYSTEM
 12

	)

36 
	#GL_AR300M_GPIO_BTN_RESET
 3

	)

37 
	#GL_AR300M_GPIO_BTN_LEFT
 0

	)

38 
	#GL_AR300M_GPIO_BTN_RIGHT
 1

	)

40 
	#GL_AR300M_KEYS_POLL_INTERVAL
 20

	)

41 
	#GL_AR300M_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_AR300M_KEYS_POLL_INTERVAL
)

	)

43 
	#GL_AR300M_MAC0_OFFSET
 0

	)

44 
	#GL_AR300M_MAC1_OFFSET
 6

	)

45 
	#GL_AR300M_WMAC_CALDATA_OFFSET
 0x1000

	)

46 
	#GL_AR300M_PCIE_CALDATA_OFFSET
 0x5000

	)

48 
gpio_Àd
 
	ggl_¨300m_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "gl-ar300m:green:usb",

51 .
	ggpio
 = 
GL_AR300M_GPIO_LED_USB
,

52 .
	ga˘ive_low
 = 0,

53 .
	gdeÁu…_°©e
 = 1,

56 .
	g«me
 = "gl-ar300m:green:wlan",

57 .
	ggpio
 = 
GL_AR300M_GPIO_LED_WLAN
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "gl-ar300m:green:lan",

62 .
	ggpio
 = 
GL_AR300M_GPIO_LED_LAN
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "gl-ar300m:green:system",

67 .
	ggpio
 = 
GL_AR300M_GPIO_LED_SYSTEM
,

68 .
	ga˘ive_low
 = 1,

69 .
	gdeÁu…_°©e
 = 1,

73 
gpio_keys_buâ⁄
 
	ggl_¨300m_gpio_keys
[] 
	g__öôd©a
 = {

75 .
desc
 = "reset",

76 .
	gty≥
 = 
EV_KEY
,

77 .
	gcode
 = 
KEY_RESTART
,

78 .
	gdeboun˚_öãrvÆ
 = 
GL_AR300M_KEYS_DEBOUNCE_INTERVAL
,

79 .
	ggpio
 = 
GL_AR300M_GPIO_BTN_RESET
,

80 .
	ga˘ive_low
 = 1,

83 .
	gdesc
 = "buttonÑight",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
BTN_0
,

86 .
	gdeboun˚_öãrvÆ
 = 
GL_AR300M_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
GL_AR300M_GPIO_BTN_LEFT
,

88 .
	ga˘ive_low
 = 0,

91 .
	gdesc
 = "buttonÜeft",

92 .
	gty≥
 = 
EV_KEY
,

93 .
	gcode
 = 
BTN_1
,

94 .
	gdeboun˚_öãrvÆ
 = 
GL_AR300M_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ggpio
 = 
GL_AR300M_GPIO_BTN_RIGHT
,

96 .
	ga˘ive_low
 = 0,

100 
•i_bﬂrd_öfo
 
	ggl_¨300m_•i_öfo
[] = {

102 .
bus_num
 = 0,

103 .
	gchù_£À˘
 = 0,

104 .
	gmax_•ìd_hz
 = 25000000,

105 .
	gmodÆüs
 = "m25p80",

106 .
	g∂©f‹m_d©a
 = 
NULL
,

109 .
	gbus_num
 = 0,

110 .
	gchù_£À˘
 = 1,

111 .
	gmax_•ìd_hz
 = 25000000,

112 .
	gmodÆüs
 = "ath79-spinand",

113 .
	g∂©f‹m_d©a
 = 
NULL
,

117 
©h79_•i_∂©f‹m_d©a
 
	ggl_¨300m_•i_d©a
 = {

118 .
bus_num
 = 0,

119 .
	gnum_chù£À˘
 = 2,

122 
__öô
 
	$gl_¨300m_£tup
()

124 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

125 
u8
 
tmpmac
[
ETH_ALEN
];

127 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

128 
	`©h79_ªgi°î_•i
(&
gl_¨300m_•i_d©a
, 
gl_¨300m_•i_öfo
, 2);

131 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_¨300m_Àds_gpio
),

132 
gl_¨300m_Àds_gpio
);

133 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_AR300M_KEYS_POLL_INTERVAL
,

134 
	`ARRAY_SIZE
(
gl_¨300m_gpio_keys
),

135 
gl_¨300m_gpio_keys
);

137 
	`©h79_ªgi°î_mdio
(0, 0x0);

140 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
GL_AR300M_MAC0_OFFSET
, 0);

141 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

142 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

143 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

144 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

145 
	`©h79_ªgi°î_ëh
(0);

148 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
GL_AR300M_MAC1_OFFSET
, 0);

149 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

150 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

151 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

152 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

153 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

154 
	`©h79_ªgi°î_ëh
(1);

156 
	`©h79_öô_mac
(
tmpmac
, 
¨t
 + 
GL_AR300M_WMAC_CALDATA_OFFSET
 + 2, 0);

157 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_AR300M_WMAC_CALDATA_OFFSET
, 
tmpmac
);

160 
	`©h79_ªgi°î_usb
();

162 
	`©h79_ªgi°î_pci
();

163 
	}
}

165 
MIPS_MACHINE
(
ATH79_MACH_GL_AR300M
, "GL-AR300M", "GL.iNë GL-AR300M", 
gl_¨300m_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-ar750.c

11 
	~<löux/gpio.h
>

12 
	~<löux/i2c.h
>

13 
	~<löux/i2c-gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

27 
	~"machty≥s.h
"

29 
	#GL_AR750_GPIO_LED_POWER
 12

	)

30 
	#GL_AR750_GPIO_LED_WLAN2G
 14

	)

31 
	#GL_AR750_GPIO_LED_WLAN5G
 13

	)

33 
	#GL_AR750_GPIO_BTN_RESET
 3

	)

34 
	#GL_AR750_GPIO_BTN_SW1
 0

	)

36 
	#GL_AR750_GPIO_I2C_SCL
 16

	)

37 
	#GL_AR750_GPIO_I2C_SDA
 17

	)

39 
	#GL_AR750_GPIO_USB_POWER
 2

	)

41 
	#GL_AR750_KEYS_POLL_INTERVAL
 20

	)

42 
	#GL_AR750_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_AR750_KEYS_POLL_INTERVAL
)

	)

44 
	#GL_AR750_MAC0_OFFSET
 0

	)

45 
	#GL_AR750_WMAC2G_CALDATA_OFFSET
 0x1000

	)

46 
	#GL_AR750_WMAC5G_CALDATA_OFFSET
 0x5000

	)

48 
gpio_Àd
 
	ggl_¨750_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "gl-ar750:white:power",

51 .
	ggpio
 = 
GL_AR750_GPIO_LED_POWER
,

52 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_KEEP
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "gl-ar750:white:wlan2g",

56 .
	ggpio
 = 
GL_AR750_GPIO_LED_WLAN2G
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "gl-ar750:white:wlan5g",

60 .
	ggpio
 = 
GL_AR750_GPIO_LED_WLAN5G
,

61 .
	ga˘ive_low
 = 1,

65 
gpio_keys_buâ⁄
 
	ggl_¨750_gpio_keys
[] 
	g__öôd©a
 = {

67 .
desc
 = "reset",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
GL_AR750_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
GL_AR750_GPIO_BTN_RESET
,

72 .
	ga˘ive_low
 = 1,

74 .
	gdesc
 = "sw1",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
BTN_0
,

77 .
	gdeboun˚_öãrvÆ
 = 
GL_AR750_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
GL_AR750_GPIO_BTN_SW1
,

79 .
	ga˘ive_low
 = 1,

83 
i2c_gpio_∂©f‹m_d©a
 
	ggl_¨750_i2c_gpio_d©a
 = {

84 .
sda_pö
 = 
GL_AR750_GPIO_I2C_SDA
,

85 .
	gs˛_pö
 = 
GL_AR750_GPIO_I2C_SCL
,

88 
∂©f‹m_devi˚
 
	ggl_¨750_i2c_gpio
 = {

89 .
«me
 = "i2c-gpio",

90 .
	gid
 = 0,

91 .
	gdev
 = {

92 .
∂©f‹m_d©a
 = &
gl_¨750_i2c_gpio_d©a
,

96 
__öô
 
	$gl_¨750_£tup
()

98 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050000);

100 
	`©h79_ªgi°î_m25p80
(
NULL
);

102 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

103 
	`©h79_ªgi°î_mdio
(0, 0x0);

105 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

106 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xfc;

109 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

110 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

111 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

112 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

113 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
GL_AR750_MAC0_OFFSET
, 0);

114 
	`©h79_ªgi°î_ëh
(0);

117 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

118 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

119 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
GL_AR750_MAC0_OFFSET
, 1);

120 
	`©h79_ªgi°î_ëh
(1);

123 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

125 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_¨750_Àds_gpio
),

126 
gl_¨750_Àds_gpio
);

128 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_AR750_KEYS_POLL_INTERVAL
,

129 
	`ARRAY_SIZE
(
gl_¨750_gpio_keys
),

130 
gl_¨750_gpio_keys
);

132 
	`gpio_ªque°_⁄e
(
GL_AR750_GPIO_USB_POWER
,

133 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

136 
	`∂©f‹m_devi˚_ªgi°î
(&
gl_¨750_i2c_gpio
);

138 
	`©h79_ªgi°î_usb
();

140 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_AR750_WMAC2G_CALDATA_OFFSET
, 
NULL
);

142 
	`≠91_pci_öô
(
¨t
 + 
GL_AR750_WMAC5G_CALDATA_OFFSET
, 
NULL
);

143 
	}
}

145 
MIPS_MACHINE
(
ATH79_MACH_GL_AR750
, "GL-AR750", "GL.iNet GL-AR750",

146 
gl_¨750_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-ar750s.c

11 
	~<löux/öô.h
>

12 
	~<löux/pci.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

15 
	~<löux/ëhîdevi˚.h
>

17 
	~<löux/i2c.h
>

18 
	~<löux/i2c-gpio.h
>

20 
	~<asm/mach-©h79/©h79.h
>

21 
	~<asm/mach-©h79/úq.h
>

22 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

24 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-≠9x-pci.h
"

29 
	~"dev-ëh.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-•i.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-wmac.h
"

35 
	~"dev-usb.h
"

36 
	~"machty≥s.h
"

39 
	#GL_AR750S_KEYS_POLL_INTERVAL
 20

	)

40 
	#GL_AR750S_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_AR750S_KEYS_POLL_INTERVAL
)

	)

43 
	#GL_AR750S_GPIO_LED_WLAN2G
 19

	)

44 
	#GL_AR750S_GPIO_LED_WLAN5G
 20

	)

45 
	#GL_AR750S_GPIO_LED_POWER
 1

	)

46 
	#GL_AR750S_GPIO_USB_POWER
 7

	)

48 
	#GL_AR750S_GPIO_BTN_RESET
 2

	)

49 
	#GL_AR750S_GPIO_BTN_RIGHT
 8

	)

51 
	#GL_AR750S_MAC0_OFFSET
 0x0000

	)

52 
	#GL_AR750S_WMAC_CALDATA_OFFSET
 0x1000

	)

53 
	#GL_AR750S_PCI_CALDATA_OFFSET
 0x5000

	)

55 
	#GL_AR750S_GPIO_I2C_SDA
 5

	)

56 
	#GL_AR750S_GPIO_I2C_SCL
 21

	)

60 
•i_bﬂrd_öfo
 
	ggl_¨750s_•i_öfo
[] = {

62 .
bus_num
 = 0,

63 .
	gchù_£À˘
 = 0,

64 .
	gmax_•ìd_hz
 = 25000000,

65 .
	gmodÆüs
 = "m25p80",

66 .
	g∂©f‹m_d©a
 = 
NULL
,

70 
©h79_•i_∂©f‹m_d©a
 
	ggl_¨750s_•i_d©a
 = {

71 .
bus_num
 = 0,

72 .
	gnum_chù£À˘
 = 2,

75 
gpio_Àd
 
	ggl_¨750s_Àds_gpio
[] 
	g__öôd©a
 = {

77 .
«me
 = "gl-ar750s:green:power",

78 .
	ggpio
 = 
GL_AR750S_GPIO_LED_POWER
,

79 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_KEEP
,

80 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "gl-ar750s:green:usbpower",

83 .
	ggpio
 = 
GL_AR750S_GPIO_USB_POWER
,

84 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "gl-ar750s:green:wlan2g",

87 .
	ggpio
 = 
GL_AR750S_GPIO_LED_WLAN2G
,

88 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "gl-ar750s:green:wlan5g",

91 .
	ggpio
 = 
GL_AR750S_GPIO_LED_WLAN5G
,

92 .
	ga˘ive_low
 = 0,

96 
gpio_keys_buâ⁄
 
	ggl_¨750s_gpio_keys
[] 
	g__öôd©a
 = {

98 .
desc
 = "reset",

99 .
	gty≥
 = 
EV_KEY
,

100 .
	gcode
 = 
KEY_RESTART
,

101 .
	gdeboun˚_öãrvÆ
 = 
GL_AR750S_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 
GL_AR750S_GPIO_BTN_RESET
,

103 .
	ga˘ive_low
 = 1,

105 .
	gdesc
 = "right",

106 .
	gty≥
 = 
EV_KEY
,

107 .
	gcode
 = 
BTN_0
,

108 .
	gdeboun˚_öãrvÆ
 = 
GL_AR750S_KEYS_DEBOUNCE_INTERVAL
,

109 .
	ggpio
 = 
GL_AR750S_GPIO_BTN_RIGHT
,

110 .
	ga˘ive_low
 = 1,

114 
i2c_gpio_∂©f‹m_d©a
 
	ggl_¨750s_i2c_gpio_d©a
 = {

115 .
sda_pö
 = 
GL_AR750S_GPIO_I2C_SDA
,

116 .
	gs˛_pö
 = 
GL_AR750S_GPIO_I2C_SCL
,

119 
∂©f‹m_devi˚
 
	ggl_¨750s_i2c_gpio_devi˚
 = {

120 .
«me
 = "i2c-gpio",

121 .
	gid
 = 0,

122 .
	gdev
 = {

123 .
∂©f‹m_d©a
 = &
gl_¨750s_i2c_gpio_d©a
,

128 
¨8327_∑d_cfg
 
	ggl_¨750s_¨8327_∑d0_cfg
 = {

129 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

130 .
	gsgmii_dñay_í
 = 
åue
,

133 
¨8327_∂©f‹m_d©a
 
	ggl_¨750s_¨8327_d©a
 = {

134 .
∑d0_cfg
 = &
gl_¨750s_¨8327_∑d0_cfg
,

135 .
	gp‹t0_cfg
 = {

136 .
f‹˚_lök
 = 1,

137 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

138 .
	gdu∂ex
 = 1,

139 .
	gtx∑u£
 = 1,

140 .
	grx∑u£
 = 1,

145 
mdio_bﬂrd_öfo
 
	ggl_¨750s_mdio0_öfo
[] = {

147 .
bus_id
 = "ag71xx-mdio.0",

148 .
	gmdio_addr
 = 0,

149 .
	g∂©f‹m_d©a
 = &
gl_¨750s_¨8327_d©a
,

153 
__öô
 
	$gl_¨750s_£tup
()

155 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1f050000);

157 
	`©h79_ªgi°î_•i
(&
gl_¨750s_•i_d©a
, 
gl_¨750s_•i_öfo
, 1);

159 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

160 
ì¥om
 + 
GL_AR750S_MAC0_OFFSET
, 0);

162 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

163 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

164 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

166 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
gl_¨750s_mdio0_öfo
,

167 
	`ARRAY_SIZE
(
gl_¨750s_mdio0_öfo
));

169 
	`©h79_ªgi°î_mdio
(0, 0x00);

170 
	`©h79_ªgi°î_ëh
(0);

173 
	`©h79_ªgi°î_usb
();

176 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
GL_AR750S_WMAC_CALDATA_OFFSET
, 
NULL
);

179 
	`≠91_pci_öô
(
ì¥om
 + 
GL_AR750S_PCI_CALDATA_OFFSET
, 
NULL
);

181 
	`∂©f‹m_devi˚_ªgi°î
(&
gl_¨750s_i2c_gpio_devi˚
);

183 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_¨750s_Àds_gpio
),

184 
gl_¨750s_Àds_gpio
);

186 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_AR750S_KEYS_POLL_INTERVAL
,

187 
	`ARRAY_SIZE
(
gl_¨750s_gpio_keys
),

188 
gl_¨750s_gpio_keys
);

189 
	}
}

192 
MIPS_MACHINE
(
ATH79_MACH_GL_AR750S
, "GL-AR750S", "GL-AR750S",

193 
gl_¨750s_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-domino.c

14 
	~<löux/gpio.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#DOMINO_GPIO_LED_WLAN
 0

	)

27 
	#DOMINO_GPIO_LED_WAN
 17

	)

28 
	#DOMINO_GPIO_LED_USB
 1

	)

29 
	#DOMINO_GPIO_LED_LAN1
 13

	)

30 
	#DOMINO_GPIO_LED_LAN2
 14

	)

31 
	#DOMINO_GPIO_LED_LAN3
 15

	)

32 
	#DOMINO_GPIO_LED_LAN4
 16

	)

33 
	#DOMINO_GPIO_LED_SYS
 27

	)

34 
	#DOMINO_GPIO_LED_WPS
 26

	)

35 
	#DOMINO_GPIO_USB_POWER
 6

	)

37 
	#DOMINO_GPIO_BTN_RESET
 11

	)

38 
	#DOMINO_GPIO_BTN_WPS
 20

	)

40 
	#DOMINO_KEYS_POLL_INTERVAL
 20

	)

41 
	#DOMINO_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DOMINO_KEYS_POLL_INTERVAL
)

	)

43 
	#DOMINO_MAC0_OFFSET
 0x0000

	)

44 
	#DOMINO_MAC1_OFFSET
 0x0000

	)

45 
	#DOMINO_CALDATA_OFFSET
 0x1000

	)

46 
	#DOMINO_WMAC_MAC_OFFSET
 0x0000

	)

48 
gpio_Àd
 
	gdomöo_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "gl-domino:blue:wlan",

51 .
	ggpio
 = 
DOMINO_GPIO_LED_WLAN
,

52 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "gl-domino:red:wan",

56 .
	ggpio
 = 
DOMINO_GPIO_LED_WAN
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "gl-domino:white:usb",

61 .
	ggpio
 = 
DOMINO_GPIO_LED_USB
,

62 .
	ga˘ive_low
 = 0,

65 .
	g«me
 = "gl-domino:green:lan1",

66 .
	ggpio
 = 
DOMINO_GPIO_LED_LAN1
,

67 .
	ga˘ive_low
 = 0,

70 .
	g«me
 = "gl-domino:yellow:wps",

71 .
	ggpio
 = 
DOMINO_GPIO_LED_WPS
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "gl-domino:orange:sys",

76 .
	ggpio
 = 
DOMINO_GPIO_LED_SYS
,

77 .
	ga˘ive_low
 = 1,

81 
gpio_keys_buâ⁄
 
	gdomöo_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "reset",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_RESTART
,

86 .
	gdeboun˚_öãrvÆ
 = 
DOMINO_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
DOMINO_GPIO_BTN_RESET
,

88 .
	ga˘ive_low
 = 0,

91 .
	gdesc
 = "wps",

92 .
	gty≥
 = 
EV_KEY
,

93 .
	gcode
 = 
KEY_WPS_BUTTON
,

94 .
	gdeboun˚_öãrvÆ
 = 
DOMINO_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ggpio
 = 
DOMINO_GPIO_BTN_WPS
,

96 .
	ga˘ive_low
 = 0,

100 
__öô
 
	$domöo_£tup
()

104 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

107 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

110 
	`©h79_ªgi°î_m25p80
(
NULL
);

113 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
domöo_Àds_gpio
),

114 
domöo_Àds_gpio
);

115 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
DOMINO_KEYS_POLL_INTERVAL
,

116 
	`ARRAY_SIZE
(
domöo_gpio_keys
),

117 
domöo_gpio_keys
);

119 
	`gpio_ªque°_⁄e
(
DOMINO_GPIO_USB_POWER
,

120 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

123 
	`©h79_ªgi°î_usb
();

126 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
DOMINO_MAC0_OFFSET
, 0);

127 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
DOMINO_MAC1_OFFSET
, 0);

128 
	`©h79_ªgi°î_mdio
(0, 0x0);

129 
	`©h79_ªgi°î_ëh
(0);

130 
	`©h79_ªgi°î_ëh
(1);

133 
	`©h79_ªgi°î_wmac
(
¨t
 + 
DOMINO_CALDATA_OFFSET
,áπ + 
DOMINO_WMAC_MAC_OFFSET
);

134 
	}
}

136 
MIPS_MACHINE
(
ATH79_MACH_GL_DOMINO
, "DOMINO", "DomöÿPi", 
domöo_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-inet.c

14 
	~<löux/gpio.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#GL_INET_GPIO_LED_WLAN
 0

	)

27 
	#GL_INET_GPIO_LED_LAN
 13

	)

28 
	#GL_INET_GPIO_BTN_RESET
 11

	)

30 
	#GL_INET_KEYS_POLL_INTERVAL
 20

	)

31 
	#GL_INET_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_INET_KEYS_POLL_INTERVAL
)

	)

33 c⁄° * 
	ggl_öë_∑π_¥obes
[] = {

35 
NULL
 ,

38 
Êash_∂©f‹m_d©a
 
	ggl_öë_Êash_d©a
 = {

39 .
∑π_¥obes
 = 
gl_öë_∑π_¥obes
,

42 
gpio_Àd
 
	ggl_öë_Àds_gpio
[] 
	g__öôd©a
 = {

44 .
«me
 = "gl-inet:red:wlan",

45 .
	ggpio
 = 
GL_INET_GPIO_LED_WLAN
,

46 .
	ga˘ive_low
 = 0,

49 .
	g«me
 = "gl-inet:green:lan",

50 .
	ggpio
 = 
GL_INET_GPIO_LED_LAN
,

51 .
	ga˘ive_low
 = 0,

52 .
	gdeÁu…_°©e
 = 1,

56 
gpio_keys_buâ⁄
 
	ggl_öë_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "reset",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
GL_INET_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
GL_INET_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 0,

67 
__öô
 
	$gl_öë_£tup
()

70 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

74 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

77 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

80 
	`©h79_ªgi°î_m25p80
(&
gl_öë_Êash_d©a
);

83 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_öë_Àds_gpio
),

84 
gl_öë_Àds_gpio
);

85 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_INET_KEYS_POLL_INTERVAL
,

86 
	`ARRAY_SIZE
(
gl_öë_gpio_keys
),

87 
gl_öë_gpio_keys
);

90 
	`©h79_ªgi°î_usb
();

93 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

94 
	`©h79_ªgi°î_mdio
(0, 0x0);

95 
	`©h79_ªgi°î_ëh
(0);

96 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

97 
	`©h79_ªgi°î_ëh
(1);

100 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

101 
	}
}

103 
MIPS_MACHINE
(
ATH79_MACH_GL_INET
, "GL-INET", "GL-CONNECT INET v1",

104 
gl_öë_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-mifi.c

14 
	~<löux/gpio.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#GL_MIFI_GPIO_LED_WAN
 27

	)

27 
	#GL_MIFI_GPIO_LED_LAN
 16

	)

28 
	#GL_MIFI_GPIO_LED_WLAN
 1

	)

29 
	#GL_MIFI_GPIO_LED_NET
 0

	)

30 
	#GL_MIFI_GPIO_LED_3GCONTROL
 7

	)

32 
	#GL_MIFI_GPIO_BTN_RESET
 11

	)

34 
	#GL_MIFI_KEYS_POLL_INTERVAL
 20

	)

35 
	#GL_MIFI_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GL_MIFI_KEYS_POLL_INTERVAL
)

	)

37 
	#GL_MIFI_MAC0_OFFSET
 0x0000

	)

38 
	#GL_MIFI_MAC1_OFFSET
 0x0000

	)

39 
	#GL_MIFI_CALDATA_OFFSET
 0x1000

	)

40 
	#GL_MIFI_WMAC_MAC_OFFSET
 0x0000

	)

42 
gpio_Àd
 
	ggl_mifi_Àds_gpio
[] 
	g__öôd©a
 = {

44 .
«me
 = "gl-mifi:green:wan",

45 .
	ggpio
 = 
GL_MIFI_GPIO_LED_WAN
,

46 .
	ga˘ive_low
 = 0,

49 .
	g«me
 = "gl-mifi:green:lan",

50 .
	ggpio
 = 
GL_MIFI_GPIO_LED_LAN
,

51 .
	ga˘ive_low
 = 0,

54 .
	g«me
 = "gl-mifi:green:wlan",

55 .
	ggpio
 = 
GL_MIFI_GPIO_LED_WLAN
,

56 .
	ga˘ive_low
 = 0,

59 .
	g«me
 = "gl-mifi:green:net",

60 .
	ggpio
 = 
GL_MIFI_GPIO_LED_NET
,

61 .
	ga˘ive_low
 = 0,

64 .
	g«me
 = "gl-mifi:green:3gcontrol",

65 .
	ggpio
 = 
GL_MIFI_GPIO_LED_3GCONTROL
,

66 .
	ga˘ive_low
 = 0,

70 
gpio_keys_buâ⁄
 
	ggl_mifi_gpio_keys
[] 
	g__öôd©a
 = {

72 .
desc
 = "reset",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_RESTART
,

75 .
	gdeboun˚_öãrvÆ
 = 
GL_MIFI_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
GL_MIFI_GPIO_BTN_RESET
,

77 .
	ga˘ive_low
 = 0,

81 
__öô
 
	$gl_mifi_£tup
()

85 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

88 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

91 
	`©h79_ªgi°î_m25p80
(
NULL
);

94 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_mifi_Àds_gpio
),

95 
gl_mifi_Àds_gpio
);

96 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_MIFI_KEYS_POLL_INTERVAL
,

97 
	`ARRAY_SIZE
(
gl_mifi_gpio_keys
),

98 
gl_mifi_gpio_keys
);

101 
	`©h79_ªgi°î_usb
();

104 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
GL_MIFI_MAC0_OFFSET
, 0);

105 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
GL_MIFI_MAC1_OFFSET
, 0);

106 
	`©h79_ªgi°î_mdio
(0, 0x0);

107 
	`©h79_ªgi°î_ëh
(0);

108 
	`©h79_ªgi°î_ëh
(1);

111 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_MIFI_CALDATA_OFFSET
,áπ + 
GL_MIFI_WMAC_MAC_OFFSET
);

112 
	}
}

114 
MIPS_MACHINE
(
ATH79_MACH_GL_MIFI
, "GL-MIFI", "GL.iNë GL-MIFI", 
gl_mifi_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gl-usb150.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#GL_USB150_GPIO_LED_POWER
 13

	)

26 
	#GL_USB150_GPIO_LED_WLAN
 0

	)

27 
	#GL_USB150_GPIO_LAN_RESET
 7

	)

28 
	#GL_USB150_GPIO_BTN_RESET
 11

	)

30 
	#GL_USB150_KEYS_POLL_INTERVAL
 20

	)

31 
	#GL_USB150_KEYS_DEBOUNCE_INTERVAL
 \

32 (3 * 
GL_USB150_KEYS_POLL_INTERVAL
)

	)

34 
	#GL_USB150_WMAC_CALDATA_OFFSET
 0x1000

	)

36 
gpio_Àd
 
	ggl_usb150_Àds_gpio
[] 
	g__öôd©a
 = {

38 .
«me
 = "gl-usb150:green:power",

39 .
	ggpio
 = 
GL_USB150_GPIO_LED_POWER
,

40 .
	ga˘ive_low
 = 0,

42 .
	g«me
 = "gl-usb150:green:wlan",

43 .
	ggpio
 = 
GL_USB150_GPIO_LED_WLAN
,

44 .
	ga˘ive_low
 = 0,

48 
gpio_keys_buâ⁄
 
	ggl_usb150_gpio_keys
[] 
	g__öôd©a
 = {

50 .
desc
 = "reset",

51 .
	gty≥
 = 
EV_KEY
,

52 .
	gcode
 = 
KEY_RESTART
,

53 .
	gdeboun˚_öãrvÆ
 = 
GL_USB150_KEYS_DEBOUNCE_INTERVAL
,

54 .
	ggpio
 = 
GL_USB150_GPIO_BTN_RESET
,

55 .
	ga˘ive_low
 = 0,

59 
__öô
 
	$gl_usb150_£tup
()

61 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

63 
	`©h79_ªgi°î_m25p80
(
NULL
);

65 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

68 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

69 
	`©h79_ªgi°î_mdio
(0, 0x0);

70 
	`©h79_ªgi°î_ëh
(0);

72 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gl_usb150_Àds_gpio
),

73 
gl_usb150_Àds_gpio
);

75 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GL_USB150_KEYS_POLL_INTERVAL
,

76 
	`ARRAY_SIZE
(
gl_usb150_gpio_keys
),

77 
gl_usb150_gpio_keys
);

79 
	`gpio_ªque°_⁄e
(
GL_USB150_GPIO_LAN_RESET
,

80 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

83 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GL_USB150_WMAC_CALDATA_OFFSET
, 
NULL
);

84 
	}
}

86 
MIPS_MACHINE
(
ATH79_MACH_GL_USB150
, "GL-USB150", "GL.iNet GL-USB150",

87 
gl_usb150_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gs-minibox-v32.c

22 
	~<löux/pci.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

27 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

29 
	~"comm⁄.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-≠9x-pci.h
"

32 
	~"dev-gpio-buâ⁄s.h
"

33 
	~"dev-Àds-gpio.h
"

34 
	~"dev-m25p80.h
"

35 
	~"dev-•i.h
"

36 
	~"dev-usb.h
"

37 
	~"dev-wmac.h
"

38 
	~"machty≥s.h
"

39 
	~"pci.h
"

41 
	#GS_MINIBOX_V3_GPIO_LED_STATUS
 14

	)

42 
	#GS_MINIBOX_V3_GPIO_BTN_RST
 17

	)

43 
	#GS_MINIBOX_V3_KEYS_POLL_INTERVAL
 20

	)

44 
	#GS_MINIBOX_V3_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GS_MINIBOX_V3_KEYS_POLL_INTERVAL
)

	)

45 
	#GS_MINIBOX_V3_MAC0_OFFSET
 0

	)

46 
	#GS_MINIBOX_V3_MAC1_OFFSET
 6

	)

47 
	#GS_MINIBOX_V3_WMAC_CALDATA_OFFSET
 0x1000

	)

49 c⁄° *
	ggs_möibox_v3_∑π_¥obes
[] = {

51 
NULL
,

54 
Êash_∂©f‹m_d©a
 
	ggs_möibox_v3_Êash_d©a
 = {

55 .
∑π_¥obes
 = 
gs_möibox_v3_∑π_¥obes
,

58 
gpio_Àd
 
	ggs_möibox_v3_Àds_gpio
[] 
	g__öôd©a
 = {

60 .
«me
 = "minibox_v3.2:green:system",

61 .
	ggpio
 = 
GS_MINIBOX_V3_GPIO_LED_STATUS
,

62 .
	ga˘ive_low
 = 1,

66 
gpio_keys_buâ⁄
 
	ggs_möibox_v3_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "reset button",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_RESTART
,

71 .
	gdeboun˚_öãrvÆ
 = 
GS_MINIBOX_V3_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
GS_MINIBOX_V3_GPIO_BTN_RST
,

73 .
	ga˘ive_low
 = 1,

77 
__öô
 
	$gs_möibox_v3_gpio_Àd_£tup
()

79 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gs_möibox_v3_Àds_gpio
),

80 
gs_möibox_v3_Àds_gpio
);

81 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GS_MINIBOX_V3_KEYS_POLL_INTERVAL
,

82 
	`ARRAY_SIZE
(
gs_möibox_v3_gpio_keys
),

83 
gs_möibox_v3_gpio_keys
);

84 
	}
}

86 
__öô
 
	$gs_möibox_v3_£tup
()

88 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

90 
	`©h79_ªgi°î_m25p80
(&
gs_möibox_v3_Êash_d©a
);

91 
	`gs_möibox_v3_gpio_Àd_£tup
();

93 
	`©h79_ªgi°î_usb
();

95 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GS_MINIBOX_V3_WMAC_CALDATA_OFFSET
, 
NULL
);

96 
	`©h79_ªgi°î_mdio
(0, 0x0);

97 
	`©h79_ªgi°î_mdio
(1, 0x0);

99 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
GS_MINIBOX_V3_MAC0_OFFSET
, 0);

100 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
GS_MINIBOX_V3_MAC1_OFFSET
, 0);

103 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

104 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

105 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

106 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

107 
	`©h79_ªgi°î_ëh
(0);

110 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

111 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

112 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

113 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

114 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

115 
	`©h79_ªgi°î_ëh
(1);

117 
	`©h79_ªgi°î_pci
();

118 
	}
}

120 
MIPS_MACHINE
(
ATH79_MACH_GS_MINIBOX_V32
, "MINIBOX-V3.2", "Minibox V3.2",

121 
gs_möibox_v3_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gs-oolite-v1.c

10 
	~<löux/gpio.h
>

12 
	~<asm/mach-©h79/©h79.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

22 
	~"dev-usb.h
"

24 
	#GS_MINIBOX_V1_GPIO_BTN_RESET
 11

	)

25 
	#GS_MINIBOX_V1_GPIO_LED_SYSTEM
 1

	)

27 
	#GS_OOLITE_V1_GPIO_BTN6
 6

	)

28 
	#GS_OOLITE_V1_GPIO_BTN7
 7

	)

29 
	#GS_OOLITE_V1_GPIO_BTN_RESET
 11

	)

30 
	#GS_OOLITE_V1_GPIO_LED_SYSTEM
 27

	)

32 
	#GS_KEYS_POLL_INTERVAL
 20

	)

33 
	#GS_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GS_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	ggs_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	ggs_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
gs_∑π_¥obes
,

44 
gpio_Àd
 
	ggs_möibox_v1_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "minibox-v1:green:system",

47 .
	ggpio
 = 
GS_MINIBOX_V1_GPIO_LED_SYSTEM
,

48 .
	ga˘ive_low
 = 1,

52 
gpio_Àd
 
	ggs_oﬁôe_v1_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "oolite-v1:red:system",

55 .
	ggpio
 = 
GS_OOLITE_V1_GPIO_LED_SYSTEM
,

56 .
	ga˘ive_low
 = 1,

60 
gpio_keys_buâ⁄
 
	ggs_möibox_v1_gpio_keys
[] 
	g__öôd©a
 = {

62 .
desc
 = "reset",

63 .
	gty≥
 = 
EV_KEY
,

64 .
	gcode
 = 
KEY_RESTART
,

65 .
	gdeboun˚_öãrvÆ
 = 
GS_KEYS_DEBOUNCE_INTERVAL
,

66 .
	ggpio
 = 
GS_MINIBOX_V1_GPIO_BTN_RESET
,

67 .
	ga˘ive_low
 = 0,

71 
gpio_keys_buâ⁄
 
	ggs_oﬁôe_v1_gpio_keys
[] 
	g__öôd©a
 = {

73 .
desc
 = "reset",

74 .
	gty≥
 = 
EV_KEY
,

75 .
	gcode
 = 
KEY_RESTART
,

76 .
	gdeboun˚_öãrvÆ
 = 
GS_KEYS_DEBOUNCE_INTERVAL
,

77 .
	ggpio
 = 
GS_OOLITE_V1_GPIO_BTN_RESET
,

78 .
	ga˘ive_low
 = 0,

80 .
	gdesc
 = "BTN_6",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
BTN_6
,

83 .
	gdeboun˚_öãrvÆ
 = 
GS_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
GS_OOLITE_V1_GPIO_BTN6
,

85 .
	ga˘ive_low
 = 0,

87 .
	gdesc
 = "BTN_7",

88 .
	gty≥
 = 
EV_KEY
,

89 .
	gcode
 = 
BTN_7
,

90 .
	gdeboun˚_öãrvÆ
 = 
GS_KEYS_DEBOUNCE_INTERVAL
,

91 .
	ggpio
 = 
GS_OOLITE_V1_GPIO_BTN7
,

92 .
	ga˘ive_low
 = 0,

96 
__öô
 
	$gs_comm⁄_£tup
()

98 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

99 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

101 
	`©h79_ªgi°î_usb
();

103 
	`©h79_ªgi°î_m25p80
(&
gs_Êash_d©a
);

105 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

106 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

108 
	`©h79_ªgi°î_mdio
(0, 0x0);

109 
	`©h79_ªgi°î_ëh
(1);

110 
	`©h79_ªgi°î_ëh
(0);

112 
	`©h79_ªgi°î_wmac
(
¨t
, 
mac
);

113 
	}
}

115 
__öô
 
	$gs_möibox_v1_£tup
()

117 
	`gs_comm⁄_£tup
();

119 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gs_möibox_v1_Àds_gpio
),

120 
gs_möibox_v1_Àds_gpio
);

122 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GS_KEYS_POLL_INTERVAL
,

123 
	`ARRAY_SIZE
(
gs_möibox_v1_gpio_keys
),

124 
gs_möibox_v1_gpio_keys
);

125 
	}
}

127 
__öô
 
	$gs_oﬁôe_v1_£tup
()

129 
	`gs_comm⁄_£tup
();

131 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gs_oﬁôe_v1_Àds_gpio
),

132 
gs_oﬁôe_v1_Àds_gpio
);

134 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GS_KEYS_POLL_INTERVAL
,

135 
	`ARRAY_SIZE
(
gs_oﬁôe_v1_gpio_keys
),

136 
gs_oﬁôe_v1_gpio_keys
);

137 
	}
}

139 
MIPS_MACHINE
(
ATH79_MACH_GS_MINIBOX_V1
, "MINIBOX-V1", "GainStrong MiniBox V1.0",

140 
gs_möibox_v1_£tup
);

142 
MIPS_MACHINE
(
ATH79_MACH_GS_OOLITE_V1
, "OOLITE-V1", "GainStrong Oolite V1.0",

143 
gs_oﬁôe_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-gs-oolite-v5-2.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

25 
	~"pci.h
"

27 
	#GS_OOLITE_V5_2_DEV_GPIO_BTN_RESET
 17

	)

28 
	#GS_OOLITE_V5_2_DEV_GPIO_LED_SYSTEM
 13

	)

30 
	#GS_KEYS_POLL_INTERVAL
 20

	)

31 
	#GS_KEYS_DEBOUNCE_INTERVAL
 (3 * 
GS_KEYS_POLL_INTERVAL
)

	)

33 
	#GS_OOLITE_V5_2_WMAC_CALDATA_OFFSET
 0x1000

	)

35 c⁄° *
	ggs_oﬁôe_v5_2_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	ggs_oﬁôe_v5_2_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
gs_oﬁôe_v5_2_∑π_¥obes
,

44 
gpio_Àd
 
	ggs_oﬁôe_v5_2_dev_gpio_Àds
[] 
	g__öôd©a
 = {

46 .
«me
 = "oolite-v5.2-dev:blue:system",

47 .
	ggpio
 = 
GS_OOLITE_V5_2_DEV_GPIO_LED_SYSTEM
,

48 .
	ga˘ive_low
 = 0,

52 
gpio_keys_buâ⁄
 
	ggs_oﬁôe_v5_2_dev_gpio_keys
[] 
	g__öôd©a
 = {

54 .
desc
 = "reset",

55 .
	gty≥
 = 
EV_KEY
,

56 .
	gcode
 = 
KEY_RESTART
,

57 .
	gdeboun˚_öãrvÆ
 = 
GS_KEYS_DEBOUNCE_INTERVAL
,

58 .
	ggpio
 = 
GS_OOLITE_V5_2_DEV_GPIO_BTN_RESET
,

59 .
	ga˘ive_low
 = 1,

63 
__öô
 
	$gs_oﬁôe_v5_2_£tup
()

65 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

67 
	`©h79_ªgi°î_m25p80
(&
gs_oﬁôe_v5_2_Êash_d©a
);

69 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

71 
	`©h79_ªgi°î_mdio
(0, 0x0);

73 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

74 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

77 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

78 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

79 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 6, 0);

80 
	`©h79_ªgi°î_ëh
(1);

83 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

84 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

85 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

86 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

87 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

88 
	`©h79_ªgi°î_ëh
(0);

90 
	`©h79_ªgi°î_pci
();

91 
	`©h79_ªgi°î_usb
();

92 
	`©h79_ªgi°î_wmac
(
¨t
 + 
GS_OOLITE_V5_2_WMAC_CALDATA_OFFSET
, 
NULL
);

93 
	}
}

95 
__öô
 
	$gs_oﬁôe_v5_2_dev_£tup
()

97 
	`gs_oﬁôe_v5_2_£tup
();

99 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
gs_oﬁôe_v5_2_dev_gpio_Àds
),

100 
gs_oﬁôe_v5_2_dev_gpio_Àds
);

102 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
GS_KEYS_POLL_INTERVAL
,

103 
	`ARRAY_SIZE
(
gs_oﬁôe_v5_2_dev_gpio_keys
),

104 
gs_oﬁôe_v5_2_dev_gpio_keys
);

105 
	}
}

107 
MIPS_MACHINE
(
ATH79_MACH_GS_OOLITE_V5_2
, "OOLITE-V5-2",

108 "GaöSå⁄g OﬁôêV5.2", 
gs_oﬁôe_v5_2_£tup
);

110 
MIPS_MACHINE
(
ATH79_MACH_GS_OOLITE_V5_2_DEV
, "OOLITE-V5-2-DEV",

111 "GaöSå⁄g OﬁôêV5.2-Dev", 
gs_oﬁôe_v5_2_dev_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-hiveap-121.c

10 
	~<löux/gpio.h
>

11 
	~<löux/i2c.h
>

12 
	~<löux/i2c-gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

15 
	~<löux/∂©f‹m/¨934x_nfc.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-nfc.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"dev-≠9x-pci.h
"

27 
	~"dev-m25p80.h
"

28 
	~"machty≥s.h
"

30 
	#HIVEAP_121_GPIO_LED_ORANGE
 14

	)

31 
	#HIVEAP_121_GPIO_LED_WHITE
 21

	)

32 
	#HIVEAP_121_GPIO_I2C_SCL
 12

	)

33 
	#HIVEAP_121_GPIO_I2C_SDA
 13

	)

34 
	#HIVEAP_121_GPIO_XLNA0
 20

	)

35 
	#HIVEAP_121_GPIO_XLNA1
 19

	)

36 
	#HIVEAP_121_GPIO_USB_POWER
 15

	)

38 
	#HIVEAP_121_GPIO_BTN_RESET
 4

	)

39 
	#HIVEAP_121_KEYS_POLL_INTERVAL
 20

	)

40 
	#HIVEAP_121_KEYS_DEBOUNCE_INTERVAL
 \

41 (3 * 
HIVEAP_121_KEYS_POLL_INTERVAL
)

	)

43 
	#HIVEAP_121_MAC_OFFSET
 0x90000

	)

45 
	#HIVEAP_121_LAN_PHYADDR
 0

	)

47 
gpio_Àd
 
	ghivóp_121_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "hiveap-121:orange:power",

50 .
	ggpio
 = 
HIVEAP_121_GPIO_LED_ORANGE
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "hiveap-121:white:power",

54 .
	ggpio
 = 
HIVEAP_121_GPIO_LED_WHITE
,

55 .
	ga˘ive_low
 = 1,

59 
gpio_keys_buâ⁄
 
	ghivóp_121_gpio_keys
[] 
	g__öôd©a
 = {

61 .
desc
 = "reset",

62 .
	gty≥
 = 
EV_KEY
,

63 .
	gcode
 = 
KEY_RESTART
,

64 .
	gdeboun˚_öãrvÆ
 = 
HIVEAP_121_KEYS_DEBOUNCE_INTERVAL
,

65 .
	ggpio
 = 
HIVEAP_121_GPIO_BTN_RESET
,

66 .
	ga˘ive_low
 = 1,

70 
i2c_gpio_∂©f‹m_d©a
 
	ghivóp_121_i2c_gpio_d©a
 = {

71 .
sda_pö
 = 
HIVEAP_121_GPIO_I2C_SDA
,

72 .
	gs˛_pö
 = 
HIVEAP_121_GPIO_I2C_SCL
,

75 
∂©f‹m_devi˚
 
	ghivóp_121_i2c_gpio_devi˚
 = {

76 .
«me
 = "i2c-gpio",

77 .
	gid
 = 0,

78 .
	gdev
 = {

79 .
∂©f‹m_d©a
 = &
hivóp_121_i2c_gpio_d©a
,

83 
i2c_bﬂrd_öfo
 
	gçm_i2c_öfo
[] 
	g__öôd©a
 = {

85 
I2C_BOARD_INFO
("tpm_i2c_atmel", 0x29),

89 
__öô
 
	$hivóp_121_£tup
()

91 
u8
 *
ba£
 = (u8 *Ë
	`KSEG1ADDR
(0x1f000000);

92 
u8
 
wœn0_mac
[
ETH_ALEN
];

93 
u8
 
wœn1_mac
[
ETH_ALEN
];

96 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

97 
	`©h79_ªgi°î_nfc
();

100 
	`©h79_ªgi°î_m25p80
(
NULL
);

103 
	`©h79_ªgi°î_mdio
(0, 0x0);

104 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

105 
AR934X_ETH_CFG_RXD_DELAY
 |

106 
AR934X_ETH_CFG_RDV_DELAY
);

109 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

110 
ba£
 + 
HIVEAP_121_MAC_OFFSET
, 0);

111 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

112 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

113 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
HIVEAP_121_LAN_PHYADDR
);

114 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x0e000000;

115 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x00000101;

116 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

117 
	`©h79_ªgi°î_ëh
(0);

120 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

121 
	`∂©f‹m_devi˚_ªgi°î
(&
hivóp_121_i2c_gpio_devi˚
);

124 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
çm_i2c_öfo
, 
	`ARRAY_SIZE
(tpm_i2c_info));

127 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
hivóp_121_Àds_gpio
),

128 
hivóp_121_Àds_gpio
);

129 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HIVEAP_121_KEYS_POLL_INTERVAL
,

130 
	`ARRAY_SIZE
(
hivóp_121_gpio_keys
),

131 
hivóp_121_gpio_keys
);

134 
	`gpio_ªque°_⁄e
(
HIVEAP_121_GPIO_USB_POWER
,

135 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

137 
	`©h79_ªgi°î_usb
();

140 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
HIVEAP_121_GPIO_XLNA0
);

141 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
HIVEAP_121_GPIO_XLNA1
);

144 
	`©h79_öô_mac
(
wœn0_mac
, 
ba£
 + 
HIVEAP_121_MAC_OFFSET
, 1);

145 
	`©h79_ªgi°î_wmac
(
NULL
, 
wœn0_mac
);

148 
	`©h79_öô_mac
(
wœn1_mac
, 
ba£
 + 
HIVEAP_121_MAC_OFFSET
, 2);

149 
	`≠91_pci_öô
(
NULL
, 
wœn1_mac
);

150 
	}
}

152 
MIPS_MACHINE
(
ATH79_MACH_HIVEAP_121
, "HiveAP-121", "Aerohive HiveAP-121",

153 
hivóp_121_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-hiwifi-hc6361.c

12 
	~<löux/gpio.h
>

13 
	~<löux/¥oc_fs.h
>

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

27 
	#HIWIFI_HC6361_GPIO_LED_WLAN_2P4
 0

	)

28 
	#HIWIFI_HC6361_GPIO_LED_SYSTEM
 1

	)

29 
	#HIWIFI_HC6361_GPIO_LED_INTERNET
 27

	)

31 
	#HIWIFI_HC6361_GPIO_USBPOWER
 20

	)

32 
	#HIWIFI_HC6361_GPIO_BTN_RST
 11

	)

34 
	#HIWIFI_HC6361_KEYS_POLL_INTERVAL
 20

	)

35 
	#HIWIFI_HC6361_KEYS_DEBOUNCE_INTERVAL
 \

36 (3 * 
HIWIFI_HC6361_KEYS_POLL_INTERVAL
)

	)

38 
gpio_Àd
 
	ghiwifi_Àds_gpio
[] 
	g__öôd©a
 = {

40 .
«me
 = "hiwifi:blue:wlan-2p4",

41 .
	ggpio
 = 
HIWIFI_HC6361_GPIO_LED_WLAN_2P4
,

42 .
	ga˘ive_low
 = 1,

44 .
	g«me
 = "hiwifi:blue:system",

45 .
	ggpio
 = 
HIWIFI_HC6361_GPIO_LED_SYSTEM
,

46 .
	ga˘ive_low
 = 1,

48 .
	g«me
 = "hiwifi:blue:internet",

49 .
	ggpio
 = 
HIWIFI_HC6361_GPIO_LED_INTERNET
,

50 .
	ga˘ive_low
 = 1,

54 
gpio_keys_buâ⁄
 
	ghiwifi_gpio_keys
[] 
	g__öôd©a
 = {

56 .
desc
 = "reset",

57 .
	gty≥
 = 
EV_KEY
,

58 .
	gcode
 = 
KEY_RESTART
,

59 .
	gdeboun˚_öãrvÆ
 = 
HIWIFI_HC6361_KEYS_DEBOUNCE_INTERVAL
,

60 .
	ggpio
 = 
HIWIFI_HC6361_GPIO_BTN_RST
,

61 .
	ga˘ive_low
 = 1,

65 
__öô
 
	$gë_mac_‰om_bdöfo
(
u8
 *
mac
, *
bdöfo
)

67 i‡(
	`ssˇnf
(
bdöfo
, "fac_mac = %2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx",

68 &
mac
[0], &mac[1], &mac[2], &mac[3],

69 &
mac
[4], &mac[5]) == 6) {

73 
	`¥ötk
(
KERN_WARNING
 "Parsing MACáddress failed.\n");

74 
	`mem˝y
(
mac
, "\x00\xba\xbe\x00\x00\x00", 6);

75 
	}
}

77 
__öô
 
	$hiwifi_hc6361_£tup
()

79 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

80 
u8
 
mac
[6];

82 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

84 
	`©h79_ªgi°î_m25p80
(
NULL
);

85 
	`©h79_gpio_fun˘i⁄_íabÀ
(

86 
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

87 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

88 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

89 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

90 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

92 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
hiwifi_Àds_gpio
),

93 
hiwifi_Àds_gpio
);

94 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HIWIFI_HC6361_KEYS_POLL_INTERVAL
,

95 
	`ARRAY_SIZE
(
hiwifi_gpio_keys
),

96 
hiwifi_gpio_keys
);

97 
	`gpio_ªque°_⁄e
(
HIWIFI_HC6361_GPIO_USBPOWER
,

98 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

100 
	`©h79_ªgi°î_usb
();

102 
	`gë_mac_‰om_bdöfo
(
mac
, (*Ë
	`KSEG1ADDR
(0x1f010180));

103 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

104 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

106 
	`©h79_ªgi°î_mdio
(0, 0x0);

108 
	`©h79_ªgi°î_ëh
(1);

109 
	`©h79_ªgi°î_ëh
(0);

111 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

112 
	}
}

114 
MIPS_MACHINE
(
ATH79_MACH_HIWIFI_HC6361
, "HiWiFi-HC6361",

115 "HiWiFòHC6361", 
hiwifi_hc6361_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-hornet-ub.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#HORNET_UB_GPIO_LED_WLAN
 0

	)

26 
	#HORNET_UB_GPIO_LED_USB
 1

	)

27 
	#HORNET_UB_GPIO_LED_LAN
 13

	)

28 
	#HORNET_UB_GPIO_LED_WAN
 17

	)

29 
	#HORNET_UB_GPIO_LED_WPS
 27

	)

30 
	#HORNET_UB_GPIO_EXT_LNA
 28

	)

32 
	#HORNET_UB_GPIO_BTN_RESET
 12

	)

33 
	#HORNET_UB_GPIO_BTN_WPS
 11

	)

35 
	#HORNET_UB_GPIO_USB_POWER
 26

	)

37 
	#HORNET_UB_KEYS_POLL_INTERVAL
 20

	)

38 
	#HORNET_UB_KEYS_DEBOUNCE_INTERVAL
 (3 * 
HORNET_UB_KEYS_POLL_INTERVAL
)

	)

40 
	#HORNET_UB_MAC0_OFFSET
 0x0000

	)

41 
	#HORNET_UB_MAC1_OFFSET
 0x0006

	)

42 
	#HORNET_UB_CALDATA_OFFSET
 0x1000

	)

44 
gpio_Àd
 
	gh‹√t_ub_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "alfa:blue:lan",

47 .
	ggpio
 = 
HORNET_UB_GPIO_LED_LAN
,

48 .
	ga˘ive_low
 = 0,

51 .
	g«me
 = "alfa:blue:usb",

52 .
	ggpio
 = 
HORNET_UB_GPIO_LED_USB
,

53 .
	ga˘ive_low
 = 0,

56 .
	g«me
 = "alfa:blue:wan",

57 .
	ggpio
 = 
HORNET_UB_GPIO_LED_WAN
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "alfa:blue:wlan",

62 .
	ggpio
 = 
HORNET_UB_GPIO_LED_WLAN
,

63 .
	ga˘ive_low
 = 0,

66 .
	g«me
 = "alfa:blue:wps",

67 .
	ggpio
 = 
HORNET_UB_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 1,

72 
gpio_keys_buâ⁄
 
	gh‹√t_ub_gpio_keys
[] 
	g__öôd©a
 = {

74 .
desc
 = "WPS button",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
KEY_WPS_BUTTON
,

77 .
	gdeboun˚_öãrvÆ
 = 
HORNET_UB_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
HORNET_UB_GPIO_BTN_WPS
,

79 .
	ga˘ive_low
 = 0,

82 .
	gdesc
 = "Reset button",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RESTART
,

85 .
	gdeboun˚_öãrvÆ
 = 
HORNET_UB_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
HORNET_UB_GPIO_BTN_RESET
,

87 .
	ga˘ive_low
 = 1,

91 
__öô
 
	$h‹√t_ub_gpio_£tup
()

93 
u32
 
t
;

95 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

96 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

97 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

98 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

99 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

101 
t
 = 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
);

102 
t
 |
AR933X_BOOTSTRAP_MDIO_GPIO_EN
;

103 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
, 
t
);

105 
	`gpio_ªque°_⁄e
(
HORNET_UB_GPIO_USB_POWER
,

106 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

108 
	`gpio_ªque°_⁄e
(
HORNET_UB_GPIO_EXT_LNA
,

109 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

112 
	}
}

114 
__öô
 
	$h‹√t_ub_£tup
()

116 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

118 
	`h‹√t_ub_gpio_£tup
();

120 
	`©h79_ªgi°î_m25p80
(
NULL
);

121 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
h‹√t_ub_Àds_gpio
),

122 
h‹√t_ub_Àds_gpio
);

123 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HORNET_UB_KEYS_POLL_INTERVAL
,

124 
	`ARRAY_SIZE
(
h‹√t_ub_gpio_keys
),

125 
h‹√t_ub_gpio_keys
);

127 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

128 
¨t
 + 
HORNET_UB_MAC0_OFFSET
, 0);

129 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

130 
¨t
 + 
HORNET_UB_MAC1_OFFSET
, 0);

132 
	`©h79_ªgi°î_mdio
(0, 0x0);

134 
	`©h79_ªgi°î_ëh
(1);

135 
	`©h79_ªgi°î_ëh
(0);

137 
	`©h79_ªgi°î_wmac
(
¨t
 + 
HORNET_UB_CALDATA_OFFSET
, 
NULL
);

138 
	`©h79_ªgi°î_usb
();

139 
	}
}

141 
MIPS_MACHINE
(
ATH79_MACH_HORNET_UB
, "HORNET-UB", "ALFA NETWORK Hornet-UB",

142 
h‹√t_ub_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ja76pf.c

5 
	~<löux/i2c.h
>

6 
	~<löux/i2c-gpio.h
>

7 
	~<löux/∂©f‹m_devi˚.h
>

9 
	~<asm/mach-©h79/©h79.h
>

11 
	~"dev-ëh.h
"

12 
	~"dev-gpio-buâ⁄s.h
"

13 
	~"dev-Àds-gpio.h
"

14 
	~"dev-m25p80.h
"

15 
	~"dev-usb.h
"

16 
	~"machty≥s.h
"

17 
	~"pci.h
"

19 
	#JA76PF_KEYS_POLL_INTERVAL
 20

	)

20 
	#JA76PF_KEYS_DEBOUNCE_INTERVAL
 (3 * 
JA76PF_KEYS_POLL_INTERVAL
)

	)

22 
	#JA76PF_GPIO_I2C_SCL
 0

	)

23 
	#JA76PF_GPIO_I2C_SDA
 1

	)

24 
	#JA76PF_GPIO_LED_1
 5

	)

25 
	#JA76PF_GPIO_LED_2
 4

	)

26 
	#JA76PF_GPIO_LED_3
 3

	)

27 
	#JA76PF_GPIO_BTN_RESET
 11

	)

29 
gpio_Àd
 
	gja76pf_Àds_gpio
[] 
	g__öôd©a
 = {

31 .
«me
 = "jjplus:green:led1",

32 .
	ggpio
 = 
JA76PF_GPIO_LED_1
,

33 .
	ga˘ive_low
 = 1,

35 .
	g«me
 = "jjplus:green:led2",

36 .
	ggpio
 = 
JA76PF_GPIO_LED_2
,

37 .
	ga˘ive_low
 = 1,

39 .
	g«me
 = "jjplus:green:led3",

40 .
	ggpio
 = 
JA76PF_GPIO_LED_3
,

41 .
	ga˘ive_low
 = 1,

45 
gpio_keys_buâ⁄
 
	gja76pf_gpio_keys
[] 
	g__öôd©a
 = {

47 .
desc
 = "reset",

48 .
	gty≥
 = 
EV_KEY
,

49 .
	gcode
 = 
KEY_RESTART
,

50 .
	gdeboun˚_öãrvÆ
 = 
JA76PF_KEYS_DEBOUNCE_INTERVAL
,

51 .
	ggpio
 = 
JA76PF_GPIO_BTN_RESET
,

52 .
	ga˘ive_low
 = 1,

56 
i2c_gpio_∂©f‹m_d©a
 
	gja76pf_i2c_gpio_d©a
 = {

57 .
sda_pö
 = 
JA76PF_GPIO_I2C_SDA
,

58 .
	gs˛_pö
 = 
JA76PF_GPIO_I2C_SCL
,

61 
∂©f‹m_devi˚
 
	gja76pf_i2c_gpio_devi˚
 = {

62 .
«me
 = "i2c-gpio",

63 .
	gid
 = 0,

64 .
	gdev
 = {

65 .
∂©f‹m_d©a
 = &
ja76pf_i2c_gpio_d©a
,

69 c⁄° *
	gja76pf_∑π_¥obes
[] = {

71 
NULL
,

74 
Êash_∂©f‹m_d©a
 
	gja76pf_Êash_d©a
 = {

75 .
∑π_¥obes
 = 
ja76pf_∑π_¥obes
,

78 
	#JA76PF_WAN_PHYMASK
 (1 << 4)

	)

79 
	#JA76PF_LAN_PHYMASK
 ((1 << 0Ë| (1 << 1Ë| (1 << 2Ë| (1 < 3))

	)

80 
	#JA76PF_MDIO_PHYMASK
 (
JA76PF_LAN_PHYMASK
 | 
JA76PF_WAN_PHYMASK
)

	)

82 
__öô
 
	$ja76pf_öô
()

84 
	`©h79_ªgi°î_m25p80
(&
ja76pf_Êash_d©a
);

86 
	`©h79_ªgi°î_mdio
(0, ~
JA76PF_MDIO_PHYMASK
);

88 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

89 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

90 
©h79_ëh0_d©a
.
phy_mask
 = 
JA76PF_LAN_PHYMASK
;

92 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

93 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

94 
©h79_ëh1_d©a
.
phy_mask
 = 
JA76PF_WAN_PHYMASK
;

95 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

96 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

98 
	`©h79_ªgi°î_ëh
(0);

99 
	`©h79_ªgi°î_ëh
(1);

101 
	`∂©f‹m_devi˚_ªgi°î
(&
ja76pf_i2c_gpio_devi˚
);

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ja76pf_Àds_gpio
),

104 
ja76pf_Àds_gpio
);

106 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
JA76PF_KEYS_POLL_INTERVAL
,

107 
	`ARRAY_SIZE
(
ja76pf_gpio_keys
),

108 
ja76pf_gpio_keys
);

110 
	`©h79_ªgi°î_usb
();

111 
	`©h79_ªgi°î_pci
();

112 
	}
}

114 
MIPS_MACHINE
(
ATH79_MACH_JA76PF
, "JA76PF", "jjPlu†JA76PF", 
ja76pf_öô
);

116 
	#JA76PF2_GPIO_LED_D2
 5

	)

117 
	#JA76PF2_GPIO_LED_D3
 4

	)

118 
	#JA76PF2_GPIO_LED_D4
 3

	)

119 
	#JA76PF2_GPIO_BTN_RESET
 7

	)

120 
	#JA76PF2_GPIO_BTN_WPS
 8

	)

122 
gpio_Àd
 
	gja76pf2_Àds_gpio
[] 
	g__öôd©a
 = {

124 .
«me
 = "jjplus:green:led1",

125 .
	ggpio
 = 
JA76PF2_GPIO_LED_D2
,

126 .
	ga˘ive_low
 = 1,

128 .
	g«me
 = "jjplus:green:led2",

129 .
	ggpio
 = 
JA76PF2_GPIO_LED_D3
,

130 .
	ga˘ive_low
 = 0,

132 .
	g«me
 = "jjplus:green:led3",

133 .
	ggpio
 = 
JA76PF2_GPIO_LED_D4
,

134 .
	ga˘ive_low
 = 0,

138 
gpio_keys_buâ⁄
 
	gja76pf2_gpio_keys
[] 
	g__öôd©a
 = {

140 .
desc
 = "reset",

141 .
	gty≥
 = 
EV_KEY
,

142 .
	gcode
 = 
KEY_RESTART
,

143 .
	gdeboun˚_öãrvÆ
 = 
JA76PF_KEYS_DEBOUNCE_INTERVAL
,

144 .
	ggpio
 = 
JA76PF2_GPIO_BTN_RESET
,

145 .
	ga˘ive_low
 = 1,

148 .
	gdesc
 = "wps",

149 .
	gty≥
 = 
EV_KEY
,

150 .
	gcode
 = 
KEY_WPS_BUTTON
,

151 .
	gdeboun˚_öãrvÆ
 = 
JA76PF_KEYS_DEBOUNCE_INTERVAL
,

152 .
	ggpio
 = 
JA76PF2_GPIO_BTN_WPS
,

153 .
	ga˘ive_low
 = 1,

157 
	#JA76PF2_LAN_PHYMASK
 
	`BIT
(0)

	)

158 
	#JA76PF2_WAN_PHYMASK
 
	`BIT
(4)

	)

159 
	#JA76PF2_MDIO_PHYMASK
 (
JA76PF2_LAN_PHYMASK
 | 
JA76PF2_WAN_PHYMASK
)

	)

161 
__öô
 
	$ja76pf2_öô
()

163 
	`©h79_ªgi°î_m25p80
(&
ja76pf_Êash_d©a
);

165 
	`©h79_ªgi°î_mdio
(0, ~
JA76PF2_MDIO_PHYMASK
);

168 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

169 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

170 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

173 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

174 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

175 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(4);

177 
	`©h79_ªgi°î_ëh
(0);

178 
	`©h79_ªgi°î_ëh
(1);

180 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ja76pf2_Àds_gpio
),

181 
ja76pf2_Àds_gpio
);

183 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
JA76PF_KEYS_POLL_INTERVAL
,

184 
	`ARRAY_SIZE
(
ja76pf2_gpio_keys
),

185 
ja76pf2_gpio_keys
);

187 
	`©h79_ªgi°î_pci
();

188 
	}
}

190 
MIPS_MACHINE
(
ATH79_MACH_JA76PF2
, "JA76PF2", "jjPlu†JA76PF2", 
ja76pf2_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-jwap003.c

6 
	~<löux/i2c.h
>

7 
	~<löux/i2c-gpio.h
>

8 
	~<löux/∂©f‹m_devi˚.h
>

10 
	~<asm/mach-©h79/©h79.h
>

12 
	~"dev-ëh.h
"

13 
	~"dev-m25p80.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-usb.h
"

16 
	~"machty≥s.h
"

17 
	~"pci.h
"

19 
	#JWAP003_KEYS_POLL_INTERVAL
 20

	)

20 
	#JWAP003_KEYS_DEBOUNCE_INTERVAL
 (3 * 
JWAP003_KEYS_POLL_INTERVAL
)

	)

22 
	#JWAP003_GPIO_WPS
 11

	)

23 
	#JWAP003_GPIO_I2C_SCL
 0

	)

24 
	#JWAP003_GPIO_I2C_SDA
 1

	)

26 
gpio_keys_buâ⁄
 
	gjw≠003_gpio_keys
[] 
	g__öôd©a
 = {

28 .
desc
 = "wps",

29 .
	gty≥
 = 
EV_KEY
,

30 .
	gcode
 = 
KEY_WPS_BUTTON
,

31 .
	gdeboun˚_öãrvÆ
 = 
JWAP003_KEYS_DEBOUNCE_INTERVAL
,

32 .
	ggpio
 = 
JWAP003_GPIO_WPS
,

33 .
	ga˘ive_low
 = 1,

37 
i2c_gpio_∂©f‹m_d©a
 
	gjw≠003_i2c_gpio_d©a
 = {

38 .
sda_pö
 = 
JWAP003_GPIO_I2C_SDA
,

39 .
	gs˛_pö
 = 
JWAP003_GPIO_I2C_SCL
,

42 
∂©f‹m_devi˚
 
	gjw≠003_i2c_gpio_devi˚
 = {

43 .
«me
 = "i2c-gpio",

44 .
	gid
 = 0,

45 .
	gdev
 = {

46 .
∂©f‹m_d©a
 = &
jw≠003_i2c_gpio_d©a
,

50 c⁄° *
	gjw≠003_∑π_¥obes
[] = {

52 
NULL
,

55 
Êash_∂©f‹m_d©a
 
	gjw≠003_Êash_d©a
 = {

56 .
∑π_¥obes
 = 
jw≠003_∑π_¥obes
,

59 
	#JWAP003_WAN_PHYMASK
 
	`BIT
(0)

	)

60 
	#JWAP003_LAN_PHYMASK
 
	`BIT
(4)

	)

62 
__öô
 
	$jw≠003_öô
()

64 
	`©h79_ªgi°î_m25p80
(&
jw≠003_Êash_d©a
);

66 
	`©h79_ªgi°î_mdio
(0, 0x0);

68 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

69 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

70 
©h79_ëh0_d©a
.
phy_mask
 = 
JWAP003_WAN_PHYMASK
;

71 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

72 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

73 
©h79_ëh0_d©a
.
has_¨8216
 = 1;

75 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

76 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

77 
©h79_ëh1_d©a
.
phy_mask
 = 
JWAP003_LAN_PHYMASK
;

78 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_100
;

79 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

81 
	`©h79_ªgi°î_ëh
(0);

82 
	`©h79_ªgi°î_ëh
(1);

84 
	`∂©f‹m_devi˚_ªgi°î
(&
jw≠003_i2c_gpio_devi˚
);

86 
	`©h79_ªgi°î_usb
();

88 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
JWAP003_KEYS_POLL_INTERVAL
,

89 
	`ARRAY_SIZE
(
jw≠003_gpio_keys
),

90 
jw≠003_gpio_keys
);

92 
	`©h79_ªgi°î_pci
();

93 
	}
}

95 
MIPS_MACHINE
(
ATH79_MACH_JWAP003
, "JWAP003", "jjPlu†JWAP003", 
jw≠003_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-jwap230.c

13 
	~<löux/pci.h
>

14 
	~<löux/phy.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/¨8216_∂©f‹m.h
>

19 
	~<asm/mach-©h79/©h79.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~"comm⁄.h
"

23 
	~"dev-≠9x-pci.h
"

24 
	~"dev-ëh.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

30 
	~"pci.h
"

32 
	#JWAP230_GPIO_LED_LED1
 23

	)

33 
	#JWAP230_GPIO_LED_LED2
 22

	)

34 
	#JWAP230_GPIO_LED_LED3
 21

	)

36 
	#JWAP230_MAC0_OFFSET
 0x0

	)

37 
	#JWAP230_MAC1_OFFSET
 0x6

	)

38 
	#JWAP230_WMAC_CALDATA_OFFSET
 0x1000

	)

40 
gpio_Àd
 
	gjw≠230_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "jwap230:green:led1",

43 .
	ggpio
 = 
JWAP230_GPIO_LED_LED1
,

44 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "jwap230:green:led2",

48 .
	ggpio
 = 
JWAP230_GPIO_LED_LED2
,

49 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "jwap230:green:led3",

53 .
	ggpio
 = 
JWAP230_GPIO_LED_LED3
,

54 .
	ga˘ive_low
 = 1,

58 c⁄° 
¨8327_Àd_öfo
 
	gjw≠230_Àds_qˇ8337
[] = {

59 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "jwap230:green:lan"),

60 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "jwap230:green:wan"),

64 
¨8327_Àd_cfg
 
	gjw≠230_qˇ8337_Àd_cfg
 = {

65 .
Àd_˘æ0
 = 0xcf37cf37,

66 .
	gÀd_˘æ1
 = 0xcf37cf37,

67 .
	gÀd_˘æ2
 = 0xcf37cf37,

68 .
	gÀd_˘æ3
 = 0x0,

69 .
	g›í_døö
 = 
åue
,

73 
¨8327_∑d_cfg
 
	gjw≠230_qˇ8337_∑d0_cfg
 = {

74 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

75 .
	gtx˛k_dñay_í
 = 
åue
,

76 .
	grx˛k_dñay_í
 = 
åue
,

77 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

78 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

79 .
	gmac06_exch™ge_dis
 = 
åue
,

83 
¨8327_∑d_cfg
 
	gjw≠230_qˇ8337_∑d6_cfg
 = {

84 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

85 .
	gsgmii_dñay_í
 = 
åue
,

86 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

89 
¨8327_∂©f‹m_d©a
 
	gjw≠230_qˇ8337_d©a
 = {

90 .
∑d0_cfg
 = &
jw≠230_qˇ8337_∑d0_cfg
,

91 .
	g∑d6_cfg
 = &
jw≠230_qˇ8337_∑d6_cfg
,

92 .
	gp‹t0_cfg
 = {

93 .
f‹˚_lök
 = 1,

94 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

95 .
	gdu∂ex
 = 1,

96 .
	gtx∑u£
 = 1,

97 .
	grx∑u£
 = 1,

99 .
	gp‹t6_cfg
 = {

100 .
f‹˚_lök
 = 1,

101 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

102 .
	gdu∂ex
 = 1,

103 .
	gtx∑u£
 = 1,

104 .
	grx∑u£
 = 1,

106 .
	gÀd_cfg
 = &
jw≠230_qˇ8337_Àd_cfg
,

107 .
	gnum_Àds
 = 
ARRAY_SIZE
(
jw≠230_Àds_qˇ8337
),

108 .
	gÀds
 = 
jw≠230_Àds_qˇ8337
,

111 
mdio_bﬂrd_öfo
 
	gjw≠230_mdio0_öfo
[] = {

113 .
bus_id
 = "ag71xx-mdio.0",

114 .
	gmdio_addr
 = 0,

115 .
	g∂©f‹m_d©a
 = &
jw≠230_qˇ8337_d©a
,

119 
__öô
 
	$jw≠230_£tup
()

121 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

123 
	`©h79_ªgi°î_m25p80
(
NULL
);

125 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
jw≠230_Àds_gpio
),

126 
jw≠230_Àds_gpio
);

128 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
jw≠230_mdio0_öfo
,

129 
	`ARRAY_SIZE
(
jw≠230_mdio0_öfo
));

130 
	`©h79_ªgi°î_mdio
(0, 0x0);

132 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

135 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

136 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

137 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

138 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

140 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
JWAP230_MAC0_OFFSET
, 0);

141 
	`©h79_ªgi°î_ëh
(0);

144 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

145 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

146 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

147 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

149 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
JWAP230_MAC1_OFFSET
, 0);

150 
	`©h79_ªgi°î_ëh
(1);

152 
	`©h79_ªgi°î_wmac
(
¨t
 + 
JWAP230_WMAC_CALDATA_OFFSET
, 
NULL
);

154 
	`©h79_ªgi°î_pci
();

155 
	`©h79_ªgi°î_usb
();

156 
	}
}

158 
MIPS_MACHINE
(
ATH79_MACH_JWAP230
, "JWAP230", "jjPlu†JWAP230", 
jw≠230_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-koala.c

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

29 
	~"comm⁄.h
"

30 
	~"dev-≠9x-pci.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-ëh.h
"

33 
	~"dev-Àds-gpio.h
"

34 
	~"dev-m25p80.h
"

35 
	~"dev-wmac.h
"

36 
	~"machty≥s.h
"

37 
	~"pci.h
"

39 
	#KOALA_GPIO_LED_POWER
 22

	)

40 
	#KOALA_GPIO_LED_WLAN_5G
 13

	)

41 
	#KOALA_GPIO_LED_WLAN_2G
 23

	)

42 
	#KOALA_GPIO_LED_WLAN_SYS
 19

	)

44 
	#KOALA_GPIO_BTN_RESET
 17

	)

46 
	#KOALA_KEYS_POLL_INTERVAL
 20

	)

47 
	#KOALA_KEYS_DEBOUNCE_INTERVAL
 (3 * 
KOALA_KEYS_POLL_INTERVAL
)

	)

49 
	#KOALA_LAN_MAC_OFFSET
 0

	)

50 
	#KOALA_WIFI2G_MAC_OFFSET
 0x06

	)

51 
	#KOALA_WMAC_CALDATA_OFFSET
 0x1000

	)

53 
gpio_Àd
 
	gkﬂœ_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "koala:green:power",

56 .
	ggpio
 = 
KOALA_GPIO_LED_POWER
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "koala:red:wlan58",

61 .
	ggpio
 = 
KOALA_GPIO_LED_WLAN_5G
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "koala:yellow:wlan2",

66 .
	ggpio
 = 
KOALA_GPIO_LED_WLAN_2G
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "koala:blue:sys",

71 .
	ggpio
 = 
KOALA_GPIO_LED_WLAN_SYS
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gkﬂœ_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "Reset button",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_RESTART
,

81 .
	gdeboun˚_öãrvÆ
 = 
KOALA_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
KOALA_GPIO_BTN_RESET
,

83 .
	ga˘ive_low
 = 1,

87 
©803x_∂©f‹m_d©a
 
	gkﬂœ_©803x_d©a
 = {

88 .
dißbÀ_sm¨ãì
 = 1,

89 .
	gíabÀ_rgmii_rx_dñay
 = 1,

90 .
	gíabÀ_rgmii_tx_dñay
 = 0,

91 .
	gfixup_rgmii_tx_dñay
 = 1,

94 
mdio_bﬂrd_öfo
 
	gkﬂœ_mdio0_öfo
[] = {

96 .
bus_id
 = "ag71xx-mdio.0",

97 .
	gmdio_addr
 = 5,

98 .
	g∂©f‹m_d©a
 = &
kﬂœ_©803x_d©a
,

102 
__öô
 
	$kﬂœ_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

103 
rxd
,

104 
rxdv
,

105 
txd
,

106 
txe
)

108 
__iomem
 *
ba£
;

109 
u32
 
t
;

111 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

113 
t
 = 
mask
;

114 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

115 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

116 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

117 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

119 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

121 
	`iounm≠
(
ba£
);

122 
	}
}

124 
__öô
 
	$kﬂœ_£tup
()

126 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

127 
u8
 
mac
[6];

129 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xae000000;

130 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

131 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xa0001313;

133 
	`©h79_ªgi°î_m25p80
(
NULL
);

135 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
kﬂœ_Àds_gpio
),

136 
kﬂœ_Àds_gpio
);

137 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
KOALA_KEYS_POLL_INTERVAL
,

138 
	`ARRAY_SIZE
(
kﬂœ_gpio_keys
),

139 
kﬂœ_gpio_keys
);

141 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
KOALA_WIFI2G_MAC_OFFSET
, 0);

142 
	`©h79_ªgi°î_wmac
(
¨t
 + 
KOALA_WMAC_CALDATA_OFFSET
, 
mac
);

143 
	`©h79_ªgi°î_pci
();

145 
	`kﬂœ_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 3, 3, 0, 0);

146 
	`©h79_ªgi°î_mdio
(0, 0x0);

148 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
kﬂœ_mdio0_öfo
,

149 
	`ARRAY_SIZE
(
kﬂœ_mdio0_öfo
));

151 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
KOALA_LAN_MAC_OFFSET
, 0);

154 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

155 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(5);

156 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

158 
	`©h79_ªgi°î_ëh
(0);

159 
	}
}

161 
MIPS_MACHINE
(
ATH79_MACH_KOALA
, "KOALA", "OCEDO Kﬂœ", 
kﬂœ_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-lan-turtle.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"machty≥s.h
"

25 
	#LAN_TURTLE_GPIO_BTN_RESET
 11

	)

26 
	#LAN_TURTLE_GPIO_LED_SYS
 13

	)

28 
	#PACKET_SQUIRREL_GPIO_BTN_SW1
 18

	)

29 
	#PACKET_SQUIRREL_GPIO_BTN_SW2
 20

	)

30 
	#PACKET_SQUIRREL_GPIO_BTN_SW3
 21

	)

31 
	#PACKET_SQUIRREL_GPIO_BTN_SW4
 24

	)

32 
	#PACKET_SQUIRREL_GPIO_BTN_RESET
 11

	)

33 
	#PACKET_SQUIRREL_GPIO_LED_B
 23

	)

34 
	#PACKET_SQUIRREL_GPIO_LED_G
 22

	)

35 
	#PACKET_SQUIRREL_GPIO_LED_R
 19

	)

37 
	#HAK5_KEYS_POLL_INTERVAL
 20

	)

38 
	#HAK5_KEYS_DEBOUNCE_INTERVAL
 (3 * 
HAK5_KEYS_POLL_INTERVAL
)

	)

40 c⁄° *
	ghak5_∑π_¥obes
[] = {

42 
NULL
,

45 
Êash_∂©f‹m_d©a
 
	ghak5_Êash_d©a
 = {

46 .
∑π_¥obes
 = 
hak5_∑π_¥obes
,

50 
gpio_Àd
 
	gœn_tuπÀ_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "lan-turtle:orange:system",

53 .
	ggpio
 = 
LAN_TURTLE_GPIO_LED_SYS
,

54 .
	ga˘ive_low
 = 1,

58 
gpio_keys_buâ⁄
 
	gœn_tuπÀ_gpio_keys
[] 
	g__öôd©a
 = {

60 .
desc
 = "reset",

61 .
	gty≥
 = 
EV_KEY
,

62 .
	gcode
 = 
KEY_RESTART
,

63 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

64 .
	ggpio
 = 
LAN_TURTLE_GPIO_BTN_RESET
,

65 .
	ga˘ive_low
 = 1,

70 
gpio_Àd
 
	g∑ckë_squúªl_Àds_gpio
[] 
	g__öôd©a
 = {

72 .
«me
 = "packet-squirrel:blue:system",

73 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_LED_B
,

74 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "packet-squirrel:green:system",

77 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_LED_G
,

78 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "packet-squirrel:red:system",

81 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_LED_R
,

82 .
	ga˘ive_low
 = 1,

86 
gpio_keys_buâ⁄
 
	g∑ckë_squúªl_gpio_keys
[] 
	g__öôd©a
 = {

88 .
desc
 = "reset",

89 .
	gty≥
 = 
EV_KEY
,

90 .
	gcode
 = 
KEY_RESTART
,

91 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

92 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_BTN_RESET
,

93 .
	ga˘ive_low
 = 1,

95 .
	gdesc
 = "sw1",

96 .
	gty≥
 = 
EV_KEY
,

97 .
	gcode
 = 
BTN_0
,

98 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

99 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_BTN_SW1
,

100 .
	ga˘ive_low
 = 1,

102 .
	gdesc
 = "sw2",

103 .
	gty≥
 = 
EV_KEY
,

104 .
	gcode
 = 
BTN_1
,

105 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

106 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_BTN_SW2
,

107 .
	ga˘ive_low
 = 1,

109 .
	gdesc
 = "sw3",

110 .
	gty≥
 = 
EV_KEY
,

111 .
	gcode
 = 
BTN_2
,

112 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

113 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_BTN_SW3
,

114 .
	ga˘ive_low
 = 1,

116 .
	gdesc
 = "sw4",

117 .
	gty≥
 = 
EV_KEY
,

118 .
	gcode
 = 
BTN_3
,

119 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

120 .
	ggpio
 = 
PACKET_SQUIRREL_GPIO_BTN_SW4
,

121 .
	ga˘ive_low
 = 1,

125 
__öô
 
	$hak5_comm⁄_£tup
()

127 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

129 
	`©h79_ªgi°î_m25p80
(&
hak5_Êash_d©a
);

131 
	`©h79_ªgi°î_mdio
(0, 0x0);

133 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xfe;

135 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

136 
	`©h79_ªgi°î_ëh
(0);

138 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

139 
	`©h79_ªgi°î_ëh
(1);

141 
	`©h79_ªgi°î_usb
();

144 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_UART_RTS_CTS_EN
);

145 
	}
}

147 
__öô
 
	$œn_tuπÀ_£tup
()

149 
	`hak5_comm⁄_£tup
();

152 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
);

154 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
œn_tuπÀ_Àds_gpio
),

155 
œn_tuπÀ_Àds_gpio
);

157 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HAK5_KEYS_POLL_INTERVAL
,

158 
	`ARRAY_SIZE
(
œn_tuπÀ_gpio_keys
),

159 
œn_tuπÀ_gpio_keys
);

160 
	}
}

162 
__öô
 
	$∑ckë_squúªl_£tup
()

164 
	`hak5_comm⁄_£tup
();

166 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
∑ckë_squúªl_Àds_gpio
),

167 
∑ckë_squúªl_Àds_gpio
);

169 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HAK5_KEYS_POLL_INTERVAL
,

170 
	`ARRAY_SIZE
(
∑ckë_squúªl_gpio_keys
),

171 
∑ckë_squúªl_gpio_keys
);

172 
	}
}

174 
MIPS_MACHINE
(
ATH79_MACH_LAN_TURTLE
, "LAN-TURTLE",

175 "Hak5 LAN TuπÀ", 
œn_tuπÀ_£tup
);

177 
MIPS_MACHINE
(
ATH79_MACH_PACKET_SQUIRREL
, "PACKET-SQUIRREL",

178 "Hak5 Packë Squúªl", 
∑ckë_squúªl_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-lima.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-•i.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

26 
	~"pci.h
"

28 
	#LIMA_GPIO_BTN_1_DEFAULT
 16

	)

29 
	#LIMA_KEYS_POLL_INTERVAL
 20

	)

30 
	#LIMA_KEYS_DEBOUNCE_INTERVAL
 (3 * 
LIMA_KEYS_POLL_INTERVAL
)

	)

32 
	#LIMA_ETH_PHYS
 (
	`BIT
(0Ë| BIT(1))

	)

34 
	#LIMA_MAC0_OFFSET
 0x0000

	)

35 
	#LIMA_MAC1_OFFSET
 0x0006

	)

37 
	#LIMA_CALDATA_OFFSET
 0x1000

	)

39 
gpio_keys_buâ⁄
 
	glima_gpio_keys
[] 
	g__öôd©a
 = {

41 .
desc
 = "button1",

42 .
	gty≥
 = 
EV_KEY
,

43 .
	gcode
 = 
BTN_1
,

44 .
	gdeboun˚_öãrvÆ
 = 
LIMA_KEYS_DEBOUNCE_INTERVAL
,

45 .
	ggpio
 = 
LIMA_GPIO_BTN_1_DEFAULT
,

46 .
	ga˘ive_low
 = 1,

50 
__öô
 
	$lima_£tup
()

52 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f080000);

54 
	`©h79_ªgi°î_m25p80
(
NULL
);

56 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
LIMA_KEYS_POLL_INTERVAL
,

57 
	`ARRAY_SIZE
(
lima_gpio_keys
),

58 
lima_gpio_keys
);

60 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

62 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
LIMA_MAC0_OFFSET
, 0);

63 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
LIMA_MAC1_OFFSET
, 0);

65 
	`©h79_ªgi°î_mdio
(0, ~
LIMA_ETH_PHYS
);

67 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

69 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(0);

70 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

71 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

72 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(1);

73 
	`©h79_ªgi°î_ëh
(1);

75 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

76 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

77 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

78 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

79 
	`©h79_ªgi°î_ëh
(0);

81 
	`©h79_ªgi°î_wmac
(
¨t
 + 
LIMA_CALDATA_OFFSET
, 
NULL
);

82 
	`©h79_ªgi°î_usb
();

83 
	`©h79_ªgi°î_pci
();

84 
	}
}

86 
MIPS_MACHINE
(
ATH79_MACH_LIMA
, "LIMA", "8devi˚†Lim®bﬂrd", 
lima_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mc-mac1200r.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<löux/¨8216_∂©f‹m.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#MAC1200R_GPIO_LED_WLAN2G
 13

	)

32 
	#MAC1200R_GPIO_LED_WLAN5G
 17

	)

33 
	#MAC1200R_GPIO_LED_SYSTEM
 14

	)

34 
	#MAC1200R_GPIO_LED_WPS
 11

	)

35 
	#MAC1200R_GPIO_LED_WAN
 12

	)

36 
	#MAC1200R_GPIO_LED_LAN1
 15

	)

37 
	#MAC1200R_GPIO_LED_LAN2
 21

	)

38 
	#MAC1200R_GPIO_LED_LAN3
 22

	)

39 
	#MAC1200R_GPIO_LED_LAN4
 20

	)

41 
	#MAC1200R_GPIO_BTN_WPS
 16

	)

43 
	#MAC1200R_KEYS_POLL_INTERVAL
 20

	)

44 
	#MAC1200R_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MAC1200R_KEYS_POLL_INTERVAL
)

	)

46 
	#MAC1200R_MAC0_OFFSET
 0

	)

47 
	#MAC1200R_MAC1_OFFSET
 6

	)

48 
	#MAC1200R_WMAC_CALDATA_OFFSET
 0x1000

	)

49 
	#MAC1200R_PCIE_CALDATA_OFFSET
 0x5000

	)

51 c⁄° *
	gmac1200r_∑π_¥obes
[] = {

53 
NULL
,

56 
Êash_∂©f‹m_d©a
 
	gmac1200r_Êash_d©a
 = {

57 .
∑π_¥obes
 = 
mac1200r_∑π_¥obes
,

60 
gpio_Àd
 
	gmac1200r_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "mercury:green:wps",

63 .
	ggpio
 = 
MAC1200R_GPIO_LED_WPS
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "mercury:green:system",

68 .
	ggpio
 = 
MAC1200R_GPIO_LED_SYSTEM
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "mercury:green:wlan2g",

73 .
	ggpio
 = 
MAC1200R_GPIO_LED_WLAN2G
,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "mercury:green:wlan5g",

78 .
	ggpio
 = 
MAC1200R_GPIO_LED_WLAN5G
,

79 .
	ga˘ive_low
 = 1,

83 
gpio_keys_buâ⁄
 
	gmac1200r_gpio_keys
[] 
	g__öôd©a
 = {

85 .
desc
 = "Reset button",

86 .
	gty≥
 = 
EV_KEY
,

87 .
	gcode
 = 
KEY_RESTART
,

88 .
	gdeboun˚_öãrvÆ
 = 
MAC1200R_KEYS_DEBOUNCE_INTERVAL
,

89 .
	ggpio
 = 
MAC1200R_GPIO_BTN_WPS
,

90 .
	ga˘ive_low
 = 1,

95 
__öô
 
	$mac1200r_£tup
()

97 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

98 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

99 
u8
 
tmpmac
[
ETH_ALEN
];

101 
	`©h79_ªgi°î_m25p80
(&
mac1200r_Êash_d©a
);

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
mac1200r_Àds_gpio
),

104 
mac1200r_Àds_gpio
);

106 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MAC1200R_KEYS_POLL_INTERVAL
,

107 
	`ARRAY_SIZE
(
mac1200r_gpio_keys
),

108 
mac1200r_gpio_keys
);

110 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

111 
	`©h79_wmac_dißbÀ_5ghz
();

112 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MAC1200R_WMAC_CALDATA_OFFSET
, 
tmpmac
);

114 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 1);

115 
	`≠91_pci_öô
(
¨t
 + 
MAC1200R_PCIE_CALDATA_OFFSET
, 
tmpmac
);

117 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

119 
	`©h79_ªgi°î_mdio
(1, 0x0);

122 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

125 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

127 
	`©h79_ªgi°î_ëh
(1);

130 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 2);

133 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

134 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

135 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

136 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

137 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

139 
	`©h79_ªgi°î_ëh
(0);

141 
	`©h79_gpio_ouçut_£À˘
(
MAC1200R_GPIO_LED_LAN1
,

142 
AR934X_GPIO_OUT_LED_LINK3
);

143 
	`©h79_gpio_ouçut_£À˘
(
MAC1200R_GPIO_LED_LAN2
,

144 
AR934X_GPIO_OUT_LED_LINK2
);

145 
	`©h79_gpio_ouçut_£À˘
(
MAC1200R_GPIO_LED_LAN3
,

146 
AR934X_GPIO_OUT_LED_LINK1
);

147 
	`©h79_gpio_ouçut_£À˘
(
MAC1200R_GPIO_LED_LAN4
,

148 
AR934X_GPIO_OUT_LED_LINK0
);

149 
	`©h79_gpio_ouçut_£À˘
(
MAC1200R_GPIO_LED_WAN
,

150 
AR934X_GPIO_OUT_LED_LINK4
);

151 
	}
}

153 
MIPS_MACHINE
(
ATH79_MACH_MC_MAC1200R
, "MC-MAC1200R",

155 
mac1200r_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr12.c

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/dñay.h
>

20 
	~<asm/mach-©h79/©h79.h
>

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"machty≥s.h
"

29 
	#MR12_GPIO_LED_W4_GREEN
 14

	)

30 
	#MR12_GPIO_LED_W3_GREEN
 13

	)

31 
	#MR12_GPIO_LED_W2_GREEN
 12

	)

32 
	#MR12_GPIO_LED_W1_GREEN
 11

	)

34 
	#MR12_GPIO_LED_WAN
 15

	)

36 
	#MR12_GPIO_LED_POWER_ORANGE
 16

	)

37 
	#MR12_GPIO_LED_POWER_GREEN
 17

	)

39 
	#MR12_GPIO_BTN_RESET
 8

	)

40 
	#MR12_KEYS_POLL_INTERVAL
 20

	)

41 
	#MR12_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR12_KEYS_POLL_INTERVAL
)

	)

43 
	#MR12_WAN_PHYMASK
 
	`BIT
(4)

	)

45 
	#MR12_CALDATA0_OFFSET
 0x21000

	)

47 
gpio_Àd
 
	gMR12_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "mr12:green:wan",

50 .
	ggpio
 = 
MR12_GPIO_LED_WAN
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "mr12:orange:power",

54 .
	ggpio
 = 
MR12_GPIO_LED_POWER_ORANGE
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "mr12:green:power",

58 .
	ggpio
 = 
MR12_GPIO_LED_POWER_GREEN
,

59 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "mr12:green:wifi4",

62 .
	ggpio
 = 
MR12_GPIO_LED_W4_GREEN
,

63 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "mr12:green:wifi3",

66 .
	ggpio
 = 
MR12_GPIO_LED_W3_GREEN
,

67 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "mr12:green:wifi2",

70 .
	ggpio
 = 
MR12_GPIO_LED_W2_GREEN
,

71 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "mr12:green:wifi1",

74 .
	ggpio
 = 
MR12_GPIO_LED_W1_GREEN
,

75 .
	ga˘ive_low
 = 1,

79 
gpio_keys_buâ⁄
 
	gMR12_gpio_keys
[] 
	g__öôd©a
 = {

81 .
desc
 = "reset",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
KEY_RESTART
,

84 .
	gdeboun˚_öãrvÆ
 = 
MR12_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
MR12_GPIO_BTN_RESET
,

86 .
	ga˘ive_low
 = 1,

90 
__öô
 
	$MR12_£tup
()

92 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0xbffd0000);

93 
u8
 
wœn_mac
[
ETH_ALEN
];

95 
	`©h79_ªgi°î_mdio
(0,0x0);

97 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

98 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

99 
©h79_ëh0_d©a
.
phy_mask
 = 
MR12_WAN_PHYMASK
;

100 
	`©h79_ªgi°î_ëh
(0);

102 
	`©h79_ªgi°î_m25p80
(
NULL
);

104 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
MR12_Àds_gpio
),

105 
MR12_Àds_gpio
);

106 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR12_KEYS_POLL_INTERVAL
,

107 
	`ARRAY_SIZE
(
MR12_gpio_keys
),

108 
MR12_gpio_keys
);

110 
	`©h79_öô_mac
(
wœn_mac
, 
mac
, 1);

111 
	`≠91_pci_öô
(
mac
 + 
MR12_CALDATA0_OFFSET
, 
wœn_mac
);

112 
	}
}

114 
MIPS_MACHINE
(
ATH79_MACH_MR12
, "MR12", "MîakòMR12", 
MR12_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr16.c

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/dñay.h
>

20 
	~<asm/mach-©h79/©h79.h
>

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"machty≥s.h
"

29 
	#MR16_GPIO_LED_W4_GREEN
 3

	)

30 
	#MR16_GPIO_LED_W3_GREEN
 2

	)

31 
	#MR16_GPIO_LED_W2_GREEN
 1

	)

32 
	#MR16_GPIO_LED_W1_GREEN
 0

	)

34 
	#MR16_GPIO_LED_WAN
 4

	)

36 
	#MR16_GPIO_LED_POWER_ORANGE
 5

	)

37 
	#MR16_GPIO_LED_POWER_GREEN
 6

	)

39 
	#MR16_GPIO_BTN_RESET
 7

	)

40 
	#MR16_KEYS_POLL_INTERVAL
 20

	)

41 
	#MR16_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR16_KEYS_POLL_INTERVAL
)

	)

43 
	#MR16_WAN_PHYMASK
 
	`BIT
(0)

	)

45 
	#MR16_CALDATA0_OFFSET
 0x21000

	)

46 
	#MR16_CALDATA1_OFFSET
 0x25000

	)

48 
gpio_Àd
 
	gMR16_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "mr16:green:wan",

51 .
	ggpio
 = 
MR16_GPIO_LED_WAN
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "mr16:orange:power",

55 .
	ggpio
 = 
MR16_GPIO_LED_POWER_ORANGE
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "mr16:green:power",

59 .
	ggpio
 = 
MR16_GPIO_LED_POWER_GREEN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "mr16:green:wifi4",

63 .
	ggpio
 = 
MR16_GPIO_LED_W4_GREEN
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "mr16:green:wifi3",

67 .
	ggpio
 = 
MR16_GPIO_LED_W3_GREEN
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "mr16:green:wifi2",

71 .
	ggpio
 = 
MR16_GPIO_LED_W2_GREEN
,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "mr16:green:wifi1",

75 .
	ggpio
 = 
MR16_GPIO_LED_W1_GREEN
,

76 .
	ga˘ive_low
 = 1,

80 
gpio_keys_buâ⁄
 
	gMR16_gpio_keys
[] 
	g__öôd©a
 = {

82 .
desc
 = "reset",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RESTART
,

85 .
	gdeboun˚_öãrvÆ
 = 
MR16_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
MR16_GPIO_BTN_RESET
,

87 .
	ga˘ive_low
 = 1,

91 
__öô
 
	$MR16_£tup
()

93 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0xbffd0000);

94 
u8
 
wœn0_mac
[
ETH_ALEN
];

95 
u8
 
wœn1_mac
[
ETH_ALEN
];

97 
	`©h79_ªgi°î_mdio
(0,0x0);

99 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

100 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

101 
©h79_ëh0_d©a
.
phy_mask
 = 
MR16_WAN_PHYMASK
;

102 
	`©h79_ªgi°î_ëh
(0);

104 
	`©h79_ªgi°î_m25p80
(
NULL
);

106 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
MR16_Àds_gpio
),

107 
MR16_Àds_gpio
);

108 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR16_KEYS_POLL_INTERVAL
,

109 
	`ARRAY_SIZE
(
MR16_gpio_keys
),

110 
MR16_gpio_keys
);

112 
	`©h79_öô_mac
(
wœn0_mac
, 
mac
, 1);

113 
	`©h79_öô_mac
(
wœn1_mac
, 
mac
, 2);

114 
	`≠94_pci_öô
(
mac
 + 
MR16_CALDATA0_OFFSET
, 
wœn0_mac
,

115 
mac
 + 
MR16_CALDATA1_OFFSET
, 
wœn1_mac
);

116 
	}
}

118 
MIPS_MACHINE
(
ATH79_MACH_MR16
, "MR16", "MîakòMR16", 
MR16_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr1750.c

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/¨8216_∂©f‹m.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

25 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-≠9x-pci.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-m25p80.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

35 
	~"pci.h
"

37 
	#MR1750_GPIO_LED_LAN
 12

	)

38 
	#MR1750_GPIO_LED_WLAN_2G
 13

	)

39 
	#MR1750_GPIO_LED_STATUS_GREEN
 19

	)

40 
	#MR1750_GPIO_LED_STATUS_RED
 21

	)

41 
	#MR1750_GPIO_LED_POWER
 22

	)

42 
	#MR1750_GPIO_LED_WLAN_5G
 23

	)

44 
	#MR1750_GPIO_BTN_RESET
 17

	)

46 
	#MR1750_KEYS_POLL_INTERVAL
 20

	)

47 
	#MR1750_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR1750_KEYS_POLL_INTERVAL
)

	)

49 
	#MR1750_MAC0_OFFSET
 0

	)

50 
	#MR1750_WMAC_CALDATA_OFFSET
 0x1000

	)

52 
gpio_Àd
 
	gmr1750_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "mr1750:blue:power",

55 .
	ggpio
 = 
MR1750_GPIO_LED_POWER
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "mr1750:blue:wan",

60 .
	ggpio
 = 
MR1750_GPIO_LED_LAN
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "mr1750:blue:wlan24",

65 .
	ggpio
 = 
MR1750_GPIO_LED_WLAN_2G
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "mr1750:blue:wlan58",

70 .
	ggpio
 = 
MR1750_GPIO_LED_WLAN_5G
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "mr1750:green:status",

75 .
	ggpio
 = 
MR1750_GPIO_LED_STATUS_GREEN
,

76 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "mr1750:red:status",

80 .
	ggpio
 = 
MR1750_GPIO_LED_STATUS_RED
,

81 .
	ga˘ive_low
 = 1,

85 
gpio_keys_buâ⁄
 
	gmr1750_gpio_keys
[] 
	g__öôd©a
 = {

87 .
desc
 = "Reset button",

88 .
	gty≥
 = 
EV_KEY
,

89 .
	gcode
 = 
KEY_RESTART
,

90 .
	gdeboun˚_öãrvÆ
 = 
MR1750_KEYS_DEBOUNCE_INTERVAL
,

91 .
	ggpio
 = 
MR1750_GPIO_BTN_RESET
,

92 .
	ga˘ive_low
 = 1,

96 
©803x_∂©f‹m_d©a
 
	gmr1750_©803x_d©a
 = {

97 .
dißbÀ_sm¨ãì
 = 1,

98 .
	gíabÀ_rgmii_rx_dñay
 = 1,

99 .
	gíabÀ_rgmii_tx_dñay
 = 0,

100 .
	gfixup_rgmii_tx_dñay
 = 1,

103 
mdio_bﬂrd_öfo
 
	gmr1750_mdio0_öfo
[] = {

105 .
bus_id
 = "ag71xx-mdio.0",

106 .
	gmdio_addr
 = 5,

107 .
	g∂©f‹m_d©a
 = &
mr1750_©803x_d©a
,

111 
__öô
 
	$mr1750_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

112 
rxd
,

113 
rxdv
,

114 
txd
,

115 
txe
)

117 
__iomem
 *
ba£
;

118 
u32
 
t
;

120 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

122 
t
 = 
mask
;

123 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

124 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

125 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

126 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

128 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

130 
	`iounm≠
(
ba£
);

131 
	}
}

133 
__öô
 
	$mr1750_£tup
()

135 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

136 
u8
 
mac
[6];

138 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xae000000;

139 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

140 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xa0001313;

142 
	`©h79_ªgi°î_m25p80
(
NULL
);

144 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
mr1750_Àds_gpio
),

145 
mr1750_Àds_gpio
);

146 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR1750_KEYS_POLL_INTERVAL
,

147 
	`ARRAY_SIZE
(
mr1750_gpio_keys
),

148 
mr1750_gpio_keys
);

150 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
MR1750_MAC0_OFFSET
, 1);

151 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MR1750_WMAC_CALDATA_OFFSET
, 
mac
);

152 
	`©h79_ªgi°î_pci
();

154 
	`mr1750_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 3, 3, 0, 0);

155 
	`©h79_ªgi°î_mdio
(0, 0x0);

157 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
mr1750_mdio0_öfo
,

158 
	`ARRAY_SIZE
(
mr1750_mdio0_öfo
));

160 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
MR1750_MAC0_OFFSET
, 0);

163 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

164 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(5);

165 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

167 
	`©h79_ªgi°î_ëh
(0);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_MR1750
, "MR1750", "O≥nMesh MR1750", 
mr1750_£tup
);

171 
MIPS_MACHINE
(
ATH79_MACH_MR1750V2
, "MR1750v2", "O≥nMesh MR1750v2", 
mr1750_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr18.c

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/∂©f‹m/¨934x_nfc.h
>

17 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

19 
	~<asm/mach-©h79/©h79.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~<löux/Àds-nu801.h
>

23 
	~<löux/pci.h
>

25 
	~"comm⁄.h
"

26 
	~"dev-ëh.h
"

27 
	~"pci.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-nfc.h
"

31 
	~"dev-wmac.h
"

32 
	~"machty≥s.h
"

34 
	#MR18_GPIO_LED_POWER_WHITE
 18

	)

35 
	#MR18_GPIO_LED_POWER_ORANGE
 21

	)

37 
	#MR18_GPIO_BTN_RESET
 17

	)

38 
	#MR18_KEYS_POLL_INTERVAL
 20

	)

39 
	#MR18_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR18_KEYS_POLL_INTERVAL
)

	)

41 
	#MR18_WAN_PHYADDR
 3

	)

44 
	#MR18_OTP_BASE
 (
AR71XX_APB_BASE
 + 0x130000)

	)

45 
	#MR18_OTP_SIZE
 (0x2000Ë

	)

46 
	#MR18_OTP_MEM_0_REG
 (0x0000)

	)

47 
	#MR18_OTP_INTF2_REG
 (0x1008)

	)

48 
	#MR18_OTP_STATUS0_REG
 (0x1018)

	)

49 
	#MR18_OTP_STATUS0_EFUSE_VALID
 
	`BIT
(2)

	)

51 
	#MR18_OTP_STATUS1_REG
 (0x101c)

	)

52 
	#MR18_OTP_LDO_CTRL_REG
 (0x1024)

	)

53 
	#MR18_OTP_LDO_STATUS_REG
 (0x102c)

	)

54 
	#MR18_OTP_LDO_STATUS_POWER_ON
 
	`BIT
(0)

	)

56 
gpio_Àd
 
	gMR18_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "mr18:white:power",

59 .
	ggpio
 = 
MR18_GPIO_LED_POWER_WHITE
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "mr18:orange:power",

63 .
	ggpio
 = 
MR18_GPIO_LED_POWER_ORANGE
,

64 .
	ga˘ive_low
 = 0,

68 
gpio_keys_buâ⁄
 
	gMR18_gpio_keys
[] 
	g__öôd©a
 = {

70 .
desc
 = "reset",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_RESTART
,

73 .
	gdeboun˚_öãrvÆ
 = 
MR18_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
MR18_GPIO_BTN_RESET
,

75 .
	ga˘ive_low
 = 1,

79 
Àd_nu801_ãm∂©e
 
	gåicﬁ‹_Àd_ãm∂©e
 = {

80 .
devi˚_«me
 = "mr18",

81 .
	g«me
 = "tricolor",

82 .
	gnum_Àds
 = 1,

83 .
	gcki
 = 11,

84 .
	gsdi
 = 12,

85 .
	gÀi
 = -1,

86 .
	gndñay
 = 500,

87 .
	göô_brighäess
 = {

88 
LED_OFF
,

89 
LED_OFF
,

90 
LED_OFF
,

92 .
	gdeÁu…_åiggî
 = "none",

93 .
	gÀd_cﬁ‹s
 = { "red", "green", "blue" },

96 
Àd_nu801_∂©f‹m_d©a
 
	gåicﬁ‹_Àd_d©a
 = {

97 .
num_c⁄åﬁÀrs
 = 1,

98 .
	gãm∂©e
 = &
åicﬁ‹_Àd_ãm∂©e
,

101 
∂©f‹m_devi˚
 
	gåicﬁ‹_Àds
 = {

102 .
«me
 = "leds-nu801",

103 .
	gid
 = -1,

104 .
	gdev
.
	g∂©f‹m_d©a
 = &
åicﬁ‹_Àd_d©a
,

107 
	$mr18_exåa˘_sgmii_ªs_ˇl
()

109 
__iomem
 *
ba£
;

110 
ªvî£d_sgmii_vÆue
;

112 
Ÿp_vÆue
, 
Ÿp_≥r_vÆ
, 
rbüs_≥r
, 
ªad_d©a
;

113 
rbüs_pos_‹_√g
;

114 
sgmii_ªs_ˇl_vÆue
;

115 
ªs_ˇl_vÆ
;

117 
ba£
 = 
	`i‹em≠_noˇche
(
MR18_OTP_BASE
, 
MR18_OTP_SIZE
);

118 i‡(!
ba£
)

119  -
EIO
;

121 
	`__øw_wrôñ
(0x7d, 
ba£
 + 
MR18_OTP_INTF2_REG
);

122 
	`__øw_wrôñ
(0x00, 
ba£
 + 
MR18_OTP_LDO_CTRL_REG
);

124 
	`__øw_ªadl
(
ba£
 + 
MR18_OTP_LDO_STATUS_REG
) &

125 
MR18_OTP_LDO_STATUS_POWER_ON
);

127 
	`__øw_ªadl
(
ba£
 + 
MR18_OTP_MEM_0_REG
 + 4);

129 !(
	`__øw_ªadl
(
ba£
 + 
MR18_OTP_STATUS0_REG
) &

130 
MR18_OTP_STATUS0_EFUSE_VALID
));

132 
ªad_d©a
 = 
	`__øw_ªadl
(
ba£
 + 
MR18_OTP_STATUS1_REG
);

134 
	`iounm≠
(
ba£
);

136 i‡(!(
ªad_d©a
 & 0x1fff))

137  -
ENODEV
;

139 i‡(
ªad_d©a
 & 0x00001000)

140 
Ÿp_vÆue
 = (
ªad_d©a
 & 0xfc0) >> 6;

142 
Ÿp_vÆue
 = 
ªad_d©a
 & 0x3f;

144 i‡(
Ÿp_vÆue
 > 31) {

145 
Ÿp_≥r_vÆ
 = 63 - 
Ÿp_vÆue
;

146 
rbüs_pos_‹_√g
 = 1;

148 
Ÿp_≥r_vÆ
 = 
Ÿp_vÆue
;

149 
rbüs_pos_‹_√g
 = 0;

152 
rbüs_≥r
 = 
Ÿp_≥r_vÆ
 * 15;

154 i‡(
rbüs_pos_‹_√g
 == 1)

155 
ªs_ˇl_vÆ
 = (
rbüs_≥r
 + 34) / 21;

156 i‡(
rbüs_≥r
 > 34)

157 
ªs_ˇl_vÆ
 = -((
rbüs_≥r
 - 34) / 21);

159 
ªs_ˇl_vÆ
 = (34 - 
rbüs_≥r
) / 21;

161 
sgmii_ªs_ˇl_vÆue
 = (8 + 
ªs_ˇl_vÆ
) & 0xf;

163 
ªvî£d_sgmii_vÆue
 = (
sgmii_ªs_ˇl_vÆue
 & 8) >> 3;

164 
ªvî£d_sgmii_vÆue
 |(
sgmii_ªs_ˇl_vÆue
 & 4) >> 1;

165 
ªvî£d_sgmii_vÆue
 |(
sgmii_ªs_ˇl_vÆue
 & 2) << 1;

166 
ªvî£d_sgmii_vÆue
 |(
sgmii_ªs_ˇl_vÆue
 & 1) << 3;

167 
	`¥ötk
(
KERN_INFO
 "SGMII cÆ vÆuê0x%x\n", 
ªvî£d_sgmii_vÆue
);

168  
ªvî£d_sgmii_vÆue
;

169 
	}
}

171 
	$mr18_£tup_qˇ955x_ëh_£rdes_ˇl
(
sgmii_vÆue
)

173 
__iomem
 *
ëhba£
, *
∂lba£
;

174 
u32
 
t
;

176 
ëhba£
 = 
	`i‹em≠_noˇche
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

177 
∂lba£
 = 
	`i‹em≠_noˇche
(
AR71XX_PLL_BASE
, 
AR71XX_PLL_SIZE
);

180 
t
 = 
	`__øw_ªadl
(
ëhba£
 + 
QCA955X_GMAC_REG_SGMII_SERDES
);

181 
t
 &~(
QCA955X_SGMII_SERDES_RES_CALIBRATION_MASK
 <<

182 
QCA955X_SGMII_SERDES_RES_CALIBRATION_SHIFT
);

183 
t
 |(
sgmii_vÆue
 & 
QCA955X_SGMII_SERDES_RES_CALIBRATION_MASK
) <<

184 
QCA955X_SGMII_SERDES_RES_CALIBRATION_SHIFT
;

185 
	`__øw_wrôñ
(
t
, 
ëhba£
 + 
QCA955X_GMAC_REG_SGMII_SERDES
);

187 
	`__øw_wrôñ
(
QCA955X_PLL_ETH_SGMII_SERDES_LOCK_DETECT
 |

188 
QCA955X_PLL_ETH_SGMII_SERDES_PLL_REFCLK
 |

189 
QCA955X_PLL_ETH_SGMII_SERDES_EN_PLL
,

190 
∂lba£
 + 
QCA955X_PLL_ETH_SGMII_SERDES_REG
);

192 
	`©h79_devi˚_ª£t_˛ór
(
QCA955X_RESET_SGMII_ANALOG
);

193 
	`©h79_devi˚_ª£t_˛ór
(
QCA955X_RESET_SGMII
);

195 !(
	`__øw_ªadl
(
ëhba£
 + 
QCA955X_GMAC_REG_SGMII_SERDES
) &

196 
QCA955X_SGMII_SERDES_LOCK_DETECT_STATUS
));

198 
	`iounm≠
(
ëhba£
);

199 
	`iounm≠
(
∂lba£
);

200 
	}
}

202 
©h9k_∂©f‹m_d©a
 
	gpci_maö_wifi_d©a
 = {

203 .
Àd_pö
 = -1,

205 
©h9k_∂©f‹m_d©a
 
	gpci_sˇn_wifi_d©a
 = {

206 .
Àd_pö
 = -1,

209 
	$mr18_duÆ_pci_∂©_dev_öô
(
pci_dev
 *
dev
)

215 
dev
->
bus
->
numbî
) {

217 
dev
->dev.
∂©f‹m_d©a
 = &
pci_maö_wifi_d©a
;

220 
dev
->dev.
∂©f‹m_d©a
 = &
pci_sˇn_wifi_d©a
;

225 
	}
}

227 
__öô
 
	$mr18_£tup
()

229 
ªs
;

232 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_SOFT_BCH
);

233 
	`©h79_ªgi°î_nfc
();

242 
ªs
 = 
	`mr18_exåa˘_sgmii_ªs_ˇl
();

243 i‡(
ªs
 >= 0) {

245 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
 |

246 (3 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
) |

247 (3 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
));

250 
	`©h79_ªgi°î_mdio
(0, 0x0);

252 
	`mr18_£tup_qˇ955x_ëh_£rdes_ˇl
(
ªs
);

255 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
NULL
, 0);

256 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

257 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

258 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
MR18_WAN_PHYADDR
);

259 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

260 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

261 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

262 
	`©h79_ªgi°î_ëh
(0);

264 
	`¥ötk
(
KERN_ERR
 "failedÅoÑead EFUSE forÉthernet cal\n");

268 
	`∂©f‹m_devi˚_ªgi°î
(&
åicﬁ‹_Àds
);

269 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
MR18_Àds_gpio
),

270 
MR18_Àds_gpio
);

271 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR18_KEYS_POLL_INTERVAL
,

272 
	`ARRAY_SIZE
(
MR18_gpio_keys
),

273 
MR18_gpio_keys
);

276 
	`©h79_devi˚_ª£t_˛ór
(
QCA955X_RESET_RTC
);

279 
	`©h79_ªgi°î_wmac_sim∂e
();

281 
pci_maö_wifi_d©a
.
ì¥om_«me
 = "pci_wmac0.eeprom";

282 
pci_sˇn_wifi_d©a
.
ì¥om_«me
 = "pci_wmac1.eeprom";

283 
	`©h79_pci_£t_∂©_dev_öô
(
mr18_duÆ_pci_∂©_dev_öô
);

284 
	`©h79_ªgi°î_pci
();

285 
	}
}

286 
MIPS_MACHINE
(
ATH79_MACH_MR18
, "MR18", "MîakòMR18", 
mr18_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr600.c

20 
	~<löux/pci.h
>

21 
	~<löux/phy.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-≠9x-pci.h
"

29 
	~"dev-ëh.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-m25p80.h
"

33 
	~"dev-•i.h
"

34 
	~"dev-wmac.h
"

35 
	~"machty≥s.h
"

37 
	#MR600_GPIO_LED_WLAN58
 12

	)

38 
	#MR600_GPIO_LED_WPS
 13

	)

39 
	#MR600_GPIO_LED_POWER
 14

	)

41 
	#MR600V2_GPIO_LED_WLAN58_RED
 12

	)

42 
	#MR600V2_GPIO_LED_WPS
 13

	)

43 
	#MR600V2_GPIO_LED_POWER
 14

	)

44 
	#MR600V2_GPIO_LED_WLAN24_GREEN
 18

	)

45 
	#MR600V2_GPIO_LED_WLAN24_YELLOW
 19

	)

46 
	#MR600V2_GPIO_LED_WLAN24_RED
 20

	)

47 
	#MR600V2_GPIO_LED_WLAN58_GREEN
 21

	)

48 
	#MR600V2_GPIO_LED_WLAN58_YELLOW
 22

	)

50 
	#MR600_GPIO_BTN_RESET
 17

	)

52 
	#MR600_KEYS_POLL_INTERVAL
 20

	)

53 
	#MR600_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR600_KEYS_POLL_INTERVAL
)

	)

55 
	#MR600_MAC_OFFSET
 0

	)

56 
	#MR600_WMAC_CALDATA_OFFSET
 0x1000

	)

57 
	#MR600_PCIE_CALDATA_OFFSET
 0x5000

	)

59 
gpio_Àd
 
	gmr600_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "mr600:orange:power",

62 .
	ggpio
 = 
MR600_GPIO_LED_POWER
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "mr600:blue:wps",

67 .
	ggpio
 = 
MR600_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "mr600:green:wlan58",

72 .
	ggpio
 = 
MR600_GPIO_LED_WLAN58
,

73 .
	ga˘ive_low
 = 1,

77 
gpio_Àd
 
	gmr600v2_Àds_gpio
[] 
	g__öôd©a
 = {

79 .
«me
 = "mr600:blue:power",

80 .
	ggpio
 = 
MR600V2_GPIO_LED_POWER
,

81 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "mr600:blue:wps",

85 .
	ggpio
 = 
MR600V2_GPIO_LED_WPS
,

86 .
	ga˘ive_low
 = 1,

89 .
	g«me
 = "mr600:red:wlan24",

90 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN24_RED
,

91 .
	ga˘ive_low
 = 1,

94 .
	g«me
 = "mr600:yellow:wlan24",

95 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN24_YELLOW
,

96 .
	ga˘ive_low
 = 1,

99 .
	g«me
 = "mr600:green:wlan24",

100 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN24_GREEN
,

101 .
	ga˘ive_low
 = 1,

104 .
	g«me
 = "mr600:red:wlan58",

105 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN58_RED
,

106 .
	ga˘ive_low
 = 1,

109 .
	g«me
 = "mr600:yellow:wlan58",

110 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN58_YELLOW
,

111 .
	ga˘ive_low
 = 1,

114 .
	g«me
 = "mr600:green:wlan58",

115 .
	ggpio
 = 
MR600V2_GPIO_LED_WLAN58_GREEN
,

116 .
	ga˘ive_low
 = 1,

120 
gpio_keys_buâ⁄
 
	gmr600_gpio_keys
[] 
	g__öôd©a
 = {

122 .
desc
 = "Reset button",

123 .
	gty≥
 = 
EV_KEY
,

124 .
	gcode
 = 
KEY_RESTART
,

125 .
	gdeboun˚_öãrvÆ
 = 
MR600_KEYS_DEBOUNCE_INTERVAL
,

126 .
	ggpio
 = 
MR600_GPIO_BTN_RESET
,

127 .
	ga˘ive_low
 = 1,

131 
__öô
 
	$mr600_ba£_£tup
(
num_Àds
, 
gpio_Àd
 *
Àds
)

133 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

134 
u8
 
mac
[6];

136 
	`©h79_ªgi°î_m25p80
(
NULL
);

138 
	`©h79_ªgi°î_Àds_gpio
(-1, 
num_Àds
, 
Àds
);

139 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR600_KEYS_POLL_INTERVAL
,

140 
	`ARRAY_SIZE
(
mr600_gpio_keys
),

141 
mr600_gpio_keys
);

143 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
MR600_MAC_OFFSET
, 1);

144 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MR600_WMAC_CALDATA_OFFSET
, 
mac
);

146 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
MR600_MAC_OFFSET
, 8);

147 
	`≠91_pci_öô
(
¨t
 + 
MR600_PCIE_CALDATA_OFFSET
, 
mac
);

149 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

150 
AR934X_ETH_CFG_SW_ONLY_MODE
);

152 
	`©h79_ªgi°î_mdio
(0, 0x0);

154 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
MR600_MAC_OFFSET
, 0);

157 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

158 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

159 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

160 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

161 
	`©h79_ªgi°î_ëh
(0);

162 
	}
}

164 
__öô
 
	$mr600_£tup
()

166 
	`mr600_ba£_£tup
(
	`ARRAY_SIZE
(
mr600_Àds_gpio
), mr600_leds_gpio);

167 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_MR600
, "MR600", "O≥nMesh MR600", 
mr600_£tup
);

172 
__öô
 
	$mr600v2_£tup
()

174 
	`mr600_ba£_£tup
(
	`ARRAY_SIZE
(
mr600v2_Àds_gpio
), mr600v2_leds_gpio);

175 
	}
}

177 
MIPS_MACHINE
(
ATH79_MACH_MR600V2
, "MR600v2", "O≥nMesh MR600v2", 
mr600v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mr900.c

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/¨8216_∂©f‹m.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

28 
	~"comm⁄.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-wmac.h
"

35 
	~"machty≥s.h
"

36 
	~"pci.h
"

38 
	#MR900_GPIO_LED_LAN
 12

	)

39 
	#MR900_GPIO_LED_WLAN_2G
 13

	)

40 
	#MR900_GPIO_LED_STATUS_GREEN
 19

	)

41 
	#MR900_GPIO_LED_STATUS_RED
 21

	)

42 
	#MR900_GPIO_LED_POWER
 22

	)

43 
	#MR900_GPIO_LED_WLAN_5G
 23

	)

45 
	#MR900_GPIO_BTN_RESET
 17

	)

47 
	#MR900_KEYS_POLL_INTERVAL
 20

	)

48 
	#MR900_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MR900_KEYS_POLL_INTERVAL
)

	)

50 
	#MR900_MAC0_OFFSET
 0

	)

51 
	#MR900_WMAC_CALDATA_OFFSET
 0x1000

	)

52 
	#MR900_PCIE_CALDATA_OFFSET
 0x5000

	)

54 
gpio_Àd
 
	gmr900_Àds_gpio
[] 
	g__öôd©a
 = {

56 .
«me
 = "mr900:blue:power",

57 .
	ggpio
 = 
MR900_GPIO_LED_POWER
,

58 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "mr900:blue:wan",

62 .
	ggpio
 = 
MR900_GPIO_LED_LAN
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "mr900:blue:wlan24",

67 .
	ggpio
 = 
MR900_GPIO_LED_WLAN_2G
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "mr900:blue:wlan58",

72 .
	ggpio
 = 
MR900_GPIO_LED_WLAN_5G
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "mr900:green:status",

77 .
	ggpio
 = 
MR900_GPIO_LED_STATUS_GREEN
,

78 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "mr900:red:status",

82 .
	ggpio
 = 
MR900_GPIO_LED_STATUS_RED
,

83 .
	ga˘ive_low
 = 1,

87 
gpio_keys_buâ⁄
 
	gmr900_gpio_keys
[] 
	g__öôd©a
 = {

89 .
desc
 = "Reset button",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_RESTART
,

92 .
	gdeboun˚_öãrvÆ
 = 
MR900_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
MR900_GPIO_BTN_RESET
,

94 .
	ga˘ive_low
 = 1,

98 
©803x_∂©f‹m_d©a
 
	gmr900_©803x_d©a
 = {

99 .
dißbÀ_sm¨ãì
 = 1,

100 .
	gíabÀ_rgmii_rx_dñay
 = 1,

101 .
	gíabÀ_rgmii_tx_dñay
 = 0,

102 .
	gfixup_rgmii_tx_dñay
 = 1,

105 
mdio_bﬂrd_öfo
 
	gmr900_mdio0_öfo
[] = {

107 .
bus_id
 = "ag71xx-mdio.0",

108 .
	gmdio_addr
 = 5,

109 .
	g∂©f‹m_d©a
 = &
mr900_©803x_d©a
,

113 
__öô
 
	$mr900_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

114 
rxd
,

115 
rxdv
,

116 
txd
,

117 
txe
)

119 
__iomem
 *
ba£
;

120 
u32
 
t
;

122 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

124 
t
 = 
mask
;

125 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

126 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

127 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

128 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

130 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

132 
	`iounm≠
(
ba£
);

133 
	}
}

135 
__öô
 
	$mr900_£tup
()

137 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

138 
u8
 
mac
[6], 
pcõ_mac
[6];

139 
©h9k_∂©f‹m_d©a
 *
pd©a
;

141 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xae000000;

142 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

143 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xa0001313;

145 
	`©h79_ªgi°î_m25p80
(
NULL
);

147 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
mr900_Àds_gpio
),

148 
mr900_Àds_gpio
);

149 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MR900_KEYS_POLL_INTERVAL
,

150 
	`ARRAY_SIZE
(
mr900_gpio_keys
),

151 
mr900_gpio_keys
);

153 
	`©h79_öô_mac
(
mac
, 
¨t
 + 
MR900_MAC0_OFFSET
, 1);

154 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MR900_WMAC_CALDATA_OFFSET
, 
mac
);

155 
	`©h79_öô_mac
(
pcõ_mac
, 
¨t
 + 
MR900_MAC0_OFFSET
, 16);

156 
	`≠91_pci_öô
(
¨t
 + 
MR900_PCIE_CALDATA_OFFSET
, 
pcõ_mac
);

157 
pd©a
 = 
	`≠9x_pci_gë_wmac_d©a
(0);

158 i‡(!
pd©a
) {

159 
	`¥_îr
("mr900: unableÅo getáddress of wlan data\n");

162 
pd©a
->
u£_ì¥om
 = 
åue
;

164 
	`mr900_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 3, 3, 0, 0);

165 
	`©h79_ªgi°î_mdio
(0, 0x0);

167 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
mr900_mdio0_öfo
,

168 
	`ARRAY_SIZE
(
mr900_mdio0_öfo
));

170 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
MR900_MAC0_OFFSET
, 0);

173 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

174 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(5);

175 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

177 
	`©h79_ªgi°î_ëh
(0);

178 
	}
}

180 
MIPS_MACHINE
(
ATH79_MACH_MR900
, "MR900", "O≥nMesh MR900", 
mr900_£tup
);

181 
MIPS_MACHINE
(
ATH79_MACH_MR900v2
, "MR900v2", "O≥nMesh MR900v2", 
mr900_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mynet-n600.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

30 
	~"nvøm.h
"

32 
	#MYNET_N600_GPIO_LED_WIFI
 0

	)

33 
	#MYNET_N600_GPIO_LED_POWER
 11

	)

34 
	#MYNET_N600_GPIO_LED_INTERNET
 12

	)

35 
	#MYNET_N600_GPIO_LED_WPS
 13

	)

37 
	#MYNET_N600_GPIO_LED_LAN1
 4

	)

38 
	#MYNET_N600_GPIO_LED_LAN2
 3

	)

39 
	#MYNET_N600_GPIO_LED_LAN3
 2

	)

40 
	#MYNET_N600_GPIO_LED_LAN4
 1

	)

42 
	#MYNET_N600_GPIO_BTN_RESET
 16

	)

43 
	#MYNET_N600_GPIO_BTN_WPS
 17

	)

45 
	#MYNET_N600_GPIO_EXTERNAL_LNA0
 14

	)

46 
	#MYNET_N600_GPIO_EXTERNAL_LNA1
 15

	)

48 
	#MYNET_N600_KEYS_POLL_INTERVAL
 20

	)

49 
	#MYNET_N600_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MYNET_N600_KEYS_POLL_INTERVAL
)

	)

51 
	#MYNET_N600_MAC0_OFFSET
 0

	)

52 
	#MYNET_N600_MAC1_OFFSET
 6

	)

53 
	#MYNET_N600_WMAC_CALDATA_OFFSET
 0x1000

	)

54 
	#MYNET_N600_PCIE_CALDATA_OFFSET
 0x5000

	)

56 
	#MYNET_N600_NVRAM_ADDR
 0x1f058010

	)

57 
	#MYNET_N600_NVRAM_SIZE
 0x7ff0

	)

59 
gpio_Àd
 
	gmy√t_n600_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "wd:blue:power",

62 .
	ggpio
 = 
MYNET_N600_GPIO_LED_POWER
,

63 .
	ga˘ive_low
 = 0,

66 .
	g«me
 = "wd:blue:wps",

67 .
	ggpio
 = 
MYNET_N600_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 0,

71 .
	g«me
 = "wd:blue:wireless",

72 .
	ggpio
 = 
MYNET_N600_GPIO_LED_WIFI
,

73 .
	ga˘ive_low
 = 0,

76 .
	g«me
 = "wd:blue:internet",

77 .
	ggpio
 = 
MYNET_N600_GPIO_LED_INTERNET
,

78 .
	ga˘ive_low
 = 0,

81 .
	g«me
 = "wd:green:lan1",

82 .
	ggpio
 = 
MYNET_N600_GPIO_LED_LAN1
,

83 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "wd:green:lan2",

87 .
	ggpio
 = 
MYNET_N600_GPIO_LED_LAN2
,

88 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "wd:green:lan3",

92 .
	ggpio
 = 
MYNET_N600_GPIO_LED_LAN3
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "wd:green:lan4",

97 .
	ggpio
 = 
MYNET_N600_GPIO_LED_LAN4
,

98 .
	ga˘ive_low
 = 1,

102 
gpio_keys_buâ⁄
 
	gmy√t_n600_gpio_keys
[] 
	g__öôd©a
 = {

104 .
desc
 = "Reset button",

105 .
	gty≥
 = 
EV_KEY
,

106 .
	gcode
 = 
KEY_RESTART
,

107 .
	gdeboun˚_öãrvÆ
 = 
MYNET_N600_KEYS_DEBOUNCE_INTERVAL
,

108 .
	ggpio
 = 
MYNET_N600_GPIO_BTN_RESET
,

109 .
	ga˘ive_low
 = 1,

112 .
	gdesc
 = "WPS button",

113 .
	gty≥
 = 
EV_KEY
,

114 .
	gcode
 = 
KEY_WPS_BUTTON
,

115 .
	gdeboun˚_öãrvÆ
 = 
MYNET_N600_KEYS_DEBOUNCE_INTERVAL
,

116 .
	ggpio
 = 
MYNET_N600_GPIO_BTN_WPS
,

117 .
	ga˘ive_low
 = 1,

121 
	$my√t_n600_gë_mac
(c⁄° *
«me
, *
mac
)

123 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
MYNET_N600_NVRAM_ADDR
);

124 
îr
;

126 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
MYNET_N600_NVRAM_SIZE
,

127 
«me
, 
mac
);

128 i‡(
îr
)

129 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

130 
	}
}

132 
	#MYNET_N600_WAN_PHY_MASK
 
	`BIT
(0)

	)

134 
__öô
 
	$my√t_n600_£tup
()

136 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

137 
u8
 
tmpmac
[
ETH_ALEN
];

139 
	`©h79_ªgi°î_m25p80
(
NULL
);

141 
	`©h79_gpio_ouçut_£À˘
(
MYNET_N600_GPIO_LED_LAN1
,

142 
AR934X_GPIO_OUT_GPIO
);

143 
	`©h79_gpio_ouçut_£À˘
(
MYNET_N600_GPIO_LED_LAN2
,

144 
AR934X_GPIO_OUT_GPIO
);

145 
	`©h79_gpio_ouçut_£À˘
(
MYNET_N600_GPIO_LED_LAN3
,

146 
AR934X_GPIO_OUT_GPIO
);

147 
	`©h79_gpio_ouçut_£À˘
(
MYNET_N600_GPIO_LED_LAN4
,

148 
AR934X_GPIO_OUT_GPIO
);

149 
	`©h79_gpio_ouçut_£À˘
(
MYNET_N600_GPIO_LED_INTERNET
,

150 
AR934X_GPIO_OUT_GPIO
);

151 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
my√t_n600_Àds_gpio
),

152 
my√t_n600_Àds_gpio
);

154 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MYNET_N600_KEYS_POLL_INTERVAL
,

155 
	`ARRAY_SIZE
(
my√t_n600_gpio_keys
),

156 
my√t_n600_gpio_keys
);

163 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
MYNET_N600_GPIO_EXTERNAL_LNA0
);

164 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
MYNET_N600_GPIO_EXTERNAL_LNA1
);

166 
	`my√t_n600_gë_mac
("wœn24mac=", 
tmpmac
);

167 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MYNET_N600_WMAC_CALDATA_OFFSET
, 
tmpmac
);

169 
	`my√t_n600_gë_mac
("wœn5mac=", 
tmpmac
);

170 
	`≠91_pci_öô
(
¨t
 + 
MYNET_N600_PCIE_CALDATA_OFFSET
, 
tmpmac
);

172 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
 |

173 
AR934X_ETH_CFG_SW_PHY_SWAP
);

175 
	`©h79_ªgi°î_mdio
(1, 0x0);

178 
	`my√t_n600_gë_mac
("œnmac=", 
©h79_ëh1_d©a
.
mac_addr
);

181 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

183 
	`©h79_ªgi°î_ëh
(1);

186 
	`my√t_n600_gë_mac
("w™mac=", 
©h79_ëh0_d©a
.
mac_addr
);

189 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

190 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
MYNET_N600_WAN_PHY_MASK
;

192 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

193 
©h79_ëh0_d©a
.
phy_mask
 = 
MYNET_N600_WAN_PHY_MASK
;

194 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

196 
	`©h79_ªgi°î_ëh
(0);

198 
	`©h79_ªgi°î_usb
();

199 
	}
}

201 
MIPS_MACHINE
(
ATH79_MACH_MYNET_N600
, "MYNET-N600", "WD My Net N600",

202 
my√t_n600_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mynet-n750.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<löux/¨8216_∂©f‹m.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~"comm⁄.h
"

23 
	~"dev-≠9x-pci.h
"

24 
	~"dev-ëh.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-Àds-gpio.h
"

27 
	~"dev-m25p80.h
"

28 
	~"dev-•i.h
"

29 
	~"dev-usb.h
"

30 
	~"dev-wmac.h
"

31 
	~"machty≥s.h
"

32 
	~"nvøm.h
"

39 
	#MYNET_N750_GPIO_LED_WIFI
 11

	)

40 
	#MYNET_N750_GPIO_LED_INTERNET
 12

	)

41 
	#MYNET_N750_GPIO_LED_WPS
 13

	)

42 
	#MYNET_N750_GPIO_LED_POWER
 14

	)

44 
	#MYNET_N750_GPIO_BTN_RESET
 17

	)

45 
	#MYNET_N750_GPIO_BTN_WPS
 19

	)

47 
	#MYNET_N750_GPIO_EXTERNAL_LNA0
 15

	)

48 
	#MYNET_N750_GPIO_EXTERNAL_LNA1
 18

	)

50 
	#MYNET_N750_KEYS_POLL_INTERVAL
 20

	)

51 
	#MYNET_N750_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MYNET_N750_KEYS_POLL_INTERVAL
)

	)

53 
	#MYNET_N750_WMAC_CALDATA_OFFSET
 0x1000

	)

54 
	#MYNET_N750_PCIE_CALDATA_OFFSET
 0x5000

	)

56 
	#MYNET_N750_NVRAM_ADDR
 0x1f058010

	)

57 
	#MYNET_N750_NVRAM_SIZE
 0x7ff0

	)

59 
gpio_Àd
 
	gmy√t_n750_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "wd:blue:power",

62 .
	ggpio
 = 
MYNET_N750_GPIO_LED_POWER
,

63 .
	ga˘ive_low
 = 0,

66 .
	g«me
 = "wd:blue:wps",

67 .
	ggpio
 = 
MYNET_N750_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 0,

71 .
	g«me
 = "wd:blue:wireless",

72 .
	ggpio
 = 
MYNET_N750_GPIO_LED_WIFI
,

73 .
	ga˘ive_low
 = 0,

76 .
	g«me
 = "wd:blue:internet",

77 .
	ggpio
 = 
MYNET_N750_GPIO_LED_INTERNET
,

78 .
	ga˘ive_low
 = 0,

82 
gpio_keys_buâ⁄
 
	gmy√t_n750_gpio_keys
[] 
	g__öôd©a
 = {

84 .
desc
 = "Reset button",

85 .
	gty≥
 = 
EV_KEY
,

86 .
	gcode
 = 
KEY_RESTART
,

87 .
	gdeboun˚_öãrvÆ
 = 
MYNET_N750_KEYS_DEBOUNCE_INTERVAL
,

88 .
	ggpio
 = 
MYNET_N750_GPIO_BTN_RESET
,

89 .
	ga˘ive_low
 = 1,

92 .
	gdesc
 = "WPS button",

93 .
	gty≥
 = 
EV_KEY
,

94 .
	gcode
 = 
KEY_WPS_BUTTON
,

95 .
	gdeboun˚_öãrvÆ
 = 
MYNET_N750_KEYS_DEBOUNCE_INTERVAL
,

96 .
	ggpio
 = 
MYNET_N750_GPIO_BTN_WPS
,

97 .
	ga˘ive_low
 = 1,

101 c⁄° 
¨8327_Àd_öfo
 
	gmy√t_n750_Àds_¨8327
[] = {

102 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "wd:green:lan1"),

103 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "wd:green:lan2"),

104 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "wd:green:lan3"),

105 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "wd:green:lan4"),

106 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "wd:green:wan"),

107 
AR8327_LED_INFO
(
PHY0_1
, 
HW
, "wd:yellow:lan1"),

108 
AR8327_LED_INFO
(
PHY1_1
, 
HW
, "wd:yellow:lan2"),

109 
AR8327_LED_INFO
(
PHY2_1
, 
HW
, "wd:yellow:lan3"),

110 
AR8327_LED_INFO
(
PHY3_1
, 
HW
, "wd:yellow:lan4"),

111 
AR8327_LED_INFO
(
PHY4_1
, 
HW
, "wd:yellow:wan"),

114 
¨8327_∑d_cfg
 
	gmy√t_n750_¨8327_∑d0_cfg
 = {

115 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

116 .
	gtx˛k_dñay_í
 = 
åue
,

117 .
	grx˛k_dñay_í
 = 
åue
,

118 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

119 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

122 
¨8327_Àd_cfg
 
	gmy√t_n750_¨8327_Àd_cfg
 = {

123 .
Àd_˘æ0
 = 0xcc35cc35,

124 .
	gÀd_˘æ1
 = 0xca35ca35,

125 .
	gÀd_˘æ2
 = 0xc935c935,

126 .
	gÀd_˘æ3
 = 0x03ffff00,

127 .
	g›í_døö
 = 
Ál£
,

130 
¨8327_∂©f‹m_d©a
 
	gmy√t_n750_¨8327_d©a
 = {

131 .
∑d0_cfg
 = &
my√t_n750_¨8327_∑d0_cfg
,

132 .
	gp‹t0_cfg
 = {

133 .
f‹˚_lök
 = 1,

134 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

135 .
	gdu∂ex
 = 1,

136 .
	gtx∑u£
 = 1,

137 .
	grx∑u£
 = 1,

139 .
	gÀd_cfg
 = &
my√t_n750_¨8327_Àd_cfg
,

140 .
	gnum_Àds
 = 
ARRAY_SIZE
(
my√t_n750_Àds_¨8327
),

141 .
	gÀds
 = 
my√t_n750_Àds_¨8327
,

144 
mdio_bﬂrd_öfo
 
	gmy√t_n750_mdio0_öfo
[] = {

146 .
bus_id
 = "ag71xx-mdio.0",

147 .
	gmdio_addr
 = 0,

148 .
	g∂©f‹m_d©a
 = &
my√t_n750_¨8327_d©a
,

152 
	$my√t_n750_gë_mac
(c⁄° *
«me
, *
mac
)

154 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
MYNET_N750_NVRAM_ADDR
);

155 
îr
;

157 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
MYNET_N750_NVRAM_SIZE
,

158 
«me
, 
mac
);

159 i‡(
îr
)

160 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

161 
	}
}

169 
	$my√t_n750_mdio_fixup
(
mii_bus
 *
bus
)

171 
i
;

173 
i
 = 0; i < 5; i++)

174 
bus
->
	`wrôe
(bus, 
i
, 
MII_BMCR
,

175 (
BMCR_RESET
 | 
BMCR_ANENABLE
 | 
BMCR_SPEED1000
));

177 
	`mdñay
(1000);

178 
	}
}

180 
__öô
 
	$my√t_n750_£tup
()

182 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

183 
u8
 
tmpmac
[
ETH_ALEN
];

185 
	`©h79_ªgi°î_m25p80
(
NULL
);

186 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
my√t_n750_Àds_gpio
),

187 
my√t_n750_Àds_gpio
);

188 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MYNET_N750_KEYS_POLL_INTERVAL
,

189 
	`ARRAY_SIZE
(
my√t_n750_gpio_keys
),

190 
my√t_n750_gpio_keys
);

196 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
MYNET_N750_GPIO_EXTERNAL_LNA0
);

197 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
MYNET_N750_GPIO_EXTERNAL_LNA1
);

199 
	`my√t_n750_gë_mac
("wœn24mac=", 
tmpmac
);

200 
	`©h79_ªgi°î_wmac
(
¨t
 + 
MYNET_N750_WMAC_CALDATA_OFFSET
, 
tmpmac
);

202 
	`my√t_n750_gë_mac
("wœn5mac=", 
tmpmac
);

203 
	`≠91_pci_öô
(
¨t
 + 
MYNET_N750_PCIE_CALDATA_OFFSET
, 
tmpmac
);

205 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

207 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
my√t_n750_mdio0_öfo
,

208 
	`ARRAY_SIZE
(
my√t_n750_mdio0_öfo
));

210 
©h79_mdio0_d©a
.
ª£t
 = 
my√t_n750_mdio_fixup
;

211 
	`©h79_ªgi°î_mdio
(0, 0x0);

213 
	`my√t_n750_gë_mac
("œnmac=", 
©h79_ëh0_d©a
.
mac_addr
);

216 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

217 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

218 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

219 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

220 
	`©h79_ªgi°î_ëh
(0);

222 
	`©h79_ªgi°î_usb
();

223 
	}
}

225 
MIPS_MACHINE
(
ATH79_MACH_MYNET_N750
, "MYNET-N750", "WD My Net N750",

226 
my√t_n750_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mynet-rext.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-usb.h
"

29 
	~"dev-wmac.h
"

30 
	~"machty≥s.h
"

31 
	~"nvøm.h
"

33 
	#MYNET_REXT_GPIO_LED_POWER
 11

	)

34 
	#MYNET_REXT_GPIO_LED_ETHERNET
 12

	)

35 
	#MYNET_REXT_GPIO_LED_WIFI
 19

	)

37 
	#MYNET_REXT_GPIO_LED_RF_QTY1
 20

	)

38 
	#MYNET_REXT_GPIO_LED_RF_QTY2
 21

	)

39 
	#MYNET_REXT_GPIO_LED_RF_QTY3
 22

	)

41 
	#MYNET_REXT_GPIO_BTN_RESET
 13

	)

42 
	#MYNET_REXT_GPIO_BTN_WPS
 15

	)

43 
	#MYNET_REXT_GPIO_SW_RF
 14

	)

45 
	#MYNET_REXT_GPIO_PHY_SWRST
 16

	)

46 
	#MYNET_REXT_GPIO_PHY_INT
 17

	)

47 
	#MYNET_REXT_GPIO_18
 18

	)

49 
	#MYNET_REXT_KEYS_POLL_INTERVAL
 20

	)

50 
	#MYNET_REXT_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MYNET_REXT_KEYS_POLL_INTERVAL
)

	)

52 
	#MYNET_REXT_WMAC_CALDATA_OFFSET
 0x1000

	)

54 
	#MYNET_REXT_NVRAM_ADDR
 0x1f7e0010

	)

55 
	#MYNET_REXT_NVRAM_SIZE
 0xfff0

	)

57 
	#MYNET_REXT_ART_ADDR
 0x1f7f0000

	)

59 c⁄° *
	gmy√t_ªxt_∑π_¥obes
[] = {

61 
NULL
,

64 
Êash_∂©f‹m_d©a
 
	gmy√t_ªxt_Êash_d©a
 = {

65 .
ty≥
 = "s25fl064k",

66 .
	g∑π_¥obes
 = 
my√t_ªxt_∑π_¥obes
,

69 
gpio_Àd
 
	gmy√t_ªxt_Àds_gpio
[] 
	g__öôd©a
 = {

71 .
«me
 = "wd:blue:power",

72 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_POWER
,

73 .
	ga˘ive_low
 = 0,

76 .
	g«me
 = "wd:blue:wireless",

77 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_WIFI
,

78 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "wd:blue:ethernet",

82 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_ETHERNET
,

83 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "wd:blue:quality1",

87 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_RF_QTY1
,

88 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "wd:blue:quality2",

92 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_RF_QTY2
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "wd:blue:quality3",

97 .
	ggpio
 = 
MYNET_REXT_GPIO_LED_RF_QTY3
,

98 .
	ga˘ive_low
 = 1,

102 
gpio_keys_buâ⁄
 
	gmy√t_ªxt_gpio_keys
[] 
	g__öôd©a
 = {

104 .
desc
 = "Reset button",

105 .
	gty≥
 = 
EV_KEY
,

106 .
	gcode
 = 
KEY_RESTART
,

107 .
	gdeboun˚_öãrvÆ
 = 
MYNET_REXT_KEYS_DEBOUNCE_INTERVAL
,

108 .
	ggpio
 = 
MYNET_REXT_GPIO_BTN_RESET
,

109 .
	ga˘ive_low
 = 1,

112 .
	gdesc
 = "WPS button",

113 .
	gty≥
 = 
EV_KEY
,

114 .
	gcode
 = 
KEY_WPS_BUTTON
,

115 .
	gdeboun˚_öãrvÆ
 = 
MYNET_REXT_KEYS_DEBOUNCE_INTERVAL
,

116 .
	ggpio
 = 
MYNET_REXT_GPIO_BTN_WPS
,

117 .
	ga˘ive_low
 = 1,

120 .
	gdesc
 = "RF Band switch",

121 .
	gty≥
 = 
EV_SW
,

122 .
	gcode
 = 
BTN_1
,

123 .
	gdeboun˚_öãrvÆ
 = 
MYNET_REXT_KEYS_DEBOUNCE_INTERVAL
,

124 .
	ggpio
 = 
MYNET_REXT_GPIO_SW_RF
,

128 
©803x_∂©f‹m_d©a
 
	gmy√t_ªxt_©803x_d©a
 = {

129 .
dißbÀ_sm¨ãì
 = 0,

130 .
	gíabÀ_rgmii_rx_dñay
 = 1,

131 .
	gíabÀ_rgmii_tx_dñay
 = 0,

132 .
	gfixup_rgmii_tx_dñay
 = 1,

135 
mdio_bﬂrd_öfo
 
	gmy√t_ªxt_mdio0_öfo
[] = {

137 .
bus_id
 = "ag71xx-mdio.0",

138 .
	gmdio_addr
 = 4,

139 .
	g∂©f‹m_d©a
 = &
my√t_ªxt_©803x_d©a
,

143 
	$my√t_ªxt_gë_mac
(c⁄° *
«me
, *
mac
)

145 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
MYNET_REXT_NVRAM_ADDR
);

146 
îr
;

148 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
MYNET_REXT_NVRAM_SIZE
,

149 
«me
, 
mac
);

150 i‡(
îr
)

151 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

152 
	}
}

154 
__öô
 
	$my√t_ªxt_£tup
()

156 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
MYNET_REXT_ART_ADDR
);

157 
u8
 
tmpmac
[
ETH_ALEN
];

159 
	`©h79_ªgi°î_m25p80
(&
my√t_ªxt_Êash_d©a
);

163 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_POWER
,

164 
AR934X_GPIO_OUT_GPIO
);

165 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_WIFI
,

166 
AR934X_GPIO_OUT_GPIO
);

167 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_RF_QTY1
,

168 
AR934X_GPIO_OUT_GPIO
);

169 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_RF_QTY2
,

170 
AR934X_GPIO_OUT_GPIO
);

171 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_RF_QTY3
,

172 
AR934X_GPIO_OUT_GPIO
);

173 
	`©h79_gpio_ouçut_£À˘
(
MYNET_REXT_GPIO_LED_ETHERNET
,

174 
AR934X_GPIO_OUT_GPIO
);

175 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
my√t_ªxt_Àds_gpio
),

176 
my√t_ªxt_Àds_gpio
);

178 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MYNET_REXT_KEYS_POLL_INTERVAL
,

179 
	`ARRAY_SIZE
(
my√t_ªxt_gpio_keys
),

180 
my√t_ªxt_gpio_keys
);

182 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

183 
AR934X_ETH_CFG_RXD_DELAY
 |

184 
AR934X_ETH_CFG_RDV_DELAY
);

186 
	`©h79_ªgi°î_mdio
(0, 0x0);

188 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
my√t_ªxt_mdio0_öfo
,

189 
	`ARRAY_SIZE
(
my√t_ªxt_mdio0_öfo
));

192 
	`my√t_ªxt_gë_mac
("ë0maˇddr=", 
©h79_ëh0_d©a
.
mac_addr
);

195 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

196 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

197 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

198 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x0e000000;

199 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

200 
	`©h79_ªgi°î_ëh
(0);

203 
	`my√t_ªxt_gë_mac
("wl0_hwaddr=", 
tmpmac
);

204 
	`≠91_pci_öô
(
¨t
 + 
MYNET_REXT_WMAC_CALDATA_OFFSET
, 
tmpmac
);

205 
	}
}

207 
MIPS_MACHINE
(
ATH79_MACH_MYNET_REXT
, "MYNET-REXT",

208 "WD My Në Wi-FòR™gêExãndî", 
my√t_ªxt_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mzk-w04nu.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-Àds-gpio.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

21 
	#MZK_W04NU_GPIO_LED_USB
 0

	)

22 
	#MZK_W04NU_GPIO_LED_STATUS
 1

	)

23 
	#MZK_W04NU_GPIO_LED_WPS
 3

	)

24 
	#MZK_W04NU_GPIO_LED_WLAN
 6

	)

25 
	#MZK_W04NU_GPIO_LED_AP
 15

	)

26 
	#MZK_W04NU_GPIO_LED_ROUTER
 16

	)

28 
	#MZK_W04NU_GPIO_BTN_APROUTER
 5

	)

29 
	#MZK_W04NU_GPIO_BTN_WPS
 12

	)

30 
	#MZK_W04NU_GPIO_BTN_RESET
 21

	)

32 
	#MZK_W04NU_KEYS_POLL_INTERVAL
 20

	)

33 
	#MZK_W04NU_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MZK_W04NU_KEYS_POLL_INTERVAL
)

	)

35 
gpio_Àd
 
	gmzk_w04nu_Àds_gpio
[] 
	g__öôd©a
 = {

37 .
«me
 = "planex:green:status",

38 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_STATUS
,

39 .
	ga˘ive_low
 = 1,

41 .
	g«me
 = "planex:blue:wps",

42 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_WPS
,

43 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "planex:green:wlan",

46 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_WLAN
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "planex:green:usb",

50 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_USB
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "planex:green:ap",

54 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_AP
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "planex:green:router",

58 .
	ggpio
 = 
MZK_W04NU_GPIO_LED_ROUTER
,

59 .
	ga˘ive_low
 = 1,

63 
gpio_keys_buâ⁄
 
	gmzk_w04nu_gpio_keys
[] 
	g__öôd©a
 = {

65 .
desc
 = "reset",

66 .
	gty≥
 = 
EV_KEY
,

67 .
	gcode
 = 
KEY_RESTART
,

68 .
	gdeboun˚_öãrvÆ
 = 
MZK_W04NU_KEYS_DEBOUNCE_INTERVAL
,

69 .
	ggpio
 = 
MZK_W04NU_GPIO_BTN_RESET
,

70 .
	ga˘ive_low
 = 1,

72 .
	gdesc
 = "wps",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_WPS_BUTTON
,

75 .
	gdeboun˚_öãrvÆ
 = 
MZK_W04NU_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
MZK_W04NU_GPIO_BTN_WPS
,

77 .
	ga˘ive_low
 = 1,

79 .
	gdesc
 = "aprouter",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
BTN_2
,

82 .
	gdeboun˚_öãrvÆ
 = 
MZK_W04NU_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
MZK_W04NU_GPIO_BTN_APROUTER
,

84 .
	ga˘ive_low
 = 0,

88 
	#MZK_W04NU_WAN_PHYMASK
 
	`BIT
(4)

	)

89 
	#MZK_W04NU_MDIO_MASK
 (~
MZK_W04NU_WAN_PHYMASK
)

	)

91 
__öô
 
	$mzk_w04nu_£tup
()

93 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

95 
	`©h79_ªgi°î_mdio
(0, 
MZK_W04NU_MDIO_MASK
);

97 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
ì¥om
, 0);

98 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

99 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

100 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

101 
©h79_ëh0_d©a
.
has_¨8216
 = 1;

103 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
ì¥om
, 1);

104 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

105 
©h79_ëh1_d©a
.
phy_mask
 = 
MZK_W04NU_WAN_PHYMASK
;

107 
	`©h79_ªgi°î_ëh
(0);

108 
	`©h79_ªgi°î_ëh
(1);

110 
	`©h79_ªgi°î_m25p80
(
NULL
);

112 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
mzk_w04nu_Àds_gpio
),

113 
mzk_w04nu_Àds_gpio
);

115 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MZK_W04NU_KEYS_POLL_INTERVAL
,

116 
	`ARRAY_SIZE
(
mzk_w04nu_gpio_keys
),

117 
mzk_w04nu_gpio_keys
);

118 
	`©h79_ªgi°î_usb
();

120 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

121 
	}
}

123 
MIPS_MACHINE
(
ATH79_MACH_MZK_W04NU
, "MZK-W04NU", "Planex MZK-W04NU",

124 
mzk_w04nu_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-mzk-w300nh.c

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

21 
	#MZK_W300NH_GPIO_LED_STATUS
 1

	)

22 
	#MZK_W300NH_GPIO_LED_WPS
 3

	)

23 
	#MZK_W300NH_GPIO_LED_WLAN
 6

	)

24 
	#MZK_W300NH_GPIO_LED_AP_GREEN
 15

	)

25 
	#MZK_W300NH_GPIO_LED_AP_AMBER
 16

	)

27 
	#MZK_W300NH_GPIO_BTN_APROUTER
 5

	)

28 
	#MZK_W300NH_GPIO_BTN_WPS
 12

	)

29 
	#MZK_W300NH_GPIO_BTN_RESET
 21

	)

31 
	#MZK_W300NH_KEYS_POLL_INTERVAL
 20

	)

32 
	#MZK_W300NH_KEYS_DEBOUNCE_INTERVAL
 (3 * 
MZK_W300NH_KEYS_POLL_INTERVAL
)

	)

34 
gpio_Àd
 
	gmzk_w300nh_Àds_gpio
[] 
	g__öôd©a
 = {

36 .
«me
 = "planex:green:status",

37 .
	ggpio
 = 
MZK_W300NH_GPIO_LED_STATUS
,

38 .
	ga˘ive_low
 = 1,

40 .
	g«me
 = "planex:blue:wps",

41 .
	ggpio
 = 
MZK_W300NH_GPIO_LED_WPS
,

42 .
	ga˘ive_low
 = 1,

44 .
	g«me
 = "planex:green:wlan",

45 .
	ggpio
 = 
MZK_W300NH_GPIO_LED_WLAN
,

46 .
	ga˘ive_low
 = 1,

48 .
	g«me
 = "planex:green:aprouter",

49 .
	ggpio
 = 
MZK_W300NH_GPIO_LED_AP_GREEN
,

51 .
	g«me
 = "planex:amber:aprouter",

52 .
	ggpio
 = 
MZK_W300NH_GPIO_LED_AP_AMBER
,

56 
gpio_keys_buâ⁄
 
	gmzk_w300nh_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "reset",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
MZK_W300NH_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
MZK_W300NH_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

65 .
	gdesc
 = "wps",

66 .
	gty≥
 = 
EV_KEY
,

67 .
	gcode
 = 
KEY_WPS_BUTTON
,

68 .
	gdeboun˚_öãrvÆ
 = 
MZK_W300NH_KEYS_DEBOUNCE_INTERVAL
,

69 .
	ggpio
 = 
MZK_W300NH_GPIO_BTN_WPS
,

70 .
	ga˘ive_low
 = 1,

72 .
	gdesc
 = "aprouter",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
BTN_2
,

75 .
	gdeboun˚_öãrvÆ
 = 
MZK_W300NH_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
MZK_W300NH_GPIO_BTN_APROUTER
,

77 .
	ga˘ive_low
 = 0,

81 
	#MZK_W300NH_WAN_PHYMASK
 
	`BIT
(4)

	)

82 
	#MZK_W300NH_MDIO_MASK
 (~
MZK_W300NH_WAN_PHYMASK
)

	)

84 
__öô
 
	$mzk_w300nh_£tup
()

86 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

88 
	`©h79_ªgi°î_mdio
(0, 
MZK_W300NH_MDIO_MASK
);

90 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
ì¥om
, 0);

91 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

92 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

93 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

94 
©h79_ëh0_d©a
.
has_¨8216
 = 1;

96 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
ì¥om
, 1);

97 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

98 
©h79_ëh1_d©a
.
phy_mask
 = 
MZK_W300NH_WAN_PHYMASK
;

100 
	`©h79_ªgi°î_ëh
(0);

101 
	`©h79_ªgi°î_ëh
(1);

103 
	`©h79_ªgi°î_m25p80
(
NULL
);

105 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
mzk_w300nh_Àds_gpio
),

106 
mzk_w300nh_Àds_gpio
);

108 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
MZK_W300NH_KEYS_POLL_INTERVAL
,

109 
	`ARRAY_SIZE
(
mzk_w300nh_gpio_keys
),

110 
mzk_w300nh_gpio_keys
);

111 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

112 
	}
}

114 
MIPS_MACHINE
(
ATH79_MACH_MZK_W300NH
, "MZK-W300NH", "Planex MZK-W300NH",

115 
mzk_w300nh_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-n5q.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#N5Q_GPIO_LED_LAN
 19

	)

26 
	#N5Q_GPIO_LED_SIGNAL1
 0

	)

27 
	#N5Q_GPIO_LED_SIGNAL2
 1

	)

28 
	#N5Q_GPIO_LED_SIGNAL3
 2

	)

29 
	#N5Q_GPIO_LED_SIGNAL4
 3

	)

30 
	#N5Q_GPIO_LED_WAN
 18

	)

31 
	#N5Q_GPIO_LED_WLAN
 12

	)

33 
	#N5Q_GPIO_WDT_EN
 16

	)

34 
	#N5Q_GPIO_WDT_IN
 17

	)

36 
	#N5Q_GPIO_BTN_RESET
 11

	)

38 
	#N5Q_MAC0_OFFSET
 0

	)

39 
	#N5Q_MAC1_OFFSET
 6

	)

40 
	#N5Q_WMAC_CALDATA_OFFSET
 0x1000

	)

42 
	#N5Q_KEYS_POLL_INTERVAL
 20

	)

43 
	#N5Q_KEYS_DEBOUNCE_INTERVAL
 (3 * 
N5Q_KEYS_POLL_INTERVAL
)

	)

45 
gpio_Àd
 
	gn5q_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "n5q:green:lan",

48 .
	ggpio
 = 
N5Q_GPIO_LED_LAN
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "n5q:red:signal1",

52 .
	ggpio
 = 
N5Q_GPIO_LED_SIGNAL1
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "n5q:orange:signal2",

56 .
	ggpio
 = 
N5Q_GPIO_LED_SIGNAL2
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "n5q:green:signal3",

60 .
	ggpio
 = 
N5Q_GPIO_LED_SIGNAL3
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "n5q:green:signal4",

64 .
	ggpio
 = 
N5Q_GPIO_LED_SIGNAL4
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "n5q:green:wan",

68 .
	ggpio
 = 
N5Q_GPIO_LED_WAN
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "n5q:green:wlan",

72 .
	ggpio
 = 
N5Q_GPIO_LED_WLAN
,

73 .
	ga˘ive_low
 = 1,

77 
gpio_keys_buâ⁄
 
	gn5q_gpio_keys
[] 
	g__öôd©a
 = {

79 .
desc
 = "reset",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_RESTART
,

82 .
	gdeboun˚_öãrvÆ
 = 
N5Q_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
N5Q_GPIO_BTN_RESET
,

84 .
	ga˘ive_low
 = 1,

88 
__öô
 
	$n5q_£tup
()

90 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f070000);

92 
	`©h79_ªgi°î_m25p80
(
NULL
);

94 
	`©h79_ªgi°î_mdio
(1, 0x0);

96 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

97 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xf7;

100 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

101 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

102 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
N5Q_MAC1_OFFSET
, 0);

103 
	`©h79_ªgi°î_ëh
(1);

106 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

107 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

108 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

109 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

110 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

111 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
N5Q_MAC0_OFFSET
, 0);

112 
	`©h79_ªgi°î_ëh
(0);

114 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
n5q_Àds_gpio
),

115 
n5q_Àds_gpio
);

117 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
N5Q_KEYS_POLL_INTERVAL
,

118 
	`ARRAY_SIZE
(
n5q_gpio_keys
),

119 
n5q_gpio_keys
);

121 
	`gpio_ªque°_⁄e
(
N5Q_GPIO_WDT_IN
,

122 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

125 
	`gpio_ªque°_⁄e
(
N5Q_GPIO_WDT_EN
,

126 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

129 
	`©h79_ªgi°î_wmac
(
¨t
 + 
N5Q_WMAC_CALDATA_OFFSET
, 
NULL
);

130 
	}
}

132 
MIPS_MACHINE
(
ATH79_MACH_N5Q
, "N5Q", "ALFA Nëw‹k N5Q", 
n5q_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-nbg460n.c

13 
	~<löux/dñay.h
>

14 
	~<löux/i2c.h
>

15 
	~<löux/i2c-Ægo-bô.h
>

16 
	~<löux/i2c-gpio.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<löux/πl8366.h
>

22 
	~<asm/mach-©h79/©h79.h
>

24 
	~"dev-ëh.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-Àds-gpio.h
"

27 
	~"dev-m25p80.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

32 
	#NBG460N_GPIO_LED_WPS
 3

	)

33 
	#NBG460N_GPIO_LED_WAN
 6

	)

34 
	#NBG460N_GPIO_LED_POWER
 14

	)

35 
	#NBG460N_GPIO_LED_WLAN
 15

	)

38 
	#NBG460N_GPIO_BTN_WPS
 12

	)

39 
	#NBG460N_GPIO_BTN_RESET
 21

	)

41 
	#NBG460N_KEYS_POLL_INTERVAL
 20

	)

42 
	#NBG460N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
NBG460N_KEYS_POLL_INTERVAL
)

	)

45 
	#NBG460N_GPIO_PCF8563_SDA
 8

	)

46 
	#NBG460N_GPIO_PCF8563_SCK
 7

	)

49 
	#NBG460N_GPIO_RTL8366_SDA
 16

	)

50 
	#NBG460N_GPIO_RTL8366_SCK
 18

	)

52 
mtd_∑πôi⁄
 
	gnbg460n_∑πôi⁄s
[] = {

54 .
«me
 = "Bootbase",

55 .
	goff£t
 = 0,

56 .
	gsize
 = 0x010000,

57 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

59 .
	g«me
 = "U-Boot Config",

60 .
	goff£t
 = 0x010000,

61 .
	gsize
 = 0x030000,

63 .
	g«me
 = "U-Boot",

64 .
	goff£t
 = 0x040000,

65 .
	gsize
 = 0x030000,

67 .
	g«me
 = "linux",

68 .
	goff£t
 = 0x070000,

69 .
	gsize
 = 0x0e0000,

71 .
	g«me
 = "rootfs",

72 .
	goff£t
 = 0x150000,

73 .
	gsize
 = 0x2a0000,

75 .
	g«me
 = "CalibData",

76 .
	goff£t
 = 0x3f0000,

77 .
	gsize
 = 0x010000,

78 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

80 .
	g«me
 = "firmware",

81 .
	goff£t
 = 0x070000,

82 .
	gsize
 = 0x380000,

86 
Êash_∂©f‹m_d©a
 
	gnbg460n_Êash_d©a
 = {

87 .
∑πs
 = 
nbg460n_∑πôi⁄s
,

88 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
nbg460n_∑πôi⁄s
),

91 
gpio_Àd
 
	gnbg460n_Àds_gpio
[] 
	g__öôd©a
 = {

93 .
«me
 = "nbg460n:green:power",

94 .
	ggpio
 = 
NBG460N_GPIO_LED_POWER
,

95 .
	ga˘ive_low
 = 0,

96 .
	gdeÁu…_åiggî
 = "default-on",

98 .
	g«me
 = "nbg460n:green:wps",

99 .
	ggpio
 = 
NBG460N_GPIO_LED_WPS
,

100 .
	ga˘ive_low
 = 0,

102 .
	g«me
 = "nbg460n:green:wlan",

103 .
	ggpio
 = 
NBG460N_GPIO_LED_WLAN
,

104 .
	ga˘ive_low
 = 0,

108 .
	g«me
 = "nbg460n:green:wan",

109 .
	ggpio
 = 
NBG460N_GPIO_LED_WAN
,

110 .
	ga˘ive_low
 = 0,

114 
gpio_keys_buâ⁄
 
	gnbg460n_gpio_keys
[] 
	g__öôd©a
 = {

116 .
desc
 = "reset",

117 .
	gty≥
 = 
EV_KEY
,

118 .
	gcode
 = 
KEY_RESTART
,

119 .
	gdeboun˚_öãrvÆ
 = 
NBG460N_KEYS_DEBOUNCE_INTERVAL
,

120 .
	ggpio
 = 
NBG460N_GPIO_BTN_RESET
,

121 .
	ga˘ive_low
 = 1,

123 .
	gdesc
 = "wps",

124 .
	gty≥
 = 
EV_KEY
,

125 .
	gcode
 = 
KEY_WPS_BUTTON
,

126 .
	gdeboun˚_öãrvÆ
 = 
NBG460N_KEYS_DEBOUNCE_INTERVAL
,

127 .
	ggpio
 = 
NBG460N_GPIO_BTN_WPS
,

128 .
	ga˘ive_low
 = 1,

132 
i2c_gpio_∂©f‹m_d©a
 
	gnbg460n_i2c_devi˚_∂©d©a
 = {

133 .
sda_pö
 = 
NBG460N_GPIO_PCF8563_SDA
,

134 .
	gs˛_pö
 = 
NBG460N_GPIO_PCF8563_SCK
,

135 .
	gudñay
 = 10,

138 
∂©f‹m_devi˚
 
	gnbg460n_i2c_devi˚
 = {

139 .
«me
 = "i2c-gpio",

140 .
	gid
 = -1,

141 .
	gnum_ªsour˚s
 = 0,

142 .
	gªsour˚
 = 
NULL
,

143 .
	gdev
 = {

144 .
∂©f‹m_d©a
 = &
nbg460n_i2c_devi˚_∂©d©a
,

148 
i2c_bﬂrd_öfo
 
	gnbg460n_i2c_devs
[] 
	g__öôd©a
 = {

150 
I2C_BOARD_INFO
("pcf8563", 0x51),

154 
	$nbg460n_i2c_öô
()

157 
	`∂©f‹m_devi˚_ªgi°î
(&
nbg460n_i2c_devi˚
);

159 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
nbg460n_i2c_devs
,

160 
	`ARRAY_SIZE
(
nbg460n_i2c_devs
));

161 
	}
}

164 
πl8366_∂©f‹m_d©a
 
	gnbg460n_πl8366s_d©a
 = {

165 .
gpio_sda
 = 
NBG460N_GPIO_RTL8366_SDA
,

166 .
	ggpio_sck
 = 
NBG460N_GPIO_RTL8366_SCK
,

169 
∂©f‹m_devi˚
 
	gnbg460n_πl8366s_devi˚
 = {

170 .
«me
 = 
RTL8366S_DRIVER_NAME
,

171 .
	gid
 = -1,

172 .
	gdev
 = {

173 .
∂©f‹m_d©a
 = &
nbg460n_πl8366s_d©a
,

177 
__öô
 
	$nbg460n_£tup
()

180 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fc0fff8);

182 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

185 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

186 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
nbg460n_πl8366s_devi˚
.
dev
;

187 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

188 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

189 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

192 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

193 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
nbg460n_πl8366s_devi˚
.
dev
;

194 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

195 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

197 
	`©h79_ªgi°î_ëh
(0);

198 
	`©h79_ªgi°î_ëh
(1);

201 
	`∂©f‹m_devi˚_ªgi°î
(&
nbg460n_πl8366s_devi˚
);

204 
	`©h79_ªgi°î_m25p80
(&
nbg460n_Êash_d©a
);

206 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

209 
	`nbg460n_i2c_öô
();

211 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
nbg460n_Àds_gpio
),

212 
nbg460n_Àds_gpio
);

214 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
NBG460N_KEYS_POLL_INTERVAL
,

215 
	`ARRAY_SIZE
(
nbg460n_gpio_keys
),

216 
nbg460n_gpio_keys
);

217 
	}
}

219 
MIPS_MACHINE
(
ATH79_MACH_NBG460N
, "NBG460N", "Zyxel NBG460N/550N/550NH",

220 
nbg460n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-nbg6716.c

23 
	~<löux/vîsi⁄.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<löux/gpio.h
>

27 
	~<löux/mtd/mtd.h
>

28 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

29 
	~<löux/mtd/«nd.h
>

31 
	~<löux/mtd/øw«nd.h
>

33 
	~<löux/∂©f‹m/¨934x_nfc.h
>

35 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

37 
	~"comm⁄.h
"

38 
	~"pci.h
"

39 
	~"dev-≠9x-pci.h
"

40 
	~"dev-gpio-buâ⁄s.h
"

41 
	~"dev-ëh.h
"

42 
	~"dev-Àds-gpio.h
"

43 
	~"dev-nfc.h
"

44 
	~"dev-m25p80.h
"

45 
	~"dev-usb.h
"

46 
	~"dev-wmac.h
"

47 
	~"machty≥s.h
"

48 
	~"nvøm.h
"

50 
	#NBG6716_GPIO_LED_INTERNET
 18

	)

51 
	#NBG6716_GPIO_LED_POWER
 15

	)

52 
	#NBG6716_GPIO_LED_USB1
 4

	)

53 
	#NBG6716_GPIO_LED_USB2
 13

	)

54 
	#NBG6716_GPIO_LED_WIFI2G
 19

	)

55 
	#NBG6716_GPIO_LED_WIFI5G
 17

	)

56 
	#NBG6716_GPIO_LED_WPS
 21

	)

58 
	#NBG6716_GPIO_BTN_RESET
 23

	)

59 
	#NBG6716_GPIO_BTN_RFKILL
 1

	)

60 
	#NBG6716_GPIO_BTN_USB1
 0

	)

61 
	#NBG6716_GPIO_BTN_USB2
 14

	)

62 
	#NBG6716_GPIO_BTN_WPS
 22

	)

64 
	#NBG6716_GPIO_USB_POWER
 16

	)

66 
	#NBG6716_KEYS_POLL_INTERVAL
 20

	)

67 
	#NBG6716_KEYS_DEBOUNCE_INTERVAL
 (3 * 
NBG6716_KEYS_POLL_INTERVAL
)

	)

69 
	#NBG6716_MAC0_OFFSET
 0

	)

70 
	#NBG6716_MAC1_OFFSET
 6

	)

71 
	#NBG6716_WMAC_CALDATA_OFFSET
 0x1000

	)

72 
	#NBG6716_PCIE_CALDATA_OFFSET
 0x5000

	)

75 
	#NBG6616_GPIO_LED_USB0
 14

	)

76 
	#NBG6616_GPIO_LED_USB1
 21

	)

77 
	#NBG6616_GPIO_LED_WPS
 0

	)

79 
gpio_Àd
 
	gnbg6716_Àds_gpio
[] 
	g__öôd©a
 = {

81 .
«me
 = "nbg6716:white:internet",

82 .
	ggpio
 = 
NBG6716_GPIO_LED_INTERNET
,

83 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "nbg6716:white:power",

87 .
	ggpio
 = 
NBG6716_GPIO_LED_POWER
,

88 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "nbg6716:white:usb1",

92 .
	ggpio
 = 
NBG6716_GPIO_LED_USB1
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "nbg6716:white:usb2",

97 .
	ggpio
 = 
NBG6716_GPIO_LED_USB2
,

98 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "nbg6716:white:wifi2g",

102 .
	ggpio
 = 
NBG6716_GPIO_LED_WIFI2G
,

103 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "nbg6716:white:wifi5g",

107 .
	ggpio
 = 
NBG6716_GPIO_LED_WIFI5G
,

108 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "nbg6716:white:wps",

112 .
	ggpio
 = 
NBG6716_GPIO_LED_WPS
,

113 .
	ga˘ive_low
 = 1,

117 
gpio_keys_buâ⁄
 
	gnbg6716_gpio_keys
[] 
	g__öôd©a
 = {

119 .
desc
 = "RESET button",

120 .
	gty≥
 = 
EV_KEY
,

121 .
	gcode
 = 
KEY_RESTART
,

122 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

123 .
	ggpio
 = 
NBG6716_GPIO_BTN_RESET
,

124 .
	ga˘ive_low
 = 1,

127 .
	gdesc
 = "RFKILL button",

128 .
	gty≥
 = 
EV_SW
,

129 .
	gcode
 = 
KEY_RFKILL
,

130 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

131 .
	ggpio
 = 
NBG6716_GPIO_BTN_RFKILL
,

132 .
	ga˘ive_low
 = 0,

135 .
	gdesc
 = "USB1Éject button",

136 .
	gty≥
 = 
EV_KEY
,

137 .
	gcode
 = 
BTN_1
,

138 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

139 .
	ggpio
 = 
NBG6716_GPIO_BTN_USB1
,

140 .
	ga˘ive_low
 = 1,

143 .
	gdesc
 = "USB2Éject button",

144 .
	gty≥
 = 
EV_KEY
,

145 .
	gcode
 = 
BTN_2
,

146 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

147 .
	ggpio
 = 
NBG6716_GPIO_BTN_USB2
,

148 .
	ga˘ive_low
 = 1,

151 .
	gdesc
 = "WPS button",

152 .
	gty≥
 = 
EV_KEY
,

153 .
	gcode
 = 
KEY_WPS_BUTTON
,

154 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

155 .
	ggpio
 = 
NBG6716_GPIO_BTN_WPS
,

156 .
	ga˘ive_low
 = 1,

162 
gpio_Àd
 
	gnbg6616_Àds_gpio
[] 
	g__öôd©a
 = {

164 .
«me
 = "nbg6616:green:power",

165 .
	ggpio
 = 
NBG6716_GPIO_LED_POWER
,

166 .
	ga˘ive_low
 = 1,

169 .
	g«me
 = "nbg6616:green:usb2",

170 .
	ggpio
 = 
NBG6616_GPIO_LED_USB0
,

171 .
	ga˘ive_low
 = 1,

174 .
	g«me
 = "nbg6616:green:usb1",

175 .
	ggpio
 = 
NBG6616_GPIO_LED_USB1
,

176 .
	ga˘ive_low
 = 1,

179 .
	g«me
 = "nbg6616:green:wifi2g",

180 .
	ggpio
 = 
NBG6716_GPIO_LED_WIFI2G
,

181 .
	ga˘ive_low
 = 1,

184 .
	g«me
 = "nbg6616:green:wifi5g",

185 .
	ggpio
 = 
NBG6716_GPIO_LED_WIFI5G
,

186 .
	ga˘ive_low
 = 1,

189 .
	g«me
 = "nbg6616:green:wps",

190 .
	ggpio
 = 
NBG6616_GPIO_LED_WPS
,

191 .
	ga˘ive_low
 = 1,

195 
gpio_keys_buâ⁄
 
	gnbg6616_gpio_keys
[] 
	g__öôd©a
 = {

197 .
desc
 = "RESET button",

198 .
	gty≥
 = 
EV_KEY
,

199 .
	gcode
 = 
KEY_RESTART
,

200 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

201 .
	ggpio
 = 
NBG6716_GPIO_BTN_RESET
,

202 .
	ga˘ive_low
 = 1,

205 .
	gdesc
 = "RFKILL button",

206 .
	gty≥
 = 
EV_KEY
,

207 .
	gcode
 = 
KEY_RFKILL
,

208 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

209 .
	ggpio
 = 
NBG6716_GPIO_BTN_RFKILL
,

210 .
	ga˘ive_low
 = 1,

213 .
	gdesc
 = "WPS button",

214 .
	gty≥
 = 
EV_KEY
,

215 .
	gcode
 = 
KEY_WPS_BUTTON
,

216 .
	gdeboun˚_öãrvÆ
 = 
NBG6716_KEYS_DEBOUNCE_INTERVAL
,

217 .
	ggpio
 = 
NBG6716_GPIO_BTN_WPS
,

218 .
	ga˘ive_low
 = 1,

223 
¨8327_∑d_cfg
 
	gnbg6716_¨8327_∑d0_cfg
;

224 
¨8327_∑d_cfg
 
	gnbg6716_¨8327_∑d6_cfg
;

225 
¨8327_Àd_cfg
 
	gnbg6716_¨8327_Àd_cfg
;

227 
¨8327_∂©f‹m_d©a
 
	gnbg6716_¨8327_d©a
 = {

228 .
∑d0_cfg
 = &
nbg6716_¨8327_∑d0_cfg
,

229 .
	g∑d6_cfg
 = &
nbg6716_¨8327_∑d6_cfg
,

230 .
	gp‹t0_cfg
 = {

231 .
f‹˚_lök
 = 1,

232 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

233 .
	gdu∂ex
 = 1,

234 .
	gtx∑u£
 = 1,

235 .
	grx∑u£
 = 1,

237 .
	gp‹t6_cfg
 = {

238 .
f‹˚_lök
 = 1,

239 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

240 .
	gdu∂ex
 = 1,

241 .
	gtx∑u£
 = 1,

242 .
	grx∑u£
 = 1,

244 .
	gÀd_cfg
 = &
nbg6716_¨8327_Àd_cfg


247 
mdio_bﬂrd_öfo
 
	gnbg6716_mdio0_öfo
[] = {

249 .
bus_id
 = "ag71xx-mdio.0",

250 .
	gmdio_addr
 = 0,

251 .
	g∂©f‹m_d©a
 = &
nbg6716_¨8327_d©a
,

255 
	$nbg6716_gë_mac
(* 
nvøm_addr
, c⁄° *
«me
, *
mac
)

257 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
nvøm_addr
);

258 
îr
;

260 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 0x10000,

261 
«me
, 
mac
);

262 i‡(
îr
)

263 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

264 
	}
}

266 
__öô
 
	$nbg6716_comm⁄_£tup
(
u32
 
Àds_num
, 
gpio_Àd
* 
Àds
,

267 
u32
 
keys_num
,

268 
gpio_keys_buâ⁄
* 
keys
,

269 * 
¨t_addr
, * 
nvøm
)

271 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
¨t_addr
);

272 
u8
 
tmpmac
[
ETH_ALEN
];

274 
	`©h79_ªgi°î_m25p80
(
NULL
);

276 
	`©h79_ªgi°î_Àds_gpio
(-1, 
Àds_num
, 
Àds
);

277 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
NBG6716_KEYS_POLL_INTERVAL
,

278 
keys_num
, 
keys
);

280 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

281 
	`©h79_ªgi°î_nfc
();

283 
	`gpio_ªque°_⁄e
(
NBG6716_GPIO_USB_POWER
,

284 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

287 
	`©h79_ªgi°î_usb
();

289 
	`nbg6716_gë_mac
(
nvøm
, "ëhaddr=", 
tmpmac
);

291 
	`©h79_ªgi°î_pci
();

293 
	`©h79_ªgi°î_wmac
(
¨t
 + 
NBG6716_WMAC_CALDATA_OFFSET
, 
tmpmac
);

295 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

297 
	`©h79_ªgi°î_mdio
(0, 0x0);

299 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
tmpmac
, 2);

300 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
tmpmac
, 3);

302 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
nbg6716_mdio0_öfo
,

303 
	`ARRAY_SIZE
(
nbg6716_mdio0_öfo
));

306 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

307 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

308 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

310 
	`©h79_ªgi°î_ëh
(0);

313 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

314 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

315 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

317 
	`©h79_ªgi°î_ëh
(1);

318 
	}
}

320 
__öô
 
	$nbg6716_010_£tup
()

323 
nbg6716_¨8327_∑d0_cfg
.
mode
 = 
AR8327_PAD_MAC_RGMII
;

324 
nbg6716_¨8327_∑d0_cfg
.
tx˛k_dñay_í
 = 
åue
;

325 
nbg6716_¨8327_∑d0_cfg
.
rx˛k_dñay_í
 = 
åue
;

326 
nbg6716_¨8327_∑d0_cfg
.
tx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
;

327 
nbg6716_¨8327_∑d0_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
;

330 
nbg6716_¨8327_∑d6_cfg
.
mode
 = 
AR8327_PAD_MAC_SGMII
;

331 
nbg6716_¨8327_∑d6_cfg
.
rx˛k_dñay_í
 = 
åue
;

332 
nbg6716_¨8327_∑d6_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
;

334 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

335 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

337 
nbg6716_¨8327_Àd_cfg
.
›í_døö
 = 0;

338 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ0
 = 0xffb7ffb7;

339 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ1
 = 0xffb7ffb7;

340 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ2
 = 0xffb7ffb7;

341 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ3
 = 0x03ffff00;

343 
	`nbg6716_comm⁄_£tup
(
	`ARRAY_SIZE
(
nbg6716_Àds_gpio
),Çbg6716_leds_gpio,

344 
	`ARRAY_SIZE
(
nbg6716_gpio_keys
),Çbg6716_gpio_keys,

346 
	}
}

348 
__öô
 
	$nbg6616_010_£tup
()

351 
nbg6716_¨8327_∑d0_cfg
.
mode
 = 
AR8327_PAD_MAC_RGMII
;

352 
nbg6716_¨8327_∑d0_cfg
.
tx˛k_dñay_í
 = 
åue
;

353 
nbg6716_¨8327_∑d0_cfg
.
rx˛k_dñay_í
 = 
åue
;

354 
nbg6716_¨8327_∑d0_cfg
.
tx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
;

355 
nbg6716_¨8327_∑d0_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
;

358 
nbg6716_¨8327_∑d6_cfg
.
mode
 = 
AR8327_PAD_MAC_SGMII
;

359 
nbg6716_¨8327_∑d6_cfg
.
rx˛k_dñay_í
 = 
åue
;

360 
nbg6716_¨8327_∑d6_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
;

362 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

363 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

365 
nbg6716_¨8327_Àd_cfg
.
›í_døö
 = 0;

366 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ0
 = 0xffb7ffb7;

367 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ1
 = 0xffb7ffb7;

368 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ2
 = 0xffb7ffb7;

369 
nbg6716_¨8327_Àd_cfg
.
Àd_˘æ3
 = 0x03ffff00;

372 
	`nbg6716_comm⁄_£tup
(
	`ARRAY_SIZE
(
nbg6616_Àds_gpio
),Çbg6616_leds_gpio,

373 
	`ARRAY_SIZE
(
nbg6616_gpio_keys
),Çbg6616_gpio_keys,

375 
	}
}

378 
MIPS_MACHINE
(
ATH79_MACH_NBG6716
, "NBG6716",

380 
nbg6716_010_£tup
);

382 
MIPS_MACHINE
(
ATH79_MACH_NBG6616
, "NBG6616",

384 
nbg6616_010_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-om2p.c

11 
	~<löux/gpio.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#OM2P_GPIO_LED_POWER
 0

	)

29 
	#OM2P_GPIO_LED_GREEN
 13

	)

30 
	#OM2P_GPIO_LED_RED
 14

	)

31 
	#OM2P_GPIO_LED_YELLOW
 15

	)

32 
	#OM2P_GPIO_LED_LAN
 16

	)

33 
	#OM2P_GPIO_LED_WAN
 17

	)

34 
	#OM2P_GPIO_BTN_RESET
 1

	)

36 
	#OM2P_KEYS_POLL_INTERVAL
 20

	)

37 
	#OM2P_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OM2P_KEYS_POLL_INTERVAL
)

	)

39 
	#OM2P_WAN_PHYMASK
 
	`BIT
(4)

	)

41 
	#OM2P_LC_GPIO_LED_POWER
 1

	)

42 
	#OM2P_LC_GPIO_LED_GREEN
 15

	)

43 
	#OM2P_LC_GPIO_LED_RED
 16

	)

44 
	#OM2P_LC_GPIO_LED_YELLOW
 0

	)

45 
	#OM2P_LC_GPIO_LED_LAN
 13

	)

46 
	#OM2P_LC_GPIO_LED_WAN
 17

	)

47 
	#OM2P_LC_GPIO_BTN_RESET
 12

	)

49 
	#OM2Pv4_GPIO_LED_POWER
 0

	)

50 
	#OM2Pv4_GPIO_LED_GREEN
 2

	)

51 
	#OM2Pv4_GPIO_LED_RED
 4

	)

52 
	#OM2Pv4_GPIO_LED_YELLOW
 3

	)

53 
	#OM2Pv4_GPIO_LED_LAN
 14

	)

54 
	#OM2Pv4_GPIO_LED_WAN
 13

	)

55 
	#OM2Pv4_GPIO_BTN_RESET
 1

	)

57 
	#OM2P_WMAC_CALDATA_OFFSET
 0x1000

	)

59 
Êash_∂©f‹m_d©a
 
	gom2p_Êash_d©a
 = {

60 .
ty≥
 = "s25sl12800",

61 .
	g«me
 = "ar7240-nor0",

64 
gpio_Àd
 
	gom2p_Àds_gpio
[] 
	g__öôd©a
 = {

66 .
«me
 = "om2p:blue:power",

67 .
	ggpio
 = 
OM2P_GPIO_LED_POWER
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "om2p:red:wifi",

71 .
	ggpio
 = 
OM2P_GPIO_LED_RED
,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "om2p:yellow:wifi",

75 .
	ggpio
 = 
OM2P_GPIO_LED_YELLOW
,

76 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "om2p:green:wifi",

79 .
	ggpio
 = 
OM2P_GPIO_LED_GREEN
,

80 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "om2p:blue:lan",

83 .
	ggpio
 = 
OM2P_GPIO_LED_LAN
,

84 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "om2p:blue:wan",

87 .
	ggpio
 = 
OM2P_GPIO_LED_WAN
,

88 .
	ga˘ive_low
 = 1,

92 
gpio_keys_buâ⁄
 
	gom2p_gpio_keys
[] 
	g__öôd©a
 = {

94 .
desc
 = "reset",

95 .
	gty≥
 = 
EV_KEY
,

96 .
	gcode
 = 
KEY_RESTART
,

97 .
	gdeboun˚_öãrvÆ
 = 
OM2P_KEYS_DEBOUNCE_INTERVAL
,

98 .
	ggpio
 = 
OM2P_GPIO_BTN_RESET
,

99 .
	ga˘ive_low
 = 1,

103 
__öô
 
	$om2p_£tup
()

105 
u8
 *
mac1
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000);

106 
u8
 *
mac2
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000 + 
ETH_ALEN
);

107 
u8
 *
ì
 = (u8 *)
	`KSEG1ADDR
(0x1ffc1000);

109 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

110 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

111 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

112 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

113 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

115 
	`©h79_ªgi°î_m25p80
(&
om2p_Êash_d©a
);

117 
	`©h79_ªgi°î_mdio
(0, ~
OM2P_WAN_PHYMASK
);

119 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

120 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

122 
	`©h79_ªgi°î_ëh
(0);

123 
	`©h79_ªgi°î_ëh
(1);

125 
	`≠91_pci_öô
(
ì
, 
NULL
);

127 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om2p_Àds_gpio
),

128 
om2p_Àds_gpio
);

130 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM2P_KEYS_POLL_INTERVAL
,

131 
	`ARRAY_SIZE
(
om2p_gpio_keys
),

132 
om2p_gpio_keys
);

133 
	}
}

135 
MIPS_MACHINE
(
ATH79_MACH_OM2P
, "OM2P", "O≥nMesh OM2P", 
om2p_£tup
);

138 
Êash_∂©f‹m_d©a
 
	gom2p_lc_Êash_d©a
 = {

139 .
ty≥
 = "s25sl12800",

142 
__öô
 
	$om2p_lc_£tup
()

144 
u8
 *
mac1
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000);

145 
u8
 *
mac2
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000 + 
ETH_ALEN
);

146 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1ffc1000);

147 
u32
 
t
;

149 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

150 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

151 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

152 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

153 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

155 
t
 = 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
);

156 
t
 |
AR933X_BOOTSTRAP_MDIO_GPIO_EN
;

157 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
, 
t
);

159 
	`©h79_ªgi°î_m25p80
(&
om2p_lc_Êash_d©a
);

161 
om2p_Àds_gpio
[0].
gpio
 = 
OM2P_LC_GPIO_LED_POWER
;

162 
om2p_Àds_gpio
[1].
gpio
 = 
OM2P_LC_GPIO_LED_RED
;

163 
om2p_Àds_gpio
[2].
gpio
 = 
OM2P_LC_GPIO_LED_YELLOW
;

164 
om2p_Àds_gpio
[3].
gpio
 = 
OM2P_LC_GPIO_LED_GREEN
;

165 
om2p_Àds_gpio
[4].
gpio
 = 
OM2P_LC_GPIO_LED_LAN
;

166 
om2p_Àds_gpio
[5].
gpio
 = 
OM2P_LC_GPIO_LED_WAN
;

167 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om2p_Àds_gpio
),

168 
om2p_Àds_gpio
);

170 
om2p_gpio_keys
[0].
gpio
 = 
OM2P_LC_GPIO_BTN_RESET
;

171 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM2P_KEYS_POLL_INTERVAL
,

172 
	`ARRAY_SIZE
(
om2p_gpio_keys
),

173 
om2p_gpio_keys
);

175 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

176 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

178 
	`©h79_ªgi°î_mdio
(0, 0x0);

180 
	`©h79_ªgi°î_ëh
(0);

181 
	`©h79_ªgi°î_ëh
(1);

183 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

184 
	}
}

186 
MIPS_MACHINE
(
ATH79_MACH_OM2P_LC
, "OM2P-LC", "O≥nMesh OM2P LC", 
om2p_lc_£tup
);

187 
MIPS_MACHINE
(
ATH79_MACH_OM2Pv2
, "OM2Pv2", "O≥nMesh OM2Pv2", 
om2p_lc_£tup
);

189 
__öô
 
	$om2p_hs_£tup
()

191 
u8
 *
mac1
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000);

192 
u8
 *
mac2
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000 + 
ETH_ALEN
);

193 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1ffc1000);

196 
	`©h79_gpio_ouçut_£À˘
(
OM2P_GPIO_LED_LAN
, 
AR934X_GPIO_OUT_GPIO
);

197 
	`©h79_gpio_ouçut_£À˘
(
OM2P_GPIO_LED_WAN
, 
AR934X_GPIO_OUT_GPIO
);

200 
	`©h79_gpio_ouçut_£À˘
(
OM2P_GPIO_BTN_RESET
, 
AR934X_GPIO_OUT_GPIO
);

201 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

203 
om2p_Àds_gpio
[4].
gpio
 = 
OM2P_GPIO_LED_WAN
;

204 
om2p_Àds_gpio
[5].
gpio
 = 
OM2P_GPIO_LED_LAN
;

206 
	`©h79_ªgi°î_m25p80
(&
om2p_lc_Êash_d©a
);

207 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om2p_Àds_gpio
),

208 
om2p_Àds_gpio
);

209 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM2P_KEYS_POLL_INTERVAL
,

210 
	`ARRAY_SIZE
(
om2p_gpio_keys
),

211 
om2p_gpio_keys
);

213 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

215 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

216 
	`©h79_ªgi°î_mdio
(1, 0x0);

218 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

219 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

222 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

223 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

224 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

225 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

226 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

227 
	`©h79_ªgi°î_ëh
(0);

230 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

231 
	`©h79_ªgi°î_ëh
(1);

232 
	}
}

234 
MIPS_MACHINE
(
ATH79_MACH_OM2P_HS
, "OM2P-HS", "O≥nMesh OM2P HS", 
om2p_hs_£tup
);

235 
MIPS_MACHINE
(
ATH79_MACH_OM2P_HSv2
, "OM2P-HSv2", "O≥nMesh OM2P HSv2", 
om2p_hs_£tup
);

236 
MIPS_MACHINE
(
ATH79_MACH_OM2P_HSv3
, "OM2P-HSv3", "O≥nMesh OM2P HSv3", 
om2p_hs_£tup
);

238 
Êash_∂©f‹m_d©a
 
	gom2pv4_Êash_d©a
 = {

239 .
ty≥
 = "s25sl12800",

242 
gpio_Àd
 
	gom2pv4_Àds_gpio
[] 
	g__öôd©a
 = {

244 .
«me
 = "om2p:blue:power",

245 .
	ggpio
 = 
OM2Pv4_GPIO_LED_POWER
,

246 .
	ga˘ive_low
 = 1,

248 .
	g«me
 = "om2p:red:wifi",

249 .
	ggpio
 = 
OM2Pv4_GPIO_LED_RED
,

250 .
	ga˘ive_low
 = 1,

252 .
	g«me
 = "om2p:yellow:wifi",

253 .
	ggpio
 = 
OM2Pv4_GPIO_LED_YELLOW
,

254 .
	ga˘ive_low
 = 1,

256 .
	g«me
 = "om2p:green:wifi",

257 .
	ggpio
 = 
OM2Pv4_GPIO_LED_GREEN
,

258 .
	ga˘ive_low
 = 1,

260 .
	g«me
 = "om2p:blue:lan",

261 .
	ggpio
 = 
OM2Pv4_GPIO_LED_LAN
,

262 .
	ga˘ive_low
 = 1,

264 .
	g«me
 = "om2p:blue:wan",

265 .
	ggpio
 = 
OM2Pv4_GPIO_LED_WAN
,

266 .
	ga˘ive_low
 = 1,

270 
gpio_keys_buâ⁄
 
	gom2pv4_gpio_keys
[] 
	g__öôd©a
 = {

272 .
desc
 = "reset",

273 .
	gty≥
 = 
EV_KEY
,

274 .
	gcode
 = 
KEY_RESTART
,

275 .
	gdeboun˚_öãrvÆ
 = 
OM2P_KEYS_DEBOUNCE_INTERVAL
,

276 .
	ggpio
 = 
OM2Pv4_GPIO_BTN_RESET
,

277 .
	ga˘ive_low
 = 1,

281 
__öô
 
	$om2pv4_£tup
()

283 
u8
 *
mac1
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000);

284 
u8
 *
mac2
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000 + 
ETH_ALEN
);

285 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1ffc0000);

286 
u8
 
wmac
[6];

288 
	`©h79_ªgi°î_m25p80
(&
om2pv4_Êash_d©a
);

289 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om2pv4_Àds_gpio
),

290 
om2pv4_Àds_gpio
);

291 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM2P_KEYS_POLL_INTERVAL
,

292 
	`ARRAY_SIZE
(
om2pv4_gpio_keys
),

293 
om2pv4_gpio_keys
);

295 
	`©h79_öô_mac
(
wmac
, 
¨t
, 0x02);

296 
	`©h79_ªgi°î_wmac
(
¨t
 + 
OM2P_WMAC_CALDATA_OFFSET
, 
wmac
);

298 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

300 
	`©h79_ªgi°î_mdio
(0, 0x0);

303 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

304 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

305 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

306 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

307 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

308 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

309 
	`©h79_ªgi°î_ëh
(0);

312 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

313 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

314 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

315 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

316 
	`©h79_ªgi°î_ëh
(1);

317 
	}
}

319 
MIPS_MACHINE
(
ATH79_MACH_OM2Pv4
, "OM2Pv4", "O≥nMesh OM2Pv4", 
om2pv4_£tup
);

320 
MIPS_MACHINE
(
ATH79_MACH_OM2P_HSv4
, "OM2P-HSv4", "O≥nMesh OM2P HSv4", 
om2pv4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-om5p.c

12 
	~<löux/gpio.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/i2c.h
>

17 
	~<löux/i2c-Ægo-bô.h
>

18 
	~<löux/i2c-gpio.h
>

19 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~<asm/mach-©h79/©h79.h
>

24 
	~"comm⁄.h
"

25 
	~"dev-≠9x-pci.h
"

26 
	~"dev-ëh.h
"

27 
	~"dev-gpio-buâ⁄s.h
"

28 
	~"dev-Àds-gpio.h
"

29 
	~"dev-m25p80.h
"

30 
	~"dev-wmac.h
"

31 
	~"machty≥s.h
"

33 
	#OM5P_GPIO_LED_POWER
 13

	)

34 
	#OM5P_GPIO_LED_GREEN
 16

	)

35 
	#OM5P_GPIO_LED_RED
 19

	)

36 
	#OM5P_GPIO_LED_YELLOW
 17

	)

37 
	#OM5P_GPIO_LED_LAN
 14

	)

38 
	#OM5P_GPIO_LED_WAN
 15

	)

39 
	#OM5P_GPIO_BTN_RESET
 4

	)

40 
	#OM5P_GPIO_I2C_SCL
 20

	)

41 
	#OM5P_GPIO_I2C_SDA
 21

	)

43 
	#OM5P_KEYS_POLL_INTERVAL
 20

	)

44 
	#OM5P_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OM5P_KEYS_POLL_INTERVAL
)

	)

46 
	#OM5P_WMAC_CALDATA_OFFSET
 0x1000

	)

47 
	#OM5P_PCI_CALDATA_OFFSET
 0x5000

	)

49 
gpio_Àd
 
	gom5p_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "om5p:blue:power",

52 .
	ggpio
 = 
OM5P_GPIO_LED_POWER
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "om5p:red:wifi",

56 .
	ggpio
 = 
OM5P_GPIO_LED_RED
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "om5p:yellow:wifi",

60 .
	ggpio
 = 
OM5P_GPIO_LED_YELLOW
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "om5p:green:wifi",

64 .
	ggpio
 = 
OM5P_GPIO_LED_GREEN
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "om5p:blue:lan",

68 .
	ggpio
 = 
OM5P_GPIO_LED_LAN
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "om5p:blue:wan",

72 .
	ggpio
 = 
OM5P_GPIO_LED_WAN
,

73 .
	ga˘ive_low
 = 1,

77 
gpio_keys_buâ⁄
 
	gom5p_gpio_keys
[] 
	g__öôd©a
 = {

79 .
desc
 = "reset",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_RESTART
,

82 .
	gdeboun˚_öãrvÆ
 = 
OM5P_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
OM5P_GPIO_BTN_RESET
,

84 .
	ga˘ive_low
 = 1,

88 
Êash_∂©f‹m_d©a
 
	gom5p_Êash_d©a
 = {

89 .
ty≥
 = "mx25l12805d",

92 
__öô
 
	$om5p_£tup
()

94 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

95 
u8
 
mac
[6];

98 
	`©h79_gpio_ouçut_£À˘
(
OM5P_GPIO_LED_LAN
, 
AR934X_GPIO_OUT_GPIO
);

99 
	`©h79_gpio_ouçut_£À˘
(
OM5P_GPIO_LED_WAN
, 
AR934X_GPIO_OUT_GPIO
);

101 
	`©h79_ªgi°î_m25p80
(&
om5p_Êash_d©a
);

102 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om5p_Àds_gpio
),

103 
om5p_Àds_gpio
);

104 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM5P_KEYS_POLL_INTERVAL
,

105 
	`ARRAY_SIZE
(
om5p_gpio_keys
),

106 
om5p_gpio_keys
);

108 
	`©h79_öô_mac
(
mac
, 
¨t
, 2);

109 
	`©h79_ªgi°î_wmac
(
¨t
 + 
OM5P_WMAC_CALDATA_OFFSET
, 
mac
);

111 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

112 
	`©h79_ªgi°î_mdio
(1, 0x0);

114 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

115 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 1);

118 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

119 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

120 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

121 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

122 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

123 
	`©h79_ªgi°î_ëh
(0);

126 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

127 
	`©h79_ªgi°î_ëh
(1);

128 
	}
}

130 
MIPS_MACHINE
(
ATH79_MACH_OM5P
, "OM5P", "O≥nMesh OM5P", 
om5p_£tup
);

132 
i2c_gpio_∂©f‹m_d©a
 
	gom5∑n_i2c_devi˚_∂©d©a
 = {

133 .
sda_pö
 = 
OM5P_GPIO_I2C_SDA
,

134 .
	gs˛_pö
 = 
OM5P_GPIO_I2C_SCL
,

135 .
	gudñay
 = 10,

136 .
	gsda_is_›í_døö
 = 1,

137 .
	gs˛_is_›í_døö
 = 1,

140 
∂©f‹m_devi˚
 
	gom5∑n_i2c_devi˚
 = {

141 .
«me
 = "i2c-gpio",

142 .
	gid
 = 0,

143 .
	gdev
 = {

144 .
∂©f‹m_d©a
 = &
om5∑n_i2c_devi˚_∂©d©a
,

148 
i2c_bﬂrd_öfo
 
	gom5∑n_i2c_devs
[] 
	g__öôd©a
 = {

150 
I2C_BOARD_INFO
("tmp423", 0x4c),

154 
©803x_∂©f‹m_d©a
 
	gom5p_™_©803x_d©a
 = {

155 .
dißbÀ_sm¨ãì
 = 1,

156 .
	gíabÀ_rgmii_rx_dñay
 = 1,

157 .
	gíabÀ_rgmii_tx_dñay
 = 1,

160 
mdio_bﬂrd_öfo
 
	gom5p_™_mdio0_öfo
[] = {

162 .
bus_id
 = "ag71xx-mdio.0",

163 .
	gmdio_addr
 = 7,

164 .
	g∂©f‹m_d©a
 = &
om5p_™_©803x_d©a
,

168 
__öô
 
	$om5p_™_£tup
()

170 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

171 
u8
 
mac
[6];

174 
	`∂©f‹m_devi˚_ªgi°î
(&
om5∑n_i2c_devi˚
);

175 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
om5∑n_i2c_devs
,

176 
	`ARRAY_SIZE
(
om5∑n_i2c_devs
));

179 
	`©h79_gpio_ouçut_£À˘
(
OM5P_GPIO_LED_LAN
, 
AR934X_GPIO_OUT_GPIO
);

180 
	`©h79_gpio_ouçut_£À˘
(
OM5P_GPIO_LED_WAN
, 
AR934X_GPIO_OUT_GPIO
);

182 
	`©h79_ªgi°î_m25p80
(&
om5p_Êash_d©a
);

183 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om5p_Àds_gpio
),

184 
om5p_Àds_gpio
);

186 
	`©h79_öô_mac
(
mac
, 
¨t
, 0x02);

187 
	`©h79_ªgi°î_wmac
(
¨t
 + 
OM5P_WMAC_CALDATA_OFFSET
, 
mac
);

189 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

190 
	`©h79_£tup_¨934x_ëh_rx_dñay
(2, 2);

191 
	`©h79_ªgi°î_mdio
(0, 0x0);

192 
	`©h79_ªgi°î_mdio
(1, 0x0);

194 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
om5p_™_mdio0_öfo
,

195 
	`ARRAY_SIZE
(
om5p_™_mdio0_öfo
));

197 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0x00);

198 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 0x01);

201 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

202 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

203 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(7);

204 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x02000000;

205 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x00000101;

206 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

207 
	`©h79_ªgi°î_ëh
(0);

210 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

211 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

212 
	`©h79_ªgi°î_ëh
(1);

214 
	`©h79_öô_mac
(
mac
, 
¨t
, 0x10);

215 
	`≠91_pci_öô
(
¨t
 + 
OM5P_PCI_CALDATA_OFFSET
, 
mac
);

216 
	}
}

218 
MIPS_MACHINE
(
ATH79_MACH_OM5P_AN
, "OM5P-AN", "O≥nMesh OM5P AN", 
om5p_™_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-om5pac.c

12 
	~<löux/gpio.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/i2c.h
>

17 
	~<löux/i2c-Ægo-bô.h
>

18 
	~<löux/i2c-gpio.h
>

19 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~<asm/mach-©h79/©h79.h
>

24 
	~"comm⁄.h
"

25 
	~"dev-≠9x-pci.h
"

26 
	~"dev-ëh.h
"

27 
	~"dev-Àds-gpio.h
"

28 
	~"dev-m25p80.h
"

29 
	~"dev-wmac.h
"

30 
	~"machty≥s.h
"

31 
	~"pci.h
"

33 
	#OM5PAC_GPIO_LED_POWER
 18

	)

34 
	#OM5PAC_GPIO_LED_GREEN
 21

	)

35 
	#OM5PAC_GPIO_LED_RED
 23

	)

36 
	#OM5PAC_GPIO_LED_YELLOW
 22

	)

37 
	#OM5PAC_GPIO_LED_LAN
 20

	)

38 
	#OM5PAC_GPIO_LED_WAN
 19

	)

39 
	#OM5PAC_GPIO_I2C_SCL
 12

	)

40 
	#OM5PAC_GPIO_I2C_SDA
 11

	)

42 
	#OM5PAC_KEYS_POLL_INTERVAL
 20

	)

43 
	#OM5PAC_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OM5PAC_KEYS_POLL_INTERVAL
)

	)

45 
	#OM5PAC_WMAC_CALDATA_OFFSET
 0x1000

	)

47 
gpio_Àd
 
	gom5∑c_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "om5pac:blue:power",

50 .
	ggpio
 = 
OM5PAC_GPIO_LED_POWER
,

51 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "om5pac:red:wifi",

54 .
	ggpio
 = 
OM5PAC_GPIO_LED_RED
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "om5pac:yellow:wifi",

58 .
	ggpio
 = 
OM5PAC_GPIO_LED_YELLOW
,

59 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "om5pac:green:wifi",

62 .
	ggpio
 = 
OM5PAC_GPIO_LED_GREEN
,

63 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "om5pac:blue:lan",

66 .
	ggpio
 = 
OM5PAC_GPIO_LED_LAN
,

67 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "om5pac:blue:wan",

70 .
	ggpio
 = 
OM5PAC_GPIO_LED_WAN
,

71 .
	ga˘ive_low
 = 1,

75 
Êash_∂©f‹m_d©a
 
	gom5∑c_Êash_d©a
 = {

76 .
ty≥
 = "mx25l12805d",

79 
i2c_gpio_∂©f‹m_d©a
 
	gom5∑c_i2c_devi˚_∂©d©a
 = {

80 .
sda_pö
 = 
OM5PAC_GPIO_I2C_SDA
,

81 .
	gs˛_pö
 = 
OM5PAC_GPIO_I2C_SCL
,

82 .
	gudñay
 = 10,

83 .
	gsda_is_›í_døö
 = 1,

84 .
	gs˛_is_›í_døö
 = 1,

87 
∂©f‹m_devi˚
 
	gom5∑c_i2c_devi˚
 = {

88 .
«me
 = "i2c-gpio",

89 .
	gid
 = 0,

90 .
	gdev
 = {

91 .
∂©f‹m_d©a
 = &
om5∑c_i2c_devi˚_∂©d©a
,

95 
i2c_bﬂrd_öfo
 
	gom5∑c_i2c_devs
[] 
	g__öôd©a
 = {

97 
I2C_BOARD_INFO
("tmp423", 0x4c),

101 
©803x_∂©f‹m_d©a
 
	gom5∑c_©803x_d©a
 = {

102 .
dißbÀ_sm¨ãì
 = 1,

103 .
	gíabÀ_rgmii_rx_dñay
 = 1,

104 .
	gíabÀ_rgmii_tx_dñay
 = 1,

107 
mdio_bﬂrd_öfo
 
	gom5∑c_mdio0_öfo
[] = {

109 .
bus_id
 = "ag71xx-mdio.0",

110 .
	gmdio_addr
 = 1,

111 .
	g∂©f‹m_d©a
 = &
om5∑c_©803x_d©a
,

114 .
	gbus_id
 = "ag71xx-mdio.0",

115 .
	gmdio_addr
 = 2,

116 .
	g∂©f‹m_d©a
 = &
om5∑c_©803x_d©a
,

120 
__öô
 
	$om5p_ac_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

121 
rxd
,

122 
rxdv
,

123 
txd
,

124 
txe
)

126 
__iomem
 *
ba£
;

127 
u32
 
t
;

129 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

131 
t
 = 
mask
;

132 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

133 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

134 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

135 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

137 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

139 
	`iounm≠
(
ba£
);

140 
	}
}

142 
__öô
 
	$om5p_ac_£tup
()

144 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

145 
u8
 
mac
[6];

148 
	`∂©f‹m_devi˚_ªgi°î
(&
om5∑c_i2c_devi˚
);

149 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
om5∑c_i2c_devs
,

150 
	`ARRAY_SIZE
(
om5∑c_i2c_devs
));

152 
	`©h79_gpio_ouçut_£À˘
(
OM5PAC_GPIO_LED_WAN
, 
QCA955X_GPIO_OUT_GPIO
);

154 
	`©h79_ªgi°î_m25p80
(&
om5∑c_Êash_d©a
);

155 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om5∑c_Àds_gpio
),

156 
om5∑c_Àds_gpio
);

158 
	`©h79_öô_mac
(
mac
, 
¨t
, 0x02);

159 
	`©h79_ªgi°î_wmac
(
¨t
 + 
OM5PAC_WMAC_CALDATA_OFFSET
, 
mac
);

161 
	`om5p_ac_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 3, 3, 0, 0);

162 
	`©h79_ªgi°î_mdio
(0, 0x0);

164 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
om5∑c_mdio0_öfo
,

165 
	`ARRAY_SIZE
(
om5∑c_mdio0_öfo
));

167 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0x00);

168 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 0x01);

171 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

172 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

173 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(1);

174 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x82000101;

175 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x80000101;

176 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

177 
	`©h79_ªgi°î_ëh
(0);

180 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

181 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

182 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(2);

183 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

184 
©h79_ëh1_∂l_d©a
.
∂l_100
 = 0x80000101;

185 
©h79_ëh1_∂l_d©a
.
∂l_10
 = 0x80001313;

186 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

187 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

188 
	`©h79_ªgi°î_ëh
(1);

190 
	`©h79_ªgi°î_pci
();

191 
	}
}

193 
MIPS_MACHINE
(
ATH79_MACH_OM5P_AC
, "OM5P-AC", "O≥nMesh OM5P AC", 
om5p_ac_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-om5pacv2.c

13 
	~<löux/gpio.h
>

14 
	~<löux/mtd/mtd.h
>

15 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/i2c.h
>

18 
	~<löux/i2c-Ægo-bô.h
>

19 
	~<löux/i2c-gpio.h
>

20 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

22 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~<asm/mach-©h79/©h79.h
>

25 
	~"comm⁄.h
"

26 
	~"dev-≠9x-pci.h
"

27 
	~"dev-ëh.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-m25p80.h
"

31 
	~"dev-wmac.h
"

32 
	~"machty≥s.h
"

33 
	~"pci.h
"

35 
	#OM5PACV2_GPIO_LED_POWER
 14

	)

36 
	#OM5PACV2_GPIO_LED_GREEN
 13

	)

37 
	#OM5PACV2_GPIO_LED_RED
 23

	)

38 
	#OM5PACV2_GPIO_LED_YELLOW
 15

	)

39 
	#OM5PACV2_GPIO_BTN_RESET
 1

	)

40 
	#OM5PACV2_GPIO_I2C_SCL
 18

	)

41 
	#OM5PACV2_GPIO_I2C_SDA
 19

	)

42 
	#OM5PACV2_GPIO_PA_DCDC
 2

	)

43 
	#OM5PACV2_GPIO_PA_HIGH
 16

	)

45 
	#OM5PACV2_KEYS_POLL_INTERVAL
 20

	)

46 
	#OM5PACV2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OM5PACV2_KEYS_POLL_INTERVAL
)

	)

48 
	#OM5PACV2_WMAC_CALDATA_OFFSET
 0x1000

	)

50 
gpio_Àd
 
	gom5∑cv2_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "om5pac:blue:power",

53 .
	ggpio
 = 
OM5PACV2_GPIO_LED_POWER
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "om5pac:red:wifi",

57 .
	ggpio
 = 
OM5PACV2_GPIO_LED_RED
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "om5pac:yellow:wifi",

61 .
	ggpio
 = 
OM5PACV2_GPIO_LED_YELLOW
,

62 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "om5pac:green:wifi",

65 .
	ggpio
 = 
OM5PACV2_GPIO_LED_GREEN
,

66 .
	ga˘ive_low
 = 1,

70 
gpio_keys_buâ⁄
 
	gom5∑cv2_gpio_keys
[] 
	g__öôd©a
 = {

72 .
desc
 = "reset",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_RESTART
,

75 .
	gdeboun˚_öãrvÆ
 = 
OM5PACV2_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
OM5PACV2_GPIO_BTN_RESET
,

77 .
	ga˘ive_low
 = 1,

81 
i2c_gpio_∂©f‹m_d©a
 
	gom5∑cv2_i2c_devi˚_∂©d©a
 = {

82 .
sda_pö
 = 
OM5PACV2_GPIO_I2C_SDA
,

83 .
	gs˛_pö
 = 
OM5PACV2_GPIO_I2C_SCL
,

84 .
	gudñay
 = 10,

85 .
	gsda_is_›í_døö
 = 1,

86 .
	gs˛_is_›í_døö
 = 1,

89 
∂©f‹m_devi˚
 
	gom5∑cv2_i2c_devi˚
 = {

90 .
«me
 = "i2c-gpio",

91 .
	gid
 = 0,

92 .
	gdev
 = {

93 .
∂©f‹m_d©a
 = &
om5∑cv2_i2c_devi˚_∂©d©a
,

97 
i2c_bﬂrd_öfo
 
	gom5∑cv2_i2c_devs
[] 
	g__öôd©a
 = {

99 
I2C_BOARD_INFO
("tmp423", 0x4e),

103 
Êash_∂©f‹m_d©a
 
	gom5∑cv2_Êash_d©a
 = {

104 .
ty≥
 = "mx25l12805d",

107 
©803x_∂©f‹m_d©a
 
	gom5∑cv2_™_©803x_d©a
 = {

108 .
dißbÀ_sm¨ãì
 = 1,

109 .
	gíabÀ_rgmii_rx_dñay
 = 1,

110 .
	gíabÀ_rgmii_tx_dñay
 = 1,

113 
©803x_∂©f‹m_d©a
 
	gom5∑cv2_™_©8031_d©a
 = {

114 .
dißbÀ_sm¨ãì
 = 1,

115 .
	gíabÀ_rgmii_rx_dñay
 = 1,

116 .
	gíabÀ_rgmii_tx_dñay
 = 1,

119 
mdio_bﬂrd_öfo
 
	gom5∑cv2_™_mdio0_öfo
[] = {

121 .
bus_id
 = "ag71xx-mdio.0",

122 .
	gmdio_addr
 = 4,

123 .
	g∂©f‹m_d©a
 = &
om5∑cv2_™_©803x_d©a
,

126 .
	gbus_id
 = "ag71xx-mdio.1",

127 .
	gmdio_addr
 = 1,

128 .
	g∂©f‹m_d©a
 = &
om5∑cv2_™_©8031_d©a
,

132 
__öô
 
	$om5p_acv2_£tup_qˇ955x_ëh_cfg
(
u32
 
mask
,

133 
rxd
,

134 
rxdv
,

135 
txd
,

136 
txe
)

138 
__iomem
 *
ba£
;

139 
u32
 
t
;

141 
ba£
 = 
	`i‹em≠
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

143 
t
 = 
mask
;

144 
t
 |
rxd
 << 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
;

145 
t
 |
rxdv
 << 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
;

146 
t
 |
txd
 << 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
;

147 
t
 |
txe
 << 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
;

149 
	`__øw_wrôñ
(
t
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

151 
	`iounm≠
(
ba£
);

152 
	}
}

154 
__öô
 
	$om5p_acv2_£tup
()

156 
u8
 *
¨t
 = (u8 *)
	`KSEG1ADDR
(0x1fff0000);

157 
u8
 
mac
[6];

160 
	`©h79_gpio_fun˘i⁄_íabÀ
(
QCA955X_GPIO_FUNC_JTAG_DISABLE
);

161 
	`©h79_gpio_ouçut_£À˘
(
OM5PACV2_GPIO_PA_DCDC
, 
QCA955X_GPIO_OUT_GPIO
);

162 
	`©h79_gpio_ouçut_£À˘
(
OM5PACV2_GPIO_PA_HIGH
, 
QCA955X_GPIO_OUT_GPIO
);

163 
	`gpio_ªque°_⁄e
(
OM5PACV2_GPIO_PA_DCDC
, 
GPIOF_OUT_INIT_HIGH
,

165 
	`gpio_ªque°_⁄e
(
OM5PACV2_GPIO_PA_HIGH
, 
GPIOF_OUT_INIT_HIGH
, "PA HIGH");

168 
	`∂©f‹m_devi˚_ªgi°î
(&
om5∑cv2_i2c_devi˚
);

169 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
om5∑cv2_i2c_devs
,

170 
	`ARRAY_SIZE
(
om5∑cv2_i2c_devs
));

172 
	`©h79_ªgi°î_m25p80
(&
om5∑cv2_Êash_d©a
);

173 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
om5∑cv2_Àds_gpio
),

174 
om5∑cv2_Àds_gpio
);

175 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OM5PACV2_KEYS_POLL_INTERVAL
,

176 
	`ARRAY_SIZE
(
om5∑cv2_gpio_keys
),

177 
om5∑cv2_gpio_keys
);

179 
	`©h79_öô_mac
(
mac
, 
¨t
, 0x02);

180 
	`©h79_ªgi°î_wmac
(
¨t
 + 
OM5PACV2_WMAC_CALDATA_OFFSET
, 
mac
);

182 
	`om5p_acv2_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
, 2, 2, 0, 0);

183 
	`©h79_ªgi°î_mdio
(0, 0x0);

184 
	`©h79_ªgi°î_mdio
(1, 0x0);

186 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
om5∑cv2_™_mdio0_öfo
,

187 
	`ARRAY_SIZE
(
om5∑cv2_™_mdio0_öfo
));

189 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0x00);

190 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 0x01);

193 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

194 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

195 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

196 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x82000101;

197 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x80000101;

198 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

199 
	`©h79_ªgi°î_ëh
(0);

202 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

203 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

204 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(1);

205 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

206 
©h79_ëh1_∂l_d©a
.
∂l_100
 = 0x80000101;

207 
©h79_ëh1_∂l_d©a
.
∂l_10
 = 0x80001313;

208 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

209 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

210 
	`©h79_ªgi°î_ëh
(1);

212 
	`©h79_ªgi°î_pci
();

213 
	}
}

215 
MIPS_MACHINE
(
ATH79_MACH_OM5P_ACv2
, "OM5P-ACv2", "O≥nMesh OM5P ACv2", 
om5p_acv2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-omy-g1.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#OMY_G1_GPIO_LED_WLAN
 13

	)

27 
	#OMY_G1_GPIO_LED_WAN
 18

	)

28 
	#OMY_G1_GPIO_LED_LAN
 19

	)

30 
	#OMY_G1_GPIO_USB_POWER
 4

	)

32 
	#OMY_G1_GPIO_BTN_RESET
 17

	)

34 
	#OMY_G1_KEYS_POLL_INTERVAL
 20

	)

35 
	#OMY_G1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OMY_G1_KEYS_POLL_INTERVAL
)

	)

37 c⁄° *
	gomy_g1_∑π_¥obes
[] = {

39 
NULL
,

42 
Êash_∂©f‹m_d©a
 
	gomy_g1_Êash_d©a
 = {

43 .
∑π_¥obes
 = 
omy_g1_∑π_¥obes
,

46 
gpio_Àd
 
	gomy_g1_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "omy:green:wlan",

49 .
	ggpio
 = 
OMY_G1_GPIO_LED_WLAN
,

50 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "omy:green:wan",

53 .
	ggpio
 = 
OMY_G1_GPIO_LED_WAN
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "omy:green:lan",

57 .
	ggpio
 = 
OMY_G1_GPIO_LED_LAN
,

58 .
	ga˘ive_low
 = 1,

62 
gpio_keys_buâ⁄
 
	gomy_g1_gpio_keys
[] 
	g__öôd©a
 = {

64 .
desc
 = "Reset button",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
KEY_RESTART
,

67 .
	gdeboun˚_öãrvÆ
 = 
OMY_G1_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 
OMY_G1_GPIO_BTN_RESET
,

69 .
	ga˘ive_low
 = 1,

73 
__öô
 
	$omy_g1_£tup
()

75 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

76 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

78 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

79 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

81 
	`©h79_ªgi°î_m25p80
(&
omy_g1_Êash_d©a
);

83 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
omy_g1_Àds_gpio
),

84 
omy_g1_Àds_gpio
);

86 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
OMY_G1_KEYS_POLL_INTERVAL
,

87 
	`ARRAY_SIZE
(
omy_g1_gpio_keys
),

88 
omy_g1_gpio_keys
);

90 
	`©h79_gpio_ouçut_£À˘
(
OMY_G1_GPIO_USB_POWER
,

91 
AR934X_GPIO_OUT_GPIO
);

93 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

95 
	`©h79_ªgi°î_mdio
(1, 0x0);

97 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

98 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

100 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

101 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

102 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

103 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

104 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

105 
	`©h79_ªgi°î_ëh
(0);

107 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

108 
	`©h79_ªgi°î_ëh
(1);

110 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

112 
	`©h79_gpio_ouçut_£À˘
(
OMY_G1_GPIO_USB_POWER
,

113 
AR934X_GPIO_OUT_GPIO
);

115 
	`gpio_ªque°_⁄e
(
OMY_G1_GPIO_USB_POWER
,

116 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

119 
	`©h79_ªgi°î_usb
();

120 
	}
}

122 
MIPS_MACHINE
(
ATH79_MACH_OMY_G1
, "OMY-G1", "OMYlink OMY-G1",

123 
omy_g1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-omy-x1.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

27 
	#OMY_X1_GPIO_LED_POWER
 19

	)

28 
	#OMY_X1_GPIO_LED_WAN
 22

	)

30 
	#OMY_X1_GPIO_BTN_RESET
 17

	)

32 
	#OMY_X1_KEYS_POLL_INTERVAL
 20

	)

33 
	#OMY_X1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OMY_X1_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	gomy_x1_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gomy_x1_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
omy_x1_∑π_¥obes
,

44 
gpio_Àd
 
	gomy_x1_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "omy:green:wan",

47 .
	ggpio
 = 
OMY_X1_GPIO_LED_WAN
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "omy:green:power",

51 .
	ggpio
 = 
OMY_X1_GPIO_LED_POWER
,

52 .
	ga˘ive_low
 = 1,

56 
gpio_keys_buâ⁄
 
	gomy_x1_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "Reset button",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
OMY_X1_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
OMY_X1_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

67 
__öô
 
	$omy_x1_£tup
()

69 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

70 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

72 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

73 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

75 
	`©h79_ªgi°î_m25p80
(&
omy_x1_Êash_d©a
);

77 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
omy_x1_Àds_gpio
),

78 
omy_x1_Àds_gpio
);

80 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
OMY_X1_KEYS_POLL_INTERVAL
,

81 
	`ARRAY_SIZE
(
omy_x1_gpio_keys
),

82 
omy_x1_gpio_keys
);

84 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

86 
	`©h79_ªgi°î_mdio
(1, 0x0);

88 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

89 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

91 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

92 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

93 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

94 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

95 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

96 
	`©h79_ªgi°î_ëh
(0);

98 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

99 
	`©h79_ªgi°î_ëh
(1);

101 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

103 
	}
}

105 
MIPS_MACHINE
(
ATH79_MACH_OMY_X1
, "OMY-X1", "OMYlink OMY-X1",

106 
omy_x1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-onion-omega.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-usb.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#OMEGA_GPIO_LED_SYSTEM
 27

	)

24 
	#OMEGA_GPIO_BTN_RESET
 11

	)

26 
	#OMEGA_GPIO_USB_POWER
 8

	)

28 
	#OMEGA_KEYS_POLL_INTERVAL
 20

	)

29 
	#OMEGA_KEYS_DEBOUNCE_INTERVAL
 (3 * 
OMEGA_KEYS_POLL_INTERVAL
)

	)

31 c⁄° *
	gomega_∑π_¥obes
[] = {

33 
NULL
,

36 
Êash_∂©f‹m_d©a
 
	gomega_Êash_d©a
 = {

37 .
∑π_¥obes
 = 
omega_∑π_¥obes
,

40 
gpio_Àd
 
	gomega_Àds_gpio
[] 
	g__öôd©a
 = {

42 .
«me
 = "onion:amber:system",

43 .
	ggpio
 = 
OMEGA_GPIO_LED_SYSTEM
,

44 .
	ga˘ive_low
 = 1,

48 
gpio_keys_buâ⁄
 
	gomega_gpio_keys
[] 
	g__öôd©a
 = {

50 .
desc
 = "reset",

51 .
	gty≥
 = 
EV_KEY
,

52 .
	gcode
 = 
KEY_RESTART
,

53 .
	gdeboun˚_öãrvÆ
 = 
OMEGA_KEYS_DEBOUNCE_INTERVAL
,

54 .
	ggpio
 = 
OMEGA_GPIO_BTN_RESET
,

55 .
	ga˘ive_low
 = 0,

59 
__öô
 
	$⁄i⁄_omega_£tup
()

61 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

62 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

64 
	`©h79_ªgi°î_m25p80
(&
omega_Êash_d©a
);

65 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
omega_Àds_gpio
),

66 
omega_Àds_gpio
);

67 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
OMEGA_KEYS_POLL_INTERVAL
,

68 
	`ARRAY_SIZE
(
omega_gpio_keys
),

69 
omega_gpio_keys
);

71 
	`gpio_ªque°_⁄e
(
OMEGA_GPIO_USB_POWER
,

72 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

74 
	`©h79_ªgi°î_usb
();

76 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

78 
	`©h79_ªgi°î_mdio
(0, 0x0);

79 
	`©h79_ªgi°î_ëh
(0);

81 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

82 
	}
}

84 
MIPS_MACHINE
(
ATH79_MACH_ONION_OMEGA
, "ONION-OMEGA", "Oni⁄ Omega", 
⁄i⁄_omega_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-pb42.c

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"machty≥s.h
"

19 
	~"pci.h
"

21 
	#PB42_KEYS_POLL_INTERVAL
 20

	)

22 
	#PB42_KEYS_DEBOUNCE_INTERVAL
 (3 * 
PB42_KEYS_POLL_INTERVAL
)

	)

24 
	#PB42_GPIO_BTN_SW4
 8

	)

25 
	#PB42_GPIO_BTN_SW5
 3

	)

27 
gpio_keys_buâ⁄
 
	gpb42_gpio_keys
[] 
	g__öôd©a
 = {

29 .
desc
 = "sw4",

30 .
	gty≥
 = 
EV_KEY
,

31 .
	gcode
 = 
BTN_0
,

32 .
	gdeboun˚_öãrvÆ
 = 
PB42_KEYS_DEBOUNCE_INTERVAL
,

33 .
	ggpio
 = 
PB42_GPIO_BTN_SW4
,

34 .
	ga˘ive_low
 = 1,

36 .
	gdesc
 = "sw5",

37 .
	gty≥
 = 
EV_KEY
,

38 .
	gcode
 = 
BTN_1
,

39 .
	gdeboun˚_öãrvÆ
 = 
PB42_KEYS_DEBOUNCE_INTERVAL
,

40 .
	ggpio
 = 
PB42_GPIO_BTN_SW5
,

41 .
	ga˘ive_low
 = 1,

45 c⁄° *
	gpb42_∑π_¥obes
[] = {

47 
NULL
,

50 
Êash_∂©f‹m_d©a
 
	gpb42_Êash_d©a
 = {

51 .
∑π_¥obes
 = 
pb42_∑π_¥obes
,

54 
	#PB42_WAN_PHYMASK
 
	`BIT
(20)

	)

55 
	#PB42_LAN_PHYMASK
 (
	`BIT
(16Ë| BIT(17Ë| BIT(18Ë| BIT(19))

	)

56 
	#PB42_MDIO_PHYMASK
 (
PB42_LAN_PHYMASK
 | 
PB42_WAN_PHYMASK
)

	)

58 
__öô
 
	$pb42_öô
()

60 
	`©h79_ªgi°î_m25p80
(&
pb42_Êash_d©a
);

62 
	`©h79_ªgi°î_mdio
(0, ~
PB42_MDIO_PHYMASK
);

64 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

65 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

66 
©h79_ëh0_d©a
.
phy_mask
 = 
PB42_WAN_PHYMASK
;

68 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

69 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

70 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_100
;

71 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

73 
	`©h79_ªgi°î_ëh
(0);

74 
	`©h79_ªgi°î_ëh
(1);

76 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
PB42_KEYS_POLL_INTERVAL
,

77 
	`ARRAY_SIZE
(
pb42_gpio_keys
),

78 
pb42_gpio_keys
);

80 
	`©h79_ªgi°î_pci
();

81 
	}
}

83 
MIPS_MACHINE
(
ATH79_MACH_PB42
, "PB42", "Athîo†PB42", 
pb42_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-pqi-air-pen.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#PQI_AIR_PEN_GPIO_LED_WLAN
 0

	)

25 
	#PQI_AIR_PEN_GPIO_LED_WPS
 23

	)

27 
	#PQI_AIR_PEN_GPIO_BTN_WPS
 22

	)

28 
	#PQI_AIR_PEN_GPIO_BTN_RESET
 12

	)

30 
	#PQI_AIR_PEN_KEYS_POLL_INTERVAL
 20

	)

31 
	#PQI_AIR_PEN_KEYS_DEBOUNCE_INTERVAL
 (3 * 
PQI_AIR_PEN_KEYS_POLL_INTERVAL
)

	)

33 
	#PQI_AIR_PEN_WMAC_CALDATA_OFFSET
 0x1000

	)

34 
	#PQI_AIR_PEN_LAN_MAC_OFFSET
 0x1002

	)

35 
	#PQI_AIR_PEN_WMAC_MAC_OFFSET
 0x1002

	)

37 
gpio_Àd
 
	gpqi_aú_≥n_Àds_gpio
[] 
	g__öôd©a
 = {

39 .
«me
 = "pqi-air-pen:blue:wlan",

40 .
	ggpio
 = 
PQI_AIR_PEN_GPIO_LED_WLAN
,

41 .
	ga˘ive_low
 = 0,

44 .
	g«me
 = "pqi-air-pen:blue:wps",

45 .
	ggpio
 = 
PQI_AIR_PEN_GPIO_LED_WPS
,

46 .
	ga˘ive_low
 = 0,

50 
gpio_keys_buâ⁄
 
	gpqi_aú_≥n_gpio_keys
[] 
	g__öôd©a
 = {

52 .
desc
 = "wps",

53 .
	gty≥
 = 
EV_KEY
,

54 .
	gcode
 = 
KEY_WPS_BUTTON
,

55 .
	gdeboun˚_öãrvÆ
 = 
PQI_AIR_PEN_KEYS_DEBOUNCE_INTERVAL
,

56 .
	ggpio
 = 
PQI_AIR_PEN_GPIO_BTN_WPS
,

57 .
	ga˘ive_low
 = 0,

60 .
	gdesc
 = "reset",

61 .
	gty≥
 = 
EV_KEY
,

62 .
	gcode
 = 
KEY_RESTART
,

63 .
	gdeboun˚_öãrvÆ
 = 
PQI_AIR_PEN_KEYS_DEBOUNCE_INTERVAL
,

64 .
	ggpio
 = 
PQI_AIR_PEN_GPIO_BTN_RESET
,

65 .
	ga˘ive_low
 = 0,

69 
__öô
 
	$pqi_aú_≥n_£tup
()

72 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x9f050000);

75 
	`©h79_ªgi°î_m25p80
(
NULL
);

78 
	`©h79_ªgi°î_wmac
(
¨t
 + 
PQI_AIR_PEN_WMAC_CALDATA_OFFSET
,áπ + 
PQI_AIR_PEN_WMAC_MAC_OFFSET
);

81 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

84 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
pqi_aú_≥n_Àds_gpio
),

85 
pqi_aú_≥n_Àds_gpio
);

86 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
PQI_AIR_PEN_KEYS_POLL_INTERVAL
,

87 
	`ARRAY_SIZE
(
pqi_aú_≥n_gpio_keys
),

88 
pqi_aú_≥n_gpio_keys
);

91 
	`©h79_ªgi°î_usb
();

94 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
PQI_AIR_PEN_LAN_MAC_OFFSET
, 0);

95 
	`©h79_ªgi°î_mdio
(0, 0x0);

96 
	`©h79_ªgi°î_ëh
(0);

97 
	}
}

99 
MIPS_MACHINE
(
ATH79_MACH_PQI_AIR_PEN
, "PQI-AIR-PEN", "PQI Aú Pí",
pqi_aú_≥n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-qihoo-c301.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

30 
	~"nvøm.h
"

32 
	#QIHOO_C301_GPIO_LED_STATUS_GREEN
 0

	)

33 
	#QIHOO_C301_GPIO_LED_STATUS_RED
 11

	)

35 
	#QIHOO_C301_GPIO_LED_WAN
 1

	)

36 
	#QIHOO_C301_GPIO_LED_LAN1
 2

	)

37 
	#QIHOO_C301_GPIO_LED_LAN2
 3

	)

38 
	#QIHOO_C301_GPIO_ETH_LEN_EN
 18

	)

40 
	#QIHOO_C301_GPIO_BTN_RESET
 16

	)

42 
	#QIHOO_C301_GPIO_USB_POWER
 19

	)

44 
	#QIHOO_C301_GPIO_SPI_CS1
 12

	)

46 
	#QIHOO_C301_GPIO_EXTERNAL_LNA0
 14

	)

47 
	#QIHOO_C301_GPIO_EXTERNAL_LNA1
 15

	)

49 
	#QIHOO_C301_KEYS_POLL_INTERVAL
 20

	)

50 
	#QIHOO_C301_KEYS_DEBOUNCE_INTERVAL
 \

51 (3 * 
QIHOO_C301_KEYS_POLL_INTERVAL
)

	)

53 
	#QIHOO_C301_WMAC_CALDATA_OFFSET
 0x1000

	)

55 
	#QIHOO_C301_NVRAM_ADDR
 0x1f058010

	)

56 
	#QIHOO_C301_NVRAM_SIZE
 0x7ff0

	)

58 
gpio_Àd
 
	gqihoo_c301_Àds_gpio
[] 
	g__öôd©a
 = {

60 .
«me
 = "qihoo:green:status",

61 .
	ggpio
 = 
QIHOO_C301_GPIO_LED_STATUS_GREEN
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "qihoo:red:status",

66 .
	ggpio
 = 
QIHOO_C301_GPIO_LED_STATUS_RED
,

67 .
	ga˘ive_low
 = 1,

71 
gpio_keys_buâ⁄
 
	gqihoo_c301_gpio_keys
[] 
	g__öôd©a
 = {

73 .
desc
 = "reset",

74 .
	gty≥
 = 
EV_KEY
,

75 .
	gcode
 = 
KEY_RESTART
,

76 .
	gdeboun˚_öãrvÆ
 = 
QIHOO_C301_KEYS_DEBOUNCE_INTERVAL
,

77 .
	ggpio
 = 
QIHOO_C301_GPIO_BTN_RESET
,

78 .
	ga˘ive_low
 = 1,

82 
Êash_∂©f‹m_d©a
 
Êash
 
	g__öôd©a
 = {
NULL
, NULL, 0};

84 
	$qihoo_c301_gë_mac
(c⁄° *
«me
, *
mac
)

86 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
QIHOO_C301_NVRAM_ADDR
);

87 
îr
;

89 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
QIHOO_C301_NVRAM_SIZE
,

90 
«me
, 
mac
);

91 i‡(
îr
)

92 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

93 
	}
}

95 
__öô
 
	$qihoo_c301_£tup
()

97 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

98 
u8
 
tmpmac
[
ETH_ALEN
];

100 
	`©h79_ªgi°î_m25p80_mu…i
(&
Êash
);

102 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

104 
	`©h79_gpio_ouçut_£À˘
(
QIHOO_C301_GPIO_LED_WAN
,

105 
AR934X_GPIO_OUT_LED_LINK4
);

106 
	`©h79_gpio_ouçut_£À˘
(
QIHOO_C301_GPIO_LED_LAN1
,

107 
AR934X_GPIO_OUT_LED_LINK1
);

108 
	`©h79_gpio_ouçut_£À˘
(
QIHOO_C301_GPIO_LED_LAN2
,

109 
AR934X_GPIO_OUT_LED_LINK2
);

111 
	`©h79_gpio_ouçut_£À˘
(
QIHOO_C301_GPIO_SPI_CS1
,

112 
AR934X_GPIO_OUT_SPI_CS1
);

114 
	`gpio_ªque°_⁄e
(
QIHOO_C301_GPIO_ETH_LEN_EN
,

115 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

118 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
qihoo_c301_Àds_gpio
),

119 
qihoo_c301_Àds_gpio
);

121 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
QIHOO_C301_KEYS_POLL_INTERVAL
,

122 
	`ARRAY_SIZE
(
qihoo_c301_gpio_keys
),

123 
qihoo_c301_gpio_keys
);

125 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
QIHOO_C301_GPIO_EXTERNAL_LNA0
);

126 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
QIHOO_C301_GPIO_EXTERNAL_LNA1
);

128 
	`qihoo_c301_gë_mac
("wœn24mac=", 
tmpmac
);

129 
	`©h79_ªgi°î_wmac
(
¨t
 + 
QIHOO_C301_WMAC_CALDATA_OFFSET
, 
tmpmac
);

131 
	`©h79_ªgi°î_pci
();

133 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
 |

134 
AR934X_ETH_CFG_SW_PHY_SWAP
);

136 
	`©h79_ªgi°î_mdio
(1, 0x0);

139 
	`qihoo_c301_gë_mac
("œnmac=", 
©h79_ëh1_d©a
.
mac_addr
);

142 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

144 
	`©h79_ªgi°î_ëh
(1);

147 
	`qihoo_c301_gë_mac
("w™mac=", 
©h79_ëh0_d©a
.
mac_addr
);

150 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

151 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

153 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

154 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

155 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

157 
	`©h79_ªgi°î_ëh
(0);

159 
	`gpio_ªque°_⁄e
(
QIHOO_C301_GPIO_USB_POWER
,

160 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

162 
	`©h79_ªgi°î_usb
();

163 
	}
}

165 
MIPS_MACHINE
(
ATH79_MACH_QIHOO_C301
, "QIHOO-C301", "Qihoo 360 C301",

166 
qihoo_c301_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-r36a.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#R36A_GPIO_LED_LAN
 4

	)

27 
	#R36A_GPIO_LED_STATUS
 14

	)

28 
	#R36A_GPIO_LED_USB
 12

	)

29 
	#R36A_GPIO_LED_WAN
 16

	)

30 
	#R36A_GPIO_LED_WLAN
 15

	)

32 
	#R36A_GPIO_WDT_EN
 1

	)

33 
	#R36A_GPIO_WDT_IN
 0

	)

34 
	#R36A_GPIO_USB_PWR
 3

	)

36 
	#R36A_GPIO_BTN_RESET
 2

	)

37 
	#R36A_GPIO_BTN_RFKILL
 17

	)

39 
	#R36A_KEYS_POLL_INTERVAL
 20

	)

40 
	#R36A_KEYS_DEBOUNCE_INTERVAL
 (3 * 
R36A_KEYS_POLL_INTERVAL
)

	)

42 
	#R36A_WMAC_CALDATA_OFFSET
 0x1000

	)

44 
gpio_Àd
 
	gr36a_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "r36a:blue:lan",

47 .
	ggpio
 = 
R36A_GPIO_LED_LAN
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "r36a:blue:status",

51 .
	ggpio
 = 
R36A_GPIO_LED_STATUS
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "r36a:blue:usb",

55 .
	ggpio
 = 
R36A_GPIO_LED_USB
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "r36a:blue:wan",

59 .
	ggpio
 = 
R36A_GPIO_LED_WAN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "r36a:blue:wlan",

63 .
	ggpio
 = 
R36A_GPIO_LED_WLAN
,

64 .
	ga˘ive_low
 = 1,

68 
gpio_keys_buâ⁄
 
	gr36a_gpio_keys
[] 
	g__öôd©a
 = {

70 .
desc
 = "reset",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_RESTART
,

73 .
	gdeboun˚_öãrvÆ
 = 
R36A_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
R36A_GPIO_BTN_RESET
,

75 .
	ga˘ive_low
 = 1,

77 .
	gdesc
 = "rfkill",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_RFKILL
,

80 .
	gdeboun˚_öãrvÆ
 = 
R36A_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
R36A_GPIO_BTN_RFKILL
,

82 .
	ga˘ive_low
 = 1,

86 
__öô
 
	$r36a_£tup
()

88 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f070000);

90 
	`©h79_ªgi°î_m25p80
(
NULL
);

92 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

94 
	`©h79_ªgi°î_mdio
(0, 0x0);

96 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

97 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xf7;

100 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

101 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

102 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

103 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

104 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
, 0);

105 
	`©h79_ªgi°î_ëh
(0);

108 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

109 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

110 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
, 1);

111 
	`©h79_ªgi°î_ëh
(1);

114 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

116 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
r36a_Àds_gpio
),

117 
r36a_Àds_gpio
);

119 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
R36A_KEYS_POLL_INTERVAL
,

120 
	`ARRAY_SIZE
(
r36a_gpio_keys
),

121 
r36a_gpio_keys
);

123 
	`gpio_ªque°_⁄e
(
R36A_GPIO_WDT_IN
,

124 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

127 
	`gpio_ªque°_⁄e
(
R36A_GPIO_WDT_EN
,

128 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

131 
	`gpio_ªque°_⁄e
(
R36A_GPIO_USB_PWR
,

132 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

135 
	`©h79_ªgi°î_wmac
(
¨t
 + 
R36A_WMAC_CALDATA_OFFSET
, 
NULL
);

137 
	`©h79_ªgi°î_usb
();

138 
	}
}

140 
MIPS_MACHINE
(
ATH79_MACH_R36A
, "R36A", "ALFA Nëw‹k R36A", 
r36a_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-r602n.c

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#PW_GPIO_BTN_RESET
 17

	)

30 
	#PW_KEYS_POLL_INTERVAL
 20

	)

31 
	#PW_KEYS_DEBOUNCE_INTERVAL
 (3 * 
PW_KEYS_POLL_INTERVAL
)

	)

33 
	#PW_MAC0_OFFSET
 0x0

	)

34 
	#PW_MAC1_OFFSET
 0x6

	)

35 
	#PW_WMAC_CALDATA_OFFSET
 0x1000

	)

38 
	#CPE505N_GPIO_LED_DIAG
 12

	)

39 
	#CPE505N_GPIO_LED_LAN
 11

	)

40 
	#CPE505N_GPIO_LED_STATUS
 14

	)

41 
	#CPE505N_GPIO_LED_WAN
 4

	)

42 
	#CPE505N_GPIO_LED_WLAN
 15

	)

44 
gpio_Àd
 
	g˝e505n_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "cpe505n:red:diag",

47 .
	ggpio
 = 
CPE505N_GPIO_LED_DIAG
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "cpe505n:green:lan",

51 .
	ggpio
 = 
CPE505N_GPIO_LED_LAN
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "cpe505n:green:status",

55 .
	ggpio
 = 
CPE505N_GPIO_LED_STATUS
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "cpe505n:green:wan",

59 .
	ggpio
 = 
CPE505N_GPIO_LED_WAN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "cpe505n:blue:wlan",

63 .
	ggpio
 = 
CPE505N_GPIO_LED_WLAN
,

64 .
	ga˘ive_low
 = 1,

68 
__öô
 
	$˝e505n_gpio_£tup
()

71 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

72 
	`©h79_gpio_ouçut_£À˘
(
CPE505N_GPIO_LED_WAN
, 0);

74 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE505N_GPIO_LED_DIAG
, 
åue
);

75 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE505N_GPIO_LED_LAN
, 
åue
);

76 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE505N_GPIO_LED_STATUS
, 
åue
);

77 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE505N_GPIO_LED_WAN
, 
åue
);

78 
	`©h79_gpio_dúe˘i⁄_£À˘
(
CPE505N_GPIO_LED_WLAN
, 
åue
);

81 
	`gpio_£t_vÆue
(
CPE505N_GPIO_LED_DIAG
, 1);

82 
	`gpio_£t_vÆue
(
CPE505N_GPIO_LED_LAN
, 1);

83 
	`gpio_£t_vÆue
(
CPE505N_GPIO_LED_STATUS
, 1);

84 
	`gpio_£t_vÆue
(
CPE505N_GPIO_LED_WAN
, 1);

85 
	`gpio_£t_vÆue
(
CPE505N_GPIO_LED_WLAN
, 1);

87 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
˝e505n_Àds_gpio
),

88 
˝e505n_Àds_gpio
);

89 
	}
}

92 
	#R602N_GPIO_LED_LAN1
 16

	)

93 
	#R602N_GPIO_LED_LAN2
 15

	)

94 
	#R602N_GPIO_LED_LAN3
 14

	)

95 
	#R602N_GPIO_LED_LAN4
 11

	)

96 
	#R602N_GPIO_LED_WAN
 4

	)

97 
	#R602N_GPIO_LED_WLAN
 12

	)

99 
gpio_Àd
 
	gr602n_Àds_gpio
[] 
	g__öôd©a
 = {

101 .
«me
 = "r602n:green:lan1",

102 .
	ggpio
 = 
R602N_GPIO_LED_LAN1
,

103 .
	ga˘ive_low
 = 1,

105 .
	g«me
 = "r602n:green:lan2",

106 .
	ggpio
 = 
R602N_GPIO_LED_LAN2
,

107 .
	ga˘ive_low
 = 1,

109 .
	g«me
 = "r602n:green:lan3",

110 .
	ggpio
 = 
R602N_GPIO_LED_LAN3
,

111 .
	ga˘ive_low
 = 1,

113 .
	g«me
 = "r602n:green:lan4",

114 .
	ggpio
 = 
R602N_GPIO_LED_LAN4
,

115 .
	ga˘ive_low
 = 1,

117 .
	g«me
 = "r602n:green:wan",

118 .
	ggpio
 = 
R602N_GPIO_LED_WAN
,

119 .
	ga˘ive_low
 = 1,

121 .
	g«me
 = "r602n:green:wlan",

122 .
	ggpio
 = 
R602N_GPIO_LED_WLAN
,

123 .
	ga˘ive_low
 = 1,

127 
__öô
 
	$r602n_gpio_£tup
()

130 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

131 
	`©h79_gpio_ouçut_£À˘
(
R602N_GPIO_LED_WAN
, 0);

133 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_LAN1
, 
åue
);

134 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_LAN2
, 
åue
);

135 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_LAN3
, 
åue
);

136 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_LAN4
, 
åue
);

137 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_WAN
, 
åue
);

138 
	`©h79_gpio_dúe˘i⁄_£À˘
(
R602N_GPIO_LED_WLAN
, 
åue
);

141 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_LAN1
, 1);

142 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_LAN2
, 1);

143 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_LAN3
, 1);

144 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_LAN4
, 1);

145 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_WAN
, 1);

146 
	`gpio_£t_vÆue
(
R602N_GPIO_LED_WLAN
, 1);

148 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
r602n_Àds_gpio
),

149 
r602n_Àds_gpio
);

150 
	}
}

152 
gpio_keys_buâ⁄
 
	gpw_gpio_keys
[] 
	g__öôd©a
 = {

154 .
desc
 = "reset",

155 .
	gty≥
 = 
EV_KEY
,

156 .
	gcode
 = 
KEY_RESTART
,

157 .
	gdeboun˚_öãrvÆ
 = 
PW_KEYS_DEBOUNCE_INTERVAL
,

158 .
	ggpio
 = 
PW_GPIO_BTN_RESET
,

159 .
	ga˘ive_low
 = 1,

163 
__öô
 
	$r602n_˝e505n_£tup
()

165 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

167 
	`©h79_ªgi°î_m25p80
(
NULL
);

169 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

171 
	`©h79_ªgi°î_mdio
(0, 0x0);

174 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

175 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

176 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

177 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
PW_MAC1_OFFSET
, 0);

178 
	`©h79_ªgi°î_ëh
(1);

181 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

182 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

183 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

184 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

185 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

186 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
PW_MAC0_OFFSET
, 0);

187 
	`©h79_ªgi°î_ëh
(0);

189 
	`©h79_ªgi°î_wmac
(
¨t
 + 
PW_WMAC_CALDATA_OFFSET
, 
NULL
);

191 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
PW_KEYS_POLL_INTERVAL
,

192 
	`ARRAY_SIZE
(
pw_gpio_keys
),

193 
pw_gpio_keys
);

194 
	}
}

196 
__öô
 
	$˝e505n_£tup
()

198 
	`r602n_˝e505n_£tup
();

200 
	`˝e505n_gpio_£tup
();

201 
	}
}

203 
__öô
 
	$r602n_£tup
()

205 
	`r602n_˝e505n_£tup
();

207 
	`r602n_gpio_£tup
();

209 
	`©h79_ªgi°î_usb
();

210 
	}
}

212 
MIPS_MACHINE
(
ATH79_MACH_CPE505N
, "CPE505N", "P&W CPE505N", 
˝e505n_£tup
);

213 
MIPS_MACHINE
(
ATH79_MACH_R602N
, "R602N", "P&W R602N", 
r602n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-r6100.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<löux/∂©f‹m/¨934x_nfc.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-nfc.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#R6100_GPIO_LED_WLAN
 0

	)

32 
	#R6100_GPIO_LED_USB
 11

	)

33 
	#R6100_GPIO_LED_WAN_GREEN
 13

	)

34 
	#R6100_GPIO_LED_POWER_AMBER
 14

	)

35 
	#R6100_GPIO_LED_WAN_AMBER
 15

	)

36 
	#R6100_GPIO_LED_POWER_GREEN
 17

	)

38 
	#R6100_GPIO_BTN_WIRELESS
 1

	)

39 
	#R6100_GPIO_BTN_WPS
 3

	)

40 
	#R6100_GPIO_BTN_RESET
 12

	)

42 
	#R6100_GPIO_USB_POWER
 16

	)

44 
	#R6100_KEYS_POLL_INTERVAL
 20

	)

45 
	#R6100_KEYS_DEBOUNCE_INTERVAL
 (3 * 
R6100_KEYS_POLL_INTERVAL
)

	)

47 
gpio_Àd
 
	gr6100_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "netgear:green:power",

50 .
	ggpio
 = 
R6100_GPIO_LED_POWER_GREEN
,

51 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "netgear:amber:power",

55 .
	ggpio
 = 
R6100_GPIO_LED_POWER_AMBER
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "netgear:green:wan",

60 .
	ggpio
 = 
R6100_GPIO_LED_WAN_GREEN
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "netgear:amber:wan",

65 .
	ggpio
 = 
R6100_GPIO_LED_WAN_AMBER
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "netgear:blue:usb",

70 .
	ggpio
 = 
R6100_GPIO_LED_USB
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "netgear:blue:wlan",

75 .
	ggpio
 = 
R6100_GPIO_LED_WLAN
,

76 .
	ga˘ive_low
 = 1,

80 
gpio_keys_buâ⁄
 
	gr6100_gpio_keys
[] 
	g__öôd©a
 = {

82 .
desc
 = "Reset button",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RESTART
,

85 .
	gdeboun˚_öãrvÆ
 = 
R6100_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
R6100_GPIO_BTN_RESET
,

87 .
	ga˘ive_low
 = 0,

90 .
	gdesc
 = "WPS button",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
KEY_WPS_BUTTON
,

93 .
	gdeboun˚_öãrvÆ
 = 
R6100_KEYS_DEBOUNCE_INTERVAL
,

94 .
	ggpio
 = 
R6100_GPIO_BTN_WPS
,

95 .
	ga˘ive_low
 = 0,

98 .
	gdesc
 = "RFKILL switch",

99 .
	gty≥
 = 
EV_SW
,

100 .
	gcode
 = 
KEY_RFKILL
,

101 .
	gdeboun˚_öãrvÆ
 = 
R6100_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 
R6100_GPIO_BTN_WIRELESS
,

103 .
	ga˘ive_low
 = 0,

107 
__öô
 
	$r6100_£tup
()

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
r6100_Àds_gpio
),

110 
r6100_Àds_gpio
);

111 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
R6100_KEYS_POLL_INTERVAL
,

112 
	`ARRAY_SIZE
(
r6100_gpio_keys
),

113 
r6100_gpio_keys
);

115 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

117 
	`©h79_ªgi°î_mdio
(1, 0x0);

120 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

121 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

122 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

123 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

124 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

125 
	`©h79_ªgi°î_ëh
(0);

128 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

129 
	`©h79_ªgi°î_ëh
(1);

131 
	`gpio_ªque°_⁄e
(
R6100_GPIO_USB_POWER
,

132 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

135 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

136 
	`©h79_ªgi°î_nfc
();

138 
	`©h79_ªgi°î_usb
();

140 
	`©h79_ªgi°î_wmac_sim∂e
();

142 
	`≠91_pci_öô_sim∂e
();

143 
	}
}

145 
MIPS_MACHINE
(
ATH79_MACH_R6100
, "R6100", "NETGEAR R6100",

146 
r6100_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rambutan.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<asm/mach-©h79/©h79.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~<löux/∂©f‹m/¨934x_nfc.h
>

20 
	~<löux/¨8216_∂©f‹m.h
>

21 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

22 
	~"comm⁄.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-nfc.h
"

29 
	~"dev-usb.h
"

30 
	~"dev-wmac.h
"

31 
	~"machty≥s.h
"

32 
	~"pci.h
"

34 
©803x_∂©f‹m_d©a
 
	gømbuèn_¨8032_d©a
 = {

35 .
has_ª£t_gpio
 = 1,

36 .
	gª£t_gpio
 = 17,

39 
mdio_bﬂrd_öfo
 
	gømbuèn_mdio0_öfo
[] = {

41 .
bus_id
 = "ag71xx-mdio.0",

42 .
	gmdio_addr
 = 0,

43 .
	g∂©f‹m_d©a
 = &
ømbuèn_¨8032_d©a
,

47 
©803x_∂©f‹m_d©a
 
	gømbuèn_¨8033_d©a
 = {

48 .
has_ª£t_gpio
 = 1,

49 .
	gª£t_gpio
 = 23,

52 
mdio_bﬂrd_öfo
 
	gømbuèn_mdio1_öfo
[] = {

54 .
bus_id
 = "ag71xx-mdio.1",

55 .
	gmdio_addr
 = 0,

56 .
	g∂©f‹m_d©a
 = &
ømbuèn_¨8033_d©a
,

60 
__öô
 
	$ømbuèn_£tup
()

62 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

63 
	`©h79_ªgi°î_nfc
();

64 
	`©h79_ªgi°î_usb
();

65 
	`©h79_ªgi°î_pci
();

66 
	`©h79_ªgi°î_wmac_sim∂e
();

68 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ømbuèn_mdio0_öfo
,

69 
	`ARRAY_SIZE
(
ømbuèn_mdio0_öfo
));

70 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ømbuèn_mdio1_öfo
,

71 
	`ARRAY_SIZE
(
ømbuèn_mdio1_öfo
));

72 
	`©h79_ªgi°î_mdio
(0, 0x0);

73 
	`©h79_ªgi°î_mdio
(1, 0x0);

75 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

76 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

77 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

78 
	`©h79_ªgi°î_ëh
(0);

80 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

81 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(0);

82 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

83 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x17000000;

84 
©h79_ëh1_∂l_d©a
.
∂l_10
 = 0x1313;

85 
	`©h79_ªgi°î_ëh
(1);

86 
	}
}

88 
MIPS_MACHINE
(
ATH79_MACH_RAMBUTAN
, "RAMBUTAN", "8devices Rambutan board",

89 
ømbuèn_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb2011.c

12 
	#¥_fmt
(
fmt
Ë"rb2011: " 
	)
fmt

14 
	~<löux/vîsi⁄.h
>

15 
	~<löux/phy.h
>

16 
	~<löux/dñay.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/©h9k_∂©f‹m.h
>

19 
	~<löux/¨8216_∂©f‹m.h
>

20 
	~<löux/mtd/mtd.h
>

21 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

22 
	~<löux/mtd/«nd.h
>

24 
	~<löux/mtd/øw«nd.h
>

26 
	~<löux/mtd/∑πôi⁄s.h
>

27 
	~<löux/•i/•i.h
>

28 
	~<löux/•i/Êash.h
>

29 
	~<löux/rouãrboŸ.h
>

30 
	~<löux/gpio.h
>

31 
	~<löux/vîsi⁄.h
>

33 
	~<asm/¥om.h
>

34 
	~<asm/mach-©h79/©h79.h
>

35 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

37 
	~"comm⁄.h
"

38 
	~"dev-ëh.h
"

39 
	~"dev-m25p80.h
"

40 
	~"dev-nfc.h
"

41 
	~"dev-usb.h
"

42 
	~"dev-wmac.h
"

43 
	~"machty≥s.h
"

44 
	~"rouãrboŸ.h
"

46 
	#RB2011_GPIO_NAND_NCE
 14

	)

47 
	#RB2011_GPIO_SFP_LOS
 21

	)

49 
	#RB_ROUTERBOOT_OFFSET
 0x0000

	)

50 
	#RB_ROUTERBOOT_MIN_SIZE
 0xb000

	)

51 
	#RB_HARD_CFG_SIZE
 0x1000

	)

52 
	#RB_BIOS_OFFSET
 0xd000

	)

53 
	#RB_BIOS_SIZE
 0x1000

	)

54 
	#RB_SOFT_CFG_OFFSET
 0xf000

	)

55 
	#RB_SOFT_CFG_SIZE
 0x1000

	)

57 
	#RB_ART_SIZE
 0x10000

	)

59 
	#RB2011_FLAG_SFP
 
	`BIT
(0)

	)

60 
	#RB2011_FLAG_USB
 
	`BIT
(1)

	)

61 
	#RB2011_FLAG_WLAN
 
	`BIT
(2)

	)

63 
mtd_∑πôi⁄
 
	grb2011_•i_∑πôi⁄s
[] = {

65 .
«me
 = "routerboot",

66 .
	goff£t
 = 
RB_ROUTERBOOT_OFFSET
,

67 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

69 .
	g«me
 = "hard_config",

70 .
	gsize
 = 
RB_HARD_CFG_SIZE
,

71 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

73 .
	g«me
 = "bios",

74 .
	goff£t
 = 
RB_BIOS_OFFSET
,

75 .
	gsize
 = 
RB_BIOS_SIZE
,

76 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

78 .
	g«me
 = "soft_config",

79 .
	gsize
 = 
RB_SOFT_CFG_SIZE
,

83 
__öô
 
	$rb2011_öô_∑πôi⁄s
(c⁄° 
rb_öfo
 *
öfo
)

85 
rb2011_•i_∑πôi⁄s
[0].
size
 = 
öfo
->
h¨d_cfg_offs
;

86 
rb2011_•i_∑πôi⁄s
[1].
off£t
 = 
öfo
->
h¨d_cfg_offs
;

87 
rb2011_•i_∑πôi⁄s
[3].
off£t
 = 
öfo
->
so·_cfg_offs
;

88 
	}
}

90 
mtd_∑πôi⁄
 
	grb2011_«nd_∑πôi⁄s
[] = {

92 .
«me
 = "booter",

93 .
	goff£t
 = 0,

94 .
	gsize
 = (256 * 1024),

95 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

98 .
	g«me
 = "kernel",

99 .
	goff£t
 = (256 * 1024),

100 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

103 .
	g«me
 = "ubi",

104 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

105 .
	gsize
 = 
MTDPART_SIZ_FULL
,

109 
Êash_∂©f‹m_d©a
 
	grb2011_•i_Êash_d©a
 = {

110 .
∑πs
 = 
rb2011_•i_∑πôi⁄s
,

111 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
rb2011_•i_∑πôi⁄s
),

114 
¨8327_∑d_cfg
 
	grb2011_¨8327_∑d0_cfg
 = {

115 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

116 .
	gtx˛k_dñay_í
 = 
åue
,

117 .
	grx˛k_dñay_í
 = 
åue
,

118 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL3
,

119 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

122 
¨8327_∑d_cfg
 
	grb2011_¨8327_∑d6_cfg
;

123 
¨8327_sgmii_cfg
 
	grb2011_¨8327_sgmii_cfg
;

125 
¨8327_Àd_cfg
 
	grb2011_¨8327_Àd_cfg
 = {

126 .
Àd_˘æ0
 = 0xc731c731,

127 .
	gÀd_˘æ1
 = 0x00000000,

128 .
	gÀd_˘æ2
 = 0x00000000,

129 .
	gÀd_˘æ3
 = 0x0030c300,

130 .
	g›í_døö
 = 
Ál£
,

133 c⁄° 
¨8327_Àd_öfo
 
	grb2011_¨8327_Àds
[] = {

134 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "rb:green:eth1"),

135 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "rb:green:eth2"),

136 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "rb:green:eth3"),

137 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "rb:green:eth4"),

138 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "rb:green:eth5"),

139 
AR8327_LED_INFO
(
PHY0_1
, 
SW
, "rb:green:eth6"),

140 
AR8327_LED_INFO
(
PHY1_1
, 
SW
, "rb:green:eth7"),

141 
AR8327_LED_INFO
(
PHY2_1
, 
SW
, "rb:green:eth8"),

142 
AR8327_LED_INFO
(
PHY3_1
, 
SW
, "rb:green:eth9"),

143 
AR8327_LED_INFO
(
PHY4_1
, 
SW
, "rb:green:eth10"),

144 
AR8327_LED_INFO
(
PHY4_2
, 
SW
, "rb:green:usr"),

147 
¨8327_∂©f‹m_d©a
 
	grb2011_¨8327_d©a
 = {

148 .
∑d0_cfg
 = &
rb2011_¨8327_∑d0_cfg
,

149 .
	gp‹t0_cfg
 = {

150 .
f‹˚_lök
 = 1,

151 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

152 .
	gdu∂ex
 = 1,

153 .
	gtx∑u£
 = 1,

154 .
	grx∑u£
 = 1,

156 .
	gÀd_cfg
 = &
rb2011_¨8327_Àd_cfg
,

157 .
	gnum_Àds
 = 
ARRAY_SIZE
(
rb2011_¨8327_Àds
),

158 .
	gÀds
 = 
rb2011_¨8327_Àds
,

161 
mdio_bﬂrd_öfo
 
	grb2011_mdio0_öfo
[] = {

163 .
bus_id
 = "ag71xx-mdio.0",

164 .
	gmdio_addr
 = 0,

165 .
	g∂©f‹m_d©a
 = &
rb2011_¨8327_d©a
,

169 
__öô
 
	$rb2011_wœn_öô
()

171 *
¨t_buf
;

172 
u8
 
wœn_mac
[
ETH_ALEN
];

174 
¨t_buf
 = 
	`rb_gë_wœn_d©a
();

175 i‡(
¨t_buf
 =
NULL
)

178 
	`©h79_öô_mac
(
wœn_mac
, 
©h79_mac_ba£
, 11);

179 
	`©h79_ªgi°î_wmac
(
¨t_buf
 + 0x1000, 
wœn_mac
);

181 
	`k‰ì
(
¨t_buf
);

182 
	}
}

184 
	$rb2011_«nd_£À˘_chù
(
chù_no
)

186 
chù_no
) {

188 
	`gpio_£t_vÆue
(
RB2011_GPIO_NAND_NCE
, 0);

191 
	`gpio_£t_vÆue
(
RB2011_GPIO_NAND_NCE
, 1);

194 
	`ndñay
(500);

195 
	}
}

197 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

198 
«nd_ec˛ayout
 
	grb2011_«nd_ec˛ayout
 = {

199 .
eccbyãs
 = 6,

200 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

201 .
	goobavaû
 = 9,

202 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

207 
	$rb2011_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

208 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

210 
£˘i⁄
) {

212 
oobªgi⁄
->
off£t
 = 8;

213 
oobªgi⁄
->
Àngth
 = 3;

216 
oobªgi⁄
->
off£t
 = 13;

217 
oobªgi⁄
->
Àngth
 = 3;

220  -
ERANGE
;

222 
	}
}

224 
	$rb2011_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

225 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

227 
£˘i⁄
) {

229 
oobªgi⁄
->
off£t
 = 0;

230 
oobªgi⁄
->
Àngth
 = 4;

233 
oobªgi⁄
->
off£t
 = 4;

234 
oobªgi⁄
->
Àngth
 = 1;

237 
oobªgi⁄
->
off£t
 = 6;

238 
oobªgi⁄
->
Àngth
 = 2;

241 
oobªgi⁄
->
off£t
 = 11;

242 
oobªgi⁄
->
Àngth
 = 2;

245  -
ERANGE
;

247 
	}
}

249 c⁄° 
mtd_oobœyout_›s
 
	grb2011_«nd_ec˛ayout_›s
 = {

250 .
ecc
 = 
rb2011_oobœyout_ecc
,

251 .
	g‰ì
 = 
rb2011_oobœyout_‰ì
,

255 
	$rb2011_«nd_sˇn_fixup
(
mtd_öfo
 *
mtd
)

257 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

258 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

261 i‡(
mtd
->
wrôesize
 == 512) {

266 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

267 
chù
->
ecc
.
œyout
 = &
rb2011_«nd_ec˛ayout
;

269 
	`mtd_£t_oobœyout
(
mtd
, &
rb2011_«nd_ec˛ayout_›s
);

274 
	}
}

276 
__öô
 
	$rb2011_«nd_öô
()

278 
	`gpio_ªque°_⁄e
(
RB2011_GPIO_NAND_NCE
, 
GPIOF_OUT_INIT_HIGH
, "NANDÇCE");

280 
	`©h79_nfc_£t_sˇn_fixup
(
rb2011_«nd_sˇn_fixup
);

281 
	`©h79_nfc_£t_∑πs
(
rb2011_«nd_∑πôi⁄s
,

282 
	`ARRAY_SIZE
(
rb2011_«nd_∑πôi⁄s
));

283 
	`©h79_nfc_£t_£À˘_chù
(
rb2011_«nd_£À˘_chù
);

284 
	`©h79_nfc_£t_sw≠_dma
(
åue
);

285 
	`©h79_ªgi°î_nfc
();

286 
	}
}

288 
	$rb2011_gë_p‹t_lök
(
p‹t
)

290 i‡(
p‹t
 != 6)

291  -
EINVAL
;

294  !
	`gpio_gë_vÆue
(
RB2011_GPIO_SFP_LOS
);

295 
	}
}

297 
__öô
 
	$rb2011_sÂ_öô
()

299 
	`gpio_ªque°_⁄e
(
RB2011_GPIO_SFP_LOS
, 
GPIOF_IN
, "SFP LOS");

301 
rb2011_¨8327_∑d6_cfg
.
mode
 = 
AR8327_PAD_MAC_SGMII
;

303 
rb2011_¨8327_d©a
.
∑d6_cfg
 = &
rb2011_¨8327_∑d6_cfg
;

305 
rb2011_¨8327_sgmii_cfg
.
sgmii_˘æ
 = 0xc70167d0;

306 
rb2011_¨8327_sgmii_cfg
.
£rdes_´n
 = 
åue
;

308 
rb2011_¨8327_d©a
.
sgmii_cfg
 = &
rb2011_¨8327_sgmii_cfg
;

310 
rb2011_¨8327_d©a
.
p‹t6_cfg
.
f‹˚_lök
 = 1;

311 
rb2011_¨8327_d©a
.
p‹t6_cfg
.
•ìd
 = 
AR8327_PORT_SPEED_1000
;

312 
rb2011_¨8327_d©a
.
p‹t6_cfg
.
du∂ex
 = 1;

314 
rb2011_¨8327_d©a
.
gë_p‹t_lök
 = 
rb2011_gë_p‹t_lök
;

315 
	}
}

317 
__öô
 
	$rb2011_£tup
(
u32
 
Êags
)

319 c⁄° 
rb_öfo
 *
öfo
;

320 
buf
[64];

322 
öfo
 = 
	`rb_öô_öfo
((*Ë
	`KSEG1ADDR
(0x1f000000), 0x10000);

323 i‡(!
öfo
)

324  -
ENODEV
;

326 
	`s˙¥ötf
(
buf
, (buf), "Mikrotik RouterBOARD %s",

327 (
öfo
->
bﬂrd_«me
) ? info->board_name : "");

328 
	`mùs_£t_machöe_«me
(
buf
);

330 
	`rb2011_öô_∑πôi⁄s
(
öfo
);

332 
	`©h79_ªgi°î_m25p80
(&
rb2011_•i_Êash_d©a
);

333 
	`rb2011_«nd_öô
();

335 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

336 
AR934X_ETH_CFG_RXD_DELAY
 |

337 
AR934X_ETH_CFG_SW_ONLY_MODE
);

339 
	`©h79_ªgi°î_mdio
(1, 0x0);

340 
	`©h79_ªgi°î_mdio
(0, 0x0);

342 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb2011_mdio0_öfo
,

343 
	`ARRAY_SIZE
(
rb2011_mdio0_öfo
));

346 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

347 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

348 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

349 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

350 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x6f000000;

352 
	`©h79_ªgi°î_ëh
(0);

355 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 5);

356 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

357 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

358 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

360 
	`©h79_ªgi°î_ëh
(1);

362 i‡(
Êags
 & 
RB2011_FLAG_SFP
)

363 
	`rb2011_sÂ_öô
();

365 i‡(
Êags
 & 
RB2011_FLAG_WLAN
)

366 
	`rb2011_wœn_öô
();

368 i‡(
Êags
 & 
RB2011_FLAG_USB
)

369 
	`©h79_ªgi°î_usb
();

372 
	}
}

374 
__öô
 
	$rb2011l_£tup
()

376 
	`rb2011_£tup
(0);

377 
	}
}

379 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_2011L
, "2011L", 
rb2011l_£tup
);

381 
__öô
 
	$rb2011us_£tup
()

383 
	`rb2011_£tup
(
RB2011_FLAG_SFP
 | 
RB2011_FLAG_USB
);

384 
	}
}

386 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_2011US
, "2011US", 
rb2011us_£tup
);

388 
__öô
 
	$rb2011r5_£tup
()

390 
	`rb2011_£tup
(
RB2011_FLAG_SFP
 | 
RB2011_FLAG_USB
 | 
RB2011_FLAG_WLAN
);

391 
	}
}

393 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_2011R5
, "2011r5", 
rb2011r5_£tup
);

395 
__öô
 
	$rb2011g_£tup
()

397 
	`rb2011_£tup
(
RB2011_FLAG_SFP
 |

398 
RB2011_FLAG_USB
 |

399 
RB2011_FLAG_WLAN
);

400 
	}
}

402 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_2011G
, "2011G", 
rb2011g_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb4xx.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/úq.h
>

14 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

15 
	~<löux/mmc/ho°.h
>

16 
	~<löux/•i/•i.h
>

17 
	~<löux/•i/Êash.h
>

18 
	~<löux/•i/mmc_•i.h
>

19 
	~<löux/mtd/mtd.h
>

20 
	~<löux/mtd/∑πôi⁄s.h
>

22 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~<asm/mach-©h79/©h79.h
>

24 
	~<asm/mach-©h79/rb4xx_˝ld.h
>

26 
	~"comm⁄.h
"

27 
	~"dev-ëh.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-usb.h
"

31 
	~"machty≥s.h
"

32 
	~"pci.h
"

34 
	#RB4XX_GPIO_USER_LED
 4

	)

35 
	#RB4XX_GPIO_RESET_SWITCH
 7

	)

37 
	#RB4XX_GPIO_CPLD_BASE
 32

	)

38 
	#RB4XX_GPIO_CPLD_LED1
 (
RB4XX_GPIO_CPLD_BASE
 + 
CPLD_GPIO_nLED1
)

	)

39 
	#RB4XX_GPIO_CPLD_LED2
 (
RB4XX_GPIO_CPLD_BASE
 + 
CPLD_GPIO_nLED2
)

	)

40 
	#RB4XX_GPIO_CPLD_LED3
 (
RB4XX_GPIO_CPLD_BASE
 + 
CPLD_GPIO_nLED3
)

	)

41 
	#RB4XX_GPIO_CPLD_LED4
 (
RB4XX_GPIO_CPLD_BASE
 + 
CPLD_GPIO_nLED4
)

	)

42 
	#RB4XX_GPIO_CPLD_LED5
 (
RB4XX_GPIO_CPLD_BASE
 + 
CPLD_GPIO_nLED5
)

	)

44 
	#RB4XX_KEYS_POLL_INTERVAL
 20

	)

45 
	#RB4XX_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RB4XX_KEYS_POLL_INTERVAL
)

	)

47 
gpio_Àd
 
	grb4xx_Àds_gpio
[] 
	g__öôd©a
 = {

49 .
«me
 = "rb4xx:yellow:user",

50 .
	ggpio
 = 
RB4XX_GPIO_USER_LED
,

51 .
	ga˘ive_low
 = 0,

53 .
	g«me
 = "rb4xx:green:led1",

54 .
	ggpio
 = 
RB4XX_GPIO_CPLD_LED1
,

55 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "rb4xx:green:led2",

58 .
	ggpio
 = 
RB4XX_GPIO_CPLD_LED2
,

59 .
	ga˘ive_low
 = 1,

61 .
	g«me
 = "rb4xx:green:led3",

62 .
	ggpio
 = 
RB4XX_GPIO_CPLD_LED3
,

63 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "rb4xx:green:led4",

66 .
	ggpio
 = 
RB4XX_GPIO_CPLD_LED4
,

67 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "rb4xx:green:led5",

70 .
	ggpio
 = 
RB4XX_GPIO_CPLD_LED5
,

71 .
	ga˘ive_low
 = 0,

75 
gpio_keys_buâ⁄
 
	grb4xx_gpio_keys
[] 
	g__öôd©a
 = {

77 .
desc
 = "reset_switch",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_RESTART
,

80 .
	gdeboun˚_öãrvÆ
 = 
RB4XX_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
RB4XX_GPIO_RESET_SWITCH
,

82 .
	ga˘ive_low
 = 1,

86 
∂©f‹m_devi˚
 
	grb4xx_«nd_devi˚
 = {

87 .
«me
 = "rb4xx-nand",

88 .
	gid
 = -1,

91 
©h79_pci_úq
 
	grb4xx_pci_úqs
[] 
	g__öôd©a
 = {

93 .
¶Ÿ
 = 17,

94 .
	gpö
 = 1,

95 .
	gúq
 = 
ATH79_PCI_IRQ
(2),

97 .
	g¶Ÿ
 = 18,

98 .
	gpö
 = 1,

99 .
	gúq
 = 
ATH79_PCI_IRQ
(0),

101 .
	g¶Ÿ
 = 18,

102 .
	gpö
 = 2,

103 .
	gúq
 = 
ATH79_PCI_IRQ
(1),

105 .
	g¶Ÿ
 = 19,

106 .
	gpö
 = 1,

107 .
	gúq
 = 
ATH79_PCI_IRQ
(1),

109 .
	g¶Ÿ
 = 19,

110 .
	gpö
 = 2,

111 .
	gúq
 = 
ATH79_PCI_IRQ
(2),

113 .
	g¶Ÿ
 = 20,

114 .
	gpö
 = 1,

115 .
	gúq
 = 
ATH79_PCI_IRQ
(2),

117 .
	g¶Ÿ
 = 20,

118 .
	gpö
 = 2,

119 .
	gúq
 = 
ATH79_PCI_IRQ
(0),

121 .
	g¶Ÿ
 = 21,

122 .
	gpö
 = 1,

123 .
	gúq
 = 
ATH79_PCI_IRQ
(0),

125 .
	g¶Ÿ
 = 22,

126 .
	gpö
 = 1,

127 .
	gúq
 = 
ATH79_PCI_IRQ
(1),

129 .
	g¶Ÿ
 = 22,

130 .
	gpö
 = 2,

131 .
	gúq
 = 
ATH79_PCI_IRQ
(2),

133 .
	g¶Ÿ
 = 23,

134 .
	gpö
 = 1,

135 .
	gúq
 = 
ATH79_PCI_IRQ
(2),

137 .
	g¶Ÿ
 = 23,

138 .
	gpö
 = 2,

139 .
	gúq
 = 
ATH79_PCI_IRQ
(0),

143 
mtd_∑πôi⁄
 
	grb4xx_∑πôi⁄s
[] = {

145 .
«me
 = "routerboot",

146 .
	goff£t
 = 0,

147 .
	gsize
 = 0x0b000,

148 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

150 .
	g«me
 = "hard_config",

151 .
	goff£t
 = 0x0b000,

152 .
	gsize
 = 0x01000,

153 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

155 .
	g«me
 = "bios",

156 .
	goff£t
 = 0x0d000,

157 .
	gsize
 = 0x02000,

158 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

160 .
	g«me
 = "soft_config",

161 .
	goff£t
 = 0x0f000,

162 .
	gsize
 = 0x01000,

166 
Êash_∂©f‹m_d©a
 
	grb4xx_Êash_d©a
 = {

167 .
ty≥
 = "pm25lv512",

168 .
	g∑πs
 = 
rb4xx_∑πôi⁄s
,

169 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
rb4xx_∑πôi⁄s
),

172 
rb4xx_˝ld_∂©f‹m_d©a
 
	grb4xx_˝ld_d©a
 = {

173 .
gpio_ba£
 = 
RB4XX_GPIO_CPLD_BASE
,

176 
mmc_•i_∂©f‹m_d©a
 
	grb4xx_mmc_d©a
 = {

177 .
o¸_mask
 = 
MMC_VDD_32_33
 | 
MMC_VDD_33_34
,

180 
•i_bﬂrd_öfo
 
	grb4xx_•i_öfo
[] = {

182 .
bus_num
 = 0,

183 .
	gchù_£À˘
 = 0,

184 .
	gmax_•ìd_hz
 = 25000000,

185 .
	gmodÆüs
 = "m25p80",

186 .
	g∂©f‹m_d©a
 = &
rb4xx_Êash_d©a
,

188 .
	gbus_num
 = 0,

189 .
	gchù_£À˘
 = 1,

190 .
	gmax_•ìd_hz
 = 25000000,

191 .
	gmodÆüs
 = "spi-rb4xx-cpld",

192 .
	g∂©f‹m_d©a
 = &
rb4xx_˝ld_d©a
,

196 
•i_bﬂrd_öfo
 
	grb4xx_mi¸osd_öfo
[] = {

198 .
bus_num
 = 0,

199 .
	gchù_£À˘
 = 2,

200 .
	gmax_•ìd_hz
 = 25000000,

201 .
	gmodÆüs
 = "mmc_spi",

202 .
	g∂©f‹m_d©a
 = &
rb4xx_mmc_d©a
,

207 
ªsour˚
 
	grb4xx_•i_ªsour˚s
[] = {

209 .
°¨t
 = 
AR71XX_SPI_BASE
,

210 .
	gíd
 = 
AR71XX_SPI_BASE
 + 
AR71XX_SPI_SIZE
 - 1,

211 .
	gÊags
 = 
IORESOURCE_MEM
,

215 
∂©f‹m_devi˚
 
	grb4xx_•i_devi˚
 = {

216 .
«me
 = "rb4xx-spi",

217 .
	gid
 = -1,

218 .
	gªsour˚
 = 
rb4xx_•i_ªsour˚s
,

219 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
rb4xx_•i_ªsour˚s
),

222 
__öô
 
	$rb4xx_gíîic_£tup
()

224 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR71XX_GPIO_FUNC_SPI_CS1_EN
 |

225 
AR71XX_GPIO_FUNC_SPI_CS2_EN
);

227 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb4xx_Àds_gpio
),

228 
rb4xx_Àds_gpio
);

230 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RB4XX_KEYS_POLL_INTERVAL
,

231 
	`ARRAY_SIZE
(
rb4xx_gpio_keys
),

232 
rb4xx_gpio_keys
);

234 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_•i_öfo
, 
	`ARRAY_SIZE
(rb4xx_spi_info));

235 
	`∂©f‹m_devi˚_ªgi°î
(&
rb4xx_•i_devi˚
);

236 
	`∂©f‹m_devi˚_ªgi°î
(&
rb4xx_«nd_devi˚
);

237 
	}
}

239 
__öô
 
	$rb411_£tup
()

241 
	`rb4xx_gíîic_£tup
();

242 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_mi¸osd_öfo
,

243 
	`ARRAY_SIZE
(
rb4xx_mi¸osd_öfo
));

245 
	`©h79_ªgi°î_mdio
(0, 0xfffffffc);

247 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

248 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

249 
©h79_ëh0_d©a
.
phy_mask
 = 0x00000003;

251 
	`©h79_ªgi°î_ëh
(0);

253 
	`©h79_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb4xx_pci_úqs
),Ñb4xx_pci_irqs);

254 
	`©h79_ªgi°î_pci
();

255 
	}
}

257 
MIPS_MACHINE
(
ATH79_MACH_RB_411
, "411", "MikroTik RouterBOARD 411/A/AH",

258 
rb411_£tup
);

260 
__öô
 
	$rb411u_£tup
()

262 
	`rb411_£tup
();

263 
	`©h79_ªgi°î_usb
();

264 
	}
}

266 
MIPS_MACHINE
(
ATH79_MACH_RB_411U
, "411U", "MikroTik RouterBOARD 411U",

267 
rb411u_£tup
);

269 
	#RB433_LAN_PHYMASK
 
	`BIT
(0)

	)

270 
	#RB433_WAN_PHYMASK
 
	`BIT
(4)

	)

271 
	#RB433_MDIO_PHYMASK
 (
RB433_LAN_PHYMASK
 | 
RB433_WAN_PHYMASK
)

	)

273 
__öô
 
	$rb433_£tup
()

275 
	`rb4xx_gíîic_£tup
();

276 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_mi¸osd_öfo
,

277 
	`ARRAY_SIZE
(
rb4xx_mi¸osd_öfo
));

279 
	`©h79_ªgi°î_mdio
(0, ~
RB433_MDIO_PHYMASK
);

281 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

282 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

283 
©h79_ëh0_d©a
.
phy_mask
 = 
RB433_LAN_PHYMASK
;

285 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

286 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

287 
©h79_ëh1_d©a
.
phy_mask
 = 
RB433_WAN_PHYMASK
;

289 
	`©h79_ªgi°î_ëh
(1);

290 
	`©h79_ªgi°î_ëh
(0);

292 
	`©h79_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb4xx_pci_úqs
),Ñb4xx_pci_irqs);

293 
	`©h79_ªgi°î_pci
();

294 
	}
}

296 
MIPS_MACHINE
(
ATH79_MACH_RB_433
, "433", "MikroTik RouterBOARD 433/AH",

297 
rb433_£tup
);

299 
__öô
 
	$rb433u_£tup
()

301 
	`rb433_£tup
();

302 
	`©h79_ªgi°î_usb
();

303 
	}
}

305 
MIPS_MACHINE
(
ATH79_MACH_RB_433U
, "433U", "MikroTik RouterBOARD 433UAH",

306 
rb433u_£tup
);

308 
__öô
 
	$rb435g_£tup
()

310 
	`rb4xx_gíîic_£tup
();

312 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_mi¸osd_öfo
,

313 
	`ARRAY_SIZE
(
rb4xx_mi¸osd_öfo
));

315 
	`©h79_ªgi°î_mdio
(0, ~
RB433_MDIO_PHYMASK
);

317 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

318 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

319 
©h79_ëh0_d©a
.
phy_mask
 = 
RB433_LAN_PHYMASK
;

321 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

322 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

323 
©h79_ëh1_d©a
.
phy_mask
 = 
RB433_WAN_PHYMASK
;

325 
	`©h79_ªgi°î_ëh
(1);

326 
	`©h79_ªgi°î_ëh
(0);

328 
	`©h79_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb4xx_pci_úqs
),Ñb4xx_pci_irqs);

329 
	`©h79_ªgi°î_pci
();

331 
	`©h79_ªgi°î_usb
();

332 
	}
}

334 
MIPS_MACHINE
(
ATH79_MACH_RB_435G
, "435G", "MikroTik RouterBOARD 435G",

335 
rb435g_£tup
);

337 
	#RB450_LAN_PHYMASK
 
	`BIT
(0)

	)

338 
	#RB450_WAN_PHYMASK
 
	`BIT
(4)

	)

339 
	#RB450_MDIO_PHYMASK
 (
RB450_LAN_PHYMASK
 | 
RB450_WAN_PHYMASK
)

	)

341 
__öô
 
	$rb450_gíîic_£tup
(
gige
)

343 
	`rb4xx_gíîic_£tup
();

344 
	`©h79_ªgi°î_mdio
(0, ~
RB450_MDIO_PHYMASK
);

346 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

347 
©h79_ëh0_d©a
.
phy_if_mode
 = (
gige
) ?

348 
PHY_INTERFACE_MODE_RGMII
 : 
PHY_INTERFACE_MODE_MII
;

349 
©h79_ëh0_d©a
.
phy_mask
 = 
RB450_LAN_PHYMASK
;

351 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

352 
©h79_ëh1_d©a
.
phy_if_mode
 = (
gige
) ?

353 
PHY_INTERFACE_MODE_RGMII
 : 
PHY_INTERFACE_MODE_RMII
;

354 
©h79_ëh1_d©a
.
phy_mask
 = 
RB450_WAN_PHYMASK
;

356 
	`©h79_ªgi°î_ëh
(1);

357 
	`©h79_ªgi°î_ëh
(0);

358 
	}
}

360 
__öô
 
	$rb450_£tup
()

362 
	`rb450_gíîic_£tup
(0);

363 
	}
}

365 
MIPS_MACHINE
(
ATH79_MACH_RB_450
, "450", "MikroTik RouterBOARD 450",

366 
rb450_£tup
);

368 
__öô
 
	$rb450g_£tup
()

370 
	`rb450_gíîic_£tup
(1);

371 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_mi¸osd_öfo
,

372 
	`ARRAY_SIZE
(
rb4xx_mi¸osd_öfo
));

373 
	}
}

375 
MIPS_MACHINE
(
ATH79_MACH_RB_450G
, "450G", "MikroTik RouterBOARD 450G",

376 
rb450g_£tup
);

378 
__öô
 
	$rb493_£tup
()

380 
	`rb4xx_gíîic_£tup
();

382 
	`©h79_ªgi°î_mdio
(0, 0x3fffff00);

384 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

385 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

386 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

387 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

389 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

390 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

391 
©h79_ëh1_d©a
.
phy_mask
 = 0x00000001;

393 
	`©h79_ªgi°î_ëh
(0);

394 
	`©h79_ªgi°î_ëh
(1);

396 
	`©h79_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb4xx_pci_úqs
),Ñb4xx_pci_irqs);

397 
	`©h79_ªgi°î_pci
();

398 
	}
}

400 
MIPS_MACHINE
(
ATH79_MACH_RB_493
, "493", "MikroTik RouterBOARD 493/AH",

401 
rb493_£tup
);

403 
	#RB493G_GPIO_MDIO_MDC
 7

	)

404 
	#RB493G_GPIO_MDIO_DATA
 8

	)

406 
	#RB493G_MDIO_PHYMASK
 
	`BIT
(0)

	)

408 
mdio_gpio_∂©f‹m_d©a
 
	grb493g_mdio_d©a
 = {

409 .
mdc
 = 
RB493G_GPIO_MDIO_MDC
,

410 .
	gmdio
 = 
RB493G_GPIO_MDIO_DATA
,

412 .
	gphy_mask
 = ~
RB493G_MDIO_PHYMASK
,

415 
∂©f‹m_devi˚
 
	grb493g_mdio_devi˚
 = {

416 .
«me
 = "mdio-gpio",

417 .
	gid
 = -1,

418 .
	gdev
 = {

419 .
∂©f‹m_d©a
 = &
rb493g_mdio_d©a
,

423 
__öô
 
	$rb493g_£tup
()

425 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR71XX_GPIO_FUNC_SPI_CS1_EN
 |

426 
AR71XX_GPIO_FUNC_SPI_CS2_EN
);

428 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb4xx_Àds_gpio
),

429 
rb4xx_Àds_gpio
);

431 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_•i_öfo
, 
	`ARRAY_SIZE
(rb4xx_spi_info));

432 
	`•i_ªgi°î_bﬂrd_öfo
(
rb4xx_mi¸osd_öfo
,

433 
	`ARRAY_SIZE
(
rb4xx_mi¸osd_öfo
));

435 
	`∂©f‹m_devi˚_ªgi°î
(&
rb4xx_•i_devi˚
);

436 
	`∂©f‹m_devi˚_ªgi°î
(&
rb4xx_«nd_devi˚
);

438 
	`©h79_ªgi°î_mdio
(0, ~
RB493G_MDIO_PHYMASK
);

440 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

441 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

442 
©h79_ëh0_d©a
.
phy_mask
 = 
RB493G_MDIO_PHYMASK
;

443 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

444 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

446 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

447 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

448 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
rb493g_mdio_devi˚
.
dev
;

449 
©h79_ëh1_d©a
.
phy_mask
 = 
RB493G_MDIO_PHYMASK
;

450 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

451 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

453 
	`∂©f‹m_devi˚_ªgi°î
(&
rb493g_mdio_devi˚
);

455 
	`©h79_ªgi°î_ëh
(1);

456 
	`©h79_ªgi°î_ëh
(0);

458 
	`©h79_ªgi°î_usb
();

460 
	`©h79_pci_£t_úq_m≠
(
	`ARRAY_SIZE
(
rb4xx_pci_úqs
),Ñb4xx_pci_irqs);

461 
	`©h79_ªgi°î_pci
();

462 
	}
}

464 
MIPS_MACHINE
(
ATH79_MACH_RB_493G
, "493G", "MikroTik RouterBOARD 493G",

465 
rb493g_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb750.c

11 
	~<löux/exp‹t.h
>

12 
	~<löux/pci.h
>

13 
	~<löux/©h9k_∂©f‹m.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/phy.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<löux/æe.h
>

18 
	~<löux/rouãrboŸ.h
>

20 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~<asm/mach-©h79/©h79.h
>

22 
	~<asm/mach-©h79/úq.h
>

23 
	~<asm/mach-©h79/mach-rb750.h
>

25 
	~"comm⁄.h
"

26 
	~"dev-≠9x-pci.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-ëh.h
"

29 
	~"machty≥s.h
"

30 
	~"rouãrboŸ.h
"

32 
rb750_Àd_d©a
 
	grb750_Àds
[] = {

34 .
«me
 = "rb750:green:act",

35 .
	gmask
 = 
RB750_LED_ACT
,

36 .
	ga˘ive_low
 = 1,

38 .
	g«me
 = "rb750:green:port1",

39 .
	gmask
 = 
RB750_LED_PORT5
,

40 .
	ga˘ive_low
 = 1,

42 .
	g«me
 = "rb750:green:port2",

43 .
	gmask
 = 
RB750_LED_PORT4
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "rb750:green:port3",

47 .
	gmask
 = 
RB750_LED_PORT3
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "rb750:green:port4",

51 .
	gmask
 = 
RB750_LED_PORT2
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "rb750:green:port5",

55 .
	gmask
 = 
RB750_LED_PORT1
,

56 .
	ga˘ive_low
 = 1,

60 
rb750_Àd_d©a
 
	grb750gr3_Àds
[] = {

62 .
«me
 = "rb750:green:act",

63 .
	gmask
 = 
RB7XX_LED_ACT
,

64 .
	ga˘ive_low
 = 1,

68 
rb750_Àd_∂©f‹m_d©a
 
	grb750_Àds_d©a
;

69 
∂©f‹m_devi˚
 
	grb750_Àds_devi˚
 = {

70 .
«me
 = "leds-rb750",

71 .
	gdev
 = {

72 .
∂©f‹m_d©a
 = &
rb750_Àds_d©a
,

76 
rb7xx_«nd_∂©f‹m_d©a
 
	grb750_«nd_d©a
;

77 
∂©f‹m_devi˚
 
	grb750_«nd_devi˚
 = {

78 .
«me
 = "rb750-nand",

79 .
	gid
 = -1,

80 .
	gdev
 = {

81 .
∂©f‹m_d©a
 = &
rb750_«nd_d©a
,

85 
	$rb750_œtch_ch™ge
(
u32
 
mask_˛r
, u32 
mask_£t
)

87 
	`DEFINE_SPINLOCK
(
lock
);

88 
u32
 
œtch_£t
 = 
RB750_LED_BITS
 | 
RB750_LVC573_LE
;

89 
u32
 
œtch_€
;

90 
u32
 
œtch_˛r
;

91 
Êags
;

92 
u32
 
t
;

94 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

96 i‡((
mask_˛r
 & 
	`BIT
(31)) != 0 &&

97 (
œtch_£t
 & 
RB750_LVC573_LE
) == 0) {

98 
u∆ock
;

101 
œtch_£t
 = (œtch_£à| 
mask_£t
Ë& ~
mask_˛r
;

102 
œtch_˛r
 = (œtch_˛∏| 
mask_˛r
Ë& ~
mask_£t
;

104 i‡(
œtch_€
 == 0)

105 
œtch_€
 = 
	`__øw_ªadl
(
©h79_gpio_ba£
 + 
AR71XX_GPIO_REG_OE
);

107 i‡(
	`likñy
(
œtch_£t
 & 
RB750_LVC573_LE
)) {

108 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

110 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

111 
t
 |
mask_˛r
 | 
œtch_€
 | 
mask_£t
;

113 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

114 
	`__øw_wrôñ
(
œtch_˛r
, 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

115 
	`__øw_wrôñ
(
œtch_£t
, 
ba£
 + 
AR71XX_GPIO_REG_SET
);

116 } i‡(
mask_˛r
 & 
RB750_LVC573_LE
) {

117 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

119 
œtch_€
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

120 
	`__øw_wrôñ
(
RB750_LVC573_LE
, 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

122 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

125 
u∆ock
:

126 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

127 
	}
}

129 
	$rb750_«nd_íabÀ_pös
()

131 
	`rb750_œtch_ch™ge
(
RB750_LVC573_LE
, 0);

132 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
,

133 
AR724X_GPIO_FUNC_SPI_EN
);

134 
	}
}

136 
	$rb750_«nd_dißbÀ_pös
()

138 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_SPI_EN
,

139 
AR724X_GPIO_FUNC_JTAG_DISABLE
);

140 
	`rb750_œtch_ch™ge
(0, 
RB750_LVC573_LE
);

141 
	}
}

143 
__öô
 
	$rb750_£tup
()

145 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

146 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

147 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

148 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

149 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

151 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

152 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

154 
	`©h79_ªgi°î_mdio
(0, 0x0);

157 
	`©h79_ªgi°î_ëh
(1);

160 
	`©h79_ªgi°î_ëh
(0);

162 
rb750_Àds_d©a
.
num_Àds
 = 
	`ARRAY_SIZE
(
rb750_Àds
);

163 
rb750_Àds_d©a
.
Àds
 = 
rb750_Àds
;

164 
rb750_Àds_d©a
.
œtch_ch™ge
 = 
rb750_œtch_ch™ge
;

165 
	`∂©f‹m_devi˚_ªgi°î
(&
rb750_Àds_devi˚
);

167 
rb750_«nd_d©a
.
n˚_löe
 = 
RB750_NAND_NCE
;

168 
rb750_«nd_d©a
.
íabÀ_pös
 = 
rb750_«nd_íabÀ_pös
;

169 
rb750_«nd_d©a
.
dißbÀ_pös
 = 
rb750_«nd_dißbÀ_pös
;

170 
rb750_«nd_d©a
.
œtch_ch™ge
 = 
rb750_œtch_ch™ge
;

171 
	`∂©f‹m_devi˚_ªgi°î
(&
rb750_«nd_devi˚
);

174 
	`©h79_ªgi°î_usb
();

175 
	}
}

177 
MIPS_MACHINE
(
ATH79_MACH_RB_750
, "750i", "MikroTik RouterBOARD 750",

178 
rb750_£tup
);

180 
¨8327_∑d_cfg
 
	grb750gr3_¨8327_∑d0_cfg
 = {

181 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

182 .
	gtx˛k_dñay_í
 = 
åue
,

183 .
	grx˛k_dñay_í
 = 
åue
,

184 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

185 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

188 
¨8327_∂©f‹m_d©a
 
	grb750gr3_¨8327_d©a
 = {

189 .
∑d0_cfg
 = &
rb750gr3_¨8327_∑d0_cfg
,

190 .
	gp‹t0_cfg
 = {

191 .
f‹˚_lök
 = 1,

192 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

193 .
	gdu∂ex
 = 1,

194 .
	gtx∑u£
 = 1,

195 .
	grx∑u£
 = 1,

199 
mdio_bﬂrd_öfo
 
	grb750g3_mdio_öfo
[] = {

201 .
bus_id
 = "ag71xx-mdio.0",

202 .
	gmdio_addr
 = 0,

203 .
	g∂©f‹m_d©a
 = &
rb750gr3_¨8327_d©a
,

207 
	$rb750gr3_«nd_íabÀ_pös
()

209 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
,

210 
AR724X_GPIO_FUNC_SPI_EN
 |

211 
AR724X_GPIO_FUNC_SPI_CS_EN2
);

212 
	}
}

214 
	$rb750gr3_«nd_dißbÀ_pös
()

216 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_SPI_EN
 |

217 
AR724X_GPIO_FUNC_SPI_CS_EN2
,

218 
AR724X_GPIO_FUNC_JTAG_DISABLE
);

219 
	}
}

221 
	$rb750gr3_œtch_ch™ge
(
u32
 
mask_˛r
, u32 
mask_£t
)

223 
	`DEFINE_SPINLOCK
(
lock
);

224 
u32
 
œtch_£t
 = 
RB7XX_LED_ACT
;

225 
u32
 
œtch_˛r
;

226 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

227 
Êags
;

228 
u32
 
t
;

230 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

232 
œtch_£t
 = (œtch_£à| 
mask_£t
Ë& ~
mask_˛r
;

233 
œtch_˛r
 = (œtch_˛∏| 
mask_˛r
Ë& ~
mask_£t
;

235 
mask_£t
 = 
œtch_£t
 & (
RB7XX_USB_POWERON
 | 
RB7XX_MONITOR
);

236 
mask_˛r
 = 
œtch_˛r
 & (
RB7XX_USB_POWERON
 | 
RB7XX_MONITOR
);

238 i‡((
œtch_£t
 ^ 
RB7XX_LED_ACT
) & RB7XX_LED_ACT) {

240 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

241 
t
 |
RB7XX_LED_ACT
;

242 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

244 
mask_˛r
 |
RB7XX_LED_ACT
;

247 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

248 
t
 &~
RB7XX_LED_ACT
;

249 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

252 
	`__øw_wrôñ
(
mask_£t
, 
ba£
 + 
AR71XX_GPIO_REG_SET
);

253 
	`__øw_wrôñ
(
mask_˛r
, 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

255 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

256 
	}
}

258 
__öô
 
	$rb750gr3_£tup
()

260 
	`©h79_ªgi°î_mdio
(0, 0x0);

261 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb750g3_mdio_öfo
,

262 
	`ARRAY_SIZE
(
rb750g3_mdio_öfo
));

264 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

265 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

266 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

267 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x62000000;

269 
	`©h79_ªgi°î_ëh
(0);

271 
rb750_Àds_d©a
.
num_Àds
 = 
	`ARRAY_SIZE
(
rb750gr3_Àds
);

272 
rb750_Àds_d©a
.
Àds
 = 
rb750gr3_Àds
;

273 
rb750_Àds_d©a
.
œtch_ch™ge
 = 
rb750gr3_œtch_ch™ge
;

274 
	`∂©f‹m_devi˚_ªgi°î
(&
rb750_Àds_devi˚
);

276 
rb750_«nd_d©a
.
n˚_löe
 = 
RB7XX_NAND_NCE
;

277 
rb750_«nd_d©a
.
íabÀ_pös
 = 
rb750gr3_«nd_íabÀ_pös
;

278 
rb750_«nd_d©a
.
dißbÀ_pös
 = 
rb750gr3_«nd_dißbÀ_pös
;

279 
rb750_«nd_d©a
.
œtch_ch™ge
 = 
rb750gr3_œtch_ch™ge
;

280 
	`∂©f‹m_devi˚_ªgi°î
(&
rb750_«nd_devi˚
);

281 
	}
}

283 
MIPS_MACHINE
(
ATH79_MACH_RB_750G_R3
, "750Gr3", "MikroTik RouterBOARD 750GL",

284 
rb750gr3_£tup
);

286 
	#RB751_HARDCONFIG
 0x1f00b000

	)

287 
	#RB751_HARDCONFIG_SIZE
 0x1000

	)

289 
__öô
 
	$rb751_wœn_£tup
()

291 
u8
 *
h¨dc⁄fig
 = (u8 *Ë
	`KSEG1ADDR
(
RB751_HARDCONFIG
);

292 
©h9k_∂©f‹m_d©a
 *
wmac_d©a
;

293 
u16
 
èg_Àn
;

294 
u8
 *
èg
;

295 
u16
 
mac_Àn
;

296 
u8
 *
mac
;

297 
îr
;

299 
wmac_d©a
 = 
	`≠9x_pci_gë_wmac_d©a
(0);

300 i‡(!
wmac_d©a
) {

301 
	`¥_îr
("rb75x: unableÅo getáddress of wlan data\n");

305 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 9);

307 
îr
 = 
	`rouãrboŸ_föd_èg
(
h¨dc⁄fig
, 
RB751_HARDCONFIG_SIZE
,

308 
RB_ID_WLAN_DATA
, &
èg
, &
èg_Àn
);

309 i‡(
îr
) {

310 
	`¥_îr
("rb75x:Ço calibration data found\n");

314 
îr
 = 
	`æe_decode
(
èg
, 
èg_Àn
, (*Ë
wmac_d©a
->
ì¥om_d©a
,

315 (
wmac_d©a
->
ì¥om_d©a
), 
NULL
, NULL);

316 i‡(
îr
) {

317 
	`¥_îr
("rb75x: unableÅo decode wlanÉeprom data\n");

321 
îr
 = 
	`rouãrboŸ_föd_èg
(
h¨dc⁄fig
, 
RB751_HARDCONFIG_SIZE
,

322 
RB_ID_MAC_ADDRESS_PACK
, &
mac
, &
mac_Àn
);

323 i‡(
îr
) {

324 
	`¥_îr
("rb75x:Ço macáddress found\n");

328 
	`≠91_pci_öô
(
NULL
, 
mac
);

329 
	}
}

331 
__öô
 
	$rb751_£tup
()

333 
	`rb750_£tup
();

334 
	`©h79_ªgi°î_usb
();

335 
	`rb751_wœn_£tup
();

336 
	}
}

338 
MIPS_MACHINE
(
ATH79_MACH_RB_751
, "751", "MikroTik RouterBOARD 751",

339 
rb751_£tup
);

341 
__öô
 
	$rb751g_£tup
()

343 
	`rb750gr3_£tup
();

344 
	`©h79_ªgi°î_usb
();

345 
	`rb751_wœn_£tup
();

346 
	}
}

348 
MIPS_MACHINE
(
ATH79_MACH_RB_751G
, "751g", "MikroTik RouterBOARD 751G",

349 
rb751g_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb91x.c

11 
	#¥_fmt
(
fmt
Ë"rb91x: " 
	)
fmt

13 
	~<löux/vîsi⁄.h
>

14 
	~<löux/phy.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<löux/mtd/mtd.h
>

19 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

20 
	~<löux/mtd/«nd.h
>

22 
	~<löux/mtd/øw«nd.h
>

24 
	~<löux/mtd/∑πôi⁄s.h
>

25 
	~<löux/•i/•i.h
>

26 
	~<löux/•i/74x164.h
>

27 
	~<löux/•i/Êash.h
>

28 
	~<löux/rouãrboŸ.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/∂©f‹m_d©a/gpio-œtch.h
>

31 
	~<löux/∂©f‹m_d©a/rb91x_«nd.h
>

32 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

34 
	~<asm/¥om.h
>

35 
	~<asm/mach-©h79/©h79.h
>

36 
	~<asm/mach-©h79/©h79_•i_∂©f‹m.h
>

37 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

39 
	~"comm⁄.h
"

40 
	~"dev-ëh.h
"

41 
	~"dev-Àds-gpio.h
"

42 
	~"dev-nfc.h
"

43 
	~"dev-usb.h
"

44 
	~"dev-•i.h
"

45 
	~"dev-wmac.h
"

46 
	~"machty≥s.h
"

47 
	~"pci.h
"

48 
	~"rouãrboŸ.h
"

50 
	#RB_ROUTERBOOT_OFFSET
 0x0000

	)

51 
	#RB_ROUTERBOOT_MIN_SIZE
 0xb000

	)

52 
	#RB_HARD_CFG_SIZE
 0x1000

	)

53 
	#RB_BIOS_OFFSET
 0xd000

	)

54 
	#RB_BIOS_SIZE
 0x1000

	)

55 
	#RB_SOFT_CFG_OFFSET
 0xf000

	)

56 
	#RB_SOFT_CFG_SIZE
 0x1000

	)

58 
	#RB91X_FLAG_USB
 
	`BIT
(0)

	)

59 
	#RB91X_FLAG_PCIE
 
	`BIT
(1)

	)

61 
	#RB91X_LATCH_GPIO_BASE
 32

	)

62 
	#RB91X_LATCH_GPIO
(
_x
Ë(
RB91X_LATCH_GPIO_BASE
 + (_x))

	)

64 
	#RB91X_SSR_GPIO_BASE
 (
RB91X_LATCH_GPIO_BASE
 + 
AR934X_GPIO_COUNT
)

	)

65 
	#RB91X_SSR_GPIO
(
_x
Ë(
RB91X_SSR_GPIO_BASE
 + (_x))

	)

67 
	#RB91X_SSR_BIT_LED1
 0

	)

68 
	#RB91X_SSR_BIT_LED2
 1

	)

69 
	#RB91X_SSR_BIT_LED3
 2

	)

70 
	#RB91X_SSR_BIT_LED4
 3

	)

71 
	#RB91X_SSR_BIT_LED5
 4

	)

72 
	#RB91X_SSR_BIT_5
 5

	)

73 
	#RB91X_SSR_BIT_USB_POWER
 6

	)

74 
	#RB91X_SSR_BIT_PCIE_POWER
 7

	)

76 
	#RB91X_GPIO_SSR_STROBE
 
	`RB91X_LATCH_GPIO
(0)

	)

77 
	#RB91X_GPIO_LED_POWER
 
	`RB91X_LATCH_GPIO
(1)

	)

78 
	#RB91X_GPIO_LED_USER
 
	`RB91X_LATCH_GPIO
(2)

	)

79 
	#RB91X_GPIO_NAND_READ
 
	`RB91X_LATCH_GPIO
(3)

	)

80 
	#RB91X_GPIO_NAND_RDY
 
	`RB91X_LATCH_GPIO
(4)

	)

81 
	#RB91X_GPIO_NLE
 
	`RB91X_LATCH_GPIO
(11)

	)

82 
	#RB91X_GPIO_NAND_NRW
 
	`RB91X_LATCH_GPIO
(12)

	)

83 
	#RB91X_GPIO_NAND_NCE
 
	`RB91X_LATCH_GPIO
(13)

	)

84 
	#RB91X_GPIO_NAND_CLE
 
	`RB91X_LATCH_GPIO
(14)

	)

85 
	#RB91X_GPIO_NAND_ALE
 
	`RB91X_LATCH_GPIO
(15)

	)

87 
	#RB91X_GPIO_LED_1
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_LED1
)

	)

88 
	#RB91X_GPIO_LED_2
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_LED2
)

	)

89 
	#RB91X_GPIO_LED_3
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_LED3
)

	)

90 
	#RB91X_GPIO_LED_4
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_LED4
)

	)

91 
	#RB91X_GPIO_LED_5
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_LED5
)

	)

92 
	#RB91X_GPIO_USB_POWER
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_USB_POWER
)

	)

93 
	#RB91X_GPIO_PCIE_POWER
 
	`RB91X_SSR_GPIO
(
RB91X_SSR_BIT_PCIE_POWER
)

	)

95 
	srb_bﬂrd_öfo
 {

96 c⁄° *
	m«me
;

97 
u32
 
	mÊags
;

100 
mtd_∑πôi⁄
 
	grb711gr100_•i_∑πôi⁄s
[] = {

102 .
«me
 = "routerboot",

103 .
	goff£t
 = 
RB_ROUTERBOOT_OFFSET
,

104 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

106 .
	g«me
 = "hard_config",

107 .
	gsize
 = 
RB_HARD_CFG_SIZE
,

108 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

110 .
	g«me
 = "bios",

111 .
	goff£t
 = 
RB_BIOS_OFFSET
,

112 .
	gsize
 = 
RB_BIOS_SIZE
,

113 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

115 .
	g«me
 = "soft_config",

116 .
	gsize
 = 
RB_SOFT_CFG_SIZE
,

120 
Êash_∂©f‹m_d©a
 
	grb711gr100_•i_Êash_d©a
 = {

121 .
∑πs
 = 
rb711gr100_•i_∑πôi⁄s
,

122 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
rb711gr100_•i_∑πôi⁄s
),

125 
	grb711gr100_gpio_œtch_gpios
[
AR934X_GPIO_COUNT
] 
	g__öôd©a
 = {

130 
gpio_œtch_∂©f‹m_d©a
 
rb711gr100_gpio_œtch_d©a
 
	g__öôd©a
 = {

131 .
ba£
 = 
RB91X_LATCH_GPIO_BASE
,

132 .
	gnum_gpios
 = 
ARRAY_SIZE
(
rb711gr100_gpio_œtch_gpios
),

133 .
	ggpios
 = 
rb711gr100_gpio_œtch_gpios
,

134 .
	gÀ_gpio_ödex
 = 11,

135 .
	gÀ_a˘ive_low
 = 
åue
,

138 
rb91x_«nd_∂©f‹m_d©a
 
rb711gr100_«nd_d©a
 
	g__öôd©a
 = {

139 .
gpio_n˚
 = 
RB91X_GPIO_NAND_NCE
,

140 .
	ggpio_Æe
 = 
RB91X_GPIO_NAND_ALE
,

141 .
	ggpio_˛e
 = 
RB91X_GPIO_NAND_CLE
,

142 .
	ggpio_rdy
 = 
RB91X_GPIO_NAND_RDY
,

143 .
	ggpio_ªad
 = 
RB91X_GPIO_NAND_READ
,

144 .
	ggpio_ƒw
 = 
RB91X_GPIO_NAND_NRW
,

145 .
	ggpio_∆e
 = 
RB91X_GPIO_NLE
,

148 
u8
 
	grb711gr100_s§_öôd©a
[] = {

149 
BIT
(
RB91X_SSR_BIT_PCIE_POWER
) |

150 
BIT
(
RB91X_SSR_BIT_USB_POWER
) |

151 
BIT
(
RB91X_SSR_BIT_5
)

154 
gí_74x164_chù_∂©f‹m_d©a
 
	grb711gr100_s§_d©a
 = {

155 .
ba£
 = 
RB91X_SSR_GPIO_BASE
,

156 .
	gnum_ªgi°îs
 = 
ARRAY_SIZE
(
rb711gr100_s§_öôd©a
),

157 .
	göô_d©a
 = 
rb711gr100_s§_öôd©a
,

160 
•i_bﬂrd_öfo
 
	grb711gr100_•i_öfo
[] = {

162 .
bus_num
 = 0,

163 .
	gchù_£À˘
 = 0,

164 .
	gmax_•ìd_hz
 = 25000000,

165 .
	gmodÆüs
 = "m25p80",

166 .
	g∂©f‹m_d©a
 = &
rb711gr100_•i_Êash_d©a
,

168 .
	gbus_num
 = 0,

169 .
	gchù_£À˘
 = 1,

170 .
	gmax_•ìd_hz
 = 10000000,

171 .
	gmodÆüs
 = "74x164",

172 .
	g∂©f‹m_d©a
 = &
rb711gr100_s§_d©a
,

176 
	grb711gr100_•i_cs_gpios
[2] = {

177 -
ENOENT
,

178 
RB91X_GPIO_SSR_STROBE
,

181 
©h79_•i_∂©f‹m_d©a
 
rb711gr100_•i_d©a
 
	g__öôd©a
 = {

182 .
bus_num
 = 0,

183 .
	gnum_chù£À˘
 = 2,

184 .
	gcs_gpios
 = 
rb711gr100_•i_cs_gpios
,

187 
gpio_Àd
 
	grb711gr100_Àds
[] 
	g__öôd©a
 = {

189 .
«me
 = "rb:green:led1",

190 .
	ggpio
 = 
RB91X_GPIO_LED_1
,

191 .
	ga˘ive_low
 = 0,

194 .
	g«me
 = "rb:green:led2",

195 .
	ggpio
 = 
RB91X_GPIO_LED_2
,

196 .
	ga˘ive_low
 = 0,

199 .
	g«me
 = "rb:green:led3",

200 .
	ggpio
 = 
RB91X_GPIO_LED_3
,

201 .
	ga˘ive_low
 = 0,

204 .
	g«me
 = "rb:green:led4",

205 .
	ggpio
 = 
RB91X_GPIO_LED_4
,

206 .
	ga˘ive_low
 = 0,

209 .
	g«me
 = "rb:green:led5",

210 .
	ggpio
 = 
RB91X_GPIO_LED_5
,

211 .
	ga˘ive_low
 = 0,

214 .
	g«me
 = "rb:green:user",

215 .
	ggpio
 = 
RB91X_GPIO_LED_USER
,

216 .
	ga˘ive_low
 = 0,

219 .
	g«me
 = "rb:green:power",

220 .
	ggpio
 = 
RB91X_GPIO_LED_POWER
,

221 .
	ga˘ive_low
 = 0,

222 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

226 
©803x_∂©f‹m_d©a
 
	grb91x_©803x_d©a
 = {

227 .
dißbÀ_sm¨ãì
 = 1,

228 .
	gíabÀ_rgmii_rx_dñay
 = 1,

229 .
	gíabÀ_rgmii_tx_dñay
 = 1,

232 
mdio_bﬂrd_öfo
 
	grb91x_mdio0_öfo
[] = {

234 .
bus_id
 = "ag71xx-mdio.0",

235 .
	gmdio_addr
 = 0,

236 .
	g∂©f‹m_d©a
 = &
rb91x_©803x_d©a
,

240 
__öô
 
	$rb711gr100_öô_∑πôi⁄s
(c⁄° 
rb_öfo
 *
öfo
)

242 
rb711gr100_•i_∑πôi⁄s
[0].
size
 = 
öfo
->
h¨d_cfg_offs
;

243 
rb711gr100_•i_∑πôi⁄s
[1].
off£t
 = 
öfo
->
h¨d_cfg_offs
;

245 
rb711gr100_•i_∑πôi⁄s
[3].
off£t
 = 
öfo
->
so·_cfg_offs
;

246 
	}
}

248 
__öô
 
	$rb711gr100_wœn_öô
()

250 *
ˇld©a
;

251 
u8
 
wœn_mac
[
ETH_ALEN
];

253 
ˇld©a
 = 
	`rb_gë_wœn_d©a
();

254 i‡(
ˇld©a
 =
NULL
)

257 
	`©h79_öô_mac
(
wœn_mac
, 
©h79_mac_ba£
, 1);

258 
	`©h79_ªgi°î_wmac
(
ˇld©a
 + 0x1000, 
wœn_mac
);

260 
	`k‰ì
(
ˇld©a
);

261 
	}
}

263 
	#RB_BOARD_INFO
(
_«me
, 
_Êags
) \

265 .
«me
 = (
_«me
), \

266 .
Êags
 = (
_Êags
), \

267 }

	)

269 c⁄° 
rb_bﬂrd_öfo
 
	grb711gr100_bﬂrds
[] 
	g__öôc⁄°
 = {

270 
RB_BOARD_INFO
("911G-2HPnD", 0),

271 
RB_BOARD_INFO
("911G-5HPnD", 0),

272 
RB_BOARD_INFO
("912UAG-2HPnD", 
RB91X_FLAG_USB
 | 
RB91X_FLAG_PCIE
),

273 
RB_BOARD_INFO
("912UAG-5HPnD", 
RB91X_FLAG_USB
 | 
RB91X_FLAG_PCIE
),

276 
u32
 
	$rb711gr100_gë_Êags
(c⁄° 
rb_öfo
 *
öfo
)

278 
i
;

280 
i
 = 0; i < 
	`ARRAY_SIZE
(
rb711gr100_bﬂrds
); i++) {

281 c⁄° 
rb_bﬂrd_öfo
 *
bi
;

283 
bi
 = &
rb711gr100_bﬂrds
[
i
];

284 i‡(
	`°rcmp
(
öfo
->
bﬂrd_«me
, 
bi
->
«me
) == 0)

285  
bi
->
Êags
;

289 
	}
}

291 
__öô
 
	$rb711gr100_£tup
()

293 c⁄° 
rb_öfo
 *
öfo
;

294 
buf
[64];

295 
u32
 
Êags
;

297 
öfo
 = 
	`rb_öô_öfo
((*Ë
	`KSEG1ADDR
(0x1f000000), 0x10000);

298 i‡(!
öfo
)

301 
	`s˙¥ötf
(
buf
, (buf), "Mikrotik RouterBOARD %s",

302 (
öfo
->
bﬂrd_«me
) ? info->board_name : "");

303 
	`mùs_£t_machöe_«me
(
buf
);

305 
	`rb711gr100_öô_∑πôi⁄s
(
öfo
);

306 
	`©h79_ªgi°î_•i
(&
rb711gr100_•i_d©a
, 
rb711gr100_•i_öfo
,

307 
	`ARRAY_SIZE
(
rb711gr100_•i_öfo
));

309 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

310 
AR934X_ETH_CFG_RXD_DELAY
 |

311 
AR934X_ETH_CFG_SW_ONLY_MODE
);

313 
	`©h79_ªgi°î_mdio
(0, 0x0);

315 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb91x_mdio0_öfo
,

316 
	`ARRAY_SIZE
(
rb91x_mdio0_öfo
));

318 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

319 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

320 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

321 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x02000000;

323 
	`©h79_ªgi°î_ëh
(0);

325 
	`rb711gr100_wœn_öô
();

327 
	`∂©f‹m_devi˚_ªgi°î_d©a
(
NULL
, "rb91x-nand", -1,

328 &
rb711gr100_«nd_d©a
,

329 (
rb711gr100_«nd_d©a
));

331 
	`∂©f‹m_devi˚_ªgi°î_d©a
(
NULL
, "gpio-latch", -1,

332 &
rb711gr100_gpio_œtch_d©a
,

333 (
rb711gr100_gpio_œtch_d©a
));

335 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb711gr100_Àds
),

336 
rb711gr100_Àds
);

338 
Êags
 = 
	`rb711gr100_gë_Êags
(
öfo
);

340 i‡(
Êags
 & 
RB91X_FLAG_USB
)

341 
	`©h79_ªgi°î_usb
();

343 i‡(
Êags
 & 
RB91X_FLAG_PCIE
)

344 
	`©h79_ªgi°î_pci
();

346 
	}
}

348 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_711GR100
, "711Gr100", 
rb711gr100_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb922.c

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/dñay.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/mtd/mtd.h
>

17 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

18 
	~<löux/mtd/«nd.h
>

20 
	~<löux/mtd/øw«nd.h
>

22 
	~<löux/mtd/∑πôi⁄s.h
>

23 
	~<löux/•i/•i.h
>

24 
	~<löux/•i/Êash.h
>

25 
	~<löux/rouãrboŸ.h
>

26 
	~<löux/gpio.h
>

27 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

28 
	~<löux/vîsi⁄.h
>

30 
	~<asm/¥om.h
>

31 
	~<asm/mach-©h79/©h79.h
>

32 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

34 
	~"comm⁄.h
"

35 
	~"dev-gpio-buâ⁄s.h
"

36 
	~"dev-ëh.h
"

37 
	~"dev-Àds-gpio.h
"

38 
	~"dev-m25p80.h
"

39 
	~"dev-nfc.h
"

40 
	~"dev-usb.h
"

41 
	~"dev-•i.h
"

42 
	~"machty≥s.h
"

43 
	~"pci.h
"

44 
	~"rouãrboŸ.h
"

46 
	#RB922_GPIO_LED_USR
 12

	)

47 
	#RB922_GPIO_USB_POWER
 13

	)

48 
	#RB922_GPIO_FAN_CTRL
 14

	)

49 
	#RB922_GPIO_BTN_RESET
 20

	)

50 
	#RB922_GPIO_NAND_NCE
 23

	)

52 
	#RB922_PHY_ADDR
 4

	)

54 
	#RB922_KEYS_POLL_INTERVAL
 20

	)

55 
	#RB922_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RB922_KEYS_POLL_INTERVAL
)

	)

57 
	#RB_ROUTERBOOT_OFFSET
 0x0000

	)

58 
	#RB_ROUTERBOOT_MIN_SIZE
 0xb000

	)

59 
	#RB_HARD_CFG_SIZE
 0x1000

	)

60 
	#RB_BIOS_OFFSET
 0xd000

	)

61 
	#RB_BIOS_SIZE
 0x1000

	)

62 
	#RB_SOFT_CFG_OFFSET
 0xf000

	)

63 
	#RB_SOFT_CFG_SIZE
 0x1000

	)

65 
mtd_∑πôi⁄
 
	grb922gs_•i_∑πôi⁄s
[] = {

67 .
«me
 = "routerboot",

68 .
	goff£t
 = 
RB_ROUTERBOOT_OFFSET
,

69 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

71 .
	g«me
 = "hard_config",

72 .
	gsize
 = 
RB_HARD_CFG_SIZE
,

73 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

75 .
	g«me
 = "bios",

76 .
	goff£t
 = 
RB_BIOS_OFFSET
,

77 .
	gsize
 = 
RB_BIOS_SIZE
,

78 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

80 .
	g«me
 = "soft_config",

81 .
	gsize
 = 
RB_SOFT_CFG_SIZE
,

85 
Êash_∂©f‹m_d©a
 
	grb922gs_•i_Êash_d©a
 = {

86 .
∑πs
 = 
rb922gs_•i_∑πôi⁄s
,

87 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
rb922gs_•i_∑πôi⁄s
),

90 
gpio_Àd
 
	grb922gs_Àds
[] 
	g__öôd©a
 = {

92 .
«me
 = "rb:green:user",

93 .
	ggpio
 = 
RB922_GPIO_LED_USR
,

94 .
	ga˘ive_low
 = 1,

98 
gpio_keys_buâ⁄
 
	grb922gs_gpio_keys
[] 
	g__öôd©a
 = {

100 .
desc
 = "Reset button",

101 .
	gty≥
 = 
EV_KEY
,

102 .
	gcode
 = 
KEY_RESTART
,

103 .
	gdeboun˚_öãrvÆ
 = 
RB922_KEYS_DEBOUNCE_INTERVAL
,

104 .
	ggpio
 = 
RB922_GPIO_BTN_RESET
,

105 .
	ga˘ive_low
 = 1,

109 
©803x_∂©f‹m_d©a
 
	grb922gs_©803x_d©a
 = {

110 .
dißbÀ_sm¨ãì
 = 1,

113 
mdio_bﬂrd_öfo
 
	grb922gs_mdio0_öfo
[] = {

115 .
bus_id
 = "ag71xx-mdio.0",

116 .
	gmdio_addr
 = 
RB922_PHY_ADDR
,

117 .
	g∂©f‹m_d©a
 = &
rb922gs_©803x_d©a
,

121 
__öô
 
	$rb922gs_öô_∑πôi⁄s
(c⁄° 
rb_öfo
 *
öfo
)

123 
rb922gs_•i_∑πôi⁄s
[0].
size
 = 
öfo
->
h¨d_cfg_offs
;

124 
rb922gs_•i_∑πôi⁄s
[1].
off£t
 = 
öfo
->
h¨d_cfg_offs
;

125 
rb922gs_•i_∑πôi⁄s
[3].
off£t
 = 
öfo
->
so·_cfg_offs
;

126 
	}
}

128 
	$rb922gs_«nd_£À˘_chù
(
chù_no
)

130 
chù_no
) {

132 
	`gpio_£t_vÆue
(
RB922_GPIO_NAND_NCE
, 0);

135 
	`gpio_£t_vÆue
(
RB922_GPIO_NAND_NCE
, 1);

138 
	`ndñay
(500);

139 
	}
}

141 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

142 
«nd_ec˛ayout
 
	grb922gs_«nd_ec˛ayout
 = {

143 .
eccbyãs
 = 6,

144 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

145 .
	goobavaû
 = 9,

146 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

151 
	$rb922gs_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

152 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

154 
£˘i⁄
) {

156 
oobªgi⁄
->
off£t
 = 8;

157 
oobªgi⁄
->
Àngth
 = 3;

160 
oobªgi⁄
->
off£t
 = 13;

161 
oobªgi⁄
->
Àngth
 = 3;

164  -
ERANGE
;

166 
	}
}

168 
	$rb922gs_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

169 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

171 
£˘i⁄
) {

173 
oobªgi⁄
->
off£t
 = 0;

174 
oobªgi⁄
->
Àngth
 = 4;

177 
oobªgi⁄
->
off£t
 = 4;

178 
oobªgi⁄
->
Àngth
 = 1;

181 
oobªgi⁄
->
off£t
 = 6;

182 
oobªgi⁄
->
Àngth
 = 2;

185 
oobªgi⁄
->
off£t
 = 11;

186 
oobªgi⁄
->
Àngth
 = 2;

189  -
ERANGE
;

191 
	}
}

193 c⁄° 
mtd_oobœyout_›s
 
	grb922gs_«nd_ec˛ayout_›s
 = {

194 .
ecc
 = 
rb922gs_oobœyout_ecc
,

195 .
	g‰ì
 = 
rb922gs_oobœyout_‰ì
,

199 
	$rb922gs_«nd_sˇn_fixup
(
mtd_öfo
 *
mtd
)

201 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

202 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

204 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

207 i‡(
mtd
->
wrôesize
 == 512) {

212 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

213 
chù
->
ecc
.
œyout
 = &
rb922gs_«nd_ec˛ayout
;

215 
	`mtd_£t_oobœyout
(
mtd
, &
rb922gs_«nd_ec˛ayout_›s
);

219 
chù
->
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

222 
	}
}

224 
mtd_∑πôi⁄
 
	grb922gs_«nd_∑πôi⁄s
[] = {

226 .
«me
 = "booter",

227 .
	goff£t
 = 0,

228 .
	gsize
 = (256 * 1024),

229 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

232 .
	g«me
 = "kernel",

233 .
	goff£t
 = (256 * 1024),

234 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

237 .
	g«me
 = "ubi",

238 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

239 .
	gsize
 = 
MTDPART_SIZ_FULL
,

243 
__öô
 
	$rb922gs_«nd_öô
()

245 
	`gpio_ªque°_⁄e
(
RB922_GPIO_NAND_NCE
, 
GPIOF_OUT_INIT_HIGH
, "NANDÇCE");

247 
	`©h79_nfc_£t_sˇn_fixup
(
rb922gs_«nd_sˇn_fixup
);

248 
	`©h79_nfc_£t_∑πs
(
rb922gs_«nd_∑πôi⁄s
,

249 
	`ARRAY_SIZE
(
rb922gs_«nd_∑πôi⁄s
));

250 
	`©h79_nfc_£t_£À˘_chù
(
rb922gs_«nd_£À˘_chù
);

251 
	`©h79_nfc_£t_sw≠_dma
(
åue
);

252 
	`©h79_ªgi°î_nfc
();

253 
	}
}

255 
__öô
 
	$rb922gs_£tup
()

257 c⁄° 
rb_öfo
 *
öfo
;

258 
buf
[64];

260 
öfo
 = 
	`rb_öô_öfo
((*Ë
	`KSEG1ADDR
(0x1f000000), 0x10000);

261 i‡(!
öfo
)

264 
	`s˙¥ötf
(
buf
, (buf), "MikroTik RouterBOARD %s",

265 (
öfo
->
bﬂrd_«me
) ? info->board_name : "");

266 
	`mùs_£t_machöe_«me
(
buf
);

268 
	`rb922gs_öô_∑πôi⁄s
(
öfo
);

269 
	`©h79_ªgi°î_m25p80
(&
rb922gs_•i_Êash_d©a
);

271 
	`rb922gs_«nd_öô
();

273 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

275 
	`©h79_ªgi°î_mdio
(0, 0x0);

277 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb922gs_mdio0_öfo
,

278 
	`ARRAY_SIZE
(
rb922gs_mdio0_öfo
));

280 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

281 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

282 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

283 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
RB922_PHY_ADDR
);

284 i‡(
	`°rcmp
(
öfo
->
bﬂrd_«me
, "921GS-5HPacDÑ2") == 0) {

285 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xa0001313;

286 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

287 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x8f000000;

290 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x81001313;

291 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x81000101;

292 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x8f000000;

295 
	`©h79_ªgi°î_ëh
(0);

297 
	`©h79_ªgi°î_pci
();

298 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb922gs_Àds
),Ñb922gs_leds);

299 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RB922_KEYS_POLL_INTERVAL
,

300 
	`ARRAY_SIZE
(
rb922gs_gpio_keys
),

301 
rb922gs_gpio_keys
);

308 
	}
}

310 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_922GS
, "922gs", 
rb922gs_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rb95x.c

13 
	#¥_fmt
(
fmt
Ë"rb95x: " 
	)
fmt

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/phy.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/©h9k_∂©f‹m.h
>

20 
	~<löux/¨8216_∂©f‹m.h
>

21 
	~<löux/mtd/mtd.h
>

22 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

23 
	~<löux/mtd/«nd.h
>

25 
	~<löux/mtd/øw«nd.h
>

27 
	~<löux/mtd/∑πôi⁄s.h
>

28 
	~<löux/•i/•i.h
>

29 
	~<löux/•i/Êash.h
>

30 
	~<löux/rouãrboŸ.h
>

31 
	~<löux/gpio.h
>

32 
	~<löux/vîsi⁄.h
>

34 
	~<asm/mach-©h79/©h79.h
>

35 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

37 
	~"comm⁄.h
"

38 
	~"dev-ëh.h
"

39 
	~"dev-m25p80.h
"

40 
	~"dev-nfc.h
"

41 
	~"dev-usb.h
"

42 
	~"dev-wmac.h
"

43 
	~"machty≥s.h
"

44 
	~"rouãrboŸ.h
"

45 
	~"dev-Àds-gpio.h
"

47 
	#RB95X_GPIO_NAND_NCE
 14

	)

49 
mtd_∑πôi⁄
 
	grb95x_«nd_∑πôi⁄s
[] = {

51 .
«me
 = "booter",

52 .
	goff£t
 = 0,

53 .
	gsize
 = (256 * 1024),

54 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

57 .
	g«me
 = "kernel",

58 .
	goff£t
 = (256 * 1024),

59 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

62 .
	g«me
 = "ubi",

63 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

64 .
	gsize
 = 
MTDPART_SIZ_FULL
,

68 
gpio_Àd
 
	grb951ui_Àds_gpio
[] 
	g__öôd©a
 = {

70 .
«me
 = "rb:green:wlan",

71 .
	ggpio
 = 11,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "rb:green:act",

75 .
	ggpio
 = 3,

76 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "rb:green:port1",

79 .
	ggpio
 = 13,

80 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "rb:green:port2",

83 .
	ggpio
 = 12,

84 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "rb:green:port3",

87 .
	ggpio
 = 4,

88 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "rb:green:port4",

91 .
	ggpio
 = 21,

92 .
	ga˘ive_low
 = 1,

94 .
	g«me
 = "rb:green:port5",

95 .
	ggpio
 = 16,

96 .
	ga˘ive_low
 = 1,

100 
¨8327_∑d_cfg
 
	grb95x_¨8327_∑d0_cfg
 = {

101 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

102 .
	gtx˛k_dñay_í
 = 
åue
,

103 .
	grx˛k_dñay_í
 = 
åue
,

104 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

105 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

108 
¨8327_∂©f‹m_d©a
 
	grb95x_¨8327_d©a
 = {

109 .
∑d0_cfg
 = &
rb95x_¨8327_∑d0_cfg
,

110 .
	gp‹t0_cfg
 = {

111 .
f‹˚_lök
 = 1,

112 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

113 .
	gdu∂ex
 = 1,

114 .
	gtx∑u£
 = 1,

115 .
	grx∑u£
 = 1,

119 
mdio_bﬂrd_öfo
 
	grb95x_mdio0_öfo
[] = {

121 .
bus_id
 = "ag71xx-mdio.0",

122 .
	gmdio_addr
 = 0,

123 .
	g∂©f‹m_d©a
 = &
rb95x_¨8327_d©a
,

127 
__öô
 
	$rb95x_wœn_öô
()

129 *
¨t_buf
;

130 
u8
 
wœn_mac
[
ETH_ALEN
];

132 
¨t_buf
 = 
	`rb_gë_wœn_d©a
();

133 i‡(
¨t_buf
 =
NULL
)

136 
	`©h79_öô_mac
(
wœn_mac
, 
©h79_mac_ba£
, 11);

137 
	`©h79_ªgi°î_wmac
(
¨t_buf
 + 0x1000, 
wœn_mac
);

139 
	`k‰ì
(
¨t_buf
);

140 
	}
}

142 
	$rb95x_«nd_£À˘_chù
(
chù_no
)

144 
chù_no
) {

146 
	`gpio_£t_vÆue
(
RB95X_GPIO_NAND_NCE
, 0);

149 
	`gpio_£t_vÆue
(
RB95X_GPIO_NAND_NCE
, 1);

152 
	`ndñay
(500);

153 
	}
}

155 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

156 
«nd_ec˛ayout
 
	grb95x_«nd_ec˛ayout
 = {

157 .
eccbyãs
 = 6,

158 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

159 .
	goobavaû
 = 9,

160 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

165 
	$rb95x_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

166 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

168 
£˘i⁄
) {

170 
oobªgi⁄
->
off£t
 = 8;

171 
oobªgi⁄
->
Àngth
 = 3;

174 
oobªgi⁄
->
off£t
 = 13;

175 
oobªgi⁄
->
Àngth
 = 3;

178  -
ERANGE
;

180 
	}
}

182 
	$rb95x_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

183 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

185 
£˘i⁄
) {

187 
oobªgi⁄
->
off£t
 = 0;

188 
oobªgi⁄
->
Àngth
 = 4;

191 
oobªgi⁄
->
off£t
 = 4;

192 
oobªgi⁄
->
Àngth
 = 1;

195 
oobªgi⁄
->
off£t
 = 6;

196 
oobªgi⁄
->
Àngth
 = 2;

199 
oobªgi⁄
->
off£t
 = 11;

200 
oobªgi⁄
->
Àngth
 = 2;

203  -
ERANGE
;

205 
	}
}

207 c⁄° 
mtd_oobœyout_›s
 
	grb95x_«nd_ec˛ayout_›s
 = {

208 .
ecc
 = 
rb95x_oobœyout_ecc
,

209 .
	g‰ì
 = 
rb95x_oobœyout_‰ì
,

213 
	$rb95x_«nd_sˇn_fixup
(
mtd_öfo
 *
mtd
)

215 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

216 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

218 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

221 i‡(
mtd
->
wrôesize
 == 512) {

226 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

227 
chù
->
ecc
.
œyout
 = &
rb95x_«nd_ec˛ayout
;

229 
	`mtd_£t_oobœyout
(
mtd
, &
rb95x_«nd_ec˛ayout_›s
);

233 
chù
->
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

236 
	}
}

238 
__öô
 
	$rb95x_«nd_öô
()

240 
	`gpio_ªque°_⁄e
(
RB95X_GPIO_NAND_NCE
, 
GPIOF_OUT_INIT_HIGH
, "NANDÇCE");

242 
	`©h79_nfc_£t_sˇn_fixup
(
rb95x_«nd_sˇn_fixup
);

243 
	`©h79_nfc_£t_∑πs
(
rb95x_«nd_∑πôi⁄s
,

244 
	`ARRAY_SIZE
(
rb95x_«nd_∑πôi⁄s
));

245 
	`©h79_nfc_£t_£À˘_chù
(
rb95x_«nd_£À˘_chù
);

246 
	`©h79_nfc_£t_sw≠_dma
(
åue
);

247 
	`©h79_ªgi°î_nfc
();

248 
	}
}

250 
__öô
 
	$rb95x_£tup
()

252 c⁄° 
rb_öfo
 *
öfo
;

254 
öfo
 = 
	`rb_öô_öfo
((*)(
	`KSEG1ADDR
(
AR71XX_SPI_BASE
)), 0x10000);

255 i‡(!
öfo
)

256  -
EINVAL
;

258 
	`rb95x_«nd_öô
();

261 
	}
}

263 
__öô
 
	$rb951g_£tup
()

265 i‡(
	`rb95x_£tup
())

268 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

269 
AR934X_ETH_CFG_SW_ONLY_MODE
);

271 
	`©h79_ªgi°î_mdio
(0, 0x0);

273 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb95x_mdio0_öfo
,

274 
	`ARRAY_SIZE
(
rb95x_mdio0_öfo
));

276 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

277 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

278 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

280 
	`©h79_ªgi°î_ëh
(0);

282 
	`rb95x_wœn_öô
();

283 
	`©h79_ªgi°î_usb
();

284 
	}
}

286 
MIPS_MACHINE
(
ATH79_MACH_RB_951G
, "951G", "MikroTik RouterBOARD 951G-2HnD",

287 
rb951g_£tup
);

289 
__öô
 
	$rb951ui_£tup
()

291 i‡(
	`rb95x_£tup
())

294 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

296 
	`©h79_ªgi°î_mdio
(1, 0x0);

298 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

299 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

301 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

302 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

303 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

304 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

305 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

306 
	`©h79_ªgi°î_ëh
(0);

308 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

309 
	`©h79_ªgi°î_ëh
(1);

311 
	`gpio_ªque°_⁄e
(20, 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

314 
	`gpio_ªque°_⁄e
(2, 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

317 
	`rb95x_wœn_öô
();

318 
	`©h79_ªgi°î_usb
();

320 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb951ui_Àds_gpio
),

321 
rb951ui_Àds_gpio
);

322 
	}
}

324 
MIPS_MACHINE
(
ATH79_MACH_RB_951U
, "951HnD", "MikroTik RouterBOARD 951Ui-2HnD",

325 
rb951ui_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rbspi.c

36 
	~<löux/pci.h
>

37 
	~<löux/∂©f‹m_devi˚.h
>

38 
	~<löux/phy.h
>

39 
	~<löux/rouãrboŸ.h
>

40 
	~<löux/gpio.h
>

42 
	~<löux/•i/•i.h
>

43 
	~<löux/•i/74x164.h
>

45 
	~<löux/mtd/mtd.h
>

46 
	~<löux/mtd/∑πôi⁄s.h
>

48 
	~<löux/¨8216_∂©f‹m.h
>

49 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

50 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

52 
	~<asm/¥om.h
>

53 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

54 
	~<asm/mach-©h79/©h79.h
>

56 
	~"comm⁄.h
"

57 
	~"dev-ëh.h
"

58 
	~"dev-•i.h
"

59 
	~"dev-gpio-buâ⁄s.h
"

60 
	~"dev-Àds-gpio.h
"

61 
	~"dev-m25p80.h
"

62 
	~"dev-usb.h
"

63 
	~"dev-wmac.h
"

64 
	~"machty≥s.h
"

65 
	~"pci.h
"

66 
	~"rouãrboŸ.h
"

68 
	#RBSPI_KEYS_POLL_INTERVAL
 20

	)

69 
	#RBSPI_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RBSPI_KEYS_POLL_INTERVAL
)

	)

71 
	#RBSPI_HAS_USB
 
	`BIT
(0)

	)

72 
	#RBSPI_HAS_WLAN0
 
	`BIT
(1)

	)

73 
	#RBSPI_HAS_WLAN1
 
	`BIT
(2)

	)

74 
	#RBSPI_HAS_WAN4
 
	`BIT
(3Ë

	)

75 
	#RBSPI_HAS_SSR
 
	`BIT
(4Ë

	)

76 
	#RBSPI_HAS_POE
 
	`BIT
(5)

	)

77 
	#RBSPI_HAS_MDIO1
 
	`BIT
(6)

	)

78 
	#RBSPI_HAS_PCI
 
	`BIT
(7)

	)

80 
	#RB_ROUTERBOOT_OFFSET
 0x0000

	)

81 
	#RB_BIOS_SIZE
 0x1000

	)

82 
	#RB_SOFT_CFG_SIZE
 0x1000

	)

86 
	mRBSPI_PART_RBOOT
,

87 
	mRBSPI_PART_HCONF
,

88 
	mRBSPI_PART_BIOS
,

89 
	mRBSPI_PART_RBOOT2
,

90 
	mRBSPI_PART_SCONF
,

91 
	mRBSPI_PART_FIRMW
,

92 
	mRBSPI_PARTS


95 
mtd_∑πôi⁄
 
	grb•i_•i_∑πôi⁄s
[
RBSPI_PARTS
];

101 
__öô
 
	$rb•i_öô_∑πôi⁄s
(c⁄° 
rb_öfo
 *
öfo
)

103 
mtd_∑πôi⁄
 *
∑πs
 = 
rb•i_•i_∑πôi⁄s
;

104 
	`mem£t
(
∑πs
, 0x0, (*parts));

106 
∑πs
[
RBSPI_PART_RBOOT
].
«me
 = "routerboot";

107 
∑πs
[
RBSPI_PART_RBOOT
].
off£t
 = 
RB_ROUTERBOOT_OFFSET
;

108 
∑πs
[
RBSPI_PART_RBOOT
].
size
 = 
öfo
->
h¨d_cfg_offs
;

109 
∑πs
[
RBSPI_PART_RBOOT
].
mask_Êags
 = 
MTD_WRITEABLE
;

111 
∑πs
[
RBSPI_PART_HCONF
].
«me
 = "hard_config";

112 
∑πs
[
RBSPI_PART_HCONF
].
off£t
 = 
öfo
->
h¨d_cfg_offs
;

113 
∑πs
[
RBSPI_PART_HCONF
].
size
 = 
öfo
->
h¨d_cfg_size
;

114 
∑πs
[
RBSPI_PART_HCONF
].
mask_Êags
 = 
MTD_WRITEABLE
;

116 
∑πs
[
RBSPI_PART_BIOS
].
«me
 = "bios";

117 
∑πs
[
RBSPI_PART_BIOS
].
off£t
 = 
öfo
->
h¨d_cfg_offs


118 + 
öfo
->
h¨d_cfg_size
;

119 
∑πs
[
RBSPI_PART_BIOS
].
size
 = 
RB_BIOS_SIZE
;

120 
∑πs
[
RBSPI_PART_BIOS
].
mask_Êags
 = 
MTD_WRITEABLE
;

122 
∑πs
[
RBSPI_PART_RBOOT2
].
«me
 = "routerboot2";

123 
∑πs
[
RBSPI_PART_RBOOT2
].
off£t
 =Ö¨ts[
RBSPI_PART_BIOS
].offset

124 + 
RB_BIOS_SIZE
;

125 
∑πs
[
RBSPI_PART_RBOOT2
].
size
 = 
öfo
->
so·_cfg_offs


126 - 
∑πs
[
RBSPI_PART_RBOOT2
].
off£t
;

127 
∑πs
[
RBSPI_PART_RBOOT2
].
mask_Êags
 = 
MTD_WRITEABLE
;

129 
∑πs
[
RBSPI_PART_SCONF
].
«me
 = "soft_config";

130 
∑πs
[
RBSPI_PART_SCONF
].
off£t
 = 
öfo
->
so·_cfg_offs
;

131 
∑πs
[
RBSPI_PART_SCONF
].
size
 = 
RB_SOFT_CFG_SIZE
;

133 
∑πs
[
RBSPI_PART_FIRMW
].
«me
 = "firmware";

134 
∑πs
[
RBSPI_PART_FIRMW
].
off£t
 =Ö¨ts[
RBSPI_PART_SCONF
].offset

135 + 
∑πs
[
RBSPI_PART_SCONF
].
size
;

136 
∑πs
[
RBSPI_PART_FIRMW
].
size
 = 
MTDPART_SIZ_FULL
;

137 
	}
}

139 
Êash_∂©f‹m_d©a
 
	grb•i_•i_Êash_d©a
 = {

140 .
∑πs
 = 
rb•i_•i_∑πôi⁄s
,

141 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
rb•i_•i_∑πôi⁄s
),

148 
gpio_keys_buâ⁄
 
	grb•i_gpio_keys_ª£t
[] 
	g__öôd©a
 = {

150 .
desc
 = "Reset button",

151 .
	gty≥
 = 
EV_KEY
,

152 .
	gcode
 = 
KEY_RESTART
,

153 .
	gdeboun˚_öãrvÆ
 = 
RBSPI_KEYS_DEBOUNCE_INTERVAL
,

154 .
	ggpio
 = -
ENOENT
,

155 .
	ga˘ive_low
 = 1,

160 
	#RBMAPL_GPIO_LED_POWER
 17

	)

161 
	#RBMAPL_GPIO_LED_USER
 14

	)

162 
	#RBMAPL_GPIO_LED_ETH
 4

	)

163 
	#RBMAPL_GPIO_LED_WLAN
 11

	)

164 
	#RBMAPL_GPIO_BTN_RESET
 16

	)

166 
gpio_Àd
 
	grbm≠l_Àds
[] 
	g__öôd©a
 = {

168 .
«me
 = "rb:green:power",

169 .
	ggpio
 = 
RBMAPL_GPIO_LED_POWER
,

170 .
	ga˘ive_low
 = 0,

171 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

173 .
	g«me
 = "rb:green:user",

174 .
	ggpio
 = 
RBMAPL_GPIO_LED_USER
,

175 .
	ga˘ive_low
 = 0,

177 .
	g«me
 = "rb:green:eth",

178 .
	ggpio
 = 
RBMAPL_GPIO_LED_ETH
,

179 .
	ga˘ive_low
 = 0,

181 .
	g«me
 = "rb:green:wlan",

182 .
	ggpio
 = 
RBMAPL_GPIO_LED_WLAN
,

183 .
	ga˘ive_low
 = 0,

188 
	#RBHAPL_GPIO_LED_USER
 14

	)

189 
	#RBHAPL_GPIO_BTN_RESET
 16

	)

191 
gpio_Àd
 
	grbh≠l_Àds
[] 
	g__öôd©a
 = {

193 .
«me
 = "rb:green:user",

194 .
	ggpio
 = 
RBHAPL_GPIO_LED_USER
,

195 .
	ga˘ive_low
 = 1,

200 
	#RBSPI_SSR_GPIO_BASE
 40

	)

201 
	#RBSPI_SSR_GPIO
(
bô
Ë(
RBSPI_SSR_GPIO_BASE
 + (bô))

	)

204 
	#RB952_SSR_BIT_LED_LAN1
 0

	)

205 
	#RB952_SSR_BIT_LED_LAN2
 1

	)

206 
	#RB952_SSR_BIT_LED_LAN3
 2

	)

207 
	#RB952_SSR_BIT_LED_LAN4
 3

	)

208 
	#RB952_SSR_BIT_LED_LAN5
 4

	)

209 
	#RB952_SSR_BIT_USB_POWER
 5

	)

210 
	#RB952_SSR_BIT_LED_WLAN
 6

	)

211 
	#RB952_GPIO_SSR_CS
 11

	)

212 
	#RB952_GPIO_LED_USER
 4

	)

213 
	#RB952_GPIO_POE_POWER
 14

	)

214 
	#RB952_GPIO_POE_STATUS
 12

	)

215 
	#RB952_GPIO_BTN_RESET
 16

	)

216 
	#RB952_GPIO_USB_PWROFF
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_USB_POWER
)

	)

217 
	#RB952_GPIO_LED_LAN1
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_LAN1
)

	)

218 
	#RB952_GPIO_LED_LAN2
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_LAN2
)

	)

219 
	#RB952_GPIO_LED_LAN3
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_LAN3
)

	)

220 
	#RB952_GPIO_LED_LAN4
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_LAN4
)

	)

221 
	#RB952_GPIO_LED_LAN5
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_LAN5
)

	)

222 
	#RB952_GPIO_LED_WLAN
 
	`RBSPI_SSR_GPIO
(
RB952_SSR_BIT_LED_WLAN
)

	)

224 
gpio_Àd
 
	grb952_Àds
[] 
	g__öôd©a
 = {

226 .
«me
 = "rb:green:user",

227 .
	ggpio
 = 
RB952_GPIO_LED_USER
,

228 .
	ga˘ive_low
 = 0,

230 .
	g«me
 = "rb:blue:wlan",

231 .
	ggpio
 = 
RB952_GPIO_LED_WLAN
,

232 .
	ga˘ive_low
 = 1,

234 .
	g«me
 = "rb:green:port1",

235 .
	ggpio
 = 
RB952_GPIO_LED_LAN1
,

236 .
	ga˘ive_low
 = 1,

238 .
	g«me
 = "rb:green:port2",

239 .
	ggpio
 = 
RB952_GPIO_LED_LAN2
,

240 .
	ga˘ive_low
 = 1,

242 .
	g«me
 = "rb:green:port3",

243 .
	ggpio
 = 
RB952_GPIO_LED_LAN3
,

244 .
	ga˘ive_low
 = 1,

246 .
	g«me
 = "rb:green:port4",

247 .
	ggpio
 = 
RB952_GPIO_LED_LAN4
,

248 .
	ga˘ive_low
 = 1,

250 .
	g«me
 = "rb:green:port5",

251 .
	ggpio
 = 
RB952_GPIO_LED_LAN5
,

252 .
	ga˘ive_low
 = 1,

258 
	#RB962_WIFI_LED_1
 1

	)

259 
	#RB962_WIFI_LED_2
 2

	)

260 
	#RB962_GPIO_POE_STATUS
 2

	)

261 
	#RB962_GPIO_POE_POWER
 3

	)

262 
	#RB962_GPIO_LED_USER
 12

	)

263 
	#RB962_GPIO_USB_PWROFF
 13

	)

264 
	#RB962_GPIO_BTN_RESET
 20

	)

266 
gpio_Àd
 
	grb962_Àds_gpio
[] 
	g__öôd©a
 = {

268 .
«me
 = "rb:green:user",

269 .
	ggpio
 = 
RB962_GPIO_LED_USER
,

270 .
	ga˘ive_low
 = 1,

274 c⁄° 
¨8327_Àd_öfo
 
	grb962_Àds_¨8327
[] = {

275 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "rb:green:port1"),

276 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "rb:green:port2"),

277 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "rb:green:port3"),

278 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "rb:green:port4"),

279 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "rb:green:port5"),

282 
¨8327_∑d_cfg
 
	grb962_¨8327_∑d0_cfg
 = {

283 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

284 .
	gtx˛k_dñay_í
 = 
åue
,

285 .
	grx˛k_dñay_í
 = 
åue
,

286 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

287 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

288 .
	gmac06_exch™ge_dis
 = 
åue
,

291 
¨8327_∑d_cfg
 
	grb962_¨8327_∑d6_cfg
 = {

293 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

294 .
	grx˛k_dñay_í
 = 
åue
,

295 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
,

298 
¨8327_Àd_cfg
 
	grb962_¨8327_Àd_cfg
 = {

299 .
Àd_˘æ0
 = 0xc737c737,

300 .
	gÀd_˘æ1
 = 0x00000000,

301 .
	gÀd_˘æ2
 = 0x00000000,

302 .
	gÀd_˘æ3
 = 0x0030c300,

303 .
	g›í_døö
 = 
Ál£
,

306 
¨8327_∂©f‹m_d©a
 
	grb962_¨8327_d©a
 = {

307 .
∑d0_cfg
 = &
rb962_¨8327_∑d0_cfg
,

308 .
	g∑d6_cfg
 = &
rb962_¨8327_∑d6_cfg
,

309 .
	gp‹t0_cfg
 = {

310 .
f‹˚_lök
 = 1,

311 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

312 .
	gdu∂ex
 = 1,

313 .
	gtx∑u£
 = 1,

314 .
	grx∑u£
 = 1,

316 .
	gp‹t6_cfg
 = {

317 .
f‹˚_lök
 = 1,

318 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

319 .
	gdu∂ex
 = 1,

320 .
	gtx∑u£
 = 1,

321 .
	grx∑u£
 = 1,

323 .
	gÀd_cfg
 = &
rb962_¨8327_Àd_cfg
,

324 .
	gnum_Àds
 = 
ARRAY_SIZE
(
rb962_Àds_¨8327
),

325 .
	gÀds
 = 
rb962_Àds_¨8327
,

328 
mdio_bﬂrd_öfo
 
	grb962_mdio0_öfo
[] = {

330 .
bus_id
 = "ag71xx-mdio.0",

331 .
	gmdio_addr
 = 0,

332 .
	g∂©f‹m_d©a
 = &
rb962_¨8327_d©a
,

337 
	#RBWAP_GPIO_LED_USER
 14

	)

338 
	#RBWAP_GPIO_LED_WLAN
 11

	)

339 
	#RBWAP_GPIO_BTN_RESET
 16

	)

341 
gpio_Àd
 
	grbw≠_Àds
[] 
	g__öôd©a
 = {

343 .
«me
 = "rb:green:user",

344 .
	ggpio
 = 
RBWAP_GPIO_LED_USER
,

345 .
	ga˘ive_low
 = 1,

347 .
	g«me
 = "rb:green:wlan",

348 .
	ggpio
 = 
RBWAP_GPIO_LED_WLAN
,

349 .
	ga˘ive_low
 = 1,

354 
	#RBCAP_GPIO_LED_1
 14

	)

355 
	#RBCAP_GPIO_LED_2
 12

	)

356 
	#RBCAP_GPIO_LED_3
 11

	)

357 
	#RBCAP_GPIO_LED_4
 4

	)

358 
	#RBCAP_GPIO_LED_ALL
 13

	)

360 
gpio_Àd
 
	grbˇp_Àds
[] 
	g__öôd©a
 = {

362 .
«me
 = "rb:green:rssi1",

363 .
	ggpio
 = 
RBCAP_GPIO_LED_1
,

364 .
	ga˘ive_low
 = 1,

366 .
	g«me
 = "rb:green:rssi2",

367 .
	ggpio
 = 
RBCAP_GPIO_LED_2
,

368 .
	ga˘ive_low
 = 1,

370 .
	g«me
 = "rb:green:rssi3",

371 .
	ggpio
 = 
RBCAP_GPIO_LED_3
,

372 .
	ga˘ive_low
 = 1,

374 .
	g«me
 = "rb:green:rssi4",

375 .
	ggpio
 = 
RBCAP_GPIO_LED_4
,

376 .
	ga˘ive_low
 = 1,

381 
	#RBMAP_SSR_BIT_LED_LAN1
 0

	)

382 
	#RBMAP_SSR_BIT_LED_LAN2
 1

	)

383 
	#RBMAP_SSR_BIT_LED_POEO
 2

	)

384 
	#RBMAP_SSR_BIT_LED_USER
 3

	)

385 
	#RBMAP_SSR_BIT_LED_WLAN
 4

	)

386 
	#RBMAP_SSR_BIT_USB_POWER
 5

	)

387 
	#RBMAP_SSR_BIT_LED_APCAP
 6

	)

388 
	#RBMAP_GPIO_BTN_RESET
 16

	)

389 
	#RBMAP_GPIO_SSR_CS
 11

	)

390 
	#RBMAP_GPIO_LED_POWER
 4

	)

391 
	#RBMAP_GPIO_POE_POWER
 14

	)

392 
	#RBMAP_GPIO_POE_STATUS
 12

	)

393 
	#RBMAP_GPIO_USB_PWROFF
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_USB_POWER
)

	)

394 
	#RBMAP_GPIO_LED_LAN1
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_LAN1
)

	)

395 
	#RBMAP_GPIO_LED_LAN2
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_LAN2
)

	)

396 
	#RBMAP_GPIO_LED_POEO
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_POEO
)

	)

397 
	#RBMAP_GPIO_LED_USER
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_USER
)

	)

398 
	#RBMAP_GPIO_LED_WLAN
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_WLAN
)

	)

399 
	#RBMAP_GPIO_LED_APCAP
 
	`RBSPI_SSR_GPIO
(
RBMAP_SSR_BIT_LED_APCAP
)

	)

401 
gpio_Àd
 
	grbm≠_Àds
[] 
	g__öôd©a
 = {

403 .
«me
 = "rb:green:power",

404 .
	ggpio
 = 
RBMAP_GPIO_LED_POWER
,

405 .
	ga˘ive_low
 = 1,

406 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

408 .
	g«me
 = "rb:green:eth1",

409 .
	ggpio
 = 
RBMAP_GPIO_LED_LAN1
,

410 .
	ga˘ive_low
 = 1,

412 .
	g«me
 = "rb:green:eth2",

413 .
	ggpio
 = 
RBMAP_GPIO_LED_LAN2
,

414 .
	ga˘ive_low
 = 1,

416 .
	g«me
 = "rb:red:poe_out",

417 .
	ggpio
 = 
RBMAP_GPIO_LED_POEO
,

418 .
	ga˘ive_low
 = 1,

420 .
	g«me
 = "rb:green:user",

421 .
	ggpio
 = 
RBMAP_GPIO_LED_USER
,

422 .
	ga˘ive_low
 = 1,

424 .
	g«me
 = "rb:green:wlan",

425 .
	ggpio
 = 
RBMAP_GPIO_LED_WLAN
,

426 .
	ga˘ive_low
 = 1,

428 .
	g«me
 = "rb:green:ap_cap",

429 .
	ggpio
 = 
RBMAP_GPIO_LED_APCAP
,

430 .
	ga˘ive_low
 = 1,

435 
	#RBLHG_GPIO_LED_0
 13

	)

436 
	#RBLHG_GPIO_LED_1
 12

	)

437 
	#RBLHG_GPIO_LED_2
 4

	)

438 
	#RBLHG_GPIO_LED_3
 21

	)

439 
	#RBLHG_GPIO_LED_4
 18

	)

440 
	#RBLHG_GPIO_LED_ETH
 14

	)

441 
	#RBLHG_GPIO_LED_POWER
 11

	)

442 
	#RBLHG_GPIO_LED_USER
 20

	)

443 
	#RBLHG_GPIO_BTN_RESET
 15

	)

445 
gpio_Àd
 
	grblhg_Àds
[] 
	g__öôd©a
 = {

447 .
«me
 = "rb:green:rssi0",

448 .
	ggpio
 = 
RBLHG_GPIO_LED_0
,

449 .
	ga˘ive_low
 = 1,

451 .
	g«me
 = "rb:green:rssi1",

452 .
	ggpio
 = 
RBLHG_GPIO_LED_1
,

453 .
	ga˘ive_low
 = 1,

455 .
	g«me
 = "rb:green:rssi2",

456 .
	ggpio
 = 
RBLHG_GPIO_LED_2
,

457 .
	ga˘ive_low
 = 1,

459 .
	g«me
 = "rb:green:rssi3",

460 .
	ggpio
 = 
RBLHG_GPIO_LED_3
,

461 .
	ga˘ive_low
 = 1,

463 .
	g«me
 = "rb:green:rssi4",

464 .
	ggpio
 = 
RBLHG_GPIO_LED_4
,

465 .
	ga˘ive_low
 = 1,

467 .
	g«me
 = "rb:green:eth",

468 .
	ggpio
 = 
RBLHG_GPIO_LED_ETH
,

469 .
	ga˘ive_low
 = 1,

471 .
	g«me
 = "rb:green:user",

472 .
	ggpio
 = 
RBLHG_GPIO_LED_USER
,

473 .
	ga˘ive_low
 = 1,

475 .
	g«me
 = "rb:blue:power",

476 .
	ggpio
 = 
RBLHG_GPIO_LED_POWER
,

477 .
	ga˘ive_low
 = 0,

478 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

483 
	#RBWAPGSC_WIFI_LED_1
 1

	)

484 
	#RBWAPGSC_WIFI_LED_2
 8

	)

485 
	#RBWAPGSC_WIFI_LED_3
 9

	)

486 
	#RBWAPGSC_GPIO_LED_POWER
 16

	)

487 
	#RBWAPGSC_GPIO_BTN_RESET
 1

	)

488 
	#RBWAPGSC_GPIO_MDIO_MDC
 12

	)

489 
	#RBWAPGSC_GPIO_MDIO_DATA
 11

	)

490 
	#RBWAPGSC_MDIO_PHYADDR
 0

	)

492 
gpio_Àd
 
	grbw≠gsc_Àds
[] 
	g__öôd©a
 = {

494 .
«me
 = "rb:green:power",

495 .
	ggpio
 = 
RBWAPGSC_GPIO_LED_POWER
,

496 .
	ga˘ive_low
 = 1,

497 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

501 
mdio_gpio_∂©f‹m_d©a
 
	grbw≠gsc_mdio_d©a
 = {

502 .
mdc
 = 
RBWAPGSC_GPIO_MDIO_MDC
,

503 .
	gmdio
 = 
RBWAPGSC_GPIO_MDIO_DATA
,

504 .
	gphy_mask
 = ~
BIT
(
RBWAPGSC_MDIO_PHYADDR
),

507 
∂©f‹m_devi˚
 
	grbw≠gsc_phy_devi˚
 = {

508 .
«me
 = "mdio-gpio",

509 .
	gid
 = 1,

510 .
	gdev
 = {

511 .
∂©f‹m_d©a
 = &
rbw≠gsc_mdio_d©a


516 
	#RB911L_GPIO_BTN_RESET
 15

	)

517 
	#RB911L_GPIO_LED_1
 13

	)

518 
	#RB911L_GPIO_LED_2
 12

	)

519 
	#RB911L_GPIO_LED_3
 4

	)

520 
	#RB911L_GPIO_LED_4
 21

	)

521 
	#RB911L_GPIO_LED_5
 18

	)

522 
	#RB911L_GPIO_LED_ETH
 20

	)

523 
	#RB911L_GPIO_LED_POWER
 11

	)

524 
	#RB911L_GPIO_LED_USER
 3

	)

525 
	#RB911L_GPIO_PIN_HOLE
 14

	)

527 
gpio_Àd
 
	grb911l_Àds
[] 
	g__öôd©a
 = {

529 .
«me
 = "rb:green:eth",

530 .
	ggpio
 = 
RB911L_GPIO_LED_ETH
,

531 .
	ga˘ive_low
 = 1,

533 .
	g«me
 = "rb:green:led1",

534 .
	ggpio
 = 
RB911L_GPIO_LED_1
,

535 .
	ga˘ive_low
 = 1,

537 .
	g«me
 = "rb:green:led2",

538 .
	ggpio
 = 
RB911L_GPIO_LED_2
,

539 .
	ga˘ive_low
 = 1,

541 .
	g«me
 = "rb:green:led3",

542 .
	ggpio
 = 
RB911L_GPIO_LED_3
,

543 .
	ga˘ive_low
 = 1,

545 .
	g«me
 = "rb:green:led4",

546 .
	ggpio
 = 
RB911L_GPIO_LED_4
,

547 .
	ga˘ive_low
 = 1,

549 .
	g«me
 = "rb:green:led5",

550 .
	ggpio
 = 
RB911L_GPIO_LED_5
,

551 .
	ga˘ive_low
 = 1,

553 .
	g«me
 = "rb:green:power",

554 .
	ggpio
 = 
RB911L_GPIO_LED_POWER
,

555 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

556 .
	ga˘ive_low
 = 1,

557 .
	g›í_døö
 = 1,

559 .
	g«me
 = "rb:green:user",

560 .
	ggpio
 = 
RB911L_GPIO_LED_USER
,

561 .
	ga˘ive_low
 = 1,

562 .
	g›í_døö
 = 1,

567 
	#RB931_GPIO_BTN_RESET
 0

	)

568 
	#RB931_GPIO_BTN_MODE
 9

	)

569 
	#RB931_GPIO_LED_USER
 1

	)

571 
gpio_keys_buâ⁄
 
	grb931_gpio_keys
[] 
	g__öôd©a
 = {

573 .
desc
 = "Reset button",

574 .
	gty≥
 = 
EV_KEY
,

575 .
	gcode
 = 
KEY_RESTART
,

576 .
	gdeboun˚_öãrvÆ
 = 
RBSPI_KEYS_DEBOUNCE_INTERVAL
,

577 .
	ggpio
 = 
RB931_GPIO_BTN_RESET
,

578 .
	ga˘ive_low
 = 1,

580 .
	gdesc
 = "Mode button",

581 .
	gty≥
 = 
EV_KEY
,

582 .
	gcode
 = 
BTN_0
,

583 .
	gdeboun˚_öãrvÆ
 = 
RBSPI_KEYS_DEBOUNCE_INTERVAL
,

584 .
	ggpio
 = 
RB931_GPIO_BTN_MODE
,

585 .
	ga˘ive_low
 = 1,

589 
gpio_Àd
 
	grb931_Àds
[] 
	g__öôd©a
 = {

591 .
«me
 = "rb:green:user",

592 .
	ggpio
 = 
RB931_GPIO_LED_USER
,

593 .
	ga˘ive_low
 = 1,

598 
	#RBWAPR_GPIO_LED_USER
 14

	)

599 
	#RBWAPR_GPIO_LED1
 12

	)

600 
	#RBWAPR_GPIO_LED2
 13

	)

601 
	#RBWAPR_GPIO_LED3
 3

	)

602 
	#RBWAPR_GPIO_PCIE_PWROFF
 15

	)

603 
	#RBWAPR_GPIO_CONTROL
 10

	)

604 
	#RBWAPR_GPIO_BTN_RESET
 16

	)

606 
gpio_Àd
 
	grbw≠r_Àds
[] 
	g__öôd©a
 = {

608 .
«me
 = "rb:green:user",

609 .
	ggpio
 = 
RBWAPR_GPIO_LED_USER
,

610 .
	ga˘ive_low
 = 0,

612 .
	g«me
 = "rb:green:led1",

613 .
	ggpio
 = 
RBWAPR_GPIO_LED1
,

614 .
	ga˘ive_low
 = 1,

616 .
	g«me
 = "rb:green:led2",

617 .
	ggpio
 = 
RBWAPR_GPIO_LED2
,

618 .
	ga˘ive_low
 = 1,

620 .
	g«me
 = "rb:green:led3",

621 .
	ggpio
 = 
RBWAPR_GPIO_LED3
,

622 .
	ga˘ive_low
 = 0,

627 
gí_74x164_chù_∂©f‹m_d©a
 
	grb•i_s§_d©a
 = {

628 .
ba£
 = 
RBSPI_SSR_GPIO_BASE
,

629 .
	gnum_ªgi°îs
 = 1,

633 
	grb•i_•i_cs_gpios
[] = {

634 -
ENOENT
,

635 -
ENOENT
,

638 
©h79_•i_∂©f‹m_d©a
 
	grb•i_©h79_•i_d©a
 = {

639 .
bus_num
 = 0,

640 .
	gcs_gpios
 = 
rb•i_•i_cs_gpios
,

647 
•i_bﬂrd_öfo
 
	grb•i_•i_öfo
[] = {

649 .
bus_num
 = 0,

650 .
	gchù_£À˘
 = 0,

651 .
	gmax_•ìd_hz
 = 25000000,

652 .
	gmodÆüs
 = "m25p80",

653 .
	g∂©f‹m_d©a
 = &
rb•i_•i_Êash_d©a
,

655 .
	gbus_num
 = 0,

656 .
	gchù_£À˘
 = 1,

657 .
	gmax_•ìd_hz
 = 25000000,

658 .
	gmodÆüs
 = "74x164",

659 .
	g∂©f‹m_d©a
 = &
rb•i_s§_d©a
,

663 
__öô
 
	$rb•i_wœn_öô
(
u16
 
id
, 
wmac_off£t
)

665 *
¨t_buf
;

666 
u8
 
wœn_mac
[
ETH_ALEN
];

668 
¨t_buf
 = 
	`rb_gë_ext_wœn_d©a
(
id
);

669 i‡(!
¨t_buf
)

672 
	`©h79_öô_mac
(
wœn_mac
, 
©h79_mac_ba£
, 
wmac_off£t
);

673 
	`©h79_ªgi°î_wmac
(
¨t_buf
 + 0x1000, 
wœn_mac
);

675 
	`k‰ì
(
¨t_buf
);

676 
	}
}

678 
	#RBSPI_MACH_BUFLEN
 64

	)

682 
__öô
 c⁄° 
rb_öfo
 *
	$rb•i_∂©f‹m_£tup
()

684 c⁄° 
rb_öfo
 *
öfo
;

685 
buf
[
RBSPI_MACH_BUFLEN
] = "MikroTik ";

686 *
°r
;

687 
Àn
 = 
RBSPI_MACH_BUFLEN
 - 
	`°æí
(
buf
) - 1;

689 
öfo
 = 
	`rb_öô_öfo
((*)(
	`KSEG1ADDR
(
AR71XX_SPI_BASE
)), 0x20000);

690 i‡(!
öfo
)

691  
NULL
;

693 i‡(
öfo
->
bﬂrd_«me
) {

694 
°r
 = "RouterBOARD ";

695 i‡(
	`°∫cmp
(
öfo
->
bﬂrd_«me
, 
°r
, 
	`°æí
(str))) {

696 
	`°∫ˇt
(
buf
, 
°r
, 
Àn
);

697 
Àn
 -
	`°æí
(
°r
);

699 
	`°∫ˇt
(
buf
, 
öfo
->
bﬂrd_«me
, 
Àn
);

702 
	`°∫ˇt
(
buf
, "UNKNOWN", 
Àn
);

704 
	`mùs_£t_machöe_«me
(
buf
);

707 
	`rb•i_öô_∑πôi⁄s
(
öfo
);

709  
öfo
;

710 
	}
}

716 
__öô
 
	$rb•i_≥rùhîÆs_£tup
(
u32
 
Êags
)

718 
•i_n
;

720 i‡(
Êags
 & 
RBSPI_HAS_SSR
)

721 
•i_n
 = 
	`ARRAY_SIZE
(
rb•i_•i_öfo
);

723 
•i_n
 = 1;

725 
rb•i_©h79_•i_d©a
.
num_chù£À˘
 = 
•i_n
;

726 
rb•i_©h79_•i_d©a
.
cs_gpios
 = 
rb•i_•i_cs_gpios
;

727 
	`©h79_ªgi°î_•i
(&
rb•i_©h79_•i_d©a
, 
rb•i_•i_öfo
, 
•i_n
);

729 i‡(
Êags
 & 
RBSPI_HAS_USB
)

730 
	`©h79_ªgi°î_usb
();

732 i‡(
Êags
 & 
RBSPI_HAS_PCI
)

733 
	`©h79_ªgi°î_pci
();

734 
	}
}

740 
__öô
 
	$rb•i_√tw‹k_£tup
(
u32
 
Êags
, 
gmac1_off£t
,

741 
wmac0_off£t
, 
wmac1_off£t
)

744 
	`©h79_ªgi°î_mdio
(0, 0x0);

745 i‡(
Êags
 & 
RBSPI_HAS_MDIO1
)

746 
	`©h79_ªgi°î_mdio
(1, 0x0);

748 i‡(
Êags
 & 
RBSPI_HAS_WAN4
) {

749 
	`©h79_£tup_¨934x_ëh_cfg
(0);

752 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

753 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

756 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

757 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

758 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

759 
	`©h79_ªgi°î_ëh
(0);

767 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

771 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 
gmac1_off£t
);

772 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

773 
	`©h79_ªgi°î_ëh
(1);

775 i‡(
Êags
 & 
RBSPI_HAS_WLAN0
)

776 
	`rb•i_wœn_öô
(0, 
wmac0_off£t
);

778 i‡(
Êags
 & 
RBSPI_HAS_WLAN1
)

779 
	`rb•i_wœn_öô
(1, 
wmac1_off£t
);

780 
	}
}

782 
__öô
 
	$rb•i_ªgi°î_ª£t_buâ⁄
(
gpio
)

784 
rb•i_gpio_keys_ª£t
[0].
gpio
 = gpio;

785 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RBSPI_KEYS_POLL_INTERVAL
,

786 
	`ARRAY_SIZE
(
rb•i_gpio_keys_ª£t
),

787 
rb•i_gpio_keys_ª£t
);

788 
	}
}

797 
__öô
 
	$rbm≠l_£tup
()

799 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
;

801 i‡(!
	`rb•i_∂©f‹m_£tup
())

804 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

807 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 1, 0);

809 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbm≠l_Àds
),Ñbmapl_leds);

812 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBMAPL_GPIO_BTN_RESET
);

815 
	`©h79_gpio_ouçut_£À˘
(
RBMAPL_GPIO_LED_ETH
, 
AR934X_GPIO_OUT_GPIO
);

816 
	`©h79_gpio_ouçut_£À˘
(
RBMAPL_GPIO_LED_POWER
, 
AR934X_GPIO_OUT_GPIO
);

817 
	}
}

826 
__öô
 
	$rbh≠l_£tup
()

828 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
;

830 i‡(!
	`rb•i_∂©f‹m_£tup
())

833 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

836 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 4, 0);

838 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbh≠l_Àds
),Ñbhapl_leds);

841 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBHAPL_GPIO_BTN_RESET
);

842 
	}
}

847 
__öô
 
	$rb•i_952_750r2_£tup
(
u32
 
Êags
)

849 i‡(
Êags
 & 
RBSPI_HAS_SSR
)

850 
rb•i_•i_cs_gpios
[1] = 
RB952_GPIO_SSR_CS
;

852 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

858 
	`rb•i_√tw‹k_£tup
(
Êags
, 1, 5, 6);

860 i‡(
Êags
 & 
RBSPI_HAS_USB
)

861 
	`gpio_ªque°_⁄e
(
RB952_GPIO_USB_PWROFF
, 
GPIOF_ACTIVE_LOW
 |

862 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

865 i‡(
Êags
 & 
RBSPI_HAS_POE
)

866 
	`gpio_ªque°_⁄e
(
RB952_GPIO_POE_POWER
,

867 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

870 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb952_Àds
),Ñb952_leds);

873 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RB952_GPIO_BTN_RESET
);

874 
	}
}

887 
__öô
 
	$rb952_£tup
()

889 
u32
 
Êags
 = 
RBSPI_HAS_WAN4
 | 
RBSPI_HAS_USB
 |

890 
RBSPI_HAS_SSR
 | 
RBSPI_HAS_POE
;

892 i‡(!
	`rb•i_∂©f‹m_£tup
())

896 i‡(
	`°r°r
(
	`mùs_gë_machöe_«me
(), "952Ui-5ac2nD"))

897 
Êags
 |
RBSPI_HAS_WLAN1
 | 
RBSPI_HAS_PCI
;

899 
Êags
 |
RBSPI_HAS_WLAN0
;

901 
	`rb•i_952_750r2_£tup
(
Êags
);

902 
	}
}

911 
__öô
 
	$rb750u¥2_£tup
()

913 
u32
 
Êags
 = 
RBSPI_HAS_WAN4
 | 
RBSPI_HAS_SSR
;

915 i‡(!
	`rb•i_∂©f‹m_£tup
())

919 i‡(
	`°r°r
(
	`mùs_gë_machöe_«me
(), "750UPÑ2"))

920 
Êags
 |
RBSPI_HAS_USB
 | 
RBSPI_HAS_POE
;

923 i‡(
	`°r°r
(
	`mùs_gë_machöe_«me
(), "750PÑ2"))

924 
Êags
 |
RBSPI_HAS_POE
;

926 
	`rb•i_952_750r2_£tup
(
Êags
);

927 
	}
}

941 
__öô
 
	$rb962_£tup
()

943 
u32
 
Êags
 = 
RBSPI_HAS_USB
 | 
RBSPI_HAS_POE
 | 
RBSPI_HAS_PCI
;

945 i‡(!
	`rb•i_∂©f‹m_£tup
())

948 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

951 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xae000000;

952 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

953 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0xa0001313;

955 
	`©h79_ªgi°î_mdio
(0, 0x0);

956 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
rb962_mdio0_öfo
,

957 
	`ARRAY_SIZE
(
rb962_mdio0_öfo
));

959 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

961 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

962 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

963 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

964 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

965 
	`©h79_ªgi°î_ëh
(0);

968 
	`rb•i_wœn_öô
(1, 7);

970 i‡(
Êags
 & 
RBSPI_HAS_USB
)

971 
	`gpio_ªque°_⁄e
(
RB962_GPIO_USB_PWROFF
, 
GPIOF_ACTIVE_LOW
 |

972 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

976 i‡(
Êags
 & 
RBSPI_HAS_POE
)

977 
	`gpio_ªque°_⁄e
(
RB962_GPIO_POE_POWER
,

978 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_ACTIVE_LOW
 |

979 
GPIOF_EXPORT_DIR_FIXED
,

982 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb962_Àds_gpio
),

983 
rb962_Àds_gpio
);

986 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RB962_GPIO_BTN_RESET
);

987 
	}
}

994 
__öô
 
	$rblhg_£tup
()

996 
u32
 
Êags
 = 
RBSPI_HAS_WLAN1
 | 
RBSPI_HAS_MDIO1
;

998 i‡(!
	`rb•i_∂©f‹m_£tup
())

1001 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1004 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 0, 1);

1006 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rblhg_Àds
),Ñblhg_leds);

1008 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBLHG_GPIO_BTN_RESET
);

1009 
	}
}

1015 
__öô
 
	$rbw≠_£tup
()

1017 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
;

1019 i‡(!
	`rb•i_∂©f‹m_£tup
())

1022 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1025 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 1, 0);

1027 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbw≠_Àds
),Ñbwap_leds);

1030 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBWAP_GPIO_BTN_RESET
);

1031 
	}
}

1037 
__öô
 
	$rbˇp_£tup
()

1039 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
;

1041 i‡(!
	`rb•i_∂©f‹m_£tup
())

1044 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1047 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 1, 0);

1049 
	`gpio_ªque°_⁄e
(
RBCAP_GPIO_LED_ALL
,

1050 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

1053 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbˇp_Àds
),Ñbcap_leds);

1054 
	}
}

1061 
__öô
 
	$rbm≠_£tup
()

1063 
u32
 
Êags
 = 
RBSPI_HAS_USB
 | 
RBSPI_HAS_WLAN0
 |

1064 
RBSPI_HAS_SSR
 | 
RBSPI_HAS_POE
;

1066 i‡(!
	`rb•i_∂©f‹m_£tup
())

1069 
rb•i_•i_cs_gpios
[1] = 
RBMAP_GPIO_SSR_CS
;

1070 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1073 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 2, 0);

1075 i‡(
Êags
 & 
RBSPI_HAS_POE
)

1076 
	`gpio_ªque°_⁄e
(
RBMAP_GPIO_POE_POWER
,

1077 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

1080 i‡(
Êags
 & 
RBSPI_HAS_USB
)

1081 
	`gpio_ªque°_⁄e
(
RBMAP_GPIO_USB_PWROFF
,

1082 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_ACTIVE_LOW
 |

1083 
GPIOF_EXPORT_DIR_FIXED
,

1086 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbm≠_Àds
),Ñbmap_leds);

1089 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBMAP_GPIO_BTN_RESET
);

1090 
	}
}

1098 
__öô
 
	$rbw≠gsc_£tup
()

1100 
u32
 
Êags
 = 
RBSPI_HAS_PCI
;

1102 i‡(!
	`rb•i_∂©f‹m_£tup
())

1105 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1107 
	`∂©f‹m_devi˚_ªgi°î
(&
rbw≠gsc_phy_devi˚
);

1109 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

1110 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
rbw≠gsc_phy_devi˚
.
dev
;

1111 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

1112 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(
RBWAPGSC_MDIO_PHYADDR
);

1113 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

1114 
©h79_ëh1_∂l_d©a
.
∂l_100
 = 0x80000101;

1115 
©h79_ëh1_∂l_d©a
.
∂l_10
 = 0x80001313;

1116 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

1117 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

1118 
	`©h79_ªgi°î_ëh
(1);

1120 
	`rb•i_wœn_öô
(1, 2);

1122 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBWAPGSC_GPIO_BTN_RESET
);

1124 
	`©h79_gpio_fun˘i⁄_íabÀ
(
QCA955X_GPIO_FUNC_JTAG_DISABLE
|

1125 
QCA955X_GPIO_REG_OUT_FUNC4
|

1126 
QCA955X_GPIO_REG_OUT_FUNC3
);

1128 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbw≠gsc_Àds
),

1129 
rbw≠gsc_Àds
);

1130 
	}
}

1135 
__öô
 
	$rb911l_£tup
()

1137 c⁄° 
rb_öfo
 *
öfo
;

1139 
öfo
 = 
	`rb•i_∂©f‹m_£tup
();

1140 i‡(!
öfo
)

1143 i‡(!
	`rb_has_hw_›ti⁄
(
öfo
, 
RB_HW_OPT_NO_NAND
)) {

1151 
	`WARN
(1, "The NAND flash onÅhis board isÇot supported.\n");

1153 
	`rb•i_≥rùhîÆs_£tup
(0);

1156 
	`©h79_ªgi°î_mdio
(1, 0x0);

1158 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

1160 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

1161 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

1162 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

1164 
	`©h79_ªgi°î_ëh
(1);

1166 
	`rb•i_wœn_öô
(0, 1);

1168 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RB911L_GPIO_BTN_RESET
);

1171 
	`©h79_gpio_ouçut_£À˘
(
RB911L_GPIO_LED_ETH
, 
AR934X_GPIO_OUT_GPIO
);

1173 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb911l_Àds
),Ñb911l_leds);

1174 
	}
}

1183 
__öô
 
	$rb931_£tup
()

1185 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
;

1187 i‡(!
	`rb•i_∂©f‹m_£tup
())

1190 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1193 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 3, 0);

1195 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rb931_Àds
),Ñb931_leds);

1198 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RBSPI_KEYS_POLL_INTERVAL
,

1199 
	`ARRAY_SIZE
(
rb931_gpio_keys
),

1200 
rb931_gpio_keys
);

1201 
	}
}

1209 
__öô
 
	$rbw≠r_£tup
()

1211 
u32
 
Êags
 = 
RBSPI_HAS_WLAN0
 | 
RBSPI_HAS_USB
 | 
RBSPI_HAS_PCI
;

1213 i‡(!
	`rb•i_∂©f‹m_£tup
())

1216 
	`rb•i_≥rùhîÆs_£tup
(
Êags
);

1219 
	`rb•i_√tw‹k_£tup
(
Êags
, 0, 1, 0);

1221 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbw≠r_Àds
),Ñbwapr_leds);

1223 
	`gpio_ªque°_⁄e
(
RBWAPR_GPIO_PCIE_PWROFF
, 
GPIOF_OUT_INIT_HIGH
 |

1224 
GPIOF_ACTIVE_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

1227 
	`gpio_ªque°_⁄e
(
RBWAPR_GPIO_CONTROL
, 
GPIOF_OUT_INIT_LOW
 |

1228 
GPIOF_ACTIVE_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

1231 
	`rb•i_ªgi°î_ª£t_buâ⁄
(
RBWAPR_GPIO_BTN_RESET
);

1232 
	}
}

1234 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_MAPL
, "m≠-hb", 
rbm≠l_£tup
);

1235 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_941
, "H951L", 
rbh≠l_£tup
);

1236 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_911L
, "911L", 
rb911l_£tup
);

1237 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_952
, "952-hb", 
rb952_£tup
);

1238 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_962
, "962", 
rb962_£tup
);

1239 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_750UPR2
, "750-hb", 
rb750u¥2_£tup
);

1240 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_LHG5
, "lhg", 
rblhg_£tup
);

1241 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_WAP
, "w≠-hb", 
rbw≠_£tup
);

1242 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_WAPR
, "w≠-…e", 
rbw≠r_£tup
);

1243 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_CAP
, "ˇp-hb", 
rbˇp_£tup
);

1244 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_MAP
, "m≠2-hb", 
rbm≠_£tup
);

1245 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_WAPAC
, "w≠g-sc", 
rbw≠gsc_£tup
);

1246 
MIPS_MACHINE_NONAME
(
ATH79_MACH_RB_931
, "931", 
rb931_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rbsxtlite.c

13 
	#¥_fmt
(
fmt
Ë"sxéôe: " 
	)
fmt

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/phy.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/©h9k_∂©f‹m.h
>

20 
	~<löux/mtd/mtd.h
>

21 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

22 
	~<löux/mtd/«nd.h
>

24 
	~<löux/mtd/øw«nd.h
>

26 
	~<löux/mtd/∑πôi⁄s.h
>

27 
	~<löux/•i/•i.h
>

28 
	~<löux/•i/Êash.h
>

29 
	~<löux/æe.h
>

30 
	~<löux/rouãrboŸ.h
>

31 
	~<löux/gpio.h
>

32 
	~<löux/vîsi⁄.h
>

34 
	~<asm/mach-©h79/©h79.h
>

35 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

36 
	~"comm⁄.h
"

37 
	~"dev-≠9x-pci.h
"

38 
	~"dev-gpio-buâ⁄s.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-ëh.h
"

41 
	~"dev-m25p80.h
"

42 
	~"dev-nfc.h
"

43 
	~"dev-wmac.h
"

44 
	~"dev-usb.h
"

45 
	~"machty≥s.h
"

46 
	~"rouãrboŸ.h
"

47 
	~<löux/¨8216_∂©f‹m.h
>

49 
	#SXTLITE_GPIO_NAND_NCE
 14

	)

50 
	#SXTLITE_GPIO_LED_USER
 3

	)

51 
	#SXTLITE_GPIO_LED_1
 13

	)

52 
	#SXTLITE_GPIO_LED_2
 12

	)

53 
	#SXTLITE_GPIO_LED_3
 4

	)

54 
	#SXTLITE_GPIO_LED_4
 21

	)

55 
	#SXTLITE_GPIO_LED_5
 18

	)

56 
	#SXTLITE_GPIO_LED_POWER
 11

	)

58 
	#SXTLITE_GPIO_BUZZER
 19

	)

60 
	#SXTLITE_GPIO_BTN_RESET
 15

	)

62 
	#SXTLITE_KEYS_POLL_INTERVAL
 20

	)

63 
	#SXTLITE_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SXTLITE_KEYS_POLL_INTERVAL
)

	)

65 
mtd_∑πôi⁄
 
	grbsxéôe_«nd_∑πôi⁄s
[] = {

67 .
«me
 = "booter",

68 .
	goff£t
 = 0,

69 .
	gsize
 = (256 * 1024),

70 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

73 .
	g«me
 = "kernel",

74 .
	goff£t
 = (256 * 1024),

75 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

78 .
	g«me
 = "ubi",

79 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

80 .
	gsize
 = 
MTDPART_SIZ_FULL
,

84 
gpio_Àd
 
	grbsxéôe_Àds_gpio
[] 
	g__öôd©a
 = {

86 .
«me
 = "rb:green:user",

87 .
	ggpio
 = 
SXTLITE_GPIO_LED_USER
,

88 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "rb:green:led1",

92 .
	ggpio
 = 
SXTLITE_GPIO_LED_1
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "rb:green:led2",

97 .
	ggpio
 = 
SXTLITE_GPIO_LED_2
,

98 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "rb:green:led3",

102 .
	ggpio
 = 
SXTLITE_GPIO_LED_3
,

103 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "rb:green:led4",

107 .
	ggpio
 = 
SXTLITE_GPIO_LED_4
,

108 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "rb:green:led5",

112 .
	ggpio
 = 
SXTLITE_GPIO_LED_5
,

113 .
	ga˘ive_low
 = 1,

116 .
	g«me
 = "rb:green:power",

117 .
	ggpio
 = 
SXTLITE_GPIO_LED_POWER
,

118 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

122 
gpio_keys_buâ⁄
 
	grbsxéôe_gpio_keys
[] 
	g__öôd©a
 = {

124 .
desc
 = "Reset button",

125 .
	gty≥
 = 
EV_KEY
,

126 .
	gcode
 = 
KEY_RESTART
,

127 .
	gdeboun˚_öãrvÆ
 = 
SXTLITE_KEYS_DEBOUNCE_INTERVAL
,

128 .
	ggpio
 = 
SXTLITE_GPIO_BTN_RESET
,

129 .
	ga˘ive_low
 = 0,

133 
__öô
 
	$rbsxéôe_rböfo_öô
()

135 c⁄° 
rb_öfo
 *
öfo
;

137 
öfo
 = 
	`rb_öô_öfo
((*)(
	`KSEG1ADDR
(
AR71XX_SPI_BASE
)), 0x10000);

138 i‡(!
öfo
)

139  -
EINVAL
;

142 
	}
}

144 
__öô
 
	$rbsxéôe_wœn_öô
()

146 *
¨t_buf
;

147 
u8
 
wœn_mac
[
ETH_ALEN
];

149 
¨t_buf
 = 
	`rb_gë_wœn_d©a
();

150 i‡(
¨t_buf
 =
NULL
)

153 
	`©h79_öô_mac
(
wœn_mac
, 
©h79_mac_ba£
, 1);

154 
	`©h79_ªgi°î_wmac
(
¨t_buf
 + 0x1000, 
wœn_mac
);

156 
	`k‰ì
(
¨t_buf
);

157 
	}
}

159 
	$rbsxéôe_«nd_£À˘_chù
(
chù_no
)

161 
chù_no
) {

163 
	`gpio_£t_vÆue
(
SXTLITE_GPIO_NAND_NCE
, 0);

166 
	`gpio_£t_vÆue
(
SXTLITE_GPIO_NAND_NCE
, 1);

169 
	`ndñay
(500);

170 
	}
}

172 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

173 
«nd_ec˛ayout
 
	grbsxéôe_«nd_ec˛ayout
 = {

174 .
eccbyãs
 = 6,

175 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

176 .
	goobavaû
 = 9,

177 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

182 
	$rbsxéôe_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

183 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

185 
£˘i⁄
) {

187 
oobªgi⁄
->
off£t
 = 8;

188 
oobªgi⁄
->
Àngth
 = 3;

191 
oobªgi⁄
->
off£t
 = 13;

192 
oobªgi⁄
->
Àngth
 = 3;

195  -
ERANGE
;

197 
	}
}

199 
	$rbsxéôe_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

200 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

202 
£˘i⁄
) {

204 
oobªgi⁄
->
off£t
 = 0;

205 
oobªgi⁄
->
Àngth
 = 4;

208 
oobªgi⁄
->
off£t
 = 4;

209 
oobªgi⁄
->
Àngth
 = 1;

212 
oobªgi⁄
->
off£t
 = 6;

213 
oobªgi⁄
->
Àngth
 = 2;

216 
oobªgi⁄
->
off£t
 = 11;

217 
oobªgi⁄
->
Àngth
 = 2;

220  -
ERANGE
;

222 
	}
}

224 c⁄° 
mtd_oobœyout_›s
 
	grbsxéôe_«nd_ec˛ayout_›s
 = {

225 .
ecc
 = 
rbsxéôe_oobœyout_ecc
,

226 .
	g‰ì
 = 
rbsxéôe_oobœyout_‰ì
,

230 
	$rbsxéôe_«nd_sˇn_fixup
(
mtd_öfo
 *
mtd
)

232 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

233 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

236 i‡(
mtd
->
wrôesize
 == 512) {

241 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

242 
chù
->
ecc
.
œyout
 = &
rbsxéôe_«nd_ec˛ayout
;

244 
	`mtd_£t_oobœyout
(
mtd
, &
rbsxéôe_«nd_ec˛ayout_›s
);

249 
	}
}

251 
__öô
 
	$rbsxéôe_gpio_öô
()

253 
	`gpio_ªque°_⁄e
(
SXTLITE_GPIO_NAND_NCE
, 
GPIOF_OUT_INIT_HIGH
, "NANDÇCE");

254 
	}
}

256 
__öô
 
	$rbsxéôe_«nd_öô
()

258 
	`©h79_nfc_£t_sˇn_fixup
(
rbsxéôe_«nd_sˇn_fixup
);

259 
	`©h79_nfc_£t_∑πs
(
rbsxéôe_«nd_∑πôi⁄s
,

260 
	`ARRAY_SIZE
(
rbsxéôe_«nd_∑πôi⁄s
));

261 
	`©h79_nfc_£t_£À˘_chù
(
rbsxéôe_«nd_£À˘_chù
);

262 
	`©h79_nfc_£t_sw≠_dma
(
åue
);

263 
	`©h79_ªgi°î_nfc
();

264 
	}
}

267 
__öô
 
	$rbsxéôe_£tup
()

269 if(
	`rbsxéôe_rböfo_öô
())

271 
	`rbsxéôe_«nd_öô
();

272 
	`rbsxéôe_wœn_öô
();

274 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rbsxéôe_Àds_gpio
),

275 
rbsxéôe_Àds_gpio
);

276 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SXTLITE_KEYS_POLL_INTERVAL
,

277 
	`ARRAY_SIZE
(
rbsxéôe_gpio_keys
),

278 
rbsxéôe_gpio_keys
);

280 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

282 
	`©h79_ªgi°î_mdio
(1, 0x0);

289 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

290 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

291 
	`©h79_ªgi°î_ëh
(1);

294 
	}
}

297 
MIPS_MACHINE
(
ATH79_MACH_RB_SXTLITE2ND
, "sxt2n", "MikroTik RouterBOARD SXT Lite2",

298 
rbsxéôe_£tup
);

300 
MIPS_MACHINE
(
ATH79_MACH_RB_SXTLITE5ND
, "sxt5n", "MikroTik RouterBOARD SXT Lite5",

301 
rbsxéôe_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-re450.c

25 
	~<löux/pci.h
>

26 
	~<löux/phy.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/∂©f‹m_d©a/mdio-gpio.h
>

29 
	~<löux/∂©f‹m_devi˚.h
>

30 
	~<löux/¨8216_∂©f‹m.h
>

32 
	~<asm/mach-©h79/©h79.h
>

33 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

35 
	~"comm⁄.h
"

36 
	~"dev-≠9x-pci.h
"

37 
	~"dev-ëh.h
"

38 
	~"dev-gpio-buâ⁄s.h
"

39 
	~"dev-Àds-gpio.h
"

40 
	~"dev-m25p80.h
"

41 
	~"dev-wmac.h
"

42 
	~"machty≥s.h
"

43 
	~"pci.h
"

45 
	#RE450_GPIO_LED_SYSTEM
 12

	)

46 
	#RE450_GPIO_LED_WLAN2G
 13

	)

47 
	#RE450_GPIO_LED_WLAN5G
 14

	)

48 
	#RE450_GPIO_LED_LAN_DATA
 17

	)

49 
	#RE450_GPIO_LED_JUMPSTART
 21

	)

50 
	#RE450_GPIO_LED_JUMPSTART_RED
 22

	)

51 
	#RE450_GPIO_LED_LAN_LINK
 23

	)

53 
	#RE450_GPIO_BTN_RESET
 18

	)

54 
	#RE450_GPIO_BTN_LED
 19

	)

55 
	#RE450_GPIO_BTN_JUMPSTART
 20

	)

57 
	#RE450_GPIO_SMI_MDIO
 1

	)

58 
	#RE450_GPIO_SMI_MDC
 3

	)

60 
	#RE450_LAN_PHYADDR
 4

	)

62 
	#RE450_KEYS_POLL_INTERVAL
 20

	)

63 
	#RE450_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RE450_KEYS_POLL_INTERVAL
)

	)

65 
	#RE450_WMAC_CALDATA_OFFSET
 0x1000

	)

67 c⁄° *
	gé_ª450_∑π_¥obes
[] = {

69 
NULL
,

72 
Êash_∂©f‹m_d©a
 
	gé_ª450_Êash_d©a
 = {

73 .
∑π_¥obes
 = 
é_ª450_∑π_¥obes
,

76 
gpio_Àd
 
	gª355_Àds_gpio
[] 
	g__öôd©a
 = {

78 .
«me
 = "re355:blue:power",

79 .
	ggpio
 = 
RE450_GPIO_LED_SYSTEM
,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "re355:blue:wlan2g",

84 .
	ggpio
 = 
RE450_GPIO_LED_WLAN2G
,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "re355:blue:wlan5g",

89 .
	ggpio
 = 
RE450_GPIO_LED_WLAN5G
,

90 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "re355:blue:wps",

94 .
	ggpio
 = 
RE450_GPIO_LED_JUMPSTART
,

97 .
	g«me
 = "re355:red:wps",

98 .
	ggpio
 = 
RE450_GPIO_LED_JUMPSTART_RED
,

101 .
	g«me
 = "re355:green:lan_data",

102 .
	ggpio
 = 
RE450_GPIO_LED_LAN_DATA
,

103 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "re355:green:lan_link",

107 .
	ggpio
 = 
RE450_GPIO_LED_LAN_LINK
,

108 .
	ga˘ive_low
 = 1,

112 
gpio_Àd
 
	gª450_Àds_gpio
[] 
	g__öôd©a
 = {

114 .
«me
 = "re450:blue:power",

115 .
	ggpio
 = 
RE450_GPIO_LED_SYSTEM
,

116 .
	ga˘ive_low
 = 1,

119 .
	g«me
 = "re450:blue:wlan2g",

120 .
	ggpio
 = 
RE450_GPIO_LED_WLAN2G
,

121 .
	ga˘ive_low
 = 1,

124 .
	g«me
 = "re450:blue:wlan5g",

125 .
	ggpio
 = 
RE450_GPIO_LED_WLAN5G
,

126 .
	ga˘ive_low
 = 1,

129 .
	g«me
 = "re450:blue:wps",

130 .
	ggpio
 = 
RE450_GPIO_LED_JUMPSTART
,

133 .
	g«me
 = "re450:red:wps",

134 .
	ggpio
 = 
RE450_GPIO_LED_JUMPSTART_RED
,

137 .
	g«me
 = "re450:green:lan_data",

138 .
	ggpio
 = 
RE450_GPIO_LED_LAN_DATA
,

139 .
	ga˘ive_low
 = 1,

142 .
	g«me
 = "re450:green:lan_link",

143 .
	ggpio
 = 
RE450_GPIO_LED_LAN_LINK
,

144 .
	ga˘ive_low
 = 1,

148 
gpio_keys_buâ⁄
 
	gª450_gpio_keys
[] 
	g__öôd©a
 = {

150 .
desc
 = "Reset button",

151 .
	gty≥
 = 
EV_KEY
,

152 .
	gcode
 = 
KEY_WPS_BUTTON
,

153 .
	gdeboun˚_öãrvÆ
 = 
RE450_KEYS_DEBOUNCE_INTERVAL
,

154 .
	ggpio
 = 
RE450_GPIO_BTN_RESET
,

155 .
	ga˘ive_low
 = 1,

158 .
	gdesc
 = "WPS button",

159 .
	gty≥
 = 
EV_KEY
,

160 .
	gcode
 = 
KEY_RESTART
,

161 .
	gdeboun˚_öãrvÆ
 = 
RE450_KEYS_DEBOUNCE_INTERVAL
,

162 .
	ggpio
 = 
RE450_GPIO_BTN_JUMPSTART
,

163 .
	ga˘ive_low
 = 1,

166 .
	gdesc
 = "Control LED button",

167 .
	gty≥
 = 
EV_KEY
,

168 .
	gcode
 = 
BTN_0
,

169 .
	gdeboun˚_öãrvÆ
 = 
RE450_KEYS_DEBOUNCE_INTERVAL
,

170 .
	ggpio
 = 
RE450_GPIO_BTN_LED
,

171 .
	ga˘ive_low
 = 1,

175 
mdio_gpio_∂©f‹m_d©a
 
	gª450_mdio
 = {

176 .
mdc
 = 
RE450_GPIO_SMI_MDC
,

177 .
	gmdio
 = 
RE450_GPIO_SMI_MDIO
,

178 .
	gphy_mask
 = ~
BIT
(
RE450_LAN_PHYADDR
),

181 
∂©f‹m_devi˚
 
	gª450_phy_devi˚
 = {

182 .
«me
 = "mdio-gpio",

183 .
	gid
 = 0,

184 .
	gdev
 = {

185 .
∂©f‹m_d©a
 = &
ª450_mdio
,

189 
__öô
 
	$ªx5x_£tup
()

191 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f610008);

192 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

193 
u8
 
tmpmac
[
ETH_ALEN
];

195 
	`©h79_ªgi°î_m25p80
(&
é_ª450_Êash_d©a
);

196 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RE450_KEYS_POLL_INTERVAL
,

197 
	`ARRAY_SIZE
(
ª450_gpio_keys
),

198 
ª450_gpio_keys
);

200 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

201 
	`©h79_ªgi°î_wmac
(
¨t
 + 
RE450_WMAC_CALDATA_OFFSET
, 
tmpmac
);

203 
	`©h79_ªgi°î_pci
();

206 
	`∂©f‹m_devi˚_ªgi°î
(&
ª450_phy_devi˚
);

208 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

211 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

212 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
ª450_phy_devi˚
.
dev
;

213 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

214 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
RE450_LAN_PHYADDR
);

215 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

216 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa0000101;

217 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

218 
	`©h79_ªgi°î_ëh
(0);

219 
	}
}

221 
__öô
 
	$ª355_£tup
()

223 
	`ªx5x_£tup
();

224 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ª355_Àds_gpio
),

225 
ª355_Àds_gpio
);

226 
	}
}

228 
MIPS_MACHINE
(
ATH79_MACH_RE355
, "RE355", "TP-LINK RE355",

229 
ª355_£tup
)

231 
__öô
 
	$ª450_£tup
()

233 
	`ªx5x_£tup
();

234 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ª450_Àds_gpio
),

235 
ª450_Àds_gpio
);

236 
	}
}

238 
MIPS_MACHINE
(
ATH79_MACH_RE450
, "RE450", "TP-LINK RE450",

239 
ª450_£tup
)

	@linux/ar71xx/files/arch/mips/ath79/mach-rme-eg200.c

11 
	~<asm/mach-©h79/©h79.h
>

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

13 
	~"comm⁄.h
"

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-usb.h
"

19 
	~"dev-wmac.h
"

20 
	~"machty≥s.h
"

22 
	#RME_EG200_GPIO_LED_WLAN
 0

	)

23 
	#RME_EG200_GPIO_LED_ETH0
 13

	)

24 
	#RME_EG200_GPIO_LED_ETACTICA
 15

	)

25 
	#RME_EG200_GPIO_LED_MODBUS
 16

	)

27 
	#RME_EG200_GPIO_BTN_RESTORE
 11

	)

29 
	#RME_EG200_KEYS_POLL_INTERVAL
 20

	)

30 
	#RME_EG200_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RME_EG200_KEYS_POLL_INTERVAL
)

	)

32 
	#RME_EG200_MAC0_OFFSET
 0x0000

	)

33 
	#RME_EG200_CALDATA_OFFSET
 0x1000

	)

34 
	#RME_EG200_WMAC_MAC_OFFSET
 0x1002

	)

36 
gpio_Àd
 
	grme_eg200_Àds_gpio
[] 
	g__öôd©a
 = {

38 .
«me
 = "eg200:red:wlan",

39 .
	ggpio
 = 
RME_EG200_GPIO_LED_WLAN
,

40 .
	ga˘ive_low
 = 1,

42 .
	g«me
 = "eg200:red:eth0",

43 .
	ggpio
 = 
RME_EG200_GPIO_LED_ETH0
,

44 .
	ga˘ive_low
 = 1,

46 .
	g«me
 = "eg200:red:etactica",

47 .
	ggpio
 = 
RME_EG200_GPIO_LED_ETACTICA
,

48 .
	ga˘ive_low
 = 0,

50 .
	g«me
 = "eg200:red:modbus",

51 .
	ggpio
 = 
RME_EG200_GPIO_LED_MODBUS
,

52 .
	ga˘ive_low
 = 0,

56 
gpio_keys_buâ⁄
 
	grme_eg200_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "restore button",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_WPS_BUTTON
,

61 .
	gdeboun˚_öãrvÆ
 = 
RME_EG200_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
RME_EG200_GPIO_BTN_RESTORE
,

63 .
	ga˘ive_low
 = 1,

67 
__öô
 
	$rme_eg200_£tup
()

69 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

71 
	`©h79_ªgi°î_m25p80
(
NULL
);

72 
	`©h79_ªgi°î_wmac
(
¨t
 + 
RME_EG200_CALDATA_OFFSET
,

73 
¨t
 + 
RME_EG200_WMAC_MAC_OFFSET
);

75 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

77 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
RME_EG200_MAC0_OFFSET
, 0);

79 
	`©h79_ªgi°î_mdio
(0, 0x0);

82 
	`©h79_ªgi°î_ëh
(0);

84 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

85 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

86 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

87 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

88 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

90 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rme_eg200_Àds_gpio
),

91 
rme_eg200_Àds_gpio
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RME_EG200_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
rme_eg200_keys
),

94 
rme_eg200_keys
);

95 
	`©h79_ªgi°î_usb
();

96 
	}
}

98 
MIPS_MACHINE
(
ATH79_MACH_RME_EG200
, "RME-EG200", "eTactica EG-200",

99 
rme_eg200_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rut9xx.c

11 
	~<löux/gpio.h
>

12 
	~<löux/i2c.h
>

13 
	~<löux/i2c-Ægo-bô.h
>

14 
	~<löux/i2c-gpio.h
>

15 
	~<löux/∂©f‹m_d©a/pˇ953x.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<asm/mach-©h79/©h79.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#RUT9XX_GPIO_LED_LAN1
 14

	)

31 
	#RUT9XX_GPIO_LED_LAN2
 13

	)

32 
	#RUT9XX_GPIO_LED_LAN3
 22

	)

33 
	#RUT9XX_GPIO_LED_WAN
 1

	)

35 
	#RUT9XX_PCA9539_GPIO_BASE
 32

	)

36 
	#RUT9XX_PCA9539_GPIO_SIGNAL1
 (0 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

37 
	#RUT9XX_PCA9539_GPIO_SIGNAL2
 (1 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

38 
	#RUT9XX_PCA9539_GPIO_SIGNAL3
 (2 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

39 
	#RUT9XX_PCA9539_GPIO_SIGNAL4
 (3 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

40 
	#RUT9XX_PCA9539_GPIO_SIGNAL5
 (4 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

41 
	#RUT9XX_PCA9539_GPIO_STATUS_R
 (5 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

42 
	#RUT9XX_PCA9539_GPIO_STATUS_G
 (6 + 
RUT9XX_PCA9539_GPIO_BASE
)

	)

44 
	#RUT9XX_GPIO_BTN_RESET
 15

	)

46 
	#RUT9XX_GPIO_I2C_SCK
 16

	)

47 
	#RUT9XX_GPIO_I2C_SDA
 17

	)

49 
	#RUT9XX_GPIO_EXT_LNA0
 2

	)

51 
	#RUT9XX_WMAC_CALDATA_OFFSET
 0x1000

	)

53 
	#RUT9XX_KEYS_POLL_INTERVAL
 20

	)

54 
	#RUT9XX_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RUT9XX_KEYS_POLL_INTERVAL
)

	)

56 
gpio_Àd
 
	grut900_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "rut900:green:lan1",

59 .
	ggpio
 = 
RUT9XX_GPIO_LED_LAN1
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "rut900:green:lan2",

63 .
	ggpio
 = 
RUT9XX_GPIO_LED_LAN2
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "rut900:green:lan3",

67 .
	ggpio
 = 
RUT9XX_GPIO_LED_LAN3
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "rut900:green:signal1",

71 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_SIGNAL1
,

72 .
	ga˘ive_low
 = 0,

74 .
	g«me
 = "rut900:green:signal2",

75 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_SIGNAL2
,

76 .
	ga˘ive_low
 = 0,

78 .
	g«me
 = "rut900:green:signal3",

79 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_SIGNAL3
,

80 .
	ga˘ive_low
 = 0,

82 .
	g«me
 = "rut900:green:signal4",

83 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_SIGNAL4
,

84 .
	ga˘ive_low
 = 0,

86 .
	g«me
 = "rut900:green:signal5",

87 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_SIGNAL5
,

88 .
	ga˘ive_low
 = 0,

90 .
	g«me
 = "rut900:green:status",

91 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_STATUS_G
,

92 .
	ga˘ive_low
 = 0,

94 .
	g«me
 = "rut900:green:wan",

95 .
	ggpio
 = 
RUT9XX_GPIO_LED_WAN
,

96 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "rut900:red:status",

99 .
	ggpio
 = 
RUT9XX_PCA9539_GPIO_STATUS_R
,

100 .
	ga˘ive_low
 = 0,

104 
gpio_keys_buâ⁄
 
	grut900_gpio_keys
[] 
	g__öôd©a
 = {

106 .
desc
 = "reset",

107 .
	gty≥
 = 
EV_KEY
,

108 .
	gcode
 = 
KEY_RESTART
,

109 .
	gdeboun˚_öãrvÆ
 = 
RUT9XX_KEYS_DEBOUNCE_INTERVAL
,

110 .
	ggpio
 = 
RUT9XX_GPIO_BTN_RESET
,

111 .
	ga˘ive_low
 = 1,

115 
i2c_gpio_∂©f‹m_d©a
 
	grut900_i2c_gpio_d©a
 = {

116 .
sda_pö
 = 
RUT9XX_GPIO_I2C_SDA
,

117 .
	gs˛_pö
 = 
RUT9XX_GPIO_I2C_SCK
,

118 .
	gudñay
 = 10,

121 
∂©f‹m_devi˚
 
	grut900_i2c_devi˚
 = {

122 .
«me
 = "i2c-gpio",

123 .
	gid
 = 0,

124 .
	gdev
 = {

125 .
∂©f‹m_d©a
 = &
rut900_i2c_gpio_d©a
,

129 
pˇ953x_∂©f‹m_d©a
 
	grut9xx_pˇ9539_d©a
 = {

130 .
gpio_ba£
 = 
RUT9XX_PCA9539_GPIO_BASE
,

131 .
	gúq_ba£
 = -1,

134 
i2c_bﬂrd_öfo
 
	grut900_i2c_devs
[] 
	g__öôd©a
 = {

136 
I2C_BOARD_INFO
("pca9539", 0x74),

137 .
∂©f‹m_d©a
 = &
rut9xx_pˇ9539_d©a
,

141 
__öô
 
	$rut900_£tup
()

143 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f030000);

144 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f020000);

145 
u8
 
wœn_mac
[
ETH_ALEN
];

147 
	`©h79_ªgi°î_m25p80
(
NULL
);

149 
	`©h79_ªgi°î_mdio
(1, 0x0);

151 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

152 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xf1;

155 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

156 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

157 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

158 
	`©h79_ªgi°î_ëh
(1);

161 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

162 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

163 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

164 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

165 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

166 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

167 
	`©h79_ªgi°î_ëh
(0);

169 
	`∂©f‹m_devi˚_ªgi°î
(&
rut900_i2c_devi˚
);

170 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
rut900_i2c_devs
,

171 
	`ARRAY_SIZE
(
rut900_i2c_devs
));

174 
	`©h79_gpio_fun˘i⁄_íabÀ
(
AR934X_GPIO_FUNC_JTAG_DISABLE
);

176 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rut900_Àds_gpio
),

177 
rut900_Àds_gpio
);

179 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RUT9XX_KEYS_POLL_INTERVAL
,

180 
	`ARRAY_SIZE
(
rut900_gpio_keys
),

181 
rut900_gpio_keys
);

183 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
RUT9XX_GPIO_EXT_LNA0
);

185 
	`©h79_öô_mac
(
wœn_mac
, 
mac
, 2);

186 
	`©h79_ªgi°î_wmac
(
¨t
 + 
RUT9XX_WMAC_CALDATA_OFFSET
, 
wœn_mac
);

188 
	`©h79_ªgi°î_usb
();

189 
	}
}

191 
MIPS_MACHINE
(
ATH79_MACH_RUT9XX
, "RUT900", "Tñt⁄ik®RUT900", 
rut900_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-rw2458n.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-≠9x-pci.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-usb.h
"

19 
	~"machty≥s.h
"

20 
	~"pci.h
"

22 
	#RW2458N_GPIO_LED_D3
 1

	)

23 
	#RW2458N_GPIO_LED_D4
 0

	)

24 
	#RW2458N_GPIO_LED_D5
 11

	)

25 
	#RW2458N_GPIO_LED_D6
 7

	)

26 
	#RW2458N_GPIO_BTN_RESET
 12

	)

28 
	#RW2458N_KEYS_POLL_INTERVAL
 20

	)

29 
	#RW2458N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
RW2458N_KEYS_POLL_INTERVAL
)

	)

31 
gpio_keys_buâ⁄
 
	grw2458n_gpio_keys
[] 
	g__öôd©a
 = {

33 .
desc
 = "reset",

34 .
	gty≥
 = 
EV_KEY
,

35 .
	gcode
 = 
KEY_RESTART
,

36 .
	gdeboun˚_öãrvÆ
 = 
RW2458N_KEYS_DEBOUNCE_INTERVAL
,

37 .
	ggpio
 = 
RW2458N_GPIO_BTN_RESET
,

38 .
	ga˘ive_low
 = 1,

42 
	#RW2458N_WAN_PHYMASK
 
	`BIT
(4)

	)

44 
gpio_Àd
 
	grw2458n_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "rw2458n:green:d3",

47 .
	ggpio
 = 
RW2458N_GPIO_LED_D3
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "rw2458n:green:d4",

51 .
	ggpio
 = 
RW2458N_GPIO_LED_D4
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "rw2458n:green:d5",

55 .
	ggpio
 = 
RW2458N_GPIO_LED_D5
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "rw2458n:green:d6",

59 .
	ggpio
 = 
RW2458N_GPIO_LED_D6
,

60 .
	ga˘ive_low
 = 1,

64 
__öô
 
	$rw2458n_£tup
()

66 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

67 
u8
 *
mac2
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000 + 
ETH_ALEN
);

69 
	`©h79_ªgi°î_m25p80
(
NULL
);

71 
	`©h79_ªgi°î_mdio
(0, ~
RW2458N_WAN_PHYMASK
);

73 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

74 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

76 
	`©h79_ªgi°î_ëh
(0);

77 
	`©h79_ªgi°î_ëh
(1);

79 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
rw2458n_Àds_gpio
),

80 
rw2458n_Àds_gpio
);

82 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
RW2458N_KEYS_POLL_INTERVAL
,

83 
	`ARRAY_SIZE
(
rw2458n_gpio_keys
),

84 
rw2458n_gpio_keys
);

85 
	`©h79_ªgi°î_usb
();

87 
	`©h79_ªgi°î_pci
();

88 
	}
}

90 
MIPS_MACHINE
(
ATH79_MACH_RW2458N
, "RW2458N", "Redwave RW2458N",

91 
rw2458n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-sc1750.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"pci.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-nfc.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-wmac.h
"

37 
	~"machty≥s.h
"

39 
	#SC1750_GPIO_LED_POWER
 11

	)

40 
	#SC1750_GPIO_LED_ERR1
 12

	)

41 
	#SC1750_GPIO_LED_WLAN
 13

	)

42 
	#SC1750_GPIO_LED_ERR2
 14

	)

43 
	#SC1750_GPIO_LED_OK3
 15

	)

44 
	#SC1750_GPIO_LED_ERR3
 16

	)

45 
	#SC1750_GPIO_BTN_RESET
 4

	)

47 
	#SC1750_KEYS_POLL_INTERVAL
 20

	)

48 
	#SC1750_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SC1750_KEYS_POLL_INTERVAL
)

	)

50 
	#SC1750_MAC0_OFFSET
 0

	)

51 
	#SC1750_MAC1_OFFSET
 6

	)

52 
	#SC1750_WMAC_CALDATA_OFFSET
 0x1000

	)

53 
	#SC1750_PCIE_CALDATA_OFFSET
 0x5000

	)

55 
gpio_Àd
 
	gsc1750_Àds_gpio
[] 
	g__öôd©a
 = {

57 .
«me
 = "sc1750:green:power",

58 .
	ggpio
 = 
SC1750_GPIO_LED_POWER
,

59 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "sc1750:red:power",

63 .
	ggpio
 = 
SC1750_GPIO_LED_ERR1
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "sc1750:green:wlan",

68 .
	ggpio
 = 
SC1750_GPIO_LED_WLAN
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "sc1750:red:wlan",

73 .
	ggpio
 = 
SC1750_GPIO_LED_ERR2
,

74 .
	ga˘ive_low
 = 1,

78 
gpio_keys_buâ⁄
 
	gsc1750_gpio_keys
[] 
	g__öôd©a
 = {

80 .
desc
 = "reset",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
KEY_RESTART
,

83 .
	gdeboun˚_öãrvÆ
 = 
SC1750_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
SC1750_GPIO_BTN_RESET
,

85 .
	ga˘ive_low
 = 0,

89 
©803x_∂©f‹m_d©a
 
	g©803x_d©a
 = {

90 .
dißbÀ_sm¨ãì
 = 1,

91 .
	gíabÀ_rgmii_rx_dñay
 = 0,

92 .
	gíabÀ_rgmii_tx_dñay
 = 0,

95 
mdio_bﬂrd_öfo
 
	gsc1750_mdio0_öfo
[] = {

97 .
bus_id
 = "ag71xx-mdio.0",

98 .
	gmdio_addr
 = 1,

99 .
	g∂©f‹m_d©a
 = &
©803x_d©a
,

103 
__öô
 
	$sc1750_£tup
()

105 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

107 
	`©h79_ªgi°î_m25p80
(
NULL
);

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
sc1750_Àds_gpio
),

110 
sc1750_Àds_gpio
);

111 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SC1750_KEYS_POLL_INTERVAL
,

112 
	`ARRAY_SIZE
(
sc1750_gpio_keys
),

113 
sc1750_gpio_keys
);

115 
	`©h79_ªgi°î_usb
();

116 
	`©h79_ªgi°î_nfc
();

118 
	`©h79_ªgi°î_wmac
(
¨t
 + 
SC1750_WMAC_CALDATA_OFFSET
, 
NULL
);

120 
	`©h79_ªgi°î_mdio
(0, 0);

121 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
sc1750_mdio0_öfo
,

122 
	`ARRAY_SIZE
(
sc1750_mdio0_öfo
));

124 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
SC1750_MAC0_OFFSET
, 0);

126 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000101;

127 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa4000101;

129 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

130 
©h79_ëh0_d©a
.
phy_mask
 = 0xF;

131 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

133 
	`©h79_ªgi°î_ëh
(0);

136 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

137 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

138 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

140 
	`©h79_ªgi°î_ëh
(1);

142 
	`©h79_ªgi°î_pci
();

143 
	}
}

145 
MIPS_MACHINE
(
ATH79_MACH_SC1750
, "SC1750", "Abicom SC1750", 
sc1750_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-sc300m.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"pci.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-nfc.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-wmac.h
"

37 
	~"machty≥s.h
"

39 
	#SC300M_GPIO_LED_WLAN
 0

	)

40 
	#SC300M_GPIO_LED_POWER
 1

	)

42 
	#SC300M_GPIO_BTN_RESET
 17

	)

44 
	#SC300M_KEYS_POLL_INTERVAL
 20

	)

45 
	#SC300M_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SC300M_KEYS_POLL_INTERVAL
)

	)

47 
	#SC300M_MAC0_OFFSET
 0

	)

48 
	#SC300M_MAC1_OFFSET
 6

	)

49 
	#SC300M_WMAC_CALDATA_OFFSET
 0x1000

	)

50 
	#SC300M_PCIE_CALDATA_OFFSET
 0x5000

	)

52 
gpio_Àd
 
	gsc300m_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "sc300m:blue:wlan",

55 .
	ggpio
 = 
SC300M_GPIO_LED_WLAN
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "sc300m:blue:power",

60 .
	ggpio
 = 
SC300M_GPIO_LED_POWER
,

61 .
	ga˘ive_low
 = 1,

65 
gpio_keys_buâ⁄
 
	gsc300m_gpio_keys
[] 
	g__öôd©a
 = {

67 .
desc
 = "reset",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
SC300M_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
SC300M_GPIO_BTN_RESET
,

72 .
	ga˘ive_low
 = 1,

76 
©803x_∂©f‹m_d©a
 
	g©803x_d©a
 = {

77 .
dißbÀ_sm¨ãì
 = 1,

78 .
	gíabÀ_rgmii_rx_dñay
 = 0,

79 .
	gíabÀ_rgmii_tx_dñay
 = 0,

82 
mdio_bﬂrd_öfo
 
	gsc300m_mdio0_öfo
[] = {

84 .
bus_id
 = "ag71xx-mdio.0",

85 .
	gmdio_addr
 = 1,

86 .
	g∂©f‹m_d©a
 = &
©803x_d©a
,

90 
__öô
 
	$sc300m_£tup
()

92 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

94 
	`©h79_ªgi°î_m25p80
(
NULL
);

96 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
sc300m_Àds_gpio
),

97 
sc300m_Àds_gpio
);

98 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SC300M_KEYS_POLL_INTERVAL
,

99 
	`ARRAY_SIZE
(
sc300m_gpio_keys
),

100 
sc300m_gpio_keys
);

102 
	`©h79_ªgi°î_usb
();

103 
	`©h79_ªgi°î_nfc
();

105 
	`©h79_ªgi°î_wmac
(
¨t
 + 
SC300M_WMAC_CALDATA_OFFSET
, 
NULL
);

107 
	`©h79_ªgi°î_mdio
(0, 0);

108 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
sc300m_mdio0_öfo
,

109 
	`ARRAY_SIZE
(
sc300m_mdio0_öfo
));

111 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
SC300M_MAC0_OFFSET
, 0);

113 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000101;

114 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa4000101;

116 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

117 
©h79_ëh0_d©a
.
phy_mask
 = 0xF;

118 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

120 
	`©h79_ªgi°î_ëh
(0);

123 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

124 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

125 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

127 
	`©h79_ªgi°î_ëh
(1);

129 
	`©h79_ªgi°î_pci
();

130 
	}
}

132 
MIPS_MACHINE
(
ATH79_MACH_SC300M
, "SC300M", "Abicom SC300M", 
sc300m_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-sc450.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"pci.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-nfc.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-wmac.h
"

37 
	~"machty≥s.h
"

39 
	#SC450_GPIO_LED_POWER
 13

	)

40 
	#SC450_GPIO_LED_ERR1
 14

	)

41 
	#SC450_GPIO_LED_ERR2
 15

	)

42 
	#SC450_GPIO_LED_WLAN
 16

	)

43 
	#SC450_GPIO_BTN_RESET
 17

	)

44 
	#SC450_GPIO_WP
 18

	)

45 
	#SC450_GPIO_POE
 19

	)

46 
	#SC450_GPIO_RX_LOS
 20

	)

47 
	#SC450_GPIO_MOD_GND
 21

	)

48 
	#SC450_GPIO_MOD_SCL
 22

	)

49 
	#SC450_GPIO_MOD_SDA
 23

	)

51 
	#SC450_KEYS_POLL_INTERVAL
 20

	)

52 
	#SC450_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SC450_KEYS_POLL_INTERVAL
)

	)

54 
	#SC450_MAC0_OFFSET
 0

	)

55 
	#SC450_MAC1_OFFSET
 6

	)

56 
	#SC450_WMAC_CALDATA_OFFSET
 0x1000

	)

57 
	#SC450_PCIE_CALDATA_OFFSET
 0x5000

	)

59 
gpio_Àd
 
	gsc450_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "sc450:green:power",

62 .
	ggpio
 = 
SC450_GPIO_LED_POWER
,

63 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "sc450:red:power",

67 .
	ggpio
 = 
SC450_GPIO_LED_ERR1
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "sc450:green:wlan",

72 .
	ggpio
 = 
SC450_GPIO_LED_WLAN
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "sc450:red:wlan",

77 .
	ggpio
 = 
SC450_GPIO_LED_ERR2
,

78 .
	ga˘ive_low
 = 1,

82 
gpio_keys_buâ⁄
 
	gsc450_gpio_keys
[] 
	g__öôd©a
 = {

84 .
desc
 = "reset",

85 .
	gty≥
 = 
EV_KEY
,

86 .
	gcode
 = 
KEY_RESTART
,

87 .
	gdeboun˚_öãrvÆ
 = 
SC450_KEYS_DEBOUNCE_INTERVAL
,

88 .
	ggpio
 = 
SC450_GPIO_BTN_RESET
,

89 .
	ga˘ive_low
 = 1,

93 
©803x_∂©f‹m_d©a
 
	g©803x_d©a
 = {

94 .
dißbÀ_sm¨ãì
 = 1,

95 .
	gíabÀ_rgmii_rx_dñay
 = 0,

96 .
	gíabÀ_rgmii_tx_dñay
 = 0,

99 
mdio_bﬂrd_öfo
 
	gsc450_mdio0_öfo
[] = {

101 .
bus_id
 = "ag71xx-mdio.0",

102 .
	gmdio_addr
 = 1,

103 .
	g∂©f‹m_d©a
 = &
©803x_d©a
,

107 
__öô
 
	$sc450_£tup
()

109 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

111 
	`©h79_ªgi°î_m25p80
(
NULL
);

113 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
sc450_Àds_gpio
),

114 
sc450_Àds_gpio
);

115 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SC450_KEYS_POLL_INTERVAL
,

116 
	`ARRAY_SIZE
(
sc450_gpio_keys
),

117 
sc450_gpio_keys
);

119 
	`©h79_ªgi°î_usb
();

120 
	`©h79_ªgi°î_nfc
();

122 
	`©h79_ªgi°î_wmac
(
¨t
 + 
SC450_WMAC_CALDATA_OFFSET
, 
NULL
);

124 
	`©h79_ªgi°î_mdio
(0, 0);

125 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
sc450_mdio0_öfo
,

126 
	`ARRAY_SIZE
(
sc450_mdio0_öfo
));

128 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
SC450_MAC0_OFFSET
, 0);

130 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000101;

131 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0xa4000101;

133 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

134 
©h79_ëh0_d©a
.
phy_mask
 = 0xF;

135 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

137 
	`©h79_ªgi°î_ëh
(0);

140 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

141 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

142 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

144 
	`©h79_ªgi°î_ëh
(1);

146 
	`©h79_ªgi°î_pci
();

147 
	}
}

149 
MIPS_MACHINE
(
ATH79_MACH_SC450
, "SC450", "Abicom SC450", 
sc450_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-smart-300.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~<asm/mach-©h79/ag71xx_∂©f‹m.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#SMART_300_GPIO_LED_WLAN
 13

	)

27 
	#SMART_300_GPIO_LED_WAN
 18

	)

28 
	#SMART_300_GPIO_LED_LAN4
 19

	)

29 
	#SMART_300_GPIO_LED_LAN3
 12

	)

30 
	#SMART_300_GPIO_LED_LAN2
 21

	)

31 
	#SMART_300_GPIO_LED_LAN1
 20

	)

32 
	#SMART_300_GPIO_LED_SYSTEM
 15

	)

33 
	#SMART_300_GPIO_LED_POWER
 14

	)

35 
	#SMART_300_GPIO_BTN_RESET
 17

	)

36 
	#SMART_300_GPIO_SW_RFKILL
 16

	)

38 
	#SMART_300_KEYS_POLL_INTERVAL
 20

	)

39 
	#SMART_300_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SMART_300_KEYS_POLL_INTERVAL
)

	)

41 
	#SMART_300_GPIO_MASK
 0x007fffff

	)

43 c⁄° *
	gsm¨t_300_∑π_¥obes
[] = {

45 
NULL
,

48 
Êash_∂©f‹m_d©a
 
	gsm¨t_300_Êash_d©a
 = {

49 .
∑π_¥obes
 = 
sm¨t_300_∑π_¥obes
,

52 
gpio_Àd
 
	gsm¨t_300_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "nc-link:green:lan1",

55 .
	ggpio
 = 
SMART_300_GPIO_LED_LAN1
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "nc-link:green:lan2",

59 .
	ggpio
 = 
SMART_300_GPIO_LED_LAN2
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "nc-link:green:lan3",

63 .
	ggpio
 = 
SMART_300_GPIO_LED_LAN3
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "nc-link:green:lan4",

67 .
	ggpio
 = 
SMART_300_GPIO_LED_LAN4
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "nc-link:green:system",

71 .
	ggpio
 = 
SMART_300_GPIO_LED_SYSTEM
,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "nc-link:green:wan",

75 .
	ggpio
 = 
SMART_300_GPIO_LED_WAN
,

76 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "nc-link:green:wlan",

79 .
	ggpio
 = 
SMART_300_GPIO_LED_WLAN
,

80 .
	ga˘ive_low
 = 1,

84 
gpio_keys_buâ⁄
 
	gsm¨t_300_gpio_keys
[] 
	g__öôd©a
 = {

86 .
desc
 = "reset",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
SMART_300_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
SMART_300_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
__öô
 
	$sm¨t_300_£tup
()

97 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

98 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

100 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
sm¨t_300_Àds_gpio
),

101 
sm¨t_300_Àds_gpio
);

103 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
SMART_300_KEYS_POLL_INTERVAL
,

104 
	`ARRAY_SIZE
(
sm¨t_300_gpio_keys
),

105 
sm¨t_300_gpio_keys
);

107 
	`©h79_ªgi°î_m25p80
(&
sm¨t_300_Êash_d©a
);

109 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

111 
	`©h79_ªgi°î_mdio
(1, 0x0);

113 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

114 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

117 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

118 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

119 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

120 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

121 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

122 
	`©h79_ªgi°î_ëh
(0);

125 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

126 
	`©h79_ªgi°î_ëh
(1);

128 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

130 
	`gpio_ªque°
(
SMART_300_GPIO_LED_POWER
, "power");

131 
	`gpio_dúe˘i⁄_ouçut
(
SMART_300_GPIO_LED_POWER
, 
GPIOF_OUT_INIT_LOW
);

132 
	}
}

134 
MIPS_MACHINE
(
ATH79_MACH_SMART_300
, "SMART-300", "NC-LINK SMART-300",

135 
sm¨t_300_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-som9331.c

14 
	~<löux/gpio.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#SOM9331_GPIO_LED_WLAN
 27

	)

29 
	#SOM9331_GPIO_LED_SYSTEM
 0

	)

30 
	#SOM9331_GPIO_LED_2
 13

	)

31 
	#SOM9331_GPIO_LED_3
 14

	)

32 
	#SOM9331_GPIO_LED_5
 16

	)

33 
	#SOM9331_GPIO_LED_WAN
 
SOM9331_GPIO_LED_2


	)

34 
	#SOM9331_GPIO_LED_LAN1
 
SOM9331_GPIO_LED_3


	)

35 
	#SOM9331_GPIO_LED_LAN2
 
SOM9331_GPIO_LED_5


	)

36 
	#SOM9331_GPIO_BTN_RESET
 11

	)

38 
	#SOM9331_KEYS_POLL_INTERVAL
 20

	)

39 
	#SOM9331_KEYS_DEBOUNCE_INTERVAL
 (3 * 
SOM9331_KEYS_POLL_INTERVAL
)

	)

41 c⁄° *
	gsom9331_∑π_¥obes
[] = {

43 
NULL
,

46 
Êash_∂©f‹m_d©a
 
	gsom9331_Êash_d©a
 = {

47 .
∑π_¥obes
 = 
som9331_∑π_¥obes
,

50 
gpio_Àd
 
	gsom9331_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "som9331:red:wlan",

53 .
	ggpio
 = 
SOM9331_GPIO_LED_WLAN
,

54 .
	ga˘ive_low
 = 1,

57 .
	g«me
 = "som9331:orange:wan",

58 .
	ggpio
 = 
SOM9331_GPIO_LED_WAN
,

59 .
	ga˘ive_low
 = 0,

62 .
	g«me
 = "som9331:orange:lan1",

63 .
	ggpio
 = 
SOM9331_GPIO_LED_LAN1
,

64 .
	ga˘ive_low
 = 0,

67 .
	g«me
 = "som9331:orange:lan2",

68 .
	ggpio
 = 
SOM9331_GPIO_LED_LAN2
,

69 .
	ga˘ive_low
 = 0,

72 .
	g«me
 = "som9331:blue:system",

73 .
	ggpio
 = 
SOM9331_GPIO_LED_SYSTEM
,

74 .
	ga˘ive_low
 = 0,

78 
gpio_keys_buâ⁄
 
	gsom9331_gpio_keys
[] 
	g__öôd©a
 = {

80 .
desc
 = "reset",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
KEY_RESTART
,

83 .
	gdeboun˚_öãrvÆ
 = 
SOM9331_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
SOM9331_GPIO_BTN_RESET
,

85 .
	ga˘ive_low
 = 0,

89 
__öô
 
	$som9331_£tup
()

91 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

92 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

94 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

96 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

97 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

98 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

99 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

100 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

102 
	`©h79_ªgi°î_m25p80
(&
som9331_Êash_d©a
);

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
som9331_Àds_gpio
),

104 
som9331_Àds_gpio
);

105 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SOM9331_KEYS_POLL_INTERVAL
,

106 
	`ARRAY_SIZE
(
som9331_gpio_keys
),

107 
som9331_gpio_keys
);

109 
	`©h79_ªgi°î_usb
();

111 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

112 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

114 
	`©h79_ªgi°î_mdio
(0, 0x0);

117 
	`©h79_ªgi°î_ëh
(1);

120 
	`©h79_ªgi°î_ëh
(0);

122 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_SOM9331
, "SOM9331", "O≥nEmbed SOM9331", 
som9331_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-sr3200.c

11 
	~<löux/phy.h
>

12 
	~<löux/gpio.h
>

13 
	~<löux/¨8216_∂©f‹m.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

27 
	~"machty≥s.h
"

29 
	#SR3200_XD3200_GPIO_LED_SYSTEM
 1

	)

30 
	#SR3200_XD3200_GPIO_LED_WLAN2G
 19

	)

32 
	#SR3200_XD3200_GPIO_BTN_RESET
 2

	)

34 
	#SR3200_XD3200_KEYS_POLL_INTERVAL
 20

	)

35 
	#SR3200_XD3200_KEYS_DEBOUNCE_INTERVAL
 \

36 (3 * 
SR3200_XD3200_KEYS_POLL_INTERVAL
)

	)

38 
gpio_Àd
 
	gxd3200_Àds_gpio
[] 
	g__öôd©a
 = {

40 .
«me
 = "xd3200:green:system",

41 .
	ggpio
 = 
SR3200_XD3200_GPIO_LED_SYSTEM
,

42 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "xd3200:blue:wlan2g",

46 .
	ggpio
 = 
SR3200_XD3200_GPIO_LED_WLAN2G
,

47 .
	ga˘ive_low
 = 1,

51 
gpio_Àd
 
	g§3200_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "sr3200:green:system",

54 .
	ggpio
 = 
SR3200_XD3200_GPIO_LED_SYSTEM
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "sr3200:green:wlan2g",

59 .
	ggpio
 = 
SR3200_XD3200_GPIO_LED_WLAN2G
,

60 .
	ga˘ive_low
 = 1,

64 
gpio_keys_buâ⁄
 
	g§3200_xd3200_gpio_keys
[] 
	g__öôd©a
 = {

66 .
desc
 = "reset",

67 .
	gty≥
 = 
EV_KEY
,

68 .
	gcode
 = 
KEY_RESTART
,

69 .
	gdeboun˚_öãrvÆ
 = 
SR3200_XD3200_KEYS_DEBOUNCE_INTERVAL
,

70 .
	ggpio
 = 
SR3200_XD3200_GPIO_BTN_RESET
,

71 .
	ga˘ive_low
 = 1,

75 c⁄° 
¨8327_Àd_öfo
 
	g§3200_Àds_qˇ833x
[] = {

76 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "sr3200:green:lan1"),

77 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "sr3200:green:lan2"),

78 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "sr3200:green:lan3"),

79 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "sr3200:green:lan4"),

80 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "sr3200:green:wan"),

83 c⁄° 
¨8327_Àd_öfo
 
	gxd3200_Àds_qˇ833x
[] = {

84 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "xd3200:green:lan"),

85 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "xd3200:green:wan"),

89 
¨8327_Àd_cfg
 
	g§3200_xd3200_qˇ833x_Àd_cfg
 = {

90 .
Àd_˘æ0
 = 0xcf37cf37,

91 .
	gÀd_˘æ1
 = 0xcf37cf37,

92 .
	gÀd_˘æ2
 = 0xcf37cf37,

93 .
	gÀd_˘æ3
 = 0x0,

94 .
	g›í_døö
 = 
åue
,

97 
¨8327_∑d_cfg
 
	g§3200_xd3200_qˇ833x_∑d0_cfg
 = {

98 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

99 .
	gsgmii_dñay_í
 = 
åue
,

102 
¨8327_∂©f‹m_d©a
 
	g§3200_xd3200_qˇ833x_d©a
 = {

103 .
∑d0_cfg
 = &
§3200_xd3200_qˇ833x_∑d0_cfg
,

104 .
	gp‹t0_cfg
 = {

105 .
f‹˚_lök
 = 1,

106 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

107 .
	gdu∂ex
 = 1,

108 .
	gtx∑u£
 = 1,

109 .
	grx∑u£
 = 1,

111 .
	gÀd_cfg
 = &
§3200_xd3200_qˇ833x_Àd_cfg
,

114 
mdio_bﬂrd_öfo
 
	g§3200_xd3200_mdio0_öfo
[] = {

116 .
bus_id
 = "ag71xx-mdio.0",

117 .
	gmdio_addr
 = 0,

118 .
	g∂©f‹m_d©a
 = &
§3200_xd3200_qˇ833x_d©a
,

122 
__öô
 
	$§3200_xd3200_comm⁄_£tup
()

124 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

126 
	`©h79_ªgi°î_m25p80
(
NULL
);

128 
	`©h79_ªgi°î_mdio
(0, 0x0);

129 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
§3200_xd3200_mdio0_öfo
,

130 
	`ARRAY_SIZE
(
§3200_xd3200_mdio0_öfo
));

133 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

134 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

135 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

136 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

137 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

139 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

140 
	`©h79_ªgi°î_ëh
(0);

142 
	`©h79_ªgi°î_wmac
(
mac
 + 0x1000, 
NULL
);

144 
	`≠91_pci_öô
(
mac
 + 0x5000, 
NULL
);

146 
	`©h79_gpio_dúe˘i⁄_£À˘
(
SR3200_XD3200_GPIO_LED_SYSTEM
, 
åue
);

147 
	`©h79_gpio_dúe˘i⁄_£À˘
(
SR3200_XD3200_GPIO_LED_WLAN2G
, 
åue
);

150 
	`gpio_£t_vÆue
(
SR3200_XD3200_GPIO_LED_SYSTEM
, 1);

151 
	`gpio_£t_vÆue
(
SR3200_XD3200_GPIO_LED_WLAN2G
, 1);

153 
	`©h79_gpio_ouçut_£À˘
(
SR3200_XD3200_GPIO_LED_SYSTEM
, 0);

154 
	`©h79_gpio_ouçut_£À˘
(
SR3200_XD3200_GPIO_LED_WLAN2G
, 0);

156 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
SR3200_XD3200_KEYS_POLL_INTERVAL
,

157 
	`ARRAY_SIZE
(
§3200_xd3200_gpio_keys
),

158 
§3200_xd3200_gpio_keys
);

159 
	}
}

161 
__öô
 
	$§3200_£tup
()

163 
§3200_xd3200_qˇ833x_d©a
.
Àds
 = 
§3200_Àds_qˇ833x
;

164 
§3200_xd3200_qˇ833x_d©a
.
num_Àds
 = 
	`ARRAY_SIZE
(
§3200_Àds_qˇ833x
);

166 
	`§3200_xd3200_comm⁄_£tup
();

168 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
§3200_Àds_gpio
),

169 
§3200_Àds_gpio
);

171 
	`©h79_ªgi°î_usb
();

172 
	}
}

174 
MIPS_MACHINE
(
ATH79_MACH_SR3200
, "SR3200", "YunC‹êSR3200", 
§3200_£tup
);

176 
__öô
 
	$xd3200_£tup
()

178 
§3200_xd3200_qˇ833x_d©a
.
Àds
 = 
xd3200_Àds_qˇ833x
;

179 
§3200_xd3200_qˇ833x_d©a
.
num_Àds
 = 
	`ARRAY_SIZE
(
xd3200_Àds_qˇ833x
);

181 
	`§3200_xd3200_comm⁄_£tup
();

183 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
xd3200_Àds_gpio
),

184 
xd3200_Àds_gpio
);

185 
	}
}

187 
MIPS_MACHINE
(
ATH79_MACH_XD3200
, "XD3200", "YunC‹êXD3200", 
xd3200_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-t830.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#T830_GPIO_LED_LAN1
 16

	)

27 
	#T830_GPIO_LED_LAN2
 15

	)

28 
	#T830_GPIO_LED_LAN3
 14

	)

29 
	#T830_GPIO_LED_LAN4
 11

	)

30 
	#T830_GPIO_LED_USB
 13

	)

31 
	#T830_GPIO_LED_WAN
 4

	)

32 
	#T830_GPIO_LED_WLAN
 12

	)

34 
	#T830_GPIO_BTN_RESET
 17

	)

36 
	#T830_KEYS_POLL_INTERVAL
 20

	)

37 
	#T830_KEYS_DEBOUNCE_INTERVAL
 (3 * 
T830_KEYS_POLL_INTERVAL
)

	)

39 
	#T830_WMAC_CALDATA_OFFSET
 0x1000

	)

41 
gpio_Àd
 
	gt830_gpio_Àds
[] 
	g__öôd©a
 = {

43 .
«me
 = "t830:green:lan1",

44 .
	ggpio
 = 
T830_GPIO_LED_LAN1
,

45 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "t830:green:lan2",

48 .
	ggpio
 = 
T830_GPIO_LED_LAN2
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "t830:green:lan3",

52 .
	ggpio
 = 
T830_GPIO_LED_LAN3
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "t830:green:lan4",

56 .
	ggpio
 = 
T830_GPIO_LED_LAN4
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "t830:green:usb",

60 .
	ggpio
 = 
T830_GPIO_LED_USB
,

61 .
	ga˘ive_low
 = 1,

62 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_KEEP
,

64 .
	g«me
 = "t830:green:wan",

65 .
	ggpio
 = 
T830_GPIO_LED_WAN
,

66 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "t830:green:wlan",

69 .
	ggpio
 = 
T830_GPIO_LED_WLAN
,

70 .
	ga˘ive_low
 = 1,

74 
gpio_keys_buâ⁄
 
	gt830_gpio_keys
[] 
	g__öôd©a
 = {

76 .
desc
 = "reset",

77 .
	gty≥
 = 
EV_KEY
,

78 .
	gcode
 = 
KEY_RESTART
,

79 .
	gdeboun˚_öãrvÆ
 = 
T830_KEYS_DEBOUNCE_INTERVAL
,

80 .
	ggpio
 = 
T830_GPIO_BTN_RESET
,

81 .
	ga˘ive_low
 = 1,

85 
__öô
 
	$t830_£tup
()

87 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

88 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

90 
	`©h79_ªgi°î_m25p80
(
NULL
);

92 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

94 
	`©h79_ªgi°î_mdio
(0, 0x0);

96 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

97 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

100 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

101 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

102 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 6, 0);

103 
	`©h79_ªgi°î_ëh
(1);

106 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

107 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

108 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

109 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

110 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

111 
	`©h79_ªgi°î_ëh
(0);

113 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

114 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

116 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
t830_gpio_Àds
),

117 
t830_gpio_Àds
);

119 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
T830_KEYS_POLL_INTERVAL
,

120 
	`ARRAY_SIZE
(
t830_gpio_keys
),

121 
t830_gpio_keys
);

123 
	`©h79_ªgi°î_usb
();

124 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

125 
	}
}

127 
MIPS_MACHINE
(
ATH79_MACH_T830
, "T830", "YunC‹êT830", 
t830_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tellstick-znet-lite.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TELLSTICK_GPIO_LED_SYSTEM
 27

	)

26 
	#TELLSTICK_GPIO_LED_BLUE
 0

	)

27 
	#TELLSTICK_GPIO_LED_RED
 14

	)

28 
	#TELLSTICK_GPIO_LED_GREEN
 15

	)

29 
	#TELLSTICK_GPIO_LED_LAN_GREEN
 16

	)

30 
	#TELLSTICK_GPIO_LED_LAN_ORANGE
 17

	)

32 
	#TELLSTICK_GPIO_BTN_RESET
 11

	)

34 
	#TELLSTICK_GPIO_RF433_RESET
 13

	)

36 
	#TELLSTICK_KEYS_POLL_INTERVAL
 20

	)

37 
	#TELLSTICK_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TELLSTICK_KEYS_POLL_INTERVAL
)

	)

39 c⁄° *
	gãŒ°ick_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	gãŒ°ick_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
ãŒ°ick_∑π_¥obes
,

48 
gpio_Àd
 
	gãŒ°ick_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tellstick:white:system",

51 .
	ggpio
 = 
TELLSTICK_GPIO_LED_SYSTEM
,

52 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "tellstick:blue:status",

56 .
	ggpio
 = 
TELLSTICK_GPIO_LED_BLUE
,

57 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "tellstick:red:status",

61 .
	ggpio
 = 
TELLSTICK_GPIO_LED_RED
,

62 .
	ga˘ive_low
 = 0,

65 .
	g«me
 = "tellstick:green:status",

66 .
	ggpio
 = 
TELLSTICK_GPIO_LED_GREEN
,

67 .
	ga˘ive_low
 = 0,

70 .
	g«me
 = "tellstick:green:lan",

71 .
	ggpio
 = 
TELLSTICK_GPIO_LED_LAN_GREEN
,

72 .
	ga˘ive_low
 = 0,

75 .
	g«me
 = "tellstick:orange:lan",

76 .
	ggpio
 = 
TELLSTICK_GPIO_LED_LAN_ORANGE
,

77 .
	ga˘ive_low
 = 0,

81 
gpio_keys_buâ⁄
 
	gãŒ°ick_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "reset",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_RESTART
,

86 .
	gdeboun˚_öãrvÆ
 = 
TELLSTICK_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
TELLSTICK_GPIO_BTN_RESET
,

88 .
	ga˘ive_low
 = 0,

92 
__öô
 
	$ãŒ°ick_z√t_lôe_£tup
()

94 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

95 
u8
 
mac
[
ETH_ALEN
];

96 
	`mem˝y
(&
mac
, (
u8
 *Ë
	`KSEG1ADDR
(0x1f01fc00), (mac));

98 
	`©h79_gpio_fun˘i⁄_dißbÀ
(

99 
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

100 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

101 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

102 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

103 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN


106 
	`©h79_ªgi°î_m25p80
(&
ãŒ°ick_Êash_d©a
);

107 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãŒ°ick_Àds_gpio
),

108 
ãŒ°ick_Àds_gpio
);

109 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TELLSTICK_KEYS_POLL_INTERVAL
,

110 
	`ARRAY_SIZE
(
ãŒ°ick_gpio_keys
),

111 
ãŒ°ick_gpio_keys
);

113 
	`gpio_ªque°_⁄e
(
TELLSTICK_GPIO_RF433_RESET
,

114 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

116 
	`©h79_ªgi°î_usb
();

118 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, (
u8
 *)
mac
, 0);

120 
	`©h79_ªgi°î_mdio
(0, 0x0);

121 
	`©h79_ªgi°î_ëh
(0);

124 
mac
[3] += 1;

125 
	`©h79_ªgi°î_wmac
(
ì
, (
u8
 *)
mac
);

126 
	}
}

128 
MIPS_MACHINE
(
ATH79_MACH_TELLSTICK_ZNET_LITE
, "TELLSTICK-ZNET-LITE", "Telldus TellStick ZNet Lite",

129 
ãŒ°ick_z√t_lôe_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tew-632brp.c

12 
	~<asm/mach-©h79/©h79.h
>

14 
	~"dev-ëh.h
"

15 
	~"dev-gpio-buâ⁄s.h
"

16 
	~"dev-Àds-gpio.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-wmac.h
"

19 
	~"machty≥s.h
"

20 
	~"nvøm.h
"

22 
	#TEW_632BRP_GPIO_LED_STATUS
 1

	)

23 
	#TEW_632BRP_GPIO_LED_WPS
 3

	)

24 
	#TEW_632BRP_GPIO_LED_WLAN
 6

	)

25 
	#TEW_632BRP_GPIO_BTN_WPS
 12

	)

26 
	#TEW_632BRP_GPIO_BTN_RESET
 21

	)

28 
	#TEW_632BRP_KEYS_POLL_INTERVAL
 20

	)

29 
	#TEW_632BRP_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TEW_632BRP_KEYS_POLL_INTERVAL
)

	)

31 
	#TEW_632BRP_CONFIG_ADDR
 0x1f020000

	)

32 
	#TEW_632BRP_CONFIG_SIZE
 0x10000

	)

34 
gpio_Àd
 
	gãw_632bΩ_Àds_gpio
[] 
	g__öôd©a
 = {

36 .
«me
 = "tew-632brp:green:status",

37 .
	ggpio
 = 
TEW_632BRP_GPIO_LED_STATUS
,

38 .
	ga˘ive_low
 = 1,

40 .
	g«me
 = "tew-632brp:blue:wps",

41 .
	ggpio
 = 
TEW_632BRP_GPIO_LED_WPS
,

42 .
	ga˘ive_low
 = 1,

44 .
	g«me
 = "tew-632brp:green:wlan",

45 .
	ggpio
 = 
TEW_632BRP_GPIO_LED_WLAN
,

46 .
	ga˘ive_low
 = 1,

50 
gpio_keys_buâ⁄
 
	gãw_632bΩ_gpio_keys
[] 
	g__öôd©a
 = {

52 .
desc
 = "reset",

53 .
	gty≥
 = 
EV_KEY
,

54 .
	gcode
 = 
KEY_RESTART
,

55 .
	gdeboun˚_öãrvÆ
 = 
TEW_632BRP_KEYS_DEBOUNCE_INTERVAL
,

56 .
	ggpio
 = 
TEW_632BRP_GPIO_BTN_RESET
,

57 .
	ga˘ive_low
 = 1,

59 .
	gdesc
 = "wps",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
KEY_WPS_BUTTON
,

62 .
	gdeboun˚_öãrvÆ
 = 
TEW_632BRP_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
TEW_632BRP_GPIO_BTN_WPS
,

64 .
	ga˘ive_low
 = 1,

68 
	#TEW_632BRP_LAN_PHYMASK
 
	`BIT
(0)

	)

69 
	#TEW_632BRP_WAN_PHYMASK
 
	`BIT
(4)

	)

70 
	#TEW_632BRP_MDIO_MASK
 (~(
TEW_632BRP_LAN_PHYMASK
 | \

71 
TEW_632BRP_WAN_PHYMASK
))

	)

73 
__öô
 
	$ãw_632bΩ_£tup
()

75 c⁄° *
c⁄fig
 = (*Ë
	`KSEG1ADDR
(
TEW_632BRP_CONFIG_ADDR
);

76 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

77 
u8
 
mac
[6];

78 
u8
 *
wœn_mac
 = 
NULL
;

80 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
c⁄fig
, 
TEW_632BRP_CONFIG_SIZE
,

81 "œn_mac=", 
mac
) == 0) {

82 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

83 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

84 
wœn_mac
 = 
mac
;

87 
	`©h79_ªgi°î_mdio
(0, 
TEW_632BRP_MDIO_MASK
);

89 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

90 
©h79_ëh0_d©a
.
phy_mask
 = 
TEW_632BRP_LAN_PHYMASK
;

92 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

93 
©h79_ëh1_d©a
.
phy_mask
 = 
TEW_632BRP_WAN_PHYMASK
;

95 
	`©h79_ªgi°î_ëh
(0);

96 
	`©h79_ªgi°î_ëh
(1);

98 
	`©h79_ªgi°î_m25p80
(
NULL
);

100 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãw_632bΩ_Àds_gpio
),

101 
ãw_632bΩ_Àds_gpio
);

103 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TEW_632BRP_KEYS_POLL_INTERVAL
,

104 
	`ARRAY_SIZE
(
ãw_632bΩ_gpio_keys
),

105 
ãw_632bΩ_gpio_keys
);

107 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
wœn_mac
);

108 
	}
}

110 
MIPS_MACHINE
(
ATH79_MACH_TEW_632BRP
, "TEW-632BRP", "TRENDnet TEW-632BRP",

111 
ãw_632bΩ_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tew-673gru.c

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/dñay.h
>

13 
	~<löux/πl8366.h
>

14 
	~<löux/•i/•i.h
>

15 
	~<löux/•i/•i_gpio.h
>

17 
	~<asm/mach-©h79/©h79.h
>

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"machty≥s.h
"

27 
	#TEW673GRU_GPIO_LCD_SCK
 0

	)

28 
	#TEW673GRU_GPIO_LCD_MOSI
 1

	)

29 
	#TEW673GRU_GPIO_LCD_MISO
 2

	)

30 
	#TEW673GRU_GPIO_LCD_CS
 6

	)

32 
	#TEW673GRU_GPIO_LED_WPS
 9

	)

34 
	#TEW673GRU_GPIO_BTN_RESET
 3

	)

35 
	#TEW673GRU_GPIO_BTN_WPS
 8

	)

37 
	#TEW673GRU_GPIO_RTL8366_SDA
 5

	)

38 
	#TEW673GRU_GPIO_RTL8366_SCK
 7

	)

40 
	#TEW673GRU_KEYS_POLL_INTERVAL
 20

	)

41 
	#TEW673GRU_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TEW673GRU_KEYS_POLL_INTERVAL
)

	)

43 
	#TEW673GRU_CAL0_OFFSET
 0x1000

	)

44 
	#TEW673GRU_CAL1_OFFSET
 0x5000

	)

45 
	#TEW673GRU_MAC0_OFFSET
 0xfÁ0

	)

46 
	#TEW673GRU_MAC1_OFFSET
 0xffb4

	)

48 
	#TEW673GRU_CAL_LOCATION_0
 0x1f660000

	)

49 
	#TEW673GRU_CAL_LOCATION_1
 0x1f7f0000

	)

51 
gpio_Àd
 
	gãw673gru_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "trendnet:blue:wps",

54 .
	ggpio
 = 
TEW673GRU_GPIO_LED_WPS
,

55 .
	ga˘ive_low
 = 1,

59 
gpio_keys_buâ⁄
 
	gãw673gru_gpio_keys
[] 
	g__öôd©a
 = {

61 .
desc
 = "reset",

62 .
	gty≥
 = 
EV_KEY
,

63 .
	gcode
 = 
KEY_RESTART
,

64 .
	gdeboun˚_öãrvÆ
 = 
TEW673GRU_KEYS_DEBOUNCE_INTERVAL
,

65 .
	ggpio
 = 
TEW673GRU_GPIO_BTN_RESET
,

66 .
	ga˘ive_low
 = 1,

68 .
	gdesc
 = "wps",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_WPS_BUTTON
,

71 .
	gdeboun˚_öãrvÆ
 = 
TEW673GRU_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
TEW673GRU_GPIO_BTN_WPS
,

73 .
	ga˘ive_low
 = 1,

77 
πl8366_öôvÆ
 
	gãw673gru_πl8366s_öôvÆs
[] = {

78 { .
ªg
 = 0x06, .
	gvÆ
 = 0x0108 },

81 
πl8366_∂©f‹m_d©a
 
	gãw673gru_πl8366s_d©a
 = {

82 .
gpio_sda
 = 
TEW673GRU_GPIO_RTL8366_SDA
,

83 .
	ggpio_sck
 = 
TEW673GRU_GPIO_RTL8366_SCK
,

84 .
	gnum_öôvÆs
 = 
ARRAY_SIZE
(
ãw673gru_πl8366s_öôvÆs
),

85 .
	göôvÆs
 = 
ãw673gru_πl8366s_öôvÆs
,

88 
∂©f‹m_devi˚
 
	gãw673gru_πl8366s_devi˚
 = {

89 .
«me
 = 
RTL8366S_DRIVER_NAME
,

90 .
	gid
 = -1,

91 .
	gdev
 = {

92 .
∂©f‹m_d©a
 = &
ãw673gru_πl8366s_d©a
,

96 
•i_bﬂrd_öfo
 
	gãw673gru_•i_öfo
[] = {

98 .
bus_num
 = 1,

99 .
	gchù_£À˘
 = 0,

100 .
	gmax_•ìd_hz
 = 400000,

101 .
	gmodÆüs
 = "spidev",

102 .
	gmode
 = 
SPI_MODE_2
,

103 .
	gc⁄åﬁÀr_d©a
 = (*Ë
TEW673GRU_GPIO_LCD_CS
,

107 
•i_gpio_∂©f‹m_d©a
 
	gãw673gru_•i_d©a
 = {

108 .
sck
 = 
TEW673GRU_GPIO_LCD_SCK
,

109 .
	gmiso
 = 
TEW673GRU_GPIO_LCD_MISO
,

110 .
	gmosi
 = 
TEW673GRU_GPIO_LCD_MOSI
,

111 .
	gnum_chù£À˘
 = 1,

114 
∂©f‹m_devi˚
 
	gãw673gru_•i_devi˚
 = {

115 .
«me
 = "spi_gpio",

116 .
	gid
 = 1,

117 .
	gdev
 = {

118 .
∂©f‹m_d©a
 = &
ãw673gru_•i_d©a
,

122 
boﬁ
 
__öô
 
	$ãw673gru_is_ˇld©a_vÆid
(
u8
 *
p
)

124 
u16
 *
magic0
, *
magic1
;

126 
magic0
 = (
u16
 *)(
p
 + 
TEW673GRU_CAL0_OFFSET
);

127 
magic1
 = (
u16
 *)(
p
 + 
TEW673GRU_CAL1_OFFSET
);

129  (*
magic0
 =0xa55®&& *
magic1
 == 0xa55a);

130 
	}
}

132 
__öô
 
	$ãw673gru_wœn_öô
()

134 
u8
 
mac1
[
ETH_ALEN
], 
mac2
[ETH_ALEN];

135 
u8
 *
ˇld©a
;

137 
ˇld©a
 = (
u8
 *Ë
	`KSEG1ADDR
(
TEW673GRU_CAL_LOCATION_0
);

138 i‡(!
	`ãw673gru_is_ˇld©a_vÆid
(
ˇld©a
)) {

139 
ˇld©a
 = (
u8
 *)
	`KSEG1ADDR
(
TEW673GRU_CAL_LOCATION_1
);

140 i‡(!
	`ãw673gru_is_ˇld©a_vÆid
(
ˇld©a
)) {

141 
	`¥_îr
("no calibration data found\n");

146 
	`©h79_∑r£_ascii_mac
(
ˇld©a
 + 
TEW673GRU_MAC0_OFFSET
, 
mac1
);

147 
	`©h79_∑r£_ascii_mac
(
ˇld©a
 + 
TEW673GRU_MAC1_OFFSET
, 
mac2
);

149 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 2);

150 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac1
, 3);

152 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 5);

153 
	`≠9x_pci_£tup_wmac_Àd_pö
(1, 5);

155 
	`≠94_pci_öô
(
ˇld©a
 + 
TEW673GRU_CAL0_OFFSET
, 
mac1
,

156 
ˇld©a
 + 
TEW673GRU_CAL1_OFFSET
, 
mac2
);

157 
	}
}

159 
__öô
 
	$ãw673gru_£tup
()

161 
	`ãw673gru_wœn_öô
();

163 
	`©h79_ªgi°î_mdio
(0, 0x0);

165 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
ãw673gru_πl8366s_devi˚
.
dev
;

166 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

167 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

168 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

169 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x11110000;

171 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
ãw673gru_πl8366s_devi˚
.
dev
;

172 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

173 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

174 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x11110000;

176 
	`©h79_ªgi°î_ëh
(0);

177 
	`©h79_ªgi°î_ëh
(1);

179 
	`©h79_ªgi°î_m25p80
(
NULL
);

181 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãw673gru_Àds_gpio
),

182 
ãw673gru_Àds_gpio
);

184 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TEW673GRU_KEYS_POLL_INTERVAL
,

185 
	`ARRAY_SIZE
(
ãw673gru_gpio_keys
),

186 
ãw673gru_gpio_keys
);

188 
	`©h79_ªgi°î_usb
();

190 
	`∂©f‹m_devi˚_ªgi°î
(&
ãw673gru_πl8366s_devi˚
);

192 
	`•i_ªgi°î_bﬂrd_öfo
(
ãw673gru_•i_öfo
,

193 
	`ARRAY_SIZE
(
ãw673gru_•i_öfo
));

194 
	`∂©f‹m_devi˚_ªgi°î
(&
ãw673gru_•i_devi˚
);

195 
	}
}

197 
MIPS_MACHINE
(
ATH79_MACH_TEW_673GRU
, "TEW-673GRU", "TRENDnet TEW-673GRU",

198 
ãw673gru_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tew-712br.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#TEW_712BR_GPIO_BTN_WPS
 11

	)

25 
	#TEW_712BR_GPIO_BTN_RESET
 12

	)

27 
	#TEW_712BR_GPIO_LED_LAN1
 13

	)

28 
	#TEW_712BR_GPIO_LED_LAN2
 14

	)

29 
	#TEW_712BR_GPIO_LED_LAN3
 15

	)

30 
	#TEW_712BR_GPIO_LED_LAN4
 16

	)

31 
	#TEW_712BR_GPIO_LED_POWER_GREEN
 20

	)

32 
	#TEW_712BR_GPIO_LED_POWER_ORANGE
 27

	)

33 
	#TEW_712BR_GPIO_LED_WAN_GREEN
 17

	)

34 
	#TEW_712BR_GPIO_LED_WAN_ORANGE
 23

	)

35 
	#TEW_712BR_GPIO_LED_WLAN
 0

	)

36 
	#TEW_712BR_GPIO_LED_WPS
 26

	)

38 
	#TEW_712BR_GPIO_WAN_LED_ENABLE
 1

	)

40 
	#TEW_712BR_KEYS_POLL_INTERVAL
 20

	)

41 
	#TEW_712BR_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TEW_712BR_KEYS_POLL_INTERVAL
)

	)

43 
	#TEW_712BR_ART_ADDRESS
 0x1f010000

	)

44 
	#TEW_712BR_CALDATA_OFFSET
 0x1000

	)

46 
	#TEW_712BR_MAC_PART_ADDRESS
 0x1f020000

	)

47 
	#TEW_712BR_LAN_MAC_OFFSET
 0x04

	)

48 
	#TEW_712BR_WAN_MAC_OFFSET
 0x16

	)

50 
gpio_Àd
 
	gãw_712br_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "trendnet:green:lan1",

53 .
	ggpio
 = 
TEW_712BR_GPIO_LED_LAN1
,

54 .
	ga˘ive_low
 = 0,

56 .
	g«me
 = "trendnet:green:lan2",

57 .
	ggpio
 = 
TEW_712BR_GPIO_LED_LAN2
,

58 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "trendnet:green:lan3",

61 .
	ggpio
 = 
TEW_712BR_GPIO_LED_LAN3
,

62 .
	ga˘ive_low
 = 0,

64 .
	g«me
 = "trendnet:green:lan4",

65 .
	ggpio
 = 
TEW_712BR_GPIO_LED_LAN4
,

66 .
	ga˘ive_low
 = 0,

68 .
	g«me
 = "trendnet:blue:wps",

69 .
	ggpio
 = 
TEW_712BR_GPIO_LED_WPS
,

70 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "trendnet:green:power",

73 .
	ggpio
 = 
TEW_712BR_GPIO_LED_POWER_GREEN
,

74 .
	ga˘ive_low
 = 0,

76 .
	g«me
 = "trendnet:orange:power",

77 .
	ggpio
 = 
TEW_712BR_GPIO_LED_POWER_ORANGE
,

78 .
	ga˘ive_low
 = 0,

80 .
	g«me
 = "trendnet:green:wan",

81 .
	ggpio
 = 
TEW_712BR_GPIO_LED_WAN_GREEN
,

82 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "trendnet:orange:wan",

85 .
	ggpio
 = 
TEW_712BR_GPIO_LED_WAN_ORANGE
,

86 .
	ga˘ive_low
 = 0,

88 .
	g«me
 = "trendnet:green:wlan",

89 .
	ggpio
 = 
TEW_712BR_GPIO_LED_WLAN
,

90 .
	ga˘ive_low
 = 0,

94 
gpio_keys_buâ⁄
 
	gãw_712br_gpio_keys
[] 
	g__öôd©a
 = {

96 .
desc
 = "Reset button",

97 .
	gty≥
 = 
EV_KEY
,

98 .
	gcode
 = 
KEY_RESTART
,

99 .
	gdeboun˚_öãrvÆ
 = 
TEW_712BR_KEYS_DEBOUNCE_INTERVAL
,

100 .
	ggpio
 = 
TEW_712BR_GPIO_BTN_RESET
,

101 .
	ga˘ive_low
 = 1,

103 .
	gdesc
 = "WPS button",

104 .
	gty≥
 = 
EV_KEY
,

105 .
	gcode
 = 
KEY_WPS_BUTTON
,

106 .
	gdeboun˚_öãrvÆ
 = 
TEW_712BR_KEYS_DEBOUNCE_INTERVAL
,

107 .
	ggpio
 = 
TEW_712BR_GPIO_BTN_WPS
,

108 .
	ga˘ive_low
 = 1,

112 
__öô
 
	$ãw_712br_£tup
()

114 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
TEW_712BR_ART_ADDRESS
);

115 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
TEW_712BR_MAC_PART_ADDRESS
);

116 
u8
 
œn_mac
[
ETH_ALEN
];

117 
u8
 
w™_mac
[
ETH_ALEN
];

119 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

121 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

122 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

123 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

124 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

125 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

127 
	`gpio_ªque°_⁄e
(
TEW_712BR_GPIO_WAN_LED_ENABLE
,

128 
GPIOF_OUT_INIT_LOW
, "WAN LEDÉnable");

130 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãw_712br_Àds_gpio
),

131 
ãw_712br_Àds_gpio
);

133 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TEW_712BR_KEYS_POLL_INTERVAL
,

134 
	`ARRAY_SIZE
(
ãw_712br_gpio_keys
),

135 
ãw_712br_gpio_keys
);

137 
	`©h79_ªgi°î_m25p80
(
NULL
);

139 
	`©h79_∑r£_ascii_mac
(
mac
 + 
TEW_712BR_LAN_MAC_OFFSET
, 
œn_mac
);

140 
	`©h79_∑r£_ascii_mac
(
mac
 + 
TEW_712BR_WAN_MAC_OFFSET
, 
w™_mac
);

142 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
w™_mac
, 0);

143 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
œn_mac
, 0);

145 
	`©h79_ªgi°î_mdio
(0, 0x0);

146 
	`©h79_ªgi°î_ëh
(1);

147 
	`©h79_ªgi°î_ëh
(0);

149 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TEW_712BR_CALDATA_OFFSET
, 
w™_mac
);

150 
	}
}

152 
MIPS_MACHINE
(
ATH79_MACH_TEW_712BR
, "TEW-712BR",

153 "TREND√àTEW-712BR", 
ãw_712br_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tew-732br.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TEW_732BR_GPIO_BTN_WPS
 16

	)

26 
	#TEW_732BR_GPIO_BTN_RESET
 17

	)

28 
	#TEW_732BR_GPIO_LED_POWER_GREEN
 4

	)

29 
	#TEW_732BR_GPIO_LED_POWER_AMBER
 14

	)

30 
	#TEW_732BR_GPIO_LED_PLANET_GREEN
 12

	)

31 
	#TEW_732BR_GPIO_LED_PLANET_AMBER
 22

	)

33 
	#TEW_732BR_KEYS_POLL_INTERVAL
 20

	)

34 
	#TEW_732BR_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TEW_732BR_KEYS_POLL_INTERVAL
)

	)

36 
	#TEW_732BR_ART_ADDRESS
 0x1fff0000

	)

37 
	#TEW_732BR_CALDATA_OFFSET
 0x1000

	)

38 
	#TEW_732BR_LAN_MAC_OFFSET
 0xfÁ0

	)

39 
	#TEW_732BR_WAN_MAC_OFFSET
 0xffb4

	)

41 
gpio_Àd
 
	gãw_732br_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "trendnet:green:power",

44 .
	ggpio
 = 
TEW_732BR_GPIO_LED_POWER_GREEN
,

45 .
	ga˘ive_low
 = 0,

48 .
	g«me
 = "trendnet:amber:power",

49 .
	ggpio
 = 
TEW_732BR_GPIO_LED_POWER_AMBER
,

50 .
	ga˘ive_low
 = 0,

53 .
	g«me
 = "trendnet:green:wan",

54 .
	ggpio
 = 
TEW_732BR_GPIO_LED_PLANET_GREEN
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "trendnet:amber:wan",

59 .
	ggpio
 = 
TEW_732BR_GPIO_LED_PLANET_AMBER
,

60 .
	ga˘ive_low
 = 0,

64 
gpio_keys_buâ⁄
 
	gãw_732br_gpio_keys
[] 
	g__öôd©a
 = {

66 .
desc
 = "Reset button",

67 .
	gty≥
 = 
EV_KEY
,

68 .
	gcode
 = 
KEY_RESTART
,

69 .
	gdeboun˚_öãrvÆ
 = 
TEW_732BR_KEYS_DEBOUNCE_INTERVAL
,

70 .
	ggpio
 = 
TEW_732BR_GPIO_BTN_RESET
,

71 .
	ga˘ive_low
 = 1,

74 .
	gdesc
 = "WPS button",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
KEY_WPS_BUTTON
,

77 .
	gdeboun˚_öãrvÆ
 = 
TEW_732BR_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
TEW_732BR_GPIO_BTN_WPS
,

79 .
	ga˘ive_low
 = 1,

83 
__öô
 
	$ãw_732br_£tup
()

85 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
TEW_732BR_ART_ADDRESS
);

86 
u8
 
œn_mac
[
ETH_ALEN
];

87 
u8
 
w™_mac
[
ETH_ALEN
];

89 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãw_732br_Àds_gpio
),

90 
ãw_732br_Àds_gpio
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TEW_732BR_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
ãw_732br_gpio_keys
),

94 
ãw_732br_gpio_keys
);

96 
	`©h79_ªgi°î_m25p80
(
NULL
);

98 
	`©h79_∑r£_ascii_mac
(
¨t
 + 
TEW_732BR_LAN_MAC_OFFSET
, 
œn_mac
);

99 
	`©h79_∑r£_ascii_mac
(
¨t
 + 
TEW_732BR_WAN_MAC_OFFSET
, 
w™_mac
);

101 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TEW_732BR_CALDATA_OFFSET
, 
œn_mac
);

103 
	`©h79_ªgi°î_mdio
(1, 0x0);

105 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

108 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
œn_mac
, 0);

109 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

111 
	`©h79_ªgi°î_ëh
(1);

114 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
w™_mac
, 0);

116 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

117 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

119 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

120 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

121 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

123 
	`©h79_ªgi°î_ëh
(0);

124 
	}
}

126 
MIPS_MACHINE
(
ATH79_MACH_TEW_732BR
, "TEW-732BR", "TRENDnet TEW-732BR",

127 
ãw_732br_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tew-823dru.c

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/¨8216_∂©f‹m.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"pci.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-usb.h
"

26 
	~"dev-wmac.h
"

27 
	~"machty≥s.h
"

29 
	#TEW_823DRU_GPIO_LED_POWER_ORANGE
 14

	)

30 
	#TEW_823DRU_GPIO_LED_POWER_GREEN
 19

	)

31 
	#TEW_823DRU_GPIO_LED_PLANET_GREEN
 22

	)

32 
	#TEW_823DRU_GPIO_LED_PLANET_ORANGE
 23

	)

34 
	#TEW_823DRU_GPIO_BTN_WPS
 16

	)

35 
	#TEW_823DRU_GPIO_BTN_RESET
 17

	)

37 
	#TEW_823DRU_KEYS_POLL_INTERVAL
 20

	)

38 
	#TEW_823DRU_KEYS_DEBOUNCE_INTERVAL
 \

39 (3 * 
TEW_823DRU_KEYS_POLL_INTERVAL
)

	)

41 
	#TEW_823DRU_WMAC_CALDATA_OFFSET
 0x1000

	)

43 
	#TEW_823DRU_LAN_MAC_OFFSET
 0x04

	)

44 
	#TEW_823DRU_WAN_MAC_OFFSET
 0x18

	)

46 
gpio_Àd
 
	gãw_823dru_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "trendnet:green:power",

49 .
	ggpio
 = 
TEW_823DRU_GPIO_LED_POWER_GREEN
,

50 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "trendnet:orange:power",

54 .
	ggpio
 = 
TEW_823DRU_GPIO_LED_POWER_ORANGE
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "trendnet:green:planet",

59 .
	ggpio
 = 
TEW_823DRU_GPIO_LED_PLANET_GREEN
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "trendnet:orange:planet",

64 .
	ggpio
 = 
TEW_823DRU_GPIO_LED_PLANET_ORANGE
,

65 .
	ga˘ive_low
 = 1,

69 
gpio_keys_buâ⁄
 
	gãw_823dru_gpio_keys
[] 
	g__öôd©a
 = {

71 .
desc
 = "Reset button",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_RESTART
,

74 .
	gdeboun˚_öãrvÆ
 = 
TEW_823DRU_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
TEW_823DRU_GPIO_BTN_RESET
,

76 .
	ga˘ive_low
 = 1,

79 .
	gdesc
 = "WPS button",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_WPS_BUTTON
,

82 .
	gdeboun˚_öãrvÆ
 = 
TEW_823DRU_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
TEW_823DRU_GPIO_BTN_WPS
,

84 .
	ga˘ive_low
 = 1,

89 
¨8327_∑d_cfg
 
	gãw_823dru_¨8327_∑d0_cfg
 = {

90 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

91 .
	gsgmii_dñay_í
 = 
åue
,

95 
¨8327_∑d_cfg
 
	gãw_823dru_¨8327_∑d6_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

103 
¨8327_∂©f‹m_d©a
 
	gãw_823dru_¨8327_d©a
 = {

104 .
∑d0_cfg
 = &
ãw_823dru_¨8327_∑d0_cfg
,

105 .
	g∑d6_cfg
 = &
ãw_823dru_¨8327_∑d6_cfg
,

106 .
	gp‹t0_cfg
 = {

107 .
f‹˚_lök
 = 1,

108 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

109 .
	gdu∂ex
 = 1,

110 .
	gtx∑u£
 = 1,

111 .
	grx∑u£
 = 1,

113 .
	gp‹t6_cfg
 = {

114 .
f‹˚_lök
 = 1,

115 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

116 .
	gdu∂ex
 = 1,

117 .
	gtx∑u£
 = 1,

118 .
	grx∑u£
 = 1,

122 
mdio_bﬂrd_öfo
 
	gãw_823dru_mdio0_öfo
[] = {

124 .
bus_id
 = "ag71xx-mdio.0",

125 .
	gmdio_addr
 = 0,

126 .
	g∂©f‹m_d©a
 = &
ãw_823dru_¨8327_d©a
,

130 
__öô
 
	$ãw_823dru_£tup
()

132 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1ffe0000);

133 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

134 
u8
 
œn_mac
[
ETH_ALEN
];

135 
u8
 
w™_mac
[
ETH_ALEN
];

137 
	`©h79_∑r£_ascii_mac
(
mac
 + 
TEW_823DRU_LAN_MAC_OFFSET
, 
œn_mac
);

138 
	`©h79_∑r£_ascii_mac
(
mac
 + 
TEW_823DRU_WAN_MAC_OFFSET
, 
w™_mac
);

140 
	`©h79_ªgi°î_m25p80
(
NULL
);

142 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ãw_823dru_Àds_gpio
),

143 
ãw_823dru_Àds_gpio
);

144 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TEW_823DRU_KEYS_POLL_INTERVAL
,

145 
	`ARRAY_SIZE
(
ãw_823dru_gpio_keys
),

146 
ãw_823dru_gpio_keys
);

148 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TEW_823DRU_WMAC_CALDATA_OFFSET
, 
œn_mac
);

150 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
œn_mac
, 0);

151 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
w™_mac
, 0);

154 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ãw_823dru_mdio0_öfo
,

155 
	`ARRAY_SIZE
(
ãw_823dru_mdio0_öfo
));

156 
	`©h79_ªgi°î_mdio
(0, 0x0);

158 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

161 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

162 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

163 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

164 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

166 
	`©h79_ªgi°î_ëh
(0);

169 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

170 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

171 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

172 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

174 
	`©h79_ªgi°î_ëh
(1);

176 
	`©h79_ªgi°î_usb
();

177 
	`©h79_ªgi°î_pci
();

178 
	}
}

180 
MIPS_MACHINE
(
ATH79_MACH_TEW_823DRU
, "TEW-823DRU", "TRENDnet TEW-823DRU",

181 
ãw_823dru_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-mr11u.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#TL_MR11U_GPIO_LED_3G
 27

	)

27 
	#TL_MR11U_GPIO_LED_WLAN
 26

	)

28 
	#TL_MR11U_GPIO_LED_LAN
 17

	)

30 
	#TL_MR11U_GPIO_BTN_WPS
 20

	)

31 
	#TL_MR11U_GPIO_BTN_RESET
 11

	)

33 
	#TL_MR11U_GPIO_USB_POWER
 8

	)

34 
	#TL_MR3040_GPIO_USB_POWER
 18

	)

36 
	#TL_MR3040_V2_GPIO_BTN_SW1
 19

	)

37 
	#TL_MR3040_V2_GPIO_BTN_SW2
 20

	)

39 
	#TL_MR11U_KEYS_POLL_INTERVAL
 20

	)

40 
	#TL_MR11U_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_MR11U_KEYS_POLL_INTERVAL
)

	)

42 c⁄° *
	gé_mr11u_∑π_¥obes
[] = {

44 
NULL
,

47 
Êash_∂©f‹m_d©a
 
	gé_mr11u_Êash_d©a
 = {

48 .
∑π_¥obes
 = 
é_mr11u_∑π_¥obes
,

51 
gpio_Àd
 
	gé_mr11u_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "tp-link:green:3g",

54 .
	ggpio
 = 
TL_MR11U_GPIO_LED_3G
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:green:wlan",

59 .
	ggpio
 = 
TL_MR11U_GPIO_LED_WLAN
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "tp-link:green:lan",

64 .
	ggpio
 = 
TL_MR11U_GPIO_LED_LAN
,

65 .
	ga˘ive_low
 = 1,

69 
gpio_keys_buâ⁄
 
	gé_mr11u_gpio_keys
[] 
	g__öôd©a
 = {

71 .
desc
 = "reset",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_RESTART
,

74 .
	gdeboun˚_öãrvÆ
 = 
TL_MR11U_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
TL_MR11U_GPIO_BTN_RESET
,

76 .
	ga˘ive_low
 = 0,

79 .
	gdesc
 = "wps",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_WPS_BUTTON
,

82 .
	gdeboun˚_öãrvÆ
 = 
TL_MR11U_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
TL_MR11U_GPIO_BTN_WPS
,

84 .
	ga˘ive_low
 = 0,

88 
gpio_keys_buâ⁄
 
	gé_mr3040_v2_gpio_keys
[] 
	g__öôd©a
 = {

90 .
desc
 = "reset",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
KEY_RESTART
,

93 .
	gdeboun˚_öãrvÆ
 = 
TL_MR11U_KEYS_DEBOUNCE_INTERVAL
,

94 .
	ggpio
 = 
TL_MR11U_GPIO_BTN_RESET
,

95 .
	ga˘ive_low
 = 0,

98 .
	gdesc
 = "sw1",

99 .
	gty≥
 = 
EV_SW
,

100 .
	gcode
 = 
BTN_0
,

101 .
	gdeboun˚_öãrvÆ
 = 
TL_MR11U_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 
TL_MR3040_V2_GPIO_BTN_SW1
,

103 .
	ga˘ive_low
 = 0,

106 .
	gdesc
 = "sw2",

107 .
	gty≥
 = 
EV_SW
,

108 .
	gcode
 = 
BTN_1
,

109 .
	gdeboun˚_öãrvÆ
 = 
TL_MR11U_KEYS_DEBOUNCE_INTERVAL
,

110 .
	ggpio
 = 
TL_MR3040_V2_GPIO_BTN_SW2
,

111 .
	ga˘ive_low
 = 0,

115 
__öô
 
	$comm⁄_£tup
()

117 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

118 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

121 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

122 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
);

125 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

127 
	`©h79_ªgi°î_m25p80
(&
é_mr11u_Êash_d©a
);

128 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr11u_Àds_gpio
),

129 
é_mr11u_Àds_gpio
);

131 
	`©h79_ªgi°î_usb
();

133 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

135 
	`©h79_ªgi°î_mdio
(0, 0x0);

136 
	`©h79_ªgi°î_ëh
(0);

138 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

139 
	}
}

141 
__öô
 
	$é_mr11u_£tup
()

143 
	`comm⁄_£tup
();

145 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR11U_KEYS_POLL_INTERVAL
,

146 
	`ARRAY_SIZE
(
é_mr11u_gpio_keys
),

147 
é_mr11u_gpio_keys
);

148 
	`gpio_ªque°_⁄e
(
TL_MR11U_GPIO_USB_POWER
,

149 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

151 
	}
}

153 
MIPS_MACHINE
(
ATH79_MACH_TL_MR11U
, "TL-MR11U", "TP-LINK TL-MR11U",

154 
é_mr11u_£tup
);

156 
__öô
 
	$é_mr3040_£tup
()

158 
	`comm⁄_£tup
();

160 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR11U_KEYS_POLL_INTERVAL
,

161 1, 
é_mr11u_gpio_keys
);

162 
	`gpio_ªque°_⁄e
(
TL_MR3040_GPIO_USB_POWER
,

163 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

165 
	}
}

167 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3040
, "TL-MR3040", "TP-LINK TL-MR3040",

168 
é_mr3040_£tup
);

170 
__öô
 
	$é_mr3040_v2_£tup
()

172 
	`comm⁄_£tup
();

174 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR11U_KEYS_POLL_INTERVAL
,

175 
	`ARRAY_SIZE
(
é_mr3040_v2_gpio_keys
),

176 
é_mr3040_v2_gpio_keys
);

177 
	`gpio_ªque°_⁄e
(
TL_MR3040_GPIO_USB_POWER
,

178 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

180 
	}
}

182 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3040_V2
, "TL-MR3040-v2", "TP-LINK TL-MR3040 v2",

183 
é_mr3040_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-mr13u.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#TL_MR13U_GPIO_LED_SYSTEM
 27

	)

26 
	#TL_MR13U_GPIO_BTN_RESET
 11

	)

27 
	#TL_MR13U_GPIO_BTN_SW1
 6

	)

28 
	#TL_MR13U_GPIO_BTN_SW2
 7

	)

30 
	#TL_MR13U_GPIO_USB_POWER
 18

	)

32 
	#TL_MR13U_KEYS_POLL_INTERVAL
 20

	)

33 
	#TL_MR13U_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_MR13U_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	gé_mr13u_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gé_mr13u_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
é_mr13u_∑π_¥obes
,

44 
gpio_Àd
 
	gé_mr13u_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "tp-link:blue:system",

47 .
	ggpio
 = 
TL_MR13U_GPIO_LED_SYSTEM
,

48 .
	ga˘ive_low
 = 0,

52 
gpio_keys_buâ⁄
 
	gé_mr13u_gpio_keys
[] 
	g__öôd©a
 = {

54 .
desc
 = "reset",

55 .
	gty≥
 = 
EV_KEY
,

56 .
	gcode
 = 
KEY_RESTART
,

57 .
	gdeboun˚_öãrvÆ
 = 
TL_MR13U_KEYS_DEBOUNCE_INTERVAL
,

58 .
	ggpio
 = 
TL_MR13U_GPIO_BTN_RESET
,

59 .
	ga˘ive_low
 = 0,

62 .
	gdesc
 = "sw1",

63 .
	gty≥
 = 
EV_KEY
,

64 .
	gcode
 = 
BTN_0
,

65 .
	gdeboun˚_öãrvÆ
 = 
TL_MR13U_KEYS_DEBOUNCE_INTERVAL
,

66 .
	ggpio
 = 
TL_MR13U_GPIO_BTN_SW1
,

67 .
	ga˘ive_low
 = 0,

70 .
	gdesc
 = "sw2",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
BTN_1
,

73 .
	gdeboun˚_öãrvÆ
 = 
TL_MR13U_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
TL_MR13U_GPIO_BTN_SW2
,

75 .
	ga˘ive_low
 = 0,

79 
__öô
 
	$é_mr13u_£tup
()

81 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

82 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

85 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

87 
	`©h79_ªgi°î_m25p80
(&
é_mr13u_Êash_d©a
);

88 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr13u_Àds_gpio
),

89 
é_mr13u_Àds_gpio
);

90 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR13U_KEYS_POLL_INTERVAL
,

91 
	`ARRAY_SIZE
(
é_mr13u_gpio_keys
),

92 
é_mr13u_gpio_keys
);

94 
	`gpio_ªque°_⁄e
(
TL_MR13U_GPIO_USB_POWER
,

95 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

97 
	`©h79_ªgi°î_usb
();

99 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

101 
	`©h79_ªgi°î_mdio
(0, 0x0);

102 
	`©h79_ªgi°î_ëh
(0);

103 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

104 
	}
}

106 
MIPS_MACHINE
(
ATH79_MACH_TL_MR13U
, "TL-MR13U", "TP-LINK TL-MR13U v1",

107 
é_mr13u_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3020.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TL_MR3020_GPIO_LED_3G
 27

	)

26 
	#TL_MR3020_GPIO_LED_WLAN
 0

	)

27 
	#TL_MR3020_GPIO_LED_LAN
 17

	)

28 
	#TL_MR3020_GPIO_LED_WPS
 26

	)

30 
	#TL_MR3020_GPIO_BTN_WPS
 11

	)

31 
	#TL_MR3020_GPIO_BTN_SW1
 18

	)

32 
	#TL_MR3020_GPIO_BTN_SW2
 20

	)

34 
	#TL_MR3020_GPIO_USB_POWER
 8

	)

36 
	#TL_MR3020_KEYS_POLL_INTERVAL
 20

	)

37 
	#TL_MR3020_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_MR3020_KEYS_POLL_INTERVAL
)

	)

39 c⁄° *
	gé_mr3020_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	gé_mr3020_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
é_mr3020_∑π_¥obes
,

48 
gpio_Àd
 
	gé_mr3020_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tp-link:green:3g",

51 .
	ggpio
 = 
TL_MR3020_GPIO_LED_3G
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "tp-link:green:wlan",

56 .
	ggpio
 = 
TL_MR3020_GPIO_LED_WLAN
,

57 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "tp-link:green:lan",

61 .
	ggpio
 = 
TL_MR3020_GPIO_LED_LAN
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "tp-link:green:wps",

66 .
	ggpio
 = 
TL_MR3020_GPIO_LED_WPS
,

67 .
	ga˘ive_low
 = 1,

71 
gpio_keys_buâ⁄
 
	gé_mr3020_gpio_keys
[] 
	g__öôd©a
 = {

73 .
desc
 = "wps",

74 .
	gty≥
 = 
EV_KEY
,

75 .
	gcode
 = 
KEY_WPS_BUTTON
,

76 .
	gdeboun˚_öãrvÆ
 = 
TL_MR3020_KEYS_DEBOUNCE_INTERVAL
,

77 .
	ggpio
 = 
TL_MR3020_GPIO_BTN_WPS
,

78 .
	ga˘ive_low
 = 0,

81 .
	gdesc
 = "sw1",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
BTN_0
,

84 .
	gdeboun˚_öãrvÆ
 = 
TL_MR3020_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
TL_MR3020_GPIO_BTN_SW1
,

86 .
	ga˘ive_low
 = 0,

89 .
	gdesc
 = "sw2",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
BTN_1
,

92 .
	gdeboun˚_öãrvÆ
 = 
TL_MR3020_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
TL_MR3020_GPIO_BTN_SW2
,

94 .
	ga˘ive_low
 = 0,

98 
__öô
 
	$é_mr3020_£tup
()

100 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

101 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

104 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

106 
	`©h79_ªgi°î_m25p80
(&
é_mr3020_Êash_d©a
);

107 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr3020_Àds_gpio
),

108 
é_mr3020_Àds_gpio
);

109 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR3020_KEYS_POLL_INTERVAL
,

110 
	`ARRAY_SIZE
(
é_mr3020_gpio_keys
),

111 
é_mr3020_gpio_keys
);

113 
	`gpio_ªque°_⁄e
(
TL_MR3020_GPIO_USB_POWER
,

114 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

116 
	`©h79_ªgi°î_usb
();

118 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

120 
	`©h79_ªgi°î_mdio
(0, 0x0);

121 
	`©h79_ªgi°î_ëh
(0);

122 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3020
, "TL-MR3020", "TP-LINK TL-MR3020",

126 
é_mr3020_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3x20.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-≠9x-pci.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"machty≥s.h
"

23 
	#TL_MR3X20_GPIO_LED_QSS
 0

	)

24 
	#TL_MR3X20_GPIO_LED_SYSTEM
 1

	)

25 
	#TL_MR3X20_GPIO_LED_3G
 8

	)

27 
	#TL_MR3X20_GPIO_BTN_RESET
 11

	)

28 
	#TL_MR3X20_GPIO_BTN_QSS
 12

	)

30 
	#TL_MR3X20_GPIO_USB_POWER
 6

	)

32 
	#TL_MR3X20_KEYS_POLL_INTERVAL
 20

	)

33 
	#TL_MR3X20_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_MR3X20_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	gé_mr3x20_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gé_mr3x20_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
é_mr3x20_∑π_¥obes
,

44 
gpio_Àd
 
	gé_mr3x20_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "tp-link:green:system",

47 .
	ggpio
 = 
TL_MR3X20_GPIO_LED_SYSTEM
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "tp-link:green:qss",

51 .
	ggpio
 = 
TL_MR3X20_GPIO_LED_QSS
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:3g",

55 .
	ggpio
 = 
TL_MR3X20_GPIO_LED_3G
,

56 .
	ga˘ive_low
 = 1,

60 
gpio_keys_buâ⁄
 
	gé_mr3x20_gpio_keys
[] 
	g__öôd©a
 = {

62 .
desc
 = "reset",

63 .
	gty≥
 = 
EV_KEY
,

64 .
	gcode
 = 
KEY_RESTART
,

65 .
	gdeboun˚_öãrvÆ
 = 
TL_MR3X20_KEYS_DEBOUNCE_INTERVAL
,

66 .
	ggpio
 = 
TL_MR3X20_GPIO_BTN_RESET
,

67 .
	ga˘ive_low
 = 1,

69 .
	gdesc
 = "qss",

70 .
	gty≥
 = 
EV_KEY
,

71 .
	gcode
 = 
KEY_WPS_BUTTON
,

72 .
	gdeboun˚_öãrvÆ
 = 
TL_MR3X20_KEYS_DEBOUNCE_INTERVAL
,

73 .
	ggpio
 = 
TL_MR3X20_GPIO_BTN_QSS
,

74 .
	ga˘ive_low
 = 1,

78 
__öô
 
	$é_≠99_£tup
()

80 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

81 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

83 
	`©h79_ªgi°î_m25p80
(&
é_mr3x20_Êash_d©a
);

85 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_MR3X20_KEYS_POLL_INTERVAL
,

86 
	`ARRAY_SIZE
(
é_mr3x20_gpio_keys
),

87 
é_mr3x20_gpio_keys
);

89 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

90 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

92 
	`©h79_ªgi°î_mdio
(0, 0x0);

95 
	`©h79_ªgi°î_ëh
(1);

97 
	`©h79_ªgi°î_ëh
(0);

99 
	`≠91_pci_öô
(
ì
, 
mac
);

100 
	}
}

102 
__öô
 
	$é_mr3x20_usb_£tup
()

105 
	`gpio_ªque°_⁄e
(
TL_MR3X20_GPIO_USB_POWER
,

106 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

108 
	`©h79_ªgi°î_usb
();

109 
	}
}

111 
__öô
 
	$é_mr3220_£tup
()

113 
	`é_≠99_£tup
();

115 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr3x20_Àds_gpio
),

116 
é_mr3x20_Àds_gpio
);

117 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 1);

118 
	`é_mr3x20_usb_£tup
();

119 
	}
}

121 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3220
, "TL-MR3220", "TP-LINK TL-MR3220",

122 
é_mr3220_£tup
);

124 
__öô
 
	$é_mr3420_£tup
()

126 
	`é_≠99_£tup
();

128 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr3x20_Àds_gpio
),

129 
é_mr3x20_Àds_gpio
);

130 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

131 
	`é_mr3x20_usb_£tup
();

132 
	}
}

134 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3420
, "TL-MR3420", "TP-LINK TL-MR3420",

135 
é_mr3420_£tup
);

137 
__öô
 
	$é_wr841n_v7_£tup
()

139 
	`é_≠99_£tup
();

141 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_mr3x20_Àds_gpio
) - 1,

142 
é_mr3x20_Àds_gpio
);

143 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

144 
	}
}

146 
MIPS_MACHINE
(
ATH79_MACH_TL_WR841N_V7
, "TL-WR841N-v7",

147 "TP-LINK TL-WR841N/ND v7", 
é_wr841n_v7_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-mr6400.c

16 
	~<löux/gpio.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#TL_MR6400_GPIO_LTE_POWER
 4

	)

31 
	#TL_MR6400_GPIO_BTN_RESET
 12

	)

32 
	#TL_MR6400_GPIO_BTN_RFKILL
 14

	)

33 
	#TL_MR6400_GPIO_LED_WAN
 0

	)

34 
	#TL_MR6400_GPIO_LED_4G
 1

	)

35 
	#TL_MR6400_GPIO_LED_WPS
 3

	)

36 
	#TL_MR6400_GPIO_LED_WLAN
 11

	)

37 
	#TL_MR6400_GPIO_LED_POWER
 13

	)

38 
	#TL_MR6400_GPIO_LED_LAN
 16

	)

40 
	#TL_MR6400_KEYS_POLL_INTERVAL
 20

	)

41 
	#TL_MR6400_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_MR6400_KEYS_POLL_INTERVAL
)

	)

43 
	#TL_MR6400_WMAC_CALDATA_OFFSET
 0x1000

	)

45 c⁄° *
	gé_mr6400_∑π_¥obes
[] = {

47 
NULL
,

50 
Êash_∂©f‹m_d©a
 
	gé_mr6400_Êash_d©a
 = {

51 .
∑π_¥obes
 = 
é_mr6400_∑π_¥obes
,

52 .
	gty≥
 = "w25q64",

55 
gpio_Àd
 
	gé_mr6400_Àds_gpio
[] 
	g__öôd©a
 = {

57 .
«me
 = "tp-link:white:wan",

58 .
	ggpio
 = 
TL_MR6400_GPIO_LED_WAN
,

59 .
	ga˘ive_low
 = 0,

62 .
	g«me
 = "tp-link:white:4g",

63 .
	ggpio
 = 
TL_MR6400_GPIO_LED_4G
,

64 .
	ga˘ive_low
 = 0,

67 .
	g«me
 = "tp-link:white:wps",

68 .
	ggpio
 = 
TL_MR6400_GPIO_LED_WPS
,

69 .
	ga˘ive_low
 = 0,

72 .
	g«me
 = "tp-link:white:wlan",

73 .
	ggpio
 = 
TL_MR6400_GPIO_LED_WLAN
,

74 .
	ga˘ive_low
 = 0,

77 .
	g«me
 = "tp-link:white:power",

78 .
	ggpio
 = 
TL_MR6400_GPIO_LED_POWER
,

79 .
	ga˘ive_low
 = 0,

82 .
	g«me
 = "tp-link:white:lan",

83 .
	ggpio
 = 
TL_MR6400_GPIO_LED_LAN
,

84 .
	ga˘ive_low
 = 0,

88 
gpio_keys_buâ⁄
 
	gé_mr6400_gpio_keys
[] 
	g__öôd©a
 = {

90 .
desc
 = "reset",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
KEY_RESTART
,

93 .
	gdeboun˚_öãrvÆ
 = 
TL_MR6400_KEYS_DEBOUNCE_INTERVAL
,

94 .
	ggpio
 = 
TL_MR6400_GPIO_BTN_RESET
,

95 .
	ga˘ive_low
 = 1,

98 .
	gdesc
 = "rfkill",

99 .
	gty≥
 = 
EV_KEY
,

100 .
	gcode
 = 
KEY_RFKILL
,

101 .
	gdeboun˚_öãrvÆ
 = 
TL_MR6400_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 
TL_MR6400_GPIO_BTN_RFKILL
,

103 .
	ga˘ive_low
 = 1,

107 
__öô
 
	$é_mr6400_£tup
()

109 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

110 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

112 
	`©h79_ªgi°î_m25p80
(&
é_mr6400_Êash_d©a
);

114 
	`©h79_ªgi°î_mdio
(0, 0x0);

117 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

118 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(0);

119 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

120 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

121 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

122 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

123 
	`©h79_ªgi°î_ëh
(1);

126 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

127 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

128 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

129 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

130 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

131 
	`©h79_ªgi°î_ëh
(0);

133 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_MR6400_WMAC_CALDATA_OFFSET
, 
mac
);

135 
	`©h79_ªgi°î_Àds_gpio
(-1,

136 
	`ARRAY_SIZE
(
é_mr6400_Àds_gpio
),

137 
é_mr6400_Àds_gpio
);

139 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1,

140 
TL_MR6400_KEYS_POLL_INTERVAL
,

141 
	`ARRAY_SIZE
(
é_mr6400_gpio_keys
),

142 
é_mr6400_gpio_keys
);

144 
	`gpio_ªque°_⁄e
(
TL_MR6400_GPIO_LTE_POWER
,

145 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
 | 
GPIOF_ACTIVE_LOW
,

147 
	`©h79_ªgi°î_usb
();

148 
	}
}

150 
MIPS_MACHINE
(
ATH79_MACH_TL_MR6400
, "TL-MR6400", "TP-LINK TL-MR6400",

151 
é_mr6400_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa701nd-v2.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-usb.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#TL_WA701NDV2_GPIO_LED_WLAN
 0

	)

24 
	#TL_WA701NDV2_GPIO_LED_QSS
 1

	)

25 
	#TL_WA701NDV2_GPIO_LED_LAN
 17

	)

26 
	#TL_WA701NDV2_GPIO_LED_SYSTEM
 27

	)

28 
	#TL_WA701NDV2_GPIO_BTN_RESET
 11

	)

29 
	#TL_WA701NDV2_GPIO_BTN_QSS
 26

	)

31 
	#TL_WA701NDV2_GPIO_USB_POWER
 8

	)

33 
	#TL_WA701NDV2_KEYS_POLL_INTERVAL
 20

	)

34 
	#TL_WA701NDV2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WA701NDV2_KEYS_POLL_INTERVAL
)

	)

36 c⁄° *
	gé_wa701ndv2_∑π_¥obes
[] = {

38 
NULL
,

41 
Êash_∂©f‹m_d©a
 
	gé_wa701ndv2_Êash_d©a
 = {

42 .
∑π_¥obes
 = 
é_wa701ndv2_∑π_¥obes
,

45 
gpio_Àd
 
	gé_wa701ndv2_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "tp-link:green:wlan",

48 .
	ggpio
 = 
TL_WA701NDV2_GPIO_LED_WLAN
,

49 .
	ga˘ive_low
 = 0,

51 .
	g«me
 = "tp-link:green:qss",

52 .
	ggpio
 = 
TL_WA701NDV2_GPIO_LED_QSS
,

53 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "tp-link:green:lan",

56 .
	ggpio
 = 
TL_WA701NDV2_GPIO_LED_LAN
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "tp-link:green:system",

60 .
	ggpio
 = 
TL_WA701NDV2_GPIO_LED_SYSTEM
,

61 .
	ga˘ive_low
 = 1,

65 
gpio_keys_buâ⁄
 
	gé_wa701ndv2_gpio_keys
[] 
	g__öôd©a
 = {

67 .
desc
 = "reset",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
TL_WA701NDV2_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
TL_WA701NDV2_GPIO_BTN_RESET
,

72 .
	ga˘ive_low
 = 0,

74 .
	gdesc
 = "qss",

75 .
	gty≥
 = 
EV_KEY
,

76 .
	gcode
 = 
KEY_WPS_BUTTON
,

77 .
	gdeboun˚_öãrvÆ
 = 
TL_WA701NDV2_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
TL_WA701NDV2_GPIO_BTN_QSS
,

79 .
	ga˘ive_low
 = 0,

84 
__öô
 
	$é_wa701ndv2_£tup
()

86 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

87 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

90 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

92 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa701ndv2_Àds_gpio
),

93 
é_wa701ndv2_Àds_gpio
);

95 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WA701NDV2_KEYS_POLL_INTERVAL
,

96 
	`ARRAY_SIZE
(
é_wa701ndv2_gpio_keys
),

97 
é_wa701ndv2_gpio_keys
);

99 
	`gpio_ªque°_⁄e
(
TL_WA701NDV2_GPIO_USB_POWER
,

100 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

102 
	`©h79_ªgi°î_usb
();

104 
	`©h79_ªgi°î_m25p80
(&
é_wa701ndv2_Êash_d©a
);

105 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

108 
	`©h79_ªgi°î_mdio
(0, 0x0);

109 
	`©h79_ªgi°î_ëh
(0);

110 
	`©h79_ªgi°î_ëh
(1);

112 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

113 
	}
}

115 
MIPS_MACHINE
(
ATH79_MACH_TL_WA701ND_V2
, "TL-WA701ND-v2",

116 "TP-LINK TL-WA701ND v2", 
é_wa701ndv2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa7210n-v2.c

18 
	~<löux/mtd/mtd.h
>

19 
	~<löux/mtd/∑πôi⁄s.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/gpio.h
>

23 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

24 
	~<asm/mach-©h79/©h79.h
>

26 
	~"dev-dß.h
"

27 
	~"dev-ëh.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-m25p80.h
"

31 
	~"dev-wmac.h
"

32 
	~"machty≥s.h
"

33 
	~"pci.h
"

35 
	~"comm⁄.h
"

37 
	#TL_WA7210N_V2_GPIO_BTN_RESET
 11

	)

38 
	#TL_WA7210N_V2_KEYS_POLL_INT
 20

	)

39 
	#TL_WA7210N_V2_KEYS_DEBOUNCE_INT
 (3 * 
TL_WA7210N_V2_KEYS_POLL_INT
)

	)

41 
	#TL_WA7210N_V2_GPIO_LED_LAN
 17

	)

42 
	#TL_WA7210N_V2_GPIO_LED_SIG1
 0

	)

43 
	#TL_WA7210N_V2_GPIO_LED_SIG2
 1

	)

44 
	#TL_WA7210N_V2_GPIO_LED_SIG3
 27

	)

45 
	#TL_WA7210N_V2_GPIO_LED_SIG4
 26

	)

47 
	#TL_WA7210N_V2_GPIO_LNA_EN
 28

	)

49 c⁄° *
	gé_wa7210n_v2_∑π_¥obes
[] = {

51 
NULL
,

54 
gpio_keys_buâ⁄
 
	gé_wa7210n_v2_gpio_keys
[] 
	g__öôd©a
 = {

56 .
desc
 = "reset",

57 .
	gty≥
 = 
EV_KEY
,

58 .
	gcode
 = 
KEY_RESTART
,

59 .
	gdeboun˚_öãrvÆ
 = 
TL_WA7210N_V2_KEYS_DEBOUNCE_INT
,

60 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_BTN_RESET
,

61 .
	ga˘ive_low
 = 0,

65 
gpio_Àd
 
	gé_wa7210n_v2_Àds_gpio
[] 
	g__öôd©a
 = {

67 .
«me
 = "tp-link:green:lan",

68 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_LED_LAN
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "tp-link:green:signal1",

72 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_LED_SIG1
,

73 .
	ga˘ive_low
 = 0,

75 .
	g«me
 = "tp-link:green:signal2",

76 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_LED_SIG2
,

77 .
	ga˘ive_low
 = 0,

79 .
	g«me
 = "tp-link:green:signal3",

80 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_LED_SIG3
,

81 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "tp-link:green:signal4",

84 .
	ggpio
 = 
TL_WA7210N_V2_GPIO_LED_SIG4
,

85 .
	ga˘ive_low
 = 1,

89 
Êash_∂©f‹m_d©a
 
	gé_wa7210n_v2_Êash_d©a
 = {

90 .
∑π_¥obes
 = 
é_wa7210n_v2_∑π_¥obes
,

93 
__öô
 
	$é_wa7210n_v2_£tup
()

95 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

96 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

98 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WA7210N_V2_KEYS_POLL_INT
,

99 
	`ARRAY_SIZE
(
é_wa7210n_v2_gpio_keys
),

100 
é_wa7210n_v2_gpio_keys
);

102 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa7210n_v2_Àds_gpio
),

103 
é_wa7210n_v2_Àds_gpio
);

105 
	`©h79_gpio_fun˘i⁄_íabÀ
(
TL_WA7210N_V2_GPIO_LNA_EN
);

107 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

109 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

110 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

112 
	`©h79_ªgi°î_ëh
(0);

113 
	`©h79_ªgi°î_ëh
(1);

115 
	`©h79_ªgi°î_mdio
(0, 0x0);

117 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

119 
	`©h79_ªgi°î_m25p80
(&
é_wa7210n_v2_Êash_d©a
);

121 
	`©h79_ªgi°î_pci
();

122 
	}
}

124 
MIPS_MACHINE
(
ATH79_MACH_TL_WA7210N_V2
, "TL-WA7210N-v2", "TP-LINK TL-WA7210N v2",

125 
é_wa7210n_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa801nd-v3.c

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

27 
	#TL_WA801NDV3_GPIO_LED_WLAN
 12

	)

28 
	#TL_WA801NDV3_GPIO_LED_SYSTEM
 13

	)

29 
	#TL_WA801NDV3_GPIO_LED_SECURITY_RED
 11

	)

30 
	#TL_WA801NDV3_GPIO_LED_SECURITY_GREEN
 15

	)

31 
	#TL_WA801NDV3_GPIO_LED_LAN
 3

	)

33 
	#TL_WA801NDV3_GPIO_BTN_RESET
 2

	)

34 
	#TL_WA801NDV3_GPIO_BTN_WIFI
 1

	)

36 
	#TL_WA801NDV3_KEYS_POLL_INTERVAL
 20

	)

37 
	#TL_WA801NDV3_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WA801NDV3_KEYS_POLL_INTERVAL
)

	)

39 c⁄° *
	gé_wa801n_v3_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	gé_wa801n_v3_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
é_wa801n_v3_∑π_¥obes
,

48 
gpio_Àd
 
	gé_wa801n_v3_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tp-link:green:system",

51 .
	ggpio
 = 
TL_WA801NDV3_GPIO_LED_SYSTEM
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:lan",

55 .
	ggpio
 = 
TL_WA801NDV3_GPIO_LED_LAN
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:green:wlan",

59 .
	ggpio
 = 
TL_WA801NDV3_GPIO_LED_WLAN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "tp-link:red:security",

63 .
	ggpio
 = 
TL_WA801NDV3_GPIO_LED_SECURITY_RED
,

64 .
	ga˘ive_low
 = 0,

66 .
	g«me
 = "tp-link:green:security",

67 .
	ggpio
 = 
TL_WA801NDV3_GPIO_LED_SECURITY_GREEN
,

68 .
	ga˘ive_low
 = 0,

73 
gpio_keys_buâ⁄
 
	gé_wa801n_v3_gpio_keys
[] 
	g__öôd©a
 = {

75 .
desc
 = "Reset button",

76 .
	gty≥
 = 
EV_KEY
,

77 .
	gcode
 = 
KEY_RESTART
,

78 .
	gdeboun˚_öãrvÆ
 = 
TL_WA801NDV3_KEYS_DEBOUNCE_INTERVAL
,

79 .
	ggpio
 = 
TL_WA801NDV3_GPIO_BTN_RESET
,

80 .
	ga˘ive_low
 = 1,

82 .
	gdesc
 = "WIFI button",

83 .
	gty≥
 = 
EV_KEY
,

84 .
	gcode
 = 
KEY_RFKILL
,

85 .
	gdeboun˚_öãrvÆ
 = 
TL_WA801NDV3_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
TL_WA801NDV3_GPIO_BTN_WIFI
,

87 .
	ga˘ive_low
 = 1,

92 
__öô
 
	$é_≠143_£tup
()

94 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

95 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

96 
u8
 
tmpmac
[
ETH_ALEN
];

98 
	`©h79_ªgi°î_m25p80
(&
é_wa801n_v3_Êash_d©a
);

100 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

102 
	`©h79_ªgi°î_mdio
(0, 0x0);

105 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

106 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

107 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

108 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

109 
	`©h79_ªgi°î_ëh
(1);

112 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

113 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

114 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

115 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

116 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

117 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

118 
	`©h79_ªgi°î_ëh
(0);

120 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

121 
	`©h79_ªgi°î_wmac
(
ì
, 
tmpmac
);

122 
	}
}

124 
__öô
 
	$é_wa801n_v3_£tup
()

126 
	`é_≠143_£tup
();

128 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa801n_v3_Àds_gpio
),

129 
é_wa801n_v3_Àds_gpio
);

131 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WA801NDV3_KEYS_POLL_INTERVAL
,

132 
	`ARRAY_SIZE
(
é_wa801n_v3_gpio_keys
),

133 
é_wa801n_v3_gpio_keys
);

134 
	}
}

136 
MIPS_MACHINE
(
ATH79_MACH_TL_WA801ND_V3
, "TL-WA801ND-v3", "TP-LINK TL-WA801ND v3",

137 
é_wa801n_v3_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa830re-v2.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#TL_WA830REV2_GPIO_LED_WLAN
 13

	)

27 
	#TL_WA830REV2_GPIO_LED_QSS
 15

	)

28 
	#TL_WA830REV2_GPIO_LED_LAN
 18

	)

29 
	#TL_WA830REV2_GPIO_LED_SYSTEM
 14

	)

31 
	#TL_WA830REV2_GPIO_BTN_RESET
 17

	)

32 
	#TL_WA830REV2_GPIO_SW_RFKILL
 16

	)

34 
	#TL_WA830REV2_GPIO_USB_POWER
 4

	)

36 
	#TL_WA830REV2_KEYS_POLL_INTERVAL
 20

	)

37 
	#TL_WA830REV2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WA830REV2_KEYS_POLL_INTERVAL
)

	)

39 c⁄° *
	gé_wa830ª_v2_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	gé_wa830ª_v2_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
é_wa830ª_v2_∑π_¥obes
,

48 
gpio_Àd
 
	gé_wa830ª_v2_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tp-link:green:qss",

51 .
	ggpio
 = 
TL_WA830REV2_GPIO_LED_QSS
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:system",

55 .
	ggpio
 = 
TL_WA830REV2_GPIO_LED_SYSTEM
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:green:lan",

59 .
	ggpio
 = 
TL_WA830REV2_GPIO_LED_LAN
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "tp-link:green:wlan",

63 .
	ggpio
 = 
TL_WA830REV2_GPIO_LED_WLAN
,

64 .
	ga˘ive_low
 = 1,

68 
gpio_keys_buâ⁄
 
	gé_wa830ª_v2_gpio_keys
[] 
	g__öôd©a
 = {

70 .
desc
 = "Reset button",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_RESTART
,

73 .
	gdeboun˚_öãrvÆ
 = 
TL_WA830REV2_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
TL_WA830REV2_GPIO_BTN_RESET
,

75 .
	ga˘ive_low
 = 1,

77 .
	gdesc
 = "RFKILL switch",

78 .
	gty≥
 = 
EV_SW
,

79 .
	gcode
 = 
KEY_RFKILL
,

80 .
	gdeboun˚_öãrvÆ
 = 
TL_WA830REV2_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
TL_WA830REV2_GPIO_SW_RFKILL
,

82 .
	ga˘ive_low
 = 0,

86 
__öô
 
	$é_≠123_£tup
()

88 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

89 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

93 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

94 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

97 
	`©h79_gpio_ouçut_£À˘
(
TL_WA830REV2_GPIO_USB_POWER
,

98 
AR934X_GPIO_OUT_GPIO
);

100 
	`©h79_ªgi°î_m25p80
(&
é_wa830ª_v2_Êash_d©a
);

102 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

104 
	`©h79_ªgi°î_mdio
(1, 0x0);

106 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

109 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

110 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

111 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

112 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

113 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

114 
	`©h79_ªgi°î_ëh
(0);

116 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

117 
	}
}

119 
__öô
 
	$é_wa830ª_v2_£tup
()

121 
	`é_≠123_£tup
();

123 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa830ª_v2_Àds_gpio
) - 1,

124 
é_wa830ª_v2_Àds_gpio
);

126 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WA830REV2_KEYS_POLL_INTERVAL
,

127 
	`ARRAY_SIZE
(
é_wa830ª_v2_gpio_keys
),

128 
é_wa830ª_v2_gpio_keys
);

129 
	}
}

131 
MIPS_MACHINE
(
ATH79_MACH_TL_WA830RE_V2
, "TL-WA830RE-v2", "TP-LINK TL-WA830RE v2",

132 
é_wa830ª_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd-v2.c

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-m25p80.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#TL_WA901ND_V2_GPIO_LED_QSS
 4

	)

24 
	#TL_WA901ND_V2_GPIO_LED_SYSTEM
 2

	)

25 
	#TL_WA901ND_V2_GPIO_LED_WLAN
 9

	)

27 
	#TL_WA901ND_V2_GPIO_BTN_RESET
 3

	)

28 
	#TL_WA901ND_V2_GPIO_BTN_QSS
 7

	)

30 
	#TL_WA901ND_V2_KEYS_POLL_INTERVAL
 20

	)

31 
	#TL_WA901ND_V2_KEYS_DEBOUNCE_INTERVAL
 \

32 (3 * 
TL_WA901ND_V2_KEYS_POLL_INTERVAL
)

	)

34 c⁄° *
	gé_wa901nd_v2_∑π_¥obes
[] = {

36 
NULL
,

39 
Êash_∂©f‹m_d©a
 
	gé_wa901nd_v2_Êash_d©a
 = {

40 .
∑π_¥obes
 = 
é_wa901nd_v2_∑π_¥obes
,

43 
gpio_Àd
 
	gé_wa901nd_v2_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "tp-link:green:system",

46 .
	ggpio
 = 
TL_WA901ND_V2_GPIO_LED_SYSTEM
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "tp-link:green:qss",

50 .
	ggpio
 = 
TL_WA901ND_V2_GPIO_LED_QSS
,

52 .
	g«me
 = "tp-link:green:wlan",

53 .
	ggpio
 = 
TL_WA901ND_V2_GPIO_LED_WLAN
,

54 .
	ga˘ive_low
 = 1,

58 
gpio_keys_buâ⁄
 
	gé_wa901nd_v2_gpio_keys
[] 
	g__öôd©a
 = {

60 .
desc
 = "reset",

61 .
	gty≥
 = 
EV_KEY
,

62 .
	gcode
 = 
KEY_RESTART
,

63 .
	gdeboun˚_öãrvÆ
 = 
TL_WA901ND_V2_KEYS_DEBOUNCE_INTERVAL
,

64 .
	ggpio
 = 
TL_WA901ND_V2_GPIO_BTN_RESET
,

65 .
	ga˘ive_low
 = 1,

67 .
	gdesc
 = "qss",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_WPS_BUTTON
,

70 .
	gdeboun˚_öãrvÆ
 = 
TL_WA901ND_V2_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
TL_WA901ND_V2_GPIO_BTN_QSS
,

72 .
	ga˘ive_low
 = 1,

76 
__öô
 
	$é_wa901nd_v2_£tup
()

78 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

79 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

81 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

83 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

84 
©h79_ëh0_d©a
.
phy_mask
 = 0x00001000;

85 
	`©h79_ªgi°î_mdio
(0, 0x0);

87 
©h79_ëh0_d©a
.
ª£t_bô
 = 
AR71XX_RESET_GE0_MAC
 |

88 
AR71XX_RESET_GE0_PHY
;

89 
	`©h79_ªgi°î_ëh
(0);

91 
	`©h79_ªgi°î_m25p80
(&
é_wa901nd_v2_Êash_d©a
);

93 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa901nd_v2_Àds_gpio
),

94 
é_wa901nd_v2_Àds_gpio
);

96 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WA901ND_V2_KEYS_POLL_INTERVAL
,

97 
	`ARRAY_SIZE
(
é_wa901nd_v2_gpio_keys
),

98 
é_wa901nd_v2_gpio_keys
);

100 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

101 
	}
}

103 
MIPS_MACHINE
(
ATH79_MACH_TL_WA901ND_V2
, "TL-WA901ND-v2",

104 "TP-LINK TL-WA901ND v2", 
é_wa901nd_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd-v4.c

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

27 
	#TL_WA901ND_V4_GPIO_LED_QSS
 3

	)

28 
	#TL_WA901ND_V4_GPIO_LED_LAN
 7

	)

29 
	#TL_WA901ND_V4_GPIO_LED_WLAN
 8

	)

30 
	#TL_WA901ND_V4_GPIO_LED_SYSTEM
 18

	)

32 
	#TL_WA901ND_V4_GPIO_BTN_RESET
 1

	)

34 
	#TL_WA901ND_V4_KEYS_POLL_INTERVAL
 20

	)

35 
	#TL_WA901ND_V4_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WA901ND_V4_KEYS_POLL_INTERVAL
)

	)

38 
gpio_Àd
 
	gTL_WA901ND_V4_Àds_gpio
[] 
	g__öôd©a
 = {

40 .
«me
 = "tp-link:green:qss",

41 .
	ggpio
 = 
TL_WA901ND_V4_GPIO_LED_QSS
,

42 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "tp-link:green:lan",

46 .
	ggpio
 = 
TL_WA901ND_V4_GPIO_LED_LAN
,

47 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "tp-link:green:wlan",

51 .
	ggpio
 = 
TL_WA901ND_V4_GPIO_LED_WLAN
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "tp-link:green:system",

56 .
	ggpio
 = 
TL_WA901ND_V4_GPIO_LED_SYSTEM
,

57 .
	ga˘ive_low
 = 1,

61 
gpio_keys_buâ⁄
 
	gTL_WA901ND_V4_gpio_keys
[] 
	g__öôd©a
 = {

63 .
desc
 = "Reset button",

64 .
	gty≥
 = 
EV_KEY
,

65 .
	gcode
 = 
KEY_RESTART
,

66 .
	gdeboun˚_öãrvÆ
 = 
TL_WA901ND_V4_KEYS_DEBOUNCE_INTERVAL
,

67 .
	ggpio
 = 
TL_WA901ND_V4_GPIO_BTN_RESET
,

68 .
	ga˘ive_low
 = 1,

73 c⁄° *
	gé_wa901nd_v4_∑π_¥obes
[] = {

75 
NULL
,

78 
Êash_∂©f‹m_d©a
 
	gé_wa901nd_v4_Êash_d©a
 = {

79 .
∑π_¥obes
 = 
é_wa901nd_v4_∑π_¥obes
,

83 
__öô
 
	$TL_WA901ND_V4_£tup
()

85 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

86 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

88 
	`©h79_ªgi°î_m25p80
(&
é_wa901nd_v4_Êash_d©a
);

90 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
TL_WA901ND_V4_Àds_gpio
),

91 
TL_WA901ND_V4_Àds_gpio
);

93 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WA901ND_V4_KEYS_POLL_INTERVAL
,

94 
	`ARRAY_SIZE
(
TL_WA901ND_V4_gpio_keys
),

95 
TL_WA901ND_V4_gpio_keys
);

97 
	`©h79_ªgi°î_mdio
(0, 0x0);

99 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

100 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

102 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

104 
	`©h79_ªgi°î_ëh
(0);

105 
	`©h79_ªgi°î_ëh
(1);

107 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

109 
	}
}

111 
MIPS_MACHINE
(
ATH79_MACH_TL_WA901ND_V4
, "TL-WA901ND-v4", "TP-LINK TL-WA901ND v4",

112 
TL_WA901ND_V4_£tup
);

114 
MIPS_MACHINE
(
ATH79_MACH_TL_WA901ND_V5
, "TL-WA901ND-v5", "TP-LINK TL-WA901ND v5",

115 
TL_WA901ND_V4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd.c

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"machty≥s.h
"

23 
	~"pci.h
"

25 
	#TL_WA901ND_GPIO_LED_QSS
 0

	)

26 
	#TL_WA901ND_GPIO_LED_SYSTEM
 1

	)

27 
	#TL_WA901ND_GPIO_LED_LAN
 13

	)

29 
	#TL_WA901ND_GPIO_BTN_RESET
 11

	)

30 
	#TL_WA901ND_GPIO_BTN_QSS
 12

	)

32 
	#TL_WA901ND_KEYS_POLL_INTERVAL
 20

	)

33 
	#TL_WA901ND_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WA901ND_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	gé_wa901nd_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gé_wa901nd_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
é_wa901nd_∑π_¥obes
,

44 
gpio_Àd
 
	gé_wa901nd_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "tp-link:green:lan",

47 .
	ggpio
 = 
TL_WA901ND_GPIO_LED_LAN
,

48 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "tp-link:green:system",

51 .
	ggpio
 = 
TL_WA901ND_GPIO_LED_SYSTEM
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:qss",

55 .
	ggpio
 = 
TL_WA901ND_GPIO_LED_QSS
,

56 .
	ga˘ive_low
 = 1,

60 
gpio_keys_buâ⁄
 
	gé_wa901nd_gpio_keys
[] 
	g__öôd©a
 = {

62 .
desc
 = "reset",

63 .
	gty≥
 = 
EV_KEY
,

64 .
	gcode
 = 
KEY_RESTART
,

65 .
	gdeboun˚_öãrvÆ
 = 
TL_WA901ND_KEYS_DEBOUNCE_INTERVAL
,

66 .
	ggpio
 = 
TL_WA901ND_GPIO_BTN_RESET
,

67 .
	ga˘ive_low
 = 1,

69 .
	gdesc
 = "qss",

70 .
	gty≥
 = 
EV_KEY
,

71 .
	gcode
 = 
KEY_WPS_BUTTON
,

72 .
	gdeboun˚_öãrvÆ
 = 
TL_WA901ND_KEYS_DEBOUNCE_INTERVAL
,

73 .
	ggpio
 = 
TL_WA901ND_GPIO_BTN_QSS
,

74 .
	ga˘ive_low
 = 1,

78 
__öô
 
	$comm⁄_£tup
()

80 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

87 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

88 
	`©h79_ªgi°î_mdio
(0, 0x0);

89 
	`©h79_ªgi°î_ëh
(1);

91 
	`©h79_ªgi°î_m25p80
(&
é_wa901nd_Êash_d©a
);

92 
	}
}

94 
__öô
 
	$é_wa901nd_£tup
()

96 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

97 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

99 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

100 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

101 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

102 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

103 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

105 
	`comm⁄_£tup
();

107 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa901nd_Àds_gpio
),

108 
é_wa901nd_Àds_gpio
);

110 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WA901ND_KEYS_POLL_INTERVAL
,

111 
	`ARRAY_SIZE
(
é_wa901nd_gpio_keys
),

112 
é_wa901nd_gpio_keys
);

114 
	`≠91_pci_öô
(
ì
, 
mac
);

115 
	}
}

117 
MIPS_MACHINE
(
ATH79_MACH_TL_WA901ND
, "TL-WA901ND", "TP-LINK TL-WA901ND",

118 
é_wa901nd_£tup
);

120 
__öô
 
	$é_wa7510n_v1_£tup
()

122 
	`comm⁄_£tup
();

123 
	`©h79_ªgi°î_pci
();

124 
	}
}

126 
MIPS_MACHINE
(
ATH79_MACH_TL_WA7510N_V1
, "TL-WA7510N", "TP-LINK TL-WA7510N v1",

127 
é_wa7510n_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wax50re.c

20 
	~<löux/gpio.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<asm/mach-©h79/©h79.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~"comm⁄.h
"

27 
	~"dev-ëh.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-Àds-gpio.h
"

30 
	~"dev-m25p80.h
"

31 
	~"dev-wmac.h
"

32 
	~"machty≥s.h
"

34 
	#TL_WAX50RE_GPIO_LED_LAN
 20

	)

35 
	#TL_WAX50RE_GPIO_LED_WLAN
 13

	)

36 
	#TL_WAX50RE_GPIO_LED_RE
 15

	)

37 
	#TL_WAX50RE_GPIO_LED_SIGNAL1
 0

	)

38 
	#TL_WAX50RE_GPIO_LED_SIGNAL2
 1

	)

39 
	#TL_WAX50RE_GPIO_LED_SIGNAL3
 2

	)

40 
	#TL_WAX50RE_GPIO_LED_SIGNAL4
 3

	)

41 
	#TL_WAX50RE_GPIO_LED_SIGNAL5
 4

	)

43 
	#TL_WA850RE_V2_GPIO_LED_LAN
 14

	)

44 
	#TL_WA850RE_V2_GPIO_LED_RE
 12

	)

45 
	#TL_WA850RE_V2_GPIO_LED_SIGNAL1
 0

	)

46 
	#TL_WA850RE_V2_GPIO_LED_SIGNAL2
 1

	)

47 
	#TL_WA850RE_V2_GPIO_LED_SIGNAL3
 2

	)

48 
	#TL_WA850RE_V2_GPIO_LED_SIGNAL4
 3

	)

49 
	#TL_WA850RE_V2_GPIO_LED_SIGNAL5
 4

	)

50 
	#TL_WA850RE_V2_GPIO_LED_WLAN
 13

	)

52 
	#TL_WA850RE_V2_GPIO_ENABLE_LEDS
 15

	)

54 
	#TL_WA855REV1_GPIO_LED_RED
 11

	)

55 
	#TL_WA855REV1_GPIO_LED_GREEN
 12

	)

57 
	#TL_WA860RE_GPIO_LED_WLAN_ORANGE
 0

	)

58 
	#TL_WA860RE_GPIO_LED_WLAN_GREEN
 2

	)

59 
	#TL_WA860RE_GPIO_LED_POWER_ORANGE
 12

	)

60 
	#TL_WA860RE_GPIO_LED_POWER_GREEN
 14

	)

61 
	#TL_WA860RE_GPIO_LED_LAN
 20

	)

63 
	#TL_WA801ND_V2_GPIO_LED_LAN
 18

	)

64 
	#TL_WA801ND_V2_GPIO_LED_SYSTEM
 14

	)

66 
	#TL_WAX50RE_GPIO_BTN_RESET
 17

	)

67 
	#TL_WAX50RE_GPIO_BTN_WPS
 16

	)

69 
	#TL_WA860RE_GPIO_BTN_RESET
 17

	)

70 
	#TL_WA860RE_GPIO_BTN_WPS
 16

	)

71 
	#TL_WA860RE_GPIO_BTN_ONOFF
 11

	)

73 
	#TL_WAX50RE_KEYS_POLL_INTERVAL
 20

	)

74 
	#TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WAX50RE_KEYS_POLL_INTERVAL
)

	)

76 c⁄° *
	gé_wax50ª_∑π_¥obes
[] = {

78 
NULL
,

81 
Êash_∂©f‹m_d©a
 
	gé_wax50ª_Êash_d©a
 = {

82 .
∑π_¥obes
 = 
é_wax50ª_∑π_¥obes
,

85 
gpio_Àd
 
	gé_wa750ª_Àds_gpio
[] 
	g__öôd©a
 = {

87 .
«me
 = "tp-link:orange:lan",

88 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_LAN
,

89 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "tp-link:orange:wlan",

92 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_WLAN
,

93 .
	ga˘ive_low
 = 1,

95 .
	g«me
 = "tp-link:orange:re",

96 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_RE
,

97 .
	ga˘ive_low
 = 1,

99 .
	g«me
 = "tp-link:orange:signal1",

100 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL1
,

101 .
	ga˘ive_low
 = 1,

103 .
	g«me
 = "tp-link:orange:signal2",

104 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL2
,

105 .
	ga˘ive_low
 = 1,

107 .
	g«me
 = "tp-link:orange:signal3",

108 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL3
,

109 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "tp-link:orange:signal4",

112 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL4
,

113 .
	ga˘ive_low
 = 1,

115 .
	g«me
 = "tp-link:orange:signal5",

116 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL5
,

117 .
	ga˘ive_low
 = 1,

121 
gpio_Àd
 
	gé_wa850ª_Àds_gpio
[] 
	g__öôd©a
 = {

123 .
«me
 = "tp-link:blue:lan",

124 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_LAN
,

125 .
	ga˘ive_low
 = 1,

127 .
	g«me
 = "tp-link:blue:wlan",

128 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_WLAN
,

129 .
	ga˘ive_low
 = 1,

131 .
	g«me
 = "tp-link:blue:re",

132 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_RE
,

133 .
	ga˘ive_low
 = 1,

135 .
	g«me
 = "tp-link:blue:signal1",

136 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL1
,

137 .
	ga˘ive_low
 = 1,

139 .
	g«me
 = "tp-link:blue:signal2",

140 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL2
,

141 .
	ga˘ive_low
 = 1,

143 .
	g«me
 = "tp-link:blue:signal3",

144 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL3
,

145 .
	ga˘ive_low
 = 1,

147 .
	g«me
 = "tp-link:blue:signal4",

148 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL4
,

149 .
	ga˘ive_low
 = 1,

151 .
	g«me
 = "tp-link:blue:signal5",

152 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_SIGNAL5
,

153 .
	ga˘ive_low
 = 1,

157 
gpio_Àd
 
	gé_wa850ª_v2_Àds_gpio
[] 
	g__öôd©a
 = {

159 .
«me
 = "tp-link:blue:lan",

160 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_LAN
,

161 .
	ga˘ive_low
 = 1,

163 .
	g«me
 = "tp-link:blue:re",

164 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_RE
,

165 .
	ga˘ive_low
 = 1,

167 .
	g«me
 = "tp-link:blue:signal1",

168 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_SIGNAL1
,

169 .
	ga˘ive_low
 = 1,

171 .
	g«me
 = "tp-link:blue:signal2",

172 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_SIGNAL2
,

173 .
	ga˘ive_low
 = 1,

175 .
	g«me
 = "tp-link:blue:signal3",

176 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_SIGNAL3
,

177 .
	ga˘ive_low
 = 1,

179 .
	g«me
 = "tp-link:blue:signal4",

180 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_SIGNAL4
,

181 .
	ga˘ive_low
 = 1,

183 .
	g«me
 = "tp-link:blue:signal5",

184 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_SIGNAL5
,

185 .
	ga˘ive_low
 = 1,

187 .
	g«me
 = "tp-link:blue:wlan",

188 .
	ggpio
 = 
TL_WA850RE_V2_GPIO_LED_WLAN
,

189 .
	ga˘ive_low
 = 1,

193 
gpio_Àd
 
	gé_wa855ª_v1_Àds_gpio
[] 
	g__öôd©a
 = {

195 .
«me
 = "tp-link:green:power",

196 .
	ggpio
 = 
TL_WA855REV1_GPIO_LED_GREEN
,

197 .
	ga˘ive_low
 = 0,

199 .
	g«me
 = "tp-link:red:power",

200 .
	ggpio
 = 
TL_WA855REV1_GPIO_LED_RED
,

201 .
	ga˘ive_low
 = 0,

205 
gpio_Àd
 
	gé_wa860ª_Àds_gpio
[] 
	g__öôd©a
 = {

207 .
«me
 = "tp-link:green:lan",

208 .
	ggpio
 = 
TL_WA860RE_GPIO_LED_LAN
,

209 .
	ga˘ive_low
 = 1,

211 .
	g«me
 = "tp-link:green:power",

212 .
	ggpio
 = 
TL_WA860RE_GPIO_LED_POWER_GREEN
,

213 .
	ga˘ive_low
 = 1,

215 .
	g«me
 = "tp-link:orange:power",

216 .
	ggpio
 = 
TL_WA860RE_GPIO_LED_POWER_ORANGE
,

217 .
	ga˘ive_low
 = 1,

219 .
	g«me
 = "tp-link:green:wlan",

220 .
	ggpio
 = 
TL_WA860RE_GPIO_LED_WLAN_GREEN
,

221 .
	ga˘ive_low
 = 1,

223 .
	g«me
 = "tp-link:orange:wlan",

224 .
	ggpio
 = 
TL_WA860RE_GPIO_LED_WLAN_ORANGE
,

225 .
	ga˘ive_low
 = 1,

230 
gpio_keys_buâ⁄
 
	gé_wax50ª_gpio_keys
[] 
	g__öôd©a
 = {

232 .
desc
 = "Reset button",

233 .
	gty≥
 = 
EV_KEY
,

234 .
	gcode
 = 
KEY_RESTART
,

235 .
	gdeboun˚_öãrvÆ
 = 
TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
,

236 .
	ggpio
 = 
TL_WAX50RE_GPIO_BTN_RESET
,

237 .
	ga˘ive_low
 = 1,

239 .
	gdesc
 = "WPS",

240 .
	gty≥
 = 
EV_KEY
,

241 .
	gcode
 = 
KEY_WPS_BUTTON
,

242 .
	gdeboun˚_öãrvÆ
 = 
TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
,

243 .
	ggpio
 = 
TL_WAX50RE_GPIO_BTN_WPS
,

244 .
	ga˘ive_low
 = 1,

248 
gpio_keys_buâ⁄
 
	gé_wa860ª_gpio_keys
[] 
	g__öôd©a
 = {

250 .
desc
 = "Reset button",

251 .
	gty≥
 = 
EV_KEY
,

252 .
	gcode
 = 
KEY_RESTART
,

253 .
	gdeboun˚_öãrvÆ
 = 
TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
,

254 .
	ggpio
 = 
TL_WA860RE_GPIO_BTN_RESET
,

255 .
	ga˘ive_low
 = 1,

257 .
	gdesc
 = "WPS",

258 .
	gty≥
 = 
EV_KEY
,

259 .
	gcode
 = 
KEY_WPS_BUTTON
,

260 .
	gdeboun˚_öãrvÆ
 = 
TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
,

261 .
	ggpio
 = 
TL_WA860RE_GPIO_BTN_WPS
,

262 .
	ga˘ive_low
 = 1,

264 .
	gdesc
 = "ONOFF",

265 .
	gty≥
 = 
EV_KEY
,

266 .
	gcode
 = 
BTN_1
,

267 .
	gdeboun˚_öãrvÆ
 = 
TL_WAX50RE_KEYS_DEBOUNCE_INTERVAL
,

268 .
	ggpio
 = 
TL_WA860RE_GPIO_BTN_ONOFF
,

269 .
	ga˘ive_low
 = 1,

273 
gpio_Àd
 
	gé_wa801nd_v2_Àds_gpio
[] 
	g__öôd©a
 = {

275 .
«me
 = "tp-link:green:lan",

276 .
	ggpio
 = 
TL_WA801ND_V2_GPIO_LED_LAN
,

277 .
	ga˘ive_low
 = 1,

279 .
	g«me
 = "tp-link:green:wlan",

280 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_WLAN
,

281 .
	ga˘ive_low
 = 1,

283 .
	g«me
 = "tp-link:green:qss",

284 .
	ggpio
 = 
TL_WAX50RE_GPIO_LED_RE
,

285 .
	ga˘ive_low
 = 1,

287 .
	g«me
 = "tp-link:green:system",

288 .
	ggpio
 = 
TL_WA801ND_V2_GPIO_LED_SYSTEM
,

289 .
	ga˘ive_low
 = 1,

293 
__öô
 
	$é_≠123_£tup
()

295 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

296 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

298 
	`©h79_ªgi°î_m25p80
(&
é_wax50ª_Êash_d©a
);

300 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

302 
	`©h79_ªgi°î_mdio
(1, 0x0);

304 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

306 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

307 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

308 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

309 
	`©h79_ªgi°î_ëh
(0);

311 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

312 
	}
}

314 
__öô
 
	$é_≠143_£tup
()

316 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f3c0008);

317 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

318 
u8
 
tmpmac
[
ETH_ALEN
];

320 
	`©h79_ªgi°î_m25p80
(
NULL
);

322 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

324 
	`©h79_ªgi°î_mdio
(0, 0x0);

326 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

327 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

328 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

329 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

330 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

331 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -2);

332 
	`©h79_ªgi°î_ëh
(0);

334 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

335 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

336 
	}
}

338 
__öô
 
	$é_wa750ª_£tup
()

340 
	`é_≠123_£tup
();

341 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa750ª_Àds_gpio
),

342 
é_wa750ª_Àds_gpio
);

344 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

345 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
),

346 
é_wax50ª_gpio_keys
);

347 
	}
}

349 
MIPS_MACHINE
(
ATH79_MACH_TL_WA750RE
, "TL-WA750RE", "TP-LINK TL-WA750RE",

350 
é_wa750ª_£tup
);

352 
__öô
 
	$é_wa801nd_v2_£tup
()

354 
	`é_≠123_£tup
();

355 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa801nd_v2_Àds_gpio
),

356 
é_wa801nd_v2_Àds_gpio
);

358 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

359 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
),

360 
é_wax50ª_gpio_keys
);

361 
	}
}

363 
MIPS_MACHINE
(
ATH79_MACH_TL_WA801ND_V2
, "TL-WA801ND-v2", "TP-LINK TL-WA801ND v2",

364 
é_wa801nd_v2_£tup
);

366 
__öô
 
	$é_wa850ª_£tup
()

368 
	`é_≠123_£tup
();

369 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa850ª_Àds_gpio
),

370 
é_wa850ª_Àds_gpio
);

372 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

373 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
),

374 
é_wax50ª_gpio_keys
);

375 
	}
}

377 
MIPS_MACHINE
(
ATH79_MACH_TL_WA850RE
, "TL-WA850RE", "TP-LINK TL-WA850RE",

378 
é_wa850ª_£tup
);

380 
__öô
 
	$é_wa850ª_v2_£tup
()

382 
	`é_≠143_£tup
();

385 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

386 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

389 
	`gpio_ªque°_⁄e
(
TL_WA850RE_V2_GPIO_ENABLE_LEDS
,

390 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

393 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa850ª_v2_Àds_gpio
),

394 
é_wa850ª_v2_Àds_gpio
);

396 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

397 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
),

398 
é_wax50ª_gpio_keys
);

399 
	}
}

401 
MIPS_MACHINE
(
ATH79_MACH_TL_WA850RE_V2
, "TL-WA850RE-V2",

402 "TP-LINK TL-WA850RE v2", 
é_wa850ª_v2_£tup
);

404 
__öô
 
	$é_wa855ª_v1_£tup
()

406 
	`é_≠143_£tup
();

408 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa855ª_v1_Àds_gpio
),

409 
é_wa855ª_v1_Àds_gpio
);

411 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

412 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
),

413 
é_wax50ª_gpio_keys
);

414 
	}
}

416 
MIPS_MACHINE
(
ATH79_MACH_TL_WA855RE_V1
, "TL-WA855RE-v1", "TP-LINK TL-WA855RE v1",

417 
é_wa855ª_v1_£tup
);

419 
__öô
 
	$é_wa860ª_£tup
()

421 
	`é_≠123_£tup
();

422 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa860ª_Àds_gpio
),

423 
é_wa860ª_Àds_gpio
);

425 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

426 
	`ARRAY_SIZE
(
é_wa860ª_gpio_keys
),

427 
é_wa860ª_gpio_keys
);

428 
	}
}

430 
MIPS_MACHINE
(
ATH79_MACH_TL_WA860RE
, "TL-WA860RE", "TP-LINK TL-WA860RE",

431 
é_wa860ª_£tup
);

433 
__öô
 
	$é_wa901nd_v3_£tup
()

435 
	`é_≠123_£tup
();

436 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wa801nd_v2_Àds_gpio
),

437 
é_wa801nd_v2_Àds_gpio
);

439 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WAX50RE_KEYS_POLL_INTERVAL
,

440 
	`ARRAY_SIZE
(
é_wax50ª_gpio_keys
) - 1,

441 
é_wax50ª_gpio_keys
);

442 
	}
}

444 
MIPS_MACHINE
(
ATH79_MACH_TL_WA901ND_V3
, "TL-WA901ND-v3", "TP-LINK TL-WA901ND v3",

445 
é_wa901nd_v3_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr3320-v2.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#WDR3320_GPIO_LED_WLAN5G
 12

	)

32 
	#WDR3320_GPIO_LED_SYSTEM
 14

	)

33 
	#WDR3320_GPIO_LED_QSS
 15

	)

34 
	#WDR3320_GPIO_LED_WAN
 4

	)

35 
	#WDR3320_GPIO_LED_LAN1
 18

	)

36 
	#WDR3320_GPIO_LED_LAN2
 20

	)

37 
	#WDR3320_GPIO_LED_LAN3
 21

	)

38 
	#WDR3320_GPIO_LED_LAN4
 22

	)

40 
	#WDR3320_GPIO_BTN_RESET
 16

	)

42 
	#WDR3320_KEYS_POLL_INTERVAL
 20

	)

43 
	#WDR3320_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WDR3320_KEYS_POLL_INTERVAL
)

	)

45 
	#WDR3320_WMAC_CALDATA_OFFSET
 0x1000

	)

46 
	#WDR3320_PCIE_CALDATA_OFFSET
 0x5000

	)

48 c⁄° *
	gwdr3320_∑π_¥obes
[] = {

50 
NULL
,

53 
Êash_∂©f‹m_d©a
 
	gwdr3320_Êash_d©a
 = {

54 .
∑π_¥obes
 = 
wdr3320_∑π_¥obes
,

57 
gpio_Àd
 
	gwdr3320_Àds_gpio
[] 
	g__öôd©a
 = {

59 .
«me
 = "tp-link:green:qss",

60 .
	ggpio
 = 
WDR3320_GPIO_LED_QSS
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "tp-link:green:system",

65 .
	ggpio
 = 
WDR3320_GPIO_LED_SYSTEM
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "tp-link:green:wlan5g",

70 .
	ggpio
 = 
WDR3320_GPIO_LED_WLAN5G
,

71 .
	ga˘ive_low
 = 1,

75 
gpio_keys_buâ⁄
 
	gwdr3320_gpio_keys
[] 
	g__öôd©a
 = {

77 .
desc
 = "reset",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_RESTART
,

80 .
	gdeboun˚_öãrvÆ
 = 
WDR3320_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
WDR3320_GPIO_BTN_RESET
,

82 .
	ga˘ive_low
 = 1,

86 
__öô
 
	$wdr3320_£tup
()

88 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

89 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

90 
u8
 
tmpmac
[
ETH_ALEN
];

92 
	`©h79_ªgi°î_m25p80
(&
wdr3320_Êash_d©a
);

93 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wdr3320_Àds_gpio
),

94 
wdr3320_Àds_gpio
);

95 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WDR3320_KEYS_POLL_INTERVAL
,

96 
	`ARRAY_SIZE
(
wdr3320_gpio_keys
),

97 
wdr3320_gpio_keys
);

99 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

100 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WDR3320_WMAC_CALDATA_OFFSET
, 
tmpmac
);

102 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

103 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

104 
	`≠91_pci_öô
(
¨t
 + 
WDR3320_PCIE_CALDATA_OFFSET
, 
tmpmac
);

106 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

108 
	`©h79_ªgi°î_mdio
(1, 0x0);

111 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

114 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

116 
	`©h79_ªgi°î_ëh
(1);

119 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

122 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

123 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

124 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

125 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

126 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

128 
	`©h79_ªgi°î_ëh
(0);

130 
	`©h79_ªgi°î_usb
();

132 
	`©h79_gpio_ouçut_£À˘
(
WDR3320_GPIO_LED_LAN1
,

133 
AR934X_GPIO_OUT_LED_LINK0
);

134 
	`©h79_gpio_ouçut_£À˘
(
WDR3320_GPIO_LED_LAN2
,

135 
AR934X_GPIO_OUT_LED_LINK1
);

136 
	`©h79_gpio_ouçut_£À˘
(
WDR3320_GPIO_LED_LAN3
,

137 
AR934X_GPIO_OUT_LED_LINK2
);

138 
	`©h79_gpio_ouçut_£À˘
(
WDR3320_GPIO_LED_LAN4
,

139 
AR934X_GPIO_OUT_LED_LINK3
);

140 
	`©h79_gpio_ouçut_£À˘
(
WDR3320_GPIO_LED_WAN
,

141 
AR934X_GPIO_OUT_LED_LINK4
);

142 
	}
}

144 
MIPS_MACHINE
(
ATH79_MACH_TL_WDR3320_V2
, "TL-WDR3320-v2",

146 
wdr3320_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr3500.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<löux/¨8216_∂©f‹m.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-m25p80.h
"

27 
	~"dev-•i.h
"

28 
	~"dev-usb.h
"

29 
	~"dev-wmac.h
"

30 
	~"machty≥s.h
"

32 
	#WDR3500_GPIO_LED_USB
 11

	)

33 
	#WDR3500_GPIO_LED_WLAN2G
 13

	)

34 
	#WDR3500_GPIO_LED_SYSTEM
 14

	)

35 
	#WDR3500_GPIO_LED_QSS
 15

	)

36 
	#WDR3500_GPIO_LED_WAN
 18

	)

37 
	#WDR3500_GPIO_LED_LAN1
 19

	)

38 
	#WDR3500_GPIO_LED_LAN2
 20

	)

39 
	#WDR3500_GPIO_LED_LAN3
 21

	)

40 
	#WDR3500_GPIO_LED_LAN4
 22

	)

42 
	#WDR3500_GPIO_BTN_WPS
 16

	)

43 
	#WDR3500_GPIO_BTN_RFKILL
 17

	)

45 
	#WDR3500_GPIO_USB_POWER
 12

	)

47 
	#WDR3500_KEYS_POLL_INTERVAL
 20

	)

48 
	#WDR3500_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WDR3500_KEYS_POLL_INTERVAL
)

	)

50 
	#WDR3500_MAC0_OFFSET
 0

	)

51 
	#WDR3500_MAC1_OFFSET
 6

	)

52 
	#WDR3500_WMAC_CALDATA_OFFSET
 0x1000

	)

53 
	#WDR3500_PCIE_CALDATA_OFFSET
 0x5000

	)

55 c⁄° *
	gwdr3500_∑π_¥obes
[] = {

57 
NULL
,

60 
Êash_∂©f‹m_d©a
 
	gwdr3500_Êash_d©a
 = {

61 .
∑π_¥obes
 = 
wdr3500_∑π_¥obes
,

64 
gpio_Àd
 
	gwdr3500_Àds_gpio
[] 
	g__öôd©a
 = {

66 .
«me
 = "tp-link:green:qss",

67 .
	ggpio
 = 
WDR3500_GPIO_LED_QSS
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "tp-link:green:system",

72 .
	ggpio
 = 
WDR3500_GPIO_LED_SYSTEM
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "tp-link:green:usb",

77 .
	ggpio
 = 
WDR3500_GPIO_LED_USB
,

78 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "tp-link:green:wlan2g",

82 .
	ggpio
 = 
WDR3500_GPIO_LED_WLAN2G
,

83 .
	ga˘ive_low
 = 1,

87 
gpio_keys_buâ⁄
 
	gwdr3500_gpio_keys
[] 
	g__öôd©a
 = {

89 .
desc
 = "QSS button",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_WPS_BUTTON
,

92 .
	gdeboun˚_öãrvÆ
 = 
WDR3500_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
WDR3500_GPIO_BTN_WPS
,

94 .
	ga˘ive_low
 = 1,

97 .
	gdesc
 = "RFKILL switch",

98 .
	gty≥
 = 
EV_SW
,

99 .
	gcode
 = 
KEY_RFKILL
,

100 .
	gdeboun˚_öãrvÆ
 = 
WDR3500_KEYS_DEBOUNCE_INTERVAL
,

101 .
	ggpio
 = 
WDR3500_GPIO_BTN_RFKILL
,

106 
__öô
 
	$wdr3500_£tup
()

108 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

109 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

110 
u8
 
tmpmac
[
ETH_ALEN
];

112 
	`©h79_ªgi°î_m25p80
(&
wdr3500_Êash_d©a
);

113 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wdr3500_Àds_gpio
),

114 
wdr3500_Àds_gpio
);

115 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WDR3500_KEYS_POLL_INTERVAL
,

116 
	`ARRAY_SIZE
(
wdr3500_gpio_keys
),

117 
wdr3500_gpio_keys
);

119 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

120 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WDR3500_WMAC_CALDATA_OFFSET
, 
tmpmac
);

122 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 1);

123 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

124 
	`≠91_pci_öô
(
¨t
 + 
WDR3500_PCIE_CALDATA_OFFSET
, 
tmpmac
);

126 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

128 
	`©h79_ªgi°î_mdio
(1, 0x0);

131 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

134 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

136 
	`©h79_ªgi°î_ëh
(1);

139 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 2);

142 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

143 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

144 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

145 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

146 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

148 
	`©h79_ªgi°î_ëh
(0);

150 
	`gpio_ªque°_⁄e
(
WDR3500_GPIO_USB_POWER
,

151 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

153 
	`©h79_ªgi°î_usb
();

155 
	`©h79_gpio_ouçut_£À˘
(
WDR3500_GPIO_LED_LAN1
,

156 
AR934X_GPIO_OUT_LED_LINK3
);

157 
	`©h79_gpio_ouçut_£À˘
(
WDR3500_GPIO_LED_LAN2
,

158 
AR934X_GPIO_OUT_LED_LINK2
);

159 
	`©h79_gpio_ouçut_£À˘
(
WDR3500_GPIO_LED_LAN3
,

160 
AR934X_GPIO_OUT_LED_LINK1
);

161 
	`©h79_gpio_ouçut_£À˘
(
WDR3500_GPIO_LED_LAN4
,

162 
AR934X_GPIO_OUT_LED_LINK0
);

163 
	`©h79_gpio_ouçut_£À˘
(
WDR3500_GPIO_LED_WAN
,

164 
AR934X_GPIO_OUT_LED_LINK4
);

165 
	}
}

167 
MIPS_MACHINE
(
ATH79_MACH_TL_WDR3500
, "TL-WDR3500",

169 
wdr3500_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr4300.c

11 
	~<löux/pci.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"machty≥s.h
"

31 
	#WDR4300_GPIO_LED_USB1
 11

	)

32 
	#WDR4300_GPIO_LED_USB2
 12

	)

33 
	#WDR4300_GPIO_LED_WLAN2G
 13

	)

34 
	#WDR4300_GPIO_LED_SYSTEM
 14

	)

35 
	#WDR4300_GPIO_LED_QSS
 15

	)

37 
	#WDR4300_GPIO_BTN_WPS
 16

	)

38 
	#WDR4300_GPIO_BTN_RFKILL
 17

	)

40 
	#WDR4300_GPIO_EXTERNAL_LNA0
 18

	)

41 
	#WDR4300_GPIO_EXTERNAL_LNA1
 19

	)

43 
	#WDR4300_GPIO_USB1_POWER
 22

	)

44 
	#WDR4300_GPIO_USB2_POWER
 21

	)

46 
	#WDR4300_KEYS_POLL_INTERVAL
 20

	)

47 
	#WDR4300_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WDR4300_KEYS_POLL_INTERVAL
)

	)

49 
	#WDR4300_MAC0_OFFSET
 0

	)

50 
	#WDR4300_MAC1_OFFSET
 6

	)

51 
	#WDR4300_WMAC_CALDATA_OFFSET
 0x1000

	)

52 
	#WDR4300_PCIE_CALDATA_OFFSET
 0x5000

	)

54 c⁄° *
	gwdr4300_∑π_¥obes
[] = {

56 
NULL
,

59 
Êash_∂©f‹m_d©a
 
	gwdr4300_Êash_d©a
 = {

60 .
∑π_¥obes
 = 
wdr4300_∑π_¥obes
,

63 
gpio_Àd
 
	gwdr4300_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "tp-link:blue:qss",

66 .
	ggpio
 = 
WDR4300_GPIO_LED_QSS
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "tp-link:blue:system",

71 .
	ggpio
 = 
WDR4300_GPIO_LED_SYSTEM
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "tp-link:green:usb1",

76 .
	ggpio
 = 
WDR4300_GPIO_LED_USB1
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "tp-link:green:usb2",

81 .
	ggpio
 = 
WDR4300_GPIO_LED_USB2
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "tp-link:blue:wlan2g",

86 .
	ggpio
 = 
WDR4300_GPIO_LED_WLAN2G
,

87 .
	ga˘ive_low
 = 1,

91 
gpio_keys_buâ⁄
 
	gwdr4300_gpio_keys
[] 
	g__öôd©a
 = {

93 .
desc
 = "QSS button",

94 .
	gty≥
 = 
EV_KEY
,

95 .
	gcode
 = 
KEY_WPS_BUTTON
,

96 .
	gdeboun˚_öãrvÆ
 = 
WDR4300_KEYS_DEBOUNCE_INTERVAL
,

97 .
	ggpio
 = 
WDR4300_GPIO_BTN_WPS
,

98 .
	ga˘ive_low
 = 1,

101 .
	gdesc
 = "RFKILL switch",

102 .
	gty≥
 = 
EV_SW
,

103 .
	gcode
 = 
KEY_RFKILL
,

104 .
	gdeboun˚_öãrvÆ
 = 
WDR4300_KEYS_DEBOUNCE_INTERVAL
,

105 .
	ggpio
 = 
WDR4300_GPIO_BTN_RFKILL
,

106 .
	ga˘ive_low
 = 1,

110 c⁄° 
¨8327_Àd_öfo
 
	gwdr4300_Àds_¨8327
[] = {

111 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "tp-link:blue:wan"),

112 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "tp-link:blue:lan1"),

113 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "tp-link:blue:lan2"),

114 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "tp-link:blue:lan3"),

115 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "tp-link:blue:lan4"),

118 
¨8327_∑d_cfg
 
	gwdr4300_¨8327_∑d0_cfg
 = {

119 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

120 .
	gtx˛k_dñay_í
 = 
åue
,

121 .
	grx˛k_dñay_í
 = 
åue
,

122 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

123 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

126 
¨8327_Àd_cfg
 
	gwdr4300_¨8327_Àd_cfg
 = {

127 .
Àd_˘æ0
 = 0xc737c737,

128 .
	gÀd_˘æ1
 = 0x00000000,

129 .
	gÀd_˘æ2
 = 0x00000000,

130 .
	gÀd_˘æ3
 = 0x0030c300,

131 .
	g›í_døö
 = 
Ál£
,

134 
¨8327_∂©f‹m_d©a
 
	gwdr4300_¨8327_d©a
 = {

135 .
∑d0_cfg
 = &
wdr4300_¨8327_∑d0_cfg
,

136 .
	gp‹t0_cfg
 = {

137 .
f‹˚_lök
 = 1,

138 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

139 .
	gdu∂ex
 = 1,

140 .
	gtx∑u£
 = 1,

141 .
	grx∑u£
 = 1,

143 .
	gÀd_cfg
 = &
wdr4300_¨8327_Àd_cfg
,

144 .
	gnum_Àds
 = 
ARRAY_SIZE
(
wdr4300_Àds_¨8327
),

145 .
	gÀds
 = 
wdr4300_Àds_¨8327
,

148 
mdio_bﬂrd_öfo
 
	gwdr4300_mdio0_öfo
[] = {

150 .
bus_id
 = "ag71xx-mdio.0",

151 .
	gmdio_addr
 = 0,

152 .
	g∂©f‹m_d©a
 = &
wdr4300_¨8327_d©a
,

156 
__öô
 
	$wdr4300_£tup
()

158 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

159 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

160 
u8
 
tmpmac
[
ETH_ALEN
];

162 
	`©h79_ªgi°î_m25p80
(&
wdr4300_Êash_d©a
);

163 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wdr4300_Àds_gpio
),

164 
wdr4300_Àds_gpio
);

165 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WDR4300_KEYS_POLL_INTERVAL
,

166 
	`ARRAY_SIZE
(
wdr4300_gpio_keys
),

167 
wdr4300_gpio_keys
);

169 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
WDR4300_GPIO_EXTERNAL_LNA0
);

170 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
WDR4300_GPIO_EXTERNAL_LNA1
);

172 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

173 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WDR4300_WMAC_CALDATA_OFFSET
, 
tmpmac
);

175 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

176 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 0);

177 
	`≠91_pci_öô
(
¨t
 + 
WDR4300_PCIE_CALDATA_OFFSET
, 
tmpmac
);

179 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

181 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wdr4300_mdio0_öfo
,

182 
	`ARRAY_SIZE
(
wdr4300_mdio0_öfo
));

184 
	`©h79_ªgi°î_mdio
(0, 0x0);

186 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -2);

189 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

190 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

191 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

192 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

193 
	`©h79_ªgi°î_ëh
(0);

195 
	`gpio_ªque°_⁄e
(
WDR4300_GPIO_USB1_POWER
,

196 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

198 
	`gpio_ªque°_⁄e
(
WDR4300_GPIO_USB2_POWER
,

199 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

201 
	`©h79_ªgi°î_usb
();

202 
	}
}

204 
MIPS_MACHINE
(
ATH79_MACH_TL_WDR4300
, "TL-WDR4300",

206 
wdr4300_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr6500-v2.c

11 
	~<löux/pci.h
>

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

27 
	~"pci.h
"

29 
	#TL_WDR6500_V2_GPIO_LED_SYS
 21

	)

30 
	#TL_WDR6500_V2_GPIO_LED_WAN
 18

	)

31 
	#TL_WDR6500_V2_GPIO_LED_LAN1
 17

	)

32 
	#TL_WDR6500_V2_GPIO_LED_LAN2
 16

	)

33 
	#TL_WDR6500_V2_GPIO_LED_LAN3
 15

	)

34 
	#TL_WDR6500_V2_GPIO_LED_LAN4
 14

	)

36 
	#TL_WDR6500_V2_GPIO_BTN_RESET
 1

	)

38 
	#TL_WDR6500_V2_KEYS_POLL_INTERVAL
 20

	)

39 
	#TL_WDR6500_V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WDR6500_V2_KEYS_POLL_INTERVAL
)

	)

41 
	#TL_WDR6500_V2_WMAC_CALDATA_OFFSET
 0x1000

	)

42 
	#TL_WDR6500_V2_PCIE_CALDATA_OFFSET
 0x5000

	)

44 c⁄° *
	gé_wdr6500_v2_∑π_¥obes
[] = {

46 
NULL
,

49 
Êash_∂©f‹m_d©a
 
	gé_wdr6500_v2_Êash_d©a
 = {

50 .
∑π_¥obes
 = 
é_wdr6500_v2_∑π_¥obes
,

53 
gpio_Àd
 
	gé_wdr6500_v2_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "tp-link:green:lan1",

56 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_LAN1
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "tp-link:green:lan2",

60 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_LAN2
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "tp-link:green:lan3",

64 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_LAN3
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "tp-link:green:lan4",

68 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_LAN4
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "tp-link:green:wan",

72 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_WAN
,

73 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "tp-link:white:system",

76 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_LED_SYS
,

77 .
	ga˘ive_low
 = 0,

81 
gpio_keys_buâ⁄
 
	gé_wdr6500_v2_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "Reset button",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_RESTART
,

86 .
	gdeboun˚_öãrvÆ
 = 
TL_WDR6500_V2_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
TL_WDR6500_V2_GPIO_BTN_RESET
,

88 .
	ga˘ive_low
 = 1,

93 
__öô
 
	$é_≠151_£tup
()

95 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f00fc00);

96 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

97 
u8
 
tmpmac
[
ETH_ALEN
];

99 
	`©h79_ªgi°î_m25p80
(&
é_wdr6500_v2_Êash_d©a
);

101 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

103 
	`©h79_ªgi°î_mdio
(1, 0x0);

106 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

107 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

108 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

109 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

110 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

111 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

112 
	`©h79_ªgi°î_ëh
(0);

115 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

116 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

117 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

118 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

119 
	`©h79_ªgi°î_ëh
(1);

121 
	`©h79_öô_mac
(
tmpmac
, 
mac
, -1);

122 
	`©h79_ªgi°î_wmac
(
ì
 + 
TL_WDR6500_V2_WMAC_CALDATA_OFFSET
, 
tmpmac
);

124 
	`©h79_ªgi°î_pci
();

126 
	`©h79_ªgi°î_usb
();

127 
	}
}

129 
__öô
 
	$é_wdr6500_v2_£tup
()

131 
	`é_≠151_£tup
();

133 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wdr6500_v2_Àds_gpio
),

134 
é_wdr6500_v2_Àds_gpio
);

136 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WDR6500_V2_KEYS_POLL_INTERVAL
,

137 
	`ARRAY_SIZE
(
é_wdr6500_v2_gpio_keys
),

138 
é_wdr6500_v2_gpio_keys
);

139 
	}
}

141 
MIPS_MACHINE
(
ATH79_MACH_TL_WDR6500_V2
, "TL-WDR6500-v2", "TP-LINK TL-WDR6500 v2",

142 
é_wdr6500_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wpa8630.c

10 
	~<löux/∂©f‹m_devi˚.h
>

11 
	~<löux/©h9k_∂©f‹m.h
>

12 
	~<löux/¨8216_∂©f‹m.h
>

13 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~"comm⁄.h
"

16 
	~"dev-m25p80.h
"

17 
	~"machty≥s.h
"

18 
	~"pci.h
"

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-•i.h
"

24 
	~"dev-wmac.h
"

26 
	#TL_WPA8630_KEYS_POLL_INTERVAL
 20

	)

27 
	#TL_WPA8630_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WPA8630_KEYS_POLL_INTERVAL
)

	)

29 
	#TL_WPA8630_GPIO_LED_POWER
 1

	)

30 
	#TL_WPA8630_GPIO_LED_LAN
 5

	)

31 
	#TL_WPA8630_GPIO_LED_WLAN
 19

	)

32 
	#TL_WPA8630_GPIO_LED_WLAN5
 21

	)

34 
	#TL_WPA8630_GPIO_BTN_RESET
 2

	)

35 
	#TL_WPA8630_GPIO_BTN_RFKILL
 8

	)

36 
	#TL_WPA8630_GPIO_BTN_LED
 6

	)

37 
	#TL_WPA8630_GPIO_BTN_PAIR
 7

	)

39 
	#TL_WPA8630_MAC0_OFFSET
 0x0000

	)

40 
	#TL_WPA8630_WMAC_CALDATA_OFFSET
 0x1000

	)

41 
	#TL_WPA8630_PCI_CALDATA_OFFSET
 0x5000

	)

43 c⁄° *
	gé_w∑8630_∑π_¥obes
[] = {

45 
NULL
,

48 
Êash_∂©f‹m_d©a
 
	gé_w∑8630_Êash_d©a
 = {

49 .
∑π_¥obes
 = 
é_w∑8630_∑π_¥obes
,

50 .
	gty≥
 = "s25fl064k",

53 
gpio_Àd
 
	gé_w∑8630_Àds_gpio
[] 
	g__öôd©a
 = {

55 .
«me
 = "tl-wpa8630:green:power",

56 .
	ggpio
 = 
TL_WPA8630_GPIO_LED_POWER
,

57 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "tl-wpa8630:green:lan",

61 .
	ggpio
 = 
TL_WPA8630_GPIO_LED_LAN
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "tl-wpa8630:green:wlan",

66 .
	ggpio
 = 
TL_WPA8630_GPIO_LED_WLAN
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "tl-wpa8630:green:wlan5",

71 .
	ggpio
 = 
TL_WPA8630_GPIO_LED_WLAN5
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gé_w∑8630_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "Reset button",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_RESTART
,

81 .
	gdeboun˚_öãrvÆ
 = 
TL_WPA8630_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
TL_WPA8630_GPIO_BTN_RESET
,

83 .
	ga˘ive_low
 = 1,

86 .
	gdesc
 = "RFKILL button",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RFKILL
,

89 .
	gdeboun˚_öãrvÆ
 = 
TL_WPA8630_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
TL_WPA8630_GPIO_BTN_RFKILL
,

91 .
	ga˘ive_low
 = 1,

94 .
	gdesc
 = "LED",

95 .
	gty≥
 = 
EV_KEY
,

96 .
	gcode
 = 
BTN_0
,

97 .
	gdeboun˚_öãrvÆ
 = 
TL_WPA8630_KEYS_DEBOUNCE_INTERVAL
,

98 .
	ggpio
 = 
TL_WPA8630_GPIO_BTN_LED
,

99 .
	ga˘ive_low
 = 1,

102 .
	gdesc
 = "Pair",

103 .
	gty≥
 = 
EV_KEY
,

104 .
	gcode
 = 
BTN_1
,

105 .
	gdeboun˚_öãrvÆ
 = 
TL_WPA8630_KEYS_DEBOUNCE_INTERVAL
,

106 .
	ggpio
 = 
TL_WPA8630_GPIO_BTN_PAIR
,

107 .
	ga˘ive_low
 = 1,

112 
¨8327_∑d_cfg
 
	gé_w∑8630_qˇ8337_∑d0_cfg
 = {

113 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

114 .
	gsgmii_dñay_í
 = 
åue
,

117 
¨8327_∂©f‹m_d©a
 
	gé_w∑8630_qˇ8337_d©a
 = {

118 .
∑d0_cfg
 = &
é_w∑8630_qˇ8337_∑d0_cfg
,

119 .
	gp‹t0_cfg
 = {

120 .
f‹˚_lök
 = 1,

121 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

122 .
	gdu∂ex
 = 1,

123 .
	gtx∑u£
 = 1,

124 .
	grx∑u£
 = 1,

128 
mdio_bﬂrd_öfo
 
	gé_w∑8630_mdio0_öfo
[] = {

130 .
bus_id
 = "ag71xx-mdio.0",

131 .
	gmdio_addr
 = 0,

132 .
	g∂©f‹m_d©a
 = &
é_w∑8630_qˇ8337_d©a
,

136 
__öô
 
	$é_w∑8630_£tup
()

138 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f00fc00);

139 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

141 
	`©h79_ªgi°î_m25p80
(&
é_w∑8630_Êash_d©a
);

143 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

144 
¨t
 + 
TL_WPA8630_MAC0_OFFSET
, 0);

146 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_mdio0_devi˚
);

148 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
é_w∑8630_mdio0_öfo
,

149 
	`ARRAY_SIZE
(
é_w∑8630_mdio0_öfo
));

152 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

153 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

154 
©h79_ëh0_d©a
.
phy_mask
 = ~
	`BIT
(4);

155 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

157 
	`©h79_ªgi°î_ëh
(0);

159 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_WPA8630_WMAC_CALDATA_OFFSET
, 
mac
);

161 
	`≠91_pci_öô
(
¨t
 + 
TL_WPA8630_PCI_CALDATA_OFFSET
, 
NULL
);

163 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_w∑8630_Àds_gpio
),

164 
é_w∑8630_Àds_gpio
);

166 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WPA8630_KEYS_POLL_INTERVAL
,

167 
	`ARRAY_SIZE
(
é_w∑8630_gpio_keys
),

168 
é_w∑8630_gpio_keys
);

169 
	}
}

171 
MIPS_MACHINE
(
ATH79_MACH_TL_WPA8630
, "TL-WPA8630", "TP-LINK TL-WPA8630",

172 
é_w∑8630_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1041n-v2.c

12 
	~<löux/pci.h
>

13 
	~<löux/phy.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/©h9k_∂©f‹m.h
>

16 
	~<löux/¨8216_∂©f‹m.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#TL_WR1041NV2_GPIO_BTN_RESET
 14

	)

31 
	#TL_WR1041NV2_GPIO_LED_WPS
 13

	)

32 
	#TL_WR1041NV2_GPIO_LED_WLAN
 11

	)

34 
	#TL_WR1041NV2_GPIO_LED_SYSTEM
 12

	)

36 
	#TL_WR1041NV2_KEYS_POLL_INTERVAL
 20

	)

37 
	#TL_WR1041NV2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR1041NV2_KEYS_POLL_INTERVAL
)

	)

39 
	#TL_WR1041NV2_PCIE_CALDATA_OFFSET
 0x5000

	)

41 c⁄° *
	gé_wr1041nv2_∑π_¥obes
[] = {

43 
NULL
,

46 
Êash_∂©f‹m_d©a
 
	gé_wr1041nv2_Êash_d©a
 = {

47 .
∑π_¥obes
 = 
é_wr1041nv2_∑π_¥obes
,

50 
gpio_Àd
 
	gé_wr1041nv2_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "tp-link:green:system",

53 .
	ggpio
 = 
TL_WR1041NV2_GPIO_LED_SYSTEM
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "tp-link:green:wps",

57 .
	ggpio
 = 
TL_WR1041NV2_GPIO_LED_WPS
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "tp-link:green:wlan",

61 .
	ggpio
 = 
TL_WR1041NV2_GPIO_LED_WLAN
,

62 .
	ga˘ive_low
 = 1,

66 
gpio_keys_buâ⁄
 
	gé_wr1041nv2_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "reset",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_RESTART
,

71 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1041NV2_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
TL_WR1041NV2_GPIO_BTN_RESET
,

73 .
	ga˘ive_low
 = 1,

77 c⁄° 
¨8327_Àd_öfo
 
	gé_wr1041n_Àds_¨8327
[] = {

78 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "tp-link:green:wan"),

79 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "tp-link:green:lan1"),

80 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "tp-link:green:lan2"),

81 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "tp-link:green:lan3"),

82 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "tp-link:green:lan4"),

85 
¨8327_Àd_cfg
 
	gwr1041n_v2_¨8327_Àd_cfg
 = {

86 .
Àd_˘æ0
 = 0xcf35cf35,

87 .
	gÀd_˘æ1
 = 0xcf35cf35,

88 .
	gÀd_˘æ2
 = 0xcf35cf35,

89 .
	gÀd_˘æ3
 = 0x03ffff00,

90 .
	g›í_døö
 = 
åue
,

93 
¨8327_∑d_cfg
 
	gdb120_¨8327_∑d0_cfg
 = {

94 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

95 .
	gtx˛k_dñay_í
 = 
åue
,

96 .
	grx˛k_dñay_í
 = 
åue
,

97 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

98 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

101 
¨8327_∂©f‹m_d©a
 
	gdb120_¨8327_d©a
 = {

102 .
∑d0_cfg
 = &
db120_¨8327_∑d0_cfg
,

103 .
	gp‹t0_cfg
 = {

104 .
f‹˚_lök
 = 1,

105 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

106 .
	gdu∂ex
 = 1,

107 .
	gtx∑u£
 = 1,

108 .
	grx∑u£
 = 1,

110 .
	gÀd_cfg
 = &
wr1041n_v2_¨8327_Àd_cfg
,

111 .
	gnum_Àds
 = 
ARRAY_SIZE
(
é_wr1041n_Àds_¨8327
),

112 .
	gÀds
 = 
é_wr1041n_Àds_¨8327


115 
mdio_bﬂrd_öfo
 
	gdb120_mdio0_öfo
[] = {

117 .
bus_id
 = "ag71xx-mdio.0",

118 .
	gmdio_addr
 = 0,

119 .
	g∂©f‹m_d©a
 = &
db120_¨8327_d©a
,

123 
__öô
 
	$é_wr1041nv2_£tup
()

125 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

126 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

128 
	`©h79_ªgi°î_m25p80
(&
é_wr1041nv2_Êash_d©a
);

130 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr1041nv2_Àds_gpio
),

131 
é_wr1041nv2_Àds_gpio
);

132 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR1041NV2_KEYS_POLL_INTERVAL
,

133 
	`ARRAY_SIZE
(
é_wr1041nv2_gpio_keys
),

134 
é_wr1041nv2_gpio_keys
);

135 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

137 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

138 
AR934X_ETH_CFG_SW_ONLY_MODE
);

140 
	`©h79_ªgi°î_mdio
(1, 0x0);

141 
	`©h79_ªgi°î_mdio
(0, 0x0);

143 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

145 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
db120_mdio0_öfo
,

146 
	`ARRAY_SIZE
(
db120_mdio0_öfo
));

149 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

150 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

151 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

152 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

153 
	`©h79_ªgi°î_ëh
(0);

154 
	}
}

156 
MIPS_MACHINE
(
ATH79_MACH_TL_WR1041N_V2
, "TL-WR1041N-v2",

157 "TP-LINK TL-WR1041N v2", 
é_wr1041nv2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd-v2.c

23 
	~<löux/phy.h
>

24 
	~<löux/gpio.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/¨8216_∂©f‹m.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~"comm⁄.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-gpio-buâ⁄s.h
"

33 
	~"dev-Àds-gpio.h
"

34 
	~"dev-m25p80.h
"

35 
	~"dev-•i.h
"

36 
	~"dev-usb.h
"

37 
	~"dev-wmac.h
"

38 
	~"machty≥s.h
"

40 
	#TL_WR1043_V2_GPIO_LED_WLAN
 12

	)

41 
	#TL_WR1043_V2_GPIO_LED_USB
 15

	)

42 
	#TL_WR1043_V2_GPIO_LED_WPS
 18

	)

43 
	#TL_WR1043_V2_GPIO_LED_SYSTEM
 19

	)

45 
	#TL_WR1043_V2_GPIO_BTN_RESET
 16

	)

46 
	#TL_WR1043_V2_GPIO_BTN_RFKILL
 17

	)

48 
	#TL_WR1043_V2_GPIO_USB_POWER
 21

	)

50 
	#TL_WR1043_V2_KEYS_POLL_INTERVAL
 20

	)

51 
	#TL_WR1043_V2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR1043_V2_KEYS_POLL_INTERVAL
)

	)

53 
	#TL_WR1043_V2_WMAC_CALDATA_OFFSET
 0x1000

	)

55 c⁄° *
	gwr1043nd_v2_∑π_¥obes
[] = {

57 
NULL
,

60 
Êash_∂©f‹m_d©a
 
	gwr1043nd_v2_Êash_d©a
 = {

61 .
∑π_¥obes
 = 
wr1043nd_v2_∑π_¥obes
,

64 
gpio_Àd
 
	gé_wr1043_v2_Àds_gpio
[] 
	g__öôd©a
 = {

66 .
«me
 = "tp-link:green:wps",

67 .
	ggpio
 = 
TL_WR1043_V2_GPIO_LED_WPS
,

68 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "tp-link:green:system",

72 .
	ggpio
 = 
TL_WR1043_V2_GPIO_LED_SYSTEM
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "tp-link:green:wlan",

77 .
	ggpio
 = 
TL_WR1043_V2_GPIO_LED_WLAN
,

78 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "tp-link:green:usb",

82 .
	ggpio
 = 
TL_WR1043_V2_GPIO_LED_USB
,

83 .
	ga˘ive_low
 = 1,

87 
gpio_keys_buâ⁄
 
	gé_wr1043_v2_gpio_keys
[] 
	g__öôd©a
 = {

89 .
desc
 = "Reset button",

90 .
	gty≥
 = 
EV_KEY
,

91 .
	gcode
 = 
KEY_RESTART
,

92 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043_V2_KEYS_DEBOUNCE_INTERVAL
,

93 .
	ggpio
 = 
TL_WR1043_V2_GPIO_BTN_RESET
,

94 .
	ga˘ive_low
 = 1,

97 .
	gdesc
 = "RFKILL button",

98 .
	gty≥
 = 
EV_KEY
,

99 .
	gcode
 = 
KEY_RFKILL
,

100 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043_V2_KEYS_DEBOUNCE_INTERVAL
,

101 .
	ggpio
 = 
TL_WR1043_V2_GPIO_BTN_RFKILL
,

102 .
	ga˘ive_low
 = 1,

106 c⁄° 
¨8327_Àd_öfo
 
	gé_wr1043_Àds_¨8327
[] = {

107 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "tp-link:green:lan4"),

108 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "tp-link:green:lan3"),

109 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "tp-link:green:lan2"),

110 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "tp-link:green:lan1"),

111 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "tp-link:green:wan"),

115 
¨8327_∑d_cfg
 
	gwr1043nd_v2_¨8327_∑d0_cfg
 = {

116 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

117 .
	gsgmii_dñay_í
 = 
åue
,

121 
¨8327_∑d_cfg
 
	gwr1043nd_v2_¨8327_∑d6_cfg
 = {

122 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

123 .
	gtx˛k_dñay_í
 = 
åue
,

124 .
	grx˛k_dñay_í
 = 
åue
,

125 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

126 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

129 
¨8327_Àd_cfg
 
	gwr1043nd_v2_¨8327_Àd_cfg
 = {

130 .
Àd_˘æ0
 = 0xcc35cc35,

131 .
	gÀd_˘æ1
 = 0xca35ca35,

132 .
	gÀd_˘æ2
 = 0xc935c935,

133 .
	gÀd_˘æ3
 = 0x03ffff00,

134 .
	g›í_døö
 = 
åue
,

137 
¨8327_∂©f‹m_d©a
 
	gwr1043nd_v2_¨8327_d©a
 = {

138 .
∑d0_cfg
 = &
wr1043nd_v2_¨8327_∑d0_cfg
,

139 .
	g∑d6_cfg
 = &
wr1043nd_v2_¨8327_∑d6_cfg
,

140 .
	gp‹t0_cfg
 = {

141 .
f‹˚_lök
 = 1,

142 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

143 .
	gdu∂ex
 = 1,

144 .
	gtx∑u£
 = 1,

145 .
	grx∑u£
 = 1,

147 .
	gp‹t6_cfg
 = {

148 .
f‹˚_lök
 = 1,

149 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

150 .
	gdu∂ex
 = 1,

151 .
	gtx∑u£
 = 1,

152 .
	grx∑u£
 = 1,

154 .
	gÀd_cfg
 = &
wr1043nd_v2_¨8327_Àd_cfg
,

155 .
	gnum_Àds
 = 
ARRAY_SIZE
(
é_wr1043_Àds_¨8327
),

156 .
	gÀds
 = 
é_wr1043_Àds_¨8327
,

159 
mdio_bﬂrd_öfo
 
	gwr1043nd_v2_mdio0_öfo
[] = {

161 .
bus_id
 = "ag71xx-mdio.0",

162 .
	gmdio_addr
 = 0,

163 .
	g∂©f‹m_d©a
 = &
wr1043nd_v2_¨8327_d©a
,

167 
__öô
 
	$é_wr1043nd_v2_£tup
()

169 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

170 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

172 
	`©h79_ªgi°î_m25p80
(&
wr1043nd_v2_Êash_d©a
);

174 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr1043_v2_Àds_gpio
),

175 
é_wr1043_v2_Àds_gpio
);

176 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR1043_V2_KEYS_POLL_INTERVAL
,

177 
	`ARRAY_SIZE
(
é_wr1043_v2_gpio_keys
),

178 
é_wr1043_v2_gpio_keys
);

180 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_WR1043_V2_WMAC_CALDATA_OFFSET
, 
mac
);

182 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wr1043nd_v2_mdio0_öfo
,

183 
	`ARRAY_SIZE
(
wr1043nd_v2_mdio0_öfo
));

184 
	`©h79_ªgi°î_mdio
(0, 0x0);

186 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

189 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

190 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

191 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

192 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

194 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

195 
	`©h79_ªgi°î_ëh
(0);

198 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

199 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

200 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

201 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

203 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

204 
	`©h79_ªgi°î_ëh
(1);

206 
	`©h79_ªgi°î_usb
();

208 
	`gpio_ªque°_⁄e
(
TL_WR1043_V2_GPIO_USB_POWER
,

209 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

211 
	}
}

213 
MIPS_MACHINE
(
ATH79_MACH_TL_WR1043ND_V2
, "TL-WR1043ND-v2",

214 "TP-LINK TL-WR1043ND v2", 
é_wr1043nd_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd-v4.c

18 
	~<löux/gpio.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/pci.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/©h9k_∂©f‹m.h
>

24 
	~<asm/mach-©h79/©h79.h
>

25 
	~<asm/mach-©h79/úq.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

28 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

29 
	~<löux/¨8216_∂©f‹m.h
>

31 
	~"comm⁄.h
"

32 
	~"dev-≠9x-pci.h
"

33 
	~"dev-ëh.h
"

34 
	~"dev-gpio-buâ⁄s.h
"

35 
	~"dev-Àds-gpio.h
"

36 
	~"dev-m25p80.h
"

37 
	~"dev-wmac.h
"

38 
	~"dev-usb.h
"

39 
	~"machty≥s.h
"

40 
	~"nvøm.h
"

42 
	#TL_WR1043_V4_GPIO_BTN_RESET
 2

	)

43 
	#TL_WR1043_V4_GPIO_BTN_RFKILL
 5

	)

45 
	#TL_WR1043_V4_GPIO_LED_WLAN
 19

	)

46 
	#TL_WR1043_V4_GPIO_LED_USB
 7

	)

47 
	#TL_WR1043_V4_GPIO_LED_WPS
 1

	)

48 
	#TL_WR1043_V4_GPIO_LED_SYSTEM
 6

	)

50 
	#TL_WR1043_V4_GPIO_USB_POWER
 8

	)

52 
	#TL_WR1043_V4_GPIO_LED_INET
 15

	)

53 
	#TL_WR1043_V4_GPIO_LED_WAN
 16

	)

54 
	#TL_WR1043_V4_GPIO_LED_LAN1
 9

	)

55 
	#TL_WR1043_V4_GPIO_LED_LAN2
 14

	)

56 
	#TL_WR1043_V4_GPIO_LED_LAN3
 21

	)

57 
	#TL_WR1043_V4_GPIO_LED_LAN4
 20

	)

59 
	#TL_WR1043_V4_KEYS_POLL_INTERVAL
 20

	)

60 
	#TL_WR1043_V4_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR1043_V4_KEYS_POLL_INTERVAL
)

	)

62 
	#TL_WR1043_V4_MAC_LOCATION
 0x1ff50008

	)

64 
	#TL_WR1043_V4_EEPROM_ADDR
 0x1fff0000

	)

65 
	#TL_WR1043_V4_WMAC_CALDATA_OFFSET
 0x1000

	)

67 
	#TL_WR1043_V5_MAC_LOCATION
 0x1ff00008

	)

69 
gpio_Àd
 
	gé_wr1043nd_v4_Àds_gpio
[] 
	g__öôd©a
 = {

71 .
«me
 = "tp-link:green:wps",

72 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WPS
,

73 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "tp-link:green:system",

77 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_SYSTEM
,

78 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "tp-link:green:wlan",

82 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WLAN
,

83 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "tp-link:green:usb",

87 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_USB
,

88 .
	ga˘ive_low
 = 1,

91 .
	g«me
 = "tp-link:green:wan",

92 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_INET
,

93 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "tp-link:orange:wan",

97 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WAN
,

98 .
	ga˘ive_low
 = 1,

101 .
	g«me
 = "tp-link:green:lan1",

102 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN1
,

103 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "tp-link:green:lan2",

107 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN2
,

108 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "tp-link:green:lan3",

112 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN3
,

113 .
	ga˘ive_low
 = 1,

116 .
	g«me
 = "tp-link:green:lan4",

117 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN4
,

118 .
	ga˘ive_low
 = 1,

122 
gpio_keys_buâ⁄
 
	gé_wr1043nd_v4_gpio_keys
[] 
	g__öôd©a
 = {

124 .
desc
 = "Reset button",

125 .
	gty≥
 = 
EV_KEY
,

126 .
	gcode
 = 
KEY_RESTART
,

127 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043_V4_KEYS_DEBOUNCE_INTERVAL
,

128 .
	ggpio
 = 
TL_WR1043_V4_GPIO_BTN_RESET
,

129 .
	ga˘ive_low
 = 1,

132 .
	gdesc
 = "RFKILL button",

133 .
	gty≥
 = 
EV_KEY
,

134 .
	gcode
 = 
KEY_RFKILL
,

135 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043_V4_KEYS_DEBOUNCE_INTERVAL
,

136 .
	ggpio
 = 
TL_WR1043_V4_GPIO_BTN_RFKILL
,

137 .
	ga˘ive_low
 = 1,

141 
¨8327_∑d_cfg
 
	gé_wr1043nd_v4_¨8327_∑d0_cfg
 = {

142 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

143 .
	gsgmii_dñay_í
 = 
åue
,

146 
¨8327_∂©f‹m_d©a
 
	gé_wr1043nd_v4_¨8327_d©a
 = {

147 .
∑d0_cfg
 = &
é_wr1043nd_v4_¨8327_∑d0_cfg
,

148 .
	gp‹t0_cfg
 = {

149 .
f‹˚_lök
 = 1,

150 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

151 .
	gdu∂ex
 = 1,

152 .
	gtx∑u£
 = 1,

153 .
	grx∑u£
 = 1,

157 
mdio_bﬂrd_öfo
 
	gé_wr1043nd_v4_mdio0_öfo
[] = {

159 .
bus_id
 = "ag71xx-mdio.0",

160 .
	gmdio_addr
 = 0,

161 .
	g∂©f‹m_d©a
 = &
é_wr1043nd_v4_¨8327_d©a
,

165 
__öô
 
	$é_wr1043nd_v4_£tup
()

167 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
TL_WR1043_V4_MAC_LOCATION
);

168 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(
TL_WR1043_V4_EEPROM_ADDR
);

170 
	`©h79_ªgi°î_m25p80
(
NULL
);

172 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

173 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

174 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

175 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

177 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
é_wr1043nd_v4_mdio0_öfo
,

178 
	`ARRAY_SIZE
(
é_wr1043nd_v4_mdio0_öfo
));

180 
	`©h79_ªgi°î_usb
();

181 
	`©h79_ªgi°î_mdio
(0, 0);

182 
	`©h79_ªgi°î_ëh
(0);

184 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
TL_WR1043_V4_WMAC_CALDATA_OFFSET
, 
mac
);

186 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr1043nd_v4_Àds_gpio
),

187 
é_wr1043nd_v4_Àds_gpio
);

189 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR1043_V4_KEYS_POLL_INTERVAL
,

190 
	`ARRAY_SIZE
(
é_wr1043nd_v4_gpio_keys
),

191 
é_wr1043nd_v4_gpio_keys
);

193 
	`gpio_ªque°_⁄e
(
TL_WR1043_V4_GPIO_USB_POWER
,

194 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

196 
	}
}

198 
MIPS_MACHINE
(
ATH79_MACH_TL_WR1043ND_V4
, "TL-WR1043ND-v4",

199 "TP-LINK TL-WR1043ND v4", 
é_wr1043nd_v4_£tup
);

201 
gpio_Àd
 
	gé_wr1043n_v5_Àds_gpio
[] 
	g__öôd©a
 = {

203 .
«me
 = "tp-link:green:wps",

204 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WPS
,

205 .
	ga˘ive_low
 = 1,

208 .
	g«me
 = "tp-link:green:system",

209 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_SYSTEM
,

210 .
	ga˘ive_low
 = 1,

213 .
	g«me
 = "tp-link:green:wlan",

214 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WLAN
,

215 .
	ga˘ive_low
 = 1,

218 .
	g«me
 = "tp-link:green:wan",

219 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_INET
,

220 .
	ga˘ive_low
 = 1,

223 .
	g«me
 = "tp-link:orange:wan",

224 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_WAN
,

225 .
	ga˘ive_low
 = 1,

228 .
	g«me
 = "tp-link:green:lan1",

229 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN1
,

230 .
	ga˘ive_low
 = 1,

233 .
	g«me
 = "tp-link:green:lan2",

234 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN2
,

235 .
	ga˘ive_low
 = 1,

238 .
	g«me
 = "tp-link:green:lan3",

239 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN3
,

240 .
	ga˘ive_low
 = 1,

243 .
	g«me
 = "tp-link:green:lan4",

244 .
	ggpio
 = 
TL_WR1043_V4_GPIO_LED_LAN4
,

245 .
	ga˘ive_low
 = 1,

251 
__öô
 
	$é_wr1043nv5_£tup
()

253 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
TL_WR1043_V4_EEPROM_ADDR
);

254 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
TL_WR1043_V5_MAC_LOCATION
);

256 
	`©h79_ªgi°î_m25p80
(
NULL
);

258 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr1043n_v5_Àds_gpio
),

259 
é_wr1043n_v5_Àds_gpio
);

260 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR1043_V4_KEYS_POLL_INTERVAL
,

261 
	`ARRAY_SIZE
(
é_wr1043nd_v4_gpio_keys
),

262 
é_wr1043nd_v4_gpio_keys
);

264 
	`∂©f‹m_devi˚_ªgi°î
(&
©h79_mdio0_devi˚
);

266 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
é_wr1043nd_v4_mdio0_öfo
,

267 
	`ARRAY_SIZE
(
é_wr1043nd_v4_mdio0_öfo
));

269 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_WR1043_V4_WMAC_CALDATA_OFFSET
, 
mac
);

271 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

274 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

275 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

276 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

277 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

278 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

279 
	`©h79_ªgi°î_ëh
(0);

280 
	}
}

282 
MIPS_MACHINE
(
ATH79_MACH_TL_WR1043N_V5
, "TL-WR1043N-v5", "TP-LINK TL-WR1043N v5",

283 
é_wr1043nv5_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd.c

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/πl8366.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"dev-ëh.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TL_WR1043ND_GPIO_LED_USB
 1

	)

26 
	#TL_WR1043ND_GPIO_LED_SYSTEM
 2

	)

27 
	#TL_WR1043ND_GPIO_LED_QSS
 5

	)

28 
	#TL_WR1043ND_GPIO_LED_WLAN
 9

	)

30 
	#TL_WR1043ND_GPIO_BTN_RESET
 3

	)

31 
	#TL_WR1043ND_GPIO_BTN_QSS
 7

	)

33 
	#TL_WR1043ND_GPIO_RTL8366_SDA
 18

	)

34 
	#TL_WR1043ND_GPIO_RTL8366_SCK
 19

	)

36 
	#TL_WR1043ND_KEYS_POLL_INTERVAL
 20

	)

37 
	#TL_WR1043ND_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR1043ND_KEYS_POLL_INTERVAL
)

	)

39 c⁄° *
	gé_wr1043nd_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	gé_wr1043nd_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
é_wr1043nd_∑π_¥obes
,

48 
gpio_Àd
 
	gé_wr1043nd_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "tp-link:green:usb",

51 .
	ggpio
 = 
TL_WR1043ND_GPIO_LED_USB
,

52 .
	ga˘ive_low
 = 1,

54 .
	g«me
 = "tp-link:green:system",

55 .
	ggpio
 = 
TL_WR1043ND_GPIO_LED_SYSTEM
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:green:qss",

59 .
	ggpio
 = 
TL_WR1043ND_GPIO_LED_QSS
,

60 .
	ga˘ive_low
 = 0,

62 .
	g«me
 = "tp-link:green:wlan",

63 .
	ggpio
 = 
TL_WR1043ND_GPIO_LED_WLAN
,

64 .
	ga˘ive_low
 = 1,

68 
gpio_keys_buâ⁄
 
	gé_wr1043nd_gpio_keys
[] 
	g__öôd©a
 = {

70 .
desc
 = "reset",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_RESTART
,

73 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043ND_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
TL_WR1043ND_GPIO_BTN_RESET
,

75 .
	ga˘ive_low
 = 1,

77 .
	gdesc
 = "qss",

78 .
	gty≥
 = 
EV_KEY
,

79 .
	gcode
 = 
KEY_WPS_BUTTON
,

80 .
	gdeboun˚_öãrvÆ
 = 
TL_WR1043ND_KEYS_DEBOUNCE_INTERVAL
,

81 .
	ggpio
 = 
TL_WR1043ND_GPIO_BTN_QSS
,

82 .
	ga˘ive_low
 = 1,

86 
	$é_wr1043nd_πl8366rb_hw_ª£t
(
πl8366_smi
 *
smi
, 
boﬁ
 
a˘ive
)

88 i‡(
a˘ive
)

89 
	`©h79_devi˚_ª£t_£t
(
AR71XX_RESET_GE0_PHY
);

91 
	`©h79_devi˚_ª£t_˛ór
(
AR71XX_RESET_GE0_PHY
);

92 
	}
}

94 
πl8366_∂©f‹m_d©a
 
	gé_wr1043nd_πl8366rb_d©a
 = {

95 .
gpio_sda
 = 
TL_WR1043ND_GPIO_RTL8366_SDA
,

96 .
	ggpio_sck
 = 
TL_WR1043ND_GPIO_RTL8366_SCK
,

97 .
	ghw_ª£t
 = 
é_wr1043nd_πl8366rb_hw_ª£t
,

100 
∂©f‹m_devi˚
 
	gé_wr1043nd_πl8366rb_devi˚
 = {

101 .
«me
 = 
RTL8366RB_DRIVER_NAME
,

102 .
	gid
 = -1,

103 .
	gdev
 = {

104 .
∂©f‹m_d©a
 = &
é_wr1043nd_πl8366rb_d©a
,

108 
__öô
 
	$é_wr1043nd_£tup
()

110 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

111 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

113 
	`é_wr1043nd_πl8366rb_hw_ª£t
(
NULL
, 
åue
);

115 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

116 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
é_wr1043nd_πl8366rb_devi˚
.
dev
;

117 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

118 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

119 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

120 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x1a000000;

122 
	`©h79_ªgi°î_ëh
(0);

124 
	`©h79_ªgi°î_usb
();

126 
	`©h79_ªgi°î_m25p80
(&
é_wr1043nd_Êash_d©a
);

128 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr1043nd_Àds_gpio
),

129 
é_wr1043nd_Àds_gpio
);

131 
	`∂©f‹m_devi˚_ªgi°î
(&
é_wr1043nd_πl8366rb_devi˚
);

133 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR1043ND_KEYS_POLL_INTERVAL
,

134 
	`ARRAY_SIZE
(
é_wr1043nd_gpio_keys
),

135 
é_wr1043nd_gpio_keys
);

137 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

138 
	}
}

140 
MIPS_MACHINE
(
ATH79_MACH_TL_WR1043ND
, "TL-WR1043ND", "TP-LINK TL-WR1043ND",

141 
é_wr1043nd_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr2543n.c

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/πl8367.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"machty≥s.h
"

24 
	#TL_WR2543N_GPIO_LED_WPS
 0

	)

25 
	#TL_WR2543N_GPIO_LED_USB
 8

	)

28 
	#TL_WR2543N_GPIO_WMAC_LED_WLAN2G
 0

	)

29 
	#TL_WR2543N_GPIO_WMAC_LED_WLAN5G
 1

	)

31 
	#TL_WR2543N_GPIO_BTN_RESET
 11

	)

32 
	#TL_WR2543N_GPIO_BTN_WPS
 12

	)

34 
	#TL_WR2543N_GPIO_RTL8367_SDA
 1

	)

35 
	#TL_WR2543N_GPIO_RTL8367_SCK
 6

	)

37 
	#TL_WR2543N_KEYS_POLL_INTERVAL
 20

	)

38 
	#TL_WR2543N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR2543N_KEYS_POLL_INTERVAL
)

	)

40 c⁄° *
	gé_wr2543n_∑π_¥obes
[] = {

42 
NULL
,

45 
Êash_∂©f‹m_d©a
 
	gé_wr2543n_Êash_d©a
 = {

46 .
∑π_¥obes
 = 
é_wr2543n_∑π_¥obes
,

49 
gpio_Àd
 
	gé_wr2543n_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "tp-link:green:usb",

52 .
	ggpio
 = 
TL_WR2543N_GPIO_LED_USB
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "tp-link:green:wps",

56 .
	ggpio
 = 
TL_WR2543N_GPIO_LED_WPS
,

57 .
	ga˘ive_low
 = 1,

61 
gpio_Àd
 
	gé_wr2543n_wmac_Àds_gpio
[] = {

63 .
«me
 = "tp-link:green:wlan2g",

64 .
	ggpio
 = 
TL_WR2543N_GPIO_WMAC_LED_WLAN2G
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "tp-link:green:wlan5g",

69 .
	ggpio
 = 
TL_WR2543N_GPIO_WMAC_LED_WLAN5G
,

70 .
	ga˘ive_low
 = 1,

74 
gpio_keys_buâ⁄
 
	gé_wr2543n_gpio_keys
[] 
	g__öôd©a
 = {

76 .
desc
 = "reset",

77 .
	gty≥
 = 
EV_KEY
,

78 .
	gcode
 = 
KEY_RESTART
,

79 .
	gdeboun˚_öãrvÆ
 = 
TL_WR2543N_KEYS_DEBOUNCE_INTERVAL
,

80 .
	ggpio
 = 
TL_WR2543N_GPIO_BTN_RESET
,

81 .
	ga˘ive_low
 = 1,

83 .
	gdesc
 = "wps",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_WPS_BUTTON
,

86 .
	gdeboun˚_öãrvÆ
 = 
TL_WR2543N_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
TL_WR2543N_GPIO_BTN_WPS
,

88 .
	ga˘ive_low
 = 1,

92 
πl8367_extif_c⁄fig
 
	gé_wr2543n_πl8367_extif0_cfg
 = {

93 .
mode
 = 
RTL8367_EXTIF_MODE_RGMII
,

94 .
	gtxdñay
 = 1,

95 .
	grxdñay
 = 0,

96 .
	gabûôy
 = {

97 .
f‹˚_mode
 = 1,

98 .
	gtx∑u£
 = 1,

99 .
	grx∑u£
 = 1,

100 .
	glök
 = 1,

101 .
	gdu∂ex
 = 1,

102 .
	g•ìd
 = 
RTL8367_PORT_SPEED_1000
,

106 
πl8367_∂©f‹m_d©a
 
	gé_wr2543n_πl8367_d©a
 = {

107 .
gpio_sda
 = 
TL_WR2543N_GPIO_RTL8367_SDA
,

108 .
	ggpio_sck
 = 
TL_WR2543N_GPIO_RTL8367_SCK
,

109 .
	gextif0_cfg
 = &
é_wr2543n_πl8367_extif0_cfg
,

112 
∂©f‹m_devi˚
 
	gé_wr2543n_πl8367_devi˚
 = {

113 .
«me
 = 
RTL8367_DRIVER_NAME
,

114 .
	gid
 = -1,

115 .
	gdev
 = {

116 .
∂©f‹m_d©a
 = &
é_wr2543n_πl8367_d©a
,

120 
__öô
 
	$é_wr2543n_£tup
()

122 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

123 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

125 
	`©h79_ªgi°î_m25p80
(&
é_wr2543n_Êash_d©a
);

126 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr2543n_Àds_gpio
),

127 
é_wr2543n_Àds_gpio
);

128 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR2543N_KEYS_POLL_INTERVAL
,

129 
	`ARRAY_SIZE
(
é_wr2543n_gpio_keys
),

130 
é_wr2543n_gpio_keys
);

131 
	`©h79_ªgi°î_usb
();

133 
	`≠9x_pci_£tup_wmac_Àds
(0, 
é_wr2543n_wmac_Àds_gpio
,

134 
	`ARRAY_SIZE
(
é_wr2543n_wmac_Àds_gpio
));

135 
	`≠91_pci_öô
(
ì¥om
, 
mac
);

137 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

138 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
é_wr2543n_πl8367_devi˚
.
dev
;

139 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

140 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

141 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

142 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x1a000000;

144 
	`©h79_ªgi°î_ëh
(0);

146 
	`∂©f‹m_devi˚_ªgi°î
(&
é_wr2543n_πl8367_devi˚
);

147 
	}
}

149 
MIPS_MACHINE
(
ATH79_MACH_TL_WR2543N
, "TL-WR2543N", "TP-LINK TL-WR2543N/ND",

150 
é_wr2543n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr703n.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-usb.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#TL_WR703N_GPIO_LED_SYSTEM
 27

	)

25 
	#TL_WR703N_GPIO_BTN_RESET
 11

	)

27 
	#TL_WR703N_GPIO_USB_POWER
 8

	)

29 
	#TL_MR10U_GPIO_USB_POWER
 18

	)

31 
	#TL_WR703N_KEYS_POLL_INTERVAL
 20

	)

32 
	#TL_WR703N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR703N_KEYS_POLL_INTERVAL
)

	)

34 c⁄° *
	gé_wr703n_∑π_¥obes
[] = {

36 
NULL
,

39 
Êash_∂©f‹m_d©a
 
	gé_wr703n_Êash_d©a
 = {

40 .
∑π_¥obes
 = 
é_wr703n_∑π_¥obes
,

43 
gpio_Àd
 
	gé_wr703n_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "tp-link:blue:system",

46 .
	ggpio
 = 
TL_WR703N_GPIO_LED_SYSTEM
,

47 .
	ga˘ive_low
 = 1,

51 
gpio_keys_buâ⁄
 
	gé_wr703n_gpio_keys
[] 
	g__öôd©a
 = {

53 .
desc
 = "reset",

54 .
	gty≥
 = 
EV_KEY
,

55 .
	gcode
 = 
KEY_RESTART
,

56 .
	gdeboun˚_öãrvÆ
 = 
TL_WR703N_KEYS_DEBOUNCE_INTERVAL
,

57 .
	ggpio
 = 
TL_WR703N_GPIO_BTN_RESET
,

58 .
	ga˘ive_low
 = 0,

62 
__öô
 
	$comm⁄_£tup
(
usb_powî_gpio
, 
boﬁ
 
£c_ëhî√t
)

64 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

65 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

68 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

70 
	`©h79_ªgi°î_m25p80
(&
é_wr703n_Êash_d©a
);

71 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr703n_Àds_gpio
),

72 
é_wr703n_Àds_gpio
);

73 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR703N_KEYS_POLL_INTERVAL
,

74 
	`ARRAY_SIZE
(
é_wr703n_gpio_keys
),

75 
é_wr703n_gpio_keys
);

77 
	`gpio_ªque°_⁄e
(
usb_powî_gpio
,

78 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

80 
	`©h79_ªgi°î_usb
();

82 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

84 
	`©h79_ªgi°î_mdio
(0, 0x0);

85 
	`©h79_ªgi°î_ëh
(0);

87 i‡(
£c_ëhî√t
)

89 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

90 
	`©h79_ªgi°î_ëh
(1);

93 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

94 
	}
}

96 
__öô
 
	$é_mr10u_£tup
()

98 
	`comm⁄_£tup
(
TL_MR10U_GPIO_USB_POWER
, 
Ál£
);

99 
	}
}

101 
MIPS_MACHINE
(
ATH79_MACH_TL_MR10U
, "TL-MR10U", "TP-LINK TL-MR10U",

102 
é_mr10u_£tup
);

104 
__öô
 
	$é_wr703n_£tup
()

106 
	`comm⁄_£tup
(
TL_WR703N_GPIO_USB_POWER
, 
Ál£
);

107 
	}
}

109 
MIPS_MACHINE
(
ATH79_MACH_TL_WR703N
, "TL-WR703N", "TP-LINK TL-WR703N v1",

110 
é_wr703n_£tup
);

112 
__öô
 
	$é_wr710n_£tup
()

114 
	`comm⁄_£tup
(
TL_WR703N_GPIO_USB_POWER
, 
åue
);

115 
	}
}

117 
MIPS_MACHINE
(
ATH79_MACH_TL_WR710N
, "TL-WR710N", "TP-LINK TL-WR710N v1",

118 
é_wr710n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr720n-v3.c

13 
	~<löux/gpio.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TL_WR720N_GPIO_LED_SYSTEM
 27

	)

26 
	#TL_WR720N_GPIO_BTN_RESET
 11

	)

27 
	#TL_WR720N_GPIO_BTN_SW1
 18

	)

28 
	#TL_WR720N_GPIO_BTN_SW2
 20

	)

30 
	#TL_WR720N_GPIO_USB_POWER
 8

	)

32 
	#TL_WR720N_KEYS_POLL_INTERVAL
 20

	)

33 
	#TL_WR720N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR720N_KEYS_POLL_INTERVAL
)

	)

35 c⁄° *
	gé_wr720n_∑π_¥obes
[] = {

37 
NULL
,

40 
Êash_∂©f‹m_d©a
 
	gé_wr720n_Êash_d©a
 = {

41 .
∑π_¥obes
 = 
é_wr720n_∑π_¥obes
,

44 
gpio_Àd
 
	gé_wr720n_Àds_gpio
[] 
	g__öôd©a
 = {

46 .
«me
 = "tp-link:blue:system",

47 .
	ggpio
 = 
TL_WR720N_GPIO_LED_SYSTEM
,

48 .
	ga˘ive_low
 = 1,

52 
gpio_keys_buâ⁄
 
	gé_wr720n_gpio_keys
[] 
	g__öôd©a
 = {

54 .
desc
 = "reset",

55 .
	gty≥
 = 
EV_KEY
,

56 .
	gcode
 = 
KEY_RESTART
,

57 .
	gdeboun˚_öãrvÆ
 = 
TL_WR720N_KEYS_DEBOUNCE_INTERVAL
,

58 .
	ggpio
 = 
TL_WR720N_GPIO_BTN_RESET
,

59 .
	ga˘ive_low
 = 0,

61 .
	gdesc
 = "sw1",

62 .
	gty≥
 = 
EV_KEY
,

63 .
	gcode
 = 
BTN_0
,

64 .
	gdeboun˚_öãrvÆ
 = 
TL_WR720N_KEYS_DEBOUNCE_INTERVAL
,

65 .
	ggpio
 = 
TL_WR720N_GPIO_BTN_SW1
,

66 .
	ga˘ive_low
 = 0,

68 .
	gdesc
 = "sw2",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
BTN_1
,

71 .
	gdeboun˚_öãrvÆ
 = 
TL_WR720N_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
TL_WR720N_GPIO_BTN_SW2
,

73 .
	ga˘ive_low
 = 0,

77 
__öô
 
	$é_wr720n_v3_£tup
()

79 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

80 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

83 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

85 
	`©h79_ªgi°î_m25p80
(&
é_wr720n_Êash_d©a
);

86 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr720n_Àds_gpio
),

87 
é_wr720n_Àds_gpio
);

88 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR720N_KEYS_POLL_INTERVAL
,

89 
	`ARRAY_SIZE
(
é_wr720n_gpio_keys
),

90 
é_wr720n_gpio_keys
);

92 
	`gpio_ªque°_⁄e
(
TL_WR720N_GPIO_USB_POWER
,

93 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

95 
	`©h79_ªgi°î_usb
();

97 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

98 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 2);

100 
	`©h79_ªgi°î_mdio
(0, 0x0);

101 
	`©h79_ªgi°î_ëh
(0);

102 
	`©h79_ªgi°î_ëh
(1);

104 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

105 
	}
}

107 
MIPS_MACHINE
(
ATH79_MACH_TL_WR720N_V3
, "TL-WR720N-v3", "TP-LINK TL-WR720N v3/v4",

108 
é_wr720n_v3_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr741nd-v4.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TL_WR741NDV4_GPIO_BTN_RESET
 11

	)

26 
	#TL_WR741NDV4_GPIO_BTN_WPS
 26

	)

28 
	#TL_WR741NDV4_GPIO_LED_WLAN
 0

	)

29 
	#TL_WR741NDV4_GPIO_LED_QSS
 1

	)

30 
	#TL_WR741NDV4_GPIO_LED_WAN
 13

	)

31 
	#TL_WR741NDV4_GPIO_LED_LAN1
 14

	)

32 
	#TL_WR741NDV4_GPIO_LED_LAN2
 15

	)

33 
	#TL_WR741NDV4_GPIO_LED_LAN3
 16

	)

34 
	#TL_WR741NDV4_GPIO_LED_LAN4
 17

	)

35 
	#TL_WR741NDV4_GPIO_LED_SYSTEM
 27

	)

37 
	#TL_MR3220V2_GPIO_BTN_WPS
 11

	)

38 
	#TL_MR3220V2_GPIO_BTN_WIFI
 24

	)

40 
	#TL_MR3220V2_GPIO_LED_3G
 26

	)

41 
	#TL_MR3220V2_GPIO_USB_POWER
 8

	)

43 
	#TL_WR741NDV4_KEYS_POLL_INTERVAL
 20

	)

44 
	#TL_WR741NDV4_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR741NDV4_KEYS_POLL_INTERVAL
)

	)

46 c⁄° *
	gé_wr741ndv4_∑π_¥obes
[] = {

48 
NULL
,

51 
Êash_∂©f‹m_d©a
 
	gé_wr741ndv4_Êash_d©a
 = {

52 .
∑π_¥obes
 = 
é_wr741ndv4_∑π_¥obes
,

55 
gpio_Àd
 
	gé_wr741ndv4_Àds_gpio
[] 
	g__öôd©a
 = {

57 .
«me
 = "tp-link:green:lan1",

58 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_LAN1
,

59 .
	ga˘ive_low
 = 0,

61 .
	g«me
 = "tp-link:green:lan2",

62 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_LAN2
,

63 .
	ga˘ive_low
 = 0,

65 .
	g«me
 = "tp-link:green:lan3",

66 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_LAN3
,

67 .
	ga˘ive_low
 = 0,

69 .
	g«me
 = "tp-link:green:lan4",

70 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_LAN4
,

71 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "tp-link:green:qss",

74 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_QSS
,

75 .
	ga˘ive_low
 = 0,

77 .
	g«me
 = "tp-link:green:system",

78 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_SYSTEM
,

79 .
	ga˘ive_low
 = 1,

81 .
	g«me
 = "tp-link:green:wan",

82 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_WAN
,

83 .
	ga˘ive_low
 = 0,

85 .
	g«me
 = "tp-link:green:wlan",

86 .
	ggpio
 = 
TL_WR741NDV4_GPIO_LED_WLAN
,

87 .
	ga˘ive_low
 = 0,

90 .
	g«me
 = "tp-link:green:3g",

91 .
	ggpio
 = 
TL_MR3220V2_GPIO_LED_3G
,

92 .
	ga˘ive_low
 = 0,

96 
gpio_keys_buâ⁄
 
	gé_wr741ndv4_gpio_keys
[] 
	g__öôd©a
 = {

98 .
desc
 = "reset",

99 .
	gty≥
 = 
EV_KEY
,

100 .
	gcode
 = 
KEY_RESTART
,

101 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741NDV4_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 
TL_WR741NDV4_GPIO_BTN_RESET
,

103 .
	ga˘ive_low
 = 0,

105 .
	gdesc
 = "WPS",

106 .
	gty≥
 = 
EV_KEY
,

107 .
	gcode
 = 
KEY_WPS_BUTTON
,

108 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741NDV4_KEYS_DEBOUNCE_INTERVAL
,

109 .
	ggpio
 = 
TL_WR741NDV4_GPIO_BTN_WPS
,

110 .
	ga˘ive_low
 = 0,

114 
gpio_keys_buâ⁄
 
	gé_mr3220v2_gpio_keys
[] 
	g__öôd©a
 = {

116 .
desc
 = "WPS",

117 .
	gty≥
 = 
EV_KEY
,

118 .
	gcode
 = 
KEY_WPS_BUTTON
,

119 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741NDV4_KEYS_DEBOUNCE_INTERVAL
,

120 .
	ggpio
 = 
TL_MR3220V2_GPIO_BTN_WPS
,

121 .
	ga˘ive_low
 = 0,

123 .
	gdesc
 = "WIFI button",

124 .
	gty≥
 = 
EV_KEY
,

125 .
	gcode
 = 
KEY_RFKILL
,

126 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741NDV4_KEYS_DEBOUNCE_INTERVAL
,

127 .
	ggpio
 = 
TL_MR3220V2_GPIO_BTN_WIFI
,

128 .
	ga˘ive_low
 = 0,

132 
__öô
 
	$é_≠121_£tup
()

134 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

135 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

137 
	`©h79_£tup_¨933x_phy4_swôch
(
åue
,Årue);

139 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

140 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

141 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

142 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

143 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

145 
	`©h79_ªgi°î_m25p80
(&
é_wr741ndv4_Êash_d©a
);

146 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

147 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

149 
	`©h79_ªgi°î_mdio
(0, 0x0);

150 
	`©h79_ªgi°î_ëh
(1);

151 
	`©h79_ªgi°î_ëh
(0);

153 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

154 
	}
}

156 
__öô
 
	$é_wr741ndv4_£tup
()

158 
	`é_≠121_£tup
();

160 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr741ndv4_Àds_gpio
) - 1,

161 
é_wr741ndv4_Àds_gpio
);

162 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR741NDV4_KEYS_POLL_INTERVAL
,

163 
	`ARRAY_SIZE
(
é_wr741ndv4_gpio_keys
),

164 
é_wr741ndv4_gpio_keys
);

165 
	}
}

167 
MIPS_MACHINE
(
ATH79_MACH_TL_WR741ND_V4
, "TL-WR741ND-v4",

168 "TP-LINK TL-WR741ND v4", 
é_wr741ndv4_£tup
);

170 
__öô
 
	$é_mr3220v2_£tup
()

172 
	`é_≠121_£tup
();

174 
	`gpio_ªque°_⁄e
(
TL_MR3220V2_GPIO_USB_POWER
,

175 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

177 
	`©h79_ªgi°î_usb
();

179 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr741ndv4_Àds_gpio
),

180 
é_wr741ndv4_Àds_gpio
);

181 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR741NDV4_KEYS_POLL_INTERVAL
,

182 
	`ARRAY_SIZE
(
é_mr3220v2_gpio_keys
),

183 
é_mr3220v2_gpio_keys
);

184 
	}
}

186 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3220_V2
, "TL-MR3220-v2",

187 "TP-LINK TL-MR3220 v2", 
é_mr3220v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr741nd.c

11 
	~<asm/mach-©h79/©h79.h
>

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~"comm⁄.h
"

15 
	~"dev-≠9x-pci.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"machty≥s.h
"

22 
	#TL_WR741ND_GPIO_LED_QSS
 0

	)

23 
	#TL_WR741ND_GPIO_LED_SYSTEM
 1

	)

24 
	#TL_WR741ND_GPIO_LED_LAN1
 13

	)

25 
	#TL_WR741ND_GPIO_LED_LAN2
 14

	)

26 
	#TL_WR741ND_GPIO_LED_LAN3
 15

	)

27 
	#TL_WR741ND_GPIO_LED_LAN4
 16

	)

28 
	#TL_WR741ND_GPIO_LED_WAN
 17

	)

30 
	#TL_WR741ND_GPIO_BTN_RESET
 11

	)

31 
	#TL_WR741ND_GPIO_BTN_QSS
 12

	)

33 
	#TL_WR741ND_KEYS_POLL_INTERVAL
 20

	)

34 
	#TL_WR741ND_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR741ND_KEYS_POLL_INTERVAL
)

	)

36 c⁄° *
	gé_wr741nd_∑π_¥obes
[] = {

38 
NULL
,

41 
Êash_∂©f‹m_d©a
 
	gé_wr741nd_Êash_d©a
 = {

42 .
∑π_¥obes
 = 
é_wr741nd_∑π_¥obes
,

45 
gpio_Àd
 
	gé_wr741nd_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "tp-link:green:lan1",

48 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_LAN1
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "tp-link:green:lan2",

52 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_LAN2
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "tp-link:green:lan3",

56 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_LAN3
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "tp-link:green:lan4",

60 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_LAN4
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "tp-link:green:qss",

64 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_QSS
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "tp-link:green:system",

68 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_SYSTEM
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "tp-link:green:wan",

72 .
	ggpio
 = 
TL_WR741ND_GPIO_LED_WAN
,

73 .
	ga˘ive_low
 = 1,

77 
gpio_keys_buâ⁄
 
	gé_wr741nd_gpio_keys
[] 
	g__öôd©a
 = {

79 .
desc
 = "reset",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_RESTART
,

82 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741ND_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
TL_WR741ND_GPIO_BTN_RESET
,

84 .
	ga˘ive_low
 = 1,

86 .
	gdesc
 = "qss",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_WPS_BUTTON
,

89 .
	gdeboun˚_öãrvÆ
 = 
TL_WR741ND_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
TL_WR741ND_GPIO_BTN_QSS
,

91 .
	ga˘ive_low
 = 1,

95 
__öô
 
	$é_wr741nd_£tup
()

97 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

98 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

100 
	`©h79_ªgi°î_m25p80
(&
é_wr741nd_Êash_d©a
);

102 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

103 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

104 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

105 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

106 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

108 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr741nd_Àds_gpio
),

109 
é_wr741nd_Àds_gpio
);

111 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR741ND_KEYS_POLL_INTERVAL
,

112 
	`ARRAY_SIZE
(
é_wr741nd_gpio_keys
),

113 
é_wr741nd_gpio_keys
);

115 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

116 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

118 
	`©h79_ªgi°î_mdio
(0, 0x0);

121 
	`©h79_ªgi°î_ëh
(1);

124 
	`©h79_ªgi°î_ëh
(0);

126 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 1);

127 
	`≠91_pci_öô
(
ì
, 
mac
);

128 
	}
}

129 
MIPS_MACHINE
(
ATH79_MACH_TL_WR741ND
, "TL-WR741ND", "TP-LINK TL-WR741ND",

130 
é_wr741nd_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr802n.c

12 
	~<löux/gpio.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#TL_WR802N_GPIO_LED_SYSTEM
 13

	)

27 
	#TL_WR802N_GPIO_BTN_RESET
 11

	)

29 
	#TL_WR802N_KEYS_POLL_INTERVAL
 20

	)

30 
	#TL_WR802N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR802N_KEYS_POLL_INTERVAL
)

	)

32 c⁄° *
	gé_wr802n_∑π_¥obes
[] = {

34 
NULL
,

37 
Êash_∂©f‹m_d©a
 
	gé_wr802n_Êash_d©a
 = {

38 .
∑π_¥obes
 = 
é_wr802n_∑π_¥obes
,

41 
gpio_Àd
 
	gé_wr802n_v1_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "tp-link:blue:system",

44 .
	ggpio
 = 
TL_WR802N_GPIO_LED_SYSTEM
,

45 .
	ga˘ive_low
 = 1,

49 
gpio_Àd
 
	gé_wr802n_v2_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "tl-wr802n-v2:green:system",

52 .
	ggpio
 = 
TL_WR802N_GPIO_LED_SYSTEM
,

53 .
	ga˘ive_low
 = 1,

57 
gpio_keys_buâ⁄
 
	gé_wr802n_gpio_keys
[] 
	g__öôd©a
 = {

59 .
desc
 = "reset",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
KEY_RESTART
,

62 .
	gdeboun˚_öãrvÆ
 = 
TL_WR802N_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
TL_WR802N_GPIO_BTN_RESET
,

64 .
	ga˘ive_low
 = 0,

68 
__öô
 
	$é_≠143_£tup
()

70 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

71 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

72 
u8
 
tmpmac
[
ETH_ALEN
];

74 
	`©h79_ªgi°î_m25p80
(&
é_wr802n_Êash_d©a
);

76 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

78 
	`©h79_ªgi°î_mdio
(0, 0x0);

81 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

82 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

83 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

84 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

85 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

86 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

87 
	`©h79_ªgi°î_ëh
(0);

89 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

90 
	`©h79_ªgi°î_wmac
(
ì
, 
tmpmac
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR802N_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
é_wr802n_gpio_keys
),

94 
é_wr802n_gpio_keys
);

95 
	}
}

97 
__öô
 
	$é_wr802n_v1_£tup
()

99 
	`é_≠143_£tup
();

101 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr802n_v1_Àds_gpio
),

102 
é_wr802n_v1_Àds_gpio
);

103 
	}
}

105 
__öô
 
	$é_wr802n_v2_£tup
()

107 
	`é_≠143_£tup
();

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr802n_v2_Àds_gpio
),

110 
é_wr802n_v2_Àds_gpio
);

111 
	}
}

113 
MIPS_MACHINE
(
ATH79_MACH_TL_WR802N_V1
, "TL-WR802N-v1", "TP-LINK TL-WR802N v1",

114 
é_wr802n_v1_£tup
);

116 
MIPS_MACHINE
(
ATH79_MACH_TL_WR802N_V2
, "TL-WR802N-v2", "TP-LINK TL-WR802N v2",

117 
é_wr802n_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr810n.c

21 
	~<löux/gpio.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"dev-gpio-buâ⁄s.h
"

29 
	~"dev-ëh.h
"

30 
	~"dev-Àds-gpio.h
"

31 
	~"dev-m25p80.h
"

32 
	~"dev-usb.h
"

33 
	~"dev-wmac.h
"

34 
	~"machty≥s.h
"

36 
	#TL_WR810N_GPIO_SWITCH_B1
 0

	)

37 
	#TL_WR810N_GPIO_SWITCH_B0
 1

	)

38 
	#TL_WR810N_GPIO_USB_POWER
 11

	)

39 
	#TL_WR810N_GPIO_BTN_RESET
 12

	)

40 
	#TL_WR810N_GPIO_LED_SYSTEM
 13

	)

42 
	#TL_WR810N_KEYS_POLL_INTERVAL
 20

	)

43 
	#TL_WR810N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR810N_KEYS_POLL_INTERVAL
)

	)

45 
	#TL_WR810N_WMAC_CALDATA_OFFSET
 0x1000

	)

47 c⁄° *
	gé_wr810n_∑π_¥obes
[] = {

49 
NULL
,

52 
Êash_∂©f‹m_d©a
 
	gé_wr810n_Êash_d©a
 = {

53 .
∑π_¥obes
 = 
é_wr810n_∑π_¥obes
,

56 
gpio_Àd
 
	gé_wr810n_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "tp-link:blue:system",

59 .
	ggpio
 = 
TL_WR810N_GPIO_LED_SYSTEM
,

60 .
	ga˘ive_low
 = 1,

64 
gpio_keys_buâ⁄
 
	gé_wr810n_gpio_keys
[] 
	g__öôd©a
 = {

66 .
desc
 = "reset",

67 .
	gty≥
 = 
EV_KEY
,

68 .
	gcode
 = 
KEY_RESTART
,

69 .
	gdeboun˚_öãrvÆ
 = 
TL_WR810N_KEYS_DEBOUNCE_INTERVAL
,

70 .
	ggpio
 = 
TL_WR810N_GPIO_BTN_RESET
,

71 .
	ga˘ive_low
 = 1,

74 .
	gdesc
 = "switch_b0",

75 .
	gty≥
 = 
EV_SW
,

76 .
	gcode
 = 
BTN_0
,

77 .
	gdeboun˚_öãrvÆ
 = 
TL_WR810N_KEYS_DEBOUNCE_INTERVAL
,

78 .
	ggpio
 = 
TL_WR810N_GPIO_SWITCH_B0
,

79 .
	ga˘ive_low
 = 0,

82 .
	gdesc
 = "switch_b1",

83 .
	gty≥
 = 
EV_SW
,

84 .
	gcode
 = 
BTN_1
,

85 .
	gdeboun˚_öãrvÆ
 = 
TL_WR810N_KEYS_DEBOUNCE_INTERVAL
,

86 .
	ggpio
 = 
TL_WR810N_GPIO_SWITCH_B1
,

87 .
	ga˘ive_low
 = 0,

91 
__öô
 
	$é_≠143_£tup
(
œn_mac_off£t
)

93 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

94 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

96 
	`©h79_ªgi°î_m25p80
(&
é_wr810n_Êash_d©a
);

98 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

100 
	`©h79_ªgi°î_mdio
(0, 0x0);

103 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

104 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

105 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

106 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

107 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

108 
	`©h79_ªgi°î_ëh
(0);

111 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

112 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

113 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

114 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

115 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

116 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 
œn_mac_off£t
);

117 
	`©h79_ªgi°î_ëh
(1);

119 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_WR810N_WMAC_CALDATA_OFFSET
, 
mac
);

121 
	`©h79_ªgi°î_Àds_gpio
(-1,

122 
	`ARRAY_SIZE
(
é_wr810n_Àds_gpio
),

123 
é_wr810n_Àds_gpio
);

124 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1,

125 
TL_WR810N_KEYS_POLL_INTERVAL
,

126 
	`ARRAY_SIZE
(
é_wr810n_gpio_keys
),

127 
é_wr810n_gpio_keys
);

128 
	}
}

130 
__öô
 
	$é_wr810n_£tup
()

132 
	`é_≠143_£tup
(-1);

134 
	`gpio_ªque°_⁄e
(
TL_WR810N_GPIO_USB_POWER
,

135 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

137 
	`©h79_ªgi°î_usb
();

138 
	}
}

140 
__öô
 
	$é_wr810n_v2_£tup
()

142 
	`é_≠143_£tup
(0);

143 
	}
}

145 
MIPS_MACHINE
(
ATH79_MACH_TL_WR810N
, "TL-WR810N", "TP-LINK TL-WR810N",

146 
é_wr810n_£tup
);

148 
MIPS_MACHINE
(
ATH79_MACH_TL_WR810N_V2
, "TL-WR810N-v2", "TP-LINK TL-WR810N v2",

149 
é_wr810n_v2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n-v8.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#TL_WR841NV8_GPIO_LED_WLAN
 13

	)

27 
	#TL_WR841NV8_GPIO_LED_QSS
 15

	)

28 
	#TL_WR841NV8_GPIO_LED_WAN
 18

	)

29 
	#TL_WR841NV8_GPIO_LED_LAN1
 19

	)

30 
	#TL_WR841NV8_GPIO_LED_LAN2
 20

	)

31 
	#TL_WR841NV8_GPIO_LED_LAN3
 21

	)

32 
	#TL_WR841NV8_GPIO_LED_LAN4
 12

	)

33 
	#TL_WR841NV8_GPIO_LED_SYSTEM
 14

	)

35 
	#TL_WR841NV8_GPIO_BTN_RESET
 17

	)

36 
	#TL_WR841NV8_GPIO_SW_RFKILL
 16

	)

38 
	#TL_MR3420V2_GPIO_LED_3G
 11

	)

39 
	#TL_MR3420V2_GPIO_USB_POWER
 4

	)

41 
	#TL_WR941NDV5_GPIO_LED_WLAN
 13

	)

42 
	#TL_WR941NDV5_GPIO_LED_QSS
 15

	)

43 
	#TL_WR941NDV5_GPIO_LED_WAN
 18

	)

44 
	#TL_WR941NDV5_GPIO_LED_LAN1
 19

	)

45 
	#TL_WR941NDV5_GPIO_LED_LAN2
 20

	)

46 
	#TL_WR941NDV5_GPIO_LED_LAN3
 2

	)

47 
	#TL_WR941NDV5_GPIO_LED_LAN4
 3

	)

48 
	#TL_WR941NDV5_GPIO_LED_SYSTEM
 14

	)

50 
	#TL_WR841NV8_KEYS_POLL_INTERVAL
 20

	)

51 
	#TL_WR841NV8_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR841NV8_KEYS_POLL_INTERVAL
)

	)

53 c⁄° *
	gé_wr841n_v8_∑π_¥obes
[] = {

55 
NULL
,

58 
Êash_∂©f‹m_d©a
 
	gé_wr841n_v8_Êash_d©a
 = {

59 .
∑π_¥obes
 = 
é_wr841n_v8_∑π_¥obes
,

62 
gpio_Àd
 
	gé_wr841n_v8_Àds_gpio
[] 
	g__öôd©a
 = {

64 .
«me
 = "tp-link:green:lan1",

65 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_LAN1
,

66 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "tp-link:green:lan2",

69 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_LAN2
,

70 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "tp-link:green:lan3",

73 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_LAN3
,

74 .
	ga˘ive_low
 = 1,

76 .
	g«me
 = "tp-link:green:lan4",

77 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_LAN4
,

78 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "tp-link:green:qss",

81 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_QSS
,

82 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "tp-link:green:system",

85 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_SYSTEM
,

86 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "tp-link:green:wan",

89 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_WAN
,

90 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "tp-link:green:wlan",

93 .
	ggpio
 = 
TL_WR841NV8_GPIO_LED_WLAN
,

94 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "tp-link:green:3g",

98 .
	ggpio
 = 
TL_MR3420V2_GPIO_LED_3G
,

99 .
	ga˘ive_low
 = 1,

103 
gpio_keys_buâ⁄
 
	gé_wr841n_v8_gpio_keys
[] 
	g__öôd©a
 = {

105 .
desc
 = "Reset button",

106 .
	gty≥
 = 
EV_KEY
,

107 .
	gcode
 = 
KEY_RESTART
,

108 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV8_KEYS_DEBOUNCE_INTERVAL
,

109 .
	ggpio
 = 
TL_WR841NV8_GPIO_BTN_RESET
,

110 .
	ga˘ive_low
 = 1,

112 .
	gdesc
 = "RFKILL switch",

113 .
	gty≥
 = 
EV_SW
,

114 .
	gcode
 = 
KEY_RFKILL
,

115 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV8_KEYS_DEBOUNCE_INTERVAL
,

116 .
	ggpio
 = 
TL_WR841NV8_GPIO_SW_RFKILL
,

117 .
	ga˘ive_low
 = 0,

121 
gpio_keys_buâ⁄
 
	gé_mr3420v2_gpio_keys
[] 
	g__öôd©a
 = {

123 .
desc
 = "Reset button",

124 .
	gty≥
 = 
EV_KEY
,

125 .
	gcode
 = 
KEY_RESTART
,

126 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV8_KEYS_DEBOUNCE_INTERVAL
,

127 .
	ggpio
 = 
TL_WR841NV8_GPIO_BTN_RESET
,

128 .
	ga˘ive_low
 = 1,

130 .
	gdesc
 = "WPS",

131 .
	gty≥
 = 
EV_KEY
,

132 .
	gcode
 = 
KEY_WPS_BUTTON
,

133 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV8_KEYS_DEBOUNCE_INTERVAL
,

134 .
	ggpio
 = 
TL_WR841NV8_GPIO_SW_RFKILL
,

135 .
	ga˘ive_low
 = 0,

139 
gpio_Àd
 
	gé_wr941nd_v5_Àds_gpio
[] 
	g__öôd©a
 = {

141 .
«me
 = "tp-link:green:lan1",

142 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_LAN1
,

143 .
	ga˘ive_low
 = 1,

145 .
	g«me
 = "tp-link:green:lan2",

146 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_LAN2
,

147 .
	ga˘ive_low
 = 1,

149 .
	g«me
 = "tp-link:green:lan3",

150 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_LAN3
,

151 .
	ga˘ive_low
 = 1,

153 .
	g«me
 = "tp-link:green:lan4",

154 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_LAN4
,

155 .
	ga˘ive_low
 = 1,

157 .
	g«me
 = "tp-link:green:qss",

158 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_QSS
,

159 .
	ga˘ive_low
 = 1,

161 .
	g«me
 = "tp-link:green:system",

162 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_SYSTEM
,

163 .
	ga˘ive_low
 = 1,

165 .
	g«me
 = "tp-link:green:wan",

166 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_WAN
,

167 .
	ga˘ive_low
 = 1,

169 .
	g«me
 = "tp-link:green:wlan",

170 .
	ggpio
 = 
TL_WR941NDV5_GPIO_LED_WLAN
,

171 .
	ga˘ive_low
 = 1,

175 
__öô
 
	$é_≠123_£tup
()

177 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

178 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

182 
	`©h79_gpio_fun˘i⁄_£tup
(
AR934X_GPIO_FUNC_JTAG_DISABLE
,

183 
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

186 
	`©h79_gpio_ouçut_£À˘
(
TL_MR3420V2_GPIO_USB_POWER
,

187 
AR934X_GPIO_OUT_GPIO
);

189 
	`©h79_ªgi°î_m25p80
(&
é_wr841n_v8_Êash_d©a
);

191 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

193 
	`©h79_ªgi°î_mdio
(1, 0x0);

195 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, -1);

196 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

199 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

200 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(0);

201 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

202 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

203 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

204 
	`©h79_ªgi°î_ëh
(0);

207 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

208 
	`©h79_ªgi°î_ëh
(1);

210 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

211 
	}
}

213 
__öô
 
	$é_wr841n_v8_£tup
()

215 
	`é_≠123_£tup
();

217 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v8_Àds_gpio
) - 1,

218 
é_wr841n_v8_Àds_gpio
);

220 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV8_KEYS_POLL_INTERVAL
,

221 
	`ARRAY_SIZE
(
é_wr841n_v8_gpio_keys
),

222 
é_wr841n_v8_gpio_keys
);

223 
	}
}

225 
MIPS_MACHINE
(
ATH79_MACH_TL_WR841N_V8
, "TL-WR841N-v8", "TP-LINK TL-WR841N/ND v8",

226 
é_wr841n_v8_£tup
);

229 
__öô
 
	$é_wr842n_v2_£tup
()

231 
	`é_≠123_£tup
();

233 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v8_Àds_gpio
),

234 
é_wr841n_v8_Àds_gpio
);

236 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV8_KEYS_POLL_INTERVAL
,

237 
	`ARRAY_SIZE
(
é_wr841n_v8_gpio_keys
),

238 
é_wr841n_v8_gpio_keys
);

240 
	`gpio_ªque°_⁄e
(
TL_MR3420V2_GPIO_USB_POWER
,

241 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

244 
	`©h79_ªgi°î_usb
();

245 
	}
}

247 
MIPS_MACHINE
(
ATH79_MACH_TL_WR842N_V2
, "TL-WR842N-v2", "TP-LINK TL-WR842N/ND v2",

248 
é_wr842n_v2_£tup
);

250 
__öô
 
	$é_mr3420v2_£tup
()

252 
	`é_≠123_£tup
();

254 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v8_Àds_gpio
),

255 
é_wr841n_v8_Àds_gpio
);

257 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV8_KEYS_POLL_INTERVAL
,

258 
	`ARRAY_SIZE
(
é_mr3420v2_gpio_keys
),

259 
é_mr3420v2_gpio_keys
);

262 
	`gpio_ªque°_⁄e
(
TL_MR3420V2_GPIO_USB_POWER
,

263 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

266 
	`©h79_ªgi°î_usb
();

267 
	}
}

269 
MIPS_MACHINE
(
ATH79_MACH_TL_MR3420_V2
, "TL-MR3420-v2", "TP-LINK TL-MR3420 v2",

270 
é_mr3420v2_£tup
);

273 
__öô
 
	$é_wr941nd_v5_£tup
()

275 
	`é_≠123_£tup
();

277 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr941nd_v5_Àds_gpio
),

278 
é_wr941nd_v5_Àds_gpio
);

280 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV8_KEYS_POLL_INTERVAL
,

281 
	`ARRAY_SIZE
(
é_wr841n_v8_gpio_keys
),

282 
é_wr841n_v8_gpio_keys
);

283 
	}
}

285 
MIPS_MACHINE
(
ATH79_MACH_TL_WR941ND_V5
, "TL-WR941ND-v5", "TP-LINK TL-WR941N/ND v5",

286 
é_wr941nd_v5_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n-v9.c

15 
	~<löux/gpio.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<asm/mach-©h79/©h79.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~"comm⁄.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"dev-wmac.h
"

28 
	~"machty≥s.h
"

30 
	#TL_WR840NV2_GPIO_LED_SYSTEM
 15

	)

31 
	#TL_WR840NV2_GPIO_LED_WLAN
 13

	)

32 
	#TL_WR840NV2_GPIO_LED_WPS
 3

	)

33 
	#TL_WR840NV2_GPIO_LED_WAN
 4

	)

34 
	#TL_WR840NV2_GPIO_LED_LAN
 16

	)

36 
	#TL_WR840NV2_GPIO_BTN_RESET
 12

	)

38 
	#TL_WR841NV9_GPIO_LED_WLAN
 13

	)

39 
	#TL_WR841NV9_GPIO_LED_QSS
 3

	)

40 
	#TL_WR841NV9_GPIO_LED_WAN
 4

	)

41 
	#TL_WR841NV9_GPIO_LED_LAN1
 16

	)

42 
	#TL_WR841NV9_GPIO_LED_LAN2
 15

	)

43 
	#TL_WR841NV9_GPIO_LED_LAN3
 14

	)

44 
	#TL_WR841NV9_GPIO_LED_LAN4
 11

	)

46 
	#TL_WR841NV9_GPIO_BTN_RESET
 12

	)

47 
	#TL_WR841NV9_GPIO_BTN_WIFI
 17

	)

49 
	#TL_WR841NV11_GPIO_LED_SYSTEM
 1

	)

50 
	#TL_WR841NV11_GPIO_LED_QSS
 3

	)

51 
	#TL_WR841NV11_GPIO_LED_WAN
 4

	)

52 
	#TL_WR841NV11_GPIO_LED_WAN_STATUS
 2

	)

53 
	#TL_WR841NV11_GPIO_LED_WLAN
 13

	)

54 
	#TL_WR841NV11_GPIO_LED_LAN1
 16

	)

55 
	#TL_WR841NV11_GPIO_LED_LAN2
 15

	)

56 
	#TL_WR841NV11_GPIO_LED_LAN3
 14

	)

57 
	#TL_WR841NV11_GPIO_LED_LAN4
 11

	)

59 
	#TL_WR841NV11_GPIO_BTN_RESET
 12

	)

60 
	#TL_WR841NV11_GPIO_BTN_WIFI
 17

	)

62 
	#TL_WR842NV3_GPIO_LED_SYSTEM
 2

	)

63 
	#TL_WR842NV3_GPIO_LED_WLAN
 3

	)

64 
	#TL_WR842NV3_GPIO_LED_WAN_RED
 4

	)

65 
	#TL_WR842NV3_GPIO_LED_WAN_GREEN
 11

	)

66 
	#TL_WR842NV3_GPIO_LED_LAN1
 12

	)

67 
	#TL_WR842NV3_GPIO_LED_LAN2
 13

	)

68 
	#TL_WR842NV3_GPIO_LED_LAN3
 14

	)

69 
	#TL_WR842NV3_GPIO_LED_LAN4
 15

	)

70 
	#TL_WR842NV3_GPIO_LED_3G
 16

	)

71 
	#TL_WR842NV3_GPIO_LED_WPS
 17

	)

73 
	#TL_WR842NV3_GPIO_BTN_RESET
 1

	)

74 
	#TL_WR842NV3_GPIO_BTN_WIFI
 0

	)

76 
	#TL_WR740NV6_GPIO_LED_SYSTEM
 1

	)

77 
	#TL_WR740NV6_GPIO_LED_QSS
 3

	)

78 
	#TL_WR740NV6_GPIO_LED_WAN_ORANGE
 2

	)

79 
	#TL_WR740NV6_GPIO_LED_WAN_GREEN
 4

	)

80 
	#TL_WR740NV6_GPIO_LED_LAN1
 16

	)

81 
	#TL_WR740NV6_GPIO_LED_LAN2
 15

	)

82 
	#TL_WR740NV6_GPIO_LED_LAN3
 14

	)

83 
	#TL_WR740NV6_GPIO_LED_LAN4
 11

	)

84 
	#TL_WR740NV6_GPIO_LED_WLAN
 13

	)

86 
	#TL_WR740NV6_GPIO_BTN_RESET
 12

	)

87 
	#TL_WR740NV6_GPIO_BTN_WIFI
 17

	)

89 
	#TL_WR841NV9_KEYS_POLL_INTERVAL
 20

	)

90 
	#TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR841NV9_KEYS_POLL_INTERVAL
)

	)

92 c⁄° *
	gé_wr841n_v9_∑π_¥obes
[] = {

94 
NULL
,

97 
Êash_∂©f‹m_d©a
 
	gé_wr841n_v9_Êash_d©a
 = {

98 .
∑π_¥obes
 = 
é_wr841n_v9_∑π_¥obes
,

101 
gpio_Àd
 
	gé_wr840n_v2_Àds_gpio
[] 
	g__öôd©a
 = {

103 .
«me
 = "tp-link:green:system",

104 .
	ggpio
 = 
TL_WR840NV2_GPIO_LED_SYSTEM
,

105 .
	ga˘ive_low
 = 1,

107 .
	g«me
 = "tp-link:green:lan",

108 .
	ggpio
 = 
TL_WR840NV2_GPIO_LED_LAN
,

109 .
	ga˘ive_low
 = 1,

111 .
	g«me
 = "tp-link:green:wps",

112 .
	ggpio
 = 
TL_WR840NV2_GPIO_LED_WPS
,

113 .
	ga˘ive_low
 = 1,

115 .
	g«me
 = "tp-link:green:wan",

116 .
	ggpio
 = 
TL_WR840NV2_GPIO_LED_WAN
,

117 .
	ga˘ive_low
 = 1,

119 .
	g«me
 = "tp-link:green:wlan",

120 .
	ggpio
 = 
TL_WR840NV2_GPIO_LED_WLAN
,

121 .
	ga˘ive_low
 = 1,

125 
gpio_keys_buâ⁄
 
	gé_wr840n_v2_gpio_keys
[] 
	g__öôd©a
 = {

127 .
desc
 = "Reset button",

128 .
	gty≥
 = 
EV_KEY
,

129 .
	gcode
 = 
KEY_RESTART
,

130 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

131 .
	ggpio
 = 
TL_WR840NV2_GPIO_BTN_RESET
,

132 .
	ga˘ive_low
 = 1,

136 
gpio_Àd
 
	gé_wr841n_v9_Àds_gpio
[] 
	g__öôd©a
 = {

138 .
«me
 = "tp-link:green:lan1",

139 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN1
,

140 .
	ga˘ive_low
 = 1,

142 .
	g«me
 = "tp-link:green:lan2",

143 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN2
,

144 .
	ga˘ive_low
 = 1,

146 .
	g«me
 = "tp-link:green:lan3",

147 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN3
,

148 .
	ga˘ive_low
 = 1,

150 .
	g«me
 = "tp-link:green:lan4",

151 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN4
,

152 .
	ga˘ive_low
 = 1,

154 .
	g«me
 = "tp-link:green:qss",

155 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_QSS
,

156 .
	ga˘ive_low
 = 1,

158 .
	g«me
 = "tp-link:green:wan",

159 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_WAN
,

160 .
	ga˘ive_low
 = 1,

162 .
	g«me
 = "tp-link:green:wlan",

163 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_WLAN
,

164 .
	ga˘ive_low
 = 1,

168 
gpio_keys_buâ⁄
 
	gé_wr841n_v9_gpio_keys
[] 
	g__öôd©a
 = {

170 .
desc
 = "Reset button",

171 .
	gty≥
 = 
EV_KEY
,

172 .
	gcode
 = 
KEY_RESTART
,

173 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

174 .
	ggpio
 = 
TL_WR841NV9_GPIO_BTN_RESET
,

175 .
	ga˘ive_low
 = 1,

177 .
	gdesc
 = "WIFI button",

178 .
	gty≥
 = 
EV_KEY
,

179 .
	gcode
 = 
KEY_RFKILL
,

180 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

181 .
	ggpio
 = 
TL_WR841NV9_GPIO_BTN_WIFI
,

182 .
	ga˘ive_low
 = 1,

186 
gpio_Àd
 
	gé_wr841n_v11_Àds_gpio
[] 
	g__öôd©a
 = {

188 .
«me
 = "tp-link:green:lan1",

189 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN1
,

190 .
	ga˘ive_low
 = 1,

192 .
	g«me
 = "tp-link:green:lan2",

193 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN2
,

194 .
	ga˘ive_low
 = 1,

196 .
	g«me
 = "tp-link:green:lan3",

197 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN3
,

198 .
	ga˘ive_low
 = 1,

200 .
	g«me
 = "tp-link:green:lan4",

201 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_LAN4
,

202 .
	ga˘ive_low
 = 1,

204 .
	g«me
 = "tp-link:green:qss",

205 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_QSS
,

206 .
	ga˘ive_low
 = 1,

208 .
	g«me
 = "tp-link:green:system",

209 .
	ggpio
 = 
TL_WR841NV11_GPIO_LED_SYSTEM
,

210 .
	ga˘ive_low
 = 1,

212 .
	g«me
 = "tp-link:green:wan",

213 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_WAN
,

214 .
	ga˘ive_low
 = 1,

216 .
	g«me
 = "tp-link:green:wan_status",

217 .
	ggpio
 = 
TL_WR841NV11_GPIO_LED_WAN_STATUS
,

218 .
	ga˘ive_low
 = 1,

220 .
	g«me
 = "tp-link:green:wlan",

221 .
	ggpio
 = 
TL_WR841NV9_GPIO_LED_WLAN
,

222 .
	ga˘ive_low
 = 1,

226 
gpio_Àd
 
	gé_wr842n_v3_Àds_gpio
[] 
	g__öôd©a
 = {

228 .
«me
 = "tp-link:green:lan1",

229 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_LAN1
,

230 .
	ga˘ive_low
 = 1,

232 .
	g«me
 = "tp-link:green:lan2",

233 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_LAN2
,

234 .
	ga˘ive_low
 = 1,

236 .
	g«me
 = "tp-link:green:lan3",

237 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_LAN3
,

238 .
	ga˘ive_low
 = 1,

240 .
	g«me
 = "tp-link:green:lan4",

241 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_LAN4
,

242 .
	ga˘ive_low
 = 1,

244 .
	g«me
 = "tp-link:green:wan",

245 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_WAN_GREEN
,

246 .
	ga˘ive_low
 = 1,

248 .
	g«me
 = "tp-link:red:wan",

249 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_WAN_RED
,

250 .
	ga˘ive_low
 = 1,

252 .
	g«me
 = "tp-link:green:wlan",

253 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_WLAN
,

254 .
	ga˘ive_low
 = 1,

256 .
	g«me
 = "tp-link:green:system",

257 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_SYSTEM
,

258 .
	ga˘ive_low
 = 1,

260 .
	g«me
 = "tp-link:green:3g",

261 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_3G
,

262 .
	ga˘ive_low
 = 1,

264 .
	g«me
 = "tp-link:green:wps",

265 .
	ggpio
 = 
TL_WR842NV3_GPIO_LED_WPS
,

266 .
	ga˘ive_low
 = 1,

270 
gpio_keys_buâ⁄
 
	gé_wr842n_v3_gpio_keys
[] 
	g__öôd©a
 = {

272 .
desc
 = "Reset button",

273 .
	gty≥
 = 
EV_KEY
,

274 .
	gcode
 = 
KEY_RESTART
,

275 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

276 .
	ggpio
 = 
TL_WR842NV3_GPIO_BTN_RESET
,

277 .
	ga˘ive_low
 = 1,

279 .
	gdesc
 = "WIFI button",

280 .
	gty≥
 = 
EV_KEY
,

281 .
	gcode
 = 
KEY_RFKILL
,

282 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

283 .
	ggpio
 = 
TL_WR842NV3_GPIO_BTN_WIFI
,

284 .
	ga˘ive_low
 = 1,

288 
gpio_Àd
 
	gé_wr740n_v6_Àds_gpio
[] 
	g__öôd©a
 = {

290 .
«me
 = "tp-link:green:lan1",

291 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_LAN1
,

292 .
	ga˘ive_low
 = 1,

294 .
	g«me
 = "tp-link:green:lan2",

295 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_LAN2
,

296 .
	ga˘ive_low
 = 1,

298 .
	g«me
 = "tp-link:green:lan3",

299 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_LAN3
,

300 .
	ga˘ive_low
 = 1,

302 .
	g«me
 = "tp-link:green:lan4",

303 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_LAN4
,

304 .
	ga˘ive_low
 = 1,

306 .
	g«me
 = "tp-link:green:system",

307 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_SYSTEM
,

308 .
	ga˘ive_low
 = 1,

310 .
	g«me
 = "tp-link:green:qss",

311 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_QSS
,

312 .
	ga˘ive_low
 = 1,

314 .
	g«me
 = "tp-link:green:wan",

315 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_WAN_GREEN
,

316 .
	ga˘ive_low
 = 1,

318 .
	g«me
 = "tp-link:orange:wan",

319 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_WAN_ORANGE
,

320 .
	ga˘ive_low
 = 1,

322 .
	g«me
 = "tp-link:green:wlan",

323 .
	ggpio
 = 
TL_WR740NV6_GPIO_LED_WLAN
,

324 .
	ga˘ive_low
 = 1,

328 
gpio_keys_buâ⁄
 
	gé_wr740n_v6_gpio_keys
[] 
	g__öôd©a
 = {

330 .
desc
 = "Reset button",

331 .
	gty≥
 = 
EV_KEY
,

332 .
	gcode
 = 
KEY_RESTART
,

333 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

334 .
	ggpio
 = 
TL_WR740NV6_GPIO_BTN_RESET
,

335 .
	ga˘ive_low
 = 1,

337 .
	gdesc
 = "WIFI button",

338 .
	gty≥
 = 
EV_KEY
,

339 .
	gcode
 = 
KEY_RFKILL
,

340 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841NV9_KEYS_DEBOUNCE_INTERVAL
,

341 .
	ggpio
 = 
TL_WR740NV6_GPIO_BTN_WIFI
,

342 .
	ga˘ive_low
 = 1,

346 
__öô
 
	$é_≠143_£tup
()

348 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

349 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

350 
u8
 
tmpmac
[
ETH_ALEN
];

352 
	`©h79_ªgi°î_m25p80
(&
é_wr841n_v9_Êash_d©a
);

354 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

356 
	`©h79_ªgi°î_mdio
(0, 0x0);

359 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

360 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

361 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

362 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 0);

363 
	`©h79_ªgi°î_ëh
(1);

366 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

367 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

368 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

369 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

370 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

371 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

372 
	`©h79_ªgi°î_ëh
(0);

374 
	`©h79_öô_mac
(
tmpmac
, 
mac
, 0);

375 
	`©h79_ªgi°î_wmac
(
ì
, 
tmpmac
);

376 
	}
}

379 
__öô
 
	$é_wr840n_v2_£tup
()

381 
	`é_≠143_£tup
();

383 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr840n_v2_Àds_gpio
),

384 
é_wr840n_v2_Àds_gpio
);

386 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV9_KEYS_POLL_INTERVAL
,

387 
	`ARRAY_SIZE
(
é_wr840n_v2_gpio_keys
),

388 
é_wr840n_v2_gpio_keys
);

389 
	}
}

391 
MIPS_MACHINE
(
ATH79_MACH_TL_WR840N_V2
, "TL-WR840N-v2", "TP-LINK TL-WR840N v2",

392 
é_wr840n_v2_£tup
);

394 
MIPS_MACHINE
(
ATH79_MACH_TL_WR840N_V3
, "TL-WR840N-v3", "TP-LINK TL-WR840N v3",

395 
é_wr840n_v2_£tup
);

397 
__öô
 
	$é_wr841n_v9_£tup
()

399 
	`é_≠143_£tup
();

401 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v9_Àds_gpio
),

402 
é_wr841n_v9_Àds_gpio
);

404 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV9_KEYS_POLL_INTERVAL
,

405 
	`ARRAY_SIZE
(
é_wr841n_v9_gpio_keys
),

406 
é_wr841n_v9_gpio_keys
);

407 
	}
}

409 
MIPS_MACHINE
(
ATH79_MACH_TL_WR841N_V9
, "TL-WR841N-v9", "TP-LINK TL-WR841N/ND v9",

410 
é_wr841n_v9_£tup
);

412 
__öô
 
	$é_wr841n_v11_£tup
()

414 
	`é_≠143_£tup
();

416 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v11_Àds_gpio
),

417 
é_wr841n_v11_Àds_gpio
);

419 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV9_KEYS_POLL_INTERVAL
,

420 
	`ARRAY_SIZE
(
é_wr841n_v9_gpio_keys
),

421 
é_wr841n_v9_gpio_keys
);

422 
	}
}

424 
MIPS_MACHINE
(
ATH79_MACH_TL_WR841N_V11
, "TL-WR841N-v11", "TP-LINK TL-WR841N/ND v11",

425 
é_wr841n_v11_£tup
);

427 
__öô
 
	$é_wr842n_v3_£tup
()

429 
	`é_≠143_£tup
();

431 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr842n_v3_Àds_gpio
),

432 
é_wr842n_v3_Àds_gpio
);

434 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV9_KEYS_POLL_INTERVAL
,

435 
	`ARRAY_SIZE
(
é_wr842n_v3_gpio_keys
),

436 
é_wr842n_v3_gpio_keys
);

438 
	`©h79_ªgi°î_usb
();

439 
	}
}

441 
MIPS_MACHINE
(
ATH79_MACH_TL_WR842N_V3
, "TL-WR842N-v3", "TP-LINK TL-WR842N/ND v3",

442 
é_wr842n_v3_£tup
);

444 
__öô
 
	$é_wr740n_v6_£tup
()

446 
	`é_≠143_£tup
();

448 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr740n_v6_Àds_gpio
),

449 
é_wr740n_v6_Àds_gpio
);

451 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(1, 
TL_WR841NV9_KEYS_POLL_INTERVAL
,

452 
	`ARRAY_SIZE
(
é_wr740n_v6_gpio_keys
),

453 
é_wr740n_v6_gpio_keys
);

454 
	}
}

456 
MIPS_MACHINE
(
ATH79_MACH_TL_WR740N_V6
, "TL-WR740N-v6", "TP-LINK TL-WR740N/ND v6",

457 
é_wr740n_v6_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n.c

11 
	~<löux/mtd/mtd.h
>

12 
	~<löux/mtd/∑πôi⁄s.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-dß.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"machty≥s.h
"

23 
	~"pci.h
"

25 
	#TL_WR841ND_V1_GPIO_LED_SYSTEM
 2

	)

26 
	#TL_WR841ND_V1_GPIO_LED_QSS_GREEN
 4

	)

27 
	#TL_WR841ND_V1_GPIO_LED_QSS_RED
 5

	)

29 
	#TL_WR841ND_V1_GPIO_BTN_RESET
 3

	)

30 
	#TL_WR841ND_V1_GPIO_BTN_QSS
 7

	)

32 
	#TL_WR841ND_V1_KEYS_POLL_INTERVAL
 20

	)

33 
	#TL_WR841ND_V1_KEYS_DEBOUNCE_INTERVAL
 \

34 (3 * 
TL_WR841ND_V1_KEYS_POLL_INTERVAL
)

	)

36 
mtd_∑πôi⁄
 
	gé_wr841n_v1_∑πôi⁄s
[] = {

38 .
«me
 = "redboot",

39 .
	goff£t
 = 0,

40 .
	gsize
 = 0x020000,

41 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

43 .
	g«me
 = "kernel",

44 .
	goff£t
 = 0x020000,

45 .
	gsize
 = 0x140000,

47 .
	g«me
 = "rootfs",

48 .
	goff£t
 = 0x160000,

49 .
	gsize
 = 0x280000,

51 .
	g«me
 = "config",

52 .
	goff£t
 = 0x3e0000,

53 .
	gsize
 = 0x020000,

54 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

56 .
	g«me
 = "firmware",

57 .
	goff£t
 = 0x020000,

58 .
	gsize
 = 0x3c0000,

62 
Êash_∂©f‹m_d©a
 
	gé_wr841n_v1_Êash_d©a
 = {

63 .
∑πs
 = 
é_wr841n_v1_∑πôi⁄s
,

64 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
é_wr841n_v1_∑πôi⁄s
),

67 
gpio_Àd
 
	gé_wr841n_v1_Àds_gpio
[] 
	g__öôd©a
 = {

69 .
«me
 = "tp-link:green:system",

70 .
	ggpio
 = 
TL_WR841ND_V1_GPIO_LED_SYSTEM
,

71 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "tp-link:red:qss",

74 .
	ggpio
 = 
TL_WR841ND_V1_GPIO_LED_QSS_RED
,

76 .
	g«me
 = "tp-link:green:qss",

77 .
	ggpio
 = 
TL_WR841ND_V1_GPIO_LED_QSS_GREEN
,

81 
gpio_keys_buâ⁄
 
	gé_wr841n_v1_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "reset",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_RESTART
,

86 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841ND_V1_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
TL_WR841ND_V1_GPIO_BTN_RESET
,

88 .
	ga˘ive_low
 = 1,

90 .
	gdesc
 = "qss",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
KEY_WPS_BUTTON
,

93 .
	gdeboun˚_öãrvÆ
 = 
TL_WR841ND_V1_KEYS_DEBOUNCE_INTERVAL
,

94 .
	ggpio
 = 
TL_WR841ND_V1_GPIO_BTN_QSS
,

95 .
	ga˘ive_low
 = 1,

99 
dß_chù_d©a
 
	gé_wr841n_v1_dß_chù
 = {

100 .
p‹t_«mes
[0] = "wan",

101 .
	gp‹t_«mes
[1] = "lan1",

102 .
	gp‹t_«mes
[2] = "lan2",

103 .
	gp‹t_«mes
[3] = "lan3",

104 .
	gp‹t_«mes
[4] = "lan4",

105 .
	gp‹t_«mes
[5] = "cpu",

108 
dß_∂©f‹m_d©a
 
	gé_wr841n_v1_dß_d©a
 = {

109 .
ƒ_chùs
 = 1,

110 .
	gchù
 = &
é_wr841n_v1_dß_chù
,

113 
__öô
 
	$é_wr841n_v1_£tup
()

115 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

117 
	`©h79_ªgi°î_mdio
(0, 0x0);

119 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

120 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

121 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

122 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

124 
	`©h79_ªgi°î_ëh
(0);

125 
	`©h79_ªgi°î_dß
(&
©h79_ëh0_devi˚
.
dev
, &
©h79_mdio0_devi˚
.dev,

126 &
é_wr841n_v1_dß_d©a
);

128 
	`©h79_ªgi°î_m25p80
(&
é_wr841n_v1_Êash_d©a
);

130 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr841n_v1_Àds_gpio
),

131 
é_wr841n_v1_Àds_gpio
);

133 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR841ND_V1_KEYS_POLL_INTERVAL
,

134 
	`ARRAY_SIZE
(
é_wr841n_v1_gpio_keys
),

135 
é_wr841n_v1_gpio_keys
);

136 
	`©h79_ªgi°î_pci
();

137 
	}
}

139 
MIPS_MACHINE
(
ATH79_MACH_TL_WR841N_V1
, "TL-WR841N-v1.5", "TP-LINK TL-WR841N v1",

140 
é_wr841n_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr902ac-v1.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

28 
	#TL_WR902AC_V1_GPIO_LED_INTERNET
 12

	)

29 
	#TL_WR902AC_V1_GPIO_LED_LAN
 15

	)

30 
	#TL_WR902AC_V1_GPIO_LED_POWER
 13

	)

31 
	#TL_WR902AC_V1_GPIO_LED_USB
 4

	)

32 
	#TL_WR902AC_V1_GPIO_LED_WLAN2G
 11

	)

33 
	#TL_WR902AC_V1_GPIO_LED_WPS
 0

	)

35 
	#TL_WR902AC_V1_GPIO_BTN_RESET
 3

	)

36 
	#TL_WR902AC_V1_GPIO_BTN_SW1
 17

	)

37 
	#TL_WR902AC_V1_GPIO_BTN_SW2
 14

	)

38 
	#TL_WR902AC_V1_GPIO_BTN_WPS
 2

	)

40 
	#TL_WR902AC_V1_GPIO_USB_POWER
 1

	)

42 
	#TL_WR902AC_V1_KEYS_POLL_INTERVAL
 20

	)

43 
	#TL_WR902AC_V1_KEYS_DEBOUNCE_INTERVAL
 \

44 (3 * 
TL_WR902AC_V1_KEYS_POLL_INTERVAL
)

	)

46 
gpio_Àd
 
	gé_wr902ac_v1_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "tl-wr902ac-v1:green:internet",

49 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_INTERNET
,

50 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "tl-wr902ac-v1:green:lan",

53 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_LAN
,

54 .
	ga˘ive_low
 = 0,

56 .
	g«me
 = "tl-wr902ac-v1:green:power",

57 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_POWER
,

58 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "tl-wr902ac-v1:green:usb",

61 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_USB
,

62 .
	ga˘ive_low
 = 0,

64 .
	g«me
 = "tl-wr902ac-v1:green:wlan2g",

65 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_WLAN2G
,

66 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "tl-wr902ac-v1:green:wps",

69 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_LED_WPS
,

70 .
	ga˘ive_low
 = 1,

74 
gpio_keys_buâ⁄
 
	gé_wr902ac_v1_gpio_keys
[] 
	g__öôd©a
 = {

76 .
desc
 = "reset",

77 .
	gty≥
 = 
EV_KEY
,

78 .
	gcode
 = 
KEY_RESTART
,

79 .
	gdeboun˚_öãrvÆ
 = 
TL_WR902AC_V1_KEYS_DEBOUNCE_INTERVAL
,

80 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_BTN_RESET
,

81 .
	ga˘ive_low
 = 1,

83 .
	gdesc
 = "sw1",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
BTN_0
,

86 .
	gdeboun˚_öãrvÆ
 = 
TL_WR902AC_V1_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_BTN_SW1
,

88 .
	ga˘ive_low
 = 1,

90 .
	gdesc
 = "sw2",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
BTN_1
,

93 .
	gdeboun˚_öãrvÆ
 = 
TL_WR902AC_V1_KEYS_DEBOUNCE_INTERVAL
,

94 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_BTN_SW2
,

95 .
	ga˘ive_low
 = 1,

97 .
	gdesc
 = "wps",

98 .
	gty≥
 = 
EV_KEY
,

99 .
	gcode
 = 
KEY_WPS_BUTTON
,

100 .
	gdeboun˚_öãrvÆ
 = 
TL_WR902AC_V1_KEYS_DEBOUNCE_INTERVAL
,

101 .
	ggpio
 = 
TL_WR902AC_V1_GPIO_BTN_WPS
,

102 .
	ga˘ive_low
 = 1,

106 
__öô
 
	$é_wr902ac_v1_£tup
()

108 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7f0000);

109 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f750008);

111 
	`©h79_ªgi°î_m25p80
(
NULL
);

113 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

114 
	`©h79_ªgi°î_mdio
(0, 0x0);

117 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

118 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

119 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

120 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

121 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

123 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

124 
	`©h79_ªgi°î_ëh
(0);

126 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr902ac_v1_Àds_gpio
),

127 
é_wr902ac_v1_Àds_gpio
);

129 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR902AC_V1_KEYS_POLL_INTERVAL
,

130 
	`ARRAY_SIZE
(
é_wr902ac_v1_gpio_keys
),

131 
é_wr902ac_v1_gpio_keys
);

133 
	`gpio_ªque°_⁄e
(
TL_WR902AC_V1_GPIO_USB_POWER
,

134 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

137 
	`©h79_ªgi°î_usb
();

139 
	`©h79_ªgi°î_wmac
(
¨t
 + 0x1000, 
mac
);

141 
	`≠91_pci_öô
(
¨t
 + 0x5000, 
NULL
);

142 
	}
}

144 
MIPS_MACHINE
(
ATH79_MACH_TL_WR902AC_V1
, "TL-WR902AC-V1", "TP-LINK TL-WR902AC v1",

145 
é_wr902ac_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr940n-v4.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

26 
	#TL_WR940N_V4_GPIO_LED_QSS
 3

	)

27 
	#TL_WR940N_V4_GPIO_LED_WAN
 14

	)

28 
	#TL_WR940N_V4_GPIO_LED_WAN_RED
 15

	)

29 
	#TL_WR940N_V4_GPIO_LED_LAN4
 4

	)

30 
	#TL_WR940N_V4_GPIO_LED_LAN3
 18

	)

31 
	#TL_WR940N_V4_GPIO_LED_LAN2
 6

	)

32 
	#TL_WR940N_V4_GPIO_LED_LAN1
 8

	)

33 
	#TL_WR940N_V4_GPIO_LED_WLAN
 7

	)

34 
	#TL_WR940N_V4_GPIO_LED_SYSTEM
 5

	)

36 
	#TL_WR940N_V6_GPIO_LED_DIAG_ORANGE
 15

	)

37 
	#TL_WR940N_V6_GPIO_LED_WAN_BLUE
 14

	)

39 
	#TL_WR940N_V4_GPIO_BTN_RESET
 1

	)

40 
	#TL_WR940N_V4_GPIO_BTN_RFKILL
 2

	)

42 
	#TL_WR940N_KEYS_POLL_INTERVAL
 20

	)

43 
	#TL_WR940N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR940N_KEYS_POLL_INTERVAL
)

	)

46 
gpio_Àd
 
	gé_wr940n_v4_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "tp-link:blue:qss",

49 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_QSS
,

50 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "tp-link:blue:wan",

54 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_WAN
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "tp-link:red:wan",

59 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_WAN_RED
,

60 .
	ga˘ive_low
 = 0,

63 .
	g«me
 = "tp-link:blue:lan1",

64 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_LAN1
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "tp-link:blue:lan2",

69 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_LAN2
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "tp-link:blue:lan3",

74 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_LAN3
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "tp-link:blue:lan4",

79 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_LAN4
,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "tp-link:blue:wlan",

84 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_WLAN
,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "tp-link:blue:system",

89 .
	ggpio
 = 
TL_WR940N_V4_GPIO_LED_SYSTEM
,

90 .
	ga˘ive_low
 = 1,

94 
gpio_keys_buâ⁄
 
	gé_wr940n_v4_gpio_keys
[] 
	g__öôd©a
 = {

96 .
desc
 = "Reset button",

97 .
	gty≥
 = 
EV_KEY
,

98 .
	gcode
 = 
KEY_RESTART
,

99 .
	gdeboun˚_öãrvÆ
 = 
TL_WR940N_KEYS_DEBOUNCE_INTERVAL
,

100 .
	ggpio
 = 
TL_WR940N_V4_GPIO_BTN_RESET
,

101 .
	ga˘ive_low
 = 1,

103 .
	gdesc
 = "RFKILL button",

104 .
	gty≥
 = 
EV_KEY
,

105 .
	gcode
 = 
KEY_RFKILL
,

106 .
	gdeboun˚_öãrvÆ
 = 
TL_WR940N_KEYS_DEBOUNCE_INTERVAL
,

107 .
	ggpio
 = 
TL_WR940N_V4_GPIO_BTN_RFKILL
,

108 .
	ga˘ive_low
 = 1,

112 
gpio_Àd
 
	gé_wr940n_v6_Àds_gpio
[] 
	g__öôd©a
 = {

114 .
«me
 = "tp-link:blue:wan",

115 .
	ggpio
 = 
TL_WR940N_V6_GPIO_LED_WAN_BLUE
,

116 .
	ga˘ive_low
 = 1,

119 .
	g«me
 = "tp-link:orange:diag",

120 .
	ggpio
 = 
TL_WR940N_V6_GPIO_LED_DIAG_ORANGE
,

121 .
	ga˘ive_low
 = 0,

126 c⁄° *
	gé_wr940n_∑π_¥obes
[] = {

128 
NULL
,

131 
Êash_∂©f‹m_d©a
 
	gé_wr940n_Êash_d©a
 = {

132 .
∑π_¥obes
 = 
é_wr940n_∑π_¥obes
,

136 
__öô
 
	$é_wr940n_£tup
()

138 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

139 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

141 
	`©h79_ªgi°î_m25p80
(&
é_wr940n_Êash_d©a
);

143 
	`©h79_ªgi°î_mdio
(0, 0x0);

145 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

146 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

148 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

150 
	`©h79_ªgi°î_ëh
(0);

151 
	`©h79_ªgi°î_ëh
(1);

153 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

155 
	}
}

157 
__öô
 
	$é_wr940n_v4_£tup
()

159 
	`é_wr940n_£tup
();

161 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr940n_v4_Àds_gpio
),

162 
é_wr940n_v4_Àds_gpio
);

164 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR940N_KEYS_POLL_INTERVAL
,

165 
	`ARRAY_SIZE
(
é_wr940n_v4_gpio_keys
),

166 
é_wr940n_v4_gpio_keys
);

167 
	}
}

169 
__öô
 
	$é_wr940n_v6_£tup
()

171 
	`é_wr940n_£tup
();

173 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr940n_v6_Àds_gpio
),

174 
é_wr940n_v6_Àds_gpio
);

176 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR940N_KEYS_POLL_INTERVAL
,

177 
	`ARRAY_SIZE
(
é_wr940n_v4_gpio_keys
),

178 
é_wr940n_v4_gpio_keys
);

179 
	}
}

181 
MIPS_MACHINE
(
ATH79_MACH_TL_WR940N_V4
, "TL-WR940N-v4", "TP-LINK TL-WR940N v4",

182 
é_wr940n_v4_£tup
);

183 
MIPS_MACHINE
(
ATH79_MACH_TL_WR940N_V6
, "TL-WR940N-v6", "TP-LINK TL-WR940N v6",

184 
é_wr940n_v6_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr941nd-v6.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

26 
	#TL_WR941ND_V6_GPIO_LED_QSS
 3

	)

27 
	#TL_WR941ND_V6_GPIO_LED_WAN
 14

	)

28 
	#TL_WR941ND_V6_GPIO_LED_WAN_RED
 15

	)

29 
	#TL_WR941ND_V6_GPIO_LED_LAN1
 7

	)

30 
	#TL_WR941ND_V6_GPIO_LED_LAN2
 6

	)

31 
	#TL_WR941ND_V6_GPIO_LED_LAN3
 5

	)

32 
	#TL_WR941ND_V6_GPIO_LED_LAN4
 4

	)

33 
	#TL_WR941ND_V6_GPIO_LED_WLAN
 8

	)

34 
	#TL_WR941ND_V6_GPIO_LED_SYSTEM
 18

	)

36 
	#TL_WR941ND_V6_GPIO_BTN_RESET
 1

	)

37 
	#TL_WR941ND_V6_GPIO_BTN_RFKILL
 2

	)

39 
	#TL_WR941ND_V6_KEYS_POLL_INTERVAL
 20

	)

40 
	#TL_WR941ND_V6_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR941ND_V6_KEYS_POLL_INTERVAL
)

	)

43 
gpio_Àd
 
	gé_wr941nd_v6_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "tp-link:blue:qss",

46 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_QSS
,

47 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "tp-link:blue:wan",

51 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_WAN
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "tp-link:red:wan",

56 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_WAN_RED
,

57 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "tp-link:blue:lan1",

61 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_LAN1
,

62 .
	ga˘ive_low
 = 1,

65 .
	g«me
 = "tp-link:blue:lan2",

66 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_LAN2
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "tp-link:blue:lan3",

71 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_LAN3
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "tp-link:blue:lan4",

76 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_LAN4
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "tp-link:blue:wlan",

81 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_WLAN
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "tp-link:blue:system",

86 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_LED_SYSTEM
,

87 .
	ga˘ive_low
 = 1,

91 
gpio_keys_buâ⁄
 
	gé_wr941nd_v6_gpio_keys
[] 
	g__öôd©a
 = {

93 .
desc
 = "Reset button",

94 .
	gty≥
 = 
EV_KEY
,

95 .
	gcode
 = 
KEY_RESTART
,

96 .
	gdeboun˚_öãrvÆ
 = 
TL_WR941ND_V6_KEYS_DEBOUNCE_INTERVAL
,

97 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_BTN_RESET
,

98 .
	ga˘ive_low
 = 1,

100 .
	gdesc
 = "RFKILL button",

101 .
	gty≥
 = 
EV_KEY
,

102 .
	gcode
 = 
KEY_RFKILL
,

103 .
	gdeboun˚_öãrvÆ
 = 
TL_WR941ND_V6_KEYS_DEBOUNCE_INTERVAL
,

104 .
	ggpio
 = 
TL_WR941ND_V6_GPIO_BTN_RFKILL
,

105 .
	ga˘ive_low
 = 1,

110 c⁄° *
	gé_wr941n_v6_∑π_¥obes
[] = {

112 
NULL
,

115 
Êash_∂©f‹m_d©a
 
	gé_wr941n_v6_Êash_d©a
 = {

116 .
∑π_¥obes
 = 
é_wr941n_v6_∑π_¥obes
,

120 
__öô
 
	$é_wr941nd_v6_£tup
()

122 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

123 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

125 
	`©h79_ªgi°î_m25p80
(&
é_wr941n_v6_Êash_d©a
);

127 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr941nd_v6_Àds_gpio
),

128 
é_wr941nd_v6_Àds_gpio
);

130 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR941ND_V6_KEYS_POLL_INTERVAL
,

131 
	`ARRAY_SIZE
(
é_wr941nd_v6_gpio_keys
),

132 
é_wr941nd_v6_gpio_keys
);

134 
	`©h79_ªgi°î_mdio
(0, 0x0);

136 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

137 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, -1);

139 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

141 
	`©h79_ªgi°î_ëh
(0);

142 
	`©h79_ªgi°î_ëh
(1);

144 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

146 
	}
}

148 
MIPS_MACHINE
(
ATH79_MACH_TL_WR941ND_V6
, "TL-WR941ND-v6", "TP-LINK TL-WR941N/ND v6",

149 
é_wr941nd_v6_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr941nd.c

11 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-dß.h
"

16 
	~"dev-ëh.h
"

17 
	~"dev-gpio-buâ⁄s.h
"

18 
	~"dev-Àds-gpio.h
"

19 
	~"dev-m25p80.h
"

20 
	~"dev-wmac.h
"

21 
	~"machty≥s.h
"

23 
	#TL_WR941ND_GPIO_LED_SYSTEM
 2

	)

24 
	#TL_WR941ND_GPIO_LED_QSS_RED
 4

	)

25 
	#TL_WR941ND_GPIO_LED_QSS_GREEN
 5

	)

26 
	#TL_WR941ND_GPIO_LED_WLAN
 9

	)

28 
	#TL_WR941ND_GPIO_BTN_RESET
 3

	)

29 
	#TL_WR941ND_GPIO_BTN_QSS
 7

	)

31 
	#TL_WR941ND_KEYS_POLL_INTERVAL
 20

	)

32 
	#TL_WR941ND_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TL_WR941ND_KEYS_POLL_INTERVAL
)

	)

34 c⁄° *
	gé_wr941nd_∑π_¥obes
[] = {

36 
NULL
,

39 
Êash_∂©f‹m_d©a
 
	gé_wr941nd_Êash_d©a
 = {

40 .
∑π_¥obes
 = 
é_wr941nd_∑π_¥obes
,

43 
gpio_Àd
 
	gé_wr941nd_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "tp-link:green:system",

46 .
	ggpio
 = 
TL_WR941ND_GPIO_LED_SYSTEM
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "tp-link:red:qss",

50 .
	ggpio
 = 
TL_WR941ND_GPIO_LED_QSS_RED
,

52 .
	g«me
 = "tp-link:green:qss",

53 .
	ggpio
 = 
TL_WR941ND_GPIO_LED_QSS_GREEN
,

55 .
	g«me
 = "tp-link:green:wlan",

56 .
	ggpio
 = 
TL_WR941ND_GPIO_LED_WLAN
,

57 .
	ga˘ive_low
 = 1,

61 
gpio_keys_buâ⁄
 
	gé_wr941nd_gpio_keys
[] 
	g__öôd©a
 = {

63 .
desc
 = "reset",

64 .
	gty≥
 = 
EV_KEY
,

65 .
	gcode
 = 
KEY_RESTART
,

66 .
	gdeboun˚_öãrvÆ
 = 
TL_WR941ND_KEYS_DEBOUNCE_INTERVAL
,

67 .
	ggpio
 = 
TL_WR941ND_GPIO_BTN_RESET
,

68 .
	ga˘ive_low
 = 1,

70 .
	gdesc
 = "qss",

71 .
	gty≥
 = 
EV_KEY
,

72 .
	gcode
 = 
KEY_WPS_BUTTON
,

73 .
	gdeboun˚_öãrvÆ
 = 
TL_WR941ND_KEYS_DEBOUNCE_INTERVAL
,

74 .
	ggpio
 = 
TL_WR941ND_GPIO_BTN_QSS
,

75 .
	ga˘ive_low
 = 1,

79 
dß_chù_d©a
 
	gé_wr941nd_dß_chù
 = {

80 .
p‹t_«mes
[0] = "wan",

81 .
	gp‹t_«mes
[1] = "lan1",

82 .
	gp‹t_«mes
[2] = "lan2",

83 .
	gp‹t_«mes
[3] = "lan3",

84 .
	gp‹t_«mes
[4] = "lan4",

85 .
	gp‹t_«mes
[5] = "cpu",

88 
dß_∂©f‹m_d©a
 
	gé_wr941nd_dß_d©a
 = {

89 .
ƒ_chùs
 = 1,

90 .
	gchù
 = &
é_wr941nd_dß_chù
,

93 
__öô
 
	$é_wr941nd_£tup
()

95 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

96 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

98 
	`©h79_ªgi°î_mdio
(0, 0x0);

100 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

101 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

102 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

103 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

105 
	`©h79_ªgi°î_ëh
(0);

106 
	`©h79_ªgi°î_dß
(&
©h79_ëh0_devi˚
.
dev
, &
©h79_mdio0_devi˚
.dev,

107 &
é_wr941nd_dß_d©a
);

109 
	`©h79_ªgi°î_m25p80
(&
é_wr941nd_Êash_d©a
);

111 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr941nd_Àds_gpio
),

112 
é_wr941nd_Àds_gpio
);

114 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR941ND_KEYS_POLL_INTERVAL
,

115 
	`ARRAY_SIZE
(
é_wr941nd_gpio_keys
),

116 
é_wr941nd_gpio_keys
);

117 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

118 
	}
}

120 
MIPS_MACHINE
(
ATH79_MACH_TL_WR941ND
, "TL-WR941ND", "TP-LINK TL-WR941ND",

121 
é_wr941nd_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tl-wr942n-v1.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/©h9k_∂©f‹m.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/•i/•i_gpio.h
>

18 
	~<löux/•i/74x164.h
>

20 
	~"comm⁄.h
"

21 
	~"dev-m25p80.h
"

22 
	~"machty≥s.h
"

23 
	~"dev-ëh.h
"

24 
	~"dev-gpio-buâ⁄s.h
"

25 
	~"dev-Àds-gpio.h
"

26 
	~"dev-•i.h
"

27 
	~"dev-usb.h
"

28 
	~"dev-wmac.h
"

29 
	~"nvøm.h
"

31 
	#TL_WR942N_V1_KEYS_POLL_INTERVAL
 20

	)

32 
	#TL_WR942N_V1_KEYS_DEBOUNCE_INTERVAL
 \

33 (3 * 
TL_WR942N_V1_KEYS_POLL_INTERVAL
)

	)

35 
	#TL_WR942N_V1_GPIO_BTN_RESET
 1

	)

36 
	#TL_WR942N_V1_GPIO_BTN_RFKILL
 2

	)

38 
	#TL_WR942N_V1_GPIO_UART_TX
 4

	)

39 
	#TL_WR942N_V1_GPIO_UART_RX
 5

	)

41 
	#TL_WR942N_V1_GPIO_LED_USB2
 14

	)

42 
	#TL_WR942N_V1_GPIO_LED_USB1
 15

	)

44 
	#TL_WR942N_V1_GPIO_SHIFT_OE
 16

	)

45 
	#TL_WR942N_V1_GPIO_SHIFT_SER
 17

	)

46 
	#TL_WR942N_V1_GPIO_SHIFT_SRCLK
 18

	)

47 
	#TL_WR942N_V1_GPIO_SHIFT_SRCLR
 19

	)

48 
	#TL_WR942N_V1_GPIO_SHIFT_RCLK
 20

	)

49 
	#TL_WR942N_V1_GPIO_LED_WPS
 21

	)

50 
	#TL_WR942N_V1_GPIO_LED_STATUS
 22

	)

52 
	#TL_WR942N_V1_74HC_GPIO_BASE
 32

	)

53 
	#TL_WR942N_V1_74HC_GPIO_LED_LAN4
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 0)

	)

54 
	#TL_WR942N_V1_74HC_GPIO_LED_LAN3
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 1)

	)

55 
	#TL_WR942N_V1_74HC_GPIO_LED_LAN2
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 2)

	)

56 
	#TL_WR942N_V1_74HC_GPIO_LED_LAN1
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 3)

	)

57 
	#TL_WR942N_V1_74HC_GPIO_LED_WAN_GREEN
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 4)

	)

58 
	#TL_WR942N_V1_74HC_GPIO_LED_WAN_AMBER
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 5)

	)

59 
	#TL_WR942N_V1_74HC_GPIO_LED_WLAN
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 6)

	)

60 
	#TL_WR942N_V1_74HC_GPIO_HUB_RESET
 (
TL_WR942N_V1_74HC_GPIO_BASE
 + 7Ë

	)

62 
	#TL_WR942N_V1_SSR_BIT_0
 0

	)

63 
	#TL_WR942N_V1_SSR_BIT_1
 1

	)

64 
	#TL_WR942N_V1_SSR_BIT_2
 2

	)

65 
	#TL_WR942N_V1_SSR_BIT_3
 3

	)

66 
	#TL_WR942N_V1_SSR_BIT_4
 4

	)

67 
	#TL_WR942N_V1_SSR_BIT_5
 5

	)

68 
	#TL_WR942N_V1_SSR_BIT_6
 6

	)

69 
	#TL_WR942N_V1_SSR_BIT_7
 7

	)

71 
	#TL_WR942N_V1_WMAC_CALDATA_OFFSET
 0x1000

	)

72 
	#TL_WR942N_V1_DEFAULT_MAC_ADDR
 0x1„40008

	)

73 
	#TL_WR942N_V1_DEFAULT_MAC_SIZE
 0x200

	)

75 
	#GPIO_IN_ENABLE0_UART_SIN_LSB
 8

	)

76 
	#GPIO_IN_ENABLE0_UART_SIN_MASK
 0x0000ff00

	)

78 
gpio_Àd
 
	gé_wr942n_v1_Àds_gpio
[] 
	g__öôd©a
 = {

80 .
«me
 = "tl-wr942n-v1:green:status",

81 .
	ggpio
 = 
TL_WR942N_V1_GPIO_LED_STATUS
,

82 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "tl-wr942n-v1:green:wlan",

85 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_WLAN
,

86 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "tl-wr942n-v1:green:lan1",

89 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_LAN1
,

90 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "tl-wr942n-v1:green:lan2",

93 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_LAN2
,

94 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "tl-wr942n-v1:green:lan3",

97 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_LAN3
,

98 .
	ga˘ive_low
 = 1,

100 .
	g«me
 = "tl-wr942n-v1:green:lan4",

101 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_LAN4
,

102 .
	ga˘ive_low
 = 1,

104 .
	g«me
 = "tl-wr942n-v1:green:wan",

105 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_WAN_GREEN
,

106 .
	ga˘ive_low
 = 1,

108 .
	g«me
 = "tl-wr942n-v1:amber:wan",

109 .
	ggpio
 = 
TL_WR942N_V1_74HC_GPIO_LED_WAN_AMBER
,

110 .
	ga˘ive_low
 = 1,

112 .
	g«me
 = "tl-wr942n-v1:green:wps",

113 .
	ggpio
 = 
TL_WR942N_V1_GPIO_LED_WPS
,

114 .
	ga˘ive_low
 = 1,

116 .
	g«me
 = "tl-wr942n-v1:green:usb1",

117 .
	ggpio
 = 
TL_WR942N_V1_GPIO_LED_USB1
,

118 .
	ga˘ive_low
 = 1,

120 .
	g«me
 = "tl-wr942n-v1:green:usb2",

121 .
	ggpio
 = 
TL_WR942N_V1_GPIO_LED_USB2
,

122 .
	ga˘ive_low
 = 1,

126 
gpio_keys_buâ⁄
 
	gé_wr942n_v1_gpio_keys
[] 
	g__öôd©a
 = {

128 .
desc
 = "Reset button",

129 .
	gty≥
 = 
EV_KEY
,

130 .
	gcode
 = 
KEY_RESTART
,

131 .
	gdeboun˚_öãrvÆ
 = 
TL_WR942N_V1_KEYS_DEBOUNCE_INTERVAL
,

132 .
	ggpio
 = 
TL_WR942N_V1_GPIO_BTN_RESET
,

133 .
	ga˘ive_low
 = 1,

135 .
	gdesc
 = "RFKILL button",

136 .
	gty≥
 = 
EV_KEY
,

137 .
	gcode
 = 
KEY_RFKILL
,

138 .
	gdeboun˚_öãrvÆ
 = 
TL_WR942N_V1_KEYS_DEBOUNCE_INTERVAL
,

139 .
	ggpio
 = 
TL_WR942N_V1_GPIO_BTN_RFKILL
,

140 .
	ga˘ive_low
 = 1,

144 
•i_gpio_∂©f‹m_d©a
 
	gé_wr942n_v1_•i_d©a
 = {

145 .
sck
 = 
TL_WR942N_V1_GPIO_SHIFT_SRCLK
,

146 .
	gmiso
 = 
SPI_GPIO_NO_MISO
,

147 .
	gmosi
 = 
TL_WR942N_V1_GPIO_SHIFT_SER
,

148 .
	gnum_chù£À˘
 = 1,

151 
u8
 
	gé_wr942n_v1_s§_öôd©a
[] = {

152 
BIT
(
TL_WR942N_V1_SSR_BIT_7
) |

153 
BIT
(
TL_WR942N_V1_SSR_BIT_6
) |

154 
BIT
(
TL_WR942N_V1_SSR_BIT_5
) |

155 
BIT
(
TL_WR942N_V1_SSR_BIT_4
) |

156 
BIT
(
TL_WR942N_V1_SSR_BIT_3
) |

157 
BIT
(
TL_WR942N_V1_SSR_BIT_2
) |

158 
BIT
(
TL_WR942N_V1_SSR_BIT_1
) |

159 
BIT
(
TL_WR942N_V1_SSR_BIT_0
)

162 
gí_74x164_chù_∂©f‹m_d©a
 
	gé_wr942n_v1_s§_d©a
 = {

163 .
ba£
 = 
TL_WR942N_V1_74HC_GPIO_BASE
,

164 .
	gnum_ªgi°îs
 = 
ARRAY_SIZE
(
é_wr942n_v1_s§_öôd©a
),

165 .
	göô_d©a
 = 
é_wr942n_v1_s§_öôd©a
,

168 
∂©f‹m_devi˚
 
	gé_wr942n_v1_•i_devi˚
 = {

169 .
«me
 = "spi_gpio",

170 .
	gid
 = 1,

171 .
	gdev
 = {

172 .
∂©f‹m_d©a
 = &
é_wr942n_v1_•i_d©a
,

176 
•i_bﬂrd_öfo
 
	gé_wr942n_v1_•i_öfo
[] = {

178 .
bus_num
 = 1,

179 .
	gchù_£À˘
 = 0,

180 .
	gmax_•ìd_hz
 = 10000000,

181 .
	gmodÆüs
 = "74x164",

182 .
	g∂©f‹m_d©a
 = &
é_wr942n_v1_s§_d©a
,

183 .
	gc⁄åﬁÀr_d©a
 = (*Ë
TL_WR942N_V1_GPIO_SHIFT_RCLK
,

187 
	$é_wr942n_v1_gë_mac
(c⁄° *
«me
, *
mac
)

189 
u8
 *
nvøm
 = (u8 *Ë
	`KSEG1ADDR
(
TL_WR942N_V1_DEFAULT_MAC_ADDR
);

190 
îr
;

192 
îr
 = 
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
TL_WR942N_V1_DEFAULT_MAC_SIZE
,

193 
«me
, 
mac
);

195 i‡(
îr
)

196 
	`¥_îr
("nÿMACáddªs†found f‹ %s\n", 
«me
);

197 
	}
}

199 
__öô
 
	$é_wr942n_v1_£tup
()

201 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

202 
u8
 
tmpmac
[
ETH_ALEN
];

203 
__iomem
 *
ba£
;

204 
u32
 
t
;

206 
	`©h79_ªgi°î_m25p80
(
NULL
);

208 
	`•i_ªgi°î_bﬂrd_öfo
(
é_wr942n_v1_•i_öfo
,

209 
	`ARRAY_SIZE
(
é_wr942n_v1_•i_öfo
));

210 
	`∂©f‹m_devi˚_ªgi°î
(&
é_wr942n_v1_•i_devi˚
);

213 
ba£
 = 
	`i‹em≠
(
AR71XX_GPIO_BASE
, 
AR71XX_GPIO_SIZE
);

215 
t
 = 
	`__øw_ªadl
(
ba£
 + 
QCA956X_GPIO_REG_IN_ENABLE0
);

216 i‡(((
t
 & 
GPIO_IN_ENABLE0_UART_SIN_MASK
)

217 >> 
GPIO_IN_ENABLE0_UART_SIN_LSB
Ë=
TL_WR942N_V1_GPIO_LED_USB1
) {

218 
	`¥_w¨n
("Active UART detected on USBLED's GPIOs!\n");

220 
é_wr942n_v1_Àds_gpio
[9].
gpio
 = 
TL_WR942N_V1_GPIO_UART_TX
;

221 
é_wr942n_v1_Àds_gpio
[10].
gpio
 = 
TL_WR942N_V1_GPIO_UART_RX
;

224 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
é_wr942n_v1_Àds_gpio
),

225 
é_wr942n_v1_Àds_gpio
);

227 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TL_WR942N_V1_KEYS_POLL_INTERVAL
,

228 
	`ARRAY_SIZE
(
é_wr942n_v1_gpio_keys
),

229 
é_wr942n_v1_gpio_keys
);

231 
	`é_wr942n_v1_gë_mac
("MAC:", 
tmpmac
);

234 
	`©h79_£tup_qˇ956x_ëh_cfg
(
QCA956X_ETH_CFG_SW_PHY_SWAP
 |

235 
QCA956X_ETH_CFG_SW_PHY_ADDR_SWAP
);

237 
	`©h79_ªgi°î_mdio
(0, 0x0);

238 
	`©h79_ªgi°î_mdio
(1, 0x0);

241 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
tmpmac
, 1);

242 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

243 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

244 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

247 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

248 
	`©h79_ªgi°î_ëh
(0);

251 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

252 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
tmpmac
, 0);

253 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

254 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

257 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(0);

258 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

259 
	`©h79_ªgi°î_ëh
(1);

261 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TL_WR942N_V1_WMAC_CALDATA_OFFSET
, 
tmpmac
);

263 
	`©h79_ªgi°î_usb
();

265 
	`gpio_ªque°_⁄e
(
TL_WR942N_V1_74HC_GPIO_HUB_RESET
,

266 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

269 
	`gpio_ªque°_⁄e
(
TL_WR942N_V1_GPIO_SHIFT_OE
,

270 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

273 
	`gpio_ªque°_⁄e
(
TL_WR942N_V1_GPIO_SHIFT_SRCLR
,

274 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

276 
	}
}

278 
MIPS_MACHINE
(
ATH79_MACH_TL_WR942N_V1
, "TL-WR942N-V1", "TP-LINK TL-WR942N v1",

279 
é_wr942n_v1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ts-d084.c

13 
	~<löux/gpio.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-usb.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#TS_D084_GPIO_LED_SYSTEM
 0

	)

26 
	#TS_D084_GPIO_BTN_RESET
 12

	)

29 
	#TS_D084_KEYS_POLL_INTERVAL
 20

	)

30 
	#TS_D084_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TS_D084_KEYS_POLL_INTERVAL
)

	)

32 c⁄° *
	gts_d084_∑π_¥obes
[] = {

34 
NULL
,

37 
Êash_∂©f‹m_d©a
 
	gts_d084_Êash_d©a
 = {

38 .
∑π_¥obes
 = 
ts_d084_∑π_¥obes
,

41 
gpio_Àd
 
	gts_d084_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "ts-d084:blue:system",

44 .
	ggpio
 = 
TS_D084_GPIO_LED_SYSTEM
,

45 .
	ga˘ive_low
 = 0,

49 
gpio_keys_buâ⁄
 
	gts_d084_gpio_keys
[] 
	g__öôd©a
 = {

51 .
desc
 = "reset",

52 .
	gty≥
 = 
EV_KEY
,

53 .
	gcode
 = 
KEY_RESTART
,

54 .
	gdeboun˚_öãrvÆ
 = 
TS_D084_KEYS_DEBOUNCE_INTERVAL
,

55 .
	ggpio
 = 
TS_D084_GPIO_BTN_RESET
,

56 .
	ga˘ive_low
 = 0,

60 
__öô
 
	$ts_d084_£tup
()

62 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f01fc00);

63 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

66 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

68 
	`©h79_ªgi°î_m25p80
(&
ts_d084_Êash_d©a
);

69 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ts_d084_Àds_gpio
),

70 
ts_d084_Àds_gpio
);

71 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TS_D084_KEYS_POLL_INTERVAL
,

72 
	`ARRAY_SIZE
(
ts_d084_gpio_keys
),

73 
ts_d084_gpio_keys
);

75 
	`©h79_ªgi°î_usb
();

77 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

79 
	`©h79_ªgi°î_mdio
(0, 0x0);

80 
	`©h79_ªgi°î_ëh
(0);

82 
	`©h79_ªgi°î_wmac
(
ì
, 
mac
);

83 
	}
}

85 
MIPS_MACHINE
(
ATH79_MACH_TS_D084
, "TS-D084", "PISEN TS-D084",

86 
ts_d084_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-tube2h.c

11 
	~<löux/gpio.h
>

13 
	~<asm/mach-©h79/©h79.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~"comm⁄.h
"

17 
	~"dev-ëh.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"dev-m25p80.h
"

21 
	~"dev-wmac.h
"

22 
	~"machty≥s.h
"

24 
	#TUBE2H_GPIO_LED_SIGNAL4
 0

	)

25 
	#TUBE2H_GPIO_LED_SIGNAL3
 1

	)

26 
	#TUBE2H_GPIO_LED_SIGNAL2
 13

	)

27 
	#TUBE2H_GPIO_LED_LAN
 17

	)

28 
	#TUBE2H_GPIO_LED_SIGNAL1
 27

	)

29 
	#TUBE2H_GPIO_EXT_LNA
 28

	)

31 
	#TUBE2H_GPIO_WDT_EN
 22

	)

32 
	#TUBE2H_GPIO_WDT_IN
 18

	)

34 
	#TUBE2H_GPIO_BTN_RESET
 12

	)

36 
	#TUBE2H_KEYS_POLL_INTERVAL
 20

	)

37 
	#TUBE2H_KEYS_DEBOUNCE_INTERVAL
 (3 * 
TUBE2H_KEYS_POLL_INTERVAL
)

	)

39 
	#TUBE2H_ART_ADDRESS
 0x1fff0000

	)

40 
	#TUBE2H_LAN_MAC_OFFSET
 0x06

	)

41 
	#TUBE2H_CALDATA_OFFSET
 0x1000

	)

43 
gpio_Àd
 
	gtube2h_Àds_gpio
[] 
	g__öôd©a
 = {

45 .
«me
 = "alfa:blue:lan",

46 .
	ggpio
 = 
TUBE2H_GPIO_LED_LAN
,

47 .
	ga˘ive_low
 = 1,

50 .
	g«me
 = "alfa:red:signal1",

51 .
	ggpio
 = 
TUBE2H_GPIO_LED_SIGNAL1
,

52 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "alfa:orange:signal2",

56 .
	ggpio
 = 
TUBE2H_GPIO_LED_SIGNAL2
,

57 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "alfa:green:signal3",

61 .
	ggpio
 = 
TUBE2H_GPIO_LED_SIGNAL3
,

62 .
	ga˘ive_low
 = 0,

65 .
	g«me
 = "alfa:green:signal4",

66 .
	ggpio
 = 
TUBE2H_GPIO_LED_SIGNAL4
,

67 .
	ga˘ive_low
 = 0,

71 
gpio_keys_buâ⁄
 
	gtube2h_gpio_keys
[] 
	g__öôd©a
 = {

73 .
desc
 = "Reset button",

74 .
	gty≥
 = 
EV_KEY
,

75 .
	gcode
 = 
KEY_RESTART
,

76 .
	gdeboun˚_öãrvÆ
 = 
TUBE2H_KEYS_DEBOUNCE_INTERVAL
,

77 .
	ggpio
 = 
TUBE2H_GPIO_BTN_RESET
,

78 .
	ga˘ive_low
 = 1,

82 
__öô
 
	$tube2h_£tup
()

84 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(
TUBE2H_ART_ADDRESS
);

85 
u32
 
t
;

87 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_JTAG_DISABLE
 |

88 
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

89 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

90 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

91 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

92 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

95 
t
 = 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
);

96 
t
 |
AR933X_BOOTSTRAP_MDIO_GPIO_EN
;

97 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
, 
t
);

99 
	`gpio_ªque°_⁄e
(
TUBE2H_GPIO_EXT_LNA
,

100 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

103 
	`gpio_ªque°_⁄e
(
TUBE2H_GPIO_WDT_IN
,

104 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

107 
	`gpio_ªque°_⁄e
(
TUBE2H_GPIO_WDT_EN
,

108 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
,

111 
	`©h79_ªgi°î_wmac
(
¨t
 + 
TUBE2H_CALDATA_OFFSET
, 
NULL
);

113 
	`©h79_ªgi°î_m25p80
(
NULL
);

115 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
tube2h_Àds_gpio
),

116 
tube2h_Àds_gpio
);

117 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
TUBE2H_KEYS_POLL_INTERVAL
,

118 
	`ARRAY_SIZE
(
tube2h_gpio_keys
),

119 
tube2h_gpio_keys
);

121 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

122 
¨t
 + 
TUBE2H_LAN_MAC_OFFSET
, 0);

123 
	`©h79_ªgi°î_mdio
(0, 0x0);

124 
	`©h79_ªgi°î_ëh
(0);

125 
	}
}

127 
MIPS_MACHINE
(
ATH79_MACH_TUBE2H
, "TUBE2H", "ALFA NETWORK Tube2H",

128 
tube2h_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ubnt-unifiac.c

13 
	~<löux/öô.h
>

14 
	~<löux/pci.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

17 
	~<löux/ëhîdevi˚.h
>

19 
	~<asm/mach-©h79/©h79.h
>

20 
	~<asm/mach-©h79/úq.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~"comm⁄.h
"

27 
	~"dev-≠9x-pci.h
"

28 
	~"dev-ëh.h
"

29 
	~"dev-gpio-buâ⁄s.h
"

30 
	~"dev-Àds-gpio.h
"

31 
	~"dev-m25p80.h
"

32 
	~"dev-wmac.h
"

33 
	~"dev-usb.h
"

34 
	~"machty≥s.h
"

37 
	#UNIFIAC_KEYS_POLL_INTERVAL
 20

	)

38 
	#UNIFIAC_KEYS_DEBOUNCE_INTERVAL
 (3 * 
UNIFIAC_KEYS_POLL_INTERVAL
)

	)

40 
	#UNIFIAC_GPIO_LED_WHITE
 7

	)

41 
	#UNIFIAC_GPIO_LED_BLUE
 8

	)

43 
	#UNIFIAC_GPIO_BTN_RESET
 2

	)

45 
	#UNIFIAC_MAC0_OFFSET
 0x0000

	)

46 
	#UNIFIAC_WMAC_CALDATA_OFFSET
 0x1000

	)

47 
	#UNIFIAC_PCI_CALDATA_OFFSET
 0x5000

	)

50 
Êash_∂©f‹m_d©a
 
	gub¡_unifüc_Êash_d©a
 = {

52 .
ty≥
 = "mx25l12805d",

55 
gpio_Àd
 
	gub¡_unifüc_Àds_gpio
[] 
	g__öôd©a
 = {

57 .
«me
 = "ubnt:white:dome",

58 .
	ggpio
 = 
UNIFIAC_GPIO_LED_WHITE
,

59 .
	ga˘ive_low
 = 0,

61 .
	g«me
 = "ubnt:blue:dome",

62 .
	ggpio
 = 
UNIFIAC_GPIO_LED_BLUE
,

63 .
	ga˘ive_low
 = 0,

67 
gpio_keys_buâ⁄
 
	gub¡_unifüc_gpio_keys
[] 
	g__öôd©a
 = {

69 .
desc
 = "reset",

70 .
	gty≥
 = 
EV_KEY
,

71 .
	gcode
 = 
KEY_RESTART
,

72 .
	gdeboun˚_öãrvÆ
 = 
UNIFIAC_KEYS_DEBOUNCE_INTERVAL
,

73 .
	ggpio
 = 
UNIFIAC_GPIO_BTN_RESET
,

74 .
	ga˘ive_low
 = 1,

78 
__öô
 
	$ub¡_unifüc_lôe_£tup
()

80 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

82 
	`©h79_ªgi°î_m25p80
(&
ub¡_unifüc_Êash_d©a
);

85 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

86 
ì¥om
 + 
UNIFIAC_MAC0_OFFSET
, 0);

88 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

89 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

90 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

91 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x00001313;

93 
	`©h79_ªgi°î_mdio
(0, ~
	`BIT
(4));

94 
	`©h79_ªgi°î_ëh
(0);

97 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UNIFIAC_WMAC_CALDATA_OFFSET
, 
NULL
);

100 
	`≠91_pci_öô
(
ì¥om
 + 
UNIFIAC_PCI_CALDATA_OFFSET
, 
NULL
);

103 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_unifüc_Àds_gpio
),

104 
ub¡_unifüc_Àds_gpio
);

106 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UNIFIAC_KEYS_POLL_INTERVAL
,

107 
	`ARRAY_SIZE
(
ub¡_unifüc_gpio_keys
),

108 
ub¡_unifüc_gpio_keys
);

109 
	}
}

111 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UNIFIAC_LITE
, "UBNT-UF-AC-LITE",

112 "UbiquôòUniFi-AC-LITE/MESH", 
ub¡_unifüc_lôe_£tup
);

114 
¨8327_∑d_cfg
 
	gub¡_unifüc_¥o_¨8327_∑d0_cfg
 = {

115 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

116 .
	gsgmii_dñay_í
 = 
åue
,

119 
¨8327_∂©f‹m_d©a
 
	gub¡_unifüc_¥o_¨8327_d©a
 = {

120 .
∑d0_cfg
 = &
ub¡_unifüc_¥o_¨8327_∑d0_cfg
,

121 .
	gp‹t0_cfg
 = {

122 .
f‹˚_lök
 = 1,

123 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

124 .
	gdu∂ex
 = 1,

125 .
	gtx∑u£
 = 1,

126 .
	grx∑u£
 = 1,

131 
mdio_bﬂrd_öfo
 
	gub¡_unifüc_¥o_mdio0_öfo
[] = {

133 .
bus_id
 = "ag71xx-mdio.0",

134 .
	gmdio_addr
 = 0,

135 .
	g∂©f‹m_d©a
 = &
ub¡_unifüc_¥o_¨8327_d©a
,

139 
__öô
 
	$ub¡_unifüc_¥o_£tup
()

141 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

143 
	`©h79_ªgi°î_m25p80
(&
ub¡_unifüc_Êash_d©a
);

146 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

147 
ì¥om
 + 
UNIFIAC_MAC0_OFFSET
, 0);

149 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

150 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

151 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

153 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ub¡_unifüc_¥o_mdio0_öfo
,

154 
	`ARRAY_SIZE
(
ub¡_unifüc_¥o_mdio0_öfo
));

156 
	`©h79_ªgi°î_mdio
(0, 0x00);

157 
	`©h79_ªgi°î_ëh
(0);

160 
	`©h79_ªgi°î_usb
();

163 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UNIFIAC_WMAC_CALDATA_OFFSET
, 
NULL
);

166 
	`≠91_pci_öô
(
ì¥om
 + 
UNIFIAC_PCI_CALDATA_OFFSET
, 
NULL
);

169 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_unifüc_Àds_gpio
),

170 
ub¡_unifüc_Àds_gpio
);

172 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UNIFIAC_KEYS_POLL_INTERVAL
,

173 
	`ARRAY_SIZE
(
ub¡_unifüc_gpio_keys
),

174 
ub¡_unifüc_gpio_keys
);

175 
	}
}

178 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UNIFIAC_PRO
, "UBNT-UF-AC-PRO",

179 "UbiquôòUniFi-AC-PRO/MESH-PRO", 
ub¡_unifüc_¥o_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ubnt-xm.c

13 
	~<löux/öô.h
>

14 
	~<löux/pci.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<löux/ëhîdevi˚.h
>

19 
	~<löux/¨8216_∂©f‹m.h
>

20 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

22 
	~<asm/mach-©h79/©h79.h
>

23 
	~<asm/mach-©h79/úq.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~<löux/∂©f‹m_d©a/phy-©803x.h
>

28 
	~"comm⁄.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-usb.h
"

35 
	~"dev-wmac.h
"

36 
	~"machty≥s.h
"

38 
	#UBNT_XM_GPIO_LED_L1
 0

	)

39 
	#UBNT_XM_GPIO_LED_L2
 1

	)

40 
	#UBNT_XM_GPIO_LED_L3
 11

	)

41 
	#UBNT_XM_GPIO_LED_L4
 7

	)

43 
	#UBNT_XM_GPIO_BTN_RESET
 12

	)

45 
	#UBNT_XM_KEYS_POLL_INTERVAL
 20

	)

46 
	#UBNT_XM_KEYS_DEBOUNCE_INTERVAL
 (3 * 
UBNT_XM_KEYS_POLL_INTERVAL
)

	)

48 
	#UBNT_XM_EEPROM_ADDR
 0x1fff1000

	)

50 
gpio_Àd
 
	gub¡_xm_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "ubnt:red:link1",

53 .
	ggpio
 = 
UBNT_XM_GPIO_LED_L1
,

54 .
	ga˘ive_low
 = 0,

56 .
	g«me
 = "ubnt:orange:link2",

57 .
	ggpio
 = 
UBNT_XM_GPIO_LED_L2
,

58 .
	ga˘ive_low
 = 0,

60 .
	g«me
 = "ubnt:green:link3",

61 .
	ggpio
 = 
UBNT_XM_GPIO_LED_L3
,

62 .
	ga˘ive_low
 = 0,

64 .
	g«me
 = "ubnt:green:link4",

65 .
	ggpio
 = 
UBNT_XM_GPIO_LED_L4
,

66 .
	ga˘ive_low
 = 0,

70 
gpio_keys_buâ⁄
 
	gub¡_xm_gpio_keys
[] 
	g__öôd©a
 = {

72 .
desc
 = "reset",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_RESTART
,

75 .
	gdeboun˚_öãrvÆ
 = 
UBNT_XM_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
UBNT_XM_GPIO_BTN_RESET
,

77 .
	ga˘ive_low
 = 1,

81 
	#UBNT_M_WAN_PHYMASK
 
	`BIT
(4)

	)

83 
__öô
 
	$ub¡_xm_öô
()

85 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(
UBNT_XM_EEPROM_ADDR
);

86 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

87 
u8
 *
mac2
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000 + 
ETH_ALEN
);

89 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_xm_Àds_gpio
),

90 
ub¡_xm_Àds_gpio
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

94 
ub¡_xm_gpio_keys
);

96 
	`©h79_ªgi°î_m25p80
(
NULL
);

97 
	`≠91_pci_öô
(
ì¥om
, 
NULL
);

99 
	`©h79_ªgi°î_mdio
(0, ~
UBNT_M_WAN_PHYMASK
);

100 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

101 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

102 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_100
;

103 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

104 
	`©h79_ªgi°î_ëh
(0);

105 
	}
}

107 
MIPS_MACHINE
(
ATH79_MACH_UBNT_XM
,

110 
ub¡_xm_öô
);

112 
MIPS_MACHINE
(
ATH79_MACH_UBNT_BULLET_M
, "UBNT-BM", "Ubiquiti Bullet M",

113 
ub¡_xm_öô
);

115 
__öô
 
	$ub¡_rockë_m_£tup
()

117 
	`ub¡_xm_öô
();

118 
	`©h79_ªgi°î_usb
();

119 
	}
}

121 
MIPS_MACHINE
(
ATH79_MACH_UBNT_ROCKET_M
, "UBNT-RM", "Ubiquiti Rocket M",

122 
ub¡_rockë_m_£tup
);

124 
__öô
 
	$ub¡_«no_m_£tup
()

126 
	`ub¡_xm_öô
();

127 
	`©h79_ªgi°î_ëh
(1);

128 
	}
}

130 
MIPS_MACHINE
(
ATH79_MACH_UBNT_NANO_M
, "UBNT-NM", "Ubiquiti Nanostation M",

131 
ub¡_«no_m_£tup
);

133 
gpio_Àd
 
	gub¡_aúrouãr_Àds_gpio
[] 
	g__öôd©a
 = {

135 .
«me
 = "ubnt:green:globe",

136 .
	ggpio
 = 0,

137 .
	ga˘ive_low
 = 1,

139 .
	g«me
 = "ubnt:green:power",

140 .
	ggpio
 = 11,

141 .
	ga˘ive_low
 = 1,

142 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

146 
__öô
 
	$ub¡_aúrouãr_£tup
()

148 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

149 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

151 
	`©h79_ªgi°î_m25p80
(
NULL
);

152 
	`©h79_ªgi°î_mdio
(0, ~
UBNT_M_WAN_PHYMASK
);

154 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

155 
	`©h79_öô_loˇl_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac1
);

157 
	`©h79_ªgi°î_ëh
(1);

158 
	`©h79_ªgi°î_ëh
(0);

159 
	`©h79_ªgi°î_usb
();

161 
	`≠91_pci_öô
(
ì
, 
NULL
);

162 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_aúrouãr_Àds_gpio
),

163 
ub¡_aúrouãr_Àds_gpio
);

165 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

166 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

167 
ub¡_xm_gpio_keys
);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_UBNT_AIRROUTER
, "UBNT-AR", "Ubiquiti AirRouter",

171 
ub¡_aúrouãr_£tup
);

173 
gpio_Àd
 
	gub¡_unifi_Àds_gpio
[] 
	g__öôd©a
 = {

175 .
«me
 = "ubnt:orange:dome",

176 .
	ggpio
 = 1,

177 .
	ga˘ive_low
 = 0,

179 .
	g«me
 = "ubnt:green:dome",

180 .
	ggpio
 = 0,

181 .
	ga˘ive_low
 = 0,

185 
gpio_Àd
 
	gub¡_unifi_outdo‹_Àds_gpio
[] 
	g__öôd©a
 = {

187 .
«me
 = "ubnt:orange:front",

188 .
	ggpio
 = 1,

189 .
	ga˘ive_low
 = 0,

191 .
	g«me
 = "ubnt:green:front",

192 .
	ggpio
 = 0,

193 .
	ga˘ive_low
 = 0,

197 
gpio_Àd
 
	gub¡_unifi_outdo‹_∂us_Àds_gpio
[] 
	g__öôd©a
 = {

199 .
«me
 = "ubnt:white:front",

200 .
	ggpio
 = 1,

201 .
	ga˘ive_low
 = 0,

203 .
	g«me
 = "ubnt:blue:front",

204 .
	ggpio
 = 0,

205 .
	ga˘ive_low
 = 0,

210 
__öô
 
	$ub¡_unifi_£tup
()

212 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

213 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

215 
	`©h79_ªgi°î_m25p80
(
NULL
);

217 
	`©h79_ªgi°î_mdio
(0, ~
UBNT_M_WAN_PHYMASK
);

219 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

220 
	`©h79_ªgi°î_ëh
(0);

222 
	`≠91_pci_öô
(
ì
, 
NULL
);

224 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_unifi_Àds_gpio
),

225 
ub¡_unifi_Àds_gpio
);

227 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

228 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

229 
ub¡_xm_gpio_keys
);

230 
	}
}

232 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UNIFI
, "UBNT-UF", "Ubiquiti UniFi",

233 
ub¡_unifi_£tup
);

236 
	#UBNT_UNIFIOD_PRI_PHYMASK
 
	`BIT
(4)

	)

237 
	#UBNT_UNIFIOD_2ND_PHYMASK
 (
	`BIT
(0Ë| BIT(1Ë| BIT(2Ë| BIT(3))

	)

239 
__öô
 
	$ub¡_unifi_outdo‹_£tup
()

241 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

242 
u8
 *
mac2
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000 + 
ETH_ALEN
);

243 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

245 
	`©h79_ªgi°î_m25p80
(
NULL
);

247 
	`©h79_ªgi°î_mdio
(0, ~(
UBNT_UNIFIOD_PRI_PHYMASK
 |

248 
UBNT_UNIFIOD_2ND_PHYMASK
));

250 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

251 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

252 
	`©h79_ªgi°î_ëh
(0);

253 
	`©h79_ªgi°î_ëh
(1);

255 
	`≠91_pci_öô
(
ì
, 
NULL
);

257 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_unifi_outdo‹_Àds_gpio
),

258 
ub¡_unifi_outdo‹_Àds_gpio
);

260 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

261 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

262 
ub¡_xm_gpio_keys
);

263 
	}
}

265 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UNIFI_OUTDOOR
, "UBNT-U20",

267 
ub¡_unifi_outdo‹_£tup
);

270 
__öô
 
	$ub¡_unifi_outdo‹_∂us_£tup
()

272 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

273 
u8
 *
mac2
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000 + 
ETH_ALEN
);

274 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

276 
	`©h79_ªgi°î_m25p80
(
NULL
);

278 
	`©h79_ªgi°î_mdio
(0, ~(
UBNT_UNIFIOD_PRI_PHYMASK
 |

279 
UBNT_UNIFIOD_2ND_PHYMASK
));

281 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

282 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 0);

283 
	`©h79_ªgi°î_ëh
(0);

284 
	`©h79_ªgi°î_ëh
(1);

286 
	`≠9x_pci_gë_wmac_d©a
(0)->
ub¡_h§
 = 
åue
;

287 
	`≠91_pci_öô
(
ì
, 
NULL
);

289 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_unifi_outdo‹_∂us_Àds_gpio
),

290 
ub¡_unifi_outdo‹_∂us_Àds_gpio
);

292 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

293 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

294 
ub¡_xm_gpio_keys
);

295 
	}
}

297 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UNIFI_OUTDOOR_PLUS
, "UBNT-UOP",

299 
ub¡_unifi_outdo‹_∂us_£tup
);

302 
gpio_Àd
 
	gub¡_u≠_¥o_gpio_Àds
[] 
	g__öôd©a
 = {

304 .
«me
 = "ubnt:white:dome",

305 .
	ggpio
 = 12,

307 .
	g«me
 = "ubnt:blue:dome",

308 .
	ggpio
 = 13,

312 
gpio_keys_buâ⁄
 
	gu≠_¥o_gpio_keys
[] 
	g__öôd©a
 = {

314 .
desc
 = "reset",

315 .
	gty≥
 = 
EV_KEY
,

316 .
	gcode
 = 
KEY_RESTART
,

317 .
	gdeboun˚_öãrvÆ
 = 
UBNT_XM_KEYS_DEBOUNCE_INTERVAL
,

318 .
	ggpio
 = 17,

319 .
	ga˘ive_low
 = 1,

323 
¨8327_∑d_cfg
 
	gu≠_¥o_¨8327_∑d0_cfg
 = {

324 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

325 .
	gtx˛k_dñay_í
 = 
åue
,

326 .
	grx˛k_dñay_í
 = 
åue
,

327 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

328 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

331 
¨8327_∂©f‹m_d©a
 
	gu≠_¥o_¨8327_d©a
 = {

332 .
∑d0_cfg
 = &
u≠_¥o_¨8327_∑d0_cfg
,

333 .
	gp‹t0_cfg
 = {

334 .
f‹˚_lök
 = 1,

335 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

336 .
	gdu∂ex
 = 1,

337 .
	gtx∑u£
 = 1,

338 .
	grx∑u£
 = 1,

342 
mdio_bﬂrd_öfo
 
	gu≠_¥o_mdio0_öfo
[] = {

344 .
bus_id
 = "ag71xx-mdio.0",

345 .
	gmdio_addr
 = 0,

346 .
	g∂©f‹m_d©a
 = &
u≠_¥o_¨8327_d©a
,

350 
	#UAP_PRO_MAC0_OFFSET
 0x0000

	)

351 
	#UAP_PRO_MAC1_OFFSET
 0x0006

	)

352 
	#UAP_PRO_WMAC_CALDATA_OFFSET
 0x1000

	)

353 
	#UAP_PRO_PCI_CALDATA_OFFSET
 0x5000

	)

355 
__öô
 
	$ub¡_u≠_¥o_£tup
()

357 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

359 
	`©h79_ªgi°î_m25p80
(
NULL
);

361 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_u≠_¥o_gpio_Àds
),

362 
ub¡_u≠_¥o_gpio_Àds
);

363 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

364 
	`ARRAY_SIZE
(
u≠_¥o_gpio_keys
),

365 
u≠_¥o_gpio_keys
);

367 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UAP_PRO_WMAC_CALDATA_OFFSET
, 
NULL
);

368 
	`≠91_pci_öô
(
ì¥om
 + 
UAP_PRO_PCI_CALDATA_OFFSET
, 
NULL
);

370 
	`©h79_ªgi°î_mdio
(0, 0x0);

371 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
u≠_¥o_mdio0_öfo
,

372 
	`ARRAY_SIZE
(
u≠_¥o_mdio0_öfo
));

374 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

375 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

376 
ì¥om
 + 
UAP_PRO_MAC0_OFFSET
, 0);

379 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

380 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

381 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

382 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

383 
	`©h79_ªgi°î_ëh
(0);

384 
	}
}

386 
MIPS_MACHINE
(
ATH79_MACH_UBNT_UAP_PRO
, "UAP-PRO", "Ubiquiti UniFi AP Pro",

387 
ub¡_u≠_¥o_£tup
);

389 
	#UBNT_XW_GPIO_LED_L1
 11

	)

390 
	#UBNT_XW_GPIO_LED_L2
 16

	)

391 
	#UBNT_XW_GPIO_LED_L3
 13

	)

392 
	#UBNT_XW_GPIO_LED_L4
 14

	)

394 
gpio_Àd
 
	gub¡_xw_Àds_gpio
[] 
	g__öôd©a
 = {

396 .
«me
 = "ubnt:red:link1",

397 .
	ggpio
 = 
UBNT_XW_GPIO_LED_L1
,

398 .
	ga˘ive_low
 = 1,

400 .
	g«me
 = "ubnt:orange:link2",

401 .
	ggpio
 = 
UBNT_XW_GPIO_LED_L2
,

402 .
	ga˘ive_low
 = 1,

404 .
	g«me
 = "ubnt:green:link3",

405 .
	ggpio
 = 
UBNT_XW_GPIO_LED_L3
,

406 .
	ga˘ive_low
 = 1,

408 .
	g«me
 = "ubnt:green:link4",

409 .
	ggpio
 = 
UBNT_XW_GPIO_LED_L4
,

410 .
	ga˘ive_low
 = 1,

414 
	#UBNT_ROCKET_TI_GPIO_LED_L1
 16

	)

415 
	#UBNT_ROCKET_TI_GPIO_LED_L2
 17

	)

416 
	#UBNT_ROCKET_TI_GPIO_LED_L3
 18

	)

417 
	#UBNT_ROCKET_TI_GPIO_LED_L4
 19

	)

418 
	#UBNT_ROCKET_TI_GPIO_LED_L5
 20

	)

419 
	#UBNT_ROCKET_TI_GPIO_LED_L6
 21

	)

420 
gpio_Àd
 
	gub¡_rockë_ti_Àds_gpio
[] 
	g__öôd©a
 = {

422 .
«me
 = "ubnt:green:link1",

423 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L1
,

424 .
	ga˘ive_low
 = 1,

426 .
	g«me
 = "ubnt:green:link2",

427 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L2
,

428 .
	ga˘ive_low
 = 1,

430 .
	g«me
 = "ubnt:green:link3",

431 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L3
,

432 .
	ga˘ive_low
 = 1,

434 .
	g«me
 = "ubnt:green:link4",

435 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L4
,

436 .
	ga˘ive_low
 = 0,

438 .
	g«me
 = "ubnt:green:link5",

439 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L5
,

440 .
	ga˘ive_low
 = 0,

442 .
	g«me
 = "ubnt:green:link6",

443 .
	ggpio
 = 
UBNT_ROCKET_TI_GPIO_LED_L6
,

444 .
	ga˘ive_low
 = 0,

448 
__öô
 
	$ub¡_xw_öô
()

450 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

452 
	`©h79_ªgi°î_m25p80
(
NULL
);

454 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_xw_Àds_gpio
),

455 
ub¡_xw_Àds_gpio
);

456 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

457 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

458 
ub¡_xm_gpio_keys
);

460 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UAP_PRO_WMAC_CALDATA_OFFSET
, 
NULL
);

461 
	`≠91_pci_öô
(
ì¥om
 + 
UAP_PRO_PCI_CALDATA_OFFSET
, 
NULL
);

464 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_MII_GMAC0
 | 
AR934X_ETH_CFG_MII_GMAC0_SLAVE
);

465 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

466 
ì¥om
 + 
UAP_PRO_MAC0_OFFSET
, 0);

468 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

469 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

470 
	}
}

472 
__öô
 
	$ub¡_«no_m_xw_£tup
()

474 
	`ub¡_xw_öô
();

477 
	`©h79_ªgi°î_mdio
(0, ~(
	`BIT
(0) | BIT(1) | BIT(5)));

478 
©h79_ëh0_d©a
.
phy_mask
 = (
	`BIT
(0) | BIT(1) | BIT(5));

479 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

480 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

481 
	`©h79_ªgi°î_ëh
(0);

482 
	}
}

484 
©803x_∂©f‹m_d©a
 
	gub¡_loco_m_xw_©803x_d©a
 = {

485 .
has_ª£t_gpio
 = 1,

486 .
	gª£t_gpio
 = 0,

489 
mdio_bﬂrd_öfo
 
	gub¡_loco_m_xw_mdio_öfo
[] = {

491 .
bus_id
 = "ag71xx-mdio.0",

492 .
	gmdio_addr
 = 1,

493 .
	g∂©f‹m_d©a
 = &
ub¡_loco_m_xw_©803x_d©a
,

497 
__öô
 
	$ub¡_loco_m_xw_£tup
()

499 
	`ub¡_xw_öô
();

501 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ub¡_loco_m_xw_mdio_öfo
,

502 
	`ARRAY_SIZE
(
ub¡_loco_m_xw_mdio_öfo
));

504 
	`©h79_ªgi°î_mdio
(0, ~
	`BIT
(1));

505 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(1);

506 
	`©h79_ªgi°î_ëh
(0);

507 
	}
}

509 
	#UBNT_LBE_M5_GPIO_LED_LAN
 13

	)

510 
	#UBNT_LBE_M5_GPIO_LED_WLAN
 14

	)

511 
	#UBNT_LBE_M5_GPIO_LED_SYS
 16

	)

513 
gpio_Àd
 
	gub¡_lbe_m5_Àds_gpio
[] 
	g__öôd©a
 = {

515 .
«me
 = "ubnt:green:lan",

516 .
	ggpio
 = 
UBNT_LBE_M5_GPIO_LED_LAN
,

517 .
	ga˘ive_low
 = 1,

519 .
	g«me
 = "ubnt:green:wlan",

520 .
	ggpio
 = 
UBNT_LBE_M5_GPIO_LED_WLAN
,

521 .
	ga˘ive_low
 = 1,

523 .
	g«me
 = "ubnt:green:sys",

524 .
	ggpio
 = 
UBNT_LBE_M5_GPIO_LED_SYS
,

525 .
	ga˘ive_low
 = 1,

529 
__öô
 
	$ub¡_lbe_m5_£tup
()

531 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

533 
	`©h79_ªgi°î_m25p80
(
NULL
);

535 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UAP_PRO_WMAC_CALDATA_OFFSET
, 
NULL
);

536 
	`≠91_pci_öô
(
ì¥om
 + 
UAP_PRO_PCI_CALDATA_OFFSET
, 
NULL
);

538 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_lbe_m5_Àds_gpio
),

539 
ub¡_lbe_m5_Àds_gpio
);

540 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

541 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

542 
ub¡_xm_gpio_keys
);

544 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_MII_GMAC0
 |

545 
AR934X_ETH_CFG_MII_GMAC0_SLAVE
);

546 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

547 
ì¥om
 + 
UAP_PRO_MAC0_OFFSET
, 0);

549 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

550 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

552 
	`gpio_ªque°_⁄e
(0, 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_ACTIVE_LOW
 |

553 
GPIOF_EXPORT_DIR_FIXED
, "SPIÇWP");

555 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ub¡_loco_m_xw_mdio_öfo
,

556 
	`ARRAY_SIZE
(
ub¡_loco_m_xw_mdio_öfo
));

558 
	`©h79_ªgi°î_mdio
(0, ~
	`BIT
(1));

559 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(1);

560 
	`©h79_ªgi°î_ëh
(0);

561 
	}
}

563 
__öô
 
	$ub¡_rockë_m_xw_£tup
()

565 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

567 
	`©h79_ªgi°î_m25p80
(
NULL
);

569 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_xw_Àds_gpio
),

570 
ub¡_xw_Àds_gpio
);

571 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

572 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

573 
ub¡_xm_gpio_keys
);

575 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UAP_PRO_WMAC_CALDATA_OFFSET
, 
NULL
);

576 
	`≠91_pci_öô
(
ì¥om
 + 
UAP_PRO_PCI_CALDATA_OFFSET
, 
NULL
);

578 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

579 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

580 
ì¥om
 + 
UAP_PRO_MAC0_OFFSET
, 0);

582 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

583 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

585 
	`©h79_ªgi°î_mdio
(0, ~
	`BIT
(4));

586 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

587 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

588 
	`©h79_ªgi°î_ëh
(0);

589 
	}
}

591 
©803x_∂©f‹m_d©a
 
	gub¡_rockë_m_ti_©803_d©a
 = {

592 .
dißbÀ_sm¨ãì
 = 1,

593 .
	gíabÀ_rgmii_rx_dñay
 = 1,

594 .
	gíabÀ_rgmii_tx_dñay
 = 1,

596 
mdio_bﬂrd_öfo
 
	gub¡_rockë_m_ti_mdio_öfo
[] = {

598 .
bus_id
 = "ag71xx-mdio.0",

599 .
	gmdio_addr
 = 4,

600 .
	g∂©f‹m_d©a
 = &
ub¡_rockë_m_ti_©803_d©a
,

604 
__öô
 
	$ub¡_rockë_m_ti_£tup
()

606 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

608 
	`©h79_ªgi°î_m25p80
(
NULL
);

610 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_rockë_ti_Àds_gpio
),

611 
ub¡_rockë_ti_Àds_gpio
);

612 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

613 
	`ARRAY_SIZE
(
ub¡_xm_gpio_keys
),

614 
ub¡_xm_gpio_keys
);

616 
	`≠91_pci_öô
(
ì¥om
 + 0x1000, 
NULL
);

618 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

619 
	`©h79_£tup_¨934x_ëh_rx_dñay
(3, 3);

620 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

621 
ì¥om
 + 
UAP_PRO_MAC0_OFFSET
, 0);

622 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

623 
ì¥om
 + 
UAP_PRO_MAC1_OFFSET
, 0);

625 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

626 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

627 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

628 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

630 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
ub¡_rockë_m_ti_mdio_öfo
,

631 
	`ARRAY_SIZE
(
ub¡_rockë_m_ti_mdio_öfo
));

632 
	`©h79_ªgi°î_mdio
(0, 0x0);

635 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

637 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x2000000;

638 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x1313;

639 
	`©h79_ªgi°î_ëh
(0);

641 
	`©h79_ªgi°î_mdio
(1, 0x0);

642 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(3);

643 
	`©h79_ªgi°î_ëh
(1);

644 
	}
}

647 
MIPS_MACHINE
(
ATH79_MACH_UBNT_NANO_M_XW
, "UBNT-NM-XW", "Ubiquiti Nanostation M XW",

648 
ub¡_«no_m_xw_£tup
);

650 
MIPS_MACHINE
(
ATH79_MACH_UBNT_LBE_M5
, "UBNT-LBE-M5", "Ubiquiti Litebeam M5",

651 
ub¡_lbe_m5_£tup
);

653 
MIPS_MACHINE
(
ATH79_MACH_UBNT_LOCO_M_XW
, "UBNT-LOCO-XW", "Ubiquiti Loco M XW",

654 
ub¡_loco_m_xw_£tup
);

656 
MIPS_MACHINE
(
ATH79_MACH_UBNT_ROCKET_M_XW
, "UBNT-RM-XW", "Ubiquiti Rocket M XW",

657 
ub¡_rockë_m_xw_£tup
);

659 
MIPS_MACHINE
(
ATH79_MACH_UBNT_ROCKET_M_TI
, "UBNT-RM-TI", "Ubiquiti Rocket M TI",

660 
ub¡_rockë_m_ti_£tup
);

662 
gpio_Àd
 
	gub¡_aúg©eway_gpio_Àds
[] 
	g__öôd©a
 = {

664 .
«me
 = "ubnt:blue:wlan",

665 .
	ggpio
 = 0,

667 .
	g«me
 = "ubnt:white:status",

668 .
	ggpio
 = 1,

672 
gpio_keys_buâ⁄
 
	gaúg©eway_gpio_keys
[] 
	g__öôd©a
 = {

674 .
desc
 = "reset",

675 .
	gty≥
 = 
EV_KEY
,

676 .
	gcode
 = 
KEY_RESTART
,

677 .
	gdeboun˚_öãrvÆ
 = 
UBNT_XM_KEYS_DEBOUNCE_INTERVAL
,

678 .
	ggpio
 = 12,

679 .
	ga˘ive_low
 = 1,

683 
__öô
 
	$ub¡_aúg©eway_£tup
()

685 
u32
 
t
;

686 
u8
 *
mac0
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

687 
u8
 *
mac1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000 + 
ETH_ALEN
);

688 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

691 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

692 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

693 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

694 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

695 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

697 
t
 = 
	`©h79_ª£t_º
(
AR933X_RESET_REG_BOOTSTRAP
);

698 
t
 |
AR933X_BOOTSTRAP_MDIO_GPIO_EN
;

699 
	`©h79_ª£t_wr
(
AR933X_RESET_REG_BOOTSTRAP
, 
t
);

701 
	`©h79_ªgi°î_m25p80
(
NULL
);

702 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_aúg©eway_gpio_Àds
),

703 
ub¡_aúg©eway_gpio_Àds
);

705 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

706 
	`ARRAY_SIZE
(
aúg©eway_gpio_keys
),

707 
aúg©eway_gpio_keys
);

709 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac0
, 0);

710 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

712 
	`©h79_ªgi°î_mdio
(0, 0x0);

714 
	`©h79_ªgi°î_ëh
(1);

715 
	`©h79_ªgi°î_ëh
(0);

717 
	`©h79_ªgi°î_wmac
(
ì
, 
NULL
);

718 
	}
}

720 
MIPS_MACHINE
(
ATH79_MACH_UBNT_AIRGW
, "UBNT-AGW", "Ubiquiti AirGateway",

721 
ub¡_aúg©eway_£tup
);

723 
gpio_Àd
 
	gub¡_aúg©eway_¥o_gpio_Àds
[] 
	g__öôd©a
 = {

725 .
«me
 = "ubnt:blue:wlan",

726 .
	ggpio
 = 13,

728 .
	g«me
 = "ubnt:white:status",

729 .
	ggpio
 = 17,

734 
gpio_keys_buâ⁄
 
	gaúg©eway_¥o_gpio_keys
[] 
	g__öôd©a
 = {

736 .
desc
 = "reset",

737 .
	gty≥
 = 
EV_KEY
,

738 .
	gcode
 = 
KEY_RESTART
,

739 .
	gdeboun˚_öãrvÆ
 = 
UBNT_XM_KEYS_DEBOUNCE_INTERVAL
,

740 .
	ggpio
 = 12,

741 .
	ga˘ive_low
 = 1,

745 
__öô
 
	$ub¡_aúg©eway_¥o_£tup
()

747 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

748 
u8
 *
mac0
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

750 
	`©h79_ªgi°î_m25p80
(
NULL
);

751 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_aúg©eway_¥o_gpio_Àds
),

752 
ub¡_aúg©eway_¥o_gpio_Àds
);

754 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_XM_KEYS_POLL_INTERVAL
,

755 
	`ARRAY_SIZE
(
aúg©eway_¥o_gpio_keys
),

756 
aúg©eway_¥o_gpio_keys
);

758 
	`©h79_ªgi°î_wmac
(
ì¥om
 + 
UAP_PRO_WMAC_CALDATA_OFFSET
, 
NULL
);

759 
	`≠91_pci_öô
(
ì¥om
 + 
UAP_PRO_PCI_CALDATA_OFFSET
, 
NULL
);

762 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

764 
	`©h79_ªgi°î_mdio
(1, 0x0);

771 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac0
, 0);

772 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

773 
	`©h79_ªgi°î_ëh
(1);

775 
	}
}

777 
MIPS_MACHINE
(
ATH79_MACH_UBNT_AIRGWP
, "UBNT-AGWP", "Ubiquiti AirGateway Pro",

778 
ub¡_aúg©eway_¥o_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-ubnt.c

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-usb.h
"

20 
	~"machty≥s.h
"

21 
	~"pci.h
"

23 
	#UBNT_RS_GPIO_LED_RF
 2

	)

24 
	#UBNT_RS_GPIO_SW4
 8

	)

26 
	#UBNT_LS_SR71_GPIO_LED_D25
 0

	)

27 
	#UBNT_LS_SR71_GPIO_LED_D26
 1

	)

28 
	#UBNT_LS_SR71_GPIO_LED_D24
 2

	)

29 
	#UBNT_LS_SR71_GPIO_LED_D23
 4

	)

30 
	#UBNT_LS_SR71_GPIO_LED_D22
 5

	)

31 
	#UBNT_LS_SR71_GPIO_LED_D27
 6

	)

32 
	#UBNT_LS_SR71_GPIO_LED_D28
 7

	)

34 
	#UBNT_KEYS_POLL_INTERVAL
 20

	)

35 
	#UBNT_KEYS_DEBOUNCE_INTERVAL
 (3 * 
UBNT_KEYS_POLL_INTERVAL
)

	)

37 
gpio_Àd
 
	gub¡_rs_Àds_gpio
[] 
	g__öôd©a
 = {

39 .
«me
 = "ubnt:green:rf",

40 .
	ggpio
 = 
UBNT_RS_GPIO_LED_RF
,

41 .
	ga˘ive_low
 = 0,

45 
gpio_Àd
 
	gub¡_ls_§71_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "ubnt:green:d22",

48 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D22
,

49 .
	ga˘ive_low
 = 0,

51 .
	g«me
 = "ubnt:green:d23",

52 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D23
,

53 .
	ga˘ive_low
 = 0,

55 .
	g«me
 = "ubnt:green:d24",

56 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D24
,

57 .
	ga˘ive_low
 = 0,

59 .
	g«me
 = "ubnt:red:d25",

60 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D25
,

61 .
	ga˘ive_low
 = 0,

63 .
	g«me
 = "ubnt:red:d26",

64 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D26
,

65 .
	ga˘ive_low
 = 0,

67 .
	g«me
 = "ubnt:green:d27",

68 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D27
,

69 .
	ga˘ive_low
 = 0,

71 .
	g«me
 = "ubnt:green:d28",

72 .
	ggpio
 = 
UBNT_LS_SR71_GPIO_LED_D28
,

73 .
	ga˘ive_low
 = 0,

77 
gpio_keys_buâ⁄
 
	gub¡_gpio_keys
[] 
	g__öôd©a
 = {

79 .
desc
 = "sw4",

80 .
	gty≥
 = 
EV_KEY
,

81 .
	gcode
 = 
KEY_RESTART
,

82 .
	gdeboun˚_öãrvÆ
 = 
UBNT_KEYS_DEBOUNCE_INTERVAL
,

83 .
	ggpio
 = 
UBNT_RS_GPIO_SW4
,

84 .
	ga˘ive_low
 = 1,

88 c⁄° *
	gub¡_∑π_¥obes
[] = {

90 
NULL
,

93 
Êash_∂©f‹m_d©a
 
	gub¡_Êash_d©a
 = {

94 .
∑π_¥obes
 = 
ub¡_∑π_¥obes
,

97 
__öô
 
	$ub¡_gíîic_£tup
()

99 
	`©h79_ªgi°î_m25p80
(&
ub¡_Êash_d©a
);

101 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
UBNT_KEYS_POLL_INTERVAL
,

102 
	`ARRAY_SIZE
(
ub¡_gpio_keys
),

103 
ub¡_gpio_keys
);

104 
	`©h79_ªgi°î_pci
();

105 
	}
}

107 
	#UBNT_RS_WAN_PHYMASK
 
	`BIT
(20)

	)

108 
	#UBNT_RS_LAN_PHYMASK
 (
	`BIT
(16Ë| BIT(17Ë| BIT(18Ë| BIT(19))

	)

110 
__öô
 
	$ub¡_rs_£tup
()

112 
	`ub¡_gíîic_£tup
();

114 
	`©h79_ªgi°î_mdio
(0, ~(
UBNT_RS_WAN_PHYMASK
 | 
UBNT_RS_LAN_PHYMASK
));

116 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

117 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

118 
©h79_ëh0_d©a
.
phy_mask
 = 
UBNT_RS_WAN_PHYMASK
;

125 
	`©h79_öô_loˇl_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
);

126 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

127 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_100
;

128 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

130 
	`©h79_ªgi°î_ëh
(0);

131 
	`©h79_ªgi°î_ëh
(1);

133 
	`©h79_ªgi°î_usb
();

135 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_rs_Àds_gpio
),

136 
ub¡_rs_Àds_gpio
);

137 
	}
}

139 
MIPS_MACHINE
(
ATH79_MACH_UBNT_RS
, "UBNT-RS", "Ubiquiti RouterStation",

140 
ub¡_rs_£tup
);

142 
	#UBNT_RSPRO_WAN_PHYMASK
 
	`BIT
(4)

	)

143 
	#UBNT_RSPRO_LAN_PHYMASK
 (
	`BIT
(0Ë| BIT(1Ë| BIT(2Ë| BIT(3))

	)

145 
__öô
 
	$ub¡_r•ro_£tup
()

147 
	`ub¡_gíîic_£tup
();

149 
	`©h79_ªgi°î_mdio
(0, ~(
UBNT_RSPRO_WAN_PHYMASK
 |

150 
UBNT_RSPRO_LAN_PHYMASK
));

152 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

153 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

154 
©h79_ëh0_d©a
.
phy_mask
 = 
UBNT_RSPRO_WAN_PHYMASK
;

161 
	`©h79_öô_loˇl_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
);

162 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

163 
©h79_ëh1_d©a
.
phy_mask
 = 
UBNT_RSPRO_LAN_PHYMASK
;

164 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

165 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

167 
	`©h79_ªgi°î_ëh
(0);

168 
	`©h79_ªgi°î_ëh
(1);

170 
	`©h79_ªgi°î_usb
();

172 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_rs_Àds_gpio
),

173 
ub¡_rs_Àds_gpio
);

174 
	}
}

176 
MIPS_MACHINE
(
ATH79_MACH_UBNT_RSPRO
, "UBNT-RSPRO", "Ubiquiti RouterStation Pro",

177 
ub¡_r•ro_£tup
);

179 
__öô
 
	$ub¡_lsx_£tup
()

181 
	`ub¡_gíîic_£tup
();

182 
	}
}

184 
MIPS_MACHINE
(
ATH79_MACH_UBNT_LSX
, "UBNT-LSX", "UbiquôòLSX", 
ub¡_lsx_£tup
);

186 
	#UBNT_LSSR71_PHY_MASK
 
	`BIT
(1)

	)

188 
__öô
 
	$ub¡_ls§71_£tup
()

190 
	`ub¡_gíîic_£tup
();

192 
	`©h79_ªgi°î_mdio
(0, ~
UBNT_LSSR71_PHY_MASK
);

194 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

195 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

196 
©h79_ëh0_d©a
.
phy_mask
 = 
UBNT_LSSR71_PHY_MASK
;

198 
	`©h79_ªgi°î_ëh
(0);

200 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ub¡_ls_§71_Àds_gpio
),

201 
ub¡_ls_§71_Àds_gpio
);

202 
	}
}

204 
MIPS_MACHINE
(
ATH79_MACH_UBNT_LSSR71
, "UBNT-LS-SR71", "Ubiquiti LS-SR71",

205 
ub¡_ls§71_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wam250.c

11 
	~<löux/gpio.h
>

12 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#WAM250_GPIO_LED_LAN
 13

	)

27 
	#WAM250_GPIO_LED_POWER
 15

	)

28 
	#WAM250_GPIO_LED_REPEATER
 14

	)

29 
	#WAM250_GPIO_LED_WLAN
 12

	)

31 
	#WAM250_GPIO_BTN_RESET
 17

	)

32 
	#WAM250_GPIO_BTN_SPKADD
 1

	)

34 
	#WAM250_GPIO_EXT_LNA
 19

	)

36 
	#WAM250_MAC_OFFSET
 2

	)

38 
	#WAM250_KEYS_POLL_INTERVAL
 20

	)

39 
	#WAM250_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WAM250_KEYS_POLL_INTERVAL
)

	)

41 
gpio_Àd
 
	gwam250_Àds_gpio
[] 
	g__öôd©a
 = {

43 .
«me
 = "wam250:white:lan",

44 .
	ggpio
 = 
WAM250_GPIO_LED_LAN
,

45 .
	ga˘ive_low
 = 1,

47 .
	g«me
 = "wam250:white:power",

48 .
	ggpio
 = 
WAM250_GPIO_LED_POWER
,

49 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_KEEP
,

50 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "wam250:white:repeater",

53 .
	ggpio
 = 
WAM250_GPIO_LED_REPEATER
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "wam250:white:wlan",

57 .
	ggpio
 = 
WAM250_GPIO_LED_WLAN
,

58 .
	ga˘ive_low
 = 1,

62 
gpio_keys_buâ⁄
 
	gwam250_gpio_keys
[] 
	g__öôd©a
 = {

64 .
desc
 = "reset",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
KEY_RESTART
,

67 .
	gdeboun˚_öãrvÆ
 = 
WAM250_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 
WAM250_GPIO_BTN_RESET
,

69 .
	ga˘ive_low
 = 1,

71 .
	gdesc
 = "wps",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_WPS_BUTTON
,

74 .
	gdeboun˚_öãrvÆ
 = 
WAM250_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 
WAM250_GPIO_BTN_SPKADD
,

76 .
	ga˘ive_low
 = 1,

80 
__öô
 
	$wam250_£tup
()

82 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

84 
	`©h79_ªgi°î_m25p80
(
NULL
);

86 
	`©h79_ªgi°î_mdio
(1, 0x0);

88 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_PHY_SWAP
);

90 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

91 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 0xfd;

94 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

95 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

96 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(1);

97 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
WAM250_MAC_OFFSET
, 0);

98 
	`©h79_ªgi°î_ëh
(1);

101 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

102 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

103 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

104 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

105 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

106 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
WAM250_MAC_OFFSET
, 1);

107 
	`©h79_ªgi°î_ëh
(0);

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wam250_Àds_gpio
),

110 
wam250_Àds_gpio
);

112 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WAM250_KEYS_POLL_INTERVAL
,

113 
	`ARRAY_SIZE
(
wam250_gpio_keys
),

114 
wam250_gpio_keys
);

116 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
WAM250_GPIO_EXT_LNA
);

118 
	`©h79_ªgi°î_usb
();

119 
	`©h79_ªgi°î_wmac
(
¨t
, 
NULL
);

120 
	}
}

122 
MIPS_MACHINE
(
ATH79_MACH_WAM250
, "WAM250", "Samsung WAM250", 
wam250_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-weio.c

35 
	~<asm/mach-©h79/©h79.h
>

36 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

37 
	~<löux/i2c-gpio.h
>

38 
	~<löux/∂©f‹m_devi˚.h
>

39 
	~"comm⁄.h
"

40 
	~"dev-ëh.h
"

41 
	~"dev-gpio-buâ⁄s.h
"

42 
	~"dev-Àds-gpio.h
"

43 
	~"dev-m25p80.h
"

44 
	~"dev-•i.h
"

45 
	~"dev-usb.h
"

46 
	~"dev-wmac.h
"

47 
	~"machty≥s.h
"

49 
	#WEIO_GPIO_LED_STA
 1

	)

50 
	#WEIO_GPIO_LED_AP
 16

	)

52 
	#WEIO_GPIO_BTN_AP
 20

	)

53 
	#WEIO_GPIO_BTN_RESET
 23

	)

55 
	#WEIO_KEYS_POLL_INTERVAL
 20

	)

56 
	#WEIO_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WEIO_KEYS_POLL_INTERVAL
)

	)

58 
	#WEIO_MAC0_OFFSET
 0x0000

	)

59 
	#WEIO_MAC1_OFFSET
 0x0006

	)

60 
	#WEIO_CALDATA_OFFSET
 0x1000

	)

61 
	#WEIO_WMAC_MAC_OFFSET
 0x1002

	)

63 
gpio_Àd
 
	gweio_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "weio:green:sta",

66 .
	ggpio
 = 
WEIO_GPIO_LED_STA
,

67 .
	ga˘ive_low
 = 1,

68 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

71 .
	g«me
 = "weio:green:ap",

72 .
	ggpio
 = 
WEIO_GPIO_LED_AP
,

73 .
	ga˘ive_low
 = 1,

74 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

78 
gpio_keys_buâ⁄
 
	gweio_gpio_keys
[] 
	g__öôd©a
 = {

80 .
desc
 = "ap button",

81 .
	gty≥
 = 
EV_KEY
,

82 .
	gcode
 = 
BTN_0
,

83 .
	gdeboun˚_öãrvÆ
 = 
WEIO_KEYS_DEBOUNCE_INTERVAL
,

84 .
	ggpio
 = 
WEIO_GPIO_BTN_AP
,

85 .
	ga˘ive_low
 = 1,

88 .
	gdesc
 = "soft-reset button",

89 .
	gty≥
 = 
EV_KEY
,

90 .
	gcode
 = 
BTN_1
,

91 .
	gdeboun˚_öãrvÆ
 = 
WEIO_KEYS_DEBOUNCE_INTERVAL
,

92 .
	ggpio
 = 
WEIO_GPIO_BTN_RESET
,

93 .
	ga˘ive_low
 = 1,

97 
i2c_gpio_∂©f‹m_d©a
 
	gweio_i2c_gpio_d©a
 = {

98 .
sda_pö
 = 18,

99 .
	gs˛_pö
 = 19,

102 
∂©f‹m_devi˚
 
	gweio_i2c_gpio
 = {

103 .
«me
 = "i2c-gpio",

104 .
	gid
 = 0,

105 .
	gdev
 = {

106 .
∂©f‹m_d©a
 = &
weio_i2c_gpio_d©a
,

110 
__öô
 
	$weio_comm⁄_£tup
()

112 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

114 
	`©h79_ªgi°î_m25p80
(
NULL
);

115 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WEIO_CALDATA_OFFSET
,áπ + 
WEIO_WMAC_MAC_OFFSET
);

116 
	}
}

118 
__öô
 
	$weio_£tup
()

120 
	`weio_comm⁄_£tup
();

122 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

123 
AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

124 
AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

125 
AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

126 
AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

128 
	`∂©f‹m_devi˚_ªgi°î
(&
weio_i2c_gpio
);

130 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
weio_Àds_gpio
),

131 
weio_Àds_gpio
);

133 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WEIO_KEYS_POLL_INTERVAL
,

134 
	`ARRAY_SIZE
(
weio_gpio_keys
),

135 
weio_gpio_keys
);

137 
	`©h79_ªgi°î_usb
();

138 
	}
}

140 
MIPS_MACHINE
(
ATH79_MACH_WEIO
, "WEIO", "WeIO bﬂrd", 
weio_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-whr-hp-g300n.c

15 
	~<asm/mach-©h79/©h79.h
>

16 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

18 
	~"comm⁄.h
"

19 
	~"dev-≠9x-pci.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"machty≥s.h
"

26 
	#WHRHPG300N_GPIO_LED_SECURITY
 0

	)

27 
	#WHRHPG300N_GPIO_LED_DIAG
 1

	)

28 
	#WHRHPG300N_GPIO_LED_ROUTER
 6

	)

30 
	#WHRHPG300N_GPIO_BTN_ROUTER_ON
 7

	)

31 
	#WHRHPG300N_GPIO_BTN_ROUTER_AUTO
 8

	)

32 
	#WHRHPG300N_GPIO_BTN_RESET
 11

	)

33 
	#WHRHPG300N_GPIO_BTN_AOSS
 12

	)

34 
	#WHRHPG300N_GPIO_LED_LAN1
 13

	)

35 
	#WHRHPG300N_GPIO_LED_LAN2
 14

	)

36 
	#WHRHPG300N_GPIO_LED_LAN3
 15

	)

37 
	#WHRHPG300N_GPIO_LED_LAN4
 16

	)

38 
	#WHRHPG300N_GPIO_LED_WAN
 17

	)

40 
	#WHRHPG300N_KEYS_POLL_INTERVAL
 20

	)

41 
	#WHRHPG300N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WHRHPG300N_KEYS_POLL_INTERVAL
)

	)

43 
	#WHRHPG300N_MAC_OFFSET
 0x20c

	)

45 
gpio_Àd
 
	gwhrhpg300n_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "buffalo:orange:security",

48 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_SECURITY
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "buffalo:red:diag",

52 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_DIAG
,

53 .
	ga˘ive_low
 = 1,

55 .
	g«me
 = "buffalo:green:router",

56 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_ROUTER
,

57 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "buffalo:green:wan",

60 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_WAN
,

61 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "buffalo:green:lan1",

64 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_LAN1
,

65 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "buffalo:green:lan2",

68 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_LAN2
,

69 .
	ga˘ive_low
 = 1,

71 .
	g«me
 = "buffalo:green:lan3",

72 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_LAN3
,

73 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "buffalo:green:lan4",

76 .
	ggpio
 = 
WHRHPG300N_GPIO_LED_LAN4
,

77 .
	ga˘ive_low
 = 1,

81 
gpio_keys_buâ⁄
 
	gwhrhpg300n_gpio_keys
[] 
	g__öôd©a
 = {

83 .
desc
 = "reset",

84 .
	gty≥
 = 
EV_KEY
,

85 .
	gcode
 = 
KEY_RESTART
,

86 .
	gdeboun˚_öãrvÆ
 = 
WHRHPG300N_KEYS_DEBOUNCE_INTERVAL
,

87 .
	ggpio
 = 
WHRHPG300N_GPIO_BTN_RESET
,

88 .
	ga˘ive_low
 = 1,

90 .
	gdesc
 = "aoss/wps",

91 .
	gty≥
 = 
EV_KEY
,

92 .
	gcode
 = 
KEY_WPS_BUTTON
,

93 .
	ggpio
 = 
WHRHPG300N_GPIO_BTN_AOSS
,

94 .
	gdeboun˚_öãrvÆ
 = 
WHRHPG300N_KEYS_DEBOUNCE_INTERVAL
,

95 .
	ga˘ive_low
 = 1,

97 .
	gdesc
 = "router_on",

98 .
	gty≥
 = 
EV_KEY
,

99 .
	gcode
 = 
BTN_2
,

100 .
	ggpio
 = 
WHRHPG300N_GPIO_BTN_ROUTER_ON
,

101 .
	gdeboun˚_öãrvÆ
 = 
WHRHPG300N_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ga˘ive_low
 = 1,

104 .
	gdesc
 = "router_auto",

105 .
	gty≥
 = 
EV_KEY
,

106 .
	gcode
 = 
BTN_3
,

107 .
	ggpio
 = 
WHRHPG300N_GPIO_BTN_ROUTER_AUTO
,

108 .
	gdeboun˚_öãrvÆ
 = 
WHRHPG300N_KEYS_DEBOUNCE_INTERVAL
,

109 .
	ga˘ive_low
 = 1,

113 
__öô
 
	$whrhpg300n_£tup
()

115 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

116 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(
ì
 + 
WHRHPG300N_MAC_OFFSET
);

118 
	`©h79_ªgi°î_m25p80
(
NULL
);

120 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

121 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

122 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

123 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

124 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

126 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
whrhpg300n_Àds_gpio
),

127 
whrhpg300n_Àds_gpio
);

129 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WHRHPG300N_KEYS_POLL_INTERVAL
,

130 
	`ARRAY_SIZE
(
whrhpg300n_gpio_keys
),

131 
whrhpg300n_gpio_keys
);

133 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

134 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

136 
	`©h79_ªgi°î_mdio
(0, 0x0);

139 
	`©h79_ªgi°î_ëh
(1);

141 
	`©h79_ªgi°î_ëh
(0);

143 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 1);

145 
	`≠91_pci_öô
(
ì
, 
mac
);

146 
	}
}

148 
MIPS_MACHINE
(
ATH79_MACH_WHR_HP_G300N
, "WHR-HP-G300N", "Buffalo WHR-HP-G300N",

149 
whrhpg300n_£tup
);

151 
MIPS_MACHINE
(
ATH79_MACH_WHR_G301N
, "WHR-G301N", "Buffalo WHR-G301N",

152 
whrhpg300n_£tup
);

154 
MIPS_MACHINE
(
ATH79_MACH_WHR_HP_GN
, "WHR-HP-GN", "Buffalo WHR-HP-GN",

155 
whrhpg300n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wi2a-ac200i.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/mtd/mtd.h
>

24 
	~<löux/mtd/∑πôi⁄s.h
>

25 
	~<löux/∂©f‹m/¨934x_nfc.h
>

27 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

28 
	~<asm/fw/fw.h
>

30 
	~"comm⁄.h
"

31 
	~"pci.h
"

32 
	~"dev-≠9x-pci.h
"

33 
	~"dev-gpio-buâ⁄s.h
"

34 
	~"dev-ëh.h
"

35 
	~"dev-Àds-gpio.h
"

36 
	~"dev-m25p80.h
"

37 
	~"dev-nfc.h
"

38 
	~"dev-usb.h
"

39 
	~"dev-wmac.h
"

40 
	~"machty≥s.h
"

42 
	#AC200I_GPIO_BTN_RESET
 17

	)

44 
	#AC200I_KEYS_POLL_INTERVAL
 20

	)

45 
	#AC200I_KEYS_DEBOUNCE_INTERVAL
 (3 * 
AC200I_KEYS_POLL_INTERVAL
)

	)

47 
	#AC200I_MAC_ADDR
 0x1f040249

	)

48 
	#AC200I_MAC1_OFFSET
 6

	)

49 
	#AC200I_WMAC_CALDATA_ADDR
 0x1f061000

	)

51 
gpio_Àd
 
	gac200i_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "nokia:red:wlan-2g",

54 .
	ggpio
 = 0,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "nokia:green:power",

59 .
	ggpio
 = 1,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "nokia:green:wlan-2g",

64 .
	ggpio
 = 2,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "nokia:green:ctrl",

69 .
	ggpio
 = 3,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "nokia:green:eth",

74 .
	ggpio
 = 4,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "nokia:red:power",

79 .
	ggpio
 = 13,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "nokia:red:eth",

84 .
	ggpio
 = 14,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "nokia:red:wlan-5g",

89 .
	ggpio
 = 18,

90 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "nokia:green:wlan-5g",

94 .
	ggpio
 = 19,

95 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "nokia:red:ctrl",

99 .
	ggpio
 = 20,

100 .
	ga˘ive_low
 = 1,

104 
gpio_keys_buâ⁄
 
	gac200i_gpio_keys
[] 
	g__öôd©a
 = {

106 .
desc
 = "Reset button",

107 .
	gty≥
 = 
EV_KEY
,

108 .
	gcode
 = 
KEY_RESTART
,

109 .
	gdeboun˚_öãrvÆ
 = 
AC200I_KEYS_DEBOUNCE_INTERVAL
,

110 .
	ggpio
 = 
AC200I_GPIO_BTN_RESET
,

111 .
	ga˘ive_low
 = 1,

115 
mtd_∑πôi⁄
 
	gac200i_«nd_∑πôi⁄s
[] = {

117 .
«me
 = "cfg",

118 .
	goff£t
 = 0x0100000,

119 .
	gsize
 = 0x1800000,

120 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

123 .
	g«me
 = "kernel",

124 .
	goff£t
 = 0x2000000,

125 .
	gsize
 = 0x0400000,

128 .
	g«me
 = "ubi",

129 .
	goff£t
 = 0x2400000,

130 .
	gsize
 = 0x2000000,

133 .
	g«me
 = "kernel",

134 .
	goff£t
 = 0x5000000,

135 .
	gsize
 = 0x0400000,

138 .
	g«me
 = "ubi",

139 .
	goff£t
 = 0x5400000,

140 .
	gsize
 = 0x2000000,

144 c⁄° *
	$boŸ_gëív
(c⁄° *
key
)

146 c⁄° *
°¨t
 = (c⁄° *Ë
	`KSEG1ADDR
(0x1f070000);

147 c⁄° *
íd
 = 
°¨t
 + 0x20000;

148 c⁄° *
addr
;

150 
addr
 = 
°¨t
 + 4;

151 *
addr
 && *add∏!0xf‡&&ádd∏< 
íd
 &&

152 
	`°∫Àn
(
addr
, 
íd
 -áddr) <Énd -áddr;

153 
addr
 +
	`°∫Àn
◊ddr, 
íd
 -áddr) + 1) {

154 c⁄° *
vÆ
;

156 
vÆ
 = 
	`°rchr
(
addr
, '=');

157 i‡(!
vÆ
)

160 i‡(
	`°∫cmp
(
addr
, 
key
, 
vÆ
 -áddr))

163  
vÆ
 + 1;

165  
NULL
;

166 
	}
}

168 
__öô
 
	$ac200i_£tup
()

170 c⁄° *
img
;

171 
u8
 *
wmac
 = (u8 *Ë
	`KSEG1ADDR
(
AC200I_WMAC_CALDATA_ADDR
);

172 
u8
 *
mac_addr
 = (u8 *Ë
	`KSEG1ADDR
(
AC200I_MAC_ADDR
);

174 
	`©h79_ªgi°î_m25p80
(
NULL
);

176 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
ac200i_Àds_gpio
),

177 
ac200i_Àds_gpio
);

178 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
AC200I_KEYS_POLL_INTERVAL
,

179 
	`ARRAY_SIZE
(
ac200i_gpio_keys
),

180 
ac200i_gpio_keys
);

182 
	`©h79_ªgi°î_usb
();

183 
	`©h79_nfc_£t_∑πs
(
ac200i_«nd_∑πôi⁄s
,

184 
	`ARRAY_SIZE
(
ac200i_«nd_∑πôi⁄s
));

185 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

186 
	`©h79_ªgi°î_nfc
();

188 
	`©h79_ªgi°î_wmac
(
wmac
, 
NULL
);

190 
	`©h79_ªgi°î_mdio
(0, 0x0);

191 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, mac_addr, 0);

194 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

195 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

196 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

197 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x03000101;

198 
©h79_ëh0_∂l_d©a
.
∂l_100
 = 0x80000101;

199 
©h79_ëh0_∂l_d©a
.
∂l_10
 = 0x80001313;

201 
img
 = 
	`boŸ_gëív
("dualPartition");

202 i‡(
img
 && !
	`°rcmp
(img, "imgA")) {

203 
ac200i_«nd_∑πôi⁄s
[3].
«me
 = "kernel_alt";

204 
ac200i_«nd_∑πôi⁄s
[4].
«me
 = "ubi_alt";

206 
ac200i_«nd_∑πôi⁄s
[1].
«me
 = "kernel_alt";

207 
ac200i_«nd_∑πôi⁄s
[2].
«me
 = "ubi_alt";

210 
	`©h79_ªgi°î_ëh
(0);

212 
	`©h79_ªgi°î_pci
();

213 
	}
}

215 
MIPS_MACHINE
(
ATH79_MACH_WI2A_AC200I
, "WI2A-AC200i",

217 
ac200i_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wifi-pineapple-nano.c

12 
	~<löux/gpio.h
>

14 
	~<asm/mach-©h79/©h79.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

17 
	~"comm⁄.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"dev-wmac.h
"

24 
	~"machty≥s.h
"

26 
	#WIFI_PINEAPPLE_NANO_GPIO_LED_SYSTEM
 18

	)

28 
	#WIFI_PINEAPPLE_NANO_GPIO_BTN_RESET
 12

	)

29 
	#WIFI_PINEAPPLE_NANO_GPIO_SD_DET
 19

	)

30 
	#WIFI_PINEAPPLE_NANO_GPIO_USB_ALARM
 20

	)

31 
	#WIFI_PINEAPPLE_NANO_GPIO_USB_POWER
 23

	)

33 
	#HAK5_KEYS_POLL_INTERVAL
 20

	)

34 
	#HAK5_KEYS_DEBOUNCE_INTERVAL
 (3 * 
HAK5_KEYS_POLL_INTERVAL
)

	)

36 
	#WIFI_PINEAPPLE_NANO_MAC1_OFFSET
 0x0006

	)

37 
	#WIFI_PINEAPPLE_NANO_CALDATA_OFFSET
 0x1000

	)

39 c⁄° *
	ghak5_∑π_¥obes
[] = {

41 
NULL
,

44 
Êash_∂©f‹m_d©a
 
	ghak5_Êash_d©a
 = {

45 .
∑π_¥obes
 = 
hak5_∑π_¥obes
,

48 
gpio_Àd
 
	gwifi_pöóµÀ_«no_Àds_gpio
[] 
	g__öôd©a
 = {

50 .
«me
 = "wifi-pineapple-nano:blue:system",

51 .
	ggpio
 = 
WIFI_PINEAPPLE_NANO_GPIO_LED_SYSTEM
,

52 .
	ga˘ive_low
 = 1,

56 
gpio_keys_buâ⁄
 
	gwifi_pöóµÀ_«no_gpio_keys
[] 
	g__öôd©a
 = {

58 .
desc
 = "reset",

59 .
	gty≥
 = 
EV_KEY
,

60 .
	gcode
 = 
KEY_RESTART
,

61 .
	gdeboun˚_öãrvÆ
 = 
HAK5_KEYS_DEBOUNCE_INTERVAL
,

62 .
	ggpio
 = 
WIFI_PINEAPPLE_NANO_GPIO_BTN_RESET
,

63 .
	ga˘ive_low
 = 1,

67 
__öô
 
	$wifi_pöóµÀ_«no_£tup
()

69 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

71 
	`©h79_ªgi°î_m25p80
(&
hak5_Êash_d©a
);

73 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

74 
	`©h79_ªgi°î_mdio
(0, 0x0);

76 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

77 
¨t
 + 
WIFI_PINEAPPLE_NANO_MAC1_OFFSET
, 0);

78 
	`©h79_ªgi°î_ëh
(0);

81 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR933X_GPIO_FUNC_UART_RTS_CTS_EN
);

83 
	`gpio_ªque°_⁄e
(
WIFI_PINEAPPLE_NANO_GPIO_SD_DET
,

84 
GPIOF_IN
 | 
GPIOF_EXPORT_DIR_FIXED
 | 
GPIOF_ACTIVE_LOW
,

87 
	`gpio_ªque°_⁄e
(
WIFI_PINEAPPLE_NANO_GPIO_USB_ALARM
,

88 
GPIOF_IN
 | 
GPIOF_EXPORT_DIR_FIXED
 | 
GPIOF_ACTIVE_LOW
,

91 
	`gpio_ªque°_⁄e
(
WIFI_PINEAPPLE_NANO_GPIO_USB_POWER
,

92 
GPIOF_OUT_INIT_LOW
 | 
GPIOF_EXPORT_DIR_FIXED
 |

93 
GPIOF_ACTIVE_LOW
, "USBÖower");

95 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wifi_pöóµÀ_«no_Àds_gpio
),

96 
wifi_pöóµÀ_«no_Àds_gpio
);

98 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
HAK5_KEYS_POLL_INTERVAL
,

99 
	`ARRAY_SIZE
(
wifi_pöóµÀ_«no_gpio_keys
),

100 
wifi_pöóµÀ_«no_gpio_keys
);

102 
	`©h79_ªgi°î_usb
();

103 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WIFI_PINEAPPLE_NANO_CALDATA_OFFSET
, 
NULL
);

104 
	}
}

106 
MIPS_MACHINE
(
ATH79_MACH_WIFI_PINEAPPLE_NANO
, "WIFI-PINEAPPLE-NANO",

107 "Hak5 WiFòPöóµÀ NANO", 
wifi_pöóµÀ_«no_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wlae-ag300n.c

5 
	~<löux/gpio.h
>

6 
	~<löux/mtd/mtd.h
>

7 
	~<löux/mtd/∑πôi⁄s.h
>

9 
	~<asm/mach-©h79/©h79.h
>

11 
	~"dev-ëh.h
"

12 
	~"dev-≠9x-pci.h
"

13 
	~"dev-gpio-buâ⁄s.h
"

14 
	~"dev-Àds-gpio.h
"

15 
	~"dev-m25p80.h
"

16 
	~"dev-usb.h
"

17 
	~"machty≥s.h
"

19 
	#WLAEAG300N_MAC_OFFSET
 0x20c

	)

20 
	#WLAEAG300N_KEYS_POLL_INTERVAL
 20

	)

21 
	#WLAEAG300N_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WLAEAG300N_KEYS_POLL_INTERVAL
)

	)

24 
gpio_Àd
 
	gwœóg300n_Àds_gpio
[] 
	g__öôd©a
 = {

29 .
«me
 = "buffalo:green:wireless",

30 .
	ggpio
 = 14,

31 .
	ga˘ive_low
 = 1,

33 .
	g«me
 = "buffalo:red:wireless",

34 .
	ggpio
 = 15,

35 .
	ga˘ive_low
 = 1,

37 .
	g«me
 = "buffalo:green:status",

38 .
	ggpio
 = 16,

39 .
	ga˘ive_low
 = 1,

41 .
	g«me
 = "buffalo:red:status",

42 .
	ggpio
 = 17,

43 .
	ga˘ive_low
 = 1,

48 
gpio_keys_buâ⁄
 
	gwœóg300n_gpio_keys
[] 
	g__öôd©a
 = {

50 .
desc
 = "function",

51 .
	gty≥
 = 
EV_KEY
,

52 .
	gcode
 = 
KEY_MODE
,

53 .
	gdeboun˚_öãrvÆ
 = 
WLAEAG300N_KEYS_DEBOUNCE_INTERVAL
,

54 .
	ggpio
 = 0,

55 .
	ga˘ive_low
 = 1,

57 .
	gdesc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
WLAEAG300N_KEYS_DEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 1,

62 .
	ga˘ive_low
 = 1,

64 .
	gdesc
 = "power",

65 .
	gty≥
 = 
EV_KEY
,

66 .
	gcode
 = 
KEY_POWER
,

67 .
	gdeboun˚_öãrvÆ
 = 
WLAEAG300N_KEYS_DEBOUNCE_INTERVAL
,

68 .
	ggpio
 = 11,

69 .
	ga˘ive_low
 = 1,

71 .
	gdesc
 = "aoss",

72 .
	gty≥
 = 
EV_KEY
,

73 .
	gcode
 = 
KEY_WPS_BUTTON
,

74 .
	gdeboun˚_öãrvÆ
 = 
WLAEAG300N_KEYS_DEBOUNCE_INTERVAL
,

75 .
	ggpio
 = 12,

76 .
	ga˘ive_low
 = 1,

80 
__öô
 
	$wœóg300n_£tup
()

82 
u8
 *
ì¥om1
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

83 
u8
 *
mac1
 = 
ì¥om1
 + 
WLAEAG300N_MAC_OFFSET
;

85 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

86 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac1
, 1);

88 
	`©h79_ªgi°î_mdio
(0, ~(
	`BIT
(0) | BIT(4)));

90 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

91 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

92 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

93 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

95 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

96 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(4);

98 
	`©h79_ªgi°î_ëh
(0);

99 
	`©h79_ªgi°î_ëh
(1);

101 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wœóg300n_Àds_gpio
),

102 
wœóg300n_Àds_gpio
);

104 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WLAEAG300N_KEYS_POLL_INTERVAL
,

105 
	`ARRAY_SIZE
(
wœóg300n_gpio_keys
),

106 
wœóg300n_gpio_keys
);

108 
	`©h79_ªgi°î_m25p80
(
NULL
);

110 
	`≠91_pci_öô
(
ì¥om1
, 
mac1
);

111 
	}
}

113 
MIPS_MACHINE
(
ATH79_MACH_WLAE_AG300N
, "WLAE-AG300N",

114 "BufÁlÿWLAE-AG300N", 
wœóg300n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wlr8100.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"comm⁄.h
"

28 
	~"pci.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-usb.h
"

35 
	~"dev-wmac.h
"

36 
	~"machty≥s.h
"

38 
	#WLR8100_GPIO_LED_USB
 4

	)

39 
	#WLR8100_GPIO_LED_WLAN_5G
 12

	)

40 
	#WLR8100_GPIO_LED_WLAN_2G
 13

	)

41 
	#WLR8100_GPIO_LED_STATUS_RED
 14

	)

42 
	#WLR8100_GPIO_LED_WPS_RED
 15

	)

43 
	#WLR8100_GPIO_LED_STATUS_AMBER
 19

	)

44 
	#WLR8100_GPIO_LED_WPS_GREEN
 20

	)

46 
	#WLR8100_GPIO_BTN_WPS
 16

	)

47 
	#WLR8100_GPIO_BTN_RFKILL
 21

	)

49 
	#WLR8100_KEYS_POLL_INTERVAL
 20

	)

50 
	#WLR8100_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WLR8100_KEYS_POLL_INTERVAL
)

	)

52 
gpio_Àd
 
	gwÃ8100_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "wlr8100:amber:status",

55 .
	ggpio
 = 
WLR8100_GPIO_LED_STATUS_AMBER
,

56 .
	ga˘ive_low
 = 1,

59 .
	g«me
 = "wlr8100:red:status",

60 .
	ggpio
 = 
WLR8100_GPIO_LED_STATUS_RED
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "wlr8100:green:wps",

65 .
	ggpio
 = 
WLR8100_GPIO_LED_WPS_GREEN
,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "wlr8100:red:wps",

70 .
	ggpio
 = 
WLR8100_GPIO_LED_WPS_RED
,

71 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "wlr8100:red:wlan-2g",

75 .
	ggpio
 = 
WLR8100_GPIO_LED_WLAN_2G
,

76 .
	ga˘ive_low
 = 1,

79 .
	g«me
 = "wlr8100:red:usb",

80 .
	ggpio
 = 
WLR8100_GPIO_LED_USB
,

81 .
	ga˘ive_low
 = 1,

85 
gpio_keys_buâ⁄
 
	gwÃ8100_gpio_keys
[] 
	g__öôd©a
 = {

87 .
desc
 = "WPS button",

88 .
	gty≥
 = 
EV_KEY
,

89 .
	gcode
 = 
KEY_WPS_BUTTON
,

90 .
	gdeboun˚_öãrvÆ
 = 
WLR8100_KEYS_DEBOUNCE_INTERVAL
,

91 .
	ggpio
 = 
WLR8100_GPIO_BTN_WPS
,

92 .
	ga˘ive_low
 = 1,

95 .
	gdesc
 = "RFKILL button",

96 .
	gty≥
 = 
EV_KEY
,

97 .
	gcode
 = 
KEY_RFKILL
,

98 .
	gdeboun˚_öãrvÆ
 = 
WLR8100_KEYS_DEBOUNCE_INTERVAL
,

99 .
	ggpio
 = 
WLR8100_GPIO_BTN_RFKILL
,

100 .
	ga˘ive_low
 = 1,

104 
¨8327_∑d_cfg
 
	gwÃ8100_¨8327_∑d0_cfg
;

105 
¨8327_∑d_cfg
 
	gwÃ8100_¨8327_∑d6_cfg
;

107 
¨8327_∂©f‹m_d©a
 
	gwÃ8100_¨8327_d©a
 = {

108 .
∑d0_cfg
 = &
wÃ8100_¨8327_∑d0_cfg
,

109 .
	g∑d6_cfg
 = &
wÃ8100_¨8327_∑d6_cfg
,

110 .
	gp‹t0_cfg
 = {

111 .
f‹˚_lök
 = 1,

112 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

113 .
	gdu∂ex
 = 1,

114 .
	gtx∑u£
 = 1,

115 .
	grx∑u£
 = 1,

117 .
	gp‹t6_cfg
 = {

118 .
f‹˚_lök
 = 1,

119 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

120 .
	gdu∂ex
 = 1,

121 .
	gtx∑u£
 = 1,

122 .
	grx∑u£
 = 1,

126 
mdio_bﬂrd_öfo
 
	gwÃ8100_mdio0_öfo
[] = {

128 .
bus_id
 = "ag71xx-mdio.0",

129 .
	gmdio_addr
 = 0,

130 .
	g∂©f‹m_d©a
 = &
wÃ8100_¨8327_d©a
,

134 
__öô
 
	$wÃ8100_comm⁄_£tup
()

137 
	`©h79_ªgi°î_m25p80
(
NULL
);

139 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wÃ8100_Àds_gpio
),

140 
wÃ8100_Àds_gpio
);

141 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WLR8100_KEYS_POLL_INTERVAL
,

142 
	`ARRAY_SIZE
(
wÃ8100_gpio_keys
),

143 
wÃ8100_gpio_keys
);

145 
	`©h79_ªgi°î_usb
();

147 
	`©h79_ªgi°î_wmac_sim∂e
();

149 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

151 
	`©h79_ªgi°î_mdio
(0, 0x0);

153 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wÃ8100_mdio0_öfo
,

154 
	`ARRAY_SIZE
(
wÃ8100_mdio0_öfo
));

157 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

158 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

159 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

161 
	`©h79_ªgi°î_ëh
(0);

164 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

165 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

166 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

168 
	`©h79_ªgi°î_ëh
(1);

169 
	}
}

171 
__öô
 
	$wÃ8100_010_£tup
()

174 
wÃ8100_¨8327_∑d0_cfg
.
mode
 = 
AR8327_PAD_MAC_RGMII
;

175 
wÃ8100_¨8327_∑d0_cfg
.
tx˛k_dñay_í
 = 
åue
;

176 
wÃ8100_¨8327_∑d0_cfg
.
rx˛k_dñay_í
 = 
åue
;

177 
wÃ8100_¨8327_∑d0_cfg
.
tx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
;

178 
wÃ8100_¨8327_∑d0_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
;

181 
wÃ8100_¨8327_∑d6_cfg
.
mode
 = 
AR8327_PAD_MAC_SGMII
;

182 
wÃ8100_¨8327_∑d6_cfg
.
rx˛k_dñay_í
 = 
åue
;

183 
wÃ8100_¨8327_∑d6_cfg
.
rx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL0
;

185 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0xa6000000;

186 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

188 
	`wÃ8100_comm⁄_£tup
();

189 
	`≠91_pci_öô_sim∂e
();

190 
	}
}

192 
MIPS_MACHINE
(
ATH79_MACH_WLR8100
, "WLR8100",

194 
wÃ8100_010_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wndap360.c

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/dñay.h
>

18 
	~<asm/mach-©h79/©h79.h
>

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"machty≥s.h
"

27 
	#WNDAP360_GPIO_LED_POWER_ORANGE
 0

	)

28 
	#WNDAP360_GPIO_LED_POWER_GREEN
 2

	)

31 
	#WNDAP360_GPIO_BTN_RESET
 8

	)

33 
	#WNDAP360_KEYS_POLL_INTERVAL
 20

	)

34 
	#WNDAP360_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNDAP360_KEYS_POLL_INTERVAL
)

	)

36 
	#WNDAP360_WMAC0_MAC_OFFSET
 0x120c

	)

37 
	#WNDAP360_WMAC1_MAC_OFFSET
 0x520c

	)

38 
	#WNDAP360_CALDATA0_OFFSET
 0x1000

	)

39 
	#WNDAP360_CALDATA1_OFFSET
 0x5000

	)

45 
gpio_Àd
 
	gwnd≠360_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "netgear:green:power",

48 .
	ggpio
 = 
WNDAP360_GPIO_LED_POWER_GREEN
,

49 .
	ga˘ive_low
 = 1,

51 .
	g«me
 = "netgear:orange:power",

52 .
	ggpio
 = 
WNDAP360_GPIO_LED_POWER_ORANGE
,

53 .
	ga˘ive_low
 = 1,

57 
gpio_keys_buâ⁄
 
	gwnd≠360_gpio_keys
[] 
	g__öôd©a
 = {

59 .
desc
 = "reset",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
KEY_RESTART
,

62 .
	gdeboun˚_öãrvÆ
 = 
WNDAP360_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
WNDAP360_GPIO_BTN_RESET
,

64 .
	ga˘ive_low
 = 1,

68 
	#WNDAP360_LAN_PHYMASK
 0x0f

	)

70 
__öô
 
	$wnd≠360_£tup
()

72 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

74 
	`©h79_ªgi°î_mdio
(0, ~(
WNDAP360_LAN_PHYMASK
));

77 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

78 
¨t
 + 
WNDAP360_WMAC0_MAC_OFFSET
, 1);

79 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x11110000;

80 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

81 
©h79_ëh0_d©a
.
phy_mask
 = 
WNDAP360_LAN_PHYMASK
;

82 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

83 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

85 
	`©h79_ªgi°î_ëh
(0);

87 
	`©h79_ªgi°î_m25p80
(
NULL
);

89 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wnd≠360_Àds_gpio
),

90 
wnd≠360_Àds_gpio
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WNDAP360_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
wnd≠360_gpio_keys
),

94 
wnd≠360_gpio_keys
);

96 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 5);

97 
	`≠9x_pci_£tup_wmac_Àd_pö
(1, 5);

99 
	`≠94_pci_öô
(
¨t
 + 
WNDAP360_CALDATA0_OFFSET
,

100 
¨t
 + 
WNDAP360_WMAC0_MAC_OFFSET
,

101 
¨t
 + 
WNDAP360_CALDATA1_OFFSET
,

102 
¨t
 + 
WNDAP360_WMAC1_MAC_OFFSET
);

103 
	}
}

105 
MIPS_MACHINE
(
ATH79_MACH_WNDAP360
, "WNDAP360", "NETGEAR WNDAP360", 
wnd≠360_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wndr3700.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/πl8366.h
>

18 
	~<asm/mach-©h79/©h79.h
>

20 
	~"dev-≠9x-pci.h
"

21 
	~"dev-ëh.h
"

22 
	~"dev-gpio-buâ⁄s.h
"

23 
	~"dev-Àds-gpio.h
"

24 
	~"dev-m25p80.h
"

25 
	~"dev-usb.h
"

26 
	~"machty≥s.h
"

28 
	#WNDR3700_GPIO_LED_WPS_ORANGE
 0

	)

29 
	#WNDR3700_GPIO_LED_POWER_ORANGE
 1

	)

30 
	#WNDR3700_GPIO_LED_POWER_GREEN
 2

	)

31 
	#WNDR3700_GPIO_LED_WPS_GREEN
 4

	)

32 
	#WNDR3700_GPIO_LED_WAN_GREEN
 6

	)

34 
	#WNDR3700_GPIO_BTN_WPS
 3

	)

35 
	#WNDR3700_GPIO_BTN_RESET
 8

	)

36 
	#WNDR3700_GPIO_BTN_RFKILL
 11

	)

38 
	#WNDR3700_GPIO_RTL8366_SDA
 5

	)

39 
	#WNDR3700_GPIO_RTL8366_SCK
 7

	)

41 
	#WNDR3700_KEYS_POLL_INTERVAL
 20

	)

42 
	#WNDR3700_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNDR3700_KEYS_POLL_INTERVAL
)

	)

44 
	#WNDR3700_ETH0_MAC_OFFSET
 0

	)

45 
	#WNDR3700_ETH1_MAC_OFFSET
 0x6

	)

47 
	#WNDR3700_WMAC0_MAC_OFFSET
 0

	)

48 
	#WNDR3700_WMAC1_MAC_OFFSET
 0xc

	)

49 
	#WNDR3700_CALDATA0_OFFSET
 0x1000

	)

50 
	#WNDR3700_CALDATA1_OFFSET
 0x5000

	)

52 
gpio_Àd
 
	gwndr3700_Àds_gpio
[] 
	g__öôd©a
 = {

54 .
«me
 = "netgear:green:power",

55 .
	ggpio
 = 
WNDR3700_GPIO_LED_POWER_GREEN
,

56 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "netgear:orange:power",

59 .
	ggpio
 = 
WNDR3700_GPIO_LED_POWER_ORANGE
,

60 .
	ga˘ive_low
 = 1,

62 .
	g«me
 = "netgear:green:wps",

63 .
	ggpio
 = 
WNDR3700_GPIO_LED_WPS_GREEN
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "netgear:orange:wps",

67 .
	ggpio
 = 
WNDR3700_GPIO_LED_WPS_ORANGE
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "netgear:green:wan",

71 .
	ggpio
 = 
WNDR3700_GPIO_LED_WAN_GREEN
,

72 .
	ga˘ive_low
 = 1,

76 
gpio_keys_buâ⁄
 
	gwndr3700_gpio_keys
[] 
	g__öôd©a
 = {

78 .
desc
 = "reset",

79 .
	gty≥
 = 
EV_KEY
,

80 .
	gcode
 = 
KEY_RESTART
,

81 .
	gdeboun˚_öãrvÆ
 = 
WNDR3700_KEYS_DEBOUNCE_INTERVAL
,

82 .
	ggpio
 = 
WNDR3700_GPIO_BTN_RESET
,

83 .
	ga˘ive_low
 = 1,

85 .
	gdesc
 = "wps",

86 .
	gty≥
 = 
EV_KEY
,

87 .
	gcode
 = 
KEY_WPS_BUTTON
,

88 .
	gdeboun˚_öãrvÆ
 = 
WNDR3700_KEYS_DEBOUNCE_INTERVAL
,

89 .
	ggpio
 = 
WNDR3700_GPIO_BTN_WPS
,

90 .
	ga˘ive_low
 = 1,

92 .
	gdesc
 = "rfkill",

93 .
	gty≥
 = 
EV_KEY
,

94 .
	gcode
 = 
KEY_RFKILL
,

95 .
	gdeboun˚_öãrvÆ
 = 
WNDR3700_KEYS_DEBOUNCE_INTERVAL
,

96 .
	ggpio
 = 
WNDR3700_GPIO_BTN_RFKILL
,

97 .
	ga˘ive_low
 = 1,

101 
πl8366_∂©f‹m_d©a
 
	gwndr3700_πl8366s_d©a
 = {

102 .
gpio_sda
 = 
WNDR3700_GPIO_RTL8366_SDA
,

103 .
	ggpio_sck
 = 
WNDR3700_GPIO_RTL8366_SCK
,

106 
∂©f‹m_devi˚
 
	gwndr3700_πl8366s_devi˚
 = {

107 .
«me
 = 
RTL8366S_DRIVER_NAME
,

108 .
	gid
 = -1,

109 .
	gdev
 = {

110 .
∂©f‹m_d©a
 = &
wndr3700_πl8366s_d©a
,

114 
__öô
 
	$wndr3700_£tup
()

116 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

123 
	`©h79_öô_loˇl_mac
(
©h79_ëh0_d©a
.
mac_addr
,

124 
¨t
 + 
WNDR3700_ETH0_MAC_OFFSET
);

125 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x11110000;

126 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
wndr3700_πl8366s_devi˚
.
dev
;

127 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

128 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

129 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

131 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

132 
¨t
 + 
WNDR3700_ETH1_MAC_OFFSET
, 0);

133 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x11110000;

134 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
wndr3700_πl8366s_devi˚
.
dev
;

135 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

136 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

138 
	`©h79_ªgi°î_ëh
(0);

139 
	`©h79_ªgi°î_ëh
(1);

141 
	`©h79_ªgi°î_usb
();

143 
	`©h79_ªgi°î_m25p80
(
NULL
);

145 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wndr3700_Àds_gpio
),

146 
wndr3700_Àds_gpio
);

148 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WNDR3700_KEYS_POLL_INTERVAL
,

149 
	`ARRAY_SIZE
(
wndr3700_gpio_keys
),

150 
wndr3700_gpio_keys
);

152 
	`∂©f‹m_devi˚_ªgi°î
(&
wndr3700_πl8366s_devi˚
);

153 
	`∂©f‹m_devi˚_ªgi°î_sim∂e
("wndr3700-Àd-usb", -1, 
NULL
, 0);

155 
	`≠9x_pci_£tup_wmac_Àd_pö
(0, 5);

156 
	`≠9x_pci_£tup_wmac_Àd_pö
(1, 5);

159 
	`≠9x_pci_£tup_wmac_gpio
(0, (0xf << 6), (0xa << 6));

162 
	`≠9x_pci_£tup_wmac_gpio
(1, (0xf << 6), (0x6 << 6));

164 
	`≠94_pci_öô
(
¨t
 + 
WNDR3700_CALDATA0_OFFSET
,

165 
¨t
 + 
WNDR3700_WMAC0_MAC_OFFSET
,

166 
¨t
 + 
WNDR3700_CALDATA1_OFFSET
,

167 
¨t
 + 
WNDR3700_WMAC1_MAC_OFFSET
);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_WNDR3700
, "WNDR3700",

172 
wndr3700_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wndr4300.c

12 
	~<löux/vîsi⁄.h
>

13 
	~<löux/pci.h
>

14 
	~<löux/phy.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<löux/¨8216_∂©f‹m.h
>

19 
	~<löux/mtd/mtd.h
>

20 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

21 
	~<löux/mtd/«nd.h
>

23 
	~<löux/mtd/øw«nd.h
>

25 
	~<löux/∂©f‹m/¨934x_nfc.h
>

27 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

29 
	~"comm⁄.h
"

30 
	~"dev-≠9x-pci.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-gpio-buâ⁄s.h
"

33 
	~"dev-Àds-gpio.h
"

34 
	~"dev-nfc.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-wmac.h
"

37 
	~"machty≥s.h
"

40 
	#WNDR4300_GPIO_LED_POWER_GREEN
 0

	)

41 
	#WNDR4300_GPIO_LED_POWER_AMBER
 2

	)

42 
	#WNDR4300_GPIO_LED_USB
 13

	)

43 
	#WNDR4300_GPIO_LED_WAN_GREEN
 1

	)

44 
	#WNDR4300_GPIO_LED_WAN_AMBER
 3

	)

45 
	#WNDR4300_GPIO_LED_WLAN2G
 11

	)

46 
	#WNDR4300_GPIO_LED_WLAN5G
 14

	)

47 
	#WNDR4300_GPIO_LED_WPS_GREEN
 16

	)

48 
	#WNDR4300_GPIO_LED_WPS_AMBER
 17

	)

50 
	#WNDR4300_GPIO_BTN_RESET
 21

	)

51 
	#WNDR4300_GPIO_BTN_WIRELESS
 15

	)

52 
	#WNDR4300_GPIO_BTN_WPS
 12

	)

55 
	#WNDR4300_GPIO_USB_5V
 0

	)

57 
	#WNDR4300_KEYS_POLL_INTERVAL
 20

	)

58 
	#WNDR4300_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNDR4300_KEYS_POLL_INTERVAL
)

	)

60 
gpio_Àd
 
	gwndr4300_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "netgear:green:power",

63 .
	ggpio
 = 
WNDR4300_GPIO_LED_POWER_GREEN
,

64 .
	ga˘ive_low
 = 1,

67 .
	g«me
 = "netgear:amber:power",

68 .
	ggpio
 = 
WNDR4300_GPIO_LED_POWER_AMBER
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "netgear:green:wan",

73 .
	ggpio
 = 
WNDR4300_GPIO_LED_WAN_GREEN
,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "netgear:amber:wan",

78 .
	ggpio
 = 
WNDR4300_GPIO_LED_WAN_AMBER
,

79 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "netgear:green:usb",

83 .
	ggpio
 = 
WNDR4300_GPIO_LED_USB
,

84 .
	ga˘ive_low
 = 1,

87 .
	g«me
 = "netgear:green:wps",

88 .
	ggpio
 = 
WNDR4300_GPIO_LED_WPS_GREEN
,

89 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "netgear:amber:wps",

93 .
	ggpio
 = 
WNDR4300_GPIO_LED_WPS_AMBER
,

94 .
	ga˘ive_low
 = 1,

97 .
	g«me
 = "netgear:green:wlan2g",

98 .
	ggpio
 = 
WNDR4300_GPIO_LED_WLAN2G
,

99 .
	ga˘ive_low
 = 1,

102 .
	g«me
 = "netgear:blue:wlan5g",

103 .
	ggpio
 = 
WNDR4300_GPIO_LED_WLAN5G
,

104 .
	ga˘ive_low
 = 1,

108 
gpio_keys_buâ⁄
 
	gwndr4300_gpio_keys
[] 
	g__öôd©a
 = {

110 .
desc
 = "Reset button",

111 .
	gty≥
 = 
EV_KEY
,

112 .
	gcode
 = 
KEY_RESTART
,

113 .
	gdeboun˚_öãrvÆ
 = 
WNDR4300_KEYS_DEBOUNCE_INTERVAL
,

114 .
	ggpio
 = 
WNDR4300_GPIO_BTN_RESET
,

115 .
	ga˘ive_low
 = 1,

118 .
	gdesc
 = "WPS button",

119 .
	gty≥
 = 
EV_KEY
,

120 .
	gcode
 = 
KEY_WPS_BUTTON
,

121 .
	gdeboun˚_öãrvÆ
 = 
WNDR4300_KEYS_DEBOUNCE_INTERVAL
,

122 .
	ggpio
 = 
WNDR4300_GPIO_BTN_WPS
,

123 .
	ga˘ive_low
 = 1,

126 .
	gdesc
 = "Wireless button",

127 .
	gty≥
 = 
EV_KEY
,

128 .
	gcode
 = 
KEY_RFKILL
,

129 .
	gdeboun˚_öãrvÆ
 = 
WNDR4300_KEYS_DEBOUNCE_INTERVAL
,

130 .
	ggpio
 = 
WNDR4300_GPIO_BTN_WIRELESS
,

131 .
	ga˘ive_low
 = 1,

135 
¨8327_∑d_cfg
 
	gwndr4300_¨8327_∑d0_cfg
 = {

136 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

137 .
	gtx˛k_dñay_í
 = 
åue
,

138 .
	grx˛k_dñay_í
 = 
åue
,

139 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

140 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

143 
¨8327_Àd_cfg
 
	gwndr4300_¨8327_Àd_cfg
 = {

144 .
Àd_˘æ0
 = 0xcc35cc35,

145 .
	gÀd_˘æ1
 = 0xcb37cb37,

146 .
	gÀd_˘æ2
 = 0x00000000,

147 .
	gÀd_˘æ3
 = 0x00f3cf00,

148 .
	g›í_døö
 = 
åue
,

151 
¨8327_∂©f‹m_d©a
 
	gwndr4300_¨8327_d©a
 = {

152 .
∑d0_cfg
 = &
wndr4300_¨8327_∑d0_cfg
,

153 .
	gp‹t0_cfg
 = {

154 .
f‹˚_lök
 = 1,

155 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

156 .
	gdu∂ex
 = 1,

157 .
	gtx∑u£
 = 1,

158 .
	grx∑u£
 = 1,

160 .
	gÀd_cfg
 = &
wndr4300_¨8327_Àd_cfg
,

163 
mdio_bﬂrd_öfo
 
	gwndr4300_mdio0_öfo
[] = {

165 .
bus_id
 = "ag71xx-mdio.0",

166 .
	gmdio_addr
 = 0,

167 .
	g∂©f‹m_d©a
 = &
wndr4300_¨8327_d©a
,

171 
__öô
 
	$wndr4300_£tup
()

173 
i
;

175 
i
 = 0; i < 
	`ARRAY_SIZE
(
wndr4300_Àds_gpio
); i++)

176 
	`©h79_gpio_ouçut_£À˘
(
wndr4300_Àds_gpio
[
i
].
gpio
,

177 
AR934X_GPIO_OUT_GPIO
);

179 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wndr4300_Àds_gpio
),

180 
wndr4300_Àds_gpio
);

181 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WNDR4300_KEYS_POLL_INTERVAL
,

182 
	`ARRAY_SIZE
(
wndr4300_gpio_keys
),

183 
wndr4300_gpio_keys
);

185 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
);

187 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wndr4300_mdio0_öfo
,

188 
	`ARRAY_SIZE
(
wndr4300_mdio0_öfo
));

190 
	`©h79_ªgi°î_mdio
(0, 0x0);

193 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

194 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

195 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

196 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

197 
	`©h79_ªgi°î_ëh
(0);

199 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_HW
);

200 
	`©h79_ªgi°î_nfc
();

201 
	`©h79_ªgi°î_usb
();

203 
	`©h79_ªgi°î_wmac_sim∂e
();

206 
	`≠9x_pci_£tup_wmac_gpio
(0, 
	`BIT
(
WNDR4300_GPIO_USB_5V
),

207 
	`BIT
(
WNDR4300_GPIO_USB_5V
));

209 
	`≠91_pci_öô_sim∂e
();

210 
	}
}

212 
MIPS_MACHINE
(
ATH79_MACH_WNDR3700_V4
, "WNDR3700_V4", "NETGEAR WNDR3700v4",

213 
wndr4300_£tup
);

214 
MIPS_MACHINE
(
ATH79_MACH_WNDR4300
, "WNDR4300", "NETGEAR WNDR4300",

215 
wndr4300_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wnr2000-v3.c

15 
	~<löux/mtd/mtd.h
>

16 
	~<löux/mtd/∑πôi⁄s.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<asm/mach-©h79/©h79.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

22 
	~"comm⁄.h
"

24 
	~"dev-≠9x-pci.h
"

25 
	~"dev-ëh.h
"

26 
	~"dev-gpio-buâ⁄s.h
"

27 
	~"dev-Àds-gpio.h
"

28 
	~"dev-m25p80.h
"

29 
	~"machty≥s.h
"

32 
	#WNR2000V3_GPIO_LED_WAN_GREEN
 0

	)

33 
	#WNR2000V3_GPIO_LED_LAN1_AMBER
 1

	)

34 
	#WNR2000V3_GPIO_LED_LAN2_AMBER
 6

	)

35 
	#WNR2000V3_GPIO_LED_WPS_GREEN
 7

	)

36 
	#WNR2000V3_GPIO_LED_LAN3_AMBER
 8

	)

37 
	#WNR2000V3_GPIO_BTN_WPS
 11

	)

38 
	#WNR2000V3_GPIO_LED_LAN4_AMBER
 12

	)

39 
	#WNR2000V3_GPIO_LED_LAN1_GREEN
 13

	)

40 
	#WNR2000V3_GPIO_LED_LAN2_GREEN
 14

	)

41 
	#WNR2000V3_GPIO_LED_LAN3_GREEN
 15

	)

42 
	#WNR2000V3_GPIO_LED_LAN4_GREEN
 16

	)

43 
	#WNR2000V3_GPIO_LED_WAN_AMBER
 17

	)

46 
	#WNR2000V3_GPIO_WMAC_LED_WLAN_BLUE
 1

	)

47 
	#WNR2000V3_GPIO_WMAC_LED_TEST_AMBER
 2

	)

48 
	#WNR2000V3_GPIO_WMAC_LED_POWER_GREEN
 3

	)

49 
	#WNR2000V3_GPIO_WMAC_BTN_RESET
 8

	)

50 
	#WNR2000V3_GPIO_WMAC_BTN_RFKILL
 9

	)

53 
	#WNR612V2_GPIO_LED_POWER_GREEN
 11

	)

54 
	#WNR612V2_GPIO_LED_LAN1_GREEN
 13

	)

55 
	#WNR612V2_GPIO_LED_LAN2_GREEN
 14

	)

56 
	#WNR612V2_GPIO_LED_WAN_GREEN
 17

	)

59 
	#WNR612V2_GPIO_WMAC_LED_WLAN_GREEN
 1

	)

60 
	#WNR612V2_GPIO_WMAC_BTN_RESET
 7

	)

63 
	#WNR1000V2_GPIO_LED_WAN_AMBER
 0

	)

64 
	#WNR1000V2_GPIO_LED_TEST_AMBER
 1

	)

65 
	#WNR1000V2_GPIO_LED_LAN1_AMBER
 6

	)

66 
	#WNR1000V2_GPIO_LED_LAN2_AMBER
 7

	)

67 
	#WNR1000V2_GPIO_LED_LAN3_AMBER
 8

	)

68 
	#WNR1000V2_GPIO_LED_POWER_GREEN
 11

	)

69 
	#WNR1000V2_GPIO_LED_LAN4_AMBER
 12

	)

70 
	#WNR1000V2_GPIO_LED_LAN1_GREEN
 13

	)

71 
	#WNR1000V2_GPIO_LED_LAN2_GREEN
 14

	)

72 
	#WNR1000V2_GPIO_LED_LAN3_GREEN
 15

	)

73 
	#WNR1000V2_GPIO_LED_LAN4_GREEN
 16

	)

74 
	#WNR1000V2_GPIO_LED_WAN_GREEN
 17

	)

77 
	#WNR1000V2_GPIO_WMAC_LED_WLAN_BLUE
 1

	)

78 
	#WNR1000V2_GPIO_WMAC_LED_WPS_GREEN
 5

	)

79 
	#WNR1000V2_GPIO_WMAC_BTN_WPS
 6

	)

80 
	#WNR1000V2_GPIO_WMAC_BTN_RESET
 7

	)

81 
	#WNR1000V2_GPIO_WMAC_BTN_RFKILL
 8

	)

84 
	#WPN824N_GPIO_LED_WAN_AMBER
 0

	)

85 
	#WPN824N_GPIO_LED_STATUS_AMBER
 1

	)

86 
	#WPN824N_GPIO_LED_LAN1_AMBER
 6

	)

87 
	#WPN824N_GPIO_LED_LAN2_AMBER
 7

	)

88 
	#WPN824N_GPIO_LED_LAN3_AMBER
 8

	)

89 
	#WPN824N_GPIO_LED_LAN4_AMBER
 12

	)

90 
	#WPN824N_GPIO_LED_LAN1_GREEN
 13

	)

91 
	#WPN824N_GPIO_LED_LAN2_GREEN
 14

	)

92 
	#WPN824N_GPIO_LED_LAN3_GREEN
 15

	)

93 
	#WPN824N_GPIO_LED_LAN4_GREEN
 16

	)

94 
	#WPN824N_GPIO_LED_WAN_GREEN
 17

	)

97 
	#WPN824N_WGPIO_LED_PWR_GREEN
 0

	)

98 
	#WPN824N_WGPIO_LED_WLAN_BLUE
 1

	)

99 
	#WPN824N_WGPIO_LED_WPS1_BLUE
 5

	)

100 
	#WPN824N_WGPIO_LED_WPS2_BLUE
 9

	)

101 
	#WPN824N_WGPIO_LED_TEST_AMBER
 10

	)

102 
	#WPN824N_WGPIO_BTN_WPS
 6

	)

103 
	#WPN824N_WGPIO_BTN_RESET
 7

	)

104 
	#WPN824N_WGPIO_BTN_WLAN
 8

	)

106 
	#WNR2000V3_KEYS_POLL_INTERVAL
 20

	)

107 
	#WNR2000V3_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNR2000V3_KEYS_POLL_INTERVAL
)

	)

110 
	#WNR2000V3_MAC0_OFFSET
 0

	)

111 
	#WNR2000V3_MAC1_OFFSET
 6

	)

112 
	#WNR2000V3_PCIE_CALDATA_OFFSET
 0x1000

	)

113 
	#WNR2000V3_WMAC_OFFSET
 0x108¯

	)

115 
gpio_Àd
 
	gwƒ2000v3_Àds_gpio
[] 
	g__öôd©a
 = {

117 .
«me
 = "netgear:green:wan",

118 .
	ggpio
 = 
WNR2000V3_GPIO_LED_WAN_GREEN
,

119 .
	ga˘ive_low
 = 1,

121 .
	g«me
 = "netgear:amber:lan1",

122 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN1_AMBER
,

123 .
	ga˘ive_low
 = 1,

125 .
	g«me
 = "netgear:amber:lan2",

126 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN2_AMBER
,

127 .
	ga˘ive_low
 = 1,

129 .
	g«me
 = "netgear:amber:lan3",

130 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN3_AMBER
,

131 .
	ga˘ive_low
 = 1,

133 .
	g«me
 = "netgear:amber:lan4",

134 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN4_AMBER
,

135 .
	ga˘ive_low
 = 1,

137 .
	g«me
 = "netgear:green:wps",

138 .
	ggpio
 = 
WNR2000V3_GPIO_LED_WPS_GREEN
,

139 .
	ga˘ive_low
 = 1,

141 .
	g«me
 = "netgear:green:lan1",

142 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN1_GREEN
,

143 .
	ga˘ive_low
 = 1,

145 .
	g«me
 = "netgear:green:lan2",

146 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN2_GREEN
,

147 .
	ga˘ive_low
 = 1,

149 .
	g«me
 = "netgear:green:lan3",

150 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN3_GREEN
,

151 .
	ga˘ive_low
 = 1,

153 .
	g«me
 = "netgear:green:lan4",

154 .
	ggpio
 = 
WNR2000V3_GPIO_LED_LAN4_GREEN
,

155 .
	ga˘ive_low
 = 1,

157 .
	g«me
 = "netgear:amber:wan",

158 .
	ggpio
 = 
WNR2000V3_GPIO_LED_WAN_AMBER
,

159 .
	ga˘ive_low
 = 1,

163 
gpio_Àd
 
	gwƒ2000v3_wmac_Àds_gpio
[] = {

165 .
«me
 = "netgear:green:power",

166 .
	ggpio
 = 
WNR2000V3_GPIO_WMAC_LED_POWER_GREEN
,

167 .
	ga˘ive_low
 = 1,

168 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

170 .
	g«me
 = "netgear:amber:test",

171 .
	ggpio
 = 
WNR2000V3_GPIO_WMAC_LED_TEST_AMBER
,

172 .
	ga˘ive_low
 = 1,

174 .
	g«me
 = "netgear:blue:wlan",

175 .
	ggpio
 = 
WNR2000V3_GPIO_WMAC_LED_WLAN_BLUE
,

176 .
	ga˘ive_low
 = 1,

180 
gpio_Àd
 
	gwƒ612v2_Àds_gpio
[] 
	g__öôd©a
 = {

182 .
«me
 = "netgear:green:power",

183 .
	ggpio
 = 
WNR612V2_GPIO_LED_POWER_GREEN
,

184 .
	ga˘ive_low
 = 1,

186 .
	g«me
 = "netgear:green:lan1",

187 .
	ggpio
 = 
WNR612V2_GPIO_LED_LAN1_GREEN
,

188 .
	ga˘ive_low
 = 1,

190 .
	g«me
 = "netgear:green:lan2",

191 .
	ggpio
 = 
WNR612V2_GPIO_LED_LAN2_GREEN
,

192 .
	ga˘ive_low
 = 1,

194 .
	g«me
 = "netgear:green:wan",

195 .
	ggpio
 = 
WNR612V2_GPIO_LED_WAN_GREEN
,

196 .
	ga˘ive_low
 = 1,

200 
gpio_Àd
 
	gwƒ612v2_wmac_Àds_gpio
[] = {

202 .
«me
 = "netgear:green:wlan",

203 .
	ggpio
 = 
WNR612V2_GPIO_WMAC_LED_WLAN_GREEN
,

204 .
	ga˘ive_low
 = 1,

208 
gpio_Àd
 
	gwƒ1000v2_Àds_gpio
[] 
	g__öôd©a
 = {

210 .
«me
 = "netgear:amber:lan1",

211 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN1_AMBER
,

212 .
	ga˘ive_low
 = 1,

214 .
	g«me
 = "netgear:amber:lan2",

215 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN2_AMBER
,

216 .
	ga˘ive_low
 = 1,

218 .
	g«me
 = "netgear:amber:lan3",

219 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN3_AMBER
,

220 .
	ga˘ive_low
 = 1,

222 .
	g«me
 = "netgear:amber:lan4",

223 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN4_AMBER
,

224 .
	ga˘ive_low
 = 1,

226 .
	g«me
 = "netgear:amber:test",

227 .
	ggpio
 = 
WNR1000V2_GPIO_LED_TEST_AMBER
,

228 .
	ga˘ive_low
 = 1,

230 .
	g«me
 = "netgear:amber:wan",

231 .
	ggpio
 = 
WNR1000V2_GPIO_LED_WAN_AMBER
,

232 .
	ga˘ive_low
 = 1,

234 .
	g«me
 = "netgear:green:lan1",

235 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN1_GREEN
,

236 .
	ga˘ive_low
 = 1,

238 .
	g«me
 = "netgear:green:lan2",

239 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN2_GREEN
,

240 .
	ga˘ive_low
 = 1,

242 .
	g«me
 = "netgear:green:lan3",

243 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN3_GREEN
,

244 .
	ga˘ive_low
 = 1,

246 .
	g«me
 = "netgear:green:lan4",

247 .
	ggpio
 = 
WNR1000V2_GPIO_LED_LAN4_GREEN
,

248 .
	ga˘ive_low
 = 1,

250 .
	g«me
 = "netgear:green:power",

251 .
	ggpio
 = 
WNR1000V2_GPIO_LED_POWER_GREEN
,

252 .
	ga˘ive_low
 = 1,

254 .
	g«me
 = "netgear:green:wan",

255 .
	ggpio
 = 
WNR1000V2_GPIO_LED_WAN_GREEN
,

256 .
	ga˘ive_low
 = 1,

260 
gpio_Àd
 
	gwƒ1000v2_wmac_Àds_gpio
[] = {

262 .
«me
 = "netgear:green:wps",

263 .
	ggpio
 = 
WNR1000V2_GPIO_WMAC_LED_WPS_GREEN
,

264 .
	ga˘ive_low
 = 1,

266 .
	g«me
 = "netgear:blue:wlan",

267 .
	ggpio
 = 
WNR1000V2_GPIO_WMAC_LED_WLAN_BLUE
,

268 .
	ga˘ive_low
 = 1,

272 
gpio_Àd
 
	gw≤824n_Àds_gpio
[] 
	g__öôd©a
 = {

274 .
«me
 = "netgear:amber:wan",

275 .
	ggpio
 = 
WPN824N_GPIO_LED_WAN_AMBER
,

276 .
	ga˘ive_low
 = 1,

278 .
	g«me
 = "netgear:amber:status",

279 .
	ggpio
 = 
WPN824N_GPIO_LED_STATUS_AMBER
,

280 .
	ga˘ive_low
 = 1,

282 .
	g«me
 = "netgear:amber:lan1",

283 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN1_AMBER
,

284 .
	ga˘ive_low
 = 1,

286 .
	g«me
 = "netgear:amber:lan2",

287 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN2_AMBER
,

288 .
	ga˘ive_low
 = 1,

290 .
	g«me
 = "netgear:amber:lan3",

291 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN3_AMBER
,

292 .
	ga˘ive_low
 = 1,

294 .
	g«me
 = "netgear:amber:lan4",

295 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN4_AMBER
,

296 .
	ga˘ive_low
 = 1,

298 .
	g«me
 = "netgear:green:lan1",

299 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN1_GREEN
,

300 .
	ga˘ive_low
 = 1,

302 .
	g«me
 = "netgear:green:lan2",

303 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN2_GREEN
,

304 .
	ga˘ive_low
 = 1,

306 .
	g«me
 = "netgear:green:lan3",

307 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN3_GREEN
,

308 .
	ga˘ive_low
 = 1,

310 .
	g«me
 = "netgear:green:lan4",

311 .
	ggpio
 = 
WPN824N_GPIO_LED_LAN4_GREEN
,

312 .
	ga˘ive_low
 = 1,

314 .
	g«me
 = "netgear:green:wan",

315 .
	ggpio
 = 
WPN824N_GPIO_LED_WAN_GREEN
,

316 .
	ga˘ive_low
 = 1,

320 
gpio_Àd
 
	gw≤824n_wmac_Àds_gpio
[] = {

322 .
«me
 = "netgear:green:power",

323 .
	ggpio
 = 
WPN824N_WGPIO_LED_PWR_GREEN
,

324 .
	ga˘ive_low
 = 1,

326 .
	g«me
 = "netgear:blue:wps1",

327 .
	ggpio
 = 
WPN824N_WGPIO_LED_WPS1_BLUE
,

328 .
	ga˘ive_low
 = 1,

330 .
	g«me
 = "netgear:blue:wps2",

331 .
	ggpio
 = 
WPN824N_WGPIO_LED_WPS2_BLUE
,

332 .
	ga˘ive_low
 = 1,

334 .
	g«me
 = "netgear:amber:test",

335 .
	ggpio
 = 
WPN824N_WGPIO_LED_TEST_AMBER
,

336 .
	ga˘ive_low
 = 1,

338 .
	g«me
 = "netgear:blue:wlan",

339 .
	ggpio
 = 
WPN824N_WGPIO_LED_WLAN_BLUE
,

340 .
	ga˘ive_low
 = 1,

344 
gpio_keys_buâ⁄
 
	gwƒ2000v3_keys_gpio
[] 
	g__öôd©a
 = {

346 .
desc
 = "wps",

347 .
	gty≥
 = 
EV_KEY
,

348 .
	gcode
 = 
KEY_WPS_BUTTON
,

349 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

350 .
	ggpio
 = 
WNR2000V3_GPIO_BTN_WPS
,

351 .
	ga˘ive_low
 = 1,

355 
gpio_keys_buâ⁄
 
	gwƒ2000v3_wmac_keys_gpio
[] = {

357 .
desc
 = "reset",

358 .
	gty≥
 = 
EV_KEY
,

359 .
	gcode
 = 
KEY_RESTART
,

360 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

361 .
	ggpio
 = 
WNR2000V3_GPIO_WMAC_BTN_RESET
,

362 .
	ga˘ive_low
 = 1,

364 .
	gdesc
 = "rfkill",

365 .
	gty≥
 = 
EV_KEY
,

366 .
	gcode
 = 
KEY_RFKILL
,

367 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

368 .
	ggpio
 = 
WNR2000V3_GPIO_WMAC_BTN_RFKILL
,

369 .
	ga˘ive_low
 = 1,

373 
gpio_keys_buâ⁄
 
	gwƒ612v2_wmac_keys_gpio
[] = {

375 .
desc
 = "reset",

376 .
	gty≥
 = 
EV_KEY
,

377 .
	gcode
 = 
KEY_RESTART
,

378 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

379 .
	ggpio
 = 
WNR612V2_GPIO_WMAC_BTN_RESET
,

380 .
	ga˘ive_low
 = 1,

384 
gpio_keys_buâ⁄
 
	gwƒ1000v2_wmac_keys_gpio
[] = {

386 .
desc
 = "reset",

387 .
	gty≥
 = 
EV_KEY
,

388 .
	gcode
 = 
KEY_RESTART
,

389 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

390 .
	ggpio
 = 
WNR1000V2_GPIO_WMAC_BTN_RESET
,

391 .
	ga˘ive_low
 = 1,

393 .
	gdesc
 = "rfkill",

394 .
	gty≥
 = 
EV_KEY
,

395 .
	gcode
 = 
KEY_RFKILL
,

396 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

397 .
	ggpio
 = 
WNR1000V2_GPIO_WMAC_BTN_RFKILL
,

398 .
	ga˘ive_low
 = 1,

400 .
	gdesc
 = "wps",

401 .
	gty≥
 = 
EV_KEY
,

402 .
	gcode
 = 
KEY_WPS_BUTTON
,

403 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

404 .
	ggpio
 = 
WNR1000V2_GPIO_WMAC_BTN_WPS
,

405 .
	ga˘ive_low
 = 1,

409 
gpio_keys_buâ⁄
 
	gw≤824n_wmac_keys_gpio
[] = {

411 .
desc
 = "reset",

412 .
	gty≥
 = 
EV_KEY
,

413 .
	gcode
 = 
KEY_RESTART
,

414 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

415 .
	ggpio
 = 
WPN824N_WGPIO_BTN_RESET
,

416 .
	ga˘ive_low
 = 1,

418 .
	gdesc
 = "rfkill",

419 .
	gty≥
 = 
EV_KEY
,

420 .
	gcode
 = 
KEY_RFKILL
,

421 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

422 .
	ggpio
 = 
WPN824N_WGPIO_BTN_WLAN
,

423 .
	ga˘ive_low
 = 1,

425 .
	gdesc
 = "wps",

426 .
	gty≥
 = 
EV_KEY
,

427 .
	gcode
 = 
KEY_WPS_BUTTON
,

428 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V3_KEYS_DEBOUNCE_INTERVAL
,

429 .
	ggpio
 = 
WPN824N_WGPIO_BTN_WPS
,

430 .
	ga˘ive_low
 = 1,

441 
__öô
 
	$wƒ_gë_wmac
(
u8
 *
wmac_gí_addr
, 
mac0_¨t_off£t
,

442 
mac1_¨t_off£t
, 
wmac_¨t_off£t
)

444 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

445 
u8
 *
ëh0_mac_addr
 = (u8 *Ë(
¨t
 + 
mac0_¨t_off£t
);

446 
u8
 *
ëh1_mac_addr
 = (u8 *Ë(
¨t
 + 
mac1_¨t_off£t
);

447 
u8
 *
wœn_mac_addr
 = (u8 *Ë(
¨t
 + 
wmac_¨t_off£t
);

450 i‡((
wœn_mac_addr
[0] & wlan_mac_addr[1] & wlan_mac_addr[2] &

451 
wœn_mac_addr
[3] & wlan_mac_addr[4] & wlan_mac_addr[5]) == 0xff) {

452 
	`mem˝y
(
wmac_gí_addr
, 
ëh0_mac_addr
, 5);

453 
wmac_gí_addr
[5] = 
	`max
(
ëh0_mac_addr
[5], 
ëh1_mac_addr
[5]) + 1;

456 i‡(!
wmac_gí_addr
[5])

457 
wmac_gí_addr
[5] = 1;

459 
	`mem˝y
(
wmac_gí_addr
, 
wœn_mac_addr
, 6);

460 
	}
}

462 
__öô
 
	$wƒ_comm⁄_£tup
(
u8
 *
wmac_addr
)

464 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

466 
	`©h79_ªgi°î_mdio
(0, 0x0);

468 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
WNR2000V3_MAC0_OFFSET
, 0);

469 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

470 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

471 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

473 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
WNR2000V3_MAC1_OFFSET
, 0);

474 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

475 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

477 
	`©h79_ªgi°î_ëh
(0);

478 
	`©h79_ªgi°î_ëh
(1);

480 
	`©h79_ªgi°î_m25p80
(
NULL
);

481 
	`≠91_pci_öô
(
¨t
 + 
WNR2000V3_PCIE_CALDATA_OFFSET
, 
wmac_addr
);

482 
	}
}

484 
__öô
 
	$wƒ2000v3_£tup
()

486 
u8
 
wœn_mac_addr
[6];

493 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
 |

494 
AR724X_GPIO_FUNC_UART_EN
,

495 
AR724X_GPIO_FUNC_CLK_OBS1_EN
 |

496 
AR724X_GPIO_FUNC_CLK_OBS2_EN
 |

497 
AR724X_GPIO_FUNC_CLK_OBS3_EN
 |

498 
AR724X_GPIO_FUNC_CLK_OBS4_EN
 |

499 
AR724X_GPIO_FUNC_CLK_OBS5_EN
 |

500 
AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 |

501 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

502 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

503 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

504 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

505 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 |

506 
	`BIT
(20));

508 
	`wƒ_gë_wmac
(
wœn_mac_addr
, 
WNR2000V3_MAC0_OFFSET
,

509 
WNR2000V3_MAC1_OFFSET
, 
WNR2000V3_WMAC_OFFSET
);

511 
	`wƒ_comm⁄_£tup
(
wœn_mac_addr
);

513 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ2000v3_Àds_gpio
),

514 
wƒ2000v3_Àds_gpio
);

517 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(
PLATFORM_DEVID_AUTO
,

518 
WNR2000V3_KEYS_POLL_INTERVAL
,

519 
	`ARRAY_SIZE
(
wƒ2000v3_keys_gpio
),

520 
wƒ2000v3_keys_gpio
);

522 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wƒ2000v3_wmac_Àds_gpio
,

523 
	`ARRAY_SIZE
(
wƒ2000v3_wmac_Àds_gpio
));

525 
	`≠9x_pci_£tup_wmac_bäs
(0, 
wƒ2000v3_wmac_keys_gpio
,

526 
	`ARRAY_SIZE
(
wƒ2000v3_wmac_keys_gpio
),

527 
WNR2000V3_KEYS_POLL_INTERVAL
);

528 
	}
}

530 
MIPS_MACHINE
(
ATH79_MACH_WNR2000_V3
, "WNR2000V3", "NETGEAR WNR2000 V3", 
wƒ2000v3_£tup
);

532 
__öô
 
	$wƒ612v2_£tup
()

534 
u8
 
wœn_mac_addr
[6];

541 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
 |

542 
AR724X_GPIO_FUNC_UART_EN
,

543 
AR724X_GPIO_FUNC_CLK_OBS1_EN
 |

544 
AR724X_GPIO_FUNC_CLK_OBS2_EN
 |

545 
AR724X_GPIO_FUNC_CLK_OBS3_EN
 |

546 
AR724X_GPIO_FUNC_CLK_OBS4_EN
 |

547 
AR724X_GPIO_FUNC_CLK_OBS5_EN
 |

548 
AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 |

549 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

550 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

551 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

552 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

553 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

555 
	`wƒ_gë_wmac
(
wœn_mac_addr
, 
WNR2000V3_MAC0_OFFSET
,

556 
WNR2000V3_MAC1_OFFSET
, 
WNR2000V3_WMAC_OFFSET
);

558 
	`wƒ_comm⁄_£tup
(
wœn_mac_addr
);

560 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ612v2_Àds_gpio
),

561 
wƒ612v2_Àds_gpio
);

563 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wƒ612v2_wmac_Àds_gpio
,

564 
	`ARRAY_SIZE
(
wƒ612v2_wmac_Àds_gpio
));

566 
	`≠9x_pci_£tup_wmac_bäs
(0, 
wƒ612v2_wmac_keys_gpio
,

567 
	`ARRAY_SIZE
(
wƒ612v2_wmac_keys_gpio
),

568 
WNR2000V3_KEYS_POLL_INTERVAL
);

569 
	}
}

571 
MIPS_MACHINE
(
ATH79_MACH_WNR612_V2
, "WNR612V2", "NETGEAR WNR612 V2", 
wƒ612v2_£tup
);

573 
__öô
 
	$wƒ1000v2_£tup
()

575 
u8
 
wœn_mac_addr
[6];

582 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
 |

583 
AR724X_GPIO_FUNC_UART_EN
,

584 
AR724X_GPIO_FUNC_CLK_OBS1_EN
 |

585 
AR724X_GPIO_FUNC_CLK_OBS2_EN
 |

586 
AR724X_GPIO_FUNC_CLK_OBS3_EN
 |

587 
AR724X_GPIO_FUNC_CLK_OBS4_EN
 |

588 
AR724X_GPIO_FUNC_CLK_OBS5_EN
 |

589 
AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 |

590 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

591 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

592 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

593 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

594 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

596 
	`wƒ_gë_wmac
(
wœn_mac_addr
, 
WNR2000V3_MAC0_OFFSET
,

597 
WNR2000V3_MAC1_OFFSET
, 
WNR2000V3_WMAC_OFFSET
);

599 
	`wƒ_comm⁄_£tup
(
wœn_mac_addr
);

601 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ1000v2_Àds_gpio
),

602 
wƒ1000v2_Àds_gpio
);

604 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wƒ1000v2_wmac_Àds_gpio
,

605 
	`ARRAY_SIZE
(
wƒ1000v2_wmac_Àds_gpio
));

608 
	`≠9x_pci_£tup_wmac_bäs
(0, 
wƒ1000v2_wmac_keys_gpio
,

609 
	`ARRAY_SIZE
(
wƒ1000v2_wmac_keys_gpio
),

610 
WNR2000V3_KEYS_POLL_INTERVAL
);

611 
	}
}

613 
MIPS_MACHINE
(
ATH79_MACH_WNR1000_V2
, "WNR1000V2", "NETGEAR WNR1000 V2", 
wƒ1000v2_£tup
);

615 
__öô
 
	$w≤824n_£tup
()

617 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
,

618 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

619 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

620 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

621 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

622 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 |

623 
AR724X_GPIO_FUNC_CLK_OBS3_EN
);

625 
	`wƒ_comm⁄_£tup
(
NULL
);

627 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
w≤824n_Àds_gpio
),

628 
w≤824n_Àds_gpio
);

630 
	`≠9x_pci_£tup_wmac_Àds
(0, 
w≤824n_wmac_Àds_gpio
,

631 
	`ARRAY_SIZE
(
w≤824n_wmac_Àds_gpio
));

632 
	`≠9x_pci_£tup_wmac_bäs
(0, 
w≤824n_wmac_keys_gpio
,

633 
	`ARRAY_SIZE
(
w≤824n_wmac_keys_gpio
),

634 
WNR2000V3_KEYS_POLL_INTERVAL
);

635 
	}
}

637 
MIPS_MACHINE
(
ATH79_MACH_WPN824N
, "WPN824N", "NETGEAR WPN824N", 
w≤824n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wnr2000-v4.c

16 
	~<löux/mtd/mtd.h
>

17 
	~<löux/mtd/∑πôi⁄s.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<asm/mach-©h79/©h79.h
>

21 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

23 
	~"comm⁄.h
"

24 
	~"dev-ëh.h
"

25 
	~"dev-gpio-buâ⁄s.h
"

26 
	~"dev-Àds-gpio.h
"

27 
	~"dev-m25p80.h
"

28 
	~"dev-usb.h
"

29 
	~"dev-wmac.h
"

30 
	~"machty≥s.h
"

33 
	#WNR2000V4_GPIO_LED_PWR_GREEN
 0

	)

34 
	#WNR2000V4_GPIO_LED_PWR_AMBER
 1

	)

35 
	#WNR2000V4_GPIO_LED_WPS
 2

	)

36 
	#WNR2000V4_GPIO_LED_WLAN
 12

	)

37 
	#WNR2000V4_GPIO_LED_LAN1_GREEN
 13

	)

38 
	#WNR2000V4_GPIO_LED_LAN2_GREEN
 14

	)

39 
	#WNR2000V4_GPIO_LED_LAN3_GREEN
 15

	)

40 
	#WNR2000V4_GPIO_LED_LAN4_GREEN
 16

	)

41 
	#WNR2000V4_GPIO_LED_LAN1_AMBER
 18

	)

42 
	#WNR2000V4_GPIO_LED_LAN2_AMBER
 19

	)

43 
	#WNR2000V4_GPIO_LED_LAN3_AMBER
 20

	)

44 
	#WNR2000V4_GPIO_LED_LAN4_AMBER
 21

	)

45 
	#WNR2000V4_GPIO_LED_WAN_GREEN
 17

	)

46 
	#WNR2000V4_GPIO_LED_WAN_AMBER
 22

	)

48 
	#WNR2000V4_GPIO_BTN_WPS
 3

	)

49 
	#WNR2000V4_GPIO_BTN_RESET
 4

	)

50 
	#WNR2000V4_GPIO_BTN_WLAN
 11

	)

51 
	#WNR2000V4_KEYS_POLL_INTERVAL
 20

	)

52 
	#WNR2000V4_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNR2000V4_KEYS_POLL_INTERVAL
)

	)

56 
	#WNR2000V4_MAC0_OFFSET
 0

	)

57 
	#WNR2000V4_MAC1_OFFSET
 6

	)

59 
gpio_Àd
 
	gwƒ2000v4_Àds_gpio
[] 
	g__öôd©a
 = {

61 .
«me
 = "netgear:green:power",

62 .
	ggpio
 = 
WNR2000V4_GPIO_LED_PWR_GREEN
,

63 .
	ga˘ive_low
 = 1,

64 .
	gdeÁu…_åiggî
 = "default-on",

67 .
	g«me
 = "netgear:amber:status",

68 .
	ggpio
 = 
WNR2000V4_GPIO_LED_PWR_AMBER
,

69 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "netgear:green:wan",

73 .
	ggpio
 = 
WNR2000V4_GPIO_LED_WAN_GREEN
,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "netgear:amber:wan",

78 .
	ggpio
 = 
WNR2000V4_GPIO_LED_WAN_AMBER
,

79 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "netgear:blue:wlan",

83 .
	ggpio
 = 
WNR2000V4_GPIO_LED_WLAN
,

84 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "netgear:green:lan1",

89 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN1_GREEN
,

90 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "netgear:green:lan2",

94 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN2_GREEN
,

95 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "netgear:green:lan3",

99 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN3_GREEN
,

100 .
	ga˘ive_low
 = 1,

103 .
	g«me
 = "netgear:green:lan4",

104 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN4_GREEN
,

105 .
	ga˘ive_low
 = 1,

108 .
	g«me
 = "netgear:amber:lan1",

109 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN1_AMBER
,

110 .
	ga˘ive_low
 = 1,

113 .
	g«me
 = "netgear:amber:lan2",

114 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN2_AMBER
,

115 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "netgear:amber:lan3",

119 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN3_AMBER
,

120 .
	ga˘ive_low
 = 1,

123 .
	g«me
 = "netgear:amber:lan4",

124 .
	ggpio
 = 
WNR2000V4_GPIO_LED_LAN4_AMBER
,

125 .
	ga˘ive_low
 = 1,

128 .
	g«me
 = "netgear:green:wps",

129 .
	ggpio
 = 
WNR2000V4_GPIO_LED_WPS
,

130 .
	ga˘ive_low
 = 1,

134 
gpio_keys_buâ⁄
 
	gwƒ2000v4_gpio_keys
[] 
	g__öôd©a
 = {

136 .
desc
 = "WPS button",

137 .
	gty≥
 = 
EV_KEY
,

138 .
	gcode
 = 
KEY_WPS_BUTTON
,

139 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V4_KEYS_DEBOUNCE_INTERVAL
,

140 .
	ggpio
 = 
WNR2000V4_GPIO_BTN_WPS
,

141 .
	ga˘ive_low
 = 1,

144 .
	gdesc
 = "Reset button",

145 .
	gty≥
 = 
EV_KEY
,

146 .
	gcode
 = 
KEY_RESTART
,

147 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V4_KEYS_DEBOUNCE_INTERVAL
,

148 .
	ggpio
 = 
WNR2000V4_GPIO_BTN_RESET
,

149 .
	ga˘ive_low
 = 1,

152 .
	gdesc
 = "WLAN button",

153 .
	gty≥
 = 
EV_KEY
,

154 .
	gcode
 = 
KEY_RFKILL
,

155 .
	gdeboun˚_öãrvÆ
 = 
WNR2000V4_KEYS_DEBOUNCE_INTERVAL
,

156 .
	ggpio
 = 
WNR2000V4_GPIO_BTN_WLAN
,

157 .
	ga˘ive_low
 = 1,

161 
__öô
 
	$wƒ_comm⁄_£tup
()

163 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

164 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

166 
	`©h79_ªgi°î_mdio
(1, 0x0);

168 
	`©h79_ªgi°î_usb
();

170 
	`©h79_ªgi°î_m25p80
(
NULL
);

172 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_SW_ONLY_MODE
);

174 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
+
WNR2000V4_MAC0_OFFSET
, 0);

175 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
+
WNR2000V4_MAC1_OFFSET
, 0);

178 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

179 
©h79_swôch_d©a
.
phy_pﬁl_mask
 = 
	`BIT
(4);

180 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

181 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

182 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio1_devi˚
.
dev
;

183 
	`©h79_ªgi°î_ëh
(0);

186 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

187 
	`©h79_ªgi°î_ëh
(1);

189 
	`©h79_ªgi°î_wmac
(
ì
, 
¨t
);

190 
	}
}

192 
__öô
 
	$wƒ2000v4_£tup
()

194 
i
;

196 
	`wƒ_comm⁄_£tup
();

202 
i
 = 0; i < 
	`ARRAY_SIZE
(
wƒ2000v4_Àds_gpio
); i++)

203 
	`©h79_gpio_ouçut_£À˘
(
wƒ2000v4_Àds_gpio
[
i
].
gpio
,

204 
AR934X_GPIO_OUT_GPIO
);

206 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ2000v4_Àds_gpio
),

207 
wƒ2000v4_Àds_gpio
);

209 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WNR2000V4_KEYS_POLL_INTERVAL
,

210 
	`ARRAY_SIZE
(
wƒ2000v4_gpio_keys
),

211 
wƒ2000v4_gpio_keys
);

212 
	}
}

214 
MIPS_MACHINE
(
ATH79_MACH_WNR2000_V4
, "WNR2000V4", "NETGEAR WNR2000 V4", 
wƒ2000v4_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wnr2000.c

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-wmac.h
"

23 
	~"machty≥s.h
"

25 
	#WNR2000_GPIO_LED_PWR_GREEN
 14

	)

26 
	#WNR2000_GPIO_LED_PWR_AMBER
 7

	)

27 
	#WNR2000_GPIO_LED_WPS
 4

	)

28 
	#WNR2000_GPIO_LED_WLAN
 6

	)

29 
	#WNR2000_GPIO_BTN_RESET
 21

	)

30 
	#WNR2000_GPIO_BTN_WPS
 8

	)

32 
	#WNR2000_KEYS_POLL_INTERVAL
 20

	)

33 
	#WNR2000_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNR2000_KEYS_POLL_INTERVAL
)

	)

35 
gpio_Àd
 
	gwƒ2000_Àds_gpio
[] 
	g__öôd©a
 = {

37 .
«me
 = "netgear:green:power",

38 .
	ggpio
 = 
WNR2000_GPIO_LED_PWR_GREEN
,

39 .
	ga˘ive_low
 = 1,

41 .
	g«me
 = "netgear:amber:power",

42 .
	ggpio
 = 
WNR2000_GPIO_LED_PWR_AMBER
,

43 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "netgear:green:wps",

46 .
	ggpio
 = 
WNR2000_GPIO_LED_WPS
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "netgear:blue:wlan",

50 .
	ggpio
 = 
WNR2000_GPIO_LED_WLAN
,

51 .
	ga˘ive_low
 = 1,

55 
gpio_keys_buâ⁄
 
	gwƒ2000_gpio_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
WNR2000_KEYS_DEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
WNR2000_GPIO_BTN_RESET
,

63 .
	gdesc
 = "wps",

64 .
	gty≥
 = 
EV_KEY
,

65 .
	gcode
 = 
KEY_WPS_BUTTON
,

66 .
	gdeboun˚_öãrvÆ
 = 
WNR2000_KEYS_DEBOUNCE_INTERVAL
,

67 .
	ggpio
 = 
WNR2000_GPIO_BTN_WPS
,

71 
__öô
 
	$wƒ2000_£tup
()

73 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

75 
	`©h79_ªgi°î_mdio
(0, 0x0);

77 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
ì¥om
, 0);

78 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

79 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

80 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

81 
©h79_ëh0_d©a
.
has_¨8216
 = 1;

83 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
ì¥om
, 1);

84 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

85 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

87 
	`©h79_ªgi°î_ëh
(0);

88 
	`©h79_ªgi°î_ëh
(1);

90 
	`©h79_ªgi°î_m25p80
(
NULL
);

92 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ2000_Àds_gpio
),

93 
wƒ2000_Àds_gpio
);

95 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WNR2000_KEYS_POLL_INTERVAL
,

96 
	`ARRAY_SIZE
(
wƒ2000_gpio_keys
),

97 
wƒ2000_gpio_keys
);

99 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

100 
	}
}

102 
MIPS_MACHINE
(
ATH79_MACH_WNR2000
, "WNR2000", "NETGEAR WNR2000", 
wƒ2000_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wnr2200.c

11 
	~<löux/gpio.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<löux/kî√l.h
>

17 
	~<asm/mach-©h79/©h79.h
>

18 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

21 
	~"dev-≠9x-pci.h
"

22 
	~"dev-ëh.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-m25p80.h
"

26 
	~"dev-usb.h
"

27 
	~"machty≥s.h
"

30 
	#WNR2200_GPIO_LED_LAN2_AMBER
 0

	)

31 
	#WNR2200_GPIO_LED_LAN4_AMBER
 1

	)

32 
	#WNR2200_GPIO_LED_LAN1_AMBER
 6

	)

33 
	#WNR2200_GPIO_LED_WPS_GREEN
 7

	)

34 
	#WNR2200_GPIO_LED_USB_GREEN
 8

	)

35 
	#WNR2200_GPIO_LED_LAN3_AMBER
 11

	)

36 
	#WNR2200_GPIO_LED_WAN_AMBER
 12

	)

37 
	#WNR2200_GPIO_LED_LAN1_GREEN
 13

	)

38 
	#WNR2200_GPIO_LED_LAN2_GREEN
 14

	)

39 
	#WNR2200_GPIO_LED_LAN3_GREEN
 15

	)

40 
	#WNR2200_GPIO_LED_LAN4_GREEN
 16

	)

41 
	#WNR2200_GPIO_LED_WAN_GREEN
 17

	)

44 
	#WNR2200_GPIO_WMAC_LED_WLAN_BLUE
 0

	)

45 
	#WNR2200_GPIO_WMAC_LED_TEST_AMBER
 1

	)

46 
	#WNR2200_GPIO_WMAC_LED_POWER_GREEN
 2

	)

47 
	#WNR2200_GPIO_WMAC_BTN_RFKILL
 3

	)

48 
	#WNR2200_GPIO_WMAC_USB_5V
 4

	)

49 
	#WNR2200_GPIO_WMAC_BTN_WPS
 5

	)

50 
	#WNR2200_GPIO_WMAC_BTN_RESET
 6

	)

52 
	#WNR2200_KEYS_POLL_INTERVAL
 20

	)

53 
	#WNR2200_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WNR2200_KEYS_POLL_INTERVAL
)

	)

55 
	#WNR2200_MAC0_OFFSET
 0

	)

56 
	#WNR2200_MAC1_OFFSET
 6

	)

57 
	#WNR2200_PCIE_CALDATA_OFFSET
 0x1000

	)

58 
	#WNR2200_WMAC_OFFSET
 0x108¯

	)

60 
gpio_Àd
 
	gwƒ2200_Àds_gpio
[] 
	g__öôd©a
 = {

62 .
«me
 = "netgear:amber:lan1",

63 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN1_AMBER
,

64 .
	ga˘ive_low
 = 1,

66 .
	g«me
 = "netgear:amber:lan2",

67 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN2_AMBER
,

68 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "netgear:amber:lan3",

71 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN3_AMBER
,

72 .
	ga˘ive_low
 = 1,

74 .
	g«me
 = "netgear:amber:lan4",

75 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN4_AMBER
,

76 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "netgear:amber:wan",

79 .
	ggpio
 = 
WNR2200_GPIO_LED_WAN_AMBER
,

80 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "netgear:green:lan1",

83 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN1_GREEN
,

84 .
	ga˘ive_low
 = 1,

86 .
	g«me
 = "netgear:green:lan2",

87 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN2_GREEN
,

88 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "netgear:green:lan3",

91 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN3_GREEN
,

92 .
	ga˘ive_low
 = 1,

94 .
	g«me
 = "netgear:green:lan4",

95 .
	ggpio
 = 
WNR2200_GPIO_LED_LAN4_GREEN
,

96 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "netgear:green:usb",

99 .
	ggpio
 = 
WNR2200_GPIO_LED_USB_GREEN
,

100 .
	ga˘ive_low
 = 1,

102 .
	g«me
 = "netgear:green:wan",

103 .
	ggpio
 = 
WNR2200_GPIO_LED_WAN_GREEN
,

104 .
	ga˘ive_low
 = 1,

106 .
	g«me
 = "netgear:green:wps",

107 .
	ggpio
 = 
WNR2200_GPIO_LED_WPS_GREEN
,

108 .
	ga˘ive_low
 = 1,

112 
gpio_Àd
 
	gwƒ2200_wmac_Àds_gpio
[] = {

114 .
«me
 = "netgear:amber:test",

115 .
	ggpio
 = 
WNR2200_GPIO_WMAC_LED_TEST_AMBER
,

116 .
	ga˘ive_low
 = 1,

118 .
	g«me
 = "netgear:green:power",

119 .
	ggpio
 = 
WNR2200_GPIO_WMAC_LED_POWER_GREEN
,

120 .
	ga˘ive_low
 = 1,

121 .
	gdeÁu…_°©e
 = 
LEDS_GPIO_DEFSTATE_ON
,

123 .
	g«me
 = "netgear:blue:wlan",

124 .
	ggpio
 = 
WNR2200_GPIO_WMAC_LED_WLAN_BLUE
,

125 .
	ga˘ive_low
 = 1,

129 
gpio_keys_buâ⁄
 
	gwƒ2200_wmac_keys_gpio
[] = {

131 .
desc
 = "reset",

132 .
	gty≥
 = 
EV_KEY
,

133 .
	gcode
 = 
KEY_RESTART
,

134 .
	gdeboun˚_öãrvÆ
 = 
WNR2200_KEYS_DEBOUNCE_INTERVAL
,

135 .
	ggpio
 = 
WNR2200_GPIO_WMAC_BTN_RESET
,

136 .
	ga˘ive_low
 = 1,

138 .
	gdesc
 = "rfkill",

139 .
	gty≥
 = 
EV_KEY
,

140 .
	gcode
 = 
KEY_RFKILL
,

141 .
	gdeboun˚_öãrvÆ
 = 
WNR2200_KEYS_DEBOUNCE_INTERVAL
,

142 .
	ggpio
 = 
WNR2200_GPIO_WMAC_BTN_RFKILL
,

143 .
	ga˘ive_low
 = 1,

145 .
	gdesc
 = "wps",

146 .
	gty≥
 = 
EV_KEY
,

147 .
	gcode
 = 
KEY_WPS_BUTTON
,

148 .
	gdeboun˚_öãrvÆ
 = 
WNR2200_KEYS_DEBOUNCE_INTERVAL
,

149 .
	ggpio
 = 
WNR2200_GPIO_WMAC_BTN_WPS
,

150 .
	ga˘ive_low
 = 1,

163 
__öô
 
	$wƒ2200_gë_wmac
(
u8
 *
wmac_gí_addr
, 
mac0_¨t_off£t
,

164 
mac1_¨t_off£t
, 
wmac_¨t_off£t
)

166 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

167 
u8
 *
ëh0_mac_addr
 = (u8 *Ë(
¨t
 + 
mac0_¨t_off£t
);

168 
u8
 *
ëh1_mac_addr
 = (u8 *Ë(
¨t
 + 
mac1_¨t_off£t
);

169 
u8
 *
wœn_mac_addr
 = (u8 *Ë(
¨t
 + 
wmac_¨t_off£t
);

172 i‡((
wœn_mac_addr
[0] & wlan_mac_addr[1] & wlan_mac_addr[2] &

173 
wœn_mac_addr
[3] & wlan_mac_addr[4] & wlan_mac_addr[5]) == 0xff) {

174 
	`mem˝y
(
wmac_gí_addr
, 
ëh0_mac_addr
, 5);

175 
wmac_gí_addr
[5] = 
	`max
(
ëh0_mac_addr
[5], 
ëh1_mac_addr
[5]) + 1;

178 i‡(!
wmac_gí_addr
[5])

179 
wmac_gí_addr
[5] = 1;

181 
	`mem˝y
(
wmac_gí_addr
, 
wœn_mac_addr
, 6);

182 
	}
}

184 
__öô
 
	$wƒ2200_£tup
()

186 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

187 
u8
 
wœn_mac_addr
[6];

193 
	`©h79_gpio_fun˘i⁄_£tup
(
AR724X_GPIO_FUNC_JTAG_DISABLE
 |

194 
AR724X_GPIO_FUNC_UART_EN
,

195 
AR724X_GPIO_FUNC_CLK_OBS1_EN
 |

196 
AR724X_GPIO_FUNC_CLK_OBS2_EN
 |

197 
AR724X_GPIO_FUNC_CLK_OBS3_EN
 |

198 
AR724X_GPIO_FUNC_CLK_OBS4_EN
 |

199 
AR724X_GPIO_FUNC_CLK_OBS5_EN
 |

200 
AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 |

201 
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

202 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

203 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

204 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

205 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

207 
	`©h79_ªgi°î_mdio
(0, 0x0);

209 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
WNR2200_MAC0_OFFSET
, 0);

210 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

211 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

212 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

214 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
WNR2200_MAC1_OFFSET
, 0);

215 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

216 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

218 
	`©h79_ªgi°î_ëh
(0);

219 
	`©h79_ªgi°î_ëh
(1);

221 
	`©h79_ªgi°î_m25p80
(
NULL
);

223 
	`wƒ2200_gë_wmac
(
wœn_mac_addr
, 
WNR2200_MAC0_OFFSET
,

224 
WNR2200_MAC1_OFFSET
, 
WNR2200_WMAC_OFFSET
);

225 
	`≠91_pci_öô
(
¨t
 + 
WNR2200_PCIE_CALDATA_OFFSET
, 
wœn_mac_addr
);

227 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wƒ2200_Àds_gpio
),

228 
wƒ2200_Àds_gpio
);

230 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wƒ2200_wmac_Àds_gpio
,

231 
	`ARRAY_SIZE
(
wƒ2200_wmac_Àds_gpio
));

234 
	`≠9x_pci_£tup_wmac_bäs
(0, 
wƒ2200_wmac_keys_gpio
,

235 
	`ARRAY_SIZE
(
wƒ2200_wmac_keys_gpio
),

236 
WNR2200_KEYS_POLL_INTERVAL
);

239 
	`≠9x_pci_£tup_wmac_gpio
(0, 
	`BIT
(
WNR2200_GPIO_WMAC_USB_5V
),

240 
	`BIT
(
WNR2200_GPIO_WMAC_USB_5V
));

242 
	`©h79_ªgi°î_usb
();

243 
	}
}

245 
MIPS_MACHINE
(
ATH79_MACH_WNR2200
, "WNR2200", "NETGEAR WNR2200", 
wƒ2200_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wp543.c

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

13 
	~<asm/mach-©h79/©h79.h
>

15 
	~"dev-ëh.h
"

16 
	~"dev-gpio-buâ⁄s.h
"

17 
	~"dev-Àds-gpio.h
"

18 
	~"dev-m25p80.h
"

19 
	~"dev-usb.h
"

20 
	~"machty≥s.h
"

21 
	~"pci.h
"

23 
	#WP543_GPIO_SW6
 2

	)

24 
	#WP543_GPIO_LED_1
 3

	)

25 
	#WP543_GPIO_LED_2
 4

	)

26 
	#WP543_GPIO_LED_WLAN
 5

	)

27 
	#WP543_GPIO_LED_CONN
 6

	)

28 
	#WP543_GPIO_LED_DIAG
 7

	)

29 
	#WP543_GPIO_SW4
 8

	)

31 
	#WP543_KEYS_POLL_INTERVAL
 20

	)

32 
	#WP543_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WP543_KEYS_POLL_INTERVAL
)

	)

34 
gpio_Àd
 
	gwp543_Àds_gpio
[] 
	g__öôd©a
 = {

36 .
«me
 = "wp543:green:led1",

37 .
	ggpio
 = 
WP543_GPIO_LED_1
,

38 .
	ga˘ive_low
 = 1,

40 .
	g«me
 = "wp543:green:led2",

41 .
	ggpio
 = 
WP543_GPIO_LED_2
,

42 .
	ga˘ive_low
 = 1,

44 .
	g«me
 = "wp543:green:wlan",

45 .
	ggpio
 = 
WP543_GPIO_LED_WLAN
,

46 .
	ga˘ive_low
 = 1,

48 .
	g«me
 = "wp543:green:conn",

49 .
	ggpio
 = 
WP543_GPIO_LED_CONN
,

50 .
	ga˘ive_low
 = 1,

52 .
	g«me
 = "wp543:green:diag",

53 .
	ggpio
 = 
WP543_GPIO_LED_DIAG
,

54 .
	ga˘ive_low
 = 1,

58 
gpio_keys_buâ⁄
 
	gwp543_gpio_keys
[] 
	g__öôd©a
 = {

60 .
desc
 = "sw6",

61 .
	gty≥
 = 
EV_KEY
,

62 .
	gcode
 = 
BTN_0
,

63 .
	gdeboun˚_öãrvÆ
 = 
WP543_KEYS_DEBOUNCE_INTERVAL
,

64 .
	ggpio
 = 
WP543_GPIO_SW6
,

65 .
	ga˘ive_low
 = 1,

67 .
	gdesc
 = "sw4",

68 .
	gty≥
 = 
EV_KEY
,

69 .
	gcode
 = 
KEY_RESTART
,

70 .
	gdeboun˚_öãrvÆ
 = 
WP543_KEYS_DEBOUNCE_INTERVAL
,

71 .
	ggpio
 = 
WP543_GPIO_SW4
,

72 .
	ga˘ive_low
 = 1,

76 c⁄° *
	gwp543_∑π_¥obes
[] = {

78 
NULL
,

81 
Êash_∂©f‹m_d©a
 
	gwp543_Êash_d©a
 = {

82 .
∑π_¥obes
 = 
wp543_∑π_¥obes
,

85 
__öô
 
	$wp543_£tup
()

87 
	`©h79_ªgi°î_m25p80
(&
wp543_Êash_d©a
);

89 
	`©h79_ªgi°î_mdio
(0, 0xfffffff0);

91 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

92 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

93 
©h79_ëh0_d©a
.
phy_mask
 = 0x0f;

94 
©h79_ëh0_d©a
.
ª£t_bô
 = 
AR71XX_RESET_GE0_MAC
 |

95 
AR71XX_RESET_GE0_PHY
;

96 
	`©h79_ªgi°î_ëh
(0);

98 
	`©h79_ªgi°î_usb
();

99 
	`©h79_ªgi°î_pci
();

101 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wp543_Àds_gpio
),

102 
wp543_Àds_gpio
);

104 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WP543_KEYS_POLL_INTERVAL
,

105 
	`ARRAY_SIZE
(
wp543_gpio_keys
),

106 
wp543_gpio_keys
);

107 
	}
}

109 
MIPS_MACHINE
(
ATH79_MACH_WP543
, "WP543", "Com≥x WP543", 
wp543_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpe72.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-Àds-gpio.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"machty≥s.h
"

19 
	~"pci.h
"

21 
	#WPE72_GPIO_RESET
 12

	)

22 
	#WPE72_GPIO_LED_DIAG
 13

	)

23 
	#WPE72_GPIO_LED_1
 14

	)

24 
	#WPE72_GPIO_LED_2
 15

	)

25 
	#WPE72_GPIO_LED_3
 16

	)

26 
	#WPE72_GPIO_LED_4
 17

	)

28 
	#WPE72_KEYS_POLL_INTERVAL
 20

	)

29 
	#WPE72_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPE72_KEYS_POLL_INTERVAL
)

	)

31 
gpio_Àd
 
	gw≥72_Àds_gpio
[] 
	g__öôd©a
 = {

33 .
«me
 = "wpe72:green:led1",

34 .
	ggpio
 = 
WPE72_GPIO_LED_1
,

35 .
	ga˘ive_low
 = 1,

37 .
	g«me
 = "wpe72:green:led2",

38 .
	ggpio
 = 
WPE72_GPIO_LED_2
,

39 .
	ga˘ive_low
 = 1,

41 .
	g«me
 = "wpe72:green:led3",

42 .
	ggpio
 = 
WPE72_GPIO_LED_3
,

43 .
	ga˘ive_low
 = 1,

45 .
	g«me
 = "wpe72:green:led4",

46 .
	ggpio
 = 
WPE72_GPIO_LED_4
,

47 .
	ga˘ive_low
 = 1,

49 .
	g«me
 = "wpe72:green:diag",

50 .
	ggpio
 = 
WPE72_GPIO_LED_DIAG
,

51 .
	ga˘ive_low
 = 1,

55 
gpio_keys_buâ⁄
 
	gw≥72_gpio_keys
[] 
	g__öôd©a
 = {

57 .
desc
 = "reset",

58 .
	gty≥
 = 
EV_KEY
,

59 .
	gcode
 = 
KEY_RESTART
,

60 .
	gdeboun˚_öãrvÆ
 = 
WPE72_KEYS_DEBOUNCE_INTERVAL
,

61 .
	ggpio
 = 
WPE72_GPIO_RESET
,

62 .
	ga˘ive_low
 = 1,

66 c⁄° *
	gw≥72_∑π_¥obes
[] = {

68 
NULL
,

71 
Êash_∂©f‹m_d©a
 
	gw≥72_Êash_d©a
 = {

72 .
∑π_¥obes
 = 
w≥72_∑π_¥obes
,

75 
__öô
 
	$w≥72_£tup
()

77 
	`©h79_ªgi°î_m25p80
(&
w≥72_Êash_d©a
);

78 
	`©h79_ªgi°î_mdio
(0, 0x0);

80 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
©h79_mac_ba£
, 0);

81 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
©h79_mac_ba£
, 1);

83 
	`©h79_ªgi°î_ëh
(0);

84 
	`©h79_ªgi°î_ëh
(1);

86 
	`©h79_ªgi°î_usb
();

87 
	`©h79_ªgi°î_pci
();

89 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
w≥72_Àds_gpio
),

90 
w≥72_Àds_gpio
);

92 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WPE72_KEYS_POLL_INTERVAL
,

93 
	`ARRAY_SIZE
(
w≥72_gpio_keys
),

94 
w≥72_gpio_keys
);

95 
	}
}

97 
MIPS_MACHINE
(
ATH79_MACH_WPE72
, "WPE72", "Com≥x WPE72", 
w≥72_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpj342.c

21 
	~<löux/úq.h
>

22 
	~<löux/pci.h
>

23 
	~<löux/phy.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/©h9k_∂©f‹m.h
>

26 
	~<löux/¨8216_∂©f‹m.h
>

27 
	~<löux/exp‹t.h
>

29 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

31 
	~"pci.h
"

32 
	~"comm⁄.h
"

33 
	~"dev-≠9x-pci.h
"

34 
	~"dev-ëh.h
"

35 
	~"dev-gpio-buâ⁄s.h
"

36 
	~"dev-Àds-gpio.h
"

37 
	~"dev-m25p80.h
"

38 
	~"dev-nfc.h
"

39 
	~"dev-•i.h
"

40 
	~"dev-usb.h
"

41 
	~"dev-wmac.h
"

42 
	~"machty≥s.h
"

44 
	#WPJ342_GPIO_LED_STATUS
 11

	)

45 
	#WPJ342_GPIO_LED_SIG1
 14

	)

46 
	#WPJ342_GPIO_LED_SIG2
 13

	)

47 
	#WPJ342_GPIO_LED_SIG3
 12

	)

48 
	#WPJ342_GPIO_LED_SIG4
 11

	)

49 
	#WPJ342_GPIO_BUZZER
 15

	)

51 
	#WPJ342_GPIO_BTN_RESET
 17

	)

53 
	#WPJ342_KEYS_POLL_INTERVAL
 20

	)

54 
	#WPJ342_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPJ342_KEYS_POLL_INTERVAL
)

	)

56 
	#WPJ342_MAC0_OFFSET
 0x10

	)

57 
	#WPJ342_MAC1_OFFSET
 0x18

	)

58 
	#WPJ342_WMAC_CALDATA_OFFSET
 0x1000

	)

59 
	#WPJ342_PCIE_CALDATA_OFFSET
 0x5000

	)

61 
	#WPJ342_ART_SIZE
 0x8000

	)

63 
gpio_Àd
 
	gwpj342_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "wpj342:red:sig1",

66 .
	ggpio
 = 
WPJ342_GPIO_LED_SIG1
,

67 .
	ga˘ive_low
 = 1,

70 .
	g«me
 = "wpj342:yellow:sig2",

71 .
	ggpio
 = 
WPJ342_GPIO_LED_SIG2
,

72 .
	ga˘ive_low
 = 1,

75 .
	g«me
 = "wpj342:green:sig3",

76 .
	ggpio
 = 
WPJ342_GPIO_LED_SIG3
,

77 .
	ga˘ive_low
 = 1,

80 .
	g«me
 = "wpj342:green:sig4",

81 .
	ggpio
 = 
WPJ342_GPIO_LED_SIG4
,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "wpj342:buzzer",

86 .
	ggpio
 = 
WPJ342_GPIO_BUZZER
,

87 .
	ga˘ive_low
 = 0,

91 
gpio_keys_buâ⁄
 
	gwpj342_gpio_keys
[] 
	g__öôd©a
 = {

93 .
desc
 = "reset",

94 .
	gty≥
 = 
EV_KEY
,

95 .
	gcode
 = 
KEY_RESTART
,

96 .
	gdeboun˚_öãrvÆ
 = 
WPJ342_KEYS_DEBOUNCE_INTERVAL
,

97 .
	ggpio
 = 
WPJ342_GPIO_BTN_RESET
,

98 .
	ga˘ive_low
 = 1,

102 
¨8327_∑d_cfg
 
	gwpj342_¨8327_∑d0_cfg
 = {

103 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

104 .
	gtx˛k_dñay_í
 = 
åue
,

105 .
	grx˛k_dñay_í
 = 
åue
,

106 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

107 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

110 
¨8327_Àd_cfg
 
	gwpj342_¨8327_Àd_cfg
 = {

111 .
Àd_˘æ0
 = 0x00000000,

112 .
	gÀd_˘æ1
 = 0xc737c737,

113 .
	gÀd_˘æ2
 = 0x00000000,

114 .
	gÀd_˘æ3
 = 0x00c30c00,

115 .
	g›í_døö
 = 
åue
,

118 
¨8327_∂©f‹m_d©a
 
	gwpj342_¨8327_d©a
 = {

119 .
∑d0_cfg
 = &
wpj342_¨8327_∑d0_cfg
,

120 .
	gp‹t0_cfg
 = {

121 .
f‹˚_lök
 = 1,

122 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

123 .
	gdu∂ex
 = 1,

124 .
	gtx∑u£
 = 1,

125 .
	grx∑u£
 = 1,

127 .
	gÀd_cfg
 = &
wpj342_¨8327_Àd_cfg
,

130 
mdio_bﬂrd_öfo
 
	gwpj342_mdio0_öfo
[] = {

132 .
bus_id
 = "ag71xx-mdio.0",

133 .
	gmdio_addr
 = 0,

134 .
	g∂©f‹m_d©a
 = &
wpj342_¨8327_d©a
,

139 
__öô
 
	$wpj342_£tup
()

141 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

142 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f02e000);

144 
	`©h79_ªgi°î_m25p80
(
NULL
);

145 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wpj342_Àds_gpio
),

146 
wpj342_Àds_gpio
);

148 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WPJ342_KEYS_POLL_INTERVAL
,

149 
	`ARRAY_SIZE
(
wpj342_gpio_keys
),

150 
wpj342_gpio_keys
);

152 
	`©h79_ªgi°î_usb
();

154 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WPJ342_WMAC_CALDATA_OFFSET
, 
NULL
);

156 
	`©h79_ªgi°î_pci
();

158 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wpj342_mdio0_öfo
,

159 
	`ARRAY_SIZE
(
wpj342_mdio0_öfo
));

161 
	`©h79_ªgi°î_mdio
(1, 0x0);

162 
	`©h79_ªgi°î_mdio
(0, 0x0);

164 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
WPJ342_MAC0_OFFSET
, 0);

165 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 
WPJ342_MAC1_OFFSET
, 0);

167 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_MII_GMAC0
);

170 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

171 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

172 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

173 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

175 
	`©h79_ªgi°î_ëh
(0);

176 
	}
}

178 
MIPS_MACHINE
(
ATH79_MACH_WPJ342
, "WPJ342", "Com≥x WPJ342", 
wpj342_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpj344.c

21 
	~<löux/phy.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

28 
	~"comm⁄.h
"

29 
	~"pci.h
"

30 
	~"dev-≠9x-pci.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-ëh.h
"

33 
	~"dev-usb.h
"

34 
	~"dev-Àds-gpio.h
"

35 
	~"dev-m25p80.h
"

36 
	~"dev-•i.h
"

37 
	~"dev-wmac.h
"

38 
	~"machty≥s.h
"

40 
	#WPJ344_GPIO_LED_SIG1
 15

	)

41 
	#WPJ344_GPIO_LED_SIG2
 20

	)

42 
	#WPJ344_GPIO_LED_SIG3
 21

	)

43 
	#WPJ344_GPIO_LED_SIG4
 22

	)

44 
	#WPJ344_GPIO_LED_STATUS
 14

	)

46 
	#WPJ344_GPIO_BTN_RESET
 12

	)

48 
	#WPJ344_KEYS_POLL_INTERVAL
 20

	)

49 
	#WPJ344_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPJ344_KEYS_POLL_INTERVAL
)

	)

51 
	#WPJ344_MAC0_OFFSET
 0x10

	)

52 
	#WPJ344_MAC1_OFFSET
 0x18

	)

53 
	#WPJ344_WMAC_CALDATA_OFFSET
 0x1000

	)

54 
	#WPJ344_PCIE_CALDATA_OFFSET
 0x5000

	)

56 
gpio_Àd
 
	gwpj344_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "wpj344:green:status",

59 .
	ggpio
 = 
WPJ344_GPIO_LED_STATUS
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "wpj344:red:sig1",

64 .
	ggpio
 = 
WPJ344_GPIO_LED_SIG1
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "wpj344:yellow:sig2",

69 .
	ggpio
 = 
WPJ344_GPIO_LED_SIG2
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "wpj344:green:sig3",

74 .
	ggpio
 = 
WPJ344_GPIO_LED_SIG3
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "wpj344:green:sig4",

79 .
	ggpio
 = 
WPJ344_GPIO_LED_SIG4
,

80 .
	ga˘ive_low
 = 1,

84 
gpio_keys_buâ⁄
 
	gwpj344_gpio_keys
[] 
	g__öôd©a
 = {

86 .
desc
 = "reset",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
WPJ344_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
WPJ344_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
¨8327_∑d_cfg
 
	gwpj344_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

101 .
	gmac06_exch™ge_dis
 = 
åue
,

104 
¨8327_Àd_cfg
 
	gwpj344_¨8327_Àd_cfg
 = {

105 .
Àd_˘æ0
 = 0x00000000,

106 .
	gÀd_˘æ1
 = 0xc737c737,

107 .
	gÀd_˘æ2
 = 0x00000000,

108 .
	gÀd_˘æ3
 = 0x00c30c00,

109 .
	g›í_døö
 = 
åue
,

112 
¨8327_∂©f‹m_d©a
 
	gwpj344_¨8327_d©a
 = {

113 .
∑d0_cfg
 = &
wpj344_¨8327_∑d0_cfg
,

114 .
	gp‹t0_cfg
 = {

115 .
f‹˚_lök
 = 1,

116 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

117 .
	gdu∂ex
 = 1,

118 .
	gtx∑u£
 = 1,

119 .
	grx∑u£
 = 1,

121 .
	gÀd_cfg
 = &
wpj344_¨8327_Àd_cfg
,

124 
mdio_bﬂrd_öfo
 
	gwpj344_mdio0_öfo
[] = {

126 .
bus_id
 = "ag71xx-mdio.0",

127 .
	gmdio_addr
 = 0,

128 .
	g∂©f‹m_d©a
 = &
wpj344_¨8327_d©a
,

132 
__öô
 
	$wpj344_£tup
()

134 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

135 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f02e000);

137 
	`©h79_ªgi°î_m25p80
(
NULL
);

138 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wpj344_Àds_gpio
),

139 
wpj344_Àds_gpio
);

140 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WPJ344_KEYS_POLL_INTERVAL
,

141 
	`ARRAY_SIZE
(
wpj344_gpio_keys
),

142 
wpj344_gpio_keys
);

144 
	`©h79_ªgi°î_usb
();

146 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WPJ344_WMAC_CALDATA_OFFSET
, 
NULL
);

148 
	`©h79_ªgi°î_pci
();

150 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wpj344_mdio0_öfo
,

151 
	`ARRAY_SIZE
(
wpj344_mdio0_öfo
));

153 
	`©h79_ªgi°î_mdio
(0, 0x0);

155 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
WPJ344_MAC0_OFFSET
, 0);

157 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

158 
AR934X_ETH_CFG_SW_ONLY_MODE
);

161 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

162 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

163 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

164 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

166 
	`©h79_ªgi°î_ëh
(0);

167 
	}
}

169 
MIPS_MACHINE
(
ATH79_MACH_WPJ344
, "WPJ344", "Com≥x WPJ344", 
wpj344_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpj531.c

21 
	~<löux/úq.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~"pci.h
"

28 
	~"comm⁄.h
"

29 
	~"dev-≠9x-pci.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-ëh.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-m25p80.h
"

34 
	~"dev-usb.h
"

35 
	~"dev-wmac.h
"

36 
	~"machty≥s.h
"

38 
	#WPJ531_GPIO_LED_SIG1
 13

	)

39 
	#WPJ531_GPIO_LED_SIG2
 14

	)

40 
	#WPJ531_GPIO_LED_SIG3
 15

	)

41 
	#WPJ531_GPIO_LED_SIG4
 16

	)

42 
	#WPJ531_GPIO_BUZZER
 4

	)

44 
	#WPJ531_GPIO_BTN_RESET
 17

	)

46 
	#WPJ531_KEYS_POLL_INTERVAL
 20

	)

47 
	#WPJ531_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPJ531_KEYS_POLL_INTERVAL
)

	)

49 
	#WPJ531_MAC0_OFFSET
 0x10

	)

50 
	#WPJ531_MAC1_OFFSET
 0x18

	)

51 
	#WPJ531_WMAC_CALDATA_OFFSET
 0x1000

	)

52 
	#WPJ531_PCIE_CALDATA_OFFSET
 0x5000

	)

54 
	#WPJ531_ART_SIZE
 0x8000

	)

56 
gpio_Àd
 
	gwpj531_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "wpj531:red:sig1",

59 .
	ggpio
 = 
WPJ531_GPIO_LED_SIG1
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "wpj531:yellow:sig2",

64 .
	ggpio
 = 
WPJ531_GPIO_LED_SIG2
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "wpj531:green:sig3",

69 .
	ggpio
 = 
WPJ531_GPIO_LED_SIG3
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "wpj531:green:sig4",

74 .
	ggpio
 = 
WPJ531_GPIO_LED_SIG4
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "wpj531:buzzer",

79 .
	ggpio
 = 
WPJ531_GPIO_BUZZER
,

80 .
	ga˘ive_low
 = 0,

84 
gpio_keys_buâ⁄
 
	gwpj531_gpio_keys
[] 
	g__öôd©a
 = {

86 .
desc
 = "reset",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
WPJ531_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
WPJ531_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
__öô
 
	$comm⁄_£tup
()

97 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

98 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f02e000);

100 
	`©h79_ªgi°î_m25p80
(
NULL
);

102 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

104 
	`©h79_ªgi°î_mdio
(0, 0x0);

107 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

108 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

109 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

110 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

111 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
WPJ531_MAC0_OFFSET
, 0);

112 
	`©h79_ªgi°î_ëh
(0);

115 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

116 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

117 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

118 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

119 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

120 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 
WPJ531_MAC1_OFFSET
, 0);

121 
	`©h79_ªgi°î_ëh
(1);

123 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WPJ531_WMAC_CALDATA_OFFSET
, 
NULL
);

125 
	`©h79_ªgi°î_pci
();

126 
	`©h79_ªgi°î_usb
();

127 
	}
}

129 
__öô
 
	$wpj531_£tup
()

131 
	`comm⁄_£tup
();

133 
	`©h79_ªgi°î_Àds_gpio
(-1,

134 
	`ARRAY_SIZE
(
wpj531_Àds_gpio
),

135 
wpj531_Àds_gpio
);

137 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1,

138 
WPJ531_KEYS_POLL_INTERVAL
,

139 
	`ARRAY_SIZE
(
wpj531_gpio_keys
),

140 
wpj531_gpio_keys
);

141 
	}
}

143 
MIPS_MACHINE
(
ATH79_MACH_WPJ531
, "WPJ531", "Com≥x WPJ531", 
wpj531_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpj558.c

21 
	~<löux/pci.h
>

22 
	~<löux/phy.h
>

23 
	~<löux/gpio.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/©h9k_∂©f‹m.h
>

26 
	~<löux/¨8216_∂©f‹m.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

30 
	~"comm⁄.h
"

31 
	~"pci.h
"

32 
	~"dev-≠9x-pci.h
"

33 
	~"dev-gpio-buâ⁄s.h
"

34 
	~"dev-ëh.h
"

35 
	~"dev-usb.h
"

36 
	~"dev-Àds-gpio.h
"

37 
	~"dev-m25p80.h
"

38 
	~"dev-•i.h
"

39 
	~"dev-wmac.h
"

40 
	~"machty≥s.h
"

42 
	#WPJ558_GPIO_LED_SIG1
 14

	)

43 
	#WPJ558_GPIO_LED_SIG2
 15

	)

44 
	#WPJ558_GPIO_LED_SIG3
 22

	)

45 
	#WPJ558_GPIO_LED_SIG4
 23

	)

46 
	#WPJ558_GPIO_BUZZER
 4

	)

48 
	#WPJ558_GPIO_BTN_RESET
 17

	)

50 
	#WPJ558_KEYS_POLL_INTERVAL
 20

	)

51 
	#WPJ558_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPJ558_KEYS_POLL_INTERVAL
)

	)

53 
	#WPJ558_MAC_OFFSET
 0x10

	)

54 
	#WPJ558_WMAC_CALDATA_OFFSET
 0x1000

	)

56 
gpio_Àd
 
	gwpj558_Àds_gpio
[] 
	g__öôd©a
 = {

58 .
«me
 = "wpj558:red:sig1",

59 .
	ggpio
 = 
WPJ558_GPIO_LED_SIG1
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "wpj558:yellow:sig2",

64 .
	ggpio
 = 
WPJ558_GPIO_LED_SIG2
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "wpj558:green:sig3",

69 .
	ggpio
 = 
WPJ558_GPIO_LED_SIG3
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "wpj558:green:sig4",

74 .
	ggpio
 = 
WPJ558_GPIO_LED_SIG4
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "wpj558:buzzer",

79 .
	ggpio
 = 
WPJ558_GPIO_BUZZER
,

80 .
	ga˘ive_low
 = 0,

84 
gpio_keys_buâ⁄
 
	gwpj558_gpio_keys
[] 
	g__öôd©a
 = {

86 .
desc
 = "reset",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
WPJ558_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
WPJ558_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
¨8327_∑d_cfg
 
	gwpj558_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

97 .
	gsgmii_dñay_í
 = 
åue
,

100 
¨8327_∑d_cfg
 
	gwpj558_¨8327_∑d6_cfg
 = {

101 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

102 .
	gtx˛k_dñay_í
 = 
åue
,

103 .
	grx˛k_dñay_í
 = 
åue
,

104 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

105 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

108 
¨8327_∂©f‹m_d©a
 
	gwpj558_¨8327_d©a
 = {

109 .
∑d0_cfg
 = &
wpj558_¨8327_∑d0_cfg
,

110 .
	g∑d6_cfg
 = &
wpj558_¨8327_∑d6_cfg
,

111 .
	gp‹t0_cfg
 = {

112 .
f‹˚_lök
 = 1,

113 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

114 .
	gdu∂ex
 = 1,

115 .
	gtx∑u£
 = 1,

116 .
	grx∑u£
 = 1,

118 .
	gp‹t6_cfg
 = {

119 .
f‹˚_lök
 = 1,

120 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

121 .
	gdu∂ex
 = 1,

122 .
	gtx∑u£
 = 1,

123 .
	grx∑u£
 = 1,

127 
mdio_bﬂrd_öfo
 
	gwpj558_mdio0_öfo
[] = {

129 .
bus_id
 = "ag71xx-mdio.0",

130 .
	gmdio_addr
 = 0,

131 .
	g∂©f‹m_d©a
 = &
wpj558_¨8327_d©a
,

135 
__öô
 
	$wpj558_£tup
()

137 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

138 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f02e000);

140 
	`©h79_ªgi°î_m25p80
(
NULL
);

141 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wpj558_Àds_gpio
),

142 
wpj558_Àds_gpio
);

143 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WPJ558_KEYS_POLL_INTERVAL
,

144 
	`ARRAY_SIZE
(
wpj558_gpio_keys
),

145 
wpj558_gpio_keys
);

147 
	`©h79_ªgi°î_usb
();

149 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WPJ558_WMAC_CALDATA_OFFSET
, 
NULL
);

151 
	`©h79_ªgi°î_pci
();

153 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wpj558_mdio0_öfo
,

154 
	`ARRAY_SIZE
(
wpj558_mdio0_öfo
));

155 
	`©h79_ªgi°î_mdio
(0, 0x0);

157 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
WPJ558_MAC_OFFSET
, 0);

159 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

162 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

163 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

164 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

165 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

167 
	`©h79_ªgi°î_ëh
(0);

168 
	}
}

170 
MIPS_MACHINE
(
ATH79_MACH_WPJ558
, "WPJ558", "Com≥x WPJ558", 
wpj558_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wpj563.c

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/©h9k_∂©f‹m.h
>

23 
	~<löux/¨8216_∂©f‹m.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~"comm⁄.h
"

27 
	~"dev-m25p80.h
"

28 
	~"machty≥s.h
"

29 
	~"pci.h
"

30 
	~"dev-ëh.h
"

31 
	~"dev-gpio-buâ⁄s.h
"

32 
	~"dev-Àds-gpio.h
"

33 
	~"dev-•i.h
"

34 
	~"dev-usb.h
"

35 
	~"dev-wmac.h
"

37 
	#WPJ563_GPIO_LED_SIG1
 1

	)

38 
	#WPJ563_GPIO_LED_SIG2
 5

	)

39 
	#WPJ563_GPIO_LED_SIG3
 6

	)

40 
	#WPJ563_GPIO_LED_SIG4
 7

	)

41 
	#WPJ563_GPIO_BUZZER
 19

	)

43 
	#WPJ563_GPIO_BTN_RESET
 2

	)

44 
	#WPJ563_KEYS_POLL_INTERVAL
 20

	)

45 
	#WPJ563_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WPJ563_KEYS_POLL_INTERVAL
)

	)

47 
	#WPJ563_MAC0_OFFSET
 0x10

	)

48 
	#WPJ563_MAC1_OFFSET
 0x18

	)

49 
	#WPJ563_WMAC_CALDATA_OFFSET
 0x1000

	)

51 
gpio_Àd
 
	gWPJ563_Àds_gpio
[] 
	g__öôd©a
 = {

53 .
«me
 = "wpj563:green:sig1",

54 .
	ggpio
 = 
WPJ563_GPIO_LED_SIG1
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "wpj563:green:sig2",

59 .
	ggpio
 = 
WPJ563_GPIO_LED_SIG2
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "wpj563:green:sig3",

64 .
	ggpio
 = 
WPJ563_GPIO_LED_SIG3
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "wpj563:green:sig4",

69 .
	ggpio
 = 
WPJ563_GPIO_LED_SIG4
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "wpj563:buzzer",

74 .
	ggpio
 = 
WPJ563_GPIO_BUZZER
,

75 .
	ga˘ive_low
 = 0,

79 
gpio_keys_buâ⁄
 
	gWPJ563_gpio_keys
[] 
	g__öôd©a
 = {

81 .
desc
 = "Reset button",

82 .
	gty≥
 = 
EV_KEY
,

83 .
	gcode
 = 
KEY_RESTART
,

84 .
	gdeboun˚_öãrvÆ
 = 
WPJ563_KEYS_DEBOUNCE_INTERVAL
,

85 .
	ggpio
 = 
WPJ563_GPIO_BTN_RESET
,

86 .
	ga˘ive_low
 = 1,

90 
¨8327_∑d_cfg
 
	gWPJ563_¨8337_∑d0_cfg
 = {

91 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

92 .
	gsgmii_dñay_í
 = 
åue
,

95 
¨8327_∂©f‹m_d©a
 
	gWPJ563_¨8337_d©a
 = {

96 .
∑d0_cfg
 = &
WPJ563_¨8337_∑d0_cfg
,

97 .
	gp‹t0_cfg
 = {

98 .
f‹˚_lök
 = 1,

99 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

100 .
	gdu∂ex
 = 1,

101 .
	gtx∑u£
 = 1,

102 .
	grx∑u£
 = 1,

106 
mdio_bﬂrd_öfo
 
	gWPJ563_mdio0_öfo
[] = {

108 .
bus_id
 = "ag71xx-mdio.0",

109 .
	gmdio_addr
 = 0,

110 .
	g∂©f‹m_d©a
 = &
WPJ563_¨8337_d©a
,

114 
__öô
 
	$WPJ563_£tup
()

116 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

117 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f02e000);

119 
	`©h79_ªgi°î_m25p80
(
NULL
);

121 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
WPJ563_Àds_gpio
),

122 
WPJ563_Àds_gpio
);

123 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WPJ563_KEYS_POLL_INTERVAL
,

124 
	`ARRAY_SIZE
(
WPJ563_gpio_keys
),

125 
WPJ563_gpio_keys
);

127 
	`©h79_ªgi°î_usb
();

129 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WPJ563_WMAC_CALDATA_OFFSET
, 
NULL
);

131 
	`©h79_ªgi°î_pci
();

133 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
WPJ563_mdio0_öfo
,

134 
	`ARRAY_SIZE
(
WPJ563_mdio0_öfo
));

135 
	`©h79_ªgi°î_mdio
(0, 0x0);

137 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
 + 
WPJ563_MAC0_OFFSET
, 0);

138 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
 + 
WPJ563_MAC1_OFFSET
, 0);

141 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

142 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

143 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

144 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

145 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

147 
	`©h79_ªgi°î_ëh
(0);

148 
	}
}

150 
MIPS_MACHINE
(
ATH79_MACH_WPJ563
, "WPJ563", "Com≥x WPJ563", 
WPJ563_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wrt160nl.c

11 
	~<asm/mach-©h79/©h79.h
>

13 
	~"dev-ëh.h
"

14 
	~"dev-gpio-buâ⁄s.h
"

15 
	~"dev-Àds-gpio.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-usb.h
"

18 
	~"dev-wmac.h
"

19 
	~"nvøm.h
"

20 
	~"machty≥s.h
"

22 
	#WRT160NL_GPIO_LED_POWER
 14

	)

23 
	#WRT160NL_GPIO_LED_WPS_AMBER
 9

	)

24 
	#WRT160NL_GPIO_LED_WPS_BLUE
 8

	)

25 
	#WRT160NL_GPIO_LED_WLAN
 6

	)

27 
	#WRT160NL_GPIO_BTN_WPS
 7

	)

28 
	#WRT160NL_GPIO_BTN_RESET
 21

	)

30 
	#WRT160NL_KEYS_POLL_INTERVAL
 20

	)

31 
	#WRT160NL_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WRT160NL_KEYS_POLL_INTERVAL
)

	)

33 
	#WRT160NL_NVRAM_ADDR
 0x1f7e0000

	)

34 
	#WRT160NL_NVRAM_SIZE
 0x10000

	)

36 c⁄° *
	gwπ160∆_∑π_¥obes
[] = {

38 
NULL
,

41 
Êash_∂©f‹m_d©a
 
	gwπ160∆_Êash_d©a
 = {

42 .
∑π_¥obes
 = 
wπ160∆_∑π_¥obes
,

45 
gpio_Àd
 
	gwπ160∆_Àds_gpio
[] 
	g__öôd©a
 = {

47 .
«me
 = "wrt160nl:blue:power",

48 .
	ggpio
 = 
WRT160NL_GPIO_LED_POWER
,

49 .
	ga˘ive_low
 = 1,

50 .
	gdeÁu…_åiggî
 = "default-on",

52 .
	g«me
 = "wrt160nl:amber:wps",

53 .
	ggpio
 = 
WRT160NL_GPIO_LED_WPS_AMBER
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "wrt160nl:blue:wps",

57 .
	ggpio
 = 
WRT160NL_GPIO_LED_WPS_BLUE
,

58 .
	ga˘ive_low
 = 1,

60 .
	g«me
 = "wrt160nl:blue:wlan",

61 .
	ggpio
 = 
WRT160NL_GPIO_LED_WLAN
,

62 .
	ga˘ive_low
 = 1,

66 
gpio_keys_buâ⁄
 
	gwπ160∆_gpio_keys
[] 
	g__öôd©a
 = {

68 .
desc
 = "reset",

69 .
	gty≥
 = 
EV_KEY
,

70 .
	gcode
 = 
KEY_RESTART
,

71 .
	gdeboun˚_öãrvÆ
 = 
WRT160NL_KEYS_DEBOUNCE_INTERVAL
,

72 .
	ggpio
 = 
WRT160NL_GPIO_BTN_RESET
,

73 .
	ga˘ive_low
 = 1,

75 .
	gdesc
 = "wps",

76 .
	gty≥
 = 
EV_KEY
,

77 .
	gcode
 = 
KEY_WPS_BUTTON
,

78 .
	gdeboun˚_öãrvÆ
 = 
WRT160NL_KEYS_DEBOUNCE_INTERVAL
,

79 .
	ggpio
 = 
WRT160NL_GPIO_BTN_WPS
,

80 .
	ga˘ive_low
 = 1,

84 
__öô
 
	$wπ160∆_£tup
()

86 c⁄° *
nvøm
 = (*Ë
	`KSEG1ADDR
(
WRT160NL_NVRAM_ADDR
);

87 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

88 
u8
 
mac
[6];

90 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
WRT160NL_NVRAM_SIZE
,

91 "œn_hwaddr=", 
mac
) == 0) {

92 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

93 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

96 
	`©h79_ªgi°î_mdio
(0, 0x0);

98 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

99 
©h79_ëh0_d©a
.
phy_mask
 = 0x01;

101 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

102 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

104 
	`©h79_ªgi°î_ëh
(0);

105 
	`©h79_ªgi°î_ëh
(1);

107 
	`©h79_ªgi°î_m25p80
(&
wπ160∆_Êash_d©a
);

109 
	`©h79_ªgi°î_usb
();

111 i‡(
	`©h79_nvøm_∑r£_mac_addr
(
nvøm
, 
WRT160NL_NVRAM_SIZE
,

112 "wl0_hwaddr=", 
mac
) == 0)

113 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
mac
);

115 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

117 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wπ160∆_Àds_gpio
),

118 
wπ160∆_Àds_gpio
);

120 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WRT160NL_KEYS_POLL_INTERVAL
,

121 
	`ARRAY_SIZE
(
wπ160∆_gpio_keys
),

122 
wπ160∆_gpio_keys
);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_WRT160NL
, "WRT160NL", "Linksys WRT160NL",

126 
wπ160∆_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wrt400n.c

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-ëh.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"machty≥s.h
"

24 
	#WRT400N_GPIO_LED_POWER
 1

	)

25 
	#WRT400N_GPIO_LED_WPS_BLUE
 4

	)

26 
	#WRT400N_GPIO_LED_WPS_AMBER
 5

	)

27 
	#WRT400N_GPIO_LED_WLAN
 6

	)

29 
	#WRT400N_GPIO_BTN_RESET
 8

	)

30 
	#WRT400N_GPIO_BTN_WLSEC
 3

	)

32 
	#WRT400N_KEYS_POLL_INTERVAL
 20

	)

33 
	#WRT400N_KEYS_DEBOUNE_INTERVAL
 (3 * 
WRT400N_KEYS_POLL_INTERVAL
)

	)

35 
	#WRT400N_MAC_ADDR_OFFSET
 0x120c

	)

36 
	#WRT400N_CALDATA0_OFFSET
 0x1000

	)

37 
	#WRT400N_CALDATA1_OFFSET
 0x5000

	)

39 
mtd_∑πôi⁄
 
	gwπ400n_∑πôi⁄s
[] = {

41 .
«me
 = "uboot",

42 .
	goff£t
 = 0,

43 .
	gsize
 = 0x030000,

44 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

46 .
	g«me
 = "env",

47 .
	goff£t
 = 0x030000,

48 .
	gsize
 = 0x010000,

49 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

51 .
	g«me
 = "linux",

52 .
	goff£t
 = 0x040000,

53 .
	gsize
 = 0x140000,

55 .
	g«me
 = "rootfs",

56 .
	goff£t
 = 0x180000,

57 .
	gsize
 = 0x630000,

59 .
	g«me
 = "nvram",

60 .
	goff£t
 = 0x7b0000,

61 .
	gsize
 = 0x010000,

62 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

64 .
	g«me
 = "factory",

65 .
	goff£t
 = 0x7c0000,

66 .
	gsize
 = 0x010000,

67 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

69 .
	g«me
 = "language",

70 .
	goff£t
 = 0x7d0000,

71 .
	gsize
 = 0x020000,

72 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

74 .
	g«me
 = "caldata",

75 .
	goff£t
 = 0x7f0000,

76 .
	gsize
 = 0x010000,

77 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

79 .
	g«me
 = "firmware",

80 .
	goff£t
 = 0x040000,

81 .
	gsize
 = 0x770000,

85 
Êash_∂©f‹m_d©a
 
	gwπ400n_Êash_d©a
 = {

86 .
∑πs
 = 
wπ400n_∑πôi⁄s
,

87 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wπ400n_∑πôi⁄s
),

90 
gpio_Àd
 
	gwπ400n_Àds_gpio
[] 
	g__öôd©a
 = {

92 .
«me
 = "wrt400n:blue:wps",

93 .
	ggpio
 = 
WRT400N_GPIO_LED_WPS_BLUE
,

94 .
	ga˘ive_low
 = 1,

96 .
	g«me
 = "wrt400n:amber:wps",

97 .
	ggpio
 = 
WRT400N_GPIO_LED_WPS_AMBER
,

98 .
	ga˘ive_low
 = 1,

100 .
	g«me
 = "wrt400n:blue:wlan",

101 .
	ggpio
 = 
WRT400N_GPIO_LED_WLAN
,

102 .
	ga˘ive_low
 = 1,

104 .
	g«me
 = "wrt400n:blue:power",

105 .
	ggpio
 = 
WRT400N_GPIO_LED_POWER
,

106 .
	ga˘ive_low
 = 0,

107 .
	gdeÁu…_åiggî
 = "default-on",

111 
gpio_keys_buâ⁄
 
	gwπ400n_gpio_keys
[] 
	g__öôd©a
 = {

113 .
desc
 = "reset",

114 .
	gty≥
 = 
EV_KEY
,

115 .
	gcode
 = 
KEY_RESTART
,

116 .
	gdeboun˚_öãrvÆ
 = 
WRT400N_KEYS_DEBOUNE_INTERVAL
,

117 .
	ggpio
 = 
WRT400N_GPIO_BTN_RESET
,

118 .
	ga˘ive_low
 = 1,

120 .
	gdesc
 = "wlsec",

121 .
	gty≥
 = 
EV_KEY
,

122 .
	gcode
 = 
KEY_WPS_BUTTON
,

123 .
	gdeboun˚_öãrvÆ
 = 
WRT400N_KEYS_DEBOUNE_INTERVAL
,

124 .
	ggpio
 = 
WRT400N_GPIO_BTN_WLSEC
,

125 .
	ga˘ive_low
 = 1,

129 
__öô
 
	$wπ400n_£tup
()

131 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

132 
u8
 *
mac
 = 
¨t
 + 
WRT400N_MAC_ADDR_OFFSET
;

134 
	`©h79_ªgi°î_mdio
(0, 0x0);

136 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 1);

137 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

138 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

139 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

141 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 2);

142 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RMII
;

143 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

145 
	`©h79_ªgi°î_ëh
(0);

146 
	`©h79_ªgi°î_ëh
(1);

148 
	`©h79_ªgi°î_m25p80
(&
wπ400n_Êash_d©a
);

150 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wπ400n_Àds_gpio
),

151 
wπ400n_Àds_gpio
);

153 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WRT400N_KEYS_POLL_INTERVAL
,

154 
	`ARRAY_SIZE
(
wπ400n_gpio_keys
),

155 
wπ400n_gpio_keys
);

157 
	`≠94_pci_öô
(
¨t
 + 
WRT400N_CALDATA0_OFFSET
, 
NULL
,

158 
¨t
 + 
WRT400N_CALDATA1_OFFSET
, 
NULL
);

159 
	}
}

161 
MIPS_MACHINE
(
ATH79_MACH_WRT400N
, "WRT400N", "Löksy†WRT400N", 
wπ400n_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wrtnode2q.c

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

28 
	~"comm⁄.h
"

29 
	~"dev-ëh.h
"

30 
	~"dev-gpio-buâ⁄s.h
"

31 
	~"dev-Àds-gpio.h
"

32 
	~"dev-m25p80.h
"

33 
	~"dev-•i.h
"

34 
	~"dev-usb.h
"

35 
	~"dev-wmac.h
"

36 
	~"machty≥s.h
"

37 
	~"pci.h
"

39 
	#WRTNODE2Q_GPIO_LED_WLAN
 12

	)

40 
	#WRTNODE2Q_GPIO_LED_WPS
 13

	)

41 
	#WRTNODE2Q_GPIO_LED_STATUS
 13

	)

43 
	#WRTNODE2Q_GPIO_LED_WAN
 4

	)

44 
	#WRTNODE2Q_GPIO_LED_LAN1
 16

	)

45 
	#WRTNODE2Q_GPIO_LED_LAN2
 15

	)

46 
	#WRTNODE2Q_GPIO_LED_LAN3
 14

	)

47 
	#WRTNODE2Q_GPIO_LED_LAN4
 11

	)

49 
	#WRTNODE2Q_GPIO_BTN_WPS
 17

	)

51 
	#WRTNODE2Q_KEYS_POLL_INTERVAL
 20

	)

52 
	#WRTNODE2Q_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WRTNODE2Q_KEYS_POLL_INTERVAL
)

	)

54 
	#WRTNODE2Q_MAC0_OFFSET
 0

	)

55 
	#WRTNODE2Q_WMAC_CALDATA_OFFSET
 0x1000

	)

57 
gpio_Àd
 
	gwπnode2q_Àds_gpio
[] 
	g__öôd©a
 = {

59 .
«me
 = "wrtnode2q:green:status",

60 .
	ggpio
 = 
WRTNODE2Q_GPIO_LED_STATUS
,

61 .
	ga˘ive_low
 = 1,

64 .
	g«me
 = "wrtnode2q:green:wlan",

65 .
	ggpio
 = 
WRTNODE2Q_GPIO_LED_WLAN
,

66 .
	ga˘ive_low
 = 1,

70 
gpio_keys_buâ⁄
 
	gwπnode2q_gpio_keys
[] 
	g__öôd©a
 = {

72 .
desc
 = "WPS button",

73 .
	gty≥
 = 
EV_KEY
,

74 .
	gcode
 = 
KEY_WPS_BUTTON
,

75 .
	gdeboun˚_öãrvÆ
 = 
WRTNODE2Q_KEYS_DEBOUNCE_INTERVAL
,

76 .
	ggpio
 = 
WRTNODE2Q_GPIO_BTN_WPS
,

77 .
	ga˘ive_low
 = 1,

81 
__öô
 
	$wπnode2q_gpio_Àd_£tup
()

83 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wπnode2q_Àds_gpio
),

84 
wπnode2q_Àds_gpio
);

85 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WRTNODE2Q_KEYS_POLL_INTERVAL
,

86 
	`ARRAY_SIZE
(
wπnode2q_gpio_keys
),

87 
wπnode2q_gpio_keys
);

88 
	}
}

90 
__öô
 
	$wπnode2q_£tup
()

92 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1f040000);

94 
	`©h79_ªgi°î_m25p80
(
NULL
);

96 
	`wπnode2q_gpio_Àd_£tup
();

98 
	`©h79_ªgi°î_pci
();

99 
	`©h79_ªgi°î_usb
();

101 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WRTNODE2Q_WMAC_CALDATA_OFFSET
, 
NULL
);

103 
	`©h79_ªgi°î_mdio
(0, 0x0);

104 
	`©h79_ªgi°î_mdio
(1, 0x0);

106 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
¨t
 + 
WRTNODE2Q_MAC0_OFFSET
, 0);

107 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
¨t
 + 
WRTNODE2Q_MAC0_OFFSET
, 1);

110 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

111 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

112 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

113 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

114 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

115 
	`©h79_ªgi°î_ëh
(1);

118 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

119 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

120 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

121 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

122 
	`©h79_ªgi°î_ëh
(0);

123 
	}
}

125 
MIPS_MACHINE
(
ATH79_MACH_WRTNODE2Q
, "WRTNODE2Q", "WRTnode2Q board",

126 
wπnode2q_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wzr-450hp2.c

23 
	~<löux/phy.h
>

24 
	~<löux/gpio.h
>

25 
	~<löux/mtd/mtd.h
>

26 
	~<löux/mtd/∑πôi⁄s.h
>

27 
	~<löux/∂©f‹m_devi˚.h
>

28 
	~<löux/¨8216_∂©f‹m.h
>

30 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

32 
	~"comm⁄.h
"

33 
	~"dev-ëh.h
"

34 
	~"dev-gpio-buâ⁄s.h
"

35 
	~"dev-Àds-gpio.h
"

36 
	~"dev-m25p80.h
"

37 
	~"dev-•i.h
"

38 
	~"dev-usb.h
"

39 
	~"dev-wmac.h
"

40 
	~"machty≥s.h
"

42 
	#WZR_450HP2_KEYS_POLL_INTERVAL
 20

	)

43 
	#WZR_450HP2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WZR_450HP2_KEYS_POLL_INTERVAL
)

	)

45 
	#WZR_450HP2_WMAC_CALDATA_OFFSET
 0x1000

	)

47 
mtd_∑πôi⁄
 
	gwzrhpg450h_∑πôi⁄s
[] = {

49 .
«me
 = "u-boot",

50 .
	goff£t
 = 0,

51 .
	gsize
 = 0x0040000,

52 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

54 .
	g«me
 = "u-boot-env",

55 .
	goff£t
 = 0x0040000,

56 .
	gsize
 = 0x0010000,

58 .
	g«me
 = "ART",

59 .
	goff£t
 = 0x0ff0000,

60 .
	gsize
 = 0x0010000,

61 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

63 .
	g«me
 = "firmware",

64 .
	goff£t
 = 0x0050000,

65 .
	gsize
 = 0x0f90000,

67 .
	g«me
 = "user_property",

68 .
	goff£t
 = 0x0fe0000,

69 .
	gsize
 = 0x0010000,

73 
Êash_∂©f‹m_d©a
 
	gwzr_450hp2_Êash_d©a
 = {

74 .
∑πs
 = 
wzrhpg450h_∑πôi⁄s
,

75 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wzrhpg450h_∑πôi⁄s
),

78 
gpio_Àd
 
	gwzr_450hp2_Àds_gpio
[] 
	g__öôd©a
 = {

80 .
«me
 = "buffalo:green:wps",

81 .
	ggpio
 = 3,

82 .
	ga˘ive_low
 = 1,

85 .
	g«me
 = "buffalo:green:system",

86 .
	ggpio
 = 20,

87 .
	ga˘ive_low
 = 1,

90 .
	g«me
 = "buffalo:green:wlan",

91 .
	ggpio
 = 18,

92 .
	ga˘ive_low
 = 1,

96 
gpio_keys_buâ⁄
 
	gwzr_450hp2_gpio_keys
[] 
	g__öôd©a
 = {

98 .
desc
 = "Reset button",

99 .
	gty≥
 = 
EV_KEY
,

100 .
	gcode
 = 
KEY_RESTART
,

101 .
	gdeboun˚_öãrvÆ
 = 
WZR_450HP2_KEYS_DEBOUNCE_INTERVAL
,

102 .
	ggpio
 = 17,

103 .
	ga˘ive_low
 = 1,

106 .
	gdesc
 = "RFKILL button",

107 .
	gty≥
 = 
EV_KEY
,

108 .
	gcode
 = 
KEY_RFKILL
,

109 .
	gdeboun˚_öãrvÆ
 = 
WZR_450HP2_KEYS_DEBOUNCE_INTERVAL
,

110 .
	ggpio
 = 21,

111 .
	ga˘ive_low
 = 1,

115 c⁄° 
¨8327_Àd_öfo
 
	gwzr_450hp2_Àds_¨8327
[] = {

116 
AR8327_LED_INFO
(
PHY0_0
, 
HW
, "buffalo:green:lan1"),

117 
AR8327_LED_INFO
(
PHY1_0
, 
HW
, "buffalo:green:lan2"),

118 
AR8327_LED_INFO
(
PHY2_0
, 
HW
, "buffalo:green:lan3"),

119 
AR8327_LED_INFO
(
PHY3_0
, 
HW
, "buffalo:green:lan4"),

120 
AR8327_LED_INFO
(
PHY4_0
, 
HW
, "buffalo:green:wan"),

124 
¨8327_∑d_cfg
 
	gwzr_450hp2_¨8327_∑d0_cfg
 = {

125 .
mode
 = 
AR8327_PAD_MAC_SGMII
,

126 .
	gsgmii_dñay_í
 = 
åue
,

130 
¨8327_∑d_cfg
 
	gwzr_450hp2_¨8327_∑d6_cfg
 = {

131 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

132 .
	gtx˛k_dñay_í
 = 
åue
,

133 .
	grx˛k_dñay_í
 = 
åue
,

134 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

135 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

138 
¨8327_Àd_cfg
 
	gwzr_450hp2_¨8327_Àd_cfg
 = {

139 .
Àd_˘æ0
 = 0xcc35cc35,

140 .
	gÀd_˘æ1
 = 0xca35ca35,

141 .
	gÀd_˘æ2
 = 0xc935c935,

142 .
	gÀd_˘æ3
 = 0x03ffff00,

143 .
	g›í_døö
 = 
åue
,

146 
¨8327_∂©f‹m_d©a
 
	gwzr_450hp2_¨8327_d©a
 = {

147 .
∑d0_cfg
 = &
wzr_450hp2_¨8327_∑d0_cfg
,

148 .
	g∑d6_cfg
 = &
wzr_450hp2_¨8327_∑d6_cfg
,

149 .
	gp‹t0_cfg
 = {

150 .
f‹˚_lök
 = 1,

151 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

152 .
	gdu∂ex
 = 1,

153 .
	gtx∑u£
 = 1,

154 .
	grx∑u£
 = 1,

156 .
	gp‹t6_cfg
 = {

157 .
f‹˚_lök
 = 1,

158 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

159 .
	gdu∂ex
 = 1,

160 .
	gtx∑u£
 = 1,

161 .
	grx∑u£
 = 1,

163 .
	gÀd_cfg
 = &
wzr_450hp2_¨8327_Àd_cfg
,

164 .
	gnum_Àds
 = 
ARRAY_SIZE
(
wzr_450hp2_Àds_¨8327
),

165 .
	gÀds
 = 
wzr_450hp2_Àds_¨8327
,

168 
mdio_bﬂrd_öfo
 
	gwzr_450hp2_mdio0_öfo
[] = {

170 .
bus_id
 = "ag71xx-mdio.0",

171 .
	gmdio_addr
 = 0,

172 .
	g∂©f‹m_d©a
 = &
wzr_450hp2_¨8327_d©a
,

176 
__öô
 
	$wzr_450hp2_£tup
()

178 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

179 
u8
 *
mac_w™
 = 
¨t
;

180 
u8
 *
mac_œn
 = 
mac_w™
 + 
ETH_ALEN
;

182 
	`©h79_ªgi°î_m25p80
(&
wzr_450hp2_Êash_d©a
);

184 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wzr_450hp2_Àds_gpio
),

185 
wzr_450hp2_Àds_gpio
);

186 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WZR_450HP2_KEYS_POLL_INTERVAL
,

187 
	`ARRAY_SIZE
(
wzr_450hp2_gpio_keys
),

188 
wzr_450hp2_gpio_keys
);

190 
	`©h79_ªgi°î_wmac
(
¨t
 + 
WZR_450HP2_WMAC_CALDATA_OFFSET
, 
mac_œn
);

192 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
wzr_450hp2_mdio0_öfo
,

193 
	`ARRAY_SIZE
(
wzr_450hp2_mdio0_öfo
));

194 
	`©h79_ªgi°î_mdio
(0, 0x0);

196 
	`©h79_£tup_qˇ955x_ëh_cfg
(
QCA955X_ETH_CFG_RGMII_EN
);

199 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

200 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

201 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

202 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x56000000;

204 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac_w™
, 0);

205 
	`©h79_ªgi°î_ëh
(0);

208 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_SGMII
;

209 
©h79_ëh1_d©a
.
•ìd
 = 
SPEED_1000
;

210 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

211 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x03000101;

213 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac_œn
, 0);

214 
	`©h79_ªgi°î_ëh
(1);

216 
	`©h79_ªgi°î_usb
();

217 
	}
}

219 
MIPS_MACHINE
(
ATH79_MACH_WZR_450HP2
, "WZR-450HP2",

220 "BufÁlÿWZR-450HP2", 
wzr_450hp2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-ag300h.c

11 
	~<löux/gpio.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	~"dev-ëh.h
"

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-gpio-buâ⁄s.h
"

20 
	~"dev-Àds-gpio.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-usb.h
"

23 
	~"machty≥s.h
"

25 
	#WZRHPAG300H_MAC_OFFSET
 0x20c

	)

26 
	#WZRHPAG300H_KEYS_POLL_INTERVAL
 20

	)

27 
	#WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WZRHPAG300H_KEYS_POLL_INTERVAL
)

	)

29 
mtd_∑πôi⁄
 
	gwzrh∑g300h_Êash_∑πôi⁄s
[] = {

31 .
«me
 = "u-boot",

32 .
	goff£t
 = 0,

33 .
	gsize
 = 0x0040000,

34 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

36 .
	g«me
 = "u-boot-env",

37 .
	goff£t
 = 0x0040000,

38 .
	gsize
 = 0x0010000,

39 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

41 .
	g«me
 = "art",

42 .
	goff£t
 = 0x0050000,

43 .
	gsize
 = 0x0010000,

44 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

46 .
	g«me
 = "firmware",

47 .
	goff£t
 = 0x0060000,

48 .
	gsize
 = 0x1f90000,

50 .
	g«me
 = "user_property",

51 .
	goff£t
 = 0x1ff0000,

52 .
	gsize
 = 0x0010000,

53 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

57 
Êash_∂©f‹m_d©a
 
	gwzrh∑g300h_Êash_d©a
 = {

58 .
∑πs
 = 
wzrh∑g300h_Êash_∑πôi⁄s
,

59 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wzrh∑g300h_Êash_∑πôi⁄s
),

62 
gpio_Àd
 
	gwzrh∑g300h_Àds_gpio
[] 
	g__öôd©a
 = {

64 .
«me
 = "buffalo:red:diag",

65 .
	ggpio
 = 1,

66 .
	ga˘ive_low
 = 1,

70 
gpio_Àd
 
	gwzrh∑g300h_wmac0_Àds_gpio
[] = {

72 .
«me
 = "buffalo:amber:band2g",

73 .
	ggpio
 = 1,

74 .
	ga˘ive_low
 = 1,

77 .
	g«me
 = "buffalo:green:usb",

78 .
	ggpio
 = 3,

79 .
	ga˘ive_low
 = 1,

82 .
	g«me
 = "buffalo:green:band2g",

83 .
	ggpio
 = 5,

84 .
	ga˘ive_low
 = 1,

88 
gpio_Àd
 
	gwzrh∑g300h_wmac1_Àds_gpio
[] = {

90 .
«me
 = "buffalo:green:band5g",

91 .
	ggpio
 = 1,

92 .
	ga˘ive_low
 = 1,

95 .
	g«me
 = "buffalo:green:router",

96 .
	ggpio
 = 3,

97 .
	ga˘ive_low
 = 1,

100 .
	g«me
 = "buffalo:blue:movie_engine",

101 .
	ggpio
 = 4,

102 .
	ga˘ive_low
 = 1,

105 .
	g«me
 = "buffalo:amber:band5g",

106 .
	ggpio
 = 5,

107 .
	ga˘ive_low
 = 1,

111 
gpio_keys_buâ⁄
 
	gwzrh∑g300h_gpio_keys
[] 
	g__öôd©a
 = {

113 .
desc
 = "reset",

114 .
	gty≥
 = 
EV_KEY
,

115 .
	gcode
 = 
KEY_RESTART
,

116 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

117 .
	ggpio
 = 11,

118 .
	ga˘ive_low
 = 1,

120 .
	gdesc
 = "usb",

121 .
	gty≥
 = 
EV_KEY
,

122 .
	gcode
 = 
BTN_2
,

123 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

124 .
	ggpio
 = 3,

125 .
	ga˘ive_low
 = 1,

127 .
	gdesc
 = "aoss",

128 .
	gty≥
 = 
EV_KEY
,

129 .
	gcode
 = 
KEY_WPS_BUTTON
,

130 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

131 .
	ggpio
 = 5,

132 .
	ga˘ive_low
 = 1,

134 .
	gdesc
 = "router_auto",

135 .
	gty≥
 = 
EV_SW
,

136 .
	gcode
 = 
BTN_6
,

137 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

138 .
	ggpio
 = 6,

139 .
	ga˘ive_low
 = 1,

141 .
	gdesc
 = "router_off",

142 .
	gty≥
 = 
EV_SW
,

143 .
	gcode
 = 
BTN_5
,

144 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

145 .
	ggpio
 = 7,

146 .
	ga˘ive_low
 = 1,

148 .
	gdesc
 = "movie_engine",

149 .
	gty≥
 = 
EV_SW
,

150 .
	gcode
 = 
BTN_7
,

151 .
	gdeboun˚_öãrvÆ
 = 
WZRHPAG300H_KEYS_DEBOUNCE_INTERVAL
,

152 .
	ggpio
 = 8,

153 .
	ga˘ive_low
 = 1,

157 
__öô
 
	$wzrh∑g300h_£tup
()

159 
u8
 *
ì¥om1
 = (u8 *Ë
	`KSEG1ADDR
(0x1f051000);

160 
u8
 *
ì¥om2
 = (u8 *Ë
	`KSEG1ADDR
(0x1f055000);

161 
u8
 *
mac1
 = 
ì¥om1
 + 
WZRHPAG300H_MAC_OFFSET
;

162 
u8
 *
mac2
 = 
ì¥om2
 + 
WZRHPAG300H_MAC_OFFSET
;

164 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac1
, 0);

165 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac2
, 1);

167 
	`©h79_ªgi°î_mdio
(0, ~(
	`BIT
(0) | BIT(4)));

169 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

170 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

171 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

172 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

174 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

175 
©h79_ëh1_d©a
.
phy_mask
 = 
	`BIT
(4);

177 
	`©h79_ªgi°î_ëh
(0);

178 
	`©h79_ªgi°î_ëh
(1);

180 
	`gpio_ªque°_⁄e
(2, 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

182 
	`©h79_ªgi°î_usb
();

184 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wzrh∑g300h_Àds_gpio
),

185 
wzrh∑g300h_Àds_gpio
);

187 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WZRHPAG300H_KEYS_POLL_INTERVAL
,

188 
	`ARRAY_SIZE
(
wzrh∑g300h_gpio_keys
),

189 
wzrh∑g300h_gpio_keys
);

191 
	`©h79_ªgi°î_m25p80_mu…i
(&
wzrh∑g300h_Êash_d©a
);

193 
	`≠94_pci_öô
(
ì¥om1
, 
mac1
, 
ì¥om2
, 
mac2
);

195 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wzrh∑g300h_wmac0_Àds_gpio
,

196 
	`ARRAY_SIZE
(
wzrh∑g300h_wmac0_Àds_gpio
));

197 
	`≠9x_pci_£tup_wmac_Àds
(1, 
wzrh∑g300h_wmac1_Àds_gpio
,

198 
	`ARRAY_SIZE
(
wzrh∑g300h_wmac1_Àds_gpio
));

199 
	}
}

201 
MIPS_MACHINE
(
ATH79_MACH_WZR_HP_AG300H
, "WZR-HP-AG300H",

202 "BufÁlÿWZR-HP-AG300H/WZR-600DHP", 
wzrh∑g300h_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g300nh.c

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/mtd/mtd.h
>

13 
	~<löux/mtd/∑πôi⁄s.h
>

14 
	~<löux/mtd/physm≠.h
>

15 
	~<löux/nxp_74hc153.h
>

16 
	~<löux/πl8366.h
>

18 
	~<asm/mach-©h79/©h79.h
>

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-usb.h
"

24 
	~"dev-wmac.h
"

25 
	~"machty≥s.h
"

27 
	#WZRHPG300NH_GPIO_LED_USB
 0

	)

28 
	#WZRHPG300NH_GPIO_LED_DIAG
 1

	)

29 
	#WZRHPG300NH_GPIO_LED_WIRELESS
 6

	)

30 
	#WZRHPG300NH_GPIO_LED_SECURITY
 17

	)

31 
	#WZRHPG300NH_GPIO_LED_ROUTER
 18

	)

33 
	#WZRHPG300NH_GPIO_RTL8366_SDA
 19

	)

34 
	#WZRHPG300NH_GPIO_RTL8366_SCK
 20

	)

36 
	#WZRHPG300NH_GPIO_74HC153_S0
 9

	)

37 
	#WZRHPG300NH_GPIO_74HC153_S1
 11

	)

38 
	#WZRHPG300NH_GPIO_74HC153_1Y
 12

	)

39 
	#WZRHPG300NH_GPIO_74HC153_2Y
 14

	)

41 
	#WZRHPG300NH_GPIO_EXP_BASE
 32

	)

42 
	#WZRHPG300NH_GPIO_BTN_AOSS
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 0)

	)

43 
	#WZRHPG300NH_GPIO_BTN_RESET
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 1)

	)

44 
	#WZRHPG300NH_GPIO_BTN_ROUTER_ON
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 2)

	)

45 
	#WZRHPG300NH_GPIO_BTN_QOS_ON
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 3)

	)

46 
	#WZRHPG300NH_GPIO_BTN_USB
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 5)

	)

47 
	#WZRHPG300NH_GPIO_BTN_ROUTER_AUTO
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 6)

	)

48 
	#WZRHPG300NH_GPIO_BTN_QOS_OFF
 (
WZRHPG300NH_GPIO_EXP_BASE
 + 7)

	)

50 
	#WZRHPG300NH_KEYS_POLL_INTERVAL
 20

	)

51 
	#WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WZRHPG300NH_KEYS_POLL_INTERVAL
)

	)

53 
	#WZRHPG300NH_MAC_OFFSET
 0x20c

	)

55 
mtd_∑πôi⁄
 
	gwzrhpg300nh_Êash_∑πôi⁄s
[] = {

57 .
«me
 = "u-boot",

58 .
	goff£t
 = 0,

59 .
	gsize
 = 0x0040000,

60 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

62 .
	g«me
 = "u-boot-env",

63 .
	goff£t
 = 0x0040000,

64 .
	gsize
 = 0x0020000,

65 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

67 .
	g«me
 = "firmware",

68 .
	goff£t
 = 0x0060000,

69 .
	gsize
 = 0x1f60000,

71 .
	g«me
 = "user_property",

72 .
	goff£t
 = 0x1fc0000,

73 .
	gsize
 = 0x0020000,

74 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

76 .
	g«me
 = "art",

77 .
	goff£t
 = 0x1fe0000,

78 .
	gsize
 = 0x0020000,

79 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

83 
physm≠_Êash_d©a
 
	gwzrhpg300nh_Êash_d©a
 = {

84 .
width
 = 2,

85 .
	g∑πs
 = 
wzrhpg300nh_Êash_∑πôi⁄s
,

86 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wzrhpg300nh_Êash_∑πôi⁄s
),

89 
	#WZRHPG300NH_FLASH_BASE
 0x1e000000

	)

90 
	#WZRHPG300NH_FLASH_SIZE
 (32 * 1024 * 1024)

	)

92 
ªsour˚
 
	gwzrhpg300nh_Êash_ªsour˚s
[] = {

94 .
°¨t
 = 
WZRHPG300NH_FLASH_BASE
,

95 .
	gíd
 = 
WZRHPG300NH_FLASH_BASE
 + 
WZRHPG300NH_FLASH_SIZE
 - 1,

96 .
	gÊags
 = 
IORESOURCE_MEM
,

100 
∂©f‹m_devi˚
 
	gwzrhpg300nh_Êash_devi˚
 = {

101 .
«me
 = "physmap-flash",

102 .
	gid
 = -1,

103 .
	gªsour˚
 = 
wzrhpg300nh_Êash_ªsour˚s
,

104 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
wzrhpg300nh_Êash_ªsour˚s
),

105 .
	gdev
 = {

106 .
∂©f‹m_d©a
 = &
wzrhpg300nh_Êash_d©a
,

110 
gpio_Àd
 
	gwzrhpg300nh_Àds_gpio
[] 
	g__öôd©a
 = {

112 .
«me
 = "buffalo:orange:security",

113 .
	ggpio
 = 
WZRHPG300NH_GPIO_LED_SECURITY
,

114 .
	ga˘ive_low
 = 1,

116 .
	g«me
 = "buffalo:green:wireless",

117 .
	ggpio
 = 
WZRHPG300NH_GPIO_LED_WIRELESS
,

118 .
	ga˘ive_low
 = 1,

120 .
	g«me
 = "buffalo:green:router",

121 .
	ggpio
 = 
WZRHPG300NH_GPIO_LED_ROUTER
,

122 .
	ga˘ive_low
 = 1,

124 .
	g«me
 = "buffalo:red:diag",

125 .
	ggpio
 = 
WZRHPG300NH_GPIO_LED_DIAG
,

126 .
	ga˘ive_low
 = 1,

128 .
	g«me
 = "buffalo:blue:usb",

129 .
	ggpio
 = 
WZRHPG300NH_GPIO_LED_USB
,

130 .
	ga˘ive_low
 = 1,

134 
gpio_keys_buâ⁄
 
	gwzrhpg300nh_gpio_keys
[] 
	g__öôd©a
 = {

136 .
desc
 = "reset",

137 .
	gty≥
 = 
EV_KEY
,

138 .
	gcode
 = 
KEY_RESTART
,

139 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

140 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_RESET
,

141 .
	ga˘ive_low
 = 1,

143 .
	gdesc
 = "aoss",

144 .
	gty≥
 = 
EV_KEY
,

145 .
	gcode
 = 
KEY_WPS_BUTTON
,

146 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

147 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_AOSS
,

148 .
	ga˘ive_low
 = 1,

150 .
	gdesc
 = "usb",

151 .
	gty≥
 = 
EV_KEY
,

152 .
	gcode
 = 
BTN_2
,

153 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

154 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_USB
,

155 .
	ga˘ive_low
 = 1,

157 .
	gdesc
 = "qos_on",

158 .
	gty≥
 = 
EV_KEY
,

159 .
	gcode
 = 
BTN_3
,

160 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

161 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_QOS_ON
,

162 .
	ga˘ive_low
 = 0,

164 .
	gdesc
 = "qos_off",

165 .
	gty≥
 = 
EV_KEY
,

166 .
	gcode
 = 
BTN_4
,

167 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

168 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_QOS_OFF
,

169 .
	ga˘ive_low
 = 0,

171 .
	gdesc
 = "router_on",

172 .
	gty≥
 = 
EV_KEY
,

173 .
	gcode
 = 
BTN_5
,

174 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

175 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_ROUTER_ON
,

176 .
	ga˘ive_low
 = 0,

178 .
	gdesc
 = "router_auto",

179 .
	gty≥
 = 
EV_KEY
,

180 .
	gcode
 = 
BTN_6
,

181 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH_KEYS_DEBOUNCE_INTERVAL
,

182 .
	ggpio
 = 
WZRHPG300NH_GPIO_BTN_ROUTER_AUTO
,

183 .
	ga˘ive_low
 = 0,

187 
nxp_74hc153_∂©f‹m_d©a
 
	gwzrhpg300nh_74hc153_d©a
 = {

188 .
gpio_ba£
 = 
WZRHPG300NH_GPIO_EXP_BASE
,

189 .
	ggpio_pö_s0
 = 
WZRHPG300NH_GPIO_74HC153_S0
,

190 .
	ggpio_pö_s1
 = 
WZRHPG300NH_GPIO_74HC153_S1
,

191 .
	ggpio_pö_1y
 = 
WZRHPG300NH_GPIO_74HC153_1Y
,

192 .
	ggpio_pö_2y
 = 
WZRHPG300NH_GPIO_74HC153_2Y
,

195 
∂©f‹m_devi˚
 
	gwzrhpg300nh_74hc153_devi˚
 = {

196 .
«me
 = 
NXP_74HC153_DRIVER_NAME
,

197 .
	gid
 = -1,

198 .
	gdev
 = {

199 .
∂©f‹m_d©a
 = &
wzrhpg300nh_74hc153_d©a
,

203 
πl8366_∂©f‹m_d©a
 
	gwzrhpg300nh_πl8366_d©a
 = {

204 .
gpio_sda
 = 
WZRHPG300NH_GPIO_RTL8366_SDA
,

205 .
	ggpio_sck
 = 
WZRHPG300NH_GPIO_RTL8366_SCK
,

208 
∂©f‹m_devi˚
 
	gwzrhpg300nh_πl8366s_devi˚
 = {

209 .
«me
 = 
RTL8366S_DRIVER_NAME
,

210 .
	gid
 = -1,

211 .
	gdev
 = {

212 .
∂©f‹m_d©a
 = &
wzrhpg300nh_πl8366_d©a
,

216 
∂©f‹m_devi˚
 
	gwzrhpg300nh_πl8366rb_devi˚
 = {

217 .
«me
 = 
RTL8366RB_DRIVER_NAME
,

218 .
	gid
 = -1,

219 .
	gdev
 = {

220 .
∂©f‹m_d©a
 = &
wzrhpg300nh_πl8366_d©a
,

224 
__öô
 
	$wzrhpg300nh_£tup
()

226 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

227 
u8
 *
mac
 = 
ì¥om
 + 
WZRHPG300NH_MAC_OFFSET
;

228 
boﬁ
 
ha§é8366rb
 = 
Ál£
;

230 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

231 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

233 i‡(
	`πl8366_smi_dëe˘
(&
wzrhpg300nh_πl8366_d©a
Ë=
RTL8366_TYPE_RB
)

234 
ha§é8366rb
 = 
åue
;

236 i‡(
ha§é8366rb
) {

237 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x1f000000;

238 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
wzrhpg300nh_πl8366rb_devi˚
.
dev
;

239 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x100;

240 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
wzrhpg300nh_πl8366rb_devi˚
.
dev
;

242 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x1e000100;

243 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
wzrhpg300nh_πl8366s_devi˚
.
dev
;

244 
©h79_ëh1_∂l_d©a
.
∂l_1000
 = 0x1e000100;

245 
©h79_ëh1_d©a
.
mii_bus_dev
 = &
wzrhpg300nh_πl8366s_devi˚
.
dev
;

248 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

249 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

250 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

252 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

253 
©h79_ëh1_d©a
.
phy_mask
 = 0x10;

255 
	`©h79_ªgi°î_ëh
(0);

256 
	`©h79_ªgi°î_ëh
(1);

258 
	`©h79_ªgi°î_usb
();

259 
	`©h79_ªgi°î_wmac
(
ì¥om
, 
NULL
);

261 
	`∂©f‹m_devi˚_ªgi°î
(&
wzrhpg300nh_74hc153_devi˚
);

262 
	`∂©f‹m_devi˚_ªgi°î
(&
wzrhpg300nh_Êash_devi˚
);

264 i‡(
ha§é8366rb
)

265 
	`∂©f‹m_devi˚_ªgi°î
(&
wzrhpg300nh_πl8366rb_devi˚
);

267 
	`∂©f‹m_devi˚_ªgi°î
(&
wzrhpg300nh_πl8366s_devi˚
);

269 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wzrhpg300nh_Àds_gpio
),

270 
wzrhpg300nh_Àds_gpio
);

272 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WZRHPG300NH_KEYS_POLL_INTERVAL
,

273 
	`ARRAY_SIZE
(
wzrhpg300nh_gpio_keys
),

274 
wzrhpg300nh_gpio_keys
);

276 
	}
}

278 
MIPS_MACHINE
(
ATH79_MACH_WZR_HP_G300NH
, "WZR-HP-G300NH",

279 "BufÁlÿWZR-HP-G300NH", 
wzrhpg300nh_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g300nh2.c

12 
	~<löux/gpio.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	~"dev-≠9x-pci.h
"

19 
	~"dev-ëh.h
"

20 
	~"dev-gpio-buâ⁄s.h
"

21 
	~"dev-Àds-gpio.h
"

22 
	~"dev-m25p80.h
"

23 
	~"dev-usb.h
"

24 
	~"machty≥s.h
"

26 
	#WZRHPG300NH2_MAC_OFFSET
 0x20c

	)

27 
	#WZRHPG300NH2_KEYS_POLL_INTERVAL
 20

	)

28 
	#WZRHPG300NH2_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WZRHPG300NH2_KEYS_POLL_INTERVAL
)

	)

30 
mtd_∑πôi⁄
 
	gwzrhpg300nh2_Êash_∑πôi⁄s
[] = {

32 .
«me
 = "u-boot",

33 .
	goff£t
 = 0,

34 .
	gsize
 = 0x0040000,

35 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

37 .
	g«me
 = "u-boot-env",

38 .
	goff£t
 = 0x0040000,

39 .
	gsize
 = 0x0010000,

40 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

42 .
	g«me
 = "art",

43 .
	goff£t
 = 0x0050000,

44 .
	gsize
 = 0x0010000,

45 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

47 .
	g«me
 = "firmware",

48 .
	goff£t
 = 0x0060000,

49 .
	gsize
 = 0x1f90000,

51 .
	g«me
 = "user_property",

52 .
	goff£t
 = 0x1ff0000,

53 .
	gsize
 = 0x0010000,

54 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

58 
Êash_∂©f‹m_d©a
 
	gwzrhpg300nh2_Êash_d©a
 = {

59 .
∑πs
 = 
wzrhpg300nh2_Êash_∑πôi⁄s
,

60 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wzrhpg300nh2_Êash_∑πôi⁄s
),

63 
gpio_Àd
 
	gwzrhpg300nh2_Àds_gpio
[] 
	g__öôd©a
 = {

65 .
«me
 = "buffalo:red:diag",

66 .
	ggpio
 = 16,

67 .
	ga˘ive_low
 = 1,

71 
gpio_Àd
 
	gwzrhpg300nh2_wmac_Àds_gpio
[] = {

73 .
«me
 = "buffalo:blue:usb",

74 .
	ggpio
 = 4,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "buffalo:green:wireless",

79 .
	ggpio
 = 5,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "buffalo:orange:security",

84 .
	ggpio
 = 6,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "buffalo:green:router",

89 .
	ggpio
 = 7,

90 .
	ga˘ive_low
 = 1,

93 .
	g«me
 = "buffalo:blue:movie_engine_on",

94 .
	ggpio
 = 8,

95 .
	ga˘ive_low
 = 1,

98 .
	g«me
 = "buffalo:blue:movie_engine_off",

99 .
	ggpio
 = 9,

100 .
	ga˘ive_low
 = 1,

105 
gpio_keys_buâ⁄
 
	gwzrhpg300nh2_gpio_keys
[] 
	g__öôd©a
 = {

107 .
desc
 = "reset",

108 .
	gty≥
 = 
EV_KEY
,

109 .
	gcode
 = 
KEY_RESTART
,

110 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH2_KEYS_DEBOUNCE_INTERVAL
,

111 .
	ggpio
 = 1,

112 .
	ga˘ive_low
 = 1,

114 .
	gdesc
 = "usb",

115 .
	gty≥
 = 
EV_KEY
,

116 .
	gcode
 = 
BTN_2
,

117 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH2_KEYS_DEBOUNCE_INTERVAL
,

118 .
	ggpio
 = 7,

119 .
	ga˘ive_low
 = 1,

121 .
	gdesc
 = "qos",

122 .
	gty≥
 = 
EV_KEY
,

123 .
	gcode
 = 
BTN_3
,

124 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH2_KEYS_DEBOUNCE_INTERVAL
,

125 .
	ggpio
 = 11,

126 .
	ga˘ive_low
 = 0,

128 .
	gdesc
 = "router_on",

129 .
	gty≥
 = 
EV_KEY
,

130 .
	gcode
 = 
BTN_5
,

131 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG300NH2_KEYS_DEBOUNCE_INTERVAL
,

132 .
	ggpio
 = 8,

133 .
	ga˘ive_low
 = 0,

137 
__öô
 
	$wzrhpg300nh2_£tup
()

140 
u8
 *
ì¥om
 = (u8 *Ë
	`KSEG1ADDR
(0x1f051000);

141 
u8
 *
mac0
 = 
ì¥om
 + 
WZRHPG300NH2_MAC_OFFSET
;

144 
	`©h79_ªgi°î_m25p80_mu…i
(&
wzrhpg300nh2_Êash_d©a
);

146 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 0);

147 
	`©h79_ªgi°î_mdio
(0, ~(
	`BIT
(0)));

149 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac0
, 0);

150 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

151 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

152 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

153 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

155 
	`©h79_ªgi°î_ëh
(0);

158 
	`gpio_ªque°_⁄e
(13, 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

160 
	`©h79_ªgi°î_usb
();

162 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wzrhpg300nh2_Àds_gpio
),

163 
wzrhpg300nh2_Àds_gpio
);

164 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WZRHPG300NH2_KEYS_POLL_INTERVAL
,

165 
	`ARRAY_SIZE
(
wzrhpg300nh2_gpio_keys
),

166 
wzrhpg300nh2_gpio_keys
);

167 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wzrhpg300nh2_wmac_Àds_gpio
,

168 
	`ARRAY_SIZE
(
wzrhpg300nh2_wmac_Àds_gpio
));

170 
	`≠91_pci_öô
(
ì¥om
, 
mac0
);

171 
	}
}

173 
MIPS_MACHINE
(
ATH79_MACH_WZR_HP_G300NH2
, "WZR-HP-G300NH2",

174 "BufÁlÿWZR-HP-G300NH2", 
wzrhpg300nh2_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g450h.c

13 
	~<löux/gpio.h
>

14 
	~<löux/mtd/mtd.h
>

15 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<löux/©h9k_∂©f‹m.h
>

18 
	~<asm/mach-©h79/©h79.h
>

20 
	~"dev-ëh.h
"

21 
	~"dev-m25p80.h
"

22 
	~"dev-≠9x-pci.h
"

23 
	~"dev-gpio-buâ⁄s.h
"

24 
	~"dev-Àds-gpio.h
"

25 
	~"dev-usb.h
"

26 
	~"machty≥s.h
"

28 
	#WZRHPG450H_KEYS_POLL_INTERVAL
 20

	)

29 
	#WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
 (3 * 
WZRHPG450H_KEYS_POLL_INTERVAL
)

	)

31 
mtd_∑πôi⁄
 
	gwzrhpg450h_∑πôi⁄s
[] = {

33 .
«me
 = "u-boot",

34 .
	goff£t
 = 0,

35 .
	gsize
 = 0x0040000,

36 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

38 .
	g«me
 = "u-boot-env",

39 .
	goff£t
 = 0x0040000,

40 .
	gsize
 = 0x0010000,

42 .
	g«me
 = "ART",

43 .
	goff£t
 = 0x0050000,

44 .
	gsize
 = 0x0010000,

45 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

47 .
	g«me
 = "firmware",

48 .
	goff£t
 = 0x0060000,

49 .
	gsize
 = 0x1f80000,

51 .
	g«me
 = "user_property",

52 .
	goff£t
 = 0x1fe0000,

53 .
	gsize
 = 0x0020000,

57 
Êash_∂©f‹m_d©a
 
	gwzrhpg450h_Êash_d©a
 = {

58 .
∑πs
 = 
wzrhpg450h_∑πôi⁄s
,

59 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
wzrhpg450h_∑πôi⁄s
),

62 
gpio_Àd
 
	gwzrhpg450h_Àds_gpio
[] 
	g__öôd©a
 = {

64 .
«me
 = "buffalo:red:diag",

65 .
	ggpio
 = 14,

66 .
	ga˘ive_low
 = 1,

69 .
	g«me
 = "buffalo:orange:security",

70 .
	ggpio
 = 13,

71 .
	ga˘ive_low
 = 1,

76 
gpio_Àd
 
	gwzrhpg450h_wmac_Àds_gpio
[] = {

78 .
«me
 = "buffalo:blue:movie_engine",

79 .
	ggpio
 = 13,

80 .
	ga˘ive_low
 = 1,

83 .
	g«me
 = "buffalo:green:router",

84 .
	ggpio
 = 14,

85 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "buffalo:green:wireless",

89 .
	ggpio
 = 15,

90 .
	ga˘ive_low
 = 1,

94 
gpio_keys_buâ⁄
 
	gwzrhpg450h_gpio_keys
[] 
	g__öôd©a
 = {

96 .
desc
 = "reset",

97 .
	gty≥
 = 
EV_KEY
,

98 .
	gcode
 = 
KEY_RESTART
,

99 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
,

100 .
	ggpio
 = 6,

101 .
	ga˘ive_low
 = 1,

103 .
	gdesc
 = "usb",

104 .
	gty≥
 = 
EV_KEY
,

105 .
	gcode
 = 
BTN_2
,

106 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
,

107 .
	ggpio
 = 1,

108 .
	ga˘ive_low
 = 1,

110 .
	gdesc
 = "aoss",

111 .
	gty≥
 = 
EV_KEY
,

112 .
	gcode
 = 
KEY_WPS_BUTTON
,

113 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
,

114 .
	ggpio
 = 8,

115 .
	ga˘ive_low
 = 1,

117 .
	gdesc
 = "movie_engine",

118 .
	gty≥
 = 
EV_KEY
,

119 .
	gcode
 = 
BTN_6
,

120 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
,

121 .
	ggpio
 = 7,

122 .
	ga˘ive_low
 = 0,

124 .
	gdesc
 = "router_off",

125 .
	gty≥
 = 
EV_KEY
,

126 .
	gcode
 = 
BTN_5
,

127 .
	gdeboun˚_öãrvÆ
 = 
WZRHPG450H_KEYS_DEBOUNCE_INTERVAL
,

128 .
	ggpio
 = 12,

129 .
	ga˘ive_low
 = 0,

134 
__öô
 
	$wzrhpg450h_öô
()

136 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1f051000);

137 
u8
 *
mac
 = (u8 *Ë
ì
 + 2;

139 
	`©h79_ªgi°î_m25p80_mu…i
(&
wzrhpg450h_Êash_d©a
);

141 
	`©h79_ªgi°î_mdio
(0, ~
	`BIT
(0));

142 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

143 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

144 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_1000
;

145 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

146 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(0);

148 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
wzrhpg450h_Àds_gpio
),

149 
wzrhpg450h_Àds_gpio
);

151 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
WZRHPG450H_KEYS_POLL_INTERVAL
,

152 
	`ARRAY_SIZE
(
wzrhpg450h_gpio_keys
),

153 
wzrhpg450h_gpio_keys
);

155 
	`©h79_ªgi°î_ëh
(0);

157 
	`gpio_ªque°_⁄e
(16, 
GPIOF_OUT_INIT_HIGH
 | 
GPIOF_EXPORT_DIR_FIXED
,

159 
	`©h79_ªgi°î_usb
();

161 
	`≠91_pci_öô
(
ì
, 
NULL
);

162 
	`≠9x_pci_gë_wmac_d©a
(0)->
tx_gaö_bufÁlo
 = 
åue
;

163 
	`≠9x_pci_gë_wmac_d©a
(1)->
tx_gaö_bufÁlo
 = 
åue
;

164 
	`≠9x_pci_£tup_wmac_Àds
(0, 
wzrhpg450h_wmac_Àds_gpio
,

165 
	`ARRAY_SIZE
(
wzrhpg450h_wmac_Àds_gpio
));

166 
	}
}

168 
MIPS_MACHINE
(
ATH79_MACH_WZR_HP_G450H
, "WZR-HP-G450H", "Buffalo WZR-HP-G450H",

169 
wzrhpg450h_öô
);

	@linux/ar71xx/files/arch/mips/ath79/mach-z1.c

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/©h9k_∂©f‹m.h
>

15 
	~<löux/¨8216_∂©f‹m.h
>

16 
	~<löux/∂©f‹m/¨934x_nfc.h
>

18 
	~<asm/mach-©h79/©h79.h
>

19 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

21 
	~<löux/Àds-nu801.h
>

22 
	~<löux/fúmw¨e.h
>

23 
	~<löux/pci.h
>

25 
	~"comm⁄.h
"

26 
	~"dev-ëh.h
"

27 
	~"dev-gpio-buâ⁄s.h
"

28 
	~"dev-Àds-gpio.h
"

29 
	~"dev-nfc.h
"

30 
	~"dev-usb.h
"

31 
	~"dev-wmac.h
"

32 
	~"dev-≠9x-pci.h
"

33 
	~"machty≥s.h
"

35 
	#Z1_GPIO_LED_POWER_ORANGE
 17

	)

37 
	#Z1_GPIO_NU801_CKI
 14

	)

38 
	#Z1_GPIO_NU801_SDI
 15

	)

40 
	#Z1_GPIO_XLNA0
 18

	)

41 
	#Z1_GPIO_XLNA1
 19

	)

43 
	#Z1_GPIO_BTN_RESET
 12

	)

44 
	#Z1_KEYS_POLL_INTERVAL
 20

	)

45 
	#Z1_KEYS_DEBOUNCE_INTERVAL
 (3 * 
Z1_KEYS_POLL_INTERVAL
)

	)

47 
	#Z1_ETH_SWITCH_PHY
 0

	)

49 
gpio_Àd
 
	gZ1_Àds_gpio
[] 
	g__öôd©a
 = {

51 .
«me
 = "z1:orange:power",

52 .
	ggpio
 = 
Z1_GPIO_LED_POWER_ORANGE
,

53 .
	ga˘ive_low
 = 1,

57 
gpio_keys_buâ⁄
 
	gZ1_gpio_keys
[] 
	g__öôd©a
 = {

59 .
desc
 = "reset",

60 .
	gty≥
 = 
EV_KEY
,

61 .
	gcode
 = 
KEY_RESTART
,

62 .
	gdeboun˚_öãrvÆ
 = 
Z1_KEYS_DEBOUNCE_INTERVAL
,

63 .
	ggpio
 = 
Z1_GPIO_BTN_RESET
,

64 .
	ga˘ive_low
 = 1,

68 
Àd_nu801_ãm∂©e
 
	gåicﬁ‹_Àd_ãm∂©e
 = {

69 .
devi˚_«me
 = "z1",

70 .
	g«me
 = "tricolor",

71 .
	gnum_Àds
 = 1,

72 .
	gcki
 = 
Z1_GPIO_NU801_CKI
,

73 .
	gsdi
 = 
Z1_GPIO_NU801_SDI
,

74 .
	gÀi
 = -1,

75 .
	gndñay
 = 500,

76 .
	göô_brighäess
 = {

77 
LED_OFF
,

78 
LED_OFF
,

79 
LED_OFF
,

81 .
	gdeÁu…_åiggî
 = "none",

84 
Àd_nu801_∂©f‹m_d©a
 
	gåicﬁ‹_Àd_d©a
 = {

85 .
num_c⁄åﬁÀrs
 = 1,

86 .
	gãm∂©e
 = &
åicﬁ‹_Àd_ãm∂©e
,

89 
∂©f‹m_devi˚
 
	gåicﬁ‹_Àds
 = {

90 .
«me
 = "leds-nu801",

91 .
	gid
 = -1,

92 .
	gdev
.
	g∂©f‹m_d©a
 = &
åicﬁ‹_Àd_d©a
,

95 
¨8327_∑d_cfg
 
	gz1_¨8327_∑d0_cfg
 = {

96 .
mode
 = 
AR8327_PAD_MAC_RGMII
,

97 .
	gtx˛k_dñay_í
 = 
åue
,

98 .
	grx˛k_dñay_í
 = 
åue
,

99 .
	gtx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL1
,

100 .
	grx˛k_dñay_£l
 = 
AR8327_CLK_DELAY_SEL2
,

103 
¨8327_∂©f‹m_d©a
 
	gz1_¨8327_d©a
 = {

104 .
∑d0_cfg
 = &
z1_¨8327_∑d0_cfg
,

105 .
	gp‹t0_cfg
 = {

106 .
f‹˚_lök
 = 1,

107 .
	g•ìd
 = 
AR8327_PORT_SPEED_1000
,

108 .
	gdu∂ex
 = 1,

109 .
	gtx∑u£
 = 1,

110 .
	grx∑u£
 = 1,

114 
mdio_bﬂrd_öfo
 
	gz1_mdio0_öfo
[] = {

116 .
bus_id
 = "ag71xx-mdio.0",

117 .
	gmdio_addr
 = 
Z1_ETH_SWITCH_PHY
,

118 .
	g∂©f‹m_d©a
 = &
z1_¨8327_d©a
,

122 
__öô
 
	$z1_£tup
()

125 
	`©h79_nfc_£t_ecc_mode
(
AR934X_NFC_ECC_SOFT_BCH
);

126 
	`©h79_ªgi°î_nfc
();

129 
	`©h79_£tup_¨934x_ëh_cfg
(
AR934X_ETH_CFG_RGMII_GMAC0
 |

130 
AR934X_ETH_CFG_SW_ONLY_MODE
);

133 
	`©h79_ªgi°î_mdio
(1, 0x0);

134 
	`©h79_ªgi°î_mdio
(0, 0x0);

135 
	`mdiobus_ªgi°î_bﬂrd_öfo
(
z1_mdio0_öfo
,

136 
	`ARRAY_SIZE
(
z1_mdio0_öfo
));

139 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_RGMII
;

140 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(
Z1_ETH_SWITCH_PHY
);

141 
©h79_ëh0_d©a
.
mii_bus_dev
 = &
©h79_mdio0_devi˚
.
dev
;

142 
©h79_ëh0_∂l_d©a
.
∂l_1000
 = 0x06000000;

143 
	`©h79_ªgi°î_ëh
(0);

146 
	`©h79_wmac_£t_ext_ a_gpio
(0, 
Z1_GPIO_XLNA0
);

147 
	`©h79_wmac_£t_ext_ a_gpio
(1, 
Z1_GPIO_XLNA1
);

150 
	`∂©f‹m_devi˚_ªgi°î
(&
åicﬁ‹_Àds
);

151 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
Z1_Àds_gpio
),

152 
Z1_Àds_gpio
);

153 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
Z1_KEYS_POLL_INTERVAL
,

154 
	`ARRAY_SIZE
(
Z1_gpio_keys
),

155 
Z1_gpio_keys
);

158 
	`©h79_ªgi°î_usb
();

161 
	`©h79_ªgi°î_wmac_sim∂e
();

162 
	`≠91_pci_öô_sim∂e
();

163 
	}
}

164 
MIPS_MACHINE
(
ATH79_MACH_Z1
, "Z1", "MîakòZ1", 
z1_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-zbt-we1526.c

13 
	~<löux/gpio.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<asm/mach-©h79/©h79.h
>

17 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

19 
	~"comm⁄.h
"

20 
	~"dev-ëh.h
"

21 
	~"dev-gpio-buâ⁄s.h
"

22 
	~"dev-Àds-gpio.h
"

23 
	~"dev-m25p80.h
"

24 
	~"dev-usb.h
"

25 
	~"dev-wmac.h
"

26 
	~"machty≥s.h
"

28 
	#ZBT_WE1526_GPIO_LED_STATUS
 13

	)

29 
	#ZBT_WE1526_GPIO_LED_LAN1
 16

	)

30 
	#ZBT_WE1526_GPIO_LED_LAN2
 15

	)

31 
	#ZBT_WE1526_GPIO_LED_LAN3
 14

	)

32 
	#ZBT_WE1526_GPIO_LED_LAN4
 11

	)

33 
	#ZBT_WE1526_GPIO_LED_WAN
 4

	)

34 
	#ZBT_WE1526_GPIO_LED_WLAN
 12

	)

36 
	#ZBT_WE1526_GPIO_BTN_RESET
 17

	)

38 
	#ZBT_WE1526_KEYS_POLL_INTERVAL
 20

	)

39 
	#ZBT_WE1526_KEYS_DEBOUNCE_INTERVAL
 \

40 (3 * 
ZBT_WE1526_KEYS_POLL_INTERVAL
)

	)

42 
	#ZBT_WE1526_MAC0_OFFSET
 0x0

	)

43 
	#ZBT_WE1526_MAC1_OFFSET
 0x6

	)

44 
	#ZBT_WE1526_WMAC_CALDATA_OFFSET
 0x1000

	)

46 
gpio_Àd
 
	gzbt_we1526_Àds_gpio
[] 
	g__öôd©a
 = {

48 .
«me
 = "zbt-we1526:green:status",

49 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_STATUS
,

50 .
	ga˘ive_low
 = 1,

53 .
	g«me
 = "zbt-we1526:green:lan1",

54 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_LAN1
,

55 .
	ga˘ive_low
 = 1,

58 .
	g«me
 = "zbt-we1526:green:lan2",

59 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_LAN2
,

60 .
	ga˘ive_low
 = 1,

63 .
	g«me
 = "zbt-we1526:green:lan3",

64 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_LAN3
,

65 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "zbt-we1526:green:lan4",

69 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_LAN4
,

70 .
	ga˘ive_low
 = 1,

73 .
	g«me
 = "zbt-we1526:green:wan",

74 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_WAN
,

75 .
	ga˘ive_low
 = 1,

78 .
	g«me
 = "zbt-we1526:green:wlan",

79 .
	ggpio
 = 
ZBT_WE1526_GPIO_LED_WLAN
,

80 .
	ga˘ive_low
 = 1,

84 
gpio_keys_buâ⁄
 
	gzbt_we1526_gpio_keys
[] 
	g__öôd©a
 = {

86 .
desc
 = "reset",

87 .
	gty≥
 = 
EV_KEY
,

88 .
	gcode
 = 
KEY_RESTART
,

89 .
	gdeboun˚_öãrvÆ
 = 
ZBT_WE1526_KEYS_DEBOUNCE_INTERVAL
,

90 .
	ggpio
 = 
ZBT_WE1526_GPIO_BTN_RESET
,

91 .
	ga˘ive_low
 = 1,

95 
__öô
 
	$zbt_we1526_gpio_£tup
()

98 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR934X_GPIO_FUNC_CLK_OBS4_EN
);

99 
	`©h79_gpio_ouçut_£À˘
(
ZBT_WE1526_GPIO_LED_WAN
, 0);

101 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_STATUS
, 
åue
);

102 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_LAN1
, 
åue
);

103 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_LAN2
, 
åue
);

104 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_LAN3
, 
åue
);

105 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_LAN4
, 
åue
);

106 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_WAN
, 
åue
);

107 
	`©h79_gpio_dúe˘i⁄_£À˘
(
ZBT_WE1526_GPIO_LED_WLAN
, 
åue
);

109 
	`©h79_ªgi°î_Àds_gpio
(-1, 
	`ARRAY_SIZE
(
zbt_we1526_Àds_gpio
),

110 
zbt_we1526_Àds_gpio
);

112 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ZBT_WE1526_KEYS_POLL_INTERVAL
,

113 
	`ARRAY_SIZE
(
zbt_we1526_gpio_keys
),

114 
zbt_we1526_gpio_keys
);

115 
	}
}

117 
__öô
 
	$zbt_we1526_£tup
()

119 
u8
 *
¨t
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff0000);

121 
	`©h79_ªgi°î_m25p80
(
NULL
);

123 
	`zbt_we1526_gpio_£tup
();

125 
	`©h79_£tup_¨933x_phy4_swôch
(
Ál£
, false);

127 
	`©h79_ªgi°î_mdio
(0, 0x0);

130 
©h79_ëh1_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

131 
©h79_ëh1_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_GMII
;

132 
©h79_swôch_d©a
.
phy_pﬁl_mask
 |
	`BIT
(4);

133 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
,

134 
¨t
 + 
ZBT_WE1526_MAC0_OFFSET
, 0);

135 
	`©h79_ªgi°î_ëh
(1);

138 
©h79_swôch_d©a
.
phy4_mii_í
 = 1;

139 
©h79_ëh0_d©a
.
du∂ex
 = 
DUPLEX_FULL
;

140 
©h79_ëh0_d©a
.
phy_if_mode
 = 
PHY_INTERFACE_MODE_MII
;

141 
©h79_ëh0_d©a
.
phy_mask
 = 
	`BIT
(4);

142 
©h79_ëh0_d©a
.
•ìd
 = 
SPEED_100
;

143 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
,

144 
¨t
 + 
ZBT_WE1526_MAC1_OFFSET
, 0);

145 
	`©h79_ªgi°î_ëh
(0);

147 
	`©h79_ªgi°î_wmac
(
¨t
 + 
ZBT_WE1526_WMAC_CALDATA_OFFSET
, 
NULL
);

149 
	`©h79_ªgi°î_usb
();

150 
	}
}

152 
MIPS_MACHINE
(
ATH79_MACH_ZBT_WE1526
, "ZBT-WE1526", "Zbtlink ZBT-WE1526",

153 
zbt_we1526_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/mach-zcn-1523h.c

11 
	~<asm/mach-©h79/©h79.h
>

12 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

14 
	~"comm⁄.h
"

15 
	~"dev-ëh.h
"

16 
	~"dev-m25p80.h
"

17 
	~"dev-≠9x-pci.h
"

18 
	~"dev-gpio-buâ⁄s.h
"

19 
	~"dev-Àds-gpio.h
"

20 
	~"machty≥s.h
"

22 
	#ZCN_1523H_GPIO_BTN_RESET
 0

	)

23 
	#ZCN_1523H_GPIO_LED_INIT
 11

	)

24 
	#ZCN_1523H_GPIO_LED_LAN1
 17

	)

26 
	#ZCN_1523H_2_GPIO_LED_WEAK
 13

	)

27 
	#ZCN_1523H_2_GPIO_LED_MEDIUM
 14

	)

28 
	#ZCN_1523H_2_GPIO_LED_STRONG
 15

	)

30 
	#ZCN_1523H_5_GPIO_LAN2_POWER
 1

	)

31 
	#ZCN_1523H_5_GPIO_LED_LAN2
 13

	)

32 
	#ZCN_1523H_5_GPIO_LED_WEAK
 14

	)

33 
	#ZCN_1523H_5_GPIO_LED_MEDIUM
 15

	)

34 
	#ZCN_1523H_5_GPIO_LED_STRONG
 16

	)

36 
	#ZCN_1523H_KEYS_POLL_INTERVAL
 20

	)

37 
	#ZCN_1523H_KEYS_DEBOUNCE_INTERVAL
 (3 * 
ZCN_1523H_KEYS_POLL_INTERVAL
)

	)

39 
gpio_keys_buâ⁄
 
	gz˙_1523h_gpio_keys
[] 
	g__öôd©a
 = {

41 .
desc
 = "reset",

42 .
	gty≥
 = 
EV_KEY
,

43 .
	gcode
 = 
KEY_RESTART
,

44 .
	gdeboun˚_öãrvÆ
 = 
ZCN_1523H_KEYS_DEBOUNCE_INTERVAL
,

45 .
	ggpio
 = 
ZCN_1523H_GPIO_BTN_RESET
,

46 .
	ga˘ive_low
 = 1,

50 
gpio_Àd
 
	gz˙_1523h_Àds_gpio
[] 
	g__öôd©a
 = {

52 .
«me
 = "zcn-1523h:amber:init",

53 .
	ggpio
 = 
ZCN_1523H_GPIO_LED_INIT
,

54 .
	ga˘ive_low
 = 1,

56 .
	g«me
 = "zcn-1523h:green:lan1",

57 .
	ggpio
 = 
ZCN_1523H_GPIO_LED_LAN1
,

58 .
	ga˘ive_low
 = 1,

62 
gpio_Àd
 
	gz˙_1523h_2_Àds_gpio
[] 
	g__öôd©a
 = {

64 .
«me
 = "zcn-1523h:red:weak",

65 .
	ggpio
 = 
ZCN_1523H_2_GPIO_LED_WEAK
,

66 .
	ga˘ive_low
 = 1,

68 .
	g«me
 = "zcn-1523h:amber:medium",

69 .
	ggpio
 = 
ZCN_1523H_2_GPIO_LED_MEDIUM
,

70 .
	ga˘ive_low
 = 1,

72 .
	g«me
 = "zcn-1523h:green:strong",

73 .
	ggpio
 = 
ZCN_1523H_2_GPIO_LED_STRONG
,

74 .
	ga˘ive_low
 = 1,

78 
gpio_Àd
 
	gz˙_1523h_5_Àds_gpio
[] 
	g__öôd©a
 = {

80 .
«me
 = "zcn-1523h:red:weak",

81 .
	ggpio
 = 
ZCN_1523H_5_GPIO_LED_WEAK
,

82 .
	ga˘ive_low
 = 1,

84 .
	g«me
 = "zcn-1523h:amber:medium",

85 .
	ggpio
 = 
ZCN_1523H_5_GPIO_LED_MEDIUM
,

86 .
	ga˘ive_low
 = 1,

88 .
	g«me
 = "zcn-1523h:green:strong",

89 .
	ggpio
 = 
ZCN_1523H_5_GPIO_LED_STRONG
,

90 .
	ga˘ive_low
 = 1,

92 .
	g«me
 = "zcn-1523h:green:lan2",

93 .
	ggpio
 = 
ZCN_1523H_5_GPIO_LED_LAN2
,

94 .
	ga˘ive_low
 = 1,

98 
__öô
 
	$z˙_1523h_gíîic_£tup
()

100 
u8
 *
mac
 = (u8 *Ë
	`KSEG1ADDR
(0x1f7e0004);

101 
u8
 *
ì
 = (u8 *Ë
	`KSEG1ADDR
(0x1fff1000);

103 
	`©h79_gpio_fun˘i⁄_dißbÀ
(
AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 |

104 
AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 |

105 
AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 |

106 
AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 |

107 
AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
);

109 
	`©h79_ªgi°î_m25p80
(
NULL
);

111 
	`©h79_ªgi°î_Àds_gpio
(0, 
	`ARRAY_SIZE
(
z˙_1523h_Àds_gpio
),

112 
z˙_1523h_Àds_gpio
);

114 
	`©h79_ªgi°î_gpio_keys_pﬁÀd
(-1, 
ZCN_1523H_KEYS_POLL_INTERVAL
,

115 
	`ARRAY_SIZE
(
z˙_1523h_gpio_keys
),

116 
z˙_1523h_gpio_keys
);

118 
	`≠91_pci_öô
(
ì
, 
mac
);

120 
	`©h79_öô_mac
(
©h79_ëh0_d©a
.
mac_addr
, 
mac
, 0);

121 
	`©h79_öô_mac
(
©h79_ëh1_d©a
.
mac_addr
, 
mac
, 1);

123 
	`©h79_ªgi°î_mdio
(0, 0x0);

126 
	`©h79_ªgi°î_ëh
(0);

127 
	}
}

129 
__öô
 
	$z˙_1523h_2_£tup
()

131 
	`z˙_1523h_gíîic_£tup
();

132 
	`≠9x_pci_£tup_wmac_gpio
(0, 
	`BIT
(9), 0);

134 
	`©h79_ªgi°î_Àds_gpio
(1, 
	`ARRAY_SIZE
(
z˙_1523h_2_Àds_gpio
),

135 
z˙_1523h_2_Àds_gpio
);

136 
	}
}

138 
MIPS_MACHINE
(
ATH79_MACH_ZCN_1523H_2
, "ZCN-1523H-2", "Zcomax ZCN-1523H-2",

139 
z˙_1523h_2_£tup
);

141 
__öô
 
	$z˙_1523h_5_£tup
()

143 
	`z˙_1523h_gíîic_£tup
();

144 
	`≠9x_pci_£tup_wmac_gpio
(0, 
	`BIT
(8), 0);

146 
	`©h79_ªgi°î_Àds_gpio
(1, 
	`ARRAY_SIZE
(
z˙_1523h_5_Àds_gpio
),

147 
z˙_1523h_5_Àds_gpio
);

150 
	`©h79_ªgi°î_ëh
(1);

151 
	}
}

153 
MIPS_MACHINE
(
ATH79_MACH_ZCN_1523H_5
, "ZCN-1523H-5", "Zcomax ZCN-1523H-5",

154 
z˙_1523h_5_£tup
);

	@linux/ar71xx/files/arch/mips/ath79/machtypes.h

12 #i‚de‡
_ATH79_MACHTYPE_H


13 
	#_ATH79_MACHTYPE_H


	)

15 
	~<asm/mùs_machöe.h
>

17 
	e©h79_mach_ty≥
 {

18 
	mATH79_MACH_GENERIC_OF
 = -1,

19 
	mATH79_MACH_GENERIC
 = 0,

20 
	mATH79_MACH_A40
,

21 
	mATH79_MACH_A60
,

22 
	mATH79_MACH_WI2A_AC200I
,

23 
	mATH79_MACH_ALFA_AP120C
,

24 
	mATH79_MACH_ALFA_AP96
,

25 
	mATH79_MACH_ALFA_NX
,

26 
	mATH79_MACH_ALL0258N
,

27 
	mATH79_MACH_ALL0305
,

28 
	mATH79_MACH_ALL0315N
,

29 
	mATH79_MACH_ANTMINER_S1
,

30 
	mATH79_MACH_ANTMINER_S3
,

31 
	mATH79_MACH_ANTROUTER_R1
,

32 
	mATH79_MACH_AP121
,

33 
	mATH79_MACH_AP121_MINI
,

34 
	mATH79_MACH_AP121F
,

35 
	mATH79_MACH_AP132
,

36 
	mATH79_MACH_AP135_020
,

37 
	mATH79_MACH_AP136_010
,

38 
	mATH79_MACH_AP136_020
,

39 
	mATH79_MACH_AP143
,

40 
	mATH79_MACH_AP147_010
,

41 
	mATH79_MACH_AP152
,

42 
	mATH79_MACH_AP531B0
,

43 
	mATH79_MACH_AP90Q
,

44 
	mATH79_MACH_AP91_5G
,

45 
	mATH79_MACH_AP96
,

46 
	mATH79_MACH_ARCHER_C25_V1
,

47 
	mATH79_MACH_ARCHER_C5
,

48 
	mATH79_MACH_ARCHER_C58_V1
,

49 
	mATH79_MACH_ARCHER_C59_V1
,

50 
	mATH79_MACH_ARCHER_C59_V2
,

51 
	mATH79_MACH_ARCHER_C60_V1
,

52 
	mATH79_MACH_ARCHER_C60_V2
,

53 
	mATH79_MACH_ARCHER_C7
,

54 
	mATH79_MACH_ARCHER_C7_V2
,

55 
	mATH79_MACH_ARCHER_C7_V4
,

56 
	mATH79_MACH_ARCHER_C7_V5
,

57 
	mATH79_MACH_ARDUINO_YUN
,

58 
	mATH79_MACH_AW_NR580
,

59 
	mATH79_MACH_BHR_4GRV2
,

60 
	mATH79_MACH_BHU_BXU2000N2_A1
,

61 
	mATH79_MACH_BSB
,

62 
	mATH79_MACH_C55
,

63 
	mATH79_MACH_C60
,

64 
	mATH79_MACH_CAP324
,

65 
	mATH79_MACH_CAP4200AG
,

66 
	mATH79_MACH_CARAMBOLA2
,

67 
	mATH79_MACH_CF_E316N_V2
,

68 
	mATH79_MACH_CF_E320N_V2
,

69 
	mATH79_MACH_CF_E355AC
,

70 
	mATH79_MACH_CF_E355AC_V2
,

71 
	mATH79_MACH_CF_E375AC
,

72 
	mATH79_MACH_CF_E380AC_V1
,

73 
	mATH79_MACH_CF_E380AC_V2
,

74 
	mATH79_MACH_CF_E385AC
,

75 
	mATH79_MACH_CF_E520N
,

76 
	mATH79_MACH_CF_E530N
,

77 
	mATH79_MACH_CPE210
,

78 
	mATH79_MACH_CPE210_V2
,

79 
	mATH79_MACH_CPE505N
,

80 
	mATH79_MACH_CPE510
,

81 
	mATH79_MACH_CPE830
,

82 
	mATH79_MACH_CPE870
,

83 
	mATH79_MACH_CR3000
,

84 
	mATH79_MACH_CR5000
,

85 
	mATH79_MACH_DAP_1330_A1
,

86 
	mATH79_MACH_DAP_2695_A1
,

87 
	mATH79_MACH_DB120
,

88 
	mATH79_MACH_DGL_5500_A1
,

89 
	mATH79_MACH_DHP_1565_A1
,

90 
	mATH79_MACH_DIR_505_A1
,

91 
	mATH79_MACH_DIR_600_A1
,

92 
	mATH79_MACH_DIR_615_C1
,

93 
	mATH79_MACH_DIR_615_E1
,

94 
	mATH79_MACH_DIR_615_E4
,

95 
	mATH79_MACH_DIR_615_I1
,

96 
	mATH79_MACH_DIR_825_B1
,

97 
	mATH79_MACH_DIR_825_C1
,

98 
	mATH79_MACH_DIR_835_A1
,

99 
	mATH79_MACH_DIR_869_A1
,

100 
	mATH79_MACH_DLAN_HOTSPOT
,

101 
	mATH79_MACH_DLAN_PRO_1200_AC
,

102 
	mATH79_MACH_DLAN_PRO_500_WP
,

103 
	mATH79_MACH_DOMYWIFI_DW33D
,

104 
	mATH79_MACH_DR342
,

105 
	mATH79_MACH_DR344
,

106 
	mATH79_MACH_DR531
,

107 
	mATH79_MACH_DRAGINO2
,

108 
	mATH79_MACH_E1700AC_V2
,

109 
	mATH79_MACH_E558_V2
,

110 
	mATH79_MACH_E600G_V2
,

111 
	mATH79_MACH_E600GAC_V2
,

112 
	mATH79_MACH_E750A_V4
,

113 
	mATH79_MACH_E750G_V8
,

114 
	mATH79_MACH_EAP120
,

115 
	mATH79_MACH_EAP300V2
,

116 
	mATH79_MACH_EAP7660D
,

117 
	mATH79_MACH_EBR_2310_C1
,

118 
	mATH79_MACH_EL_M150
,

119 
	mATH79_MACH_EL_MINI
,

120 
	mATH79_MACH_ENS202EXT
,

121 
	mATH79_MACH_EPG5000
,

122 
	mATH79_MACH_ESR1750
,

123 
	mATH79_MACH_ESR900
,

124 
	mATH79_MACH_EW_BALIN
,

125 
	mATH79_MACH_EW_DORIN
,

126 
	mATH79_MACH_EW_DORIN_ROUTER
,

127 
	mATH79_MACH_F9K1115V2
,

128 
	mATH79_MACH_FRITZ300E
,

129 
	mATH79_MACH_FRITZ4020
,

130 
	mATH79_MACH_FRITZ450E
,

131 
	mATH79_MACH_GL_AR150
,

132 
	mATH79_MACH_GL_AR300
,

133 
	mATH79_MACH_GL_AR300M
,

134 
	mATH79_MACH_GL_AR750
,

135 
	mATH79_MACH_GL_AR750S
,

136 
	mATH79_MACH_GL_DOMINO
,

137 
	mATH79_MACH_GL_INET
,

138 
	mATH79_MACH_GL_MIFI
,

139 
	mATH79_MACH_GL_USB150
,

140 
	mATH79_MACH_GS_MINIBOX_V1
,

141 
	mATH79_MACH_GS_MINIBOX_V32
,

142 
	mATH79_MACH_GS_OOLITE_V1
,

143 
	mATH79_MACH_GS_OOLITE_V5_2
,

144 
	mATH79_MACH_GS_OOLITE_V5_2_DEV
,

145 
	mATH79_MACH_HIVEAP_121
,

146 
	mATH79_MACH_HIWIFI_HC6361
,

147 
	mATH79_MACH_HORNET_UB
,

148 
	mATH79_MACH_JA76PF
,

149 
	mATH79_MACH_JA76PF2
,

150 
	mATH79_MACH_JWAP003
,

151 
	mATH79_MACH_JWAP230
,

152 
	mATH79_MACH_KOALA
,

153 
	mATH79_MACH_LAN_TURTLE
,

154 
	mATH79_MACH_LIMA
,

155 
	mATH79_MACH_MC_MAC1200R
,

156 
	mATH79_MACH_MR12
,

157 
	mATH79_MACH_MR16
,

158 
	mATH79_MACH_MR1750
,

159 
	mATH79_MACH_MR1750V2
,

160 
	mATH79_MACH_MR18
,

161 
	mATH79_MACH_MR600
,

162 
	mATH79_MACH_MR600V2
,

163 
	mATH79_MACH_MR900
,

164 
	mATH79_MACH_MR900v2
,

165 
	mATH79_MACH_MYNET_N600
,

166 
	mATH79_MACH_MYNET_N750
,

167 
	mATH79_MACH_MYNET_REXT
,

168 
	mATH79_MACH_MZK_W04NU
,

169 
	mATH79_MACH_MZK_W300NH
,

170 
	mATH79_MACH_N5Q
,

171 
	mATH79_MACH_NBG460N
,

172 
	mATH79_MACH_NBG6616
,

173 
	mATH79_MACH_NBG6716
,

174 
	mATH79_MACH_OM2P
,

175 
	mATH79_MACH_OM2Pv2
,

176 
	mATH79_MACH_OM2Pv4
,

177 
	mATH79_MACH_OM2P_HS
,

178 
	mATH79_MACH_OM2P_HSv2
,

179 
	mATH79_MACH_OM2P_HSv3
,

180 
	mATH79_MACH_OM2P_HSv4
,

181 
	mATH79_MACH_OM2P_LC
,

182 
	mATH79_MACH_OM5P
,

183 
	mATH79_MACH_OM5P_AC
,

184 
	mATH79_MACH_OM5P_ACv2
,

185 
	mATH79_MACH_OM5P_AN
,

186 
	mATH79_MACH_OMY_G1
,

187 
	mATH79_MACH_OMY_X1
,

188 
	mATH79_MACH_ONION_OMEGA
,

189 
	mATH79_MACH_PACKET_SQUIRREL
,

190 
	mATH79_MACH_PB42
,

191 
	mATH79_MACH_PB44
,

192 
	mATH79_MACH_PQI_AIR_PEN
,

193 
	mATH79_MACH_QIHOO_C301
,

194 
	mATH79_MACH_R36A
,

195 
	mATH79_MACH_R602N
,

196 
	mATH79_MACH_R6100
,

197 
	mATH79_MACH_RAMBUTAN
,

198 
	mATH79_MACH_RB_2011G
,

199 
	mATH79_MACH_RB_2011L
,

200 
	mATH79_MACH_RB_2011R5
,

201 
	mATH79_MACH_RB_2011US
,

202 
	mATH79_MACH_RB_411
,

203 
	mATH79_MACH_RB_411U
,

204 
	mATH79_MACH_RB_433
,

205 
	mATH79_MACH_RB_433U
,

206 
	mATH79_MACH_RB_435G
,

207 
	mATH79_MACH_RB_450
,

208 
	mATH79_MACH_RB_450G
,

209 
	mATH79_MACH_RB_493
,

210 
	mATH79_MACH_RB_493G
,

211 
	mATH79_MACH_RB_711GR100
,

212 
	mATH79_MACH_RB_750
,

213 
	mATH79_MACH_RB_750G_R3
,

214 
	mATH79_MACH_RB_750UPR2
,

215 
	mATH79_MACH_RB_751
,

216 
	mATH79_MACH_RB_751G
,

217 
	mATH79_MACH_RB_911L
,

218 
	mATH79_MACH_RB_922GS
,

219 
	mATH79_MACH_RB_931
,

220 
	mATH79_MACH_RB_941
,

221 
	mATH79_MACH_RB_951G
,

222 
	mATH79_MACH_RB_951U
,

223 
	mATH79_MACH_RB_952
,

224 
	mATH79_MACH_RB_962
,

225 
	mATH79_MACH_RB_CAP
,

226 
	mATH79_MACH_RB_LHG5
,

227 
	mATH79_MACH_RB_MAP
,

228 
	mATH79_MACH_RB_MAPL
,

229 
	mATH79_MACH_RB_WAP
,

230 
	mATH79_MACH_RB_WAPR
,

231 
	mATH79_MACH_RB_WAPAC
,

232 
	mATH79_MACH_RB_SXTLITE2ND
,

233 
	mATH79_MACH_RB_SXTLITE5ND
,

234 
	mATH79_MACH_RE355
,

235 
	mATH79_MACH_RE450
,

236 
	mATH79_MACH_RME_EG200
,

237 
	mATH79_MACH_RUT9XX
,

238 
	mATH79_MACH_RW2458N
,

239 
	mATH79_MACH_SC1750
,

240 
	mATH79_MACH_SC300M
,

241 
	mATH79_MACH_SC450
,

242 
	mATH79_MACH_SMART_300
,

243 
	mATH79_MACH_SOM9331
,

244 
	mATH79_MACH_SR3200
,

245 
	mATH79_MACH_T830
,

246 
	mATH79_MACH_TELLSTICK_ZNET_LITE
,

247 
	mATH79_MACH_TEW_632BRP
,

248 
	mATH79_MACH_TEW_673GRU
,

249 
	mATH79_MACH_TEW_712BR
,

250 
	mATH79_MACH_TEW_732BR
,

251 
	mATH79_MACH_TEW_823DRU
,

252 
	mATH79_MACH_TL_MR10U
,

253 
	mATH79_MACH_TL_MR11U
,

254 
	mATH79_MACH_TL_MR13U
,

255 
	mATH79_MACH_TL_MR3020
,

256 
	mATH79_MACH_TL_MR3040
,

257 
	mATH79_MACH_TL_MR3040_V2
,

258 
	mATH79_MACH_TL_MR3220
,

259 
	mATH79_MACH_TL_MR3220_V2
,

260 
	mATH79_MACH_TL_MR3420
,

261 
	mATH79_MACH_TL_MR3420_V2
,

262 
	mATH79_MACH_TL_MR6400
,

263 
	mATH79_MACH_TL_WA701ND_V2
,

264 
	mATH79_MACH_TL_WA7210N_V2
,

265 
	mATH79_MACH_TL_WA750RE
,

266 
	mATH79_MACH_TL_WA7510N_V1
,

267 
	mATH79_MACH_TL_WA801ND_V2
,

268 
	mATH79_MACH_TL_WA801ND_V3
,

269 
	mATH79_MACH_TL_WA830RE_V2
,

270 
	mATH79_MACH_TL_WA850RE
,

271 
	mATH79_MACH_TL_WA850RE_V2
,

272 
	mATH79_MACH_TL_WA855RE_V1
,

273 
	mATH79_MACH_TL_WA860RE
,

274 
	mATH79_MACH_TL_WA901ND
,

275 
	mATH79_MACH_TL_WA901ND_V2
,

276 
	mATH79_MACH_TL_WA901ND_V3
,

277 
	mATH79_MACH_TL_WA901ND_V4
,

278 
	mATH79_MACH_TL_WA901ND_V5
,

279 
	mATH79_MACH_TL_WDR3320_V2
,

280 
	mATH79_MACH_TL_WDR3500
,

281 
	mATH79_MACH_TL_WDR4300
,

282 
	mATH79_MACH_TL_WDR4900_V2
,

283 
	mATH79_MACH_TL_WDR6500_V2
,

284 
	mATH79_MACH_TL_WPA8630
,

285 
	mATH79_MACH_TL_WR1041N_V2
,

286 
	mATH79_MACH_TL_WR1043N_V5
,

287 
	mATH79_MACH_TL_WR1043ND
,

288 
	mATH79_MACH_TL_WR1043ND_V2
,

289 
	mATH79_MACH_TL_WR1043ND_V4
,

290 
	mATH79_MACH_TL_WR2543N
,

291 
	mATH79_MACH_TL_WR703N
,

292 
	mATH79_MACH_TL_WR710N
,

293 
	mATH79_MACH_TL_WR720N_V3
,

294 
	mATH79_MACH_TL_WR740N_V6
,

295 
	mATH79_MACH_TL_WR741ND
,

296 
	mATH79_MACH_TL_WR741ND_V4
,

297 
	mATH79_MACH_TL_WR802N_V1
,

298 
	mATH79_MACH_TL_WR802N_V2
,

299 
	mATH79_MACH_TL_WR810N
,

300 
	mATH79_MACH_TL_WR810N_V2
,

301 
	mATH79_MACH_TL_WR840N_V2
,

302 
	mATH79_MACH_TL_WR840N_V3
,

303 
	mATH79_MACH_TL_WR841N_V1
,

304 
	mATH79_MACH_TL_WR841N_V11
,

305 
	mATH79_MACH_TL_WR841N_V7
,

306 
	mATH79_MACH_TL_WR841N_V8
,

307 
	mATH79_MACH_TL_WR841N_V9
,

308 
	mATH79_MACH_TL_WR842N_V2
,

309 
	mATH79_MACH_TL_WR842N_V3
,

310 
	mATH79_MACH_TL_WR902AC_V1
,

311 
	mATH79_MACH_TL_WR941ND
,

312 
	mATH79_MACH_TL_WR941ND_V5
,

313 
	mATH79_MACH_TL_WR941ND_V6
,

314 
	mATH79_MACH_TL_WR940N_V4
,

315 
	mATH79_MACH_TL_WR940N_V6
,

316 
	mATH79_MACH_TL_WR942N_V1
,

317 
	mATH79_MACH_TS_D084
,

318 
	mATH79_MACH_TUBE2H
,

319 
	mATH79_MACH_UBNT_AIRGW
,

320 
	mATH79_MACH_UBNT_AIRGWP
,

321 
	mATH79_MACH_UBNT_AIRROUTER
,

322 
	mATH79_MACH_UBNT_BULLET_M
,

323 
	mATH79_MACH_UBNT_LBE_M5
,

324 
	mATH79_MACH_UBNT_LOCO_M_XW
,

325 
	mATH79_MACH_UBNT_LSSR71
,

326 
	mATH79_MACH_UBNT_LSX
,

327 
	mATH79_MACH_UBNT_NANO_M
,

328 
	mATH79_MACH_UBNT_NANO_M_XW
,

329 
	mATH79_MACH_UBNT_ROCKET_M
,

330 
	mATH79_MACH_UBNT_ROCKET_M_TI
,

331 
	mATH79_MACH_UBNT_ROCKET_M_XW
,

332 
	mATH79_MACH_UBNT_RS
,

333 
	mATH79_MACH_UBNT_RSPRO
,

334 
	mATH79_MACH_UBNT_UAP_PRO
,

335 
	mATH79_MACH_UBNT_UNIFI
,

336 
	mATH79_MACH_UBNT_UNIFIAC_LITE
,

337 
	mATH79_MACH_UBNT_UNIFIAC_PRO
,

338 
	mATH79_MACH_UBNT_UNIFI_OUTDOOR
,

339 
	mATH79_MACH_UBNT_UNIFI_OUTDOOR_PLUS
,

340 
	mATH79_MACH_UBNT_XM
,

341 
	mATH79_MACH_WAM250
,

342 
	mATH79_MACH_WBS210
,

343 
	mATH79_MACH_WBS510
,

344 
	mATH79_MACH_WEIO
,

345 
	mATH79_MACH_WHR_G301N
,

346 
	mATH79_MACH_WHR_HP_G300N
,

347 
	mATH79_MACH_WHR_HP_GN
,

348 
	mATH79_MACH_WIFI_PINEAPPLE_NANO
,

349 
	mATH79_MACH_WLAE_AG300N
,

350 
	mATH79_MACH_WLR8100
,

351 
	mATH79_MACH_WNDAP360
,

352 
	mATH79_MACH_WNDR3700
,

353 
	mATH79_MACH_WNDR3700_V4
,

354 
	mATH79_MACH_WNDR4300
,

355 
	mATH79_MACH_WNR1000_V2
,

356 
	mATH79_MACH_WNR2000
,

357 
	mATH79_MACH_WNR2000_V3
,

358 
	mATH79_MACH_WNR2000_V4
,

359 
	mATH79_MACH_WNR2200
,

360 
	mATH79_MACH_WNR612_V2
,

361 
	mATH79_MACH_WP543
,

362 
	mATH79_MACH_WPE72
,

363 
	mATH79_MACH_WPJ342
,

364 
	mATH79_MACH_WPJ344
,

365 
	mATH79_MACH_WPJ531
,

366 
	mATH79_MACH_WPJ558
,

367 
	mATH79_MACH_WPJ563
,

368 
	mATH79_MACH_WPN824N
,

369 
	mATH79_MACH_WRT160NL
,

370 
	mATH79_MACH_WRT400N
,

371 
	mATH79_MACH_WRTNODE2Q
,

372 
	mATH79_MACH_WZR_450HP2
,

373 
	mATH79_MACH_WZR_HP_AG300H
,

374 
	mATH79_MACH_WZR_HP_G300NH
,

375 
	mATH79_MACH_WZR_HP_G300NH2
,

376 
	mATH79_MACH_WZR_HP_G450H
,

377 
	mATH79_MACH_XD3200
,

378 
	mATH79_MACH_Z1
,

379 
	mATH79_MACH_ZBT_WE1526
,

380 
	mATH79_MACH_ZCN_1523H_2
,

381 
	mATH79_MACH_ZCN_1523H_5
,

	@linux/ar71xx/files/arch/mips/ath79/nvram.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/vmÆloc.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/°rög.h
>

16 
	~<löux/ëhîdevi˚.h
>

18 
	~"nvøm.h
"

20 *
	$©h79_nvøm_föd_v¨
(c⁄° *
«me
, c⁄° *
buf
, 
buf_Àn
)

22 
Àn
 = 
	`°æí
(
«me
);

23 *
cur
, *
œ°
;

25 i‡(
buf_Àn
 =0 || 
Àn
 == 0)

26  
NULL
;

28 i‡(
buf_Àn
 < 
Àn
)

29  
NULL
;

31 i‡(
Àn
 == 1)

32  
	`memchr
(
buf
, (Ë*
«me
, 
buf_Àn
);

34 
œ°
 = (*Ë
buf
 + 
buf_Àn
 - 
Àn
;

35 
cur
 = (*Ë
buf
; cu∏<
œ°
; cur++)

36 i‡(
cur
[0] =
«me
[0] && 
	`memcmp
(cur,Çame, 
Àn
) == 0)

37  
cur
 + 
Àn
;

39  
NULL
;

40 
	}
}

42 
	$©h79_nvøm_∑r£_mac_addr
(c⁄° *
nvøm
, 
nvøm_Àn
,

43 c⁄° *
«me
, *
mac
)

45 *
buf
;

46 *
mac_°r
;

47 
ªt
;

48 
t
;

50 
buf
 = 
	`vmÆloc
(
nvøm_Àn
);

51 i‡(!
buf
)

52  -
ENOMEM
;

54 
	`mem˝y
(
buf
, 
nvøm
, 
nvøm_Àn
);

55 
buf
[
nvøm_Àn
 - 1] = '\0';

57 
mac_°r
 = 
	`©h79_nvøm_föd_v¨
(
«me
, 
buf
, 
nvøm_Àn
);

58 i‡(!
mac_°r
) {

59 
ªt
 = -
EINVAL
;

60 
‰ì
;

63 i‡(
	`°æí
(
mac_°r
) == 19 && mac_str[0] == '"' && mac_str[18] == '"') {

64 
mac_°r
[18] = 0;

65 
mac_°r
++;

68 
t
 = 
	`ssˇnf
(
mac_°r
, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",

69 &
mac
[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);

71 i‡(
t
 !
ETH_ALEN
)

72 
t
 = 
	`ssˇnf
(
mac_°r
, "%02hhx-%02hhx-%02hhx-%02hhx-%02hhx-%02hhx",

73 &
mac
[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);

75 i‡(
t
 !
ETH_ALEN
) {

76 
ªt
 = -
EINVAL
;

77 
‰ì
;

80 
ªt
 = 0;

82 
‰ì
:

83 
	`v‰ì
(
buf
);

84  
ªt
;

85 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/nvram.h

11 #i‚de‡
_ATH79_NVRAM_H


12 
	#_ATH79_NVRAM_H


	)

14 *
©h79_nvøm_föd_v¨
(c⁄° *
«me
, c⁄° *
buf
,

15 
buf_Àn
);

16 
©h79_nvøm_∑r£_mac_addr
(c⁄° *
nvøm
, 
nvøm_Àn
,

17 c⁄° *
«me
, *
mac
);

	@linux/ar71xx/files/arch/mips/ath79/pci-ath9k-fixup.c

11 
	~<löux/pci.h
>

12 
	~<löux/dñay.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	s©h9k_fixup
 {

18 
u16
 *
	mˇl_d©a
;

19 
	m¶Ÿ
;

22 
	g©h9k_num_fixups
;

23 
©h9k_fixup
 
	g©h9k_fixups
[2];

25 
	$©h9k_pci_fixup
(
pci_dev
 *
dev
)

27 
__iomem
 *
mem
;

28 
u16
 *
ˇl_d©a
 = 
NULL
;

29 
u16
 
cmd
;

30 
u32
 
b¨0
;

31 
u32
 
vÆ
;

32 
i
;

34 
i
 = 0; i < 
©h9k_num_fixups
; i++) {

35 i‡(
©h9k_fixups
[
i
].
ˇl_d©a
 =
NULL
)

38 i‡(
©h9k_fixups
[
i
].
¶Ÿ
 !
	`PCI_SLOT
(
dev
->
dev‚
))

41 
ˇl_d©a
 = 
©h9k_fixups
[
i
].cal_data;

45 i‡(
ˇl_d©a
 =
NULL
)

48 i‡(*
ˇl_d©a
 != 0xa55a) {

49 
	`¥_îr
("pcò%s: invÆid cÆibøti⁄ d©a\n", 
	`pci_«me
(
dev
));

53 
	`¥_öfo
("pcò%s: fixu∞devi˚ c⁄figuøti⁄\n", 
	`pci_«me
(
dev
));

55 
mem
 = 
	`i‹em≠
(
AR71XX_PCI_MEM_BASE
, 0x10000);

56 i‡(!
mem
) {

57 
	`¥_îr
("pcò%s: i‹em≠Éº‹\n", 
	`pci_«me
(
dev
));

61 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, &
b¨0
);

63 
©h79_soc
) {

64 
ATH79_SOC_AR7161
:

65 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
,

66 
AR71XX_PCI_MEM_BASE
);

68 
ATH79_SOC_AR7240
:

69 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0xffff);

72 
ATH79_SOC_AR7241
:

73 
ATH79_SOC_AR7242
:

74 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0x1000ffff);

76 
ATH79_SOC_AR9344
:

77 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0x1000ffff);

81 
	`BUG
();

84 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, &
cmd
);

85 
cmd
 |
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
;

86 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, 
cmd
);

89 
ˇl_d©a
 += 3;

90 *
ˇl_d©a
 != 0xffff) {

91 
u32
 
ªg
;

92 
ªg
 = *
ˇl_d©a
++;

93 
vÆ
 = *
ˇl_d©a
++;

94 
vÆ
 |(*
ˇl_d©a
++) << 16;

96 
	`__øw_wrôñ
(
vÆ
, 
mem
 + 
ªg
);

97 
	`udñay
(100);

100 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_VENDOR_ID
, &
vÆ
);

101 
dev
->
víd‹
 = 
vÆ
 & 0xffff;

102 
dev
->
devi˚
 = (
vÆ
 >> 16) & 0xffff;

104 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_CLASS_REVISION
, &
vÆ
);

105 
dev
->
ªvisi⁄
 = 
vÆ
 & 0xff;

106 
dev
->
˛ass
 = 
vÆ
 >> 8;

108 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, &
cmd
);

109 
cmd
 &~(
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
);

110 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, 
cmd
);

112 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 
b¨0
);

114 
	`iounm≠
(
mem
);

115 
	}
}

116 
DECLARE_PCI_FIXUP_EARLY
(
PCI_VENDOR_ID_ATHEROS
, 
PCI_ANY_ID
, 
©h9k_pci_fixup
);

118 
__öô
 
	$pci_íabÀ_©h9k_fixup
(
¶Ÿ
, 
u16
 *
ˇl_d©a
)

120 i‡(
©h9k_num_fixups
 >
	`ARRAY_SIZE
(
©h9k_fixups
))

123 
©h9k_fixups
[
©h9k_num_fixups
].
¶Ÿ
 = slot;

124 
©h9k_fixups
[
©h9k_num_fixups
].
ˇl_d©a
 = cal_data;

125 
©h9k_num_fixups
++;

126 
	}
}

	@linux/ar71xx/files/arch/mips/ath79/pci-ath9k-fixup.h

1 #i‚de‡
_PCI_ATH9K_FIXUP


2 
	#_PCI_ATH9K_FIXUP


	)

4 
	$pci_íabÀ_©h9k_fixup
(
¶Ÿ
, 
u16
 *
ˇl_d©a
Ë
__öô
;

	@linux/ar71xx/files/arch/mips/ath79/routerboot.c

11 
	#¥_fmt
(
fmt
Ë"rb: " 
	)
fmt

13 
	~<löux/kî√l.h
>

14 
	~<löux/kobje˘.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/rouãrboŸ.h
>

18 
	~<löux/æe.h
>

19 
	~<löux/lzo.h
>

21 
	~"rouãrboŸ.h
"

23 
	#RB_BLOCK_SIZE
 0x1000

	)

24 
	#RB_ART_SIZE
 0x10000

	)

25 
	#RB_MAGIC_ERD
 0x00455244

	)

27 
rb_öfo
 
	grb_öfo
;

29 
u32
 
	$gë_u32
(*
buf
)

31 
u8
 *
p
 = 
buf
;

33  ((
u32
Ë
p
[3] + ((u32)Ö[2] << 8) + ((u32)Ö[1] << 16) +

34 ((
u32
Ë
p
[0] << 24));

35 
	}
}

37 
u16
 
	$gë_u16
(*
buf
)

39 
u8
 *
p
 = 
buf
;

41  (
u16
Ë
p
[1] + ((u16)Ö[0] << 8);

42 
	}
}

44 
__öô
 

45 
	$rouãrboŸ_föd_magic
(
u8
 *
buf
, 
buÊí
, 
u32
 *
off£t
, 
boﬁ
 
h¨d
)

47 
u32
 
magic_ªf
 = 
h¨d
 ? 
RB_MAGIC_HARD
 : 
RB_MAGIC_SOFT
;

48 
u32
 
magic
;

49 
u32
 
cur
 = *
off£t
;

51 
cur
 < 
buÊí
) {

52 
magic
 = 
	`gë_u32
(
buf
 + 
cur
);

53 i‡(
magic
 =
magic_ªf
) {

54 *
off£t
 = 
cur
;

58 
cur
 += 0x1000;

61  -
ENOENT
;

62 
	}
}

64 
__öô
 

65 
	$rouãrboŸ_föd_èg
(
u8
 *
buf
, 
buÊí
, 
u16
 
èg_id
,

66 
u8
 **
èg_d©a
, 
u16
 *
èg_Àn
)

68 
uöt32_t
 
magic
;

69 
boﬁ
 
Æign
 = 
Ál£
;

70 
ªt
;

72 i‡(
buÊí
 < 4)

73  -
EINVAL
;

75 
magic
 = 
	`gë_u32
(
buf
);

76 
magic
) {

77 
RB_MAGIC_ERD
:

78 
Æign
 = 
åue
;

80 
RB_MAGIC_HARD
:

82 
buf
 += 4;

83 
buÊí
 -= 4;

86 
RB_MAGIC_SOFT
:

87 i‡(
buÊí
 < 8)

88  -
EINVAL
;

91 
buf
 += 8;

92 
buÊí
 -= 8;

97  -
EINVAL
;

100 
ªt
 = -
ENOENT
;

101 
buÊí
 > 2) {

102 
u16
 
id
;

103 
u16
 
Àn
;

105 
Àn
 = 
	`gë_u16
(
buf
);

106 
buf
 += 2;

107 
buÊí
 -= 2;

109 i‡(
buÊí
 < 2)

112 
id
 = 
	`gë_u16
(
buf
);

113 
buf
 += 2;

114 
buÊí
 -= 2;

116 i‡(
id
 =
RB_ID_TERMINATOR
)

119 i‡(
buÊí
 < 
Àn
)

122 i‡(
id
 =
èg_id
) {

123 i‡(
èg_Àn
)

124 *
èg_Àn
 = 
Àn
;

125 i‡(
èg_d©a
)

126 *
èg_d©a
 = 
buf
;

127 
ªt
 = 0;

131 i‡(
Æign
)

132 
Àn
 = (len + 3) / 4;

134 
buf
 +
Àn
;

135 
buÊí
 -
Àn
;

138  
ªt
;

139 
	}
}

141 
ölöe
 

142 
	$rb_föd_h¨d_cfg_èg
(
u16
 
èg_id
, 
u8
 **
èg_d©a
, u16 *
èg_Àn
)

144 i‡(!
rb_öfo
.
h¨d_cfg_d©a
 ||

145 !
rb_öfo
.
h¨d_cfg_size
)

146  -
ENOENT
;

148  
	`rouãrboŸ_föd_èg
(
rb_öfo
.
h¨d_cfg_d©a
,

149 
rb_öfo
.
h¨d_cfg_size
,

150 
èg_id
, 
èg_d©a
, 
èg_Àn
);

151 
	}
}

153 
__öô
 const *

154 
	$rb_gë_bﬂrd_«me
()

156 
u16
 
èg_Àn
;

157 
u8
 *
èg
;

158 
îr
;

160 
îr
 = 
	`rb_föd_h¨d_cfg_èg
(
RB_ID_BOARD_NAME
, &
èg
, &
èg_Àn
);

161 i‡(
îr
)

162  
NULL
;

164  
èg
;

165 
	}
}

167 
__öô
 
u32


168 
	$rb_gë_hw_›ti⁄s
()

170 
u16
 
èg_Àn
;

171 
u8
 *
èg
;

172 
îr
;

174 
îr
 = 
	`rb_föd_h¨d_cfg_èg
(
RB_ID_HW_OPTIONS
, &
èg
, &
èg_Àn
);

175 i‡(
îr
)

178  
	`gë_u32
(
èg
);

179 
	}
}

181 * 
__öô


182 
	$__rb_gë_wœn_d©a
(
u16
 
id
)

184 
u16
 
èg_Àn
;

185 
u8
 *
èg
;

186 *
buf
;

187 
îr
;

188 
u32
 
magic
;

189 
size_t
 
§c_d⁄e
;

190 
size_t
 
d°_d⁄e
;

192 
îr
 = 
	`rb_föd_h¨d_cfg_èg
(
RB_ID_WLAN_DATA
, &
èg
, &
èg_Àn
);

193 i‡(
îr
) {

194 
	`¥_îr
("no calibration data found\n");

195 
îr
;

198 
buf
 = 
	`kmÆloc
(
RB_ART_SIZE
, 
GFP_KERNEL
);

199 i‡(
buf
 =
NULL
) {

200 
	`¥_îr
("no memory for calibration data\n");

201 
îr
;

204 
magic
 = 
	`gë_u32
(
èg
);

205 i‡(
magic
 =
RB_MAGIC_ERD
) {

206 
u8
 *
îd_d©a
;

207 
u16
 
îd_Àn
;

209 i‡(
id
 == 0)

210 
îr_‰ì
;

212 
îr
 = 
	`rouãrboŸ_föd_èg
(
èg
, 
èg_Àn
, 
id
,

213 &
îd_d©a
, &
îd_Àn
);

214 i‡(
îr
) {

215 
	`¥_îr
("nÿERD d©®found f‹ id %u\n", 
id
);

216 
îr_‰ì
;

219 
d°_d⁄e
 = 
RB_ART_SIZE
;

220 
îr
 = 
	`lzo1x_decom¥ess_ß„
(
îd_d©a
, 
îd_Àn
, 
buf
, &
d°_d⁄e
);

221 i‡(
îr
) {

222 
	`¥_îr
("unableÅo decompress calibration data %d\n",

223 
îr
);

224 
îr_‰ì
;

227 i‡(
id
 != 0)

228 
îr_‰ì
;

230 
îr
 = 
	`æe_decode
((*Ë
èg
, 
èg_Àn
, 
buf
, 
RB_ART_SIZE
,

231 &
§c_d⁄e
, &
d°_d⁄e
);

232 i‡(
îr
) {

233 
	`¥_îr
("unableÅo decode calibration data\n");

234 
îr_‰ì
;

238  
buf
;

240 
îr_‰ì
:

241 
	`k‰ì
(
buf
);

242 
îr
:

243  
NULL
;

244 
	}
}

246 
__öô
 *

247 
	$rb_gë_wœn_d©a
()

249  
	`__rb_gë_wœn_d©a
(0);

250 
	}
}

252 
__öô
 *

253 
	$rb_gë_ext_wœn_d©a
(
u16
 
id
)

255  
	`__rb_gë_wœn_d©a
(
id
);

256 
	}
}

258 
__öô
 c⁄° 
rb_öfo
 *

259 
	$rb_öô_öfo
(*
d©a
, 
size
)

261 
off£t
;

263 i‡(
size
 =0 || (sizê% 
RB_BLOCK_SIZE
) != 0)

264  
NULL
;

266 
off£t
 = 0; off£à< 
size
; off£à+
RB_BLOCK_SIZE
) {

267 
u32
 
magic
;

269 
magic
 = 
	`gë_u32
(
d©a
 + 
off£t
);

270 
magic
) {

271 
RB_MAGIC_HARD
:

272 
rb_öfo
.
h¨d_cfg_offs
 = 
off£t
;

275 
RB_MAGIC_SOFT
:

276 
rb_öfo
.
so·_cfg_offs
 = 
off£t
;

281 i‡(!
rb_öfo
.
h¨d_cfg_offs
) {

282 
	`¥_îr
("couldÇot findá valid RouterBOOT hard config\n");

283  
NULL
;

286 i‡(!
rb_öfo
.
so·_cfg_offs
) {

287 
	`¥_îr
("couldÇot findá valid RouterBOOT soft config\n");

288  
NULL
;

291 
rb_öfo
.
h¨d_cfg_size
 = 
RB_BLOCK_SIZE
;

292 
rb_öfo
.
h¨d_cfg_d©a
 = 
	`kmemdup
(
d©a
 +Ñb_öfo.
h¨d_cfg_offs
,

293 
RB_BLOCK_SIZE
, 
GFP_KERNEL
);

294 i‡(!
rb_öfo
.
h¨d_cfg_d©a
)

295  
NULL
;

297 
rb_öfo
.
bﬂrd_«me
 = 
	`rb_gë_bﬂrd_«me
();

298 
rb_öfo
.
hw_›ti⁄s
 = 
	`rb_gë_hw_›ti⁄s
();

300  &
rb_öfo
;

301 
	}
}

303 *
	grb_ext_wœn_d©a
;

305 
ssize_t


306 
	$rb_ext_wœn_d©a_ªad
(
fûe
 *
fûp
, 
kobje˘
 *
kobj
,

307 
bö_©åibuã
 *
©å
, *
buf
,

308 
loff_t
 
off
, 
size_t
 
cou¡
)

310 i‡(
off
 + 
cou¡
 > 
©å
->
size
)

311  -
EFBIG
;

313 
	`mem˝y
(
buf
, &
rb_ext_wœn_d©a
[
off
], 
cou¡
);

315  
cou¡
;

316 
	}
}

318 c⁄° 
bö_©åibuã
 
	grb_ext_wœn_d©a_©å
 = {

319 .
©å
 = {

320 .
«me
 = "ext_wlan_data",

321 .
	gmode
 = 
S_IRUSR
 | 
S_IWUSR
,

323 .
	gªad
 = 
rb_ext_wœn_d©a_ªad
,

324 .
	gsize
 = 
RB_ART_SIZE
,

327 
__öô
 
	$rb_sysfs_öô
()

329 
kobje˘
 *
rb_kobj
;

330 
ªt
;

332 
rb_ext_wœn_d©a
 = 
	`rb_gë_ext_wœn_d©a
(1);

333 i‡(
rb_ext_wœn_d©a
 =
NULL
)

334  -
ENOENT
;

336 
rb_kobj
 = 
	`kobje˘_¸óã_™d_add
("rouãrboŸ", 
fúmw¨e_kobj
);

337 i‡(
rb_kobj
 =
NULL
) {

338 
ªt
 = -
ENOMEM
;

339 
	`¥_îr
("unableÅo create sysfsÉntry\n");

340 
îr_‰ì_wœn_d©a
;

343 
ªt
 = 
	`sysfs_¸óã_bö_fûe
(
rb_kobj
, &
rb_ext_wœn_d©a_©å
);

344 i‡(
ªt
) {

345 
	`¥_îr
("u«bÀÅÿ¸óã sysf†fûe, %d\n", 
ªt
);

346 
îr_put_kobj
;

351 
îr_put_kobj
:

352 
	`kobje˘_put
(
rb_kobj
);

353 
îr_‰ì_wœn_d©a
:

354 
	`k‰ì
(
rb_ext_wœn_d©a
);

355  
ªt
;

356 
	}
}

358 
œã_öôˇŒ
(
rb_sysfs_öô
);

	@linux/ar71xx/files/arch/mips/ath79/routerboot.h

11 #i‚de‡
_ATH79_ROUTERBOOT_H_


12 
	#_ATH79_ROUTERBOOT_H_


	)

14 
	srb_öfo
 {

15 
	mh¨d_cfg_offs
;

16 
	mh¨d_cfg_size
;

17 *
	mh¨d_cfg_d©a
;

18 
	mso·_cfg_offs
;

20 c⁄° *
	mbﬂrd_«me
;

21 
u32
 
	mhw_›ti⁄s
;

25 
	#RB_HW_OPT_UART_ABSENT
 
	`BIT
(0)

	)

26 
	#RB_HW_OPT_HAS_VOLTAGE
 
	`BIT
(1)

	)

27 
	#RB_HW_OPT_HAS_USB
 
	`BIT
(2)

	)

28 
	#RB_HW_OPT_HAS_ATTINY
 
	`BIT
(3)

	)

29 
	#RB_HW_OPT_NO_NAND
 
	`BIT
(14)

	)

30 
	#RB_HW_OPT_HAS_LCD
 
	`BIT
(15)

	)

31 
	#RB_HW_OPT_HAS_POE_OUT
 
	`BIT
(16)

	)

32 
	#RB_HW_OPT_HAS_uSD
 
	`BIT
(17)

	)

33 
	#RB_HW_OPT_HAS_SFP
 
	`BIT
(20)

	)

34 
	#RB_HW_OPT_HAS_WIFI
 
	`BIT
(21)

	)

35 
	#RB_HW_OPT_HAS_TS_FOR_ADC
 
	`BIT
(22)

	)

36 
	#RB_HW_OPT_HAS_PLC
 
	`BIT
(29)

	)

38 
ölöe
 
boﬁ


39 
	$rb_hw_›ti⁄_m©ch
(c⁄° 
rb_öfo
 *
öfo
, 
u32
 
mask
, u32 
vÆ
)

41  (
öfo
->
hw_›ti⁄s
 & (
vÆ
 | 
mask
)) == val;

42 
	}
}

44 
ölöe
 
boﬁ


45 
	$rb_has_hw_›ti⁄
(c⁄° 
rb_öfo
 *
öfo
, 
u32
 
mask
)

47  
	`rb_hw_›ti⁄_m©ch
(
öfo
, 
mask
, mask);

48 
	}
}

50 #ifde‡
CONFIG_ATH79_ROUTERBOOT


51 c⁄° 
rb_öfo
 *
rb_öô_öfo
(*
d©a
, 
size
);

52 *
rb_gë_wœn_d©a
();

53 *
rb_gë_ext_wœn_d©a
(
u16
 
id
);

55 
rouãrboŸ_föd_èg
(
u8
 *
buf
, 
buÊí
, 
u16
 
èg_id
,

56 
u8
 **
èg_d©a
, 
u16
 *
èg_Àn
);

57 
rouãrboŸ_föd_magic
(
u8
 *
buf
, 
buÊí
, 
u32
 *
off£t
, 
boﬁ
 
h¨d
);

59 
ölöe
 c⁄° 
rb_öfo
 *

60 
	$rb_öô_öfo
(*
d©a
, 
size
)

62  
NULL
;

63 
	}
}

65 
ölöe
 *
	$rb_gë_wœn_d©a
()

67  
NULL
;

68 
	}
}

70 
ölöe
 *
	$rb_gë_wœn_d©a
(
u16
 
id
)

72  
NULL
;

73 
	}
}

75 
ölöe
 

76 
	$rouãrboŸ_föd_èg
(
u8
 *
buf
, 
buÊí
, 
u16
 
èg_id
,

77 
u8
 **
èg_d©a
, 
u16
 *
èg_Àn
)

79  -
ENOENT
;

80 
	}
}

82 
ölöe
 

83 
	$rouãrboŸ_föd_magic
(
u8
 *
buf
, 
buÊí
, 
u32
 *
off£t
, 
boﬁ
 
h¨d
)

85  -
ENOENT
;

86 
	}
}

	@linux/ar71xx/files/arch/mips/include/asm/fw/myloader/myloader.h

12 #i‚de‡
_ASM_MIPS_FW_MYLOADER_H


13 
	#_ASM_MIPS_FW_MYLOADER_H


	)

15 
	~<löux/mylﬂdî.h
>

17 
	smylﬂdî_öfo
 {

18 
uöt32_t
 
	mvid
;

19 
uöt32_t
 
	mdid
;

20 
uöt32_t
 
	msvid
;

21 
uöt32_t
 
	msdid
;

22 
uöt8_t
 
	mmacs
[
MYLO_ETHADDR_COUNT
][6];

25 #ifde‡
CONFIG_MYLOADER


26 
mylﬂdî_öfo
 *
	$mylﬂdî_gë_öfo
(Ë
__öô
;

28 
ölöe
 
mylﬂdî_öfo
 *
	$mylﬂdî_gë_öfo
()

30  
NULL
;

31 
	}
}

	@linux/ar71xx/files/arch/mips/include/asm/mach-ath79/ag71xx_platform.h

12 #i‚de‡
__ASM_MACH_ATH79_PLATFORM_H


13 
	#__ASM_MACH_ATH79_PLATFORM_H


	)

15 
	~<löux/if_ëhî.h
>

16 
	~<löux/skbuff.h
>

17 
	~<löux/phy.h
>

18 
	~<löux/•i/•i.h
>

20 
	sag71xx_swôch_∂©f‹m_d©a
 {

21 
u8
 
	mphy4_mii_í
:1;

22 
u8
 
	mphy_pﬁl_mask
;

25 
	sag71xx_∂©f‹m_d©a
 {

26 
phy_öãrÁ˚_t
 
	mphy_if_mode
;

27 
u32
 
	mphy_mask
;

28 
	m•ìd
;

29 
	mdu∂ex
;

30 
u32
 
	mª£t_bô
;

31 
u8
 
	mmac_addr
[
ETH_ALEN
];

32 
devi˚
 *
	mmii_bus_dev
;

34 
u8
 
	mhas_gbô
:1;

35 
u8
 
	mis_¨91xx
:1;

36 
u8
 
	mis_¨7240
:1;

37 
u8
 
	mis_¨724x
:1;

38 
u8
 
	mhas_¨8216
:1;

39 
u8
 
	mu£_Êow_c⁄åﬁ
:1;

40 
u8
 
	míabÀ_sgmii_fixup
:1;

41 
u8
 
	mdißbÀ_ölöe_checksum_ígöe
:1;

43 
ag71xx_swôch_∂©f‹m_d©a
 *
	mswôch_d©a
;

45 (*
	mddr_Êush
)();

46 (*
	m£t_•ìd
)(
	m•ìd
);

47 (*
	mupd©e_∂l
)(
u32
 
	m∂l_10
, u32 
	m∂l_100
, u32 
	m∂l_1000
);

49 
	mmax_‰ame_Àn
;

50 
	mdesc_pkéí_mask
;

53 
	sag71xx_mdio_∂©f‹m_d©a
 {

54 
u32
 
	mphy_mask
;

55 
u8
 
	mbuûtö_swôch
:1;

56 
u8
 
	mis_¨7240
:1;

57 
u8
 
	mis_¨9330
:1;

58 
u8
 
	mis_¨934x
:1;

59 
	mmdio_˛ock
;

60 
	mªf_˛ock
;

62 (*
	mª£t
)(
mii_bus
 *
	mbus
);

	@linux/ar71xx/files/arch/mips/include/asm/mach-ath79/mach-linino.h

7 #i‚de‡
MACH_LININO_H_


8 
	#MACH_LININO_H_


	)

10 #i‡
deföed
(
LININO_FREEDOG
)

11 
	#GPIO_FUNC_SET
 (
AR933X_GPIO_FUNC_JTAG_DISABLE
 | \

12 
AR933X_GPIO_FUNC_I2S_MCK_EN
)

	)

13 
	#GPIO_FUNC_CLEAR
 (
AR933X_GPIO_FUNC_SPDIF_EN
 | \

14 
AR933X_GPIO_FUNC_I2SO_EN
 | \

15 
AR933X_GPIO_FUNC_UART_RTS_CTS_EN
)

	)

16 
	#GPIO_FUNC2_SET
 (
AR933X_GPIO_FUNC2_JUMPSTART_DISABLE
 | \

17 
AR933X_GPIO_FUNC2_WPS_DISABLE
 | \

18 
AR933X_GPIO_FUNC2_DIS_MIC
)

	)

19 
	#GPIO_FUNC2_CLEAR
 (
AR933X_GPIO_FUNC2_I2SD_ON_12
)

	)

21 
	#GPIO_FUNC_SET
 (
AR933X_GPIO_FUNC_JTAG_DISABLE
 | \

22 
AR933X_GPIO_FUNC_I2S_MCK_EN
)

	)

30 
	#GPIO_FUNC_CLEAR
 (0)

	)

31 
	#GPIO_FUNC2_SET
 (
AR933X_GPIO_FUNC2_JUMPSTART_DISABLE
)

	)

32 
	#GPIO_FUNC2_CLEAR
 (0)

	)

36 
	#DS_GPIO_LED_WLAN
 0

	)

37 
	#DS_GPIO_LED_USB
 1

	)

39 
	#DS_GPIO_OE
 21

	)

40 
	#DS_GPIO_MCU_RESET
 18

	)

42 
	#DS_GPIO_UART_ENA
 23

	)

43 
	#DS_GPIO_CONF_BTN
 20

	)

46 #i‡
deföed
(
LININO_FREEDOG
)

47 
	#DS_GPIO_OE2
 11

	)

49 
	#DS_GPIO_OE2
 22

	)

52 
	#DS_KEYS_POLL_INTERVAL
 20

	)

53 
	#DS_KEYS_DEBOUNCE_INTERVAL
 (3 * 
DS_KEYS_POLL_INTERVAL
)

	)

55 
	#DS_MAC0_OFFSET
 0x0000

	)

56 
	#DS_MAC1_OFFSET
 0x0006

	)

57 
	#DS_CALDATA_OFFSET
 0x1000

	)

58 
	#DS_WMAC_MAC_OFFSET
 0x1002

	)

63 #i‡
deföed
(
LININO_FREEDOG
)

64 
	#LININO_GPIO_SPI_SCK
 7

	)

65 
	#LININO_GPIO_SPI_MISO
 6

	)

67 
	#LININO_GPIO_SPI_SCK
 11

	)

68 
	#LININO_GPIO_SPI_MISO
 8

	)

71 
	#LININO_GPIO_SPI_MOSI
 27

	)

72 
	#LININO_N_SPI_CHIP_SELECT
 1

	)

74 
	#LININO_GPIO_SPI_CS0
 26

	)

76 #i‡
deföed
(
LININO_FREEDOG
)

77 
	#LININO_GPIO_SPI_INTERRUPT
 23

	)

78 #ñi‡
deföed
(
CONFIG_ATH79_MACH_LININO_YUN
)

79 
	#LININO_GPIO_SPI_INTERRUPT
 19

	)

81 
	#LININO_GPIO_SPI_INTERRUPT
 19

	)

	@linux/ar71xx/files/arch/mips/include/asm/mach-ath79/mach-rb750.h

10 #i‚de‡
_MACH_RB750_H


11 
	#_MACH_RB750_H


	)

13 
	~<löux/bô›s.h
>

15 
	#RB750_GPIO_LVC573_LE
 0

	)

16 
	#RB750_GPIO_NAND_IO0
 1

	)

17 
	#RB750_GPIO_NAND_IO1
 2

	)

18 
	#RB750_GPIO_NAND_IO2
 3

	)

19 
	#RB750_GPIO_NAND_IO3
 4

	)

20 
	#RB750_GPIO_NAND_IO4
 5

	)

21 
	#RB750_GPIO_NAND_IO5
 6

	)

22 
	#RB750_GPIO_NAND_IO6
 7

	)

23 
	#RB750_GPIO_NAND_IO7
 8

	)

24 
	#RB750_GPIO_NAND_NCE
 11

	)

25 
	#RB750_GPIO_NAND_RDY
 12

	)

26 
	#RB750_GPIO_NAND_CLE
 14

	)

27 
	#RB750_GPIO_NAND_ALE
 15

	)

28 
	#RB750_GPIO_NAND_NRE
 16

	)

29 
	#RB750_GPIO_NAND_NWE
 17

	)

31 
	#RB750_GPIO_BTN_RESET
 1

	)

32 
	#RB750_GPIO_SPI_CS0
 2

	)

33 
	#RB750_GPIO_LED_ACT
 12

	)

34 
	#RB750_GPIO_LED_PORT1
 13

	)

35 
	#RB750_GPIO_LED_PORT2
 14

	)

36 
	#RB750_GPIO_LED_PORT3
 15

	)

37 
	#RB750_GPIO_LED_PORT4
 16

	)

38 
	#RB750_GPIO_LED_PORT5
 17

	)

40 
	#RB750_LED_ACT
 
	`BIT
(
RB750_GPIO_LED_ACT
)

	)

41 
	#RB750_LED_PORT1
 
	`BIT
(
RB750_GPIO_LED_PORT1
)

	)

42 
	#RB750_LED_PORT2
 
	`BIT
(
RB750_GPIO_LED_PORT2
)

	)

43 
	#RB750_LED_PORT3
 
	`BIT
(
RB750_GPIO_LED_PORT3
)

	)

44 
	#RB750_LED_PORT4
 
	`BIT
(
RB750_GPIO_LED_PORT4
)

	)

45 
	#RB750_LED_PORT5
 
	`BIT
(
RB750_GPIO_LED_PORT5
)

	)

46 
	#RB750_NAND_NCE
 
	`BIT
(
RB750_GPIO_NAND_NCE
)

	)

48 
	#RB750_LVC573_LE
 
	`BIT
(
RB750_GPIO_LVC573_LE
)

	)

50 
	#RB750_LED_BITS
 (
RB750_LED_PORT1
 | 
RB750_LED_PORT2
 | 
RB750_LED_PORT3
 | \

51 
RB750_LED_PORT4
 | 
RB750_LED_PORT5
 | 
RB750_LED_ACT
)

	)

53 
	#RB7XX_GPIO_NAND_NCE
 0

	)

54 
	#RB7XX_GPIO_MON
 9

	)

55 
	#RB7XX_GPIO_LED_ACT
 11

	)

56 
	#RB7XX_GPIO_USB_POWERON
 13

	)

58 
	#RB7XX_NAND_NCE
 
	`BIT
(
RB7XX_GPIO_NAND_NCE
)

	)

59 
	#RB7XX_LED_ACT
 
	`BIT
(
RB7XX_GPIO_LED_ACT
)

	)

60 
	#RB7XX_MONITOR
 
	`BIT
(
RB7XX_GPIO_MON
)

	)

61 
	#RB7XX_USB_POWERON
 
	`BIT
(
RB7XX_GPIO_USB_POWERON
)

	)

63 
	srb750_Àd_d©a
 {

64 *
	m«me
;

65 *
	mdeÁu…_åiggî
;

66 
u32
 
	mmask
;

67 
	ma˘ive_low
;

70 
	srb750_Àd_∂©f‹m_d©a
 {

71 
	mnum_Àds
;

72 
rb750_Àd_d©a
 *
	mÀds
;

73 (*
	mœtch_ch™ge
)(
u32
 
	m˛ór
, u32 
	m£t
);

76 
	srb7xx_«nd_∂©f‹m_d©a
 {

77 
u32
 
	mn˚_löe
;

79 (*
	míabÀ_pös
)();

80 (*
	mdißbÀ_pös
)();

81 (*
	mœtch_ch™ge
)(
	mu32
, u32);

	@linux/ar71xx/files/arch/mips/include/asm/mach-ath79/rb4xx_cpld.h

14 
	#CPLD_GPIO_nLED1
 0

	)

15 
	#CPLD_GPIO_nLED2
 1

	)

16 
	#CPLD_GPIO_nLED3
 2

	)

17 
	#CPLD_GPIO_nLED4
 3

	)

18 
	#CPLD_GPIO_FAN
 4

	)

19 
	#CPLD_GPIO_ALE
 5

	)

20 
	#CPLD_GPIO_CLE
 6

	)

21 
	#CPLD_GPIO_nCE
 7

	)

22 
	#CPLD_GPIO_nLED5
 8

	)

24 
	#CPLD_NUM_GPIOS
 9

	)

26 
	#CPLD_CFG_nLED1
 
	`BIT
(
CPLD_GPIO_nLED1
)

	)

27 
	#CPLD_CFG_nLED2
 
	`BIT
(
CPLD_GPIO_nLED2
)

	)

28 
	#CPLD_CFG_nLED3
 
	`BIT
(
CPLD_GPIO_nLED3
)

	)

29 
	#CPLD_CFG_nLED4
 
	`BIT
(
CPLD_GPIO_nLED4
)

	)

30 
	#CPLD_CFG_FAN
 
	`BIT
(
CPLD_GPIO_FAN
)

	)

31 
	#CPLD_CFG_ALE
 
	`BIT
(
CPLD_GPIO_ALE
)

	)

32 
	#CPLD_CFG_CLE
 
	`BIT
(
CPLD_GPIO_CLE
)

	)

33 
	#CPLD_CFG_nCE
 
	`BIT
(
CPLD_GPIO_nCE
)

	)

34 
	#CPLD_CFG_nLED5
 
	`BIT
(
CPLD_GPIO_nLED5
)

	)

36 
	srb4xx_˝ld_∂©f‹m_d©a
 {

37 
	mgpio_ba£
;

40 
rb4xx_˝ld_ch™ge_cfg
(
mask
, 
vÆue
);

41 
rb4xx_˝ld_ªad
(*
rx_buf
,

42 
˙t
);

43 
rb4xx_˝ld_wrôe
(c⁄° *
buf
, 
cou¡
);

	@linux/ar71xx/files/drivers/gpio/gpio-latch.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/∂©f‹m_d©a/gpio-œtch.h
>

21 
	sgpio_œtch_chù
 {

22 
gpio_chù
 
	mgc
;

24 
muãx
 
	mmuãx
;

25 
muãx
 
	mœtch_muãx
;

26 
boﬁ
 
	mœtch_íabÀd
;

27 
	mÀ_gpio
;

28 
boﬁ
 
	mÀ_a˘ive_low
;

29 *
	mgpios
;

32 
ölöe
 
gpio_œtch_chù
 *
	$to_gpio_œtch_chù
(
gpio_chù
 *
gc
)

34  
	`c⁄èöî_of
(
gc
, 
gpio_œtch_chù
, gc);

35 
	}
}

37 
	$gpio_œtch_lock
(
gpio_œtch_chù
 *
glc
, 
boﬁ
 
íabÀ
)

39 
	`muãx_lock
(&
glc
->
muãx
);

41 i‡(
íabÀ
)

42 
glc
->
œtch_íabÀd
 = 
åue
;

44 i‡(
glc
->
œtch_íabÀd
)

45 
	`muãx_lock
(&
glc
->
œtch_muãx
);

46 
	}
}

48 
	$gpio_œtch_u∆ock
(
gpio_œtch_chù
 *
glc
, 
boﬁ
 
dißbÀ
)

50 i‡(
glc
->
œtch_íabÀd
)

51 
	`muãx_u∆ock
(&
glc
->
œtch_muãx
);

53 i‡(
dißbÀ
)

54 
glc
->
œtch_íabÀd
 = 
åue
;

56 
	`muãx_u∆ock
(&
glc
->
muãx
);

57 
	}
}

60 
	$gpio_œtch_gë
(
gpio_chù
 *
gc
, 
off£t
)

62 
gpio_œtch_chù
 *
glc
 = 
	`to_gpio_œtch_chù
(
gc
);

63 
ªt
;

65 
	`gpio_œtch_lock
(
glc
, 
Ál£
);

66 
ªt
 = 
	`gpio_gë_vÆue
(
glc
->
gpios
[
off£t
]);

67 
	`gpio_œtch_u∆ock
(
glc
, 
Ál£
);

69  
ªt
;

70 
	}
}

73 
	$gpio_œtch_£t
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

75 
gpio_œtch_chù
 *
glc
 = 
	`to_gpio_œtch_chù
(
gc
);

76 
boﬁ
 
íabÀ_œtch
 = 
Ál£
;

77 
boﬁ
 
dißbÀ_œtch
 = 
Ál£
;

78 
gpio
;

80 
gpio
 = 
glc
->
gpios
[
off£t
];

82 i‡(
gpio
 =
glc
->
À_gpio
) {

83 
íabÀ_œtch
 = 
vÆue
 ^ 
glc
->
À_a˘ive_low
;

84 
dißbÀ_œtch
 = !
íabÀ_œtch
;

87 
	`gpio_œtch_lock
(
glc
, 
íabÀ_œtch
);

88 
	`gpio_£t_vÆue
(
gpio
, 
vÆue
);

89 
	`gpio_œtch_u∆ock
(
glc
, 
dißbÀ_œtch
);

90 
	}
}

93 
	$gpio_œtch_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

95 
gpio_œtch_chù
 *
glc
 = 
	`to_gpio_œtch_chù
(
gc
);

96 
ªt
;

98 
	`gpio_œtch_lock
(
glc
, 
Ál£
);

99 
ªt
 = 
	`gpio_dúe˘i⁄_öput
(
glc
->
gpios
[
off£t
]);

100 
	`gpio_œtch_u∆ock
(
glc
, 
Ál£
);

102  
ªt
;

103 
	}
}

106 
	$gpio_œtch_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
, 
off£t
, 
vÆue
)

108 
gpio_œtch_chù
 *
glc
 = 
	`to_gpio_œtch_chù
(
gc
);

109 
boﬁ
 
íabÀ_œtch
 = 
Ál£
;

110 
boﬁ
 
dißbÀ_œtch
 = 
Ál£
;

111 
gpio
;

112 
ªt
;

114 
gpio
 = 
glc
->
gpios
[
off£t
];

116 i‡(
gpio
 =
glc
->
À_gpio
) {

117 
íabÀ_œtch
 = 
vÆue
 ^ 
glc
->
À_a˘ive_low
;

118 
dißbÀ_œtch
 = !
íabÀ_œtch
;

121 
	`gpio_œtch_lock
(
glc
, 
íabÀ_œtch
);

122 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
gpio
, 
vÆue
);

123 
	`gpio_œtch_u∆ock
(
glc
, 
dißbÀ_œtch
);

125  
ªt
;

126 
	}
}

128 
	$gpio_œtch_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

130 
gpio_œtch_chù
 *
glc
;

131 
gpio_œtch_∂©f‹m_d©a
 *
pd©a
;

132 
gpio_chù
 *
gc
;

133 
size
;

134 
ªt
;

135 
i
;

137 
pd©a
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

138 i‡(!
pd©a
)

139  -
EINVAL
;

141 i‡(
pd©a
->
À_gpio_ödex
 >pd©a->
num_gpios
 ||

142 !
pd©a
->
num_gpios
 ||

143 !
pd©a
->
gpios
)

144  -
EINVAL
;

146 
i
 = 0; i < 
pd©a
->
num_gpios
; i++) {

147 
gpio
 = 
pd©a
->
gpios
[
i
];

149 
ªt
 = 
	`devm_gpio_ªque°
(&
pdev
->
dev
, 
gpio
,

150 
GPIO_LATCH_DRIVER_NAME
);

151 i‡(
ªt
)

152  
ªt
;

155 
glc
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*glc), 
GFP_KERNEL
);

156 i‡(!
glc
)

157  -
ENOMEM
;

159 
	`muãx_öô
(&
glc
->
muãx
);

160 
	`muãx_öô
(&
glc
->
œtch_muãx
);

162 
size
 = 
pd©a
->
num_gpios
 * (
glc
->
gpios
[0]);

163 
glc
->
gpios
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, 
size
 , 
GFP_KERNEL
);

164 i‡(!
glc
->
gpios
)

165  -
ENOMEM
;

167 
	`mem˝y
(
glc
->
gpios
, 
pd©a
->gpios, 
size
);

169 
glc
->
À_gpio
 = glc->
gpios
[
pd©a
->
À_gpio_ödex
];

170 
glc
->
À_a˘ive_low
 = 
pd©a
->le_active_low;

172 
gc
 = &
glc
->gc;

174 
gc
->
œbñ
 = 
GPIO_LATCH_DRIVER_NAME
;

175 
gc
->
ba£
 = 
pd©a
->base;

176 
gc
->
ˇn_¶ìp
 = 
åue
;

177 
gc
->
ngpio
 = 
pd©a
->
num_gpios
;

178 
gc
->
gë
 = 
gpio_œtch_gë
;

179 
gc
->
£t
 = 
gpio_œtch_£t
;

180 
gc
->
dúe˘i⁄_öput
 = 
gpio_œtch_dúe˘i⁄_öput
,

181 
gc
->
dúe˘i⁄_ouçut
 = 
gpio_œtch_dúe˘i⁄_ouçut
;

183 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
glc
);

185 
ªt
 = 
	`gpiochù_add
(&
glc
->
gc
);

186 i‡(
ªt
)

187  
ªt
;

190 
	}
}

192 
	$gpio_œtch_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

194 
gpio_œtch_chù
 *
glc
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

196 
	`gpiochù_ªmove
(&
glc
->
gc
);

198 
	}
}

201 
∂©f‹m_drivî
 
	ggpio_œtch_drivî
 = {

202 .
¥obe
 = 
gpio_œtch_¥obe
,

203 .
	gªmove
 = 
gpio_œtch_ªmove
,

204 .
	gdrivî
 = {

205 .
«me
 = 
GPIO_LATCH_DRIVER_NAME
,

206 .
	gow√r
 = 
THIS_MODULE
,

210 
__öô
 
	$gpio_œtch_öô
()

212  
	`∂©f‹m_drivî_ªgi°î
(&
gpio_œtch_drivî
);

213 
	}
}

215 
po°c‹e_öôˇŒ
(
gpio_œtch_öô
);

217 
MODULE_DESCRIPTION
("GPIOÜatch driver");

218 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

219 
MODULE_LICENSE
("GPL v2");

220 
MODULE_ALIAS
("∂©f‹m:" 
GPIO_LATCH_DRIVER_NAME
);

	@linux/ar71xx/files/drivers/gpio/gpio-nxp-74hc153.c

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/nxp_74hc153.h
>

19 
	#NXP_74HC153_NUM_GPIOS
 8

	)

20 
	#NXP_74HC153_S0_MASK
 0x1

	)

21 
	#NXP_74HC153_S1_MASK
 0x2

	)

22 
	#NXP_74HC153_BANK_MASK
 0x4

	)

24 
	snxp_74hc153_chù
 {

25 
devi˚
 *
	m∑ª¡
;

26 
gpio_chù
 
	mgpio_chù
;

27 
muãx
 
	mlock
;

30 
nxp_74hc153_chù
 *
	$gpio_to_nxp
(
gpio_chù
 *
gc
)

32  
	`c⁄èöî_of
(
gc
, 
nxp_74hc153_chù
, 
gpio_chù
);

33 
	}
}

35 
	$nxp_74hc153_dúe˘i⁄_öput
(
gpio_chù
 *
gc
, 
off£t
)

38 
	}
}

40 
	$nxp_74hc153_dúe˘i⁄_ouçut
(
gpio_chù
 *
gc
,

41 
off£t
, 
vÆ
)

43  -
EINVAL
;

44 
	}
}

46 
	$nxp_74hc153_gë_vÆue
(
gpio_chù
 *
gc
, 
off£t
)

48 
nxp_74hc153_chù
 *
nxp
;

49 
nxp_74hc153_∂©f‹m_d©a
 *
pd©a
;

50 
s0
;

51 
s1
;

52 
pö
;

53 
ªt
;

55 
nxp
 = 
	`gpio_to_nxp
(
gc
);

56 
pd©a
 = 
nxp
->
∑ª¡
->
∂©f‹m_d©a
;

58 
s0
 = !!(
off£t
 & 
NXP_74HC153_S0_MASK
);

59 
s1
 = !!(
off£t
 & 
NXP_74HC153_S1_MASK
);

60 
pö
 = (
off£t
 & 
NXP_74HC153_BANK_MASK
Ë? 
pd©a
->
gpio_pö_2y


61 : 
pd©a
->
gpio_pö_1y
;

63 
	`muãx_lock
(&
nxp
->
lock
);

64 
	`gpio_£t_vÆue
(
pd©a
->
gpio_pö_s0
, 
s0
);

65 
	`gpio_£t_vÆue
(
pd©a
->
gpio_pö_s1
, 
s1
);

66 
ªt
 = 
	`gpio_gë_vÆue
(
pö
);

67 
	`muãx_u∆ock
(&
nxp
->
lock
);

69  
ªt
;

70 
	}
}

72 
	$nxp_74hc153_£t_vÆue
(
gpio_chù
 *
gc
,

73 
off£t
, 
vÆ
)

76 
	}
}

78 
	$nxp_74hc153_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

80 
nxp_74hc153_∂©f‹m_d©a
 *
pd©a
;

81 
nxp_74hc153_chù
 *
nxp
;

82 
gpio_chù
 *
gc
;

83 
îr
;

85 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

86 i‡(
pd©a
 =
NULL
) {

87 
	`dev_dbg
(&
pdev
->
dev
, "noÖlatform data specified\n");

88  -
EINVAL
;

91 
nxp
 = 
	`kzÆloc
((
nxp_74hc153_chù
), 
GFP_KERNEL
);

92 i‡(
nxp
 =
NULL
) {

93 
	`dev_îr
(&
pdev
->
dev
, "no memory forÖrivate data\n");

94  -
ENOMEM
;

97 
îr
 = 
	`gpio_ªque°
(
pd©a
->
gpio_pö_s0
, 
	`dev_«me
(&
pdev
->
dev
));

98 i‡(
îr
) {

99 
	`dev_îr
(&
pdev
->
dev
, "unableÅo claim gpio %u,Érr=%d\n",

100 
pd©a
->
gpio_pö_s0
, 
îr
);

101 
îr_‰ì_nxp
;

104 
îr
 = 
	`gpio_ªque°
(
pd©a
->
gpio_pö_s1
, 
	`dev_«me
(&
pdev
->
dev
));

105 i‡(
îr
) {

106 
	`dev_îr
(&
pdev
->
dev
, "unableÅo claim gpio %u,Érr=%d\n",

107 
pd©a
->
gpio_pö_s1
, 
îr
);

108 
îr_‰ì_s0
;

111 
îr
 = 
	`gpio_ªque°
(
pd©a
->
gpio_pö_1y
, 
	`dev_«me
(&
pdev
->
dev
));

112 i‡(
îr
) {

113 
	`dev_îr
(&
pdev
->
dev
, "unableÅo claim gpio %u,Érr=%d\n",

114 
pd©a
->
gpio_pö_1y
, 
îr
);

115 
îr_‰ì_s1
;

118 
îr
 = 
	`gpio_ªque°
(
pd©a
->
gpio_pö_2y
, 
	`dev_«me
(&
pdev
->
dev
));

119 i‡(
îr
) {

120 
	`dev_îr
(&
pdev
->
dev
, "unableÅo claim gpio %u,Érr=%d\n",

121 
pd©a
->
gpio_pö_2y
, 
îr
);

122 
îr_‰ì_1y
;

125 
îr
 = 
	`gpio_dúe˘i⁄_ouçut
(
pd©a
->
gpio_pö_s0
, 0);

126 i‡(
îr
) {

127 
	`dev_îr
(&
pdev
->
dev
,

129 
pd©a
->
gpio_pö_s0
, 
îr
);

130 
îr_‰ì_2y
;

133 
îr
 = 
	`gpio_dúe˘i⁄_ouçut
(
pd©a
->
gpio_pö_s1
, 0);

134 i‡(
îr
) {

135 
	`dev_îr
(&
pdev
->
dev
,

137 
pd©a
->
gpio_pö_s1
, 
îr
);

138 
îr_‰ì_2y
;

141 
îr
 = 
	`gpio_dúe˘i⁄_öput
(
pd©a
->
gpio_pö_1y
);

142 i‡(
îr
) {

143 
	`dev_îr
(&
pdev
->
dev
,

145 
pd©a
->
gpio_pö_1y
, 
îr
);

146 
îr_‰ì_2y
;

149 
îr
 = 
	`gpio_dúe˘i⁄_öput
(
pd©a
->
gpio_pö_2y
);

150 i‡(
îr
) {

151 
	`dev_îr
(&
pdev
->
dev
,

153 
pd©a
->
gpio_pö_2y
, 
îr
);

154 
îr_‰ì_2y
;

157 
nxp
->
∑ª¡
 = &
pdev
->
dev
;

158 
	`muãx_öô
(&
nxp
->
lock
);

160 
gc
 = &
nxp
->
gpio_chù
;

162 
gc
->
dúe˘i⁄_öput
 = 
nxp_74hc153_dúe˘i⁄_öput
;

163 
gc
->
dúe˘i⁄_ouçut
 = 
nxp_74hc153_dúe˘i⁄_ouçut
;

164 
gc
->
gë
 = 
nxp_74hc153_gë_vÆue
;

165 
gc
->
£t
 = 
nxp_74hc153_£t_vÆue
;

166 
gc
->
ˇn_¶ìp
 = 1;

168 
gc
->
ba£
 = 
pd©a
->
gpio_ba£
;

169 
gc
->
ngpio
 = 
NXP_74HC153_NUM_GPIOS
;

170 
gc
->
œbñ
 = 
	`dev_«me
(
nxp
->
∑ª¡
);

171 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

172 
gc
->
dev
 = 
nxp
->
∑ª¡
;

174 
gc
->
∑ª¡
 = 
nxp
->parent;

176 
gc
->
ow√r
 = 
THIS_MODULE
;

178 
îr
 = 
	`gpiochù_add
(&
nxp
->
gpio_chù
);

179 i‡(
îr
) {

180 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿadd gpiÿchù,Éº=%d\n", 
îr
);

181 
îr_‰ì_2y
;

184 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
nxp
);

187 
îr_‰ì_2y
:

188 
	`gpio_‰ì
(
pd©a
->
gpio_pö_2y
);

189 
îr_‰ì_1y
:

190 
	`gpio_‰ì
(
pd©a
->
gpio_pö_1y
);

191 
îr_‰ì_s1
:

192 
	`gpio_‰ì
(
pd©a
->
gpio_pö_s1
);

193 
îr_‰ì_s0
:

194 
	`gpio_‰ì
(
pd©a
->
gpio_pö_s0
);

195 
îr_‰ì_nxp
:

196 
	`k‰ì
(
nxp
);

197  
îr
;

198 
	}
}

200 
	$nxp_74hc153_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

202 
nxp_74hc153_chù
 *
nxp
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

203 
nxp_74hc153_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

205 i‡(
nxp
) {

206 
	`gpiochù_ªmove
(&
nxp
->
gpio_chù
);

207 
	`gpio_‰ì
(
pd©a
->
gpio_pö_2y
);

208 
	`gpio_‰ì
(
pd©a
->
gpio_pö_1y
);

209 
	`gpio_‰ì
(
pd©a
->
gpio_pö_s1
);

210 
	`gpio_‰ì
(
pd©a
->
gpio_pö_s0
);

212 
	`k‰ì
(
nxp
);

213 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

217 
	}
}

219 
∂©f‹m_drivî
 
	gnxp_74hc153_drivî
 = {

220 .
¥obe
 = 
nxp_74hc153_¥obe
,

221 .
	gªmove
 = 
nxp_74hc153_ªmove
,

222 .
	gdrivî
 = {

223 .
«me
 = 
NXP_74HC153_DRIVER_NAME
,

224 .
	gow√r
 = 
THIS_MODULE
,

228 
__öô
 
	$nxp_74hc153_öô
()

230  
	`∂©f‹m_drivî_ªgi°î
(&
nxp_74hc153_drivî
);

231 
	}
}

232 
subsys_öôˇŒ
(
nxp_74hc153_öô
);

234 
__exô
 
	$nxp_74hc153_exô
()

236 
	`∂©f‹m_drivî_uƒegi°î
(&
nxp_74hc153_drivî
);

237 
	}
}

238 
moduÀ_exô
(
nxp_74hc153_exô
);

240 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

241 
MODULE_DESCRIPTION
("GPIOÉxpander driver for NXP 74HC153");

242 
MODULE_LICENSE
("GPL v2");

243 
MODULE_ALIAS
("∂©f‹m:" 
NXP_74HC153_DRIVER_NAME
);

	@linux/ar71xx/files/drivers/leds/leds-nu801.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<löux/Àds.h
>

19 
	~<löux/w‹kqueue.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/Àds-nu801.h
>

23 
	~<löux/gpio.h
>

24 
	~<löux/of_gpio.h
>

26 
	#MAX_NAME_LENGTH
 24

	)

27 
	#NUM_COLORS
 3

	)

29 c⁄° * c⁄° 
	gÀd_nu801_cﬁ‹s
[] = { "blue", "green", "red" };

31 
	sÀd_nu801_Àd_d©a
 {

32 
Àd_˛assdev
 
	mcdev
;

33 
Àd_nu801_d©a
 *
	mc⁄åﬁÀr
;

34 
Àd_brighäess
 
	mÀvñ
;

35 
	m«me
[
MAX_NAME_LENGTH
];

38 
	sÀd_nu801_d©a
 {

39 
	mcki
;

40 
	msdi
;

41 
	mÀi
;

42 
dñayed_w‹k
 
	mw‹k
;

43 
Àd_nu801_Àd_d©a
 *
	mÀd_chaö
;

44 
	mnum_Àds
;

45 c⁄° *
	mdevi˚_«me
;

46 c⁄° *
	m«me
;

47 
u32
 
	mndñay
;

48 
©omic_t
 
	m≥ndög
;

51 
	$Àd_nu801_w‹k
(
w‹k_°ru˘
 *
w‹k
)

53 
Àd_nu801_d©a
 *
c⁄åﬁÀr
 =

54 
	`c⁄èöî_of
(
w‹k
, 
Àd_nu801_d©a
, work.work);

55 
Àd_nu801_Àd_d©a
 *
Àd
;

56 
u16
 
bô
;

57 
u16
 
brighäess
;

58 
ödex
;

60 
ödex
 = 0; index < 
c⁄åﬁÀr
->
num_Àds
; index++) {

61 
Àd
 = &
c⁄åﬁÀr
->
Àd_chaö
[
ödex
];

62 
brighäess
 = 
Àd
->
Àvñ
 << 8;

63 
bô
 = 0x8000; bit; bit = bit >> 1) {

64 
	`gpio_£t_vÆue
(
c⁄åﬁÀr
->
sdi
,

65 (
brighäess
 & 
bô
) != 0);

66 
	`gpio_£t_vÆue
(
c⁄åﬁÀr
->
cki
, 1);

67 i‡(
	`u∆ikñy
(((
ödex
 =(
c⁄åﬁÀr
->
num_Àds
 - 1)) &&

68 (
bô
 == 1) &&

69 (
c⁄åﬁÀr
->
Ài
 < 0)))) {

70 
	`udñay
(600);

72 
	`ndñay
(
c⁄åﬁÀr
->
ndñay
);

74 
	`gpio_£t_vÆue
(
c⁄åﬁÀr
->
cki
, 0);

75 
	`ndñay
(
c⁄åﬁÀr
->
ndñay
);

78 i‡(
c⁄åﬁÀr
->
Ài
 >= 0) {

79 
	`gpio_£t_vÆue
(
c⁄åﬁÀr
->
Ài
, 1);

80 
	`ndñay
(
c⁄åﬁÀr
->
ndñay
);

81 
	`gpio_£t_vÆue
(
c⁄åﬁÀr
->
Ài
, 0);

83 
	`©omic_£t
(&
c⁄åﬁÀr
->
≥ndög
, 1);

84 
	}
}

86 
	$Àd_nu801_£t
(
Àd_˛assdev
 *
Àd_cdev
,

87 
Àd_brighäess
 
vÆue
)

89 
Àd_nu801_Àd_d©a
 *
Àd_d©
 =

90 
	`c⁄èöî_of
(
Àd_cdev
, 
Àd_nu801_Àd_d©a
, 
cdev
);

91 
Àd_nu801_d©a
 *
c⁄åﬁÀr
 = 
Àd_d©
->controller;

93 i‡(
Àd_d©
->
Àvñ
 !
vÆue
) {

94 
Àd_d©
->
Àvñ
 = 
vÆue
;

95 i‡(
	`©omic_dec_™d_ã°
(&
c⁄åﬁÀr
->
≥ndög
))

96 
	`scheduÀ_dñayed_w‹k
(&
Àd_d©
->
c⁄åﬁÀr
->
w‹k
,

97 (
HZ
/1000) + 1);

99 
	}
}

101 
Àd_nu801_¸óã
(
Àd_nu801_d©a
 *
c⁄åﬁÀr
,

102 
devi˚
 *
∑ª¡
,

103 
ödex
,

104 
Àd_brighäess
 
brighäess
,

105 #ifde‡
CONFIG_LEDS_TRIGGERS


106 c⁄° *
deÁu…_åiggî
,

108 c⁄° *
cﬁ‹
)

110 
Àd_nu801_Àd_d©a
 *
	gÀd
 = &
c⁄åﬁÀr
->
Àd_chaö
[
ödex
];

111 
	gªt
;

113 
s˙¥ötf
(
Àd
->
«me
, (led->name), "%s:%s:%s%d",

114 
c⁄åﬁÀr
->
devi˚_«me
, 
cﬁ‹
, c⁄åﬁÀr->
«me
,

115 (
c⁄åﬁÀr
->
num_Àds
 - (
ödex
 + 1)Ë/ 
NUM_COLORS
);

116 
	gÀd
->
	gcdev
.
	g«me
 = 
Àd
->
«me
;

117 
	gÀd
->
	gcdev
.
	gbrighäess_£t
 = 
Àd_nu801_£t
;

118 #ifde‡
CONFIG_LEDS_TRIGGERS


119 
	gÀd
->
	gcdev
.
	gdeÁu…_åiggî
 = 
deÁu…_åiggî
;

121 
	gÀd
->
	gÀvñ
 = 
brighäess
;

122 
	gÀd
->
	gc⁄åﬁÀr
 = 
c⁄åﬁÀr
;

123 
	gªt
 = 
Àd_˛assdev_ªgi°î
(
∑ª¡
, &
Àd
->
cdev
);

124 i‡(
	gªt
 < 0)

125 
	gîr
;

129 
	gîr
:

130 
k‰ì
(
Àd
);

131  
	gªt
;

135 
	$Àd_nu801_¸óã_chaö
(c⁄° 
Àd_nu801_ãm∂©e
 *
ãm∂©e
,

136 
Àd_nu801_d©a
 *
c⁄åﬁÀr
,

137 
devi˚
 *
∑ª¡
)

139 
ªt
;

140 
ödex
;

142 
c⁄åﬁÀr
->
cki
 = 
ãm∂©e
->cki;

143 
c⁄åﬁÀr
->
sdi
 = 
ãm∂©e
->sdi;

144 
c⁄åﬁÀr
->
Ài
 = 
ãm∂©e
->lei;

145 
c⁄åﬁÀr
->
num_Àds
 = 
ãm∂©e
->num_leds * 3;

146 
c⁄åﬁÀr
->
devi˚_«me
 = 
ãm∂©e
->device_name;

147 
c⁄åﬁÀr
->
«me
 = 
ãm∂©e
->name;

148 
c⁄åﬁÀr
->
ndñay
 = 
ãm∂©e
->ndelay;

149 
	`©omic_£t
(&
c⁄åﬁÀr
->
≥ndög
, 1);

151 
c⁄åﬁÀr
->
Àd_chaö
 = 
	`kzÆloc
((
Àd_nu801_Àd_d©a
) *

152 
c⁄åﬁÀr
->
num_Àds
, 
GFP_KERNEL
);

154 i‡(!
c⁄åﬁÀr
->
Àd_chaö
)

155  -
ENOMEM
;

157 
ªt
 = 
	`gpio_ªque°
(
c⁄åﬁÀr
->
cki
, 
ãm∂©e
->
«me
);

158 i‡(
ªt
 < 0)

159 
îr_‰ì_chaö
;

161 
ªt
 = 
	`gpio_ªque°
(
c⁄åﬁÀr
->
sdi
, 
ãm∂©e
->
«me
);

162 i‡(
ªt
 < 0)

163 
îr_ªt_cki
;

165 i‡(
c⁄åﬁÀr
->
Ài
 >= 0) {

166 
ªt
 = 
	`gpio_ªque°
(
c⁄åﬁÀr
->
Ài
, 
ãm∂©e
->
«me
);

167 i‡(
ªt
 < 0)

168 
îr_ªt_sdi
;

169 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
c⁄åﬁÀr
->
Ài
, 0);

170 i‡(
ªt
 < 0)

171 
îr_ªt_Ài
;

174 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
c⁄åﬁÀr
->
cki
, 0);

175 i‡(
ªt
 < 0)

176 
îr_ªt_Ài
;

178 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
c⁄åﬁÀr
->
sdi
, 0);

179 i‡(
ªt
 < 0)

180 
îr_ªt_Ài
;

182 
ödex
 = 0; index < 
c⁄åﬁÀr
->
num_Àds
; index++) {

183 
ªt
 = 
	`Àd_nu801_¸óã
(
c⁄åﬁÀr
, 
∑ª¡
, 
ödex
,

184 
ãm∂©e
->
öô_brighäess


185 [
ödex
 % 
NUM_COLORS
],

186 #ifde‡
CONFIG_LEDS_TRIGGERS


187 
ãm∂©e
->
deÁu…_åiggî
,

189 
ãm∂©e
->
Àd_cﬁ‹s
[
ödex
 % 
NUM_COLORS
] ?

190 
ãm∂©e
->
Àd_cﬁ‹s
[
ödex
 % 
NUM_COLORS
] :

191 
Àd_nu801_cﬁ‹s
[
ödex
 % 
NUM_COLORS
]);

192 i‡(
ªt
 < 0)

193 
îr_ªt_sdi
;

196 
	`INIT_DELAYED_WORK
(&
c⁄åﬁÀr
->
w‹k
, 
Àd_nu801_w‹k
);

197 
	`scheduÀ_dñayed_w‹k
(&
c⁄åﬁÀr
->
w‹k
, 0);

201 
îr_ªt_Ài
:

202 i‡(
c⁄åﬁÀr
->
Ài
 >= 0)

203 
	`gpio_‰ì
(
c⁄åﬁÀr
->
Ài
);

204 
îr_ªt_sdi
:

205 
	`gpio_‰ì
(
c⁄åﬁÀr
->
sdi
);

206 
îr_ªt_cki
:

207 
	`gpio_‰ì
(
c⁄åﬁÀr
->
cki
);

208 
îr_‰ì_chaö
:

209 
	`k‰ì
(
c⁄åﬁÀr
->
Àd_chaö
);

211  
ªt
;

212 
	}
}

214 
	$Àd_nu801_dñëe_chaö
(
Àd_nu801_d©a
 *
c⁄åﬁÀr
)

216 
Àd_nu801_Àd_d©a
 *
Àd_chaö
;

217 
Àd_nu801_Àd_d©a
 *
Àd
;

218 
ödex
;

219 
num_Àds
;

221 
Àd_chaö
 = 
c⁄åﬁÀr
->led_chain;

222 
c⁄åﬁÀr
->
Àd_chaö
 = 0;

223 
num_Àds
 = 
c⁄åﬁÀr
->num_leds;

224 
c⁄åﬁÀr
->
num_Àds
 = 0;

225 
	`ˇn˚l_dñayed_w‹k_sync
(&
c⁄åﬁÀr
->
w‹k
);

227 
ödex
 = 0; index < 
num_Àds
; index++) {

228 
Àd
 = &
Àd_chaö
[
ödex
];

229 
	`Àd_˛assdev_uƒegi°î
(&
Àd
->
cdev
);

232 
	`gpio_‰ì
(
c⁄åﬁÀr
->
cki
);

233 
	`gpio_‰ì
(
c⁄åﬁÀr
->
sdi
);

234 i‡(
c⁄åﬁÀr
->
Ài
 >= 0)

235 
	`gpio_‰ì
(
c⁄åﬁÀr
->
Ài
);

237 
	`k‰ì
(
Àd_chaö
);

238 
	}
}

240 
Àd_nu801_d©a
 *

241 
	$Àds_nu801_¸óã_of
(
∂©f‹m_devi˚
 *
pdev
)

243 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
, *
chûd
;

244 
Àd_nu801_d©a
 *
c⁄åﬁÀrs
;

245 
cou¡
 = 0, 
ªt
;

246 
i
 = 0;

248 
	`f‹_óch_chûd_of_node
(
≈
, 
chûd
)

249 
cou¡
++;

250 i‡(!
cou¡
)

251  
NULL
;

253 
c⁄åﬁÀrs
 = 
	`kzÆloc
((
Àd_nu801_d©a
Ë* 
cou¡
,

254 
GFP_KERNEL
);

255 i‡(!
c⁄åﬁÀrs
)

256  
NULL
;

258 
	`f‹_óch_chûd_of_node
(
≈
, 
chûd
) {

259 c⁄° *
°©e
;

260 
Àd_nu801_ãm∂©e
 
ãm∂©e
 = {};

261 
devi˚_node
 *
cﬁ‹s
;

262 
jj
;

264 
ãm∂©e
.
cki
 = 
	`of_gë_«med_gpio_Êags
(
chûd
, "cki", 0, 
NULL
);

265 
ãm∂©e
.
sdi
 = 
	`of_gë_«med_gpio_Êags
(
chûd
, "sdi", 0, 
NULL
);

266 i‡(
	`of_föd_¥›îty
(
chûd
, "Ài", 
NULL
)) {

267 
ãm∂©e
.
Ài
 = 
	`of_gë_«med_gpio_Êags
(
chûd
, "lei",

268 0, 
NULL
);

270 
ãm∂©e
.
Ài
 = -1;

272 
	`of_¥›îty_ªad_u32
(
chûd
, "ndñay", &
ãm∂©e
.
ndñay
);

273 
	`of_¥›îty_ªad_u32
(
chûd
, "num_Àds", &
ãm∂©e
.
num_Àds
);

274 
ãm∂©e
.
«me
 = 
	`of_gë_¥›îty
(
chûd
, "œbñ", 
NULL
) ? :

275 
chûd
->
«me
;

276 
ãm∂©e
.
deÁu…_åiggî
 = 
	`of_gë_¥›îty
(
chûd
,

277 "deÁu…-åiggî", 
NULL
);

279 
jj
 = 0;

280 
	`f‹_óch_chûd_of_node
(
chûd
, 
cﬁ‹s
) {

281 
ãm∂©e
.
Àd_cﬁ‹s
[
jj
] = 
	`of_gë_¥›îty
(
cﬁ‹s
,

282 "œbñ", 
NULL
);

283 
°©e
 = 
	`of_gë_¥›îty
(
cﬁ‹s
, "°©e", 
NULL
);

284 i‡(!
	`°∫cmp
(
°©e
, "off", 3))

285 
ãm∂©e
.
öô_brighäess
[
jj
] = 
LED_OFF
;

286 i‡(!
	`°∫cmp
(
°©e
, "half", 4))

287 
ãm∂©e
.
öô_brighäess
[
jj
] = 
LED_HALF
;

288 i‡(!
	`°∫cmp
(
°©e
, "full", 4))

289 
ãm∂©e
.
öô_brighäess
[
jj
] = 
LED_FULL
;

290 
jj
++;

293 
ªt
 = 
	`Àd_nu801_¸óã_chaö
(&
ãm∂©e
,

294 &
c⁄åﬁÀrs
[
i
],

295 &
pdev
->
dev
);

296 i‡(
ªt
 < 0)

297 
îr
;

298 
i
++;

301  
c⁄åﬁÀrs
;

303 
îr
:

304 
i
 = i - 1; i >= 0; i--)

305 
	`Àd_nu801_dñëe_chaö
(&
c⁄åﬁÀrs
[
i
]);

306 
	`k‰ì
(
c⁄åﬁÀrs
);

307  
NULL
;

308 
	}
}

310 
	$Àd_nu801_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

312 
Àd_nu801_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

313 
Àd_nu801_d©a
 *
c⁄åﬁÀrs
;

314 
i
, 
ªt
 = 0;

316 i‡(!(
pd©a
 &&Öd©a->
num_c⁄åﬁÀrs
)) {

317 
c⁄åﬁÀrs
 = 
	`Àds_nu801_¸óã_of
(
pdev
);

318 i‡(!
c⁄åﬁÀrs
)

319  -
ENODEV
;

322 
c⁄åﬁÀrs
 = 
	`kzÆloc
((
Àd_nu801_d©a
) *

323 
pd©a
->
num_c⁄åﬁÀrs
, 
GFP_KERNEL
);

324 i‡(!
c⁄åﬁÀrs
)

325  -
ENOMEM
;

327 
i
 = 0; i < 
pd©a
->
num_c⁄åﬁÀrs
; i++) {

328 
ªt
 = 
	`Àd_nu801_¸óã_chaö
(&
pd©a
->
ãm∂©e
[
i
],

329 &
c⁄åﬁÀrs
[
i
],

330 &
pdev
->
dev
);

331 i‡(
ªt
 < 0)

332 
îr
;

335 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
c⁄åﬁÀrs
);

339 
îr
:

340 
i
 = i - 1; i >= 0; i--)

341 
	`Àd_nu801_dñëe_chaö
(&
c⁄åﬁÀrs
[
i
]);

343 
	`k‰ì
(
c⁄åﬁÀrs
);

345  
ªt
;

346 
	}
}

348 
	$Àd_nu801_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

350 
i
;

351 
Àd_nu801_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

352 
Àd_nu801_d©a
 *
c⁄åﬁÀrs
;

354 
c⁄åﬁÀrs
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

356 
i
 = 0; i < 
pd©a
->
num_c⁄åﬁÀrs
; i++)

357 
	`Àd_nu801_dñëe_chaö
(&
c⁄åﬁÀrs
[
i
]);

359 
	`k‰ì
(
c⁄åﬁÀrs
);

362 
	}
}

364 c⁄° 
of_devi˚_id
 
	gof_numí_Àds_m©ch
[] = {

365 { .
com∑tibÀ
 = "numen,leds-nu801", },

368 
MODULE_DEVICE_TABLE
(
of
, 
of_pwm_Àds_m©ch
);

370 
∂©f‹m_drivî
 
	gÀd_nu801_drivî
 = {

371 .
¥obe
 = 
Àd_nu801_¥obe
,

372 .
	gªmove
 = 
Àd_nu801_ªmove
,

373 .
	gdrivî
 = {

374 .
«me
 = "leds-nu801",

375 .
	gow√r
 = 
THIS_MODULE
,

376 .
	gof_m©ch_èbÀ
 = 
of_numí_Àds_m©ch
,

380 
__öô
 
	$Àd_nu801_öô
()

382  
	`∂©f‹m_drivî_ªgi°î
(&
Àd_nu801_drivî
);

383 
	}
}

385 
__exô
 
	$Àd_nu801_exô
()

387 
	`∂©f‹m_drivî_uƒegi°î
(&
Àd_nu801_drivî
);

388 
	}
}

390 
moduÀ_öô
(
Àd_nu801_öô
);

391 
moduÀ_exô
(
Àd_nu801_exô
);

393 
MODULE_AUTHOR
("Kevin Paul Herbert <kph@meraki.net>");

394 
MODULE_DESCRIPTION
("NU801 LED driver");

395 
MODULE_LICENSE
("GPL v2");

396 
MODULE_ALIAS
("platform:leds-nu801");

	@linux/ar71xx/files/drivers/leds/leds-rb750.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<löux/Àds.h
>

16 
	~<löux/¶ab.h
>

18 
	~<asm/mach-©h79/mach-rb750.h
>

20 
	#DRV_NAME
 "Àds-rb750"

	)

22 
	srb750_Àd_dev
 {

23 
Àd_˛assdev
 
	mcdev
;

24 
u32
 
	mmask
;

25 
	ma˘ive_low
;

26 (*
	mœtch_ch™ge
)(
u32
 
	m˛ór
, u32 
	m£t
);

29 
	srb750_Àd_drvd©a
 {

30 
rb750_Àd_dev
 *
	mÀd_devs
;

31 
	mnum_Àds
;

34 
ölöe
 
rb750_Àd_dev
 *
	$to_rbÀd
(
Àd_˛assdev
 *
Àd_cdev
)

36  (
rb750_Àd_dev
 *)
	`c⁄èöî_of
(
Àd_cdev
,

37 
rb750_Àd_dev
, 
cdev
);

38 
	}
}

40 
	$rb750_Àd_brighäess_£t
(
Àd_˛assdev
 *
Àd_cdev
,

41 
Àd_brighäess
 
vÆue
)

43 
rb750_Àd_dev
 *
rbÀd
 = 
	`to_rbÀd
(
Àd_cdev
);

44 
Àvñ
;

46 
Àvñ
 = (
vÆue
 =
LED_OFF
) ? 0 : 1;

47 
Àvñ
 ^
rbÀd
->
a˘ive_low
;

49 i‡(
Àvñ
)

50 
rbÀd
->
	`œtch_ch™ge
(0,ÑbÀd->
mask
);

52 
rbÀd
->
	`œtch_ch™ge
‘bÀd->
mask
, 0);

53 
	}
}

55 
	$rb750_Àd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

57 
rb750_Àd_∂©f‹m_d©a
 *
pd©a
;

58 
rb750_Àd_drvd©a
 *
drvd©a
;

59 
ªt
 = 0;

60 
i
;

62 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

63 i‡(!
pd©a
)

64  -
EINVAL
;

66 
drvd©a
 = 
	`kzÆloc
((
rb750_Àd_drvd©a
) +

67 (
rb750_Àd_dev
Ë* 
pd©a
->
num_Àds
,

68 
GFP_KERNEL
);

69 i‡(!
drvd©a
)

70  -
ENOMEM
;

72 
drvd©a
->
num_Àds
 = 
pd©a
->num_leds;

73 
drvd©a
->
Àd_devs
 = (
rb750_Àd_dev
 *) &drvdata[1];

75 
i
 = 0; i < 
drvd©a
->
num_Àds
; i++) {

76 
rb750_Àd_dev
 *
rbÀd
 = &
drvd©a
->
Àd_devs
[
i
];

77 
rb750_Àd_d©a
 *
Àd_d©a
 = &
pd©a
->
Àds
[
i
];

79 
rbÀd
->
cdev
.
«me
 = 
Àd_d©a
->name;

80 
rbÀd
->
cdev
.
deÁu…_åiggî
 = 
Àd_d©a
->default_trigger;

81 
rbÀd
->
cdev
.
brighäess_£t
 = 
rb750_Àd_brighäess_£t
;

82 
rbÀd
->
cdev
.
brighäess
 = 
LED_OFF
;

84 
rbÀd
->
mask
 = 
Àd_d©a
->mask;

85 
rbÀd
->
a˘ive_low
 = !!
Àd_d©a
->active_low;

86 
rbÀd
->
œtch_ch™ge
 = 
pd©a
->latch_change;

88 
ªt
 = 
	`Àd_˛assdev_ªgi°î
(&
pdev
->
dev
, &
rbÀd
->
cdev
);

89 i‡(
ªt
)

90 
îr
;

93 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
drvd©a
);

96 
îr
:

97 
i
 = i - 1; i >= 0; i--)

98 
	`Àd_˛assdev_uƒegi°î
(&
drvd©a
->
Àd_devs
[
i
].
cdev
);

100 
	`k‰ì
(
drvd©a
);

101  
ªt
;

102 
	}
}

104 
	$rb750_Àd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

106 
rb750_Àd_drvd©a
 *
drvd©a
;

107 
i
;

109 
drvd©a
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

110 
i
 = 0; i < 
drvd©a
->
num_Àds
; i++)

111 
	`Àd_˛assdev_uƒegi°î
(&
drvd©a
->
Àd_devs
[
i
].
cdev
);

113 
	`k‰ì
(
drvd©a
);

115 
	}
}

117 
∂©f‹m_drivî
 
	grb750_Àd_drivî
 = {

118 .
¥obe
 = 
rb750_Àd_¥obe
,

119 .
	gªmove
 = 
rb750_Àd_ªmove
,

120 .
	gdrivî
 = {

121 .
«me
 = 
DRV_NAME
,

122 .
	gow√r
 = 
THIS_MODULE
,

126 
MODULE_ALIAS
("platform:leds-rb750");

128 
__öô
 
	$rb750_Àd_öô
()

130  
	`∂©f‹m_drivî_ªgi°î
(&
rb750_Àd_drivî
);

131 
	}
}

133 
__exô
 
	$rb750_Àd_exô
()

135 
	`∂©f‹m_drivî_uƒegi°î
(&
rb750_Àd_drivî
);

136 
	}
}

138 
moduÀ_öô
(
rb750_Àd_öô
);

139 
moduÀ_exô
(
rb750_Àd_exô
);

141 
MODULE_DESCRIPTION
(
DRV_NAME
);

142 
MODULE_DESCRIPTION
("LED driver forÅhe RouterBOARD 750");

143 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

144 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/leds/leds-wndr3700-usb.c

11 
	~<löux/Àds.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

15 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

16 
	~<asm/mach-©h79/©h79.h
>

18 
	#DRIVER_NAME
 "wndr3700-Àd-usb"

	)

20 
	$wndr3700_usb_Àd_£t
(
Àd_˛assdev
 *
cdev
,

21 
Àd_brighäess
 
brighäess
)

23 i‡(
brighäess
)

24 
	`©h79_devi˚_ª£t_˛ór
(
AR71XX_RESET_GE1_PHY
);

26 
	`©h79_devi˚_ª£t_£t
(
AR71XX_RESET_GE1_PHY
);

27 
	}
}

29 
Àd_brighäess
 
	$wndr3700_usb_Àd_gë
(
Àd_˛assdev
 *
cdev
)

31  
	`©h79_devi˚_ª£t_gë
(
AR71XX_RESET_GE1_PHY
Ë? 
LED_OFF
 : 
LED_FULL
;

32 
	}
}

34 
Àd_˛assdev
 
	gwndr3700_usb_Àd
 = {

35 .
«me
 = "netgear:green:usb",

36 .
	gbrighäess_£t
 = 
wndr3700_usb_Àd_£t
,

37 .
	gbrighäess_gë
 = 
wndr3700_usb_Àd_gë
,

40 
	$wndr3700_usb_Àd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

42  
	`Àd_˛assdev_ªgi°î
(&
pdev
->
dev
, &
wndr3700_usb_Àd
);

43 
	}
}

45 
	$wndr3700_usb_Àd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

47 
	`Àd_˛assdev_uƒegi°î
(&
wndr3700_usb_Àd
);

49 
	}
}

51 
∂©f‹m_drivî
 
	gwndr3700_usb_Àd_drivî
 = {

52 .
¥obe
 = 
wndr3700_usb_Àd_¥obe
,

53 .
	gªmove
 = 
wndr3700_usb_Àd_ªmove
,

54 .
	gdrivî
 = {

55 .
«me
 = 
DRIVER_NAME
,

56 .
	gow√r
 = 
THIS_MODULE
,

60 
__öô
 
	$wndr3700_usb_Àd_öô
()

62  
	`∂©f‹m_drivî_ªgi°î
(&
wndr3700_usb_Àd_drivî
);

63 
	}
}

65 
__exô
 
	$wndr3700_usb_Àd_exô
()

67 
	`∂©f‹m_drivî_uƒegi°î
(&
wndr3700_usb_Àd_drivî
);

68 
	}
}

70 
moduÀ_öô
(
wndr3700_usb_Àd_öô
);

71 
moduÀ_exô
(
wndr3700_usb_Àd_exô
);

73 
MODULE_DESCRIPTION
("USB LED driver forÅhe NETGEAR WNDR3700");

74 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

75 
MODULE_LICENSE
("GPL v2");

76 
MODULE_ALIAS
("∂©f‹m:" 
DRIVER_NAME
);

	@linux/ar71xx/files/drivers/mtd/cybertan_part.c

24 
	~<löux/kî√l.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/vmÆloc.h
>

29 
	~<löux/mtd/mtd.h
>

30 
	~<löux/mtd/∑πôi⁄s.h
>

31 
	~<löux/vîsi⁄.h
>

33 
	scybîèn_hódî
 {

34 
	mmagic
[4];

35 
u8
 
	mªs1
[4];

36 
	mfw_d©e
[3];

37 
	mfw_vî
[3];

38 
	mid
[4];

39 
	mhw_vî
;

40 
	munu£d
;

41 
u8
 
	mÊags
[2];

42 
u8
 
	mªs2
[10];

45 
	#TRX_PARTS
 6

	)

46 
	#TRX_MAGIC
 0x30524448

	)

47 
	#TRX_MAX_OFFSET
 3

	)

49 
	såx_hódî
 {

50 
uöt32_t
 
	mmagic
;

51 
uöt32_t
 
	mÀn
;

52 
uöt32_t
 
	m¸c32
;

53 
uöt32_t
 
	mÊag_vîsi⁄
;

54 
uöt32_t
 
	moff£ts
[
TRX_MAX_OFFSET
];

57 
	#IH_MAGIC
 0x27051956

	)

58 
	#IH_NMLEN
 32

	)

60 
	suimage_hódî
 {

61 
uöt32_t
 
	mih_magic
;

62 
uöt32_t
 
	mih_h¸c
;

63 
uöt32_t
 
	mih_time
;

64 
uöt32_t
 
	mih_size
;

65 
uöt32_t
 
	mih_lﬂd
;

66 
uöt32_t
 
	mih_ï
;

67 
uöt32_t
 
	mih_d¸c
;

68 
uöt8_t
 
	mih_os
;

69 
uöt8_t
 
	mih_¨ch
;

70 
uöt8_t
 
	mih_ty≥
;

71 
uöt8_t
 
	mih_comp
;

72 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

75 
	sfúmw¨e_hódî
 {

76 
cybîèn_hódî
 
	mcybîèn
;

77 
åx_hódî
 
	måx
;

78 
uimage_hódî
 
	muimage
;

79 } 
	g__∑cked
;

81 
	#UBOOT_LEN
 0x40000

	)

82 
	#ART_LEN
 0x10000

	)

83 
	#NVRAM_LEN
 0x10000

	)

85 
cybîèn_∑r£_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

86 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

87 
mtd_∑πôi⁄
 **
µ¨ts
,

89 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

91 
mtd_∑π_∑r£r_d©a
 *
d©a
)

93 
fúmw¨e_hódî
 *
	ghódî
;

94 
åx_hódî
 *
	gthódî
;

95 
uimage_hódî
 *
	guhódî
;

96 
mtd_∑πôi⁄
 *
	gåx_∑πs
;

97 
size_t
 
	gªéí
;

98 
	gkî√l_Àn
;

99 
	guboŸ_Àn
;

100 
	gnvøm_Àn
;

101 
	g¨t_Àn
;

102 
	gªt
;

104 
	guboŸ_Àn
 = 
max_t
(, 
ma°î
->
îa£size
, 
UBOOT_LEN
);

105 
	gnvøm_Àn
 = 
max_t
(, 
ma°î
->
îa£size
, 
NVRAM_LEN
);

106 
	g¨t_Àn
 = 
max_t
(, 
ma°î
->
îa£size
, 
ART_LEN
);

108 
	gåx_∑πs
 = 
kzÆloc
(
TRX_PARTS
 * (
mtd_∑πôi⁄
),

109 
GFP_KERNEL
);

110 i‡(!
	gåx_∑πs
) {

111 
	gªt
 = -
ENOMEM
;

112 
	gout
;

115 
	ghódî
 = 
vmÆloc
((*
hódî
));

116 i‡(!
	ghódî
) {

117  -
	gENOMEM
;

118 
	g‰ì_∑πs
;

121 
	gªt
 = 
mtd_ªad
(
ma°î
, 
uboŸ_Àn
, (*
hódî
),

122 &
ªéí
, (*Ë
hódî
);

123 i‡(
	gªt
)

124 
	g‰ì_hdr
;

126 i‡(
	gªéí
 !(*
hódî
)) {

127 
ªt
 = -
EIO
;

128 
	g‰ì_hdr
;

131 
	gthódî
 = &
hódî
->
åx
;

132 i‡(
À32_to_˝u
(
thódî
->
magic
Ë!
TRX_MAGIC
) {

133 
¥ötk
(
KERN_NOTICE
 "%s:ÇÿTRX hódî found\n", 
ma°î
->
«me
);

134 
	g‰ì_hdr
;

137 
	guhódî
 = &
hódî
->
uimage
;

138 i‡(
	guhódî
->
	gih_magic
 !
IH_MAGIC
) {

139 
¥ötk
(
KERN_NOTICE
 "%s:ÇÿuImagêfound\n", 
ma°î
->
«me
);

140 
	g‰ì_hdr
;

143 
	gkî√l_Àn
 = 
À32_to_˝u
(
thódî
->
off£ts
[1]) +

144 (
cybîèn_hódî
);

146 
	gåx_∑πs
[0].
	g«me
 = "u-boot";

147 
	gåx_∑πs
[0].
	goff£t
 = 0;

148 
	gåx_∑πs
[0].
	gsize
 = 
uboŸ_Àn
;

149 
	gåx_∑πs
[0].
	gmask_Êags
 = 
MTD_WRITEABLE
;

151 
	gåx_∑πs
[1].
	g«me
 = "kernel";

152 
	gåx_∑πs
[1].
	goff£t
 = 
åx_∑πs
[0].
off£t
 +Årx_∑πs[0].
size
;

153 
	gåx_∑πs
[1].
	gsize
 = 
kî√l_Àn
;

154 
	gåx_∑πs
[1].
	gmask_Êags
 = 0;

156 
	gåx_∑πs
[2].
	g«me
 = "rootfs";

157 
	gåx_∑πs
[2].
	goff£t
 = 
åx_∑πs
[1].
off£t
 +Årx_∑πs[1].
size
;

158 
	gåx_∑πs
[2].
	gsize
 = 
ma°î
->
size
 - 
uboŸ_Àn
 - 
nvøm_Àn
 - 
¨t_Àn
 -

159 
åx_∑πs
[1].
size
;

160 
	gåx_∑πs
[2].
	gmask_Êags
 = 0;

162 
	gåx_∑πs
[3].
	g«me
 = "nvram";

163 
	gåx_∑πs
[3].
	goff£t
 = 
ma°î
->
size
 - 
nvøm_Àn
 - 
¨t_Àn
;

164 
	gåx_∑πs
[3].
	gsize
 = 
nvøm_Àn
;

165 
	gåx_∑πs
[3].
	gmask_Êags
 = 
MTD_WRITEABLE
;

167 
	gåx_∑πs
[4].
	g«me
 = "art";

168 
	gåx_∑πs
[4].
	goff£t
 = 
ma°î
->
size
 - 
¨t_Àn
;

169 
	gåx_∑πs
[4].
	gsize
 = 
¨t_Àn
;

170 
	gåx_∑πs
[4].
	gmask_Êags
 = 
MTD_WRITEABLE
;

172 
	gåx_∑πs
[5].
	g«me
 = "firmware";

173 
	gåx_∑πs
[5].
	goff£t
 = 
uboŸ_Àn
;

174 
	gåx_∑πs
[5].
	gsize
 = 
ma°î
->
size
 - 
uboŸ_Àn
 - 
nvøm_Àn
 - 
¨t_Àn
;

175 
	gåx_∑πs
[5].
	gmask_Êags
 = 0;

177 
v‰ì
(
hódî
);

179 *
	gµ¨ts
 = 
åx_∑πs
;

180  
	gTRX_PARTS
;

182 
	g‰ì_hdr
:

183 
v‰ì
(
hódî
);

184 
	g‰ì_∑πs
:

185 
k‰ì
(
åx_∑πs
);

186 
	gout
:

187  
ªt
;

190 
mtd_∑π_∑r£r
 
	gcybîèn_∑r£r
 = {

191 .
ow√r
 = 
THIS_MODULE
,

192 .
	g∑r£_‚
 = 
cybîèn_∑r£_∑πôi⁄s
,

193 .
	g«me
 = "cybertan",

196 
__öô
 
	$cybîèn_∑r£r_öô
()

198 
	`ªgi°î_mtd_∑r£r
(&
cybîèn_∑r£r
);

201 
	}
}

203 
moduÀ_öô
(
cybîèn_∑r£r_öô
);

205 
MODULE_LICENSE
("GPL");

206 
MODULE_AUTHOR
("Christian Daniel <cd@maintech.de>");

	@linux/ar71xx/files/drivers/mtd/nand/ar934x_nfc.c

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/öãºu±.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/dma-m≠pög.h
>

16 
	~<löux/mtd/mtd.h
>

17 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

18 
	~<löux/mtd/«nd.h
>

20 
	~<löux/mtd/øw«nd.h
>

22 
	~<löux/mtd/∑πôi⁄s.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/dñay.h
>

25 
	~<löux/¶ab.h
>

27 
	~<löux/∂©f‹m/¨934x_nfc.h
>

29 
	#AR934X_NFC_REG_CMD
 0x00

	)

30 
	#AR934X_NFC_REG_CTRL
 0x04

	)

31 
	#AR934X_NFC_REG_STATUS
 0x08

	)

32 
	#AR934X_NFC_REG_INT_MASK
 0x0c

	)

33 
	#AR934X_NFC_REG_INT_STATUS
 0x10

	)

34 
	#AR934X_NFC_REG_ECC_CTRL
 0x14

	)

35 
	#AR934X_NFC_REG_ECC_OFFSET
 0x18

	)

36 
	#AR934X_NFC_REG_ADDR0_0
 0x1c

	)

37 
	#AR934X_NFC_REG_ADDR0_1
 0x24

	)

38 
	#AR934X_NFC_REG_ADDR1_0
 0x20

	)

39 
	#AR934X_NFC_REG_ADDR1_1
 0x28

	)

40 
	#AR934X_NFC_REG_SPARE_SIZE
 0x30

	)

41 
	#AR934X_NFC_REG_PROTECT
 0x38

	)

42 
	#AR934X_NFC_REG_LOOKUP_EN
 0x40

	)

43 
	#AR934X_NFC_REG_LOOKUP
(
_x
Ë(0x44 + (
_i
Ë* 4)

	)

44 
	#AR934X_NFC_REG_DMA_ADDR
 0x64

	)

45 
	#AR934X_NFC_REG_DMA_COUNT
 0x68

	)

46 
	#AR934X_NFC_REG_DMA_CTRL
 0x6c

	)

47 
	#AR934X_NFC_REG_MEM_CTRL
 0x80

	)

48 
	#AR934X_NFC_REG_DATA_SIZE
 0x84

	)

49 
	#AR934X_NFC_REG_READ_STATUS
 0x88

	)

50 
	#AR934X_NFC_REG_TIME_SEQ
 0x8c

	)

51 
	#AR934X_NFC_REG_TIMINGS_ASYN
 0x90

	)

52 
	#AR934X_NFC_REG_TIMINGS_SYN
 0x94

	)

53 
	#AR934X_NFC_REG_FIFO_DATA
 0x98

	)

54 
	#AR934X_NFC_REG_TIME_MODE
 0x9c

	)

55 
	#AR934X_NFC_REG_DMA_ADDR_OFFS
 0xa0

	)

56 
	#AR934X_NFC_REG_FIFO_INIT
 0xb0

	)

57 
	#AR934X_NFC_REG_GEN_SEQ_CTRL
 0xb4

	)

59 
	#AR934X_NFC_CMD_CMD_SEQ_S
 0

	)

60 
	#AR934X_NFC_CMD_CMD_SEQ_M
 0x3f

	)

61 
	#AR934X_NFC_CMD_SEQ_1C
 0x00

	)

62 
	#AR934X_NFC_CMD_SEQ_ERASE
 0x0e

	)

63 
	#AR934X_NFC_CMD_SEQ_12
 0x0c

	)

64 
	#AR934X_NFC_CMD_SEQ_1C1AXR
 0x21

	)

65 
	#AR934X_NFC_CMD_SEQ_S
 0x24

	)

66 
	#AR934X_NFC_CMD_SEQ_1C3AXR
 0x27

	)

67 
	#AR934X_NFC_CMD_SEQ_1C5A1CXR
 0x2a

	)

68 
	#AR934X_NFC_CMD_SEQ_18
 0x32

	)

69 
	#AR934X_NFC_CMD_INPUT_SEL_SIU
 0

	)

70 
	#AR934X_NFC_CMD_INPUT_SEL_DMA
 
	`BIT
(6)

	)

71 
	#AR934X_NFC_CMD_ADDR_SEL_0
 0

	)

72 
	#AR934X_NFC_CMD_ADDR_SEL_1
 
	`BIT
(7)

	)

73 
	#AR934X_NFC_CMD_CMD0_S
 8

	)

74 
	#AR934X_NFC_CMD_CMD0_M
 0xff

	)

75 
	#AR934X_NFC_CMD_CMD1_S
 16

	)

76 
	#AR934X_NFC_CMD_CMD1_M
 0xff

	)

77 
	#AR934X_NFC_CMD_CMD2_S
 24

	)

78 
	#AR934X_NFC_CMD_CMD2_M
 0xff

	)

80 
	#AR934X_NFC_CTRL_ADDR_CYCLE0_M
 0x7

	)

81 
	#AR934X_NFC_CTRL_ADDR_CYCLE0_S
 0

	)

82 
	#AR934X_NFC_CTRL_SPARE_EN
 
	`BIT
(3)

	)

83 
	#AR934X_NFC_CTRL_INT_EN
 
	`BIT
(4)

	)

84 
	#AR934X_NFC_CTRL_ECC_EN
 
	`BIT
(5)

	)

85 
	#AR934X_NFC_CTRL_BLOCK_SIZE_S
 6

	)

86 
	#AR934X_NFC_CTRL_BLOCK_SIZE_M
 0x3

	)

87 
	#AR934X_NFC_CTRL_BLOCK_SIZE_32
 0

	)

88 
	#AR934X_NFC_CTRL_BLOCK_SIZE_64
 1

	)

89 
	#AR934X_NFC_CTRL_BLOCK_SIZE_128
 2

	)

90 
	#AR934X_NFC_CTRL_BLOCK_SIZE_256
 3

	)

91 
	#AR934X_NFC_CTRL_PAGE_SIZE_S
 8

	)

92 
	#AR934X_NFC_CTRL_PAGE_SIZE_M
 0x7

	)

93 
	#AR934X_NFC_CTRL_PAGE_SIZE_256
 0

	)

94 
	#AR934X_NFC_CTRL_PAGE_SIZE_512
 1

	)

95 
	#AR934X_NFC_CTRL_PAGE_SIZE_1024
 2

	)

96 
	#AR934X_NFC_CTRL_PAGE_SIZE_2048
 3

	)

97 
	#AR934X_NFC_CTRL_PAGE_SIZE_4096
 4

	)

98 
	#AR934X_NFC_CTRL_PAGE_SIZE_8192
 5

	)

99 
	#AR934X_NFC_CTRL_PAGE_SIZE_16384
 6

	)

100 
	#AR934X_NFC_CTRL_CUSTOM_SIZE_EN
 
	`BIT
(11)

	)

101 
	#AR934X_NFC_CTRL_IO_WIDTH_8BITS
 0

	)

102 
	#AR934X_NFC_CTRL_IO_WIDTH_16BITS
 
	`BIT
(12)

	)

103 
	#AR934X_NFC_CTRL_LOOKUP_EN
 
	`BIT
(13)

	)

104 
	#AR934X_NFC_CTRL_PROT_EN
 
	`BIT
(14)

	)

105 
	#AR934X_NFC_CTRL_WORK_MODE_ASYNC
 0

	)

106 
	#AR934X_NFC_CTRL_WORK_MODE_SYNC
 
	`BIT
(15)

	)

107 
	#AR934X_NFC_CTRL_ADDR0_AUTO_INC
 
	`BIT
(16)

	)

108 
	#AR934X_NFC_CTRL_ADDR1_AUTO_INC
 
	`BIT
(17)

	)

109 
	#AR934X_NFC_CTRL_ADDR_CYCLE1_M
 0x7

	)

110 
	#AR934X_NFC_CTRL_ADDR_CYCLE1_S
 18

	)

111 
	#AR934X_NFC_CTRL_SMALL_PAGE
 
	`BIT
(21)

	)

113 
	#AR934X_NFC_DMA_CTRL_DMA_START
 
	`BIT
(7)

	)

114 
	#AR934X_NFC_DMA_CTRL_DMA_DIR_WRITE
 0

	)

115 
	#AR934X_NFC_DMA_CTRL_DMA_DIR_READ
 
	`BIT
(6)

	)

116 
	#AR934X_NFC_DMA_CTRL_DMA_MODE_SG
 
	`BIT
(5)

	)

117 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_S
 2

	)

118 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_0
 0

	)

119 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_1
 1

	)

120 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_2
 2

	)

121 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_3
 3

	)

122 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_4
 4

	)

123 
	#AR934X_NFC_DMA_CTRL_DMA_BURST_5
 5

	)

124 
	#AR934X_NFC_DMA_CTRL_ERR_FLAG
 
	`BIT
(1)

	)

125 
	#AR934X_NFC_DMA_CTRL_DMA_READY
 
	`BIT
(0)

	)

127 
	#AR934X_NFC_INT_DEV_RDY
(
_x
Ë
	`BIT
(4 + (_x))

	)

128 
	#AR934X_NFC_INT_CMD_END
 
	`BIT
(1)

	)

130 
	#AR934X_NFC_ECC_CTRL_ERR_THRES_S
 8

	)

131 
	#AR934X_NFC_ECC_CTRL_ERR_THRES_M
 0x1f

	)

132 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_S
 5

	)

133 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_M
 0x7

	)

134 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_2
 0

	)

135 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_4
 1

	)

136 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_6
 2

	)

137 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_8
 3

	)

138 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_10
 4

	)

139 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_12
 5

	)

140 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_14
 6

	)

141 
	#AR934X_NFC_ECC_CTRL_ECC_CAP_16
 7

	)

142 
	#AR934X_NFC_ECC_CTRL_ERR_OVER
 
	`BIT
(2)

	)

143 
	#AR934X_NFC_ECC_CTRL_ERR_UNCORRECT
 
	`BIT
(1)

	)

144 
	#AR934X_NFC_ECC_CTRL_ERR_CORRECT
 
	`BIT
(0)

	)

146 
	#AR934X_NFC_ECC_OFFS_OFSET_M
 0xffff

	)

149 
	#AR934X_NFC_TIME_SEQ_DEFAULT
 0x7fff

	)

150 
	#AR934X_NFC_TIMINGS_ASYN_DEFAULT
 0x22

	)

151 
	#AR934X_NFC_TIMINGS_SYN_DEFAULT
 0xf

	)

153 
	#AR934X_NFC_ID_BUF_SIZE
 8

	)

154 
	#AR934X_NFC_DEV_READY_TIMEOUT
 25

	)

155 
	#AR934X_NFC_DMA_READY_TIMEOUT
 25

	)

156 
	#AR934X_NFC_DONE_TIMEOUT
 1000

	)

157 
	#AR934X_NFC_DMA_RETRIES
 20

	)

159 
	#AR934X_NFC_USE_IRQ
 
åue


	)

160 
	#AR934X_NFC_IRQ_MASK
 
	`AR934X_NFC_INT_DEV_RDY
(0)

	)

162 
	#AR934X_NFC_GENSEQ_SMALL_PAGE_READ
 0x30043

	)

164 #unde‡
AR934X_NFC_DEBUG_DATA


165 #unde‡
AR934X_NFC_DEBUG


167 
	g¨934x_nfc
;

169 
ölöe
 
__©åibuã__
 ((
	$f‹m©
 (
¥ötf
, 2, 3)))

170 
	$_nfc_dbg
(
¨934x_nfc
 *
nfc
, c⁄° *
fmt
, ...)

172 
	}
}

174 #ifde‡
AR934X_NFC_DEBUG


175 
	#nfc_dbg
(
_nfc
, 
fmt
, ...) \

176 
	`dev_öfo
((
_nfc
)->
∑ª¡
, 
fmt
, ##
__VA_ARGS__
)

	)

178 
	#nfc_dbg
(
_nfc
, 
fmt
, ...) \

179 
	`_nfc_dbg
((
_nfc
), 
fmt
, ##
__VA_ARGS__
)

	)

182 #ifde‡
AR934X_NFC_DEBUG_DATA


184 
	$nfc_debug_d©a
(c⁄° *
œbñ
, *
d©a
, 
Àn
)

186 
	`¥öt_hex_dump
(
KERN_WARNING
, 
œbñ
, 
DUMP_PREFIX_OFFSET
, 16, 1,

187 
d©a
, 
Àn
, 0);

188 
	}
}

190 
ölöe
 

191 
	$nfc_debug_d©a
(c⁄° *
œbñ
, *
d©a
, 
Àn
Ë{
	}
}

194 
	s¨934x_nfc
 {

195 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

196 
mtd_öfo
 
	mmtd
;

198 
«nd_chù
 
	m«nd_chù
;

199 
devi˚
 *
	m∑ª¡
;

200 
__iomem
 *
	mba£
;

201 (*
	m£À˘_chù
)(
	mchù_no
);

202 
boﬁ
 
	msw≠_dma
;

203 
	múq
;

204 
waô_queue_hód_t
 
	múq_waôq
;

206 
boﬁ
 
	m•urious_úq_ex≥˘ed
;

207 
u32
 
	múq_°©us
;

209 
u32
 
	m˘æ_ªg
;

210 
u32
 
	mecc_˘æ_ªg
;

211 
u32
 
	mecc_off£t_ªg
;

212 
u32
 
	mecc_thªs
;

213 
u32
 
	mecc_oob_pos
;

215 
boﬁ
 
	msmÆl_∑ge
;

216 
	maddr_cou¡0
;

217 
	maddr_cou¡1
;

219 
u8
 *
	mbuf
;

220 
dma_addr_t
 
	mbuf_dma
;

221 
	mbuf_size
;

222 
	mbuf_ödex
;

224 
boﬁ
 
	mªad_id
;

226 
	mîa£1_∑ge_addr
;

228 
	m∫dout_∑ge_addr
;

229 
	m∫dout_ªad_cmd
;

231 
	m£qö_∑ge_addr
;

232 
	m£qö_cﬁumn
;

233 
	m£qö_ªad_cmd
;

236 
¨934x_nfc_ª°¨t
(
¨934x_nfc
 *
nfc
);

238 
ölöe
 
boﬁ


239 
	$is_Æl_ff
(
u8
 *
buf
, 
Àn
)

241 
Àn
--)

242 i‡(
buf
[
Àn
] != 0xff)

243  
Ál£
;

245  
åue
;

246 
	}
}

248 
ölöe
 

249 
	$¨934x_nfc_wr
(
¨934x_nfc
 *
nfc
, 
ªg
, 
u32
 
vÆ
)

251 
	`__øw_wrôñ
(
vÆ
, 
nfc
->
ba£
 + 
ªg
);

252 
	}
}

254 
ölöe
 
u32


255 
	$¨934x_nfc_º
(
¨934x_nfc
 *
nfc
, 
ªg
)

257  
	`__øw_ªadl
(
nfc
->
ba£
 + 
ªg
);

258 
	}
}

260 
ölöe
 
¨934x_nfc_∂©f‹m_d©a
 *

261 
	$¨934x_nfc_gë_∂©f‹m_d©a
(
¨934x_nfc
 *
nfc
)

263  
nfc
->
∑ª¡
->
∂©f‹m_d©a
;

264 
	}
}

266 
ölöe
 

267 
¨934x_nfc
 *
	$mtd_to_¨934x_nfc
(
mtd_öfo
 *
mtd
)

269 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

270  
	`c⁄èöî_of
(
mtd
, 
¨934x_nfc
, mtd);

272 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

274  
	`c⁄èöî_of
(
chù
, 
¨934x_nfc
, 
«nd_chù
);

276 
	}
}

278 
mtd_öfo
 *
	$¨934x_nfc_to_mtd
(
¨934x_nfc
 *
nfc
)

280 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

281  &
nfc
->
mtd
;

283  
	`«nd_to_mtd
(&
nfc
->
«nd_chù
);

285 
	}
}

287 
ölöe
 
boﬁ
 
	$¨934x_nfc_u£_úq
(
¨934x_nfc
 *
nfc
)

289  
AR934X_NFC_USE_IRQ
;

290 
	}
}

292 
ölöe
 
	$¨934x_nfc_wrôe_cmd_ªg
(
¨934x_nfc
 *
nfc
, 
u32
 
cmd_ªg
)

294 
	`wmb
();

296 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CMD
, 
cmd_ªg
);

298 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_CMD
);

299 
	}
}

301 
boﬁ


302 
	$__¨934x_nfc_dev_ªady
(
¨934x_nfc
 *
nfc
)

304 
u32
 
°©us
;

306 
°©us
 = 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_STATUS
);

307  (
°©us
 & 0xff) == 0xff;

308 
	}
}

310 
ölöe
 
boﬁ


311 
	$__¨934x_nfc_is_dma_ªady
(
¨934x_nfc
 *
nfc
)

313 
u32
 
°©us
;

315 
°©us
 = 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_DMA_CTRL
);

316  (
°©us
 & 
AR934X_NFC_DMA_CTRL_DMA_READY
) != 0;

317 
	}
}

320 
	$¨934x_nfc_waô_dev_ªady
(
¨934x_nfc
 *
nfc
)

322 
timeout
;

324 
timeout
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(
AR934X_NFC_DEV_READY_TIMEOUT
);

326 i‡(
	`__¨934x_nfc_dev_ªady
(
nfc
))

328 } 
	`time_bef‹e
(
jiffõs
, 
timeout
);

330 
	`nfc_dbg
(
nfc
, "timeout waiting for deviceÑeady, status:%08x int:%08x\n",

331 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_STATUS
),

332 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
));

333  -
ETIMEDOUT
;

334 
	}
}

337 
	$¨934x_nfc_waô_dma_ªady
(
¨934x_nfc
 *
nfc
)

339 
timeout
;

341 
timeout
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(
AR934X_NFC_DMA_READY_TIMEOUT
);

343 i‡(
	`__¨934x_nfc_is_dma_ªady
(
nfc
))

345 } 
	`time_bef‹e
(
jiffõs
, 
timeout
);

347 
	`nfc_dbg
(
nfc
, "timeout waiting for DMAÑeady, dma_ctrl:%08x\n",

348 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_DMA_CTRL
));

349  -
ETIMEDOUT
;

350 
	}
}

353 
	$¨934x_nfc_waô_úq
(
¨934x_nfc
 *
nfc
)

355 
timeout
;

356 
ªt
;

358 
timeout
 = 
	`waô_evít_timeout
(
nfc
->
úq_waôq
,

359 (
nfc
->
úq_°©us
 & 
AR934X_NFC_IRQ_MASK
) != 0,

360 
	`m£cs_to_jiffõs
(
AR934X_NFC_DEV_READY_TIMEOUT
));

362 
ªt
 = 0;

363 i‡(!
timeout
) {

364 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_MASK
, 0);

365 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

367 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
);

369 
	`nfc_dbg
(
nfc
,

371 
nfc
->
úq_°©us
);

372 
ªt
 = -
ETIMEDOUT
;

375 
nfc
->
úq_°©us
 = 0;

376  
ªt
;

377 
	}
}

380 
	$¨934x_nfc_waô_d⁄e
(
¨934x_nfc
 *
nfc
)

382 
ªt
;

384 i‡(
	`¨934x_nfc_u£_úq
(
nfc
))

385 
ªt
 = 
	`¨934x_nfc_waô_úq
(
nfc
);

387 
ªt
 = 
	`¨934x_nfc_waô_dev_ªady
(
nfc
);

389 i‡(
ªt
)

390  
ªt
;

392  
	`¨934x_nfc_waô_dma_ªady
(
nfc
);

393 
	}
}

396 
	$¨934x_nfc_Æloc_buf
(
¨934x_nfc
 *
nfc
, 
size
)

398 
nfc
->
buf
 = 
	`dma_Æloc_cohîít
“fc->
∑ª¡
, 
size
,

399 &
nfc
->
buf_dma
, 
GFP_KERNEL
);

400 i‡(
nfc
->
buf
 =
NULL
) {

401 
	`dev_îr
(
nfc
->
∑ª¡
, "no memory for DMA buffer\n");

402  -
ENOMEM
;

405 
nfc
->
buf_size
 = 
size
;

406 
	`nfc_dbg
(
nfc
, "buf:%∞size:%u\n",Çfc->
buf
,Çfc->
buf_size
);

409 
	}
}

412 
	$¨934x_nfc_‰ì_buf
(
¨934x_nfc
 *
nfc
)

414 
	`dma_‰ì_cohîít
(
nfc
->
∑ª¡
,Çfc->
buf_size
,Çfc->
buf
,Çfc->
buf_dma
);

415 
	}
}

418 
	$¨934x_nfc_gë_addr
(
¨934x_nfc
 *
nfc
, 
cﬁumn
, 
∑ge_addr
,

419 
u32
 *
addr0
, u32 *
addr1
)

421 
u32
 
a0
, 
a1
;

423 
a0
 = 0;

424 
a1
 = 0;

426 i‡(
cﬁumn
 == -1) {

428 
a0
 = (
∑ge_addr
 & 0xffff) << 16;

429 
a1
 = (
∑ge_addr
 >> 16) & 0xf;

430 } i‡(
∑ge_addr
 != -1) {

434 i‡(
nfc
->
smÆl_∑ge
) {

435 
a0
 = 
cﬁumn
 & 0xff;

436 
a0
 |(
∑ge_addr
 & 0xff) << 8;

437 
a0
 |((
∑ge_addr
 >> 8) & 0xff) << 16;

438 
a0
 |((
∑ge_addr
 >> 16) & 0xff) << 24;

440 
a0
 = 
cﬁumn
 & 0x0FFF;

441 
a0
 |(
∑ge_addr
 & 0xffff) << 16;

443 i‡(
nfc
->
addr_cou¡0
 > 4)

444 
a1
 = (
∑ge_addr
 >> 16) & 0xf;

448 *
addr0
 = 
a0
;

449 *
addr1
 = 
a1
;

450 
	}
}

453 
	$¨934x_nfc_£nd_cmd
(
¨934x_nfc
 *
nfc
, 
comm™d
)

455 
u32
 
cmd_ªg
;

457 
cmd_ªg
 = 
AR934X_NFC_CMD_INPUT_SEL_SIU
 | 
AR934X_NFC_CMD_ADDR_SEL_0
 |

458 
AR934X_NFC_CMD_SEQ_1C
;

459 
cmd_ªg
 |(
comm™d
 & 
AR934X_NFC_CMD_CMD0_M
Ë<< 
AR934X_NFC_CMD_CMD0_S
;

461 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

462 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
,Çfc->
˘æ_ªg
);

464 
	`¨934x_nfc_wrôe_cmd_ªg
(
nfc
, 
cmd_ªg
);

465 
	`¨934x_nfc_waô_dev_ªady
(
nfc
);

466 
	}
}

469 
	$¨934x_nfc_do_rw_comm™d
(
¨934x_nfc
 *
nfc
, 
cﬁumn
, 
∑ge_addr
,

470 
Àn
, 
u32
 
cmd_ªg
, u32 
˘æ_ªg
, 
boﬁ
 
wrôe
)

472 
u32
 
addr0
, 
addr1
;

473 
u32
 
dma_˘æ
;

474 
dú
;

475 
îr
;

476 
ªåõs
 = 0;

478 
	`WARN_ON
(
Àn
 & 3);

480 i‡(
	`WARN_ON
(
Àn
 > 
nfc
->
buf_size
))

481 
	`dev_îr
(
nfc
->
∑ª¡
, "Àn=%d > buf_size=%d", 
Àn
,Çfc->
buf_size
);

483 i‡(
wrôe
) {

484 
dma_˘æ
 = 
AR934X_NFC_DMA_CTRL_DMA_DIR_WRITE
;

485 
dú
 = 
DMA_TO_DEVICE
;

487 
dma_˘æ
 = 
AR934X_NFC_DMA_CTRL_DMA_DIR_READ
;

488 
dú
 = 
DMA_FROM_DEVICE
;

491 
	`¨934x_nfc_gë_addr
(
nfc
, 
cﬁumn
, 
∑ge_addr
, &
addr0
, &
addr1
);

493 
dma_˘æ
 |
AR934X_NFC_DMA_CTRL_DMA_START
 |

494 (
AR934X_NFC_DMA_CTRL_DMA_BURST_3
 <<

495 
AR934X_NFC_DMA_CTRL_DMA_BURST_S
);

497 
cmd_ªg
 |
AR934X_NFC_CMD_INPUT_SEL_DMA
 | 
AR934X_NFC_CMD_ADDR_SEL_0
;

498 
˘æ_ªg
 |
AR934X_NFC_CTRL_INT_EN
;

500 
	`nfc_dbg
(
nfc
, "%sá0:%08xá1:%08xÜen:%x cmd:%08x dma:%08x ctrl:%08x\n",

501 (
wrôe
) ? "write" : "read",

502 
addr0
, 
addr1
, 
Àn
, 
cmd_ªg
, 
dma_˘æ
, 
˘æ_ªg
);

504 
ªåy
:

505 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

506 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ADDR0_0
, 
addr0
);

507 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ADDR0_1
, 
addr1
);

508 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_DMA_ADDR
,Çfc->
buf_dma
);

509 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_DMA_COUNT
, 
Àn
);

510 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_DATA_SIZE
, 
Àn
);

511 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
, 
˘æ_ªg
);

512 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_DMA_CTRL
, 
dma_˘æ
);

513 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ECC_CTRL
,Çfc->
ecc_˘æ_ªg
);

514 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ECC_OFFSET
,Çfc->
ecc_off£t_ªg
);

516 i‡(
	`¨934x_nfc_u£_úq
(
nfc
)) {

517 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_MASK
, 
AR934X_NFC_IRQ_MASK
);

519 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_MASK
);

522 
	`¨934x_nfc_wrôe_cmd_ªg
(
nfc
, 
cmd_ªg
);

523 
îr
 = 
	`¨934x_nfc_waô_d⁄e
(
nfc
);

524 i‡(
îr
) {

525 
	`dev_dbg
(
nfc
->
∑ª¡
, "%s operation stuckátÖage %d\n",

526 (
wrôe
Ë? "wrôe" : "ªad", 
∑ge_addr
);

528 
	`¨934x_nfc_ª°¨t
(
nfc
);

529 i‡(
ªåõs
++ < 
AR934X_NFC_DMA_RETRIES
)

530 
ªåy
;

532 
	`dev_îr
(
nfc
->
∑ª¡
, "%s operation failed onÖage %d\n",

533 (
wrôe
Ë? "wrôe" : "ªad", 
∑ge_addr
);

536  
îr
;

537 
	}
}

540 
	$¨934x_nfc_£nd_ªadid
(
¨934x_nfc
 *
nfc
, 
comm™d
)

542 
u32
 
cmd_ªg
;

543 
îr
;

545 
	`nfc_dbg
(
nfc
, "ªadid, cmd:%02x\n", 
comm™d
);

547 
cmd_ªg
 = 
AR934X_NFC_CMD_SEQ_1C1AXR
;

548 
cmd_ªg
 |(
comm™d
 & 
AR934X_NFC_CMD_CMD0_M
Ë<< 
AR934X_NFC_CMD_CMD0_S
;

550 
îr
 = 
	`¨934x_nfc_do_rw_comm™d
(
nfc
, -1, -1, 
AR934X_NFC_ID_BUF_SIZE
,

551 
cmd_ªg
, 
nfc
->
˘æ_ªg
, 
Ál£
);

553 
	`nfc_debug_d©a
("[id] ", 
nfc
->
buf
, 
AR934X_NFC_ID_BUF_SIZE
);

555  
îr
;

556 
	}
}

559 
	$¨934x_nfc_£nd_ªad
(
¨934x_nfc
 *
nfc
, 
comm™d
, 
cﬁumn
,

560 
∑ge_addr
, 
Àn
)

562 
u32
 
cmd_ªg
;

563 
îr
;

565 
	`nfc_dbg
(
nfc
, "read, column=%dÖage=%dÜen=%d\n",

566 
cﬁumn
, 
∑ge_addr
, 
Àn
);

568 
cmd_ªg
 = (
comm™d
 & 
AR934X_NFC_CMD_CMD0_M
Ë<< 
AR934X_NFC_CMD_CMD0_S
;

570 i‡(
nfc
->
smÆl_∑ge
) {

571 
cmd_ªg
 |
AR934X_NFC_CMD_SEQ_18
;

573 
cmd_ªg
 |
NAND_CMD_READSTART
 << 
AR934X_NFC_CMD_CMD1_S
;

574 
cmd_ªg
 |
AR934X_NFC_CMD_SEQ_1C5A1CXR
;

577 
îr
 = 
	`¨934x_nfc_do_rw_comm™d
(
nfc
, 
cﬁumn
, 
∑ge_addr
, 
Àn
,

578 
cmd_ªg
, 
nfc
->
˘æ_ªg
, 
Ál£
);

580 
	`nfc_debug_d©a
("[d©a] ", 
nfc
->
buf
, 
Àn
);

582  
îr
;

583 
	}
}

586 
	$¨934x_nfc_£nd_îa£
(
¨934x_nfc
 *
nfc
, 
comm™d
, 
cﬁumn
,

587 
∑ge_addr
)

589 
u32
 
addr0
, 
addr1
;

590 
u32
 
˘æ_ªg
;

591 
u32
 
cmd_ªg
;

593 
	`¨934x_nfc_gë_addr
(
nfc
, 
cﬁumn
, 
∑ge_addr
, &
addr0
, &
addr1
);

595 
˘æ_ªg
 = 
nfc
->ctrl_reg;

596 i‡(
nfc
->
smÆl_∑ge
) {

598 
˘æ_ªg
 &~(
AR934X_NFC_CTRL_ADDR_CYCLE0_M
 <<

599 
AR934X_NFC_CTRL_ADDR_CYCLE0_S
);

600 
˘æ_ªg
 &~(
AR934X_NFC_CTRL_ADDR_CYCLE1_M
 <<

601 
AR934X_NFC_CTRL_ADDR_CYCLE1_S
);

602 
˘æ_ªg
 &~(
AR934X_NFC_CTRL_SMALL_PAGE
);

603 
˘æ_ªg
 |(
nfc
->
addr_cou¡0
 + 1) <<

604 
AR934X_NFC_CTRL_ADDR_CYCLE0_S
;

607 
cmd_ªg
 = 
NAND_CMD_ERASE1
 << 
AR934X_NFC_CMD_CMD0_S
;

608 
cmd_ªg
 |
comm™d
 << 
AR934X_NFC_CMD_CMD1_S
;

609 
cmd_ªg
 |
AR934X_NFC_CMD_SEQ_ERASE
;

611 
	`nfc_dbg
(
nfc
, "eraseÖage %d,á0:%08xá1:%08x cmd:%08x ctrl:%08x\n",

612 
∑ge_addr
, 
addr0
, 
addr1
, 
cmd_ªg
, 
˘æ_ªg
);

614 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

615 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
, 
˘æ_ªg
);

616 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ADDR0_0
, 
addr0
);

617 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_ADDR0_1
, 
addr1
);

619 
	`¨934x_nfc_wrôe_cmd_ªg
(
nfc
, 
cmd_ªg
);

620 
	`¨934x_nfc_waô_dev_ªady
(
nfc
);

621 
	}
}

624 
	$¨934x_nfc_£nd_wrôe
(
¨934x_nfc
 *
nfc
, 
comm™d
, 
cﬁumn
,

625 
∑ge_addr
, 
Àn
)

627 
u32
 
cmd_ªg
;

629 
	`nfc_dbg
(
nfc
, "write, column=%dÖage=%dÜen=%d\n",

630 
cﬁumn
, 
∑ge_addr
, 
Àn
);

632 
	`nfc_debug_d©a
("[d©a] ", 
nfc
->
buf
, 
Àn
);

634 
cmd_ªg
 = 
NAND_CMD_SEQIN
 << 
AR934X_NFC_CMD_CMD0_S
;

635 
cmd_ªg
 |
comm™d
 << 
AR934X_NFC_CMD_CMD1_S
;

636 
cmd_ªg
 |
AR934X_NFC_CMD_SEQ_12
;

638  
	`¨934x_nfc_do_rw_comm™d
(
nfc
, 
cﬁumn
, 
∑ge_addr
, 
Àn
,

639 
cmd_ªg
, 
nfc
->
˘æ_ªg
, 
åue
);

640 
	}
}

643 
	$¨934x_nfc_ªad_°©us
(
¨934x_nfc
 *
nfc
)

645 
u32
 
cmd_ªg
;

646 
u32
 
°©us
;

648 
cmd_ªg
 = 
NAND_CMD_STATUS
 << 
AR934X_NFC_CMD_CMD0_S
;

649 
cmd_ªg
 |
AR934X_NFC_CMD_SEQ_S
;

651 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

652 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
,Çfc->
˘æ_ªg
);

654 
	`¨934x_nfc_wrôe_cmd_ªg
(
nfc
, 
cmd_ªg
);

655 
	`¨934x_nfc_waô_dev_ªady
(
nfc
);

657 
°©us
 = 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_READ_STATUS
);

659 
	`nfc_dbg
(
nfc
, "read status, cmd:%08x status:%02x\n",

660 
cmd_ªg
, (
°©us
 & 0xff));

662 i‡(
nfc
->
sw≠_dma
)

663 
nfc
->
buf
[0 ^ 3] = 
°©us
;

665 
nfc
->
buf
[0] = 
°©us
;

666 
	}
}

669 
	$¨934x_nfc_cmdfunc
(
mtd_öfo
 *
mtd
, 
comm™d
, 
cﬁumn
,

670 
∑ge_addr
)

672 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

673 
«nd_chù
 *
«nd
 = &
nfc
->nand_chip;

675 
nfc
->
ªad_id
 = 
Ál£
;

676 i‡(
comm™d
 !
NAND_CMD_PAGEPROG
)

677 
nfc
->
buf_ödex
 = 0;

679 
comm™d
) {

680 
NAND_CMD_RESET
:

681 
	`¨934x_nfc_£nd_cmd
(
nfc
, 
comm™d
);

684 
NAND_CMD_READID
:

685 
nfc
->
ªad_id
 = 
åue
;

686 
	`¨934x_nfc_£nd_ªadid
(
nfc
, 
comm™d
);

689 
NAND_CMD_READ0
:

690 
NAND_CMD_READ1
:

691 i‡(
nfc
->
smÆl_∑ge
) {

692 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
comm™d
, 
cﬁumn
, 
∑ge_addr
,

693 
mtd
->
wrôesize
 + mtd->
oobsize
);

695 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
comm™d
, 0, 
∑ge_addr
,

696 
mtd
->
wrôesize
 + mtd->
oobsize
);

697 
nfc
->
buf_ödex
 = 
cﬁumn
;

698 
nfc
->
∫dout_∑ge_addr
 = 
∑ge_addr
;

699 
nfc
->
∫dout_ªad_cmd
 = 
comm™d
;

703 
NAND_CMD_READOOB
:

704 i‡(
nfc
->
smÆl_∑ge
)

705 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READOOB
,

706 
cﬁumn
, 
∑ge_addr
,

707 
mtd
->
oobsize
);

709 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READ0
,

710 
mtd
->
wrôesize
, 
∑ge_addr
,

711 
mtd
->
oobsize
);

714 
NAND_CMD_RNDOUT
:

715 i‡(
	`WARN_ON
(
nfc
->
smÆl_∑ge
))

719 
	`¨934x_nfc_£nd_ªad
(
nfc
,Çfc->
∫dout_ªad_cmd
, 0,

720 
nfc
->
∫dout_∑ge_addr
,

721 
mtd
->
wrôesize
 + mtd->
oobsize
);

722 
nfc
->
buf_ödex
 = 
cﬁumn
;

725 
NAND_CMD_ERASE1
:

726 
nfc
->
îa£1_∑ge_addr
 = 
∑ge_addr
;

729 
NAND_CMD_ERASE2
:

730 
	`¨934x_nfc_£nd_îa£
(
nfc
, 
comm™d
, -1,Çfc->
îa£1_∑ge_addr
);

733 
NAND_CMD_STATUS
:

734 
	`¨934x_nfc_ªad_°©us
(
nfc
);

737 
NAND_CMD_SEQIN
:

738 i‡(
nfc
->
smÆl_∑ge
) {

740 i‡(
cﬁumn
 >
mtd
->
wrôesize
) {

741 
cﬁumn
 -
mtd
->
wrôesize
;

742 
nfc
->
£qö_ªad_cmd
 = 
NAND_CMD_READOOB
;

743 } i‡(
cﬁumn
 < 256) {

744 
nfc
->
£qö_ªad_cmd
 = 
NAND_CMD_READ0
;

746 
cﬁumn
 -= 256;

747 
nfc
->
£qö_ªad_cmd
 = 
NAND_CMD_READ1
;

750 
nfc
->
£qö_ªad_cmd
 = 
NAND_CMD_READ0
;

752 
nfc
->
£qö_cﬁumn
 = 
cﬁumn
;

753 
nfc
->
£qö_∑ge_addr
 = 
∑ge_addr
;

756 
NAND_CMD_PAGEPROG
:

757 i‡(
«nd
->
ecc
.
mode
 =
NAND_ECC_HW
) {

762 i‡(
nfc
->
smÆl_∑ge
)

763 
	`¨934x_nfc_£nd_cmd
(
nfc
,Çfc->
£qö_ªad_cmd
);

765 
	`¨934x_nfc_£nd_wrôe
(
nfc
, 
comm™d
,Çfc->
£qö_cﬁumn
,

766 
nfc
->
£qö_∑ge_addr
,

767 
nfc
->
buf_ödex
);

771 
	`dev_îr
(
nfc
->
∑ª¡
,

773 
comm™d
, 
cﬁumn
, 
∑ge_addr
);

776 
	}
}

779 
	$¨934x_nfc_dev_ªady
(
mtd_öfo
 *
mtd
)

781 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

783  
	`__¨934x_nfc_dev_ªady
(
nfc
);

784 
	}
}

787 
	$¨934x_nfc_£À˘_chù
(
mtd_öfo
 *
mtd
, 
chù_no
)

789 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

791 i‡(
nfc
->
£À˘_chù
)

792 
nfc
->
	`£À˘_chù
(
chù_no
);

793 
	}
}

795 
u8


796 
	$¨934x_nfc_ªad_byã
(
mtd_öfo
 *
mtd
)

798 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

799 
u8
 
d©a
;

801 
	`WARN_ON
(
nfc
->
buf_ödex
 >nfc->
buf_size
);

803 i‡(
nfc
->
sw≠_dma
 ||Çfc->
ªad_id
)

804 
d©a
 = 
nfc
->
buf
[nfc->
buf_ödex
 ^ 3];

806 
d©a
 = 
nfc
->
buf
[nfc->
buf_ödex
];

808 
nfc
->
buf_ödex
++;

810  
d©a
;

811 
	}
}

814 
	$¨934x_nfc_wrôe_buf
(
mtd_öfo
 *
mtd
, c⁄° 
u8
 *
buf
, 
Àn
)

816 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

817 
i
;

819 
	`WARN_ON
(
nfc
->
buf_ödex
 + 
Àn
 >Çfc->
buf_size
);

821 i‡(
nfc
->
sw≠_dma
) {

822 
i
 = 0; i < 
Àn
; i++) {

823 
nfc
->
buf
[nfc->
buf_ödex
 ^ 3] = buf[
i
];

824 
nfc
->
buf_ödex
++;

827 
i
 = 0; i < 
Àn
; i++) {

828 
nfc
->
buf
[nfc->
buf_ödex
] = buf[
i
];

829 
nfc
->
buf_ödex
++;

832 
	}
}

835 
	$¨934x_nfc_ªad_buf
(
mtd_öfo
 *
mtd
, 
u8
 *
buf
, 
Àn
)

837 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

838 
buf_ödex
;

839 
i
;

841 
	`WARN_ON
(
nfc
->
buf_ödex
 + 
Àn
 >Çfc->
buf_size
);

843 
buf_ödex
 = 
nfc
->buf_index;

845 i‡(
nfc
->
sw≠_dma
 ||Çfc->
ªad_id
) {

846 
i
 = 0; i < 
Àn
; i++) {

847 
buf
[
i
] = 
nfc
->buf[
buf_ödex
 ^ 3];

848 
buf_ödex
++;

851 
i
 = 0; i < 
Àn
; i++) {

852 
buf
[
i
] = 
nfc
->buf[
buf_ödex
];

853 
buf_ödex
++;

857 
nfc
->
buf_ödex
 = buf_index;

858 
	}
}

860 
ölöe
 

861 
	$¨934x_nfc_íabÀ_hwecc
(
¨934x_nfc
 *
nfc
)

863 
nfc
->
˘æ_ªg
 |
AR934X_NFC_CTRL_ECC_EN
;

864 
nfc
->
˘æ_ªg
 &~
AR934X_NFC_CTRL_CUSTOM_SIZE_EN
;

865 
	}
}

867 
ölöe
 

868 
	$¨934x_nfc_dißbÀ_hwecc
(
¨934x_nfc
 *
nfc
)

870 
nfc
->
˘æ_ªg
 &~
AR934X_NFC_CTRL_ECC_EN
;

871 
nfc
->
˘æ_ªg
 |
AR934X_NFC_CTRL_CUSTOM_SIZE_EN
;

872 
	}
}

875 
	$¨934x_nfc_ªad_oob
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

876 
∑ge
)

878 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

879 
îr
;

881 
	`nfc_dbg
(
nfc
, "ªad_oob:Öage:%d\n", 
∑ge
);

883 
îr
 = 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READ0
, 
mtd
->
wrôesize
, 
∑ge
,

884 
mtd
->
oobsize
);

885 i‡(
îr
)

886  
îr
;

888 
	`mem˝y
(
chù
->
oob_poi
, 
nfc
->
buf
, 
mtd
->
oobsize
);

891 
	}
}

894 
	$¨934x_nfc_wrôe_oob
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

895 
∑ge
)

897 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

899 
	`nfc_dbg
(
nfc
, "wrôe_oob:Öage:%d\n", 
∑ge
);

901 
	`mem˝y
(
nfc
->
buf
, 
chù
->
oob_poi
, 
mtd
->
oobsize
);

903  
	`¨934x_nfc_£nd_wrôe
(
nfc
, 
NAND_CMD_PAGEPROG
, 
mtd
->
wrôesize
,

904 
∑ge
, 
mtd
->
oobsize
);

905 
	}
}

908 
	$¨934x_nfc_ªad_∑ge_øw
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

909 
u8
 *
buf
, 
oob_ªquúed
, 
∑ge
)

911 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

912 
Àn
;

913 
îr
;

915 
	`nfc_dbg
(
nfc
, "ªad_∑ge_øw:Öage:%d oob:%d\n", 
∑ge
, 
oob_ªquúed
);

917 
Àn
 = 
mtd
->
wrôesize
;

918 i‡(
oob_ªquúed
)

919 
Àn
 +
mtd
->
oobsize
;

921 
îr
 = 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READ0
, 0, 
∑ge
, 
Àn
);

922 i‡(
îr
)

923  
îr
;

925 
	`mem˝y
(
buf
, 
nfc
->buf, 
mtd
->
wrôesize
);

927 i‡(
oob_ªquúed
)

928 
	`mem˝y
(
chù
->
oob_poi
, &
nfc
->
buf
[
mtd
->
wrôesize
], mtd->
oobsize
);

931 
	}
}

934 
	$¨934x_nfc_ªad_∑ge
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

935 
u8
 *
buf
, 
oob_ªquúed
, 
∑ge
)

937 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

938 
u32
 
ecc_˘æ
;

939 
max_bôÊùs
 = 0;

940 
boﬁ
 
ecc_Áûed
;

941 
boﬁ
 
ecc_c‹ª˘ed
;

942 
îr
;

944 
	`nfc_dbg
(
nfc
, "ªad_∑ge:Öage:%d oob:%d\n", 
∑ge
, 
oob_ªquúed
);

946 
	`¨934x_nfc_íabÀ_hwecc
(
nfc
);

947 
îr
 = 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READ0
, 0, 
∑ge
,

948 
mtd
->
wrôesize
);

949 
	`¨934x_nfc_dißbÀ_hwecc
(
nfc
);

951 i‡(
îr
)

952  
îr
;

955 
	`mem˝y
(
buf
, 
nfc
->buf, 
mtd
->
wrôesize
);

958 
ecc_˘æ
 = 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_ECC_CTRL
);

959 
ecc_Áûed
 = 
ecc_˘æ
 & 
AR934X_NFC_ECC_CTRL_ERR_UNCORRECT
;

960 
ecc_c‹ª˘ed
 = 
ecc_˘æ
 & 
AR934X_NFC_ECC_CTRL_ERR_CORRECT
;

962 i‡(
oob_ªquúed
 || 
ecc_Áûed
) {

963 
îr
 = 
	`¨934x_nfc_£nd_ªad
(
nfc
, 
NAND_CMD_READ0
, 
mtd
->
wrôesize
,

964 
∑ge
, 
mtd
->
oobsize
);

965 i‡(
îr
)

966  
îr
;

968 i‡(
oob_ªquúed
)

969 
	`mem˝y
(
chù
->
oob_poi
, 
nfc
->
buf
, 
mtd
->
oobsize
);

972 i‡(
ecc_Áûed
) {

981 i‡(!
	`is_Æl_ff
(&
nfc
->
buf
[nfc->
ecc_oob_pos
], 
chù
->
ecc
.
tŸÆ
) ||

982 !
	`is_Æl_ff
(
buf
, 
mtd
->
wrôesize
))

983 
mtd
->
ecc_°©s
.
Áûed
++;

984 } i‡(
ecc_c‹ª˘ed
) {

990 i‡(
ecc_˘æ
 & 
AR934X_NFC_ECC_CTRL_ERR_OVER
) {

995 
max_bôÊùs
 = 
chù
->
ecc
.
°ªngth
 * chù->ecc.
°ïs
;

997 
max_bôÊùs
 = 
nfc
->
ecc_thªs
 * 
chù
->
ecc
.
°ïs
;

1000 
mtd
->
ecc_°©s
.
c‹ª˘ed
 +
max_bôÊùs
;

1003  
max_bôÊùs
;

1004 
	}
}

1007 
	$¨934x_nfc_wrôe_∑ge_øw
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

1008 c⁄° 
u8
 *
buf
, 
oob_ªquúed
, 
∑ge
)

1010 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

1011 
Àn
;

1013 
	`nfc_dbg
(
nfc
, "wrôe_∑ge_øw:Öage:%d oob:%d\n", 
∑ge
, 
oob_ªquúed
);

1015 
	`mem˝y
(
nfc
->
buf
, buf, 
mtd
->
wrôesize
);

1016 
Àn
 = 
mtd
->
wrôesize
;

1018 i‡(
oob_ªquúed
) {

1019 
	`mem˝y
(&
nfc
->
buf
[
mtd
->
wrôesize
], 
chù
->
oob_poi
, mtd->
oobsize
);

1020 
Àn
 +
mtd
->
oobsize
;

1023  
	`¨934x_nfc_£nd_wrôe
(
nfc
, 
NAND_CMD_PAGEPROG
, 0, 
∑ge
, 
Àn
);

1024 
	}
}

1027 
	$¨934x_nfc_wrôe_∑ge
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

1028 c⁄° 
u8
 *
buf
, 
oob_ªquúed
, 
∑ge
)

1030 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

1031 
îr
;

1033 
	`nfc_dbg
(
nfc
, "wrôe_∑ge:Öage:%d oob:%d\n", 
∑ge
, 
oob_ªquúed
);

1036 i‡(
oob_ªquúed
 &&

1037 !
	`is_Æl_ff
(
chù
->
oob_poi
, 
mtd
->
oobsize
)) {

1038 
îr
 = 
	`¨934x_nfc_wrôe_oob
(
mtd
, 
chù
, 
∑ge
);

1039 i‡(
îr
)

1040  
îr
;

1044 
	`mem˝y
(
nfc
->
buf
, buf, 
mtd
->
wrôesize
);

1046 
	`¨934x_nfc_íabÀ_hwecc
(
nfc
);

1047 
îr
 = 
	`¨934x_nfc_£nd_wrôe
(
nfc
, 
NAND_CMD_PAGEPROG
, 0, 
∑ge
,

1048 
mtd
->
wrôesize
);

1049 
	`¨934x_nfc_dißbÀ_hwecc
(
nfc
);

1051  
îr
;

1052 
	}
}

1055 
	$¨934x_nfc_hw_öô
(
¨934x_nfc
 *
nfc
)

1057 
¨934x_nfc_∂©f‹m_d©a
 *
pd©a
;

1059 
pd©a
 = 
	`¨934x_nfc_gë_∂©f‹m_d©a
(
nfc
);

1060 i‡(
pd©a
->
hw_ª£t
) {

1061 
pd©a
->
	`hw_ª£t
(
åue
);

1062 
pd©a
->
	`hw_ª£t
(
Ál£
);

1069 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_TIME_SEQ
,

1070 
AR934X_NFC_TIME_SEQ_DEFAULT
);

1071 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_TIMINGS_ASYN
,

1072 
AR934X_NFC_TIMINGS_ASYN_DEFAULT
);

1073 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_TIMINGS_SYN
,

1074 
AR934X_NFC_TIMINGS_SYN_DEFAULT
);

1077 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_MEM_CTRL
, 0xff00);

1079 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_DMA_ADDR_OFFS
, 0);

1082 
nfc
->
˘æ_ªg
 = 
AR934X_NFC_CTRL_CUSTOM_SIZE_EN
;

1083 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
,Çfc->
˘æ_ªg
);

1085 i‡(
nfc
->
smÆl_∑ge
) {

1087 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_GEN_SEQ_CTRL
,

1088 
AR934X_NFC_GENSEQ_SMALL_PAGE_READ
);

1090 
	}
}

1093 
	$¨934x_nfc_ª°¨t
(
¨934x_nfc
 *
nfc
)

1095 
u32
 
˘æ_ªg
;

1097 i‡(
nfc
->
£À˘_chù
)

1098 
nfc
->
	`£À˘_chù
(-1);

1100 
˘æ_ªg
 = 
nfc
->ctrl_reg;

1101 
	`¨934x_nfc_hw_öô
(
nfc
);

1102 
nfc
->
˘æ_ªg
 = ctrl_reg;

1104 i‡(
nfc
->
£À˘_chù
)

1105 
nfc
->
	`£À˘_chù
(0);

1107 
	`¨934x_nfc_£nd_cmd
(
nfc
, 
NAND_CMD_RESET
);

1108 
	}
}

1110 
úqªtu∫_t


1111 
	$¨934x_nfc_úq_h™dÀr
(
úq
, *
d©a
)

1113 
¨934x_nfc
 *
nfc
 = 
d©a
;

1114 
u32
 
°©us
;

1116 
°©us
 = 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
);

1118 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
, 0);

1120 
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_STATUS
);

1122 
°©us
 &
	`¨934x_nfc_º
(
nfc
, 
AR934X_NFC_REG_INT_MASK
);

1123 i‡(
°©us
) {

1124 
	`nfc_dbg
(
nfc
, "gŸ IRQ, sètus:%08x\n", 
°©us
);

1126 
nfc
->
úq_°©us
 = 
°©us
;

1127 
nfc
->
•urious_úq_ex≥˘ed
 = 
åue
;

1128 
	`wake_up
(&
nfc
->
úq_waôq
);

1130 i‡(
nfc
->
•urious_úq_ex≥˘ed
) {

1131 
nfc
->
•urious_úq_ex≥˘ed
 = 
Ál£
;

1133 
	`dev_w¨n
(
nfc
->
∑ª¡
, "spurious interrupt\n");

1137  
IRQ_HANDLED
;

1138 
	}
}

1141 
	$¨934x_nfc_öô_èû
(
mtd_öfo
 *
mtd
)

1143 
¨934x_nfc
 *
nfc
 = 
	`mtd_to_¨934x_nfc
(
mtd
);

1144 
«nd_chù
 *
chù
 = &
nfc
->nand_chip;

1145 
u32
 
˘æ
;

1146 
u32
 
t
;

1147 
îr
;

1149 
mtd
->
oobsize
) {

1153 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_SPARE_SIZE
, 
mtd
->
oobsize
);

1157 
	`dev_îr
(
nfc
->
∑ª¡
, "unsupported OOB size: %d bytes\n",

1158 
mtd
->
oobsize
);

1159  -
ENXIO
;

1162 
˘æ
 = 
AR934X_NFC_CTRL_CUSTOM_SIZE_EN
;

1164 
mtd
->
îa£size
 / mtd->
wrôesize
) {

1166 
t
 = 
AR934X_NFC_CTRL_BLOCK_SIZE_32
;

1170 
t
 = 
AR934X_NFC_CTRL_BLOCK_SIZE_64
;

1174 
t
 = 
AR934X_NFC_CTRL_BLOCK_SIZE_128
;

1178 
t
 = 
AR934X_NFC_CTRL_BLOCK_SIZE_256
;

1182 
	`dev_îr
(
nfc
->
∑ª¡
, "unsupported block size: %u\n",

1183 
mtd
->
îa£size
 / mtd->
wrôesize
);

1184  -
ENXIO
;

1187 
˘æ
 |
t
 << 
AR934X_NFC_CTRL_BLOCK_SIZE_S
;

1189 
mtd
->
wrôesize
) {

1191 
nfc
->
smÆl_∑ge
 = 1;

1192 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_256
;

1196 
nfc
->
smÆl_∑ge
 = 1;

1197 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_512
;

1201 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_1024
;

1205 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_2048
;

1209 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_4096
;

1213 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_8192
;

1217 
t
 = 
AR934X_NFC_CTRL_PAGE_SIZE_16384
;

1221 
	`dev_îr
(
nfc
->
∑ª¡
, "unsupported write size: %d bytes\n",

1222 
mtd
->
wrôesize
);

1223  -
ENXIO
;

1226 
˘æ
 |
t
 << 
AR934X_NFC_CTRL_PAGE_SIZE_S
;

1228 i‡(
nfc
->
smÆl_∑ge
) {

1229 
˘æ
 |
AR934X_NFC_CTRL_SMALL_PAGE
;

1231 i‡(
chù
->
chùsize
 > (32 << 20)) {

1232 
nfc
->
addr_cou¡0
 = 4;

1233 
nfc
->
addr_cou¡1
 = 3;

1234 } i‡(
chù
->
chùsize
 > (2 << 16)) {

1235 
nfc
->
addr_cou¡0
 = 3;

1236 
nfc
->
addr_cou¡1
 = 2;

1238 
nfc
->
addr_cou¡0
 = 2;

1239 
nfc
->
addr_cou¡1
 = 1;

1242 i‡(
chù
->
chùsize
 > (128 << 20)) {

1243 
nfc
->
addr_cou¡0
 = 5;

1244 
nfc
->
addr_cou¡1
 = 3;

1245 } i‡(
chù
->
chùsize
 > (8 << 16)) {

1246 
nfc
->
addr_cou¡0
 = 4;

1247 
nfc
->
addr_cou¡1
 = 2;

1249 
nfc
->
addr_cou¡0
 = 3;

1250 
nfc
->
addr_cou¡1
 = 1;

1254 
˘æ
 |
nfc
->
addr_cou¡0
 << 
AR934X_NFC_CTRL_ADDR_CYCLE0_S
;

1255 
˘æ
 |
nfc
->
addr_cou¡1
 << 
AR934X_NFC_CTRL_ADDR_CYCLE1_S
;

1257 
nfc
->
˘æ_ªg
 = 
˘æ
;

1258 
	`¨934x_nfc_wr
(
nfc
, 
AR934X_NFC_REG_CTRL
,Çfc->
˘æ_ªg
);

1260 
	`¨934x_nfc_‰ì_buf
(
nfc
);

1261 
îr
 = 
	`¨934x_nfc_Æloc_buf
(
nfc
, 
mtd
->
wrôesize
 + mtd->
oobsize
);

1263  
îr
;

1264 
	}
}

1266 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

1267 
«nd_ec˛ayout
 
	g¨934x_nfc_oob_64_hwecc
 = {

1268 .
eccbyãs
 = 28,

1269 .
	gec˝os
 = {

1275 .
	goob‰ì
 = {

1277 .
off£t
 = 4,

1278 .
	gÀngth
 = 16,

1281 .
	goff£t
 = 48,

1282 .
	gÀngth
 = 16,

1289 
	$¨934x_nfc_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

1290 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

1292 i‡(
£˘i⁄
)

1293  -
ERANGE
;

1295 
oobªgi⁄
->
off£t
 = 20;

1296 
oobªgi⁄
->
Àngth
 = 28;

1299 
	}
}

1301 
	$¨934x_nfc_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

1302 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

1304 
£˘i⁄
) {

1306 
oobªgi⁄
->
off£t
 = 4;

1307 
oobªgi⁄
->
Àngth
 = 16;

1310 
oobªgi⁄
->
off£t
 = 48;

1311 
oobªgi⁄
->
Àngth
 = 16;

1314  -
ERANGE
;

1316 
	}
}

1318 c⁄° 
mtd_oobœyout_›s
 
	g¨934x_nfc_ec˛ayout_›s
 = {

1319 .
ecc
 = 
¨934x_nfc_oobœyout_ecc
,

1320 .
	g‰ì
 = 
¨934x_nfc_oobœyout_‰ì
,

1325 
	$¨934x_nfc_£tup_hwecc
(
¨934x_nfc
 *
nfc
)

1327 
«nd_chù
 *
«nd
 = &
nfc
->nand_chip;

1328 
mtd_öfo
 *
mtd
 = 
	`¨934x_nfc_to_mtd
(
nfc
);

1329 
u32
 
ecc_ˇp
;

1330 
u32
 
ecc_thªs
;

1331 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,6,0)

1332 
mtd_oob_ªgi⁄
 
oobªgi⁄
;

1335 i‡(!
	`IS_ENABLED
(
CONFIG_MTD_NAND_AR934X_HW_ECC
)) {

1336 
	`dev_îr
(
nfc
->
∑ª¡
, "hardware ECC support is disabled\n");

1337  -
EINVAL
;

1340 
mtd
->
wrôesize
) {

1346 
«nd
->
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

1348 
«nd
->
ecc
.
size
 = 512;

1349 
«nd
->
ecc
.
byãs
 = 7;

1350 
«nd
->
ecc
.
°ªngth
 = 4;

1351 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

1352 
«nd
->
ecc
.
œyout
 = &
¨934x_nfc_oob_64_hwecc
;

1354 
	`mtd_£t_oobœyout
(
mtd
, &
¨934x_nfc_ec˛ayout_›s
);

1359 
	`dev_îr
(
nfc
->
∑ª¡
,

1361 
mtd
->
wrôesize
);

1362  -
EINVAL
;

1365 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

1366 
	`BUG_ON
(!
«nd
->
ecc
.
œyout
);

1368 
	`BUG_ON
(!
mtd
->
oobœyout
->
ecc
);

1371 
«nd
->
ecc
.
°ªngth
) {

1373 
ecc_ˇp
 = 
AR934X_NFC_ECC_CTRL_ECC_CAP_4
;

1374 
ecc_thªs
 = 4;

1378 
	`dev_îr
(
nfc
->
∑ª¡
, "unsupported ECC strength %u\n",

1379 
«nd
->
ecc
.
°ªngth
);

1380  -
EINVAL
;

1383 
nfc
->
ecc_thªs
 =Écc_thres;

1384 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

1385 
nfc
->
ecc_oob_pos
 = 
«nd
->
ecc
.
œyout
->
ec˝os
[0];

1387 
mtd
->
oobœyout
->
	`ecc
(mtd, 0, &
oobªgi⁄
);

1388 
nfc
->
ecc_oob_pos
 = 
oobªgi⁄
.
off£t
;

1391 
nfc
->
ecc_˘æ_ªg
 = 
ecc_ˇp
 << 
AR934X_NFC_ECC_CTRL_ECC_CAP_S
;

1392 
nfc
->
ecc_˘æ_ªg
 |
ecc_thªs
 << 
AR934X_NFC_ECC_CTRL_ERR_THRES_S
;

1394 
nfc
->
ecc_off£t_ªg
 = 
mtd
->
wrôesize
 +Çfc->
ecc_oob_pos
;

1396 
«nd
->
ecc
.
mode
 = 
NAND_ECC_HW
;

1397 
«nd
->
ecc
.
ªad_∑ge
 = 
¨934x_nfc_ªad_∑ge
;

1398 
«nd
->
ecc
.
ªad_∑ge_øw
 = 
¨934x_nfc_ªad_∑ge_øw
;

1399 
«nd
->
ecc
.
wrôe_∑ge
 = 
¨934x_nfc_wrôe_∑ge
;

1400 
«nd
->
ecc
.
wrôe_∑ge_øw
 = 
¨934x_nfc_wrôe_∑ge_øw
;

1401 
«nd
->
ecc
.
ªad_oob
 = 
¨934x_nfc_ªad_oob
;

1402 
«nd
->
ecc
.
wrôe_oob
 = 
¨934x_nfc_wrôe_oob
;

1405 
	}
}

1408 
	$¨934x_nfc_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1410 c⁄° *
∑π_¥obes
[] = { "cmdlöï¨t", 
NULL
, };

1411 
¨934x_nfc_∂©f‹m_d©a
 *
pd©a
;

1412 
¨934x_nfc
 *
nfc
;

1413 
ªsour˚
 *
ªs
;

1414 
mtd_öfo
 *
mtd
;

1415 
«nd_chù
 *
«nd
;

1416 
mtd_∑π_∑r£r_d©a
 
µd©a
;

1417 
ªt
;

1419 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

1420 i‡(
pd©a
 =
NULL
) {

1421 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data defined\n");

1422  -
EINVAL
;

1425 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1426 i‡(!
ªs
) {

1427 
	`dev_îr
(&
pdev
->
dev
, "failedÅo get I/O memory\n");

1428  -
EINVAL
;

1431 
nfc
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
¨934x_nfc
), 
GFP_KERNEL
);

1432 i‡(!
nfc
) {

1433 
	`dev_îr
(&
pdev
->
dev
, "failedÅoállocate driver data\n");

1434  -
ENOMEM
;

1437 
nfc
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

1438 i‡(
	`IS_ERR
(
nfc
->
ba£
)) {

1439 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemap I/O memory\n");

1440  
	`PTR_ERR
(
nfc
->
ba£
);

1443 
nfc
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

1444 i‡(
nfc
->
úq
 < 0) {

1445 
	`dev_îr
(&
pdev
->
dev
, "no IRQÑesource specified\n");

1446  -
EINVAL
;

1449 
	`öô_waôqueue_hód
(&
nfc
->
úq_waôq
);

1450 
ªt
 = 
	`ªque°_úq
(
nfc
->
úq
, 
¨934x_nfc_úq_h™dÀr
, 0,

1451 
	`dev_«me
(&
pdev
->
dev
), 
nfc
);

1452 i‡(
ªt
) {

1453 
	`dev_îr
(&
pdev
->
dev
, "ªqua°_úq faûed,Éº:%d\n", 
ªt
);

1454  
ªt
;

1457 
nfc
->
∑ª¡
 = &
pdev
->
dev
;

1458 
nfc
->
£À˘_chù
 = 
pd©a
->select_chip;

1459 
nfc
->
sw≠_dma
 = 
pd©a
->swap_dma;

1461 
«nd
 = &
nfc
->
«nd_chù
;

1462 
mtd
 = 
	`¨934x_nfc_to_mtd
(
nfc
);

1464 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

1465 
mtd
->
¥iv
 = 
«nd
;

1467 
mtd
->
ow√r
 = 
THIS_MODULE
;

1468 i‡(
pd©a
->
«me
)

1469 
mtd
->
«me
 = 
pd©a
->name;

1471 
mtd
->
«me
 = 
	`dev_«me
(&
pdev
->
dev
);

1473 
«nd
->
chù_dñay
 = 25;

1475 
«nd
->
dev_ªady
 = 
¨934x_nfc_dev_ªady
;

1476 
«nd
->
cmdfunc
 = 
¨934x_nfc_cmdfunc
;

1477 
«nd
->
ªad_byã
 = 
¨934x_nfc_ªad_byã
;

1478 
«nd
->
wrôe_buf
 = 
¨934x_nfc_wrôe_buf
;

1479 
«nd
->
ªad_buf
 = 
¨934x_nfc_ªad_buf
;

1480 
«nd
->
£À˘_chù
 = 
¨934x_nfc_£À˘_chù
;

1482 
ªt
 = 
	`¨934x_nfc_Æloc_buf
(
nfc
, 
AR934X_NFC_ID_BUF_SIZE
);

1483 i‡(
ªt
)

1484 
îr_‰ì_úq
;

1486 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
nfc
);

1488 
	`¨934x_nfc_hw_öô
(
nfc
);

1490 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 1, 
NULL
);

1491 i‡(
ªt
) {

1492 
	`dev_îr
(&
pdev
->
dev
, "«nd_sˇn_idíàÁûed,Éº:%d\n", 
ªt
);

1493 
îr_‰ì_buf
;

1496 
ªt
 = 
	`¨934x_nfc_öô_èû
(
mtd
);

1497 i‡(
ªt
) {

1498 
	`dev_îr
(&
pdev
->
dev
, "öôÅaû faûed,Éº:%d\n", 
ªt
);

1499 
îr_‰ì_buf
;

1502 i‡(
pd©a
->
sˇn_fixup
) {

1503 
ªt
 = 
pd©a
->
	`sˇn_fixup
(
mtd
);

1504 i‡(
ªt
)

1505 
îr_‰ì_buf
;

1508 
pd©a
->
ecc_mode
) {

1509 
AR934X_NFC_ECC_SOFT
:

1510 
«nd
->
ecc
.
mode
 = 
NAND_ECC_SOFT
;

1511 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,6,0)

1512 
«nd
->
ecc
.
Ægo
 = 
NAND_ECC_HAMMING
;

1516 
AR934X_NFC_ECC_SOFT_BCH
:

1517 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

1518 
«nd
->
ecc
.
mode
 = 
NAND_ECC_SOFT_BCH
;

1520 
«nd
->
ecc
.
mode
 = 
NAND_ECC_SOFT
;

1521 
«nd
->
ecc
.
Ægo
 = 
NAND_ECC_BCH
;

1525 
AR934X_NFC_ECC_HW
:

1526 
ªt
 = 
	`¨934x_nfc_£tup_hwecc
(
nfc
);

1527 i‡(
ªt
)

1528 
îr_‰ì_buf
;

1533 
	`dev_îr
(
nfc
->
∑ª¡
, "unknow¿ECC modê%d\n", 
pd©a
->
ecc_mode
);

1534  -
EINVAL
;

1537 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

1538 i‡(
ªt
) {

1539 
	`dev_îr
(&
pdev
->
dev
, "sˇ¿èû faûed,Éº:%d\n", 
ªt
);

1540 
îr_‰ì_buf
;

1543 
	`mem£t
(&
µd©a
, '\0', (ppdata));

1544 
ªt
 = 
	`mtd_devi˚_∑r£_ªgi°î
(
mtd
, 
∑π_¥obes
, &
µd©a
,

1545 
pd©a
->
∑πs
,Öd©a->
ƒ_∑πs
);

1546 i‡(
ªt
) {

1547 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿªgi°î mtd,Éº:%d\n", 
ªt
);

1548 
îr_‰ì_buf
;

1553 
îr_‰ì_buf
:

1554 
	`¨934x_nfc_‰ì_buf
(
nfc
);

1555 
îr_‰ì_úq
:

1556 
	`‰ì_úq
(
nfc
->
úq
,Çfc);

1557  
ªt
;

1558 
	}
}

1561 
	$¨934x_nfc_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1563 
¨934x_nfc
 *
nfc
;

1564 
mtd_öfo
 *
mtd
;

1566 
nfc
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1567 i‡(
nfc
) {

1568 
mtd
 = 
	`¨934x_nfc_to_mtd
(
nfc
);

1569 
	`«nd_ªÀa£
(
mtd
);

1570 
	`¨934x_nfc_‰ì_buf
(
nfc
);

1571 
	`‰ì_úq
(
nfc
->
úq
,Çfc);

1575 
	}
}

1577 
∂©f‹m_drivî
 
	g¨934x_nfc_drivî
 = {

1578 .
¥obe
 = 
¨934x_nfc_¥obe
,

1579 .
	gªmove
 = 
¨934x_nfc_ªmove
,

1580 .
	gdrivî
 = {

1581 .
«me
 = 
AR934X_NFC_DRIVER_NAME
,

1582 .
	gow√r
 = 
THIS_MODULE
,

1586 
moduÀ_∂©f‹m_drivî
(
¨934x_nfc_drivî
);

1588 
MODULE_LICENSE
("GPL v2");

1589 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1590 
MODULE_DESCRIPTION
("Atheros AR934x NAND Flash Controller driver");

1591 
MODULE_ALIAS
("∂©f‹m:" 
AR934X_NFC_DRIVER_NAME
);

	@linux/ar71xx/files/drivers/mtd/nand/rb4xx_nand.c

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/öô.h
>

19 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

20 
	~<löux/mtd/«nd.h
>

22 
	~<löux/mtd/øw«nd.h
>

24 
	~<löux/mtd/mtd.h
>

25 
	~<löux/mtd/∑πôi⁄s.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/dñay.h
>

28 
	~<löux/io.h
>

29 
	~<löux/gpio.h
>

30 
	~<löux/¶ab.h
>

32 
	~<asm/mach-©h79/©h79.h
>

33 
	~<asm/mach-©h79/rb4xx_˝ld.h
>

35 
	#DRV_NAME
 "rb4xx-«nd"

	)

36 
	#DRV_VERSION
 "0.2.0"

	)

37 
	#DRV_DESC
 "NAND fœsh drivî f‹ RouãrBﬂrd 4xx sîõs"

	)

39 
	#RB4XX_NAND_GPIO_READY
 5

	)

40 
	#RB4XX_NAND_GPIO_ALE
 37

	)

41 
	#RB4XX_NAND_GPIO_CLE
 38

	)

42 
	#RB4XX_NAND_GPIO_NCE
 39

	)

44 
	srb4xx_«nd_öfo
 {

45 
«nd_chù
 
	mchù
;

46 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

47 
mtd_öfo
 
	mmtd
;

51 
ölöe
 
rb4xx_«nd_öfo
 *
	$mtd_to_rböfo
(
mtd_öfo
 *
mtd
)

53 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

54  
	`c⁄èöî_of
(
mtd
, 
rb4xx_«nd_öfo
, mtd);

56 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

58  
	`c⁄èöî_of
(
chù
, 
rb4xx_«nd_öfo
, chip);

60 
	}
}

62 
mtd_öfo
 *
	$rböfo_to_mtd
(
rb4xx_«nd_öfo
 *
nfc
)

64 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

65  &
nfc
->
mtd
;

67  
	`«nd_to_mtd
(&
nfc
->
chù
);

69 
	}
}

71 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

76 
«nd_ec˛ayout
 
	grb4xx_«nd_ec˛ayout
 = {

77 .
eccbyãs
 = 6,

78 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

79 .
	goobavaû
 = 9,

80 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

85 
	$rb4xx_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

86 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

88 
£˘i⁄
) {

90 
oobªgi⁄
->
off£t
 = 8;

91 
oobªgi⁄
->
Àngth
 = 3;

94 
oobªgi⁄
->
off£t
 = 13;

95 
oobªgi⁄
->
Àngth
 = 3;

98  -
ERANGE
;

100 
	}
}

102 
	$rb4xx_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

103 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

105 
£˘i⁄
) {

107 
oobªgi⁄
->
off£t
 = 0;

108 
oobªgi⁄
->
Àngth
 = 4;

111 
oobªgi⁄
->
off£t
 = 4;

112 
oobªgi⁄
->
Àngth
 = 1;

115 
oobªgi⁄
->
off£t
 = 6;

116 
oobªgi⁄
->
Àngth
 = 2;

119 
oobªgi⁄
->
off£t
 = 11;

120 
oobªgi⁄
->
Àngth
 = 2;

123  -
ERANGE
;

125 
	}
}

127 c⁄° 
mtd_oobœyout_›s
 
	grb4xx_«nd_ec˛ayout_›s
 = {

128 .
ecc
 = 
rb4xx_oobœyout_ecc
,

129 .
	g‰ì
 = 
rb4xx_oobœyout_‰ì
,

133 
mtd_∑πôi⁄
 
	grb4xx_«nd_∑πôi⁄s
[] = {

135 .
«me
 = "booter",

136 .
	goff£t
 = 0,

137 .
	gsize
 = (256 * 1024),

138 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

141 .
	g«me
 = "kernel",

142 .
	goff£t
 = (256 * 1024),

143 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

146 .
	g«me
 = "ubi",

147 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

148 .
	gsize
 = 
MTDPART_SIZ_FULL
,

152 
	$rb4xx_«nd_dev_ªady
(
mtd_öfo
 *
mtd
)

154  
	`gpio_gë_vÆue_ˇn¶ìp
(
RB4XX_NAND_GPIO_READY
);

155 
	}
}

157 
	$rb4xx_«nd_wrôe_cmd
(
cmd
)

159 
d©a
 = 
cmd
;

160 
îr
;

162 
îr
 = 
	`rb4xx_˝ld_wrôe
(&
d©a
, 1);

163 i‡(
îr
)

164 
	`¥_îr
("rb4xx_«nd: wrôêcmd faûed,Éº=%d\n", 
îr
);

165 
	}
}

167 
	$rb4xx_«nd_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
cmd
,

168 
˘æ
)

170 i‡(
˘æ
 & 
NAND_CTRL_CHANGE
) {

171 
	`gpio_£t_vÆue_ˇn¶ìp
(
RB4XX_NAND_GPIO_CLE
,

172 (
˘æ
 & 
NAND_CLE
) ? 1 : 0);

173 
	`gpio_£t_vÆue_ˇn¶ìp
(
RB4XX_NAND_GPIO_ALE
,

174 (
˘æ
 & 
NAND_ALE
) ? 1 : 0);

175 
	`gpio_£t_vÆue_ˇn¶ìp
(
RB4XX_NAND_GPIO_NCE
,

176 (
˘æ
 & 
NAND_NCE
) ? 0 : 1);

179 i‡(
cmd
 !
NAND_CMD_NONE
)

180 
	`rb4xx_«nd_wrôe_cmd
(
cmd
);

181 
	}
}

183 
	$rb4xx_«nd_ªad_byã
(
mtd_öfo
 *
mtd
)

185 
d©a
 = 0;

186 
îr
;

188 
îr
 = 
	`rb4xx_˝ld_ªad
(&
d©a
, 1);

189 i‡(
îr
) {

190 
	`¥_îr
("rb4xx_«nd:Ñód d©®Áûed,Éº=%d\n", 
îr
);

191 
d©a
 = 0xff;

194  
d©a
;

195 
	}
}

197 
	$rb4xx_«nd_wrôe_buf
(
mtd_öfo
 *
mtd
, c⁄° *
buf
,

198 
Àn
)

200 
îr
;

202 
îr
 = 
	`rb4xx_˝ld_wrôe
(
buf
, 
Àn
);

203 i‡(
îr
)

204 
	`¥_îr
("rb4xx_«nd: wrôêbu‡Áûed,Éº=%d\n", 
îr
);

205 
	}
}

207 
	$rb4xx_«nd_ªad_buf
(
mtd_öfo
 *
mtd
, *
buf
,

208 
Àn
)

210 
îr
;

212 
îr
 = 
	`rb4xx_˝ld_ªad
(
buf
, 
Àn
);

213 i‡(
îr
)

214 
	`¥_îr
("rb4xx_«nd:Ñód bu‡Áûed,Éº=%d\n", 
îr
);

215 
	}
}

217 
	$rb4xx_«nd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

219 
rb4xx_«nd_öfo
 *
öfo
;

220 
mtd_öfo
 *
mtd
;

221 
ªt
;

223 
	`¥ötk
(
KERN_INFO
 
DRV_DESC
 " vîsi⁄ " 
DRV_VERSION
 "\n");

225 
ªt
 = 
	`gpio_ªque°
(
RB4XX_NAND_GPIO_READY
, "NAND RDY");

226 i‡(
ªt
) {

227 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑequest gpio %d\n",

228 
RB4XX_NAND_GPIO_READY
);

229 
îr
;

232 
ªt
 = 
	`gpio_dúe˘i⁄_öput
(
RB4XX_NAND_GPIO_READY
);

233 i‡(
ªt
) {

234 
	`dev_îr
(&
pdev
->
dev
, "unableÅo set input mode on gpio %d\n",

235 
RB4XX_NAND_GPIO_READY
);

236 
îr_‰ì_gpio_ªady
;

239 
ªt
 = 
	`gpio_ªque°
(
RB4XX_NAND_GPIO_ALE
, "NAND ALE");

240 i‡(
ªt
) {

241 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑequest gpio %d\n",

242 
RB4XX_NAND_GPIO_ALE
);

243 
îr_‰ì_gpio_ªady
;

246 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
RB4XX_NAND_GPIO_ALE
, 0);

247 i‡(
ªt
) {

248 
	`dev_îr
(&
pdev
->
dev
, "unableÅo set output mode on gpio %d\n",

249 
RB4XX_NAND_GPIO_ALE
);

250 
îr_‰ì_gpio_Æe
;

253 
ªt
 = 
	`gpio_ªque°
(
RB4XX_NAND_GPIO_CLE
, "NAND CLE");

254 i‡(
ªt
) {

255 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑequest gpio %d\n",

256 
RB4XX_NAND_GPIO_CLE
);

257 
îr_‰ì_gpio_Æe
;

260 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
RB4XX_NAND_GPIO_CLE
, 0);

261 i‡(
ªt
) {

262 
	`dev_îr
(&
pdev
->
dev
, "unableÅo set output mode on gpio %d\n",

263 
RB4XX_NAND_GPIO_CLE
);

264 
îr_‰ì_gpio_˛e
;

267 
ªt
 = 
	`gpio_ªque°
(
RB4XX_NAND_GPIO_NCE
, "NAND NCE");

268 i‡(
ªt
) {

269 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑequest gpio %d\n",

270 
RB4XX_NAND_GPIO_NCE
);

271 
îr_‰ì_gpio_˛e
;

274 
ªt
 = 
	`gpio_dúe˘i⁄_ouçut
(
RB4XX_NAND_GPIO_NCE
, 1);

275 i‡(
ªt
) {

276 
	`dev_îr
(&
pdev
->
dev
, "unableÅo set output mode on gpio %d\n",

277 
RB4XX_NAND_GPIO_ALE
);

278 
îr_‰ì_gpio_n˚
;

281 
öfo
 = 
	`kzÆloc
((*öfo), 
GFP_KERNEL
);

282 i‡(!
öfo
) {

283 
	`dev_îr
(&
pdev
->
dev
, "rb4xx-nand:Ço memory forÖrivate data\n");

284 
ªt
 = -
ENOMEM
;

285 
îr_‰ì_gpio_n˚
;

288 
öfo
->
chù
.
¥iv
 = &info;

289 
mtd
 = 
	`rböfo_to_mtd
(
öfo
);

291 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

292 
mtd
->
¥iv
 = &
öfo
->
chù
;

294 
mtd
->
ow√r
 = 
THIS_MODULE
;

296 
öfo
->
chù
.
cmd_˘æ
 = 
rb4xx_«nd_cmd_˘æ
;

297 
öfo
->
chù
.
dev_ªady
 = 
rb4xx_«nd_dev_ªady
;

298 
öfo
->
chù
.
ªad_byã
 = 
rb4xx_«nd_ªad_byã
;

299 
öfo
->
chù
.
wrôe_buf
 = 
rb4xx_«nd_wrôe_buf
;

300 
öfo
->
chù
.
ªad_buf
 = 
rb4xx_«nd_ªad_buf
;

302 
öfo
->
chù
.
chù_dñay
 = 25;

303 
öfo
->
chù
.
ecc
.
mode
 = 
NAND_ECC_SOFT
;

304 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,6,0)

305 
öfo
->
chù
.
ecc
.
Ægo
 = 
NAND_ECC_HAMMING
;

307 
öfo
->
chù
.
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

309 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
öfo
);

311 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 1, 
NULL
);

312 i‡(
ªt
) {

313 
ªt
 = -
ENXIO
;

314 
îr_‰ì_öfo
;

317 i‡(
mtd
->
wrôesize
 == 512)

318 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

319 
öfo
->
chù
.
ecc
.
œyout
 = &
rb4xx_«nd_ec˛ayout
;

321 
	`mtd_£t_oobœyout
(
mtd
, &
rb4xx_«nd_ec˛ayout_›s
);

324 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

325 i‡(
ªt
) {

326  -
ENXIO
;

327 
îr_£t_drvd©a
;

330 
	`mtd_devi˚_ªgi°î
(
mtd
, 
rb4xx_«nd_∑πôi⁄s
,

331 
	`ARRAY_SIZE
(
rb4xx_«nd_∑πôi⁄s
));

332 i‡(
ªt
)

333 
îr_ªÀa£_«nd
;

337 
îr_ªÀa£_«nd
:

338 
	`«nd_ªÀa£
(
mtd
);

339 
îr_£t_drvd©a
:

340 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

341 
îr_‰ì_öfo
:

342 
	`k‰ì
(
öfo
);

343 
îr_‰ì_gpio_n˚
:

344 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_NCE
);

345 
îr_‰ì_gpio_˛e
:

346 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_CLE
);

347 
îr_‰ì_gpio_Æe
:

348 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_ALE
);

349 
îr_‰ì_gpio_ªady
:

350 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_READY
);

351 
îr
:

352  
ªt
;

353 
	}
}

355 
	$rb4xx_«nd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

357 
rb4xx_«nd_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

359 
	`«nd_ªÀa£
(
	`rböfo_to_mtd
(
öfo
));

360 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

361 
	`k‰ì
(
öfo
);

362 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_NCE
);

363 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_CLE
);

364 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_ALE
);

365 
	`gpio_‰ì
(
RB4XX_NAND_GPIO_READY
);

368 
	}
}

370 
∂©f‹m_drivî
 
	grb4xx_«nd_drivî
 = {

371 .
¥obe
 = 
rb4xx_«nd_¥obe
,

372 .
	gªmove
 = 
rb4xx_«nd_ªmove
,

373 .
	gdrivî
 = {

374 .
«me
 = 
DRV_NAME
,

375 .
	gow√r
 = 
THIS_MODULE
,

379 
__öô
 
	$rb4xx_«nd_öô
()

381  
	`∂©f‹m_drivî_ªgi°î
(&
rb4xx_«nd_drivî
);

382 
	}
}

384 
__exô
 
	$rb4xx_«nd_exô
()

386 
	`∂©f‹m_drivî_uƒegi°î
(&
rb4xx_«nd_drivî
);

387 
	}
}

389 
moduÀ_öô
(
rb4xx_«nd_öô
);

390 
moduÀ_exô
(
rb4xx_«nd_exô
);

392 
MODULE_DESCRIPTION
(
DRV_DESC
);

393 
MODULE_VERSION
(
DRV_VERSION
);

394 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

395 
MODULE_AUTHOR
("Imre Kaloz <kaloz@openwrt.org>");

396 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/mtd/nand/rb750_nand.c

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/moduÀ.h
>

14 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

15 
	~<löux/mtd/«nd.h
>

17 
	~<löux/mtd/øw«nd.h
>

19 
	~<löux/mtd/mtd.h
>

20 
	~<löux/mtd/∑πôi⁄s.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/io.h
>

23 
	~<löux/¶ab.h
>

25 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

26 
	~<asm/mach-©h79/©h79.h
>

27 
	~<asm/mach-©h79/mach-rb750.h
>

29 
	#DRV_NAME
 "rb750-«nd"

	)

30 
	#DRV_VERSION
 "0.1.0"

	)

31 
	#DRV_DESC
 "NAND fœsh drivî f‹ÅhêRouãrBOARD 750"

	)

33 
	#RB750_NAND_IO0
 
	`BIT
(
RB750_GPIO_NAND_IO0
)

	)

34 
	#RB750_NAND_ALE
 
	`BIT
(
RB750_GPIO_NAND_ALE
)

	)

35 
	#RB750_NAND_CLE
 
	`BIT
(
RB750_GPIO_NAND_CLE
)

	)

36 
	#RB750_NAND_NRE
 
	`BIT
(
RB750_GPIO_NAND_NRE
)

	)

37 
	#RB750_NAND_NWE
 
	`BIT
(
RB750_GPIO_NAND_NWE
)

	)

38 
	#RB750_NAND_RDY
 
	`BIT
(
RB750_GPIO_NAND_RDY
)

	)

40 
	#RB750_NAND_DATA_SHIFT
 1

	)

41 
	#RB750_NAND_DATA_BITS
 (0xf‡<< 
RB750_NAND_DATA_SHIFT
)

	)

42 
	#RB750_NAND_INPUT_BITS
 (
RB750_NAND_DATA_BITS
 | 
RB750_NAND_RDY
)

	)

43 
	#RB750_NAND_OUTPUT_BITS
 (
RB750_NAND_ALE
 | 
RB750_NAND_CLE
 | \

44 
RB750_NAND_NRE
 | 
RB750_NAND_NWE
)

	)

46 
	srb750_«nd_öfo
 {

47 
«nd_chù
 
	mchù
;

48 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

49 
mtd_öfo
 
	mmtd
;

51 
rb7xx_«nd_∂©f‹m_d©a
 *
	mpd©a
;

54 
ölöe
 
rb750_«nd_öfo
 *
	$mtd_to_rböfo
(
mtd_öfo
 *
mtd
)

56 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

57  
	`c⁄èöî_of
(
mtd
, 
rb750_«nd_öfo
, mtd);

59 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

61  
	`c⁄èöî_of
(
chù
, 
rb750_«nd_öfo
, chip);

63 
	}
}

65 
mtd_öfo
 *
	$rböfo_to_mtd
(
rb750_«nd_öfo
 *
nfc
)

67 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

68  &
nfc
->
mtd
;

70  
	`«nd_to_mtd
(&
nfc
->
chù
);

72 
	}
}

74 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

79 
«nd_ec˛ayout
 
	grb750_«nd_ec˛ayout
 = {

80 .
eccbyãs
 = 6,

81 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

82 .
	goobavaû
 = 9,

83 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

88 
	$rb750_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

89 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

91 
£˘i⁄
) {

93 
oobªgi⁄
->
off£t
 = 8;

94 
oobªgi⁄
->
Àngth
 = 3;

97 
oobªgi⁄
->
off£t
 = 13;

98 
oobªgi⁄
->
Àngth
 = 3;

101  -
ERANGE
;

103 
	}
}

105 
	$rb750_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

106 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

108 
£˘i⁄
) {

110 
oobªgi⁄
->
off£t
 = 0;

111 
oobªgi⁄
->
Àngth
 = 4;

114 
oobªgi⁄
->
off£t
 = 4;

115 
oobªgi⁄
->
Àngth
 = 1;

118 
oobªgi⁄
->
off£t
 = 6;

119 
oobªgi⁄
->
Àngth
 = 2;

122 
oobªgi⁄
->
off£t
 = 11;

123 
oobªgi⁄
->
Àngth
 = 2;

126  -
ERANGE
;

128 
	}
}

130 c⁄° 
mtd_oobœyout_›s
 
	grb750_«nd_ec˛ayout_›s
 = {

131 .
ecc
 = 
rb750_oobœyout_ecc
,

132 .
	g‰ì
 = 
rb750_oobœyout_‰ì
,

136 
mtd_∑πôi⁄
 
	grb750_«nd_∑πôi⁄s
[] = {

138 .
«me
 = "booter",

139 .
	goff£t
 = 0,

140 .
	gsize
 = (256 * 1024),

141 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

143 .
	g«me
 = "kernel",

144 .
	goff£t
 = (256 * 1024),

145 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

147 .
	g«me
 = "ubi",

148 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

149 .
	gsize
 = 
MTDPART_SIZ_FULL
,

153 
	$rb750_«nd_wrôe
(c⁄° 
u8
 *
buf
, 
Àn
)

155 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

156 
u32
 
out
;

157 
u32
 
t
;

158 
i
;

161 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

162 
	`__øw_wrôñ
(
t
 | 
RB750_NAND_DATA_BITS
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

164 
out
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

165 
out
 &~(
RB750_NAND_DATA_BITS
 | 
RB750_NAND_NWE
);

166 
i
 = 0; i !
Àn
; i++) {

167 
u32
 
d©a
;

169 
d©a
 = 
buf
[
i
];

170 
d©a
 <<
RB750_NAND_DATA_SHIFT
;

171 
d©a
 |
out
;

172 
	`__øw_wrôñ
(
d©a
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

174 
	`__øw_wrôñ
(
d©a
 | 
RB750_NAND_NWE
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

176 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

180 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

181 
	`__øw_wrôñ
(
t
 & ~
RB750_NAND_DATA_BITS
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

183 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

184 
	}
}

186 
	$rb750_«nd_ªad
(
u8
 *
ªad_buf
, 
Àn
)

188 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

189 
i
;

191 
i
 = 0; i < 
Àn
; i++) {

192 
u8
 
d©a
;

195 
	`__øw_wrôñ
(
RB750_NAND_NRE
, 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

197 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

200 
d©a
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_IN
) >>

201 
RB750_NAND_DATA_SHIFT
;

204 
	`__øw_wrôñ
(
RB750_NAND_NRE
, 
ba£
 + 
AR71XX_GPIO_REG_SET
);

206 
ªad_buf
[
i
] = 
d©a
;

208 
	}
}

210 
	$rb750_«nd_£À˘_chù
(
mtd_öfo
 *
mtd
, 
chù
)

212 
rb750_«nd_öfo
 *
rböfo
 = 
	`mtd_to_rböfo
(
mtd
);

213 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

214 
u32
 
t
;

216 i‡(
chù
 >= 0) {

217 
rböfo
->
pd©a
->
	`íabÀ_pös
();

220 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

221 
	`__øw_wrôñ
(
t
 & ~
RB750_NAND_INPUT_BITS
,

222 
ba£
 + 
AR71XX_GPIO_REG_OE
);

225 
	`__øw_wrôñ
(
RB750_NAND_NRE
 | 
RB750_NAND_NWE
,

226 
ba£
 + 
AR71XX_GPIO_REG_SET
);

228 (Ë
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_SET
);

231 
	`__øw_wrôñ
(
rböfo
->
pd©a
->
n˚_löe
,

232 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

235 
	`__øw_wrôñ
(
rböfo
->
pd©a
->
n˚_löe
,

236 
ba£
 + 
AR71XX_GPIO_REG_SET
);

238 (Ë
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_SET
);

240 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

241 
	`__øw_wrôñ
(
t
 | 
RB750_NAND_IO0
 | 
RB750_NAND_RDY
,

242 
ba£
 + 
AR71XX_GPIO_REG_OE
);

244 
rböfo
->
pd©a
->
	`dißbÀ_pös
();

246 
	}
}

248 
	$rb750_«nd_dev_ªady
(
mtd_öfo
 *
mtd
)

250 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

252  !!(
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_IN
Ë& 
RB750_NAND_RDY
);

253 
	}
}

255 
	$rb750_«nd_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
cmd
,

256 
˘æ
)

258 i‡(
˘æ
 & 
NAND_CTRL_CHANGE
) {

259 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

260 
u32
 
t
;

262 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

264 
t
 &~(
RB750_NAND_CLE
 | 
RB750_NAND_ALE
);

265 
t
 |(
˘æ
 & 
NAND_CLE
Ë? 
RB750_NAND_CLE
 : 0;

266 
t
 |(
˘æ
 & 
NAND_ALE
Ë? 
RB750_NAND_ALE
 : 0;

268 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

270 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

273 i‡(
cmd
 !
NAND_CMD_NONE
) {

274 
u8
 
t
 = 
cmd
;

275 
	`rb750_«nd_wrôe
(&
t
, 1);

277 
	}
}

279 
u8
 
	$rb750_«nd_ªad_byã
(
mtd_öfo
 *
mtd
)

281 
u8
 
d©a
 = 0;

282 
	`rb750_«nd_ªad
(&
d©a
, 1);

283  
d©a
;

284 
	}
}

286 
	$rb750_«nd_ªad_buf
(
mtd_öfo
 *
mtd
, 
u8
 *
buf
, 
Àn
)

288 
	`rb750_«nd_ªad
(
buf
, 
Àn
);

289 
	}
}

291 
	$rb750_«nd_wrôe_buf
(
mtd_öfo
 *
mtd
, c⁄° 
u8
 *
buf
, 
Àn
)

293 
	`rb750_«nd_wrôe
(
buf
, 
Àn
);

294 
	}
}

296 
__öô
 
	$rb750_«nd_gpio_öô
(
rb750_«nd_öfo
 *
öfo
)

298 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

299 
u32
 
out
;

300 
u32
 
t
;

302 
out
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

305 
	`__øw_wrôñ
(
RB750_NAND_NCE
 | 
RB750_NAND_NRE
 | 
RB750_NAND_NWE
,

306 
ba£
 + 
AR71XX_GPIO_REG_SET
);

308 
	`__øw_wrôñ
(
RB750_NAND_ALE
 | 
RB750_NAND_CLE
,

309 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

312 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

313 
	`__øw_wrôñ
(
t
 & ~(
RB750_NAND_INPUT_BITS
), 
ba£
 + 
AR71XX_GPIO_REG_OE
);

316 
t
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

317 
t
 |
RB750_NAND_OUTPUT_BITS
;

318 
t
 |
öfo
->
pd©a
->
n˚_löe
;

319 
	`__øw_wrôñ
(
t
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

321 
öfo
->
pd©a
->
	`œtch_ch™ge
(~
out
 & 
RB750_NAND_IO0
, out & RB750_NAND_IO0);

322 
	}
}

324 
	$rb750_«nd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

326 
rb750_«nd_öfo
 *
öfo
;

327 
rb7xx_«nd_∂©f‹m_d©a
 *
pd©a
;

328 
mtd_öfo
 *
mtd
;

329 
ªt
;

331 
	`¥ötk
(
KERN_INFO
 
DRV_DESC
 " vîsi⁄ " 
DRV_VERSION
 "\n");

333 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

334 i‡(!
pd©a
)

335  -
EINVAL
;

337 
öfo
 = 
	`kzÆloc
((*öfo), 
GFP_KERNEL
);

338 i‡(!
öfo
)

339  -
ENOMEM
;

341 
öfo
->
chù
.
¥iv
 = &info;

343 
mtd
 = 
	`rböfo_to_mtd
(
öfo
);

344 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

345 
mtd
->
¥iv
 = &
öfo
->
chù
;

347 
mtd
->
ow√r
 = 
THIS_MODULE
;

349 
öfo
->
chù
.
£À˘_chù
 = 
rb750_«nd_£À˘_chù
;

350 
öfo
->
chù
.
cmd_˘æ
 = 
rb750_«nd_cmd_˘æ
;

351 
öfo
->
chù
.
dev_ªady
 = 
rb750_«nd_dev_ªady
;

352 
öfo
->
chù
.
ªad_byã
 = 
rb750_«nd_ªad_byã
;

353 
öfo
->
chù
.
wrôe_buf
 = 
rb750_«nd_wrôe_buf
;

354 
öfo
->
chù
.
ªad_buf
 = 
rb750_«nd_ªad_buf
;

356 
öfo
->
chù
.
chù_dñay
 = 25;

357 
öfo
->
chù
.
ecc
.
mode
 = 
NAND_ECC_SOFT
;

358 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,6,0)

359 
öfo
->
chù
.
ecc
.
Ægo
 = 
NAND_ECC_HAMMING
;

361 
öfo
->
chù
.
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

363 
öfo
->
pd©a
 =Ödata;

365 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
öfo
);

367 
	`rb750_«nd_gpio_öô
(
öfo
);

369 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 1, 
NULL
);

370 i‡(
ªt
) {

371 
ªt
 = -
ENXIO
;

372 
îr_‰ì_öfo
;

375 i‡(
mtd
->
wrôesize
 == 512)

376 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

377 
öfo
->
chù
.
ecc
.
œyout
 = &
rb750_«nd_ec˛ayout
;

379 
	`mtd_£t_oobœyout
(
mtd
, &
rb750_«nd_ec˛ayout_›s
);

382 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

383 i‡(
ªt
) {

384  -
ENXIO
;

385 
îr_£t_drvd©a
;

388 
ªt
 = 
	`mtd_devi˚_ªgi°î
(
mtd
, 
rb750_«nd_∑πôi⁄s
,

389 
	`ARRAY_SIZE
(
rb750_«nd_∑πôi⁄s
));

390 i‡(
ªt
)

391 
îr_ªÀa£_«nd
;

395 
îr_ªÀa£_«nd
:

396 
	`«nd_ªÀa£
(
mtd
);

397 
îr_£t_drvd©a
:

398 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

399 
îr_‰ì_öfo
:

400 
	`k‰ì
(
öfo
);

401  
ªt
;

402 
	}
}

404 
	$rb750_«nd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

406 
rb750_«nd_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

408 
	`«nd_ªÀa£
(
	`rböfo_to_mtd
(
öfo
));

409 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

410 
	`k‰ì
(
öfo
);

413 
	}
}

415 
∂©f‹m_drivî
 
	grb750_«nd_drivî
 = {

416 .
¥obe
 = 
rb750_«nd_¥obe
,

417 .
	gªmove
 = 
rb750_«nd_ªmove
,

418 .
	gdrivî
 = {

419 .
«me
 = 
DRV_NAME
,

420 .
	gow√r
 = 
THIS_MODULE
,

424 
__öô
 
	$rb750_«nd_öô
()

426  
	`∂©f‹m_drivî_ªgi°î
(&
rb750_«nd_drivî
);

427 
	}
}

429 
__exô
 
	$rb750_«nd_exô
()

431 
	`∂©f‹m_drivî_uƒegi°î
(&
rb750_«nd_drivî
);

432 
	}
}

434 
moduÀ_öô
(
rb750_«nd_öô
);

435 
moduÀ_exô
(
rb750_«nd_exô
);

437 
MODULE_DESCRIPTION
(
DRV_DESC
);

438 
MODULE_VERSION
(
DRV_VERSION
);

439 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

440 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/mtd/nand/rb91x_nand.c

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/•ölock.h
>

14 
	~<löux/moduÀ.h
>

15 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

16 
	~<löux/mtd/«nd.h
>

18 
	~<löux/mtd/øw«nd.h
>

20 
	~<löux/mtd/mtd.h
>

21 
	~<löux/mtd/∑πôi⁄s.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/io.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/gpio.h
>

26 
	~<löux/∂©f‹m_d©a/rb91x_«nd.h
>

28 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

29 
	~<asm/mach-©h79/©h79.h
>

31 
	#DRV_DESC
 "NAND fœsh drivî f‹ÅhêRouãrBOARD 91x sîõs"

	)

33 
	#RB91X_NAND_NRWE
 
	`BIT
(12)

	)

35 
	#RB91X_NAND_DATA_BITS
 (
	`BIT
(0) | BIT(1) | BIT(2) | BIT(3) | BIT(4) |\

36 
	`BIT
(13Ë| BIT(14Ë| BIT(15))

	)

38 
	#RB91X_NAND_INPUT_BITS
 (
RB91X_NAND_DATA_BITS
 | 
RB91X_NAND_RDY
)

	)

39 
	#RB91X_NAND_OUTPUT_BITS
 (
RB91X_NAND_DATA_BITS
 | 
RB91X_NAND_NRWE
)

	)

41 
	#RB91X_NAND_LOW_DATA_MASK
 0x1f

	)

42 
	#RB91X_NAND_HIGH_DATA_MASK
 0xe0

	)

43 
	#RB91X_NAND_HIGH_DATA_SHIFT
 8

	)

45 
	srb91x_«nd_öfo
 {

46 
«nd_chù
 
	mchù
;

47 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

48 
mtd_öfo
 
	mmtd
;

50 
devi˚
 *
	mdev
;

52 
	mgpio_n˚
;

53 
	mgpio_Æe
;

54 
	mgpio_˛e
;

55 
	mgpio_rdy
;

56 
	mgpio_ªad
;

57 
	mgpio_ƒw
;

58 
	mgpio_∆e
;

61 
ölöe
 
rb91x_«nd_öfo
 *
	$mtd_to_rböfo
(
mtd_öfo
 *
mtd
)

63 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

64  
	`c⁄èöî_of
(
mtd
, 
rb91x_«nd_öfo
, mtd);

66 
«nd_chù
 *
chù
 = 
	`mtd_to_«nd
(
mtd
);

68  
	`c⁄èöî_of
(
chù
, 
rb91x_«nd_öfo
, chip);

70 
	}
}

72 
mtd_öfo
 *
	$rböfo_to_mtd
(
rb91x_«nd_öfo
 *
nfc
)

74 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

75  &
nfc
->
mtd
;

77  
	`«nd_to_mtd
(&
nfc
->
chù
);

79 
	}
}

82 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

87 
«nd_ec˛ayout
 
	grb91x_«nd_ec˛ayout
 = {

88 .
eccbyãs
 = 6,

89 .
	gec˝os
 = { 8, 9, 10, 13, 14, 15 },

90 .
	goobavaû
 = 9,

91 .
	goob‰ì
 = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }

96 
	$rb91x_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

97 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

99 
£˘i⁄
) {

101 
oobªgi⁄
->
off£t
 = 8;

102 
oobªgi⁄
->
Àngth
 = 3;

105 
oobªgi⁄
->
off£t
 = 13;

106 
oobªgi⁄
->
Àngth
 = 3;

109  -
ERANGE
;

111 
	}
}

113 
	$rb91x_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

114 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

116 
£˘i⁄
) {

118 
oobªgi⁄
->
off£t
 = 0;

119 
oobªgi⁄
->
Àngth
 = 4;

122 
oobªgi⁄
->
off£t
 = 4;

123 
oobªgi⁄
->
Àngth
 = 1;

126 
oobªgi⁄
->
off£t
 = 6;

127 
oobªgi⁄
->
Àngth
 = 2;

130 
oobªgi⁄
->
off£t
 = 11;

131 
oobªgi⁄
->
Àngth
 = 2;

134  -
ERANGE
;

136 
	}
}

138 c⁄° 
mtd_oobœyout_›s
 
	grb91x_«nd_ec˛ayout_›s
 = {

139 .
ecc
 = 
rb91x_oobœyout_ecc
,

140 .
	g‰ì
 = 
rb91x_oobœyout_‰ì
,

144 
mtd_∑πôi⁄
 
	grb91x_«nd_∑πôi⁄s
[] = {

146 .
«me
 = "booter",

147 .
	goff£t
 = 0,

148 .
	gsize
 = (256 * 1024),

149 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

151 .
	g«me
 = "kernel",

152 .
	goff£t
 = (256 * 1024),

153 .
	gsize
 = (4 * 1024 * 1024) - (256 * 1024),

155 .
	g«me
 = "ubi",

156 .
	goff£t
 = 
MTDPART_OFS_NXTBLK
,

157 .
	gsize
 = 
MTDPART_SIZ_FULL
,

161 
	$rb91x_«nd_wrôe
(
rb91x_«nd_öfo
 *
rbni
,

162 c⁄° 
u8
 *
buf
,

163 
Àn
)

165 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

166 
u32
 
€_ªg
;

167 
u32
 
out_ªg
;

168 
u32
 
out
;

169 
i
;

172 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_∆e
, 0);

174 
€_ªg
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

175 
out_ªg
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

178 
	`__øw_wrôñ
(
€_ªg
 & ~(
RB91X_NAND_DATA_BITS
 | 
RB91X_NAND_NRWE
),

179 
ba£
 + 
AR71XX_GPIO_REG_OE
);

181 
out
 = 
out_ªg
 & ~(
RB91X_NAND_DATA_BITS
 | 
RB91X_NAND_NRWE
);

182 
i
 = 0; i !
Àn
; i++) {

183 
u32
 
d©a
;

185 
d©a
 = (
buf
[
i
] & 
RB91X_NAND_HIGH_DATA_MASK
) <<

186 
RB91X_NAND_HIGH_DATA_SHIFT
;

187 
d©a
 |
buf
[
i
] & 
RB91X_NAND_LOW_DATA_MASK
;

188 
d©a
 |
out
;

189 
	`__øw_wrôñ
(
d©a
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

192 
d©a
 |
RB91X_NAND_NRWE
;

193 
	`__øw_wrôñ
(
d©a
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

195 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

199 
	`__øw_wrôñ
(
out_ªg
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

200 
	`__øw_wrôñ
(
€_ªg
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

202 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

205 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_∆e
, 1);

206 
	}
}

208 
	$rb91x_«nd_ªad
(
rb91x_«nd_öfo
 *
rbni
,

209 
u8
 *
ªad_buf
,

210 
Àn
)

212 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

213 
u32
 
€_ªg
;

214 
u32
 
out_ªg
;

215 
i
;

218 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_ªad
, 1);

221 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_∆e
, 0);

224 
€_ªg
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OE
);

225 
out_ªg
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

228 
	`__øw_wrôñ
(
€_ªg
 | 
RB91X_NAND_DATA_BITS
,

229 
ba£
 + 
AR71XX_GPIO_REG_OE
);

231 
i
 = 0; i < 
Àn
; i++) {

232 
u32
 
ö
;

233 
u8
 
d©a
;

236 
	`__øw_wrôñ
(
RB91X_NAND_NRWE
, 
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

238 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_CLEAR
);

241 
ö
 = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_IN
);

244 
	`__øw_wrôñ
(
RB91X_NAND_NRWE
, 
ba£
 + 
AR71XX_GPIO_REG_SET
);

246 
d©a
 = (
ö
 & 
RB91X_NAND_LOW_DATA_MASK
);

247 
d©a
 |(
ö
 >> 
RB91X_NAND_HIGH_DATA_SHIFT
) &

248 
RB91X_NAND_HIGH_DATA_MASK
;

250 
ªad_buf
[
i
] = 
d©a
;

254 
	`__øw_wrôñ
(
out_ªg
, 
ba£
 + 
AR71XX_GPIO_REG_OUT
);

255 
	`__øw_wrôñ
(
€_ªg
, 
ba£
 + 
AR71XX_GPIO_REG_OE
);

257 
	`__øw_ªadl
(
ba£
 + 
AR71XX_GPIO_REG_OUT
);

260 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_∆e
, 1);

263 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_ªad
, 0);

264 
	}
}

266 
	$rb91x_«nd_dev_ªady
(
mtd_öfo
 *
mtd
)

268 
rb91x_«nd_öfo
 *
rbni
 = 
	`mtd_to_rböfo
(
mtd
);

270  
	`gpio_gë_vÆue_ˇn¶ìp
(
rbni
->
gpio_rdy
);

271 
	}
}

273 
	$rb91x_«nd_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
cmd
,

274 
˘æ
)

276 
rb91x_«nd_öfo
 *
rbni
 = 
	`mtd_to_rböfo
(
mtd
);

278 i‡(
˘æ
 & 
NAND_CTRL_CHANGE
) {

279 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_˛e
,

280 (
˘æ
 & 
NAND_CLE
) ? 1 : 0);

281 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_Æe
,

282 (
˘æ
 & 
NAND_ALE
) ? 1 : 0);

283 
	`gpio_£t_vÆue_ˇn¶ìp
(
rbni
->
gpio_n˚
,

284 (
˘æ
 & 
NAND_NCE
) ? 0 : 1);

287 i‡(
cmd
 !
NAND_CMD_NONE
) {

288 
u8
 
t
 = 
cmd
;

290 
	`rb91x_«nd_wrôe
(
rbni
, &
t
, 1);

292 
	}
}

294 
u8
 
	$rb91x_«nd_ªad_byã
(
mtd_öfo
 *
mtd
)

296 
rb91x_«nd_öfo
 *
rbni
 = 
	`mtd_to_rböfo
(
mtd
);

297 
u8
 
d©a
 = 0xff;

299 
	`rb91x_«nd_ªad
(
rbni
, &
d©a
, 1);

301  
d©a
;

302 
	}
}

304 
	$rb91x_«nd_ªad_buf
(
mtd_öfo
 *
mtd
, 
u8
 *
buf
, 
Àn
)

306 
rb91x_«nd_öfo
 *
rbni
 = 
	`mtd_to_rböfo
(
mtd
);

308 
	`rb91x_«nd_ªad
(
rbni
, 
buf
, 
Àn
);

309 
	}
}

311 
	$rb91x_«nd_wrôe_buf
(
mtd_öfo
 *
mtd
, c⁄° 
u8
 *
buf
, 
Àn
)

313 
rb91x_«nd_öfo
 *
rbni
 = 
	`mtd_to_rböfo
(
mtd
);

315 
	`rb91x_«nd_wrôe
(
rbni
, 
buf
, 
Àn
);

316 
	}
}

318 
	$rb91x_«nd_gpio_öô
(
rb91x_«nd_öfo
 *
öfo
)

320 
ªt
;

326 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_∆e
,

327 
GPIOF_OUT_INIT_HIGH
, "LATCHÉnable");

328 i‡(
ªt
)

329  
ªt
;

331 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_n˚
,

332 
GPIOF_OUT_INIT_HIGH
, "NANDÇCE");

333 i‡(
ªt
)

334  
ªt
;

336 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_ƒw
,

337 
GPIOF_OUT_INIT_HIGH
, "NANDÇRW");

338 i‡(
ªt
)

339  
ªt
;

341 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_˛e
,

342 
GPIOF_OUT_INIT_LOW
, "NAND CLE");

343 i‡(
ªt
)

344  
ªt
;

346 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_Æe
,

347 
GPIOF_OUT_INIT_LOW
, "NAND ALE");

348 i‡(
ªt
)

349  
ªt
;

351 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_ªad
,

352 
GPIOF_OUT_INIT_LOW
, "NAND READ");

353 i‡(
ªt
)

354  
ªt
;

356 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
öfo
->
dev
, info->
gpio_rdy
,

357 
GPIOF_IN
, "NAND RDY");

358  
ªt
;

359 
	}
}

361 
	$rb91x_«nd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

363 
rb91x_«nd_öfo
 *
rbni
;

364 
rb91x_«nd_∂©f‹m_d©a
 *
pd©a
;

365 
mtd_öfo
 *
mtd
;

366 
ªt
;

368 
	`¥_öfo
(
DRV_DESC
 "\n");

370 
pd©a
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

371 i‡(!
pd©a
)

372  -
EINVAL
;

374 
rbni
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*rbni), 
GFP_KERNEL
);

375 i‡(!
rbni
)

376  -
ENOMEM
;

378 
rbni
->
dev
 = &
pdev
->dev;

379 
rbni
->
gpio_n˚
 = 
pd©a
->gpio_nce;

380 
rbni
->
gpio_Æe
 = 
pd©a
->gpio_ale;

381 
rbni
->
gpio_˛e
 = 
pd©a
->gpio_cle;

382 
rbni
->
gpio_ªad
 = 
pd©a
->gpio_read;

383 
rbni
->
gpio_ƒw
 = 
pd©a
->gpio_nrw;

384 
rbni
->
gpio_rdy
 = 
pd©a
->gpio_rdy;

385 
rbni
->
gpio_∆e
 = 
pd©a
->gpio_nle;

387 
rbni
->
chù
.
¥iv
 = &rbni;

388 
mtd
 = 
	`rböfo_to_mtd
(
rbni
);

390 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

391 
mtd
->
¥iv
 = &
rbni
->
chù
;

393 
mtd
->
ow√r
 = 
THIS_MODULE
;

395 
rbni
->
chù
.
cmd_˘æ
 = 
rb91x_«nd_cmd_˘æ
;

396 
rbni
->
chù
.
dev_ªady
 = 
rb91x_«nd_dev_ªady
;

397 
rbni
->
chù
.
ªad_byã
 = 
rb91x_«nd_ªad_byã
;

398 
rbni
->
chù
.
wrôe_buf
 = 
rb91x_«nd_wrôe_buf
;

399 
rbni
->
chù
.
ªad_buf
 = 
rb91x_«nd_ªad_buf
;

401 
rbni
->
chù
.
chù_dñay
 = 25;

402 
rbni
->
chù
.
ecc
.
mode
 = 
NAND_ECC_SOFT
;

403 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,6,0)

404 
rbni
->
chù
.
ecc
.
Ægo
 = 
NAND_ECC_HAMMING
;

406 
rbni
->
chù
.
›ti⁄s
 = 
NAND_NO_SUBPAGE_WRITE
;

408 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
rbni
);

410 
ªt
 = 
	`rb91x_«nd_gpio_öô
(
rbni
);

411 i‡(
ªt
)

412  
ªt
;

414 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 1, 
NULL
);

415 i‡(
ªt
)

416  
ªt
;

418 i‡(
mtd
->
wrôesize
 == 512)

419 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,6,0)

420 
rbni
->
chù
.
ecc
.
œyout
 = &
rb91x_«nd_ec˛ayout
;

422 
	`mtd_£t_oobœyout
(
mtd
, &
rb91x_«nd_ec˛ayout_›s
);

425 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

426 i‡(
ªt
)

427  
ªt
;

429 
ªt
 = 
	`mtd_devi˚_ªgi°î
(
mtd
, 
rb91x_«nd_∑πôi⁄s
,

430 
	`ARRAY_SIZE
(
rb91x_«nd_∑πôi⁄s
));

431 i‡(
ªt
)

432 
îr_ªÀa£_«nd
;

436 
îr_ªÀa£_«nd
:

437 
	`«nd_ªÀa£
(
mtd
);

438  
ªt
;

439 
	}
}

441 
	$rb91x_«nd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

443 
rb91x_«nd_öfo
 *
öfo
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

445 
	`«nd_ªÀa£
(
	`rböfo_to_mtd
(
öfo
));

448 
	}
}

450 
∂©f‹m_drivî
 
	grb91x_«nd_drivî
 = {

451 .
¥obe
 = 
rb91x_«nd_¥obe
,

452 .
	gªmove
 = 
rb91x_«nd_ªmove
,

453 .
	gdrivî
 = {

454 .
«me
 = 
RB91X_NAND_DRIVER_NAME
,

455 .
	gow√r
 = 
THIS_MODULE
,

459 
moduÀ_∂©f‹m_drivî
(
rb91x_«nd_drivî
);

461 
MODULE_DESCRIPTION
(
DRV_DESC
);

462 
MODULE_VERSION
(
DRV_VERSION
);

463 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

464 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/mtd/tplinkpart.c

10 
	~<löux/kî√l.h
>

11 
	~<löux/moduÀ.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/vmÆloc.h
>

14 
	~<löux/magic.h
>

16 
	~<löux/mtd/mtd.h
>

17 
	~<löux/mtd/∑πôi⁄s.h
>

18 
	~<löux/vîsi⁄.h
>

20 
	#TPLINK_NUM_PARTS
 5

	)

21 
	#TPLINK_HEADER_V1
 0x01000000

	)

22 
	#TPLINK_HEADER_V2
 0x02000000

	)

23 
	#MD5SUM_LEN
 16

	)

25 
	#TPLINK_ART_LEN
 0x10000

	)

26 
	#TPLINK_KERNEL_OFFS
 0x20000

	)

27 
	#TPLINK_64K_KERNEL_OFFS
 0x10000

	)

29 
	sçlök_fw_hódî
 {

30 
uöt32_t
 
	mvîsi⁄
;

31 
	mvíd‹_«me
[24];

32 
	mfw_vîsi⁄
[36];

33 
uöt32_t
 
	mhw_id
;

34 
uöt32_t
 
	mhw_ªv
;

35 
uöt32_t
 
	munk1
;

36 
uöt8_t
 
	mmd5sum1
[
MD5SUM_LEN
];

37 
uöt32_t
 
	munk2
;

38 
uöt8_t
 
	mmd5sum2
[
MD5SUM_LEN
];

39 
uöt32_t
 
	munk3
;

40 
uöt32_t
 
	mkî√l_œ
;

41 
uöt32_t
 
	mkî√l_ï
;

42 
uöt32_t
 
	mfw_Àngth
;

43 
uöt32_t
 
	mkî√l_ofs
;

44 
uöt32_t
 
	mkî√l_Àn
;

45 
uöt32_t
 
	mroŸfs_ofs
;

46 
uöt32_t
 
	mroŸfs_Àn
;

47 
uöt32_t
 
	mboŸ_ofs
;

48 
uöt32_t
 
	mboŸ_Àn
;

49 
uöt8_t
 
	m∑d
[360];

50 } 
__©åibuã__
 ((
∑cked
));

52 
çlök_fw_hódî
 *

53 
	$çlök_ªad_hódî
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
)

55 
çlök_fw_hódî
 *
hódî
;

56 
size_t
 
hódî_Àn
;

57 
size_t
 
ªéí
;

58 
ªt
;

59 
u32
 
t
;

61 
hódî
 = 
	`vmÆloc
((*header));

62 i‡(!
hódî
)

63 
îr
;

65 
hódî_Àn
 = (
çlök_fw_hódî
);

66 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, 
hódî_Àn
, &
ªéí
,

67 (*Ë
hódî
);

68 i‡(
ªt
)

69 
îr_‰ì_hódî
;

71 i‡(
ªéí
 !
hódî_Àn
)

72 
îr_‰ì_hódî
;

75 
t
 = 
	`be32_to_˝u
(
hódî
->
vîsi⁄
);

76 i‡((
t
 !
TPLINK_HEADER_V1
Ë&& (à!
TPLINK_HEADER_V2
))

77 
îr_‰ì_hódî
;

79 
t
 = 
	`be32_to_˝u
(
hódî
->
kî√l_ofs
);

80 i‡(
t
 !
hódî_Àn
)

81 
îr_‰ì_hódî
;

83  
hódî
;

85 
îr_‰ì_hódî
:

86 
	`v‰ì
(
hódî
);

87 
îr
:

88  
NULL
;

89 
	}
}

91 
	$çlök_check_roŸfs_magic
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
)

93 
u32
 
magic
;

94 
size_t
 
ªéí
;

95 
ªt
;

97 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, (
magic
), &
ªéí
,

98 (*Ë&
magic
);

99 i‡(
ªt
)

100  
ªt
;

102 i‡(
ªéí
 !(
magic
))

103  -
EIO
;

105 i‡(
	`À32_to_˝u
(
magic
Ë!
SQUASHFS_MAGIC
 &&

106 
magic
 != 0x19852003)

107  -
EINVAL
;

110 
	}
}

112 
çlök_∑r£_∑πôi⁄s_off£t
(
mtd_öfo
 *
ma°î
,

113 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

114 
mtd_∑πôi⁄
 **
µ¨ts
,

116 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

118 
mtd_∑π_∑r£r_d©a
 *
d©a
,

119 
size_t
 
off£t
)

121 
mtd_∑πôi⁄
 *
	g∑πs
;

122 
çlök_fw_hódî
 *
	ghódî
;

123 
	gƒ_∑πs
;

124 
size_t
 
	g¨t_off£t
;

125 
size_t
 
	groŸfs_off£t
;

126 
size_t
 
	gsquashfs_off£t
;

127 
	gªt
;

129 
	gƒ_∑πs
 = 
TPLINK_NUM_PARTS
;

130 
	g∑πs
 = 
kzÆloc
(
ƒ_∑πs
 * (
mtd_∑πôi⁄
), 
GFP_KERNEL
);

131 i‡(!
	g∑πs
) {

132 
	gªt
 = -
ENOMEM
;

133 
	gîr
;

136 
	ghódî
 = 
çlök_ªad_hódî
(
ma°î
, 
off£t
);

137 i‡(!
	ghódî
) {

138 
¥_nŸi˚
("%s:ÇÿTP-Lök hódî found\n", 
ma°î
->
«me
);

139 
	gªt
 = -
ENODEV
;

140 
	gîr_‰ì_∑πs
;

143 
	gsquashfs_off£t
 = 
off£t
 + (
çlök_fw_hódî
) +

144 
be32_to_˝u
(
hódî
->
kî√l_Àn
);

146 
	gªt
 = 
çlök_check_roŸfs_magic
(
ma°î
, 
squashfs_off£t
);

147 i‡(
	gªt
 == 0)

148 
roŸfs_off£t
 = 
squashfs_off£t
;

150 
	groŸfs_off£t
 = 
off£t
 + 
be32_to_˝u
(
hódî
->
roŸfs_ofs
);

152 
	g¨t_off£t
 = 
ma°î
->
size
 - 
TPLINK_ART_LEN
;

154 
	g∑πs
[0].
	g«me
 = "u-boot";

155 
	g∑πs
[0].
	goff£t
 = 0;

156 
	g∑πs
[0].
	gsize
 = 
off£t
;

157 
	g∑πs
[0].
	gmask_Êags
 = 
MTD_WRITEABLE
;

159 
	g∑πs
[1].
	g«me
 = "kernel";

160 
	g∑πs
[1].
	goff£t
 = 
off£t
;

161 
	g∑πs
[1].
	gsize
 = 
roŸfs_off£t
 - 
off£t
;

163 
	g∑πs
[2].
	g«me
 = "rootfs";

164 
	g∑πs
[2].
	goff£t
 = 
roŸfs_off£t
;

165 
	g∑πs
[2].
	gsize
 = 
¨t_off£t
 - 
roŸfs_off£t
;

167 
	g∑πs
[3].
	g«me
 = "art";

168 
	g∑πs
[3].
	goff£t
 = 
¨t_off£t
;

169 
	g∑πs
[3].
	gsize
 = 
TPLINK_ART_LEN
;

170 
	g∑πs
[3].
	gmask_Êags
 = 
MTD_WRITEABLE
;

172 
	g∑πs
[4].
	g«me
 = "firmware";

173 
	g∑πs
[4].
	goff£t
 = 
off£t
;

174 
	g∑πs
[4].
	gsize
 = 
¨t_off£t
 - 
off£t
;

176 
v‰ì
(
hódî
);

178 *
	gµ¨ts
 = 
∑πs
;

179  
	gƒ_∑πs
;

181 
	gîr_‰ì_∑πs
:

182 
k‰ì
(
∑πs
);

183 
	gîr
:

184 *
µ¨ts
 = 
NULL
;

185  
	gªt
;

188 
çlök_∑r£_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

189 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

190 
mtd_∑πôi⁄
 **
µ¨ts
,

192 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

194 
mtd_∑π_∑r£r_d©a
 *
d©a
)

196  
çlök_∑r£_∑πôi⁄s_off£t
(
ma°î
, 
µ¨ts
, 
d©a
,

197 
TPLINK_KERNEL_OFFS
);

200 
çlök_∑r£_64k_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

201 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

202 
mtd_∑πôi⁄
 **
µ¨ts
,

204 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

206 
mtd_∑π_∑r£r_d©a
 *
d©a
)

208  
çlök_∑r£_∑πôi⁄s_off£t
(
ma°î
, 
µ¨ts
, 
d©a
,

209 
TPLINK_64K_KERNEL_OFFS
);

212 
mtd_∑π_∑r£r
 
	gçlök_∑r£r
 = {

213 .
ow√r
 = 
THIS_MODULE
,

214 .
	g∑r£_‚
 = 
çlök_∑r£_∑πôi⁄s
,

215 .
	g«me
 = "tp-link",

218 
mtd_∑π_∑r£r
 
	gçlök_64k_∑r£r
 = {

219 .
ow√r
 = 
THIS_MODULE
,

220 .
	g∑r£_‚
 = 
çlök_∑r£_64k_∑πôi⁄s
,

221 .
	g«me
 = "tp-link-64k",

224 
__öô
 
	$çlök_∑r£r_öô
()

226 
	`ªgi°î_mtd_∑r£r
(&
çlök_∑r£r
);

227 
	`ªgi°î_mtd_∑r£r
(&
çlök_64k_∑r£r
);

230 
	}
}

232 
moduÀ_öô
(
çlök_∑r£r_öô
);

234 
MODULE_LICENSE
("GPL v2");

235 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

	@linux/ar71xx/files/drivers/net/dsa/mv88e6063.c

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/√tdevi˚.h
>

18 
	~<löux/phy.h
>

19 
	~<√t/dß.h
>

20 
	~<löux/vîsi⁄.h
>

22 
	#REG_BASE
 0x10

	)

23 
	#REG_PHY
(
p
Ë(
REG_BASE
 + (p))

	)

24 
	#REG_PORT
(
p
Ë(
REG_BASE
 + 8 + (p))

	)

25 
	#REG_GLOBAL
 (
REG_BASE
 + 0x0f)

	)

26 
	#NUM_PORTS
 7

	)

28 
	$ªg_ªad
(
dß_swôch
 *
ds
, 
addr
, 
ªg
)

30 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,7,0)

31 
mii_bus
 *
bus
 = 
	`dß_ho°_dev_to_mii_bus
(
ds
->
ma°î_dev
);

32  
	`mdiobus_ªad
(
bus
, 
addr
, 
ªg
);

34 
mii_bus
 *
bus
 = 
	`dß_ho°_dev_to_mii_bus
(
ds
->
dev
);

35  
	`mdiobus_ªad
(
bus
, 
addr
, 
ªg
);

37 
	}
}

39 
	#REG_READ
(
addr
, 
ªg
) \

41 
__ªt
; \

43 
__ªt
 = 
	`ªg_ªad
(
ds
, 
addr
, 
ªg
); \

44 i‡(
__ªt
 < 0) \

45  
__ªt
; \

46 
__ªt
; \

47 })

	)

50 
	$ªg_wrôe
(
dß_swôch
 *
ds
, 
addr
, 
ªg
, 
u16
 
vÆ
)

52 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,7,0)

53 
mii_bus
 *
bus
 = 
	`dß_ho°_dev_to_mii_bus
(
ds
->
ma°î_dev
);

54  
	`mdiobus_wrôe
(
bus
, 
addr
, 
ªg
, 
vÆ
);

56 
mii_bus
 *
bus
 = 
	`dß_ho°_dev_to_mii_bus
(
ds
->
dev
);

57  
	`mdiobus_wrôe
(
bus
, 
addr
, 
ªg
, 
vÆ
);

59 
	}
}

61 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4,8,0)

62 
dß_èg_¥Ÿocﬁ
 
	$mv88e6063_gë_èg_¥Ÿocﬁ
(
dß_swôch
 *
ds
)

64  
DSA_TAG_PROTO_TRAILER
;

65 
	}
}

68 
	#REG_WRITE
(
addr
, 
ªg
, 
vÆ
) \

70 
__ªt
; \

72 
__ªt
 = 
	`ªg_wrôe
(
ds
, 
addr
, 
ªg
, 
vÆ
); \

73 i‡(
__ªt
 < 0) \

74  
__ªt
; \

75 })

	)

77 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,7,0)

78 *
	$mv88e6063_drv_¥obe
(
devi˚
 *
ho°_dev
, 
sw_addr
)

80 c⁄° *
	$mv88e6063_drv_¥obe
(
devi˚
 *
dß_dev
,

81 
devi˚
 *
ho°_dev
, 
sw_addr
,

82 **
_¥iv
)

85 
mii_bus
 *
bus
 = 
	`dß_ho°_dev_to_mii_bus
(
ho°_dev
);

86 
ªt
;

88 i‡(!
bus
)

89  
NULL
;

91 
ªt
 = 
	`mdiobus_ªad
(
bus
, 
	`REG_PORT
(0), 0x03);

92 i‡(
ªt
 >= 0) {

93 
ªt
 &= 0xfff0;

94 i‡(
ªt
 == 0x1530)

98  
NULL
;

99 
	}
}

101 
	$mv88e6063_swôch_ª£t
(
dß_swôch
 *
ds
)

103 
i
;

104 
ªt
;

109 
i
 = 0; i < 
NUM_PORTS
; i++) {

110 
ªt
 = 
	`REG_READ
(
	`REG_PORT
(
i
), 0x04);

111 
	`REG_WRITE
(
	`REG_PORT
(
i
), 0x04, 
ªt
 & 0xfffc);

117 
	`m¶ìp
(2);

122 
	`REG_WRITE
(
REG_GLOBAL
, 0x0a, 0xa130);

127 
i
 = 0; i < 1000; i++) {

128 
ªt
 = 
	`REG_READ
(
REG_GLOBAL
, 0x00);

129 i‡((
ªt
 & 0x8000) == 0x0000)

132 
	`m¶ìp
(1);

134 i‡(
i
 == 1000)

135  -
ETIMEDOUT
;

138 
	}
}

140 
	$mv88e6063_£tup_globÆ
(
dß_swôch
 *
ds
)

147 
	`REG_WRITE
(
REG_GLOBAL
, 0x04, 0x0800);

154 
	`REG_WRITE
(
REG_GLOBAL
, 0x0a, 0x2130);

157 
	}
}

159 
	$mv88e6063_£tup_p‹t
(
dß_swôch
 *
ds
, 
p
)

161 
addr
 = 
	`REG_PORT
(
p
);

169 
	`REG_WRITE
(
addr
, 0x04, 
	`dß_is_˝u_p‹t
(
ds
, 
p
) ? 0x4103 : 0x0003);

177 
	`REG_WRITE
(
addr
, 0x06,

178 ((
p
 & 0xf) << 12) |

179 (
	`dß_is_˝u_p‹t
(
ds
, 
p
) ?

180 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,7,0)

181 
ds
->
phys_p‹t_mask
 :

183 
ds
->
íabÀd_p‹t_mask
 :

185 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,14,0)

186 (1 << 
ds
->
d°
->
˝u_p‹t
)));

188 (1 << 
ds
->
d°
->
˝u_dp
->
ödex
)));

197 
	`REG_WRITE
(
addr
, 0x0b, 1 << 
p
);

200 
	}
}

202 
	$mv88e6063_£tup
(
dß_swôch
 *
ds
)

204 
i
;

205 
ªt
;

207 
ªt
 = 
	`mv88e6063_swôch_ª£t
(
ds
);

208 i‡(
ªt
 < 0)

209  
ªt
;

213 
ªt
 = 
	`mv88e6063_£tup_globÆ
(
ds
);

214 i‡(
ªt
 < 0)

215  
ªt
;

217 
i
 = 0; i < 
NUM_PORTS
; i++) {

218 
ªt
 = 
	`mv88e6063_£tup_p‹t
(
ds
, 
i
);

219 i‡(
ªt
 < 0)

220  
ªt
;

224 
	}
}

226 
	$mv88e6063_£t_addr
(
dß_swôch
 *
ds
, 
u8
 *
addr
)

228 
	`REG_WRITE
(
REG_GLOBAL
, 0x01, (
addr
[0] << 8) |áddr[1]);

229 
	`REG_WRITE
(
REG_GLOBAL
, 0x02, (
addr
[2] << 8) |áddr[3]);

230 
	`REG_WRITE
(
REG_GLOBAL
, 0x03, (
addr
[4] << 8) |áddr[5]);

233 
	}
}

235 
	$mv88e6063_p‹t_to_phy_addr
(
p‹t
)

237 i‡(
p‹t
 >0 &&Ö‹à<
NUM_PORTS
)

238  
	`REG_PHY
(
p‹t
);

240 
	}
}

242 
	$mv88e6063_phy_ªad
(
dß_swôch
 *
ds
, 
p‹t
, 
ªgnum
)

244 
addr
;

246 
addr
 = 
	`mv88e6063_p‹t_to_phy_addr
(
p‹t
);

247 i‡(
addr
 == -1)

250  
	`ªg_ªad
(
ds
, 
addr
, 
ªgnum
);

251 
	}
}

254 
	$mv88e6063_phy_wrôe
(
dß_swôch
 *
ds
, 
p‹t
, 
ªgnum
, 
u16
 
vÆ
)

256 
addr
;

258 
addr
 = 
	`mv88e6063_p‹t_to_phy_addr
(
p‹t
);

259 i‡(
addr
 == -1)

262  
	`ªg_wrôe
(
ds
, 
addr
, 
ªgnum
, 
vÆ
);

263 
	}
}

265 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,9,0)

266 
dß_swôch_drivî
 
	gmv88e6063_swôch_›s
 = {

268 
dß_swôch_›s
 
mv88e6063_swôch_›s
 = {

270 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,8,0)

271 .
èg_¥Ÿocﬁ
 = 
ht⁄s
(
ETH_P_TRAILER
),

273 .
	ggë_èg_¥Ÿocﬁ
 = 
mv88e6063_gë_èg_¥Ÿocﬁ
,

275 .
	g¥obe
 = 
mv88e6063_drv_¥obe
,

276 .
	g£tup
 = 
mv88e6063_£tup
,

277 .
	g£t_addr
 = 
mv88e6063_£t_addr
,

278 .
	gphy_ªad
 = 
mv88e6063_phy_ªad
,

279 .
	gphy_wrôe
 = 
mv88e6063_phy_wrôe
,

282 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(4,13,0)

283 
dß_swôch_drivî
 
	gmv88e6063_swôch_drv
 = {

284 .
›s
 = &
mv88e6063_swôch_›s
,

288 
__öô
 
	$mv88e6063_öô
()

290 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,14,0)

291 
	`ªgi°î_swôch_drivî
(&
mv88e6063_swôch_›s
);

293 
	`ªgi°î_swôch_drivî
(&
mv88e6063_swôch_drv
);

296 
	}
}

297 
moduÀ_öô
(
mv88e6063_öô
);

299 
__exô
 
	$mv88e6063_˛ónup
()

301 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,14,0)

302 
	`uƒegi°î_swôch_drivî
(&
mv88e6063_swôch_›s
);

304 
	`uƒegi°î_swôch_drivî
(&
mv88e6063_swôch_drv
);

306 
	}
}

307 
moduÀ_exô
(
mv88e6063_˛ónup
);

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h

14 #i‚de‡
__AG71XX_H


15 
	#__AG71XX_H


	)

17 
	~<löux/kî√l.h
>

18 
	~<löux/vîsi⁄.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/øndom.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/ëhtoﬁ.h
>

27 
	~<löux/ëhîdevi˚.h
>

28 
	~<löux/if_vœn.h
>

29 
	~<löux/phy.h
>

30 
	~<löux/skbuff.h
>

31 
	~<löux/dma-m≠pög.h
>

32 
	~<löux/w‹kqueue.h
>

34 
	~<löux/bô›s.h
>

36 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

37 
	~<asm/mach-©h79/©h79.h
>

38 
	~<asm/mach-©h79/ag71xx_∂©f‹m.h
>

40 
	#AG71XX_DRV_NAME
 "ag71xx"

	)

41 
	#AG71XX_DRV_VERSION
 "0.5.35"

	)

48 
	#AG71XX_NAPI_WEIGHT
 32

	)

49 
	#AG71XX_OOM_REFILL
 (1 + 
HZ
/10)

	)

51 
	#AG71XX_INT_ERR
 (
AG71XX_INT_RX_BE
 | 
AG71XX_INT_TX_BE
)

	)

52 
	#AG71XX_INT_TX
 (
AG71XX_INT_TX_PS
)

	)

53 
	#AG71XX_INT_RX
 (
AG71XX_INT_RX_PR
 | 
AG71XX_INT_RX_OF
)

	)

55 
	#AG71XX_INT_POLL
 (
AG71XX_INT_RX
 | 
AG71XX_INT_TX
)

	)

56 
	#AG71XX_INT_INIT
 (
AG71XX_INT_ERR
 | 
AG71XX_INT_POLL
)

	)

58 
	#AG71XX_TX_MTU_LEN
 1540

	)

60 
	#AG71XX_TX_RING_SPLIT
 512

	)

61 
	#AG71XX_TX_RING_DS_PER_PKT
 
	`DIV_ROUND_UP
(
AG71XX_TX_MTU_LEN
, \

62 
AG71XX_TX_RING_SPLIT
)

	)

63 
	#AG71XX_TX_RING_SIZE_DEFAULT
 128

	)

64 
	#AG71XX_RX_RING_SIZE_DEFAULT
 256

	)

66 
	#AG71XX_TX_RING_SIZE_MAX
 128

	)

67 
	#AG71XX_RX_RING_SIZE_MAX
 256

	)

69 
	#QCA955X_SGMII_LINK_WAR_MAX_TRY
 10

	)

71 #ifde‡
CONFIG_AG71XX_DEBUG


72 
	#DBG
(
fmt
, 
¨gs
...Ë
	`¥_debug
(fmt, ##árgs)

	)

74 
	#DBG
(
fmt
, 
¨gs
...Ëdÿ{} 0)

	)

77 
	#ag71xx_as£π
(
_c⁄d
) \

79 i‡(
_c⁄d
) \

81 
	`¥ötk
("%s,%d:ás£πi⁄ faûed\n", 
__FILE__
, 
__LINE__
); \

82 
	`BUG
(); \

83 } 0)

	)

85 
	sag71xx_desc
 {

86 
u32
 
	md©a
;

87 
u32
 
	m˘æ
;

88 
	#DESC_EMPTY
 
	`BIT
(31)

	)

89 
	#DESC_MORE
 
	`BIT
(24)

	)

90 
	#DESC_PKTLEN_M
 0xfff

	)

91 
u32
 
	m√xt
;

92 
u32
 
	m∑d
;

93 } 
__©åibuã__
((
Æig√d
(4)));

95 
	#AG71XX_DESC_SIZE
 
	`roundup
((
ag71xx_desc
), \

96 
L1_CACHE_BYTES
)

	)

98 
	sag71xx_buf
 {

100 
sk_buff
 *
	mskb
;

101 *
	mrx_buf
;

104 
dma_addr_t
 
	mdma_addr
;

105 
	mÀn
;

109 
	sag71xx_rög
 {

110 
ag71xx_buf
 *
	mbuf
;

111 
u8
 *
	mdescs_˝u
;

112 
dma_addr_t
 
	mdescs_dma
;

113 
u16
 
	mdesc_•lô
;

114 
u16
 
	m‹dî
;

115 
	mcuº
;

116 
	mdúty
;

119 
	sag71xx_mdio
 {

120 
mii_bus
 *
	mmii_bus
;

121 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

122 
	mmii_úq
[
PHY_MAX_ADDR
];

124 
__iomem
 *
	mmdio_ba£
;

125 
ag71xx_mdio_∂©f‹m_d©a
 *
	mpd©a
;

128 
	sag71xx_öt_°©s
 {

129 
	mrx_¥
;

130 
	mrx_be
;

131 
	mrx_of
;

132 
	mtx_ps
;

133 
	mtx_be
;

134 
	mtx_ur
;

135 
	mtŸÆ
;

138 
	sag71xx_«pi_°©s
 {

139 
	m«pi_ˇŒs
;

140 
	mrx_cou¡
;

141 
	mrx_∑ckës
;

142 
	mrx_∑ckës_max
;

143 
	mtx_cou¡
;

144 
	mtx_∑ckës
;

145 
	mtx_∑ckës_max
;

147 
	mrx
[
AG71XX_NAPI_WEIGHT
 + 1];

148 
	mtx
[
AG71XX_NAPI_WEIGHT
 + 1];

151 
	sag71xx_debug
 {

152 
díåy
 *
	mdebugfs_dú
;

154 
ag71xx_öt_°©s
 
	möt_°©s
;

155 
ag71xx_«pi_°©s
 
	m«pi_°©s
;

158 
	sag71xx
 {

163 
ag71xx_rög
 
rx_rög
 
	m____ˇchñöe_Æig√d
;

164 
ag71xx_rög
 
tx_rög
 
	m____ˇchñöe_Æig√d
;

166 
	mmax_‰ame_Àn
;

167 
	mdesc_pkéí_mask
;

168 
	mrx_buf_size
;

170 
√t_devi˚
 *
	mdev
;

171 
∂©f‹m_devi˚
 *
	mpdev
;

172 
•ölock_t
 
	mlock
;

173 
«pi_°ru˘
 
	m«pi
;

174 
u32
 
	mmsg_íabÀ
;

179 
__iomem
 *
	mmac_ba£
;

181 
ag71xx_desc
 *
	m°›_desc
;

182 
dma_addr_t
 
	m°›_desc_dma
;

184 
mii_bus
 *
	mmii_bus
;

185 
phy_devi˚
 *
	mphy_dev
;

186 *
	mphy_¥iv
;

188 
	mlök
;

189 
	m•ìd
;

190 
	mdu∂ex
;

192 
dñayed_w‹k
 
	mª°¨t_w‹k
;

193 
dñayed_w‹k
 
	mlök_w‹k
;

194 
timî_li°
 
	moom_timî
;

196 #ifde‡
CONFIG_AG71XX_DEBUG_FS


197 
ag71xx_debug
 
	mdebug
;

201 
ëhtoﬁ_›s
 
ag71xx_ëhtoﬁ_›s
;

202 
ag71xx_lök_adju°
(
ag71xx
 *
ag
);

204 
	$ag71xx_mdio_drivî_öô
(Ë
__öô
;

205 
	`ag71xx_mdio_drivî_exô
();

207 
	`ag71xx_phy_c⁄√˘
(
ag71xx
 *
ag
);

208 
	`ag71xx_phy_disc⁄√˘
(
ag71xx
 *
ag
);

209 
	`ag71xx_phy_°¨t
(
ag71xx
 *
ag
);

210 
	`ag71xx_phy_°›
(
ag71xx
 *
ag
);

212 
ölöe
 
ag71xx_∂©f‹m_d©a
 *
	$ag71xx_gë_pd©a
(
ag71xx
 *
ag
)

214  
ag
->
pdev
->
dev
.
∂©f‹m_d©a
;

215 
	}
}

217 
ölöe
 
	$ag71xx_desc_em±y
(
ag71xx_desc
 *
desc
)

219  (
desc
->
˘æ
 & 
DESC_EMPTY
) != 0;

220 
	}
}

222 
ölöe
 
ag71xx_desc
 *

223 
	$ag71xx_rög_desc
(
ag71xx_rög
 *
rög
, 
idx
)

225  (
ag71xx_desc
 *Ë&
rög
->
descs_˝u
[
idx
 * 
AG71XX_DESC_SIZE
];

226 
	}
}

228 
ölöe
 

229 
	$ag71xx_rög_size_‹dî
(
size
)

231  
	`Ês
(
size
 - 1);

232 
	}
}

235 
	#AG71XX_REG_MAC_CFG1
 0x0000

	)

236 
	#AG71XX_REG_MAC_CFG2
 0x0004

	)

237 
	#AG71XX_REG_MAC_IPG
 0x0008

	)

238 
	#AG71XX_REG_MAC_HDX
 0x000c

	)

239 
	#AG71XX_REG_MAC_MFL
 0x0010

	)

240 
	#AG71XX_REG_MII_CFG
 0x0020

	)

241 
	#AG71XX_REG_MII_CMD
 0x0024

	)

242 
	#AG71XX_REG_MII_ADDR
 0x0028

	)

243 
	#AG71XX_REG_MII_CTRL
 0x002c

	)

244 
	#AG71XX_REG_MII_STATUS
 0x0030

	)

245 
	#AG71XX_REG_MII_IND
 0x0034

	)

246 
	#AG71XX_REG_MAC_IFCTL
 0x0038

	)

247 
	#AG71XX_REG_MAC_ADDR1
 0x0040

	)

248 
	#AG71XX_REG_MAC_ADDR2
 0x0044

	)

249 
	#AG71XX_REG_FIFO_CFG0
 0x0048

	)

250 
	#AG71XX_REG_FIFO_CFG1
 0x004c

	)

251 
	#AG71XX_REG_FIFO_CFG2
 0x0050

	)

252 
	#AG71XX_REG_FIFO_CFG3
 0x0054

	)

253 
	#AG71XX_REG_FIFO_CFG4
 0x0058

	)

254 
	#AG71XX_REG_FIFO_CFG5
 0x005c

	)

255 
	#AG71XX_REG_FIFO_RAM0
 0x0060

	)

256 
	#AG71XX_REG_FIFO_RAM1
 0x0064

	)

257 
	#AG71XX_REG_FIFO_RAM2
 0x0068

	)

258 
	#AG71XX_REG_FIFO_RAM3
 0x006c

	)

259 
	#AG71XX_REG_FIFO_RAM4
 0x0070

	)

260 
	#AG71XX_REG_FIFO_RAM5
 0x0074

	)

261 
	#AG71XX_REG_FIFO_RAM6
 0x0078

	)

262 
	#AG71XX_REG_FIFO_RAM7
 0x007c

	)

264 
	#AG71XX_REG_TX_CTRL
 0x0180

	)

265 
	#AG71XX_REG_TX_DESC
 0x0184

	)

266 
	#AG71XX_REG_TX_STATUS
 0x0188

	)

267 
	#AG71XX_REG_RX_CTRL
 0x018c

	)

268 
	#AG71XX_REG_RX_DESC
 0x0190

	)

269 
	#AG71XX_REG_RX_STATUS
 0x0194

	)

270 
	#AG71XX_REG_INT_ENABLE
 0x0198

	)

271 
	#AG71XX_REG_INT_STATUS
 0x019c

	)

273 
	#AG71XX_REG_FIFO_DEPTH
 0x01a8

	)

274 
	#AG71XX_REG_RX_SM
 0x01b0

	)

275 
	#AG71XX_REG_TX_SM
 0x01b4

	)

277 
	#MAC_CFG1_TXE
 
	`BIT
(0Ë

	)

278 
	#MAC_CFG1_STX
 
	`BIT
(1Ë

	)

279 
	#MAC_CFG1_RXE
 
	`BIT
(2Ë

	)

280 
	#MAC_CFG1_SRX
 
	`BIT
(3Ë

	)

281 
	#MAC_CFG1_TFC
 
	`BIT
(4Ë

	)

282 
	#MAC_CFG1_RFC
 
	`BIT
(5Ë

	)

283 
	#MAC_CFG1_LB
 
	`BIT
(8Ë

	)

284 
	#MAC_CFG1_SR
 
	`BIT
(31Ë

	)

286 
	#MAC_CFG2_FDX
 
	`BIT
(0)

	)

287 
	#MAC_CFG2_CRC_EN
 
	`BIT
(1)

	)

288 
	#MAC_CFG2_PAD_CRC_EN
 
	`BIT
(2)

	)

289 
	#MAC_CFG2_LEN_CHECK
 
	`BIT
(4)

	)

290 
	#MAC_CFG2_HUGE_FRAME_EN
 
	`BIT
(5)

	)

291 
	#MAC_CFG2_IF_1000
 
	`BIT
(9)

	)

292 
	#MAC_CFG2_IF_10_100
 
	`BIT
(8)

	)

294 
	#FIFO_CFG0_WTM
 
	`BIT
(0Ë

	)

295 
	#FIFO_CFG0_RXS
 
	`BIT
(1Ë

	)

296 
	#FIFO_CFG0_RXF
 
	`BIT
(2Ë

	)

297 
	#FIFO_CFG0_TXS
 
	`BIT
(3Ë

	)

298 
	#FIFO_CFG0_TXF
 
	`BIT
(4Ë

	)

299 
	#FIFO_CFG0_ALL
 (
FIFO_CFG0_WTM
 | 
FIFO_CFG0_RXS
 | 
FIFO_CFG0_RXF
 \

300 | 
FIFO_CFG0_TXS
 | 
FIFO_CFG0_TXF
)

	)

302 
	#FIFO_CFG0_ENABLE_SHIFT
 8

	)

304 
	#FIFO_CFG4_DE
 
	`BIT
(0Ë

	)

305 
	#FIFO_CFG4_DV
 
	`BIT
(1Ë

	)

306 
	#FIFO_CFG4_FC
 
	`BIT
(2Ë

	)

307 
	#FIFO_CFG4_CE
 
	`BIT
(3Ë

	)

308 
	#FIFO_CFG4_CR
 
	`BIT
(4Ë

	)

309 
	#FIFO_CFG4_LM
 
	`BIT
(5Ë

	)

310 
	#FIFO_CFG4_LO
 
	`BIT
(6Ë

	)

311 
	#FIFO_CFG4_OK
 
	`BIT
(7Ë

	)

312 
	#FIFO_CFG4_MC
 
	`BIT
(8Ë

	)

313 
	#FIFO_CFG4_BC
 
	`BIT
(9Ë

	)

314 
	#FIFO_CFG4_DR
 
	`BIT
(10Ë

	)

315 
	#FIFO_CFG4_LE
 
	`BIT
(11Ë

	)

316 
	#FIFO_CFG4_CF
 
	`BIT
(12Ë

	)

317 
	#FIFO_CFG4_PF
 
	`BIT
(13Ë

	)

318 
	#FIFO_CFG4_UO
 
	`BIT
(14Ë

	)

319 
	#FIFO_CFG4_VT
 
	`BIT
(15Ë

	)

320 
	#FIFO_CFG4_FT
 
	`BIT
(16Ë

	)

321 
	#FIFO_CFG4_UC
 
	`BIT
(17Ë

	)

323 
	#FIFO_CFG5_DE
 
	`BIT
(0Ë

	)

324 
	#FIFO_CFG5_DV
 
	`BIT
(1Ë

	)

325 
	#FIFO_CFG5_FC
 
	`BIT
(2Ë

	)

326 
	#FIFO_CFG5_CE
 
	`BIT
(3Ë

	)

327 
	#FIFO_CFG5_LM
 
	`BIT
(4Ë

	)

328 
	#FIFO_CFG5_LO
 
	`BIT
(5Ë

	)

329 
	#FIFO_CFG5_OK
 
	`BIT
(6Ë

	)

330 
	#FIFO_CFG5_MC
 
	`BIT
(7Ë

	)

331 
	#FIFO_CFG5_BC
 
	`BIT
(8Ë

	)

332 
	#FIFO_CFG5_DR
 
	`BIT
(9Ë

	)

333 
	#FIFO_CFG5_CF
 
	`BIT
(10Ë

	)

334 
	#FIFO_CFG5_PF
 
	`BIT
(11Ë

	)

335 
	#FIFO_CFG5_UO
 
	`BIT
(12Ë

	)

336 
	#FIFO_CFG5_VT
 
	`BIT
(13Ë

	)

337 
	#FIFO_CFG5_LE
 
	`BIT
(14Ë

	)

338 
	#FIFO_CFG5_FT
 
	`BIT
(15Ë

	)

339 
	#FIFO_CFG5_16
 
	`BIT
(16Ë

	)

340 
	#FIFO_CFG5_17
 
	`BIT
(17Ë

	)

341 
	#FIFO_CFG5_SF
 
	`BIT
(18Ë

	)

342 
	#FIFO_CFG5_BM
 
	`BIT
(19Ë

	)

344 
	#AG71XX_INT_TX_PS
 
	`BIT
(0)

	)

345 
	#AG71XX_INT_TX_UR
 
	`BIT
(1)

	)

346 
	#AG71XX_INT_TX_BE
 
	`BIT
(3)

	)

347 
	#AG71XX_INT_RX_PR
 
	`BIT
(4)

	)

348 
	#AG71XX_INT_RX_OF
 
	`BIT
(6)

	)

349 
	#AG71XX_INT_RX_BE
 
	`BIT
(7)

	)

351 
	#MAC_IFCTL_SPEED
 
	`BIT
(16)

	)

353 
	#MII_CFG_CLK_DIV_4
 0

	)

354 
	#MII_CFG_CLK_DIV_6
 2

	)

355 
	#MII_CFG_CLK_DIV_8
 3

	)

356 
	#MII_CFG_CLK_DIV_10
 4

	)

357 
	#MII_CFG_CLK_DIV_14
 5

	)

358 
	#MII_CFG_CLK_DIV_20
 6

	)

359 
	#MII_CFG_CLK_DIV_28
 7

	)

360 
	#MII_CFG_CLK_DIV_34
 8

	)

361 
	#MII_CFG_CLK_DIV_42
 9

	)

362 
	#MII_CFG_CLK_DIV_50
 10

	)

363 
	#MII_CFG_CLK_DIV_58
 11

	)

364 
	#MII_CFG_CLK_DIV_66
 12

	)

365 
	#MII_CFG_CLK_DIV_74
 13

	)

366 
	#MII_CFG_CLK_DIV_82
 14

	)

367 
	#MII_CFG_CLK_DIV_98
 15

	)

368 
	#MII_CFG_RESET
 
	`BIT
(31)

	)

370 
	#MII_CMD_WRITE
 0x0

	)

371 
	#MII_CMD_READ
 0x1

	)

372 
	#MII_ADDR_SHIFT
 8

	)

373 
	#MII_IND_BUSY
 
	`BIT
(0)

	)

374 
	#MII_IND_INVALID
 
	`BIT
(2)

	)

376 
	#TX_CTRL_TXE
 
	`BIT
(0Ë

	)

378 
	#TX_STATUS_PS
 
	`BIT
(0Ë

	)

379 
	#TX_STATUS_UR
 
	`BIT
(1Ë

	)

380 
	#TX_STATUS_BE
 
	`BIT
(3Ë

	)

382 
	#RX_CTRL_RXE
 
	`BIT
(0Ë

	)

384 
	#RX_STATUS_PR
 
	`BIT
(0Ë

	)

385 
	#RX_STATUS_OF
 
	`BIT
(2Ë

	)

386 
	#RX_STATUS_BE
 
	`BIT
(3Ë

	)

388 
ölöe
 
	$ag71xx_check_ªg_off£t
(
ag71xx
 *
ag
, 
ªg
)

390 
ªg
) {

391 
AG71XX_REG_MAC_CFG1
 ... 
AG71XX_REG_MAC_MFL
:

392 
AG71XX_REG_MAC_IFCTL
 ... 
AG71XX_REG_TX_SM
:

393 
AG71XX_REG_MII_CFG
:

397 
	`BUG
();

399 
	}
}

401 
ölöe
 
	$ag71xx_wr
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
vÆue
)

403 
	`ag71xx_check_ªg_off£t
(
ag
, 
ªg
);

405 
	`__øw_wrôñ
(
vÆue
, 
ag
->
mac_ba£
 + 
ªg
);

407 (Ë
	`__øw_ªadl
(
ag
->
mac_ba£
 + 
ªg
);

408 
	}
}

410 
ölöe
 
u32
 
	$ag71xx_º
(
ag71xx
 *
ag
, 
ªg
)

412 
	`ag71xx_check_ªg_off£t
(
ag
, 
ªg
);

414  
	`__øw_ªadl
(
ag
->
mac_ba£
 + 
ªg
);

415 
	}
}

417 
ölöe
 
	$ag71xx_sb
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
mask
)

419 
__iomem
 *
r
;

421 
	`ag71xx_check_ªg_off£t
(
ag
, 
ªg
);

423 
r
 = 
ag
->
mac_ba£
 + 
ªg
;

424 
	`__øw_wrôñ
(
	`__øw_ªadl
(
r
Ë| 
mask
,Ñ);

426 ()
	`__øw_ªadl
(
r
);

427 
	}
}

429 
ölöe
 
	$ag71xx_cb
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
mask
)

431 
__iomem
 *
r
;

433 
	`ag71xx_check_ªg_off£t
(
ag
, 
ªg
);

435 
r
 = 
ag
->
mac_ba£
 + 
ªg
;

436 
	`__øw_wrôñ
(
	`__øw_ªadl
(
r
Ë& ~
mask
,Ñ);

438 (Ë
	`__øw_ªadl
(
r
);

439 
	}
}

441 
ölöe
 
	$ag71xx_öt_íabÀ
(
ag71xx
 *
ag
, 
u32
 
öts
)

443 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
öts
);

444 
	}
}

446 
ölöe
 
	$ag71xx_öt_dißbÀ
(
ag71xx
 *
ag
, 
u32
 
öts
)

448 
	`ag71xx_cb
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
öts
);

449 
	}
}

451 #ifde‡
CONFIG_AG71XX_AR8216_SUPPORT


452 
ag71xx_add_¨8216_hódî
(
ag71xx
 *
ag
, 
sk_buff
 *
skb
);

453 
ag71xx_ªmove_¨8216_hódî
(
ag71xx
 *
ag
, 
sk_buff
 *
skb
,

454 
pkéí
);

455 
ölöe
 
	$ag71xx_has_¨8216
(
ag71xx
 *
ag
)

457  
	`ag71xx_gë_pd©a
(
ag
)->
has_¨8216
;

458 
	}
}

460 
ölöe
 
	$ag71xx_add_¨8216_hódî
(
ag71xx
 *
ag
,

461 
sk_buff
 *
skb
)

463 
	}
}

465 
ölöe
 
	$ag71xx_ªmove_¨8216_hódî
(
ag71xx
 *
ag
,

466 
sk_buff
 *
skb
,

467 
pkéí
)

470 
	}
}

471 
ölöe
 
	$ag71xx_has_¨8216
(
ag71xx
 *
ag
)

474 
	}
}

477 #ifde‡
CONFIG_AG71XX_DEBUG_FS


478 
ag71xx_debugfs_roŸ_öô
();

479 
ag71xx_debugfs_roŸ_exô
();

480 
ag71xx_debugfs_öô
(
ag71xx
 *
ag
);

481 
ag71xx_debugfs_exô
(
ag71xx
 *
ag
);

482 
ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
, 
u32
 
°©us
);

483 
ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
, 
rx
, 
tx
);

485 
ölöe
 
	$ag71xx_debugfs_roŸ_öô
(Ë{  0; 
	}
}

486 
ölöe
 
	$ag71xx_debugfs_roŸ_exô
(Ë{
	}
}

487 
ölöe
 
	$ag71xx_debugfs_öô
(
ag71xx
 *
ag
Ë{  0; 
	}
}

488 
ölöe
 
	$ag71xx_debugfs_exô
(
ag71xx
 *
ag
Ë{
	}
}

489 
ölöe
 
	$ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
,

490 
u32
 
°©us
Ë{
	}
}

491 
ölöe
 
	$ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
,

492 
rx
, 
tx
Ë{
	}
}

495 
ag71xx_¨7240_°¨t
(
ag71xx
 *
ag
);

496 
ag71xx_¨7240_°›
(
ag71xx
 *
ag
);

497 
ag71xx_¨7240_öô
(
ag71xx
 *
ag
);

498 
ag71xx_¨7240_˛ónup
(
ag71xx
 *
ag
);

500 
ag71xx_mdio_mii_ªad
(
ag71xx_mdio
 *
am
, 
addr
, 
ªg
);

501 
ag71xx_mdio_mii_wrôe
(
ag71xx_mdio
 *
am
, 
addr
, 
ªg
, 
u16
 
vÆ
);

503 
u16
 
¨7240sw_phy_ªad
(
mii_bus
 *
mii
, 
phy_addr
,

504 
ªg_addr
);

505 
¨7240sw_phy_wrôe
(
mii_bus
 *
mii
, 
phy_addr
,

506 
ªg_addr
, 
u16
 
ªg_vÆ
);

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c

12 
	~<löux/ëhîdevi˚.h
>

13 
	~<löux/li°.h
>

14 
	~<löux/√tdevi˚.h
>

15 
	~<löux/phy.h
>

16 
	~<löux/mii.h
>

17 
	~<löux/bô›s.h
>

18 
	~<löux/swôch.h
>

19 
	~"ag71xx.h
"

21 
	#BITM
(
_cou¡
Ë(
	`BIT
(_cou¡Ë- 1)

	)

22 
	#BITS
(
_shi·
, 
_cou¡
Ë(
	`BITM
(_cou¡Ë<< _shi·)

	)

24 
	#AR7240_REG_MASK_CTRL
 0x00

	)

25 
	#AR7240_MASK_CTRL_REVISION_M
 
	`BITM
(8)

	)

26 
	#AR7240_MASK_CTRL_VERSION_M
 
	`BITM
(8)

	)

27 
	#AR7240_MASK_CTRL_VERSION_S
 8

	)

28 
	#AR7240_MASK_CTRL_VERSION_AR7240
 0x01

	)

29 
	#AR7240_MASK_CTRL_VERSION_AR934X
 0x02

	)

30 
	#AR7240_MASK_CTRL_SOFT_RESET
 
	`BIT
(31)

	)

32 
	#AR7240_REG_MAC_ADDR0
 0x20

	)

33 
	#AR7240_REG_MAC_ADDR1
 0x24

	)

35 
	#AR7240_REG_FLOOD_MASK
 0x2c

	)

36 
	#AR7240_FLOOD_MASK_BROAD_TO_CPU
 
	`BIT
(26)

	)

38 
	#AR7240_REG_GLOBAL_CTRL
 0x30

	)

39 
	#AR7240_GLOBAL_CTRL_MTU_M
 
	`BITM
(11)

	)

40 
	#AR9340_GLOBAL_CTRL_MTU_M
 
	`BITM
(14)

	)

42 
	#AR7240_REG_VTU
 0x0040

	)

43 
	#AR7240_VTU_OP
 
	`BITM
(3)

	)

44 
	#AR7240_VTU_OP_NOOP
 0x0

	)

45 
	#AR7240_VTU_OP_FLUSH
 0x1

	)

46 
	#AR7240_VTU_OP_LOAD
 0x2

	)

47 
	#AR7240_VTU_OP_PURGE
 0x3

	)

48 
	#AR7240_VTU_OP_REMOVE_PORT
 0x4

	)

49 
	#AR7240_VTU_ACTIVE
 
	`BIT
(3)

	)

50 
	#AR7240_VTU_FULL
 
	`BIT
(4)

	)

51 
	#AR7240_VTU_PORT
 
	`BITS
(8, 4)

	)

52 
	#AR7240_VTU_PORT_S
 8

	)

53 
	#AR7240_VTU_VID
 
	`BITS
(16, 12)

	)

54 
	#AR7240_VTU_VID_S
 16

	)

55 
	#AR7240_VTU_PRIO
 
	`BITS
(28, 3)

	)

56 
	#AR7240_VTU_PRIO_S
 28

	)

57 
	#AR7240_VTU_PRIO_EN
 
	`BIT
(31)

	)

59 
	#AR7240_REG_VTU_DATA
 0x0044

	)

60 
	#AR7240_VTUDATA_MEMBER
 
	`BITS
(0, 10)

	)

61 
	#AR7240_VTUDATA_VALID
 
	`BIT
(11)

	)

63 
	#AR7240_REG_ATU
 0x50

	)

64 
	#AR7240_ATU_FLUSH_ALL
 0x1

	)

66 
	#AR7240_REG_AT_CTRL
 0x5c

	)

67 
	#AR7240_AT_CTRL_AGE_TIME
 
	`BITS
(0, 15)

	)

68 
	#AR7240_AT_CTRL_AGE_EN
 
	`BIT
(17)

	)

69 
	#AR7240_AT_CTRL_LEARN_CHANGE
 
	`BIT
(18)

	)

70 
	#AR7240_AT_CTRL_RESERVED
 
	`BIT
(19)

	)

71 
	#AR7240_AT_CTRL_ARP_EN
 
	`BIT
(20)

	)

73 
	#AR7240_REG_TAG_PRIORITY
 0x70

	)

75 
	#AR7240_REG_SERVICE_TAG
 0x74

	)

76 
	#AR7240_SERVICE_TAG_M
 
	`BITM
(16)

	)

78 
	#AR7240_REG_CPU_PORT
 0x78

	)

79 
	#AR7240_MIRROR_PORT_S
 4

	)

80 
	#AR7240_MIRROR_PORT_M
 
	`BITM
(4)

	)

81 
	#AR7240_CPU_PORT_EN
 
	`BIT
(8)

	)

83 
	#AR7240_REG_MIB_FUNCTION0
 0x80

	)

84 
	#AR7240_MIB_TIMER_M
 
	`BITM
(16)

	)

85 
	#AR7240_MIB_AT_HALF_EN
 
	`BIT
(16)

	)

86 
	#AR7240_MIB_BUSY
 
	`BIT
(17)

	)

87 
	#AR7240_MIB_FUNC_S
 24

	)

88 
	#AR7240_MIB_FUNC_M
 
	`BITM
(3)

	)

89 
	#AR7240_MIB_FUNC_NO_OP
 0x0

	)

90 
	#AR7240_MIB_FUNC_FLUSH
 0x1

	)

91 
	#AR7240_MIB_FUNC_CAPTURE
 0x3

	)

93 
	#AR7240_REG_MDIO_CTRL
 0x98

	)

94 
	#AR7240_MDIO_CTRL_DATA_M
 
	`BITM
(16)

	)

95 
	#AR7240_MDIO_CTRL_REG_ADDR_S
 16

	)

96 
	#AR7240_MDIO_CTRL_PHY_ADDR_S
 21

	)

97 
	#AR7240_MDIO_CTRL_CMD_WRITE
 0

	)

98 
	#AR7240_MDIO_CTRL_CMD_READ
 
	`BIT
(27)

	)

99 
	#AR7240_MDIO_CTRL_MASTER_EN
 
	`BIT
(30)

	)

100 
	#AR7240_MDIO_CTRL_BUSY
 
	`BIT
(31)

	)

102 
	#AR7240_REG_PORT_BASE
(
_p‹t
Ë(0x100 + (_p‹tË* 0x100)

	)

104 
	#AR7240_REG_PORT_STATUS
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x00)

	)

105 
	#AR7240_PORT_STATUS_SPEED_S
 0

	)

106 
	#AR7240_PORT_STATUS_SPEED_M
 
	`BITM
(2)

	)

107 
	#AR7240_PORT_STATUS_SPEED_10
 0

	)

108 
	#AR7240_PORT_STATUS_SPEED_100
 1

	)

109 
	#AR7240_PORT_STATUS_SPEED_1000
 2

	)

110 
	#AR7240_PORT_STATUS_TXMAC
 
	`BIT
(2)

	)

111 
	#AR7240_PORT_STATUS_RXMAC
 
	`BIT
(3)

	)

112 
	#AR7240_PORT_STATUS_TXFLOW
 
	`BIT
(4)

	)

113 
	#AR7240_PORT_STATUS_RXFLOW
 
	`BIT
(5)

	)

114 
	#AR7240_PORT_STATUS_DUPLEX
 
	`BIT
(6)

	)

115 
	#AR7240_PORT_STATUS_LINK_UP
 
	`BIT
(8)

	)

116 
	#AR7240_PORT_STATUS_LINK_AUTO
 
	`BIT
(9)

	)

117 
	#AR7240_PORT_STATUS_LINK_PAUSE
 
	`BIT
(10)

	)

119 
	#AR7240_REG_PORT_CTRL
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x04)

	)

120 
	#AR7240_PORT_CTRL_STATE_M
 
	`BITM
(3)

	)

121 
	#AR7240_PORT_CTRL_STATE_DISABLED
 0

	)

122 
	#AR7240_PORT_CTRL_STATE_BLOCK
 1

	)

123 
	#AR7240_PORT_CTRL_STATE_LISTEN
 2

	)

124 
	#AR7240_PORT_CTRL_STATE_LEARN
 3

	)

125 
	#AR7240_PORT_CTRL_STATE_FORWARD
 4

	)

126 
	#AR7240_PORT_CTRL_LEARN_LOCK
 
	`BIT
(7)

	)

127 
	#AR7240_PORT_CTRL_VLAN_MODE_S
 8

	)

128 
	#AR7240_PORT_CTRL_VLAN_MODE_KEEP
 0

	)

129 
	#AR7240_PORT_CTRL_VLAN_MODE_STRIP
 1

	)

130 
	#AR7240_PORT_CTRL_VLAN_MODE_ADD
 2

	)

131 
	#AR7240_PORT_CTRL_VLAN_MODE_DOUBLE_TAG
 3

	)

132 
	#AR7240_PORT_CTRL_IGMP_SNOOP
 
	`BIT
(10)

	)

133 
	#AR7240_PORT_CTRL_HEADER
 
	`BIT
(11)

	)

134 
	#AR7240_PORT_CTRL_MAC_LOOP
 
	`BIT
(12)

	)

135 
	#AR7240_PORT_CTRL_SINGLE_VLAN
 
	`BIT
(13)

	)

136 
	#AR7240_PORT_CTRL_LEARN
 
	`BIT
(14)

	)

137 
	#AR7240_PORT_CTRL_DOUBLE_TAG
 
	`BIT
(15)

	)

138 
	#AR7240_PORT_CTRL_MIRROR_TX
 
	`BIT
(16)

	)

139 
	#AR7240_PORT_CTRL_MIRROR_RX
 
	`BIT
(17)

	)

141 
	#AR7240_REG_PORT_VLAN
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x08)

	)

143 
	#AR7240_PORT_VLAN_DEFAULT_ID_S
 0

	)

144 
	#AR7240_PORT_VLAN_DEST_PORTS_S
 16

	)

145 
	#AR7240_PORT_VLAN_MODE_S
 30

	)

146 
	#AR7240_PORT_VLAN_MODE_PORT_ONLY
 0

	)

147 
	#AR7240_PORT_VLAN_MODE_PORT_FALLBACK
 1

	)

148 
	#AR7240_PORT_VLAN_MODE_VLAN_ONLY
 2

	)

149 
	#AR7240_PORT_VLAN_MODE_SECURE
 3

	)

152 
	#AR7240_REG_STATS_BASE
(
_p‹t
Ë(0x20000 + (_p‹tË* 0x100)

	)

154 
	#AR7240_STATS_RXBROAD
 0x00

	)

155 
	#AR7240_STATS_RXPAUSE
 0x04

	)

156 
	#AR7240_STATS_RXMULTI
 0x08

	)

157 
	#AR7240_STATS_RXFCSERR
 0x0c

	)

158 
	#AR7240_STATS_RXALIGNERR
 0x10

	)

159 
	#AR7240_STATS_RXRUNT
 0x14

	)

160 
	#AR7240_STATS_RXFRAGMENT
 0x18

	)

161 
	#AR7240_STATS_RX64BYTE
 0x1c

	)

162 
	#AR7240_STATS_RX128BYTE
 0x20

	)

163 
	#AR7240_STATS_RX256BYTE
 0x24

	)

164 
	#AR7240_STATS_RX512BYTE
 0x28

	)

165 
	#AR7240_STATS_RX1024BYTE
 0x2c

	)

166 
	#AR7240_STATS_RX1518BYTE
 0x30

	)

167 
	#AR7240_STATS_RXMAXBYTE
 0x34

	)

168 
	#AR7240_STATS_RXTOOLONG
 0x38

	)

169 
	#AR7240_STATS_RXGOODBYTE
 0x3c

	)

170 
	#AR7240_STATS_RXBADBYTE
 0x44

	)

171 
	#AR7240_STATS_RXOVERFLOW
 0x4c

	)

172 
	#AR7240_STATS_FILTERED
 0x50

	)

173 
	#AR7240_STATS_TXBROAD
 0x54

	)

174 
	#AR7240_STATS_TXPAUSE
 0x58

	)

175 
	#AR7240_STATS_TXMULTI
 0x5c

	)

176 
	#AR7240_STATS_TXUNDERRUN
 0x60

	)

177 
	#AR7240_STATS_TX64BYTE
 0x64

	)

178 
	#AR7240_STATS_TX128BYTE
 0x68

	)

179 
	#AR7240_STATS_TX256BYTE
 0x6c

	)

180 
	#AR7240_STATS_TX512BYTE
 0x70

	)

181 
	#AR7240_STATS_TX1024BYTE
 0x74

	)

182 
	#AR7240_STATS_TX1518BYTE
 0x78

	)

183 
	#AR7240_STATS_TXMAXBYTE
 0x7c

	)

184 
	#AR7240_STATS_TXOVERSIZE
 0x80

	)

185 
	#AR7240_STATS_TXBYTE
 0x84

	)

186 
	#AR7240_STATS_TXCOLLISION
 0x8c

	)

187 
	#AR7240_STATS_TXABORTCOL
 0x90

	)

188 
	#AR7240_STATS_TXMULTICOL
 0x94

	)

189 
	#AR7240_STATS_TXSINGLECOL
 0x98

	)

190 
	#AR7240_STATS_TXEXCDEFER
 0x9c

	)

191 
	#AR7240_STATS_TXDEFER
 0xa0

	)

192 
	#AR7240_STATS_TXLATECOL
 0xa4

	)

194 
	#AR7240_PORT_CPU
 0

	)

195 
	#AR7240_NUM_PORTS
 6

	)

196 
	#AR7240_NUM_PHYS
 5

	)

198 
	#AR7240_PHY_ID1
 0x004d

	)

199 
	#AR7240_PHY_ID2
 0xd041

	)

201 
	#AR934X_PHY_ID1
 0x004d

	)

202 
	#AR934X_PHY_ID2
 0xd042

	)

204 
	#AR7240_MAX_VLANS
 16

	)

206 
	#AR934X_REG_OPER_MODE0
 0x04

	)

207 
	#AR934X_OPER_MODE0_MAC_GMII_EN
 
	`BIT
(6)

	)

208 
	#AR934X_OPER_MODE0_PHY_MII_EN
 
	`BIT
(10)

	)

210 
	#AR934X_REG_OPER_MODE1
 0x08

	)

211 
	#AR934X_REG_OPER_MODE1_PHY4_MII_EN
 
	`BIT
(28)

	)

213 
	#AR934X_REG_FLOOD_MASK
 0x2c

	)

214 
	#AR934X_FLOOD_MASK_MC_DP
(
_p
Ë
	`BIT
(16 + (_p))

	)

215 
	#AR934X_FLOOD_MASK_BC_DP
(
_p
Ë
	`BIT
(25 + (_p))

	)

217 
	#AR934X_REG_QM_CTRL
 0x3c

	)

218 
	#AR934X_QM_CTRL_ARP_EN
 
	`BIT
(15)

	)

220 
	#AR934X_REG_AT_CTRL
 0x5c

	)

221 
	#AR934X_AT_CTRL_AGE_TIME
 
	`BITS
(0, 15)

	)

222 
	#AR934X_AT_CTRL_AGE_EN
 
	`BIT
(17)

	)

223 
	#AR934X_AT_CTRL_LEARN_CHANGE
 
	`BIT
(18)

	)

225 
	#AR934X_MIB_ENABLE
 
	`BIT
(30)

	)

227 
	#AR934X_REG_PORT_BASE
(
_p‹t
Ë(0x100 + (_p‹tË* 0x100)

	)

229 
	#AR934X_REG_PORT_VLAN1
(
_p‹t
Ë(
	`AR934X_REG_PORT_BASE
((_p‹t)Ë+ 0x08)

	)

230 
	#AR934X_PORT_VLAN1_DEFAULT_SVID_S
 0

	)

231 
	#AR934X_PORT_VLAN1_FORCE_DEFAULT_VID_EN
 
	`BIT
(12)

	)

232 
	#AR934X_PORT_VLAN1_PORT_TLS_MODE
 
	`BIT
(13)

	)

233 
	#AR934X_PORT_VLAN1_PORT_VLAN_PROP_EN
 
	`BIT
(14)

	)

234 
	#AR934X_PORT_VLAN1_PORT_CLONE_EN
 
	`BIT
(15)

	)

235 
	#AR934X_PORT_VLAN1_DEFAULT_CVID_S
 16

	)

236 
	#AR934X_PORT_VLAN1_FORCE_PORT_VLAN_EN
 
	`BIT
(28)

	)

237 
	#AR934X_PORT_VLAN1_ING_PORT_PRI_S
 29

	)

239 
	#AR934X_REG_PORT_VLAN2
(
_p‹t
Ë(
	`AR934X_REG_PORT_BASE
((_p‹t)Ë+ 0x0c)

	)

240 
	#AR934X_PORT_VLAN2_PORT_VID_MEM_S
 16

	)

241 
	#AR934X_PORT_VLAN2_8021Q_MODE_S
 30

	)

242 
	#AR934X_PORT_VLAN2_8021Q_MODE_PORT_ONLY
 0

	)

243 
	#AR934X_PORT_VLAN2_8021Q_MODE_PORT_FALLBACK
 1

	)

244 
	#AR934X_PORT_VLAN2_8021Q_MODE_VLAN_ONLY
 2

	)

245 
	#AR934X_PORT_VLAN2_8021Q_MODE_SECURE
 3

	)

247 
	#sw_to_¨7240
(
_dev
Ë
	`c⁄èöî_of
(_dev, 
¨7240sw
, 
swdev
)

	)

249 
	s¨7240sw_p‹t_°©
 {

250 
	mrx_brﬂdˇ°
;

251 
	mrx_∑u£
;

252 
	mrx_mu…iˇ°
;

253 
	mrx_fcs_îr‹
;

254 
	mrx_Æign_îr‹
;

255 
	mrx_ru¡
;

256 
	mrx_‰agmíts
;

257 
	mrx_64byã
;

258 
	mrx_128byã
;

259 
	mrx_256byã
;

260 
	mrx_512byã
;

261 
	mrx_1024byã
;

262 
	mrx_1518byã
;

263 
	mrx_maxbyã
;

264 
	mrx_toﬁ⁄g
;

265 
	mrx_good_byã
;

266 
	mrx_bad_byã
;

267 
	mrx_ovîÊow
;

268 
	mfûãªd
;

270 
	mtx_brﬂdˇ°
;

271 
	mtx_∑u£
;

272 
	mtx_mu…iˇ°
;

273 
	mtx_undîrun
;

274 
	mtx_64byã
;

275 
	mtx_128byã
;

276 
	mtx_256byã
;

277 
	mtx_512byã
;

278 
	mtx_1024byã
;

279 
	mtx_1518byã
;

280 
	mtx_maxbyã
;

281 
	mtx_ovîsize
;

282 
	mtx_byã
;

283 
	mtx_cﬁlisi⁄
;

284 
	mtx_ab‹tcﬁ
;

285 
	mtx_mu…icﬁ
;

286 
	mtx_sögÀcﬁ
;

287 
	mtx_excde„r
;

288 
	mtx_de„r
;

289 
	mtx_xœãcﬁ
;

292 
	s¨7240sw
 {

293 
mii_bus
 *
	mmii_bus
;

294 
ag71xx_swôch_∂©f‹m_d©a
 *
	mswd©a
;

295 
swôch_dev
 
	mswdev
;

296 
	mnum_p‹ts
;

297 
u8
 
	mvî
;

298 
boﬁ
 
	mvœn
;

299 
u16
 
	mvœn_id
[
AR7240_MAX_VLANS
];

300 
u8
 
	mvœn_èbÀ
[
AR7240_MAX_VLANS
];

301 
u8
 
	mvœn_ègged
;

302 
u16
 
	mpvid
[
AR7240_NUM_PORTS
];

303 
	mbuf
[80];

305 
rwlock_t
 
	m°©s_lock
;

306 
¨7240sw_p‹t_°©
 
	mp‹t_°©s
[
AR7240_NUM_PORTS
];

309 
	s¨7240sw_hw_°©
 {

310 
	m°rög
[
ETH_GSTRING_LEN
];

311 
	msizeof_°©
;

312 
	mªg
;

315 
DEFINE_MUTEX
(
ªg_muãx
);

317 
ölöe
 
	$sw_is_¨7240
(
¨7240sw
 *
as
)

319  
as
->
vî
 =
AR7240_MASK_CTRL_VERSION_AR7240
;

320 
	}
}

322 
ölöe
 
	$sw_is_¨934x
(
¨7240sw
 *
as
)

324  
as
->
vî
 =
AR7240_MASK_CTRL_VERSION_AR934X
;

325 
	}
}

327 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask
(
¨7240sw
 *
as
, 
p‹t
)

329  
	`BIT
(
p‹t
);

330 
	}
}

332 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask_Æl
(
¨7240sw
 *
as
)

334  
	`BIT
(
as
->
swdev
.
p‹ts
) - 1;

335 
	}
}

337 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask_but
(
¨7240sw
 *
as
, 
p‹t
)

339  
	`¨7240sw_p‹t_mask_Æl
(
as
Ë& ~
	`BIT
(
p‹t
);

340 
	}
}

342 
ölöe
 
u16
 
	$mk_phy_addr
(
u32
 
ªg
)

344  0x17 & ((
ªg
 >> 4) | 0x10);

345 
	}
}

347 
ölöe
 
u16
 
	$mk_phy_ªg
(
u32
 
ªg
)

349  (
ªg
 << 1) & 0x1e;

350 
	}
}

352 
ölöe
 
u16
 
	$mk_high_addr
(
u32
 
ªg
)

354  (
ªg
 >> 7) & 0x1ff;

355 
	}
}

357 
u32
 
	$__¨7240sw_ªg_ªad
(
mii_bus
 *
mii
, 
u32
 
ªg
)

359 
Êags
;

360 
u16
 
phy_addr
;

361 
u16
 
phy_ªg
;

362 
u32
 
hi
, 
lo
;

364 
ªg
 = (reg & 0xfffffffc) >> 2;

365 
phy_addr
 = 
	`mk_phy_addr
(
ªg
);

366 
phy_ªg
 = 
	`mk_phy_ªg
(
ªg
);

368 
	`loˇl_úq_ßve
(
Êags
);

369 
	`ag71xx_mdio_mii_wrôe
(
mii
->
¥iv
, 0x1f, 0x10, 
	`mk_high_addr
(
ªg
));

370 
lo
 = (
u32
Ë
	`ag71xx_mdio_mii_ªad
(
mii
->
¥iv
, 
phy_addr
, 
phy_ªg
);

371 
hi
 = (
u32
Ë
	`ag71xx_mdio_mii_ªad
(
mii
->
¥iv
, 
phy_addr
, 
phy_ªg
 + 1);

372 
	`loˇl_úq_ª°‹e
(
Êags
);

374  (
hi
 << 16Ë| 
lo
;

375 
	}
}

377 
	$__¨7240sw_ªg_wrôe
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
vÆ
)

379 
Êags
;

380 
u16
 
phy_addr
;

381 
u16
 
phy_ªg
;

383 
ªg
 = (reg & 0xfffffffc) >> 2;

384 
phy_addr
 = 
	`mk_phy_addr
(
ªg
);

385 
phy_ªg
 = 
	`mk_phy_ªg
(
ªg
);

387 
	`loˇl_úq_ßve
(
Êags
);

388 
	`ag71xx_mdio_mii_wrôe
(
mii
->
¥iv
, 0x1f, 0x10, 
	`mk_high_addr
(
ªg
));

389 
	`ag71xx_mdio_mii_wrôe
(
mii
->
¥iv
, 
phy_addr
, 
phy_ªg
 + 1, (
vÆ
 >> 16));

390 
	`ag71xx_mdio_mii_wrôe
(
mii
->
¥iv
, 
phy_addr
, 
phy_ªg
, (
vÆ
 & 0xffff));

391 
	`loˇl_úq_ª°‹e
(
Êags
);

392 
	}
}

394 
u32
 
	$¨7240sw_ªg_ªad
(
mii_bus
 *
mii
, 
u32
 
ªg_addr
)

396 
u32
 
ªt
;

398 
	`muãx_lock
(&
ªg_muãx
);

399 
ªt
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg_addr
);

400 
	`muãx_u∆ock
(&
ªg_muãx
);

402  
ªt
;

403 
	}
}

405 
	$¨7240sw_ªg_wrôe
(
mii_bus
 *
mii
, 
u32
 
ªg_addr
, u32 
ªg_vÆ
)

407 
	`muãx_lock
(&
ªg_muãx
);

408 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg_addr
, 
ªg_vÆ
);

409 
	`muãx_u∆ock
(&
ªg_muãx
);

410 
	}
}

412 
u32
 
	$¨7240sw_ªg_rmw
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
)

414 
u32
 
t
;

416 
	`muãx_lock
(&
ªg_muãx
);

417 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

418 
t
 &~
mask
;

419 
t
 |
vÆ
;

420 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg
, 
t
);

421 
	`muãx_u∆ock
(&
ªg_muãx
);

423  
t
;

424 
	}
}

426 
	$¨7240sw_ªg_£t
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
vÆ
)

428 
u32
 
t
;

430 
	`muãx_lock
(&
ªg_muãx
);

431 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

432 
t
 |
vÆ
;

433 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg
, 
t
);

434 
	`muãx_u∆ock
(&
ªg_muãx
);

435 
	}
}

437 
	$__¨7240sw_ªg_waô
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
,

438 
timeout
)

440 
i
;

442 
i
 = 0; i < 
timeout
; i++) {

443 
u32
 
t
;

445 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

446 i‡((
t
 & 
mask
Ë=
vÆ
)

449 
	`u¶ìp_ønge
(1000, 2000);

452  -
ETIMEDOUT
;

453 
	}
}

455 
	$¨7240sw_ªg_waô
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
,

456 
timeout
)

458 
ªt
;

460 
	`muãx_lock
(&
ªg_muãx
);

461 
ªt
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
ªg
, 
mask
, 
vÆ
, 
timeout
);

462 
	`muãx_u∆ock
(&
ªg_muãx
);

463  
ªt
;

464 
	}
}

466 
u16
 
	$¨7240sw_phy_ªad
(
mii_bus
 *
mii
, 
phy_addr
,

467 
ªg_addr
)

469 
u32
 
t
, 
vÆ
 = 0xffff;

470 
îr
;

472 i‡(
phy_addr
 >
AR7240_NUM_PHYS
)

475 
	`muãx_lock
(&
ªg_muãx
);

476 
t
 = (
ªg_addr
 << 
AR7240_MDIO_CTRL_REG_ADDR_S
) |

477 (
phy_addr
 << 
AR7240_MDIO_CTRL_PHY_ADDR_S
) |

478 
AR7240_MDIO_CTRL_MASTER_EN
 |

479 
AR7240_MDIO_CTRL_BUSY
 |

480 
AR7240_MDIO_CTRL_CMD_READ
;

482 
	`__¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MDIO_CTRL
, 
t
);

483 
îr
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MDIO_CTRL
,

484 
AR7240_MDIO_CTRL_BUSY
, 0, 5);

485 i‡(!
îr
)

486 
vÆ
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_MDIO_CTRL
);

487 
	`muãx_u∆ock
(&
ªg_muãx
);

489  
vÆ
 & 
AR7240_MDIO_CTRL_DATA_M
;

490 
	}
}

492 
	$¨7240sw_phy_wrôe
(
mii_bus
 *
mii
, 
phy_addr
,

493 
ªg_addr
, 
u16
 
ªg_vÆ
)

495 
u32
 
t
;

496 
ªt
;

498 i‡(
phy_addr
 >
AR7240_NUM_PHYS
)

499  -
EINVAL
;

501 
	`muãx_lock
(&
ªg_muãx
);

502 
t
 = (
phy_addr
 << 
AR7240_MDIO_CTRL_PHY_ADDR_S
) |

503 (
ªg_addr
 << 
AR7240_MDIO_CTRL_REG_ADDR_S
) |

504 
AR7240_MDIO_CTRL_MASTER_EN
 |

505 
AR7240_MDIO_CTRL_BUSY
 |

506 
AR7240_MDIO_CTRL_CMD_WRITE
 |

507 
ªg_vÆ
;

509 
	`__¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MDIO_CTRL
, 
t
);

510 
ªt
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MDIO_CTRL
,

511 
AR7240_MDIO_CTRL_BUSY
, 0, 5);

512 
	`muãx_u∆ock
(&
ªg_muãx
);

514  
ªt
;

515 
	}
}

517 
	$¨7240sw_ˇ±uª_°©s
(
¨7240sw
 *
as
)

519 
mii_bus
 *
mii
 = 
as
->mii_bus;

520 
p‹t
;

521 
ªt
;

523 
	`wrôe_lock
(&
as
->
°©s_lock
);

526 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

527 (
AR7240_MIB_FUNC_M
 << 
AR7240_MIB_FUNC_S
),

528 (
AR7240_MIB_FUNC_CAPTURE
 << 
AR7240_MIB_FUNC_S
));

531 
ªt
 = 
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

532 
AR7240_MIB_BUSY
, 0, 10);

534 i‡(
ªt
)

535 
u∆ock
;

537 
p‹t
 = 0;Ö‹à< 
AR7240_NUM_PORTS
;Öort++) {

538 
ba£
;

539 
¨7240sw_p‹t_°©
 *
°©s
;

541 
ba£
 = 
	`AR7240_REG_STATS_BASE
(
p‹t
);

542 
°©s
 = &
as
->
p‹t_°©s
[
p‹t
];

544 
	#READ_STAT
(
_r
Ë
	`¨7240sw_ªg_ªad
(
mii
, 
ba£
 + 
AR7240_STATS_
 ## _r)

	)

546 
°©s
->
rx_good_byã
 +
	`READ_STAT
(
RXGOODBYTE
);

547 
°©s
->
tx_byã
 +
	`READ_STAT
(
TXBYTE
);

549 #unde‡
READ_STAT


552 
ªt
 = 0;

554 
u∆ock
:

555 
	`wrôe_u∆ock
(&
as
->
°©s_lock
);

556  
ªt
;

557 
	}
}

559 
	$¨7240sw_dißbÀ_p‹t
(
¨7240sw
 *
as
, 
p‹t
)

561 
	`¨7240sw_ªg_wrôe
(
as
->
mii_bus
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

562 
AR7240_PORT_CTRL_STATE_DISABLED
);

563 
	}
}

565 
	$¨7240sw_£tup
(
¨7240sw
 *
as
)

567 
mii_bus
 *
mii
 = 
as
->mii_bus;

570 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_CPU_PORT
,

571 
AR7240_CPU_PORT_EN
 |

572 (15 << 
AR7240_MIRROR_PORT_S
));

575 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_TAG_PRIORITY
, 0xfa50);

577 i‡(
	`sw_is_¨934x
(
as
)) {

579 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR934X_REG_AT_CTRL
,

581 
AR934X_AT_CTRL_AGE_EN
 |

582 
AR934X_AT_CTRL_LEARN_CHANGE
);

584 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_QM_CTRL
,

585 
AR934X_QM_CTRL_ARP_EN
);

587 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_FLOOD_MASK
,

588 
	`AR934X_FLOOD_MASK_BC_DP
(0) |

589 
	`AR934X_FLOOD_MASK_MC_DP
(0));

592 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_GLOBAL_CTRL
,

593 
AR9340_GLOBAL_CTRL_MTU_M
,

594 
AR9340_GLOBAL_CTRL_MTU_M
);

597 
	`¨7240sw_ªg_£t
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

598 
AR934X_MIB_ENABLE
);

602 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_AT_CTRL
,

603 
AR7240_AT_CTRL_RESERVED
 |

605 
AR7240_AT_CTRL_AGE_EN
 |

606 
AR7240_AT_CTRL_ARP_EN
 |

607 
AR7240_AT_CTRL_LEARN_CHANGE
);

609 
	`¨7240sw_ªg_£t
(
mii
, 
AR7240_REG_FLOOD_MASK
,

610 
AR7240_FLOOD_MASK_BROAD_TO_CPU
);

613 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_GLOBAL_CTRL
,

614 
AR7240_GLOBAL_CTRL_MTU_M
,

615 
AR7240_GLOBAL_CTRL_MTU_M
);

619 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_SERVICE_TAG
, 
AR7240_SERVICE_TAG_M
, 0);

620 
	}
}

624 
	$¨7240sw_phy_pﬁl_ª£t
(
mii_bus
 *
bus
)

626 c⁄° 
¶ìp_m£cs
 = 20;

627 
ªt
, 
ñ≠£d
, 
i
;

629 
ñ≠£d
 = 
¶ìp_m£cs
;Élapsed <= 600;

630 
ñ≠£d
 +
¶ìp_m£cs
) {

631 
	`m¶ìp
(
¶ìp_m£cs
);

632 
i
 = 0; i < 
AR7240_NUM_PHYS
; i++) {

633 
ªt
 = 
	`¨7240sw_phy_ªad
(
bus
, 
i
, 
MII_BMCR
);

634 i‡(
ªt
 < 0)

635  
ªt
;

636 i‡(
ªt
 & 
BMCR_RESET
)

638 i‡(
i
 =
AR7240_NUM_PHYS
 - 1) {

639 
	`u¶ìp_ønge
(1000, 2000);

644  -
ETIMEDOUT
;

645 
	}
}

647 
	$¨7240sw_ª£t
(
¨7240sw
 *
as
)

649 
mii_bus
 *
mii
 = 
as
->mii_bus;

650 
ªt
;

651 
i
;

654 
i
 = 0; i < 
AR7240_NUM_PORTS
; i++)

655 
	`¨7240sw_dißbÀ_p‹t
(
as
, 
i
);

658 
	`u¶ìp_ønge
(2000, 3000);

661 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MASK_CTRL
,

662 
AR7240_MASK_CTRL_SOFT_RESET
);

664 
ªt
 = 
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MASK_CTRL
,

665 
AR7240_MASK_CTRL_SOFT_RESET
, 0, 1000);

668 
i
 = 0; i < 
AR7240_NUM_PHYS
; i++) {

669 
	`¨7240sw_phy_wrôe
(
mii
, 
i
, 
MII_ADVERTISE
,

670 
ADVERTISE_ALL
 | 
ADVERTISE_PAUSE_CAP
 |

671 
ADVERTISE_PAUSE_ASYM
);

672 
	`¨7240sw_phy_wrôe
(
mii
, 
i
, 
MII_BMCR
,

673 
BMCR_RESET
 | 
BMCR_ANENABLE
);

675 
ªt
 = 
	`¨7240sw_phy_pﬁl_ª£t
(
mii
);

676 i‡(
ªt
)

677  
ªt
;

679 
	`¨7240sw_£tup
(
as
);

680  
ªt
;

681 
	}
}

683 
	$¨7240sw_£tup_p‹t
(
¨7240sw
 *
as
, 
p‹t
, 
u8
 
p‹tmask
)

685 
mii_bus
 *
mii
 = 
as
->mii_bus;

686 
u32
 
˘æ
;

687 
u32
 
vid
, 
mode
;

689 
˘æ
 = 
AR7240_PORT_CTRL_STATE_FORWARD
 | 
AR7240_PORT_CTRL_LEARN
 |

690 
AR7240_PORT_CTRL_SINGLE_VLAN
;

692 i‡(
p‹t
 =
AR7240_PORT_CPU
) {

693 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
),

694 
AR7240_PORT_STATUS_SPEED_1000
 |

695 
AR7240_PORT_STATUS_TXFLOW
 |

696 
AR7240_PORT_STATUS_RXFLOW
 |

697 
AR7240_PORT_STATUS_TXMAC
 |

698 
AR7240_PORT_STATUS_RXMAC
 |

699 
AR7240_PORT_STATUS_DUPLEX
);

701 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
),

702 
AR7240_PORT_STATUS_LINK_AUTO
);

706 i‡(
as
->
vœn
) {

707 
vid
 = 
as
->
vœn_id
[as->
pvid
[
p‹t
]];

708 
mode
 = 
AR7240_PORT_VLAN_MODE_SECURE
;

710 
vid
 = 
p‹t
;

711 
mode
 = 
AR7240_PORT_VLAN_MODE_PORT_ONLY
;

714 i‡(
as
->
vœn
) {

715 i‡(
as
->
vœn_ègged
 & 
	`BIT
(
p‹t
))

716 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_ADD
 <<

717 
AR7240_PORT_CTRL_VLAN_MODE_S
;

719 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_STRIP
 <<

720 
AR7240_PORT_CTRL_VLAN_MODE_S
;

722 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_KEEP
 <<

723 
AR7240_PORT_CTRL_VLAN_MODE_S
;

726 i‡(!
p‹tmask
) {

727 i‡(
p‹t
 =
AR7240_PORT_CPU
)

728 
p‹tmask
 = 
	`¨7240sw_p‹t_mask_but
(
as
, 
AR7240_PORT_CPU
);

730 
p‹tmask
 = 
	`¨7240sw_p‹t_mask
(
as
, 
AR7240_PORT_CPU
);

734 
˘æ
 |
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
)) &

735 (
AR7240_PORT_CTRL_MIRROR_RX
 | 
AR7240_PORT_CTRL_MIRROR_TX
);

740 
p‹tmask
 &
	`¨7240sw_p‹t_mask_but
(
as
, 
p‹t
);

742 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
), 
˘æ
);

743 i‡(
	`sw_is_¨934x
(
as
)) {

744 
u32
 
vœn1
, 
vœn2
;

746 
vœn1
 = (
vid
 << 
AR934X_PORT_VLAN1_DEFAULT_CVID_S
);

747 
vœn2
 = (
p‹tmask
 << 
AR934X_PORT_VLAN2_PORT_VID_MEM_S
) |

748 (
mode
 << 
AR934X_PORT_VLAN2_8021Q_MODE_S
);

749 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR934X_REG_PORT_VLAN1
(
p‹t
), 
vœn1
);

750 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR934X_REG_PORT_VLAN2
(
p‹t
), 
vœn2
);

752 
u32
 
vœn
;

754 
vœn
 = 
vid
 | (
mode
 << 
AR7240_PORT_VLAN_MODE_S
) |

755 (
p‹tmask
 << 
AR7240_PORT_VLAN_DEST_PORTS_S
);

757 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_VLAN
(
p‹t
), 
vœn
);

759 
	}
}

761 
	$¨7240_£t_addr
(
¨7240sw
 *
as
, 
u8
 *
addr
)

763 
mii_bus
 *
mii
 = 
as
->mii_bus;

764 
u32
 
t
;

766 
t
 = (
addr
[4] << 8) |áddr[5];

767 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MAC_ADDR0
, 
t
);

769 
t
 = (
addr
[0] << 24) | (addr[1] << 16) | (addr[2] << 8) |áddr[3];

770 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MAC_ADDR1
, 
t
);

773 
	}
}

776 
	$¨7240_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

777 
swôch_vÆ
 *
vÆ
)

779 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

780 
as
->
vœn_id
[
vÆ
->
p‹t_vœn
] = vÆ->
vÆue
.
i
;

782 
	}
}

785 
	$¨7240_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

786 
swôch_vÆ
 *
vÆ
)

788 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

789 
vÆ
->
vÆue
.
i
 = 
as
->
vœn_id
[vÆ->
p‹t_vœn
];

791 
	}
}

794 
	$¨7240_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
)

796 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

800 i‡(
vœn
 >
dev
->
vœns
)

801  -
EINVAL
;

803 
as
->
pvid
[
p‹t
] = 
vœn
;

805 
	}
}

808 
	$¨7240_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
)

810 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

811 *
vœn
 = 
as
->
pvid
[
p‹t
];

813 
	}
}

816 
	$¨7240_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

818 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

819 
u8
 
p‹ts
 = 
as
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

820 
i
;

822 
vÆ
->
Àn
 = 0;

823 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

824 
swôch_p‹t
 *
p
;

826 i‡(!(
p‹ts
 & (1 << 
i
)))

829 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

830 
p
->
id
 = 
i
;

831 i‡(
as
->
vœn_ègged
 & (1 << 
i
))

832 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

834 
p
->
Êags
 = 0;

837 
	}
}

840 
	$¨7240_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

842 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

843 
u8
 *
vt
 = &
as
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

844 
i
, 
j
;

846 *
vt
 = 0;

847 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

848 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

850 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
))

851 
as
->
vœn_ègged
 |(1 << 
p
->
id
);

853 
as
->
vœn_ègged
 &~(1 << 
p
->
id
);

854 
as
->
pvid
[
p
->
id
] = 
vÆ
->
p‹t_vœn
;

858 
j
 = 0; j < 
AR7240_MAX_VLANS
; j++) {

859 i‡(
j
 =
vÆ
->
p‹t_vœn
)

861 
as
->
vœn_èbÀ
[
j
] &~(1 << 
p
->
id
);

865 *
vt
 |1 << 
p
->
id
;

868 
	}
}

871 
	$¨7240_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

872 
swôch_vÆ
 *
vÆ
)

874 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

875 
as
->
vœn
 = !!
vÆ
->
vÆue
.
i
;

877 
	}
}

880 
	$¨7240_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

881 
swôch_vÆ
 *
vÆ
)

883 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

884 
vÆ
->
vÆue
.
i
 = 
as
->
vœn
;

886 
	}
}

889 
	$¨7240_vtu_›
(
¨7240sw
 *
as
, 
u32
 
›
, u32 
vÆ
)

891 
mii_bus
 *
mii
 = 
as
->mii_bus;

893 i‡(
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_VTU
, 
AR7240_VTU_ACTIVE
, 0, 5))

896 i‡((
›
 & 
AR7240_VTU_OP
Ë=
AR7240_VTU_OP_LOAD
) {

897 
vÆ
 &
AR7240_VTUDATA_MEMBER
;

898 
vÆ
 |
AR7240_VTUDATA_VALID
;

899 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_VTU_DATA
, 
vÆ
);

901 
›
 |
AR7240_VTU_ACTIVE
;

902 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_VTU
, 
›
);

903 
	}
}

906 
	$¨7240_hw_≠∂y
(
swôch_dev
 *
dev
)

908 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

909 
u8
 
p‹tmask
[
AR7240_NUM_PORTS
];

910 
i
, 
j
;

913 
	`¨7240_vtu_›
(
as
, 
AR7240_VTU_OP_FLUSH
, 0);

915 
	`mem£t
(
p‹tmask
, 0, (portmask));

916 i‡(
as
->
vœn
) {

919 
j
 = 0; j < 
AR7240_MAX_VLANS
; j++) {

920 
u8
 
vp
 = 
as
->
vœn_èbÀ
[
j
];

922 i‡(!
vp
)

925 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

926 
u8
 
mask
 = (1 << 
i
);

927 i‡(
vp
 & 
mask
)

928 
p‹tmask
[
i
] |
vp
 & ~
mask
;

931 
	`¨7240_vtu_›
(
as
,

932 
AR7240_VTU_OP_LOAD
 |

933 (
as
->
vœn_id
[
j
] << 
AR7240_VTU_VID_S
),

934 
as
->
vœn_èbÀ
[
j
]);

939 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

940 i‡(
i
 =
AR7240_PORT_CPU
)

943 
p‹tmask
[
i
] = 1 << 
AR7240_PORT_CPU
;

944 
p‹tmask
[
AR7240_PORT_CPU
] |(1 << 
i
);

949 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++)

950 
	`¨7240sw_£tup_p‹t
(
as
, 
i
, 
p‹tmask
[i]);

953 
	}
}

956 
	$¨7240_ª£t_swôch
(
swôch_dev
 *
dev
)

958 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

959 
	`¨7240sw_ª£t
(
as
);

961 
	}
}

964 
	$¨7240_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

965 
swôch_p‹t_lök
 *
lök
)

967 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

968 
mii_bus
 *
mii
 = 
as
->mii_bus;

969 
u32
 
°©us
;

971 i‡(
p‹t
 >
AR7240_NUM_PORTS
)

972  -
EINVAL
;

974 
°©us
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
));

975 
lök
->
™eg
 = !!(
°©us
 & 
AR7240_PORT_STATUS_LINK_AUTO
);

976 i‡(
lök
->
™eg
) {

977 
lök
->lök = !!(
°©us
 & 
AR7240_PORT_STATUS_LINK_UP
);

978 i‡(!
lök
->link)

981 
lök
->lök = 
åue
;

984 
lök
->
du∂ex
 = !!(
°©us
 & 
AR7240_PORT_STATUS_DUPLEX
);

985 
lök
->
tx_Êow
 = !!(
°©us
 & 
AR7240_PORT_STATUS_TXFLOW
);

986 
lök
->
rx_Êow
 = !!(
°©us
 & 
AR7240_PORT_STATUS_RXFLOW
);

987 
°©us
 & 
AR7240_PORT_STATUS_SPEED_M
) {

988 
AR7240_PORT_STATUS_SPEED_10
:

989 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

991 
AR7240_PORT_STATUS_SPEED_100
:

992 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

994 
AR7240_PORT_STATUS_SPEED_1000
:

995 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

1000 
	}
}

1003 
	$¨7240_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1004 
swôch_p‹t_°©s
 *
°©s
)

1006 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1008 i‡(
p‹t
 >
AR7240_NUM_PORTS
)

1009  -
EINVAL
;

1011 
	`¨7240sw_ˇ±uª_°©s
(
as
);

1013 
	`ªad_lock
(&
as
->
°©s_lock
);

1014 
°©s
->
rx_byãs
 = 
as
->
p‹t_°©s
[
p‹t
].
rx_good_byã
;

1015 
°©s
->
tx_byãs
 = 
as
->
p‹t_°©s
[
p‹t
].
tx_byã
;

1016 
	`ªad_u∆ock
(&
as
->
°©s_lock
);

1019 
	}
}

1022 
	$¨7240_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1023 c⁄° 
swôch_©å
 *
©å
,

1024 
swôch_vÆ
 *
vÆ
)

1026 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1027 
mii_bus
 *
mii
 = 
as
->mii_bus;

1029 
p‹t
 = 
vÆ
->
vÆue
.
i
;

1031 i‡(
p‹t
 > 15)

1032  -
EINVAL
;

1034 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_CPU_PORT
,

1035 
AR7240_MIRROR_PORT_M
 << 
AR7240_MIRROR_PORT_S
,

1036 
p‹t
 << 
AR7240_MIRROR_PORT_S
);

1039 
	}
}

1042 
	$¨7240_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1043 c⁄° 
swôch_©å
 *
©å
,

1044 
swôch_vÆ
 *
vÆ
)

1046 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1047 
mii_bus
 *
mii
 = 
as
->mii_bus;

1049 
u32
 
ªt
;

1051 
ªt
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_CPU_PORT
);

1052 
vÆ
->
vÆue
.
i
 = (
ªt
 >> 
AR7240_MIRROR_PORT_S
Ë& 
AR7240_MIRROR_PORT_M
;

1055 
	}
}

1058 
	$¨7240_£t_múr‹_rx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1059 
swôch_vÆ
 *
vÆ
)

1061 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1062 
mii_bus
 *
mii
 = 
as
->mii_bus;

1064 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1066 i‡(
p‹t
 >
dev
->
p‹ts
)

1067  -
EINVAL
;

1069 i‡(
vÆ
 && vÆ->
vÆue
.
i
 == 1)

1070 
	`¨7240sw_ªg_£t
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1071 
AR7240_PORT_CTRL_MIRROR_RX
);

1073 
	`¨7240sw_ªg_rmw
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1074 
AR7240_PORT_CTRL_MIRROR_RX
, 0);

1077 
	}
}

1080 
	$¨7240_gë_múr‹_rx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1081 
swôch_vÆ
 *
vÆ
)

1083 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1084 
mii_bus
 *
mii
 = 
as
->mii_bus;

1086 
u32
 
˘æ
;

1088 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1090 i‡(
p‹t
 >
dev
->
p‹ts
)

1091  -
EINVAL
;

1093 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
));

1095 i‡((
˘æ
 & 
AR7240_PORT_CTRL_MIRROR_RX
) == AR7240_PORT_CTRL_MIRROR_RX)

1096 
vÆ
->
vÆue
.
i
 = 1;

1098 
vÆ
->
vÆue
.
i
 = 0;

1101 
	}
}

1104 
	$¨7240_£t_múr‹_tx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1105 
swôch_vÆ
 *
vÆ
)

1107 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1108 
mii_bus
 *
mii
 = 
as
->mii_bus;

1110 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1112 i‡(
p‹t
 >
dev
->
p‹ts
)

1113  -
EINVAL
;

1115 i‡(
vÆ
 && vÆ->
vÆue
.
i
 == 1)

1116 
	`¨7240sw_ªg_£t
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1117 
AR7240_PORT_CTRL_MIRROR_TX
);

1119 
	`¨7240sw_ªg_rmw
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1120 
AR7240_PORT_CTRL_MIRROR_TX
, 0);

1123 
	}
}

1126 
	$¨7240_gë_múr‹_tx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1127 
swôch_vÆ
 *
vÆ
)

1129 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1130 
mii_bus
 *
mii
 = 
as
->mii_bus;

1132 
u32
 
˘æ
;

1134 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1136 i‡(
p‹t
 >
dev
->
p‹ts
)

1137  -
EINVAL
;

1139 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
));

1141 i‡((
˘æ
 & 
AR7240_PORT_CTRL_MIRROR_TX
) == AR7240_PORT_CTRL_MIRROR_TX)

1142 
vÆ
->
vÆue
.
i
 = 1;

1144 
vÆ
->
vÆue
.
i
 = 0;

1147 
	}
}

1149 
swôch_©å
 
	g¨7240_globÆs
[] = {

1151 .
ty≥
 = 
SWITCH_TYPE_INT
,

1152 .
	g«me
 = "enable_vlan",

1153 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1154 .
	g£t
 = 
¨7240_£t_vœn
,

1155 .
	ggë
 = 
¨7240_gë_vœn
,

1156 .
	gmax
 = 1

1159 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1160 .
	g«me
 = "mirror_monitor_port",

1161 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

1162 .
	g£t
 = 
¨7240_£t_múr‹_m⁄ô‹_p‹t
,

1163 .
	ggë
 = 
¨7240_gë_múr‹_m⁄ô‹_p‹t
,

1164 .
	gmax
 = 15

1168 
swôch_©å
 
	g¨7240_p‹t
[] = {

1170 .
ty≥
 = 
SWITCH_TYPE_INT
,

1171 .
	g«me
 = "enable_mirror_rx",

1172 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

1173 .
	g£t
 = 
¨7240_£t_múr‹_rx
,

1174 .
	ggë
 = 
¨7240_gë_múr‹_rx
,

1175 .
	gmax
 = 1

1178 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1179 .
	g«me
 = "enable_mirror_tx",

1180 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

1181 .
	g£t
 = 
¨7240_£t_múr‹_tx
,

1182 .
	ggë
 = 
¨7240_gë_múr‹_tx
,

1183 .
	gmax
 = 1

1187 
swôch_©å
 
	g¨7240_vœn
[] = {

1189 .
ty≥
 = 
SWITCH_TYPE_INT
,

1190 .
	g«me
 = "vid",

1191 .
	gdes¸ùti⁄
 = "VLAN ID",

1192 .
	g£t
 = 
¨7240_£t_vid
,

1193 .
	ggë
 = 
¨7240_gë_vid
,

1194 .
	gmax
 = 4094,

1198 c⁄° 
swôch_dev_›s
 
	g¨7240_›s
 = {

1199 .
©å_globÆ
 = {

1200 .
©å
 = 
¨7240_globÆs
,

1201 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_globÆs
),

1203 .
	g©å_p‹t
 = {

1204 .
©å
 = 
¨7240_p‹t
,

1205 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_p‹t
),

1207 .
	g©å_vœn
 = {

1208 .
©å
 = 
¨7240_vœn
,

1209 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_vœn
),

1211 .
	ggë_p‹t_pvid
 = 
¨7240_gë_pvid
,

1212 .
	g£t_p‹t_pvid
 = 
¨7240_£t_pvid
,

1213 .
	ggë_vœn_p‹ts
 = 
¨7240_gë_p‹ts
,

1214 .
	g£t_vœn_p‹ts
 = 
¨7240_£t_p‹ts
,

1215 .
	g≠∂y_c⁄fig
 = 
¨7240_hw_≠∂y
,

1216 .
	gª£t_swôch
 = 
¨7240_ª£t_swôch
,

1217 .
	ggë_p‹t_lök
 = 
¨7240_gë_p‹t_lök
,

1218 .
	ggë_p‹t_°©s
 = 
¨7240_gë_p‹t_°©s
,

1221 
¨7240sw
 *
	$¨7240_¥obe
(
ag71xx
 *
ag
)

1223 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

1224 
mii_bus
 *
mii
 = 
ag
->mii_bus;

1225 
¨7240sw
 *
as
;

1226 
swôch_dev
 *
swdev
;

1227 
u32
 
˘æ
;

1228 
u16
 
phy_id1
;

1229 
u16
 
phy_id2
;

1230 
i
;

1232 
phy_id1
 = 
	`¨7240sw_phy_ªad
(
mii
, 0, 
MII_PHYSID1
);

1233 
phy_id2
 = 
	`¨7240sw_phy_ªad
(
mii
, 0, 
MII_PHYSID2
);

1234 i‡((
phy_id1
 !
AR7240_PHY_ID1
 || 
phy_id2
 !
AR7240_PHY_ID2
) &&

1235 (
phy_id1
 !
AR934X_PHY_ID1
 || 
phy_id2
 !
AR934X_PHY_ID2
)) {

1236 
	`¥_îr
("%s: unknownÖhy id '%04x:%04x'\n",

1237 
	`dev_«me
(&
mii
->
dev
), 
phy_id1
, 
phy_id2
);

1238  
NULL
;

1241 
as
 = 
	`kzÆloc
((*as), 
GFP_KERNEL
);

1242 i‡(!
as
)

1243  
NULL
;

1245 
as
->
mii_bus
 = 
mii
;

1246 
as
->
swd©a
 = 
pd©a
->
swôch_d©a
;

1248 
swdev
 = &
as
->swdev;

1250 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_MASK_CTRL
);

1251 
as
->
vî
 = (
˘æ
 >> 
AR7240_MASK_CTRL_VERSION_S
) &

1252 
AR7240_MASK_CTRL_VERSION_M
;

1254 i‡(
	`sw_is_¨7240
(
as
)) {

1255 
swdev
->
«me
 = "AR7240/AR9330 built-in switch";

1256 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
 - 1;

1257 } i‡(
	`sw_is_¨934x
(
as
)) {

1258 
swdev
->
«me
 = "AR934X built-in switch";

1260 i‡(
pd©a
->
phy_if_mode
 =
PHY_INTERFACE_MODE_GMII
) {

1261 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE0
,

1262 
AR934X_OPER_MODE0_MAC_GMII_EN
);

1263 } i‡(
pd©a
->
phy_if_mode
 =
PHY_INTERFACE_MODE_MII
) {

1264 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE0
,

1265 
AR934X_OPER_MODE0_PHY_MII_EN
);

1267 
	`¥_îr
("%s: invalid PHY interface mode\n",

1268 
	`dev_«me
(&
mii
->
dev
));

1269 
îr_‰ì
;

1272 i‡(
as
->
swd©a
->
phy4_mii_í
) {

1273 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE1
,

1274 
AR934X_REG_OPER_MODE1_PHY4_MII_EN
);

1275 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
 - 1;

1277 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
;

1280 
	`¥_îr
("%s: unsupported chip, ctrl=%08x\n",

1281 
	`dev_«me
(&
mii
->
dev
), 
˘æ
);

1282 
îr_‰ì
;

1285 
swdev
->
˝u_p‹t
 = 
AR7240_PORT_CPU
;

1286 
swdev
->
vœns
 = 
AR7240_MAX_VLANS
;

1287 
swdev
->
›s
 = &
¨7240_›s
;

1289 i‡(
	`ªgi°î_swôch
(&
as
->
swdev
, 
ag
->
dev
) < 0)

1290 
îr_‰ì
;

1292 
	`¥_öfo
("%s: Foundá¿%s\n", 
	`dev_«me
(&
mii
->
dev
), 
swdev
->
«me
);

1295 
i
 = 0; i < 
AR7240_MAX_VLANS
; i++)

1296 
as
->
vœn_id
[
i
] = i;

1298 
as
->
vœn_èbÀ
[0] = 
	`¨7240sw_p‹t_mask_Æl
(as);

1300  
as
;

1302 
îr_‰ì
:

1303 
	`k‰ì
(
as
);

1304  
NULL
;

1305 
	}
}

1307 
	$lök_fun˘i⁄
(
w‹k_°ru˘
 *
w‹k
) {

1308 
ag71xx
 *
ag
 = 
	`c⁄èöî_of
(
w‹k
, ag71xx, 
lök_w‹k
.work);

1309 
¨7240sw
 *
as
 = 
ag
->
phy_¥iv
;

1310 
Êags
;

1311 
u8
 
mask
;

1312 
i
;

1313 
°©us
 = 0;

1315 
mask
 = ~
as
->
swd©a
->
phy_pﬁl_mask
;

1316 
i
 = 0; i < 
AR7240_NUM_PHYS
; i++) {

1317 
lök
;

1319 i‡(!(
mask
 & 
	`BIT
(
i
)))

1322 
lök
 = 
	`¨7240sw_phy_ªad
(
ag
->
mii_bus
, 
i
, 
MII_BMSR
);

1323 i‡(
lök
 & 
BMSR_LSTATUS
) {

1324 
°©us
 = 1;

1329 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

1330 i‡(
°©us
 !
ag
->
lök
) {

1331 
ag
->
lök
 = 
°©us
;

1332 
	`ag71xx_lök_adju°
(
ag
);

1334 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

1336 
	`scheduÀ_dñayed_w‹k
(&
ag
->
lök_w‹k
, 
HZ
 / 2);

1337 
	}
}

1339 
	$ag71xx_¨7240_°¨t
(
ag71xx
 *
ag
)

1341 
¨7240sw
 *
as
 = 
ag
->
phy_¥iv
;

1343 
	`¨7240sw_ª£t
(
as
);

1345 
ag
->
•ìd
 = 
SPEED_1000
;

1346 
ag
->
du∂ex
 = 1;

1348 
	`¨7240_£t_addr
(
as
, 
ag
->
dev
->
dev_addr
);

1349 
	`¨7240_hw_≠∂y
(&
as
->
swdev
);

1351 
	`scheduÀ_dñayed_w‹k
(&
ag
->
lök_w‹k
, 
HZ
 / 10);

1352 
	}
}

1354 
	$ag71xx_¨7240_°›
(
ag71xx
 *
ag
)

1356 
	`ˇn˚l_dñayed_w‹k_sync
(&
ag
->
lök_w‹k
);

1357 
	}
}

1359 
	$ag71xx_¨7240_öô
(
ag71xx
 *
ag
)

1361 
¨7240sw
 *
as
;

1363 
as
 = 
	`¨7240_¥obe
(
ag
);

1364 i‡(!
as
)

1365  -
ENODEV
;

1367 
ag
->
phy_¥iv
 = 
as
;

1368 
	`¨7240sw_ª£t
(
as
);

1370 
	`rwlock_öô
(&
as
->
°©s_lock
);

1371 
	`INIT_DELAYED_WORK
(&
ag
->
lök_w‹k
, 
lök_fun˘i⁄
);

1374 
	}
}

1376 
	$ag71xx_¨7240_˛ónup
(
ag71xx
 *
ag
)

1378 
¨7240sw
 *
as
 = 
ag
->
phy_¥iv
;

1380 i‡(!
as
)

1383 
	`uƒegi°î_swôch
(&
as
->
swdev
);

1384 
	`k‰ì
(
as
);

1385 
ag
->
phy_¥iv
 = 
NULL
;

1386 
	}
}

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar8216.c

14 
	~"ag71xx.h
"

16 
	#AR8216_PACKET_TYPE_MASK
 0xf

	)

17 
	#AR8216_PACKET_TYPE_NORMAL
 0

	)

19 
	#AR8216_HEADER_LEN
 2

	)

21 
	$ag71xx_add_¨8216_hódî
(
ag71xx
 *
ag
, 
sk_buff
 *
skb
)

23 
	`skb_push
(
skb
, 
AR8216_HEADER_LEN
);

24 
skb
->
d©a
[0] = 0x10;

25 
skb
->
d©a
[1] = 0x80;

26 
	}
}

28 
	$ag71xx_ªmove_¨8216_hódî
(
ag71xx
 *
ag
, 
sk_buff
 *
skb
,

29 
pkéí
)

31 
u8
 
ty≥
;

33 
ty≥
 = 
skb
->
d©a
[1] & 
AR8216_PACKET_TYPE_MASK
;

34 
ty≥
) {

35 
AR8216_PACKET_TYPE_NORMAL
:

39  -
EINVAL
;

42 
	`skb_puŒ
(
skb
, 
AR8216_HEADER_LEN
);

44 
	}
}

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_debugfs.c

14 
	~<löux/debugfs.h
>

16 
	~"ag71xx.h
"

18 
díåy
 *
	gag71xx_debugfs_roŸ
;

20 
	$ag71xx_debugfs_gíîic_›í
(
öode
 *öode, 
fûe
 *file)

22 
fûe
->
¥iv©e_d©a
 = 
öode
->
i_¥iv©e
;

24 
	}
}

26 
	$ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
, 
u32
 
°©us
)

28 i‡(
°©us
)

29 
ag
->
debug
.
öt_°©s
.
tŸÆ
++;

30 i‡(
°©us
 & 
AG71XX_INT_TX_PS
)

31 
ag
->
debug
.
öt_°©s
.
tx_ps
++;

32 i‡(
°©us
 & 
AG71XX_INT_TX_UR
)

33 
ag
->
debug
.
öt_°©s
.
tx_ur
++;

34 i‡(
°©us
 & 
AG71XX_INT_TX_BE
)

35 
ag
->
debug
.
öt_°©s
.
tx_be
++;

36 i‡(
°©us
 & 
AG71XX_INT_RX_PR
)

37 
ag
->
debug
.
öt_°©s
.
rx_¥
++;

38 i‡(
°©us
 & 
AG71XX_INT_RX_OF
)

39 
ag
->
debug
.
öt_°©s
.
rx_of
++;

40 i‡(
°©us
 & 
AG71XX_INT_RX_BE
)

41 
ag
->
debug
.
öt_°©s
.
rx_be
++;

42 
	}
}

44 
ssize_t
 
	$ªad_fûe_öt_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

45 
size_t
 
cou¡
, 
loff_t
 *
µos
)

47 
	#PR_INT_STAT
(
_œbñ
, 
_fõld
) \

48 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, \

49 "%20s: %10lu\n", 
_œbñ
, 
ag
->
debug
.
öt_°©s
.
_fõld
);

	)

51 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

52 
buf
[256];

53 
Àn
 = 0;

55 
	`PR_INT_STAT
("TX Packë Sít", 
tx_ps
);

56 
	`PR_INT_STAT
("TX Undîrun", 
tx_ur
);

57 
	`PR_INT_STAT
("TX Bu†Eº‹", 
tx_be
);

58 
	`PR_INT_STAT
("RX Packë Re˚ived", 
rx_¥
);

59 
	`PR_INT_STAT
("RX OvîÊow", 
rx_of
);

60 
	`PR_INT_STAT
("RX Bu†Eº‹", 
rx_be
);

61 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "\n");

62 
	`PR_INT_STAT
("TŸÆ", 
tŸÆ
);

64  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

65 #unde‡
PR_INT_STAT


66 
	}
}

68 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_öt_°©s
 = {

69 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

70 .
	gªad
 = 
ªad_fûe_öt_°©s
,

71 .
	gow√r
 = 
THIS_MODULE


74 
	$ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
, 
rx
, 
tx
)

76 
ag71xx_«pi_°©s
 *
°©s
 = &
ag
->
debug
.
«pi_°©s
;

78 i‡(
rx
) {

79 
°©s
->
rx_cou¡
++;

80 
°©s
->
rx_∑ckës
 +
rx
;

81 i‡(
rx
 <
AG71XX_NAPI_WEIGHT
)

82 
°©s
->
rx
[rx]++;

83 i‡(
rx
 > 
°©s
->
rx_∑ckës_max
)

84 
°©s
->
rx_∑ckës_max
 = 
rx
;

87 i‡(
tx
) {

88 
°©s
->
tx_cou¡
++;

89 
°©s
->
tx_∑ckës
 +
tx
;

90 i‡(
tx
 <
AG71XX_NAPI_WEIGHT
)

91 
°©s
->
tx
[tx]++;

92 i‡(
tx
 > 
°©s
->
tx_∑ckës_max
)

93 
°©s
->
tx_∑ckës_max
 = 
tx
;

95 
	}
}

97 
ssize_t
 
	$ªad_fûe_«pi_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

98 
size_t
 
cou¡
, 
loff_t
 *
µos
)

100 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

101 
ag71xx_«pi_°©s
 *
°©s
 = &
ag
->
debug
.
«pi_°©s
;

102 *
buf
;

103 
buÊí
;

104 
Àn
 = 0;

105 
rx_avg
 = 0;

106 
tx_avg
 = 0;

107 
ªt
;

108 
i
;

110 
buÊí
 = 2048;

111 
buf
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

112 i‡(!
buf
)

113  -
ENOMEM
;

115 i‡(
°©s
->
rx_cou¡
)

116 
rx_avg
 = 
°©s
->
rx_∑ckës
 / sèts->
rx_cou¡
;

118 i‡(
°©s
->
tx_cou¡
)

119 
tx_avg
 = 
°©s
->
tx_∑ckës
 / sèts->
tx_cou¡
;

121 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s %10s %10s\n",

124 
i
 = 1; i <
AG71XX_NAPI_WEIGHT
; i++)

125 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

127 
i
, 
°©s
->
rx
[i], sèts->
tx
[i]);

129 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "\n");

131 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

132 "sum", 
°©s
->
rx_cou¡
, sèts->
tx_cou¡
);

133 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

134 "avg", 
rx_avg
, 
tx_avg
);

135 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

136 "max", 
°©s
->
rx_∑ckës_max
, sèts->
tx_∑ckës_max
);

137 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

138 "pkt", 
°©s
->
rx_∑ckës
, sèts->
tx_∑ckës
);

140 
ªt
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

141 
	`k‰ì
(
buf
);

143  
ªt
;

144 
	}
}

146 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_«pi_°©s
 = {

147 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

148 .
	gªad
 = 
ªad_fûe_«pi_°©s
,

149 .
	gow√r
 = 
THIS_MODULE


152 
	#DESC_PRINT_LEN
 64

	)

154 
ssize_t
 
	$ªad_fûe_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

155 
size_t
 
cou¡
, 
loff_t
 *
µos
,

156 
ag71xx
 *
ag
,

157 
ag71xx_rög
 *
rög
,

158 
desc_ªg
)

160 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

161 
rög_mask
 = 
rög_size
 - 1;

162 *
buf
;

163 
buÊí
;

164 
Àn
 = 0;

165 
Êags
;

166 
ssize_t
 
ªt
;

167 
cuº
;

168 
dúty
;

169 
u32
 
desc_hw
;

170 
i
;

172 
buÊí
 = (
rög_size
 * 
DESC_PRINT_LEN
);

173 
buf
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

174 i‡(!
buf
)

175  -
ENOMEM
;

177 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

181 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

183 
cuº
 = (
rög
->cuº & 
rög_mask
);

184 
dúty
 = (
rög
->dúty & 
rög_mask
);

185 
desc_hw
 = 
	`ag71xx_º
(
ag
, 
desc_ªg
);

186 
i
 = 0; i < 
rög_size
; i++) {

187 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

188 
u32
 
desc_dma
 = ((u32Ë
rög
->
descs_dma
Ë+ 
i
 * 
AG71XX_DESC_SIZE
;

190 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

192 
i
,

193 (
i
 =
cuº
) ? 'C' : ' ',

194 (
i
 =
dúty
) ? 'D' : ' ',

195 (
desc_hw
 =
desc_dma
) ? 'H' : ' ',

196 
desc_dma
,

197 
desc
->
√xt
,

198 
desc
->
d©a
,

199 
desc
->
˘æ
,

200 (
desc
->
˘æ
 & 
DESC_EMPTY
) ? 'E' : '*');

203 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

205 
ªt
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

206 
	`k‰ì
(
buf
);

208  
ªt
;

209 
	}
}

211 
ssize_t
 
	$ªad_fûe_tx_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

212 
size_t
 
cou¡
, 
loff_t
 *
µos
)

214 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

216  
	`ªad_fûe_rög
(
fûe
, 
u£r_buf
, 
cou¡
, 
µos
, 
ag
, &ag->
tx_rög
,

217 
AG71XX_REG_TX_DESC
);

218 
	}
}

220 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_tx_rög
 = {

221 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

222 .
	gªad
 = 
ªad_fûe_tx_rög
,

223 .
	gow√r
 = 
THIS_MODULE


226 
ssize_t
 
	$ªad_fûe_rx_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

227 
size_t
 
cou¡
, 
loff_t
 *
µos
)

229 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

231  
	`ªad_fûe_rög
(
fûe
, 
u£r_buf
, 
cou¡
, 
µos
, 
ag
, &ag->
rx_rög
,

232 
AG71XX_REG_RX_DESC
);

233 
	}
}

235 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_rx_rög
 = {

236 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

237 .
	gªad
 = 
ªad_fûe_rx_rög
,

238 .
	gow√r
 = 
THIS_MODULE


241 
	$ag71xx_debugfs_exô
(
ag71xx
 *
ag
)

243 
	`debugfs_ªmove_ªcursive
(
ag
->
debug
.
debugfs_dú
);

244 
	}
}

246 
	$ag71xx_debugfs_öô
(
ag71xx
 *
ag
)

248 
devi˚
 *
dev
 = &
ag
->
pdev
->dev;

250 
ag
->
debug
.
debugfs_dú
 = 
	`debugfs_¸óã_dú
(
	`dev_«me
(
dev
),

251 
ag71xx_debugfs_roŸ
);

252 i‡(!
ag
->
debug
.
debugfs_dú
) {

253 
	`dev_îr
(
dev
, "unableÅo create debugfs directory\n");

254  -
ENOENT
;

257 
	`debugfs_¸óã_fûe
("öt_°©s", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

258 
ag
, &
ag71xx_f›s_öt_°©s
);

259 
	`debugfs_¸óã_fûe
("«pi_°©s", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

260 
ag
, &
ag71xx_f›s_«pi_°©s
);

261 
	`debugfs_¸óã_fûe
("tx_rög", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

262 
ag
, &
ag71xx_f›s_tx_rög
);

263 
	`debugfs_¸óã_fûe
("rx_rög", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

264 
ag
, &
ag71xx_f›s_rx_rög
);

267 
	}
}

269 
	$ag71xx_debugfs_roŸ_öô
()

271 i‡(
ag71xx_debugfs_roŸ
)

272  -
EBUSY
;

274 
ag71xx_debugfs_roŸ
 = 
	`debugfs_¸óã_dú
(
KBUILD_MODNAME
, 
NULL
);

275 i‡(!
ag71xx_debugfs_roŸ
)

276  -
ENOENT
;

279 
	}
}

281 
	$ag71xx_debugfs_roŸ_exô
()

283 
	`debugfs_ªmove
(
ag71xx_debugfs_roŸ
);

284 
ag71xx_debugfs_roŸ
 = 
NULL
;

285 
	}
}

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ethtool.c

14 
	~"ag71xx.h
"

15 
	~<löux/vîsi⁄.h
>

17 
	$ag71xx_ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
,

18 
ëhtoﬁ_cmd
 *
cmd
)

20 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

21 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

23 i‡(!
phydev
)

24  -
ENODEV
;

26 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,14,0)

27  
	`phy_ëhtoﬁ_g£t
(
phydev
, 
cmd
);

29  
	`phy_ëhtoﬁ_io˘l
(
phydev
, 
cmd
);

31 
	}
}

33 
	$ag71xx_ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
,

34 
ëhtoﬁ_cmd
 *
cmd
)

36 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

37 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

39 i‡(!
phydev
)

40  -
ENODEV
;

42 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,14,0)

43  
	`phy_ëhtoﬁ_s£t
(
phydev
, 
cmd
);

45  
	`phy_ëhtoﬁ_io˘l
(
phydev
, 
cmd
);

47 
	}
}

49 
	$ag71xx_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
dev
,

50 
ëhtoﬁ_drvöfo
 *
öfo
)

52 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

54 
	`°r˝y
(
öfo
->
drivî
, 
ag
->
pdev
->
dev
.drivî->
«me
);

55 
	`°r˝y
(
öfo
->
vîsi⁄
, 
AG71XX_DRV_VERSION
);

56 
	`°r˝y
(
öfo
->
bus_öfo
, 
	`dev_«me
(&
ag
->
pdev
->
dev
));

57 
	}
}

59 
u32
 
	$ag71xx_ëhtoﬁ_gë_msgÀvñ
(
√t_devi˚
 *
dev
)

61 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

63  
ag
->
msg_íabÀ
;

64 
	}
}

66 
	$ag71xx_ëhtoﬁ_£t_msgÀvñ
(
√t_devi˚
 *
dev
, 
u32
 
msg_Àvñ
)

68 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

70 
ag
->
msg_íabÀ
 = 
msg_Àvñ
;

71 
	}
}

73 
	$ag71xx_ëhtoﬁ_gë_rög∑øm
(
√t_devi˚
 *
dev
,

74 
ëhtoﬁ_rög∑øm
 *
î
)

76 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

78 
î
->
tx_max_≥ndög
 = 
AG71XX_TX_RING_SIZE_MAX
;

79 
î
->
rx_max_≥ndög
 = 
AG71XX_RX_RING_SIZE_MAX
;

80 
î
->
rx_möi_max_≥ndög
 = 0;

81 
î
->
rx_jumbo_max_≥ndög
 = 0;

83 
î
->
tx_≥ndög
 = 
	`BIT
(
ag
->
tx_rög
.
‹dî
);

84 
î
->
rx_≥ndög
 = 
	`BIT
(
ag
->
rx_rög
.
‹dî
);

85 
î
->
rx_möi_≥ndög
 = 0;

86 
î
->
rx_jumbo_≥ndög
 = 0;

88 i‡(
ag
->
tx_rög
.
desc_•lô
)

89 
î
->
tx_≥ndög
 /
AG71XX_TX_RING_DS_PER_PKT
;

90 
	}
}

92 
	$ag71xx_ëhtoﬁ_£t_rög∑øm
(
√t_devi˚
 *
dev
,

93 
ëhtoﬁ_rög∑øm
 *
î
)

95 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

96 
tx_size
;

97 
rx_size
;

98 
îr
 = 0;

100 i‡(
î
->
rx_möi_≥ndög
 != 0||

101 
î
->
rx_jumbo_≥ndög
 != 0 ||

102 
î
->
rx_≥ndög
 == 0 ||

103 
î
->
tx_≥ndög
 == 0)

104  -
EINVAL
;

106 
tx_size
 = 
î
->
tx_≥ndög
 < 
AG71XX_TX_RING_SIZE_MAX
 ?

107 
î
->
tx_≥ndög
 : 
AG71XX_TX_RING_SIZE_MAX
;

109 
rx_size
 = 
î
->
rx_≥ndög
 < 
AG71XX_RX_RING_SIZE_MAX
 ?

110 
î
->
rx_≥ndög
 : 
AG71XX_RX_RING_SIZE_MAX
;

112 i‡(
	`√tif_ru¬ög
(
dev
)) {

113 
îr
 = 
dev
->
√tdev_›s
->
	`ndo_°›
(dev);

114 i‡(
îr
)

115  
îr
;

118 i‡(
ag
->
tx_rög
.
desc_•lô
)

119 
tx_size
 *
AG71XX_TX_RING_DS_PER_PKT
;

121 
ag
->
tx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
tx_size
);

122 
ag
->
rx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
rx_size
);

124 i‡(
	`√tif_ru¬ög
(
dev
))

125 
îr
 = 
dev
->
√tdev_›s
->
	`ndo_›í
(dev);

127  
îr
;

128 
	}
}

130 
ëhtoﬁ_›s
 
	gag71xx_ëhtoﬁ_›s
 = {

131 .
£t_£âögs
 = 
ag71xx_ëhtoﬁ_£t_£âögs
,

132 .
	ggë_£âögs
 = 
ag71xx_ëhtoﬁ_gë_£âögs
,

133 .
	ggë_drvöfo
 = 
ag71xx_ëhtoﬁ_gë_drvöfo
,

134 .
	ggë_msgÀvñ
 = 
ag71xx_ëhtoﬁ_gë_msgÀvñ
,

135 .
	g£t_msgÀvñ
 = 
ag71xx_ëhtoﬁ_£t_msgÀvñ
,

136 .
	ggë_rög∑øm
 = 
ag71xx_ëhtoﬁ_gë_rög∑øm
,

137 .
	g£t_rög∑øm
 = 
ag71xx_ëhtoﬁ_£t_rög∑øm
,

138 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

139 .
	ggë_ts_öfo
 = 
ëhtoﬁ_›_gë_ts_öfo
,

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c

14 
	~"ag71xx.h
"

16 
	#AG71XX_DEFAULT_MSG_ENABLE
 \

17 (
NETIF_MSG_DRV
 \

18 | 
NETIF_MSG_PROBE
 \

19 | 
NETIF_MSG_LINK
 \

20 | 
NETIF_MSG_TIMER
 \

21 | 
NETIF_MSG_IFDOWN
 \

22 | 
NETIF_MSG_IFUP
 \

23 | 
NETIF_MSG_RX_ERR
 \

24 | 
NETIF_MSG_TX_ERR
)

	)

26 
	gag71xx_msg_Àvñ
 = -1;

28 
moduÀ_∑øm_«med
(
msg_Àvñ
, 
ag71xx_msg_Àvñ
, , 0);

29 
MODULE_PARM_DESC
(
msg_Àvñ
, "MessageÜevel (-1=defaults,0=none,...,16=all)");

31 
	#ETH_SWITCH_HEADER_LEN
 2

	)

33 
ag71xx_tx_∑ckës
(
ag71xx
 *
ag
, 
boﬁ
 
Êush
);

34 
ag71xx_qˇ955x_sgmii_öô
();

36 
ölöe
 
	$ag71xx_max_‰ame_Àn
(
mtu
)

38  
ETH_SWITCH_HEADER_LEN
 + 
ETH_HLEN
 + 
VLAN_HLEN
 + 
mtu
 + 
ETH_FCS_LEN
;

39 
	}
}

41 
	$ag71xx_dump_dma_ªgs
(
ag71xx
 *
ag
)

43 
	`DBG
("%s: dma_tx_ctrl=%08x, dma_tx_desc=%08x, dma_tx_status=%08x\n",

44 
ag
->
dev
->
«me
,

45 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_CTRL
),

46 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_DESC
),

47 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
));

49 
	`DBG
("%s: dma_rx_ctrl=%08x, dma_rx_desc=%08x, dma_rx_status=%08x\n",

50 
ag
->
dev
->
«me
,

51 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_CTRL
),

52 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_DESC
),

53 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
));

54 
	}
}

56 
	$ag71xx_dump_ªgs
(
ag71xx
 *
ag
)

58 
	`DBG
("%s: mac_cfg1=%08x, mac_cfg2=%08x, ipg=%08x, hdx=%08x, mfl=%08x\n",

59 
ag
->
dev
->
«me
,

60 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG1
),

61 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG2
),

62 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IPG
),

63 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_HDX
),

64 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_MFL
));

65 
	`DBG
("%s: mac_ifctl=%08x, mac_addr1=%08x, mac_addr2=%08x\n",

66 
ag
->
dev
->
«me
,

67 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IFCTL
),

68 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_ADDR1
),

69 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_ADDR2
));

70 
	`DBG
("%s: fifo_cfg0=%08x, fifo_cfg1=%08x, fifo_cfg2=%08x\n",

71 
ag
->
dev
->
«me
,

72 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG0
),

73 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG1
),

74 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG2
));

75 
	`DBG
("%s: fifo_cfg3=%08x, fifo_cfg4=%08x, fifo_cfg5=%08x\n",

76 
ag
->
dev
->
«me
,

77 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG3
),

78 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG4
),

79 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG5
));

80 
	}
}

82 
ölöe
 
	$ag71xx_dump_öå
(
ag71xx
 *
ag
, *
œbñ
, 
u32
 
öå
)

84 
	`DBG
("%s: %s intr=%08x %s%s%s%s%s%s\n",

85 
ag
->
dev
->
«me
, 
œbñ
, 
öå
,

86 (
öå
 & 
AG71XX_INT_TX_PS
) ? "TXPS " : "",

87 (
öå
 & 
AG71XX_INT_TX_UR
) ? "TXUR " : "",

88 (
öå
 & 
AG71XX_INT_TX_BE
) ? "TXBE " : "",

89 (
öå
 & 
AG71XX_INT_RX_PR
) ? "RXPR " : "",

90 (
öå
 & 
AG71XX_INT_RX_OF
) ? "RXOF " : "",

91 (
öå
 & 
AG71XX_INT_RX_BE
) ? "RXBE " : "");

92 
	}
}

94 
	$ag71xx_rög_tx_˛ón
(
ag71xx
 *
ag
)

96 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

97 
√t_devi˚
 *
dev
 = 
ag
->dev;

98 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

99 
u32
 
byãs_com∂
 = 0, 
pkts_com∂
 = 0;

101 
rög
->
cuº
 !rög->
dúty
) {

102 
ag71xx_desc
 *
desc
;

103 
u32
 
i
 = 
rög
->
dúty
 & 
rög_mask
;

105 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

106 i‡(!
	`ag71xx_desc_em±y
(
desc
)) {

107 
desc
->
˘æ
 = 0;

108 
dev
->
°©s
.
tx_îr‹s
++;

111 i‡(
rög
->
buf
[
i
].
skb
) {

112 
byãs_com∂
 +
rög
->
buf
[
i
].
Àn
;

113 
pkts_com∂
++;

114 
	`dev_k‰ì_skb_™y
(
rög
->
buf
[
i
].
skb
);

116 
rög
->
buf
[
i
].
skb
 = 
NULL
;

117 
rög
->
dúty
++;

121 
	`wmb
();

123 
	`√tdev_com∂ëed_queue
(
dev
, 
pkts_com∂
, 
byãs_com∂
);

124 
	}
}

126 
	$ag71xx_rög_tx_öô
(
ag71xx
 *
ag
)

128 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

129 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

130 
rög_mask
 = 
rög_size
 - 1;

131 
i
;

133 
i
 = 0; i < 
rög_size
; i++) {

134 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

136 
desc
->
√xt
 = (
u32
Ë(
rög
->
descs_dma
 +

137 
AG71XX_DESC_SIZE
 * ((
i
 + 1Ë& 
rög_mask
));

139 
desc
->
˘æ
 = 
DESC_EMPTY
;

140 
rög
->
buf
[
i
].
skb
 = 
NULL
;

144 
	`wmb
();

146 
rög
->
cuº
 = 0;

147 
rög
->
dúty
 = 0;

148 
	`√tdev_ª£t_queue
(
ag
->
dev
);

149 
	}
}

151 
	$ag71xx_rög_rx_˛ón
(
ag71xx
 *
ag
)

153 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

154 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

155 
i
;

157 i‡(!
rög
->
buf
)

160 
i
 = 0; i < 
rög_size
; i++)

161 i‡(
rög
->
buf
[
i
].
rx_buf
) {

162 
	`dma_unm≠_sögÀ
(&
ag
->
dev
->dev, 
rög
->
buf
[
i
].
dma_addr
,

163 
ag
->
rx_buf_size
, 
DMA_FROM_DEVICE
);

164 
	`skb_‰ì_‰ag
(
rög
->
buf
[
i
].
rx_buf
);

166 
	}
}

168 
	$ag71xx_buf„r_off£t
(
ag71xx
 *
ag
)

170 
off£t
 = 
NET_SKB_PAD
;

178 i‡(!
	`ag71xx_gë_pd©a
(
ag
)->
is_¨724x
 || 
	`ag71xx_has_¨8216
(ag))

179  
off£t
;

181  
off£t
 + 
NET_IP_ALIGN
;

182 
	}
}

184 
	$ag71xx_buf„r_size
(
ag71xx
 *
ag
)

186  
ag
->
rx_buf_size
 +

187 
	`SKB_DATA_ALIGN
((
skb_sh¨ed_öfo
));

188 
	}
}

190 
boﬁ
 
	$ag71xx_fûl_rx_buf
(
ag71xx
 *
ag
, 
ag71xx_buf
 *
buf
,

191 
off£t
,

192 *(*
Æloc
)(
size
))

194 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

195 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
buf
 - &ring->buf[0]);

196 *
d©a
;

198 
d©a
 = 
	`Æloc
(
	`ag71xx_buf„r_size
(
ag
));

199 i‡(!
d©a
)

200  
Ál£
;

202 
buf
->
rx_buf
 = 
d©a
;

203 
buf
->
dma_addr
 = 
	`dma_m≠_sögÀ
(&
ag
->
dev
->dev, 
d©a
,ág->
rx_buf_size
,

204 
DMA_FROM_DEVICE
);

205 
desc
->
d©a
 = (
u32
Ë
buf
->
dma_addr
 + 
off£t
;

206  
åue
;

207 
	}
}

209 
	$ag71xx_rög_rx_öô
(
ag71xx
 *
ag
)

211 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

212 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

213 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

214 
i
;

215 
ªt
;

216 
off£t
 = 
	`ag71xx_buf„r_off£t
(
ag
);

218 
ªt
 = 0;

219 
i
 = 0; i < 
rög_size
; i++) {

220 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

222 
desc
->
√xt
 = (
u32
Ë(
rög
->
descs_dma
 +

223 
AG71XX_DESC_SIZE
 * ((
i
 + 1Ë& 
rög_mask
));

225 
	`DBG
("ag71xx: RX descát %p,Çext is %08x\n",

226 
desc
, desc->
√xt
);

229 
i
 = 0; i < 
rög_size
; i++) {

230 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

232 i‡(!
	`ag71xx_fûl_rx_buf
(
ag
, &
rög
->
buf
[
i
], 
off£t
,

233 
√tdev_Æloc_‰ag
)) {

234 
ªt
 = -
ENOMEM
;

238 
desc
->
˘æ
 = 
DESC_EMPTY
;

242 
	`wmb
();

244 
rög
->
cuº
 = 0;

245 
rög
->
dúty
 = 0;

247  
ªt
;

248 
	}
}

250 
	$ag71xx_rög_rx_ªfûl
(
ag71xx
 *
ag
)

252 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

253 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

254 
cou¡
;

255 
off£t
 = 
	`ag71xx_buf„r_off£t
(
ag
);

257 
cou¡
 = 0;

258 ; 
rög
->
cuº
 -Ñög->
dúty
 > 0;Ñing->dirty++) {

259 
ag71xx_desc
 *
desc
;

260 
i
;

262 
i
 = 
rög
->
dúty
 & 
rög_mask
;

263 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

265 i‡(!
rög
->
buf
[
i
].
rx_buf
 &&

266 !
	`ag71xx_fûl_rx_buf
(
ag
, &
rög
->
buf
[
i
], 
off£t
,

267 
«pi_Æloc_‰ag
))

270 
desc
->
˘æ
 = 
DESC_EMPTY
;

271 
cou¡
++;

275 
	`wmb
();

277 
	`DBG
("%s: %uÑx des¸ùt‹†ªfûÀd\n", 
ag
->
dev
->
«me
, 
cou¡
);

279  
cou¡
;

280 
	}
}

282 
	$ag71xx_rögs_öô
(
ag71xx
 *
ag
)

284 
ag71xx_rög
 *
tx
 = &
ag
->
tx_rög
;

285 
ag71xx_rög
 *
rx
 = &
ag
->
rx_rög
;

286 
rög_size
 = 
	`BIT
(
tx
->
‹dî
Ë+ BIT(
rx
->order);

287 
tx_size
 = 
	`BIT
(
tx
->
‹dî
);

289 
tx
->
buf
 = 
	`kzÆloc
(
rög_size
 * (*tx->buf), 
GFP_KERNEL
);

290 i‡(!
tx
->
buf
)

291  -
ENOMEM
;

293 
tx
->
descs_˝u
 = 
	`dma_Æloc_cohîít
(
NULL
, 
rög_size
 * 
AG71XX_DESC_SIZE
,

294 &
tx
->
descs_dma
, 
GFP_ATOMIC
);

295 i‡(!
tx
->
descs_˝u
) {

296 
	`k‰ì
(
tx
->
buf
);

297 
tx
->
buf
 = 
NULL
;

298  -
ENOMEM
;

301 
rx
->
buf
 = &
tx
->buf[
	`BIT
—x->
‹dî
)];

302 
rx
->
descs_˝u
 = ((*)
tx
->descs_˝uË+ 
tx_size
 * 
AG71XX_DESC_SIZE
;

303 
rx
->
descs_dma
 = 
tx
->descs_dm®+ 
tx_size
 * 
AG71XX_DESC_SIZE
;

305 
	`ag71xx_rög_tx_öô
(
ag
);

306  
	`ag71xx_rög_rx_öô
(
ag
);

307 
	}
}

309 
	$ag71xx_rögs_‰ì
(
ag71xx
 *
ag
)

311 
ag71xx_rög
 *
tx
 = &
ag
->
tx_rög
;

312 
ag71xx_rög
 *
rx
 = &
ag
->
rx_rög
;

313 
rög_size
 = 
	`BIT
(
tx
->
‹dî
Ë+ BIT(
rx
->order);

315 i‡(
tx
->
descs_˝u
)

316 
	`dma_‰ì_cohîít
(
NULL
, 
rög_size
 * 
AG71XX_DESC_SIZE
,

317 
tx
->
descs_˝u
,Åx->
descs_dma
);

319 
	`k‰ì
(
tx
->
buf
);

321 
tx
->
descs_˝u
 = 
NULL
;

322 
rx
->
descs_˝u
 = 
NULL
;

323 
tx
->
buf
 = 
NULL
;

324 
rx
->
buf
 = 
NULL
;

325 
	}
}

327 
	$ag71xx_rögs_˛ónup
(
ag71xx
 *
ag
)

329 
	`ag71xx_rög_rx_˛ón
(
ag
);

330 
	`ag71xx_rög_tx_˛ón
(
ag
);

331 
	`ag71xx_rögs_‰ì
(
ag
);

333 
	`√tdev_ª£t_queue
(
ag
->
dev
);

334 
	}
}

336 *
	$ag71xx_•ìd_°r
(
ag71xx
 *
ag
)

338 
ag
->
•ìd
) {

339 
SPEED_1000
:

341 
SPEED_100
:

343 
SPEED_10
:

348 
	}
}

350 
	$ag71xx_hw_£t_maˇddr
(
ag71xx
 *
ag
, *
mac
)

352 
u32
 
t
;

354 
t
 = (((
u32
Ë
mac
[5]) << 24) | (((u32) mac[4]) << 16)

355 | (((
u32
Ë
mac
[3]) << 8) | ((u32) mac[2]);

357 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_ADDR1
, 
t
);

359 
t
 = (((
u32
Ë
mac
[1]) << 24) | (((u32) mac[0]) << 16);

360 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_ADDR2
, 
t
);

361 
	}
}

363 
	$ag71xx_dma_ª£t
(
ag71xx
 *
ag
)

365 
u32
 
vÆ
;

366 
i
;

368 
	`ag71xx_dump_dma_ªgs
(
ag
);

371 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 0);

372 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 0);

378 
	`mdñay
(1);

381 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
°›_desc_dma
);

382 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
,ág->
°›_desc_dma
);

385 
i
 = 0; i < 256; i++) {

386 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_PR
);

387 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_PS
);

391 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_BE
 | 
RX_STATUS_OF
);

392 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_BE
 | 
TX_STATUS_UR
);

394 
vÆ
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
);

395 i‡(
vÆ
)

396 
	`¥_Æît
("%s: unableÅo clear DMA Rx status: %08x\n",

397 
ag
->
dev
->
«me
, 
vÆ
);

399 
vÆ
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
);

402 
vÆ
 &= ~0xff000000;

404 i‡(
vÆ
)

405 
	`¥_Æît
("%s: unableÅo clear DMA Tx status: %08x\n",

406 
ag
->
dev
->
«me
, 
vÆ
);

408 
	`ag71xx_dump_dma_ªgs
(
ag
);

409 
	}
}

411 
	#MAC_CFG1_INIT
 (
MAC_CFG1_RXE
 | 
MAC_CFG1_TXE
 | \

412 
MAC_CFG1_SRX
 | 
MAC_CFG1_STX
)

	)

414 
	#FIFO_CFG0_INIT
 (
FIFO_CFG0_ALL
 << 
FIFO_CFG0_ENABLE_SHIFT
)

	)

416 
	#FIFO_CFG4_INIT
 (
FIFO_CFG4_DE
 | 
FIFO_CFG4_DV
 | 
FIFO_CFG4_FC
 | \

417 
FIFO_CFG4_CE
 | 
FIFO_CFG4_CR
 | 
FIFO_CFG4_LM
 | \

418 
FIFO_CFG4_LO
 | 
FIFO_CFG4_OK
 | 
FIFO_CFG4_MC
 | \

419 
FIFO_CFG4_BC
 | 
FIFO_CFG4_DR
 | 
FIFO_CFG4_LE
 | \

420 
FIFO_CFG4_CF
 | 
FIFO_CFG4_PF
 | 
FIFO_CFG4_UO
 | \

421 
FIFO_CFG4_VT
)

	)

423 
	#FIFO_CFG5_INIT
 (
FIFO_CFG5_DE
 | 
FIFO_CFG5_DV
 | 
FIFO_CFG5_FC
 | \

424 
FIFO_CFG5_CE
 | 
FIFO_CFG5_LO
 | 
FIFO_CFG5_OK
 | \

425 
FIFO_CFG5_MC
 | 
FIFO_CFG5_BC
 | 
FIFO_CFG5_DR
 | \

426 
FIFO_CFG5_CF
 | 
FIFO_CFG5_PF
 | 
FIFO_CFG5_VT
 | \

427 
FIFO_CFG5_LE
 | 
FIFO_CFG5_FT
 | 
FIFO_CFG5_16
 | \

428 
FIFO_CFG5_17
 | 
FIFO_CFG5_SF
)

	)

430 
	$ag71xx_hw_°›
(
ag71xx
 *
ag
)

433 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_INT_ENABLE
, 0);

434 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 0);

435 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 0);

436 
	}
}

438 
	$ag71xx_hw_£tup
(
ag71xx
 *
ag
)

440 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

441 
u32
 
öô
 = 
MAC_CFG1_INIT
;

444 i‡(
pd©a
->
u£_Êow_c⁄åﬁ
)

445 
öô
 |
MAC_CFG1_TFC
 | 
MAC_CFG1_RFC
;

446 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_CFG1
, 
öô
);

448 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_MAC_CFG2
,

449 
MAC_CFG2_PAD_CRC_EN
 | 
MAC_CFG2_LEN_CHECK
);

452 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
, 0);

455 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG0
, 
FIFO_CFG0_INIT
);

456 i‡(
pd©a
->
is_¨724x
) {

457 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG1
, 0x0010ffff);

458 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG2
, 0x015500aa);

460 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG1
, 0x0fff0000);

461 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG2
, 0x00001fff);

463 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG4
, 
FIFO_CFG4_INIT
);

464 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG5
, 
FIFO_CFG5_INIT
);

465 
	}
}

467 
	$ag71xx_hw_öô
(
ag71xx
 *
ag
)

469 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

470 
u32
 
ª£t_mask
 = 
pd©a
->
ª£t_bô
;

472 
	`ag71xx_hw_°›
(
ag
);

474 i‡(
pd©a
->
is_¨724x
) {

475 
u32
 
ª£t_phy
 = 
ª£t_mask
;

477 
ª£t_phy
 &
AR71XX_RESET_GE0_PHY
 | 
AR71XX_RESET_GE1_PHY
;

478 
ª£t_mask
 &~(
AR71XX_RESET_GE0_PHY
 | 
AR71XX_RESET_GE1_PHY
);

480 
	`©h79_devi˚_ª£t_£t
(
ª£t_phy
);

481 
	`m¶ìp
(50);

482 
	`©h79_devi˚_ª£t_˛ór
(
ª£t_phy
);

483 
	`m¶ìp
(200);

486 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_MAC_CFG1
, 
MAC_CFG1_SR
);

487 
	`udñay
(20);

489 
	`©h79_devi˚_ª£t_£t
(
ª£t_mask
);

490 
	`m¶ìp
(100);

491 
	`©h79_devi˚_ª£t_˛ór
(
ª£t_mask
);

492 
	`m¶ìp
(200);

494 
	`ag71xx_hw_£tup
(
ag
);

496 
	`ag71xx_dma_ª£t
(
ag
);

497 
	}
}

499 
	$ag71xx_Á°_ª£t
(
ag71xx
 *
ag
)

501 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

502 
√t_devi˚
 *
dev
 = 
ag
->dev;

503 
u32
 
ª£t_mask
 = 
pd©a
->
ª£t_bô
;

504 
u32
 
rx_ds
;

505 
u32
 
mii_ªg
;

507 
ª£t_mask
 &
AR71XX_RESET_GE0_MAC
 | 
AR71XX_RESET_GE1_MAC
;

509 
	`ag71xx_hw_°›
(
ag
);

510 
	`wmb
();

512 
mii_ªg
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MII_CFG
);

513 
rx_ds
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_DESC
);

515 
	`ag71xx_tx_∑ckës
(
ag
, 
åue
);

517 
	`©h79_devi˚_ª£t_£t
(
ª£t_mask
);

518 
	`udñay
(10);

519 
	`©h79_devi˚_ª£t_˛ór
(
ª£t_mask
);

520 
	`udñay
(10);

522 
	`ag71xx_dma_ª£t
(
ag
);

523 
	`ag71xx_hw_£tup
(
ag
);

524 
ag
->
tx_rög
.
cuº
 = 0;

525 
ag
->
tx_rög
.
dúty
 = 0;

526 
	`√tdev_ª£t_queue
(
ag
->
dev
);

529 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
,

530 
	`ag71xx_max_‰ame_Àn
(
ag
->
dev
->
mtu
));

532 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
, 
rx_ds
);

533 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
tx_rög
.
descs_dma
);

534 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MII_CFG
, 
mii_ªg
);

536 
	`ag71xx_hw_£t_maˇddr
(
ag
, 
dev
->
dev_addr
);

537 
	}
}

539 
	$ag71xx_hw_°¨t
(
ag71xx
 *
ag
)

542 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 
RX_CTRL_RXE
);

545 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
AG71XX_INT_INIT
);

547 
	`√tif_wake_queue
(
ag
->
dev
);

548 
	}
}

551 
	$__ag71xx_lök_adju°
(
ag71xx
 *
ag
, 
boﬁ
 
upd©e
)

553 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

554 
u32
 
cfg2
;

555 
u32
 
if˘l
;

556 
u32
 
fifo5
;

557 
u32
 
fifo3
;

559 i‡(!
ag
->
lök
 && 
upd©e
) {

560 
	`ag71xx_hw_°›
(
ag
);

561 
	`√tif_ˇºõr_off
(
ag
->
dev
);

562 i‡(
	`√tif_msg_lök
(
ag
))

563 
	`¥_öfo
("%s:Üök down\n", 
ag
->
dev
->
«me
);

567 i‡(
pd©a
->
is_¨724x
)

568 
	`ag71xx_Á°_ª£t
(
ag
);

570 
cfg2
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG2
);

571 
cfg2
 &~(
MAC_CFG2_IF_1000
 | 
MAC_CFG2_IF_10_100
 | 
MAC_CFG2_FDX
);

572 
cfg2
 |(
ag
->
du∂ex
Ë? 
MAC_CFG2_FDX
 : 0;

574 
if˘l
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IFCTL
);

575 
if˘l
 &~(
MAC_IFCTL_SPEED
);

577 
fifo5
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG5
);

578 
fifo5
 &~
FIFO_CFG5_BM
;

580 
ag
->
•ìd
) {

581 
SPEED_1000
:

582 
cfg2
 |
MAC_CFG2_IF_1000
;

583 
fifo5
 |
FIFO_CFG5_BM
;

585 
SPEED_100
:

586 
cfg2
 |
MAC_CFG2_IF_10_100
;

587 
if˘l
 |
MAC_IFCTL_SPEED
;

589 
SPEED_10
:

590 
cfg2
 |
MAC_CFG2_IF_10_100
;

593 
	`BUG
();

597 i‡(
pd©a
->
is_¨91xx
)

598 
fifo3
 = 0x00780fff;

599 i‡(
pd©a
->
is_¨724x
)

600 
fifo3
 = 0x01f00140;

602 
fifo3
 = 0x008001ff;

604 i‡(
ag
->
tx_rög
.
desc_•lô
) {

605 
fifo3
 &= 0xffff;

606 
fifo3
 |((2048 - 
ag
->
tx_rög
.
desc_•lô
) / 4) << 16;

609 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG3
, 
fifo3
);

611 i‡(
upd©e
 && 
pd©a
->
£t_•ìd
)

612 
pd©a
->
	`£t_•ìd
(
ag
->
•ìd
);

614 i‡(
upd©e
 && 
pd©a
->
íabÀ_sgmii_fixup
)

615 
	`ag71xx_qˇ955x_sgmii_öô
();

617 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_CFG2
, 
cfg2
);

618 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG5
, 
fifo5
);

619 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_IFCTL
, 
if˘l
);

621 i‡(
pd©a
->
dißbÀ_ölöe_checksum_ígöe
) {

628 
__iomem
 *
dam
 = 
	`i‹em≠_noˇche
(0xb90001bc, 0x4);

629 i‡(
dam
) {

630 
	`__øw_wrôñ
(
	`__øw_ªadl
(
dam
Ë& ~
	`BIT
(27), dam);

631 ()
	`__øw_ªadl
(
dam
);

632 
	`iounm≠
(
dam
);

636 
	`ag71xx_hw_°¨t
(
ag
);

638 
	`√tif_ˇºõr_⁄
(
ag
->
dev
);

639 i‡(
upd©e
 && 
	`√tif_msg_lök
(
ag
))

640 
	`¥_öfo
("%s:Üink up (%sMbps/%s duplex)\n",

641 
ag
->
dev
->
«me
,

642 
	`ag71xx_•ìd_°r
(
ag
),

643 (
DUPLEX_FULL
 =
ag
->
du∂ex
) ? "Full" : "Half");

645 
	`ag71xx_dump_ªgs
(
ag
);

646 
	}
}

648 
	$ag71xx_lök_adju°
(
ag71xx
 *
ag
)

650 
	`__ag71xx_lök_adju°
(
ag
, 
åue
);

651 
	}
}

653 
	$ag71xx_hw_íabÀ
(
ag71xx
 *
ag
)

655 
ªt
;

657 
ªt
 = 
	`ag71xx_rögs_öô
(
ag
);

658 i‡(
ªt
)

659  
ªt
;

661 
	`«pi_íabÀ
(&
ag
->
«pi
);

662 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
tx_rög
.
descs_dma
);

663 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
,ág->
rx_rög
.
descs_dma
);

664 
	`√tif_°¨t_queue
(
ag
->
dev
);

667 
	}
}

669 
	$ag71xx_hw_dißbÀ
(
ag71xx
 *
ag
)

671 
Êags
;

673 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

675 
	`√tif_°›_queue
(
ag
->
dev
);

677 
	`ag71xx_hw_°›
(
ag
);

678 
	`ag71xx_dma_ª£t
(
ag
);

680 
	`«pi_dißbÀ
(&
ag
->
«pi
);

681 
	`dñ_timî_sync
(&
ag
->
oom_timî
);

683 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

685 
	`ag71xx_rögs_˛ónup
(
ag
);

686 
	}
}

688 
	$ag71xx_›í
(
√t_devi˚
 *
dev
)

690 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

691 
max_‰ame_Àn
;

692 
ªt
;

694 
	`√tif_ˇºõr_off
(
dev
);

695 
max_‰ame_Àn
 = 
	`ag71xx_max_‰ame_Àn
(
dev
->
mtu
);

696 
ag
->
rx_buf_size
 = 
	`SKB_DATA_ALIGN
(
max_‰ame_Àn
 + 
NET_SKB_PAD
 + 
NET_IP_ALIGN
);

699 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
, 
max_‰ame_Àn
);

700 
	`ag71xx_hw_£t_maˇddr
(
ag
, 
dev
->
dev_addr
);

702 
ªt
 = 
	`ag71xx_hw_íabÀ
(
ag
);

703 i‡(
ªt
)

704 
îr
;

706 
	`ag71xx_phy_°¨t
(
ag
);

710 
îr
:

711 
	`ag71xx_rögs_˛ónup
(
ag
);

712  
ªt
;

713 
	}
}

715 
	$ag71xx_°›
(
√t_devi˚
 *
dev
)

717 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

719 
	`√tif_ˇºõr_off
(
dev
);

720 
	`ag71xx_phy_°›
(
ag
);

721 
	`ag71xx_hw_dißbÀ
(
ag
);

724 
	}
}

726 
	$ag71xx_fûl_dma_desc
(
ag71xx_rög
 *
rög
, 
u32
 
addr
, 
Àn
)

728 
i
;

729 
ag71xx_desc
 *
desc
;

730 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

731 
ndesc
 = 0;

732 
•lô
 = 
rög
->
desc_•lô
;

734 i‡(!
•lô
)

735 
•lô
 = 
Àn
;

737 
Àn
 > 0) {

738 
cur_Àn
 = 
Àn
;

740 
i
 = (
rög
->
cuº
 + 
ndesc
Ë& 
rög_mask
;

741 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

743 i‡(!
	`ag71xx_desc_em±y
(
desc
))

746 i‡(
cur_Àn
 > 
•lô
) {

747 
cur_Àn
 = 
•lô
;

753 i‡(
Àn
 <
•lô
 + 4)

754 
cur_Àn
 -= 4;

757 
desc
->
d©a
 = 
addr
;

758 
addr
 +
cur_Àn
;

759 
Àn
 -
cur_Àn
;

761 i‡(
Àn
 > 0)

762 
cur_Àn
 |
DESC_MORE
;

765 i‡(!
ndesc
)

766 
cur_Àn
 |
DESC_EMPTY
;

768 
desc
->
˘æ
 = 
cur_Àn
;

769 
ndesc
++;

772  
ndesc
;

773 
	}
}

775 
√tdev_tx_t
 
	$ag71xx_h¨d_°¨t_xmô
(
sk_buff
 *
skb
,

776 
√t_devi˚
 *
dev
)

778 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

779 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

780 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

781 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

782 
ag71xx_desc
 *
desc
;

783 
dma_addr_t
 
dma_addr
;

784 
i
, 
n
, 
rög_mö
;

786 i‡(
	`ag71xx_has_¨8216
(
ag
))

787 
	`ag71xx_add_¨8216_hódî
(
ag
, 
skb
);

789 i‡(
skb
->
Àn
 <= 4) {

790 
	`DBG
("%s:ÖackëÜí i†toÿsmÆl\n", 
ag
->
dev
->
«me
);

791 
îr_dr›
;

794 
dma_addr
 = 
	`dma_m≠_sögÀ
(&
dev
->dev, 
skb
->
d©a
, skb->
Àn
,

795 
DMA_TO_DEVICE
);

797 
i
 = 
rög
->
cuº
 & 
rög_mask
;

798 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

801 
n
 = 
	`ag71xx_fûl_dma_desc
(
rög
, (
u32
Ë
dma_addr
, 
skb
->
Àn
 & 
ag
->
desc_pkéí_mask
);

802 i‡(
n
 < 0)

803 
îr_dr›_unm≠
;

805 
i
 = (
rög
->
cuº
 + 
n
 - 1Ë& 
rög_mask
;

806 
rög
->
buf
[
i
].
Àn
 = 
skb
->len;

807 
rög
->
buf
[
i
].
skb
 = skb;

809 
	`√tdev_£¡_queue
(
dev
, 
skb
->
Àn
);

811 
	`skb_tx_time°amp
(
skb
);

813 
desc
->
˘æ
 &~
DESC_EMPTY
;

814 
rög
->
cuº
 +
n
;

817 
	`wmb
();

819 
rög_mö
 = 2;

820 i‡(
rög
->
desc_•lô
)

821 
rög_mö
 *
AG71XX_TX_RING_DS_PER_PKT
;

823 i‡(
rög
->
cuº
 -Ñög->
dúty
 >
rög_size
 - 
rög_mö
) {

824 
	`DBG
("%s:Åx queuêfuŒ\n", 
dev
->
«me
);

825 
	`√tif_°›_queue
(
dev
);

828 
	`DBG
("%s:Öackë inje˘ed i¡ÿTX queue\n", 
ag
->
dev
->
«me
);

831 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 
TX_CTRL_TXE
);

833  
NETDEV_TX_OK
;

835 
îr_dr›_unm≠
:

836 
	`dma_unm≠_sögÀ
(&
dev
->dev, 
dma_addr
, 
skb
->
Àn
, 
DMA_TO_DEVICE
);

838 
îr_dr›
:

839 
dev
->
°©s
.
tx_dr›≥d
++;

841 
	`dev_k‰ì_skb
(
skb
);

842  
NETDEV_TX_OK
;

843 
	}
}

845 
	$ag71xx_do_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
i‰
, 
cmd
)

847 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

848 
ªt
;

850 
cmd
) {

851 
SIOCETHTOOL
:

852 i‡(
ag
->
phy_dev
 =
NULL
)

855 
	`•ö_lock_úq
(&
ag
->
lock
);

856 
ªt
 = 
	`phy_ëhtoﬁ_io˘l
(
ag
->
phy_dev
, (*Ë
i‰
->
i‰_d©a
);

857 
	`•ö_u∆ock_úq
(&
ag
->
lock
);

858  
ªt
;

860 
SIOCSIFHWADDR
:

861 i‡(
c›y_‰om_u£r


862 (
dev
->
dev_addr
, 
i‰
->
i‰_d©a
, (dev->dev_addr)))

863  -
EFAULT
;

866 
SIOCGIFHWADDR
:

867 i‡(
c›y_to_u£r


868 (
i‰
->
i‰_d©a
, 
dev
->
dev_addr
, (dev->dev_addr)))

869  -
EFAULT
;

872 
SIOCGMIIPHY
:

873 
SIOCGMIIREG
:

874 
SIOCSMIIREG
:

875 i‡(
ag
->
phy_dev
 =
NULL
)

878  
	`phy_mii_io˘l
(
ag
->
phy_dev
, 
i‰
, 
cmd
);

884  -
EOPNOTSUPP
;

885 
	}
}

887 
	$ag71xx_oom_timî_h™dÀr
(
d©a
)

889 
√t_devi˚
 *
dev
 = (√t_devi˚ *Ë
d©a
;

890 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

892 
	`«pi_scheduÀ
(&
ag
->
«pi
);

893 
	}
}

895 
	$ag71xx_tx_timeout
(
√t_devi˚
 *
dev
)

897 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

899 i‡(
	`√tif_msg_tx_îr
(
ag
))

900 
	`¥_öfo
("%s:ÅxÅimeout\n", 
ag
->
dev
->
«me
);

902 
	`scheduÀ_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
, 1);

903 
	}
}

905 
	$ag71xx_bô_£t
(
__iomem
 *
ªg
, 
u32
 
bô
)

907 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ªg
Ë| 
bô
;

908 
	`__øw_wrôñ
(
vÆ
, 
ªg
);

909 
	`__øw_ªadl
(
ªg
);

910 
	}
}

912 
	$ag71xx_bô_˛ór
(
__iomem
 *
ªg
, 
u32
 
bô
)

914 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ªg
Ë& ~
bô
;

915 
	`__øw_wrôñ
(
vÆ
, 
ªg
);

916 
	`__øw_ªadl
(
ªg
);

917 
	}
}

919 
	$ag71xx_qˇ955x_sgmii_öô
()

921 
__iomem
 *
gmac_ba£
;

922 
u32
 
mr_™_°©us
, 
sgmii_°©us
;

923 
u8
 
åõs
 = 0;

925 
gmac_ba£
 = 
	`i‹em≠_noˇche
(
QCA955X_GMAC_BASE
, 
QCA955X_GMAC_SIZE
);

927 i‡(!
gmac_ba£
)

928 
sgmii_out
;

930 
mr_™_°©us
 = 
	`__øw_ªadl
(
gmac_ba£
 + 
QCA955X_GMAC_REG_MR_AN_STATUS
);

931 i‡(!(
mr_™_°©us
 & 
QCA955X_MR_AN_STATUS_AN_ABILITY
))

932 
sgmii_out
;

934 
	`__øw_wrôñ
(
QCA955X_SGMII_RESET_RX_CLK_N_RESET
 ,

935 
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
);

936 
	`__øw_ªadl
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
);

937 
	`udñay
(10);

940 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
,

941 
QCA955X_SGMII_RESET_HW_RX_125M_N
);

942 
	`udñay
(10);

944 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
,

945 
QCA955X_SGMII_RESET_RX_125M_N
);

946 
	`udñay
(10);

948 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
,

949 
QCA955X_SGMII_RESET_TX_125M_N
);

950 
	`udñay
(10);

952 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
,

953 
QCA955X_SGMII_RESET_RX_CLK_N
);

954 
	`udñay
(10);

956 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_RESET
,

957 
QCA955X_SGMII_RESET_TX_CLK_N
);

958 
	`udñay
(10);

961 
	`ag71xx_bô_£t
(
gmac_ba£
 + 
QCA955X_GMAC_REG_MR_AN_CONTROL
,

962 
QCA955X_MR_AN_CONTROL_PHY_RESET
 |

963 
QCA955X_MR_AN_CONTROL_AN_ENABLE
);

964 
	`udñay
(100);

965 
	`ag71xx_bô_˛ór
(
gmac_ba£
 + 
QCA955X_GMAC_REG_MR_AN_CONTROL
,

966 
QCA955X_MR_AN_CONTROL_PHY_RESET
);

967 
	`mdñay
(10);

968 
sgmii_°©us
 = 
	`__øw_ªadl
(
gmac_ba£
 + 
QCA955X_GMAC_REG_SGMII_DEBUG
) & 0xF;

970 i‡(
åõs
++ >
QCA955X_SGMII_LINK_WAR_MAX_TRY
) {

971 
	`¥_w¨n
("ag71xx: maxÑetries for SGMII fixupÉxceeded!\n");

974 } !(
sgmii_°©us
 == 0xf || sgmii_status == 0x10));

976 
sgmii_out
:

977 
	`iounm≠
(
gmac_ba£
);

978 
	}
}

980 
	$ag71xx_ª°¨t_w‹k_func
(
w‹k_°ru˘
 *
w‹k
)

982 
ag71xx
 *
ag
 = 
	`c⁄èöî_of
(
w‹k
, ag71xx, 
ª°¨t_w‹k
.work);

984 
	`π∆_lock
();

985 
	`ag71xx_hw_dißbÀ
(
ag
);

986 
	`ag71xx_hw_íabÀ
(
ag
);

987 i‡(
ag
->
lök
)

988 
	`__ag71xx_lök_adju°
(
ag
, 
Ál£
);

989 
	`π∆_u∆ock
();

990 
	}
}

992 
boﬁ
 
	$ag71xx_check_dma_°uck
(
ag71xx
 *
ag
)

994 
time°amp
;

995 
u32
 
rx_sm
, 
tx_sm
, 
rx_fd
;

997 
time°amp
 = 
	`√tdev_gë_tx_queue
(
ag
->
dev
, 0)->
å™s_°¨t
;

998 i‡(
	`likñy
(
	`time_bef‹e
(
jiffõs
, 
time°amp
 + 
HZ
/10)))

999  
Ál£
;

1001 i‡(!
	`√tif_ˇºõr_ok
(
ag
->
dev
))

1002  
Ál£
;

1004 
rx_sm
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_SM
);

1005 i‡((
rx_sm
 & 0x7) == 0x3 && ((rx_sm >> 4) & 0x7) == 0x6)

1006  
åue
;

1008 
tx_sm
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_SM
);

1009 
rx_fd
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_DEPTH
);

1010 i‡(((
tx_sm
 >> 4Ë& 0x7Ë=0 && ((
rx_sm
 & 0x7) == 0) &&

1011 ((
rx_sm
 >> 4Ë& 0x7Ë=0 && 
rx_fd
 == 0)

1012  
åue
;

1014  
Ál£
;

1015 
	}
}

1017 
	$ag71xx_tx_∑ckës
(
ag71xx
 *
ag
, 
boﬁ
 
Êush
)

1019 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

1020 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

1021 
boﬁ
 
dma_°uck
 = 
Ál£
;

1022 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

1023 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

1024 
£¡
 = 0;

1025 
byãs_com∂
 = 0;

1026 
n
 = 0;

1028 
	`DBG
("%s:Öro˚ssög TXÑög\n", 
ag
->
dev
->
«me
);

1030 
rög
->
dúty
 + 
n
 !rög->
cuº
) {

1031 
i
 = (
rög
->
dúty
 + 
n
Ë& 
rög_mask
;

1032 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

1033 
sk_buff
 *
skb
 = 
rög
->
buf
[
i
].skb;

1035 i‡(!
Êush
 && !
	`ag71xx_desc_em±y
(
desc
)) {

1036 i‡(
pd©a
->
is_¨724x
 &&

1037 
	`ag71xx_check_dma_°uck
(
ag
)) {

1038 
	`scheduÀ_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
, 
HZ
 / 2);

1039 
dma_°uck
 = 
åue
;

1044 i‡(
Êush
)

1045 
desc
->
˘æ
 |
DESC_EMPTY
;

1047 
n
++;

1048 i‡(!
skb
)

1051 
	`dev_k‰ì_skb_™y
(
skb
);

1052 
rög
->
buf
[
i
].
skb
 = 
NULL
;

1054 
byãs_com∂
 +
rög
->
buf
[
i
].
Àn
;

1056 
£¡
++;

1057 
rög
->
dúty
 +
n
;

1059 
n
 > 0) {

1060 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_PS
);

1061 
n
--;

1065 
	`DBG
("%s: %dÖackë†£¡ out\n", 
ag
->
dev
->
«me
, 
£¡
);

1067 i‡(!
£¡
)

1070 
ag
->
dev
->
°©s
.
tx_byãs
 +
byãs_com∂
;

1071 
ag
->
dev
->
°©s
.
tx_∑ckës
 +
£¡
;

1073 
	`√tdev_com∂ëed_queue
(
ag
->
dev
, 
£¡
, 
byãs_com∂
);

1074 i‡((
rög
->
cuº
 -Ñög->
dúty
Ë< (
rög_size
 * 3) / 4)

1075 
	`√tif_wake_queue
(
ag
->
dev
);

1077 i‡(!
dma_°uck
)

1078 
	`ˇn˚l_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
);

1080  
£¡
;

1081 
	}
}

1083 
	$ag71xx_rx_∑ckës
(
ag71xx
 *
ag
, 
limô
)

1085 
√t_devi˚
 *
dev
 = 
ag
->dev;

1086 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

1087 
off£t
 = 
	`ag71xx_buf„r_off£t
(
ag
);

1088 
pkéí_mask
 = 
ag
->
desc_pkéí_mask
;

1089 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

1090 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

1091 
sk_buff_hód
 
queue
;

1092 
sk_buff
 *
skb
;

1093 
d⁄e
 = 0;

1095 
	`DBG
("%s:ÑxÖackets,Üimit=%d, curr=%u, dirty=%u\n",

1096 
dev
->
«me
, 
limô
, 
rög
->
cuº
,Ñög->
dúty
);

1098 
	`skb_queue_hód_öô
(&
queue
);

1100 
d⁄e
 < 
limô
) {

1101 
i
 = 
rög
->
cuº
 & 
rög_mask
;

1102 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

1103 
pkéí
;

1104 
îr
 = 0;

1106 i‡(
	`ag71xx_desc_em±y
(
desc
))

1109 i‡((
rög
->
dúty
 + 
rög_size
Ë=rög->
cuº
) {

1110 
	`ag71xx_as£π
(0);

1114 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_PR
);

1116 
pkéí
 = 
desc
->
˘æ
 & 
pkéí_mask
;

1117 
pkéí
 -
ETH_FCS_LEN
;

1119 
	`dma_unm≠_sögÀ
(&
dev
->dev, 
rög
->
buf
[
i
].
dma_addr
,

1120 
ag
->
rx_buf_size
, 
DMA_FROM_DEVICE
);

1122 
dev
->
°©s
.
rx_∑ckës
++;

1123 
dev
->
°©s
.
rx_byãs
 +
pkéí
;

1125 
skb
 = 
	`buûd_skb
(
rög
->
buf
[
i
].
rx_buf
, 
	`ag71xx_buf„r_size
(
ag
));

1126 i‡(!
skb
) {

1127 
	`skb_‰ì_‰ag
(
rög
->
buf
[
i
].
rx_buf
);

1128 
√xt
;

1131 
	`skb_ª£rve
(
skb
, 
off£t
);

1132 
	`skb_put
(
skb
, 
pkéí
);

1134 i‡(
	`ag71xx_has_¨8216
(
ag
))

1135 
îr
 = 
	`ag71xx_ªmove_¨8216_hódî
(
ag
, 
skb
, 
pkéí
);

1137 i‡(
îr
) {

1138 
dev
->
°©s
.
rx_dr›≥d
++;

1139 
	`k‰ì_skb
(
skb
);

1141 
skb
->
dev
 = dev;

1142 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

1143 
	`__skb_queue_èû
(&
queue
, 
skb
);

1146 
√xt
:

1147 
rög
->
buf
[
i
].
rx_buf
 = 
NULL
;

1148 
d⁄e
++;

1150 
rög
->
cuº
++;

1153 
	`ag71xx_rög_rx_ªfûl
(
ag
);

1155 (
skb
 = 
	`__skb_dequeue
(&
queue
)Ë!
NULL
) {

1156 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1157 
	`√tif_ª˚ive_skb
(
skb
);

1160 
	`DBG
("%s:Ñx finish, curr=%u, dirty=%u, done=%d\n",

1161 
dev
->
«me
, 
rög
->
cuº
,Ñög->
dúty
, 
d⁄e
);

1163  
d⁄e
;

1164 
	}
}

1166 
	$ag71xx_pﬁl
(
«pi_°ru˘
 *
«pi
, 
limô
)

1168 
ag71xx
 *
ag
 = 
	`c⁄èöî_of
(
«pi
, ag71xx,Çapi);

1169 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

1170 
√t_devi˚
 *
dev
 = 
ag
->dev;

1171 
ag71xx_rög
 *
rx_rög
 = &
ag
->rx_ring;

1172 
rx_rög_size
 = 
	`BIT
(
rx_rög
->
‹dî
);

1173 
Êags
;

1174 
u32
 
°©us
;

1175 
tx_d⁄e
;

1176 
rx_d⁄e
;

1178 
pd©a
->
	`ddr_Êush
();

1179 
tx_d⁄e
 = 
	`ag71xx_tx_∑ckës
(
ag
, 
Ál£
);

1181 
	`DBG
("%s:Öro˚ssög RXÑög\n", 
dev
->
«me
);

1182 
rx_d⁄e
 = 
	`ag71xx_rx_∑ckës
(
ag
, 
limô
);

1184 
	`ag71xx_debugfs_upd©e_«pi_°©s
(
ag
, 
rx_d⁄e
, 
tx_d⁄e
);

1186 i‡(
rx_rög
->
buf
[rx_rög->
dúty
 % 
rx_rög_size
].
rx_buf
 =
NULL
)

1187 
oom
;

1189 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
);

1190 i‡(
	`u∆ikñy
(
°©us
 & 
RX_STATUS_OF
)) {

1191 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_OF
);

1192 
dev
->
°©s
.
rx_fifo_îr‹s
++;

1195 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 
RX_CTRL_RXE
);

1198 i‡(
rx_d⁄e
 < 
limô
) {

1199 i‡(
°©us
 & 
RX_STATUS_PR
)

1200 
m‹e
;

1202 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
);

1203 i‡(
°©us
 & 
TX_STATUS_PS
)

1204 
m‹e
;

1206 
	`DBG
("%s: disableÖolling mode,Ñx=%d,Åx=%d,limit=%d\n",

1207 
dev
->
«me
, 
rx_d⁄e
, 
tx_d⁄e
, 
limô
);

1209 
	`«pi_com∂ëe
(
«pi
);

1212 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

1213 
	`ag71xx_öt_íabÀ
(
ag
, 
AG71XX_INT_POLL
);

1214 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

1215  
rx_d⁄e
;

1218 
m‹e
:

1219 
	`DBG
("%s: stay inÖolling mode,Ñx=%d,Åx=%d,Üimit=%d\n",

1220 
dev
->
«me
, 
rx_d⁄e
, 
tx_d⁄e
, 
limô
);

1221  
limô
;

1223 
oom
:

1224 i‡(
	`√tif_msg_rx_îr
(
ag
))

1225 
	`¥_öfo
("%s: ouào‡mem‹y\n", 
dev
->
«me
);

1227 
	`mod_timî
(&
ag
->
oom_timî
, 
jiffõs
 + 
AG71XX_OOM_REFILL
);

1228 
	`«pi_com∂ëe
(
«pi
);

1230 
	}
}

1232 
úqªtu∫_t
 
	$ag71xx_öãºu±
(
úq
, *
dev_id
)

1234 
√t_devi˚
 *
dev
 = 
dev_id
;

1235 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

1236 
u32
 
°©us
;

1238 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_INT_STATUS
);

1239 
	`ag71xx_dump_öå
(
ag
, "øw", 
°©us
);

1241 i‡(
	`u∆ikñy
(!
°©us
))

1242  
IRQ_NONE
;

1244 i‡(
	`u∆ikñy
(
°©us
 & 
AG71XX_INT_ERR
)) {

1245 i‡(
°©us
 & 
AG71XX_INT_TX_BE
) {

1246 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_BE
);

1247 
	`dev_îr
(&
dev
->dev, "TX BUSÉrror\n");

1249 i‡(
°©us
 & 
AG71XX_INT_RX_BE
) {

1250 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_BE
);

1251 
	`dev_îr
(&
dev
->dev, "RX BUSÉrror\n");

1255 i‡(
	`likñy
(
°©us
 & 
AG71XX_INT_POLL
)) {

1256 
	`ag71xx_öt_dißbÀ
(
ag
, 
AG71XX_INT_POLL
);

1257 
	`DBG
("%s:É«bÀÖﬁlög mode\n", 
dev
->
«me
);

1258 
	`«pi_scheduÀ
(&
ag
->
«pi
);

1261 
	`ag71xx_debugfs_upd©e_öt_°©s
(
ag
, 
°©us
);

1263  
IRQ_HANDLED
;

1264 
	}
}

1266 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1272 
	$ag71xx_√çﬁl
(
√t_devi˚
 *
dev
)

1274 
	`dißbÀ_úq
(
dev
->
úq
);

1275 
	`ag71xx_öãºu±
(
dev
->
úq
, dev);

1276 
	`íabÀ_úq
(
dev
->
úq
);

1277 
	}
}

1280 
	$ag71xx_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

1282 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

1283 
max_‰ame_Àn
;

1285 
max_‰ame_Àn
 = 
	`ag71xx_max_‰ame_Àn
(
√w_mtu
);

1286 i‡(
√w_mtu
 < 68 || 
max_‰ame_Àn
 > 
ag
->max_frame_len)

1287  -
EINVAL
;

1289 i‡(
	`√tif_ru¬ög
(
dev
))

1290  -
EBUSY
;

1292 
dev
->
mtu
 = 
√w_mtu
;

1294 
	}
}

1296 c⁄° 
√t_devi˚_›s
 
	gag71xx_√tdev_›s
 = {

1297 .
ndo_›í
 = 
ag71xx_›í
,

1298 .
	gndo_°›
 = 
ag71xx_°›
,

1299 .
	gndo_°¨t_xmô
 = 
ag71xx_h¨d_°¨t_xmô
,

1300 .
	gndo_do_io˘l
 = 
ag71xx_do_io˘l
,

1301 .
	gndo_tx_timeout
 = 
ag71xx_tx_timeout
,

1302 .
	gndo_ch™ge_mtu
 = 
ag71xx_ch™ge_mtu
,

1303 .
	gndo_£t_mac_addªss
 = 
ëh_mac_addr
,

1304 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1305 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1306 .
	gndo_pﬁl_c⁄åﬁÀr
 = 
ag71xx_√çﬁl
,

1310 c⁄° *
	$ag71xx_gë_phy_if_mode_«me
(
phy_öãrÁ˚_t
 
mode
)

1312 
mode
) {

1313 
PHY_INTERFACE_MODE_MII
:

1315 
PHY_INTERFACE_MODE_GMII
:

1317 
PHY_INTERFACE_MODE_RMII
:

1319 
PHY_INTERFACE_MODE_RGMII
:

1321 
PHY_INTERFACE_MODE_SGMII
:

1328 
	}
}

1331 
	$ag71xx_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1333 
√t_devi˚
 *
dev
;

1334 
ªsour˚
 *
ªs
;

1335 
ag71xx
 *
ag
;

1336 
ag71xx_∂©f‹m_d©a
 *
pd©a
;

1337 
tx_size
, 
îr
;

1339 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

1340 i‡(!
pd©a
) {

1341 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data specified\n");

1342 
îr
 = -
ENXIO
;

1343 
îr_out
;

1346 i‡(
pd©a
->
mii_bus_dev
 =
NULL
 &&Öd©a->
phy_mask
) {

1347 
	`dev_îr
(&
pdev
->
dev
, "no MII bus device specified\n");

1348 
îr
 = -
EINVAL
;

1349 
îr_out
;

1352 
dev
 = 
	`Æloc_ëhîdev
((*
ag
));

1353 i‡(!
dev
) {

1354 
	`dev_îr
(&
pdev
->
dev
, "alloc_etherdev failed\n");

1355 
îr
 = -
ENOMEM
;

1356 
îr_out
;

1359 i‡(!
pd©a
->
max_‰ame_Àn
 || !pd©a->
desc_pkéí_mask
)

1360  -
EINVAL
;

1362 
	`SET_NETDEV_DEV
(
dev
, &
pdev
->dev);

1364 
ag
 = 
	`√tdev_¥iv
(
dev
);

1365 
ag
->
pdev
 =Ödev;

1366 
ag
->
dev
 = dev;

1367 
ag
->
msg_íabÀ
 = 
	`√tif_msg_öô
(
ag71xx_msg_Àvñ
,

1368 
AG71XX_DEFAULT_MSG_ENABLE
);

1369 
	`•ö_lock_öô
(&
ag
->
lock
);

1371 
ªs
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_MEM
, "mac_base");

1372 i‡(!
ªs
) {

1373 
	`dev_îr
(&
pdev
->
dev
, "no mac_baseÑesource found\n");

1374 
îr
 = -
ENXIO
;

1375 
îr_out
;

1378 
ag
->
mac_ba£
 = 
	`i‹em≠_noˇche
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1);

1379 i‡(!
ag
->
mac_ba£
) {

1380 
	`dev_îr
(&
pdev
->
dev
, "unableÅo ioremap mac_base\n");

1381 
îr
 = -
ENOMEM
;

1382 
îr_‰ì_dev
;

1385 
dev
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

1386 
îr
 = 
	`ªque°_úq
(
dev
->
úq
, 
ag71xx_öãºu±
,

1388 
dev
->
«me
, dev);

1389 i‡(
îr
) {

1390 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿªque° IRQ %d\n", dev->
úq
);

1391 
îr_unm≠_ba£
;

1394 
dev
->
ba£_addr
 = ()
ag
->
mac_ba£
;

1395 
dev
->
√tdev_›s
 = &
ag71xx_√tdev_›s
;

1396 
dev
->
ëhtoﬁ_›s
 = &
ag71xx_ëhtoﬁ_›s
;

1398 
	`INIT_DELAYED_WORK
(&
ag
->
ª°¨t_w‹k
, 
ag71xx_ª°¨t_w‹k_func
);

1400 
	`öô_timî
(&
ag
->
oom_timî
);

1401 
ag
->
oom_timî
.
d©a
 = (Ë
dev
;

1402 
ag
->
oom_timî
.
fun˘i⁄
 = 
ag71xx_oom_timî_h™dÀr
;

1404 
tx_size
 = 
AG71XX_TX_RING_SIZE_DEFAULT
;

1405 
ag
->
rx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
AG71XX_RX_RING_SIZE_DEFAULT
);

1407 
ag
->
max_‰ame_Àn
 = 
pd©a
->max_frame_len;

1408 
ag
->
desc_pkéí_mask
 = 
pd©a
->desc_pktlen_mask;

1410 i‡(!
pd©a
->
is_¨724x
 && !pd©a->
is_¨91xx
) {

1411 
ag
->
tx_rög
.
desc_•lô
 = 
AG71XX_TX_RING_SPLIT
;

1412 
tx_size
 *
AG71XX_TX_RING_DS_PER_PKT
;

1414 
ag
->
tx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
tx_size
);

1416 
ag
->
°›_desc
 = 
	`dma_Æloc_cohîít
(
NULL
,

1417 (
ag71xx_desc
), &
ag
->
°›_desc_dma
, 
GFP_KERNEL
);

1419 i‡(!
ag
->
°›_desc
)

1420 
îr_‰ì_úq
;

1422 
ag
->
°›_desc
->
d©a
 = 0;

1423 
ag
->
°›_desc
->
˘æ
 = 0;

1424 
ag
->
°›_desc
->
√xt
 = (
u32
Ëag->
°›_desc_dma
;

1426 
	`mem˝y
(
dev
->
dev_addr
, 
pd©a
->
mac_addr
, 
ETH_ALEN
);

1428 
	`√tif_«pi_add
(
dev
, &
ag
->
«pi
, 
ag71xx_pﬁl
, 
AG71XX_NAPI_WEIGHT
);

1430 
	`ag71xx_dump_ªgs
(
ag
);

1432 
	`ag71xx_hw_öô
(
ag
);

1434 
	`ag71xx_dump_ªgs
(
ag
);

1436 
îr
 = 
	`ag71xx_phy_c⁄√˘
(
ag
);

1437 i‡(
îr
)

1438 
îr_‰ì_desc
;

1440 
îr
 = 
	`ag71xx_debugfs_öô
(
ag
);

1441 i‡(
îr
)

1442 
îr_phy_disc⁄√˘
;

1444 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

1446 
îr
 = 
	`ªgi°î_√tdev
(
dev
);

1447 i‡(
îr
) {

1448 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑegisterÇet device\n");

1449 
îr_debugfs_exô
;

1452 
	`¥_öfo
("%s: Atheros AG71xxát 0x%08lx, irq %d, mode:%s\n",

1453 
dev
->
«me
, dev->
ba£_addr
, dev->
úq
,

1454 
	`ag71xx_gë_phy_if_mode_«me
(
pd©a
->
phy_if_mode
));

1458 
îr_debugfs_exô
:

1459 
	`ag71xx_debugfs_exô
(
ag
);

1460 
îr_phy_disc⁄√˘
:

1461 
	`ag71xx_phy_disc⁄√˘
(
ag
);

1462 
îr_‰ì_desc
:

1463 
	`dma_‰ì_cohîít
(
NULL
, (
ag71xx_desc
), 
ag
->
°›_desc
,

1464 
ag
->
°›_desc_dma
);

1465 
îr_‰ì_úq
:

1466 
	`‰ì_úq
(
dev
->
úq
, dev);

1467 
îr_unm≠_ba£
:

1468 
	`iounm≠
(
ag
->
mac_ba£
);

1469 
îr_‰ì_dev
:

1470 
	`k‰ì
(
dev
);

1471 
îr_out
:

1472 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1473  
îr
;

1474 
	}
}

1476 
	$ag71xx_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1478 
√t_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1480 i‡(
dev
) {

1481 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

1483 
	`ag71xx_debugfs_exô
(
ag
);

1484 
	`ag71xx_phy_disc⁄√˘
(
ag
);

1485 
	`uƒegi°î_√tdev
(
dev
);

1486 
	`‰ì_úq
(
dev
->
úq
, dev);

1487 
	`iounm≠
(
ag
->
mac_ba£
);

1488 
	`k‰ì
(
dev
);

1489 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1493 
	}
}

1495 
∂©f‹m_drivî
 
	gag71xx_drivî
 = {

1496 .
¥obe
 = 
ag71xx_¥obe
,

1497 .
	gªmove
 = 
ag71xx_ªmove
,

1498 .
	gdrivî
 = {

1499 .
«me
 = 
AG71XX_DRV_NAME
,

1503 
__öô
 
	$ag71xx_moduÀ_öô
()

1505 
ªt
;

1507 
ªt
 = 
	`ag71xx_debugfs_roŸ_öô
();

1508 i‡(
ªt
)

1509 
îr_out
;

1511 
ªt
 = 
	`ag71xx_mdio_drivî_öô
();

1512 i‡(
ªt
)

1513 
îr_debugfs_exô
;

1515 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
ag71xx_drivî
);

1516 i‡(
ªt
)

1517 
îr_mdio_exô
;

1521 
îr_mdio_exô
:

1522 
	`ag71xx_mdio_drivî_exô
();

1523 
îr_debugfs_exô
:

1524 
	`ag71xx_debugfs_roŸ_exô
();

1525 
îr_out
:

1526  
ªt
;

1527 
	}
}

1529 
__exô
 
	$ag71xx_moduÀ_exô
()

1531 
	`∂©f‹m_drivî_uƒegi°î
(&
ag71xx_drivî
);

1532 
	`ag71xx_mdio_drivî_exô
();

1533 
	`ag71xx_debugfs_roŸ_exô
();

1534 
	}
}

1536 
moduÀ_öô
(
ag71xx_moduÀ_öô
);

1537 
moduÀ_exô
(
ag71xx_moduÀ_exô
);

1539 
MODULE_VERSION
(
AG71XX_DRV_VERSION
);

1540 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1541 
MODULE_AUTHOR
("Imre Kaloz <kaloz@openwrt.org>");

1542 
MODULE_LICENSE
("GPL v2");

1543 
MODULE_ALIAS
("∂©f‹m:" 
AG71XX_DRV_NAME
);

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c

14 
	~"ag71xx.h
"

16 
	#AG71XX_MDIO_RETRY
 1000

	)

17 
	#AG71XX_MDIO_DELAY
 5

	)

19 
ölöe
 
	$ag71xx_mdio_wr
(
ag71xx_mdio
 *
am
, 
ªg
,

20 
u32
 
vÆue
)

22 
__iomem
 *
r
;

24 
r
 = 
am
->
mdio_ba£
 + 
ªg
;

25 
	`__øw_wrôñ
(
vÆue
, 
r
);

28 (Ë
	`__øw_ªadl
(
r
);

29 
	}
}

31 
ölöe
 
u32
 
	$ag71xx_mdio_º
(
ag71xx_mdio
 *
am
, 
ªg
)

33  
	`__øw_ªadl
(
am
->
mdio_ba£
 + 
ªg
);

34 
	}
}

36 
	$ag71xx_mdio_dump_ªgs
(
ag71xx_mdio
 *
am
)

38 
	`DBG
("%s: mii_cfg=%08x, mii_cmd=%08x, mii_addr=%08x\n",

39 
am
->
mii_bus
->
«me
,

40 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_CFG
),

41 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_CMD
),

42 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_ADDR
));

43 
	`DBG
("%s: mii_ctrl=%08x, mii_status=%08x, mii_ind=%08x\n",

44 
am
->
mii_bus
->
«me
,

45 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_CTRL
),

46 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_STATUS
),

47 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_IND
));

48 
	}
}

50 
	$ag71xx_mdio_waô_busy
(
ag71xx_mdio
 *
am
)

52 
i
;

54 
i
 = 0; i < 
AG71XX_MDIO_RETRY
; i++) {

55 
u32
 
busy
;

57 
	`udñay
(
AG71XX_MDIO_DELAY
);

59 
busy
 = 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_IND
);

60 i‡(!
busy
)

63 
	`udñay
(
AG71XX_MDIO_DELAY
);

66 
	`¥_îr
("%s: MDIO o≥øti⁄Åimed out\n", 
am
->
mii_bus
->
«me
);

68  -
ETIMEDOUT
;

69 
	}
}

71 
	$ag71xx_mdio_mii_ªad
(
ag71xx_mdio
 *
am
, 
addr
, 
ªg
)

73 
îr
;

74 
ªt
;

76 
îr
 = 
	`ag71xx_mdio_waô_busy
(
am
);

77 i‡(
îr
)

80 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_WRITE
);

81 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_ADDR
,

82 ((
addr
 & 0xffË<< 
MII_ADDR_SHIFT
Ë| (
ªg
 & 0xff));

83 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_READ
);

85 
îr
 = 
	`ag71xx_mdio_waô_busy
(
am
);

86 i‡(
îr
)

89 
ªt
 = 
	`ag71xx_mdio_º
(
am
, 
AG71XX_REG_MII_STATUS
) & 0xffff;

90 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_WRITE
);

92 
	`DBG
("mii_ªad:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
addr
, 
ªg
, 
ªt
);

94  
ªt
;

95 
	}
}

97 
	$ag71xx_mdio_mii_wrôe
(
ag71xx_mdio
 *
am
, 
addr
, 
ªg
, 
u16
 
vÆ
)

99 
	`DBG
("mii_wrôe:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
addr
, 
ªg
, 
vÆ
);

101 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_ADDR
,

102 ((
addr
 & 0xffË<< 
MII_ADDR_SHIFT
Ë| (
ªg
 & 0xff));

103 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CTRL
, 
vÆ
);

105 
	`ag71xx_mdio_waô_busy
(
am
);

106 
	}
}

108 c⁄° 
u32
 
	g¨71xx_mdio_div_èbÀ
[] = {

112 c⁄° 
u32
 
	g¨7240_mdio_div_èbÀ
[] = {

116 c⁄° 
u32
 
	g¨933x_mdio_div_èbÀ
[] = {

120 
	$ag71xx_mdio_gë_dividî
(
ag71xx_mdio
 *
am
, 
u32
 *
div
)

122 
ªf_˛ock
, 
mdio_˛ock
;

123 c⁄° 
u32
 *
èbÀ
;

124 
ndivs
;

125 
i
;

127 
ªf_˛ock
 = 
am
->
pd©a
->ref_clock;

128 
mdio_˛ock
 = 
am
->
pd©a
->mdio_clock;

130 i‡(!
ªf_˛ock
 || !
mdio_˛ock
)

131  -
EINVAL
;

133 i‡(
am
->
pd©a
->
is_¨9330
 ||ám->pd©a->
is_¨934x
) {

134 
èbÀ
 = 
¨933x_mdio_div_èbÀ
;

135 
ndivs
 = 
	`ARRAY_SIZE
(
¨933x_mdio_div_èbÀ
);

136 } i‡(
am
->
pd©a
->
is_¨7240
) {

137 
èbÀ
 = 
¨7240_mdio_div_èbÀ
;

138 
ndivs
 = 
	`ARRAY_SIZE
(
¨7240_mdio_div_èbÀ
);

140 
èbÀ
 = 
¨71xx_mdio_div_èbÀ
;

141 
ndivs
 = 
	`ARRAY_SIZE
(
¨71xx_mdio_div_èbÀ
);

144 
i
 = 0; i < 
ndivs
; i++) {

145 
t
;

147 
t
 = 
ªf_˛ock
 / 
èbÀ
[
i
];

148 i‡(
t
 <
mdio_˛ock
) {

149 *
div
 = 
i
;

154 
	`dev_îr
(&
am
->
mii_bus
->
dev
, "no divider found for %lu/%lu\n",

155 
ªf_˛ock
, 
mdio_˛ock
);

156  -
ENOENT
;

157 
	}
}

159 
	$ag71xx_mdio_ª£t
(
mii_bus
 *
bus
)

161 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

162 
u32
 
t
;

163 
îr
;

165 
îr
 = 
	`ag71xx_mdio_gë_dividî
(
am
, &
t
);

166 i‡(
îr
) {

168 i‡(
am
->
pd©a
->
is_¨7240
)

169 
t
 = 
MII_CFG_CLK_DIV_6
;

170 i‡(
am
->
pd©a
->
buûtö_swôch
 && !am->pd©a->
is_¨934x
)

171 
t
 = 
MII_CFG_CLK_DIV_10
;

172 i‡(!
am
->
pd©a
->
buûtö_swôch
 &&ám->pd©a->
is_¨934x
)

173 
t
 = 
MII_CFG_CLK_DIV_58
;

175 
t
 = 
MII_CFG_CLK_DIV_28
;

178 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CFG
, 
t
 | 
MII_CFG_RESET
);

179 
	`udñay
(100);

181 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MII_CFG
, 
t
);

182 
	`udñay
(100);

184 i‡(
am
->
pd©a
->
ª£t
)

185 
am
->
pd©a
->
	`ª£t
(
bus
);

188 
	}
}

190 
	$ag71xx_mdio_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

192 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

194 i‡(
am
->
pd©a
->
buûtö_swôch
)

195  
	`¨7240sw_phy_ªad
(
bus
, 
addr
, 
ªg
);

197  
	`ag71xx_mdio_mii_ªad
(
am
, 
addr
, 
ªg
);

198 
	}
}

200 
	$ag71xx_mdio_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

202 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

204 i‡(
am
->
pd©a
->
buûtö_swôch
)

205 
	`¨7240sw_phy_wrôe
(
bus
, 
addr
, 
ªg
, 
vÆ
);

207 
	`ag71xx_mdio_mii_wrôe
(
am
, 
addr
, 
ªg
, 
vÆ
);

209 
	}
}

211 
	$ag71xx_mdio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

213 
ag71xx_mdio_∂©f‹m_d©a
 *
pd©a
;

214 
ag71xx_mdio
 *
am
;

215 
ªsour˚
 *
ªs
;

216 
i
;

217 
îr
;

219 
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

220 i‡(!
pd©a
) {

221 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data specified\n");

222  -
EINVAL
;

225 
am
 = 
	`kzÆloc
((*am), 
GFP_KERNEL
);

226 i‡(!
am
) {

227 
îr
 = -
ENOMEM
;

228 
îr_out
;

231 
am
->
pd©a
 =Ödata;

233 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

234 i‡(!
ªs
) {

235 
	`dev_îr
(&
pdev
->
dev
, "no iomemÑesource found\n");

236 
îr
 = -
ENXIO
;

237 
îr_‰ì_mdio
;

240 
am
->
mdio_ba£
 = 
	`i‹em≠_noˇche
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1);

241 i‡(!
am
->
mdio_ba£
) {

242 
	`dev_îr
(&
pdev
->
dev
, "unableÅo ioremapÑegisters\n");

243 
îr
 = -
ENOMEM
;

244 
îr_‰ì_mdio
;

247 
am
->
mii_bus
 = 
	`mdiobus_Æloc
();

248 i‡(
am
->
mii_bus
 =
NULL
) {

249 
îr
 = -
ENOMEM
;

250 
îr_iounm≠
;

253 
am
->
mii_bus
->
«me
 = "ag71xx_mdio";

254 
am
->
mii_bus
->
ªad
 = 
ag71xx_mdio_ªad
;

255 
am
->
mii_bus
->
wrôe
 = 
ag71xx_mdio_wrôe
;

256 
am
->
mii_bus
->
ª£t
 = 
ag71xx_mdio_ª£t
;

257 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

258 
am
->
mii_bus
->
úq
 =ám->
mii_úq
;

260 
am
->
mii_bus
->
¥iv
 =ám;

261 
am
->
mii_bus
->
∑ª¡
 = &
pdev
->
dev
;

262 
	`¢¥ötf
(
am
->
mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s", 
	`dev_«me
(&
pdev
->
dev
));

263 
am
->
mii_bus
->
phy_mask
 = 
pd©a
->phy_mask;

265 
i
 = 0; i < 
PHY_MAX_ADDR
; i++)

266 
am
->
mii_bus
->
úq
[
i
] = 
PHY_POLL
;

268 
	`ag71xx_mdio_wr
(
am
, 
AG71XX_REG_MAC_CFG1
, 0);

270 
îr
 = 
	`mdiobus_ªgi°î
(
am
->
mii_bus
);

271 i‡(
îr
)

272 
îr_‰ì_bus
;

274 
	`ag71xx_mdio_dump_ªgs
(
am
);

276 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
am
);

279 
îr_‰ì_bus
:

280 
	`mdiobus_‰ì
(
am
->
mii_bus
);

281 
îr_iounm≠
:

282 
	`iounm≠
(
am
->
mdio_ba£
);

283 
îr_‰ì_mdio
:

284 
	`k‰ì
(
am
);

285 
îr_out
:

286  
îr
;

287 
	}
}

289 
	$ag71xx_mdio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

291 
ag71xx_mdio
 *
am
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

293 i‡(
am
) {

294 
	`mdiobus_uƒegi°î
(
am
->
mii_bus
);

295 
	`mdiobus_‰ì
(
am
->
mii_bus
);

296 
	`iounm≠
(
am
->
mdio_ba£
);

297 
	`k‰ì
(
am
);

298 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

302 
	}
}

304 
∂©f‹m_drivî
 
	gag71xx_mdio_drivî
 = {

305 .
¥obe
 = 
ag71xx_mdio_¥obe
,

306 .
	gªmove
 = 
ag71xx_mdio_ªmove
,

307 .
	gdrivî
 = {

308 .
«me
 = "ag71xx-mdio",

312 
__öô
 
	$ag71xx_mdio_drivî_öô
()

314  
	`∂©f‹m_drivî_ªgi°î
(&
ag71xx_mdio_drivî
);

315 
	}
}

317 
	$ag71xx_mdio_drivî_exô
()

319 
	`∂©f‹m_drivî_uƒegi°î
(&
ag71xx_mdio_drivî
);

320 
	}
}

	@linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c

14 
	~"ag71xx.h
"

16 
	$ag71xx_phy_lök_adju°
(
√t_devi˚
 *
dev
)

18 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

19 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

20 
Êags
;

21 
°©us_ch™ge
 = 0;

23 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

25 i‡(
phydev
->
lök
) {

26 i‡(
ag
->
du∂ex
 !
phydev
->duplex

27 || 
ag
->
•ìd
 !
phydev
->speed) {

28 
°©us_ch™ge
 = 1;

32 i‡(
phydev
->
lök
 !
ag
->link)

33 
°©us_ch™ge
 = 1;

35 
ag
->
lök
 = 
phydev
->link;

36 
ag
->
du∂ex
 = 
phydev
->duplex;

37 
ag
->
•ìd
 = 
phydev
->speed;

39 i‡(
°©us_ch™ge
)

40 
	`ag71xx_lök_adju°
(
ag
);

42 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

43 
	}
}

45 
	$ag71xx_phy_°¨t
(
ag71xx
 *
ag
)

47 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

49 i‡(
ag
->
phy_dev
) {

50 
	`phy_°¨t
(
ag
->
phy_dev
);

51 } i‡(
pd©a
->
mii_bus_dev
 &&Öd©a->
swôch_d©a
) {

52 
	`ag71xx_¨7240_°¨t
(
ag
);

54 
ag
->
lök
 = 1;

55 
	`ag71xx_lök_adju°
(
ag
);

57 
	}
}

59 
	$ag71xx_phy_°›
(
ag71xx
 *
ag
)

61 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

62 
Êags
;

64 i‡(
ag
->
phy_dev
)

65 
	`phy_°›
(
ag
->
phy_dev
);

66 i‡(
pd©a
->
mii_bus_dev
 &&Öd©a->
swôch_d©a
)

67 
	`ag71xx_¨7240_°›
(
ag
);

69 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

70 i‡(
ag
->
lök
) {

71 
ag
->
lök
 = 0;

72 
	`ag71xx_lök_adju°
(
ag
);

74 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

75 
	}
}

77 
	$ag71xx_phy_c⁄√˘_fixed
(
ag71xx
 *
ag
)

79 
devi˚
 *
dev
 = &
ag
->
pdev
->dev;

80 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

81 
ªt
 = 0;

84 
pd©a
->
•ìd
) {

85 
SPEED_10
:

86 
SPEED_100
:

87 
SPEED_1000
:

90 
	`dev_îr
(
dev
, "invalid speed specified\n");

91 
ªt
 = -
EINVAL
;

95 
	`dev_dbg
(
dev
, "using fixedÜinkÖarameters\n");

97 
ag
->
du∂ex
 = 
pd©a
->duplex;

98 
ag
->
•ìd
 = 
pd©a
->speed;

100  
ªt
;

101 
	}
}

103 
	$ag71xx_phy_c⁄√˘_mu…i
(
ag71xx
 *
ag
)

105 
devi˚
 *
dev
 = &
ag
->
pdev
->dev;

106 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

107 
phy_devi˚
 *
phydev
 = 
NULL
;

108 
phy_addr
;

109 
ªt
 = 0;

111 
phy_addr
 = 0;Öhy_add∏< 
PHY_MAX_ADDR
;Öhy_addr++) {

112 i‡(!(
pd©a
->
phy_mask
 & (1 << 
phy_addr
)))

115 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

116 i‡(
ag
->
mii_bus
->
phy_m≠
[
phy_addr
] =
NULL
)

119 
	`DBG
("%s: PHY foundát %s, uid=%08x\n",

120 
	`dev_«me
(
dev
),

121 
	`dev_«me
(&
ag
->
mii_bus
->
phy_m≠
[
phy_addr
]->
dev
),

122 
ag
->
mii_bus
->
phy_m≠
[
phy_addr
]->
phy_id
);

124 i‡(
phydev
 =
NULL
)

125 
phydev
 = 
ag
->
mii_bus
->
phy_m≠
[
phy_addr
];

127 i‡(
ag
->
mii_bus
->
mdio_m≠
[
phy_addr
] =
NULL
)

130 
	`DBG
("%s: PHY foundát %s, uid=%08x\n",

131 
	`dev_«me
(
dev
),

132 
	`dev_«me
(&
ag
->
mii_bus
->
mdio_m≠
[
phy_addr
]->
dev
),

133 
ag
->
mii_bus
->
mdio_m≠
[
phy_addr
]->
phy_id
);

135 i‡(
phydev
 =
NULL
)

136 
phydev
 = 
	`mdiobus_gë_phy
(
ag
->
mii_bus
, 
phy_addr
);

140 i‡(!
phydev
) {

141 
	`dev_îr
(
dev
, "no PHY found withÖhy_mask=%08x\n",

142 
pd©a
->
phy_mask
);

143  -
ENODEV
;

146 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

147 
ag
->
phy_dev
 = 
	`phy_c⁄√˘
◊g->
dev
, 
	`dev_«me
(&
phydev
->dev),

149 
ag
->
phy_dev
 = 
	`phy_c⁄√˘
◊g->
dev
, 
	`phydev_«me
(
phydev
),

151 &
ag71xx_phy_lök_adju°
,

152 
pd©a
->
phy_if_mode
);

154 i‡(
	`IS_ERR
(
ag
->
phy_dev
)) {

155 
	`dev_îr
(
dev
, "couldÇot connectÅo PHYát %s\n",

156 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

157 
	`dev_«me
(&
phydev
->
dev
));

159 
	`phydev_«me
(
phydev
));

161  
	`PTR_ERR
(
ag
->
phy_dev
);

165 i‡(
pd©a
->
has_gbô
)

166 
phydev
->
suµ‹ãd
 &
PHY_GBIT_FEATURES
;

168 
phydev
->
suµ‹ãd
 &
PHY_BASIC_FEATURES
;

170 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
;

172 
	`dev_öfo
(
dev
, "connectedÅo PHYát %s [uid=%08x, driver=%s]\n",

173 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

174 
	`dev_«me
(&
phydev
->
dev
),

176 
	`phydev_«me
(
phydev
),

178 
phydev
->
phy_id
,Öhydev->
drv
->
«me
);

180 
ag
->
lök
 = 0;

181 
ag
->
•ìd
 = 0;

182 
ag
->
du∂ex
 = -1;

184  
ªt
;

185 
	}
}

187 
	$dev_is_˛ass
(
devi˚
 *
dev
, *
˛ass
)

189 i‡(
dev
->
˛ass
 !
NULL
 && !
	`°rcmp
(dev->˛ass->
«me
, class))

193 
	}
}

195 
devi˚
 *
	$dev_föd_˛ass
(
devi˚
 *
∑ª¡
, *
˛ass
)

197 i‡(
	`dev_is_˛ass
(
∑ª¡
, 
˛ass
)) {

198 
	`gë_devi˚
(
∑ª¡
);

199  
∑ª¡
;

202  
	`devi˚_föd_chûd
(
∑ª¡
, 
˛ass
, 
dev_is_˛ass
);

203 
	}
}

205 
mii_bus
 *
	$dev_to_mii_bus
(
devi˚
 *
dev
)

207 
devi˚
 *
d
;

209 
d
 = 
	`dev_föd_˛ass
(
dev
, "mdio_bus");

210 i‡(
d
 !
NULL
) {

211 
mii_bus
 *
bus
;

213 
bus
 = 
	`to_mii_bus
(
d
);

214 
	`put_devi˚
(
d
);

216  
bus
;

219  
NULL
;

220 
	}
}

222 
	$ag71xx_phy_c⁄√˘
(
ag71xx
 *
ag
)

224 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

226 i‡(
pd©a
->
mii_bus_dev
 =
NULL
 ||

227 
pd©a
->
mii_bus_dev
->
bus
 =
NULL
 )

228  
	`ag71xx_phy_c⁄√˘_fixed
(
ag
);

230 
ag
->
mii_bus
 = 
	`dev_to_mii_bus
(
pd©a
->
mii_bus_dev
);

231 i‡(
ag
->
mii_bus
 =
NULL
) {

232 
	`dev_îr
(&
ag
->
pdev
->
dev
, "unableÅo find MII bus on device '%s'\n",

233 
	`dev_«me
(
pd©a
->
mii_bus_dev
));

234  -
ENODEV
;

238 i‡(
ag
->
mii_bus
->
ª£t
) {

239 
	`muãx_lock
(&
ag
->
mii_bus
->
mdio_lock
);

240 
ag
->
mii_bus
->
	`ª£t
(ag->mii_bus);

241 
	`muãx_u∆ock
(&
ag
->
mii_bus
->
mdio_lock
);

244 i‡(
pd©a
->
swôch_d©a
)

245  
	`ag71xx_¨7240_öô
(
ag
);

247 i‡(
pd©a
->
phy_mask
)

248  
	`ag71xx_phy_c⁄√˘_mu…i
(
ag
);

250  
	`ag71xx_phy_c⁄√˘_fixed
(
ag
);

251 
	}
}

253 
	$ag71xx_phy_disc⁄√˘
(
ag71xx
 *
ag
)

255 
ag71xx_∂©f‹m_d©a
 *
pd©a
 = 
	`ag71xx_gë_pd©a
(
ag
);

257 i‡(
pd©a
->
swôch_d©a
)

258 
	`ag71xx_¨7240_˛ónup
(
ag
);

259 i‡(
ag
->
phy_dev
)

260 
	`phy_disc⁄√˘
(
ag
->
phy_dev
);

261 
	}
}

	@linux/ar71xx/files/drivers/spi/spi-rb4xx-cpld.c

14 
	~<löux/ty≥s.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/devi˚.h
>

20 
	~<löux/bô›s.h
>

21 
	~<löux/•i/•i.h
>

22 
	~<löux/gpio.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/vîsi⁄.h
>

26 
	~<asm/mach-©h79/rb4xx_˝ld.h
>

28 
	#DRV_NAME
 "•i-rb4xx-˝ld"

	)

29 
	#DRV_DESC
 "RB4xx CPLD drivî"

	)

30 
	#DRV_VERSION
 "0.1.0"

	)

32 
	#CPLD_CMD_WRITE_NAND
 0x08

	)

33 
	#CPLD_CMD_WRITE_CFG
 0x09

	)

34 
	#CPLD_CMD_READ_NAND
 0x0®

	)

35 
	#CPLD_CMD_READ_FAST
 0x0b

	)

36 
	#CPLD_CMD_LED5_ON
 0x0¯

	)

37 
	#CPLD_CMD_LED5_OFF
 0x0d

	)

39 
	srb4xx_˝ld
 {

40 
•i_devi˚
 *
	m•i
;

41 
muãx
 
	mlock
;

42 
gpio_chù
 
	mchù
;

43 
	mc⁄fig
;

46 
rb4xx_˝ld
 *
	grb4xx_˝ld
;

48 
ölöe
 
rb4xx_˝ld
 *
	$gpio_to_˝ld
(
gpio_chù
 *
chù
)

50  
	`c⁄èöî_of
(
chù
, 
rb4xx_˝ld
, chip);

51 
	}
}

53 
	$rb4xx_˝ld_wrôe_cmd
(
rb4xx_˝ld
 *
˝ld
, 
cmd
)

55 
•i_å™s„r
 
t
[1];

56 
•i_mesßge
 
m
;

57 
tx_buf
[1];

58 
îr
;

60 
	`•i_mesßge_öô
(&
m
);

61 
	`mem£t
(&
t
, 0, (t));

63 
t
[0].
tx_buf
 =Åx_buf;

64 
t
[0].
Àn
 = (
tx_buf
);

65 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

67 
tx_buf
[0] = 
cmd
;

69 
îr
 = 
	`•i_sync
(
˝ld
->
•i
, &
m
);

70  
îr
;

71 
	}
}

73 
	$rb4xx_˝ld_wrôe_cfg
(
rb4xx_˝ld
 *
˝ld
, 
c⁄fig
)

75 
•i_å™s„r
 
t
[1];

76 
•i_mesßge
 
m
;

77 
cmd
[2];

78 
îr
;

80 
	`•i_mesßge_öô
(&
m
);

81 
	`mem£t
(&
t
, 0, (t));

83 
t
[0].
tx_buf
 = 
cmd
;

84 
t
[0].
Àn
 = (
cmd
);

85 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

87 
cmd
[0] = 
CPLD_CMD_WRITE_CFG
;

88 
cmd
[1] = 
c⁄fig
;

90 
îr
 = 
	`•i_sync
(
˝ld
->
•i
, &
m
);

91  
îr
;

92 
	}
}

94 
	$__rb4xx_˝ld_ch™ge_cfg
(
rb4xx_˝ld
 *
˝ld
, 
mask
,

95 
vÆue
)

97 
c⁄fig
;

98 
îr
;

100 
c⁄fig
 = 
˝ld
->c⁄fig & ~
mask
;

101 
c⁄fig
 |
vÆue
;

103 i‡((
˝ld
->
c⁄fig
 ^ config) & 0xff) {

104 
îr
 = 
	`rb4xx_˝ld_wrôe_cfg
(
˝ld
, 
c⁄fig
);

105 i‡(
îr
)

106  
îr
;

109 i‡((
˝ld
->
c⁄fig
 ^ c⁄figË& 
CPLD_CFG_nLED5
) {

110 
îr
 = 
	`rb4xx_˝ld_wrôe_cmd
(
˝ld
, (
vÆue
Ë? 
CPLD_CMD_LED5_ON
 :

111 
CPLD_CMD_LED5_OFF
);

112 i‡(
îr
)

113  
îr
;

116 
˝ld
->
c⁄fig
 = config;

118 
	}
}

120 
	$rb4xx_˝ld_ch™ge_cfg
(
mask
, 
vÆue
)

122 
ªt
;

124 i‡(
rb4xx_˝ld
 =
NULL
)

125  -
ENODEV
;

127 
	`muãx_lock
(&
rb4xx_˝ld
->
lock
);

128 
ªt
 = 
	`__rb4xx_˝ld_ch™ge_cfg
(
rb4xx_˝ld
, 
mask
, 
vÆue
);

129 
	`muãx_u∆ock
(&
rb4xx_˝ld
->
lock
);

131  
ªt
;

132 
	}
}

133 
EXPORT_SYMBOL_GPL
(
rb4xx_˝ld_ch™ge_cfg
);

135 
	$rb4xx_˝ld_ªad
(*
rx_buf
, 
cou¡
)

137 c⁄° 
cmd
[2] = { 
CPLD_CMD_READ_NAND
, 0 };

138 
•i_å™s„r
 
t
[2] = {

140 .
tx_buf
 = &
cmd
,

141 .
Àn
 = 2,

143 .
rx_buf
 =Ñx_buf,

144 .
Àn
 = 
cou¡
,

147 
•i_mesßge
 
m
;

149 i‡(
rb4xx_˝ld
 =
NULL
)

150  -
ENODEV
;

152 
	`•i_mesßge_öô
(&
m
);

153 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

154 
	`•i_mesßge_add_èû
(&
t
[1], &
m
);

155  
	`•i_sync
(
rb4xx_˝ld
->
•i
, &
m
);

156 
	}
}

157 
EXPORT_SYMBOL_GPL
(
rb4xx_˝ld_ªad
);

159 
	$rb4xx_˝ld_wrôe
(c⁄° *
buf
, 
cou¡
)

161 c⁄° 
cmd
 = 
CPLD_CMD_WRITE_NAND
;

162 
•i_å™s„r
 
t
[3] = {

164 .
tx_buf
 = &
cmd
,

165 .
Àn
 = 1,

167 .
tx_buf
 = 
buf
,

168 .
Àn
 = 
cou¡
,

169 .
tx_nbôs
 = 
SPI_NBITS_DUAL
,

171 .
Àn
 = 1,

172 .
tx_nbôs
 = 
SPI_NBITS_DUAL
,

175 
•i_mesßge
 
m
;

177 i‡(
rb4xx_˝ld
 =
NULL
)

178  -
ENODEV
;

180 
	`•i_mesßge_öô
(&
m
);

181 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

182 
	`•i_mesßge_add_èû
(&
t
[1], &
m
);

183 
	`•i_mesßge_add_èû
(&
t
[2], &
m
);

184  
	`•i_sync
(
rb4xx_˝ld
->
•i
, &
m
);

185 
	}
}

186 
EXPORT_SYMBOL_GPL
(
rb4xx_˝ld_wrôe
);

188 
	$rb4xx_˝ld_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

190 
rb4xx_˝ld
 *
˝ld
 = 
	`gpio_to_˝ld
(
chù
);

191 
ªt
;

193 
	`muãx_lock
(&
˝ld
->
lock
);

194 
ªt
 = (
˝ld
->
c⁄fig
 >> 
off£t
) & 1;

195 
	`muãx_u∆ock
(&
˝ld
->
lock
);

197  
ªt
;

198 
	}
}

200 
	$rb4xx_˝ld_gpio_£t
(
gpio_chù
 *
chù
, 
off£t
,

201 
vÆue
)

203 
rb4xx_˝ld
 *
˝ld
 = 
	`gpio_to_˝ld
(
chù
);

205 
	`muãx_lock
(&
˝ld
->
lock
);

206 
	`__rb4xx_˝ld_ch™ge_cfg
(
˝ld
, (1 << 
off£t
), !!
vÆue
 << offset);

207 
	`muãx_u∆ock
(&
˝ld
->
lock
);

208 
	}
}

210 
	$rb4xx_˝ld_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

211 
off£t
)

213  -
EOPNOTSUPP
;

214 
	}
}

216 
	$rb4xx_˝ld_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

217 
off£t
,

218 
vÆue
)

220 
rb4xx_˝ld
 *
˝ld
 = 
	`gpio_to_˝ld
(
chù
);

221 
ªt
;

223 
	`muãx_lock
(&
˝ld
->
lock
);

224 
ªt
 = 
	`__rb4xx_˝ld_ch™ge_cfg
(
˝ld
, (1 << 
off£t
), !!
vÆue
 << offset);

225 
	`muãx_u∆ock
(&
˝ld
->
lock
);

227  
ªt
;

228 
	}
}

230 
	$rb4xx_˝ld_gpio_öô
(
rb4xx_˝ld
 *
˝ld
, 
ba£
)

232 
îr
;

235 
˝ld
->
c⁄fig
 = 
CPLD_CFG_nLED1
 | 
CPLD_CFG_nLED2
 | 
CPLD_CFG_nLED3
 |

236 
CPLD_CFG_nLED4
 | 
CPLD_CFG_nCE
;

237 
	`rb4xx_˝ld_wrôe_cfg
(
˝ld
, c∂d->
c⁄fig
);

240 
˝ld
->
chù
.
œbñ
 = 
DRV_NAME
;

242 
˝ld
->
chù
.
gë
 = 
rb4xx_˝ld_gpio_gë
;

243 
˝ld
->
chù
.
£t
 = 
rb4xx_˝ld_gpio_£t
;

244 
˝ld
->
chù
.
dúe˘i⁄_öput
 = 
rb4xx_˝ld_gpio_dúe˘i⁄_öput
;

245 
˝ld
->
chù
.
dúe˘i⁄_ouçut
 = 
rb4xx_˝ld_gpio_dúe˘i⁄_ouçut
;

247 
˝ld
->
chù
.
ba£
 = base;

248 
˝ld
->
chù
.
ngpio
 = 
CPLD_NUM_GPIOS
;

249 
˝ld
->
chù
.
ˇn_¶ìp
 = 1;

250 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

251 
˝ld
->
chù
.
dev
 = &˝ld->
•i
->dev;

253 
˝ld
->
chù
.
∑ª¡
 = &˝ld->
•i
->
dev
;

255 
˝ld
->
chù
.
ow√r
 = 
THIS_MODULE
;

257 
îr
 = 
	`gpiochù_add
(&
˝ld
->
chù
);

258 i‡(
îr
)

259 
	`dev_îr
(&
˝ld
->
•i
->
dev
, "adding GPIO chip failed,Érr=%d\n",

260 
îr
);

262  
îr
;

263 
	}
}

265 
	$rb4xx_˝ld_¥obe
(
•i_devi˚
 *
•i
)

267 
rb4xx_˝ld
 *
˝ld
;

268 
rb4xx_˝ld_∂©f‹m_d©a
 *
pd©a
;

269 
îr
;

271 
pd©a
 = 
•i
->
dev
.
∂©f‹m_d©a
;

272 i‡(!
pd©a
) {

273 
	`dev_dbg
(&
•i
->
dev
, "noÖlatform data\n");

274  -
EINVAL
;

277 
˝ld
 = 
	`kzÆloc
((*˝ld), 
GFP_KERNEL
);

278 i‡(!
˝ld
) {

279 
	`dev_îr
(&
•i
->
dev
, "no memory forÖrivate data\n");

280  -
ENOMEM
;

283 
	`muãx_öô
(&
˝ld
->
lock
);

284 
˝ld
->
•i
 = 
	`•i_dev_gë
(spi);

285 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
˝ld
);

287 
•i
->
mode
 = 
SPI_MODE_0
 | 
SPI_TX_DUAL
;

288 
•i
->
bôs_≥r_w‹d
 = 8;

289 
îr
 = 
	`•i_£tup
(
•i
);

290 i‡(
îr
) {

291 
	`dev_îr
(&
•i
->
dev
, "•i_£tu∞Áûed,Éº=%d\n", 
îr
);

292 
îr_drvd©a
;

295 
îr
 = 
	`rb4xx_˝ld_gpio_öô
(
˝ld
, 
pd©a
->
gpio_ba£
);

296 i‡(
îr
)

297 
îr_drvd©a
;

299 
rb4xx_˝ld
 = 
˝ld
;

303 
îr_drvd©a
:

304 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
NULL
);

305 
	`k‰ì
(
˝ld
);

307  
îr
;

308 
	}
}

310 
	$rb4xx_˝ld_ªmove
(
•i_devi˚
 *
•i
)

312 
rb4xx_˝ld
 *
˝ld
;

314 
rb4xx_˝ld
 = 
NULL
;

315 
˝ld
 = 
	`dev_gë_drvd©a
(&
•i
->
dev
);

316 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
NULL
);

317 
	`k‰ì
(
˝ld
);

320 
	}
}

322 
•i_drivî
 
	grb4xx_˝ld_drivî
 = {

323 .
drivî
 = {

324 .
«me
 = 
DRV_NAME
,

325 .
	gbus
 = &
•i_bus_ty≥
,

326 .
	gow√r
 = 
THIS_MODULE
,

328 .
	g¥obe
 = 
rb4xx_˝ld_¥obe
,

329 .
	gªmove
 = 
rb4xx_˝ld_ªmove
,

332 
__öô
 
	$rb4xx_˝ld_öô
()

334  
	`•i_ªgi°î_drivî
(&
rb4xx_˝ld_drivî
);

335 
	}
}

336 
moduÀ_öô
(
rb4xx_˝ld_öô
);

338 
__exô
 
	$rb4xx_˝ld_exô
()

340 
	`•i_uƒegi°î_drivî
(&
rb4xx_˝ld_drivî
);

341 
	}
}

342 
moduÀ_exô
(
rb4xx_˝ld_exô
);

344 
MODULE_DESCRIPTION
(
DRV_DESC
);

345 
MODULE_VERSION
(
DRV_VERSION
);

346 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

347 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/spi/spi-rb4xx.c

15 
	~<löux/˛k.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/•ölock.h
>

22 
	~<löux/w‹kqueue.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/•i/•i.h
>

26 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

27 
	~<asm/mach-©h79/©h79.h
>

29 
	#DRV_NAME
 "rb4xx-•i"

	)

30 
	#DRV_DESC
 "MikrŸik RB4xx SPI c⁄åﬁÀ∏drivî"

	)

31 
	#DRV_VERSION
 "0.1.0"

	)

33 
	#SPI_CTRL_FASTEST
 0x40

	)

34 
	#SPI_FLASH_HZ
 33333334

	)

35 
	#SPI_CPLD_HZ
 33333334

	)

37 
	#CPLD_CMD_READ_FAST
 0x0b

	)

39 #unde‡
RB4XX_SPI_DEBUG


41 
	srb4xx_•i
 {

42 
__iomem
 *
	mba£
;

43 
•i_ma°î
 *
	mma°î
;

45 
	m•i_˘æ_Êash
;

46 
	m•i_˘æ_‰ód
;

48 
˛k
 *
	mahb_˛k
;

49 
	mahb_‰eq
;

51 
•ölock_t
 
	mlock
;

52 
li°_hód
 
	mqueue
;

53 
	mbusy
:1;

54 
	mcs_waô
;

57 
	g•i_˛k_low
 = 
AR71XX_SPI_IOC_CS1
;

59 #ifde‡
RB4XX_SPI_DEBUG


60 
ölöe
 
	$do_•i_dñay
()

62 
	`ndñay
(20000);

63 
	}
}

65 
ölöe
 
	$do_•i_dñay
(Ë{ 
	}
}

68 
ölöe
 
	$do_•i_öô
(
•i_devi˚
 *
•i
)

70 
cs
 = 
AR71XX_SPI_IOC_CS0
 | 
AR71XX_SPI_IOC_CS1
;

72 i‡(!(
•i
->
mode
 & 
SPI_CS_HIGH
))

73 
cs
 ^(
•i
->
chù_£À˘
 =2Ë? 
AR71XX_SPI_IOC_CS1
 :

74 
AR71XX_SPI_IOC_CS0
;

76 
•i_˛k_low
 = 
cs
;

77 
	}
}

79 
ölöe
 
	$do_•i_föish
(
__iomem
 *
ba£
)

81 
	`do_•i_dñay
();

82 
	`__øw_wrôñ
(
AR71XX_SPI_IOC_CS0
 | 
AR71XX_SPI_IOC_CS1
,

83 
ba£
 + 
AR71XX_SPI_REG_IOC
);

84 
	}
}

86 
ölöe
 
	$do_•i_˛k
(
__iomem
 *
ba£
, 
bô
)

88 
bvÆ
 = 
•i_˛k_low
 | ((
bô
 & 1Ë? 
AR71XX_SPI_IOC_DO
 : 0);

90 
	`do_•i_dñay
();

91 
	`__øw_wrôñ
(
bvÆ
, 
ba£
 + 
AR71XX_SPI_REG_IOC
);

92 
	`do_•i_dñay
();

93 
	`__øw_wrôñ
(
bvÆ
 | 
AR71XX_SPI_IOC_CLK
, 
ba£
 + 
AR71XX_SPI_REG_IOC
);

94 
	}
}

96 
	$do_•i_byã
(
__iomem
 *
ba£
, 
byã
)

98 
	`do_•i_˛k
(
ba£
, 
byã
 >> 7);

99 
	`do_•i_˛k
(
ba£
, 
byã
 >> 6);

100 
	`do_•i_˛k
(
ba£
, 
byã
 >> 5);

101 
	`do_•i_˛k
(
ba£
, 
byã
 >> 4);

102 
	`do_•i_˛k
(
ba£
, 
byã
 >> 3);

103 
	`do_•i_˛k
(
ba£
, 
byã
 >> 2);

104 
	`do_•i_˛k
(
ba£
, 
byã
 >> 1);

105 
	`do_•i_˛k
(
ba£
, 
byã
);

107 
	`¥_debug
("spi_byte sent 0x%02x got 0x%02x\n",

108 ()
byã
,

109 ()
	`__øw_ªadl
(
ba£
 + 
AR71XX_SPI_REG_RDS
));

110 
	}
}

112 
ölöe
 
	$do_•i_˛k_Á°
(
__iomem
 *
ba£
, 
bô1
,

113 
bô2
)

115 
bvÆ
 = (
•i_˛k_low
 |

116 ((
bô1
 & 1Ë? 
AR71XX_SPI_IOC_DO
 : 0) |

117 ((
bô2
 & 1Ë? 
AR71XX_SPI_IOC_CS2
 : 0));

118 
	`do_•i_dñay
();

119 
	`__øw_wrôñ
(
bvÆ
, 
ba£
 + 
AR71XX_SPI_REG_IOC
);

120 
	`do_•i_dñay
();

121 
	`__øw_wrôñ
(
bvÆ
 | 
AR71XX_SPI_IOC_CLK
, 
ba£
 + 
AR71XX_SPI_REG_IOC
);

122 
	}
}

124 
	$do_•i_byã_Á°
(
__iomem
 *
ba£
, 
byã
)

126 
	`do_•i_˛k_Á°
(
ba£
, 
byã
 >> 7, byte >> 6);

127 
	`do_•i_˛k_Á°
(
ba£
, 
byã
 >> 5, byte >> 4);

128 
	`do_•i_˛k_Á°
(
ba£
, 
byã
 >> 3, byte >> 2);

129 
	`do_•i_˛k_Á°
(
ba£
, 
byã
 >> 1, byte >> 0);

131 
	`¥_debug
("spi_byte_fast sent 0x%02x got 0x%02x\n",

132 ()
byã
,

133 (Ë
	`__øw_ªadl
(
ba£
 + 
AR71XX_SPI_REG_RDS
));

134 
	}
}

136 
	$rb4xx_•i_txrx
(
__iomem
 *
ba£
, 
•i_å™s„r
 *
t
)

138 c⁄° *
tx_±r
 = 
t
->
tx_buf
;

139 *
rx_±r
 = 
t
->
rx_buf
;

140 
i
;

142 
	`¥_debug
("spi_txrxÜen %uÅx %uÑx %u\n",

143 
t
->
Àn
,

144 (
t
->
tx_buf
 ? 1 : 0),

145 (
t
->
rx_buf
 ? 1 : 0));

147 
i
 = 0; i < 
t
->
Àn
; ++i) {

148 
sd©a
 = 
tx_±r
 ?Åx_±r[
i
] : 0;

150 i‡(
t
->
tx_nbôs
 =
SPI_NBITS_DUAL
)

151 
	`do_•i_byã_Á°
(
ba£
, 
sd©a
);

153 
	`do_•i_byã
(
ba£
, 
sd©a
);

155 i‡(
rx_±r
)

156 
rx_±r
[
i
] = 
	`__øw_ªadl
(
ba£
 + 
AR71XX_SPI_REG_RDS
) & 0xff;

159  
i
;

160 
	}
}

162 
	$rb4xx_•i_msg
(
rb4xx_•i
 *
rb•i
, 
•i_mesßge
 *
m
)

164 
•i_å™s„r
 *
t
 = 
NULL
;

165 
__iomem
 *
ba£
 = 
rb•i
->base;

167 
m
->
°©us
 = 0;

168 i‡(
	`li°_em±y
(&
m
->
å™s„rs
))

171 
	`__øw_wrôñ
(
AR71XX_SPI_FS_GPIO
, 
ba£
 + 
AR71XX_SPI_REG_FS
);

172 
	`__øw_wrôñ
(
SPI_CTRL_FASTEST
, 
ba£
 + 
AR71XX_SPI_REG_CTRL
);

173 
	`do_•i_öô
(
m
->
•i
);

175 
	`li°_f‹_óch_íåy
(
t
, &
m
->
å™s„rs
, 
å™s„r_li°
) {

176 
Àn
;

178 
Àn
 = 
	`rb4xx_•i_txrx
(
ba£
, 
t
);

179 i‡(
Àn
 !
t
->len) {

180 
m
->
°©us
 = -
EMSGSIZE
;

183 
m
->
a˘uÆ_Àngth
 +
Àn
;

185 i‡(
t
->
cs_ch™ge
) {

186 i‡(
	`li°_is_œ°
(&
t
->
å™s„r_li°
, &
m
->
å™s„rs
)) {

188  
m
->
•i
->
chù_£À˘
;

190 
	`do_•i_föish
(
ba£
);

191 
	`ndñay
(100);

195 
	`do_•i_föish
(
ba£
);

196 
	`__øw_wrôñ
(
rb•i
->
•i_˘æ_Êash
, 
ba£
 + 
AR71XX_SPI_REG_CTRL
);

197 
	`__øw_wrôñ
(0, 
ba£
 + 
AR71XX_SPI_REG_FS
);

199 
	}
}

201 
	$rb4xx_•i_¥o˚ss_queue_locked
(
rb4xx_•i
 *
rb•i
,

202 *
Êags
)

204 
cs
 = 
rb•i
->
cs_waô
;

206 
rb•i
->
busy
 = 1;

207 !
	`li°_em±y
(&
rb•i
->
queue
)) {

208 
•i_mesßge
 *
m
;

210 
	`li°_f‹_óch_íåy
(
m
, &
rb•i
->
queue
, queue)

211 i‡(
cs
 < 0 || c†=
m
->
•i
->
chù_£À˘
)

214 i‡(&
m
->
queue
 =&
rb•i
->queue)

217 
	`li°_dñ_öô
(&
m
->
queue
);

218 
	`•ö_u∆ock_úqª°‹e
(&
rb•i
->
lock
, *
Êags
);

220 
cs
 = 
	`rb4xx_•i_msg
(
rb•i
, 
m
);

221 
m
->
	`com∂ëe
(m->
c⁄ãxt
);

223 
	`•ö_lock_úqßve
(&
rb•i
->
lock
, *
Êags
);

226 
rb•i
->
cs_waô
 = 
cs
;

227 
rb•i
->
busy
 = 0;

229 i‡(
cs
 >= 0) {

232 
	}
}

234 
	$rb4xx_•i_å™s„r
(
•i_devi˚
 *
•i
,

235 
•i_mesßge
 *
m
)

237 
rb4xx_•i
 *
rb•i
 = 
	`•i_ma°î_gë_devd©a
(
•i
->
ma°î
);

238 
Êags
;

240 
m
->
a˘uÆ_Àngth
 = 0;

241 
m
->
°©us
 = -
EINPROGRESS
;

243 
	`•ö_lock_úqßve
(&
rb•i
->
lock
, 
Êags
);

244 
	`li°_add_èû
(&
m
->
queue
, &
rb•i
->queue);

245 i‡(
rb•i
->
busy
 ||

246 (
rb•i
->
cs_waô
 >0 &&Ñb•i->cs_waô !
m
->
•i
->
chù_£À˘
)) {

248 
	`•ö_u∆ock_úqª°‹e
(&
rb•i
->
lock
, 
Êags
);

253 
	`rb4xx_•i_¥o˚ss_queue_locked
(
rb•i
, &
Êags
);

254 
	`•ö_u∆ock_úqª°‹e
(&
rb•i
->
lock
, 
Êags
);

257 
	}
}

259 
	$rb4xx_•i_£tup
(
•i_devi˚
 *
•i
)

261 
rb4xx_•i
 *
rb•i
 = 
	`•i_ma°î_gë_devd©a
(
•i
->
ma°î
);

262 
Êags
;

264 i‡(
•i
->
mode
 & ~(
SPI_CS_HIGH
 | 
SPI_TX_DUAL
)) {

265 
	`dev_îr
(&
•i
->
dev
, "mode %xÇot supported\n",

266 (Ë
•i
->
mode
);

267  -
EINVAL
;

270 i‡(
•i
->
bôs_≥r_w‹d
 != 8 && spi->bits_per_word != 0) {

271 
	`dev_îr
(&
•i
->
dev
, "bits_per_word %uÇot supported\n",

272 (Ë
•i
->
bôs_≥r_w‹d
);

273  -
EINVAL
;

276 
	`•ö_lock_úqßve
(&
rb•i
->
lock
, 
Êags
);

277 i‡(
rb•i
->
cs_waô
 =
•i
->
chù_£À˘
 && !rb•i->
busy
) {

278 
rb•i
->
cs_waô
 = -1;

279 
	`rb4xx_•i_¥o˚ss_queue_locked
(
rb•i
, &
Êags
);

281 
	`•ö_u∆ock_úqª°‹e
(&
rb•i
->
lock
, 
Êags
);

284 
	}
}

286 
	$gë_•i_˘æ
(
rb4xx_•i
 *
rb•i
, 
hz_max
,

287 c⁄° *
«me
)

289 
div
;

291 
div
 = (
rb•i
->
ahb_‰eq
 - 1Ë/ (2 * 
hz_max
);

296 i‡(
div
 == 0)

297 ++
div
;

299 i‡(
«me
) {

300 
ahb_khz
 = (
rb•i
->
ahb_‰eq
 + 500) / 1000;

301 
div_ªÆ
 = 2 * (
div
 + 1);

302 
	`¥_debug
("rb4xx: %s SPI clock %u kHz (AHB %u kHz / %u)\n",

303 
«me
,

304 
ahb_khz
 / 
div_ªÆ
,

305 
ahb_khz
, 
div_ªÆ
);

308  
SPI_CTRL_FASTEST
 + 
div
;

309 
	}
}

311 
	$rb4xx_•i_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

313 
•i_ma°î
 *
ma°î
;

314 
rb4xx_•i
 *
rb•i
;

315 
ªsour˚
 *
r
;

316 
îr
 = 0;

318 
ma°î
 = 
	`•i_Æloc_ma°î
(&
pdev
->
dev
, (*
rb•i
));

319 i‡(
ma°î
 =
NULL
) {

320 
	`dev_îr
(&
pdev
->
dev
, "no memory for spi_master\n");

321 
îr
 = -
ENOMEM
;

322 
îr_out
;

325 
ma°î
->
bus_num
 = 0;

326 
ma°î
->
num_chù£À˘
 = 3;

327 
ma°î
->
mode_bôs
 = 
SPI_TX_DUAL
;

328 
ma°î
->
£tup
 = 
rb4xx_•i_£tup
;

329 
ma°î
->
å™s„r
 = 
rb4xx_•i_å™s„r
;

331 
rb•i
 = 
	`•i_ma°î_gë_devd©a
(
ma°î
);

333 
rb•i
->
ahb_˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "ahb");

334 i‡(
	`IS_ERR
(
rb•i
->
ahb_˛k
)) {

335 
îr
 = 
	`PTR_ERR
(
rb•i
->
ahb_˛k
);

336 
îr_put_ma°î
;

339 
îr
 = 
	`˛k_¥ï¨e_íabÀ
(
rb•i
->
ahb_˛k
);

340 i‡(
îr
)

341 
îr_˛k_put
;

343 
rb•i
->
ahb_‰eq
 = 
	`˛k_gë_øã
‘b•i->
ahb_˛k
);

344 i‡(!
rb•i
->
ahb_‰eq
) {

345 
îr
 = -
EINVAL
;

346 
îr_˛k_dißbÀ
;

349 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
rb•i
);

351 
r
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

352 i‡(
r
 =
NULL
) {

353 
îr
 = -
ENOENT
;

354 
îr_˛k_dißbÀ
;

357 
rb•i
->
ba£
 = 
	`i‹em≠
(
r
->
°¨t
,Ñ->
íd
 -Ñ->start + 1);

358 i‡(!
rb•i
->
ba£
) {

359 
îr
 = -
ENXIO
;

360 
îr_˛k_dißbÀ
;

363 
rb•i
->
ma°î
 = master;

364 
rb•i
->
•i_˘æ_Êash
 = 
	`gë_•i_˘æ
‘b•i, 
SPI_FLASH_HZ
, "FLASH");

365 
rb•i
->
•i_˘æ_‰ód
 = 
	`gë_•i_˘æ
‘b•i, 
SPI_CPLD_HZ
, "CPLD");

366 
rb•i
->
cs_waô
 = -1;

368 
	`•ö_lock_öô
(&
rb•i
->
lock
);

369 
	`INIT_LIST_HEAD
(&
rb•i
->
queue
);

371 
îr
 = 
	`•i_ªgi°î_ma°î
(
ma°î
);

372 i‡(
îr
) {

373 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegister SPI master\n");

374 
îr_iounm≠
;

379 
îr_iounm≠
:

380 
	`iounm≠
(
rb•i
->
ba£
);

381 
îr_˛k_dißbÀ
:

382 
	`˛k_dißbÀ_u≈ª∑ª
(
rb•i
->
ahb_˛k
);

383 
îr_˛k_put
:

384 
	`˛k_put
(
rb•i
->
ahb_˛k
);

385 
îr_put_ma°î
:

386 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

387 
	`•i_ma°î_put
(
ma°î
);

388 
îr_out
:

389  
îr
;

390 
	}
}

392 
	$rb4xx_•i_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

394 
rb4xx_•i
 *
rb•i
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

396 
	`iounm≠
(
rb•i
->
ba£
);

397 
	`˛k_dißbÀ_u≈ª∑ª
(
rb•i
->
ahb_˛k
);

398 
	`˛k_put
(
rb•i
->
ahb_˛k
);

399 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

400 
	`•i_ma°î_put
(
rb•i
->
ma°î
);

403 
	}
}

405 
∂©f‹m_drivî
 
	grb4xx_•i_drv
 = {

406 .
¥obe
 = 
rb4xx_•i_¥obe
,

407 .
	gªmove
 = 
rb4xx_•i_ªmove
,

408 .
	gdrivî
 = {

409 .
«me
 = 
DRV_NAME
,

410 .
	gow√r
 = 
THIS_MODULE
,

414 
__öô
 
	$rb4xx_•i_öô
()

416  
	`∂©f‹m_drivî_ªgi°î
(&
rb4xx_•i_drv
);

417 
	}
}

418 
subsys_öôˇŒ
(
rb4xx_•i_öô
);

420 
__exô
 
	$rb4xx_•i_exô
()

422 
	`∂©f‹m_drivî_uƒegi°î
(&
rb4xx_•i_drv
);

423 
	}
}

425 
moduÀ_exô
(
rb4xx_•i_exô
);

427 
MODULE_DESCRIPTION
(
DRV_DESC
);

428 
MODULE_VERSION
(
DRV_VERSION
);

429 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

430 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/drivers/spi/spi-tty-ds.c

7 
	~<löux/kî√l.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/ty≥s.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/öãºu±.h
>

13 
	~<löux/•i/•i.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/•ölock.h
>

16 
	~<löux/£rül.h
>

17 
	~<löux/ây.h
>

18 
	~<löux/ây_drivî.h
>

19 
	~<löux/ây_Êù.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/jiffõs.h
>

23 
	~<asm/mach-©h79/©h79.h
>

24 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

25 
	~<asm/mach-©h79/úq.h
>

28 
	#SPI_TTY_BUF_LEN
 64

	)

29 
	#SPI_TTY_IRQ
 (
IRQF_TRIGGER_HIGH
)

	)

30 
	#SPI_TTY_MAX_MESSAGE_LEN
 250

	)

32 
	#SPI_DEFAULT_IGNORE_TX
 0xFF

	)

33 
	#SPI_DEFAULT_IGNORE_RX
 0xFF

	)

34 
	#SPI_IGNORE_CODE_LENGHT_TX
 3

	)

35 
	#SPI_IGNORE_CODE_LENGHT_RX
 2

	)

37 
	gdev_cou¡
 = 0;

38 
•ölock_t
 
	glock
;

40 
	#p‹t_to_avr_dev
(
_±r
Ë(
	`c⁄èöî_of
(_±r, 
•i_ây_dev
, 
p‹t
))

	)

43 
	gå™s„r_dñay
 = 25, 
	gå™s„r_Àn
 = 1, 
	gmax_≥ndög_byã
 = 1024;

45 
moduÀ_∑øm
(
å™s„r_dñay
, , 0444);

46 
moduÀ_∑øm
(
å™s„r_Àn
, , 0444);

47 
moduÀ_∑øm
(
max_≥ndög_byã
, , 0444);

50 
	e•i_ây_comm™ds
 {

51 
	mSPI_AVR_CMD_READ
 = 0x00,

54 
	#SPI_TTY_FLAG_BUSY_INTERRUPT
 (1 << 0)

	)

59 
	s•i_ây_dev
 {

60 
•i_devi˚
 *
	m•i
;

62 
	mÊags
;

64 
	mây_mö‹
;

65 
devi˚
 *
	mây_dev
;

66 
ây_p‹t
 
	mp‹t
;

68 
	mgpio_úq
;

70 
•ölock_t
 
	mlock
;

71 
	ma˘ive_msg_cou¡
;

72 
	ma˘ive_byãs_cou¡
;

73 
waô_queue_hód_t
 
	mwaô
;

75 
uöt8_t
 
	mtx_ign‹e
;

76 
uöt8_t
 
	mrx_ign‹e
;

78 
uöt8_t
 
	mrx_buf_ign‹e
;

80 
	mcou¡_öãºu±_byã
;

87 
	s•i_ây_mesßge
 {

88 
•i_ây_dev
 *
	mavr
;

89 
•i_mesßge
 
	mmesßge
;

90 
	mÀn
;

91 
uöt8_t
 
	mtx_buf
[
SPI_TTY_MAX_MESSAGE_LEN
];

92 
uöt8_t
 
	mrx_buf
[
SPI_TTY_MAX_MESSAGE_LEN
];

94 
li°_hód
 
	mli°
;

97 
	#SPI_SERIAL_TTY_MINORS
 1

	)

98 
ây_drivî
 *
	g•i_£rül_ây_drivî
 = 
NULL
;

99 
•i_ây_dev
 *
	g•i_ây_Æl_dev
[
SPI_SERIAL_TTY_MINORS
];

101 
•i_ây_£nd_mesßge
(
•i_ây_dev
 *
avr
,

102 c⁄° 
uöt8_t
 *
d©a
, 
cou¡
);

105 
ssize_t
 
	$•i_ây_dñay_show
(
devi˚
 *
dev
,

106 
devi˚_©åibuã
 *
©å
,

107 *
buf
)

109  
	`•rötf
(
buf
, "%d\n", 
å™s„r_dñay
);

110 
	}
}

112 
ssize_t
 
	$•i_ây_dñay_°‹e
(
devi˚
 *
dev
,

113 
devi˚_©åibuã
 *
©å
,

114 c⁄° *
buf
, 
size_t
 
cou¡
)

116 
vÆ
;

118 i‡(
	`k°πﬁ
(
buf
, 0, &
vÆ
))

119  -
EINVAL
;

121 
å™s„r_dñay
 = 
vÆ
;

123  
cou¡
;

124 
	}
}

126 
DEVICE_ATTR
(
å™s„r_dñay
, 0644, 
•i_ây_dñay_show
, 
•i_ây_dñay_°‹e
);

128 
©åibuã
 *
	g•i_ây_©å
[] = {

129 &
dev_©å_å™s„r_dñay
.
©å
,

130 
NULL
,

132 c⁄° 
©åibuã_group
 
	g•i_ây_©å_group
 = {

133 .
©ås
 = 
•i_ây_©å
,

135 c⁄° 
©åibuã_group
 *
	g•i_ây_©å_groups
[] = {

136 &
•i_ây_©å_group
,

137 
NULL
,

141 
	$__©h79_gpio_£t_öt_ªg
(
off£t
,

142 
gpio
, 
vÆue
)

144 
__iomem
 *
ba£
 = 
©h79_gpio_ba£
;

146 
ªg_vÆ
;

150 
ªg_vÆ
 = 
	`__øw_ªadl
(
ba£
 + 
off£t
);

151 i‡(
vÆue
)

152 
ªg_vÆ
 |(1 << 
gpio
);

154 
ªg_vÆ
 &(~(1 << 
gpio
));

155 
	`__øw_wrôñ
(
ªg_vÆ
, 
ba£
 + 
off£t
);

158 
	}
}

161 
	$__©h79_gpio_£t_öt_mode
(
gpio
, 
vÆue
)

163 
	`__©h79_gpio_£t_öt_ªg
(
AR71XX_GPIO_REG_INT_MODE
, 
gpio
, 
vÆue
);

164 
	}
}

166 
	$__©h79_gpio_£t_öt_ty≥
(
gpio
, 
vÆue
)

168 
	`__©h79_gpio_£t_öt_ªg
(
AR71XX_GPIO_REG_INT_TYPE
, 
gpio
, 
vÆue
);

169 
	}
}

171 
	$__©h79_gpio_£t_öt_pﬁ¨ôy
(
gpio
, 
vÆue
)

173 
	`__©h79_gpio_£t_öt_ªg
(
AR71XX_GPIO_REG_INT_POLARITY
, 
gpio
, 
vÆue
);

174 
	}
}

177 
	$__©h79_gpio_£t_öt_íabÀ
(
gpio
, 
vÆue
)

179 
	`__©h79_gpio_£t_öt_ªg
(
AR71XX_GPIO_REG_INT_ENABLE
, 
gpio
, 
vÆue
);

180 
	}
}

182 
	$__©h79_gpio_£t_öt_≥ndög
(
gpio
, 
vÆue
)

184 
	`__©h79_gpio_£t_öt_ªg
(
AR71XX_GPIO_REG_INT_PENDING
, 
gpio
, 
vÆue
);

185 
	}
}

187 
	$__©h79_gpio_gë_öt_≥ndög
()

189  
	`__øw_ªadl
(
©h79_gpio_ba£
 + 
AR71XX_GPIO_REG_INT_PENDING
);

190 
	}
}

192 
	$•i_ây_gpio_to_úq
(
gpio
)

194  
	`ATH79_MISC_IRQ
(2);

195 
	}
}

199 
	$úq_íabÀ
(
gpio
)

201 
	`__©h79_gpio_£t_öt_mode
(
gpio
, 1);

202 
	}
}

203 
	$úq_dißbÀ
(
gpio
)

205 
	`__©h79_gpio_£t_öt_mode
(
gpio
, 0);

206 
	}
}

209 
	$úq_ack
(
gpio
)

211 
	`__©h79_gpio_£t_öt_íabÀ
(
gpio
, 0);

212 
	}
}

213 
	$úq_mask
(
gpio
)

215 
	`__©h79_gpio_£t_öt_íabÀ
(
gpio
, 0);

216 
	}
}

218 
	$úq_unmask
(
gpio
,)

220 
	`__©h79_gpio_£t_öt_íabÀ
(
gpio
, 1);

221 
	}
}

223 
	$úq_£t_ty≥
(
gpio
, 
úqÊags
)

225 
edge
, 
pﬁ¨ôy
;

227 
úqÊags
 & 
IRQF_TRIGGER_MASK
) {

228 
IRQF_TRIGGER_HIGH
:

229 
edge
 = 0;

230 
pﬁ¨ôy
 = 1;

232 
IRQF_TRIGGER_LOW
:

233 
edge
 = 0;

234 
pﬁ¨ôy
 = 0;

236 
IRQF_TRIGGER_RISING
:

237 
edge
 = 1;

238 
pﬁ¨ôy
 = 1;

240 
IRQF_TRIGGER_FALLING
:

241 
edge
 = 1;

242 
pﬁ¨ôy
 = 0;

245  -
EINVAL
;

248 
	`__©h79_gpio_£t_öt_ty≥
(
gpio
, 
edge
);

249 
	`__©h79_gpio_£t_öt_pﬁ¨ôy
(
gpio
, 
pﬁ¨ôy
);

252 
	}
}

254 
úq_chù
 
	g©h79_misc_úq_chù
 = {

255 .
«me
 = "GPIO",

256 .
	gúq_íabÀ
 = 
úq_íabÀ
,

257 .
	gúq_dißbÀ
 = 
úq_dißbÀ
,

258 .
	gúq_ack
 = 
úq_ack
,

259 .
	gúq_mask
 = 
úq_mask
,

260 .
	gúq_unmask
 = 
úq_unmask
,

261 .
	gúq_£t_ty≥
 = 
úq_£t_ty≥


273 
	$•i_ây_vÆid_Àngth
(
•i_ây_mesßge
 *
avr_msg
)

275 
•i_ây_dev
 *
avr
 = 
avr_msg
->avr;

276 
i
, 
cou¡
;

278 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%dÜí: %d\n", 
__func__
, 
__LINE__
,

279 
avr_msg
->
Àn
);

281 
i
 = 1, 
cou¡
 = 0; i < 
avr_msg
->
Àn
; ++i, ++count) {

283 i‡(
avr_msg
->
rx_buf
[
i
] !
avr
->
rx_ign‹e
)

293 i‡(
i
 =
avr_msg
->
Àn
 - 1)

300 i‡(
avr_msg
->
rx_buf
[
i
 + 1] =
avr
->
rx_ign‹e
) {

301 i‡(
i
 =
avr_msg
->
Àn
 - 2) {

302 
cou¡
 ++;

307 
	`memmove
(&
avr_msg
->
rx_buf
[
i
 + 1],

308 &
avr_msg
->
rx_buf
[
i
 + 2],

309 
avr_msg
->
Àn
 - 
i
 - 2);

310 
i
++;

317 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:Çumber of valid bytes %i\n",

318 
__func__
, 
cou¡
);

320  
cou¡
;

321 
	}
}

327 
	$•i_ây_ªmove_å™s„rs
(
•i_ây_mesßge
 *
avr_msg
)

329 
•i_å™s„r
 *
t
, *
tmp_t
;

331 
	`li°_f‹_óch_íåy_ß„
(
t
, 
tmp_t
,&
avr_msg
->
mesßge
.
å™s„rs
, 
å™s„r_li°
) {

332 
	`•i_å™s„r_dñ
(
t
);

333 
	`k‰ì
(
t
);

335 
	}
}

337 
	$•i_ây_∑rsög_mesßge
(
ây_°ru˘
 *
ây
,

338 
•i_ây_mesßge
 *
avr_msg
)

340 
•i_ây_dev
 *
avr
 = 
avr_msg
->avr;

341 
vÆid_Àn
;

343 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

349 i‡(
avr_msg
->
Àn
 <= 1)

352 
vÆid_Àn
 = 
	`•i_ây_vÆid_Àngth
(
avr_msg
);

358 
	`ây_ö£π_Êù_°rög
(
ây
->
p‹t
, 
avr_msg
->
rx_buf
 + 1, 
vÆid_Àn
);

359 
	`ây_Êù_buf„r_push
(
ây
->
p‹t
);

361 
	}
}

363 
	$•i_ây_gíî©e_˛ock
(
•i_ây_mesßge
 *
avr_msg
)

365 
•i_ây_dev
 *
avr
 = 
avr_msg
->avr;

367 i‡(
avr_msg
->
Àn
 != 1)

370 i‡(
avr
->
cou¡_öãºu±_byã
 == 0) {

371 
	`dev_îr
(&
avr
->
•i
->
dev
, "Unexpected single byteÅransfer\n");

375 i‡(!
avr_msg
->
tx_buf
[0])

376 
avr
->
cou¡_öãºu±_byã
--;

378 
	`dev_dbg
(&
avr
->
•i
->
dev
,

380 
__func__
, 
avr
->
cou¡_öãºu±_byã
, 
avr_msg
->
rx_buf
[0]);

382 i‡(
avr
->
cou¡_öãºu±_byã
)

390 i‡(
avr_msg
->
rx_buf
[0]) {

391 i‡(
avr_msg
->
rx_buf
[0] >
SPI_TTY_MAX_MESSAGE_LEN
)

392 
avr_msg
->
rx_buf
[0] = 
SPI_TTY_MAX_MESSAGE_LEN
 - 1;

393 
	`•i_ây_£nd_mesßge
(
avr
, 
NULL
, 
avr_msg
->
rx_buf
[0]);

395 
	}
}

400 
	$•i_ây_mesßge_com∂ëe
(*
c⁄ãxt
)

402 
•i_ây_mesßge
 *
avr_msg
 = 
c⁄ãxt
;

403 
•i_ây_dev
 *
avr
 = 
avr_msg
->avr;

404 
ây_°ru˘
 *
ây
 = 
	`ây_p‹t_ây_gë
(&
avr_msg
->
avr
->
p‹t
);

405 
Êags
;

406 
i
;

408 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

410 
i
 = 0; i < 
avr_msg
->
Àn
; ++i)

411 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s: buf[%d] = 0x%x (rxË0x%x (tx)\n", 
__func__
, 
i
, 
avr_msg
->
rx_buf
[i],ávr_msg->
tx_buf
[i]);

414 i‡(
ây
 &&Åty->
p‹t
->
ôty
)

415 
	`•i_ây_∑rsög_mesßge
(
ây
, 
avr_msg
);

418 
	`•i_ây_gíî©e_˛ock
(
avr_msg
);

421 
	`•ö_lock_úqßve
(&
avr
->
lock
, 
Êags
);

422 
avr
->
a˘ive_byãs_cou¡
 -
avr_msg
->
Àn
;

423 
avr
->
a˘ive_msg_cou¡
--;

424 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:%d [%d - %d]\n", 
__func__
, 
__LINE__
,

425 
avr
->
a˘ive_msg_cou¡
,ávr->
a˘ive_byãs_cou¡
);

426 
	`•ö_u∆ock_úqª°‹e
(&
avr
->
lock
, 
Êags
);

428 i‡(
ây
 &&Åty->
p‹t
->
ôty
) {

430 
	`wake_up_öãºu±ibÀ
(&
avr
->
waô
);

431 
	`ây_wakeup
(
ây
);

434 
	`ây_kªf_put
(
ây
);

437 
	`•i_ây_ªmove_å™s„rs
(
avr_msg
);

438 
	`k‰ì
(
avr_msg
);

439 
	}
}

448 
•i_ây_mesßge
 *
	$•i_ây_mesßge_buûd
(c⁄° 
uöt8_t
 *
d©a
,

449 
Àn
)

451 
•i_ây_mesßge
 *
avr_msg
;

452 
•i_å™s„r
 *
t
;

453 
i
, 
îr
;

456 i‡(
Àn
 >
SPI_TTY_MAX_MESSAGE_LEN
)

457  
	`ERR_PTR
(-
EINVAL
);

459 
avr_msg
 = 
	`kmÆloc
((
•i_ây_mesßge
),

460 
GFP_KERNEL
 | 
GFP_ATOMIC
);

461 i‡(!
avr_msg
)

462  
	`ERR_PTR
(-
ENOMEM
);

464 
	`•i_mesßge_öô
(&
avr_msg
->
mesßge
);

470 
avr_msg
->
Àn
 =Üen + 1;

471 i‡(
d©a
) {

477 i‡(
d©a
[0] != 0xFF) {

478 
	`mem˝y
(
avr_msg
->
tx_buf
 + 1, 
d©a
, 
Àn
);

481 
avr_msg
->
Àn
++;

482 
	`mem˝y
(
avr_msg
->
tx_buf
 + 2, 
d©a
, 
Àn
);

483 
avr_msg
->
tx_buf
[1] = 0xFF;

495 
	`mem£t
(
avr_msg
->
tx_buf
, 0,ávr_msg->
Àn
);

496 
avr_msg
->
tx_buf
[1] = 0xFF;

499 
avr_msg
->
tx_buf
[0] =ávr_msg->
Àn
 - 1;

501 
i
 = 0; i < 
avr_msg
->
Àn
 ; ++i) {

502 
t
 = 
	`kzÆloc
((
•i_å™s„r
),

503 
GFP_KERNEL
 | 
GFP_ATOMIC
);

504 i‡(!
t
) {

505 
îr
 = -
ENOMEM
;

506 
îr_å™s_Æloc
;

513 
t
->
Àn
 = 
å™s„r_Àn
;

514 
t
->
tx_buf
 = &
avr_msg
->tx_buf[
i
];

515 
t
->
rx_buf
 = &
avr_msg
->rx_buf[
i
];

516 
t
->
dñay_u£cs
 = 
å™s„r_dñay
;

518 
	`•i_mesßge_add_èû
(
t
, &
avr_msg
->
mesßge
);

520 
avr_msg
->
mesßge
.
c⁄ãxt
 =ávr_msg;

521 
avr_msg
->
mesßge
.
com∂ëe
 = 
•i_ây_mesßge_com∂ëe
;

523  
avr_msg
;

525 
îr_å™s_Æloc
:

526 
	`•i_ây_ªmove_å™s„rs
(
avr_msg
);

527 
	`k‰ì
(
avr_msg
);

529  
	`ERR_PTR
(
îr
);

530 
	}
}

536 
	$•i_ây_£nd_mesßge
(
•i_ây_dev
 *
avr
,

537 c⁄° 
uöt8_t
 *
d©a
, 
cou¡
)

539 
•i_ây_mesßge
 *
avr_msg
;

540 
Êags
;

541 
îr
;

543 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

546 
avr_msg
 = 
	`•i_ây_mesßge_buûd
(
d©a
, 
cou¡
);

547 i‡(
	`IS_ERR
(
avr_msg
)) {

548 
	`dev_îr
(&
avr
->
•i
->
dev
, "%s: Cannot build message (%ld)\n",

549 
__func__
, 
	`PTR_ERR
(
avr_msg
));

550  
	`PTR_ERR
(
avr_msg
);

552 
avr_msg
->
avr
 =ávr;

555 
îr
 = 
	`•i_async
(
avr
->
•i
, &
avr_msg
->
mesßge
);

556 i‡(
îr
) {

557 
	`dev_îr
(&
avr
->
•i
->
dev
, "%s: Cannot send message (%d)\n",

558 
__func__
, 
îr
);

559  
îr
;

563 
	`•ö_lock_úqßve
(&
avr
->
lock
, 
Êags
);

564 
avr
->
a˘ive_byãs_cou¡
 +
avr_msg
->
Àn
;

565 
avr
->
a˘ive_msg_cou¡
++;

566 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:%d [%d - %d]\n", 
__func__
, 
__LINE__
,

567 
avr
->
a˘ive_msg_cou¡
,ávr->
a˘ive_byãs_cou¡
);

568 
	`•ö_u∆ock_úqª°‹e
(&
avr
->
lock
, 
Êags
);

570  
cou¡
;

571 
	}
}

580 
	$•i_£rül_ây_›í
(
ây_°ru˘
 * 
ây
, 
fûe
 * 
fûp
)

582 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
ây
->
p‹t
);

584 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

589 
	`öô_waôqueue_hód
(&
avr
->
waô
);

591  
	`ây_p‹t_›í
(
ây
->
p‹t
,Åty, 
fûp
);

592 
	}
}

598 
	$•i_£rül_ây_˛o£
(
ây_°ru˘
 * 
ây
, 
fûe
 * 
fûp
)

600 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
ây
->
p‹t
);

602 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

604 
	`ây_ldisc_Êush
(
ây
);

605 
	`ây_p‹t_˛o£
(
ây
->
p‹t
,Åty, 
fûp
);

607 
	`wake_up_öãºu±ibÀ
(&
ây
->
p‹t
->
›í_waô
);

609 
	}
}

617 
	$•i_£rül_ây_wrôe_room
(
ây_°ru˘
 *
ây
)

619 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
ây
->
p‹t
);

620 
size
;

622 
size
 = 
max_≥ndög_byã
 - 
avr
->
a˘ive_byãs_cou¡
;

623 i‡(
size
 >
SPI_TTY_MAX_MESSAGE_LEN
)

624 
size
 = 
SPI_TTY_MAX_MESSAGE_LEN
 - 1;

626 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%dÑoom size: %d\n", 
__func__
, 
__LINE__
,

627 
size
);

629  
size
;

630 
	}
}

637 
	$•i_£rül_ây_wrôe
(
ây_°ru˘
 * 
ây
,

638 c⁄° *
buf
, 
cou¡
)

640 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
ây
->
p‹t
);

641 
À·
, 
Àn
;

642 
i
;

644 i‡(!
buf
 || !
cou¡
)

647 
À·
 = 
	`•i_£rül_ây_wrôe_room
(
ây
);

648 i‡(
À·
 <= 0)

651 
Àn
 = 
À·
 > 
cou¡
 ? count :Üeft;

653 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d %d\n", 
__func__
, 
__LINE__
, 
cou¡
);

654 
i
 = 0; i < 
Àn
; ++i) {

655 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d 0x%x\n", 
__func__
, 
__LINE__
, 
buf
[
i
]);

658  
	`•i_ây_£nd_mesßge
(
avr
, 
buf
, 
Àn
);

659 
	}
}

666 
	$•i_£rül_ây_waô_u¡û_£¡
(
ây_°ru˘
 *
ây
,

667 
timeout
)

669 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
ây
->
p‹t
);

671 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d %d\n", 
__func__
, 
__LINE__
,

672 
avr
->
a˘ive_msg_cou¡
);

675 
	`waô_evít_öãºu±ibÀ
(
avr
->
waô
,ávr->
a˘ive_msg_cou¡
 == 0);

676 
	}
}

678 
ây_›î©i⁄s
 
	g•i_£rül_›s
 = {

679 .
›í
 = 
•i_£rül_ây_›í
,

680 .
	g˛o£
 = 
•i_£rül_ây_˛o£
,

681 .
	gwrôe
 = 
•i_£rül_ây_wrôe
,

682 .
	gwrôe_room
 = 
•i_£rül_ây_wrôe_room
,

683 .
	gwaô_u¡û_£¡

•i_£rül_ây_waô_u¡û_£¡


686 
	$•i_£rül_p‹t_då_πs
(
ây_p‹t
 *
p‹t
, 
⁄
){

687 
•i_ây_dev
 *
avr
 = 
	`p‹t_to_avr_dev
(
p‹t
);

689 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

690 
	}
}

692 c⁄° 
ây_p‹t_›î©i⁄s
 
	g•i_£rül_p‹t_›s
 = {

693 .
då_πs
 = 
•i_£rül_p‹t_då_πs
,

697 
úqªtu∫_t
 
	$•i_ây_d©a_ªady_öt
(
úq
, *
¨g
)

699 
•i_ây_dev
 *
avr
 = 
¨g
;

700 
úq_°©us
;

702 
	`dev_vdbg
(&
avr
->
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

704 
úq_°©us
 = 
	`__©h79_gpio_gë_öt_≥ndög
();

705 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:%d 0x%x\n", 
__func__
, 
__LINE__
, 
úq_°©us
);

707 i‡(!(
úq_°©us
 & (1 << 
avr
->
gpio_úq
))) {

708 
	`dev_dbg
(&
avr
->
•i
->
dev
, "%s:%d spuriou†öãºu±\n", 
__func__
, 
__LINE__
);

709  
IRQ_NONE
;

712 i‡(
avr
->
cou¡_öãºu±_byã
 > 0) {

713 
	`dev_dbg
(&
avr
->
•i
->
dev
,

715 
__func__
, 
__LINE__
, 
avr
->
cou¡_öãºu±_byã
);

716  
IRQ_HANDLED
;

717 } i‡(
avr
->
cou¡_öãºu±_byã
 != 0)

718 
	`dev_w¨n
(&
avr
->
•i
->
dev
,

720 
avr
->
cou¡_öãºu±_byã
);

722 
avr
->
cou¡_öãºu±_byã
 = 2;

724 
	`•i_ây_£nd_mesßge
(
avr
, 
NULL
, 0);

725 
	`•i_ây_£nd_mesßge
(
avr
, 
NULL
, 0);

727  
IRQ_HANDLED
;

728 
	}
}

730 
	$•i_ây_ªgi°î_öãºu±
(
•i_ây_dev
 *
avr
,

731 
gpio_úq
)

733 
îr
 = 0;

736 
avr
->
gpio_úq
 = gpio_irq;

737 
îr
 = 
	`gpio_ªque°
(
avr
->
gpio_úq
, "DRDY");

738 i‡(
îr
) {

739 
	`dev_îr
(&
avr
->
•i
->
dev
, "ˇ¬Ÿ gë GPIO (%u)\n", 
gpio_úq
);

740  
îr
;

742 
	`gpio_dúe˘i⁄_öput
(
avr
->
gpio_úq
);

743 
avr
->
•i
->
úq
 = 
	`•i_ây_gpio_to_úq
◊vr->
gpio_úq
);

744 i‡(
avr
->
•i
->
úq
 < 0)

745 
îr_ªq_úq_gpio
;

748 
	`dev_îr
(&
avr
->
•i
->
dev
, "£âög gpiÿ%uÅÿöãºu±É«bÀd\n",ávr->
gpio_úq
);

749 
	`__©h79_gpio_£t_öt_mode
(
avr
->
gpio_úq
, 1);

750 
	`__©h79_gpio_£t_öt_íabÀ
(
avr
->
gpio_úq
, 1);

760 
	`dev_îr
(&
avr
->
•i
->
dev
, "£âög gpiÿ%uÅÿöãºu±Édgêmode\n",ávr->
gpio_úq
);

761 
	`__©h79_gpio_£t_öt_ty≥
(
avr
->
gpio_úq
, 0);

762 
	`dev_îr
(&
avr
->
•i
->
dev
, "£âög gpiÿ%uÅÿöãºu±Édgêmode\n",ávr->
gpio_úq
);

763 
	`__©h79_gpio_£t_öt_pﬁ¨ôy
(
avr
->
gpio_úq
, 1);

765 
îr
 = 
	`ªque°_úq
(
avr
->
•i
->
úq
, 
•i_ây_d©a_ªady_öt
, 
SPI_TTY_IRQ
,

766 
KBUILD_MODNAME
, 
avr
);

767 
	`dev_îr
(&
avr
->
•i
->
dev
, "ªque° irqÑëu∫ed %d\n", 
îr
);

768 i‡(
îr
)

769 
îr_ªq_úq
;

773 
îr_ªq_úq
:

774 
	`__©h79_gpio_£t_öt_mode
(
avr
->
gpio_úq
, 0);

775 
	`__©h79_gpio_£t_öt_íabÀ
(
avr
->
gpio_úq
, 0);

776 
îr_ªq_úq_gpio
:

777 
	`gpio_‰ì
(
avr
->
gpio_úq
);

778  
îr
;

779 
	}
}

781 
	$•i_ây_uƒegi°î_öãºu±
(
•i_ây_dev
 *
avr
)

783 
	`‰ì_úq
(
avr
->
•i
->
úq
,ávr);

784 
	`__©h79_gpio_£t_öt_mode
(
avr
->
gpio_úq
, 0);

785 
	`__©h79_gpio_£t_öt_íabÀ
(
avr
->
gpio_úq
, 0);

786 
	`gpio_‰ì
(
avr
->
gpio_úq
);

787 
	}
}

791 
	$•i_ây_¥obe
(
•i_devi˚
 *
•i
)

793 
•i_ây_dev
 *
avr
;

794 
îr
 = 0;

795 
Êags
;

796 
	`dev_îr
(&
avr
->
•i
->
dev
, "starting initialization \n");

797 i‡(
dev_cou¡
 >
SPI_SERIAL_TTY_MINORS
){

798 
	`¥ötk
(
KERN_ERR
 "no minor\n");

799  -
ENOMEM
;

801 
	`dev_vdbg
(&
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

803 
avr
 = 
	`kzÆloc
((
•i_ây_dev
), 
GFP_KERNEL
);

804 i‡(!
avr
){

805 
	`dev_îr
(&
avr
->
•i
->
dev
, "no kzalloc\n");

806  -
ENOMEM
;

808 
	`•i_£t_drvd©a
(
•i
, 
avr
);

809 
avr
->
•i
 = spi;

810 
	`•ö_lock_öô
(&
avr
->
lock
);

811 
avr
->
tx_ign‹e
 = 
SPI_DEFAULT_IGNORE_TX
;

812 
avr
->
rx_ign‹e
 = 
SPI_DEFAULT_IGNORE_RX
;

814 
îr
 = 
	`•i_ây_ªgi°î_öãºu±
(
avr
,

815 ()
•i
->
dev
.
∂©f‹m_d©a
);

816 i‡(
îr
)

817 
îr_ªq_úq
;

818 
	`dev_îr
(&
avr
->
•i
->
dev
, "interruptÑegistered\n");

820 
	`ây_p‹t_öô
(&
avr
->
p‹t
);

821 
avr
->
p‹t
.
›s
 = &
•i_£rül_p‹t_›s
;

822 
	`dev_îr
(&
avr
->
•i
->
dev
, "port initialized\n");

824 
avr
->
ây_mö‹
 = 
dev_cou¡
;

825 
avr
->
ây_dev
 = 
	`ây_p‹t_ªgi°î_devi˚_©å
(&avr->
p‹t
,

826 
•i_£rül_ây_drivî
, 
avr
->
ây_mö‹
, &avr->
•i
->
dev
,

827 
NULL
, 
•i_ây_©å_groups
);

828 i‡(
	`IS_ERR
(
avr
->
ây_dev
)) {

829 
îr
 = 
	`PTR_ERR
(
avr
->
ây_dev
);

830 
îr_ªq_ây
;

832 
	`dev_îr
(&
avr
->
•i
->
dev
, "portÑegistered\n");

833 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

834 
dev_cou¡
++;

835 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

838 
•i_ây_Æl_dev
[
avr
->
ây_mö‹
] =ávr;

842 
îr_ªq_ây
:

843 
	`ây_p‹t_de°roy
(&
avr
->
p‹t
);

844 
	`•i_ây_uƒegi°î_öãºu±
(
avr
);

845 
îr_ªq_úq
:

846 
	`k‰ì
(
avr
);

848  
îr
;

849 
	}
}

851 
	$•i_ây_ªmove
(
•i_devi˚
 *
•i
)

853 
•i_ây_dev
 *
avr
;

854 
Êags
;

856 
	`dev_vdbg
(&
•i
->
dev
, "%s:%d\n", 
__func__
, 
__LINE__
);

858 
avr
 = 
	`•i_gë_drvd©a
(
•i
);

860 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

861 i‡(
avr
->
ây_mö‹
 =
dev_cou¡
 - 1)

862 
dev_cou¡
--;

863 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

866 
•i_ây_Æl_dev
[
avr
->
ây_mö‹
] = 
NULL
;

867 
	`ây_uƒegi°î_devi˚
(
•i_£rül_ây_drivî
, 
avr
->
ây_mö‹
);

868 
	`ây_p‹t_de°roy
(&
avr
->
p‹t
);

869 
	`•i_ây_uƒegi°î_öãºu±
(
avr
);

870 
	`k‰ì
(
avr
);

873 
	}
}

876 
	ead788x_devi˚s
 {

877 
	mID_ATMEGA32U4
,

880 c⁄° 
•i_devi˚_id
 
	g•i_ây_id
[] = {

881 {"©mega32u4", 
ID_ATMEGA32U4
},

885 
•i_drivî
 
	g•i_ây_drivî
 = {

886 .
drivî
 = {

887 .
«me
 = 
KBUILD_MODNAME
,

888 .
	gbus
 = &
•i_bus_ty≥
,

889 .
	gow√r
 = 
THIS_MODULE
,

891 .
	gid_èbÀ
 = 
•i_ây_id
,

892 .
	g¥obe
 = 
•i_ây_¥obe
,

893 .
	gªmove
 = 
•i_ây_ªmove
,

896 
	$•i_£rül_öô
()

898 
îr
;

904 
•i_£rül_ây_drivî
 = 
	`ây_Æloc_drivî
(
SPI_SERIAL_TTY_MINORS
,

905 
TTY_DRIVER_DYNAMIC_DEV
);

906 i‡(!
•i_£rül_ây_drivî
)

907  -
ENOMEM
;

912 
•i_£rül_ây_drivî
->
drivî_«me
 = "spiserial";

913 
•i_£rül_ây_drivî
->
«me
 = "ttySPI";

914 
•i_£rül_ây_drivî
->
maj‹
 = 0;

915 
•i_£rül_ây_drivî
->
mö‹_°¨t
 = 0;

916 
•i_£rül_ây_drivî
->
ty≥
 = 
TTY_DRIVER_TYPE_SERIAL
;

917 
•i_£rül_ây_drivî
->
subty≥
 = 
SERIAL_TYPE_NORMAL
;

919 
	`ây_£t_›î©i⁄s
(
•i_£rül_ây_drivî
, &
•i_£rül_›s
);

920 
îr
 = 
	`ây_ªgi°î_drivî
(
•i_£rül_ây_drivî
);

921 i‡(
îr
) {

922 
	`¥_îr
("%†-Åty_ªgi°î_drivî faûed\n", 
__func__
);

923 
exô_ªg_drivî
;

928 
exô_ªg_drivî
:

929 
	`put_ây_drivî
(
•i_£rül_ây_drivî
);

930  
îr
;

931 
	}
}

933 
	$•i_ây_öô
()

935 
	`¥_öfo
("%s: SPI TTY INIT", 
__func__
);

936 
	`•ö_lock_öô
(&
lock
);

938 
	`•i_£rül_öô
();

939  
	`•i_ªgi°î_drivî
(&
•i_ây_drivî
);

940 
	}
}

942 
	$•i_ây_exô
()

944 
	`¥_öfo
("%s: SPI TTY EXIT", 
__func__
);

946 
	`drivî_uƒegi°î
(&
•i_ây_drivî
.
drivî
);

947 
	}
}

949 
moduÀ_öô
(
•i_ây_öô
);

950 
moduÀ_exô
(
•i_ây_exô
);

951 
MODULE_AUTHOR
("Federico Vaga <federicov@linino.org>");

952 
MODULE_LICENSE
("GPL");

	@linux/ar71xx/files/drivers/spi/spi-vsc7385.c

13 
	~<löux/ty≥s.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/devi˚.h
>

19 
	~<löux/bô›s.h
>

20 
	~<löux/fúmw¨e.h
>

21 
	~<löux/•i/•i.h
>

22 
	~<löux/•i/vsc7385.h
>

24 
	#DRV_NAME
 "•i-vsc7385"

	)

25 
	#DRV_DESC
 "Vôes£ VSC7385 GbôÉthî√àswôch drivî"

	)

26 
	#DRV_VERSION
 "0.1.0"

	)

28 
	#VSC73XX_BLOCK_MAC
 0x1

	)

29 
	#VSC73XX_BLOCK_2
 0x2

	)

30 
	#VSC73XX_BLOCK_MII
 0x3

	)

31 
	#VSC73XX_BLOCK_4
 0x4

	)

32 
	#VSC73XX_BLOCK_5
 0x5

	)

33 
	#VSC73XX_BLOCK_SYSTEM
 0x7

	)

35 
	#VSC73XX_SUBBLOCK_PORT_0
 0

	)

36 
	#VSC73XX_SUBBLOCK_PORT_1
 1

	)

37 
	#VSC73XX_SUBBLOCK_PORT_2
 2

	)

38 
	#VSC73XX_SUBBLOCK_PORT_3
 3

	)

39 
	#VSC73XX_SUBBLOCK_PORT_4
 4

	)

40 
	#VSC73XX_SUBBLOCK_PORT_MAC
 6

	)

43 
	#VSC73XX_MAC_CFG
 0x0

	)

44 
	#VSC73XX_ADVPORTM
 0x19

	)

45 
	#VSC73XX_RXOCT
 0x50

	)

46 
	#VSC73XX_TXOCT
 0x51

	)

47 
	#VSC73XX_C_RX0
 0x52

	)

48 
	#VSC73XX_C_RX1
 0x53

	)

49 
	#VSC73XX_C_RX2
 0x54

	)

50 
	#VSC73XX_C_TX0
 0x55

	)

51 
	#VSC73XX_C_TX1
 0x56

	)

52 
	#VSC73XX_C_TX2
 0x57

	)

53 
	#VSC73XX_C_CFG
 0x58

	)

56 
	#VSC73XX_MAC_CFG_WEXC_DIS
 (1 << 31)

	)

57 
	#VSC73XX_MAC_CFG_PORT_RST
 (1 << 29)

	)

58 
	#VSC73XX_MAC_CFG_TX_EN
 (1 << 28)

	)

59 
	#VSC73XX_MAC_CFG_SEED_LOAD
 (1 << 27)

	)

60 
	#VSC73XX_MAC_CFG_FDX
 (1 << 18)

	)

61 
	#VSC73XX_MAC_CFG_GIGE
 (1 << 17)

	)

62 
	#VSC73XX_MAC_CFG_RX_EN
 (1 << 16)

	)

63 
	#VSC73XX_MAC_CFG_VLAN_DBLAWR
 (1 << 15)

	)

64 
	#VSC73XX_MAC_CFG_VLAN_AWR
 (1 << 14)

	)

65 
	#VSC73XX_MAC_CFG_100_BASE_T
 (1 << 13)

	)

66 
	#VSC73XX_MAC_CFG_TX_IPG
(
x
Ë(((xË& 0x1fË<< 6)

	)

67 
	#VSC73XX_MAC_CFG_MAC_RX_RST
 (1 << 5)

	)

68 
	#VSC73XX_MAC_CFG_MAC_TX_RST
 (1 << 4)

	)

69 
	#VSC73XX_MAC_CFG_BIT2
 (1 << 2)

	)

70 
	#VSC73XX_MAC_CFG_CLK_SEL
(
x
Ë((xË& 0x3)

	)

73 
	#VSC73XX_ADVPORTM_IFG_PPM
 (1 << 7)

	)

74 
	#VSC73XX_ADVPORTM_EXC_COL_CONT
 (1 << 6)

	)

75 
	#VSC73XX_ADVPORTM_EXT_PORT
 (1 << 5)

	)

76 
	#VSC73XX_ADVPORTM_INV_GTX
 (1 << 4)

	)

77 
	#VSC73XX_ADVPORTM_ENA_GTX
 (1 << 3)

	)

78 
	#VSC73XX_ADVPORTM_DDR_MODE
 (1 << 2)

	)

79 
	#VSC73XX_ADVPORTM_IO_LOOPBACK
 (1 << 1)

	)

80 
	#VSC73XX_ADVPORTM_HOST_LOOPBACK
 (1 << 0)

	)

83 
	#VSC73XX_MII_STAT
 0x0

	)

84 
	#VSC73XX_MII_CMD
 0x1

	)

85 
	#VSC73XX_MII_DATA
 0x2

	)

88 
	#VSC73XX_ICPU_SIPAD
 0x01

	)

89 
	#VSC73XX_ICPU_CLOCK_DELAY
 0x05

	)

90 
	#VSC73XX_ICPU_CTRL
 0x10

	)

91 
	#VSC73XX_ICPU_ADDR
 0x11

	)

92 
	#VSC73XX_ICPU_SRAM
 0x12

	)

93 
	#VSC73XX_ICPU_MBOX_VAL
 0x15

	)

94 
	#VSC73XX_ICPU_MBOX_SET
 0x16

	)

95 
	#VSC73XX_ICPU_MBOX_CLR
 0x17

	)

96 
	#VSC73XX_ICPU_CHIPID
 0x18

	)

97 
	#VSC73XX_ICPU_GPIO
 0x34

	)

99 
	#VSC73XX_ICPU_CTRL_CLK_DIV
 (1 << 8)

	)

100 
	#VSC73XX_ICPU_CTRL_SRST_HOLD
 (1 << 7)

	)

101 
	#VSC73XX_ICPU_CTRL_BOOT_EN
 (1 << 3)

	)

102 
	#VSC73XX_ICPU_CTRL_EXT_ACC_EN
 (1 << 2)

	)

103 
	#VSC73XX_ICPU_CTRL_CLK_EN
 (1 << 1)

	)

104 
	#VSC73XX_ICPU_CTRL_SRST
 (1 << 0)

	)

106 
	#VSC73XX_ICPU_CHIPID_ID_SHIFT
 12

	)

107 
	#VSC73XX_ICPU_CHIPID_ID_MASK
 0xffff

	)

108 
	#VSC73XX_ICPU_CHIPID_REV_SHIFT
 28

	)

109 
	#VSC73XX_ICPU_CHIPID_REV_MASK
 0xf

	)

110 
	#VSC73XX_ICPU_CHIPID_ID_7385
 0x7385

	)

111 
	#VSC73XX_ICPU_CHIPID_ID_7395
 0x7395

	)

113 
	#VSC73XX_CMD_MODE_READ
 0

	)

114 
	#VSC73XX_CMD_MODE_WRITE
 1

	)

115 
	#VSC73XX_CMD_MODE_SHIFT
 4

	)

116 
	#VSC73XX_CMD_BLOCK_SHIFT
 5

	)

117 
	#VSC73XX_CMD_BLOCK_MASK
 0x7

	)

118 
	#VSC73XX_CMD_SUBBLOCK_MASK
 0xf

	)

120 
	#VSC7385_CLOCK_DELAY
 ((3 << 4Ë| 3)

	)

121 
	#VSC7385_CLOCK_DELAY_MASK
 ((3 << 4Ë| 3)

	)

123 
	#VSC73XX_ICPU_CTRL_STOP
 (
VSC73XX_ICPU_CTRL_SRST_HOLD
 | \

124 
VSC73XX_ICPU_CTRL_BOOT_EN
 | \

125 
VSC73XX_ICPU_CTRL_EXT_ACC_EN
)

	)

127 
	#VSC73XX_ICPU_CTRL_START
 (
VSC73XX_ICPU_CTRL_CLK_DIV
 | \

128 
VSC73XX_ICPU_CTRL_BOOT_EN
 | \

129 
VSC73XX_ICPU_CTRL_CLK_EN
 | \

130 
VSC73XX_ICPU_CTRL_SRST
)

	)

132 
	#VSC7385_ADVPORTM_MASK
 (
VSC73XX_ADVPORTM_IFG_PPM
 | \

133 
VSC73XX_ADVPORTM_EXC_COL_CONT
 | \

134 
VSC73XX_ADVPORTM_EXT_PORT
 | \

135 
VSC73XX_ADVPORTM_INV_GTX
 | \

136 
VSC73XX_ADVPORTM_ENA_GTX
 | \

137 
VSC73XX_ADVPORTM_DDR_MODE
 | \

138 
VSC73XX_ADVPORTM_IO_LOOPBACK
 | \

139 
VSC73XX_ADVPORTM_HOST_LOOPBACK
)

	)

141 
	#VSC7385_ADVPORTM_INIT
 (
VSC73XX_ADVPORTM_EXT_PORT
 | \

142 
VSC73XX_ADVPORTM_ENA_GTX
 | \

143 
VSC73XX_ADVPORTM_DDR_MODE
)

	)

145 
	#VSC7385_MAC_CFG_RESET
 (
VSC73XX_MAC_CFG_PORT_RST
 | \

146 
VSC73XX_MAC_CFG_MAC_RX_RST
 | \

147 
VSC73XX_MAC_CFG_MAC_TX_RST
)

	)

149 
	#VSC73XX_MAC_CFG_INIT
 (
VSC73XX_MAC_CFG_TX_EN
 | \

150 
VSC73XX_MAC_CFG_FDX
 | \

151 
VSC73XX_MAC_CFG_GIGE
 | \

152 
VSC73XX_MAC_CFG_RX_EN
)

	)

154 
	#VSC73XX_RESET_DELAY
 100

	)

156 
	svsc7385
 {

157 
•i_devi˚
 *
	m•i
;

158 
muãx
 
	mlock
;

159 
vsc7385_∂©f‹m_d©a
 *
	mpd©a
;

162 
	$vsc7385_is_addr_vÆid
(
u8
 
block
, u8 
subblock
)

164 
block
) {

165 
VSC73XX_BLOCK_MAC
:

166 
subblock
) {

173 
VSC73XX_BLOCK_2
:

174 
VSC73XX_BLOCK_SYSTEM
:

175 
subblock
) {

181 
VSC73XX_BLOCK_MII
:

182 
VSC73XX_BLOCK_4
:

183 
VSC73XX_BLOCK_5
:

184 
subblock
) {

192 
	}
}

194 
ölöe
 
u8
 
	$vsc7385_make_addr
(
u8
 
mode
, u8 
block
, u8 
subblock
)

196 
u8
 
ªt
;

198 
ªt
 = (
block
 & 
VSC73XX_CMD_BLOCK_MASK
Ë<< 
VSC73XX_CMD_BLOCK_SHIFT
;

199 
ªt
 |(
mode
 & 1Ë<< 
VSC73XX_CMD_MODE_SHIFT
;

200 
ªt
 |
subblock
 & 
VSC73XX_CMD_SUBBLOCK_MASK
;

202  
ªt
;

203 
	}
}

205 
	$vsc7385_ªad
(
vsc7385
 *
vsc
, 
u8
 
block
, u8 
subblock
, u8 
ªg
,

206 
u32
 *
vÆue
)

208 
u8
 
cmd
[4];

209 
u8
 
buf
[4];

210 
•i_å™s„r
 
t
[2];

211 
•i_mesßge
 
m
;

212 
îr
;

214 i‡(!
	`vsc7385_is_addr_vÆid
(
block
, 
subblock
))

215  -
EINVAL
;

217 
	`•i_mesßge_öô
(&
m
);

219 
	`mem£t
(&
t
, 0, (t));

221 
t
[0].
tx_buf
 = 
cmd
;

222 
t
[0].
Àn
 = (
cmd
);

223 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

225 
t
[1].
rx_buf
 = 
buf
;

226 
t
[1].
Àn
 = (
buf
);

227 
	`•i_mesßge_add_èû
(&
t
[1], &
m
);

229 
cmd
[0] = 
	`vsc7385_make_addr
(
VSC73XX_CMD_MODE_READ
, 
block
, 
subblock
);

230 
cmd
[1] = 
ªg
;

231 
cmd
[2] = 0;

232 
cmd
[3] = 0;

234 
	`muãx_lock
(&
vsc
->
lock
);

235 
îr
 = 
	`•i_sync
(
vsc
->
•i
, &
m
);

236 
	`muãx_u∆ock
(&
vsc
->
lock
);

238 i‡(
îr
)

239  
îr
;

241 *
vÆue
 = (((
u32
Ë
buf
[0]) << 24) | (((u32) buf[1]) << 16) |

242 (((
u32
Ë
buf
[2]) << 8) | ((u32) buf[3]);

245 
	}
}

248 
	$vsc7385_wrôe
(
vsc7385
 *
vsc
, 
u8
 
block
, u8 
subblock
, u8 
ªg
,

249 
u32
 
vÆue
)

251 
u8
 
cmd
[2];

252 
u8
 
buf
[4];

253 
•i_å™s„r
 
t
[2];

254 
•i_mesßge
 
m
;

255 
îr
;

257 i‡(!
	`vsc7385_is_addr_vÆid
(
block
, 
subblock
))

258  -
EINVAL
;

260 
	`•i_mesßge_öô
(&
m
);

262 
	`mem£t
(&
t
, 0, (t));

264 
t
[0].
tx_buf
 = 
cmd
;

265 
t
[0].
Àn
 = (
cmd
);

266 
	`•i_mesßge_add_èû
(&
t
[0], &
m
);

268 
t
[1].
tx_buf
 = 
buf
;

269 
t
[1].
Àn
 = (
buf
);

270 
	`•i_mesßge_add_èû
(&
t
[1], &
m
);

272 
cmd
[0] = 
	`vsc7385_make_addr
(
VSC73XX_CMD_MODE_WRITE
, 
block
, 
subblock
);

273 
cmd
[1] = 
ªg
;

275 
buf
[0] = (
vÆue
 >> 24) & 0xff;

276 
buf
[1] = (
vÆue
 >> 16) & 0xff;

277 
buf
[2] = (
vÆue
 >> 8) & 0xff;

278 
buf
[3] = 
vÆue
 & 0xff;

280 
	`muãx_lock
(&
vsc
->
lock
);

281 
îr
 = 
	`•i_sync
(
vsc
->
•i
, &
m
);

282 
	`muãx_u∆ock
(&
vsc
->
lock
);

284  
îr
;

285 
	}
}

287 
ölöe
 
	$vsc7385_wrôe_vîify
(
vsc7385
 *
vsc
, 
u8
 
block
,

288 
u8
 
subblock
, u8 
ªg
, 
u32
 
vÆue
,

289 
u32
 
ªad_mask
, u32 
ªad_vÆ
)

291 
•i_devi˚
 *
•i
 = 
vsc
->spi;

292 
u32
 
t
;

293 
îr
;

295 
îr
 = 
	`vsc7385_wrôe
(
vsc
, 
block
, 
subblock
, 
ªg
, 
vÆue
);

296 i‡(
îr
)

297  
îr
;

299 
îr
 = 
	`vsc7385_ªad
(
vsc
, 
block
, 
subblock
, 
ªg
, &
t
);

300 i‡(
îr
)

301  
îr
;

303 i‡((
t
 & 
ªad_mask
Ë!
ªad_vÆ
) {

304 
	`dev_îr
(&
•i
->
dev
, "register writeÉrror\n");

305  -
EIO
;

309 
	}
}

311 
ölöe
 
	$vsc7385_£t_˛ock_dñay
(
vsc7385
 *
vsc
, 
u32
 
vÆ
)

313  
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

314 
VSC73XX_ICPU_CLOCK_DELAY
, 
vÆ
);

315 
	}
}

317 
ölöe
 
	$vsc7385_gë_˛ock_dñay
(
vsc7385
 *
vsc
, 
u32
 *
vÆ
)

319  
	`vsc7385_ªad
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

320 
VSC73XX_ICPU_CLOCK_DELAY
, 
vÆ
);

321 
	}
}

323 
ölöe
 
	$vsc7385_i˝u_°›
(
vsc7385
 *
vsc
)

325  
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

326 
VSC73XX_ICPU_CTRL_STOP
);

327 
	}
}

329 
ölöe
 
	$vsc7385_i˝u_°¨t
(
vsc7385
 *
vsc
)

331  
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

332 
VSC73XX_ICPU_CTRL_START
);

333 
	}
}

335 
ölöe
 
	$vsc7385_i˝u_ª£t
(
vsc7385
 *
vsc
)

337 
rc
;

339 
rc
 = 
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0, 
VSC73XX_ICPU_ADDR
,

341 i‡(
rc
)

342 
	`dev_îr
(&
vsc
->
•i
->
dev
,

343 "couldÇŸÑe£àmi¸ocode,Éº=%d\n", 
rc
);

345  
rc
;

346 
	}
}

348 
	$vsc7385_u∂ﬂd_ucode
(
vsc7385
 *
vsc
)

350 
•i_devi˚
 *
•i
 = 
vsc
->spi;

351 c⁄° 
fúmw¨e
 *firmware;

352 *
ucode_«me
;

353 *
dp
;

354 
curVÆ
;

355 
i
;

356 
diffs
;

357 
rc
;

359 
ucode_«me
 = (
vsc
->
pd©a
->ucode_name) ? vsc->pdata->ucode_name

361 
rc
 = 
	`ªque°_fúmw¨e
(&
fúmw¨e
, 
ucode_«me
, &
•i
->
dev
);

362 i‡(
rc
) {

363 
	`dev_îr
(&
•i
->
dev
, "request_firmware failed,Érr=%d\n",

364 
rc
);

365  
rc
;

368 
rc
 = 
	`vsc7385_i˝u_°›
(
vsc
);

369 i‡(
rc
)

370 
out
;

372 
rc
 = 
	`vsc7385_i˝u_ª£t
(
vsc
);

373 i‡(
rc
)

374 
out
;

376 
	`dev_öfo
(&
•i
->
dev
, "uploading microcode...\n");

378 
dp
 = (*Ë
fúmw¨e
->
d©a
;

379 
i
 = 0; i < 
fúmw¨e
->
size
; i++) {

380 
rc
 = 
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

381 
VSC73XX_ICPU_SRAM
, *
dp
++);

382 i‡(
rc
) {

383 
	`dev_îr
(&
•i
->
dev
, "couldÇotÜoad microcode,Érr=%d\n",

384 
rc
);

385 
out
;

389 
rc
 = 
	`vsc7385_i˝u_ª£t
(
vsc
);

390 i‡(
rc
)

391 
out
;

393 
	`dev_öfo
(&
•i
->
dev
, "verifying microcode...\n");

395 
dp
 = (*Ë
fúmw¨e
->
d©a
;

396 
diffs
 = 0;

397 
i
 = 0; i < 
fúmw¨e
->
size
; i++) {

398 
rc
 = 
	`vsc7385_ªad
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

399 
VSC73XX_ICPU_SRAM
, &
curVÆ
);

400 i‡(
rc
) {

401 
	`dev_îr
(&
•i
->
dev
, "couldÇotÑead microcode %d\n",

402 
rc
);

403 
out
;

406 i‡(
curVÆ
 > 0xff) {

407 
	`dev_îr
(&
•i
->
dev
, "bad valÑead: %04x : %02x %02x\n",

408 
i
, *
dp
, 
curVÆ
);

409 
rc
 = -
EIO
;

410 
out
;

413 i‡((
curVÆ
 & 0xffË!*
dp
) {

414 
diffs
++;

415 
	`dev_îr
(&
•i
->
dev
, "verifyÉrror: %04x : %02x %02x\n",

416 
i
, *
dp
, 
curVÆ
);

418 i‡(
diffs
 > 4)

421 
dp
++;

424 i‡(
diffs
) {

425 
	`dev_îr
(&
•i
->
dev
, "microcode verification failed\n");

426 
rc
 = -
EIO
;

427 
out
;

430 
	`dev_öfo
(&
•i
->
dev
, "microcode uploaded\n");

432 
rc
 = 
	`vsc7385_i˝u_°¨t
(
vsc
);

434 
out
:

435 
	`ªÀa£_fúmw¨e
(
fúmw¨e
);

436  
rc
;

437 
	}
}

439 
	$vsc7385_£tup
(
vsc7385
 *
vsc
)

441 
vsc7385_∂©f‹m_d©a
 *
pd©a
 = 
vsc
->pdata;

442 
u32
 
t
;

443 
îr
;

445 
îr
 = 
	`vsc7385_wrôe_vîify
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

446 
VSC73XX_ICPU_CLOCK_DELAY
,

447 
VSC7385_CLOCK_DELAY
,

448 
VSC7385_CLOCK_DELAY_MASK
,

449 
VSC7385_CLOCK_DELAY
);

450 i‡(
îr
)

451 
îr
;

453 
îr
 = 
	`vsc7385_wrôe_vîify
(
vsc
, 
VSC73XX_BLOCK_MAC
,

454 
VSC73XX_SUBBLOCK_PORT_MAC
, 
VSC73XX_ADVPORTM
,

455 
VSC7385_ADVPORTM_INIT
,

456 
VSC7385_ADVPORTM_MASK
,

457 
VSC7385_ADVPORTM_INIT
);

458 i‡(
îr
)

459 
îr
;

461 
îr
 = 
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_MAC
, 
VSC73XX_SUBBLOCK_PORT_MAC
,

462 
VSC73XX_MAC_CFG
, 
VSC7385_MAC_CFG_RESET
);

463 i‡(
îr
)

464 
îr
;

466 
t
 = 
VSC73XX_MAC_CFG_INIT
;

467 
t
 |
	`VSC73XX_MAC_CFG_TX_IPG
(
pd©a
->
mac_cfg
.
tx_ùg
);

468 
t
 |
	`VSC73XX_MAC_CFG_CLK_SEL
(
pd©a
->
mac_cfg
.
˛k_£l
);

469 i‡(
pd©a
->
mac_cfg
.
bô2
)

470 
t
 |
VSC73XX_MAC_CFG_BIT2
;

472 
îr
 = 
	`vsc7385_wrôe
(
vsc
, 
VSC73XX_BLOCK_MAC
, 
VSC73XX_SUBBLOCK_PORT_MAC
,

473 
VSC73XX_MAC_CFG
, 
t
);

474 i‡(
îr
)

475 
îr
;

479 
îr
:

480  
îr
;

481 
	}
}

483 
	$vsc7385_dëe˘
(
vsc7385
 *
vsc
)

485 
•i_devi˚
 *
•i
 = 
vsc
->spi;

486 
u32
 
t
;

487 
u32
 
id
;

488 
u32
 
ªv
;

489 
îr
;

491 
îr
 = 
	`vsc7385_ªad
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

492 
VSC73XX_ICPU_MBOX_VAL
, &
t
);

493 i‡(
îr
) {

494 
	`dev_îr
(&
•i
->
dev
, "u«bÀÅÿªad maûbox,Éº=%d\n", 
îr
);

495  
îr
;

498 i‡(
t
 == 0xffffffff) {

499 
	`dev_dbg
(&
•i
->
dev
, "assert chipÑeset\n");

500 i‡(
vsc
->
pd©a
->
ª£t
)

501 
vsc
->
pd©a
->
	`ª£t
();

505 
îr
 = 
	`vsc7385_ªad
(
vsc
, 
VSC73XX_BLOCK_SYSTEM
, 0,

506 
VSC73XX_ICPU_CHIPID
, &
t
);

507 i‡(
îr
) {

508 
	`dev_îr
(&
•i
->
dev
, "u«bÀÅÿªad chù id,Éº=%d\n", 
îr
);

509  
îr
;

512 
id
 = (
t
 >> 
VSC73XX_ICPU_CHIPID_ID_SHIFT
Ë& 
VSC73XX_ICPU_CHIPID_ID_MASK
;

513 
id
) {

514 
VSC73XX_ICPU_CHIPID_ID_7385
:

515 
VSC73XX_ICPU_CHIPID_ID_7395
:

518 
	`dev_îr
(&
•i
->
dev
, "unsuµ‹ãd chù, id=%04x\n", 
id
);

519  -
ENODEV
;

522 
ªv
 = (
t
 >> 
VSC73XX_ICPU_CHIPID_REV_SHIFT
) &

523 
VSC73XX_ICPU_CHIPID_REV_MASK
;

524 
	`dev_öfo
(&
•i
->
dev
, "VSC%04X (ªv. %dËswôch found\n", 
id
, 
ªv
);

527 
	}
}

529 
	$vsc7385_¥obe
(
•i_devi˚
 *
•i
)

531 
vsc7385
 *
vsc
;

532 
vsc7385_∂©f‹m_d©a
 *
pd©a
;

533 
îr
;

535 
	`¥ötk
(
KERN_INFO
 
DRV_DESC
 " vîsi⁄ " 
DRV_VERSION
"\n");

537 
pd©a
 = 
•i
->
dev
.
∂©f‹m_d©a
;

538 i‡(!
pd©a
) {

539 
	`dev_îr
(&
•i
->
dev
, "noÖlatform data specified\n");

540  -
ENODEV
;

543 
vsc
 = 
	`kzÆloc
((*vsc), 
GFP_KERNEL
);

544 i‡(!
vsc
) {

545 
	`dev_îr
(&
•i
->
dev
, "no memory forÖrivate data\n");

546  -
ENOMEM
;

549 
	`muãx_öô
(&
vsc
->
lock
);

550 
vsc
->
pd©a
 =Ödata;

551 
vsc
->
•i
 = 
	`•i_dev_gë
(spi);

552 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
vsc
);

554 
•i
->
mode
 = 
SPI_MODE_0
;

555 
•i
->
bôs_≥r_w‹d
 = 8;

556 
îr
 = 
	`•i_£tup
(
•i
);

557 i‡(
îr
) {

558 
	`dev_îr
(&
•i
->
dev
, "•i_£tu∞Áûed,Éº=%d\n", 
îr
);

559 
îr_drvd©a
;

562 
îr
 = 
	`vsc7385_dëe˘
(
vsc
);

563 i‡(
îr
) {

564 
	`dev_îr
(&
•i
->
dev
, "nÿchù found,Éº=%d\n", 
îr
);

565 
îr_drvd©a
;

568 
îr
 = 
	`vsc7385_u∂ﬂd_ucode
(
vsc
);

569 i‡(
îr
)

570 
îr_drvd©a
;

572 
îr
 = 
	`vsc7385_£tup
(
vsc
);

573 i‡(
îr
)

574 
îr_drvd©a
;

578 
îr_drvd©a
:

579 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
NULL
);

580 
	`k‰ì
(
vsc
);

581  
îr
;

582 
	}
}

584 
	$vsc7385_ªmove
(
•i_devi˚
 *
•i
)

586 
vsc7385_d©a
 *
vsc
;

588 
vsc
 = 
	`dev_gë_drvd©a
(&
•i
->
dev
);

589 
	`dev_£t_drvd©a
(&
•i
->
dev
, 
NULL
);

590 
	`k‰ì
(
vsc
);

593 
	}
}

595 
•i_drivî
 
	gvsc7385_drivî
 = {

596 .
drivî
 = {

597 .
«me
 = 
DRV_NAME
,

598 .
	gbus
 = &
•i_bus_ty≥
,

599 .
	gow√r
 = 
THIS_MODULE
,

601 .
	g¥obe
 = 
vsc7385_¥obe
,

602 .
	gªmove
 = 
vsc7385_ªmove
,

605 
__öô
 
	$vsc7385_öô
()

607  
	`•i_ªgi°î_drivî
(&
vsc7385_drivî
);

608 
	}
}

609 
moduÀ_öô
(
vsc7385_öô
);

611 
__exô
 
	$vsc7385_exô
()

613 
	`•i_uƒegi°î_drivî
(&
vsc7385_drivî
);

614 
	}
}

615 
moduÀ_exô
(
vsc7385_exô
);

617 
MODULE_DESCRIPTION
(
DRV_DESC
);

618 
MODULE_VERSION
(
DRV_VERSION
);

619 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

620 
MODULE_LICENSE
("GPL v2");

	@linux/ar71xx/files/include/linux/leds-nu801.h

1 #i‚de‡
__LEDS_NU801_H__


2 
	#__LEDS_NU801_H__


	)

16 
	~<löux/Àds.h
>

18 
	sÀd_nu801_ãm∂©e
 {

19 c⁄° *
	mdevi˚_«me
;

20 c⁄° *
	m«me
;

21 
	mnum_Àds
;

22 
	mcki
;

23 
	msdi
;

24 
	mÀi
;

25 
u32
 
	mndñay
;

26 
Àd_brighäess
 
	möô_brighäess
[3];

27 #ifde‡
CONFIG_LEDS_TRIGGERS


28 c⁄° *
	mdeÁu…_åiggî
;

30 c⁄° *
	mÀd_cﬁ‹s
[3];

33 
	sÀd_nu801_∂©f‹m_d©a
 {

34 
	mnum_c⁄åﬁÀrs
;

35 
Àd_nu801_ãm∂©e
 *
	mãm∂©e
;

	@linux/ar71xx/files/include/linux/nxp_74hc153.h

11 #i‚de‡
_NXP_74HC153_H


12 
	#_NXP_74HC153_H


	)

14 
	#NXP_74HC153_DRIVER_NAME
 "nxp-74hc153"

	)

16 
	snxp_74hc153_∂©f‹m_d©a
 {

17 
	mgpio_ba£
;

18 
	mgpio_pö_s0
;

19 
	mgpio_pö_s1
;

20 
	mgpio_pö_1y
;

21 
	mgpio_pö_2y
;

	@linux/ar71xx/files/include/linux/platform/ar934x_nfc.h

12 #i‚de‡
_AR934X_NFC_PLATFORM_H


13 
	#_AR934X_NFC_PLATFORM_H


	)

15 
	#AR934X_NFC_DRIVER_NAME
 "¨934x-nfc"

	)

17 
	gmtd_öfo
;

18 
	gmtd_∑πôi⁄
;

20 
	e¨934x_nfc_ecc_mode
 {

21 
	mAR934X_NFC_ECC_SOFT
 = 0,

22 
	mAR934X_NFC_ECC_HW
,

23 
	mAR934X_NFC_ECC_SOFT_BCH
,

26 
	s¨934x_nfc_∂©f‹m_d©a
 {

27 c⁄° *
	m«me
;

28 
mtd_∑πôi⁄
 *
	m∑πs
;

29 
	mƒ_∑πs
;

31 
boﬁ
 
	msw≠_dma
;

32 
¨934x_nfc_ecc_mode
 
	mecc_mode
;

34 (*
	mhw_ª£t
)(
boﬁ
 
	ma˘ive
);

35 (*
	m£À˘_chù
)(
	mchù_no
);

36 (*
	msˇn_fixup
)(
mtd_öfo
 *
	mmtd
);

	@linux/ar71xx/files/include/linux/platform_data/gpio-latch.h

1 #i‚de‡
_GPIO_LATCH_H_


2 
	#_GPIO_LATCH_H_


	)

4 
	#GPIO_LATCH_DRIVER_NAME
 "gpio-œtch"

	)

6 
	sgpio_œtch_∂©f‹m_d©a
 {

7 
	mba£
;

8 
	mnum_gpios
;

9 *
	mgpios
;

10 
	mÀ_gpio_ödex
;

11 
boﬁ
 
	mÀ_a˘ive_low
;

	@linux/ar71xx/files/include/linux/platform_data/rb91x_nand.h

1 #i‚de‡
_RB91X_NAND_H_


2 
	#_RB91X_NAND_H_


	)

4 
	#RB91X_NAND_DRIVER_NAME
 "rb91x-«nd"

	)

6 
	srb91x_«nd_∂©f‹m_d©a
 {

7 
	mgpio_n˚
;

8 
	mgpio_Æe
;

9 
	mgpio_˛e
;

10 
	mgpio_rdy
;

11 
	mgpio_ªad
;

12 
	mgpio_ƒw
;

13 
	mgpio_∆e
;

	@linux/ar71xx/files/include/linux/spi/vsc7385.h

11 
	svsc7385_∂©f‹m_d©a
 {

12 (*
	mª£t
)();

13 *
	mucode_«me
;

15 
u32
 
	mtx_ùg
:5;

16 
u32
 
	mbô2
:1;

17 
u32
 
	m˛k_£l
:3;

18 } 
	mmac_cfg
;

	@linux/ar71xx/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 
	#kNumT›Bôs
 24

	)

25 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

27 
	#kNumBôModñTŸÆBôs
 11

	)

28 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

29 
	#kNumMoveBôs
 5

	)

31 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

33 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

34 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

36 #ifde‡
_LZMA_IN_CB


38 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

39 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

40 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

42 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

46 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

48 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

52 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

54 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

55 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

56 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

58 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

59 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

60 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

62 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

64 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

65 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

66 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

67 
ªs
 -(1 << 
numLevñs
); }

	)

70 
	#kNumPosBôsMax
 4

	)

71 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

73 
	#kLíNumLowBôs
 3

	)

74 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

75 
	#kLíNumMidBôs
 3

	)

76 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

77 
	#kLíNumHighBôs
 8

	)

78 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

80 
	#LíChoi˚
 0

	)

81 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

82 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

83 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

84 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

85 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

88 
	#kNumSèãs
 12

	)

89 
	#kNumLôSèãs
 7

	)

91 
	#kSèπPosModñIndex
 4

	)

92 
	#kEndPosModñIndex
 14

	)

93 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

95 
	#kNumPosSlŸBôs
 6

	)

96 
	#kNumLíToPosSèãs
 4

	)

98 
	#kNumAlignBôs
 4

	)

99 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

101 
	#kM©chMöLí
 2

	)

103 
	#IsM©ch
 0

	)

104 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

105 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

106 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

107 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

108 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

109 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

110 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

111 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

112 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

113 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

114 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

116 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


117 
	gSt›CompûögDueBUG


120 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

122 
¥›0
;

123 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

124  
LZMA_RESULT_DATA_ERROR
;

125 
¥›0
 = 
¥›sD©a
[0];

126 i‡(
¥›0
 >= (9 * 5 * 5))

127  
LZMA_RESULT_DATA_ERROR
;

129 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

130 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

131 
¥›sRes
->
lc
 = 
¥›0
;

140 #ifde‡
_LZMA_OUT_READ


142 
i
;

143 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

144 
i
 = 0; i < 4; i++)

145 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

146 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

147 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

150  
LZMA_RESULT_OK
;

151 
	}
}

153 
	#kLzmaSåómWasFöishedId
 (-1)

	)

155 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

156 #ifde‡
_LZMA_IN_CB


157 
ILzmaInCÆlback
 *
InCÆlback
,

159 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

161 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

163 
CProb
 *
	gp
 = 
vs
->
Probs
;

164 
SizeT
 
	gnowPos
 = 0;

165 
Byã
 
	g¥eviousByã
 = 0;

166 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

167 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

168 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

170 #ifde‡
_LZMA_OUT_READ


172 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

173 
UI¡32
 
	gCode
 = 
vs
->
Code
;

174 #ifde‡
_LZMA_IN_CB


175 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

176 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

178 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

179 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

181 
	g°©e
 = 
vs
->
Sèã
;

182 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

183 
	gÀn
 = 
vs
->
RemaöLí
;

184 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

185 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

187 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

188 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

189 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

191 
Byã
 
	gãmpDi˘i⁄¨y
[4];

193 #i‚de‡
_LZMA_IN_CB


194 *
	göSizePro˚s£d
 = 0;

196 *
	goutSizePro˚s£d
 = 0;

197 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

198  
LZMA_RESULT_OK
;

200 i‡(
	gdi˘i⁄¨ySize
 == 0)

202 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

203 
	gdi˘i⁄¨ySize
 = 1;

204 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

207 i‡(
	gÀn
 =
kLzmaNìdInôId
)

210 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

211 
UI¡32
 
	gi
;

212 
	gi
 = 0; i < 
	gnumProbs
; i++)

213 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

214 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

215 
	g°©e
 = 0;

216 
	gglobÆPos
 = 0;

217 
	gdi°™˚Limô
 = 0;

218 
	gdi˘i⁄¨yPos
 = 0;

219 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

220 #ifde‡
_LZMA_IN_CB


221 
	gRC_INIT
;

223 
RC_INIT
(
öSåóm
, 
öSize
);

226 
	gÀn
 = 0;

228 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

230 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

231 i‡(
	gpos
 >
di˘i⁄¨ySize
)

232 
pos
 +
di˘i⁄¨ySize
;

233 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

234 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

235 
di˘i⁄¨yPos
 = 0;

236 
	gÀn
--;

238 i‡(
	gdi˘i⁄¨yPos
 == 0)

239 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

241 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

245 
	g°©e
 = 0;

246 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

247 
	gÀn
 = 0;

248 c⁄° 
Byã
 *
	gBuf„r
;

249 c⁄° 
Byã
 *
	gBuf„rLim
;

250 
UI¡32
 
	gR™ge
;

251 
UI¡32
 
	gCode
;

253 #i‚de‡
_LZMA_IN_CB


254 *
	göSizePro˚s£d
 = 0;

256 *
	goutSizePro˚s£d
 = 0;

259 
UI¡32
 
	gi
;

260 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

261 
	gi
 = 0; i < 
	gnumProbs
; i++)

262 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

265 #ifde‡
_LZMA_IN_CB


266 
	gRC_INIT
;

268 
RC_INIT
(
öSåóm
, 
öSize
);

273 
	gnowPos
 < 
	goutSize
)

275 
CProb
 *
	g¥ob
;

276 
UI¡32
 
	gbound
;

277 
	gposSèã
 = ()(

278 (
nowPos


279 #ifde‡
_LZMA_OUT_READ


280 + 
globÆPos


283 & 
posSèãMask
);

285 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

286 
IfBô0
(
¥ob
)

288 
	gsymbﬁ
 = 1;

289 
Upd©eBô0
(
¥ob
)

290 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

292 (
nowPos


293 #ifde‡
_LZMA_OUT_READ


294 + 
globÆPos


297 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

299 i‡(
	g°©e
 >
kNumLôSèãs
)

301 
m©chByã
;

302 #ifde‡
_LZMA_OUT_READ


303 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

304 i‡(
	gpos
 >
di˘i⁄¨ySize
)

305 
pos
 +
di˘i⁄¨ySize
;

306 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

308 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

312 
	gbô
;

313 
CProb
 *
	g¥obLô
;

314 
	gm©chByã
 <<= 1;

315 
	gbô
 = (
m©chByã
 & 0x100);

316 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

317 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

319 
	gsymbﬁ
 < 0x100);

321 
	gsymbﬁ
 < 0x100)

323 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

324 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

326 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

328 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

329 #ifde‡
_LZMA_OUT_READ


330 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

331 
	gdi°™˚Limô
++;

333 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

334 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

335 
di˘i⁄¨yPos
 = 0;

337 i‡(
	g°©e
 < 4) state = 0;

338 i‡(
	g°©e
 < 10) state -= 3;

339 
	g°©e
 -= 6;

343 
Upd©eBô1
(
¥ob
);

344 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

345 
IfBô0
(
¥ob
)

347 
Upd©eBô0
(
¥ob
);

348 
	gªp3
 = 
ªp2
;

349 
	gªp2
 = 
ªp1
;

350 
	gªp1
 = 
ªp0
;

351 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

352 
	g¥ob
 = 
p
 + 
LíCodî
;

356 
Upd©eBô1
(
¥ob
);

357 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

358 
IfBô0
(
¥ob
)

360 
Upd©eBô0
(
¥ob
);

361 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

362 
IfBô0
(
¥ob
)

364 #ifde‡
_LZMA_OUT_READ


365 
UI¡32
 
	gpos
;

367 
Upd©eBô0
(
¥ob
);

369 #ifde‡
_LZMA_OUT_READ


370 i‡(
	gdi°™˚Limô
 == 0)

372 i‡(
nowPos
 == 0)

374  
LZMA_RESULT_DATA_ERROR
;

376 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

377 #ifde‡
_LZMA_OUT_READ


378 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

379 i‡(
	gpos
 >
di˘i⁄¨ySize
)

380 
pos
 +
di˘i⁄¨ySize
;

381 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

382 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

383 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

384 
di˘i⁄¨yPos
 = 0;

386 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

388 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

389 #ifde‡
_LZMA_OUT_READ


390 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

391 
	gdi°™˚Limô
++;

398 
Upd©eBô1
(
¥ob
);

403 
UI¡32
 
	gdi°™˚
;

404 
Upd©eBô1
(
¥ob
);

405 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

406 
IfBô0
(
¥ob
)

408 
Upd©eBô0
(
¥ob
);

409 
	gdi°™˚
 = 
ªp1
;

413 
Upd©eBô1
(
¥ob
);

414 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

415 
IfBô0
(
¥ob
)

417 
Upd©eBô0
(
¥ob
);

418 
	gdi°™˚
 = 
ªp2
;

422 
Upd©eBô1
(
¥ob
);

423 
	gdi°™˚
 = 
ªp3
;

424 
	gªp3
 = 
ªp2
;

426 
	gªp2
 = 
ªp1
;

428 
	gªp1
 = 
ªp0
;

429 
	gªp0
 = 
di°™˚
;

431 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

432 
	g¥ob
 = 
p
 + 
RïLíCodî
;

435 
	gnumBôs
, 
	goff£t
;

436 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

437 
IfBô0
(
¥obLí
)

439 
Upd©eBô0
(
¥obLí
);

440 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

441 
	goff£t
 = 0;

442 
	gnumBôs
 = 
kLíNumLowBôs
;

446 
Upd©eBô1
(
¥obLí
);

447 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

448 
IfBô0
(
¥obLí
)

450 
Upd©eBô0
(
¥obLí
);

451 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

452 
	goff£t
 = 
kLíNumLowSymbﬁs
;

453 
	gnumBôs
 = 
kLíNumMidBôs
;

457 
Upd©eBô1
(
¥obLí
);

458 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

459 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

460 
	gnumBôs
 = 
kLíNumHighBôs
;

463 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

464 
	gÀn
 +
off£t
;

467 i‡(
	g°©e
 < 4)

469 
	gposSlŸ
;

470 
	g°©e
 +
kNumLôSèãs
;

471 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

472 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

473 
kNumPosSlŸBôs
);

474 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

475 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

477 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

478 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

479 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

481 
	gªp0
 <<
numDúe˘Bôs
;

482 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

486 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

489 
RC_NORMALIZE


490 
	gR™ge
 >>= 1;

491 
	gªp0
 <<= 1;

492 i‡(
	gCode
 >
R™ge
)

494 
Code
 -
R™ge
;

495 
	gªp0
 |= 1;

498 --
	gnumDúe˘Bôs
 != 0);

499 
	g¥ob
 = 
p
 + 
Align
;

500 
	gªp0
 <<
kNumAlignBôs
;

501 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

504 
	gi
 = 1;

505 
	gmi
 = 1;

508 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

509 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

510 
	gi
 <<= 1;

512 --
	gnumDúe˘Bôs
 != 0);

516 
	gªp0
 = 
posSlŸ
;

517 i‡(++
	gªp0
 =(
UI¡32
)(0))

520 
Àn
 = 
kLzmaSåómWasFöishedId
;

525 
	gÀn
 +
kM©chMöLí
;

526 #ifde‡
_LZMA_OUT_READ


527 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

529 i‡(
	gªp0
 > 
	gnowPos
)

531  
	gLZMA_RESULT_DATA_ERROR
;

533 #ifde‡
_LZMA_OUT_READ


534 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

535 
	gdi°™˚Limô
 +
Àn
;

537 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

542 #ifde‡
_LZMA_OUT_READ


543 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

544 i‡(
	gpos
 >
di˘i⁄¨ySize
)

545 
pos
 +
di˘i⁄¨ySize
;

546 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

547 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

548 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

549 
di˘i⁄¨yPos
 = 0;

551 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

553 
	gÀn
--;

554 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

556 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

559 
	gRC_NORMALIZE
;

561 #ifde‡
_LZMA_OUT_READ


562 
	gvs
->
	gR™ge
 = 
R™ge
;

563 
	gvs
->
	gCode
 = 
Code
;

564 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

565 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

566 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

567 
	gvs
->
	gRïs
[0] = 
ªp0
;

568 
	gvs
->
	gRïs
[1] = 
ªp1
;

569 
	gvs
->
	gRïs
[2] = 
ªp2
;

570 
	gvs
->
	gRïs
[3] = 
ªp3
;

571 
	gvs
->
	gSèã
 = 
°©e
;

572 
	gvs
->
	gRemaöLí
 = 
Àn
;

573 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

576 #ifde‡
_LZMA_IN_CB


577 
	gvs
->
	gBuf„r
 = 
Buf„r
;

578 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

580 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

582 *
	goutSizePro˚s£d
 = 
nowPos
;

583  
	gLZMA_RESULT_OK
;

	@linux/ar71xx/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

25 
	~"LzmaTy≥s.h
"

40 #ifde‡
_LZMA_PROB32


41 
	#CProb
 
UI¡32


	)

43 
	#CProb
 
UI¡16


	)

46 
	#LZMA_RESULT_OK
 0

	)

47 
	#LZMA_RESULT_DATA_ERROR
 1

	)

49 #ifde‡
_LZMA_IN_CB


50 
	s_ILzmaInCÆlback


52 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

53 } 
	tILzmaInCÆlback
;

56 
	#LZMA_BASE_SIZE
 1846

	)

57 
	#LZMA_LIT_SIZE
 768

	)

59 
	#LZMA_PROPERTIES_SIZE
 5

	)

61 
	s_CLzmaPr›îtõs


63 
	mlc
;

64 
	mÕ
;

65 
	mpb
;

66 #ifde‡
_LZMA_OUT_READ


67 
UI¡32
 
	mDi˘i⁄¨ySize
;

69 }
	tCLzmaPr›îtõs
;

71 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

73 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

75 
	#kLzmaNìdInôId
 (-2)

	)

77 
	s_CLzmaDecodîSèã


79 
CLzmaPr›îtõs
 
	mPr›îtõs
;

80 
CProb
 *
	mProbs
;

82 #ifde‡
_LZMA_IN_CB


83 c⁄° *
	mBuf„r
;

84 c⁄° *
	mBuf„rLim
;

87 #ifde‡
_LZMA_OUT_READ


88 *
	mDi˘i⁄¨y
;

89 
UI¡32
 
	mR™ge
;

90 
UI¡32
 
	mCode
;

91 
UI¡32
 
	mDi˘i⁄¨yPos
;

92 
UI¡32
 
	mGlobÆPos
;

93 
UI¡32
 
	mDi°™˚Limô
;

94 
UI¡32
 
	mRïs
[4];

95 
	mSèã
;

96 
	mRemaöLí
;

97 
	mTempDi˘i⁄¨y
[4];

99 } 
	tCLzmaDecodîSèã
;

101 #ifde‡
_LZMA_OUT_READ


102 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

105 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

106 #ifde‡
_LZMA_IN_CB


107 
ILzmaInCÆlback
 *
öCÆlback
,

109 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

111 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/ar71xx/image/lzma-loader/src/LzmaTypes.h

10 #i‚de‡
__LZMATYPES_H


11 
	#__LZMATYPES_H


	)

13 #i‚de‡
_7ZIP_BYTE_DEFINED


14 
	#_7ZIP_BYTE_DEFINED


	)

15 
	tByã
;

18 #i‚de‡
_7ZIP_UINT16_DEFINED


19 
	#_7ZIP_UINT16_DEFINED


	)

20 
	tUI¡16
;

23 #i‚de‡
_7ZIP_UINT32_DEFINED


24 
	#_7ZIP_UINT32_DEFINED


	)

25 #ifde‡
_LZMA_UINT32_IS_ULONG


26 
	tUI¡32
;

28 
	tUI¡32
;

35 #i‚de‡
_7ZIP_SIZET_DEFINED


36 
	#_7ZIP_SIZET_DEFINED


	)

37 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


38 
UI¡32
 
	tSizeT
;

40 
	~<°ddef.h
>

41 
size_t
 
	tSizeT
;

	@linux/ar71xx/image/lzma-loader/src/ar71xx_regs.h

15 #i‚de‡
__ASM_MACH_AR71XX_REGS_H


16 
	#__ASM_MACH_AR71XX_REGS_H


	)

18 
	#BIT
(
_x
Ë(1UL << (_x))

	)

20 
	#AR71XX_APB_BASE
 0x18000000

	)

21 
	#AR71XX_GE0_BASE
 0x19000000

	)

22 
	#AR71XX_GE0_SIZE
 0x10000

	)

23 
	#AR71XX_GE1_BASE
 0x1a000000

	)

24 
	#AR71XX_GE1_SIZE
 0x10000

	)

25 
	#AR71XX_EHCI_BASE
 0x1b000000

	)

26 
	#AR71XX_EHCI_SIZE
 0x1000

	)

27 
	#AR71XX_OHCI_BASE
 0x1c000000

	)

28 
	#AR71XX_OHCI_SIZE
 0x1000

	)

29 
	#AR71XX_SPI_BASE
 0x1f000000

	)

30 
	#AR71XX_SPI_SIZE
 0x01000000

	)

32 
	#AR71XX_DDR_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00000000)

	)

33 
	#AR71XX_DDR_CTRL_SIZE
 0x100

	)

34 
	#AR71XX_UART_BASE
 (
AR71XX_APB_BASE
 + 0x00020000)

	)

35 
	#AR71XX_UART_SIZE
 0x100

	)

36 
	#AR71XX_USB_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00030000)

	)

37 
	#AR71XX_USB_CTRL_SIZE
 0x100

	)

38 
	#AR71XX_GPIO_BASE
 (
AR71XX_APB_BASE
 + 0x00040000)

	)

39 
	#AR71XX_GPIO_SIZE
 0x100

	)

40 
	#AR71XX_PLL_BASE
 (
AR71XX_APB_BASE
 + 0x00050000)

	)

41 
	#AR71XX_PLL_SIZE
 0x100

	)

42 
	#AR71XX_RESET_BASE
 (
AR71XX_APB_BASE
 + 0x00060000)

	)

43 
	#AR71XX_RESET_SIZE
 0x100

	)

44 
	#AR71XX_MII_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

45 
	#AR71XX_MII_SIZE
 0x100

	)

47 
	#AR71XX_PCI_MEM_BASE
 0x10000000

	)

48 
	#AR71XX_PCI_MEM_SIZE
 0x07000000

	)

50 
	#AR71XX_PCI_WIN0_OFFS
 0x10000000

	)

51 
	#AR71XX_PCI_WIN1_OFFS
 0x11000000

	)

52 
	#AR71XX_PCI_WIN2_OFFS
 0x12000000

	)

53 
	#AR71XX_PCI_WIN3_OFFS
 0x13000000

	)

54 
	#AR71XX_PCI_WIN4_OFFS
 0x14000000

	)

55 
	#AR71XX_PCI_WIN5_OFFS
 0x15000000

	)

56 
	#AR71XX_PCI_WIN6_OFFS
 0x16000000

	)

57 
	#AR71XX_PCI_WIN7_OFFS
 0x07000000

	)

59 
	#AR71XX_PCI_CFG_BASE
 \

60 (
AR71XX_PCI_MEM_BASE
 + 
AR71XX_PCI_WIN7_OFFS
 + 0x10000)

	)

61 
	#AR71XX_PCI_CFG_SIZE
 0x100

	)

63 
	#AR7240_USB_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00030000)

	)

64 
	#AR7240_USB_CTRL_SIZE
 0x100

	)

65 
	#AR7240_OHCI_BASE
 0x1b000000

	)

66 
	#AR7240_OHCI_SIZE
 0x1000

	)

68 
	#AR724X_PCI_MEM_BASE
 0x10000000

	)

69 
	#AR724X_PCI_MEM_SIZE
 0x04000000

	)

71 
	#AR724X_PCI_CFG_BASE
 0x14000000

	)

72 
	#AR724X_PCI_CFG_SIZE
 0x1000

	)

73 
	#AR724X_PCI_CRP_BASE
 (
AR71XX_APB_BASE
 + 0x000c0000)

	)

74 
	#AR724X_PCI_CRP_SIZE
 0x1000

	)

75 
	#AR724X_PCI_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x000f0000)

	)

76 
	#AR724X_PCI_CTRL_SIZE
 0x100

	)

78 
	#AR724X_EHCI_BASE
 0x1b000000

	)

79 
	#AR724X_EHCI_SIZE
 0x1000

	)

81 
	#AR913X_EHCI_BASE
 0x1b000000

	)

82 
	#AR913X_EHCI_SIZE
 0x1000

	)

83 
	#AR913X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x000C0000)

	)

84 
	#AR913X_WMAC_SIZE
 0x30000

	)

86 
	#AR933X_UART_BASE
 (
AR71XX_APB_BASE
 + 0x00020000)

	)

87 
	#AR933X_UART_SIZE
 0x14

	)

88 
	#AR933X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

89 
	#AR933X_GMAC_SIZE
 0x04

	)

90 
	#AR933X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

91 
	#AR933X_WMAC_SIZE
 0x20000

	)

92 
	#AR933X_EHCI_BASE
 0x1b000000

	)

93 
	#AR933X_EHCI_SIZE
 0x1000

	)

95 
	#AR934X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

96 
	#AR934X_GMAC_SIZE
 0x14

	)

97 
	#AR934X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

98 
	#AR934X_WMAC_SIZE
 0x20000

	)

99 
	#AR934X_EHCI_BASE
 0x1b000000

	)

100 
	#AR934X_EHCI_SIZE
 0x200

	)

102 
	#QCA955X_PCI_MEM_BASE0
 0x10000000

	)

103 
	#QCA955X_PCI_MEM_BASE1
 0x12000000

	)

104 
	#QCA955X_PCI_MEM_SIZE
 0x02000000

	)

105 
	#QCA955X_PCI_CFG_BASE0
 0x14000000

	)

106 
	#QCA955X_PCI_CFG_BASE1
 0x16000000

	)

107 
	#QCA955X_PCI_CFG_SIZE
 0x1000

	)

108 
	#QCA955X_PCI_CRP_BASE0
 (
AR71XX_APB_BASE
 + 0x000c0000)

	)

109 
	#QCA955X_PCI_CRP_BASE1
 (
AR71XX_APB_BASE
 + 0x00250000)

	)

110 
	#QCA955X_PCI_CRP_SIZE
 0x1000

	)

111 
	#QCA955X_PCI_CTRL_BASE0
 (
AR71XX_APB_BASE
 + 0x000f0000)

	)

112 
	#QCA955X_PCI_CTRL_BASE1
 (
AR71XX_APB_BASE
 + 0x00280000)

	)

113 
	#QCA955X_PCI_CTRL_SIZE
 0x100

	)

115 
	#QCA955X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

116 
	#QCA955X_WMAC_SIZE
 0x20000

	)

117 
	#QCA955X_EHCI0_BASE
 0x1b000000

	)

118 
	#QCA955X_EHCI1_BASE
 0x1b400000

	)

119 
	#QCA955X_EHCI_SIZE
 0x1000

	)

120 
	#QCA955X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

121 
	#QCA955X_GMAC_SIZE
 0x40

	)

123 
	#AR9300_OTP_BASE
 0x14000

	)

124 
	#AR9300_OTP_STATUS
 0x15f18

	)

125 
	#AR9300_OTP_STATUS_TYPE
 0x7

	)

126 
	#AR9300_OTP_STATUS_VALID
 0x4

	)

127 
	#AR9300_OTP_STATUS_ACCESS_BUSY
 0x2

	)

128 
	#AR9300_OTP_STATUS_SM_BUSY
 0x1

	)

129 
	#AR9300_OTP_READ_DATA
 0x15f1c

	)

134 
	#AR71XX_DDR_REG_PCI_WIN0
 0x7c

	)

135 
	#AR71XX_DDR_REG_PCI_WIN1
 0x80

	)

136 
	#AR71XX_DDR_REG_PCI_WIN2
 0x84

	)

137 
	#AR71XX_DDR_REG_PCI_WIN3
 0x88

	)

138 
	#AR71XX_DDR_REG_PCI_WIN4
 0x8c

	)

139 
	#AR71XX_DDR_REG_PCI_WIN5
 0x90

	)

140 
	#AR71XX_DDR_REG_PCI_WIN6
 0x94

	)

141 
	#AR71XX_DDR_REG_PCI_WIN7
 0x98

	)

142 
	#AR71XX_DDR_REG_FLUSH_GE0
 0x9c

	)

143 
	#AR71XX_DDR_REG_FLUSH_GE1
 0xa0

	)

144 
	#AR71XX_DDR_REG_FLUSH_USB
 0xa4

	)

145 
	#AR71XX_DDR_REG_FLUSH_PCI
 0xa8

	)

147 
	#AR724X_DDR_REG_FLUSH_GE0
 0x7c

	)

148 
	#AR724X_DDR_REG_FLUSH_GE1
 0x80

	)

149 
	#AR724X_DDR_REG_FLUSH_USB
 0x84

	)

150 
	#AR724X_DDR_REG_FLUSH_PCIE
 0x88

	)

152 
	#AR913X_DDR_REG_FLUSH_GE0
 0x7c

	)

153 
	#AR913X_DDR_REG_FLUSH_GE1
 0x80

	)

154 
	#AR913X_DDR_REG_FLUSH_USB
 0x84

	)

155 
	#AR913X_DDR_REG_FLUSH_WMAC
 0x88

	)

157 
	#AR933X_DDR_REG_FLUSH_GE0
 0x7c

	)

158 
	#AR933X_DDR_REG_FLUSH_GE1
 0x80

	)

159 
	#AR933X_DDR_REG_FLUSH_USB
 0x84

	)

160 
	#AR933X_DDR_REG_FLUSH_WMAC
 0x88

	)

162 
	#AR934X_DDR_REG_FLUSH_GE0
 0x9c

	)

163 
	#AR934X_DDR_REG_FLUSH_GE1
 0xa0

	)

164 
	#AR934X_DDR_REG_FLUSH_USB
 0xa4

	)

165 
	#AR934X_DDR_REG_FLUSH_PCIE
 0xa8

	)

166 
	#AR934X_DDR_REG_FLUSH_WMAC
 0xac

	)

171 
	#AR71XX_PLL_REG_CPU_CONFIG
 0x00

	)

172 
	#AR71XX_PLL_REG_SEC_CONFIG
 0x04

	)

173 
	#AR71XX_PLL_REG_ETH0_INT_CLOCK
 0x10

	)

174 
	#AR71XX_PLL_REG_ETH1_INT_CLOCK
 0x14

	)

176 
	#AR71XX_PLL_DIV_SHIFT
 3

	)

177 
	#AR71XX_PLL_DIV_MASK
 0x1f

	)

178 
	#AR71XX_CPU_DIV_SHIFT
 16

	)

179 
	#AR71XX_CPU_DIV_MASK
 0x3

	)

180 
	#AR71XX_DDR_DIV_SHIFT
 18

	)

181 
	#AR71XX_DDR_DIV_MASK
 0x3

	)

182 
	#AR71XX_AHB_DIV_SHIFT
 20

	)

183 
	#AR71XX_AHB_DIV_MASK
 0x7

	)

185 
	#AR71XX_ETH0_PLL_SHIFT
 17

	)

186 
	#AR71XX_ETH1_PLL_SHIFT
 19

	)

188 
	#AR724X_PLL_REG_CPU_CONFIG
 0x00

	)

189 
	#AR724X_PLL_REG_PCIE_CONFIG
 0x18

	)

191 
	#AR724X_PLL_DIV_SHIFT
 0

	)

192 
	#AR724X_PLL_DIV_MASK
 0x3ff

	)

193 
	#AR724X_PLL_REF_DIV_SHIFT
 10

	)

194 
	#AR724X_PLL_REF_DIV_MASK
 0xf

	)

195 
	#AR724X_AHB_DIV_SHIFT
 19

	)

196 
	#AR724X_AHB_DIV_MASK
 0x1

	)

197 
	#AR724X_DDR_DIV_SHIFT
 22

	)

198 
	#AR724X_DDR_DIV_MASK
 0x3

	)

200 
	#AR7242_PLL_REG_ETH0_INT_CLOCK
 0x2c

	)

202 
	#AR913X_PLL_REG_CPU_CONFIG
 0x00

	)

203 
	#AR913X_PLL_REG_ETH_CONFIG
 0x04

	)

204 
	#AR913X_PLL_REG_ETH0_INT_CLOCK
 0x14

	)

205 
	#AR913X_PLL_REG_ETH1_INT_CLOCK
 0x18

	)

207 
	#AR913X_PLL_DIV_SHIFT
 0

	)

208 
	#AR913X_PLL_DIV_MASK
 0x3ff

	)

209 
	#AR913X_DDR_DIV_SHIFT
 22

	)

210 
	#AR913X_DDR_DIV_MASK
 0x3

	)

211 
	#AR913X_AHB_DIV_SHIFT
 19

	)

212 
	#AR913X_AHB_DIV_MASK
 0x1

	)

214 
	#AR913X_ETH0_PLL_SHIFT
 20

	)

215 
	#AR913X_ETH1_PLL_SHIFT
 22

	)

217 
	#AR933X_PLL_CPU_CONFIG_REG
 0x00

	)

218 
	#AR933X_PLL_CLOCK_CTRL_REG
 0x08

	)

220 
	#AR933X_PLL_CPU_CONFIG_NINT_SHIFT
 10

	)

221 
	#AR933X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

222 
	#AR933X_PLL_CPU_CONFIG_REFDIV_SHIFT
 16

	)

223 
	#AR933X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

224 
	#AR933X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 23

	)

225 
	#AR933X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x7

	)

227 
	#AR933X_PLL_CLOCK_CTRL_BYPASS
 
	`BIT
(2)

	)

228 
	#AR933X_PLL_CLOCK_CTRL_CPU_DIV_SHIFT
 5

	)

229 
	#AR933X_PLL_CLOCK_CTRL_CPU_DIV_MASK
 0x3

	)

230 
	#AR933X_PLL_CLOCK_CTRL_DDR_DIV_SHIFT
 10

	)

231 
	#AR933X_PLL_CLOCK_CTRL_DDR_DIV_MASK
 0x3

	)

232 
	#AR933X_PLL_CLOCK_CTRL_AHB_DIV_SHIFT
 15

	)

233 
	#AR933X_PLL_CLOCK_CTRL_AHB_DIV_MASK
 0x7

	)

235 
	#AR934X_PLL_CPU_CONFIG_REG
 0x00

	)

236 
	#AR934X_PLL_DDR_CONFIG_REG
 0x04

	)

237 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_REG
 0x08

	)

238 
	#AR934X_PLL_ETH_XMII_CONTROL_REG
 0x2c

	)

240 
	#AR934X_PLL_CPU_CONFIG_NFRAC_SHIFT
 0

	)

241 
	#AR934X_PLL_CPU_CONFIG_NFRAC_MASK
 0x3f

	)

242 
	#AR934X_PLL_CPU_CONFIG_NINT_SHIFT
 6

	)

243 
	#AR934X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

244 
	#AR934X_PLL_CPU_CONFIG_REFDIV_SHIFT
 12

	)

245 
	#AR934X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

246 
	#AR934X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 19

	)

247 
	#AR934X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x3

	)

249 
	#AR934X_PLL_DDR_CONFIG_NFRAC_SHIFT
 0

	)

250 
	#AR934X_PLL_DDR_CONFIG_NFRAC_MASK
 0x3ff

	)

251 
	#AR934X_PLL_DDR_CONFIG_NINT_SHIFT
 10

	)

252 
	#AR934X_PLL_DDR_CONFIG_NINT_MASK
 0x3f

	)

253 
	#AR934X_PLL_DDR_CONFIG_REFDIV_SHIFT
 16

	)

254 
	#AR934X_PLL_DDR_CONFIG_REFDIV_MASK
 0x1f

	)

255 
	#AR934X_PLL_DDR_CONFIG_OUTDIV_SHIFT
 23

	)

256 
	#AR934X_PLL_DDR_CONFIG_OUTDIV_MASK
 0x7

	)

258 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_PLL_BYPASS
 
	`BIT
(2)

	)

259 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_PLL_BYPASS
 
	`BIT
(3)

	)

260 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_PLL_BYPASS
 
	`BIT
(4)

	)

261 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_POST_DIV_SHIFT
 5

	)

262 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_POST_DIV_MASK
 0x1f

	)

263 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_POST_DIV_SHIFT
 10

	)

264 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_POST_DIV_MASK
 0x1f

	)

265 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_POST_DIV_SHIFT
 15

	)

266 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_POST_DIV_MASK
 0x1f

	)

267 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPUCLK_FROM_CPUPLL
 
	`BIT
(20)

	)

268 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDRCLK_FROM_DDRPLL
 
	`BIT
(21)

	)

269 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHBCLK_FROM_DDRPLL
 
	`BIT
(24)

	)

271 
	#QCA955X_PLL_CPU_CONFIG_REG
 0x00

	)

272 
	#QCA955X_PLL_DDR_CONFIG_REG
 0x04

	)

273 
	#QCA955X_PLL_CLK_CTRL_REG
 0x08

	)

275 
	#QCA955X_PLL_CPU_CONFIG_NFRAC_SHIFT
 0

	)

276 
	#QCA955X_PLL_CPU_CONFIG_NFRAC_MASK
 0x3f

	)

277 
	#QCA955X_PLL_CPU_CONFIG_NINT_SHIFT
 6

	)

278 
	#QCA955X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

279 
	#QCA955X_PLL_CPU_CONFIG_REFDIV_SHIFT
 12

	)

280 
	#QCA955X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

281 
	#QCA955X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 19

	)

282 
	#QCA955X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x3

	)

284 
	#QCA955X_PLL_DDR_CONFIG_NFRAC_SHIFT
 0

	)

285 
	#QCA955X_PLL_DDR_CONFIG_NFRAC_MASK
 0x3ff

	)

286 
	#QCA955X_PLL_DDR_CONFIG_NINT_SHIFT
 10

	)

287 
	#QCA955X_PLL_DDR_CONFIG_NINT_MASK
 0x3f

	)

288 
	#QCA955X_PLL_DDR_CONFIG_REFDIV_SHIFT
 16

	)

289 
	#QCA955X_PLL_DDR_CONFIG_REFDIV_MASK
 0x1f

	)

290 
	#QCA955X_PLL_DDR_CONFIG_OUTDIV_SHIFT
 23

	)

291 
	#QCA955X_PLL_DDR_CONFIG_OUTDIV_MASK
 0x7

	)

293 
	#QCA955X_PLL_CLK_CTRL_CPU_PLL_BYPASS
 
	`BIT
(2)

	)

294 
	#QCA955X_PLL_CLK_CTRL_DDR_PLL_BYPASS
 
	`BIT
(3)

	)

295 
	#QCA955X_PLL_CLK_CTRL_AHB_PLL_BYPASS
 
	`BIT
(4)

	)

296 
	#QCA955X_PLL_CLK_CTRL_CPU_POST_DIV_SHIFT
 5

	)

297 
	#QCA955X_PLL_CLK_CTRL_CPU_POST_DIV_MASK
 0x1f

	)

298 
	#QCA955X_PLL_CLK_CTRL_DDR_POST_DIV_SHIFT
 10

	)

299 
	#QCA955X_PLL_CLK_CTRL_DDR_POST_DIV_MASK
 0x1f

	)

300 
	#QCA955X_PLL_CLK_CTRL_AHB_POST_DIV_SHIFT
 15

	)

301 
	#QCA955X_PLL_CLK_CTRL_AHB_POST_DIV_MASK
 0x1f

	)

302 
	#QCA955X_PLL_CLK_CTRL_CPUCLK_FROM_CPUPLL
 
	`BIT
(20)

	)

303 
	#QCA955X_PLL_CLK_CTRL_DDRCLK_FROM_DDRPLL
 
	`BIT
(21)

	)

304 
	#QCA955X_PLL_CLK_CTRL_AHBCLK_FROM_DDRPLL
 
	`BIT
(24)

	)

309 
	#AR71XX_USB_CTRL_REG_FLADJ
 0x00

	)

310 
	#AR71XX_USB_CTRL_REG_CONFIG
 0x04

	)

315 
	#AR71XX_RESET_REG_TIMER
 0x00

	)

316 
	#AR71XX_RESET_REG_TIMER_RELOAD
 0x04

	)

317 
	#AR71XX_RESET_REG_WDOG_CTRL
 0x08

	)

318 
	#AR71XX_RESET_REG_WDOG
 0x0c

	)

319 
	#AR71XX_RESET_REG_MISC_INT_STATUS
 0x10

	)

320 
	#AR71XX_RESET_REG_MISC_INT_ENABLE
 0x14

	)

321 
	#AR71XX_RESET_REG_PCI_INT_STATUS
 0x18

	)

322 
	#AR71XX_RESET_REG_PCI_INT_ENABLE
 0x1c

	)

323 
	#AR71XX_RESET_REG_GLOBAL_INT_STATUS
 0x20

	)

324 
	#AR71XX_RESET_REG_RESET_MODULE
 0x24

	)

325 
	#AR71XX_RESET_REG_PERFC_CTRL
 0x2c

	)

326 
	#AR71XX_RESET_REG_PERFC0
 0x30

	)

327 
	#AR71XX_RESET_REG_PERFC1
 0x34

	)

328 
	#AR71XX_RESET_REG_REV_ID
 0x90

	)

330 
	#AR913X_RESET_REG_GLOBAL_INT_STATUS
 0x18

	)

331 
	#AR913X_RESET_REG_RESET_MODULE
 0x1c

	)

332 
	#AR913X_RESET_REG_PERF_CTRL
 0x20

	)

333 
	#AR913X_RESET_REG_PERFC0
 0x24

	)

334 
	#AR913X_RESET_REG_PERFC1
 0x28

	)

336 
	#AR724X_RESET_REG_RESET_MODULE
 0x1c

	)

338 
	#AR933X_RESET_REG_RESET_MODULE
 0x1c

	)

339 
	#AR933X_RESET_REG_BOOTSTRAP
 0xac

	)

341 
	#AR934X_RESET_REG_RESET_MODULE
 0x1c

	)

342 
	#AR934X_RESET_REG_BOOTSTRAP
 0xb0

	)

343 
	#AR934X_RESET_REG_PCIE_WMAC_INT_STATUS
 0xac

	)

345 
	#QCA955X_RESET_REG_BOOTSTRAP
 0xb0

	)

346 
	#QCA955X_RESET_REG_EXT_INT_STATUS
 0xac

	)

348 
	#MISC_INT_ETHSW
 
	`BIT
(12)

	)

349 
	#MISC_INT_TIMER4
 
	`BIT
(10)

	)

350 
	#MISC_INT_TIMER3
 
	`BIT
(9)

	)

351 
	#MISC_INT_TIMER2
 
	`BIT
(8)

	)

352 
	#MISC_INT_DMA
 
	`BIT
(7)

	)

353 
	#MISC_INT_OHCI
 
	`BIT
(6)

	)

354 
	#MISC_INT_PERFC
 
	`BIT
(5)

	)

355 
	#MISC_INT_WDOG
 
	`BIT
(4)

	)

356 
	#MISC_INT_UART
 
	`BIT
(3)

	)

357 
	#MISC_INT_GPIO
 
	`BIT
(2)

	)

358 
	#MISC_INT_ERROR
 
	`BIT
(1)

	)

359 
	#MISC_INT_TIMER
 
	`BIT
(0)

	)

361 
	#AR71XX_RESET_EXTERNAL
 
	`BIT
(28)

	)

362 
	#AR71XX_RESET_FULL_CHIP
 
	`BIT
(24)

	)

363 
	#AR71XX_RESET_CPU_NMI
 
	`BIT
(21)

	)

364 
	#AR71XX_RESET_CPU_COLD
 
	`BIT
(20)

	)

365 
	#AR71XX_RESET_DMA
 
	`BIT
(19)

	)

366 
	#AR71XX_RESET_SLIC
 
	`BIT
(18)

	)

367 
	#AR71XX_RESET_STEREO
 
	`BIT
(17)

	)

368 
	#AR71XX_RESET_DDR
 
	`BIT
(16)

	)

369 
	#AR71XX_RESET_GE1_MAC
 
	`BIT
(13)

	)

370 
	#AR71XX_RESET_GE1_PHY
 
	`BIT
(12)

	)

371 
	#AR71XX_RESET_USBSUS_OVERRIDE
 
	`BIT
(10)

	)

372 
	#AR71XX_RESET_GE0_MAC
 
	`BIT
(9)

	)

373 
	#AR71XX_RESET_GE0_PHY
 
	`BIT
(8)

	)

374 
	#AR71XX_RESET_USB_OHCI_DLL
 
	`BIT
(6)

	)

375 
	#AR71XX_RESET_USB_HOST
 
	`BIT
(5)

	)

376 
	#AR71XX_RESET_USB_PHY
 
	`BIT
(4)

	)

377 
	#AR71XX_RESET_PCI_BUS
 
	`BIT
(1)

	)

378 
	#AR71XX_RESET_PCI_CORE
 
	`BIT
(0)

	)

380 
	#AR7240_RESET_USB_HOST
 
	`BIT
(5)

	)

381 
	#AR7240_RESET_OHCI_DLL
 
	`BIT
(3)

	)

383 
	#AR724X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

384 
	#AR724X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

385 
	#AR724X_RESET_PCIE_PHY_SERIAL
 
	`BIT
(10)

	)

386 
	#AR724X_RESET_PCIE_PHY
 
	`BIT
(7)

	)

387 
	#AR724X_RESET_PCIE
 
	`BIT
(6)

	)

388 
	#AR724X_RESET_USB_HOST
 
	`BIT
(5)

	)

389 
	#AR724X_RESET_USB_PHY
 
	`BIT
(4)

	)

390 
	#AR724X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

392 
	#AR913X_RESET_AMBA2WMAC
 
	`BIT
(22)

	)

393 
	#AR913X_RESET_USBSUS_OVERRIDE
 
	`BIT
(10)

	)

394 
	#AR913X_RESET_USB_HOST
 
	`BIT
(5)

	)

395 
	#AR913X_RESET_USB_PHY
 
	`BIT
(4)

	)

397 
	#AR933X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

398 
	#AR933X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

399 
	#AR933X_RESET_GE1_MAC
 
	`BIT
(13)

	)

400 
	#AR933X_RESET_WMAC
 
	`BIT
(11)

	)

401 
	#AR933X_RESET_GE0_MAC
 
	`BIT
(9)

	)

402 
	#AR933X_RESET_USB_HOST
 
	`BIT
(5)

	)

403 
	#AR933X_RESET_USB_PHY
 
	`BIT
(4)

	)

404 
	#AR933X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

406 
	#AR934X_RESET_HOST
 
	`BIT
(31)

	)

407 
	#AR934X_RESET_SLIC
 
	`BIT
(30)

	)

408 
	#AR934X_RESET_HDMA
 
	`BIT
(29)

	)

409 
	#AR934X_RESET_EXTERNAL
 
	`BIT
(28)

	)

410 
	#AR934X_RESET_RTC
 
	`BIT
(27)

	)

411 
	#AR934X_RESET_PCIE_EP_INT
 
	`BIT
(26)

	)

412 
	#AR934X_RESET_CHKSUM_ACC
 
	`BIT
(25)

	)

413 
	#AR934X_RESET_FULL_CHIP
 
	`BIT
(24)

	)

414 
	#AR934X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

415 
	#AR934X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

416 
	#AR934X_RESET_CPU_NMI
 
	`BIT
(21)

	)

417 
	#AR934X_RESET_CPU_COLD
 
	`BIT
(20)

	)

418 
	#AR934X_RESET_HOST_RESET_INT
 
	`BIT
(19)

	)

419 
	#AR934X_RESET_PCIE_EP
 
	`BIT
(18)

	)

420 
	#AR934X_RESET_UART1
 
	`BIT
(17)

	)

421 
	#AR934X_RESET_DDR
 
	`BIT
(16)

	)

422 
	#AR934X_RESET_USB_PHY_PLL_PWD_EXT
 
	`BIT
(15)

	)

423 
	#AR934X_RESET_NANDF
 
	`BIT
(14)

	)

424 
	#AR934X_RESET_GE1_MAC
 
	`BIT
(13)

	)

425 
	#AR934X_RESET_ETH_SWITCH_ANALOG
 
	`BIT
(12)

	)

426 
	#AR934X_RESET_USB_PHY_ANALOG
 
	`BIT
(11)

	)

427 
	#AR934X_RESET_HOST_DMA_INT
 
	`BIT
(10)

	)

428 
	#AR934X_RESET_GE0_MAC
 
	`BIT
(9)

	)

429 
	#AR934X_RESET_ETH_SWITCH
 
	`BIT
(8)

	)

430 
	#AR934X_RESET_PCIE_PHY
 
	`BIT
(7)

	)

431 
	#AR934X_RESET_PCIE
 
	`BIT
(6)

	)

432 
	#AR934X_RESET_USB_HOST
 
	`BIT
(5)

	)

433 
	#AR934X_RESET_USB_PHY
 
	`BIT
(4)

	)

434 
	#AR934X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

435 
	#AR934X_RESET_LUT
 
	`BIT
(2)

	)

436 
	#AR934X_RESET_MBOX
 
	`BIT
(1)

	)

437 
	#AR934X_RESET_I2S
 
	`BIT
(0)

	)

439 
	#AR933X_BOOTSTRAP_MDIO_GPIO_EN
 
	`BIT
(18)

	)

440 
	#AR933X_BOOTSTRAP_EEPBUSY
 
	`BIT
(4)

	)

441 
	#AR933X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(0)

	)

443 
	#AR934X_BOOTSTRAP_SW_OPTION8
 
	`BIT
(23)

	)

444 
	#AR934X_BOOTSTRAP_SW_OPTION7
 
	`BIT
(22)

	)

445 
	#AR934X_BOOTSTRAP_SW_OPTION6
 
	`BIT
(21)

	)

446 
	#AR934X_BOOTSTRAP_SW_OPTION5
 
	`BIT
(20)

	)

447 
	#AR934X_BOOTSTRAP_SW_OPTION4
 
	`BIT
(19)

	)

448 
	#AR934X_BOOTSTRAP_SW_OPTION3
 
	`BIT
(18)

	)

449 
	#AR934X_BOOTSTRAP_SW_OPTION2
 
	`BIT
(17)

	)

450 
	#AR934X_BOOTSTRAP_SW_OPTION1
 
	`BIT
(16)

	)

451 
	#AR934X_BOOTSTRAP_USB_MODE_DEVICE
 
	`BIT
(7)

	)

452 
	#AR934X_BOOTSTRAP_PCIE_RC
 
	`BIT
(6)

	)

453 
	#AR934X_BOOTSTRAP_EJTAG_MODE
 
	`BIT
(5)

	)

454 
	#AR934X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(4)

	)

455 
	#AR934X_BOOTSTRAP_BOOT_FROM_SPI
 
	`BIT
(2)

	)

456 
	#AR934X_BOOTSTRAP_SDRAM_DISABLED
 
	`BIT
(1)

	)

457 
	#AR934X_BOOTSTRAP_DDR1
 
	`BIT
(0)

	)

459 
	#QCA955X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(4)

	)

461 
	#AR934X_PCIE_WMAC_INT_WMAC_MISC
 
	`BIT
(0)

	)

462 
	#AR934X_PCIE_WMAC_INT_WMAC_TX
 
	`BIT
(1)

	)

463 
	#AR934X_PCIE_WMAC_INT_WMAC_RXLP
 
	`BIT
(2)

	)

464 
	#AR934X_PCIE_WMAC_INT_WMAC_RXHP
 
	`BIT
(3)

	)

465 
	#AR934X_PCIE_WMAC_INT_PCIE_RC
 
	`BIT
(4)

	)

466 
	#AR934X_PCIE_WMAC_INT_PCIE_RC0
 
	`BIT
(5)

	)

467 
	#AR934X_PCIE_WMAC_INT_PCIE_RC1
 
	`BIT
(6)

	)

468 
	#AR934X_PCIE_WMAC_INT_PCIE_RC2
 
	`BIT
(7)

	)

469 
	#AR934X_PCIE_WMAC_INT_PCIE_RC3
 
	`BIT
(8)

	)

470 
	#AR934X_PCIE_WMAC_INT_WMAC_ALL
 \

471 (
AR934X_PCIE_WMAC_INT_WMAC_MISC
 | 
AR934X_PCIE_WMAC_INT_WMAC_TX
 | \

472 
AR934X_PCIE_WMAC_INT_WMAC_RXLP
 | 
AR934X_PCIE_WMAC_INT_WMAC_RXHP
)

	)

474 
	#AR934X_PCIE_WMAC_INT_PCIE_ALL
 \

475 (
AR934X_PCIE_WMAC_INT_PCIE_RC
 | 
AR934X_PCIE_WMAC_INT_PCIE_RC0
 | \

476 
AR934X_PCIE_WMAC_INT_PCIE_RC1
 | 
AR934X_PCIE_WMAC_INT_PCIE_RC2
 | \

477 
AR934X_PCIE_WMAC_INT_PCIE_RC3
)

	)

479 
	#QCA955X_EXT_INT_WMAC_MISC
 
	`BIT
(0)

	)

480 
	#QCA955X_EXT_INT_WMAC_TX
 
	`BIT
(1)

	)

481 
	#QCA955X_EXT_INT_WMAC_RXLP
 
	`BIT
(2)

	)

482 
	#QCA955X_EXT_INT_WMAC_RXHP
 
	`BIT
(3)

	)

483 
	#QCA955X_EXT_INT_PCIE_RC1
 
	`BIT
(4)

	)

484 
	#QCA955X_EXT_INT_PCIE_RC1_INT0
 
	`BIT
(5)

	)

485 
	#QCA955X_EXT_INT_PCIE_RC1_INT1
 
	`BIT
(6)

	)

486 
	#QCA955X_EXT_INT_PCIE_RC1_INT2
 
	`BIT
(7)

	)

487 
	#QCA955X_EXT_INT_PCIE_RC1_INT3
 
	`BIT
(8)

	)

488 
	#QCA955X_EXT_INT_PCIE_RC2
 
	`BIT
(12)

	)

489 
	#QCA955X_EXT_INT_PCIE_RC2_INT0
 
	`BIT
(13)

	)

490 
	#QCA955X_EXT_INT_PCIE_RC2_INT1
 
	`BIT
(14)

	)

491 
	#QCA955X_EXT_INT_PCIE_RC2_INT2
 
	`BIT
(15)

	)

492 
	#QCA955X_EXT_INT_PCIE_RC2_INT3
 
	`BIT
(16)

	)

493 
	#QCA955X_EXT_INT_USB1
 
	`BIT
(24)

	)

494 
	#QCA955X_EXT_INT_USB2
 
	`BIT
(28)

	)

496 
	#QCA955X_EXT_INT_WMAC_ALL
 \

497 (
QCA955X_EXT_INT_WMAC_MISC
 | 
QCA955X_EXT_INT_WMAC_TX
 | \

498 
QCA955X_EXT_INT_WMAC_RXLP
 | 
QCA955X_EXT_INT_WMAC_RXHP
)

	)

500 
	#QCA955X_EXT_INT_PCIE_RC1_ALL
 \

501 (
QCA955X_EXT_INT_PCIE_RC1
 | 
QCA955X_EXT_INT_PCIE_RC1_INT0
 | \

502 
QCA955X_EXT_INT_PCIE_RC1_INT1
 | 
QCA955X_EXT_INT_PCIE_RC1_INT2
 | \

503 
QCA955X_EXT_INT_PCIE_RC1_INT3
)

	)

505 
	#QCA955X_EXT_INT_PCIE_RC2_ALL
 \

506 (
QCA955X_EXT_INT_PCIE_RC2
 | 
QCA955X_EXT_INT_PCIE_RC2_INT0
 | \

507 
QCA955X_EXT_INT_PCIE_RC2_INT1
 | 
QCA955X_EXT_INT_PCIE_RC2_INT2
 | \

508 
QCA955X_EXT_INT_PCIE_RC2_INT3
)

	)

510 
	#REV_ID_MAJOR_MASK
 0xfff0

	)

511 
	#REV_ID_MAJOR_AR71XX
 0x00a0

	)

512 
	#REV_ID_MAJOR_AR913X
 0x00b0

	)

513 
	#REV_ID_MAJOR_AR7240
 0x00c0

	)

514 
	#REV_ID_MAJOR_AR7241
 0x0100

	)

515 
	#REV_ID_MAJOR_AR7242
 0x1100

	)

516 
	#REV_ID_MAJOR_AR9330
 0x0110

	)

517 
	#REV_ID_MAJOR_AR9331
 0x1110

	)

518 
	#REV_ID_MAJOR_AR9341
 0x0120

	)

519 
	#REV_ID_MAJOR_AR9342
 0x1120

	)

520 
	#REV_ID_MAJOR_AR9344
 0x2120

	)

521 
	#REV_ID_MAJOR_QCA9558
 0x1130

	)

523 
	#AR71XX_REV_ID_MINOR_MASK
 0x3

	)

524 
	#AR71XX_REV_ID_MINOR_AR7130
 0x0

	)

525 
	#AR71XX_REV_ID_MINOR_AR7141
 0x1

	)

526 
	#AR71XX_REV_ID_MINOR_AR7161
 0x2

	)

527 
	#AR71XX_REV_ID_REVISION_MASK
 0x3

	)

528 
	#AR71XX_REV_ID_REVISION_SHIFT
 2

	)

530 
	#AR913X_REV_ID_MINOR_MASK
 0x3

	)

531 
	#AR913X_REV_ID_MINOR_AR9130
 0x0

	)

532 
	#AR913X_REV_ID_MINOR_AR9132
 0x1

	)

533 
	#AR913X_REV_ID_REVISION_MASK
 0x3

	)

534 
	#AR913X_REV_ID_REVISION_SHIFT
 2

	)

536 
	#AR933X_REV_ID_REVISION_MASK
 0x3

	)

538 
	#AR724X_REV_ID_REVISION_MASK
 0x3

	)

540 
	#AR934X_REV_ID_REVISION_MASK
 0xf

	)

542 
	#AR944X_REV_ID_REVISION_MASK
 0xf

	)

547 
	#AR71XX_SPI_REG_FS
 0x00

	)

548 
	#AR71XX_SPI_REG_CTRL
 0x04

	)

549 
	#AR71XX_SPI_REG_IOC
 0x08

	)

550 
	#AR71XX_SPI_REG_RDS
 0x0¯

	)

552 
	#AR71XX_SPI_FS_GPIO
 
	`BIT
(0Ë

	)

554 
	#AR71XX_SPI_CTRL_RD
 
	`BIT
(6Ë

	)

555 
	#AR71XX_SPI_CTRL_DIV_MASK
 0x3f

	)

557 
	#AR71XX_SPI_IOC_DO
 
	`BIT
(0Ë

	)

558 
	#AR71XX_SPI_IOC_CLK
 
	`BIT
(8Ë

	)

559 
	#AR71XX_SPI_IOC_CS
(
n
Ë
	`BIT
(16 + (n))

	)

560 
	#AR71XX_SPI_IOC_CS0
 
	`AR71XX_SPI_IOC_CS
(0)

	)

561 
	#AR71XX_SPI_IOC_CS1
 
	`AR71XX_SPI_IOC_CS
(1)

	)

562 
	#AR71XX_SPI_IOC_CS2
 
	`AR71XX_SPI_IOC_CS
(2)

	)

563 
	#AR71XX_SPI_IOC_CS_ALL
 (
AR71XX_SPI_IOC_CS0
 | 
AR71XX_SPI_IOC_CS1
 | \

564 
AR71XX_SPI_IOC_CS2
)

	)

569 
	#AR71XX_GPIO_REG_OE
 0x00

	)

570 
	#AR71XX_GPIO_REG_IN
 0x04

	)

571 
	#AR71XX_GPIO_REG_OUT
 0x08

	)

572 
	#AR71XX_GPIO_REG_SET
 0x0c

	)

573 
	#AR71XX_GPIO_REG_CLEAR
 0x10

	)

574 
	#AR71XX_GPIO_REG_INT_MODE
 0x14

	)

575 
	#AR71XX_GPIO_REG_INT_TYPE
 0x18

	)

576 
	#AR71XX_GPIO_REG_INT_POLARITY
 0x1c

	)

577 
	#AR71XX_GPIO_REG_INT_PENDING
 0x20

	)

578 
	#AR71XX_GPIO_REG_INT_ENABLE
 0x24

	)

579 
	#AR71XX_GPIO_REG_FUNC
 0x28

	)

581 
	#AR934X_GPIO_REG_OUT_FUNC0
 0x2c

	)

582 
	#AR934X_GPIO_REG_OUT_FUNC1
 0x30

	)

583 
	#AR934X_GPIO_REG_OUT_FUNC2
 0x34

	)

584 
	#AR934X_GPIO_REG_OUT_FUNC3
 0x38

	)

585 
	#AR934X_GPIO_REG_OUT_FUNC4
 0x3c

	)

586 
	#AR934X_GPIO_REG_OUT_FUNC5
 0x40

	)

587 
	#AR934X_GPIO_REG_FUNC
 0x6c

	)

589 
	#AR71XX_GPIO_COUNT
 16

	)

590 
	#AR724X_GPIO_COUNT
 18

	)

591 
	#AR913X_GPIO_COUNT
 22

	)

592 
	#AR933X_GPIO_COUNT
 30

	)

593 
	#AR934X_GPIO_COUNT
 23

	)

594 
	#QCA955X_GPIO_COUNT
 24

	)

596 
	#AR71XX_GPIO_FUNC_STEREO_EN
 
	`BIT
(17)

	)

597 
	#AR71XX_GPIO_FUNC_SLIC_EN
 
	`BIT
(16)

	)

598 
	#AR71XX_GPIO_FUNC_SPI_CS2_EN
 
	`BIT
(13)

	)

599 
	#AR71XX_GPIO_FUNC_SPI_CS1_EN
 
	`BIT
(12)

	)

600 
	#AR71XX_GPIO_FUNC_UART_EN
 
	`BIT
(8)

	)

601 
	#AR71XX_GPIO_FUNC_USB_OC_EN
 
	`BIT
(4)

	)

602 
	#AR71XX_GPIO_FUNC_USB_CLK_EN
 
	`BIT
(0)

	)

604 
	#AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 
	`BIT
(19)

	)

605 
	#AR724X_GPIO_FUNC_SPI_EN
 
	`BIT
(18)

	)

606 
	#AR724X_GPIO_FUNC_SPI_CS_EN2
 
	`BIT
(14)

	)

607 
	#AR724X_GPIO_FUNC_SPI_CS_EN1
 
	`BIT
(13)

	)

608 
	#AR724X_GPIO_FUNC_CLK_OBS5_EN
 
	`BIT
(12)

	)

609 
	#AR724X_GPIO_FUNC_CLK_OBS4_EN
 
	`BIT
(11)

	)

610 
	#AR724X_GPIO_FUNC_CLK_OBS3_EN
 
	`BIT
(10)

	)

611 
	#AR724X_GPIO_FUNC_CLK_OBS2_EN
 
	`BIT
(9)

	)

612 
	#AR724X_GPIO_FUNC_CLK_OBS1_EN
 
	`BIT
(8)

	)

613 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 
	`BIT
(7)

	)

614 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 
	`BIT
(6)

	)

615 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 
	`BIT
(5)

	)

616 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 
	`BIT
(4)

	)

617 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 
	`BIT
(3)

	)

618 
	#AR724X_GPIO_FUNC_UART_RTS_CTS_EN
 
	`BIT
(2)

	)

619 
	#AR724X_GPIO_FUNC_UART_EN
 
	`BIT
(1)

	)

620 
	#AR724X_GPIO_FUNC_JTAG_DISABLE
 
	`BIT
(0)

	)

622 
	#AR913X_GPIO_FUNC_WMAC_LED_EN
 
	`BIT
(22)

	)

623 
	#AR913X_GPIO_FUNC_EXP_PORT_CS_EN
 
	`BIT
(21)

	)

624 
	#AR913X_GPIO_FUNC_I2S_REFCLKEN
 
	`BIT
(20)

	)

625 
	#AR913X_GPIO_FUNC_I2S_MCKEN
 
	`BIT
(19)

	)

626 
	#AR913X_GPIO_FUNC_I2S1_EN
 
	`BIT
(18)

	)

627 
	#AR913X_GPIO_FUNC_I2S0_EN
 
	`BIT
(17)

	)

628 
	#AR913X_GPIO_FUNC_SLIC_EN
 
	`BIT
(16)

	)

629 
	#AR913X_GPIO_FUNC_UART_RTSCTS_EN
 
	`BIT
(9)

	)

630 
	#AR913X_GPIO_FUNC_UART_EN
 
	`BIT
(8)

	)

631 
	#AR913X_GPIO_FUNC_USB_CLK_EN
 
	`BIT
(4)

	)

633 
	#AR933X_GPIO_FUNC_SPDIF2TCK
 
	`BIT
(31)

	)

634 
	#AR933X_GPIO_FUNC_SPDIF_EN
 
	`BIT
(30)

	)

635 
	#AR933X_GPIO_FUNC_I2SO_22_18_EN
 
	`BIT
(29)

	)

636 
	#AR933X_GPIO_FUNC_I2S_MCK_EN
 
	`BIT
(27)

	)

637 
	#AR933X_GPIO_FUNC_I2SO_EN
 
	`BIT
(26)

	)

638 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_DUPL
 
	`BIT
(25)

	)

639 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_COLL
 
	`BIT
(24)

	)

640 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_ACT
 
	`BIT
(23)

	)

641 
	#AR933X_GPIO_FUNC_SPI_EN
 
	`BIT
(18)

	)

642 
	#AR933X_GPIO_FUNC_SPI_CS_EN2
 
	`BIT
(14)

	)

643 
	#AR933X_GPIO_FUNC_SPI_CS_EN1
 
	`BIT
(13)

	)

644 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 
	`BIT
(7)

	)

645 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 
	`BIT
(6)

	)

646 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 
	`BIT
(5)

	)

647 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 
	`BIT
(4)

	)

648 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 
	`BIT
(3)

	)

649 
	#AR933X_GPIO_FUNC_UART_RTS_CTS_EN
 
	`BIT
(2)

	)

650 
	#AR933X_GPIO_FUNC_UART_EN
 
	`BIT
(1)

	)

651 
	#AR933X_GPIO_FUNC_JTAG_DISABLE
 
	`BIT
(0)

	)

653 
	#AR934X_GPIO_FUNC_DDR_DQOE_EN
 
	`BIT
(17)

	)

654 
	#AR934X_GPIO_FUNC_SPI_CS_1_EN
 
	`BIT
(14)

	)

655 
	#AR934X_GPIO_FUNC_SPI_CS_0_EN
 
	`BIT
(13)

	)

657 
	#AR934X_GPIO_OUT_GPIO
 0x00

	)

662 
	#AR71XX_MII_REG_MII0_CTRL
 0x00

	)

663 
	#AR71XX_MII_REG_MII1_CTRL
 0x04

	)

665 
	#AR71XX_MII_CTRL_IF_MASK
 3

	)

666 
	#AR71XX_MII_CTRL_SPEED_SHIFT
 4

	)

667 
	#AR71XX_MII_CTRL_SPEED_MASK
 3

	)

668 
	#AR71XX_MII_CTRL_SPEED_10
 0

	)

669 
	#AR71XX_MII_CTRL_SPEED_100
 1

	)

670 
	#AR71XX_MII_CTRL_SPEED_1000
 2

	)

672 
	#AR71XX_MII0_CTRL_IF_GMII
 0

	)

673 
	#AR71XX_MII0_CTRL_IF_MII
 1

	)

674 
	#AR71XX_MII0_CTRL_IF_RGMII
 2

	)

675 
	#AR71XX_MII0_CTRL_IF_RMII
 3

	)

677 
	#AR71XX_MII1_CTRL_IF_RGMII
 0

	)

678 
	#AR71XX_MII1_CTRL_IF_RMII
 1

	)

683 
	#AR933X_GMAC_REG_ETH_CFG
 0x00

	)

685 
	#AR933X_ETH_CFG_RGMII_GE0
 
	`BIT
(0)

	)

686 
	#AR933X_ETH_CFG_MII_GE0
 
	`BIT
(1)

	)

687 
	#AR933X_ETH_CFG_GMII_GE0
 
	`BIT
(2)

	)

688 
	#AR933X_ETH_CFG_MII_GE0_MASTER
 
	`BIT
(3)

	)

689 
	#AR933X_ETH_CFG_MII_GE0_SLAVE
 
	`BIT
(4)

	)

690 
	#AR933X_ETH_CFG_MII_GE0_ERR_EN
 
	`BIT
(5)

	)

691 
	#AR933X_ETH_CFG_SW_PHY_SWAP
 
	`BIT
(7)

	)

692 
	#AR933X_ETH_CFG_SW_PHY_ADDR_SWAP
 
	`BIT
(8)

	)

693 
	#AR933X_ETH_CFG_RMII_GE0
 
	`BIT
(9)

	)

694 
	#AR933X_ETH_CFG_RMII_GE0_SPD_10
 0

	)

695 
	#AR933X_ETH_CFG_RMII_GE0_SPD_100
 
	`BIT
(10)

	)

700 
	#AR934X_GMAC_REG_ETH_CFG
 0x00

	)

702 
	#AR934X_ETH_CFG_RGMII_GMAC0
 
	`BIT
(0)

	)

703 
	#AR934X_ETH_CFG_MII_GMAC0
 
	`BIT
(1)

	)

704 
	#AR934X_ETH_CFG_GMII_GMAC0
 
	`BIT
(2)

	)

705 
	#AR934X_ETH_CFG_MII_GMAC0_MASTER
 
	`BIT
(3)

	)

706 
	#AR934X_ETH_CFG_MII_GMAC0_SLAVE
 
	`BIT
(4)

	)

707 
	#AR934X_ETH_CFG_MII_GMAC0_ERR_EN
 
	`BIT
(5)

	)

708 
	#AR934X_ETH_CFG_SW_ONLY_MODE
 
	`BIT
(6)

	)

709 
	#AR934X_ETH_CFG_SW_PHY_SWAP
 
	`BIT
(7)

	)

710 
	#AR934X_ETH_CFG_SW_APB_ACCESS
 
	`BIT
(9)

	)

711 
	#AR934X_ETH_CFG_RMII_GMAC0
 
	`BIT
(10)

	)

712 
	#AR933X_ETH_CFG_MII_CNTL_SPEED
 
	`BIT
(11)

	)

713 
	#AR934X_ETH_CFG_RMII_GMAC0_MASTER
 
	`BIT
(12)

	)

714 
	#AR933X_ETH_CFG_SW_ACC_MSB_FIRST
 
	`BIT
(13)

	)

720 
	#QCA955X_GMAC_REG_ETH_CFG
 0x00

	)

722 
	#QCA955X_ETH_CFG_RGMII_GMAC0
 
	`BIT
(0)

	)

723 
	#QCA955X_ETH_CFG_SGMII_GMAC0
 
	`BIT
(6)

	)

	@linux/ar71xx/image/lzma-loader/src/board.c

11 
	~<°ddef.h
>

12 
	~"c⁄fig.h
"

13 
	~"¨71xx_ªgs.h
"

15 
	#READREG
(
r
Ë*(vﬁ©ûê*)‘)

	)

16 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê*)‘Ë
	)
v

18 
	#KSEG1ADDR
(
_x
Ë(((_xË& 0x1fffffffË| 0xa0000000)

	)

20 
	#UART_BASE
 0xb8020000

	)

22 
	#UART_TX
 0

	)

23 
	#UART_LSR
 5

	)

25 
	#UART_LSR_THRE
 0x20

	)

27 
	#UART_READ
(
r
Ë
	`READREG
(
UART_BASE
 + 4 * (r))

	)

28 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART_BASE
 + 4 * (r), (v))

	)

30 
	$bﬂrd_putc
(
ch
)

32 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

33 
	`UART_WRITE
(
UART_TX
, 
ch
);

34 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

35 
	}
}

37 #ifde‡
CONFIG_BOARD_TL_WR1043ND_V1


38 
	$éwr1043nd_öô
()

40 
ªg
 = 
	`KSEG1ADDR
(
AR71XX_RESET_BASE
);

41 
t
;

43 
t
 = 
	`READREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
);

44 
t
 |
AR71XX_RESET_GE0_PHY
;

45 
	`WRITEREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
, 
t
);

47 
t
 = 
	`READREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
);

48 
	}
}

50 
ölöe
 
	$éwr1043nd_öô
(Ë{
	}
}

53 
	$bﬂrd_öô
()

55 
	`éwr1043nd_öô
();

56 
	}
}

	@linux/ar71xx/image/lzma-loader/src/cache.c

16 
	~"ˇche.h
"

17 
	~"ˇche›s.h
"

18 
	~"c⁄fig.h
"

20 
	#ˇche_›
(
›
,
addr
) \

21 
__asm__
 
	`__vﬁ©ûe__
( \

28 : "i" (
›
), "R" (*(*)(
addr
)))

	)

30 
	$Êush_ˇche
(
°¨t_addr
, 
size
)

32 
lsize
 = 
CONFIG_CACHELINE_SIZE
;

33 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

34 
´nd
 = (
°¨t_addr
 + 
size
 - 1Ë& ~(
lsize
 - 1);

37 
	`ˇche_›
(
Hô_Wrôeback_Inv_D
, 
addr
);

38 
	`ˇche_›
(
Hô_InvÆid©e_I
, 
addr
);

39 i‡(
addr
 =
´nd
)

41 
addr
 +
lsize
;

43 
	}
}

	@linux/ar71xx/image/lzma-loader/src/cache.h

12 #i‚de‡
__CACHE_H


13 
	#__CACHE_H


	)

15 
Êush_ˇche
(
°¨t_addr
, 
size
);

	@linux/ar71xx/image/lzma-loader/src/cacheops.h

11 #i‚def 
__ASM_CACHEOPS_H


12 
	#__ASM_CACHEOPS_H


	)

17 
	#Index_InvÆid©e_I
 0x00

	)

18 
	#Index_Wrôeback_Inv_D
 0x01

	)

19 
	#Index_Lﬂd_Tag_I
 0x04

	)

20 
	#Index_Lﬂd_Tag_D
 0x05

	)

21 
	#Index_St‹e_Tag_I
 0x08

	)

22 
	#Index_St‹e_Tag_D
 0x09

	)

23 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

24 
	#Hô_InvÆid©e_I
 0x00

	)

26 
	#Hô_InvÆid©e_I
 0x10

	)

28 
	#Hô_InvÆid©e_D
 0x11

	)

29 
	#Hô_Wrôeback_Inv_D
 0x15

	)

34 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

35 
	#Fûl
 0x14

	)

36 
	#Hô_Wrôeback_I
 0x18

	)

37 
	#Hô_Wrôeback_D
 0x19

	)

42 
	#Index_InvÆid©e_SI
 0x02

	)

43 
	#Index_Wrôeback_Inv_SD
 0x03

	)

44 
	#Index_Lﬂd_Tag_SI
 0x06

	)

45 
	#Index_Lﬂd_Tag_SD
 0x07

	)

46 
	#Index_St‹e_Tag_SI
 0x0A

	)

47 
	#Index_St‹e_Tag_SD
 0x0B

	)

48 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

49 
	#Hô_InvÆid©e_SI
 0x12

	)

50 
	#Hô_InvÆid©e_SD
 0x13

	)

51 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

52 
	#Hô_Wrôeback_SD
 0x1b

	)

53 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

54 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

59 
	#R5K_Page_InvÆid©e_S
 0x17

	)

64 
	#Page_InvÆid©e_T
 0x16

	)

72 
	#Index_Wrôeback_Inv_S
 0x03

	)

73 
	#Index_Lﬂd_Tag_S
 0x07

	)

74 
	#Index_St‹e_Tag_S
 0x0B

	)

75 
	#Hô_InvÆid©e_S
 0x13

	)

76 
	#Cache_B¨rõr
 0x14

	)

77 
	#Hô_Wrôeback_Inv_S
 0x17

	)

78 
	#Index_Lﬂd_D©a_I
 0x18

	)

79 
	#Index_Lﬂd_D©a_D
 0x19

	)

80 
	#Index_Lﬂd_D©a_S
 0x1b

	)

81 
	#Index_St‹e_D©a_I
 0x1c

	)

82 
	#Index_St‹e_D©a_D
 0x1d

	)

83 
	#Index_St‹e_D©a_S
 0x1f

	)

	@linux/ar71xx/image/lzma-loader/src/config.h

12 #i‚de‡
_CONFIG_H_


13 
	#_CONFIG_H_


	)

15 
	#CONFIG_ICACHE_SIZE
 (32 * 1024)

	)

16 
	#CONFIG_DCACHE_SIZE
 (64 * 1024)

	)

17 
	#CONFIG_CACHELINE_SIZE
 32

	)

19 #i‚de‡
CONFIG_FLASH_OFFS


20 
	#CONFIG_FLASH_OFFS
 0

	)

23 #i‚de‡
CONFIG_FLASH_MAX


24 
	#CONFIG_FLASH_MAX
 0

	)

27 #i‚de‡
CONFIG_FLASH_STEP


28 
	#CONFIG_FLASH_STEP
 0x1000

	)

	@linux/ar71xx/image/lzma-loader/src/cp0regdef.h

7 #i‚de‡
_˝0ªgdef_h_


8 
	#_˝0ªgdef_h_


	)

10 
	#CP0_INDEX
 
$0


	)

11 
	#CP0_RANDOM
 
$1


	)

12 
	#CP0_ENTRYLO0
 
$2


	)

13 
	#CP0_ENTRYLO1
 
$3


	)

14 
	#CP0_CONTEXT
 
$4


	)

15 
	#CP0_PAGEMASK
 
$5


	)

16 
	#CP0_WIRED
 
$6


	)

17 
	#CP0_BADVADDR
 
$8


	)

18 
	#CP0_COUNT
 
$9


	)

19 
	#CP0_ENTRYHI
 
$10


	)

20 
	#CP0_COMPARE
 
$11


	)

21 
	#CP0_STATUS
 
$12


	)

22 
	#CP0_CAUSE
 
$13


	)

23 
	#CP0_EPC
 
$14


	)

24 
	#CP0_PRID
 
$15


	)

25 
	#CP0_CONFIG
 
$16


	)

26 
	#CP0_LLADDR
 
$17


	)

27 
	#CP0_WATCHLO
 
$18


	)

28 
	#CP0_WATCHHI
 
$19


	)

29 
	#CP0_XCONTEXT
 
$20


	)

30 
	#CP0_FRAMEMASK
 
$21


	)

31 
	#CP0_DIAGNOSTIC
 
$22


	)

32 
	#CP0_PERFORMANCE
 
$25


	)

33 
	#CP0_ECC
 
$26


	)

34 
	#CP0_CACHEERR
 
$27


	)

35 
	#CP0_TAGLO
 
$28


	)

36 
	#CP0_TAGHI
 
$29


	)

37 
	#CP0_ERROREPC
 
$30


	)

	@linux/ar71xx/image/lzma-loader/src/loader.c

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

25 
	~"c⁄fig.h
"

26 
	~"ˇche.h
"

27 
	~"¥ötf.h
"

28 
	~"LzmaDecode.h
"

30 
	#AR71XX_FLASH_START
 0x1f000000

	)

31 
	#AR71XX_FLASH_END
 0x1„00000

	)

33 
	#KSEG0
 0x80000000

	)

34 
	#KSEG1
 0xa0000000

	)

36 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

38 #unde‡
LZMA_DEBUG


40 #ifde‡
LZMA_DEBUG


41 
	#DBG
(
f
, 
a
...Ë
	`¥ötf
(f, ##á)

	)

43 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

46 
	#IH_MAGIC_OKLI
 0x4f4b4c49

	)

48 
	#IH_NMLEN
 32

	)

50 
	simage_hódî
 {

51 
uöt32_t
 
	mih_magic
;

52 
uöt32_t
 
	mih_h¸c
;

53 
uöt32_t
 
	mih_time
;

54 
uöt32_t
 
	mih_size
;

55 
uöt32_t
 
	mih_lﬂd
;

56 
uöt32_t
 
	mih_ï
;

57 
uöt32_t
 
	mih_d¸c
;

58 
uöt8_t
 
	mih_os
;

59 
uöt8_t
 
	mih_¨ch
;

60 
uöt8_t
 
	mih_ty≥
;

61 
uöt8_t
 
	mih_comp
;

62 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

63 } 
	timage_hódî_t
;

66 
w‹k•a˚
[];

67 
bﬂrd_öô
();

69 
CLzmaDecodîSèã
 
	glzma_°©e
;

70 *
	glzma_d©a
;

71 
	glzma_d©asize
;

72 
	glzma_outsize
;

73 
	gkî√l_œ
;

75 #ifde‡
CONFIG_KERNEL_CMDLINE


76 
	#kî√l_¨gc
 2

	)

77 c⁄° 
	gkî√l_cmdlöe
[] = 
CONFIG_KERNEL_CMDLINE
;

78 c⁄° *c⁄° 
	gkî√l_¨gv
[] = {

79 
NULL
,

80 
kî√l_cmdlöe
,

81 
NULL
,

85 
	$hÆt
()

87 
	`¥ötf
("\nSystem halted!\n");

89 
	}
}

91 
__ölöe__
 
	$gë_be32
(*
buf
)

93 *
p
 = 
buf
;

95  (((Ë
p
[0] << 24) +

96 ((Ë
p
[1] << 16) +

97 ((Ë
p
[2] << 8) +

98 (Ë
p
[3]);

99 
	}
}

101 
__ölöe__
 
	$lzma_gë_byã
()

103 
c
;

105 
lzma_d©asize
--;

106 
c
 = *
lzma_d©a
++;

108  
c
;

109 
	}
}

111 
	$lzma_öô_¥›s
()

113 
¥›s
[
LZMA_PROPERTIES_SIZE
];

114 
ªs
;

115 
i
;

118 
i
 = 0; i < 
LZMA_PROPERTIES_SIZE
; i++)

119 
¥›s
[
i
] = 
	`lzma_gë_byã
();

122 
lzma_outsize
 = ((
SizeT
Ë
	`lzma_gë_byã
()) +

123 ((
SizeT
Ë
	`lzma_gë_byã
() << 8) +

124 ((
SizeT
Ë
	`lzma_gë_byã
() << 16) +

125 ((
SizeT
Ë
	`lzma_gë_byã
() << 24);

128 
i
 = 0; i < 4; i++)

129 
	`lzma_gë_byã
();

131 
ªs
 = 
	`LzmaDecodePr›îtõs
(&
lzma_°©e
.
Pr›îtõs
, 
¥›s
,

132 
LZMA_PROPERTIES_SIZE
);

133  
ªs
;

134 
	}
}

136 
	$lzma_decom¥ess
(*
outSåóm
)

138 
SizeT
 
ù
, 
›
;

139 
ªt
;

141 
lzma_°©e
.
Probs
 = (
CProb
 *Ë
w‹k•a˚
;

143 
ªt
 = 
	`LzmaDecode
(&
lzma_°©e
, 
lzma_d©a
, 
lzma_d©asize
, &
ù
, 
outSåóm
,

144 
lzma_outsize
, &
›
);

146 i‡(
ªt
 !
LZMA_RESULT_OK
) {

147 
i
;

149 
	`DBG
("LzmaDecodeÉrror %dát %08x, osize:%d ip:%d op:%d\n",

150 
ªt
, 
lzma_d©a
 + 
ù
, 
lzma_outsize
, ip, 
›
);

152 
i
 = 0; i < 16; i++)

153 
	`DBG
("%02x ", 
lzma_d©a
[
ù
 + 
i
]);

155 
	`DBG
("\n");

158  
ªt
;

159 
	}
}

161 #i‡(
LZMA_WRAPPER
)

162 
	$lzma_öô_d©a
()

164 
_lzma_d©a_°¨t
[];

165 
_lzma_d©a_íd
[];

167 
kî√l_œ
 = 
LOADADDR
;

168 
lzma_d©a
 = 
_lzma_d©a_°¨t
;

169 
lzma_d©asize
 = 
_lzma_d©a_íd
 - 
_lzma_d©a_°¨t
;

170 
	}
}

172 
	$lzma_öô_d©a
()

174 
image_hódî
 *
hdr
 = 
NULL
;

175 *
Êash_ba£
;

176 
Êash_ofs
;

177 
kî√l_ofs
;

178 
kî√l_size
;

180 
Êash_ba£
 = (*Ë
	`KSEG1ADDR
(
AR71XX_FLASH_START
);

182 
	`¥ötf
("Looking for OpenWrt image... ");

184 
Êash_ofs
 = 
CONFIG_FLASH_OFFS
;

185 
Êash_ofs
 <(
CONFIG_FLASH_OFFS
 + 
CONFIG_FLASH_MAX
);

186 
Êash_ofs
 +
CONFIG_FLASH_STEP
) {

187 
magic
;

188 *
p
;

190 
p
 = 
Êash_ba£
 + 
Êash_ofs
;

191 
magic
 = 
	`gë_be32
(
p
);

192 i‡(
magic
 =
IH_MAGIC_OKLI
) {

193 
hdr
 = (
image_hódî
 *Ë
p
;

198 i‡(
hdr
 =
NULL
) {

199 
	`¥ötf
("not found!\n");

200 
	`hÆt
();

203 
	`¥ötf
("foundáà0x%08x\n", 
Êash_ba£
 + 
Êash_ofs
);

205 
kî√l_ofs
 = (
image_hódî
);

206 
kî√l_size
 = 
	`gë_be32
(&
hdr
->
ih_size
);

207 
kî√l_œ
 = 
	`gë_be32
(&
hdr
->
ih_lﬂd
);

209 
lzma_d©a
 = 
Êash_ba£
 + 
Êash_ofs
 + 
kî√l_ofs
;

210 
lzma_d©asize
 = 
kî√l_size
;

211 
	}
}

214 
	$lﬂdî_maö
(
ªg_a0
, 
ªg_a1
,

215 
ªg_a2
, 
ªg_a3
)

217 (*
kî√l_íåy
) (, , ,

219 
ªs
;

221 
	`bﬂrd_öô
();

223 
	`¥ötf
("\n\nOpenWrt kernelÜoader for AR7XXX/AR9XXX\n");

224 
	`¥ötf
("Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>\n");

226 
	`lzma_öô_d©a
();

228 
ªs
 = 
	`lzma_öô_¥›s
();

229 i‡(
ªs
 !
LZMA_RESULT_OK
) {

230 
	`¥ötf
("Incorrect LZMA streamÖroperties!\n");

231 
	`hÆt
();

234 
	`¥ötf
("Decompressing kernel... ");

236 
ªs
 = 
	`lzma_decom¥ess
((*Ë
kî√l_œ
);

237 i‡(
ªs
 !
LZMA_RESULT_OK
) {

238 
	`¥ötf
("failed, ");

239 
ªs
) {

240 
LZMA_RESULT_DATA_ERROR
:

241 
	`¥ötf
("dataÉrror!\n");

244 
	`¥ötf
("unknow¿îr‹ %d!\n", 
ªs
);

246 
	`hÆt
();

248 
	`¥ötf
("done!\n");

251 
	`Êush_ˇche
(
kî√l_œ
, 
lzma_outsize
);

253 
	`¥ötf
("Sèπög kî√»© %08x...\n\n", 
kî√l_œ
);

255 #ifde‡
CONFIG_KERNEL_CMDLINE


256 
ªg_a0
 = 
kî√l_¨gc
;

257 
ªg_a1
 = (Ë
kî√l_¨gv
;

258 
ªg_a2
 = 0;

259 
ªg_a3
 = 0;

262 
kî√l_íåy
 = (*Ë
kî√l_œ
;

263 
	`kî√l_íåy
(
ªg_a0
, 
ªg_a1
, 
ªg_a2
, 
ªg_a3
);

264 
	}
}

	@linux/ar71xx/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

14 
bﬂrd_putc
(
ch
);

17 
	#LP_MAX_BUF
 256

	)

20 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

21 
	#Ctod
(
x
Ë–(xË- '0')

	)

24 
PrötCh¨
(*, , , );

25 
PrötSåög
(*, *, , );

26 
PrötNum
(*, , , , , , , );

29 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

35 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

36 * 
¨g
,

37 *
fmt
,

38 
va_li°
 
≠
)

41 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

42 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

43 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

45 (*
ouçut
)(
¨g
, 
s
, 
l
); \

47 }

	)

49 
buf
[
LP_MAX_BUF
];

51 
c
;

52 *
s
;

53 
num
;

55 
l⁄gFœg
;

56 
√gFœg
;

57 
width
;

58 
¥ec
;

59 
œdju°
;

60 
∑dc
;

62 
Àngth
;

67 *
fmtSèπ
 = 
fmt
;

68  (*
fmt
 != '\0') && (*fmt != '%')) {

69 
fmt
 ++;

73 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

76 i‡(*
fmt
 == '\0') ;

80 
fmt
 ++;

83 i‡(*
fmt
 == 'l') {

84 
l⁄gFœg
 = 1;

85 
fmt
 ++;

87 
l⁄gFœg
 = 0;

91 
width
 = 0;

92 
¥ec
 = -1;

93 
œdju°
 = 0;

94 
∑dc
 = ' ';

96 i‡(*
fmt
 == '-') {

97 
œdju°
 = 1;

98 
fmt
 ++;

101 i‡(*
fmt
 == '0') {

102 
∑dc
 = '0';

103 
fmt
++;

106 i‡(
	`IsDigô
(*
fmt
)) {

107 
	`IsDigô
(*
fmt
)) {

108 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

112 i‡(*
fmt
 == '.') {

113 
fmt
 ++;

114 i‡(
	`IsDigô
(*
fmt
)) {

115 
¥ec
 = 0;

116 
	`IsDigô
(*
fmt
)) {

117 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

124 
√gFœg
 = 0;

125 *
fmt
) {

127 i‡(
l⁄gFœg
) {

128 
num
 = 
	`va_¨g
(
≠
, );

130 
num
 = 
	`va_¨g
(
≠
, );

132 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

133 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

138 i‡(
l⁄gFœg
) {

139 
num
 = 
	`va_¨g
(
≠
, );

141 
num
 = 
	`va_¨g
(
≠
, );

143 i‡(
num
 < 0) {

144 
num
 = -Çum;

145 
√gFœg
 = 1;

147 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

148 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

153 i‡(
l⁄gFœg
) {

154 
num
 = 
	`va_¨g
(
≠
, );

156 
num
 = 
	`va_¨g
(
≠
, );

158 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

159 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

164 i‡(
l⁄gFœg
) {

165 
num
 = 
	`va_¨g
(
≠
, );

167 
num
 = 
	`va_¨g
(
≠
, );

169 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

170 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

174 i‡(
l⁄gFœg
) {

175 
num
 = 
	`va_¨g
(
≠
, );

177 
num
 = 
	`va_¨g
(
≠
, );

179 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

180 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

184 i‡(
l⁄gFœg
) {

185 
num
 = 
	`va_¨g
(
≠
, );

187 
num
 = 
	`va_¨g
(
≠
, );

189 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

190 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

194 
c
 = ()
	`va_¨g
(
≠
, );

195 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

196 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

200 
s
 = (*)
	`va_¨g
(
≠
, *);

201 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

202 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

206 
fmt
 --;

211 
	`OUTPUT
(
¨g
, 
fmt
, 1);

214 
fmt
 ++;

218 
	`OUTPUT
(
¨g
, "\0", 1);

219 
	}
}

224 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

226 
i
;

228 i‡(
Àngth
 < 1)Üength = 1;

229 i‡(
œdju°
) {

230 *
buf
 = 
c
;

231 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

233 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

234 
buf
[
Àngth
 - 1] = 
c
;

236  
Àngth
;

237 
	}
}

240 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

242 
i
;

243 
Àn
=0;

244 * 
s1
 = 
s
;

245 *
s1
++Ë
Àn
++;

246 i‡(
Àngth
 < 
Àn
)Üength =Üen;

248 i‡(
œdju°
) {

249 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

250 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

252 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

253 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

255  
Àngth
;

256 
	}
}

259 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

260 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

272 
a˘uÆLígth
 =0;

273 *
p
 = 
buf
;

274 
i
;

277 
tmp
 = 
u
 %
ba£
;

278 i‡(
tmp
 <= 9) {

279 *
p
++ = '0' + 
tmp
;

280 } i‡(
upˇ£
) {

281 *
p
++ = 'A' + 
tmp
 - 10;

283 *
p
++ = 'a' + 
tmp
 - 10;

285 
u
 /
ba£
;

286 } 
u
 != 0);

288 i‡(
√gFœg
) {

289 *
p
++ = '-';

293 
a˘uÆLígth
 = 
p
 - 
buf
;

294 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

297 i‡(
œdju°
) {

298 
∑dc
 = ' ';

300 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

301 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

302 
buf
[
Àngth
 -1] = '-';

304 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

310 
begö
 = 0;

311 
íd
;

312 i‡(
œdju°
) {

313 
íd
 = 
a˘uÆLígth
 - 1;

315 
íd
 = 
Àngth
 -1;

318 
íd
 > 
begö
) {

319 
tmp
 = 
buf
[
begö
];

320 
buf
[
begö
] = buf[
íd
];

321 
buf
[
íd
] = 
tmp
;

322 
begö
 ++;

323 
íd
 --;

328  
Àngth
;

329 
	}
}

331 
	$¥ötf_ouçut
(*
¨g
, *
s
, 
l
)

333 
i
;

336 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

338 
i
=0; i< 
l
; i++) {

339 
	`bﬂrd_putc
(
s
[
i
]);

340 i‡(
s
[
i
] ='\n'Ë
	`bﬂrd_putc
('\r');

342 
	}
}

344 
	$¥ötf
(*
fmt
, ...)

346 
va_li°
 
≠
;

347 
	`va_°¨t
(
≠
, 
fmt
);

348 
	`Õ_Pröt
(
¥ötf_ouçut
, 0, 
fmt
, 
≠
);

349 
	`va_íd
(
≠
);

350 
	}
}

	@linux/ar71xx/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/at91/image/dfboot/src/at45.c

17 
	~"c⁄fig.h
"

18 
	~"°dio.h
"

19 
	~"AT91RM9200.h
"

20 
	~"lib_AT91RM9200.h
"

21 
	~"d©aÊash.h
"

22 
	~"maö.h
"

29 
	$AT91F_SpiInô
() {

31 
AT91C_BASE_PIOA
->
PIO_ASR
 = 
AT91C_PA3_NPCS0
 | 
AT91C_PA4_NPCS1
 |

32 
AT91C_PA1_MOSI
 | 
AT91C_PA5_NPCS2
 |

33 
AT91C_PA6_NPCS3
 | 
AT91C_PA0_MISO
 |

34 
AT91C_PA2_SPCK
;

35 
AT91C_BASE_PIOA
->
PIO_PDR
 = 
AT91C_PA3_NPCS0
 | 
AT91C_PA4_NPCS1
 |

36 
AT91C_PA1_MOSI
 | 
AT91C_PA5_NPCS2
 |

37 
AT91C_PA6_NPCS3
 | 
AT91C_PA0_MISO
 |

38 
AT91C_PA2_SPCK
;

40 
AT91C_BASE_PMC
->
PMC_PCER
 = 1 << 
AT91C_ID_SPI
;

43 
AT91C_BASE_SPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

46 
AT91C_BASE_SPI
->
SPI_MR
 = 
AT91C_SPI_MSTR
 | 
AT91C_SPI_MODFDIS
 | 
AT91C_SPI_PCS
;

49 *(
AT91C_SPI_CSR
 + 0Ë
AT91C_SPI_CPOL
 | (
AT91C_SPI_DLYBS
 & 
DATAFLASH_TCSS
) |

50 (
AT91C_SPI_DLYBCT
 & 
DATAFLASH_TCHS
) |

51 ((
AT91C_MASTER_CLOCK
 / (2*
AT91C_SPI_CLK
)) << 8);

52 *(
AT91C_SPI_CSR
 + 3Ë
AT91C_SPI_CPOL
 | (
AT91C_SPI_DLYBS
 & 
DATAFLASH_TCSS
) |

53 (
AT91C_SPI_DLYBCT
 & 
DATAFLASH_TCHS
) |

54 ((
AT91C_MASTER_CLOCK
 / (2*
AT91C_SPI_CLK
)) << 8);

55 
	}
}

62 
	$AT91F_SpiE«bÀ
(
cs
) {

63 
cs
) {

65 
AT91C_BASE_SPI
->
SPI_MR
 &= 0xFFF0FFFF;

66 
AT91C_BASE_SPI
->
SPI_MR
 |((
AT91C_SPI_PCS0_SERIAL_DATAFLASH
 << 16Ë& 
AT91C_SPI_PCS
);

70 
AT91C_BASE_PIOB
->
PIO_PER
 = 
AT91C_PIO_PB7
;

71 
AT91C_BASE_PIOB
->
PIO_OER
 = 
AT91C_PIO_PB7
;

73 
AT91C_BASE_PIOB
->
PIO_CODR
 = 
AT91C_PIO_PB7
;

75 
AT91C_BASE_SPI
->
SPI_MR
 &= 0xFFF0FFFF;

76 
AT91C_BASE_SPI
->
SPI_MR
 |((
AT91C_SPI_PCS3_DATAFLASH_CARD
<<16Ë& 
AT91C_SPI_PCS
);

81 
AT91C_BASE_SPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

82 
	}
}

88 
	$AT91F_SpiWrôe
(
AT91PS_D©aÊashDesc
 
pDesc
)

90 
timeout
;

92 
AT91C_BASE_SPI
->
SPI_PTCR
 = 
AT91C_PDC_TXTDIS
 + 
AT91C_PDC_RXTDIS
;

95 
AT91C_BASE_SPI
->
SPI_RPR
 = ()
pDesc
->
rx_cmd_±
 ;

96 
AT91C_BASE_SPI
->
SPI_TPR
 = ()
pDesc
->
tx_cmd_±
 ;

99 
AT91C_BASE_SPI
->
SPI_RCR
 = 
pDesc
->
rx_cmd_size
;

100 
AT91C_BASE_SPI
->
SPI_TCR
 = 
pDesc
->
tx_cmd_size
;

102 i‡–
pDesc
->
tx_d©a_size
 != 0 ) {

104 
AT91C_BASE_SPI
->
SPI_RNPR
 = ()
pDesc
->
rx_d©a_±
 ;

105 
AT91C_BASE_SPI
->
SPI_TNPR
 = ()
pDesc
->
tx_d©a_±
 ;

108 
AT91C_BASE_SPI
->
SPI_RNCR
 = 
pDesc
->
rx_d©a_size
 ;

109 
AT91C_BASE_SPI
->
SPI_TNCR
 = 
pDesc
->
tx_d©a_size
 ;

113 
timeout
 = 0;

115 
AT91C_BASE_SPI
->
SPI_PTCR
 = 
AT91C_PDC_TXTEN
 + 
AT91C_PDC_RXTEN
;

116 !(
AT91C_BASE_SPI
->
SPI_SR
 & 
AT91C_SPI_RXBUFF
));

118 
AT91C_BASE_SPI
->
SPI_PTCR
 = 
AT91C_PDC_TXTDIS
 + 
AT91C_PDC_RXTDIS
;

120 i‡(
timeout
 >
AT91C_DATAFLASH_TIMEOUT
){

121  
AT91C_DATAFLASH_ERROR
;

124  
AT91C_DATAFLASH_OK
;

125 
	}
}

132 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshSídComm™d
(

133 
AT91PS_D©aFœsh
 
pD©aFœsh
,

134 
OpCode
,

135 
CmdSize
,

136 
D©aÊashAddªss
)

138 
adr
;

141 
adr
 = ((
D©aÊashAddªss
 / (
pD©aFœsh
->
pDevi˚
->
∑ges_size
))

142 << 
pD©aFœsh
->
pDevi˚
->
∑ge_off£t
) +

143 (
D©aÊashAddªss
 % (
pD©aFœsh
->
pDevi˚
->
∑ges_size
));

146 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[0] = 
OpCode
;

147 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

149 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[1] = ()((
adr
 & 0x0F000000) >> 24);

150 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[2] = ()((
adr
 & 0x00FF0000) >> 16);

151 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[3] = ()((
adr
 & 0x0000FF00) >> 8);

152 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[4] = ()(
adr
 & 0x000000FF);

156 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[1] = ()((
adr
 & 0x00FF0000) >> 16);

157 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[2] = ()((
adr
 & 0x0000FF00) >> 8);

158 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[3] = ()(
adr
 & 0x000000FF) ;

159 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[4] = 0;

161 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[5] = 0;

162 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[6] = 0;

163 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[7] = 0;

166 
pD©aFœsh
->
pD©aFœshDesc
->
tx_cmd_±
 =ÖD©aFœsh->pD©aFœshDesc->
comm™d
 ;

167 
pD©aFœsh
->
pD©aFœshDesc
->
tx_cmd_size
 = 
CmdSize
 ;

168 
pD©aFœsh
->
pD©aFœshDesc
->
rx_cmd_±
 =ÖD©aFœsh->pD©aFœshDesc->
comm™d
 ;

169 
pD©aFœsh
->
pD©aFœshDesc
->
rx_cmd_size
 = 
CmdSize
 ;

171  
	`AT91F_SpiWrôe
(
pD©aFœsh
->
pD©aFœshDesc
);

172 
	}
}

179 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshGëSètus
(
AT91PS_D©aÊashDesc
 
pDesc
)

181 
AT91S_D©aFœshSètus
 
°©us
;

184 
pDesc
->
comm™d
[0] = 
DB_STATUS
;

185 
pDesc
->
comm™d
[1] = 0;

187 
pDesc
->
D©aFœsh_°©e
 = 
GET_STATUS
;

188 
pDesc
->
tx_d©a_size
 = 0 ;

189 
pDesc
->
tx_cmd_±
 =ÖDesc->
comm™d
 ;

190 
pDesc
->
rx_cmd_±
 =ÖDesc->
comm™d
 ;

191 
pDesc
->
rx_cmd_size
 = 2 ;

192 
pDesc
->
tx_cmd_size
 = 2 ;

193 
°©us
 = 
	`AT91F_SpiWrôe
 (
pDesc
);

195 
pDesc
->
D©aFœsh_°©e
 = *–(*Ë’Desc->
rx_cmd_±
) +1);

196  
°©us
;

197 
	}
}

206 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshWaôRódy
(

207 
AT91PS_D©aÊashDesc
 
pD©aFœshDesc
,

208 
timeout
)

210 
pD©aFœshDesc
->
D©aFœsh_°©e
 = 
IDLE
;

212 
	`AT91F_D©aFœshGëSètus
(
pD©aFœshDesc
);

213 
timeout
--;

215 ((
pD©aFœshDesc
->
D©aFœsh_°©e
 & 0x80Ë!0x80Ë&& (
timeout
 > 0));

217 if((
pD©aFœshDesc
->
D©aFœsh_°©e
 & 0x80) != 0x80)

218  
AT91C_DATAFLASH_ERROR
;

220  
AT91C_DATAFLASH_OK
;

221 
	}
}

233 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshC⁄töuousRód
(

234 
AT91PS_D©aFœsh
 
pD©aFœsh
,

235 
§c
,

236 *
d©aBuf„r
,

237 
sizeToRód
 )

239 
AT91S_D©aFœshSètus
 
°©us
;

241 i‡–(
§c
 + 
sizeToRód
Ë> (
pD©aFœsh
->
pDevi˚
->
∑ges_size
 * (pD©aFœsh->pDevi˚->
∑ges_numbî
)))

242  
AT91C_DATAFLASH_MEMORY_OVERFLOW
;

244 
pD©aFœsh
->
pD©aFœshDesc
->
rx_d©a_±
 = 
d©aBuf„r
;

245 
pD©aFœsh
->
pD©aFœshDesc
->
rx_d©a_size
 = 
sizeToRód
;

246 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_±
 = 
d©aBuf„r
;

247 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_size
 = 
sizeToRód
;

249 
°©us
 = 
	`AT91F_D©aFœshSídComm™d
(
pD©aFœsh
, 
DB_CONTINUOUS_ARRAY_READ
, 8, 
§c
);

251 (
°©us
);

252 
	}
}

264 
AT91S_D©aFœshSètus
 
	$AT91F_MaöMem‹yToBuf„rTøns„r
(

265 
AT91PS_D©aFœsh
 
pD©aFœsh
,

266 
Buf„rComm™d
,

267 
∑ge
)

269 
cmdsize
;

271 i‡((
Buf„rComm™d
 !
DB_PAGE_2_BUF1_TRF
Ë&& (Buf„rComm™d !
DB_PAGE_2_BUF2_TRF
))

272  
AT91C_DATAFLASH_BAD_COMMAND
;

275 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_size
 = 0;

276 
cmdsize
 = 4;

277 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

278 
cmdsize
 = 5;

279 (
	`AT91F_D©aFœshSídComm™d
(
pD©aFœsh
, 
Buf„rComm™d
, 
cmdsize
,

280 
∑ge
*
pD©aFœsh
->
pDevi˚
->
∑ges_size
));

281 
	}
}

295 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshWrôeBuf„r
(

296 
AT91PS_D©aFœsh
 
pD©aFœsh
,

297 
Buf„rComm™d
,

298 *
d©aBuf„r
,

299 
buf„rAddªss
,

300 
SizeToWrôe
 )

302 
cmdsize
;

304 i‡((
Buf„rComm™d
 !
DB_BUF1_WRITE
Ë&& (Buf„rComm™d !
DB_BUF2_WRITE
))

305  
AT91C_DATAFLASH_BAD_COMMAND
;

308 i‡(
buf„rAddªss
 > 
pD©aFœsh
->
pDevi˚
->
∑ges_size
)

309  
AT91C_DATAFLASH_BAD_ADDRESS
;

312 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[0] = 
Buf„rComm™d
;

313 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[1] = 0;

314 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

316 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[2] = 0;

317 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[3] = ()((()(
buf„rAddªss
 &ÖD©aFœsh->
pDevi˚
->
byã_mask
)) >> 8) ;

318 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[4] = ()(()
buf„rAddªss
 & 0x00FF) ;

319 
cmdsize
 = 5;

323 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[2] = ()((()(
buf„rAddªss
 &ÖD©aFœsh->
pDevi˚
->
byã_mask
)) >> 8) ;

324 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[3] = ()(()
buf„rAddªss
 & 0x00FF) ;

325 
pD©aFœsh
->
pD©aFœshDesc
->
comm™d
[4] = 0;

326 
cmdsize
 = 4;

329 
pD©aFœsh
->
pD©aFœshDesc
->
tx_cmd_±
 =ÖD©aFœsh->pD©aFœshDesc->
comm™d
 ;

330 
pD©aFœsh
->
pD©aFœshDesc
->
tx_cmd_size
 = 
cmdsize
 ;

331 
pD©aFœsh
->
pD©aFœshDesc
->
rx_cmd_±
 =ÖD©aFœsh->pD©aFœshDesc->
comm™d
 ;

332 
pD©aFœsh
->
pD©aFœshDesc
->
rx_cmd_size
 = 
cmdsize
 ;

334 
pD©aFœsh
->
pD©aFœshDesc
->
rx_d©a_±
 = 
d©aBuf„r
 ;

335 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_±
 = 
d©aBuf„r
 ;

336 
pD©aFœsh
->
pD©aFœshDesc
->
rx_d©a_size
 = 
SizeToWrôe
 ;

337 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_size
 = 
SizeToWrôe
 ;

339  
	`AT91F_SpiWrôe
(
pD©aFœsh
->
pD©aFœshDesc
);

340 
	}
}

351 
AT91S_D©aFœshSètus
 
	$AT91F_PageEø£
(

352 
AT91PS_D©aFœsh
 
pD©aFœsh
,

353 
∑ge
)

355 
cmdsize
;

358 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_size
 = 0;

360 
cmdsize
 = 4;

361 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

362 
cmdsize
 = 5;

363 (
	`AT91F_D©aFœshSídComm™d
(
pD©aFœsh
, 
DB_PAGE_ERASE
, 
cmdsize
,

364 
∑ge
*
pD©aFœsh
->
pDevi˚
->
∑ges_size
));

365 
	}
}

376 
AT91S_D©aFœshSètus
 
	$AT91F_WrôeBuf„rToMaö
 (

377 
AT91PS_D©aFœsh
 
pD©aFœsh
,

378 
Buf„rComm™d
,

379 
de°
 )

381 
cmdsize
;

383 i‡((
Buf„rComm™d
 !
DB_BUF1_PAGE_PGM
) &&

384 (
Buf„rComm™d
 !
DB_BUF1_PAGE_ERASE_PGM
) &&

385 (
Buf„rComm™d
 !
DB_BUF2_PAGE_PGM
) &&

386 (
Buf„rComm™d
 !
DB_BUF2_PAGE_ERASE_PGM
) )

387  
AT91C_DATAFLASH_BAD_COMMAND
;

390 
pD©aFœsh
->
pD©aFœshDesc
->
tx_d©a_size
 = 0;

392 
cmdsize
 = 4;

393 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

394 
cmdsize
 = 5;

396 (
	`AT91F_D©aFœshSídComm™d
 (
pD©aFœsh
, 
Buf„rComm™d
, 
cmdsize
, 
de°
));

397 
	}
}

407 
AT91S_D©aFœshSètus
 
	$AT91F_P¨tülPageWrôe
 (

408 
AT91PS_D©aFœsh
 
pD©aFœsh
,

409 *
§c
,

410 
de°
,

411 
size
)

413 
∑ge
;

414 
AdrInPage
;

416 
∑ge
 = 
de°
 / (
pD©aFœsh
->
pDevi˚
->
∑ges_size
);

417 
AdrInPage
 = 
de°
 % (
pD©aFœsh
->
pDevi˚
->
∑ges_size
);

420 
	`AT91F_MaöMem‹yToBuf„rTøns„r
(
pD©aFœsh
, 
DB_PAGE_2_BUF1_TRF
, 
∑ge
);

421 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

424 
	`AT91F_D©aFœshWrôeBuf„r
(
pD©aFœsh
, 
DB_BUF1_WRITE
, 
§c
, 
AdrInPage
, 
size
);

425 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

428 i‡(
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
 >= 16384)

430 
	`AT91F_PageEø£
(
pD©aFœsh
, 
∑ge
);

431 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

435 (
	`AT91F_WrôeBuf„rToMaö
(
pD©aFœsh
, 
DB_BUF1_PAGE_ERASE_PGM
,

436 (
∑ge
*
pD©aFœsh
->
pDevi˚
->
∑ges_size
)));

437 
	}
}

447 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshWrôe
(

448 
AT91PS_D©aFœsh
 
pD©aFœsh
,

449 *
§c
,

450 
de°
,

451 
size
 )

453 
Àngth
;

454 
∑ge
;

455 
°©us
;

457 
	`AT91F_SpiE«bÀ
(
pD©aFœsh
->
pDevi˚
->
cs
);

459 i‡–(
de°
 + 
size
Ë> (
pD©aFœsh
->
pDevi˚
->
∑ges_size
 * (pD©aFœsh->pDevi˚->
∑ges_numbî
)))

460  
AT91C_DATAFLASH_MEMORY_OVERFLOW
;

463 i‡((
de°
 % (()(
pD©aFœsh
->
pDevi˚
->
∑ges_size
))) != 0 ) {

464 
Àngth
 = 
pD©aFœsh
->
pDevi˚
->
∑ges_size
 - (
de°
 % (()(pDataFlash->pDevice->pages_size)));

466 i‡(
size
 < 
Àngth
)

467 
Àngth
 = 
size
;

469 if(!
	`AT91F_P¨tülPageWrôe
(
pD©aFœsh
,
§c
, 
de°
, 
Àngth
))

470  
AT91C_DATAFLASH_ERROR
;

472 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

475 
size
 -
Àngth
;

476 
de°
 +
Àngth
;

477 
§c
 +
Àngth
;

480 –
size
 - 
pD©aFœsh
->
pDevi˚
->
∑ges_size
 ) >= 0 )

483 
∑ge
 = ()
de°
 / (
pD©aFœsh
->
pDevi˚
->
∑ges_size
);

485 
°©us
 = 
	`AT91F_D©aFœshWrôeBuf„r
(
pD©aFœsh
, 
DB_BUF1_WRITE
, 
§c
,

486 0, 
pD©aFœsh
->
pDevi˚
->
∑ges_size
);

487 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

489 
°©us
 = 
	`AT91F_PageEø£
(
pD©aFœsh
, 
∑ge
);

490 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

491 i‡(!
°©us
)

492  
AT91C_DATAFLASH_ERROR
;

494 
°©us
 = 
	`AT91F_WrôeBuf„rToMaö
 (
pD©aFœsh
, 
DB_BUF1_PAGE_PGM
, 
de°
);

495 if(!
°©us
)

496  
AT91C_DATAFLASH_ERROR
;

498 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

501 
size
 -
pD©aFœsh
->
pDevi˚
->
∑ges_size
 ;

502 
de°
 +
pD©aFœsh
->
pDevi˚
->
∑ges_size
 ;

503 
§c
 +
pD©aFœsh
->
pDevi˚
->
∑ges_size
 ;

507 i‡–
size
 > 0 ) {

509 if(!
	`AT91F_P¨tülPageWrôe
(
pD©aFœsh
, 
§c
, 
de°
, 
size
) )

510  
AT91C_DATAFLASH_ERROR
;

511 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

513  
AT91C_DATAFLASH_OK
;

514 
	}
}

523 
	$AT91F_D©aFœshRód
(

524 
AT91PS_D©aFœsh
 
pD©aFœsh
,

525 
addr
,

526 
size
,

527 *
buf„r
)

529 
SizeToRód
;

531 
	`AT91F_SpiE«bÀ
(
pD©aFœsh
->
pDevi˚
->
cs
);

533 if(
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
Ë!
AT91C_DATAFLASH_OK
)

536 
size
)

538 
SizeToRód
 = (
size
 < 0x8000)? size:0x8000;

540 i‡(
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
)

541 !
AT91C_DATAFLASH_OK
)

544 i‡(
	`AT91F_D©aFœshC⁄töuousRód
 (
pD©aFœsh
, 
addr
, (*)
buf„r
,

545 
SizeToRód
Ë!
AT91C_DATAFLASH_OK
)

548 
size
 -
SizeToRód
;

549 
addr
 +
SizeToRód
;

550 
buf„r
 +
SizeToRód
;

553  
AT91C_DATAFLASH_OK
;

554 
	}
}

563 
	$AT91F_D©aÊashProbe
(
cs
, 
AT91PS_D©aÊashDesc
 
pDesc
)

565 
	`AT91F_SpiE«bÀ
(
cs
);

566 
	`AT91F_D©aFœshGëSètus
(
pDesc
);

567  ((
pDesc
->
comm™d
[1] == 0xFF)? 0: (pDesc->command[1] & 0x3C));

568 
	}
}

575 
AT91S_D©aFœshSètus
 
	$AT91F_D©aFœshEø£
(
AT91PS_D©aFœsh
 
pD©aFœsh
)

577 
∑ge
;

578 
°©us
;

580 
	`AT91F_SpiE«bÀ
(
pD©aFœsh
->
pDevi˚
->
cs
);

582 
∑ge
=0;Öagê< 
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
;Öage++)

585 i‡((
∑ge
 & 0x00FF) == 0)

586 
	`¥ötf
("\rERA %d/%d", 
∑ge
, 
pD©aFœsh
->
pDevi˚
->
∑ges_numbî
);

587 
°©us
 = 
	`AT91F_PageEø£
(
pD©aFœsh
, 
∑ge
);

588 
	`AT91F_D©aFœshWaôRódy
(
pD©aFœsh
->
pD©aFœshDesc
, 
AT91C_DATAFLASH_TIMEOUT
);

589 i‡(!
°©us
)

590  
AT91C_DATAFLASH_ERROR
;

593  
AT91C_DATAFLASH_OK
;

594 
	}
}

	@linux/at91/image/dfboot/src/com.c

16 
	~"AT91RM9200.h
"

17 
	~"lib_AT91RM9200.h
"

18 
	~"c⁄fig.h
"

19 
	~"com.h
"

20 
	~"°dio.h
"

22 
	gîa£_£q
[] = "\b \b";

24 
	#MAX_UARTS
 1

	)

27 
	guß
[1] = {()
AT91C_BASE_DBGU
};

28 
	gus
;

29 
	gp‹t_dëe˘ed
;

31 
	$©91_öô_u¨ts
()

33 
i
;

35 
p‹t_dëe˘ed
 = 0;

36 
	`AT91F_DBGU_CfgPIO
();

37 
	`AT91F_US0_CfgPIO
();

38 
	`AT91F_US0_CfgPMC
();

40 
i
=0; i<
MAX_UARTS
; i++) {

41 
us
 = 
uß
[
i
];

42 
	`AT91F_US_Re£tRx
((
AT91PS_USART
)
us
);

43 
	`AT91F_US_Re£tTx
((
AT91PS_USART
)
us
);

46 
	`AT91F_US_C⁄figuª
(

47 (
AT91PS_USART
)
us
,

48 
AT91C_MASTER_CLOCK
,

49 
AT91C_US_ASYNC_MODE
,

55 
	`AT91F_US_E«bÀTx
((
AT91PS_USART
)
us
);

57 
	`AT91F_US_E«bÀRx
((
AT91PS_USART
)
us
);

59 
us
 = 
uß
[0];

60 
	}
}

62 
	$©91_£rül_putc
(
ch
)

64 i‡(
ch
 == '\n')

65 
	`©91_£rül_putc
('\r');

66 !
	`AT91F_US_TxRódy
((
AT91PS_USART
)
us
));

67 
	`AT91F_US_PutCh¨
((
AT91PS_USART
)
us
, ()
ch
);

68  
ch
;

69 
	}
}

77 
	$©91_£rül_gëc
()

81 i‡(!
p‹t_dëe˘ed
) {

82 i‡(
us
 =
uß
[0]) {

83 
us
 = 
uß
[1];

86 
us
 = 
uß
[0];

90 if(
	`AT91F_US_RxRódy
((
AT91PS_USART
)
us
)) {

92 
p‹t_dëe˘ed
 = 1;

94 (()
	`AT91F_US_GëCh¨
((
AT91PS_USART
)
us
));

97 
	}
}

106 
	$AT91F_RódLöe
 (c⁄° *c⁄° 
¥om±
, *
c⁄sﬁe_buf„r
)

108 *
p
 = 
c⁄sﬁe_buf„r
;

109 
n
 = 0;

110 
∂í
 = 
	`°æí
 (
¥om±
);

111 
cﬁ
;

112 
c
;

115 i‡(
¥om±
)

116 
	`¥ötf
(
¥om±
);

117 
cﬁ
 = 
∂í
;

120 
c
 = 
	`gëc
();

122 
c
) {

125 *
p
 = '\0';

126 
	`puts
 ("\n");

127  (
p
 - 
c⁄sﬁe_buf„r
);

130 
c⁄sﬁe_buf„r
[0] = '\0';

135 i‡(
n
) {

136 --
p
;

137 
	`¥ötf
(
îa£_£q
);

138 
cﬁ
--;

139 
n
--;

147 i‡(
n
 < (
AT91C_CB_SIZE
 -2))

149 ++
cﬁ
;

150 
	`putc
(
c
);

151 *
p
++ = 
c
;

152 ++
n
;

156 
	`putc
('\a');

160 
	}
}

170 
	$AT91F_WaôKeyPªs£d
()

172 
c
;

173 
	`puts
("KEY");

174 
c
 = 
	`gëc
();

175 
	`putc
('\n');

176 
	}
}

178 
	$puts
(c⁄° *
°r
)

180 *
°r
 != 0) {

181 
	`©91_£rül_putc
(*
°r
);

182 
°r
++;

185 
	}
}

187 
	$putc
(
c
)

189  
	`©91_£rül_putc
(
c
);

190 
	}
}

192 
	$putch¨
(
c
)

194  
	`putc
(
c
);

195 
	}
}

197 
	$gëc
()

199  
	`©91_£rül_gëc
();

200 
	}
}

202 
	$°æí
(c⁄° *
°r
)

204 
Àn
 = 0;

206 if(
°r
 == (*)0)

209 *
°r
++ != 0)

210 
Àn
++;

212  
Àn
;

213 
	}
}

215 
	#ZEROPAD
 1

	)

216 
	#SIGN
 2

	)

217 
	#LEFT
 4

	)

218 
	#LARGE
 8

	)

220 
	#do_div
(
n
,
ba£
) ({ \

221 
__ªs
; \

222 
__ªs
 = ((Ë
n
Ë% (Ë
ba£
; \

223 
n
 = ((ËnË/ (Ë
ba£
; \

224 
__ªs
; \

225 })

	)

227 
	$numbî
(
num
, 
ba£
, 
size
,

228 
¥ecisi⁄
, 
ty≥
)

230 
c
, 
sign
, 
tmp
[66];

231 c⁄° *
digôs
="0123456789ABCDEF";

232 
i
;

234 i‡(
ty≥
 & 
LEFT
)

235 
ty≥
 &~
ZEROPAD
;

236 i‡(
ba£
 < 2 || base > 16)

238 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

239 
sign
 = 0;

241 if(
ty≥
 & 
SIGN
 && 
num
 < 0)

243 
sign
 = '-';

244 
num
 = -num;

245 
size
--;

248 
i
 = 0;

249 if(
num
 == 0)

250 
tmp
[
i
++] = 
digôs
[0];

251 
num
 != 0)

252 
tmp
[
i
++] = 
digôs
[
	`do_div
(
num
, 
ba£
)];

254 if(
i
 > 
¥ecisi⁄
)

255 
¥ecisi⁄
 = 
i
;

256 
size
 -
¥ecisi⁄
;

258 if(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

259 
size
-->0)

260 
	`putc
(' ');

262 if(
sign
)

263 
	`putc
(
sign
);

265 i‡(!(
ty≥
 & 
LEFT
))

266 
size
-- > 0)

267 
	`putc
(
c
);

269 
i
 < 
¥ecisi⁄
--)

270 
	`putc
('0');

272 
i
-- > 0)

273 
	`putc
(
tmp
[
i
]);

275 
size
-- > 0)

276 
	`putc
(' ');;

279 
	}
}

281 
	$hvÂrötf
(c⁄° *
fmt
, 
va_li°
 
va
)

283 *
s
;

286 if(*
fmt
 == '%') {

287 
boﬁ
 
d⁄e
 = 
Ál£
;

289 
ty≥
 = 0;

290 
¥ecisi⁄
 = 0;

293 
fmt
++;

294 *
fmt
) {

296 if(!
¥ecisi⁄
)

297 
ty≥
 |
ZEROPAD
;

307 
¥ecisi⁄
 =Öªcisi⁄ * 10 + (*
fmt
 - '0');

312 
s
 = 
	`va_¨g
(
va
, *);

313 if(!
s
)

314 
	`puts
("<NULL>");

316 
	`puts
(
s
);

317 
d⁄e
 = 
åue
;

320 
	`putc
(
	`va_¨g
(
va
, ));

321 
d⁄e
 = 
åue
;

324 
	`numbî
(
	`va_¨g
(
va
, ), 10, 0, 
¥ecisi⁄
, 
ty≥
);

325 
d⁄e
 = 
åue
;

329 
	`numbî
(
	`va_¨g
(
va
, ), 16, 0, 
¥ecisi⁄
, 
ty≥
);

330 
d⁄e
 = 
åue
;

333 
	`putc
(*
fmt
);

334 
d⁄e
 = 
åue
;

336 
	`putc
('%');

337 
	`putc
(*
fmt
);

338 
d⁄e
 = 
åue
;

341 } !
d⁄e
);

342 } if(*
fmt
 == '\\') {

343 
fmt
++;

344 if(*
fmt
 == 'r') {

345 
	`putc
('\r');

346 } if(*
fmt
 == 'n') {

347 
	`putc
('\n');

350 
	`putc
(*
fmt
);

352 
fmt
++;

353 } *
fmt
 != 0);

356 
	}
}

358 
	$¥ötf
(c⁄° *
fmt
, ...)

360 
va_li°
 
≠
;

361 
i
;

363 
	`va_°¨t
(
≠
, 
fmt
);

364 
i
 = 
	`hvÂrötf
(
fmt
, 
≠
);

365 
	`va_íd
(
≠
);

367  
i
;

368 
	}
}

	@linux/at91/image/dfboot/src/com.h

16 #i‚de‡
com_h


17 
	#com_h


	)

19 
	#AT91C_CB_SIZE
 20

	)

22 
	#ESC
 \033

	)

24 
AT91F_RódLöe
 (c⁄° *c⁄° 
¥om±
, *
c⁄sﬁe_buf„r
);

25 
AT91F_WaôKeyPªs£d
();

	@linux/at91/image/dfboot/src/config.h

2 #i‚de‡
_CONFIG_H


3 
	#_CONFIG_H


	)

6 #unde‡
PAGESZ_1056


7 
	#SPI_LOW_SPEED
 1

	)

8 
	#AT91C_DELAY_TO_BOOT
 1500

	)

10 
	#CRC_RETRIES
 0x100

	)

12 
	#AT91C_MASTER_CLOCK
 59904000

	)

13 
	#AT91C_BAUD_RATE
 115200

	)

15 
	#AT91C_ALTERNATE_USART
 
AT91C_BASE_US0


	)

	@linux/at91/image/dfboot/src/dataflash.c

15 
	~"c⁄fig.h
"

16 
	~"°dio.h
"

17 
	~"d©aÊash.h
"

20 
AT91S_DATAFLASH_INFO
 
	gd©aÊash_öfo
[
CFG_MAX_DATAFLASH_BANKS
];

21 
AT91S_D©aFœsh
 
	gD©aFœshIn°
;

23 
	gcs
[][
CFG_MAX_DATAFLASH_BANKS
] = {

24 {
CFG_DATAFLASH_LOGIC_ADDR_CS0
, 0},

25 {
CFG_DATAFLASH_LOGIC_ADDR_CS3
, 3}

28 
	$AT91F_D©aÊashInô
()

30 
i
;

31 
dfcode
;

32 
Nb_devi˚
 = 0;

34 
	`AT91F_SpiInô
();

36 
i
 = 0; i < 
CFG_MAX_DATAFLASH_BANKS
; i++) {

37 
d©aÊash_öfo
[
i
].
id
 = 0;

38 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 = 0;

39 
dfcode
 = 
	`AT91F_D©aÊashProbe
 (
cs
[
i
][1], &
d©aÊash_öfo
[i].
Desc
);

41 
dfcode
) {

42 
AT45DB161
:

43 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 = 4096;

44 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
 = 528;

45 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ge_off£t
 = 10;

46 
d©aÊash_öfo
[
i
].
Devi˚
.
byã_mask
 = 0x300;

47 
d©aÊash_öfo
[
i
].
Devi˚
.
cs
 = cs[i][1];

48 
d©aÊash_öfo
[
i
].
Desc
.
D©aFœsh_°©e
 = 
IDLE
;

49 
d©aÊash_öfo
[
i
].
logiˇl_addªss
 = 
cs
[i][0];

50 
d©aÊash_öfo
[
i
].
id
 = 
dfcode
;

51 
Nb_devi˚
++;

54 
AT45DB321
:

55 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 = 8192;

56 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
 = 528;

57 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ge_off£t
 = 10;

58 
d©aÊash_öfo
[
i
].
Devi˚
.
byã_mask
 = 0x300;

59 
d©aÊash_öfo
[
i
].
Devi˚
.
cs
 = cs[i][1];

60 
d©aÊash_öfo
[
i
].
Desc
.
D©aFœsh_°©e
 = 
IDLE
;

61 
d©aÊash_öfo
[
i
].
logiˇl_addªss
 = 
cs
[i][0];

62 
d©aÊash_öfo
[
i
].
id
 = 
dfcode
;

63 
Nb_devi˚
++;

66 
AT45DB642
:

67 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 = 8192;

68 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
 = 1056;

69 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ge_off£t
 = 11;

70 
d©aÊash_öfo
[
i
].
Devi˚
.
byã_mask
 = 0x700;

71 
d©aÊash_öfo
[
i
].
Devi˚
.
cs
 = cs[i][1];

72 
d©aÊash_öfo
[
i
].
Desc
.
D©aFœsh_°©e
 = 
IDLE
;

73 
d©aÊash_öfo
[
i
].
logiˇl_addªss
 = 
cs
[i][0];

74 
d©aÊash_öfo
[
i
].
id
 = 
dfcode
;

75 
Nb_devi˚
++;

77 
AT45DB128
:

78 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 = 16384;

79 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
 = 1056;

80 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ge_off£t
 = 11;

81 
d©aÊash_öfo
[
i
].
Devi˚
.
byã_mask
 = 0x700;

82 
d©aÊash_öfo
[
i
].
Devi˚
.
cs
 = cs[i][1];

83 
d©aÊash_öfo
[
i
].
Desc
.
D©aFœsh_°©e
 = 
IDLE
;

84 
d©aÊash_öfo
[
i
].
logiˇl_addªss
 = 
cs
[i][0];

85 
d©aÊash_öfo
[
i
].
id
 = 
dfcode
;

86 
Nb_devi˚
++;

92  (
Nb_devi˚
);

93 
	}
}

96 
	$AT91F_D©aÊashPrötInfo
()

98 
i
;

99 
i
 = 0; i < 
CFG_MAX_DATAFLASH_BANKS
; i++) {

100 i‡(
d©aÊash_öfo
[
i
].
id
 != 0) {

101 
	`¥ötf
 ("DF:AT45DB");

102 
d©aÊash_öfo
[
i
].
id
) {

103 
AT45DB161
:

104 
	`¥ötf
 ("161");

107 
AT45DB321
:

108 
	`¥ötf
 ("321");

111 
AT45DB642
:

112 
	`¥ötf
 ("642");

114 
AT45DB128
:

115 
	`¥ötf
 ("128");

119 
	`¥ötf
 ("\n# PG: %6d\n"

123 (Ë
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
,

124 (Ë
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
,

125 (Ë
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_numbî
 *

126 
d©aÊash_öfo
[
i
].
Devi˚
.
∑ges_size
,

127 (Ë
d©aÊash_öfo
[
i
].
logiˇl_addªss
);

130 
	}
}

137 
AT91PS_D©aFœsh
 
	$AT91F_D©aÊashSñe˘
(
AT91PS_D©aFœsh
 
pFœsh
,

138 *
addr
)

140 
addr_vÆid
 = 0;

141 
i
;

143 
i
 = 0; i < 
CFG_MAX_DATAFLASH_BANKS
; i++)

144 i‡((*
addr
 & 0xFF000000Ë=
d©aÊash_öfo
[
i
].
logiˇl_addªss
) {

145 
addr_vÆid
 = 1;

148 i‡(!
addr_vÆid
) {

149 
pFœsh
 = (
AT91PS_D©aFœsh
) 0;

150  
pFœsh
;

152 
pFœsh
->
pD©aFœshDesc
 = &(
d©aÊash_öfo
[
i
].
Desc
);

153 
pFœsh
->
pDevi˚
 = &(
d©aÊash_öfo
[
i
].
Devi˚
);

154 *
addr
 -
d©aÊash_öfo
[
i
].
logiˇl_addªss
;

155  (
pFœsh
);

156 
	}
}

163 
	$ªad_d©aÊash
(
addr
, 
size
, *
ªsu…
)

165 
AddrToRód
 = 
addr
;

166 
AT91PS_D©aFœsh
 
pFœsh
 = &
D©aFœshIn°
;

168 
pFœsh
 = 
	`AT91F_D©aÊashSñe˘
 (pFœsh, &
AddrToRód
);

169 i‡(
pFœsh
 == 0)

172  (
	`AT91F_D©aFœshRód
(
pFœsh
, 
AddrToRód
, 
size
, 
ªsu…
));

173 
	}
}

180 
	$wrôe_d©aÊash
(
addr_de°
, 
addr_§c
,

181 
size
)

183 
AddrToWrôe
 = 
addr_de°
;

184 
AT91PS_D©aFœsh
 
pFœsh
 = &
D©aFœshIn°
;

186 
pFœsh
 = 
	`AT91F_D©aÊashSñe˘
’Fœsh, &
AddrToWrôe
);

187 i‡(
AddrToWrôe
 == -1)

190  
	`AT91F_D©aFœshWrôe
(
pFœsh
, (*Ë
addr_§c
, 
AddrToWrôe
, 
size
);

191 
	}
}

197 
	$îa£_d©aÊash
(
addr_de°
)

199 
AddrToWrôe
 = 
addr_de°
;

200 
AT91PS_D©aFœsh
 
pFœsh
 = &
D©aFœshIn°
;

202 
pFœsh
 = 
	`AT91F_D©aÊashSñe˘
 (pFœsh, &
AddrToWrôe
);

203 i‡(
AddrToWrôe
 == -1)

206  
	`AT91F_D©aFœshEø£
(
pFœsh
);

207 
	}
}

	@linux/at91/image/dfboot/src/dataflash.h

18 #i‚de‡
_D©aFœsh_h


19 
	#_D©aFœsh_h


	)

22 #ifdef 
SPI_LOW_SPEED


23 
	#AT91C_SPI_CLK
 14976000/4

	)

25 
	#AT91C_SPI_CLK
 14976000

	)

31 
	#DATAFLASH_TCSS
 (0x‡<< 16Ë

	)

32 
	#DATAFLASH_TCHS
 (0x1 << 24Ë

	)

35 
	#AT91C_SPI_PCS0_SERIAL_DATAFLASH
 0xE

	)

36 
	#AT91C_SPI_PCS3_DATAFLASH_CARD
 0x7

	)

38 
	#CFG_MAX_DATAFLASH_BANKS
 2

	)

39 
	#CFG_DATAFLASH_LOGIC_ADDR_CS0
 0xC0000000

	)

40 
	#CFG_DATAFLASH_LOGIC_ADDR_CS3
 0xD0000000

	)

43 
	mba£
;

44 
	msize
;

45 
	m∑ge_cou¡
;

46 
	m∑ge_size
;

47 
	mid
;

48 } 
	td©aÊash_öfo_t
;

50 
	tAT91S_D©aFœshSètus
;

59 
	s_AT91S_D©aÊashDesc
 {

60 *
	mtx_cmd_±
;

61 
	mtx_cmd_size
;

62 *
	mrx_cmd_±
;

63 
	mrx_cmd_size
;

64 *
	mtx_d©a_±
;

65 
	mtx_d©a_size
;

66 *
	mrx_d©a_±
;

67 
	mrx_d©a_size
;

68 vﬁ©ûê
	mD©aFœsh_°©e
;

69 
	mcomm™d
[8];

70 } 
	tAT91S_D©aÊashDesc
, *
	tAT91PS_D©aÊashDesc
;

75 
	s_AT91S_D©aÊash
 {

76 
	m∑ges_numbî
;

77 
	m∑ges_size
;

78 
	m∑ge_off£t
;

79 
	mbyã_mask
;

80 
	mcs
;

81 } 
	tAT91S_D©aÊashFótuªs
, *
	tAT91PS_D©aÊashFótuªs
;

87 
	s_AT91S_D©aFœsh
 {

88 
AT91PS_D©aÊashDesc
 
	mpD©aFœshDesc
;

89 
AT91PS_D©aÊashFótuªs
 
	mpDevi˚
;

90 } 
	tAT91S_D©aFœsh
, *
	tAT91PS_D©aFœsh
;

93 
	s_AT91S_DATAFLASH_INFO
 {

95 
AT91S_D©aÊashDesc
 
	mDesc
;

96 
AT91S_D©aÊashFótuªs
 
	mDevi˚
;

97 
	mlogiˇl_addªss
;

98 
	mid
;

99 } 
	tAT91S_DATAFLASH_INFO
, *
	tAT91PS_DATAFLASH_INFO
;

104 
	#AT45DB161
 0x2c

	)

105 
	#AT45DB321
 0x34

	)

106 
	#AT45DB642
 0x3c

	)

107 
	#AT45DB128
 0x10

	)

109 
	#AT91C_DATAFLASH_TIMEOUT
 20000

	)

112 
	#AT91C_DATAFLASH_BUSY
 0x00

	)

113 
	#AT91C_DATAFLASH_OK
 0x01

	)

114 
	#AT91C_DATAFLASH_ERROR
 0x02

	)

115 
	#AT91C_DATAFLASH_MEMORY_OVERFLOW
 0x03

	)

116 
	#AT91C_DATAFLASH_BAD_COMMAND
 0x04

	)

117 
	#AT91C_DATAFLASH_BAD_ADDRESS
 0x05

	)

121 
	#IDLE
 0x0

	)

122 
	#BUSY
 0x1

	)

123 
	#ERROR
 0x2

	)

126 
	#GET_STATUS
 0x0F

	)

133 
	#DB_CONTINUOUS_ARRAY_READ
 0xE8

	)

134 
	#DB_BURST_ARRAY_READ
 0xE8

	)

135 
	#DB_PAGE_READ
 0xD2

	)

136 
	#DB_BUF1_READ
 0xD4

	)

137 
	#DB_BUF2_READ
 0xD6

	)

138 
	#DB_STATUS
 0xD7

	)

141 
	#DB_BUF1_WRITE
 0x84

	)

142 
	#DB_BUF2_WRITE
 0x87

	)

143 
	#DB_BUF1_PAGE_ERASE_PGM
 0x83

	)

144 
	#DB_BUF1_PAGE_ERASE_FASTPGM
 0x93

	)

145 
	#DB_BUF2_PAGE_ERASE_PGM
 0x86

	)

146 
	#DB_BUF2_PAGE_ERASE_FASTPGM
 0x96

	)

147 
	#DB_BUF1_PAGE_PGM
 0x88

	)

148 
	#DB_BUF1_PAGE_FASTPGM
 0x98

	)

149 
	#DB_BUF2_PAGE_PGM
 0x89

	)

150 
	#DB_BUF2_PAGE_FASTPGM
 0x99

	)

151 
	#DB_PAGE_ERASE
 0x81

	)

152 
	#DB_BLOCK_ERASE
 0x50

	)

153 
	#DB_PAGE_PGM_BUF1
 0x82

	)

154 
	#DB_PAGE_FASTPGM_BUF1
 0x92

	)

155 
	#DB_PAGE_PGM_BUF2
 0x85

	)

156 
	#DB_PAGE_Fa°PGM_BUF2
 0x95

	)

159 
	#DB_PAGE_2_BUF1_TRF
 0x53

	)

160 
	#DB_PAGE_2_BUF2_TRF
 0x55

	)

161 
	#DB_PAGE_2_BUF1_CMP
 0x60

	)

162 
	#DB_PAGE_2_BUF2_CMP
 0x61

	)

163 
	#DB_AUTO_PAGE_PGM_BUF1
 0x58

	)

164 
	#DB_AUTO_PAGE_PGM_BUF2
 0x59

	)

168 
AT91S_DATAFLASH_INFO
 
d©aÊash_öfo
[
CFG_MAX_DATAFLASH_BANKS
];

170 
AT91F_SpiInô
();

171 
AT91F_D©aÊashProbe
(
i
, 
AT91PS_D©aÊashDesc
 
pDesc
);

172 
AT91F_D©aFœshRód
(
AT91PS_D©aFœsh
, , , *);

173 
AT91S_D©aFœshSètus
 
AT91F_D©aFœshWrôe
(
AT91PS_D©aFœsh
 ,*, , );

174 
AT91S_D©aFœshSètus
 
AT91F_D©aFœshEø£
(
AT91PS_D©aFœsh
 
pD©aFœsh
);

175 
AT91F_D©aÊashInô
();

176 
AT91F_D©aÊashPrötInfo
();

177 
ªad_d©aÊash
(
addr
, 
size
, *
ªsu…
);

178 
wrôe_d©aÊash
(
addr_de°
, 
addr_§c
, 
size
);

179 
îa£_d©aÊash
(
addr_de°
);

	@linux/at91/image/dfboot/src/div0.c

25 
	$__div0
 ()

28 
	}
}

	@linux/at91/image/dfboot/src/embedded_services.h

15 #i‚de‡
embedded_£vi˚s_h


16 
	#embedded_£vi˚s_h


	)

18 
	~"AT91RM9200.h
"

20 
	#AT91C_BASE_ROM
 (*)0x00100000

	)

23 
	#AT91C_BUFFER_SUCCESS
 0

	)

24 
	#AT91C_BUFFER_ERROR_SHIFT
 16

	)

25 
	#AT91C_BUFFER_ERROR
 (0x0F << 
AT91C_BUFFER_ERROR_SHIFT
)

	)

27 
	#AT91C_BUFFER_OVERFLOW
 (0x01 << 
AT91C_BUFFER_ERROR_SHIFT
)

	)

28 
	#AT91C_BUFFER_UNDERRUN
 (0x02 << 
AT91C_BUFFER_ERROR_SHIFT
)

	)

30 
	tAT91S_Buf„rSètus
;

32 
	g_AT91S_Pùe
;

35 
	s_AT91S_Buf„r


37 
_AT91S_Pùe
 *
	mpPùe
;

38 *
	mpChûd
;

41 
AT91S_Buf„rSètus
 (*
SëRdBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, *
	mpBuf„r
, 
	mSize
);

42 
AT91S_Buf„rSètus
 (*
SëWrBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, c⁄° *
	mpBuf„r
, 
	mSize
);

43 
AT91S_Buf„rSètus
 (*
R°RdBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
);

44 
AT91S_Buf„rSètus
 (*
R°WrBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
);

45 (*
	mMsgWrôãn
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, c⁄° *
	mpBuf„r
);

46 (*
	mMsgRód
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, c⁄° *
	mpBuf„r
);

48 
AT91S_Buf„rSètus
 (*
GëWrBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, c⁄° **
	mpD©a
, *
	mpSize
);

49 
AT91S_Buf„rSètus
 (*
GëRdBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, **
	mpD©a
, *
	mpSize
);

50 
AT91S_Buf„rSètus
 (*
Em±yWrBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, 
	msize
);

51 
AT91S_Buf„rSètus
 (*
FûlRdBuf„r
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
, 
	msize
);

52 (*
	mIsWrEm±y
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
);

53 (*
	mIsRdFuŒ
Ë(
_AT91S_Buf„r
 *
	mpSBuf„r
);

54 } 
	tAT91S_Buf„r
, *
	tAT91PS_Buf„r
;

65 
	s_AT91S_SBuf„r


67 
AT91S_Buf„r
 
	m∑ª¡
;

68 *
	mpRdBuf„r
;

69 c⁄° *
	mpWrBuf„r
;

70 
	mszRdBuf„r
;

71 
	mszWrBuf„r
;

72 
	m°RdBuf„r
;

73 
	m°WrBuf„r
;

74 } 
	tAT91S_SBuf„r
, *
	tAT91PS_SBuf„r
;

76 
	$AT91PS_Buf„r
 (*
	tAT91PF_O≥nSBuf„r
Ë(
	tAT91PS_SBuf„r
);

79 
AT91PS_Buf„r
 
	`AT91F_O≥nSBuf„r
(
AT91PS_SBuf„r
 
pBuf„r
);

82 
AT91S_Buf„rSètus
 
	`AT91F_SbSëRdBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
, *
pD©a
, 
Size
);

83 
AT91S_Buf„rSètus
 
	`AT91F_SbSëWrBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
, c⁄° *
pD©a
, 
Size
);

84 
AT91S_Buf„rSètus
 
	`AT91F_SbR°RdBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
);

85 
AT91S_Buf„rSètus
 
	`AT91F_SbR°WrBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
);

86 
	`AT91F_SbMsgWrôãn
 (
AT91PS_Buf„r
 
pBuf„r
, c⁄° *
pMsg
);

87 
	`AT91F_SbMsgRód
 (
AT91PS_Buf„r
 
pBuf„r
, c⁄° *
pMsg
);

89 
AT91S_Buf„rSètus
 
	`AT91F_SbGëWrBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
, c⁄° **
pD©a
, *
pSize
);

90 
AT91S_Buf„rSètus
 
	`AT91F_SbGëRdBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
, **
pD©a
, *
pSize
);

91 
AT91S_Buf„rSètus
 
	`AT91F_SbEm±yWrBuf„r
(
AT91PS_Buf„r
 
pBuf„r
, 
size
);

92 
AT91S_Buf„rSètus
 
	`AT91F_SbFûlRdBuf„r
 (
AT91PS_Buf„r
 
pBuf„r
, 
size
);

93 
	`AT91F_SbIsWrEm±y
 (
AT91PS_Buf„r
 
pBuf„r
);

94 
	`AT91F_SbIsRdFuŒ
 (
AT91PS_Buf„r
 
pBuf„r
);

96 #ifde‡
DBG_DRV_BUFFER


97 c⁄° *
	`AT91F_SbGëEº‹
(
AT91S_Buf„rSètus
 
îr‹Numbî
);

101 
	#AT91C_OPEN_CTRLTEMPO_SUCCESS
 0

	)

102 
	#AT91C_ERROR_OPEN_CTRLTEMPO
 1

	)

103 
	#AT91C_START_OK
 2

	)

104 
	#AT91C_STOP_OK
 3

	)

105 
	#AT91C_TIMEOUT_REACHED
 4

	)

107 
	e_AT91E_SvcTempo
 {

108 
AT91E_SVCTEMPO_DIS
,

109 
AT91E_SVCTEMPO_EN


110 } 
	tAT91E_SvcTempo
;

112 
	tAT91S_TempoSètus
;

115 
	s_AT91S_SvcTempo


119 
	`AT91S_TempoSètus
 (*
Sèπ
) (

120 
_AT91S_SvcTempo
 *
pSvc
,

121 
timeout
,

122 
ªlﬂd
,

123 (*
ˇŒback
Ë(
AT91S_TempoSètus
, *),

124 *
pD©a
);

125 
	`AT91S_TempoSètus
 (*
St›
Ë(
_AT91S_SvcTempo
 *
pSvc
);

127 
_AT91S_SvcTempo
 *
pPªviousTempo
;

128 
_AT91S_SvcTempo
 *
pNextTempo
;

131 
TickTempo
;

132 
RñﬂdTempo
;

133 (*
TempoCÆlback
)(
AT91S_TempoSètus
, *);

134 *
pPriv©eD©a
;

135 
AT91E_SvcTempo
 
Êag
;

136 } 
	tAT91S_SvcTempo
, *
	tAT91PS_SvcTempo
;

140 
	s_AT91S_CéTempo


145 
	`AT91S_TempoSètus
 (*
CéTempoSèπ
Ë(*
pTimî
);

146 
	`AT91S_TempoSètus
 (*
CéTempoSt›
Ë(*
pTimî
);

149 
	`AT91S_TempoSètus
 (*
SvcTempoSèπ
) (

150 
_AT91S_SvcTempo
 *
pSvc
,

151 
timeout
,

152 
ªlﬂd
,

153 (*
ˇŒback
Ë(
AT91S_TempoSètus
, *),

154 *
pD©a
);

155 
	`AT91S_TempoSètus
 (*
SvcTempoSt›
Ë(
_AT91S_SvcTempo
 *
pSvc
);

156 
	`AT91S_TempoSètus
 (*
CéTempoSëTime
)(
_AT91S_CéTempo
 *
pCål
, 
NewTime
);

157 
	`AT91S_TempoSètus
 (*
CéTempoGëTime
)(
_AT91S_CéTempo
 *
pCål
);

158 
	`AT91S_TempoSètus
 (*
CéTempoIsSèπ
)(
_AT91S_CéTempo
 *
pCål
);

159 
	`AT91S_TempoSètus
 (*
CéTempoCª©e
) (

160 
_AT91S_CéTempo
 *
pCål
,

161 
_AT91S_SvcTempo
 *
pTempo
);

162 
	`AT91S_TempoSètus
 (*
CéTempoRemove
) (

163 
_AT91S_CéTempo
 *
pCål
,

164 
_AT91S_SvcTempo
 *
pTempo
);

165 
	`AT91S_TempoSètus
 (*
CéTempoTick
Ë(
_AT91S_CéTempo
 *
pCål
);

169 *
pPriv©eD©a
;

170 c⁄° *
pTimî
;

171 
AT91PS_SvcTempo
 
pFú°Tempo
;

172 
AT91PS_SvcTempo
 
pNewTempo
;

173 } 
	tAT91S_CéTempo
, *
	tAT91PS_CéTempo
;

174 
	$AT91S_TempoSètus
 (*
	tAT91PF_O≥nCéTempo
Ë–
	tAT91PS_CéTempo
, const *);

177 
AT91S_TempoSètus
 
	`AT91F_O≥nCéTempo
–
AT91PS_CéTempo
 
pCålTempo
, c⁄° *
pTempoTimî
 );

179 
AT91S_TempoSètus
 
	`AT91F_STSèπ
 (*);

180 
AT91S_TempoSètus
 
	`AT91F_STSt›
 (*);

181 
AT91S_TempoSètus
 
	`AT91F_STSëTime
 (
AT91PS_CéTempo
, );

182 
AT91S_TempoSètus
 
	`AT91F_STGëTime
 (
AT91PS_CéTempo
);

183 
AT91S_TempoSètus
 
	`AT91F_STIsSèπ
 (
AT91PS_CéTempo
);

184 
AT91S_TempoSètus
 
	`AT91F_CéTempoCª©e
 (
AT91PS_CéTempo
, 
AT91PS_SvcTempo
);

185 
AT91S_TempoSètus
 
	`AT91F_CéTempoRemove
 (
AT91PS_CéTempo
, 
AT91PS_SvcTempo
);

186 
AT91S_TempoSètus
 
	`AT91F_CéTempoTick
 (
AT91PS_CéTempo
);

187 
AT91S_TempoSètus
 
	`AT91F_SvcTempoSèπ
 (

188 
AT91PS_SvcTempo
 
pSvc
,

189 
timeout
,

190 
ªlﬂd
,

191 (*
ˇŒback
Ë(
AT91S_TempoSètus
, *),

192 *
pD©a
);

193 
AT91S_TempoSètus
 
	`AT91F_SvcTempoSt›
 (
AT91PS_SvcTempo
);

197 
_AT91S_Buf„r
;

200 
	#AT91C_COMMSVC_SUCCESS
 0

	)

201 
	#AT91C_COMMSVC_ERROR_SHIFT
 8

	)

202 
	#AT91C_COMMSVC_ERROR
 (0x0‡<< 
AT91C_COMMSVC_ERROR_SHIFT
)

	)

204 
	tAT91S_SvcCommSètus
;

208 
	s_AT91S_Sîvi˚


211 
	`AT91S_SvcCommSètus
 (*
Re£t
Ë(
_AT91S_Sîvi˚
 *
pSîvi˚
);

212 
	`AT91S_SvcCommSètus
 (*
SèπTx
)(
_AT91S_Sîvi˚
 *
pSîvi˚
);

213 
	`AT91S_SvcCommSètus
 (*
SèπRx
)(
_AT91S_Sîvi˚
 *
pSîvi˚
);

214 
	`AT91S_SvcCommSètus
 (*
St›Tx
Ë(
_AT91S_Sîvi˚
 *
pSîvi˚
);

215 
	`AT91S_SvcCommSètus
 (*
St›Rx
Ë(
_AT91S_Sîvi˚
 *
pSîvi˚
);

216 (*
TxRódy
)(
_AT91S_Sîvi˚
 *
pSîvi˚
);

217 (*
RxRódy
)(
_AT91S_Sîvi˚
 *
pSîvi˚
);

219 
_AT91S_Buf„r
 *
pBuf„r
;

220 *
pChûd
;

221 } 
	tAT91S_SvcComm
, *
	tAT91PS_SvcComm
;

224 
	#AT91C_XMODEM_SOH
 0x01

	)

225 
	#AT91C_XMODEM_STX
 0x02

	)

226 
	#AT91C_XMODEM_EOT
 0x04

	)

227 
	#AT91C_XMODEM_ACK
 0x06

	)

228 
	#AT91C_XMODEM_NAK
 0x15

	)

229 
	#AT91C_XMODEM_CRCCHR
 'C'

	)

231 
	#AT91C_XMODEM_PACKET_SIZE
 2

232 
	#AT91C_XMODEM_CRC_SIZE
 2

233 
	#AT91C_XMODEM_DATA_SIZE_SOH
 128

234 
	#AT91C_XMODEM_DATA_SIZE_STX
 1024

235 

	)

237 
	s_AT91PS_SvcXmodem
 {

240 
	`AT91S_SvcCommSètus
 (*
H™dÀr
Ë(
_AT91PS_SvcXmodem
 *, );

241 
	`AT91S_SvcCommSètus
 (*
SèπTx
Ë(
_AT91PS_SvcXmodem
 *, );

242 
	`AT91S_SvcCommSètus
 (*
St›Tx
Ë(
_AT91PS_SvcXmodem
 *, );

245 
	`AT91S_SvcCommSètus
 (*
RódH™dÀr
Ë(
_AT91PS_SvcXmodem
 *, 
c§
);

246 
	`AT91S_SvcCommSètus
 (*
WrôeH™dÀr
Ë(
_AT91PS_SvcXmodem
 *, 
c§
);

247 (*
GëCrc
Ë(*
±r
, 
cou¡
);

248 (*
CheckHódî
Ë(
cuºítPackë
, *
∑ckë
);

249 (*
CheckD©a
Ë(
_AT91PS_SvcXmodem
 *);

251 
AT91S_SvcComm
 
∑ª¡
;

252 
AT91PS_USART
 
pUßπ
;

254 
AT91S_SvcTempo
 
ãmpo
;

256 *
pD©a
;

257 
d©aSize
;

258 
∑ckëDesc
[
AT91C_XMODEM_PACKET_SIZE
];

259 
∑ckëId
;

260 
∑ckëSètus
;

261 
isPackëDesc
;

262 
eŸ
;

263 } 
	tAT91S_SvcXmodem
, *
	tAT91PS_SvcXmodem
;

265 
	$AT91PS_SvcComm
 (*
	tAT91PF_O≥nSvcXmodem
Ë–
	tAT91PS_SvcXmodem
, 
	tAT91PS_USART
, 
	tAT91PS_CéTempo
);

268 
AT91PS_SvcComm
 
	`AT91F_O≥nSvcXmodem
–
AT91PS_SvcXmodem
, 
AT91PS_USART
, 
AT91PS_CéTempo
);

270 
	`AT91F_SvcXmodemGëCrc
 (*
±r
, 
cou¡
);

271 
	`AT91F_SvcXmodemCheckHódî
(
cuºítPackë
, *
∑ckë
);

272 
	`AT91F_SvcXmodemCheckD©a
 (
AT91PS_SvcXmodem
 
pSvcXmodem
);

273 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemRódH™dÀr
(
AT91PS_SvcXmodem
 
pSvcXmodem
, 
c§
);

274 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemWrôeH™dÀr
(
AT91PS_SvcXmodem
 
pSvcXmodem
, 
c§
);

275 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemSèπTx
(
AT91PS_SvcComm
 
pSvcComm
);

276 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemSt›Tx
(
AT91PS_SvcComm
 
pSvcComm
);

277 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemSèπRx
(
AT91PS_SvcComm
 
pSvcComm
);

278 
AT91S_SvcCommSètus
 
	`AT91F_SvcXmodemSt›Rx
(
AT91PS_SvcComm
 
pSvcComm
);

279 
	`AT91F_SvcXmodemTxRódy
(
AT91PS_SvcComm
 
pSîvi˚
);

280 
	`AT91F_SvcXmodemRxRódy
(
AT91PS_SvcComm
 
pSvcComm
);

284 
	#AT91C_PIPE_SUCCESS
 0

	)

285 
	#AT91C_PIPE_ERROR_SHIFT
 8

	)

286 
	#AT91C_PIPE_ERROR
 (0x0F << 
AT91C_PIPE_ERROR_SHIFT
)

	)

288 
	#AT91C_PIPE_OPEN_FAILED
 (1 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

289 
	#AT91C_PIPE_WRITE_FAILED
 (2 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

290 
	#AT91C_PIPE_WRITE_ABORTED
 (3 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

291 
	#AT91C_PIPE_READ_FAILED
 (4 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

292 
	#AT91C_PIPE_READ_ABORTED
 (5 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

293 
	#AT91C_PIPE_ABORT_FAILED
 (6 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

294 
	#AT91C_PIPE_RESET_FAILED
 (7 << 
AT91C_PIPE_ERROR_SHIFT
)

	)

297 
	tAT91S_PùeSètus
;

299 
	s_AT91S_Pùe


302 
AT91PS_SvcComm
 
pSvcComm
;

303 
AT91PS_Buf„r
 
pBuf„r
;

306 (*
WrôeCÆlback
Ë(
AT91S_PùeSètus
, *);

307 (*
RódCÆlback
Ë(
AT91S_PùeSètus
, *);

308 *
pPriv©eRódD©a
;

309 *
pPriv©eWrôeD©a
;

312 
	`AT91S_PùeSètus
 (*
Wrôe
) (

313 
_AT91S_Pùe
 *
pPùe
,

314 c⁄° * 
pD©a
,

315 
size
,

316 (*
ˇŒback
Ë(
AT91S_PùeSètus
, *),

317 *
¥iv©eD©a
);

318 
	`AT91S_PùeSètus
 (*
Ród
) (

319 
_AT91S_Pùe
 *
pPùe
,

320 *
pD©a
,

321 
size
,

322 (*
ˇŒback
Ë(
AT91S_PùeSètus
, *),

323 *
¥iv©eD©a
);

324 
	`AT91S_PùeSètus
 (*
Ab‹tWrôe
) (

325 
_AT91S_Pùe
 *
pPùe
);

326 
	`AT91S_PùeSètus
 (*
Ab‹tRód
) (

327 
_AT91S_Pùe
 *
pPùe
);

328 
	`AT91S_PùeSètus
 (*
Re£t
) (

329 
_AT91S_Pùe
 *
pPùe
);

330 (*
IsWrôãn
) (

331 
_AT91S_Pùe
 *
pPùe
,

332 c⁄° *
pVoid
);

333 (*
IsRe˚ived
) (

334 
_AT91S_Pùe
 *
pPùe
,

335 c⁄° *
pVoid
);

336 } 
	tAT91S_Pùe
, *
	tAT91PS_Pùe
;

339 
	$AT91PS_Pùe
 (*
	tAT91PF_O≥nPùe
Ë(
	tAT91PS_Pùe
, 
	tAT91PS_SvcComm
, 
	tAT91PS_Buf„r
);

340 (*
	tAT91PF_PùeWrôeCÆlBack
Ë(
	tAT91S_PùeSètus
, *);

341 (*
	tAT91PF_PùeRódCÆlBack
Ë(
	tAT91S_PùeSètus
, *);

342 
	$AT91S_PùeSètus
 (*
	tAT91PF_PùeWrôe
Ë(
	tAT91PS_Pùe
, c⁄° *, , (*Ë(
	tAT91S_PùeSètus
, *), *);

343 
	$AT91S_PùeSètus
 (*
	tAT91PF_PùeRód
Ë(
	tAT91PS_Pùe
, c⁄° *, , (*Ë(
	tAT91S_PùeSètus
, *), *);

344 
	$AT91S_PùeSètus
 (*
	tAT91PF_PùeAb‹tWrôe
Ë(
	tAT91PS_Pùe
);

345 
	$AT91S_PùeSètus
 (*
	tAT91PF_PùeAb‹tRód
Ë(
	tAT91PS_Pùe
);

346 
	$AT91S_PùeSètus
 (*
	tAT91PF_PùeRe£t
Ë(
	tAT91PS_Pùe
);

347 (*
	tAT91PF_PùeIsWrôãn
Ë(
	tAT91PS_Pùe
, const *);

348 (*
	tAT91PF_PùeIsRe˚ived
Ë(
	tAT91PS_Pùe
, const *);

351 
AT91PS_Pùe
 
	`AT91F_O≥nPùe
(

352 
AT91PS_Pùe
 
pPùe
,

353 
AT91PS_SvcComm
 
pSvcComm
,

354 
AT91PS_Buf„r
 
pBuf„r
);

358 
AT91S_PùeSètus
 
	`AT91F_PùeWrôe
(

359 
AT91PS_Pùe
 
pPùe
,

360 c⁄° *
pVoid
,

361 
size
,

362 
AT91PF_PùeWrôeCÆlBack
 
ˇŒback
,

363 *
¥iv©eD©a
);

364 
AT91S_PùeSètus
 
	`AT91F_PùeRód
(

365 
AT91PS_Pùe
 
pPùe
,

366 *
pVoid
,

367 
Size
,

368 
AT91PF_PùeRódCÆlBack
 
ˇŒback
,

369 *
¥iv©eD©a
);

370 
AT91S_PùeSètus
 
	`AT91F_PùeAb‹tWrôe
(
AT91PS_Pùe
 
pPùe
);

371 
AT91S_PùeSètus
 
	`AT91F_PùeAb‹tRód
(
AT91PS_Pùe
 
pPùe
);

372 
AT91S_PùeSètus
 
	`AT91F_PùeRe£t
(
AT91PS_Pùe
 
pPùe
);

373 
	`AT91F_PùeMsgWrôãn
(
AT91PS_Pùe
 
pPùe
, c⁄° *
pVoid
);

374 
	`AT91F_PùeMsgRe˚ived
(
AT91PS_Pùe
 
pPùe
, c⁄° *
pVoid
);

376 #ifde‡
DBG_DRV_PIPE


379 c⁄° *
	`AT91F_PùeGëEº‹
(
AT91S_PùeSètus
 
msgId
);

382 c⁄° 
bô_ªv
[256];

384 
	`CÆcuœãCrc32
(const *,, *);

385 
	`CÆcuœãCrc16
(const *, , *);

386 
	`CÆcuœãCrcHdlc
(const *, , *);

387 
	`CÆcuœãCrc16ccôt
(const *, , *);

389 c⁄° * 
	tAT91PS_SVC_CRC_BIT_REV
 ;

391 (*
	tAT91PF_SVC_CRC32
) (const *, , *);

392 (*
	tAT91PF_SVC_CRC16
) (const *, , *);

393 (*
	tAT91PF_SVC_CRCHDLC
) (const *, , *);

394 (*
	tAT91PF_SVC_CRCCCITT
)(const *, , *);

397 (*
	tAT91PF_Söus
Ë(
	t™gÀ
);

398 c⁄° * 
	tAT91PS_SINE_TAB
;

400 
	`AT91F_Söus
(
™gÀ
);

401 c⁄° 
AT91C_SINUS180_TAB
[256];

404 (
	tTy≥AICH™dÀr
) () ;

408 
	s_AT91S_MEMCDesc


410 
AT91PS_MC
 
memc_ba£
 ;

411 
≥rùh_id
 ;

412 } 
	tAT91S_MEMCDesc
, *
	tAT91PS_MEMCDesc
 ;

414 
	s_AT91S_Pio2Desc


416 
AT91PS_PIO
 
pio_ba£
 ;

417 
≥rùh_id
 ;

418 
pio_numbî
 ;

419 } 
	tAT91S_Pio2Desc
, *
	tAT91PS_Pio2Desc
 ;

421 
	s_AT91S_SPIDesc


423 
AT91PS_SPI
 
•i_ba£
 ;

424 c⁄° 
AT91PS_PIO
 
pio_ba£
 ;

425 
≥rùh_id
 ;

426 
pö_•ck
 ;

427 
pö_miso
 ;

428 
pö_mosi
 ;

429 
pö_≈cs
[4] ;

430 } 
	tAT91S_SPIDesc
, *
	tAT91PS_SPIDesc
 ;

432 
	s_AT91S_USART2Desc


434 
AT91PS_USART
 
ußπ_ba£
 ;

435 c⁄° 
AT91PS_PIO
 
pio_ba£
 ;

436 
pö_rxd
 ;

437 
pö_txd
 ;

438 
pö_sck
 ;

439 
pö_πs
 ;

440 
pö_˘s
 ;

441 
pö_då
 ;

442 
pö_ri
 ;

443 
pö_d§
 ;

444 
pö_dcd
 ;

445 
≥rùh_id
 ;

446 } 
	tAT91S_USART2Desc
, *
	tAT91PS_USART2Desc
 ;

448 
	s_AT91S_TWIDesc


450 
AT91PS_TWI
 
TWI_ba£
 ;

451 c⁄° 
AT91PS_PIO
 
pio_ba£
 ;

452 
pö_sck
 ;

453 
pö_sda
 ;

454 
≥rùh_id
;

455 }
	tAT91S_TWIDesc
, *
	tAT91PS_TWIDesc
;

457 
	s_AT91S_STDesc


459 
AT91PS_ST
 
°_ba£
 ;

460 
Ty≥AICH™dÀr
 *
AsmSTH™dÀr
 ;

461 
PîùhId
 ;

462 } 
	tAT91S_STDesc
, *
	tAT91PS_STDesc
;

464 
	s_AT91S_RomBoŸ
 {

465 c⁄° 
vîsi⁄
;

467 c⁄° 
AT91S_MEMCDesc
 
MEMC_DESC
;

468 c⁄° 
AT91S_STDesc
 
SYSTIMER_DESC
;

469 c⁄° 
AT91S_Pio2Desc
 
PIOA_DESC
;

470 c⁄° 
AT91S_Pio2Desc
 
PIOB_DESC
;

471 c⁄° 
AT91S_USART2Desc
 
DBGU_DESC
;

472 c⁄° 
AT91S_USART2Desc
 
USART0_DESC
;

473 c⁄° 
AT91S_USART2Desc
 
USART1_DESC
;

474 c⁄° 
AT91S_USART2Desc
 
USART2_DESC
;

475 c⁄° 
AT91S_USART2Desc
 
USART3_DESC
;

476 c⁄° 
AT91S_TWIDesc
 
TWI_DESC
;

477 c⁄° 
AT91S_SPIDesc
 
SPI_DESC
;

480 c⁄° 
AT91PF_O≥nPùe
 
O≥nPùe
;

481 c⁄° 
AT91PF_O≥nSBuf„r
 
O≥nSBuf„r
;

482 c⁄° 
ª£rved1
;

483 c⁄° 
AT91PF_O≥nSvcXmodem
 
O≥nSvcXmodem
;

484 c⁄° 
AT91PF_O≥nCéTempo
 
O≥nCéTempo
;

485 c⁄° 
ª£rved2
;

486 c⁄° 
ª£rved3
;

487 c⁄° 
ª£rved4
;

488 c⁄° 
AT91PF_SVC_CRC16
 
CRC16
;

489 c⁄° 
AT91PF_SVC_CRCCCITT
 
CRCCCITT
;

490 c⁄° 
AT91PF_SVC_CRCHDLC
 
CRCHDLC
;

491 c⁄° 
AT91PF_SVC_CRC32
 
CRC32
;

492 c⁄° 
AT91PS_SVC_CRC_BIT_REV
 
Bô_Revî£_Aºay
;

493 c⁄° 
AT91PS_SINE_TAB
 
SöeTab
;

494 c⁄° 
AT91PF_Söus
 
Söe
;

495 } 
	tAT91S_RomBoŸ
, *
	tAT91PS_RomBoŸ
;

497 
	#AT91C_ROM_BOOT_ADDRESS
 ((c⁄° 
AT91S_RomBoŸ
 *Ë–*((*Ë(
AT91C_BASE_ROM
 + 0x20))Ë)

	)

	@linux/at91/image/dfboot/src/include/AT91C_MCI_Device.h

17 #i‚de‡
AT91C_MCI_Devi˚_h


18 
	#AT91C_MCI_Devi˚_h


	)

20 
	~"AT91RM9200.h
"

21 
	~"lib_AT91RM9200.h
"

23 
	tAT91S_MCIDevi˚Sètus
;

27 
	#AT91C_CARD_REMOVED
 0

	)

28 
	#AT91C_MMC_CARD_INSERTED
 1

	)

29 
	#AT91C_SD_CARD_INSERTED
 2

	)

31 
	#AT91C_NO_ARGUMENT
 0x0

	)

33 
	#AT91C_FIRST_RCA
 0xCAFE

	)

34 
	#AT91C_MAX_MCI_CARDS
 10

	)

36 
	#AT91C_BUS_WIDTH_1BIT
 0x00

	)

37 
	#AT91C_BUS_WIDTH_4BITS
 0x02

	)

40 
	#AT91C_MCI_IDLE
 0x0

	)

41 
	#AT91C_MCI_TIMEOUT_ERROR
 0x1

	)

42 
	#AT91C_MCI_RX_SINGLE_BLOCK
 0x2

	)

43 
	#AT91C_MCI_RX_MULTIPLE_BLOCK
 0x3

	)

44 
	#AT91C_MCI_RX_STREAM
 0x4

	)

45 
	#AT91C_MCI_TX_SINGLE_BLOCK
 0x5

	)

46 
	#AT91C_MCI_TX_MULTIPLE_BLOCK
 0x6

	)

47 
	#AT91C_MCI_TX_STREAM
 0x7

	)

50 
	#AT91C_TIMEOUT_CMDRDY
 30

	)

59 
	s_AT91S_MciDevi˚Desc


61 vﬁ©ûê
	m°©e
;

62 
	mSDC¨d_bus_width
;

64 } 
	tAT91S_MciDevi˚Desc
, *
	tAT91PS_MciDevi˚Desc
;

69 
	s_AT91S_MciDevi˚Fótuªs


71 
	mC¨d_In£πed
;

72 
	mRñ©ive_C¨d_Addªss
;

73 
	mMax_Ród_D©aBlock_Lígth
;

74 
	mMax_Wrôe_D©aBlock_Lígth
;

75 
	mRód_P¨tül
;

76 
	mWrôe_P¨tül
;

77 
	mEø£_Block_E«bÀ
;

78 
	mRód_Block_Mißlignmít
;

79 
	mWrôe_Block_Mißlignmít
;

80 
	mSe˘‹_Size
;

81 
	mMem‹y_C≠acôy
;

83 } 
	tAT91S_MciDevi˚Fótuªs
, *
	tAT91PS_MciDevi˚Fótuªs
 ;

88 
	s_AT91S_MciDevi˚


90 
AT91PS_MciDevi˚Desc
 
	mpMCI_Devi˚Desc
;

91 
AT91PS_MciDevi˚Fótuªs
 
	mpMCI_Devi˚Fótuªs
;

92 }
	tAT91S_MciDevi˚
, *
	tAT91PS_MciDevi˚
;

97 
	#AT91C_POWER_ON_INIT
 (0 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_INIT
 | 
AT91C_MCI_OPDCMD
)

	)

103 
	#AT91C_GO_IDLE_STATE_CMD
 (0 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 )

	)

104 
	#AT91C_MMC_GO_IDLE_STATE_CMD
 (0 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_OPDCMD
)

	)

105 
	#AT91C_MMC_SEND_OP_COND_CMD
 (1 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_OPDCMD
)

	)

106 
	#AT91C_ALL_SEND_CID_CMD
 (2 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_136
 )

	)

107 
	#AT91C_MMC_ALL_SEND_CID_CMD
 (2 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_136
 | 
AT91C_MCI_OPDCMD
)

	)

108 
	#AT91C_SET_RELATIVE_ADDR_CMD
 (3 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

109 
	#AT91C_MMC_SET_RELATIVE_ADDR_CMD
 (3 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 | 
AT91C_MCI_OPDCMD
)

	)

111 
	#AT91C_SET_DSR_CMD
 (4 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_NO
 | 
AT91C_MCI_MAXLAT
 )

112 

	)

113 
	#AT91C_SEL_DESEL_CARD_CMD
 (7 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

114 
	#AT91C_SEND_CSD_CMD
 (9 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_136
 | 
AT91C_MCI_MAXLAT
 )

	)

115 
	#AT91C_SEND_CID_CMD
 (10 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_136
 | 
AT91C_MCI_MAXLAT
 )

	)

116 
	#AT91C_MMC_READ_DAT_UNTIL_STOP_CMD
 (11 | 
AT91C_MCI_TRTYP_STREAM
| 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRDIR
 | 
AT91C_MCI_TRCMD_START
 | 
AT91C_MCI_MAXLAT
 )

	)

118 
	#AT91C_STOP_TRANSMISSION_CMD
 (12 | 
AT91C_MCI_TRCMD_STOP
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

119 
	#AT91C_STOP_TRANSMISSION_SYNC_CMD
 (12 | 
AT91C_MCI_TRCMD_STOP
 | 
AT91C_MCI_SPCMD_SYNC
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

120 
	#AT91C_SEND_STATUS_CMD
 (13 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

121 
	#AT91C_GO_INACTIVE_STATE_CMD
 (15 | 
AT91C_MCI_RSPTYP_NO
 )

	)

127 
	#AT91C_SET_BLOCKLEN_CMD
 (16 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
 )

	)

128 
	#AT91C_READ_SINGLE_BLOCK_CMD
 (17 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_START
 | 
AT91C_MCI_TRTYP_BLOCK
 | 
AT91C_MCI_TRDIR
 | 
AT91C_MCI_MAXLAT
)

	)

129 
	#AT91C_READ_MULTIPLE_BLOCK_CMD
 (18 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_START
 | 
AT91C_MCI_TRTYP_MULTIPLE
 | 
AT91C_MCI_TRDIR
 | 
AT91C_MCI_MAXLAT
)

	)

135 
	#AT91C_MMC_WRITE_DAT_UNTIL_STOP_CMD
 (20 | 
AT91C_MCI_TRTYP_STREAM
| 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 & ~(
AT91C_MCI_TRDIR
Ë| 
AT91C_MCI_TRCMD_START
 | 
AT91C_MCI_MAXLAT
 )

136 

	)

141 
	#AT91C_WRITE_BLOCK_CMD
 (24 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_START
 | (
AT91C_MCI_TRTYP_BLOCK
 & ~(
AT91C_MCI_TRDIR
)Ë| 
AT91C_MCI_MAXLAT
)

	)

142 
	#AT91C_WRITE_MULTIPLE_BLOCK_CMD
 (25 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_START
 | (
AT91C_MCI_TRTYP_MULTIPLE
 & ~(
AT91C_MCI_TRDIR
)Ë| 
AT91C_MCI_MAXLAT
)

	)

143 
	#AT91C_PROGRAM_CSD_CMD
 (27 | 
AT91C_MCI_RSPTYP_48
 )

	)

150 
	#AT91C_SET_WRITE_PROT_CMD
 (28 | 
AT91C_MCI_RSPTYP_48
 )

	)

151 
	#AT91C_CLR_WRITE_PROT_CMD
 (29 | 
AT91C_MCI_RSPTYP_48
 )

	)

152 
	#AT91C_SEND_WRITE_PROT_CMD
 (30 | 
AT91C_MCI_RSPTYP_48
 )

	)

159 
	#AT91C_TAG_SECTOR_START_CMD
 (32 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

160 
	#AT91C_TAG_SECTOR_END_CMD
 (33 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

161 
	#AT91C_MMC_UNTAG_SECTOR_CMD
 (34 | 
AT91C_MCI_RSPTYP_48
 )

	)

162 
	#AT91C_MMC_TAG_ERASE_GROUP_START_CMD
 (35 | 
AT91C_MCI_RSPTYP_48
 )

	)

163 
	#AT91C_MMC_TAG_ERASE_GROUP_END_CMD
 (36 | 
AT91C_MCI_RSPTYP_48
 )

	)

164 
	#AT91C_MMC_UNTAG_ERASE_GROUP_CMD
 (37 | 
AT91C_MCI_RSPTYP_48
 )

	)

165 
	#AT91C_ERASE_CMD
 (38 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
 )

	)

171 
	#AT91C_LOCK_UNLOCK
 (42 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

172 

	)

177 
	#AT91C_APP_CMD
 (55 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

178 
	#AT91C_GEN_CMD
 (56 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

179 

	)

180 
	#AT91C_SDCARD_SET_BUS_WIDTH_CMD
 (6 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

181 
	#AT91C_SDCARD_STATUS_CMD
 (13 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

182 
	#AT91C_SDCARD_SEND_NUM_WR_BLOCKS_CMD
 (22 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

183 
	#AT91C_SDCARD_SET_WR_BLK_ERASE_COUNT_CMD
 (23 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

184 
	#AT91C_SDCARD_APP_OP_COND_CMD
 (41 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 )

	)

185 
	#AT91C_SDCARD_SET_CLR_CARD_DETECT_CMD
 (42 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

186 
	#AT91C_SDCARD_SEND_SCR_CMD
 (51 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

188 
	#AT91C_SDCARD_APP_ALL_CMD
 (
AT91C_SDCARD_SET_BUS_WIDTH_CMD
 +\

189 
AT91C_SDCARD_STATUS_CMD
 +\

190 
AT91C_SDCARD_SEND_NUM_WR_BLOCKS_CMD
 +\

191 
AT91C_SDCARD_SET_WR_BLK_ERASE_COUNT_CMD
 +\

192 
AT91C_SDCARD_APP_OP_COND_CMD
 +\

193 
AT91C_SDCARD_SET_CLR_CARD_DETECT_CMD
 +\

194 
AT91C_SDCARD_SEND_SCR_CMD
)

	)

200 
	#AT91C_MMC_FAST_IO_CMD
 (39 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_MAXLAT
)

	)

201 
	#AT91C_MMC_GO_IRQ_STATE_CMD
 (40 | 
AT91C_MCI_SPCMD_NONE
 | 
AT91C_MCI_RSPTYP_48
 | 
AT91C_MCI_TRCMD_NO
 | 
AT91C_MCI_MAXLAT
)

	)

206 
	#AT91C_CMD_SEND_OK
 0

207 
	#AT91C_CMD_SEND_ERROR
 -1

208 
	#AT91C_INIT_OK
 2

209 
	#AT91C_INIT_ERROR
 3

210 
	#AT91C_READ_OK
 4

211 
	#AT91C_READ_ERROR
 5

212 
	#AT91C_WRITE_OK
 6

213 
	#AT91C_WRITE_ERROR
 7

214 
	#AT91C_ERASE_OK
 8

215 
	#AT91C_ERASE_ERROR
 9

216 
	#AT91C_CARD_SELECTED_OK
 10

217 
	#AT91C_CARD_SELECTED_ERROR
 11

218 

	)

222 
	#AT91C_MCI_SR_ERROR
 (
AT91C_MCI_UNRE
 |\

223 
AT91C_MCI_OVRE
 |\

224 
AT91C_MCI_DTOE
 |\

225 
AT91C_MCI_DCRCE
 |\

226 
AT91C_MCI_RTOE
 |\

227 
AT91C_MCI_RENDE
 |\

228 
AT91C_MCI_RCRCE
 |\

229 
AT91C_MCI_RDIRE
 |\

230 
AT91C_MCI_RINDE
)

	)

235 
	#AT91C_VDD_16_17
 (1 << 4)

	)

236 
	#AT91C_VDD_17_18
 (1 << 5)

	)

237 
	#AT91C_VDD_18_19
 (1 << 6)

	)

238 
	#AT91C_VDD_19_20
 (1 << 7)

	)

239 
	#AT91C_VDD_20_21
 (1 << 8)

	)

240 
	#AT91C_VDD_21_22
 (1 << 9)

	)

241 
	#AT91C_VDD_22_23
 (1 << 10)

	)

242 
	#AT91C_VDD_23_24
 (1 << 11)

	)

243 
	#AT91C_VDD_24_25
 (1 << 12)

	)

244 
	#AT91C_VDD_25_26
 (1 << 13)

	)

245 
	#AT91C_VDD_26_27
 (1 << 14)

	)

246 
	#AT91C_VDD_27_28
 (1 << 15)

	)

247 
	#AT91C_VDD_28_29
 (1 << 16)

	)

248 
	#AT91C_VDD_29_30
 (1 << 17)

	)

249 
	#AT91C_VDD_30_31
 (1 << 18)

	)

250 
	#AT91C_VDD_31_32
 (1 << 19)

	)

251 
	#AT91C_VDD_32_33
 (1 << 20)

	)

252 
	#AT91C_VDD_33_34
 (1 << 21)

	)

253 
	#AT91C_VDD_34_35
 (1 << 22)

	)

254 
	#AT91C_VDD_35_36
 (1 << 23)

	)

255 
	#AT91C_CARD_POWER_UP_BUSY
 (1 << 31)

	)

257 
	#AT91C_MMC_HOST_VOLTAGE_RANGE
 (
AT91C_VDD_27_28
 +\

258 
AT91C_VDD_28_29
 +\

259 
AT91C_VDD_29_30
 +\

260 
AT91C_VDD_30_31
 +\

261 
AT91C_VDD_31_32
 +\

262 
AT91C_VDD_32_33
)

	)

267 
	#AT91C_SR_READY_FOR_DATA
 (1 << 8)

268 
	#AT91C_SR_IDLE
 (0 << 9)

	)

269 
	#AT91C_SR_READY
 (1 << 9)

	)

270 
	#AT91C_SR_IDENT
 (2 << 9)

	)

271 
	#AT91C_SR_STBY
 (3 << 9)

	)

272 
	#AT91C_SR_TRAN
 (4 << 9)

	)

273 
	#AT91C_SR_DATA
 (5 << 9)

	)

274 
	#AT91C_SR_RCV
 (6 << 9)

	)

275 
	#AT91C_SR_PRG
 (7 << 9)

	)

276 
	#AT91C_SR_DIS
 (8 << 9)

	)

278 
	#AT91C_SR_CARD_SELECTED
 (
AT91C_SR_READY_FOR_DATA
 + 
AT91C_SR_TRAN
)

	)

287 
	#AT91C_CSD_BIT0_S
 0

288 
	#AT91C_CSD_BIT0_M
 0x01

	)

289 
	#AT91C_CSD_CRC_S
 1

290 
	#AT91C_CSD_CRC_M
 0x7F

	)

291 
	#AT91C_CSD_MMC_ECC_S
 8

292 
	#AT91C_CSD_MMC_ECC_M
 0x03

	)

293 
	#AT91C_CSD_FILE_FMT_S
 10

294 
	#AT91C_CSD_FILE_FMT_M
 0x03

	)

295 
	#AT91C_CSD_TMP_WP_S
 12

296 
	#AT91C_CSD_TMP_WP_M
 0x01

	)

297 
	#AT91C_CSD_PERM_WP_S
 13

298 
	#AT91C_CSD_PERM_WP_M
 0x01

	)

299 
	#AT91C_CSD_COPY_S
 14

300 
	#AT91C_CSD_COPY_M
 0x01

	)

301 
	#AT91C_CSD_FILE_FMT_GRP_S
 15

302 
	#AT91C_CSD_FILE_FMT_GRP_M
 0x01

	)

305 
	#AT91C_CSD_WBLOCK_P_S
 21

306 
	#AT91C_CSD_WBLOCK_P_M
 0x01

	)

307 
	#AT91C_CSD_WBLEN_S
 22

308 
	#AT91C_CSD_WBLEN_M
 0x0F

	)

309 
	#AT91C_CSD_R2W_F_S
 26

310 
	#AT91C_CSD_R2W_F_M
 0x07

	)

311 
	#AT91C_CSD_MMC_DEF_ECC_S
 29

312 
	#AT91C_CSD_MMC_DEF_ECC_M
 0x03

	)

313 
	#AT91C_CSD_WP_GRP_EN_S
 31

314 
	#AT91C_CSD_WP_GRP_EN_M
 0x01

	)

317 
	#AT91C_CSD_v21_WP_GRP_SIZE_S
 0

318 
	#AT91C_CSD_v21_WP_GRP_SIZE_M
 0x7F

	)

319 
	#AT91C_CSD_v21_SECT_SIZE_S
 7

320 
	#AT91C_CSD_v21_SECT_SIZE_M
 0x7F

	)

321 
	#AT91C_CSD_v21_ER_BLEN_EN_S
 14

322 
	#AT91C_CSD_v21_ER_BLEN_EN_M
 0x01

	)

324 
	#AT91C_CSD_v22_WP_GRP_SIZE_S
 0

325 
	#AT91C_CSD_v22_WP_GRP_SIZE_M
 0x1F

	)

326 
	#AT91C_CSD_v22_ER_GRP_SIZE_S
 5

327 
	#AT91C_CSD_v22_ER_GRP_SIZE_M
 0x1F

	)

328 
	#AT91C_CSD_v22_SECT_SIZE_S
 10

329 
	#AT91C_CSD_v22_SECT_SIZE_M
 0x1F

	)

331 
	#AT91C_CSD_C_SIZE_M_S
 15

332 
	#AT91C_CSD_C_SIZE_M_M
 0x07

	)

333 
	#AT91C_CSD_VDD_WMAX_S
 18

334 
	#AT91C_CSD_VDD_WMAX_M
 0x07

	)

335 
	#AT91C_CSD_VDD_WMIN_S
 21

336 
	#AT91C_CSD_VDD_WMIN_M
 0x07

	)

337 
	#AT91C_CSD_RCUR_MAX_S
 24

338 
	#AT91C_CSD_RCUR_MAX_M
 0x07

	)

339 
	#AT91C_CSD_RCUR_MIN_S
 27

340 
	#AT91C_CSD_RCUR_MIN_M
 0x07

	)

341 
	#AT91C_CSD_CSIZE_L_S
 30

342 
	#AT91C_CSD_CSIZE_L_M
 0x03

	)

345 
	#AT91C_CSD_CSIZE_H_S
 0

346 
	#AT91C_CSD_CSIZE_H_M
 0x03FF

	)

349 
	#AT91C_CSD_DSR_I_S
 12

350 
	#AT91C_CSD_DSR_I_M
 0x01

	)

351 
	#AT91C_CSD_RD_B_MIS_S
 13

352 
	#AT91C_CSD_RD_B_MIS_M
 0x01

	)

353 
	#AT91C_CSD_WR_B_MIS_S
 14

354 
	#AT91C_CSD_WR_B_MIS_M
 0x01

	)

355 
	#AT91C_CSD_RD_B_PAR_S
 15

356 
	#AT91C_CSD_RD_B_PAR_M
 0x01

	)

357 
	#AT91C_CSD_RD_B_LEN_S
 16

358 
	#AT91C_CSD_RD_B_LEN_M
 0x0F

	)

359 
	#AT91C_CSD_CCC_S
 20

360 
	#AT91C_CSD_CCC_M
 0x0FFF

	)

363 
	#AT91C_CSD_TRANS_SPEED_S
 0

364 
	#AT91C_CSD_TRANS_SPEED_M
 0xFF

	)

365 
	#AT91C_CSD_NSAC_S
 8

366 
	#AT91C_CSD_NSAC_M
 0xFF

	)

367 
	#AT91C_CSD_TAAC_S
 16

368 
	#AT91C_CSD_TAAC_M
 0xFF

	)

371 
	#AT91C_CSD_MMC_SPEC_VERS_S
 26

372 
	#AT91C_CSD_MMC_SPEC_VERS_M
 0x0F

	)

373 
	#AT91C_CSD_STRUCT_S
 30

374 
	#AT91C_CSD_STRUCT_M
 0x03

	)

	@linux/at91/image/dfboot/src/include/AT91RM9200.h

39 #i‚de‡
AT91RM9200_H


40 
	#AT91RM9200_H


	)

42 vﬁ©ûê
	tAT91_REG
;

47 
	s_AT91S_SYS
 {

48 
AT91_REG
 
	mAIC_SMR
[32];

49 
AT91_REG
 
	mAIC_SVR
[32];

50 
AT91_REG
 
	mAIC_IVR
;

51 
AT91_REG
 
	mAIC_FVR
;

52 
AT91_REG
 
	mAIC_ISR
;

53 
AT91_REG
 
	mAIC_IPR
;

54 
AT91_REG
 
	mAIC_IMR
;

55 
AT91_REG
 
	mAIC_CISR
;

56 
AT91_REG
 
	mRe£rved0
[2];

57 
AT91_REG
 
	mAIC_IECR
;

58 
AT91_REG
 
	mAIC_IDCR
;

59 
AT91_REG
 
	mAIC_ICCR
;

60 
AT91_REG
 
	mAIC_ISCR
;

61 
AT91_REG
 
	mAIC_EOICR
;

62 
AT91_REG
 
	mAIC_SPU
;

63 
AT91_REG
 
	mAIC_DCR
;

64 
AT91_REG
 
	mRe£rved1
[1];

65 
AT91_REG
 
	mAIC_FFER
;

66 
AT91_REG
 
	mAIC_FFDR
;

67 
AT91_REG
 
	mAIC_FFSR
;

68 
AT91_REG
 
	mRe£rved2
[45];

69 
AT91_REG
 
	mDBGU_CR
;

70 
AT91_REG
 
	mDBGU_MR
;

71 
AT91_REG
 
	mDBGU_IER
;

72 
AT91_REG
 
	mDBGU_IDR
;

73 
AT91_REG
 
	mDBGU_IMR
;

74 
AT91_REG
 
	mDBGU_CSR
;

75 
AT91_REG
 
	mDBGU_RHR
;

76 
AT91_REG
 
	mDBGU_THR
;

77 
AT91_REG
 
	mDBGU_BRGR
;

78 
AT91_REG
 
	mRe£rved3
[7];

79 
AT91_REG
 
	mDBGU_C1R
;

80 
AT91_REG
 
	mDBGU_C2R
;

81 
AT91_REG
 
	mDBGU_FNTR
;

82 
AT91_REG
 
	mRe£rved4
[45];

83 
AT91_REG
 
	mDBGU_RPR
;

84 
AT91_REG
 
	mDBGU_RCR
;

85 
AT91_REG
 
	mDBGU_TPR
;

86 
AT91_REG
 
	mDBGU_TCR
;

87 
AT91_REG
 
	mDBGU_RNPR
;

88 
AT91_REG
 
	mDBGU_RNCR
;

89 
AT91_REG
 
	mDBGU_TNPR
;

90 
AT91_REG
 
	mDBGU_TNCR
;

91 
AT91_REG
 
	mDBGU_PTCR
;

92 
AT91_REG
 
	mDBGU_PTSR
;

93 
AT91_REG
 
	mRe£rved5
[54];

94 
AT91_REG
 
	mPIOA_PER
;

95 
AT91_REG
 
	mPIOA_PDR
;

96 
AT91_REG
 
	mPIOA_PSR
;

97 
AT91_REG
 
	mRe£rved6
[1];

98 
AT91_REG
 
	mPIOA_OER
;

99 
AT91_REG
 
	mPIOA_ODR
;

100 
AT91_REG
 
	mPIOA_OSR
;

101 
AT91_REG
 
	mRe£rved7
[1];

102 
AT91_REG
 
	mPIOA_IFER
;

103 
AT91_REG
 
	mPIOA_IFDR
;

104 
AT91_REG
 
	mPIOA_IFSR
;

105 
AT91_REG
 
	mRe£rved8
[1];

106 
AT91_REG
 
	mPIOA_SODR
;

107 
AT91_REG
 
	mPIOA_CODR
;

108 
AT91_REG
 
	mPIOA_ODSR
;

109 
AT91_REG
 
	mPIOA_PDSR
;

110 
AT91_REG
 
	mPIOA_IER
;

111 
AT91_REG
 
	mPIOA_IDR
;

112 
AT91_REG
 
	mPIOA_IMR
;

113 
AT91_REG
 
	mPIOA_ISR
;

114 
AT91_REG
 
	mPIOA_MDER
;

115 
AT91_REG
 
	mPIOA_MDDR
;

116 
AT91_REG
 
	mPIOA_MDSR
;

117 
AT91_REG
 
	mRe£rved9
[1];

118 
AT91_REG
 
	mPIOA_PPUDR
;

119 
AT91_REG
 
	mPIOA_PPUER
;

120 
AT91_REG
 
	mPIOA_PPUSR
;

121 
AT91_REG
 
	mRe£rved10
[1];

122 
AT91_REG
 
	mPIOA_ASR
;

123 
AT91_REG
 
	mPIOA_BSR
;

124 
AT91_REG
 
	mPIOA_ABSR
;

125 
AT91_REG
 
	mRe£rved11
[9];

126 
AT91_REG
 
	mPIOA_OWER
;

127 
AT91_REG
 
	mPIOA_OWDR
;

128 
AT91_REG
 
	mPIOA_OWSR
;

129 
AT91_REG
 
	mRe£rved12
[85];

130 
AT91_REG
 
	mPIOB_PER
;

131 
AT91_REG
 
	mPIOB_PDR
;

132 
AT91_REG
 
	mPIOB_PSR
;

133 
AT91_REG
 
	mRe£rved13
[1];

134 
AT91_REG
 
	mPIOB_OER
;

135 
AT91_REG
 
	mPIOB_ODR
;

136 
AT91_REG
 
	mPIOB_OSR
;

137 
AT91_REG
 
	mRe£rved14
[1];

138 
AT91_REG
 
	mPIOB_IFER
;

139 
AT91_REG
 
	mPIOB_IFDR
;

140 
AT91_REG
 
	mPIOB_IFSR
;

141 
AT91_REG
 
	mRe£rved15
[1];

142 
AT91_REG
 
	mPIOB_SODR
;

143 
AT91_REG
 
	mPIOB_CODR
;

144 
AT91_REG
 
	mPIOB_ODSR
;

145 
AT91_REG
 
	mPIOB_PDSR
;

146 
AT91_REG
 
	mPIOB_IER
;

147 
AT91_REG
 
	mPIOB_IDR
;

148 
AT91_REG
 
	mPIOB_IMR
;

149 
AT91_REG
 
	mPIOB_ISR
;

150 
AT91_REG
 
	mPIOB_MDER
;

151 
AT91_REG
 
	mPIOB_MDDR
;

152 
AT91_REG
 
	mPIOB_MDSR
;

153 
AT91_REG
 
	mRe£rved16
[1];

154 
AT91_REG
 
	mPIOB_PPUDR
;

155 
AT91_REG
 
	mPIOB_PPUER
;

156 
AT91_REG
 
	mPIOB_PPUSR
;

157 
AT91_REG
 
	mRe£rved17
[1];

158 
AT91_REG
 
	mPIOB_ASR
;

159 
AT91_REG
 
	mPIOB_BSR
;

160 
AT91_REG
 
	mPIOB_ABSR
;

161 
AT91_REG
 
	mRe£rved18
[9];

162 
AT91_REG
 
	mPIOB_OWER
;

163 
AT91_REG
 
	mPIOB_OWDR
;

164 
AT91_REG
 
	mPIOB_OWSR
;

165 
AT91_REG
 
	mRe£rved19
[85];

166 
AT91_REG
 
	mPIOC_PER
;

167 
AT91_REG
 
	mPIOC_PDR
;

168 
AT91_REG
 
	mPIOC_PSR
;

169 
AT91_REG
 
	mRe£rved20
[1];

170 
AT91_REG
 
	mPIOC_OER
;

171 
AT91_REG
 
	mPIOC_ODR
;

172 
AT91_REG
 
	mPIOC_OSR
;

173 
AT91_REG
 
	mRe£rved21
[1];

174 
AT91_REG
 
	mPIOC_IFER
;

175 
AT91_REG
 
	mPIOC_IFDR
;

176 
AT91_REG
 
	mPIOC_IFSR
;

177 
AT91_REG
 
	mRe£rved22
[1];

178 
AT91_REG
 
	mPIOC_SODR
;

179 
AT91_REG
 
	mPIOC_CODR
;

180 
AT91_REG
 
	mPIOC_ODSR
;

181 
AT91_REG
 
	mPIOC_PDSR
;

182 
AT91_REG
 
	mPIOC_IER
;

183 
AT91_REG
 
	mPIOC_IDR
;

184 
AT91_REG
 
	mPIOC_IMR
;

185 
AT91_REG
 
	mPIOC_ISR
;

186 
AT91_REG
 
	mPIOC_MDER
;

187 
AT91_REG
 
	mPIOC_MDDR
;

188 
AT91_REG
 
	mPIOC_MDSR
;

189 
AT91_REG
 
	mRe£rved23
[1];

190 
AT91_REG
 
	mPIOC_PPUDR
;

191 
AT91_REG
 
	mPIOC_PPUER
;

192 
AT91_REG
 
	mPIOC_PPUSR
;

193 
AT91_REG
 
	mRe£rved24
[1];

194 
AT91_REG
 
	mPIOC_ASR
;

195 
AT91_REG
 
	mPIOC_BSR
;

196 
AT91_REG
 
	mPIOC_ABSR
;

197 
AT91_REG
 
	mRe£rved25
[9];

198 
AT91_REG
 
	mPIOC_OWER
;

199 
AT91_REG
 
	mPIOC_OWDR
;

200 
AT91_REG
 
	mPIOC_OWSR
;

201 
AT91_REG
 
	mRe£rved26
[85];

202 
AT91_REG
 
	mPIOD_PER
;

203 
AT91_REG
 
	mPIOD_PDR
;

204 
AT91_REG
 
	mPIOD_PSR
;

205 
AT91_REG
 
	mRe£rved27
[1];

206 
AT91_REG
 
	mPIOD_OER
;

207 
AT91_REG
 
	mPIOD_ODR
;

208 
AT91_REG
 
	mPIOD_OSR
;

209 
AT91_REG
 
	mRe£rved28
[1];

210 
AT91_REG
 
	mPIOD_IFER
;

211 
AT91_REG
 
	mPIOD_IFDR
;

212 
AT91_REG
 
	mPIOD_IFSR
;

213 
AT91_REG
 
	mRe£rved29
[1];

214 
AT91_REG
 
	mPIOD_SODR
;

215 
AT91_REG
 
	mPIOD_CODR
;

216 
AT91_REG
 
	mPIOD_ODSR
;

217 
AT91_REG
 
	mPIOD_PDSR
;

218 
AT91_REG
 
	mPIOD_IER
;

219 
AT91_REG
 
	mPIOD_IDR
;

220 
AT91_REG
 
	mPIOD_IMR
;

221 
AT91_REG
 
	mPIOD_ISR
;

222 
AT91_REG
 
	mPIOD_MDER
;

223 
AT91_REG
 
	mPIOD_MDDR
;

224 
AT91_REG
 
	mPIOD_MDSR
;

225 
AT91_REG
 
	mRe£rved30
[1];

226 
AT91_REG
 
	mPIOD_PPUDR
;

227 
AT91_REG
 
	mPIOD_PPUER
;

228 
AT91_REG
 
	mPIOD_PPUSR
;

229 
AT91_REG
 
	mRe£rved31
[1];

230 
AT91_REG
 
	mPIOD_ASR
;

231 
AT91_REG
 
	mPIOD_BSR
;

232 
AT91_REG
 
	mPIOD_ABSR
;

233 
AT91_REG
 
	mRe£rved32
[9];

234 
AT91_REG
 
	mPIOD_OWER
;

235 
AT91_REG
 
	mPIOD_OWDR
;

236 
AT91_REG
 
	mPIOD_OWSR
;

237 
AT91_REG
 
	mRe£rved33
[85];

238 
AT91_REG
 
	mPMC_SCER
;

239 
AT91_REG
 
	mPMC_SCDR
;

240 
AT91_REG
 
	mPMC_SCSR
;

241 
AT91_REG
 
	mRe£rved34
[1];

242 
AT91_REG
 
	mPMC_PCER
;

243 
AT91_REG
 
	mPMC_PCDR
;

244 
AT91_REG
 
	mPMC_PCSR
;

245 
AT91_REG
 
	mRe£rved35
[1];

246 
AT91_REG
 
	mCKGR_MOR
;

247 
AT91_REG
 
	mCKGR_MCFR
;

248 
AT91_REG
 
	mCKGR_PLLAR
;

249 
AT91_REG
 
	mCKGR_PLLBR
;

250 
AT91_REG
 
	mPMC_MCKR
;

251 
AT91_REG
 
	mRe£rved36
[3];

252 
AT91_REG
 
	mPMC_PCKR
[8];

253 
AT91_REG
 
	mPMC_IER
;

254 
AT91_REG
 
	mPMC_IDR
;

255 
AT91_REG
 
	mPMC_SR
;

256 
AT91_REG
 
	mPMC_IMR
;

257 
AT91_REG
 
	mRe£rved37
[36];

258 
AT91_REG
 
	mST_CR
;

259 
AT91_REG
 
	mST_PIMR
;

260 
AT91_REG
 
	mST_WDMR
;

261 
AT91_REG
 
	mST_RTMR
;

262 
AT91_REG
 
	mST_SR
;

263 
AT91_REG
 
	mST_IER
;

264 
AT91_REG
 
	mST_IDR
;

265 
AT91_REG
 
	mST_IMR
;

266 
AT91_REG
 
	mST_RTAR
;

267 
AT91_REG
 
	mST_CRTR
;

268 
AT91_REG
 
	mRe£rved38
[54];

269 
AT91_REG
 
	mRTC_CR
;

270 
AT91_REG
 
	mRTC_MR
;

271 
AT91_REG
 
	mRTC_TIMR
;

272 
AT91_REG
 
	mRTC_CALR
;

273 
AT91_REG
 
	mRTC_TIMALR
;

274 
AT91_REG
 
	mRTC_CALALR
;

275 
AT91_REG
 
	mRTC_SR
;

276 
AT91_REG
 
	mRTC_SCCR
;

277 
AT91_REG
 
	mRTC_IER
;

278 
AT91_REG
 
	mRTC_IDR
;

279 
AT91_REG
 
	mRTC_IMR
;

280 
AT91_REG
 
	mRTC_VER
;

281 
AT91_REG
 
	mRe£rved39
[52];

282 
AT91_REG
 
	mMC_RCR
;

283 
AT91_REG
 
	mMC_ASR
;

284 
AT91_REG
 
	mMC_AASR
;

285 
AT91_REG
 
	mRe£rved40
[1];

286 
AT91_REG
 
	mMC_PUIA
[16];

287 
AT91_REG
 
	mMC_PUP
;

288 
AT91_REG
 
	mMC_PUER
;

289 
AT91_REG
 
	mRe£rved41
[2];

290 
AT91_REG
 
	mEBI_CSA
;

291 
AT91_REG
 
	mEBI_CFGR
;

292 
AT91_REG
 
	mRe£rved42
[2];

293 
AT91_REG
 
	mEBI_SMC2_CSR
[8];

294 
AT91_REG
 
	mEBI_SDRC_MR
;

295 
AT91_REG
 
	mEBI_SDRC_TR
;

296 
AT91_REG
 
	mEBI_SDRC_CR
;

297 
AT91_REG
 
	mEBI_SDRC_SRR
;

298 
AT91_REG
 
	mEBI_SDRC_LPR
;

299 
AT91_REG
 
	mEBI_SDRC_IER
;

300 
AT91_REG
 
	mEBI_SDRC_IDR
;

301 
AT91_REG
 
	mEBI_SDRC_IMR
;

302 
AT91_REG
 
	mEBI_SDRC_ISR
;

303 
AT91_REG
 
	mRe£rved43
[3];

304 
AT91_REG
 
	mEBI_BFC_MR
;

305 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

311 
	s_AT91S_MC
 {

312 
AT91_REG
 
	mMC_RCR
;

313 
AT91_REG
 
	mMC_ASR
;

314 
AT91_REG
 
	mMC_AASR
;

315 
AT91_REG
 
	mRe£rved0
[1];

316 
AT91_REG
 
	mMC_PUIA
[16];

317 
AT91_REG
 
	mMC_PUP
;

318 
AT91_REG
 
	mMC_PUER
;

319 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

322 
	#AT91C_MC_RCB
 (() 0x1 << 0)

324 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

325 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

326 
	#AT91C_MC_MPU
 (() 0x1 << 2)

327 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

328 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

329 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

330 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

331 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

332 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

333 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

334 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

335 
	#AT91C_MC_MST0
 (() 0x1 << 16)

336 
	#AT91C_MC_MST1
 (() 0x1 << 17)

337 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

338 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

340 
	#AT91C_MC_PROT
 (() 0x3 << 0)

341 
	#AT91C_MC_PROT_PNAUNA
 (() 0x0)

342 
	#AT91C_MC_PROT_PRWUNA
 (() 0x1)

343 
	#AT91C_MC_PROT_PRWURO
 (() 0x2)

344 
	#AT91C_MC_PROT_PRWURW
 (() 0x3)

345 
	#AT91C_MC_SIZE
 (() 0xF << 4)

346 
	#AT91C_MC_SIZE_1KB
 (() 0x0 << 4)

347 
	#AT91C_MC_SIZE_2KB
 (() 0x1 << 4)

348 
	#AT91C_MC_SIZE_4KB
 (() 0x2 << 4)

349 
	#AT91C_MC_SIZE_8KB
 (() 0x3 << 4)

350 
	#AT91C_MC_SIZE_16KB
 (() 0x4 << 4)

351 
	#AT91C_MC_SIZE_32KB
 (() 0x5 << 4)

352 
	#AT91C_MC_SIZE_64KB
 (() 0x6 << 4)

353 
	#AT91C_MC_SIZE_128KB
 (() 0x7 << 4)

354 
	#AT91C_MC_SIZE_256KB
 (() 0x8 << 4)

355 
	#AT91C_MC_SIZE_512KB
 (() 0x9 << 4)

356 
	#AT91C_MC_SIZE_1MB
 (() 0xA << 4)

357 
	#AT91C_MC_SIZE_2MB
 (() 0xB << 4)

358 
	#AT91C_MC_SIZE_4MB
 (() 0xC << 4)

359 
	#AT91C_MC_SIZE_8MB
 (() 0xD << 4)

360 
	#AT91C_MC_SIZE_16MB
 (() 0xE << 4)

361 
	#AT91C_MC_SIZE_64MB
 (() 0xF << 4)

362 
	#AT91C_MC_BA
 (() 0x3FFFF << 10)

365 
	#AT91C_MC_PUEB
 (() 0x1 << 0)

366 

	)

370 
	s_AT91S_RTC
 {

371 
AT91_REG
 
	mRTC_CR
;

372 
AT91_REG
 
	mRTC_MR
;

373 
AT91_REG
 
	mRTC_TIMR
;

374 
AT91_REG
 
	mRTC_CALR
;

375 
AT91_REG
 
	mRTC_TIMALR
;

376 
AT91_REG
 
	mRTC_CALALR
;

377 
AT91_REG
 
	mRTC_SR
;

378 
AT91_REG
 
	mRTC_SCCR
;

379 
AT91_REG
 
	mRTC_IER
;

380 
AT91_REG
 
	mRTC_IDR
;

381 
AT91_REG
 
	mRTC_IMR
;

382 
AT91_REG
 
	mRTC_VER
;

383 } 
	tAT91S_RTC
, *
	tAT91PS_RTC
;

386 
	#AT91C_RTC_UPDTIM
 (() 0x1 << 0)

387 
	#AT91C_RTC_UPDCAL
 (() 0x1 << 1)

388 
	#AT91C_RTC_TIMEVSEL
 (() 0x3 << 8)

389 
	#AT91C_RTC_TIMEVSEL_MINUTE
 (() 0x0 << 8)

390 
	#AT91C_RTC_TIMEVSEL_HOUR
 (() 0x1 << 8)

391 
	#AT91C_RTC_TIMEVSEL_DAY24
 (() 0x2 << 8)

392 
	#AT91C_RTC_TIMEVSEL_DAY12
 (() 0x3 << 8)

393 
	#AT91C_RTC_CALEVSEL
 (() 0x3 << 16)

394 
	#AT91C_RTC_CALEVSEL_WEEK
 (() 0x0 << 16)

395 
	#AT91C_RTC_CALEVSEL_MONTH
 (() 0x1 << 16)

396 
	#AT91C_RTC_CALEVSEL_YEAR
 (() 0x2 << 16)

398 
	#AT91C_RTC_HRMOD
 (() 0x1 << 0)

400 
	#AT91C_RTC_SEC
 (() 0x7F << 0)

401 
	#AT91C_RTC_MIN
 (() 0x7F << 8)

402 
	#AT91C_RTC_HOUR
 (() 0x1F << 16)

403 
	#AT91C_RTC_AMPM
 (() 0x1 << 22)

405 
	#AT91C_RTC_CENT
 (() 0x3F << 0)

406 
	#AT91C_RTC_YEAR
 (() 0xFF << 8)

407 
	#AT91C_RTC_MONTH
 (() 0x1F << 16)

408 
	#AT91C_RTC_DAY
 (() 0x7 << 21)

409 
	#AT91C_RTC_DATE
 (() 0x3F << 24)

411 
	#AT91C_RTC_SECEN
 (() 0x1 << 7)

412 
	#AT91C_RTC_MINEN
 (() 0x1 << 15)

413 
	#AT91C_RTC_HOUREN
 (() 0x1 << 23)

415 
	#AT91C_RTC_MONTHEN
 (() 0x1 << 23)

416 
	#AT91C_RTC_DATEEN
 (() 0x1 << 31)

418 
	#AT91C_RTC_ACKUPD
 (() 0x1 << 0)

419 
	#AT91C_RTC_ALARM
 (() 0x1 << 1)

420 
	#AT91C_RTC_SECEV
 (() 0x1 << 2)

421 
	#AT91C_RTC_TIMEV
 (() 0x1 << 3)

422 
	#AT91C_RTC_CALEV
 (() 0x1 << 4)

428 
	#AT91C_RTC_NVTIM
 (() 0x1 << 0)

429 
	#AT91C_RTC_NVCAL
 (() 0x1 << 1)

430 
	#AT91C_RTC_NVTIMALR
 (() 0x1 << 2)

431 
	#AT91C_RTC_NVCALALR
 (() 0x1 << 3)

432 

	)

436 
	s_AT91S_ST
 {

437 
AT91_REG
 
	mST_CR
;

438 
AT91_REG
 
	mST_PIMR
;

439 
AT91_REG
 
	mST_WDMR
;

440 
AT91_REG
 
	mST_RTMR
;

441 
AT91_REG
 
	mST_SR
;

442 
AT91_REG
 
	mST_IER
;

443 
AT91_REG
 
	mST_IDR
;

444 
AT91_REG
 
	mST_IMR
;

445 
AT91_REG
 
	mST_RTAR
;

446 
AT91_REG
 
	mST_CRTR
;

447 } 
	tAT91S_ST
, *
	tAT91PS_ST
;

450 
	#AT91C_ST_WDRST
 (() 0x1 << 0)

452 
	#AT91C_ST_PIV
 (() 0xFFFF << 0)

454 
	#AT91C_ST_WDV
 (() 0xFFFF << 0)

455 
	#AT91C_ST_RSTEN
 (() 0x1 << 16)

456 
	#AT91C_ST_EXTEN
 (() 0x1 << 17)

458 
	#AT91C_ST_RTPRES
 (() 0xFFFF << 0)

460 
	#AT91C_ST_PITS
 (() 0x1 << 0)

461 
	#AT91C_ST_WDOVF
 (() 0x1 << 1)

462 
	#AT91C_ST_RTTINC
 (() 0x1 << 2)

463 
	#AT91C_ST_ALMS
 (() 0x1 << 3)

468 
	#AT91C_ST_ALMV
 (() 0xFFFFF << 0)

470 
	#AT91C_ST_CRTV
 (() 0xFFFFF << 0)

471 

	)

475 
	s_AT91S_PMC
 {

476 
AT91_REG
 
	mPMC_SCER
;

477 
AT91_REG
 
	mPMC_SCDR
;

478 
AT91_REG
 
	mPMC_SCSR
;

479 
AT91_REG
 
	mRe£rved0
[1];

480 
AT91_REG
 
	mPMC_PCER
;

481 
AT91_REG
 
	mPMC_PCDR
;

482 
AT91_REG
 
	mPMC_PCSR
;

483 
AT91_REG
 
	mRe£rved1
[5];

484 
AT91_REG
 
	mPMC_MCKR
;

485 
AT91_REG
 
	mRe£rved2
[3];

486 
AT91_REG
 
	mPMC_PCKR
[8];

487 
AT91_REG
 
	mPMC_IER
;

488 
AT91_REG
 
	mPMC_IDR
;

489 
AT91_REG
 
	mPMC_SR
;

490 
AT91_REG
 
	mPMC_IMR
;

491 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

494 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

495 
	#AT91C_PMC_UDP
 (() 0x1 << 1)

496 
	#AT91C_PMC_MCKUDP
 (() 0x1 << 2)

497 
	#AT91C_PMC_UHP
 (() 0x1 << 4)

498 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

499 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

500 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

501 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

502 
	#AT91C_PMC_PCK4
 (() 0x1 << 12)

503 
	#AT91C_PMC_PCK5
 (() 0x1 << 13)

504 
	#AT91C_PMC_PCK6
 (() 0x1 << 14)

505 
	#AT91C_PMC_PCK7
 (() 0x1 << 15)

509 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

510 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

511 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

512 
	#AT91C_PMC_CSS_PLLA_CLK
 (() 0x2)

513 
	#AT91C_PMC_CSS_PLLB_CLK
 (() 0x3)

514 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

515 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

516 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

517 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

518 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

519 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

520 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

521 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

522 
	#AT91C_PMC_MDIV
 (() 0x3 << 8)

523 
	#AT91C_PMC_MDIV_1
 (() 0x0 << 8)

524 
	#AT91C_PMC_MDIV_2
 (() 0x1 << 8)

525 
	#AT91C_PMC_MDIV_3
 (() 0x2 << 8)

526 
	#AT91C_PMC_MDIV_4
 (() 0x3 << 8)

529 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

530 
	#AT91C_PMC_LOCKA
 (() 0x1 << 1)

531 
	#AT91C_PMC_LOCKB
 (() 0x1 << 2)

532 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

533 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

534 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

535 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

536 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

537 
	#AT91C_PMC_PCK4RDY
 (() 0x1 << 12)

538 
	#AT91C_PMC_PCK5RDY
 (() 0x1 << 13)

539 
	#AT91C_PMC_PCK6RDY
 (() 0x1 << 14)

540 
	#AT91C_PMC_PCK7RDY
 (() 0x1 << 15)

544 

	)

548 
	s_AT91S_CKGR
 {

549 
AT91_REG
 
	mCKGR_MOR
;

550 
AT91_REG
 
	mCKGR_MCFR
;

551 
AT91_REG
 
	mCKGR_PLLAR
;

552 
AT91_REG
 
	mCKGR_PLLBR
;

553 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

556 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

557 
	#AT91C_CKGR_OSCTEST
 (() 0x1 << 1)

558 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

560 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

561 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

563 
	#AT91C_CKGR_DIVA
 (() 0xFF << 0)

564 
	#AT91C_CKGR_DIVA_0
 (() 0x0)

565 
	#AT91C_CKGR_DIVA_BYPASS
 (() 0x1)

566 
	#AT91C_CKGR_PLLACOUNT
 (() 0x3F << 8)

567 
	#AT91C_CKGR_OUTA
 (() 0x3 << 14)

568 
	#AT91C_CKGR_OUTA_0
 (() 0x0 << 14)

569 
	#AT91C_CKGR_OUTA_1
 (() 0x1 << 14)

570 
	#AT91C_CKGR_OUTA_2
 (() 0x2 << 14)

571 
	#AT91C_CKGR_OUTA_3
 (() 0x3 << 14)

572 
	#AT91C_CKGR_MULA
 (() 0x7FF << 16)

573 
	#AT91C_CKGR_SRCA
 (() 0x1 << 29)

575 
	#AT91C_CKGR_DIVB
 (() 0xFF << 0)

576 
	#AT91C_CKGR_DIVB_0
 (() 0x0)

577 
	#AT91C_CKGR_DIVB_BYPASS
 (() 0x1)

578 
	#AT91C_CKGR_PLLBCOUNT
 (() 0x3F << 8)

579 
	#AT91C_CKGR_OUTB
 (() 0x3 << 14)

580 
	#AT91C_CKGR_OUTB_0
 (() 0x0 << 14)

581 
	#AT91C_CKGR_OUTB_1
 (() 0x1 << 14)

582 
	#AT91C_CKGR_OUTB_2
 (() 0x2 << 14)

583 
	#AT91C_CKGR_OUTB_3
 (() 0x3 << 14)

584 
	#AT91C_CKGR_MULB
 (() 0x7FF << 16)

585 
	#AT91C_CKGR_USB_96M
 (() 0x1 << 28)

586 
	#AT91C_CKGR_USB_PLL
 (() 0x1 << 29)

587 

	)

591 
	s_AT91S_PIO
 {

592 
AT91_REG
 
	mPIO_PER
;

593 
AT91_REG
 
	mPIO_PDR
;

594 
AT91_REG
 
	mPIO_PSR
;

595 
AT91_REG
 
	mRe£rved0
[1];

596 
AT91_REG
 
	mPIO_OER
;

597 
AT91_REG
 
	mPIO_ODR
;

598 
AT91_REG
 
	mPIO_OSR
;

599 
AT91_REG
 
	mRe£rved1
[1];

600 
AT91_REG
 
	mPIO_IFER
;

601 
AT91_REG
 
	mPIO_IFDR
;

602 
AT91_REG
 
	mPIO_IFSR
;

603 
AT91_REG
 
	mRe£rved2
[1];

604 
AT91_REG
 
	mPIO_SODR
;

605 
AT91_REG
 
	mPIO_CODR
;

606 
AT91_REG
 
	mPIO_ODSR
;

607 
AT91_REG
 
	mPIO_PDSR
;

608 
AT91_REG
 
	mPIO_IER
;

609 
AT91_REG
 
	mPIO_IDR
;

610 
AT91_REG
 
	mPIO_IMR
;

611 
AT91_REG
 
	mPIO_ISR
;

612 
AT91_REG
 
	mPIO_MDER
;

613 
AT91_REG
 
	mPIO_MDDR
;

614 
AT91_REG
 
	mPIO_MDSR
;

615 
AT91_REG
 
	mRe£rved3
[1];

616 
AT91_REG
 
	mPIO_PPUDR
;

617 
AT91_REG
 
	mPIO_PPUER
;

618 
AT91_REG
 
	mPIO_PPUSR
;

619 
AT91_REG
 
	mRe£rved4
[1];

620 
AT91_REG
 
	mPIO_ASR
;

621 
AT91_REG
 
	mPIO_BSR
;

622 
AT91_REG
 
	mPIO_ABSR
;

623 
AT91_REG
 
	mRe£rved5
[9];

624 
AT91_REG
 
	mPIO_OWER
;

625 
AT91_REG
 
	mPIO_OWDR
;

626 
AT91_REG
 
	mPIO_OWSR
;

627 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

633 
	s_AT91S_DBGU
 {

634 
AT91_REG
 
	mDBGU_CR
;

635 
AT91_REG
 
	mDBGU_MR
;

636 
AT91_REG
 
	mDBGU_IER
;

637 
AT91_REG
 
	mDBGU_IDR
;

638 
AT91_REG
 
	mDBGU_IMR
;

639 
AT91_REG
 
	mDBGU_CSR
;

640 
AT91_REG
 
	mDBGU_RHR
;

641 
AT91_REG
 
	mDBGU_THR
;

642 
AT91_REG
 
	mDBGU_BRGR
;

643 
AT91_REG
 
	mRe£rved0
[7];

644 
AT91_REG
 
	mDBGU_C1R
;

645 
AT91_REG
 
	mDBGU_C2R
;

646 
AT91_REG
 
	mDBGU_FNTR
;

647 
AT91_REG
 
	mRe£rved1
[45];

648 
AT91_REG
 
	mDBGU_RPR
;

649 
AT91_REG
 
	mDBGU_RCR
;

650 
AT91_REG
 
	mDBGU_TPR
;

651 
AT91_REG
 
	mDBGU_TCR
;

652 
AT91_REG
 
	mDBGU_RNPR
;

653 
AT91_REG
 
	mDBGU_RNCR
;

654 
AT91_REG
 
	mDBGU_TNPR
;

655 
AT91_REG
 
	mDBGU_TNCR
;

656 
AT91_REG
 
	mDBGU_PTCR
;

657 
AT91_REG
 
	mDBGU_PTSR
;

658 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

661 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

662 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

663 
	#AT91C_US_RXEN
 (() 0x1 << 4)

664 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

665 
	#AT91C_US_TXEN
 (() 0x1 << 6)

666 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

668 
	#AT91C_US_PAR
 (() 0x7 << 9)

669 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

670 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

671 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

672 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

673 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

674 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

675 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

676 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

677 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

678 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

679 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

681 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

682 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

683 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

684 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

685 
	#AT91C_US_OVRE
 (() 0x1 << 5)

686 
	#AT91C_US_FRAME
 (() 0x1 << 6)

687 
	#AT91C_US_PARE
 (() 0x1 << 7)

688 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

689 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

690 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

691 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

692 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

697 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

698 

	)

702 
	s_AT91S_PDC
 {

703 
AT91_REG
 
	mPDC_RPR
;

704 
AT91_REG
 
	mPDC_RCR
;

705 
AT91_REG
 
	mPDC_TPR
;

706 
AT91_REG
 
	mPDC_TCR
;

707 
AT91_REG
 
	mPDC_RNPR
;

708 
AT91_REG
 
	mPDC_RNCR
;

709 
AT91_REG
 
	mPDC_TNPR
;

710 
AT91_REG
 
	mPDC_TNCR
;

711 
AT91_REG
 
	mPDC_PTCR
;

712 
AT91_REG
 
	mPDC_PTSR
;

713 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

716 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

717 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

718 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

719 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

721 

	)

725 
	s_AT91S_AIC
 {

726 
AT91_REG
 
	mAIC_SMR
[32];

727 
AT91_REG
 
	mAIC_SVR
[32];

728 
AT91_REG
 
	mAIC_IVR
;

729 
AT91_REG
 
	mAIC_FVR
;

730 
AT91_REG
 
	mAIC_ISR
;

731 
AT91_REG
 
	mAIC_IPR
;

732 
AT91_REG
 
	mAIC_IMR
;

733 
AT91_REG
 
	mAIC_CISR
;

734 
AT91_REG
 
	mRe£rved0
[2];

735 
AT91_REG
 
	mAIC_IECR
;

736 
AT91_REG
 
	mAIC_IDCR
;

737 
AT91_REG
 
	mAIC_ICCR
;

738 
AT91_REG
 
	mAIC_ISCR
;

739 
AT91_REG
 
	mAIC_EOICR
;

740 
AT91_REG
 
	mAIC_SPU
;

741 
AT91_REG
 
	mAIC_DCR
;

742 
AT91_REG
 
	mRe£rved1
[1];

743 
AT91_REG
 
	mAIC_FFER
;

744 
AT91_REG
 
	mAIC_FFDR
;

745 
AT91_REG
 
	mAIC_FFSR
;

746 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

749 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

750 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

751 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

752 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

753 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (() 0x0 << 5)

754 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (() 0x1 << 5)

755 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (() 0x2 << 5)

756 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (() 0x3 << 5)

758 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

759 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

761 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

762 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

763 

	)

767 
	s_AT91S_SPI
 {

768 
AT91_REG
 
	mSPI_CR
;

769 
AT91_REG
 
	mSPI_MR
;

770 
AT91_REG
 
	mSPI_RDR
;

771 
AT91_REG
 
	mSPI_TDR
;

772 
AT91_REG
 
	mSPI_SR
;

773 
AT91_REG
 
	mSPI_IER
;

774 
AT91_REG
 
	mSPI_IDR
;

775 
AT91_REG
 
	mSPI_IMR
;

776 
AT91_REG
 
	mRe£rved0
[4];

777 
AT91_REG
 
	mSPI_CSR
[4];

778 
AT91_REG
 
	mRe£rved1
[48];

779 
AT91_REG
 
	mSPI_RPR
;

780 
AT91_REG
 
	mSPI_RCR
;

781 
AT91_REG
 
	mSPI_TPR
;

782 
AT91_REG
 
	mSPI_TCR
;

783 
AT91_REG
 
	mSPI_RNPR
;

784 
AT91_REG
 
	mSPI_RNCR
;

785 
AT91_REG
 
	mSPI_TNPR
;

786 
AT91_REG
 
	mSPI_TNCR
;

787 
AT91_REG
 
	mSPI_PTCR
;

788 
AT91_REG
 
	mSPI_PTSR
;

789 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

792 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

793 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

794 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

796 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

797 
	#AT91C_SPI_PS
 (() 0x1 << 1)

798 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

799 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

800 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

801 
	#AT91C_SPI_DIV32
 (() 0x1 << 3)

802 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

803 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

804 
	#AT91C_SPI_PCS
 (() 0xF << 16)

805 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

807 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

808 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

810 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

811 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

813 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

814 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

815 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

816 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

817 
	#AT91C_SPI_SPENDRX
 (() 0x1 << 4)

818 
	#AT91C_SPI_SPENDTX
 (() 0x1 << 5)

819 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

820 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

821 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

826 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

827 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

828 
	#AT91C_SPI_BITS
 (() 0xF << 4)

829 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

830 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

831 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

832 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

833 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

834 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

835 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

836 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

837 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

838 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

839 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

840 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

841 

	)

845 
	s_AT91S_SSC
 {

846 
AT91_REG
 
	mSSC_CR
;

847 
AT91_REG
 
	mSSC_CMR
;

848 
AT91_REG
 
	mRe£rved0
[2];

849 
AT91_REG
 
	mSSC_RCMR
;

850 
AT91_REG
 
	mSSC_RFMR
;

851 
AT91_REG
 
	mSSC_TCMR
;

852 
AT91_REG
 
	mSSC_TFMR
;

853 
AT91_REG
 
	mSSC_RHR
;

854 
AT91_REG
 
	mSSC_THR
;

855 
AT91_REG
 
	mRe£rved1
[2];

856 
AT91_REG
 
	mSSC_RSHR
;

857 
AT91_REG
 
	mSSC_TSHR
;

858 
AT91_REG
 
	mSSC_RC0R
;

859 
AT91_REG
 
	mSSC_RC1R
;

860 
AT91_REG
 
	mSSC_SR
;

861 
AT91_REG
 
	mSSC_IER
;

862 
AT91_REG
 
	mSSC_IDR
;

863 
AT91_REG
 
	mSSC_IMR
;

864 
AT91_REG
 
	mRe£rved2
[44];

865 
AT91_REG
 
	mSSC_RPR
;

866 
AT91_REG
 
	mSSC_RCR
;

867 
AT91_REG
 
	mSSC_TPR
;

868 
AT91_REG
 
	mSSC_TCR
;

869 
AT91_REG
 
	mSSC_RNPR
;

870 
AT91_REG
 
	mSSC_RNCR
;

871 
AT91_REG
 
	mSSC_TNPR
;

872 
AT91_REG
 
	mSSC_TNCR
;

873 
AT91_REG
 
	mSSC_PTCR
;

874 
AT91_REG
 
	mSSC_PTSR
;

875 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

878 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

879 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

880 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

881 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

882 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

884 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

885 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

886 
	#AT91C_SSC_CKS_TK
 (() 0x1)

887 
	#AT91C_SSC_CKS_RK
 (() 0x2)

888 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

889 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

890 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

891 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

892 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

893 
	#AT91C_SSC_CKG
 (() 0x3 << 6)

894 
	#AT91C_SSC_CKG_NONE
 (() 0x0 << 6)

895 
	#AT91C_SSC_CKG_LOW
 (() 0x1 << 6)

896 
	#AT91C_SSC_CKG_HIGH
 (() 0x2 << 6)

897 
	#AT91C_SSC_START
 (() 0xF << 8)

898 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

899 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

900 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

901 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

902 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

903 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

904 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

905 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

906 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

907 
	#AT91C_SSC_STOP
 (() 0x1 << 12)

908 
	#AT91C_SSC_STTOUT
 (() 0x1 << 15)

909 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

910 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

912 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

913 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

914 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

915 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

916 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

917 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

918 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

919 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

920 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

921 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

922 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

923 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

924 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

927 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

928 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

930 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

931 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

932 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

933 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

934 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

935 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

936 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

937 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

938 
	#AT91C_SSC_CP0
 (() 0x1 << 8)

939 
	#AT91C_SSC_CP1
 (() 0x1 << 9)

940 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

941 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

942 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

943 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

947 

	)

951 
	s_AT91S_USART
 {

952 
AT91_REG
 
	mUS_CR
;

953 
AT91_REG
 
	mUS_MR
;

954 
AT91_REG
 
	mUS_IER
;

955 
AT91_REG
 
	mUS_IDR
;

956 
AT91_REG
 
	mUS_IMR
;

957 
AT91_REG
 
	mUS_CSR
;

958 
AT91_REG
 
	mUS_RHR
;

959 
AT91_REG
 
	mUS_THR
;

960 
AT91_REG
 
	mUS_BRGR
;

961 
AT91_REG
 
	mUS_RTOR
;

962 
AT91_REG
 
	mUS_TTGR
;

963 
AT91_REG
 
	mRe£rved0
[5];

964 
AT91_REG
 
	mUS_FIDI
;

965 
AT91_REG
 
	mUS_NER
;

966 
AT91_REG
 
	mUS_XXR
;

967 
AT91_REG
 
	mUS_IF
;

968 
AT91_REG
 
	mRe£rved1
[44];

969 
AT91_REG
 
	mUS_RPR
;

970 
AT91_REG
 
	mUS_RCR
;

971 
AT91_REG
 
	mUS_TPR
;

972 
AT91_REG
 
	mUS_TCR
;

973 
AT91_REG
 
	mUS_RNPR
;

974 
AT91_REG
 
	mUS_RNCR
;

975 
AT91_REG
 
	mUS_TNPR
;

976 
AT91_REG
 
	mUS_TNCR
;

977 
AT91_REG
 
	mUS_PTCR
;

978 
AT91_REG
 
	mUS_PTSR
;

979 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

982 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

983 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

984 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

985 
	#AT91C_US_STTTO
 (() 0x1 << 11)

986 
	#AT91C_US_SENDA
 (() 0x1 << 12)

987 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

988 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

989 
	#AT91C_US_RETTO
 (() 0x1 << 15)

990 
	#AT91C_US_DTREN
 (() 0x1 << 16)

991 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

992 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

993 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

995 
	#AT91C_US_USMODE
 (() 0xF << 0)

996 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

997 
	#AT91C_US_USMODE_RS485
 (() 0x1)

998 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

999 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

1000 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

1001 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

1002 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

1003 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

1004 
	#AT91C_US_CLKS
 (() 0x3 << 4)

1005 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

1006 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

1007 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

1008 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

1009 
	#AT91C_US_CHRL
 (() 0x3 << 6)

1010 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

1011 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

1012 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

1013 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

1014 
	#AT91C_US_SYNC
 (() 0x1 << 8)

1015 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

1016 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

1017 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

1018 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

1019 
	#AT91C_US_MSBF
 (() 0x1 << 16)

1020 
	#AT91C_US_MODE9
 (() 0x1 << 17)

1021 
	#AT91C_US_CKLO
 (() 0x1 << 18)

1022 
	#AT91C_US_OVER
 (() 0x1 << 19)

1023 
	#AT91C_US_INACK
 (() 0x1 << 20)

1024 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

1025 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

1026 
	#AT91C_US_FILTER
 (() 0x1 << 28)

1028 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

1029 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

1030 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

1031 
	#AT91C_US_NACK
 (() 0x1 << 13)

1032 
	#AT91C_US_RIIC
 (() 0x1 << 16)

1033 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

1034 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

1035 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

1039 
	#AT91C_US_RI
 (() 0x1 << 20)

1040 
	#AT91C_US_DSR
 (() 0x1 << 21)

1041 
	#AT91C_US_DCD
 (() 0x1 << 22)

1042 
	#AT91C_US_CTS
 (() 0x1 << 23)

1043 

	)

1047 
	s_AT91S_TWI
 {

1048 
AT91_REG
 
	mTWI_CR
;

1049 
AT91_REG
 
	mTWI_MMR
;

1050 
AT91_REG
 
	mTWI_SMR
;

1051 
AT91_REG
 
	mTWI_IADR
;

1052 
AT91_REG
 
	mTWI_CWGR
;

1053 
AT91_REG
 
	mRe£rved0
[3];

1054 
AT91_REG
 
	mTWI_SR
;

1055 
AT91_REG
 
	mTWI_IER
;

1056 
AT91_REG
 
	mTWI_IDR
;

1057 
AT91_REG
 
	mTWI_IMR
;

1058 
AT91_REG
 
	mTWI_RHR
;

1059 
AT91_REG
 
	mTWI_THR
;

1060 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

1063 
	#AT91C_TWI_START
 (() 0x1 << 0)

1064 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

1065 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

1066 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

1067 
	#AT91C_TWI_SVEN
 (() 0x1 << 4)

1068 
	#AT91C_TWI_SVDIS
 (() 0x1 << 5)

1069 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

1071 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

1072 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

1073 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

1074 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

1075 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

1076 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

1077 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

1079 
	#AT91C_TWI_SADR
 (() 0x7F << 16)

1081 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

1082 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

1083 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

1085 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

1086 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

1087 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

1088 
	#AT91C_TWI_SVREAD
 (() 0x1 << 3)

1089 
	#AT91C_TWI_SVACC
 (() 0x1 << 4)

1090 
	#AT91C_TWI_GCACC
 (() 0x1 << 5)

1091 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

1092 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

1093 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1094 
	#AT91C_TWI_ARBLST
 (() 0x1 << 9)

1098 

	)

1102 
	s_AT91S_MCI
 {

1103 
AT91_REG
 
	mMCI_CR
;

1104 
AT91_REG
 
	mMCI_MR
;

1105 
AT91_REG
 
	mMCI_DTOR
;

1106 
AT91_REG
 
	mMCI_SDCR
;

1107 
AT91_REG
 
	mMCI_ARGR
;

1108 
AT91_REG
 
	mMCI_CMDR
;

1109 
AT91_REG
 
	mRe£rved0
[2];

1110 
AT91_REG
 
	mMCI_RSPR
[4];

1111 
AT91_REG
 
	mMCI_RDR
;

1112 
AT91_REG
 
	mMCI_TDR
;

1113 
AT91_REG
 
	mRe£rved1
[2];

1114 
AT91_REG
 
	mMCI_SR
;

1115 
AT91_REG
 
	mMCI_IER
;

1116 
AT91_REG
 
	mMCI_IDR
;

1117 
AT91_REG
 
	mMCI_IMR
;

1118 
AT91_REG
 
	mRe£rved2
[44];

1119 
AT91_REG
 
	mMCI_RPR
;

1120 
AT91_REG
 
	mMCI_RCR
;

1121 
AT91_REG
 
	mMCI_TPR
;

1122 
AT91_REG
 
	mMCI_TCR
;

1123 
AT91_REG
 
	mMCI_RNPR
;

1124 
AT91_REG
 
	mMCI_RNCR
;

1125 
AT91_REG
 
	mMCI_TNPR
;

1126 
AT91_REG
 
	mMCI_TNCR
;

1127 
AT91_REG
 
	mMCI_PTCR
;

1128 
AT91_REG
 
	mMCI_PTSR
;

1129 } 
	tAT91S_MCI
, *
	tAT91PS_MCI
;

1132 
	#AT91C_MCI_MCIEN
 (() 0x1 << 0)

1133 
	#AT91C_MCI_MCIDIS
 (() 0x1 << 1)

1134 
	#AT91C_MCI_PWSEN
 (() 0x1 << 2)

1135 
	#AT91C_MCI_PWSDIS
 (() 0x1 << 3)

1137 
	#AT91C_MCI_CLKDIV
 (() 0x1 << 0)

1138 
	#AT91C_MCI_PWSDIV
 (() 0x1 << 8)

1139 
	#AT91C_MCI_PDCPADV
 (() 0x1 << 14)

1140 
	#AT91C_MCI_PDCMODE
 (() 0x1 << 15)

1141 
	#AT91C_MCI_BLKLEN
 (() 0x1 << 18)

1143 
	#AT91C_MCI_DTOCYC
 (() 0x1 << 0)

1144 
	#AT91C_MCI_DTOMUL
 (() 0x7 << 4)

1145 
	#AT91C_MCI_DTOMUL_1
 (() 0x0 << 4)

1146 
	#AT91C_MCI_DTOMUL_16
 (() 0x1 << 4)

1147 
	#AT91C_MCI_DTOMUL_128
 (() 0x2 << 4)

1148 
	#AT91C_MCI_DTOMUL_256
 (() 0x3 << 4)

1149 
	#AT91C_MCI_DTOMUL_1024
 (() 0x4 << 4)

1150 
	#AT91C_MCI_DTOMUL_4096
 (() 0x5 << 4)

1151 
	#AT91C_MCI_DTOMUL_65536
 (() 0x6 << 4)

1152 
	#AT91C_MCI_DTOMUL_1048576
 (() 0x7 << 4)

1154 
	#AT91C_MCI_SCDSEL
 (() 0x1 << 0)

1155 
	#AT91C_MCI_SCDBUS
 (() 0x1 << 7)

1157 
	#AT91C_MCI_CMDNB
 (() 0x1F << 0)

1158 
	#AT91C_MCI_RSPTYP
 (() 0x3 << 6)

1159 
	#AT91C_MCI_RSPTYP_NO
 (() 0x0 << 6)

1160 
	#AT91C_MCI_RSPTYP_48
 (() 0x1 << 6)

1161 
	#AT91C_MCI_RSPTYP_136
 (() 0x2 << 6)

1162 
	#AT91C_MCI_SPCMD
 (() 0x7 << 8)

1163 
	#AT91C_MCI_SPCMD_NONE
 (() 0x0 << 8)

1164 
	#AT91C_MCI_SPCMD_INIT
 (() 0x1 << 8)

1165 
	#AT91C_MCI_SPCMD_SYNC
 (() 0x2 << 8)

1166 
	#AT91C_MCI_SPCMD_IT_CMD
 (() 0x4 << 8)

1167 
	#AT91C_MCI_SPCMD_IT_REP
 (() 0x5 << 8)

1168 
	#AT91C_MCI_OPDCMD
 (() 0x1 << 11)

1169 
	#AT91C_MCI_MAXLAT
 (() 0x1 << 12)

1170 
	#AT91C_MCI_TRCMD
 (() 0x3 << 16)

1171 
	#AT91C_MCI_TRCMD_NO
 (() 0x0 << 16)

1172 
	#AT91C_MCI_TRCMD_START
 (() 0x1 << 16)

1173 
	#AT91C_MCI_TRCMD_STOP
 (() 0x2 << 16)

1174 
	#AT91C_MCI_TRDIR
 (() 0x1 << 18)

1175 
	#AT91C_MCI_TRTYP
 (() 0x3 << 19)

1176 
	#AT91C_MCI_TRTYP_BLOCK
 (() 0x0 << 19)

1177 
	#AT91C_MCI_TRTYP_MULTIPLE
 (() 0x1 << 19)

1178 
	#AT91C_MCI_TRTYP_STREAM
 (() 0x2 << 19)

1180 
	#AT91C_MCI_CMDRDY
 (() 0x1 << 0)

1181 
	#AT91C_MCI_RXRDY
 (() 0x1 << 1)

1182 
	#AT91C_MCI_TXRDY
 (() 0x1 << 2)

1183 
	#AT91C_MCI_BLKE
 (() 0x1 << 3)

1184 
	#AT91C_MCI_DTIP
 (() 0x1 << 4)

1185 
	#AT91C_MCI_NOTBUSY
 (() 0x1 << 5)

1186 
	#AT91C_MCI_ENDRX
 (() 0x1 << 6)

1187 
	#AT91C_MCI_ENDTX
 (() 0x1 << 7)

1188 
	#AT91C_MCI_RXBUFF
 (() 0x1 << 14)

1189 
	#AT91C_MCI_TXBUFE
 (() 0x1 << 15)

1190 
	#AT91C_MCI_RINDE
 (() 0x1 << 16)

1191 
	#AT91C_MCI_RDIRE
 (() 0x1 << 17)

1192 
	#AT91C_MCI_RCRCE
 (() 0x1 << 18)

1193 
	#AT91C_MCI_RENDE
 (() 0x1 << 19)

1194 
	#AT91C_MCI_RTOE
 (() 0x1 << 20)

1195 
	#AT91C_MCI_DCRCE
 (() 0x1 << 21)

1196 
	#AT91C_MCI_DTOE
 (() 0x1 << 22)

1197 
	#AT91C_MCI_OVRE
 (() 0x1 << 30)

1198 
	#AT91C_MCI_UNRE
 (() 0x1 << 31)

1202 

	)

1206 
	s_AT91S_UDP
 {

1207 
AT91_REG
 
	mUDP_NUM
;

1208 
AT91_REG
 
	mUDP_GLBSTATE
;

1209 
AT91_REG
 
	mUDP_FADDR
;

1210 
AT91_REG
 
	mRe£rved0
[1];

1211 
AT91_REG
 
	mUDP_IER
;

1212 
AT91_REG
 
	mUDP_IDR
;

1213 
AT91_REG
 
	mUDP_IMR
;

1214 
AT91_REG
 
	mUDP_ISR
;

1215 
AT91_REG
 
	mUDP_ICR
;

1216 
AT91_REG
 
	mRe£rved1
[1];

1217 
AT91_REG
 
	mUDP_RSTEP
;

1218 
AT91_REG
 
	mRe£rved2
[1];

1219 
AT91_REG
 
	mUDP_CSR
[8];

1220 
AT91_REG
 
	mUDP_FDR
[8];

1221 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1224 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1225 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1226 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1228 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1229 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1230 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 2)

1231 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1233 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1234 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1236 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1237 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1238 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1239 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1240 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1241 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1242 
	#AT91C_UDP_EPINT6
 (() 0x1 << 6)

1243 
	#AT91C_UDP_EPINT7
 (() 0x1 << 7)

1244 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1245 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1246 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1247 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1248 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1252 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1255 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1256 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1257 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1258 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1259 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1260 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1261 
	#AT91C_UDP_EP6
 (() 0x1 << 6)

1262 
	#AT91C_UDP_EP7
 (() 0x1 << 7)

1264 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1265 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1266 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1267 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1268 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1269 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1270 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1271 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1272 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1273 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1274 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1275 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1276 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1277 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1278 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1279 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1280 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1281 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1282 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1283 

	)

1287 
	s_AT91S_TC
 {

1288 
AT91_REG
 
	mTC_CCR
;

1289 
AT91_REG
 
	mTC_CMR
;

1290 
AT91_REG
 
	mRe£rved0
[2];

1291 
AT91_REG
 
	mTC_CV
;

1292 
AT91_REG
 
	mTC_RA
;

1293 
AT91_REG
 
	mTC_RB
;

1294 
AT91_REG
 
	mTC_RC
;

1295 
AT91_REG
 
	mTC_SR
;

1296 
AT91_REG
 
	mTC_IER
;

1297 
AT91_REG
 
	mTC_IDR
;

1298 
AT91_REG
 
	mTC_IMR
;

1299 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1302 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1303 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1304 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1306 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1307 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1308 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1309 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1310 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1311 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1312 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1313 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1314 
	#AT91C_TC_EEVT_NONE
 (() 0x0 << 10)

1315 
	#AT91C_TC_EEVT_RISING
 (() 0x1 << 10)

1316 
	#AT91C_TC_EEVT_FALLING
 (() 0x2 << 10)

1317 
	#AT91C_TC_EEVT_BOTH
 (() 0x3 << 10)

1318 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1319 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1320 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1321 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1322 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1323 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1324 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1325 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1326 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1327 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1328 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1329 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1330 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1331 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1332 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1333 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1334 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1335 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1336 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1337 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1338 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1339 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1340 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1341 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1342 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1343 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1344 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1345 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1346 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1347 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1348 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1349 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1350 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1351 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1352 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1353 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1354 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1355 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1356 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1357 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1358 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1359 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1360 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1361 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1362 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1363 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1364 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1365 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1367 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1368 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1369 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1370 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1371 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1372 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1373 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1374 
	#AT91C_TC_ETRCS
 (() 0x1 << 7)

1375 
	#AT91C_TC_ETRGS
 (() 0x1 << 16)

1376 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1377 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1381 

	)

1385 
	s_AT91S_TCB
 {

1386 
AT91S_TC
 
	mTCB_TC0
;

1387 
AT91_REG
 
	mRe£rved0
[4];

1388 
AT91S_TC
 
	mTCB_TC1
;

1389 
AT91_REG
 
	mRe£rved1
[4];

1390 
AT91S_TC
 
	mTCB_TC2
;

1391 
AT91_REG
 
	mRe£rved2
[4];

1392 
AT91_REG
 
	mTCB_BCR
;

1393 
AT91_REG
 
	mTCB_BMR
;

1394 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1397 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1399 
	#AT91C_TCB_TC0XC0S
 (() 0x1 << 0)

1400 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1401 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1402 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1403 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1404 
	#AT91C_TCB_TC1XC1S
 (() 0x1 << 2)

1405 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1406 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1407 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1408 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1409 
	#AT91C_TCB_TC2XC2S
 (() 0x1 << 4)

1410 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1411 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1412 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1413 
	#AT91C_TCB_TC2XC2S_TIOA2
 (() 0x3 << 4)

1414 

	)

1418 
	s_AT91S_UHP
 {

1419 
AT91_REG
 
	mUHP_HcRevisi⁄
;

1420 
AT91_REG
 
	mUHP_HcC⁄åﬁ
;

1421 
AT91_REG
 
	mUHP_HcComm™dSètus
;

1422 
AT91_REG
 
	mUHP_HcI¡îru±Sètus
;

1423 
AT91_REG
 
	mUHP_HcI¡îru±E«bÀ
;

1424 
AT91_REG
 
	mUHP_HcI¡îru±DißbÀ
;

1425 
AT91_REG
 
	mUHP_HcHCCA
;

1426 
AT91_REG
 
	mUHP_HcPîiodCuºítED
;

1427 
AT91_REG
 
	mUHP_HcC⁄åﬁHódED
;

1428 
AT91_REG
 
	mUHP_HcC⁄åﬁCuºítED
;

1429 
AT91_REG
 
	mUHP_HcBulkHódED
;

1430 
AT91_REG
 
	mUHP_HcBulkCuºítED
;

1431 
AT91_REG
 
	mUHP_HcBulkD⁄eHód
;

1432 
AT91_REG
 
	mUHP_HcFmI¡îvÆ
;

1433 
AT91_REG
 
	mUHP_HcFmRemaöög
;

1434 
AT91_REG
 
	mUHP_HcFmNumbî
;

1435 
AT91_REG
 
	mUHP_HcPîiodicSèπ
;

1436 
AT91_REG
 
	mUHP_HcLSThªshﬁd
;

1437 
AT91_REG
 
	mUHP_HcRhDes¸ùt‹A
;

1438 
AT91_REG
 
	mUHP_HcRhDes¸ùt‹B
;

1439 
AT91_REG
 
	mUHP_HcRhSètus
;

1440 
AT91_REG
 
	mUHP_HcRhP‹tSètus
[2];

1441 } 
	tAT91S_UHP
, *
	tAT91PS_UHP
;

1447 
	s_AT91S_EMAC
 {

1448 
AT91_REG
 
	mEMAC_CTL
;

1449 
AT91_REG
 
	mEMAC_CFG
;

1450 
AT91_REG
 
	mEMAC_SR
;

1451 
AT91_REG
 
	mEMAC_TAR
;

1452 
AT91_REG
 
	mEMAC_TCR
;

1453 
AT91_REG
 
	mEMAC_TSR
;

1454 
AT91_REG
 
	mEMAC_RBQP
;

1455 
AT91_REG
 
	mRe£rved0
[1];

1456 
AT91_REG
 
	mEMAC_RSR
;

1457 
AT91_REG
 
	mEMAC_ISR
;

1458 
AT91_REG
 
	mEMAC_IER
;

1459 
AT91_REG
 
	mEMAC_IDR
;

1460 
AT91_REG
 
	mEMAC_IMR
;

1461 
AT91_REG
 
	mEMAC_MAN
;

1462 
AT91_REG
 
	mRe£rved1
[2];

1463 
AT91_REG
 
	mEMAC_FRA
;

1464 
AT91_REG
 
	mEMAC_SCOL
;

1465 
AT91_REG
 
	mEMAC_MCOL
;

1466 
AT91_REG
 
	mEMAC_OK
;

1467 
AT91_REG
 
	mEMAC_SEQE
;

1468 
AT91_REG
 
	mEMAC_ALE
;

1469 
AT91_REG
 
	mEMAC_DTE
;

1470 
AT91_REG
 
	mEMAC_LCOL
;

1471 
AT91_REG
 
	mEMAC_ECOL
;

1472 
AT91_REG
 
	mEMAC_CSE
;

1473 
AT91_REG
 
	mEMAC_TUE
;

1474 
AT91_REG
 
	mEMAC_CDE
;

1475 
AT91_REG
 
	mEMAC_ELR
;

1476 
AT91_REG
 
	mEMAC_RJB
;

1477 
AT91_REG
 
	mEMAC_USF
;

1478 
AT91_REG
 
	mEMAC_SQEE
;

1479 
AT91_REG
 
	mEMAC_DRFC
;

1480 
AT91_REG
 
	mRe£rved2
[3];

1481 
AT91_REG
 
	mEMAC_HSH
;

1482 
AT91_REG
 
	mEMAC_HSL
;

1483 
AT91_REG
 
	mEMAC_SA1L
;

1484 
AT91_REG
 
	mEMAC_SA1H
;

1485 
AT91_REG
 
	mEMAC_SA2L
;

1486 
AT91_REG
 
	mEMAC_SA2H
;

1487 
AT91_REG
 
	mEMAC_SA3L
;

1488 
AT91_REG
 
	mEMAC_SA3H
;

1489 
AT91_REG
 
	mEMAC_SA4L
;

1490 
AT91_REG
 
	mEMAC_SA4H
;

1491 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1494 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1495 
	#AT91C_EMAC_LBL
 (() 0x1 << 1)

1496 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1497 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1498 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1499 
	#AT91C_EMAC_CSR
 (() 0x1 << 5)

1500 
	#AT91C_EMAC_ISR
 (() 0x1 << 6)

1501 
	#AT91C_EMAC_WES
 (() 0x1 << 7)

1502 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1504 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1505 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1506 
	#AT91C_EMAC_BR
 (() 0x1 << 2)

1507 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1508 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1509 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1510 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1511 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1512 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1513 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1514 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1515 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1516 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1517 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1518 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1519 
	#AT91C_EMAC_RMII
 (() 0x1 << 13)

1521 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1522 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1524 
	#AT91C_EMAC_LEN
 (() 0x7FF << 0)

1525 
	#AT91C_EMAC_NCRC
 (() 0x1 << 15)

1527 
	#AT91C_EMAC_OVR
 (() 0x1 << 0)

1528 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1529 
	#AT91C_EMAC_RLE
 (() 0x1 << 2)

1530 
	#AT91C_EMAC_TXIDLE
 (() 0x1 << 3)

1531 
	#AT91C_EMAC_BNQ
 (() 0x1 << 4)

1532 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1533 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1536 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1538 
	#AT91C_EMAC_DONE
 (() 0x1 << 0)

1539 
	#AT91C_EMAC_RCOM
 (() 0x1 << 1)

1540 
	#AT91C_EMAC_RBNA
 (() 0x1 << 2)

1541 
	#AT91C_EMAC_TOVR
 (() 0x1 << 3)

1542 
	#AT91C_EMAC_TUND
 (() 0x1 << 4)

1543 
	#AT91C_EMAC_RTRY
 (() 0x1 << 5)

1544 
	#AT91C_EMAC_TBRE
 (() 0x1 << 6)

1545 
	#AT91C_EMAC_TCOM
 (() 0x1 << 7)

1546 
	#AT91C_EMAC_TIDLE
 (() 0x1 << 8)

1547 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1548 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1549 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1554 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1555 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1556 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1557 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1558 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1559 
	#AT91C_EMAC_HIGH
 (() 0x1 << 30)

1560 
	#AT91C_EMAC_LOW
 (() 0x1 << 31)

1561 

	)

1565 
	s_AT91S_EBI
 {

1566 
AT91_REG
 
	mEBI_CSA
;

1567 
AT91_REG
 
	mEBI_CFGR
;

1568 } 
	tAT91S_EBI
, *
	tAT91PS_EBI
;

1571 
	#AT91C_EBI_CS0A
 (() 0x1 << 0)

1572 
	#AT91C_EBI_CS0A_SMC
 (() 0x0)

1573 
	#AT91C_EBI_CS0A_BFC
 (() 0x1)

1574 
	#AT91C_EBI_CS1A
 (() 0x1 << 1)

1575 
	#AT91C_EBI_CS1A_SMC
 (() 0x0 << 1)

1576 
	#AT91C_EBI_CS1A_SDRAMC
 (() 0x1 << 1)

1577 
	#AT91C_EBI_CS3A
 (() 0x1 << 3)

1578 
	#AT91C_EBI_CS3A_SMC
 (() 0x0 << 3)

1579 
	#AT91C_EBI_CS3A_SMC_Sm¨tMedü
 (() 0x1 << 3)

1580 
	#AT91C_EBI_CS4A
 (() 0x1 << 4)

1581 
	#AT91C_EBI_CS4A_SMC
 (() 0x0 << 4)

1582 
	#AT91C_EBI_CS4A_SMC_Com∑˘Fœsh
 (() 0x1 << 4)

1584 
	#AT91C_EBI_DBPUC
 (() 0x1 << 0)

1585 
	#AT91C_EBI_EBSEN
 (() 0x1 << 1)

1586 

	)

1590 
	s_AT91S_SMC2
 {

1591 
AT91_REG
 
	mSMC2_CSR
[8];

1592 } 
	tAT91S_SMC2
, *
	tAT91PS_SMC2
;

1595 
	#AT91C_SMC2_NWS
 (() 0x7F << 0)

1596 
	#AT91C_SMC2_WSEN
 (() 0x1 << 7)

1597 
	#AT91C_SMC2_TDF
 (() 0xF << 8)

1598 
	#AT91C_SMC2_BAT
 (() 0x1 << 12)

1599 
	#AT91C_SMC2_DBW
 (() 0x1 << 13)

1600 
	#AT91C_SMC2_DBW_16
 (() 0x1 << 13)

1601 
	#AT91C_SMC2_DBW_8
 (() 0x2 << 13)

1602 
	#AT91C_SMC2_DRP
 (() 0x1 << 15)

1603 
	#AT91C_SMC2_ACSS
 (() 0x3 << 16)

1604 
	#AT91C_SMC2_ACSS_STANDARD
 (() 0x0 << 16)

1605 
	#AT91C_SMC2_ACSS_1_CYCLE
 (() 0x1 << 16)

1606 
	#AT91C_SMC2_ACSS_2_CYCLES
 (() 0x2 << 16)

1607 
	#AT91C_SMC2_ACSS_3_CYCLES
 (() 0x3 << 16)

1608 
	#AT91C_SMC2_RWSETUP
 (() 0x7 << 24)

1609 
	#AT91C_SMC2_RWHOLD
 (() 0x7 << 29)

1610 

	)

1614 
	s_AT91S_SDRC
 {

1615 
AT91_REG
 
	mSDRC_MR
;

1616 
AT91_REG
 
	mSDRC_TR
;

1617 
AT91_REG
 
	mSDRC_CR
;

1618 
AT91_REG
 
	mSDRC_SRR
;

1619 
AT91_REG
 
	mSDRC_LPR
;

1620 
AT91_REG
 
	mSDRC_IER
;

1621 
AT91_REG
 
	mSDRC_IDR
;

1622 
AT91_REG
 
	mSDRC_IMR
;

1623 
AT91_REG
 
	mSDRC_ISR
;

1624 } 
	tAT91S_SDRC
, *
	tAT91PS_SDRC
;

1627 
	#AT91C_SDRC_MODE
 (() 0xF << 0)

1628 
	#AT91C_SDRC_MODE_NORMAL_CMD
 (() 0x0)

1629 
	#AT91C_SDRC_MODE_NOP_CMD
 (() 0x1)

1630 
	#AT91C_SDRC_MODE_PRCGALL_CMD
 (() 0x2)

1631 
	#AT91C_SDRC_MODE_LMR_CMD
 (() 0x3)

1632 
	#AT91C_SDRC_MODE_RFSH_CMD
 (() 0x4)

1633 
	#AT91C_SDRC_DBW
 (() 0x1 << 4)

1634 
	#AT91C_SDRC_DBW_32_BITS
 (() 0x0 << 4)

1635 
	#AT91C_SDRC_DBW_16_BITS
 (() 0x1 << 4)

1637 
	#AT91C_SDRC_COUNT
 (() 0xFFF << 0)

1639 
	#AT91C_SDRC_NC
 (() 0x3 << 0)

1640 
	#AT91C_SDRC_NC_8
 (() 0x0)

1641 
	#AT91C_SDRC_NC_9
 (() 0x1)

1642 
	#AT91C_SDRC_NC_10
 (() 0x2)

1643 
	#AT91C_SDRC_NC_11
 (() 0x3)

1644 
	#AT91C_SDRC_NR
 (() 0x3 << 2)

1645 
	#AT91C_SDRC_NR_11
 (() 0x0 << 2)

1646 
	#AT91C_SDRC_NR_12
 (() 0x1 << 2)

1647 
	#AT91C_SDRC_NR_13
 (() 0x2 << 2)

1648 
	#AT91C_SDRC_NB
 (() 0x1 << 4)

1649 
	#AT91C_SDRC_NB_2_BANKS
 (() 0x0 << 4)

1650 
	#AT91C_SDRC_NB_4_BANKS
 (() 0x1 << 4)

1651 
	#AT91C_SDRC_CAS
 (() 0x3 << 5)

1652 
	#AT91C_SDRC_CAS_2
 (() 0x2 << 5)

1653 
	#AT91C_SDRC_TWR
 (() 0xF << 7)

1654 
	#AT91C_SDRC_TRC
 (() 0xF << 11)

1655 
	#AT91C_SDRC_TRP
 (() 0xF << 15)

1656 
	#AT91C_SDRC_TRCD
 (() 0xF << 19)

1657 
	#AT91C_SDRC_TRAS
 (() 0xF << 23)

1658 
	#AT91C_SDRC_TXSR
 (() 0xF << 27)

1660 
	#AT91C_SDRC_SRCB
 (() 0x1 << 0)

1662 
	#AT91C_SDRC_LPCB
 (() 0x1 << 0)

1664 
	#AT91C_SDRC_RES
 (() 0x1 << 0)

1668 

	)

1672 
	s_AT91S_BFC
 {

1673 
AT91_REG
 
	mBFC_MR
;

1674 } 
	tAT91S_BFC
, *
	tAT91PS_BFC
;

1677 
	#AT91C_BFC_BFCOM
 (() 0x3 << 0)

1678 
	#AT91C_BFC_BFCOM_DISABLED
 (() 0x0)

1679 
	#AT91C_BFC_BFCOM_ASYNC
 (() 0x1)

1680 
	#AT91C_BFC_BFCOM_BURST_READ
 (() 0x2)

1681 
	#AT91C_BFC_BFCC
 (() 0x3 << 2)

1682 
	#AT91C_BFC_BFCC_MCK
 (() 0x1 << 2)

1683 
	#AT91C_BFC_BFCC_MCK_DIV_2
 (() 0x2 << 2)

1684 
	#AT91C_BFC_BFCC_MCK_DIV_4
 (() 0x3 << 2)

1685 
	#AT91C_BFC_AVL
 (() 0xF << 4)

1686 
	#AT91C_BFC_PAGES
 (() 0x7 << 8)

1687 
	#AT91C_BFC_PAGES_NO_PAGE
 (() 0x0 << 8)

1688 
	#AT91C_BFC_PAGES_16
 (() 0x1 << 8)

1689 
	#AT91C_BFC_PAGES_32
 (() 0x2 << 8)

1690 
	#AT91C_BFC_PAGES_64
 (() 0x3 << 8)

1691 
	#AT91C_BFC_PAGES_128
 (() 0x4 << 8)

1692 
	#AT91C_BFC_PAGES_256
 (() 0x5 << 8)

1693 
	#AT91C_BFC_PAGES_512
 (() 0x6 << 8)

1694 
	#AT91C_BFC_PAGES_1024
 (() 0x7 << 8)

1695 
	#AT91C_BFC_OEL
 (() 0x3 << 12)

1696 
	#AT91C_BFC_BAAEN
 (() 0x1 << 16)

1697 
	#AT91C_BFC_BFOEH
 (() 0x1 << 17)

1698 
	#AT91C_BFC_MUXEN
 (() 0x1 << 18)

1699 
	#AT91C_BFC_RDYEN
 (() 0x1 << 19)

1700 

	)

1706 
	#AT91C_MC_PUER
 ((
AT91_REG
 *) 0xFFFFFF54)

1707 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

1708 
	#AT91C_MC_PUP
 ((
AT91_REG
 *) 0xFFFFFF50)

1709 
	#AT91C_MC_PUIA
 ((
AT91_REG
 *) 0xFFFFFF10)

1710 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

1711 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

1713 
	#AT91C_RTC_IMR
 ((
AT91_REG
 *) 0xFFFFFE28)

1714 
	#AT91C_RTC_IER
 ((
AT91_REG
 *) 0xFFFFFE20)

1715 
	#AT91C_RTC_SR
 ((
AT91_REG
 *) 0xFFFFFE18)

1716 
	#AT91C_RTC_TIMALR
 ((
AT91_REG
 *) 0xFFFFFE10)

1717 
	#AT91C_RTC_TIMR
 ((
AT91_REG
 *) 0xFFFFFE08)

1718 
	#AT91C_RTC_CR
 ((
AT91_REG
 *) 0xFFFFFE00)

1719 
	#AT91C_RTC_VER
 ((
AT91_REG
 *) 0xFFFFFE2C)

1720 
	#AT91C_RTC_IDR
 ((
AT91_REG
 *) 0xFFFFFE24)

1721 
	#AT91C_RTC_SCCR
 ((
AT91_REG
 *) 0xFFFFFE1C)

1722 
	#AT91C_RTC_CALALR
 ((
AT91_REG
 *) 0xFFFFFE14)

1723 
	#AT91C_RTC_CALR
 ((
AT91_REG
 *) 0xFFFFFE0C)

1724 
	#AT91C_RTC_MR
 ((
AT91_REG
 *) 0xFFFFFE04)

1726 
	#AT91C_ST_CRTR
 ((
AT91_REG
 *) 0xFFFFFD24)

1727 
	#AT91C_ST_IMR
 ((
AT91_REG
 *) 0xFFFFFD1C)

1728 
	#AT91C_ST_IER
 ((
AT91_REG
 *) 0xFFFFFD14)

1729 
	#AT91C_ST_RTMR
 ((
AT91_REG
 *) 0xFFFFFD0C)

1730 
	#AT91C_ST_PIMR
 ((
AT91_REG
 *) 0xFFFFFD04)

1731 
	#AT91C_ST_RTAR
 ((
AT91_REG
 *) 0xFFFFFD20)

1732 
	#AT91C_ST_IDR
 ((
AT91_REG
 *) 0xFFFFFD18)

1733 
	#AT91C_ST_SR
 ((
AT91_REG
 *) 0xFFFFFD10)

1734 
	#AT91C_ST_WDMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1735 
	#AT91C_ST_CR
 ((
AT91_REG
 *) 0xFFFFFD00)

1737 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1738 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1739 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1740 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1741 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1742 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1743 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1744 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1745 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1746 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1747 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1748 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1750 
	#AT91C_CKGR_PLLBR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1751 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1752 
	#AT91C_CKGR_PLLAR
 ((
AT91_REG
 *) 0xFFFFFC28)

1753 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1755 
	#AT91C_PIOD_PDSR
 ((
AT91_REG
 *) 0xFFFFFA3C)

1756 
	#AT91C_PIOD_CODR
 ((
AT91_REG
 *) 0xFFFFFA34)

1757 
	#AT91C_PIOD_OWER
 ((
AT91_REG
 *) 0xFFFFFAA0)

1758 
	#AT91C_PIOD_MDER
 ((
AT91_REG
 *) 0xFFFFFA50)

1759 
	#AT91C_PIOD_IMR
 ((
AT91_REG
 *) 0xFFFFFA48)

1760 
	#AT91C_PIOD_IER
 ((
AT91_REG
 *) 0xFFFFFA40)

1761 
	#AT91C_PIOD_ODSR
 ((
AT91_REG
 *) 0xFFFFFA38)

1762 
	#AT91C_PIOD_SODR
 ((
AT91_REG
 *) 0xFFFFFA30)

1763 
	#AT91C_PIOD_PER
 ((
AT91_REG
 *) 0xFFFFFA00)

1764 
	#AT91C_PIOD_OWDR
 ((
AT91_REG
 *) 0xFFFFFAA4)

1765 
	#AT91C_PIOD_PPUER
 ((
AT91_REG
 *) 0xFFFFFA64)

1766 
	#AT91C_PIOD_MDDR
 ((
AT91_REG
 *) 0xFFFFFA54)

1767 
	#AT91C_PIOD_ISR
 ((
AT91_REG
 *) 0xFFFFFA4C)

1768 
	#AT91C_PIOD_IDR
 ((
AT91_REG
 *) 0xFFFFFA44)

1769 
	#AT91C_PIOD_PDR
 ((
AT91_REG
 *) 0xFFFFFA04)

1770 
	#AT91C_PIOD_ODR
 ((
AT91_REG
 *) 0xFFFFFA14)

1771 
	#AT91C_PIOD_OWSR
 ((
AT91_REG
 *) 0xFFFFFAA8)

1772 
	#AT91C_PIOD_ABSR
 ((
AT91_REG
 *) 0xFFFFFA78)

1773 
	#AT91C_PIOD_ASR
 ((
AT91_REG
 *) 0xFFFFFA70)

1774 
	#AT91C_PIOD_PPUSR
 ((
AT91_REG
 *) 0xFFFFFA68)

1775 
	#AT91C_PIOD_PPUDR
 ((
AT91_REG
 *) 0xFFFFFA60)

1776 
	#AT91C_PIOD_MDSR
 ((
AT91_REG
 *) 0xFFFFFA58)

1777 
	#AT91C_PIOD_PSR
 ((
AT91_REG
 *) 0xFFFFFA08)

1778 
	#AT91C_PIOD_OER
 ((
AT91_REG
 *) 0xFFFFFA10)

1779 
	#AT91C_PIOD_OSR
 ((
AT91_REG
 *) 0xFFFFFA18)

1780 
	#AT91C_PIOD_IFER
 ((
AT91_REG
 *) 0xFFFFFA20)

1781 
	#AT91C_PIOD_BSR
 ((
AT91_REG
 *) 0xFFFFFA74)

1782 
	#AT91C_PIOD_IFDR
 ((
AT91_REG
 *) 0xFFFFFA24)

1783 
	#AT91C_PIOD_IFSR
 ((
AT91_REG
 *) 0xFFFFFA28)

1785 
	#AT91C_PIOC_IFDR
 ((
AT91_REG
 *) 0xFFFFF824)

1786 
	#AT91C_PIOC_ODR
 ((
AT91_REG
 *) 0xFFFFF814)

1787 
	#AT91C_PIOC_ABSR
 ((
AT91_REG
 *) 0xFFFFF878)

1788 
	#AT91C_PIOC_SODR
 ((
AT91_REG
 *) 0xFFFFF830)

1789 
	#AT91C_PIOC_IFSR
 ((
AT91_REG
 *) 0xFFFFF828)

1790 
	#AT91C_PIOC_CODR
 ((
AT91_REG
 *) 0xFFFFF834)

1791 
	#AT91C_PIOC_ODSR
 ((
AT91_REG
 *) 0xFFFFF838)

1792 
	#AT91C_PIOC_IER
 ((
AT91_REG
 *) 0xFFFFF840)

1793 
	#AT91C_PIOC_IMR
 ((
AT91_REG
 *) 0xFFFFF848)

1794 
	#AT91C_PIOC_OWDR
 ((
AT91_REG
 *) 0xFFFFF8A4)

1795 
	#AT91C_PIOC_MDDR
 ((
AT91_REG
 *) 0xFFFFF854)

1796 
	#AT91C_PIOC_PDSR
 ((
AT91_REG
 *) 0xFFFFF83C)

1797 
	#AT91C_PIOC_IDR
 ((
AT91_REG
 *) 0xFFFFF844)

1798 
	#AT91C_PIOC_ISR
 ((
AT91_REG
 *) 0xFFFFF84C)

1799 
	#AT91C_PIOC_PDR
 ((
AT91_REG
 *) 0xFFFFF804)

1800 
	#AT91C_PIOC_OWSR
 ((
AT91_REG
 *) 0xFFFFF8A8)

1801 
	#AT91C_PIOC_OWER
 ((
AT91_REG
 *) 0xFFFFF8A0)

1802 
	#AT91C_PIOC_ASR
 ((
AT91_REG
 *) 0xFFFFF870)

1803 
	#AT91C_PIOC_PPUSR
 ((
AT91_REG
 *) 0xFFFFF868)

1804 
	#AT91C_PIOC_PPUDR
 ((
AT91_REG
 *) 0xFFFFF860)

1805 
	#AT91C_PIOC_MDSR
 ((
AT91_REG
 *) 0xFFFFF858)

1806 
	#AT91C_PIOC_MDER
 ((
AT91_REG
 *) 0xFFFFF850)

1807 
	#AT91C_PIOC_IFER
 ((
AT91_REG
 *) 0xFFFFF820)

1808 
	#AT91C_PIOC_OSR
 ((
AT91_REG
 *) 0xFFFFF818)

1809 
	#AT91C_PIOC_OER
 ((
AT91_REG
 *) 0xFFFFF810)

1810 
	#AT91C_PIOC_PSR
 ((
AT91_REG
 *) 0xFFFFF808)

1811 
	#AT91C_PIOC_PER
 ((
AT91_REG
 *) 0xFFFFF800)

1812 
	#AT91C_PIOC_BSR
 ((
AT91_REG
 *) 0xFFFFF874)

1813 
	#AT91C_PIOC_PPUER
 ((
AT91_REG
 *) 0xFFFFF864)

1815 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1816 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1817 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1818 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1819 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1820 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1821 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1822 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1823 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1824 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1825 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1826 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1827 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1828 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1829 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1830 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1831 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1832 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1833 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1834 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1835 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1836 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1837 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1838 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1839 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1840 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1841 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1842 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1843 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1845 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1846 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1847 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1848 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1849 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1850 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1851 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1852 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1853 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1854 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1855 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1856 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1857 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1858 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1859 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1860 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1861 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1862 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1863 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1864 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1865 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1866 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1867 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1868 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1869 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1870 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1871 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1872 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1873 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1875 
	#AT91C_DBGU_C2R
 ((
AT91_REG
 *) 0xFFFFF244)

1876 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1877 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1878 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1879 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1880 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1881 
	#AT91C_DBGU_C1R
 ((
AT91_REG
 *) 0xFFFFF240)

1882 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1883 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1884 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1885 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1886 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1888 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1889 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1890 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1891 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1894 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1895 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1896 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1897 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1899 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1900 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1901 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1902 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1903 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1904 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1905 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1906 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1907 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1908 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1909 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1910 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1911 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1912 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1913 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1914 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1915 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1916 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1918 
	#AT91C_SPI_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

1919 
	#AT91C_SPI_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

1920 
	#AT91C_SPI_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

1921 
	#AT91C_SPI_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

1922 
	#AT91C_SPI_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

1923 
	#AT91C_SPI_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

1924 
	#AT91C_SPI_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

1925 
	#AT91C_SPI_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

1926 
	#AT91C_SPI_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

1927 
	#AT91C_SPI_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

1929 
	#AT91C_SPI_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

1930 
	#AT91C_SPI_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

1931 
	#AT91C_SPI_SR
 ((
AT91_REG
 *) 0xFFFE0010)

1932 
	#AT91C_SPI_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

1933 
	#AT91C_SPI_CR
 ((
AT91_REG
 *) 0xFFFE0000)

1934 
	#AT91C_SPI_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

1935 
	#AT91C_SPI_IER
 ((
AT91_REG
 *) 0xFFFE0014)

1936 
	#AT91C_SPI_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

1937 
	#AT91C_SPI_MR
 ((
AT91_REG
 *) 0xFFFE0004)

1939 
	#AT91C_SSC2_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

1940 
	#AT91C_SSC2_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

1941 
	#AT91C_SSC2_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

1942 
	#AT91C_SSC2_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

1943 
	#AT91C_SSC2_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

1944 
	#AT91C_SSC2_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

1945 
	#AT91C_SSC2_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

1946 
	#AT91C_SSC2_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

1947 
	#AT91C_SSC2_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

1948 
	#AT91C_SSC2_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

1950 
	#AT91C_SSC2_IMR
 ((
AT91_REG
 *) 0xFFFD804C)

1951 
	#AT91C_SSC2_IER
 ((
AT91_REG
 *) 0xFFFD8044)

1952 
	#AT91C_SSC2_RC1R
 ((
AT91_REG
 *) 0xFFFD803C)

1953 
	#AT91C_SSC2_TSHR
 ((
AT91_REG
 *) 0xFFFD8034)

1954 
	#AT91C_SSC2_CMR
 ((
AT91_REG
 *) 0xFFFD8004)

1955 
	#AT91C_SSC2_IDR
 ((
AT91_REG
 *) 0xFFFD8048)

1956 
	#AT91C_SSC2_TCMR
 ((
AT91_REG
 *) 0xFFFD8018)

1957 
	#AT91C_SSC2_RCMR
 ((
AT91_REG
 *) 0xFFFD8010)

1958 
	#AT91C_SSC2_CR
 ((
AT91_REG
 *) 0xFFFD8000)

1959 
	#AT91C_SSC2_RFMR
 ((
AT91_REG
 *) 0xFFFD8014)

1960 
	#AT91C_SSC2_TFMR
 ((
AT91_REG
 *) 0xFFFD801C)

1961 
	#AT91C_SSC2_THR
 ((
AT91_REG
 *) 0xFFFD8024)

1962 
	#AT91C_SSC2_SR
 ((
AT91_REG
 *) 0xFFFD8040)

1963 
	#AT91C_SSC2_RC0R
 ((
AT91_REG
 *) 0xFFFD8038)

1964 
	#AT91C_SSC2_RSHR
 ((
AT91_REG
 *) 0xFFFD8030)

1965 
	#AT91C_SSC2_RHR
 ((
AT91_REG
 *) 0xFFFD8020)

1967 
	#AT91C_SSC1_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

1968 
	#AT91C_SSC1_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

1969 
	#AT91C_SSC1_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

1970 
	#AT91C_SSC1_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

1971 
	#AT91C_SSC1_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

1972 
	#AT91C_SSC1_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

1973 
	#AT91C_SSC1_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

1974 
	#AT91C_SSC1_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

1975 
	#AT91C_SSC1_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

1976 
	#AT91C_SSC1_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

1978 
	#AT91C_SSC1_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

1979 
	#AT91C_SSC1_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

1980 
	#AT91C_SSC1_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

1981 
	#AT91C_SSC1_SR
 ((
AT91_REG
 *) 0xFFFD4040)

1982 
	#AT91C_SSC1_RC0R
 ((
AT91_REG
 *) 0xFFFD4038)

1983 
	#AT91C_SSC1_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

1984 
	#AT91C_SSC1_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

1985 
	#AT91C_SSC1_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

1986 
	#AT91C_SSC1_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

1987 
	#AT91C_SSC1_CR
 ((
AT91_REG
 *) 0xFFFD4000)

1988 
	#AT91C_SSC1_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

1989 
	#AT91C_SSC1_IER
 ((
AT91_REG
 *) 0xFFFD4044)

1990 
	#AT91C_SSC1_RC1R
 ((
AT91_REG
 *) 0xFFFD403C)

1991 
	#AT91C_SSC1_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

1992 
	#AT91C_SSC1_THR
 ((
AT91_REG
 *) 0xFFFD4024)

1993 
	#AT91C_SSC1_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

1995 
	#AT91C_SSC0_PTCR
 ((
AT91_REG
 *) 0xFFFD0120)

1996 
	#AT91C_SSC0_TNPR
 ((
AT91_REG
 *) 0xFFFD0118)

1997 
	#AT91C_SSC0_RNPR
 ((
AT91_REG
 *) 0xFFFD0110)

1998 
	#AT91C_SSC0_TPR
 ((
AT91_REG
 *) 0xFFFD0108)

1999 
	#AT91C_SSC0_RPR
 ((
AT91_REG
 *) 0xFFFD0100)

2000 
	#AT91C_SSC0_PTSR
 ((
AT91_REG
 *) 0xFFFD0124)

2001 
	#AT91C_SSC0_TNCR
 ((
AT91_REG
 *) 0xFFFD011C)

2002 
	#AT91C_SSC0_RNCR
 ((
AT91_REG
 *) 0xFFFD0114)

2003 
	#AT91C_SSC0_TCR
 ((
AT91_REG
 *) 0xFFFD010C)

2004 
	#AT91C_SSC0_RCR
 ((
AT91_REG
 *) 0xFFFD0104)

2006 
	#AT91C_SSC0_IMR
 ((
AT91_REG
 *) 0xFFFD004C)

2007 
	#AT91C_SSC0_IER
 ((
AT91_REG
 *) 0xFFFD0044)

2008 
	#AT91C_SSC0_RC1R
 ((
AT91_REG
 *) 0xFFFD003C)

2009 
	#AT91C_SSC0_TSHR
 ((
AT91_REG
 *) 0xFFFD0034)

2010 
	#AT91C_SSC0_THR
 ((
AT91_REG
 *) 0xFFFD0024)

2011 
	#AT91C_SSC0_TFMR
 ((
AT91_REG
 *) 0xFFFD001C)

2012 
	#AT91C_SSC0_RFMR
 ((
AT91_REG
 *) 0xFFFD0014)

2013 
	#AT91C_SSC0_CMR
 ((
AT91_REG
 *) 0xFFFD0004)

2014 
	#AT91C_SSC0_IDR
 ((
AT91_REG
 *) 0xFFFD0048)

2015 
	#AT91C_SSC0_SR
 ((
AT91_REG
 *) 0xFFFD0040)

2016 
	#AT91C_SSC0_RC0R
 ((
AT91_REG
 *) 0xFFFD0038)

2017 
	#AT91C_SSC0_RSHR
 ((
AT91_REG
 *) 0xFFFD0030)

2018 
	#AT91C_SSC0_RHR
 ((
AT91_REG
 *) 0xFFFD0020)

2019 
	#AT91C_SSC0_TCMR
 ((
AT91_REG
 *) 0xFFFD0018)

2020 
	#AT91C_SSC0_RCMR
 ((
AT91_REG
 *) 0xFFFD0010)

2021 
	#AT91C_SSC0_CR
 ((
AT91_REG
 *) 0xFFFD0000)

2023 
	#AT91C_US3_PTSR
 ((
AT91_REG
 *) 0xFFFCC124)

2024 
	#AT91C_US3_TNCR
 ((
AT91_REG
 *) 0xFFFCC11C)

2025 
	#AT91C_US3_RNCR
 ((
AT91_REG
 *) 0xFFFCC114)

2026 
	#AT91C_US3_TCR
 ((
AT91_REG
 *) 0xFFFCC10C)

2027 
	#AT91C_US3_RCR
 ((
AT91_REG
 *) 0xFFFCC104)

2028 
	#AT91C_US3_PTCR
 ((
AT91_REG
 *) 0xFFFCC120)

2029 
	#AT91C_US3_TNPR
 ((
AT91_REG
 *) 0xFFFCC118)

2030 
	#AT91C_US3_RNPR
 ((
AT91_REG
 *) 0xFFFCC110)

2031 
	#AT91C_US3_TPR
 ((
AT91_REG
 *) 0xFFFCC108)

2032 
	#AT91C_US3_RPR
 ((
AT91_REG
 *) 0xFFFCC100)

2034 
	#AT91C_US3_IF
 ((
AT91_REG
 *) 0xFFFCC04C)

2035 
	#AT91C_US3_NER
 ((
AT91_REG
 *) 0xFFFCC044)

2036 
	#AT91C_US3_RTOR
 ((
AT91_REG
 *) 0xFFFCC024)

2037 
	#AT91C_US3_THR
 ((
AT91_REG
 *) 0xFFFCC01C)

2038 
	#AT91C_US3_CSR
 ((
AT91_REG
 *) 0xFFFCC014)

2039 
	#AT91C_US3_IDR
 ((
AT91_REG
 *) 0xFFFCC00C)

2040 
	#AT91C_US3_MR
 ((
AT91_REG
 *) 0xFFFCC004)

2041 
	#AT91C_US3_XXR
 ((
AT91_REG
 *) 0xFFFCC048)

2042 
	#AT91C_US3_FIDI
 ((
AT91_REG
 *) 0xFFFCC040)

2043 
	#AT91C_US3_TTGR
 ((
AT91_REG
 *) 0xFFFCC028)

2044 
	#AT91C_US3_BRGR
 ((
AT91_REG
 *) 0xFFFCC020)

2045 
	#AT91C_US3_RHR
 ((
AT91_REG
 *) 0xFFFCC018)

2046 
	#AT91C_US3_IMR
 ((
AT91_REG
 *) 0xFFFCC010)

2047 
	#AT91C_US3_IER
 ((
AT91_REG
 *) 0xFFFCC008)

2048 
	#AT91C_US3_CR
 ((
AT91_REG
 *) 0xFFFCC000)

2050 
	#AT91C_US2_PTSR
 ((
AT91_REG
 *) 0xFFFC8124)

2051 
	#AT91C_US2_TNCR
 ((
AT91_REG
 *) 0xFFFC811C)

2052 
	#AT91C_US2_RNCR
 ((
AT91_REG
 *) 0xFFFC8114)

2053 
	#AT91C_US2_TCR
 ((
AT91_REG
 *) 0xFFFC810C)

2054 
	#AT91C_US2_PTCR
 ((
AT91_REG
 *) 0xFFFC8120)

2055 
	#AT91C_US2_RCR
 ((
AT91_REG
 *) 0xFFFC8104)

2056 
	#AT91C_US2_TNPR
 ((
AT91_REG
 *) 0xFFFC8118)

2057 
	#AT91C_US2_RPR
 ((
AT91_REG
 *) 0xFFFC8100)

2058 
	#AT91C_US2_TPR
 ((
AT91_REG
 *) 0xFFFC8108)

2059 
	#AT91C_US2_RNPR
 ((
AT91_REG
 *) 0xFFFC8110)

2061 
	#AT91C_US2_XXR
 ((
AT91_REG
 *) 0xFFFC8048)

2062 
	#AT91C_US2_FIDI
 ((
AT91_REG
 *) 0xFFFC8040)

2063 
	#AT91C_US2_TTGR
 ((
AT91_REG
 *) 0xFFFC8028)

2064 
	#AT91C_US2_BRGR
 ((
AT91_REG
 *) 0xFFFC8020)

2065 
	#AT91C_US2_RHR
 ((
AT91_REG
 *) 0xFFFC8018)

2066 
	#AT91C_US2_IMR
 ((
AT91_REG
 *) 0xFFFC8010)

2067 
	#AT91C_US2_IER
 ((
AT91_REG
 *) 0xFFFC8008)

2068 
	#AT91C_US2_CR
 ((
AT91_REG
 *) 0xFFFC8000)

2069 
	#AT91C_US2_IF
 ((
AT91_REG
 *) 0xFFFC804C)

2070 
	#AT91C_US2_NER
 ((
AT91_REG
 *) 0xFFFC8044)

2071 
	#AT91C_US2_RTOR
 ((
AT91_REG
 *) 0xFFFC8024)

2072 
	#AT91C_US2_THR
 ((
AT91_REG
 *) 0xFFFC801C)

2073 
	#AT91C_US2_CSR
 ((
AT91_REG
 *) 0xFFFC8014)

2074 
	#AT91C_US2_IDR
 ((
AT91_REG
 *) 0xFFFC800C)

2075 
	#AT91C_US2_MR
 ((
AT91_REG
 *) 0xFFFC8004)

2077 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2078 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2079 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2080 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2081 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2082 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2083 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2084 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2085 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2086 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2088 
	#AT91C_US1_XXR
 ((
AT91_REG
 *) 0xFFFC4048)

2089 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2090 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2091 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2092 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2093 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2094 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2095 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2096 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2097 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2098 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2099 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2100 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2101 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2102 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2104 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2105 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2106 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2107 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2108 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2109 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2110 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2111 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2112 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2113 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2115 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2116 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2117 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2118 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2119 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2120 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2121 
	#AT91C_US0_XXR
 ((
AT91_REG
 *) 0xFFFC0048)

2122 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2123 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2124 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2125 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2126 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2127 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2128 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2129 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2131 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2132 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2133 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2134 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2135 
	#AT91C_TWI_SMR
 ((
AT91_REG
 *) 0xFFFB8008)

2136 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2137 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2138 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2139 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2140 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2141 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2143 
	#AT91C_MCI_PTCR
 ((
AT91_REG
 *) 0xFFFB4120)

2144 
	#AT91C_MCI_TNPR
 ((
AT91_REG
 *) 0xFFFB4118)

2145 
	#AT91C_MCI_RNPR
 ((
AT91_REG
 *) 0xFFFB4110)

2146 
	#AT91C_MCI_TPR
 ((
AT91_REG
 *) 0xFFFB4108)

2147 
	#AT91C_MCI_RPR
 ((
AT91_REG
 *) 0xFFFB4100)

2148 
	#AT91C_MCI_PTSR
 ((
AT91_REG
 *) 0xFFFB4124)

2149 
	#AT91C_MCI_TNCR
 ((
AT91_REG
 *) 0xFFFB411C)

2150 
	#AT91C_MCI_RNCR
 ((
AT91_REG
 *) 0xFFFB4114)

2151 
	#AT91C_MCI_TCR
 ((
AT91_REG
 *) 0xFFFB410C)

2152 
	#AT91C_MCI_RCR
 ((
AT91_REG
 *) 0xFFFB4104)

2154 
	#AT91C_MCI_IDR
 ((
AT91_REG
 *) 0xFFFB4048)

2155 
	#AT91C_MCI_SR
 ((
AT91_REG
 *) 0xFFFB4040)

2156 
	#AT91C_MCI_RDR
 ((
AT91_REG
 *) 0xFFFB4030)

2157 
	#AT91C_MCI_RSPR
 ((
AT91_REG
 *) 0xFFFB4020)

2158 
	#AT91C_MCI_ARGR
 ((
AT91_REG
 *) 0xFFFB4010)

2159 
	#AT91C_MCI_DTOR
 ((
AT91_REG
 *) 0xFFFB4008)

2160 
	#AT91C_MCI_CR
 ((
AT91_REG
 *) 0xFFFB4000)

2161 
	#AT91C_MCI_IMR
 ((
AT91_REG
 *) 0xFFFB404C)

2162 
	#AT91C_MCI_IER
 ((
AT91_REG
 *) 0xFFFB4044)

2163 
	#AT91C_MCI_TDR
 ((
AT91_REG
 *) 0xFFFB4034)

2164 
	#AT91C_MCI_CMDR
 ((
AT91_REG
 *) 0xFFFB4014)

2165 
	#AT91C_MCI_SDCR
 ((
AT91_REG
 *) 0xFFFB400C)

2166 
	#AT91C_MCI_MR
 ((
AT91_REG
 *) 0xFFFB4004)

2168 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2169 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2170 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2171 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2172 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2173 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2174 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2175 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2176 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2177 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2178 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2180 
	#AT91C_TC5_CMR
 ((
AT91_REG
 *) 0xFFFA4084)

2181 
	#AT91C_TC5_IDR
 ((
AT91_REG
 *) 0xFFFA40A8)

2182 
	#AT91C_TC5_SR
 ((
AT91_REG
 *) 0xFFFA40A0)

2183 
	#AT91C_TC5_RB
 ((
AT91_REG
 *) 0xFFFA4098)

2184 
	#AT91C_TC5_CV
 ((
AT91_REG
 *) 0xFFFA4090)

2185 
	#AT91C_TC5_CCR
 ((
AT91_REG
 *) 0xFFFA4080)

2186 
	#AT91C_TC5_IMR
 ((
AT91_REG
 *) 0xFFFA40AC)

2187 
	#AT91C_TC5_IER
 ((
AT91_REG
 *) 0xFFFA40A4)

2188 
	#AT91C_TC5_RC
 ((
AT91_REG
 *) 0xFFFA409C)

2189 
	#AT91C_TC5_RA
 ((
AT91_REG
 *) 0xFFFA4094)

2191 
	#AT91C_TC4_IMR
 ((
AT91_REG
 *) 0xFFFA406C)

2192 
	#AT91C_TC4_IER
 ((
AT91_REG
 *) 0xFFFA4064)

2193 
	#AT91C_TC4_RC
 ((
AT91_REG
 *) 0xFFFA405C)

2194 
	#AT91C_TC4_RA
 ((
AT91_REG
 *) 0xFFFA4054)

2195 
	#AT91C_TC4_CMR
 ((
AT91_REG
 *) 0xFFFA4044)

2196 
	#AT91C_TC4_IDR
 ((
AT91_REG
 *) 0xFFFA4068)

2197 
	#AT91C_TC4_SR
 ((
AT91_REG
 *) 0xFFFA4060)

2198 
	#AT91C_TC4_RB
 ((
AT91_REG
 *) 0xFFFA4058)

2199 
	#AT91C_TC4_CV
 ((
AT91_REG
 *) 0xFFFA4050)

2200 
	#AT91C_TC4_CCR
 ((
AT91_REG
 *) 0xFFFA4040)

2202 
	#AT91C_TC3_IMR
 ((
AT91_REG
 *) 0xFFFA402C)

2203 
	#AT91C_TC3_CV
 ((
AT91_REG
 *) 0xFFFA4010)

2204 
	#AT91C_TC3_CCR
 ((
AT91_REG
 *) 0xFFFA4000)

2205 
	#AT91C_TC3_IER
 ((
AT91_REG
 *) 0xFFFA4024)

2206 
	#AT91C_TC3_CMR
 ((
AT91_REG
 *) 0xFFFA4004)

2207 
	#AT91C_TC3_RA
 ((
AT91_REG
 *) 0xFFFA4014)

2208 
	#AT91C_TC3_RC
 ((
AT91_REG
 *) 0xFFFA401C)

2209 
	#AT91C_TC3_IDR
 ((
AT91_REG
 *) 0xFFFA4028)

2210 
	#AT91C_TC3_RB
 ((
AT91_REG
 *) 0xFFFA4018)

2211 
	#AT91C_TC3_SR
 ((
AT91_REG
 *) 0xFFFA4020)

2213 
	#AT91C_TCB1_BCR
 ((
AT91_REG
 *) 0xFFFA4140)

2214 
	#AT91C_TCB1_BMR
 ((
AT91_REG
 *) 0xFFFA4144)

2216 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2217 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2218 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2219 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2220 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2221 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2222 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2223 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2227 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2228 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2229 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2230 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2231 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2232 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2233 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2234 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2235 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2236 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2238 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2239 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2240 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2241 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2242 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2243 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2244 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2245 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2246 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2247 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2249 
	#AT91C_TCB0_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2250 
	#AT91C_TCB0_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2252 
	#AT91C_UHP_HcRhDes¸ùt‹A
 ((
AT91_REG
 *) 0x00300048)

2253 
	#AT91C_UHP_HcRhP‹tSètus
 ((
AT91_REG
 *) 0x00300054)

2254 
	#AT91C_UHP_HcRhDes¸ùt‹B
 ((
AT91_REG
 *) 0x0030004C)

2255 
	#AT91C_UHP_HcC⁄åﬁ
 ((
AT91_REG
 *) 0x00300004)

2256 
	#AT91C_UHP_HcI¡îru±Sètus
 ((
AT91_REG
 *) 0x0030000C)

2257 
	#AT91C_UHP_HcRhSètus
 ((
AT91_REG
 *) 0x00300050)

2258 
	#AT91C_UHP_HcRevisi⁄
 ((
AT91_REG
 *) 0x00300000)

2259 
	#AT91C_UHP_HcComm™dSètus
 ((
AT91_REG
 *) 0x00300008)

2260 
	#AT91C_UHP_HcI¡îru±E«bÀ
 ((
AT91_REG
 *) 0x00300010)

2261 
	#AT91C_UHP_HcHCCA
 ((
AT91_REG
 *) 0x00300018)

2262 
	#AT91C_UHP_HcC⁄åﬁHódED
 ((
AT91_REG
 *) 0x00300020)

2263 
	#AT91C_UHP_HcI¡îru±DißbÀ
 ((
AT91_REG
 *) 0x00300014)

2264 
	#AT91C_UHP_HcPîiodCuºítED
 ((
AT91_REG
 *) 0x0030001C)

2265 
	#AT91C_UHP_HcC⁄åﬁCuºítED
 ((
AT91_REG
 *) 0x00300024)

2266 
	#AT91C_UHP_HcBulkCuºítED
 ((
AT91_REG
 *) 0x0030002C)

2267 
	#AT91C_UHP_HcFmI¡îvÆ
 ((
AT91_REG
 *) 0x00300034)

2268 
	#AT91C_UHP_HcBulkHódED
 ((
AT91_REG
 *) 0x00300028)

2269 
	#AT91C_UHP_HcBulkD⁄eHód
 ((
AT91_REG
 *) 0x00300030)

2270 
	#AT91C_UHP_HcFmRemaöög
 ((
AT91_REG
 *) 0x00300038)

2271 
	#AT91C_UHP_HcPîiodicSèπ
 ((
AT91_REG
 *) 0x00300040)

2272 
	#AT91C_UHP_HcLSThªshﬁd
 ((
AT91_REG
 *) 0x00300044)

2273 
	#AT91C_UHP_HcFmNumbî
 ((
AT91_REG
 *) 0x0030003C)

2275 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFBC020)

2276 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFBC034)

2277 
	#AT91C_EMAC_HSH
 ((
AT91_REG
 *) 0xFFFBC090)

2278 
	#AT91C_EMAC_MCOL
 ((
AT91_REG
 *) 0xFFFBC048)

2279 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFBC028)

2280 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFBC0A4)

2281 
	#AT91C_EMAC_HSL
 ((
AT91_REG
 *) 0xFFFBC094)

2282 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFBC05C)

2283 
	#AT91C_EMAC_OK
 ((
AT91_REG
 *) 0xFFFBC04C)

2284 
	#AT91C_EMAC_CFG
 ((
AT91_REG
 *) 0xFFFBC004)

2285 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFBC0A8)

2286 
	#AT91C_EMAC_SEQE
 ((
AT91_REG
 *) 0xFFFBC050)

2287 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFBC060)

2288 
	#AT91C_EMAC_ELR
 ((
AT91_REG
 *) 0xFFFBC070)

2289 
	#AT91C_EMAC_SR
 ((
AT91_REG
 *) 0xFFFBC008)

2290 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFBC018)

2291 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFBC064)

2292 
	#AT91C_EMAC_RJB
 ((
AT91_REG
 *) 0xFFFBC074)

2293 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFBC078)

2294 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFBC02C)

2295 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFBC098)

2296 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFBC030)

2297 
	#AT91C_EMAC_FRA
 ((
AT91_REG
 *) 0xFFFBC040)

2298 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFBC0AC)

2299 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFBC09C)

2300 
	#AT91C_EMAC_SCOL
 ((
AT91_REG
 *) 0xFFFBC044)

2301 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFBC054)

2302 
	#AT91C_EMAC_TAR
 ((
AT91_REG
 *) 0xFFFBC00C)

2303 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFBC0B0)

2304 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFBC0A0)

2305 
	#AT91C_EMAC_TUE
 ((
AT91_REG
 *) 0xFFFBC068)

2306 
	#AT91C_EMAC_DTE
 ((
AT91_REG
 *) 0xFFFBC058)

2307 
	#AT91C_EMAC_TCR
 ((
AT91_REG
 *) 0xFFFBC010)

2308 
	#AT91C_EMAC_CTL
 ((
AT91_REG
 *) 0xFFFBC000)

2309 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFBC0B4)

2310 
	#AT91C_EMAC_CDE
 ((
AT91_REG
 *) 0xFFFBC06C)

2311 
	#AT91C_EMAC_SQEE
 ((
AT91_REG
 *) 0xFFFBC07C)

2312 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFBC014)

2313 
	#AT91C_EMAC_DRFC
 ((
AT91_REG
 *) 0xFFFBC080)

2315 
	#AT91C_EBI_CFGR
 ((
AT91_REG
 *) 0xFFFFFF64)

2316 
	#AT91C_EBI_CSA
 ((
AT91_REG
 *) 0xFFFFFF60)

2318 
	#AT91C_SMC2_CSR
 ((
AT91_REG
 *) 0xFFFFFF70)

2320 
	#AT91C_SDRC_IMR
 ((
AT91_REG
 *) 0xFFFFFFAC)

2321 
	#AT91C_SDRC_IER
 ((
AT91_REG
 *) 0xFFFFFFA4)

2322 
	#AT91C_SDRC_SRR
 ((
AT91_REG
 *) 0xFFFFFF9C)

2323 
	#AT91C_SDRC_TR
 ((
AT91_REG
 *) 0xFFFFFF94)

2324 
	#AT91C_SDRC_ISR
 ((
AT91_REG
 *) 0xFFFFFFB0)

2325 
	#AT91C_SDRC_IDR
 ((
AT91_REG
 *) 0xFFFFFFA8)

2326 
	#AT91C_SDRC_LPR
 ((
AT91_REG
 *) 0xFFFFFFA0)

2327 
	#AT91C_SDRC_CR
 ((
AT91_REG
 *) 0xFFFFFF98)

2328 
	#AT91C_SDRC_MR
 ((
AT91_REG
 *) 0xFFFFFF90)

2330 
	#AT91C_BFC_MR
 ((
AT91_REG
 *) 0xFFFFFFC0)

2331 

	)

2335 
	#AT91C_PIO_PA0
 (() 1 << 0)

2336 
	#AT91C_PA0_MISO
 ((Ë
AT91C_PIO_PA0
)

2337 
	#AT91C_PA0_PCK3
 ((Ë
AT91C_PIO_PA0
)

2338 
	#AT91C_PIO_PA1
 (() 1 << 1)

2339 
	#AT91C_PA1_MOSI
 ((Ë
AT91C_PIO_PA1
)

2340 
	#AT91C_PA1_PCK0
 ((Ë
AT91C_PIO_PA1
)

2341 
	#AT91C_PIO_PA10
 (() 1 << 10)

2342 
	#AT91C_PA10_ETX1
 ((Ë
AT91C_PIO_PA10
)

2343 
	#AT91C_PA10_MCDB1
 ((Ë
AT91C_PIO_PA10
)

2344 
	#AT91C_PIO_PA11
 (() 1 << 11)

2345 
	#AT91C_PA11_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PA11
)

2346 
	#AT91C_PA11_MCDB2
 ((Ë
AT91C_PIO_PA11
)

2347 
	#AT91C_PIO_PA12
 (() 1 << 12)

2348 
	#AT91C_PA12_ERX0
 ((Ë
AT91C_PIO_PA12
)

2349 
	#AT91C_PA12_MCDB3
 ((Ë
AT91C_PIO_PA12
)

2350 
	#AT91C_PIO_PA13
 (() 1 << 13)

2351 
	#AT91C_PA13_ERX1
 ((Ë
AT91C_PIO_PA13
)

2352 
	#AT91C_PA13_TCLK0
 ((Ë
AT91C_PIO_PA13
)

2353 
	#AT91C_PIO_PA14
 (() 1 << 14)

2354 
	#AT91C_PA14_ERXER
 ((Ë
AT91C_PIO_PA14
)

2355 
	#AT91C_PA14_TCLK1
 ((Ë
AT91C_PIO_PA14
)

2356 
	#AT91C_PIO_PA15
 (() 1 << 15)

2357 
	#AT91C_PA15_EMDC
 ((Ë
AT91C_PIO_PA15
)

2358 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2359 
	#AT91C_PIO_PA16
 (() 1 << 16)

2360 
	#AT91C_PA16_EMDIO
 ((Ë
AT91C_PIO_PA16
)

2361 
	#AT91C_PA16_IRQ6
 ((Ë
AT91C_PIO_PA16
)

2362 
	#AT91C_PIO_PA17
 (() 1 << 17)

2363 
	#AT91C_PA17_TXD0
 ((Ë
AT91C_PIO_PA17
)

2364 
	#AT91C_PA17_TIOA0
 ((Ë
AT91C_PIO_PA17
)

2365 
	#AT91C_PIO_PA18
 (() 1 << 18)

2366 
	#AT91C_PA18_RXD0
 ((Ë
AT91C_PIO_PA18
)

2367 
	#AT91C_PA18_TIOB0
 ((Ë
AT91C_PIO_PA18
)

2368 
	#AT91C_PIO_PA19
 (() 1 << 19)

2369 
	#AT91C_PA19_SCK0
 ((Ë
AT91C_PIO_PA19
)

2370 
	#AT91C_PA19_TIOA1
 ((Ë
AT91C_PIO_PA19
)

2371 
	#AT91C_PIO_PA2
 (() 1 << 2)

2372 
	#AT91C_PA2_SPCK
 ((Ë
AT91C_PIO_PA2
)

2373 
	#AT91C_PA2_IRQ4
 ((Ë
AT91C_PIO_PA2
)

2374 
	#AT91C_PIO_PA20
 (() 1 << 20)

2375 
	#AT91C_PA20_CTS0
 ((Ë
AT91C_PIO_PA20
)

2376 
	#AT91C_PA20_TIOB1
 ((Ë
AT91C_PIO_PA20
)

2377 
	#AT91C_PIO_PA21
 (() 1 << 21)

2378 
	#AT91C_PA21_RTS0
 ((Ë
AT91C_PIO_PA21
)

2379 
	#AT91C_PA21_TIOA2
 ((Ë
AT91C_PIO_PA21
)

2380 
	#AT91C_PIO_PA22
 (() 1 << 22)

2381 
	#AT91C_PA22_RXD2
 ((Ë
AT91C_PIO_PA22
)

2382 
	#AT91C_PA22_TIOB2
 ((Ë
AT91C_PIO_PA22
)

2383 
	#AT91C_PIO_PA23
 (() 1 << 23)

2384 
	#AT91C_PA23_TXD2
 ((Ë
AT91C_PIO_PA23
)

2385 
	#AT91C_PA23_IRQ3
 ((Ë
AT91C_PIO_PA23
)

2386 
	#AT91C_PIO_PA24
 (() 1 << 24)

2387 
	#AT91C_PA24_SCK2
 ((Ë
AT91C_PIO_PA24
)

2388 
	#AT91C_PA24_PCK1
 ((Ë
AT91C_PIO_PA24
)

2389 
	#AT91C_PIO_PA25
 (() 1 << 25)

2390 
	#AT91C_PA25_TWD
 ((Ë
AT91C_PIO_PA25
)

2391 
	#AT91C_PA25_IRQ2
 ((Ë
AT91C_PIO_PA25
)

2392 
	#AT91C_PIO_PA26
 (() 1 << 26)

2393 
	#AT91C_PA26_TWCK
 ((Ë
AT91C_PIO_PA26
)

2394 
	#AT91C_PA26_IRQ1
 ((Ë
AT91C_PIO_PA26
)

2395 
	#AT91C_PIO_PA27
 (() 1 << 27)

2396 
	#AT91C_PA27_MCCK
 ((Ë
AT91C_PIO_PA27
)

2397 
	#AT91C_PA27_TCLK3
 ((Ë
AT91C_PIO_PA27
)

2398 
	#AT91C_PIO_PA28
 (() 1 << 28)

2399 
	#AT91C_PA28_MCCDA
 ((Ë
AT91C_PIO_PA28
)

2400 
	#AT91C_PA28_TCLK4
 ((Ë
AT91C_PIO_PA28
)

2401 
	#AT91C_PIO_PA29
 (() 1 << 29)

2402 
	#AT91C_PA29_MCDA0
 ((Ë
AT91C_PIO_PA29
)

2403 
	#AT91C_PA29_TCLK5
 ((Ë
AT91C_PIO_PA29
)

2404 
	#AT91C_PIO_PA3
 (() 1 << 3)

2405 
	#AT91C_PA3_NPCS0
 ((Ë
AT91C_PIO_PA3
)

2406 
	#AT91C_PA3_IRQ5
 ((Ë
AT91C_PIO_PA3
)

2407 
	#AT91C_PIO_PA30
 (() 1 << 30)

2408 
	#AT91C_PA30_DRXD
 ((Ë
AT91C_PIO_PA30
)

2409 
	#AT91C_PA30_CTS2
 ((Ë
AT91C_PIO_PA30
)

2410 
	#AT91C_PIO_PA31
 (() 1 << 31)

2411 
	#AT91C_PA31_DTXD
 ((Ë
AT91C_PIO_PA31
)

2412 
	#AT91C_PA31_RTS2
 ((Ë
AT91C_PIO_PA31
)

2413 
	#AT91C_PIO_PA4
 (() 1 << 4)

2414 
	#AT91C_PA4_NPCS1
 ((Ë
AT91C_PIO_PA4
)

2415 
	#AT91C_PA4_PCK1
 ((Ë
AT91C_PIO_PA4
)

2416 
	#AT91C_PIO_PA5
 (() 1 << 5)

2417 
	#AT91C_PA5_NPCS2
 ((Ë
AT91C_PIO_PA5
)

2418 
	#AT91C_PA5_TXD3
 ((Ë
AT91C_PIO_PA5
)

2419 
	#AT91C_PIO_PA6
 (() 1 << 6)

2420 
	#AT91C_PA6_NPCS3
 ((Ë
AT91C_PIO_PA6
)

2421 
	#AT91C_PA6_RXD3
 ((Ë
AT91C_PIO_PA6
)

2422 
	#AT91C_PIO_PA7
 (() 1 << 7)

2423 
	#AT91C_PA7_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PA7
)

2424 
	#AT91C_PA7_PCK2
 ((Ë
AT91C_PIO_PA7
)

2425 
	#AT91C_PIO_PA8
 (() 1 << 8)

2426 
	#AT91C_PA8_ETXEN
 ((Ë
AT91C_PIO_PA8
)

2427 
	#AT91C_PA8_MCCDB
 ((Ë
AT91C_PIO_PA8
)

2428 
	#AT91C_PIO_PA9
 (() 1 << 9)

2429 
	#AT91C_PA9_ETX0
 ((Ë
AT91C_PIO_PA9
)

2430 
	#AT91C_PA9_MCDB0
 ((Ë
AT91C_PIO_PA9
)

2431 
	#AT91C_PIO_PB0
 (() 1 << 0)

2432 
	#AT91C_PB0_TF0
 ((Ë
AT91C_PIO_PB0
)

2433 
	#AT91C_PB0_TIOB3
 ((Ë
AT91C_PIO_PB0
)

2434 
	#AT91C_PIO_PB1
 (() 1 << 1)

2435 
	#AT91C_PB1_TK0
 ((Ë
AT91C_PIO_PB1
)

2436 
	#AT91C_PB1_CTS3
 ((Ë
AT91C_PIO_PB1
)

2437 
	#AT91C_PIO_PB10
 (() 1 << 10)

2438 
	#AT91C_PB10_RK1
 ((Ë
AT91C_PIO_PB10
)

2439 
	#AT91C_PB10_TIOA5
 ((Ë
AT91C_PIO_PB10
)

2440 
	#AT91C_PIO_PB11
 (() 1 << 11)

2441 
	#AT91C_PB11_RF1
 ((Ë
AT91C_PIO_PB11
)

2442 
	#AT91C_PB11_TIOB5
 ((Ë
AT91C_PIO_PB11
)

2443 
	#AT91C_PIO_PB12
 (() 1 << 12)

2444 
	#AT91C_PB12_TF2
 ((Ë
AT91C_PIO_PB12
)

2445 
	#AT91C_PB12_ETX2
 ((Ë
AT91C_PIO_PB12
)

2446 
	#AT91C_PIO_PB13
 (() 1 << 13)

2447 
	#AT91C_PB13_TK2
 ((Ë
AT91C_PIO_PB13
)

2448 
	#AT91C_PB13_ETX3
 ((Ë
AT91C_PIO_PB13
)

2449 
	#AT91C_PIO_PB14
 (() 1 << 14)

2450 
	#AT91C_PB14_TD2
 ((Ë
AT91C_PIO_PB14
)

2451 
	#AT91C_PB14_ETXER
 ((Ë
AT91C_PIO_PB14
)

2452 
	#AT91C_PIO_PB15
 (() 1 << 15)

2453 
	#AT91C_PB15_RD2
 ((Ë
AT91C_PIO_PB15
)

2454 
	#AT91C_PB15_ERX2
 ((Ë
AT91C_PIO_PB15
)

2455 
	#AT91C_PIO_PB16
 (() 1 << 16)

2456 
	#AT91C_PB16_RK2
 ((Ë
AT91C_PIO_PB16
)

2457 
	#AT91C_PB16_ERX3
 ((Ë
AT91C_PIO_PB16
)

2458 
	#AT91C_PIO_PB17
 (() 1 << 17)

2459 
	#AT91C_PB17_RF2
 ((Ë
AT91C_PIO_PB17
)

2460 
	#AT91C_PB17_ERXDV
 ((Ë
AT91C_PIO_PB17
)

2461 
	#AT91C_PIO_PB18
 (() 1 << 18)

2462 
	#AT91C_PB18_RI1
 ((Ë
AT91C_PIO_PB18
)

2463 
	#AT91C_PB18_ECOL
 ((Ë
AT91C_PIO_PB18
)

2464 
	#AT91C_PIO_PB19
 (() 1 << 19)

2465 
	#AT91C_PB19_DTR1
 ((Ë
AT91C_PIO_PB19
)

2466 
	#AT91C_PB19_ERXCK
 ((Ë
AT91C_PIO_PB19
)

2467 
	#AT91C_PIO_PB2
 (() 1 << 2)

2468 
	#AT91C_PB2_TD0
 ((Ë
AT91C_PIO_PB2
)

2469 
	#AT91C_PB2_SCK3
 ((Ë
AT91C_PIO_PB2
)

2470 
	#AT91C_PIO_PB20
 (() 1 << 20)

2471 
	#AT91C_PB20_TXD1
 ((Ë
AT91C_PIO_PB20
)

2472 
	#AT91C_PIO_PB21
 (() 1 << 21)

2473 
	#AT91C_PB21_RXD1
 ((Ë
AT91C_PIO_PB21
)

2474 
	#AT91C_PIO_PB22
 (() 1 << 22)

2475 
	#AT91C_PB22_SCK1
 ((Ë
AT91C_PIO_PB22
)

2476 
	#AT91C_PIO_PB23
 (() 1 << 23)

2477 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2478 
	#AT91C_PIO_PB24
 (() 1 << 24)

2479 
	#AT91C_PB24_CTS1
 ((Ë
AT91C_PIO_PB24
)

2480 
	#AT91C_PIO_PB25
 (() 1 << 25)

2481 
	#AT91C_PB25_DSR1
 ((Ë
AT91C_PIO_PB25
)

2482 
	#AT91C_PB25_EF100
 ((Ë
AT91C_PIO_PB25
)

2483 
	#AT91C_PIO_PB26
 (() 1 << 26)

2484 
	#AT91C_PB26_RTS1
 ((Ë
AT91C_PIO_PB26
)

2485 
	#AT91C_PIO_PB27
 (() 1 << 27)

2486 
	#AT91C_PB27_PCK0
 ((Ë
AT91C_PIO_PB27
)

2487 
	#AT91C_PIO_PB28
 (() 1 << 28)

2488 
	#AT91C_PB28_FIQ
 ((Ë
AT91C_PIO_PB28
)

2489 
	#AT91C_PIO_PB29
 (() 1 << 29)

2490 
	#AT91C_PB29_IRQ0
 ((Ë
AT91C_PIO_PB29
)

2491 
	#AT91C_PIO_PB3
 (() 1 << 3)

2492 
	#AT91C_PB3_RD0
 ((Ë
AT91C_PIO_PB3
)

2493 
	#AT91C_PB3_MCDA1
 ((Ë
AT91C_PIO_PB3
)

2494 
	#AT91C_PIO_PB4
 (() 1 << 4)

2495 
	#AT91C_PB4_RK0
 ((Ë
AT91C_PIO_PB4
)

2496 
	#AT91C_PB4_MCDA2
 ((Ë
AT91C_PIO_PB4
)

2497 
	#AT91C_PIO_PB5
 (() 1 << 5)

2498 
	#AT91C_PB5_RF0
 ((Ë
AT91C_PIO_PB5
)

2499 
	#AT91C_PB5_MCDA3
 ((Ë
AT91C_PIO_PB5
)

2500 
	#AT91C_PIO_PB6
 (() 1 << 6)

2501 
	#AT91C_PB6_TF1
 ((Ë
AT91C_PIO_PB6
)

2502 
	#AT91C_PB6_TIOA3
 ((Ë
AT91C_PIO_PB6
)

2503 
	#AT91C_PIO_PB7
 (() 1 << 7)

2504 
	#AT91C_PB7_TK1
 ((Ë
AT91C_PIO_PB7
)

2505 
	#AT91C_PB7_TIOB3
 ((Ë
AT91C_PIO_PB7
)

2506 
	#AT91C_PIO_PB8
 (() 1 << 8)

2507 
	#AT91C_PB8_TD1
 ((Ë
AT91C_PIO_PB8
)

2508 
	#AT91C_PB8_TIOA4
 ((Ë
AT91C_PIO_PB8
)

2509 
	#AT91C_PIO_PB9
 (() 1 << 9)

2510 
	#AT91C_PB9_RD1
 ((Ë
AT91C_PIO_PB9
)

2511 
	#AT91C_PB9_TIOB4
 ((Ë
AT91C_PIO_PB9
)

2512 
	#AT91C_PIO_PC0
 (() 1 << 0)

2513 
	#AT91C_PC0_BFCK
 ((Ë
AT91C_PIO_PC0
)

2514 
	#AT91C_PIO_PC1
 (() 1 << 1)

2515 
	#AT91C_PC1_BFRDY_SMOE
 ((Ë
AT91C_PIO_PC1
)

2516 
	#AT91C_PIO_PC10
 (() 1 << 10)

2517 
	#AT91C_PC10_NCS4_CFCS
 ((Ë
AT91C_PIO_PC10
)

2518 
	#AT91C_PIO_PC11
 (() 1 << 11)

2519 
	#AT91C_PC11_NCS5_CFCE1
 ((Ë
AT91C_PIO_PC11
)

2520 
	#AT91C_PIO_PC12
 (() 1 << 12)

2521 
	#AT91C_PC12_NCS6_CFCE2
 ((Ë
AT91C_PIO_PC12
)

2522 
	#AT91C_PIO_PC13
 (() 1 << 13)

2523 
	#AT91C_PC13_NCS7
 ((Ë
AT91C_PIO_PC13
)

2524 
	#AT91C_PIO_PC14
 (() 1 << 14)

2525 
	#AT91C_PIO_PC15
 (() 1 << 15)

2526 
	#AT91C_PIO_PC16
 (() 1 << 16)

2527 
	#AT91C_PC16_D16
 ((Ë
AT91C_PIO_PC16
)

2528 
	#AT91C_PIO_PC17
 (() 1 << 17)

2529 
	#AT91C_PC17_D17
 ((Ë
AT91C_PIO_PC17
)

2530 
	#AT91C_PIO_PC18
 (() 1 << 18)

2531 
	#AT91C_PC18_D18
 ((Ë
AT91C_PIO_PC18
)

2532 
	#AT91C_PIO_PC19
 (() 1 << 19)

2533 
	#AT91C_PC19_D19
 ((Ë
AT91C_PIO_PC19
)

2534 
	#AT91C_PIO_PC2
 (() 1 << 2)

2535 
	#AT91C_PC2_BFAVD
 ((Ë
AT91C_PIO_PC2
)

2536 
	#AT91C_PIO_PC20
 (() 1 << 20)

2537 
	#AT91C_PC20_D20
 ((Ë
AT91C_PIO_PC20
)

2538 
	#AT91C_PIO_PC21
 (() 1 << 21)

2539 
	#AT91C_PC21_D21
 ((Ë
AT91C_PIO_PC21
)

2540 
	#AT91C_PIO_PC22
 (() 1 << 22)

2541 
	#AT91C_PC22_D22
 ((Ë
AT91C_PIO_PC22
)

2542 
	#AT91C_PIO_PC23
 (() 1 << 23)

2543 
	#AT91C_PC23_D23
 ((Ë
AT91C_PIO_PC23
)

2544 
	#AT91C_PIO_PC24
 (() 1 << 24)

2545 
	#AT91C_PC24_D24
 ((Ë
AT91C_PIO_PC24
)

2546 
	#AT91C_PIO_PC25
 (() 1 << 25)

2547 
	#AT91C_PC25_D25
 ((Ë
AT91C_PIO_PC25
)

2548 
	#AT91C_PIO_PC26
 (() 1 << 26)

2549 
	#AT91C_PC26_D26
 ((Ë
AT91C_PIO_PC26
)

2550 
	#AT91C_PIO_PC27
 (() 1 << 27)

2551 
	#AT91C_PC27_D27
 ((Ë
AT91C_PIO_PC27
)

2552 
	#AT91C_PIO_PC28
 (() 1 << 28)

2553 
	#AT91C_PC28_D28
 ((Ë
AT91C_PIO_PC28
)

2554 
	#AT91C_PIO_PC29
 (() 1 << 29)

2555 
	#AT91C_PC29_D29
 ((Ë
AT91C_PIO_PC29
)

2556 
	#AT91C_PIO_PC3
 (() 1 << 3)

2557 
	#AT91C_PC3_BFBAA_SMWE
 ((Ë
AT91C_PIO_PC3
)

2558 
	#AT91C_PIO_PC30
 (() 1 << 30)

2559 
	#AT91C_PC30_D30
 ((Ë
AT91C_PIO_PC30
)

2560 
	#AT91C_PIO_PC31
 (() 1 << 31)

2561 
	#AT91C_PC31_D31
 ((Ë
AT91C_PIO_PC31
)

2562 
	#AT91C_PIO_PC4
 (() 1 << 4)

2563 
	#AT91C_PC4_BFOE
 ((Ë
AT91C_PIO_PC4
)

2564 
	#AT91C_PIO_PC5
 (() 1 << 5)

2565 
	#AT91C_PC5_BFWE
 ((Ë
AT91C_PIO_PC5
)

2566 
	#AT91C_PIO_PC6
 (() 1 << 6)

2567 
	#AT91C_PC6_NWAIT
 ((Ë
AT91C_PIO_PC6
)

2568 
	#AT91C_PIO_PC7
 (() 1 << 7)

2569 
	#AT91C_PC7_A23
 ((Ë
AT91C_PIO_PC7
)

2570 
	#AT91C_PIO_PC8
 (() 1 << 8)

2571 
	#AT91C_PC8_A24
 ((Ë
AT91C_PIO_PC8
)

2572 
	#AT91C_PIO_PC9
 (() 1 << 9)

2573 
	#AT91C_PC9_A25_CFRNW
 ((Ë
AT91C_PIO_PC9
)

2574 
	#AT91C_PIO_PD0
 (() 1 << 0)

2575 
	#AT91C_PD0_ETX0
 ((Ë
AT91C_PIO_PD0
)

2576 
	#AT91C_PIO_PD1
 (() 1 << 1)

2577 
	#AT91C_PD1_ETX1
 ((Ë
AT91C_PIO_PD1
)

2578 
	#AT91C_PIO_PD10
 (() 1 << 10)

2579 
	#AT91C_PD10_PCK3
 ((Ë
AT91C_PIO_PD10
)

2580 
	#AT91C_PD10_TPS1
 ((Ë
AT91C_PIO_PD10
)

2581 
	#AT91C_PIO_PD11
 (() 1 << 11)

2582 
	#AT91C_PD11_
 ((Ë
AT91C_PIO_PD11
)

2583 
	#AT91C_PD11_TPS2
 ((Ë
AT91C_PIO_PD11
)

2584 
	#AT91C_PIO_PD12
 (() 1 << 12)

2585 
	#AT91C_PD12_
 ((Ë
AT91C_PIO_PD12
)

2586 
	#AT91C_PD12_TPK0
 ((Ë
AT91C_PIO_PD12
)

2587 
	#AT91C_PIO_PD13
 (() 1 << 13)

2588 
	#AT91C_PD13_
 ((Ë
AT91C_PIO_PD13
)

2589 
	#AT91C_PD13_TPK1
 ((Ë
AT91C_PIO_PD13
)

2590 
	#AT91C_PIO_PD14
 (() 1 << 14)

2591 
	#AT91C_PD14_
 ((Ë
AT91C_PIO_PD14
)

2592 
	#AT91C_PD14_TPK2
 ((Ë
AT91C_PIO_PD14
)

2593 
	#AT91C_PIO_PD15
 (() 1 << 15)

2594 
	#AT91C_PD15_TD0
 ((Ë
AT91C_PIO_PD15
)

2595 
	#AT91C_PD15_TPK3
 ((Ë
AT91C_PIO_PD15
)

2596 
	#AT91C_PIO_PD16
 (() 1 << 16)

2597 
	#AT91C_PD16_TD1
 ((Ë
AT91C_PIO_PD16
)

2598 
	#AT91C_PD16_TPK4
 ((Ë
AT91C_PIO_PD16
)

2599 
	#AT91C_PIO_PD17
 (() 1 << 17)

2600 
	#AT91C_PD17_TD2
 ((Ë
AT91C_PIO_PD17
)

2601 
	#AT91C_PD17_TPK5
 ((Ë
AT91C_PIO_PD17
)

2602 
	#AT91C_PIO_PD18
 (() 1 << 18)

2603 
	#AT91C_PD18_NPCS1
 ((Ë
AT91C_PIO_PD18
)

2604 
	#AT91C_PD18_TPK6
 ((Ë
AT91C_PIO_PD18
)

2605 
	#AT91C_PIO_PD19
 (() 1 << 19)

2606 
	#AT91C_PD19_NPCS2
 ((Ë
AT91C_PIO_PD19
)

2607 
	#AT91C_PD19_TPK7
 ((Ë
AT91C_PIO_PD19
)

2608 
	#AT91C_PIO_PD2
 (() 1 << 2)

2609 
	#AT91C_PD2_ETX2
 ((Ë
AT91C_PIO_PD2
)

2610 
	#AT91C_PIO_PD20
 (() 1 << 20)

2611 
	#AT91C_PD20_NPCS3
 ((Ë
AT91C_PIO_PD20
)

2612 
	#AT91C_PD20_TPK8
 ((Ë
AT91C_PIO_PD20
)

2613 
	#AT91C_PIO_PD21
 (() 1 << 21)

2614 
	#AT91C_PD21_RTS0
 ((Ë
AT91C_PIO_PD21
)

2615 
	#AT91C_PD21_TPK9
 ((Ë
AT91C_PIO_PD21
)

2616 
	#AT91C_PIO_PD22
 (() 1 << 22)

2617 
	#AT91C_PD22_RTS1
 ((Ë
AT91C_PIO_PD22
)

2618 
	#AT91C_PD22_TPK10
 ((Ë
AT91C_PIO_PD22
)

2619 
	#AT91C_PIO_PD23
 (() 1 << 23)

2620 
	#AT91C_PD23_RTS2
 ((Ë
AT91C_PIO_PD23
)

2621 
	#AT91C_PD23_TPK11
 ((Ë
AT91C_PIO_PD23
)

2622 
	#AT91C_PIO_PD24
 (() 1 << 24)

2623 
	#AT91C_PD24_RTS3
 ((Ë
AT91C_PIO_PD24
)

2624 
	#AT91C_PD24_TPK12
 ((Ë
AT91C_PIO_PD24
)

2625 
	#AT91C_PIO_PD25
 (() 1 << 25)

2626 
	#AT91C_PD25_DTR1
 ((Ë
AT91C_PIO_PD25
)

2627 
	#AT91C_PD25_TPK13
 ((Ë
AT91C_PIO_PD25
)

2628 
	#AT91C_PIO_PD26
 (() 1 << 26)

2629 
	#AT91C_PD26_TPK14
 ((Ë
AT91C_PIO_PD26
)

2630 
	#AT91C_PIO_PD27
 (() 1 << 27)

2631 
	#AT91C_PD27_TPK15
 ((Ë
AT91C_PIO_PD27
)

2632 
	#AT91C_PIO_PD3
 (() 1 << 3)

2633 
	#AT91C_PD3_ETX3
 ((Ë
AT91C_PIO_PD3
)

2634 
	#AT91C_PIO_PD4
 (() 1 << 4)

2635 
	#AT91C_PD4_ETXEN
 ((Ë
AT91C_PIO_PD4
)

2636 
	#AT91C_PIO_PD5
 (() 1 << 5)

2637 
	#AT91C_PD5_ETXER
 ((Ë
AT91C_PIO_PD5
)

2638 
	#AT91C_PIO_PD6
 (() 1 << 6)

2639 
	#AT91C_PD6_DTXD
 ((Ë
AT91C_PIO_PD6
)

2640 
	#AT91C_PIO_PD7
 (() 1 << 7)

2641 
	#AT91C_PD7_PCK0
 ((Ë
AT91C_PIO_PD7
)

2642 
	#AT91C_PD7_TSYNC
 ((Ë
AT91C_PIO_PD7
)

2643 
	#AT91C_PIO_PD8
 (() 1 << 8)

2644 
	#AT91C_PD8_PCK1
 ((Ë
AT91C_PIO_PD8
)

2645 
	#AT91C_PD8_TCLK
 ((Ë
AT91C_PIO_PD8
)

2646 
	#AT91C_PIO_PD9
 (() 1 << 9)

2647 
	#AT91C_PD9_PCK2
 ((Ë
AT91C_PIO_PD9
)

2648 
	#AT91C_PD9_TPS0
 ((Ë
AT91C_PIO_PD9
)

2649 

	)

2653 
	#AT91C_ID_FIQ
 (() 0)

2654 
	#AT91C_ID_SYS
 (() 1)

2655 
	#AT91C_ID_PIOA
 (() 2)

2656 
	#AT91C_ID_PIOB
 (() 3)

2657 
	#AT91C_ID_PIOC
 (() 4)

2658 
	#AT91C_ID_PIOD
 (() 5)

2659 
	#AT91C_ID_US0
 (() 6)

2660 
	#AT91C_ID_US1
 (() 7)

2661 
	#AT91C_ID_US2
 (() 8)

2662 
	#AT91C_ID_US3
 (() 9)

2663 
	#AT91C_ID_MCI
 (() 10)

2664 
	#AT91C_ID_UDP
 (() 11)

2665 
	#AT91C_ID_TWI
 (() 12)

2666 
	#AT91C_ID_SPI
 (() 13)

2667 
	#AT91C_ID_SSC0
 (() 14)

2668 
	#AT91C_ID_SSC1
 (() 15)

2669 
	#AT91C_ID_SSC2
 (() 16)

2670 
	#AT91C_ID_TC0
 (() 17)

2671 
	#AT91C_ID_TC1
 (() 18)

2672 
	#AT91C_ID_TC2
 (() 19)

2673 
	#AT91C_ID_TC3
 (() 20)

2674 
	#AT91C_ID_TC4
 (() 21)

2675 
	#AT91C_ID_TC5
 (() 22)

2676 
	#AT91C_ID_UHP
 (() 23)

2677 
	#AT91C_ID_EMAC
 (() 24)

2678 
	#AT91C_ID_IRQ0
 (() 25)

2679 
	#AT91C_ID_IRQ1
 (() 26)

2680 
	#AT91C_ID_IRQ2
 (() 27)

2681 
	#AT91C_ID_IRQ3
 (() 28)

2682 
	#AT91C_ID_IRQ4
 (() 29)

2683 
	#AT91C_ID_IRQ5
 (() 30)

2684 
	#AT91C_ID_IRQ6
 (() 31)

2685 

	)

2689 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2690 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2691 
	#AT91C_BASE_RTC
 ((
AT91PS_RTC
) 0xFFFFFE00)

2692 
	#AT91C_BASE_ST
 ((
AT91PS_ST
) 0xFFFFFD00)

2693 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2694 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2695 
	#AT91C_BASE_PIOD
 ((
AT91PS_PIO
) 0xFFFFFA00)

2696 
	#AT91C_BASE_PIOC
 ((
AT91PS_PIO
) 0xFFFFF800)

2697 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2698 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2699 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2700 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2701 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2702 
	#AT91C_BASE_PDC_SPI
 ((
AT91PS_PDC
) 0xFFFE0100)

2703 
	#AT91C_BASE_SPI
 ((
AT91PS_SPI
) 0xFFFE0000)

2704 
	#AT91C_BASE_PDC_SSC2
 ((
AT91PS_PDC
) 0xFFFD8100)

2705 
	#AT91C_BASE_SSC2
 ((
AT91PS_SSC
) 0xFFFD8000)

2706 
	#AT91C_BASE_PDC_SSC1
 ((
AT91PS_PDC
) 0xFFFD4100)

2707 
	#AT91C_BASE_SSC1
 ((
AT91PS_SSC
) 0xFFFD4000)

2708 
	#AT91C_BASE_PDC_SSC0
 ((
AT91PS_PDC
) 0xFFFD0100)

2709 
	#AT91C_BASE_SSC0
 ((
AT91PS_SSC
) 0xFFFD0000)

2710 
	#AT91C_BASE_PDC_US3
 ((
AT91PS_PDC
) 0xFFFCC100)

2711 
	#AT91C_BASE_US3
 ((
AT91PS_USART
) 0xFFFCC000)

2712 
	#AT91C_BASE_PDC_US2
 ((
AT91PS_PDC
) 0xFFFC8100)

2713 
	#AT91C_BASE_US2
 ((
AT91PS_USART
) 0xFFFC8000)

2714 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2715 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2716 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2717 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2718 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2719 
	#AT91C_BASE_PDC_MCI
 ((
AT91PS_PDC
) 0xFFFB4100)

2720 
	#AT91C_BASE_MCI
 ((
AT91PS_MCI
) 0xFFFB4000)

2721 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2722 
	#AT91C_BASE_TC5
 ((
AT91PS_TC
) 0xFFFA4080)

2723 
	#AT91C_BASE_TC4
 ((
AT91PS_TC
) 0xFFFA4040)

2724 
	#AT91C_BASE_TC3
 ((
AT91PS_TC
) 0xFFFA4000)

2725 
	#AT91C_BASE_TCB1
 ((
AT91PS_TCB
) 0xFFFA4080)

2726 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2727 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2728 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2729 
	#AT91C_BASE_TCB0
 ((
AT91PS_TCB
) 0xFFFA0000)

2730 
	#AT91C_BASE_UHP
 ((
AT91PS_UHP
) 0x00300000)

2731 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFBC000)

2732 
	#AT91C_BASE_EBI
 ((
AT91PS_EBI
) 0xFFFFFF60)

2733 
	#AT91C_BASE_SMC2
 ((
AT91PS_SMC2
) 0xFFFFFF70)

2734 
	#AT91C_BASE_SDRC
 ((
AT91PS_SDRC
) 0xFFFFFF90)

2735 
	#AT91C_BASE_BFC
 ((
AT91PS_BFC
) 0xFFFFFFC0)

2736 

	)

2740 
	#AT91C_ISRAM
 ((*) 0x00200000)

2741 
	#AT91C_ISRAM_SIZE
 (() 0x00004000)

2742 
	#AT91C_IROM
 ((*) 0x00100000)

2743 
	#AT91C_IROM_SIZE
 (() 0x00020000)

2744 

	)

	@linux/at91/image/dfboot/src/include/AT91RM9200_inc.h

49 
	#MC_RCR
 ( 0)

50 
	#MC_ASR
 ( 4)

51 
	#MC_AASR
 ( 8)

52 
	#MC_PUIA
 (16)

53 
	#MC_PUP
 (80)

54 
	#MC_PUER
 (84)

56 
	#AT91C_MC_RCB
 (0x1 << 0)

58 
	#AT91C_MC_UNDADD
 (0x1 << 0)

59 
	#AT91C_MC_MISADD
 (0x1 << 1)

60 
	#AT91C_MC_MPU
 (0x1 << 2)

61 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

62 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

63 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

64 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

65 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

66 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

67 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

68 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

69 
	#AT91C_MC_MST0
 (0x1 << 16)

70 
	#AT91C_MC_MST1
 (0x1 << 17)

71 
	#AT91C_MC_SVMST0
 (0x1 << 24)

72 
	#AT91C_MC_SVMST1
 (0x1 << 25)

74 
	#AT91C_MC_PROT
 (0x3 << 0)

75 
	#AT91C_MC_PROT_PNAUNA
 (0x0)

76 
	#AT91C_MC_PROT_PRWUNA
 (0x1)

77 
	#AT91C_MC_PROT_PRWURO
 (0x2)

78 
	#AT91C_MC_PROT_PRWURW
 (0x3)

79 
	#AT91C_MC_SIZE
 (0xF << 4)

80 
	#AT91C_MC_SIZE_1KB
 (0x0 << 4)

81 
	#AT91C_MC_SIZE_2KB
 (0x1 << 4)

82 
	#AT91C_MC_SIZE_4KB
 (0x2 << 4)

83 
	#AT91C_MC_SIZE_8KB
 (0x3 << 4)

84 
	#AT91C_MC_SIZE_16KB
 (0x4 << 4)

85 
	#AT91C_MC_SIZE_32KB
 (0x5 << 4)

86 
	#AT91C_MC_SIZE_64KB
 (0x6 << 4)

87 
	#AT91C_MC_SIZE_128KB
 (0x7 << 4)

88 
	#AT91C_MC_SIZE_256KB
 (0x8 << 4)

89 
	#AT91C_MC_SIZE_512KB
 (0x9 << 4)

90 
	#AT91C_MC_SIZE_1MB
 (0xA << 4)

91 
	#AT91C_MC_SIZE_2MB
 (0xB << 4)

92 
	#AT91C_MC_SIZE_4MB
 (0xC << 4)

93 
	#AT91C_MC_SIZE_8MB
 (0xD << 4)

94 
	#AT91C_MC_SIZE_16MB
 (0xE << 4)

95 
	#AT91C_MC_SIZE_64MB
 (0xF << 4)

96 
	#AT91C_MC_BA
 (0x3FFFF << 10)

99 
	#AT91C_MC_PUEB
 (0x1 << 0)

100 

	)

105 
	#RTC_CR
 ( 0)

106 
	#RTC_MR
 ( 4)

107 
	#RTC_TIMR
 ( 8)

108 
	#RTC_CALR
 (12)

109 
	#RTC_TIMALR
 (16)

110 
	#RTC_CALALR
 (20)

111 
	#RTC_SR
 (24)

112 
	#RTC_SCCR
 (28)

113 
	#RTC_IER
 (32)

114 
	#RTC_IDR
 (36)

115 
	#RTC_IMR
 (40)

116 
	#RTC_VER
 (44)

118 
	#AT91C_RTC_UPDTIM
 (0x1 << 0)

119 
	#AT91C_RTC_UPDCAL
 (0x1 << 1)

120 
	#AT91C_RTC_TIMEVSEL
 (0x3 << 8)

121 
	#AT91C_RTC_TIMEVSEL_MINUTE
 (0x0 << 8)

122 
	#AT91C_RTC_TIMEVSEL_HOUR
 (0x1 << 8)

123 
	#AT91C_RTC_TIMEVSEL_DAY24
 (0x2 << 8)

124 
	#AT91C_RTC_TIMEVSEL_DAY12
 (0x3 << 8)

125 
	#AT91C_RTC_CALEVSEL
 (0x3 << 16)

126 
	#AT91C_RTC_CALEVSEL_WEEK
 (0x0 << 16)

127 
	#AT91C_RTC_CALEVSEL_MONTH
 (0x1 << 16)

128 
	#AT91C_RTC_CALEVSEL_YEAR
 (0x2 << 16)

130 
	#AT91C_RTC_HRMOD
 (0x1 << 0)

132 
	#AT91C_RTC_SEC
 (0x7F << 0)

133 
	#AT91C_RTC_MIN
 (0x7F << 8)

134 
	#AT91C_RTC_HOUR
 (0x1F << 16)

135 
	#AT91C_RTC_AMPM
 (0x1 << 22)

137 
	#AT91C_RTC_CENT
 (0x3F << 0)

138 
	#AT91C_RTC_YEAR
 (0xFF << 8)

139 
	#AT91C_RTC_MONTH
 (0x1F << 16)

140 
	#AT91C_RTC_DAY
 (0x7 << 21)

141 
	#AT91C_RTC_DATE
 (0x3F << 24)

143 
	#AT91C_RTC_SECEN
 (0x1 << 7)

144 
	#AT91C_RTC_MINEN
 (0x1 << 15)

145 
	#AT91C_RTC_HOUREN
 (0x1 << 23)

147 
	#AT91C_RTC_MONTHEN
 (0x1 << 23)

148 
	#AT91C_RTC_DATEEN
 (0x1 << 31)

150 
	#AT91C_RTC_ACKUPD
 (0x1 << 0)

151 
	#AT91C_RTC_ALARM
 (0x1 << 1)

152 
	#AT91C_RTC_SECEV
 (0x1 << 2)

153 
	#AT91C_RTC_TIMEV
 (0x1 << 3)

154 
	#AT91C_RTC_CALEV
 (0x1 << 4)

160 
	#AT91C_RTC_NVTIM
 (0x1 << 0)

161 
	#AT91C_RTC_NVCAL
 (0x1 << 1)

162 
	#AT91C_RTC_NVTIMALR
 (0x1 << 2)

163 
	#AT91C_RTC_NVCALALR
 (0x1 << 3)

164 

	)

169 
	#ST_CR
 ( 0)

170 
	#ST_PIMR
 ( 4)

171 
	#ST_WDMR
 ( 8)

172 
	#ST_RTMR
 (12)

173 
	#ST_SR
 (16)

174 
	#ST_IER
 (20)

175 
	#ST_IDR
 (24)

176 
	#ST_IMR
 (28)

177 
	#ST_RTAR
 (32)

178 
	#ST_CRTR
 (36)

180 
	#AT91C_ST_WDRST
 (0x1 << 0)

182 
	#AT91C_ST_PIV
 (0xFFFF << 0)

184 
	#AT91C_ST_WDV
 (0xFFFF << 0)

185 
	#AT91C_ST_RSTEN
 (0x1 << 16)

186 
	#AT91C_ST_EXTEN
 (0x1 << 17)

188 
	#AT91C_ST_RTPRES
 (0xFFFF << 0)

190 
	#AT91C_ST_PITS
 (0x1 << 0)

191 
	#AT91C_ST_WDOVF
 (0x1 << 1)

192 
	#AT91C_ST_RTTINC
 (0x1 << 2)

193 
	#AT91C_ST_ALMS
 (0x1 << 3)

198 
	#AT91C_ST_ALMV
 (0xFFFFF << 0)

200 
	#AT91C_ST_CRTV
 (0xFFFFF << 0)

201 

	)

206 
	#PMC_SCER
 ( 0)

207 
	#PMC_SCDR
 ( 4)

208 
	#PMC_SCSR
 ( 8)

209 
	#PMC_PCER
 (16)

210 
	#PMC_PCDR
 (20)

211 
	#PMC_PCSR
 (24)

212 
	#PMC_MCKR
 (48)

213 
	#PMC_PCKR
 (64)

214 
	#PMC_IER
 (96)

215 
	#PMC_IDR
 (100)

216 
	#PMC_SR
 (104)

217 
	#PMC_IMR
 (108)

219 
	#AT91C_PMC_PCK
 (0x1 << 0)

220 
	#AT91C_PMC_UDP
 (0x1 << 1)

221 
	#AT91C_PMC_MCKUDP
 (0x1 << 2)

222 
	#AT91C_PMC_UHP
 (0x1 << 4)

223 
	#AT91C_PMC_PCK0
 (0x1 << 8)

224 
	#AT91C_PMC_PCK1
 (0x1 << 9)

225 
	#AT91C_PMC_PCK2
 (0x1 << 10)

226 
	#AT91C_PMC_PCK3
 (0x1 << 11)

227 
	#AT91C_PMC_PCK4
 (0x1 << 12)

228 
	#AT91C_PMC_PCK5
 (0x1 << 13)

229 
	#AT91C_PMC_PCK6
 (0x1 << 14)

230 
	#AT91C_PMC_PCK7
 (0x1 << 15)

234 
	#AT91C_PMC_CSS
 (0x3 << 0)

235 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

236 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

237 
	#AT91C_PMC_CSS_PLLA_CLK
 (0x2)

238 
	#AT91C_PMC_CSS_PLLB_CLK
 (0x3)

239 
	#AT91C_PMC_PRES
 (0x7 << 2)

240 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

241 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

242 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

243 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

244 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

245 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

246 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

247 
	#AT91C_PMC_MDIV
 (0x3 << 8)

248 
	#AT91C_PMC_MDIV_1
 (0x0 << 8)

249 
	#AT91C_PMC_MDIV_2
 (0x1 << 8)

250 
	#AT91C_PMC_MDIV_3
 (0x2 << 8)

251 
	#AT91C_PMC_MDIV_4
 (0x3 << 8)

254 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

255 
	#AT91C_PMC_LOCKA
 (0x1 << 1)

256 
	#AT91C_PMC_LOCKB
 (0x1 << 2)

257 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

258 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

259 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

260 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

261 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

262 
	#AT91C_PMC_PCK4RDY
 (0x1 << 12)

263 
	#AT91C_PMC_PCK5RDY
 (0x1 << 13)

264 
	#AT91C_PMC_PCK6RDY
 (0x1 << 14)

265 
	#AT91C_PMC_PCK7RDY
 (0x1 << 15)

269 

	)

274 
	#CKGR_MOR
 ( 0)

275 
	#CKGR_MCFR
 ( 4)

276 
	#CKGR_PLLAR
 ( 8)

277 
	#CKGR_PLLBR
 (12)

279 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

280 
	#AT91C_CKGR_OSCTEST
 (0x1 << 1)

281 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

283 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

284 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

286 
	#AT91C_CKGR_DIVA
 (0xFF << 0)

287 
	#AT91C_CKGR_DIVA_0
 (0x0)

288 
	#AT91C_CKGR_DIVA_BYPASS
 (0x1)

289 
	#AT91C_CKGR_PLLACOUNT
 (0x3F << 8)

290 
	#AT91C_CKGR_OUTA
 (0x3 << 14)

291 
	#AT91C_CKGR_OUTA_0
 (0x0 << 14)

292 
	#AT91C_CKGR_OUTA_1
 (0x1 << 14)

293 
	#AT91C_CKGR_OUTA_2
 (0x2 << 14)

294 
	#AT91C_CKGR_OUTA_3
 (0x3 << 14)

295 
	#AT91C_CKGR_MULA
 (0x7FF << 16)

296 
	#AT91C_CKGR_SRCA
 (0x1 << 29)

298 
	#AT91C_CKGR_DIVB
 (0xFF << 0)

299 
	#AT91C_CKGR_DIVB_0
 (0x0)

300 
	#AT91C_CKGR_DIVB_BYPASS
 (0x1)

301 
	#AT91C_CKGR_PLLBCOUNT
 (0x3F << 8)

302 
	#AT91C_CKGR_OUTB
 (0x3 << 14)

303 
	#AT91C_CKGR_OUTB_0
 (0x0 << 14)

304 
	#AT91C_CKGR_OUTB_1
 (0x1 << 14)

305 
	#AT91C_CKGR_OUTB_2
 (0x2 << 14)

306 
	#AT91C_CKGR_OUTB_3
 (0x3 << 14)

307 
	#AT91C_CKGR_MULB
 (0x7FF << 16)

308 
	#AT91C_CKGR_USB_96M
 (0x1 << 28)

309 
	#AT91C_CKGR_USB_PLL
 (0x1 << 29)

310 

	)

315 
	#PIO_PER
 ( 0)

316 
	#PIO_PDR
 ( 4)

317 
	#PIO_PSR
 ( 8)

318 
	#PIO_OER
 (16)

319 
	#PIO_ODR
 (20)

320 
	#PIO_OSR
 (24)

321 
	#PIO_IFER
 (32)

322 
	#PIO_IFDR
 (36)

323 
	#PIO_IFSR
 (40)

324 
	#PIO_SODR
 (48)

325 
	#PIO_CODR
 (52)

326 
	#PIO_ODSR
 (56)

327 
	#PIO_PDSR
 (60)

328 
	#PIO_IER
 (64)

329 
	#PIO_IDR
 (68)

330 
	#PIO_IMR
 (72)

331 
	#PIO_ISR
 (76)

332 
	#PIO_MDER
 (80)

333 
	#PIO_MDDR
 (84)

334 
	#PIO_MDSR
 (88)

335 
	#PIO_PPUDR
 (96)

336 
	#PIO_PPUER
 (100)

337 
	#PIO_PPUSR
 (104)

338 
	#PIO_ASR
 (112)

339 
	#PIO_BSR
 (116)

340 
	#PIO_ABSR
 (120)

341 
	#PIO_OWER
 (160)

342 
	#PIO_OWDR
 (164)

343 
	#PIO_OWSR
 (168)

344 

	)

349 
	#DBGU_CR
 ( 0)

350 
	#DBGU_MR
 ( 4)

351 
	#DBGU_IER
 ( 8)

352 
	#DBGU_IDR
 (12)

353 
	#DBGU_IMR
 (16)

354 
	#DBGU_CSR
 (20)

355 
	#DBGU_RHR
 (24)

356 
	#DBGU_THR
 (28)

357 
	#DBGU_BRGR
 (32)

358 
	#DBGU_C1R
 (64)

359 
	#DBGU_C2R
 (68)

360 
	#DBGU_FNTR
 (72)

361 
	#DBGU_RPR
 (256)

362 
	#DBGU_RCR
 (260)

363 
	#DBGU_TPR
 (264)

364 
	#DBGU_TCR
 (268)

365 
	#DBGU_RNPR
 (272)

366 
	#DBGU_RNCR
 (276)

367 
	#DBGU_TNPR
 (280)

368 
	#DBGU_TNCR
 (284)

369 
	#DBGU_PTCR
 (288)

370 
	#DBGU_PTSR
 (292)

372 
	#AT91C_US_RSTRX
 (0x1 << 2)

373 
	#AT91C_US_RSTTX
 (0x1 << 3)

374 
	#AT91C_US_RXEN
 (0x1 << 4)

375 
	#AT91C_US_RXDIS
 (0x1 << 5)

376 
	#AT91C_US_TXEN
 (0x1 << 6)

377 
	#AT91C_US_TXDIS
 (0x1 << 7)

379 
	#AT91C_US_PAR
 (0x7 << 9)

380 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

381 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

382 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

383 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

384 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

385 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

386 
	#AT91C_US_CHMODE
 (0x3 << 14)

387 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

388 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

389 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

390 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

392 
	#AT91C_US_RXRDY
 (0x1 << 0)

393 
	#AT91C_US_TXRDY
 (0x1 << 1)

394 
	#AT91C_US_ENDRX
 (0x1 << 3)

395 
	#AT91C_US_ENDTX
 (0x1 << 4)

396 
	#AT91C_US_OVRE
 (0x1 << 5)

397 
	#AT91C_US_FRAME
 (0x1 << 6)

398 
	#AT91C_US_PARE
 (0x1 << 7)

399 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

400 
	#AT91C_US_TXBUFE
 (0x1 << 11)

401 
	#AT91C_US_RXBUFF
 (0x1 << 12)

402 
	#AT91C_US_COMM_TX
 (0x1 << 30)

403 
	#AT91C_US_COMM_RX
 (0x1 << 31)

408 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

409 

	)

414 
	#PDC_RPR
 ( 0)

415 
	#PDC_RCR
 ( 4)

416 
	#PDC_TPR
 ( 8)

417 
	#PDC_TCR
 (12)

418 
	#PDC_RNPR
 (16)

419 
	#PDC_RNCR
 (20)

420 
	#PDC_TNPR
 (24)

421 
	#PDC_TNCR
 (28)

422 
	#PDC_PTCR
 (32)

423 
	#PDC_PTSR
 (36)

425 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

426 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

427 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

428 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

430 

	)

435 
	#AIC_SMR
 ( 0)

436 
	#AIC_SVR
 (128)

437 
	#AIC_IVR
 (256)

438 
	#AIC_FVR
 (260)

439 
	#AIC_ISR
 (264)

440 
	#AIC_IPR
 (268)

441 
	#AIC_IMR
 (272)

442 
	#AIC_CISR
 (276)

443 
	#AIC_IECR
 (288)

444 
	#AIC_IDCR
 (292)

445 
	#AIC_ICCR
 (296)

446 
	#AIC_ISCR
 (300)

447 
	#AIC_EOICR
 (304)

448 
	#AIC_SPU
 (308)

449 
	#AIC_DCR
 (312)

450 
	#AIC_FFER
 (320)

451 
	#AIC_FFDR
 (324)

452 
	#AIC_FFSR
 (328)

454 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

455 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

456 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

457 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

458 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (0x0 << 5)

459 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (0x1 << 5)

460 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (0x2 << 5)

461 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (0x3 << 5)

463 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

464 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

466 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

467 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

468 

	)

473 
	#SPI_CR
 ( 0)

474 
	#SPI_MR
 ( 4)

475 
	#SPI_RDR
 ( 8)

476 
	#SPI_TDR
 (12)

477 
	#SPI_SR
 (16)

478 
	#SPI_IER
 (20)

479 
	#SPI_IDR
 (24)

480 
	#SPI_IMR
 (28)

481 
	#SPI_CSR
 (48)

482 
	#SPI_RPR
 (256)

483 
	#SPI_RCR
 (260)

484 
	#SPI_TPR
 (264)

485 
	#SPI_TCR
 (268)

486 
	#SPI_RNPR
 (272)

487 
	#SPI_RNCR
 (276)

488 
	#SPI_TNPR
 (280)

489 
	#SPI_TNCR
 (284)

490 
	#SPI_PTCR
 (288)

491 
	#SPI_PTSR
 (292)

493 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

494 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

495 
	#AT91C_SPI_SWRST
 (0x1 << 7)

497 
	#AT91C_SPI_MSTR
 (0x1 << 0)

498 
	#AT91C_SPI_PS
 (0x1 << 1)

499 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

500 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

501 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

502 
	#AT91C_SPI_DIV32
 (0x1 << 3)

503 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

504 
	#AT91C_SPI_LLB
 (0x1 << 7)

505 
	#AT91C_SPI_PCS
 (0xF << 16)

506 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

508 
	#AT91C_SPI_RD
 (0xFFFF << 0)

509 
	#AT91C_SPI_RPCS
 (0xF << 16)

511 
	#AT91C_SPI_TD
 (0xFFFF << 0)

512 
	#AT91C_SPI_TPCS
 (0xF << 16)

514 
	#AT91C_SPI_RDRF
 (0x1 << 0)

515 
	#AT91C_SPI_TDRE
 (0x1 << 1)

516 
	#AT91C_SPI_MODF
 (0x1 << 2)

517 
	#AT91C_SPI_OVRES
 (0x1 << 3)

518 
	#AT91C_SPI_SPENDRX
 (0x1 << 4)

519 
	#AT91C_SPI_SPENDTX
 (0x1 << 5)

520 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

521 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

522 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

527 
	#AT91C_SPI_CPOL
 (0x1 << 0)

528 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

529 
	#AT91C_SPI_BITS
 (0xF << 4)

530 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

531 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

532 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

533 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

534 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

535 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

536 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

537 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

538 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

539 
	#AT91C_SPI_SCBR
 (0xFF << 8)

540 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

541 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

542 

	)

547 
	#SSC_CR
 ( 0)

548 
	#SSC_CMR
 ( 4)

549 
	#SSC_RCMR
 (16)

550 
	#SSC_RFMR
 (20)

551 
	#SSC_TCMR
 (24)

552 
	#SSC_TFMR
 (28)

553 
	#SSC_RHR
 (32)

554 
	#SSC_THR
 (36)

555 
	#SSC_RSHR
 (48)

556 
	#SSC_TSHR
 (52)

557 
	#SSC_RC0R
 (56)

558 
	#SSC_RC1R
 (60)

559 
	#SSC_SR
 (64)

560 
	#SSC_IER
 (68)

561 
	#SSC_IDR
 (72)

562 
	#SSC_IMR
 (76)

563 
	#SSC_RPR
 (256)

564 
	#SSC_RCR
 (260)

565 
	#SSC_TPR
 (264)

566 
	#SSC_TCR
 (268)

567 
	#SSC_RNPR
 (272)

568 
	#SSC_RNCR
 (276)

569 
	#SSC_TNPR
 (280)

570 
	#SSC_TNCR
 (284)

571 
	#SSC_PTCR
 (288)

572 
	#SSC_PTSR
 (292)

574 
	#AT91C_SSC_RXEN
 (0x1 << 0)

575 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

576 
	#AT91C_SSC_TXEN
 (0x1 << 8)

577 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

578 
	#AT91C_SSC_SWRST
 (0x1 << 15)

580 
	#AT91C_SSC_CKS
 (0x3 << 0)

581 
	#AT91C_SSC_CKS_DIV
 (0x0)

582 
	#AT91C_SSC_CKS_TK
 (0x1)

583 
	#AT91C_SSC_CKS_RK
 (0x2)

584 
	#AT91C_SSC_CKO
 (0x7 << 2)

585 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

586 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

587 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

588 
	#AT91C_SSC_CKI
 (0x1 << 5)

589 
	#AT91C_SSC_CKG
 (0x3 << 6)

590 
	#AT91C_SSC_CKG_NONE
 (0x0 << 6)

591 
	#AT91C_SSC_CKG_LOW
 (0x1 << 6)

592 
	#AT91C_SSC_CKG_HIGH
 (0x2 << 6)

593 
	#AT91C_SSC_START
 (0xF << 8)

594 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

595 
	#AT91C_SSC_START_TX
 (0x1 << 8)

596 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

597 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

598 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

599 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

600 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

601 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

602 
	#AT91C_SSC_START_0
 (0x8 << 8)

603 
	#AT91C_SSC_STOP
 (0x1 << 12)

604 
	#AT91C_SSC_STTOUT
 (0x1 << 15)

605 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

606 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

608 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

609 
	#AT91C_SSC_LOOP
 (0x1 << 5)

610 
	#AT91C_SSC_MSBF
 (0x1 << 7)

611 
	#AT91C_SSC_DATNB
 (0xF << 8)

612 
	#AT91C_SSC_FSLEN
 (0xF << 16)

613 
	#AT91C_SSC_FSOS
 (0x7 << 20)

614 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

615 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

616 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

617 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

618 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

619 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

620 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

623 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

624 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

626 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

627 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

628 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

629 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

630 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

631 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

632 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

633 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

634 
	#AT91C_SSC_CP0
 (0x1 << 8)

635 
	#AT91C_SSC_CP1
 (0x1 << 9)

636 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

637 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

638 
	#AT91C_SSC_TXENA
 (0x1 << 16)

639 
	#AT91C_SSC_RXENA
 (0x1 << 17)

643 

	)

648 
	#US_CR
 ( 0)

649 
	#US_MR
 ( 4)

650 
	#US_IER
 ( 8)

651 
	#US_IDR
 (12)

652 
	#US_IMR
 (16)

653 
	#US_CSR
 (20)

654 
	#US_RHR
 (24)

655 
	#US_THR
 (28)

656 
	#US_BRGR
 (32)

657 
	#US_RTOR
 (36)

658 
	#US_TTGR
 (40)

659 
	#US_FIDI
 (64)

660 
	#US_NER
 (68)

661 
	#US_XXR
 (72)

662 
	#US_IF
 (76)

663 
	#US_RPR
 (256)

664 
	#US_RCR
 (260)

665 
	#US_TPR
 (264)

666 
	#US_TCR
 (268)

667 
	#US_RNPR
 (272)

668 
	#US_RNCR
 (276)

669 
	#US_TNPR
 (280)

670 
	#US_TNCR
 (284)

671 
	#US_PTCR
 (288)

672 
	#US_PTSR
 (292)

674 
	#AT91C_US_RSTSTA
 (0x1 << 8)

675 
	#AT91C_US_STTBRK
 (0x1 << 9)

676 
	#AT91C_US_STPBRK
 (0x1 << 10)

677 
	#AT91C_US_STTTO
 (0x1 << 11)

678 
	#AT91C_US_SENDA
 (0x1 << 12)

679 
	#AT91C_US_RSTIT
 (0x1 << 13)

680 
	#AT91C_US_RSTNACK
 (0x1 << 14)

681 
	#AT91C_US_RETTO
 (0x1 << 15)

682 
	#AT91C_US_DTREN
 (0x1 << 16)

683 
	#AT91C_US_DTRDIS
 (0x1 << 17)

684 
	#AT91C_US_RTSEN
 (0x1 << 18)

685 
	#AT91C_US_RTSDIS
 (0x1 << 19)

687 
	#AT91C_US_USMODE
 (0xF << 0)

688 
	#AT91C_US_USMODE_NORMAL
 (0x0)

689 
	#AT91C_US_USMODE_RS485
 (0x1)

690 
	#AT91C_US_USMODE_HWHSH
 (0x2)

691 
	#AT91C_US_USMODE_MODEM
 (0x3)

692 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

693 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

694 
	#AT91C_US_USMODE_IRDA
 (0x8)

695 
	#AT91C_US_USMODE_SWHSH
 (0xC)

696 
	#AT91C_US_CLKS
 (0x3 << 4)

697 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

698 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

699 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

700 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

701 
	#AT91C_US_CHRL
 (0x3 << 6)

702 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

703 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

704 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

705 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

706 
	#AT91C_US_SYNC
 (0x1 << 8)

707 
	#AT91C_US_NBSTOP
 (0x3 << 12)

708 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

709 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

710 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

711 
	#AT91C_US_MSBF
 (0x1 << 16)

712 
	#AT91C_US_MODE9
 (0x1 << 17)

713 
	#AT91C_US_CKLO
 (0x1 << 18)

714 
	#AT91C_US_OVER
 (0x1 << 19)

715 
	#AT91C_US_INACK
 (0x1 << 20)

716 
	#AT91C_US_DSNACK
 (0x1 << 21)

717 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

718 
	#AT91C_US_FILTER
 (0x1 << 28)

720 
	#AT91C_US_RXBRK
 (0x1 << 2)

721 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

722 
	#AT91C_US_ITERATION
 (0x1 << 10)

723 
	#AT91C_US_NACK
 (0x1 << 13)

724 
	#AT91C_US_RIIC
 (0x1 << 16)

725 
	#AT91C_US_DSRIC
 (0x1 << 17)

726 
	#AT91C_US_DCDIC
 (0x1 << 18)

727 
	#AT91C_US_CTSIC
 (0x1 << 19)

731 
	#AT91C_US_RI
 (0x1 << 20)

732 
	#AT91C_US_DSR
 (0x1 << 21)

733 
	#AT91C_US_DCD
 (0x1 << 22)

734 
	#AT91C_US_CTS
 (0x1 << 23)

735 

	)

740 
	#TWI_CR
 ( 0)

741 
	#TWI_MMR
 ( 4)

742 
	#TWI_SMR
 ( 8)

743 
	#TWI_IADR
 (12)

744 
	#TWI_CWGR
 (16)

745 
	#TWI_SR
 (32)

746 
	#TWI_IER
 (36)

747 
	#TWI_IDR
 (40)

748 
	#TWI_IMR
 (44)

749 
	#TWI_RHR
 (48)

750 
	#TWI_THR
 (52)

752 
	#AT91C_TWI_START
 (0x1 << 0)

753 
	#AT91C_TWI_STOP
 (0x1 << 1)

754 
	#AT91C_TWI_MSEN
 (0x1 << 2)

755 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

756 
	#AT91C_TWI_SVEN
 (0x1 << 4)

757 
	#AT91C_TWI_SVDIS
 (0x1 << 5)

758 
	#AT91C_TWI_SWRST
 (0x1 << 7)

760 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

761 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

762 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

763 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

764 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

765 
	#AT91C_TWI_MREAD
 (0x1 << 12)

766 
	#AT91C_TWI_DADR
 (0x7F << 16)

768 
	#AT91C_TWI_SADR
 (0x7F << 16)

770 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

771 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

772 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

774 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

775 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

776 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

777 
	#AT91C_TWI_SVREAD
 (0x1 << 3)

778 
	#AT91C_TWI_SVACC
 (0x1 << 4)

779 
	#AT91C_TWI_GCACC
 (0x1 << 5)

780 
	#AT91C_TWI_OVRE
 (0x1 << 6)

781 
	#AT91C_TWI_UNRE
 (0x1 << 7)

782 
	#AT91C_TWI_NACK
 (0x1 << 8)

783 
	#AT91C_TWI_ARBLST
 (0x1 << 9)

787 

	)

792 
	#MCI_CR
 ( 0)

793 
	#MCI_MR
 ( 4)

794 
	#MCI_DTOR
 ( 8)

795 
	#MCI_SDCR
 (12)

796 
	#MCI_ARGR
 (16)

797 
	#MCI_CMDR
 (20)

798 
	#MCI_RSPR
 (32)

799 
	#MCI_RDR
 (48)

800 
	#MCI_TDR
 (52)

801 
	#MCI_SR
 (64)

802 
	#MCI_IER
 (68)

803 
	#MCI_IDR
 (72)

804 
	#MCI_IMR
 (76)

805 
	#MCI_RPR
 (256)

806 
	#MCI_RCR
 (260)

807 
	#MCI_TPR
 (264)

808 
	#MCI_TCR
 (268)

809 
	#MCI_RNPR
 (272)

810 
	#MCI_RNCR
 (276)

811 
	#MCI_TNPR
 (280)

812 
	#MCI_TNCR
 (284)

813 
	#MCI_PTCR
 (288)

814 
	#MCI_PTSR
 (292)

816 
	#AT91C_MCI_MCIEN
 (0x1 << 0)

817 
	#AT91C_MCI_MCIDIS
 (0x1 << 1)

818 
	#AT91C_MCI_PWSEN
 (0x1 << 2)

819 
	#AT91C_MCI_PWSDIS
 (0x1 << 3)

821 
	#AT91C_MCI_CLKDIV
 (0x1 << 0)

822 
	#AT91C_MCI_PWSDIV
 (0x1 << 8)

823 
	#AT91C_MCI_PDCPADV
 (0x1 << 14)

824 
	#AT91C_MCI_PDCMODE
 (0x1 << 15)

825 
	#AT91C_MCI_BLKLEN
 (0x1 << 18)

827 
	#AT91C_MCI_DTOCYC
 (0x1 << 0)

828 
	#AT91C_MCI_DTOMUL
 (0x7 << 4)

829 
	#AT91C_MCI_DTOMUL_1
 (0x0 << 4)

830 
	#AT91C_MCI_DTOMUL_16
 (0x1 << 4)

831 
	#AT91C_MCI_DTOMUL_128
 (0x2 << 4)

832 
	#AT91C_MCI_DTOMUL_256
 (0x3 << 4)

833 
	#AT91C_MCI_DTOMUL_1024
 (0x4 << 4)

834 
	#AT91C_MCI_DTOMUL_4096
 (0x5 << 4)

835 
	#AT91C_MCI_DTOMUL_65536
 (0x6 << 4)

836 
	#AT91C_MCI_DTOMUL_1048576
 (0x7 << 4)

838 
	#AT91C_MCI_SCDSEL
 (0x1 << 0)

839 
	#AT91C_MCI_SCDBUS
 (0x1 << 7)

841 
	#AT91C_MCI_CMDNB
 (0x1F << 0)

842 
	#AT91C_MCI_RSPTYP
 (0x3 << 6)

843 
	#AT91C_MCI_RSPTYP_NO
 (0x0 << 6)

844 
	#AT91C_MCI_RSPTYP_48
 (0x1 << 6)

845 
	#AT91C_MCI_RSPTYP_136
 (0x2 << 6)

846 
	#AT91C_MCI_SPCMD
 (0x7 << 8)

847 
	#AT91C_MCI_SPCMD_NONE
 (0x0 << 8)

848 
	#AT91C_MCI_SPCMD_INIT
 (0x1 << 8)

849 
	#AT91C_MCI_SPCMD_SYNC
 (0x2 << 8)

850 
	#AT91C_MCI_SPCMD_IT_CMD
 (0x4 << 8)

851 
	#AT91C_MCI_SPCMD_IT_REP
 (0x5 << 8)

852 
	#AT91C_MCI_OPDCMD
 (0x1 << 11)

853 
	#AT91C_MCI_MAXLAT
 (0x1 << 12)

854 
	#AT91C_MCI_TRCMD
 (0x3 << 16)

855 
	#AT91C_MCI_TRCMD_NO
 (0x0 << 16)

856 
	#AT91C_MCI_TRCMD_START
 (0x1 << 16)

857 
	#AT91C_MCI_TRCMD_STOP
 (0x2 << 16)

858 
	#AT91C_MCI_TRDIR
 (0x1 << 18)

859 
	#AT91C_MCI_TRTYP
 (0x3 << 19)

860 
	#AT91C_MCI_TRTYP_BLOCK
 (0x0 << 19)

861 
	#AT91C_MCI_TRTYP_MULTIPLE
 (0x1 << 19)

862 
	#AT91C_MCI_TRTYP_STREAM
 (0x2 << 19)

864 
	#AT91C_MCI_CMDRDY
 (0x1 << 0)

865 
	#AT91C_MCI_RXRDY
 (0x1 << 1)

866 
	#AT91C_MCI_TXRDY
 (0x1 << 2)

867 
	#AT91C_MCI_BLKE
 (0x1 << 3)

868 
	#AT91C_MCI_DTIP
 (0x1 << 4)

869 
	#AT91C_MCI_NOTBUSY
 (0x1 << 5)

870 
	#AT91C_MCI_ENDRX
 (0x1 << 6)

871 
	#AT91C_MCI_ENDTX
 (0x1 << 7)

872 
	#AT91C_MCI_RXBUFF
 (0x1 << 14)

873 
	#AT91C_MCI_TXBUFE
 (0x1 << 15)

874 
	#AT91C_MCI_RINDE
 (0x1 << 16)

875 
	#AT91C_MCI_RDIRE
 (0x1 << 17)

876 
	#AT91C_MCI_RCRCE
 (0x1 << 18)

877 
	#AT91C_MCI_RENDE
 (0x1 << 19)

878 
	#AT91C_MCI_RTOE
 (0x1 << 20)

879 
	#AT91C_MCI_DCRCE
 (0x1 << 21)

880 
	#AT91C_MCI_DTOE
 (0x1 << 22)

881 
	#AT91C_MCI_OVRE
 (0x1 << 30)

882 
	#AT91C_MCI_UNRE
 (0x1 << 31)

886 

	)

891 
	#UDP_NUM
 ( 0)

892 
	#UDP_GLBSTATE
 ( 4)

893 
	#UDP_FADDR
 ( 8)

894 
	#UDP_IER
 (16)

895 
	#UDP_IDR
 (20)

896 
	#UDP_IMR
 (24)

897 
	#UDP_ISR
 (28)

898 
	#UDP_ICR
 (32)

899 
	#UDP_RSTEP
 (40)

900 
	#UDP_CSR
 (48)

901 
	#UDP_FDR
 (80)

903 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

904 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

905 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

907 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

908 
	#AT91C_UDP_CONFG
 (0x1 << 1)

909 
	#AT91C_UDP_RMWUPE
 (0x1 << 2)

910 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

912 
	#AT91C_UDP_FADD
 (0xFF << 0)

913 
	#AT91C_UDP_FEN
 (0x1 << 8)

915 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

916 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

917 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

918 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

919 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

920 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

921 
	#AT91C_UDP_EPINT6
 (0x1 << 6)

922 
	#AT91C_UDP_EPINT7
 (0x1 << 7)

923 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

924 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

925 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

926 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

927 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

931 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

934 
	#AT91C_UDP_EP0
 (0x1 << 0)

935 
	#AT91C_UDP_EP1
 (0x1 << 1)

936 
	#AT91C_UDP_EP2
 (0x1 << 2)

937 
	#AT91C_UDP_EP3
 (0x1 << 3)

938 
	#AT91C_UDP_EP4
 (0x1 << 4)

939 
	#AT91C_UDP_EP5
 (0x1 << 5)

940 
	#AT91C_UDP_EP6
 (0x1 << 6)

941 
	#AT91C_UDP_EP7
 (0x1 << 7)

943 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

944 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

945 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

946 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

947 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

948 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

949 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

950 
	#AT91C_UDP_DIR
 (0x1 << 7)

951 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

952 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

953 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

954 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

955 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

956 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

957 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

958 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

959 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

960 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

961 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

962 

	)

967 
	#TC_CCR
 ( 0)

968 
	#TC_CMR
 ( 4)

969 
	#TC_CV
 (16)

970 
	#TC_RA
 (20)

971 
	#TC_RB
 (24)

972 
	#TC_RC
 (28)

973 
	#TC_SR
 (32)

974 
	#TC_IER
 (36)

975 
	#TC_IDR
 (40)

976 
	#TC_IMR
 (44)

978 
	#AT91C_TC_CLKEN
 (0x1 << 0)

979 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

980 
	#AT91C_TC_SWTRG
 (0x1 << 2)

982 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

983 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

984 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

985 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

986 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

987 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

988 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

989 
	#AT91C_TC_EEVT
 (0x3 << 10)

990 
	#AT91C_TC_EEVT_NONE
 (0x0 << 10)

991 
	#AT91C_TC_EEVT_RISING
 (0x1 << 10)

992 
	#AT91C_TC_EEVT_FALLING
 (0x2 << 10)

993 
	#AT91C_TC_EEVT_BOTH
 (0x3 << 10)

994 
	#AT91C_TC_ENETRG
 (0x1 << 12)

995 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

996 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

997 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

998 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

999 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

1000 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

1001 
	#AT91C_TC_WAVE
 (0x1 << 15)

1002 
	#AT91C_TC_ACPA
 (0x3 << 16)

1003 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

1004 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

1005 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

1006 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

1007 
	#AT91C_TC_ACPC
 (0x3 << 18)

1008 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

1009 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

1010 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

1011 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

1012 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1013 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1014 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1015 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1016 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1017 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1018 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1019 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1020 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1021 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1022 
	#AT91C_TC_BCPB
 (0x3 << 24)

1023 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1024 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1025 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1026 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1027 
	#AT91C_TC_BCPC
 (0x3 << 26)

1028 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1029 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1030 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1031 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1032 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1033 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1034 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1035 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1036 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1037 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1038 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1039 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1040 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1041 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1043 
	#AT91C_TC_COVFS
 (0x1 << 0)

1044 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1045 
	#AT91C_TC_CPAS
 (0x1 << 2)

1046 
	#AT91C_TC_CPBS
 (0x1 << 3)

1047 
	#AT91C_TC_CPCS
 (0x1 << 4)

1048 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1049 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1050 
	#AT91C_TC_ETRCS
 (0x1 << 7)

1051 
	#AT91C_TC_ETRGS
 (0x1 << 16)

1052 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1053 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1057 

	)

1062 
	#TCB_TC0
 ( 0)

1063 
	#TCB_TC1
 (64)

1064 
	#TCB_TC2
 (128)

1065 
	#TCB_BCR
 (192)

1066 
	#TCB_BMR
 (196)

1068 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1070 
	#AT91C_TCB_TC0XC0S
 (0x1 << 0)

1071 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1072 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1073 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1074 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1075 
	#AT91C_TCB_TC1XC1S
 (0x1 << 2)

1076 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1077 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1078 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1079 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1080 
	#AT91C_TCB_TC2XC2S
 (0x1 << 4)

1081 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1082 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1083 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1084 
	#AT91C_TCB_TC2XC2S_TIOA2
 (0x3 << 4)

1085 

	)

1090 
	#UHP_HcRevisi⁄
 ( 0)

1091 
	#UHP_HcC⁄åﬁ
 ( 4)

1092 
	#UHP_HcComm™dSètus
 ( 8)

1093 
	#UHP_HcI¡îru±Sètus
 (12)

1094 
	#UHP_HcI¡îru±E«bÀ
 (16)

1095 
	#UHP_HcI¡îru±DißbÀ
 (20)

1096 
	#UHP_HcHCCA
 (24)

1097 
	#UHP_HcPîiodCuºítED
 (28)

1098 
	#UHP_HcC⁄åﬁHódED
 (32)

1099 
	#UHP_HcC⁄åﬁCuºítED
 (36)

1100 
	#UHP_HcBulkHódED
 (40)

1101 
	#UHP_HcBulkCuºítED
 (44)

1102 
	#UHP_HcBulkD⁄eHód
 (48)

1103 
	#UHP_HcFmI¡îvÆ
 (52)

1104 
	#UHP_HcFmRemaöög
 (56)

1105 
	#UHP_HcFmNumbî
 (60)

1106 
	#UHP_HcPîiodicSèπ
 (64)

1107 
	#UHP_HcLSThªshﬁd
 (68)

1108 
	#UHP_HcRhDes¸ùt‹A
 (72)

1109 
	#UHP_HcRhDes¸ùt‹B
 (76)

1110 
	#UHP_HcRhSètus
 (80)

1111 
	#UHP_HcRhP‹tSètus
 (84)

1112 

	)

1117 
	#EMAC_CTL
 ( 0)

1118 
	#EMAC_CFG
 ( 4)

1119 
	#EMAC_SR
 ( 8)

1120 
	#EMAC_TAR
 (12)

1121 
	#EMAC_TCR
 (16)

1122 
	#EMAC_TSR
 (20)

1123 
	#EMAC_RBQP
 (24)

1124 
	#EMAC_RSR
 (32)

1125 
	#EMAC_ISR
 (36)

1126 
	#EMAC_IER
 (40)

1127 
	#EMAC_IDR
 (44)

1128 
	#EMAC_IMR
 (48)

1129 
	#EMAC_MAN
 (52)

1130 
	#EMAC_FRA
 (64)

1131 
	#EMAC_SCOL
 (68)

1132 
	#EMAC_MCOL
 (72)

1133 
	#EMAC_OK
 (76)

1134 
	#EMAC_SEQE
 (80)

1135 
	#EMAC_ALE
 (84)

1136 
	#EMAC_DTE
 (88)

1137 
	#EMAC_LCOL
 (92)

1138 
	#EMAC_ECOL
 (96)

1139 
	#EMAC_CSE
 (100)

1140 
	#EMAC_TUE
 (104)

1141 
	#EMAC_CDE
 (108)

1142 
	#EMAC_ELR
 (112)

1143 
	#EMAC_RJB
 (116)

1144 
	#EMAC_USF
 (120)

1145 
	#EMAC_SQEE
 (124)

1146 
	#EMAC_DRFC
 (128)

1147 
	#EMAC_HSH
 (144)

1148 
	#EMAC_HSL
 (148)

1149 
	#EMAC_SA1L
 (152)

1150 
	#EMAC_SA1H
 (156)

1151 
	#EMAC_SA2L
 (160)

1152 
	#EMAC_SA2H
 (164)

1153 
	#EMAC_SA3L
 (168)

1154 
	#EMAC_SA3H
 (172)

1155 
	#EMAC_SA4L
 (176)

1156 
	#EMAC_SA4H
 (180)

1158 
	#AT91C_EMAC_LB
 (0x1 << 0)

1159 
	#AT91C_EMAC_LBL
 (0x1 << 1)

1160 
	#AT91C_EMAC_RE
 (0x1 << 2)

1161 
	#AT91C_EMAC_TE
 (0x1 << 3)

1162 
	#AT91C_EMAC_MPE
 (0x1 << 4)

1163 
	#AT91C_EMAC_CSR
 (0x1 << 5)

1164 
	#AT91C_EMAC_ISR
 (0x1 << 6)

1165 
	#AT91C_EMAC_WES
 (0x1 << 7)

1166 
	#AT91C_EMAC_BP
 (0x1 << 8)

1168 
	#AT91C_EMAC_SPD
 (0x1 << 0)

1169 
	#AT91C_EMAC_FD
 (0x1 << 1)

1170 
	#AT91C_EMAC_BR
 (0x1 << 2)

1171 
	#AT91C_EMAC_CAF
 (0x1 << 4)

1172 
	#AT91C_EMAC_NBC
 (0x1 << 5)

1173 
	#AT91C_EMAC_MTI
 (0x1 << 6)

1174 
	#AT91C_EMAC_UNI
 (0x1 << 7)

1175 
	#AT91C_EMAC_BIG
 (0x1 << 8)

1176 
	#AT91C_EMAC_EAE
 (0x1 << 9)

1177 
	#AT91C_EMAC_CLK
 (0x3 << 10)

1178 
	#AT91C_EMAC_CLK_HCLK_8
 (0x0 << 10)

1179 
	#AT91C_EMAC_CLK_HCLK_16
 (0x1 << 10)

1180 
	#AT91C_EMAC_CLK_HCLK_32
 (0x2 << 10)

1181 
	#AT91C_EMAC_CLK_HCLK_64
 (0x3 << 10)

1182 
	#AT91C_EMAC_RTY
 (0x1 << 12)

1183 
	#AT91C_EMAC_RMII
 (0x1 << 13)

1185 
	#AT91C_EMAC_MDIO
 (0x1 << 1)

1186 
	#AT91C_EMAC_IDLE
 (0x1 << 2)

1188 
	#AT91C_EMAC_LEN
 (0x7FF << 0)

1189 
	#AT91C_EMAC_NCRC
 (0x1 << 15)

1191 
	#AT91C_EMAC_OVR
 (0x1 << 0)

1192 
	#AT91C_EMAC_COL
 (0x1 << 1)

1193 
	#AT91C_EMAC_RLE
 (0x1 << 2)

1194 
	#AT91C_EMAC_TXIDLE
 (0x1 << 3)

1195 
	#AT91C_EMAC_BNQ
 (0x1 << 4)

1196 
	#AT91C_EMAC_COMP
 (0x1 << 5)

1197 
	#AT91C_EMAC_UND
 (0x1 << 6)

1199 
	#AT91C_EMAC_BNA
 (0x1 << 0)

1200 
	#AT91C_EMAC_REC
 (0x1 << 1)

1202 
	#AT91C_EMAC_DONE
 (0x1 << 0)

1203 
	#AT91C_EMAC_RCOM
 (0x1 << 1)

1204 
	#AT91C_EMAC_RBNA
 (0x1 << 2)

1205 
	#AT91C_EMAC_TOVR
 (0x1 << 3)

1206 
	#AT91C_EMAC_TUND
 (0x1 << 4)

1207 
	#AT91C_EMAC_RTRY
 (0x1 << 5)

1208 
	#AT91C_EMAC_TBRE
 (0x1 << 6)

1209 
	#AT91C_EMAC_TCOM
 (0x1 << 7)

1210 
	#AT91C_EMAC_TIDLE
 (0x1 << 8)

1211 
	#AT91C_EMAC_LINK
 (0x1 << 9)

1212 
	#AT91C_EMAC_ROVR
 (0x1 << 10)

1213 
	#AT91C_EMAC_HRESP
 (0x1 << 11)

1218 
	#AT91C_EMAC_DATA
 (0xFFFF << 0)

1219 
	#AT91C_EMAC_CODE
 (0x3 << 16)

1220 
	#AT91C_EMAC_REGA
 (0x1F << 18)

1221 
	#AT91C_EMAC_PHYA
 (0x1F << 23)

1222 
	#AT91C_EMAC_RW
 (0x3 << 28)

1223 
	#AT91C_EMAC_HIGH
 (0x1 << 30)

1224 
	#AT91C_EMAC_LOW
 (0x1 << 31)

1225 

	)

1230 
	#EBI_CSA
 ( 0)

1231 
	#EBI_CFGR
 ( 4)

1233 
	#AT91C_EBI_CS0A
 (0x1 << 0)

1234 
	#AT91C_EBI_CS0A_SMC
 (0x0)

1235 
	#AT91C_EBI_CS0A_BFC
 (0x1)

1236 
	#AT91C_EBI_CS1A
 (0x1 << 1)

1237 
	#AT91C_EBI_CS1A_SMC
 (0x0 << 1)

1238 
	#AT91C_EBI_CS1A_SDRAMC
 (0x1 << 1)

1239 
	#AT91C_EBI_CS3A
 (0x1 << 3)

1240 
	#AT91C_EBI_CS3A_SMC
 (0x0 << 3)

1241 
	#AT91C_EBI_CS3A_SMC_Sm¨tMedü
 (0x1 << 3)

1242 
	#AT91C_EBI_CS4A
 (0x1 << 4)

1243 
	#AT91C_EBI_CS4A_SMC
 (0x0 << 4)

1244 
	#AT91C_EBI_CS4A_SMC_Com∑˘Fœsh
 (0x1 << 4)

1246 
	#AT91C_EBI_DBPUC
 (0x1 << 0)

1247 
	#AT91C_EBI_EBSEN
 (0x1 << 1)

1248 

	)

1253 
	#SMC2_CSR
 ( 0)

1255 
	#AT91C_SMC2_NWS
 (0x7F << 0)

1256 
	#AT91C_SMC2_WSEN
 (0x1 << 7)

1257 
	#AT91C_SMC2_TDF
 (0xF << 8)

1258 
	#AT91C_SMC2_BAT
 (0x1 << 12)

1259 
	#AT91C_SMC2_DBW
 (0x1 << 13)

1260 
	#AT91C_SMC2_DBW_16
 (0x1 << 13)

1261 
	#AT91C_SMC2_DBW_8
 (0x2 << 13)

1262 
	#AT91C_SMC2_DRP
 (0x1 << 15)

1263 
	#AT91C_SMC2_ACSS
 (0x3 << 16)

1264 
	#AT91C_SMC2_ACSS_STANDARD
 (0x0 << 16)

1265 
	#AT91C_SMC2_ACSS_1_CYCLE
 (0x1 << 16)

1266 
	#AT91C_SMC2_ACSS_2_CYCLES
 (0x2 << 16)

1267 
	#AT91C_SMC2_ACSS_3_CYCLES
 (0x3 << 16)

1268 
	#AT91C_SMC2_RWSETUP
 (0x7 << 24)

1269 
	#AT91C_SMC2_RWHOLD
 (0x7 << 29)

1270 

	)

1275 
	#SDRC_MR
 ( 0)

1276 
	#SDRC_TR
 ( 4)

1277 
	#SDRC_CR
 ( 8)

1278 
	#SDRC_SRR
 (12)

1279 
	#SDRC_LPR
 (16)

1280 
	#SDRC_IER
 (20)

1281 
	#SDRC_IDR
 (24)

1282 
	#SDRC_IMR
 (28)

1283 
	#SDRC_ISR
 (32)

1285 
	#AT91C_SDRC_MODE
 (0xF << 0)

1286 
	#AT91C_SDRC_MODE_NORMAL_CMD
 (0x0)

1287 
	#AT91C_SDRC_MODE_NOP_CMD
 (0x1)

1288 
	#AT91C_SDRC_MODE_PRCGALL_CMD
 (0x2)

1289 
	#AT91C_SDRC_MODE_LMR_CMD
 (0x3)

1290 
	#AT91C_SDRC_MODE_RFSH_CMD
 (0x4)

1291 
	#AT91C_SDRC_DBW
 (0x1 << 4)

1292 
	#AT91C_SDRC_DBW_32_BITS
 (0x0 << 4)

1293 
	#AT91C_SDRC_DBW_16_BITS
 (0x1 << 4)

1295 
	#AT91C_SDRC_COUNT
 (0xFFF << 0)

1297 
	#AT91C_SDRC_NC
 (0x3 << 0)

1298 
	#AT91C_SDRC_NC_8
 (0x0)

1299 
	#AT91C_SDRC_NC_9
 (0x1)

1300 
	#AT91C_SDRC_NC_10
 (0x2)

1301 
	#AT91C_SDRC_NC_11
 (0x3)

1302 
	#AT91C_SDRC_NR
 (0x3 << 2)

1303 
	#AT91C_SDRC_NR_11
 (0x0 << 2)

1304 
	#AT91C_SDRC_NR_12
 (0x1 << 2)

1305 
	#AT91C_SDRC_NR_13
 (0x2 << 2)

1306 
	#AT91C_SDRC_NB
 (0x1 << 4)

1307 
	#AT91C_SDRC_NB_2_BANKS
 (0x0 << 4)

1308 
	#AT91C_SDRC_NB_4_BANKS
 (0x1 << 4)

1309 
	#AT91C_SDRC_CAS
 (0x3 << 5)

1310 
	#AT91C_SDRC_CAS_2
 (0x2 << 5)

1311 
	#AT91C_SDRC_TWR
 (0xF << 7)

1312 
	#AT91C_SDRC_TRC
 (0xF << 11)

1313 
	#AT91C_SDRC_TRP
 (0xF << 15)

1314 
	#AT91C_SDRC_TRCD
 (0xF << 19)

1315 
	#AT91C_SDRC_TRAS
 (0xF << 23)

1316 
	#AT91C_SDRC_TXSR
 (0xF << 27)

1318 
	#AT91C_SDRC_SRCB
 (0x1 << 0)

1320 
	#AT91C_SDRC_LPCB
 (0x1 << 0)

1322 
	#AT91C_SDRC_RES
 (0x1 << 0)

1326 

	)

1331 
	#BFC_MR
 ( 0)

1333 
	#AT91C_BFC_BFCOM
 (0x3 << 0)

1334 
	#AT91C_BFC_BFCOM_DISABLED
 (0x0)

1335 
	#AT91C_BFC_BFCOM_ASYNC
 (0x1)

1336 
	#AT91C_BFC_BFCOM_BURST_READ
 (0x2)

1337 
	#AT91C_BFC_BFCC
 (0x3 << 2)

1338 
	#AT91C_BFC_BFCC_MCK
 (0x1 << 2)

1339 
	#AT91C_BFC_BFCC_MCK_DIV_2
 (0x2 << 2)

1340 
	#AT91C_BFC_BFCC_MCK_DIV_4
 (0x3 << 2)

1341 
	#AT91C_BFC_AVL
 (0xF << 4)

1342 
	#AT91C_BFC_PAGES
 (0x7 << 8)

1343 
	#AT91C_BFC_PAGES_NO_PAGE
 (0x0 << 8)

1344 
	#AT91C_BFC_PAGES_16
 (0x1 << 8)

1345 
	#AT91C_BFC_PAGES_32
 (0x2 << 8)

1346 
	#AT91C_BFC_PAGES_64
 (0x3 << 8)

1347 
	#AT91C_BFC_PAGES_128
 (0x4 << 8)

1348 
	#AT91C_BFC_PAGES_256
 (0x5 << 8)

1349 
	#AT91C_BFC_PAGES_512
 (0x6 << 8)

1350 
	#AT91C_BFC_PAGES_1024
 (0x7 << 8)

1351 
	#AT91C_BFC_OEL
 (0x3 << 12)

1352 
	#AT91C_BFC_BAAEN
 (0x1 << 16)

1353 
	#AT91C_BFC_BFOEH
 (0x1 << 17)

1354 
	#AT91C_BFC_MUXEN
 (0x1 << 18)

1355 
	#AT91C_BFC_RDYEN
 (0x1 << 19)

1356 

	)

1362 
	#AT91C_MC_PUER
 (0xFFFFFF54)

1363 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1364 
	#AT91C_MC_PUP
 (0xFFFFFF50)

1365 
	#AT91C_MC_PUIA
 (0xFFFFFF10)

1366 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1367 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1369 
	#AT91C_RTC_IMR
 (0xFFFFFE28)

1370 
	#AT91C_RTC_IER
 (0xFFFFFE20)

1371 
	#AT91C_RTC_SR
 (0xFFFFFE18)

1372 
	#AT91C_RTC_TIMALR
 (0xFFFFFE10)

1373 
	#AT91C_RTC_TIMR
 (0xFFFFFE08)

1374 
	#AT91C_RTC_CR
 (0xFFFFFE00)

1375 
	#AT91C_RTC_VER
 (0xFFFFFE2C)

1376 
	#AT91C_RTC_IDR
 (0xFFFFFE24)

1377 
	#AT91C_RTC_SCCR
 (0xFFFFFE1C)

1378 
	#AT91C_RTC_CALALR
 (0xFFFFFE14)

1379 
	#AT91C_RTC_CALR
 (0xFFFFFE0C)

1380 
	#AT91C_RTC_MR
 (0xFFFFFE04)

1382 
	#AT91C_ST_CRTR
 (0xFFFFFD24)

1383 
	#AT91C_ST_IMR
 (0xFFFFFD1C)

1384 
	#AT91C_ST_IER
 (0xFFFFFD14)

1385 
	#AT91C_ST_RTMR
 (0xFFFFFD0C)

1386 
	#AT91C_ST_PIMR
 (0xFFFFFD04)

1387 
	#AT91C_ST_RTAR
 (0xFFFFFD20)

1388 
	#AT91C_ST_IDR
 (0xFFFFFD18)

1389 
	#AT91C_ST_SR
 (0xFFFFFD10)

1390 
	#AT91C_ST_WDMR
 (0xFFFFFD08)

1391 
	#AT91C_ST_CR
 (0xFFFFFD00)

1393 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1394 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1395 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1396 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1397 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1398 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1399 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1400 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1401 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1402 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1403 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1404 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1406 
	#AT91C_CKGR_PLLBR
 (0xFFFFFC2C)

1407 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1408 
	#AT91C_CKGR_PLLAR
 (0xFFFFFC28)

1409 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1411 
	#AT91C_PIOD_PDSR
 (0xFFFFFA3C)

1412 
	#AT91C_PIOD_CODR
 (0xFFFFFA34)

1413 
	#AT91C_PIOD_OWER
 (0xFFFFFAA0)

1414 
	#AT91C_PIOD_MDER
 (0xFFFFFA50)

1415 
	#AT91C_PIOD_IMR
 (0xFFFFFA48)

1416 
	#AT91C_PIOD_IER
 (0xFFFFFA40)

1417 
	#AT91C_PIOD_ODSR
 (0xFFFFFA38)

1418 
	#AT91C_PIOD_SODR
 (0xFFFFFA30)

1419 
	#AT91C_PIOD_PER
 (0xFFFFFA00)

1420 
	#AT91C_PIOD_OWDR
 (0xFFFFFAA4)

1421 
	#AT91C_PIOD_PPUER
 (0xFFFFFA64)

1422 
	#AT91C_PIOD_MDDR
 (0xFFFFFA54)

1423 
	#AT91C_PIOD_ISR
 (0xFFFFFA4C)

1424 
	#AT91C_PIOD_IDR
 (0xFFFFFA44)

1425 
	#AT91C_PIOD_PDR
 (0xFFFFFA04)

1426 
	#AT91C_PIOD_ODR
 (0xFFFFFA14)

1427 
	#AT91C_PIOD_OWSR
 (0xFFFFFAA8)

1428 
	#AT91C_PIOD_ABSR
 (0xFFFFFA78)

1429 
	#AT91C_PIOD_ASR
 (0xFFFFFA70)

1430 
	#AT91C_PIOD_PPUSR
 (0xFFFFFA68)

1431 
	#AT91C_PIOD_PPUDR
 (0xFFFFFA60)

1432 
	#AT91C_PIOD_MDSR
 (0xFFFFFA58)

1433 
	#AT91C_PIOD_PSR
 (0xFFFFFA08)

1434 
	#AT91C_PIOD_OER
 (0xFFFFFA10)

1435 
	#AT91C_PIOD_OSR
 (0xFFFFFA18)

1436 
	#AT91C_PIOD_IFER
 (0xFFFFFA20)

1437 
	#AT91C_PIOD_BSR
 (0xFFFFFA74)

1438 
	#AT91C_PIOD_IFDR
 (0xFFFFFA24)

1439 
	#AT91C_PIOD_IFSR
 (0xFFFFFA28)

1441 
	#AT91C_PIOC_IFDR
 (0xFFFFF824)

1442 
	#AT91C_PIOC_ODR
 (0xFFFFF814)

1443 
	#AT91C_PIOC_ABSR
 (0xFFFFF878)

1444 
	#AT91C_PIOC_SODR
 (0xFFFFF830)

1445 
	#AT91C_PIOC_IFSR
 (0xFFFFF828)

1446 
	#AT91C_PIOC_CODR
 (0xFFFFF834)

1447 
	#AT91C_PIOC_ODSR
 (0xFFFFF838)

1448 
	#AT91C_PIOC_IER
 (0xFFFFF840)

1449 
	#AT91C_PIOC_IMR
 (0xFFFFF848)

1450 
	#AT91C_PIOC_OWDR
 (0xFFFFF8A4)

1451 
	#AT91C_PIOC_MDDR
 (0xFFFFF854)

1452 
	#AT91C_PIOC_PDSR
 (0xFFFFF83C)

1453 
	#AT91C_PIOC_IDR
 (0xFFFFF844)

1454 
	#AT91C_PIOC_ISR
 (0xFFFFF84C)

1455 
	#AT91C_PIOC_PDR
 (0xFFFFF804)

1456 
	#AT91C_PIOC_OWSR
 (0xFFFFF8A8)

1457 
	#AT91C_PIOC_OWER
 (0xFFFFF8A0)

1458 
	#AT91C_PIOC_ASR
 (0xFFFFF870)

1459 
	#AT91C_PIOC_PPUSR
 (0xFFFFF868)

1460 
	#AT91C_PIOC_PPUDR
 (0xFFFFF860)

1461 
	#AT91C_PIOC_MDSR
 (0xFFFFF858)

1462 
	#AT91C_PIOC_MDER
 (0xFFFFF850)

1463 
	#AT91C_PIOC_IFER
 (0xFFFFF820)

1464 
	#AT91C_PIOC_OSR
 (0xFFFFF818)

1465 
	#AT91C_PIOC_OER
 (0xFFFFF810)

1466 
	#AT91C_PIOC_PSR
 (0xFFFFF808)

1467 
	#AT91C_PIOC_PER
 (0xFFFFF800)

1468 
	#AT91C_PIOC_BSR
 (0xFFFFF874)

1469 
	#AT91C_PIOC_PPUER
 (0xFFFFF864)

1471 
	#AT91C_PIOB_OWSR
 (0xFFFFF6A8)

1472 
	#AT91C_PIOB_PPUSR
 (0xFFFFF668)

1473 
	#AT91C_PIOB_PPUDR
 (0xFFFFF660)

1474 
	#AT91C_PIOB_MDSR
 (0xFFFFF658)

1475 
	#AT91C_PIOB_MDER
 (0xFFFFF650)

1476 
	#AT91C_PIOB_IMR
 (0xFFFFF648)

1477 
	#AT91C_PIOB_OSR
 (0xFFFFF618)

1478 
	#AT91C_PIOB_OER
 (0xFFFFF610)

1479 
	#AT91C_PIOB_PSR
 (0xFFFFF608)

1480 
	#AT91C_PIOB_PER
 (0xFFFFF600)

1481 
	#AT91C_PIOB_BSR
 (0xFFFFF674)

1482 
	#AT91C_PIOB_PPUER
 (0xFFFFF664)

1483 
	#AT91C_PIOB_IFDR
 (0xFFFFF624)

1484 
	#AT91C_PIOB_ODR
 (0xFFFFF614)

1485 
	#AT91C_PIOB_ABSR
 (0xFFFFF678)

1486 
	#AT91C_PIOB_ASR
 (0xFFFFF670)

1487 
	#AT91C_PIOB_IFER
 (0xFFFFF620)

1488 
	#AT91C_PIOB_IFSR
 (0xFFFFF628)

1489 
	#AT91C_PIOB_SODR
 (0xFFFFF630)

1490 
	#AT91C_PIOB_ODSR
 (0xFFFFF638)

1491 
	#AT91C_PIOB_CODR
 (0xFFFFF634)

1492 
	#AT91C_PIOB_PDSR
 (0xFFFFF63C)

1493 
	#AT91C_PIOB_OWER
 (0xFFFFF6A0)

1494 
	#AT91C_PIOB_IER
 (0xFFFFF640)

1495 
	#AT91C_PIOB_OWDR
 (0xFFFFF6A4)

1496 
	#AT91C_PIOB_MDDR
 (0xFFFFF654)

1497 
	#AT91C_PIOB_ISR
 (0xFFFFF64C)

1498 
	#AT91C_PIOB_IDR
 (0xFFFFF644)

1499 
	#AT91C_PIOB_PDR
 (0xFFFFF604)

1501 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1502 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1503 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1504 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1505 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1506 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1507 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1508 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1509 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1510 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1511 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1512 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1513 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1514 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1515 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1516 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1517 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1518 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1519 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1520 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1521 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1522 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1523 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1524 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1525 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1526 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1527 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1528 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1529 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1531 
	#AT91C_DBGU_C2R
 (0xFFFFF244)

1532 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1533 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1534 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1535 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1536 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1537 
	#AT91C_DBGU_C1R
 (0xFFFFF240)

1538 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1539 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1540 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1541 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1542 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1544 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1545 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1546 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1547 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1548 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1549 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1550 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1551 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1552 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1553 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1555 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1556 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1557 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1558 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1559 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1560 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1561 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1562 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1563 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1564 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1565 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1566 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1567 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1568 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1569 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1570 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1571 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1572 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1574 
	#AT91C_SPI_PTCR
 (0xFFFE0120)

1575 
	#AT91C_SPI_TNPR
 (0xFFFE0118)

1576 
	#AT91C_SPI_RNPR
 (0xFFFE0110)

1577 
	#AT91C_SPI_TPR
 (0xFFFE0108)

1578 
	#AT91C_SPI_RPR
 (0xFFFE0100)

1579 
	#AT91C_SPI_PTSR
 (0xFFFE0124)

1580 
	#AT91C_SPI_TNCR
 (0xFFFE011C)

1581 
	#AT91C_SPI_RNCR
 (0xFFFE0114)

1582 
	#AT91C_SPI_TCR
 (0xFFFE010C)

1583 
	#AT91C_SPI_RCR
 (0xFFFE0104)

1585 
	#AT91C_SPI_CSR
 (0xFFFE0030)

1586 
	#AT91C_SPI_IDR
 (0xFFFE0018)

1587 
	#AT91C_SPI_SR
 (0xFFFE0010)

1588 
	#AT91C_SPI_RDR
 (0xFFFE0008)

1589 
	#AT91C_SPI_CR
 (0xFFFE0000)

1590 
	#AT91C_SPI_IMR
 (0xFFFE001C)

1591 
	#AT91C_SPI_IER
 (0xFFFE0014)

1592 
	#AT91C_SPI_TDR
 (0xFFFE000C)

1593 
	#AT91C_SPI_MR
 (0xFFFE0004)

1595 
	#AT91C_SSC2_PTCR
 (0xFFFD8120)

1596 
	#AT91C_SSC2_TNPR
 (0xFFFD8118)

1597 
	#AT91C_SSC2_RNPR
 (0xFFFD8110)

1598 
	#AT91C_SSC2_TPR
 (0xFFFD8108)

1599 
	#AT91C_SSC2_RPR
 (0xFFFD8100)

1600 
	#AT91C_SSC2_PTSR
 (0xFFFD8124)

1601 
	#AT91C_SSC2_TNCR
 (0xFFFD811C)

1602 
	#AT91C_SSC2_RNCR
 (0xFFFD8114)

1603 
	#AT91C_SSC2_TCR
 (0xFFFD810C)

1604 
	#AT91C_SSC2_RCR
 (0xFFFD8104)

1606 
	#AT91C_SSC2_IMR
 (0xFFFD804C)

1607 
	#AT91C_SSC2_IER
 (0xFFFD8044)

1608 
	#AT91C_SSC2_RC1R
 (0xFFFD803C)

1609 
	#AT91C_SSC2_TSHR
 (0xFFFD8034)

1610 
	#AT91C_SSC2_CMR
 (0xFFFD8004)

1611 
	#AT91C_SSC2_IDR
 (0xFFFD8048)

1612 
	#AT91C_SSC2_TCMR
 (0xFFFD8018)

1613 
	#AT91C_SSC2_RCMR
 (0xFFFD8010)

1614 
	#AT91C_SSC2_CR
 (0xFFFD8000)

1615 
	#AT91C_SSC2_RFMR
 (0xFFFD8014)

1616 
	#AT91C_SSC2_TFMR
 (0xFFFD801C)

1617 
	#AT91C_SSC2_THR
 (0xFFFD8024)

1618 
	#AT91C_SSC2_SR
 (0xFFFD8040)

1619 
	#AT91C_SSC2_RC0R
 (0xFFFD8038)

1620 
	#AT91C_SSC2_RSHR
 (0xFFFD8030)

1621 
	#AT91C_SSC2_RHR
 (0xFFFD8020)

1623 
	#AT91C_SSC1_PTCR
 (0xFFFD4120)

1624 
	#AT91C_SSC1_TNPR
 (0xFFFD4118)

1625 
	#AT91C_SSC1_RNPR
 (0xFFFD4110)

1626 
	#AT91C_SSC1_TPR
 (0xFFFD4108)

1627 
	#AT91C_SSC1_RPR
 (0xFFFD4100)

1628 
	#AT91C_SSC1_PTSR
 (0xFFFD4124)

1629 
	#AT91C_SSC1_TNCR
 (0xFFFD411C)

1630 
	#AT91C_SSC1_RNCR
 (0xFFFD4114)

1631 
	#AT91C_SSC1_TCR
 (0xFFFD410C)

1632 
	#AT91C_SSC1_RCR
 (0xFFFD4104)

1634 
	#AT91C_SSC1_RFMR
 (0xFFFD4014)

1635 
	#AT91C_SSC1_CMR
 (0xFFFD4004)

1636 
	#AT91C_SSC1_IDR
 (0xFFFD4048)

1637 
	#AT91C_SSC1_SR
 (0xFFFD4040)

1638 
	#AT91C_SSC1_RC0R
 (0xFFFD4038)

1639 
	#AT91C_SSC1_RSHR
 (0xFFFD4030)

1640 
	#AT91C_SSC1_RHR
 (0xFFFD4020)

1641 
	#AT91C_SSC1_TCMR
 (0xFFFD4018)

1642 
	#AT91C_SSC1_RCMR
 (0xFFFD4010)

1643 
	#AT91C_SSC1_CR
 (0xFFFD4000)

1644 
	#AT91C_SSC1_IMR
 (0xFFFD404C)

1645 
	#AT91C_SSC1_IER
 (0xFFFD4044)

1646 
	#AT91C_SSC1_RC1R
 (0xFFFD403C)

1647 
	#AT91C_SSC1_TSHR
 (0xFFFD4034)

1648 
	#AT91C_SSC1_THR
 (0xFFFD4024)

1649 
	#AT91C_SSC1_TFMR
 (0xFFFD401C)

1651 
	#AT91C_SSC0_PTCR
 (0xFFFD0120)

1652 
	#AT91C_SSC0_TNPR
 (0xFFFD0118)

1653 
	#AT91C_SSC0_RNPR
 (0xFFFD0110)

1654 
	#AT91C_SSC0_TPR
 (0xFFFD0108)

1655 
	#AT91C_SSC0_RPR
 (0xFFFD0100)

1656 
	#AT91C_SSC0_PTSR
 (0xFFFD0124)

1657 
	#AT91C_SSC0_TNCR
 (0xFFFD011C)

1658 
	#AT91C_SSC0_RNCR
 (0xFFFD0114)

1659 
	#AT91C_SSC0_TCR
 (0xFFFD010C)

1660 
	#AT91C_SSC0_RCR
 (0xFFFD0104)

1662 
	#AT91C_SSC0_IMR
 (0xFFFD004C)

1663 
	#AT91C_SSC0_IER
 (0xFFFD0044)

1664 
	#AT91C_SSC0_RC1R
 (0xFFFD003C)

1665 
	#AT91C_SSC0_TSHR
 (0xFFFD0034)

1666 
	#AT91C_SSC0_THR
 (0xFFFD0024)

1667 
	#AT91C_SSC0_TFMR
 (0xFFFD001C)

1668 
	#AT91C_SSC0_RFMR
 (0xFFFD0014)

1669 
	#AT91C_SSC0_CMR
 (0xFFFD0004)

1670 
	#AT91C_SSC0_IDR
 (0xFFFD0048)

1671 
	#AT91C_SSC0_SR
 (0xFFFD0040)

1672 
	#AT91C_SSC0_RC0R
 (0xFFFD0038)

1673 
	#AT91C_SSC0_RSHR
 (0xFFFD0030)

1674 
	#AT91C_SSC0_RHR
 (0xFFFD0020)

1675 
	#AT91C_SSC0_TCMR
 (0xFFFD0018)

1676 
	#AT91C_SSC0_RCMR
 (0xFFFD0010)

1677 
	#AT91C_SSC0_CR
 (0xFFFD0000)

1679 
	#AT91C_US3_PTSR
 (0xFFFCC124)

1680 
	#AT91C_US3_TNCR
 (0xFFFCC11C)

1681 
	#AT91C_US3_RNCR
 (0xFFFCC114)

1682 
	#AT91C_US3_TCR
 (0xFFFCC10C)

1683 
	#AT91C_US3_RCR
 (0xFFFCC104)

1684 
	#AT91C_US3_PTCR
 (0xFFFCC120)

1685 
	#AT91C_US3_TNPR
 (0xFFFCC118)

1686 
	#AT91C_US3_RNPR
 (0xFFFCC110)

1687 
	#AT91C_US3_TPR
 (0xFFFCC108)

1688 
	#AT91C_US3_RPR
 (0xFFFCC100)

1690 
	#AT91C_US3_IF
 (0xFFFCC04C)

1691 
	#AT91C_US3_NER
 (0xFFFCC044)

1692 
	#AT91C_US3_RTOR
 (0xFFFCC024)

1693 
	#AT91C_US3_THR
 (0xFFFCC01C)

1694 
	#AT91C_US3_CSR
 (0xFFFCC014)

1695 
	#AT91C_US3_IDR
 (0xFFFCC00C)

1696 
	#AT91C_US3_MR
 (0xFFFCC004)

1697 
	#AT91C_US3_XXR
 (0xFFFCC048)

1698 
	#AT91C_US3_FIDI
 (0xFFFCC040)

1699 
	#AT91C_US3_TTGR
 (0xFFFCC028)

1700 
	#AT91C_US3_BRGR
 (0xFFFCC020)

1701 
	#AT91C_US3_RHR
 (0xFFFCC018)

1702 
	#AT91C_US3_IMR
 (0xFFFCC010)

1703 
	#AT91C_US3_IER
 (0xFFFCC008)

1704 
	#AT91C_US3_CR
 (0xFFFCC000)

1706 
	#AT91C_US2_PTSR
 (0xFFFC8124)

1707 
	#AT91C_US2_TNCR
 (0xFFFC811C)

1708 
	#AT91C_US2_RNCR
 (0xFFFC8114)

1709 
	#AT91C_US2_TCR
 (0xFFFC810C)

1710 
	#AT91C_US2_PTCR
 (0xFFFC8120)

1711 
	#AT91C_US2_RCR
 (0xFFFC8104)

1712 
	#AT91C_US2_TNPR
 (0xFFFC8118)

1713 
	#AT91C_US2_RPR
 (0xFFFC8100)

1714 
	#AT91C_US2_TPR
 (0xFFFC8108)

1715 
	#AT91C_US2_RNPR
 (0xFFFC8110)

1717 
	#AT91C_US2_XXR
 (0xFFFC8048)

1718 
	#AT91C_US2_FIDI
 (0xFFFC8040)

1719 
	#AT91C_US2_TTGR
 (0xFFFC8028)

1720 
	#AT91C_US2_BRGR
 (0xFFFC8020)

1721 
	#AT91C_US2_RHR
 (0xFFFC8018)

1722 
	#AT91C_US2_IMR
 (0xFFFC8010)

1723 
	#AT91C_US2_IER
 (0xFFFC8008)

1724 
	#AT91C_US2_CR
 (0xFFFC8000)

1725 
	#AT91C_US2_IF
 (0xFFFC804C)

1726 
	#AT91C_US2_NER
 (0xFFFC8044)

1727 
	#AT91C_US2_RTOR
 (0xFFFC8024)

1728 
	#AT91C_US2_THR
 (0xFFFC801C)

1729 
	#AT91C_US2_CSR
 (0xFFFC8014)

1730 
	#AT91C_US2_IDR
 (0xFFFC800C)

1731 
	#AT91C_US2_MR
 (0xFFFC8004)

1733 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1734 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1735 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1736 
	#AT91C_US1_TCR
 (0xFFFC410C)

1737 
	#AT91C_US1_RCR
 (0xFFFC4104)

1738 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1739 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1740 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1741 
	#AT91C_US1_TPR
 (0xFFFC4108)

1742 
	#AT91C_US1_RPR
 (0xFFFC4100)

1744 
	#AT91C_US1_XXR
 (0xFFFC4048)

1745 
	#AT91C_US1_RHR
 (0xFFFC4018)

1746 
	#AT91C_US1_IMR
 (0xFFFC4010)

1747 
	#AT91C_US1_IER
 (0xFFFC4008)

1748 
	#AT91C_US1_CR
 (0xFFFC4000)

1749 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1750 
	#AT91C_US1_THR
 (0xFFFC401C)

1751 
	#AT91C_US1_CSR
 (0xFFFC4014)

1752 
	#AT91C_US1_IDR
 (0xFFFC400C)

1753 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1754 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1755 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1756 
	#AT91C_US1_IF
 (0xFFFC404C)

1757 
	#AT91C_US1_NER
 (0xFFFC4044)

1758 
	#AT91C_US1_MR
 (0xFFFC4004)

1760 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1761 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1762 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1763 
	#AT91C_US0_TPR
 (0xFFFC0108)

1764 
	#AT91C_US0_RPR
 (0xFFFC0100)

1765 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1766 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1767 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1768 
	#AT91C_US0_TCR
 (0xFFFC010C)

1769 
	#AT91C_US0_RCR
 (0xFFFC0104)

1771 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1772 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1773 
	#AT91C_US0_RHR
 (0xFFFC0018)

1774 
	#AT91C_US0_IMR
 (0xFFFC0010)

1775 
	#AT91C_US0_NER
 (0xFFFC0044)

1776 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1777 
	#AT91C_US0_XXR
 (0xFFFC0048)

1778 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1779 
	#AT91C_US0_CR
 (0xFFFC0000)

1780 
	#AT91C_US0_IER
 (0xFFFC0008)

1781 
	#AT91C_US0_IF
 (0xFFFC004C)

1782 
	#AT91C_US0_MR
 (0xFFFC0004)

1783 
	#AT91C_US0_IDR
 (0xFFFC000C)

1784 
	#AT91C_US0_CSR
 (0xFFFC0014)

1785 
	#AT91C_US0_THR
 (0xFFFC001C)

1787 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1788 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1789 
	#AT91C_TWI_SR
 (0xFFFB8020)

1790 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1791 
	#AT91C_TWI_SMR
 (0xFFFB8008)

1792 
	#AT91C_TWI_CR
 (0xFFFB8000)

1793 
	#AT91C_TWI_THR
 (0xFFFB8034)

1794 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1795 
	#AT91C_TWI_IER
 (0xFFFB8024)

1796 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1797 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1799 
	#AT91C_MCI_PTCR
 (0xFFFB4120)

1800 
	#AT91C_MCI_TNPR
 (0xFFFB4118)

1801 
	#AT91C_MCI_RNPR
 (0xFFFB4110)

1802 
	#AT91C_MCI_TPR
 (0xFFFB4108)

1803 
	#AT91C_MCI_RPR
 (0xFFFB4100)

1804 
	#AT91C_MCI_PTSR
 (0xFFFB4124)

1805 
	#AT91C_MCI_TNCR
 (0xFFFB411C)

1806 
	#AT91C_MCI_RNCR
 (0xFFFB4114)

1807 
	#AT91C_MCI_TCR
 (0xFFFB410C)

1808 
	#AT91C_MCI_RCR
 (0xFFFB4104)

1810 
	#AT91C_MCI_IDR
 (0xFFFB4048)

1811 
	#AT91C_MCI_SR
 (0xFFFB4040)

1812 
	#AT91C_MCI_RDR
 (0xFFFB4030)

1813 
	#AT91C_MCI_RSPR
 (0xFFFB4020)

1814 
	#AT91C_MCI_ARGR
 (0xFFFB4010)

1815 
	#AT91C_MCI_DTOR
 (0xFFFB4008)

1816 
	#AT91C_MCI_CR
 (0xFFFB4000)

1817 
	#AT91C_MCI_IMR
 (0xFFFB404C)

1818 
	#AT91C_MCI_IER
 (0xFFFB4044)

1819 
	#AT91C_MCI_TDR
 (0xFFFB4034)

1820 
	#AT91C_MCI_CMDR
 (0xFFFB4014)

1821 
	#AT91C_MCI_SDCR
 (0xFFFB400C)

1822 
	#AT91C_MCI_MR
 (0xFFFB4004)

1824 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1825 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1826 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1827 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1828 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1829 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1830 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1831 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1832 
	#AT91C_UDP_IER
 (0xFFFB0010)

1833 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1834 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1836 
	#AT91C_TC5_CMR
 (0xFFFA4084)

1837 
	#AT91C_TC5_IDR
 (0xFFFA40A8)

1838 
	#AT91C_TC5_SR
 (0xFFFA40A0)

1839 
	#AT91C_TC5_RB
 (0xFFFA4098)

1840 
	#AT91C_TC5_CV
 (0xFFFA4090)

1841 
	#AT91C_TC5_CCR
 (0xFFFA4080)

1842 
	#AT91C_TC5_IMR
 (0xFFFA40AC)

1843 
	#AT91C_TC5_IER
 (0xFFFA40A4)

1844 
	#AT91C_TC5_RC
 (0xFFFA409C)

1845 
	#AT91C_TC5_RA
 (0xFFFA4094)

1847 
	#AT91C_TC4_IMR
 (0xFFFA406C)

1848 
	#AT91C_TC4_IER
 (0xFFFA4064)

1849 
	#AT91C_TC4_RC
 (0xFFFA405C)

1850 
	#AT91C_TC4_RA
 (0xFFFA4054)

1851 
	#AT91C_TC4_CMR
 (0xFFFA4044)

1852 
	#AT91C_TC4_IDR
 (0xFFFA4068)

1853 
	#AT91C_TC4_SR
 (0xFFFA4060)

1854 
	#AT91C_TC4_RB
 (0xFFFA4058)

1855 
	#AT91C_TC4_CV
 (0xFFFA4050)

1856 
	#AT91C_TC4_CCR
 (0xFFFA4040)

1858 
	#AT91C_TC3_IMR
 (0xFFFA402C)

1859 
	#AT91C_TC3_CV
 (0xFFFA4010)

1860 
	#AT91C_TC3_CCR
 (0xFFFA4000)

1861 
	#AT91C_TC3_IER
 (0xFFFA4024)

1862 
	#AT91C_TC3_CMR
 (0xFFFA4004)

1863 
	#AT91C_TC3_RA
 (0xFFFA4014)

1864 
	#AT91C_TC3_RC
 (0xFFFA401C)

1865 
	#AT91C_TC3_IDR
 (0xFFFA4028)

1866 
	#AT91C_TC3_RB
 (0xFFFA4018)

1867 
	#AT91C_TC3_SR
 (0xFFFA4020)

1869 
	#AT91C_TCB1_BCR
 (0xFFFA4140)

1870 
	#AT91C_TCB1_BMR
 (0xFFFA4144)

1872 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1873 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1874 
	#AT91C_TC2_RC
 (0xFFFA009C)

1875 
	#AT91C_TC2_RA
 (0xFFFA0094)

1876 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1877 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1878 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1879 
	#AT91C_TC2_RB
 (0xFFFA0098)

1880 
	#AT91C_TC2_CV
 (0xFFFA0090)

1881 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1883 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1884 
	#AT91C_TC1_IER
 (0xFFFA0064)

1885 
	#AT91C_TC1_RC
 (0xFFFA005C)

1886 
	#AT91C_TC1_RA
 (0xFFFA0054)

1887 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1888 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1889 
	#AT91C_TC1_SR
 (0xFFFA0060)

1890 
	#AT91C_TC1_RB
 (0xFFFA0058)

1891 
	#AT91C_TC1_CV
 (0xFFFA0050)

1892 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1894 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1895 
	#AT91C_TC0_IER
 (0xFFFA0024)

1896 
	#AT91C_TC0_RC
 (0xFFFA001C)

1897 
	#AT91C_TC0_RA
 (0xFFFA0014)

1898 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1899 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1900 
	#AT91C_TC0_SR
 (0xFFFA0020)

1901 
	#AT91C_TC0_RB
 (0xFFFA0018)

1902 
	#AT91C_TC0_CV
 (0xFFFA0010)

1903 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1905 
	#AT91C_TCB0_BMR
 (0xFFFA00C4)

1906 
	#AT91C_TCB0_BCR
 (0xFFFA00C0)

1908 
	#AT91C_UHP_HcRhDes¸ùt‹A
 (0x00300048)

1909 
	#AT91C_UHP_HcRhP‹tSètus
 (0x00300054)

1910 
	#AT91C_UHP_HcRhDes¸ùt‹B
 (0x0030004C)

1911 
	#AT91C_UHP_HcC⁄åﬁ
 (0x00300004)

1912 
	#AT91C_UHP_HcI¡îru±Sètus
 (0x0030000C)

1913 
	#AT91C_UHP_HcRhSètus
 (0x00300050)

1914 
	#AT91C_UHP_HcRevisi⁄
 (0x00300000)

1915 
	#AT91C_UHP_HcComm™dSètus
 (0x00300008)

1916 
	#AT91C_UHP_HcI¡îru±E«bÀ
 (0x00300010)

1917 
	#AT91C_UHP_HcHCCA
 (0x00300018)

1918 
	#AT91C_UHP_HcC⁄åﬁHódED
 (0x00300020)

1919 
	#AT91C_UHP_HcI¡îru±DißbÀ
 (0x00300014)

1920 
	#AT91C_UHP_HcPîiodCuºítED
 (0x0030001C)

1921 
	#AT91C_UHP_HcC⁄åﬁCuºítED
 (0x00300024)

1922 
	#AT91C_UHP_HcBulkCuºítED
 (0x0030002C)

1923 
	#AT91C_UHP_HcFmI¡îvÆ
 (0x00300034)

1924 
	#AT91C_UHP_HcBulkHódED
 (0x00300028)

1925 
	#AT91C_UHP_HcBulkD⁄eHód
 (0x00300030)

1926 
	#AT91C_UHP_HcFmRemaöög
 (0x00300038)

1927 
	#AT91C_UHP_HcPîiodicSèπ
 (0x00300040)

1928 
	#AT91C_UHP_HcLSThªshﬁd
 (0x00300044)

1929 
	#AT91C_UHP_HcFmNumbî
 (0x0030003C)

1931 
	#AT91C_EMAC_RSR
 (0xFFFBC020)

1932 
	#AT91C_EMAC_MAN
 (0xFFFBC034)

1933 
	#AT91C_EMAC_HSH
 (0xFFFBC090)

1934 
	#AT91C_EMAC_MCOL
 (0xFFFBC048)

1935 
	#AT91C_EMAC_IER
 (0xFFFBC028)

1936 
	#AT91C_EMAC_SA2H
 (0xFFFBC0A4)

1937 
	#AT91C_EMAC_HSL
 (0xFFFBC094)

1938 
	#AT91C_EMAC_LCOL
 (0xFFFBC05C)

1939 
	#AT91C_EMAC_OK
 (0xFFFBC04C)

1940 
	#AT91C_EMAC_CFG
 (0xFFFBC004)

1941 
	#AT91C_EMAC_SA3L
 (0xFFFBC0A8)

1942 
	#AT91C_EMAC_SEQE
 (0xFFFBC050)

1943 
	#AT91C_EMAC_ECOL
 (0xFFFBC060)

1944 
	#AT91C_EMAC_ELR
 (0xFFFBC070)

1945 
	#AT91C_EMAC_SR
 (0xFFFBC008)

1946 
	#AT91C_EMAC_RBQP
 (0xFFFBC018)

1947 
	#AT91C_EMAC_CSE
 (0xFFFBC064)

1948 
	#AT91C_EMAC_RJB
 (0xFFFBC074)

1949 
	#AT91C_EMAC_USF
 (0xFFFBC078)

1950 
	#AT91C_EMAC_IDR
 (0xFFFBC02C)

1951 
	#AT91C_EMAC_SA1L
 (0xFFFBC098)

1952 
	#AT91C_EMAC_IMR
 (0xFFFBC030)

1953 
	#AT91C_EMAC_FRA
 (0xFFFBC040)

1954 
	#AT91C_EMAC_SA3H
 (0xFFFBC0AC)

1955 
	#AT91C_EMAC_SA1H
 (0xFFFBC09C)

1956 
	#AT91C_EMAC_SCOL
 (0xFFFBC044)

1957 
	#AT91C_EMAC_ALE
 (0xFFFBC054)

1958 
	#AT91C_EMAC_TAR
 (0xFFFBC00C)

1959 
	#AT91C_EMAC_SA4L
 (0xFFFBC0B0)

1960 
	#AT91C_EMAC_SA2L
 (0xFFFBC0A0)

1961 
	#AT91C_EMAC_TUE
 (0xFFFBC068)

1962 
	#AT91C_EMAC_DTE
 (0xFFFBC058)

1963 
	#AT91C_EMAC_TCR
 (0xFFFBC010)

1964 
	#AT91C_EMAC_CTL
 (0xFFFBC000)

1965 
	#AT91C_EMAC_SA4H
 (0xFFFBC0B4)

1966 
	#AT91C_EMAC_CDE
 (0xFFFBC06C)

1967 
	#AT91C_EMAC_SQEE
 (0xFFFBC07C)

1968 
	#AT91C_EMAC_TSR
 (0xFFFBC014)

1969 
	#AT91C_EMAC_DRFC
 (0xFFFBC080)

1971 
	#AT91C_EBI_CFGR
 (0xFFFFFF64)

1972 
	#AT91C_EBI_CSA
 (0xFFFFFF60)

1974 
	#AT91C_SMC2_CSR
 (0xFFFFFF70)

1976 
	#AT91C_SDRC_IMR
 (0xFFFFFFAC)

1977 
	#AT91C_SDRC_IER
 (0xFFFFFFA4)

1978 
	#AT91C_SDRC_SRR
 (0xFFFFFF9C)

1979 
	#AT91C_SDRC_TR
 (0xFFFFFF94)

1980 
	#AT91C_SDRC_ISR
 (0xFFFFFFB0)

1981 
	#AT91C_SDRC_IDR
 (0xFFFFFFA8)

1982 
	#AT91C_SDRC_LPR
 (0xFFFFFFA0)

1983 
	#AT91C_SDRC_CR
 (0xFFFFFF98)

1984 
	#AT91C_SDRC_MR
 (0xFFFFFF90)

1986 
	#AT91C_BFC_MR
 (0xFFFFFFC0)

1987 

	)

1991 
	#AT91C_PIO_PA0
 (1 << 0)

1992 
	#AT91C_PA0_MISO
 (
AT91C_PIO_PA0
)

1993 
	#AT91C_PA0_PCK3
 (
AT91C_PIO_PA0
)

1994 
	#AT91C_PIO_PA1
 (1 << 1)

1995 
	#AT91C_PA1_MOSI
 (
AT91C_PIO_PA1
)

1996 
	#AT91C_PA1_PCK0
 (
AT91C_PIO_PA1
)

1997 
	#AT91C_PIO_PA10
 (1 << 10)

1998 
	#AT91C_PA10_ETX1
 (
AT91C_PIO_PA10
)

1999 
	#AT91C_PA10_MCDB1
 (
AT91C_PIO_PA10
)

2000 
	#AT91C_PIO_PA11
 (1 << 11)

2001 
	#AT91C_PA11_ECRS_ECRSDV
 (
AT91C_PIO_PA11
)

2002 
	#AT91C_PA11_MCDB2
 (
AT91C_PIO_PA11
)

2003 
	#AT91C_PIO_PA12
 (1 << 12)

2004 
	#AT91C_PA12_ERX0
 (
AT91C_PIO_PA12
)

2005 
	#AT91C_PA12_MCDB3
 (
AT91C_PIO_PA12
)

2006 
	#AT91C_PIO_PA13
 (1 << 13)

2007 
	#AT91C_PA13_ERX1
 (
AT91C_PIO_PA13
)

2008 
	#AT91C_PA13_TCLK0
 (
AT91C_PIO_PA13
)

2009 
	#AT91C_PIO_PA14
 (1 << 14)

2010 
	#AT91C_PA14_ERXER
 (
AT91C_PIO_PA14
)

2011 
	#AT91C_PA14_TCLK1
 (
AT91C_PIO_PA14
)

2012 
	#AT91C_PIO_PA15
 (1 << 15)

2013 
	#AT91C_PA15_EMDC
 (
AT91C_PIO_PA15
)

2014 
	#AT91C_PA15_TCLK2
 (
AT91C_PIO_PA15
)

2015 
	#AT91C_PIO_PA16
 (1 << 16)

2016 
	#AT91C_PA16_EMDIO
 (
AT91C_PIO_PA16
)

2017 
	#AT91C_PA16_IRQ6
 (
AT91C_PIO_PA16
)

2018 
	#AT91C_PIO_PA17
 (1 << 17)

2019 
	#AT91C_PA17_TXD0
 (
AT91C_PIO_PA17
)

2020 
	#AT91C_PA17_TIOA0
 (
AT91C_PIO_PA17
)

2021 
	#AT91C_PIO_PA18
 (1 << 18)

2022 
	#AT91C_PA18_RXD0
 (
AT91C_PIO_PA18
)

2023 
	#AT91C_PA18_TIOB0
 (
AT91C_PIO_PA18
)

2024 
	#AT91C_PIO_PA19
 (1 << 19)

2025 
	#AT91C_PA19_SCK0
 (
AT91C_PIO_PA19
)

2026 
	#AT91C_PA19_TIOA1
 (
AT91C_PIO_PA19
)

2027 
	#AT91C_PIO_PA2
 (1 << 2)

2028 
	#AT91C_PA2_SPCK
 (
AT91C_PIO_PA2
)

2029 
	#AT91C_PA2_IRQ4
 (
AT91C_PIO_PA2
)

2030 
	#AT91C_PIO_PA20
 (1 << 20)

2031 
	#AT91C_PA20_CTS0
 (
AT91C_PIO_PA20
)

2032 
	#AT91C_PA20_TIOB1
 (
AT91C_PIO_PA20
)

2033 
	#AT91C_PIO_PA21
 (1 << 21)

2034 
	#AT91C_PA21_RTS0
 (
AT91C_PIO_PA21
)

2035 
	#AT91C_PA21_TIOA2
 (
AT91C_PIO_PA21
)

2036 
	#AT91C_PIO_PA22
 (1 << 22)

2037 
	#AT91C_PA22_RXD2
 (
AT91C_PIO_PA22
)

2038 
	#AT91C_PA22_TIOB2
 (
AT91C_PIO_PA22
)

2039 
	#AT91C_PIO_PA23
 (1 << 23)

2040 
	#AT91C_PA23_TXD2
 (
AT91C_PIO_PA23
)

2041 
	#AT91C_PA23_IRQ3
 (
AT91C_PIO_PA23
)

2042 
	#AT91C_PIO_PA24
 (1 << 24)

2043 
	#AT91C_PA24_SCK2
 (
AT91C_PIO_PA24
)

2044 
	#AT91C_PA24_PCK1
 (
AT91C_PIO_PA24
)

2045 
	#AT91C_PIO_PA25
 (1 << 25)

2046 
	#AT91C_PA25_TWD
 (
AT91C_PIO_PA25
)

2047 
	#AT91C_PA25_IRQ2
 (
AT91C_PIO_PA25
)

2048 
	#AT91C_PIO_PA26
 (1 << 26)

2049 
	#AT91C_PA26_TWCK
 (
AT91C_PIO_PA26
)

2050 
	#AT91C_PA26_IRQ1
 (
AT91C_PIO_PA26
)

2051 
	#AT91C_PIO_PA27
 (1 << 27)

2052 
	#AT91C_PA27_MCCK
 (
AT91C_PIO_PA27
)

2053 
	#AT91C_PA27_TCLK3
 (
AT91C_PIO_PA27
)

2054 
	#AT91C_PIO_PA28
 (1 << 28)

2055 
	#AT91C_PA28_MCCDA
 (
AT91C_PIO_PA28
)

2056 
	#AT91C_PA28_TCLK4
 (
AT91C_PIO_PA28
)

2057 
	#AT91C_PIO_PA29
 (1 << 29)

2058 
	#AT91C_PA29_MCDA0
 (
AT91C_PIO_PA29
)

2059 
	#AT91C_PA29_TCLK5
 (
AT91C_PIO_PA29
)

2060 
	#AT91C_PIO_PA3
 (1 << 3)

2061 
	#AT91C_PA3_NPCS0
 (
AT91C_PIO_PA3
)

2062 
	#AT91C_PA3_IRQ5
 (
AT91C_PIO_PA3
)

2063 
	#AT91C_PIO_PA30
 (1 << 30)

2064 
	#AT91C_PA30_DRXD
 (
AT91C_PIO_PA30
)

2065 
	#AT91C_PA30_CTS2
 (
AT91C_PIO_PA30
)

2066 
	#AT91C_PIO_PA31
 (1 << 31)

2067 
	#AT91C_PA31_DTXD
 (
AT91C_PIO_PA31
)

2068 
	#AT91C_PA31_RTS2
 (
AT91C_PIO_PA31
)

2069 
	#AT91C_PIO_PA4
 (1 << 4)

2070 
	#AT91C_PA4_NPCS1
 (
AT91C_PIO_PA4
)

2071 
	#AT91C_PA4_PCK1
 (
AT91C_PIO_PA4
)

2072 
	#AT91C_PIO_PA5
 (1 << 5)

2073 
	#AT91C_PA5_NPCS2
 (
AT91C_PIO_PA5
)

2074 
	#AT91C_PA5_TXD3
 (
AT91C_PIO_PA5
)

2075 
	#AT91C_PIO_PA6
 (1 << 6)

2076 
	#AT91C_PA6_NPCS3
 (
AT91C_PIO_PA6
)

2077 
	#AT91C_PA6_RXD3
 (
AT91C_PIO_PA6
)

2078 
	#AT91C_PIO_PA7
 (1 << 7)

2079 
	#AT91C_PA7_ETXCK_EREFCK
 (
AT91C_PIO_PA7
)

2080 
	#AT91C_PA7_PCK2
 (
AT91C_PIO_PA7
)

2081 
	#AT91C_PIO_PA8
 (1 << 8)

2082 
	#AT91C_PA8_ETXEN
 (
AT91C_PIO_PA8
)

2083 
	#AT91C_PA8_MCCDB
 (
AT91C_PIO_PA8
)

2084 
	#AT91C_PIO_PA9
 (1 << 9)

2085 
	#AT91C_PA9_ETX0
 (
AT91C_PIO_PA9
)

2086 
	#AT91C_PA9_MCDB0
 (
AT91C_PIO_PA9
)

2087 
	#AT91C_PIO_PB0
 (1 << 0)

2088 
	#AT91C_PB0_TF0
 (
AT91C_PIO_PB0
)

2089 
	#AT91C_PB0_TIOB3
 (
AT91C_PIO_PB0
)

2090 
	#AT91C_PIO_PB1
 (1 << 1)

2091 
	#AT91C_PB1_TK0
 (
AT91C_PIO_PB1
)

2092 
	#AT91C_PB1_CTS3
 (
AT91C_PIO_PB1
)

2093 
	#AT91C_PIO_PB10
 (1 << 10)

2094 
	#AT91C_PB10_RK1
 (
AT91C_PIO_PB10
)

2095 
	#AT91C_PB10_TIOA5
 (
AT91C_PIO_PB10
)

2096 
	#AT91C_PIO_PB11
 (1 << 11)

2097 
	#AT91C_PB11_RF1
 (
AT91C_PIO_PB11
)

2098 
	#AT91C_PB11_TIOB5
 (
AT91C_PIO_PB11
)

2099 
	#AT91C_PIO_PB12
 (1 << 12)

2100 
	#AT91C_PB12_TF2
 (
AT91C_PIO_PB12
)

2101 
	#AT91C_PB12_ETX2
 (
AT91C_PIO_PB12
)

2102 
	#AT91C_PIO_PB13
 (1 << 13)

2103 
	#AT91C_PB13_TK2
 (
AT91C_PIO_PB13
)

2104 
	#AT91C_PB13_ETX3
 (
AT91C_PIO_PB13
)

2105 
	#AT91C_PIO_PB14
 (1 << 14)

2106 
	#AT91C_PB14_TD2
 (
AT91C_PIO_PB14
)

2107 
	#AT91C_PB14_ETXER
 (
AT91C_PIO_PB14
)

2108 
	#AT91C_PIO_PB15
 (1 << 15)

2109 
	#AT91C_PB15_RD2
 (
AT91C_PIO_PB15
)

2110 
	#AT91C_PB15_ERX2
 (
AT91C_PIO_PB15
)

2111 
	#AT91C_PIO_PB16
 (1 << 16)

2112 
	#AT91C_PB16_RK2
 (
AT91C_PIO_PB16
)

2113 
	#AT91C_PB16_ERX3
 (
AT91C_PIO_PB16
)

2114 
	#AT91C_PIO_PB17
 (1 << 17)

2115 
	#AT91C_PB17_RF2
 (
AT91C_PIO_PB17
)

2116 
	#AT91C_PB17_ERXDV
 (
AT91C_PIO_PB17
)

2117 
	#AT91C_PIO_PB18
 (1 << 18)

2118 
	#AT91C_PB18_RI1
 (
AT91C_PIO_PB18
)

2119 
	#AT91C_PB18_ECOL
 (
AT91C_PIO_PB18
)

2120 
	#AT91C_PIO_PB19
 (1 << 19)

2121 
	#AT91C_PB19_DTR1
 (
AT91C_PIO_PB19
)

2122 
	#AT91C_PB19_ERXCK
 (
AT91C_PIO_PB19
)

2123 
	#AT91C_PIO_PB2
 (1 << 2)

2124 
	#AT91C_PB2_TD0
 (
AT91C_PIO_PB2
)

2125 
	#AT91C_PB2_SCK3
 (
AT91C_PIO_PB2
)

2126 
	#AT91C_PIO_PB20
 (1 << 20)

2127 
	#AT91C_PB20_TXD1
 (
AT91C_PIO_PB20
)

2128 
	#AT91C_PIO_PB21
 (1 << 21)

2129 
	#AT91C_PB21_RXD1
 (
AT91C_PIO_PB21
)

2130 
	#AT91C_PIO_PB22
 (1 << 22)

2131 
	#AT91C_PB22_SCK1
 (
AT91C_PIO_PB22
)

2132 
	#AT91C_PIO_PB23
 (1 << 23)

2133 
	#AT91C_PB23_DCD1
 (
AT91C_PIO_PB23
)

2134 
	#AT91C_PIO_PB24
 (1 << 24)

2135 
	#AT91C_PB24_CTS1
 (
AT91C_PIO_PB24
)

2136 
	#AT91C_PIO_PB25
 (1 << 25)

2137 
	#AT91C_PB25_DSR1
 (
AT91C_PIO_PB25
)

2138 
	#AT91C_PB25_EF100
 (
AT91C_PIO_PB25
)

2139 
	#AT91C_PIO_PB26
 (1 << 26)

2140 
	#AT91C_PB26_RTS1
 (
AT91C_PIO_PB26
)

2141 
	#AT91C_PIO_PB27
 (1 << 27)

2142 
	#AT91C_PB27_PCK0
 (
AT91C_PIO_PB27
)

2143 
	#AT91C_PIO_PB28
 (1 << 28)

2144 
	#AT91C_PB28_FIQ
 (
AT91C_PIO_PB28
)

2145 
	#AT91C_PIO_PB29
 (1 << 29)

2146 
	#AT91C_PB29_IRQ0
 (
AT91C_PIO_PB29
)

2147 
	#AT91C_PIO_PB3
 (1 << 3)

2148 
	#AT91C_PB3_RD0
 (
AT91C_PIO_PB3
)

2149 
	#AT91C_PB3_MCDA1
 (
AT91C_PIO_PB3
)

2150 
	#AT91C_PIO_PB4
 (1 << 4)

2151 
	#AT91C_PB4_RK0
 (
AT91C_PIO_PB4
)

2152 
	#AT91C_PB4_MCDA2
 (
AT91C_PIO_PB4
)

2153 
	#AT91C_PIO_PB5
 (1 << 5)

2154 
	#AT91C_PB5_RF0
 (
AT91C_PIO_PB5
)

2155 
	#AT91C_PB5_MCDA3
 (
AT91C_PIO_PB5
)

2156 
	#AT91C_PIO_PB6
 (1 << 6)

2157 
	#AT91C_PB6_TF1
 (
AT91C_PIO_PB6
)

2158 
	#AT91C_PB6_TIOA3
 (
AT91C_PIO_PB6
)

2159 
	#AT91C_PIO_PB7
 (1 << 7)

2160 
	#AT91C_PB7_TK1
 (
AT91C_PIO_PB7
)

2161 
	#AT91C_PB7_TIOB3
 (
AT91C_PIO_PB7
)

2162 
	#AT91C_PIO_PB8
 (1 << 8)

2163 
	#AT91C_PB8_TD1
 (
AT91C_PIO_PB8
)

2164 
	#AT91C_PB8_TIOA4
 (
AT91C_PIO_PB8
)

2165 
	#AT91C_PIO_PB9
 (1 << 9)

2166 
	#AT91C_PB9_RD1
 (
AT91C_PIO_PB9
)

2167 
	#AT91C_PB9_TIOB4
 (
AT91C_PIO_PB9
)

2168 
	#AT91C_PIO_PC0
 (1 << 0)

2169 
	#AT91C_PC0_BFCK
 (
AT91C_PIO_PC0
)

2170 
	#AT91C_PIO_PC1
 (1 << 1)

2171 
	#AT91C_PC1_BFRDY_SMOE
 (
AT91C_PIO_PC1
)

2172 
	#AT91C_PIO_PC10
 (1 << 10)

2173 
	#AT91C_PC10_NCS4_CFCS
 (
AT91C_PIO_PC10
)

2174 
	#AT91C_PIO_PC11
 (1 << 11)

2175 
	#AT91C_PC11_NCS5_CFCE1
 (
AT91C_PIO_PC11
)

2176 
	#AT91C_PIO_PC12
 (1 << 12)

2177 
	#AT91C_PC12_NCS6_CFCE2
 (
AT91C_PIO_PC12
)

2178 
	#AT91C_PIO_PC13
 (1 << 13)

2179 
	#AT91C_PC13_NCS7
 (
AT91C_PIO_PC13
)

2180 
	#AT91C_PIO_PC14
 (1 << 14)

2181 
	#AT91C_PIO_PC15
 (1 << 15)

2182 
	#AT91C_PIO_PC16
 (1 << 16)

2183 
	#AT91C_PC16_D16
 (
AT91C_PIO_PC16
)

2184 
	#AT91C_PIO_PC17
 (1 << 17)

2185 
	#AT91C_PC17_D17
 (
AT91C_PIO_PC17
)

2186 
	#AT91C_PIO_PC18
 (1 << 18)

2187 
	#AT91C_PC18_D18
 (
AT91C_PIO_PC18
)

2188 
	#AT91C_PIO_PC19
 (1 << 19)

2189 
	#AT91C_PC19_D19
 (
AT91C_PIO_PC19
)

2190 
	#AT91C_PIO_PC2
 (1 << 2)

2191 
	#AT91C_PC2_BFAVD
 (
AT91C_PIO_PC2
)

2192 
	#AT91C_PIO_PC20
 (1 << 20)

2193 
	#AT91C_PC20_D20
 (
AT91C_PIO_PC20
)

2194 
	#AT91C_PIO_PC21
 (1 << 21)

2195 
	#AT91C_PC21_D21
 (
AT91C_PIO_PC21
)

2196 
	#AT91C_PIO_PC22
 (1 << 22)

2197 
	#AT91C_PC22_D22
 (
AT91C_PIO_PC22
)

2198 
	#AT91C_PIO_PC23
 (1 << 23)

2199 
	#AT91C_PC23_D23
 (
AT91C_PIO_PC23
)

2200 
	#AT91C_PIO_PC24
 (1 << 24)

2201 
	#AT91C_PC24_D24
 (
AT91C_PIO_PC24
)

2202 
	#AT91C_PIO_PC25
 (1 << 25)

2203 
	#AT91C_PC25_D25
 (
AT91C_PIO_PC25
)

2204 
	#AT91C_PIO_PC26
 (1 << 26)

2205 
	#AT91C_PC26_D26
 (
AT91C_PIO_PC26
)

2206 
	#AT91C_PIO_PC27
 (1 << 27)

2207 
	#AT91C_PC27_D27
 (
AT91C_PIO_PC27
)

2208 
	#AT91C_PIO_PC28
 (1 << 28)

2209 
	#AT91C_PC28_D28
 (
AT91C_PIO_PC28
)

2210 
	#AT91C_PIO_PC29
 (1 << 29)

2211 
	#AT91C_PC29_D29
 (
AT91C_PIO_PC29
)

2212 
	#AT91C_PIO_PC3
 (1 << 3)

2213 
	#AT91C_PC3_BFBAA_SMWE
 (
AT91C_PIO_PC3
)

2214 
	#AT91C_PIO_PC30
 (1 << 30)

2215 
	#AT91C_PC30_D30
 (
AT91C_PIO_PC30
)

2216 
	#AT91C_PIO_PC31
 (1 << 31)

2217 
	#AT91C_PC31_D31
 (
AT91C_PIO_PC31
)

2218 
	#AT91C_PIO_PC4
 (1 << 4)

2219 
	#AT91C_PC4_BFOE
 (
AT91C_PIO_PC4
)

2220 
	#AT91C_PIO_PC5
 (1 << 5)

2221 
	#AT91C_PC5_BFWE
 (
AT91C_PIO_PC5
)

2222 
	#AT91C_PIO_PC6
 (1 << 6)

2223 
	#AT91C_PC6_NWAIT
 (
AT91C_PIO_PC6
)

2224 
	#AT91C_PIO_PC7
 (1 << 7)

2225 
	#AT91C_PC7_A23
 (
AT91C_PIO_PC7
)

2226 
	#AT91C_PIO_PC8
 (1 << 8)

2227 
	#AT91C_PC8_A24
 (
AT91C_PIO_PC8
)

2228 
	#AT91C_PIO_PC9
 (1 << 9)

2229 
	#AT91C_PC9_A25_CFRNW
 (
AT91C_PIO_PC9
)

2230 
	#AT91C_PIO_PD0
 (1 << 0)

2231 
	#AT91C_PD0_ETX0
 (
AT91C_PIO_PD0
)

2232 
	#AT91C_PIO_PD1
 (1 << 1)

2233 
	#AT91C_PD1_ETX1
 (
AT91C_PIO_PD1
)

2234 
	#AT91C_PIO_PD10
 (1 << 10)

2235 
	#AT91C_PD10_PCK3
 (
AT91C_PIO_PD10
)

2236 
	#AT91C_PD10_TPS1
 (
AT91C_PIO_PD10
)

2237 
	#AT91C_PIO_PD11
 (1 << 11)

2238 
	#AT91C_PD11_
 (
AT91C_PIO_PD11
)

2239 
	#AT91C_PD11_TPS2
 (
AT91C_PIO_PD11
)

2240 
	#AT91C_PIO_PD12
 (1 << 12)

2241 
	#AT91C_PD12_
 (
AT91C_PIO_PD12
)

2242 
	#AT91C_PD12_TPK0
 (
AT91C_PIO_PD12
)

2243 
	#AT91C_PIO_PD13
 (1 << 13)

2244 
	#AT91C_PD13_
 (
AT91C_PIO_PD13
)

2245 
	#AT91C_PD13_TPK1
 (
AT91C_PIO_PD13
)

2246 
	#AT91C_PIO_PD14
 (1 << 14)

2247 
	#AT91C_PD14_
 (
AT91C_PIO_PD14
)

2248 
	#AT91C_PD14_TPK2
 (
AT91C_PIO_PD14
)

2249 
	#AT91C_PIO_PD15
 (1 << 15)

2250 
	#AT91C_PD15_TD0
 (
AT91C_PIO_PD15
)

2251 
	#AT91C_PD15_TPK3
 (
AT91C_PIO_PD15
)

2252 
	#AT91C_PIO_PD16
 (1 << 16)

2253 
	#AT91C_PD16_TD1
 (
AT91C_PIO_PD16
)

2254 
	#AT91C_PD16_TPK4
 (
AT91C_PIO_PD16
)

2255 
	#AT91C_PIO_PD17
 (1 << 17)

2256 
	#AT91C_PD17_TD2
 (
AT91C_PIO_PD17
)

2257 
	#AT91C_PD17_TPK5
 (
AT91C_PIO_PD17
)

2258 
	#AT91C_PIO_PD18
 (1 << 18)

2259 
	#AT91C_PD18_NPCS1
 (
AT91C_PIO_PD18
)

2260 
	#AT91C_PD18_TPK6
 (
AT91C_PIO_PD18
)

2261 
	#AT91C_PIO_PD19
 (1 << 19)

2262 
	#AT91C_PD19_NPCS2
 (
AT91C_PIO_PD19
)

2263 
	#AT91C_PD19_TPK7
 (
AT91C_PIO_PD19
)

2264 
	#AT91C_PIO_PD2
 (1 << 2)

2265 
	#AT91C_PD2_ETX2
 (
AT91C_PIO_PD2
)

2266 
	#AT91C_PIO_PD20
 (1 << 20)

2267 
	#AT91C_PD20_NPCS3
 (
AT91C_PIO_PD20
)

2268 
	#AT91C_PD20_TPK8
 (
AT91C_PIO_PD20
)

2269 
	#AT91C_PIO_PD21
 (1 << 21)

2270 
	#AT91C_PD21_RTS0
 (
AT91C_PIO_PD21
)

2271 
	#AT91C_PD21_TPK9
 (
AT91C_PIO_PD21
)

2272 
	#AT91C_PIO_PD22
 (1 << 22)

2273 
	#AT91C_PD22_RTS1
 (
AT91C_PIO_PD22
)

2274 
	#AT91C_PD22_TPK10
 (
AT91C_PIO_PD22
)

2275 
	#AT91C_PIO_PD23
 (1 << 23)

2276 
	#AT91C_PD23_RTS2
 (
AT91C_PIO_PD23
)

2277 
	#AT91C_PD23_TPK11
 (
AT91C_PIO_PD23
)

2278 
	#AT91C_PIO_PD24
 (1 << 24)

2279 
	#AT91C_PD24_RTS3
 (
AT91C_PIO_PD24
)

2280 
	#AT91C_PD24_TPK12
 (
AT91C_PIO_PD24
)

2281 
	#AT91C_PIO_PD25
 (1 << 25)

2282 
	#AT91C_PD25_DTR1
 (
AT91C_PIO_PD25
)

2283 
	#AT91C_PD25_TPK13
 (
AT91C_PIO_PD25
)

2284 
	#AT91C_PIO_PD26
 (1 << 26)

2285 
	#AT91C_PD26_TPK14
 (
AT91C_PIO_PD26
)

2286 
	#AT91C_PIO_PD27
 (1 << 27)

2287 
	#AT91C_PD27_TPK15
 (
AT91C_PIO_PD27
)

2288 
	#AT91C_PIO_PD3
 (1 << 3)

2289 
	#AT91C_PD3_ETX3
 (
AT91C_PIO_PD3
)

2290 
	#AT91C_PIO_PD4
 (1 << 4)

2291 
	#AT91C_PD4_ETXEN
 (
AT91C_PIO_PD4
)

2292 
	#AT91C_PIO_PD5
 (1 << 5)

2293 
	#AT91C_PD5_ETXER
 (
AT91C_PIO_PD5
)

2294 
	#AT91C_PIO_PD6
 (1 << 6)

2295 
	#AT91C_PD6_DTXD
 (
AT91C_PIO_PD6
)

2296 
	#AT91C_PIO_PD7
 (1 << 7)

2297 
	#AT91C_PD7_PCK0
 (
AT91C_PIO_PD7
)

2298 
	#AT91C_PD7_TSYNC
 (
AT91C_PIO_PD7
)

2299 
	#AT91C_PIO_PD8
 (1 << 8)

2300 
	#AT91C_PD8_PCK1
 (
AT91C_PIO_PD8
)

2301 
	#AT91C_PD8_TCLK
 (
AT91C_PIO_PD8
)

2302 
	#AT91C_PIO_PD9
 (1 << 9)

2303 
	#AT91C_PD9_PCK2
 (
AT91C_PIO_PD9
)

2304 
	#AT91C_PD9_TPS0
 (
AT91C_PIO_PD9
)

2305 

	)

2309 
	#AT91C_ID_FIQ
 ( 0)

2310 
	#AT91C_ID_SYS
 ( 1)

2311 
	#AT91C_ID_PIOA
 ( 2)

2312 
	#AT91C_ID_PIOB
 ( 3)

2313 
	#AT91C_ID_PIOC
 ( 4)

2314 
	#AT91C_ID_PIOD
 ( 5)

2315 
	#AT91C_ID_US0
 ( 6)

2316 
	#AT91C_ID_US1
 ( 7)

2317 
	#AT91C_ID_US2
 ( 8)

2318 
	#AT91C_ID_US3
 ( 9)

2319 
	#AT91C_ID_MCI
 (10)

2320 
	#AT91C_ID_UDP
 (11)

2321 
	#AT91C_ID_TWI
 (12)

2322 
	#AT91C_ID_SPI
 (13)

2323 
	#AT91C_ID_SSC0
 (14)

2324 
	#AT91C_ID_SSC1
 (15)

2325 
	#AT91C_ID_SSC2
 (16)

2326 
	#AT91C_ID_TC0
 (17)

2327 
	#AT91C_ID_TC1
 (18)

2328 
	#AT91C_ID_TC2
 (19)

2329 
	#AT91C_ID_TC3
 (20)

2330 
	#AT91C_ID_TC4
 (21)

2331 
	#AT91C_ID_TC5
 (22)

2332 
	#AT91C_ID_UHP
 (23)

2333 
	#AT91C_ID_EMAC
 (24)

2334 
	#AT91C_ID_IRQ0
 (25)

2335 
	#AT91C_ID_IRQ1
 (26)

2336 
	#AT91C_ID_IRQ2
 (27)

2337 
	#AT91C_ID_IRQ3
 (28)

2338 
	#AT91C_ID_IRQ4
 (29)

2339 
	#AT91C_ID_IRQ5
 (30)

2340 
	#AT91C_ID_IRQ6
 (31)

2341 

	)

2345 
	#AT91C_BASE_SYS
 (0xFFFFF000)

2346 
	#AT91C_BASE_MC
 (0xFFFFFF00)

2347 
	#AT91C_BASE_RTC
 (0xFFFFFE00)

2348 
	#AT91C_BASE_ST
 (0xFFFFFD00)

2349 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

2350 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

2351 
	#AT91C_BASE_PIOD
 (0xFFFFFA00)

2352 
	#AT91C_BASE_PIOC
 (0xFFFFF800)

2353 
	#AT91C_BASE_PIOB
 (0xFFFFF600)

2354 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

2355 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

2356 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

2357 
	#AT91C_BASE_AIC
 (0xFFFFF000)

2358 
	#AT91C_BASE_PDC_SPI
 (0xFFFE0100)

2359 
	#AT91C_BASE_SPI
 (0xFFFE0000)

2360 
	#AT91C_BASE_PDC_SSC2
 (0xFFFD8100)

2361 
	#AT91C_BASE_SSC2
 (0xFFFD8000)

2362 
	#AT91C_BASE_PDC_SSC1
 (0xFFFD4100)

2363 
	#AT91C_BASE_SSC1
 (0xFFFD4000)

2364 
	#AT91C_BASE_PDC_SSC0
 (0xFFFD0100)

2365 
	#AT91C_BASE_SSC0
 (0xFFFD0000)

2366 
	#AT91C_BASE_PDC_US3
 (0xFFFCC100)

2367 
	#AT91C_BASE_US3
 (0xFFFCC000)

2368 
	#AT91C_BASE_PDC_US2
 (0xFFFC8100)

2369 
	#AT91C_BASE_US2
 (0xFFFC8000)

2370 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

2371 
	#AT91C_BASE_US1
 (0xFFFC4000)

2372 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

2373 
	#AT91C_BASE_US0
 (0xFFFC0000)

2374 
	#AT91C_BASE_TWI
 (0xFFFB8000)

2375 
	#AT91C_BASE_PDC_MCI
 (0xFFFB4100)

2376 
	#AT91C_BASE_MCI
 (0xFFFB4000)

2377 
	#AT91C_BASE_UDP
 (0xFFFB0000)

2378 
	#AT91C_BASE_TC5
 (0xFFFA4080)

2379 
	#AT91C_BASE_TC4
 (0xFFFA4040)

2380 
	#AT91C_BASE_TC3
 (0xFFFA4000)

2381 
	#AT91C_BASE_TCB1
 (0xFFFA4080)

2382 
	#AT91C_BASE_TC2
 (0xFFFA0080)

2383 
	#AT91C_BASE_TC1
 (0xFFFA0040)

2384 
	#AT91C_BASE_TC0
 (0xFFFA0000)

2385 
	#AT91C_BASE_TCB0
 (0xFFFA0000)

2386 
	#AT91C_BASE_UHP
 (0x00300000)

2387 
	#AT91C_BASE_EMAC
 (0xFFFBC000)

2388 
	#AT91C_BASE_EBI
 (0xFFFFFF60)

2389 
	#AT91C_BASE_SMC2
 (0xFFFFFF70)

2390 
	#AT91C_BASE_SDRC
 (0xFFFFFF90)

2391 
	#AT91C_BASE_BFC
 (0xFFFFFFC0)

2392 

	)

2396 
	#AT91C_ISRAM
 (0x00200000)

2397 
	#AT91C_ISRAM_SIZE
 (0x00004000)

2398 
	#AT91C_IROM
 (0x00100000)

2399 
	#AT91C_IROM_SIZE
 (0x00020000)

2400 

	)

	@linux/at91/image/dfboot/src/include/led.h

25 #i‚de‡
__LED_H


26 
	#__LED_H


	)

28 #i‚def 
__ASSEMBLY__


29 
LED_öô
 ();

30 
LED_£t
(
Àd
);

31 
ªd_LED_⁄
();

32 
ªd_LED_off
();

33 
gªí_LED_⁄
();

34 
gªí_LED_off
();

35 
yñlow_LED_⁄
();

36 
yñlow_LED_off
();

37 
LED_blök
(
Àd
);

39 .
LED_öô


40 .
LED_£t


41 .
LED_blök


42 .
ªd_LED_⁄


43 .
ªd_LED_off


44 .
yñlow_LED_⁄


45 .
yñlow_LED_off


46 .
gªí_LED_⁄


47 .
gªí_LED_off


	@linux/at91/image/dfboot/src/include/lib_AT91RM9200.h

30 #i‚de‡
lib_AT91RM9200_H


31 
	#lib_AT91RM9200_H


	)

40 
ölöe
 
	$AT91F_PDC_SëNextRx
 (

41 
AT91PS_PDC
 
pPDC
,

42 *
addªss
,

43 
byãs
)

45 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

46 
pPDC
->
PDC_RNCR
 = 
byãs
;

47 
	}
}

53 
ölöe
 
	$AT91F_PDC_SëNextTx
 (

54 
AT91PS_PDC
 
pPDC
,

55 *
addªss
,

56 
byãs
)

58 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

59 
pPDC
->
PDC_TNCR
 = 
byãs
;

60 
	}
}

66 
ölöe
 
	$AT91F_PDC_SëRx
 (

67 
AT91PS_PDC
 
pPDC
,

68 *
addªss
,

69 
byãs
)

71 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

72 
pPDC
->
PDC_RCR
 = 
byãs
;

73 
	}
}

79 
ölöe
 
	$AT91F_PDC_SëTx
 (

80 
AT91PS_PDC
 
pPDC
,

81 *
addªss
,

82 
byãs
)

84 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

85 
pPDC
->
PDC_TCR
 = 
byãs
;

86 
	}
}

92 
ölöe
 
	$AT91F_PDC_E«bÀTx
 (

93 
AT91PS_PDC
 
pPDC
 )

95 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

96 
	}
}

102 
ölöe
 
	$AT91F_PDC_E«bÀRx
 (

103 
AT91PS_PDC
 
pPDC
 )

105 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

106 
	}
}

112 
ölöe
 
	$AT91F_PDC_DißbÀTx
 (

113 
AT91PS_PDC
 
pPDC
 )

115 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

116 
	}
}

122 
ölöe
 
	$AT91F_PDC_DißbÀRx
 (

123 
AT91PS_PDC
 
pPDC
 )

125 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

126 
	}
}

132 
ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

133 
AT91PS_PDC
 
pPDC
 )

135  !(
pPDC
->
PDC_TCR
);

136 
	}
}

142 
ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

143 
AT91PS_PDC
 
pPDC
 )

145  !(
pPDC
->
PDC_TNCR
);

146 
	}
}

152 
ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

153 
AT91PS_PDC
 
pPDC
 )

155  !(
pPDC
->
PDC_RCR
);

156 
	}
}

162 
ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

163 
AT91PS_PDC
 
pPDC
 )

165  !(
pPDC
->
PDC_RNCR
);

166 
	}
}

172 
ölöe
 
	$AT91F_PDC_O≥n
 (

173 
AT91PS_PDC
 
pPDC
)

176 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

177 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

180 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

181 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

182 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

183 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

186 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

187 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

188 
	}
}

194 
ölöe
 
	$AT91F_PDC_Clo£
 (

195 
AT91PS_PDC
 
pPDC
)

198 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

199 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

202 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

203 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

204 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

205 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

207 
	}
}

213 
ölöe
 
	$AT91F_PDC_SídFøme
(

214 
AT91PS_PDC
 
pPDC
,

215 *
pBuf„r
,

216 
szBuf„r
,

217 *
pNextBuf„r
,

218 
szNextBuf„r
 )

220 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

222 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

223 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

226 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

228 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

235 
	}
}

241 
ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
pBuf„r
,

244 
szBuf„r
,

245 *
pNextBuf„r
,

246 
szNextBuf„r
 )

248 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

250 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

251 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

254 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

256 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

263 
	}
}

271 
ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

272 
AT91PS_DBGU
 
pDbgu
,

273 
Êag
)

275 
pDbgu
->
DBGU_IER
 = 
Êag
;

276 
	}
}

282 
ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

283 
AT91PS_DBGU
 
pDbgu
,

284 
Êag
)

286 
pDbgu
->
DBGU_IDR
 = 
Êag
;

287 
	}
}

293 
ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

294 
AT91PS_DBGU
 
pDbgu
)

296  
pDbgu
->
DBGU_IMR
;

297 
	}
}

303 
ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

304 
AT91PS_DBGU
 
pDbgu
,

305 
Êag
)

307  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

308 
	}
}

317 
ölöe
 
	$AT91F_RTC_I¡îru±E«bÀ
(

318 
AT91PS_RTC
 
pRtc
,

319 
Êag
)

321 
pRtc
->
RTC_IER
 = 
Êag
;

322 
	}
}

328 
ölöe
 
	$AT91F_RTC_I¡îru±DißbÀ
(

329 
AT91PS_RTC
 
pRtc
,

330 
Êag
)

332 
pRtc
->
RTC_IDR
 = 
Êag
;

333 
	}
}

339 
ölöe
 
	$AT91F_RTC_GëI¡îru±MaskSètus
(

340 
AT91PS_RTC
 
pRtc
)

342  
pRtc
->
RTC_IMR
;

343 
	}
}

349 
ölöe
 
	$AT91F_RTC_IsI¡îru±Masked
(

350 
AT91PS_RTC
 
pRtc
,

351 
Êag
)

353  (
	`AT91F_RTC_GëI¡îru±MaskSètus
(
pRtc
Ë& 
Êag
);

354 
	}
}

364 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

365 
AT91C_SSC_CKS_DIV
 +\

366 
AT91C_SSC_CKO_CONTINOUS
 +\

367 
AT91C_SSC_CKG_NONE
 +\

368 
AT91C_SSC_START_FALL_RF
 +\

369 
AT91C_SSC_STTOUT
 +\

370 ((1<<16Ë& 
AT91C_SSC_STTDLY
) +\

371 ((((
nb_bô_by_¶Ÿ
*
nb_¶Ÿ_by_‰ame
)/2)-1Ë<<24))

	)

377 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

378 (
nb_bô_by_¶Ÿ
-1) +\

379 
AT91C_SSC_MSBF
 +\

380 (((
nb_¶Ÿ_by_‰ame
-1)<<8Ë& 
AT91C_SSC_DATNB
) +\

381 (((
nb_bô_by_¶Ÿ
-1)<<16Ë& 
AT91C_SSC_FSLEN
) +\

382 
AT91C_SSC_FSOS_NEGATIVE
)

	)

389 
ölöe
 
	$AT91F_SSC_SëBaudøã
 (

390 
AT91PS_SSC
 
pSSC
,

391 
maöClock
,

392 
•ìd
)

394 
baud_vÆue
;

396 i‡(
•ìd
 == 0)

397 
baud_vÆue
 = 0;

400 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

401 i‡((
baud_vÆue
 % 10) >= 5)

402 
baud_vÆue
 = (baud_value / 10) + 1;

404 
baud_vÆue
 /= 10;

407 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

408 
	}
}

414 
ölöe
 
	$AT91F_SSC_C⁄figuª
 (

415 
AT91PS_SSC
 
pSSC
,

416 
sy°_˛ock
,

417 
baud_øã
,

418 
˛ock_rx
,

419 
mode_rx
,

420 
˛ock_tx
,

421 
mode_tx
)

424 
pSSC
->
SSC_IDR
 = () -1;

427 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

430 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

433 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

436 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

439 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

442 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

445 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

448 
	}
}

454 
ölöe
 
	$AT91F_SSC_E«bÀRx
 (

455 
AT91PS_SSC
 
pSSC
)

458 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

459 
	}
}

465 
ölöe
 
	$AT91F_SSC_DißbÀRx
 (

466 
AT91PS_SSC
 
pSSC
)

469 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

470 
	}
}

476 
ölöe
 
	$AT91F_SSC_E«bÀTx
 (

477 
AT91PS_SSC
 
pSSC
)

480 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

481 
	}
}

487 
ölöe
 
	$AT91F_SSC_DißbÀTx
 (

488 
AT91PS_SSC
 
pSSC
)

491 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

492 
	}
}

498 
ölöe
 
	$AT91F_SSC_E«bÀIt
 (

499 
AT91PS_SSC
 
pSSC
,

500 
Êag
)

503 
pSSC
->
SSC_IER
 = 
Êag
;

504 
	}
}

510 
ölöe
 
	$AT91F_SSC_DißbÀIt
 (

511 
AT91PS_SSC
 
pSSC
,

512 
Êag
)

515 
pSSC
->
SSC_IDR
 = 
Êag
;

516 
	}
}

522 
ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

523 
AT91PS_SSC
 
pSSC
,

524 *
pBuf„r
,

525 
szBuf„r
,

526 *
pNextBuf„r
,

527 
szNextBuf„r
 )

529  
	`AT91F_PDC_Re˚iveFøme
(

530 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

531 
pBuf„r
,

532 
szBuf„r
,

533 
pNextBuf„r
,

534 
szNextBuf„r
);

535 
	}
}

541 
ölöe
 
	$AT91F_SSC_SídFøme
(

542 
AT91PS_SSC
 
pSSC
,

543 *
pBuf„r
,

544 
szBuf„r
,

545 *
pNextBuf„r
,

546 
szNextBuf„r
 )

548  
	`AT91F_PDC_SídFøme
(

549 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

550 
pBuf„r
,

551 
szBuf„r
,

552 
pNextBuf„r
,

553 
szNextBuf„r
);

554 
	}
}

560 
ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

561 
AT91PS_SSC
 
pSsc
)

563  
pSsc
->
SSC_IMR
;

564 
	}
}

570 
ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

571 
AT91PS_SSC
 
pSsc
,

572 
Êag
)

574  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

575 
	}
}

584 
ölöe
 
	$AT91F_SPI_O≥n
 (

585 c⁄° 
nuŒ
)

589 
	}
}

595 
ölöe
 
	$AT91F_SPI_CfgCs
 (

596 
cs
,

597 
vÆ
)

600 *(
AT91C_SPI_CSR
 + 
cs
Ë
vÆ
;

601 
	}
}

607 
ölöe
 
	$AT91F_SPI_E«bÀIt
 (

608 
AT91PS_SPI
 
pSPI
,

609 
Êag
)

612 
pSPI
->
SPI_IER
 = 
Êag
;

613 
	}
}

619 
ölöe
 
	$AT91F_SPI_DißbÀIt
 (

620 
AT91PS_SPI
 
pSPI
,

621 
Êag
)

624 
pSPI
->
SPI_IDR
 = 
Êag
;

625 
	}
}

631 
ölöe
 
	$AT91F_SPI_Re£t
 (

632 
AT91PS_SPI
 
pSPI


636 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

637 
	}
}

643 
ölöe
 
	$AT91F_SPI_E«bÀ
 (

644 
AT91PS_SPI
 
pSPI


648 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

649 
	}
}

655 
ölöe
 
	$AT91F_SPI_DißbÀ
 (

656 
AT91PS_SPI
 
pSPI


660 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

661 
	}
}

667 
ölöe
 
	$AT91F_SPI_CfgMode
 (

668 
AT91PS_SPI
 
pSPI
,

669 
mode
)

672 
pSPI
->
SPI_MR
 = 
mode
;

673 
	}
}

679 
ölöe
 
	$AT91F_SPI_CfgPCS
 (

680 
AT91PS_SPI
 
pSPI
,

681 
PCS_Devi˚
)

684 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

685 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

686 
	}
}

692 
ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

693 
AT91PS_SPI
 
pSPI
,

694 *
pBuf„r
,

695 
szBuf„r
,

696 *
pNextBuf„r
,

697 
szNextBuf„r
 )

699  
	`AT91F_PDC_Re˚iveFøme
(

700 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

701 
pBuf„r
,

702 
szBuf„r
,

703 
pNextBuf„r
,

704 
szNextBuf„r
);

705 
	}
}

711 
ölöe
 
	$AT91F_SPI_SídFøme
(

712 
AT91PS_SPI
 
pSPI
,

713 *
pBuf„r
,

714 
szBuf„r
,

715 *
pNextBuf„r
,

716 
szNextBuf„r
 )

718  
	`AT91F_PDC_SídFøme
(

719 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

720 
pBuf„r
,

721 
szBuf„r
,

722 
pNextBuf„r
,

723 
szNextBuf„r
);

724 
	}
}

730 
ölöe
 
	$AT91F_SPI_Clo£
 (

731 
AT91PS_SPI
 
pSPI
)

734 
pSPI
->
SPI_CSR
[0] = 0 ;

735 
pSPI
->
SPI_CSR
[1] = 0 ;

736 
pSPI
->
SPI_CSR
[2] = 0 ;

737 
pSPI
->
SPI_CSR
[3] = 0 ;

740 
pSPI
->
SPI_MR
 = 0 ;

743 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

746 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

749 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

750 
	}
}

756 
ölöe
 
	$AT91F_SPI_PutCh¨
 (

757 
AT91PS_SPI
 
pSPI
,

758 
ch¨a˘î
,

759 
cs_numbî
 )

761 
vÆue_f‹_cs
;

762 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

763 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

764 
	}
}

770 
ölöe
 
	$AT91F_SPI_GëCh¨
 (

771 c⁄° 
AT91PS_SPI
 
pSPI
)

773 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

774 
	}
}

780 
ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

781 
AT91PS_SPI
 
pSpi
)

783  
pSpi
->
SPI_IMR
;

784 
	}
}

790 
ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

791 
AT91PS_SPI
 
pSpi
,

792 
Êag
)

794  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

795 
	}
}

804 
ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

805 
AT91PS_TC
 
pTc
,

806 
Êag
)

808 
pTc
->
TC_IER
 = 
Êag
;

809 
	}
}

815 
ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

816 
AT91PS_TC
 
pTc
,

817 
Êag
)

819 
pTc
->
TC_IDR
 = 
Êag
;

820 
	}
}

826 
ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

827 
AT91PS_TC
 
pTc
)

829  
pTc
->
TC_IMR
;

830 
	}
}

836 
ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

837 
AT91PS_TC
 
pTc
,

838 
Êag
)

840  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

841 
	}
}

850 
ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

851 
AT91PS_CKGR
 
pCKGR
,

852 
¶owClock
)

854  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

855 
	}
}

861 
ölöe
 
	$AT91F_PMC_GëPro˚ss‹Clock
 (

862 
AT91PS_PMC
 
pPMC
,

863 
AT91PS_CKGR
 
pCKGR
,

864 
¶owClock
)

866 
ªg
 = 
pPMC
->
PMC_MCKR
;

867 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

868 
∂lDividî
, 
∂lMu…ùlõr
;

870 
ªg
 & 
AT91C_PMC_CSS
) {

871 
AT91C_PMC_CSS_SLOW_CLK
:

872  
¶owClock
 / 
¥esˇÀr
;

873 
AT91C_PMC_CSS_MAIN_CLK
:

874  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

875 
AT91C_PMC_CSS_PLLA_CLK
:

876 
ªg
 = 
pCKGR
->
CKGR_PLLAR
;

877 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIVA
);

878 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MULA
) >> 16) + 1;

879 i‡(
ªg
 & 
AT91C_CKGR_SRCA
)

880  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

882  
¶owClock
 / 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

883 
AT91C_PMC_CSS_PLLB_CLK
:

884 
ªg
 = 
pCKGR
->
CKGR_PLLBR
;

885 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIVB
);

886 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MULB
) >> 16) + 1;

887  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

890 
	}
}

896 
ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

897 
AT91PS_PMC
 
pPMC
,

898 
AT91PS_CKGR
 
pCKGR
,

899 
¶owClock
)

901  
	`AT91F_PMC_GëPro˚ss‹Clock
(
pPMC
, 
pCKGR
, 
¶owClock
) /

902 (((
pPMC
->
PMC_MCKR
 & 
AT91C_PMC_MDIV
) >> 8)+1);

903 
	}
}

909 
ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

910 
AT91PS_PMC
 
pPMC
,

911 
≥rùhIds
)

913 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

914 
	}
}

920 
ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

921 
AT91PS_PMC
 
pPMC
,

922 
≥rùhIds
)

924 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

925 
	}
}

931 
ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

932 
AT91PS_PMC
 
pPMC
,

933 
pck
,

934 
ccs
,

935 
¥es
)

937 
pPMC
->
PMC_PCKR
[
pck
] = 
ccs
 | 
¥es
;

938 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

939 
	}
}

945 
ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

946 
AT91PS_PMC
 
pPMC
,

947 
pck
)

949 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

950 
	}
}

959 
ölöe
 
	$AT91F_PIO_CfgPîùh
(

960 
AT91PS_PIO
 
pPio
,

961 
≥rùhAE«bÀ
,

962 
≥rùhBE«bÀ
)

965 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

966 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

967 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

968 
	}
}

974 
ölöe
 
	$AT91F_PIO_CfgOuçut
(

975 
AT91PS_PIO
 
pPio
,

976 
pioE«bÀ
)

978 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

979 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

980 
	}
}

986 
ölöe
 
	$AT91F_PIO_CfgI≈ut
(

987 
AT91PS_PIO
 
pPio
,

988 
öputE«bÀ
)

991 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

992 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

993 
	}
}

999 
ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

1000 
AT91PS_PIO
 
pPio
,

1001 
mu…iDrvE«bÀ
)

1004 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

1005 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

1006 
	}
}

1012 
ölöe
 
	$AT91F_PIO_CfgPuŒup
(

1013 
AT91PS_PIO
 
pPio
,

1014 
puŒupE«bÀ
)

1017 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

1018 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

1019 
	}
}

1025 
ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

1026 
AT91PS_PIO
 
pPio
,

1027 
dúe˘Drive
)

1031 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

1032 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

1033 
	}
}

1039 
ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

1040 
AT91PS_PIO
 
pPio
,

1041 
öputFûãr
)

1045 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

1046 
pPio
->
PIO_IFER
 = 
öputFûãr
;

1047 
	}
}

1053 
ölöe
 
	$AT91F_PIO_GëI≈ut
(

1054 
AT91PS_PIO
 
pPio
)

1056  
pPio
->
PIO_PDSR
;

1057 
	}
}

1063 
ölöe
 
	$AT91F_PIO_IsI≈utSë
(

1064 
AT91PS_PIO
 
pPio
,

1065 
Êag
)

1067  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

1068 
	}
}

1075 
ölöe
 
	$AT91F_PIO_SëOuçut
(

1076 
AT91PS_PIO
 
pPio
,

1077 
Êag
)

1079 
pPio
->
PIO_SODR
 = 
Êag
;

1080 
	}
}

1086 
ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

1087 
AT91PS_PIO
 
pPio
,

1088 
Êag
)

1090 
pPio
->
PIO_CODR
 = 
Êag
;

1091 
	}
}

1097 
ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

1098 
AT91PS_PIO
 
pPio
,

1099 
Êag
)

1101 
pPio
->
PIO_ODSR
 = 
Êag
;

1102 
	}
}

1108 
ölöe
 
	$AT91F_PIO_E«bÀ
(

1109 
AT91PS_PIO
 
pPio
,

1110 
Êag
)

1112 
pPio
->
PIO_PER
 = 
Êag
;

1113 
	}
}

1119 
ölöe
 
	$AT91F_PIO_DißbÀ
(

1120 
AT91PS_PIO
 
pPio
,

1121 
Êag
)

1123 
pPio
->
PIO_PDR
 = 
Êag
;

1124 
	}
}

1130 
ölöe
 
	$AT91F_PIO_GëSètus
(

1131 
AT91PS_PIO
 
pPio
)

1133  
pPio
->
PIO_PSR
;

1134 
	}
}

1140 
ölöe
 
	$AT91F_PIO_IsSë
(

1141 
AT91PS_PIO
 
pPio
,

1142 
Êag
)

1144  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

1145 
	}
}

1151 
ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

1152 
AT91PS_PIO
 
pPio
,

1153 
Êag
)

1155 
pPio
->
PIO_OER
 = 
Êag
;

1156 
	}
}

1162 
ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

1163 
AT91PS_PIO
 
pPio
,

1164 
Êag
)

1166 
pPio
->
PIO_ODR
 = 
Êag
;

1167 
	}
}

1173 
ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

1174 
AT91PS_PIO
 
pPio
)

1176  
pPio
->
PIO_OSR
;

1177 
	}
}

1183 
ölöe
 
	$AT91F_PIO_IsOuçutSë
(

1184 
AT91PS_PIO
 
pPio
,

1185 
Êag
)

1187  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

1188 
	}
}

1194 
ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

1195 
AT91PS_PIO
 
pPio
,

1196 
Êag
)

1198 
pPio
->
PIO_IFER
 = 
Êag
;

1199 
	}
}

1205 
ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

1206 
AT91PS_PIO
 
pPio
,

1207 
Êag
)

1209 
pPio
->
PIO_IFDR
 = 
Êag
;

1210 
	}
}

1216 
ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

1217 
AT91PS_PIO
 
pPio
)

1219  
pPio
->
PIO_IFSR
;

1220 
	}
}

1226 
ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

1227 
AT91PS_PIO
 
pPio
,

1228 
Êag
)

1230  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

1231 
	}
}

1237 
ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

1238 
AT91PS_PIO
 
pPio
)

1240  
pPio
->
PIO_ODSR
;

1241 
	}
}

1247 
ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

1248 
AT91PS_PIO
 
pPio
,

1249 
Êag
)

1251 
pPio
->
PIO_IER
 = 
Êag
;

1252 
	}
}

1258 
ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

1259 
AT91PS_PIO
 
pPio
,

1260 
Êag
)

1262 
pPio
->
PIO_IDR
 = 
Êag
;

1263 
	}
}

1269 
ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

1270 
AT91PS_PIO
 
pPio
)

1272  
pPio
->
PIO_IMR
;

1273 
	}
}

1279 
ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

1280 
AT91PS_PIO
 
pPio
)

1282  
pPio
->
PIO_ISR
;

1283 
	}
}

1289 
ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

1290 
AT91PS_PIO
 
pPio
,

1291 
Êag
)

1293  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

1294 
	}
}

1300 
ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

1301 
AT91PS_PIO
 
pPio
,

1302 
Êag
)

1304  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

1305 
	}
}

1311 
ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

1312 
AT91PS_PIO
 
pPio
,

1313 
Êag
)

1315 
pPio
->
PIO_MDER
 = 
Êag
;

1316 
	}
}

1322 
ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

1323 
AT91PS_PIO
 
pPio
,

1324 
Êag
)

1326 
pPio
->
PIO_MDDR
 = 
Êag
;

1327 
	}
}

1333 
ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

1334 
AT91PS_PIO
 
pPio
)

1336  
pPio
->
PIO_MDSR
;

1337 
	}
}

1343 
ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

1344 
AT91PS_PIO
 
pPio
,

1345 
Êag
)

1347  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

1348 
	}
}

1354 
ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

1355 
AT91PS_PIO
 
pPio
,

1356 
Êag
)

1358 
pPio
->
PIO_ASR
 = 
Êag
;

1359 
	}
}

1365 
ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

1366 
AT91PS_PIO
 
pPio
,

1367 
Êag
)

1369 
pPio
->
PIO_BSR
 = 
Êag
;

1370 
	}
}

1376 
ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

1377 
AT91PS_PIO
 
pPio
)

1379  
pPio
->
PIO_ABSR
;

1380 
	}
}

1386 
ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

1387 
AT91PS_PIO
 
pPio
,

1388 
Êag
)

1390  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

1391 
	}
}

1397 
ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

1398 
AT91PS_PIO
 
pPio
,

1399 
Êag
)

1401 
pPio
->
PIO_OWER
 = 
Êag
;

1402 
	}
}

1408 
ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

1409 
AT91PS_PIO
 
pPio
,

1410 
Êag
)

1412 
pPio
->
PIO_OWDR
 = 
Êag
;

1413 
	}
}

1419 
ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

1420 
AT91PS_PIO
 
pPio
)

1422  
pPio
->
PIO_OWSR
;

1423 
	}
}

1429 
ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

1430 
AT91PS_PIO
 
pPio
,

1431 
Êag
)

1433  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

1434 
	}
}

1440 
ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

1441 
AT91PS_PIO
 
pPio
)

1443  
pPio
->
PIO_PPUSR
;

1444 
	}
}

1450 
ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

1451 
AT91PS_PIO
 
pPio
,

1452 
Êag
)

1454  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

1455 
	}
}

1461 
ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

1462 
AT91PS_PIO
 
pPio
,

1463 
Êag
)

1465  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

1466 
	}
}

1475 
ölöe
 
	$AT91F_TWI_E«bÀIt
 (

1476 
AT91PS_TWI
 
pTWI
,

1477 
Êag
)

1480 
pTWI
->
TWI_IER
 = 
Êag
;

1481 
	}
}

1487 
ölöe
 
	$AT91F_TWI_DißbÀIt
 (

1488 
AT91PS_TWI
 
pTWI
,

1489 
Êag
)

1492 
pTWI
->
TWI_IDR
 = 
Êag
;

1493 
	}
}

1499 
ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

1502 
pTWI
->
TWI_IDR
 = () -1;

1505 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

1508 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
 | 
AT91C_TWI_SVDIS
;

1510 
	}
}

1516 
ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

1517 
AT91PS_TWI
 
pTwi
)

1519  
pTwi
->
TWI_IMR
;

1520 
	}
}

1526 
ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

1527 
AT91PS_TWI
 
pTwi
,

1528 
Êag
)

1530  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

1531 
	}
}

1540 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1541 
AT91C_US_NBSTOP_1_BIT
 + \

1542 
AT91C_US_PAR_NONE
 + \

1543 
AT91C_US_CHRL_8_BITS
 + \

1544 
AT91C_US_CLKS_CLOCK
 )

	)

1547 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1548 
AT91C_US_NBSTOP_1_BIT
 + \

1549 
AT91C_US_PAR_NONE
 + \

1550 
AT91C_US_CHRL_8_BITS
 + \

1551 
AT91C_US_CLKS_EXT
 )

	)

1554 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

1555 
AT91C_US_USMODE_NORMAL
 + \

1556 
AT91C_US_NBSTOP_1_BIT
 + \

1557 
AT91C_US_PAR_NONE
 + \

1558 
AT91C_US_CHRL_8_BITS
 + \

1559 
AT91C_US_CLKS_CLOCK
 )

	)

1562 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1565 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

1566 
AT91C_US_CLKS_CLOCK
 +\

1567 
AT91C_US_NBSTOP_1_BIT
 + \

1568 
AT91C_US_PAR_EVEN
 + \

1569 
AT91C_US_CHRL_8_BITS
 + \

1570 
AT91C_US_CKLO
 +\

1571 
AT91C_US_OVER
)

	)

1574 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

1575 
AT91C_US_NBSTOP_1_BIT
 + \

1576 
AT91C_US_PAR_NONE
 + \

1577 
AT91C_US_CHRL_8_BITS
 + \

1578 
AT91C_US_CLKS_CLOCK
 )

	)

1584 
ölöe
 
	$AT91F_US_Baudøã
 (

1585 c⁄° 
maö_˛ock
,

1586 c⁄° 
baud_øã
)

1588 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1589 i‡((
baud_vÆue
 % 10) >= 5)

1590 
baud_vÆue
 = (baud_value / 10) + 1;

1592 
baud_vÆue
 /= 10;

1593  
baud_vÆue
;

1594 
	}
}

1600 
ölöe
 
	$AT91F_US_SëBaudøã
 (

1601 
AT91PS_USART
 
pUSART
,

1602 
maöClock
,

1603 
•ìd
)

1606 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

1607 
	}
}

1613 
ölöe
 
	$AT91F_US_SëTimegu¨d
 (

1614 
AT91PS_USART
 
pUSART
,

1615 
timegu¨d
)

1618 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

1619 
	}
}

1625 
ölöe
 
	$AT91F_US_E«bÀIt
 (

1626 
AT91PS_USART
 
pUSART
,

1627 
Êag
)

1630 
pUSART
->
US_IER
 = 
Êag
;

1631 
	}
}

1637 
ölöe
 
	$AT91F_US_DißbÀIt
 (

1638 
AT91PS_USART
 
pUSART
,

1639 
Êag
)

1642 
pUSART
->
US_IDR
 = 
Êag
;

1643 
	}
}

1649 
ölöe
 
	$AT91F_US_C⁄figuª
 (

1650 
AT91PS_USART
 
pUSART
,

1651 
maöClock
,

1652 
mode
 ,

1653 
baudR©e
 ,

1654 
timegu¨d
 )

1657 
pUSART
->
US_IDR
 = () -1;

1660 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

1663 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

1666 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

1669 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

1672 
pUSART
->
US_MR
 = 
mode
 ;

1674 
	}
}

1680 
ölöe
 
	$AT91F_US_E«bÀRx
 (

1681 
AT91PS_USART
 
pUSART
)

1684 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

1685 
	}
}

1691 
ölöe
 
	$AT91F_US_E«bÀTx
 (

1692 
AT91PS_USART
 
pUSART
)

1695 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

1696 
	}
}

1702 
ölöe
 
	$AT91F_US_Re£tRx
 (

1703 
AT91PS_USART
 
pUSART
)

1706 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

1708 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

1709 
	}
}

1715 
ölöe
 
	$AT91F_US_Re£tTx
 (

1716 
AT91PS_USART
 
pUSART
)

1719 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

1721 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

1722 
	}
}

1728 
ölöe
 
	$AT91F_US_DißbÀRx
 (

1729 
AT91PS_USART
 
pUSART
)

1732 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

1733 
	}
}

1739 
ölöe
 
	$AT91F_US_DißbÀTx
 (

1740 
AT91PS_USART
 
pUSART
)

1743 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

1744 
	}
}

1750 
ölöe
 
	$AT91F_US_Clo£
 (

1751 
AT91PS_USART
 
pUSART
)

1754 
pUSART
->
US_BRGR
 = 0 ;

1757 
pUSART
->
US_MR
 = 0 ;

1760 
pUSART
->
US_TTGR
 = 0;

1763 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

1766 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

1769 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

1770 
	}
}

1776 
ölöe
 
	$AT91F_US_TxRódy
 (

1777 
AT91PS_USART
 
pUSART
 )

1779  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

1780 
	}
}

1786 
ölöe
 
	$AT91F_US_RxRódy
 (

1787 
AT91PS_USART
 
pUSART
 )

1789  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

1790 
	}
}

1796 
ölöe
 
	$AT91F_US_Eº‹
 (

1797 
AT91PS_USART
 
pUSART
 )

1799  (
pUSART
->
US_CSR
 &

1800 (
AT91C_US_OVRE
 |

1801 
AT91C_US_FRAME
 |

1802 
AT91C_US_PARE
));

1803 
	}
}

1809 
ölöe
 
	$AT91F_US_PutCh¨
 (

1810 
AT91PS_USART
 
pUSART
,

1811 
ch¨a˘î
 )

1813 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

1814 
	}
}

1820 
ölöe
 
	$AT91F_US_GëCh¨
 (

1821 c⁄° 
AT91PS_USART
 
pUSART
)

1823 ((
pUSART
->
US_RHR
) & 0x1FF);

1824 
	}
}

1830 
ölöe
 
	$AT91F_US_SídFøme
(

1831 
AT91PS_USART
 
pUSART
,

1832 *
pBuf„r
,

1833 
szBuf„r
,

1834 *
pNextBuf„r
,

1835 
szNextBuf„r
 )

1837  
	`AT91F_PDC_SídFøme
(

1838 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

1839 
pBuf„r
,

1840 
szBuf„r
,

1841 
pNextBuf„r
,

1842 
szNextBuf„r
);

1843 
	}
}

1849 
ölöe
 
	$AT91F_US_Re˚iveFøme
 (

1850 
AT91PS_USART
 
pUSART
,

1851 *
pBuf„r
,

1852 
szBuf„r
,

1853 *
pNextBuf„r
,

1854 
szNextBuf„r
 )

1856  
	`AT91F_PDC_Re˚iveFøme
(

1857 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

1858 
pBuf„r
,

1859 
szBuf„r
,

1860 
pNextBuf„r
,

1861 
szNextBuf„r
);

1862 
	}
}

1868 
ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

1869 
AT91PS_USART
 
pUSART
,

1870 
vÆue


1873 
pUSART
->
US_IF
 = 
vÆue
;

1874 
	}
}

1880 
	#AT91C_MCI_MR_PDCMODE
 (
AT91C_MCI_CLKDIV
 |\

1881 
AT91C_MCI_PWSDIV
 |\

1882 (
AT91C_MCI_PWSDIV
<<1) |\

1883 
AT91C_MCI_PDCMODE
)

	)

1886 
	#AT91C_MCI_DTOR_1MEGA_CYCLES
 (
AT91C_MCI_DTOCYC
 | 
AT91C_MCI_DTOMUL
)

	)

1889 
	#AT91C_MCI_MMC_SLOTA
 (
AT91C_MCI_SCDSEL
 & 0x0)

	)

1892 
	#AT91C_MCI_MMC_SLOTB
 (
AT91C_MCI_SCDSEL
)

	)

1895 
	#AT91C_MCI_SDCARD_4BITS_SLOTA
 ( (
AT91C_MCI_SCDSEL
 & 0x0Ë| 
AT91C_MCI_SCDBUS
 )

	)

1898 
	#AT91C_MCI_SDCARD_4BITS_SLOTB
 (
AT91C_MCI_SCDSEL
 | 
AT91C_MCI_SCDBUS
)

	)

1906 
ölöe
 
	$AT91F_MCI_C⁄figuª
 (

1907 
AT91PS_MCI
 
pMCI
,

1908 
DTOR_ªgi°î
,

1909 
MR_ªgi°î
,

1910 
SDCR_ªgi°î
)

1913 
pMCI
->
MCI_CR
 = 
AT91C_MCI_MCIEN
 | 
AT91C_MCI_PWSEN
;

1916 
pMCI
->
MCI_IDR
 = 0xFFFFFFFF;

1919 
pMCI
->
MCI_DTOR
 = 
DTOR_ªgi°î
;

1922 
pMCI
->
MCI_MR
 = 
MR_ªgi°î
;

1925 
pMCI
->
MCI_SDCR
 = 
SDCR_ªgi°î
;

1926 
	}
}

1932 
ölöe
 
	$AT91F_MCI_E«bÀIt
 (

1933 
AT91PS_MCI
 
pMCI
,

1934 
Êag
)

1937 
pMCI
->
MCI_IER
 = 
Êag
;

1938 
	}
}

1944 
ölöe
 
	$AT91F_MCI_DißbÀIt
 (

1945 
AT91PS_MCI
 
pMCI
,

1946 
Êag
)

1949 
pMCI
->
MCI_IDR
 = 
Êag
;

1950 
	}
}

1956 
ölöe
 
	$AT91F_MCI_E«bÀ_I¡îÁ˚
 (

1957 
AT91PS_MCI
 
pMCI
)

1960 
pMCI
->
MCI_CR
 = 
AT91C_MCI_MCIEN
;

1961 
	}
}

1967 
ölöe
 
	$AT91F_MCI_DißbÀ_I¡îÁ˚
 (

1968 
AT91PS_MCI
 
pMCI
)

1971 
pMCI
->
MCI_CR
 = 
AT91C_MCI_MCIDIS
;

1972 
	}
}

1978 
ölöe
 
	$AT91F_MCI_Cfg_ModeRegi°î
 (

1979 
AT91PS_MCI
 
pMCI
,

1980 
mode_ªgi°î
)

1983 
pMCI
->
MCI_MR
 = 
mode_ªgi°î
;

1984 
	}
}

1988 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

1989 

	)

1994 
ölöe
 
	$AT91F_AIC_C⁄figuªIt
 (

1995 
AT91PS_AIC
 
pAic
,

1996 
úq_id
,

1997 
¥i‹ôy
,

1998 
§c_ty≥
,

1999 (*
√wH™dÀr
) () )

2001 
ﬁdH™dÀr
;

2002 
mask
 ;

2004 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

2006 
mask
 = 0x1 << 
úq_id
 ;

2008 
pAic
->
AIC_IDCR
 = 
mask
 ;

2010 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

2012 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

2014 
pAic
->
AIC_ICCR
 = 
mask
 ;

2016  
ﬁdH™dÀr
;

2017 
	}
}

2023 
ölöe
 
	$AT91F_AIC_E«bÀIt
 (

2024 
AT91PS_AIC
 
pAic
,

2025 
úq_id
 )

2028 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

2029 
	}
}

2035 
ölöe
 
	$AT91F_AIC_DißbÀIt
 (

2036 
AT91PS_AIC
 
pAic
,

2037 
úq_id
 )

2039 
mask
 = 0x1 << 
úq_id
;

2041 
pAic
->
AIC_IDCR
 = 
mask
 ;

2043 
pAic
->
AIC_ICCR
 = 
mask
 ;

2044 
	}
}

2050 
ölöe
 
	$AT91F_AIC_CÀ¨It
 (

2051 
AT91PS_AIC
 
pAic
,

2052 
úq_id
)

2055 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

2056 
	}
}

2062 
ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

2063 
AT91PS_AIC
 
pAic
)

2065 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

2066 
	}
}

2072 
ölöe
 
	$AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

2073 *
pVe˘‹
,

2074 (*
H™dÀr
) () )

2076 
ﬁdVe˘‹
 = *
pVe˘‹
;

2078 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

2079 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

2081 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

2083  
ﬁdVe˘‹
;

2084 
	}
}

2090 
ölöe
 
	$AT91F_AIC_Trig
 (

2091 
AT91PS_AIC
 
pAic
,

2092 
úq_id
)

2094 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

2095 
	}
}

2101 
ölöe
 
	$AT91F_AIC_IsA˘ive
 (

2102 
AT91PS_AIC
 
pAic
,

2103 
úq_id
)

2105  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

2106 
	}
}

2112 
ölöe
 
	$AT91F_AIC_IsPídög
 (

2113 
AT91PS_AIC
 
pAic
,

2114 
úq_id
)

2116  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

2117 
	}
}

2123 
ölöe
 
	$AT91F_AIC_O≥n
(

2124 
AT91PS_AIC
 
pAic
,

2125 (*
IrqH™dÀr
) (),

2126 (*
FiqH™dÀr
) (),

2127 (*
DeÁu…H™dÀr
) (),

2128 (*
SpuriousH™dÀr
) (),

2129 
¥Ÿe˘Mode
)

2131 
i
;

2134 
i
 = 0; i < 32; ++i) {

2135 
	`AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

2136 
	`AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
, 
DeÁu…H™dÀr
);

2140 
	`AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

2142 
	`AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

2144 
pAic
->
AIC_SPU
 = (Ë
SpuriousH™dÀr
;

2145 
pAic
->
AIC_DCR
 = 
¥Ÿe˘Mode
;

2146 
	}
}

2154 
ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2155 
AT91PS_UDP
 
pUDP
,

2156 
Êag
)

2159 
pUDP
->
UDP_IER
 = 
Êag
;

2160 
	}
}

2166 
ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2167 
AT91PS_UDP
 
pUDP
,

2168 
Êag
)

2171 
pUDP
->
UDP_IDR
 = 
Êag
;

2172 
	}
}

2178 
ölöe
 
	$AT91F_UDP_SëAddªss
 (

2179 
AT91PS_UDP
 
pUDP
,

2180 
addªss
)

2182 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2183 
	}
}

2189 
ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2190 
AT91PS_UDP
 
pUDP
,

2191 
Êag
)

2193 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2194 
	}
}

2200 
ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2201 
AT91PS_UDP
 
pUDP
,

2202 
Êag
)

2204 
pUDP
->
UDP_GLBSTATE
 &~(
Êag
);

2205 
	}
}

2211 
ölöe
 
	$AT91F_UDP_SëSèã
 (

2212 
AT91PS_UDP
 
pUDP
,

2213 
Êag
)

2215 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2216 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2217 
	}
}

2223 
ölöe
 
	$AT91F_UDP_GëSèã
 (

2224 
AT91PS_UDP
 
pUDP
)

2226  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2227 
	}
}

2233 
ölöe
 
	$AT91F_UDP_Re£tEp
 (

2234 
AT91PS_UDP
 
pUDP
,

2235 
Êag
)

2237 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2238 
	}
}

2244 
ölöe
 
	$AT91F_UDP_EpSèŒ
(

2245 
AT91PS_UDP
 
pUDP
,

2246 
ídpoöt
)

2248 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2249 
	}
}

2255 
ölöe
 
	$AT91F_UDP_EpWrôe
(

2256 
AT91PS_UDP
 
pUDP
,

2257 
ídpoöt
,

2258 
vÆue
)

2260 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2261 
	}
}

2267 
ölöe
 
	$AT91F_UDP_EpRód
(

2268 
AT91PS_UDP
 
pUDP
,

2269 
ídpoöt
)

2271  
pUDP
->
UDP_FDR
[
ídpoöt
];

2272 
	}
}

2278 
ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2279 
AT91PS_UDP
 
pUDP
,

2280 
ídpoöt
)

2282 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2283 
	}
}

2289 
ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2290 
AT91PS_UDP
 
pUDP
,

2291 
ídpoöt
,

2292 
Êag
)

2294 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2295 
	}
}

2301 
ölöe
 
	$AT91F_UDP_EpSë
(

2302 
AT91PS_UDP
 
pUDP
,

2303 
ídpoöt
,

2304 
Êag
)

2306 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2307 
	}
}

2313 
ölöe
 
	$AT91F_UDP_EpSètus
(

2314 
AT91PS_UDP
 
pUDP
,

2315 
ídpoöt
)

2317  
pUDP
->
UDP_CSR
[
ídpoöt
];

2318 
	}
}

2324 
ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2325 
AT91PS_UDP
 
pUdp
)

2327  
pUdp
->
UDP_IMR
;

2328 
	}
}

2334 
ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2335 
AT91PS_UDP
 
pUdp
,

2336 
Êag
)

2338  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2339 
	}
}

2348 
ölöe
 
	$AT91F_ST_SëPîiodI¡îvÆ
(

2349 
AT91PS_ST
 
pSt
,

2350 
≥riod
)

2352 vﬁ©ûê
°©us
;

2353 
pSt
->
ST_IDR
 = 
AT91C_ST_PITS
;

2355 
°©us
 = 
pSt
->
ST_SR
;

2356 
pSt
->
ST_PIMR
 = 
≥riod
 << 5;

2357 
	}
}

2363 
ölöe
 
	$AT91F_ST_E«bÀIt
(

2364 
AT91PS_ST
 
pSt
,

2365 
Êag
)

2367 
pSt
->
ST_IER
 = 
Êag
;

2368 
	}
}

2374 
ölöe
 
	$AT91F_ST_DißbÀIt
(

2375 
AT91PS_ST
 
pSt
,

2376 
Êag
)

2378 
pSt
->
ST_IDR
 = 
Êag
;

2379 
	}
}

2385 
ölöe
 
	$AT91F_ST_GëI¡îru±MaskSètus
(

2386 
AT91PS_ST
 
pSt
)

2388  
pSt
->
ST_IMR
;

2389 
	}
}

2395 
ölöe
 
	$AT91F_ST_IsI¡îru±Masked
(

2396 
AT91PS_ST
 
pSt
,

2397 
Êag
)

2399  (
	`AT91F_ST_GëI¡îru±MaskSètus
(
pSt
Ë& 
Êag
);

2400 
	}
}

2405 
ölöe
 
	$AT91F_EBI_CfgPIO
 ()

2408 
	`AT91F_PIO_CfgPîùh
(

2409 
AT91C_BASE_PIOC
,

2410 ((Ë
AT91C_PC8_A24
 ) |

2411 ((Ë
AT91C_PC7_A23
 ),

2413 
	}
}

2419 
ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

2421 
	`AT91F_PMC_E«bÀPîùhClock
(

2422 
AT91C_BASE_PMC
,

2423 ((Ë1 << 
AT91C_ID_SYS
));

2424 
	}
}

2430 
ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

2433 
	`AT91F_PIO_CfgPîùh
(

2434 
AT91C_BASE_PIOA
,

2435 ((Ë
AT91C_PA31_DTXD
 ) |

2436 ((Ë
AT91C_PA30_DRXD
 ),

2438 
	}
}

2444 
ölöe
 
	$AT91F_SYS_CfgPMC
 ()

2446 
	`AT91F_PMC_E«bÀPîùhClock
(

2447 
AT91C_BASE_PMC
,

2448 ((Ë1 << 
AT91C_ID_SYS
));

2449 
	}
}

2455 
ölöe
 
	$AT91F_UHP_CfgPMC
 ()

2457 
	`AT91F_PMC_E«bÀPîùhClock
(

2458 
AT91C_BASE_PMC
,

2459 ((Ë1 << 
AT91C_ID_UHP
));

2460 
	}
}

2466 
ölöe
 
	$AT91F_SDRC_CfgPIO
 ()

2469 
	`AT91F_PIO_CfgPîùh
(

2470 
AT91C_BASE_PIOC
,

2471 ((Ë
AT91C_PC20_D20
 ) |

2472 ((Ë
AT91C_PC21_D21
 ) |

2473 ((Ë
AT91C_PC30_D30
 ) |

2474 ((Ë
AT91C_PC22_D22
 ) |

2475 ((Ë
AT91C_PC31_D31
 ) |

2476 ((Ë
AT91C_PC23_D23
 ) |

2477 ((Ë
AT91C_PC16_D16
 ) |

2478 ((Ë
AT91C_PC24_D24
 ) |

2479 ((Ë
AT91C_PC17_D17
 ) |

2480 ((Ë
AT91C_PC25_D25
 ) |

2481 ((Ë
AT91C_PC18_D18
 ) |

2482 ((Ë
AT91C_PC26_D26
 ) |

2483 ((Ë
AT91C_PC19_D19
 ) |

2484 ((Ë
AT91C_PC27_D27
 ) |

2485 ((Ë
AT91C_PC28_D28
 ) |

2486 ((Ë
AT91C_PC29_D29
 ),

2488 
	}
}

2494 
ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

2496 
	`AT91F_PMC_E«bÀPîùhClock
(

2497 
AT91C_BASE_PMC
,

2498 ((Ë1 << 
AT91C_ID_EMAC
));

2499 
	}
}

2505 
ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

2508 
	`AT91F_PIO_CfgPîùh
(

2509 
AT91C_BASE_PIOA
,

2510 ((Ë
AT91C_PA14_ERXER
 ) |

2511 ((Ë
AT91C_PA12_ERX0
 ) |

2512 ((Ë
AT91C_PA13_ERX1
 ) |

2513 ((Ë
AT91C_PA8_ETXEN
 ) |

2514 ((Ë
AT91C_PA16_EMDIO
 ) |

2515 ((Ë
AT91C_PA9_ETX0
 ) |

2516 ((Ë
AT91C_PA10_ETX1
 ) |

2517 ((Ë
AT91C_PA11_ECRS_ECRSDV
) |

2518 ((Ë
AT91C_PA15_EMDC
 ) |

2519 ((Ë
AT91C_PA7_ETXCK_EREFCK
),

2521 
	}
}

2527 
ölöe
 
	$AT91F_RTC_CfgPMC
 ()

2529 
	`AT91F_PMC_E«bÀPîùhClock
(

2530 
AT91C_BASE_PMC
,

2531 ((Ë1 << 
AT91C_ID_SYS
));

2532 
	}
}

2538 
ölöe
 
	$AT91F_SSC2_CfgPMC
 ()

2540 
	`AT91F_PMC_E«bÀPîùhClock
(

2541 
AT91C_BASE_PMC
,

2542 ((Ë1 << 
AT91C_ID_SSC2
));

2543 
	}
}

2549 
ölöe
 
	$AT91F_SSC2_CfgPIO
 ()

2552 
	`AT91F_PIO_CfgPîùh
(

2553 
AT91C_BASE_PIOB
,

2554 ((Ë
AT91C_PB12_TF2
 ) |

2555 ((Ë
AT91C_PB17_RF2
 ) |

2556 ((Ë
AT91C_PB13_TK2
 ) |

2557 ((Ë
AT91C_PB16_RK2
 ) |

2558 ((Ë
AT91C_PB14_TD2
 ) |

2559 ((Ë
AT91C_PB15_RD2
 ),

2561 
	}
}

2567 
ölöe
 
	$AT91F_SSC1_CfgPMC
 ()

2569 
	`AT91F_PMC_E«bÀPîùhClock
(

2570 
AT91C_BASE_PMC
,

2571 ((Ë1 << 
AT91C_ID_SSC1
));

2572 
	}
}

2578 
ölöe
 
	$AT91F_SSC1_CfgPIO
 ()

2581 
	`AT91F_PIO_CfgPîùh
(

2582 
AT91C_BASE_PIOB
,

2583 ((Ë
AT91C_PB11_RF1
 ) |

2584 ((Ë
AT91C_PB10_RK1
 ) |

2585 ((Ë
AT91C_PB8_TD1
 ) |

2586 ((Ë
AT91C_PB9_RD1
 ),

2588 
	}
}

2594 
ölöe
 
	$AT91F_SSC0_CfgPMC
 ()

2596 
	`AT91F_PMC_E«bÀPîùhClock
(

2597 
AT91C_BASE_PMC
,

2598 ((Ë1 << 
AT91C_ID_SSC0
));

2599 
	}
}

2605 
ölöe
 
	$AT91F_SPI_CfgPMC
 ()

2607 
	`AT91F_PMC_E«bÀPîùhClock
(

2608 
AT91C_BASE_PMC
,

2609 ((Ë1 << 
AT91C_ID_SPI
));

2610 
	}
}

2616 
ölöe
 
	$AT91F_SPI_CfgPIO
 ()

2619 
	`AT91F_PIO_CfgPîùh
(

2620 
AT91C_BASE_PIOA
,

2621 ((Ë
AT91C_PA3_NPCS0
 ) |

2622 ((Ë
AT91C_PA4_NPCS1
 ) |

2623 ((Ë
AT91C_PA1_MOSI
 ) |

2624 ((Ë
AT91C_PA5_NPCS2
 ) |

2625 ((Ë
AT91C_PA6_NPCS3
 ) |

2626 ((Ë
AT91C_PA0_MISO
 ) |

2627 ((Ë
AT91C_PA2_SPCK
 ),

2629 
	}
}

2635 
ölöe
 
	$AT91F_TC5_CfgPMC
 ()

2637 
	`AT91F_PMC_E«bÀPîùhClock
(

2638 
AT91C_BASE_PMC
,

2639 ((Ë1 << 
AT91C_ID_TC5
));

2640 
	}
}

2646 
ölöe
 
	$AT91F_TC4_CfgPMC
 ()

2648 
	`AT91F_PMC_E«bÀPîùhClock
(

2649 
AT91C_BASE_PMC
,

2650 ((Ë1 << 
AT91C_ID_TC4
));

2651 
	}
}

2657 
ölöe
 
	$AT91F_TC3_CfgPMC
 ()

2659 
	`AT91F_PMC_E«bÀPîùhClock
(

2660 
AT91C_BASE_PMC
,

2661 ((Ë1 << 
AT91C_ID_TC3
));

2662 
	}
}

2668 
ölöe
 
	$AT91F_TC2_CfgPMC
 ()

2670 
	`AT91F_PMC_E«bÀPîùhClock
(

2671 
AT91C_BASE_PMC
,

2672 ((Ë1 << 
AT91C_ID_TC2
));

2673 
	}
}

2679 
ölöe
 
	$AT91F_TC1_CfgPMC
 ()

2681 
	`AT91F_PMC_E«bÀPîùhClock
(

2682 
AT91C_BASE_PMC
,

2683 ((Ë1 << 
AT91C_ID_TC1
));

2684 
	}
}

2690 
ölöe
 
	$AT91F_TC0_CfgPMC
 ()

2692 
	`AT91F_PMC_E«bÀPîùhClock
(

2693 
AT91C_BASE_PMC
,

2694 ((Ë1 << 
AT91C_ID_TC0
));

2695 
	}
}

2701 
ölöe
 
	$AT91F_SMC2_CfgPIO
 ()

2704 
	`AT91F_PIO_CfgPîùh
(

2705 
AT91C_BASE_PIOC
,

2706 ((Ë
AT91C_PC10_NCS4_CFCS
) |

2707 ((Ë
AT91C_PC9_A25_CFRNW
) |

2708 ((Ë
AT91C_PC12_NCS6_CFCE2
) |

2709 ((Ë
AT91C_PC11_NCS5_CFCE1
),

2711 
	}
}

2717 
ölöe
 
	$AT91F_PMC_CfgPMC
 ()

2719 
	`AT91F_PMC_E«bÀPîùhClock
(

2720 
AT91C_BASE_PMC
,

2721 ((Ë1 << 
AT91C_ID_SYS
));

2722 
	}
}

2728 
ölöe
 
	$AT91F_PMC_CfgPIO
 ()

2731 
	`AT91F_PIO_CfgPîùh
(

2732 
AT91C_BASE_PIOA
,

2734 ((Ë
AT91C_PA24_PCK1
 ));

2736 
	`AT91F_PIO_CfgPîùh
(

2737 
AT91C_BASE_PIOB
,

2738 ((Ë
AT91C_PB27_PCK0
 ),

2740 
	}
}

2746 
ölöe
 
	$AT91F_PIOD_CfgPMC
 ()

2748 
	`AT91F_PMC_E«bÀPîùhClock
(

2749 
AT91C_BASE_PMC
,

2750 ((Ë1 << 
AT91C_ID_PIOD
));

2751 
	}
}

2757 
ölöe
 
	$AT91F_PIOC_CfgPMC
 ()

2759 
	`AT91F_PMC_E«bÀPîùhClock
(

2760 
AT91C_BASE_PMC
,

2761 ((Ë1 << 
AT91C_ID_PIOC
));

2762 
	}
}

2768 
ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

2770 
	`AT91F_PMC_E«bÀPîùhClock
(

2771 
AT91C_BASE_PMC
,

2772 ((Ë1 << 
AT91C_ID_PIOB
));

2773 
	}
}

2779 
ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

2781 
	`AT91F_PMC_E«bÀPîùhClock
(

2782 
AT91C_BASE_PMC
,

2783 ((Ë1 << 
AT91C_ID_PIOA
));

2784 
	}
}

2790 
ölöe
 
	$AT91F_TWI_CfgPMC
 ()

2792 
	`AT91F_PMC_E«bÀPîùhClock
(

2793 
AT91C_BASE_PMC
,

2794 ((Ë1 << 
AT91C_ID_TWI
));

2795 
	}
}

2801 
ölöe
 
	$AT91F_TWI_CfgPIO
 ()

2804 
	`AT91F_PIO_CfgPîùh
(

2805 
AT91C_BASE_PIOA
,

2806 ((Ë
AT91C_PA25_TWD
 ) |

2807 ((Ë
AT91C_PA26_TWCK
 ),

2809 
	}
}

2815 
ölöe
 
	$AT91F_US3_CfgPMC
 ()

2817 
	`AT91F_PMC_E«bÀPîùhClock
(

2818 
AT91C_BASE_PMC
,

2819 ((Ë1 << 
AT91C_ID_US3
));

2820 
	}
}

2826 
ölöe
 
	$AT91F_US2_CfgPMC
 ()

2828 
	`AT91F_PMC_E«bÀPîùhClock
(

2829 
AT91C_BASE_PMC
,

2830 ((Ë1 << 
AT91C_ID_US2
));

2831 
	}
}

2837 
ölöe
 
	$AT91F_US2_CfgPIO
 ()

2840 
	`AT91F_PIO_CfgPîùh
(

2841 
AT91C_BASE_PIOA
,

2842 ((Ë
AT91C_PA23_TXD2
 ) |

2843 ((Ë
AT91C_PA22_RXD2
 ),

2845 
	}
}

2851 
ölöe
 
	$AT91F_US1_CfgPMC
 ()

2853 
	`AT91F_PMC_E«bÀPîùhClock
(

2854 
AT91C_BASE_PMC
,

2855 ((Ë1 << 
AT91C_ID_US1
));

2856 
	}
}

2862 
ölöe
 
	$AT91F_US1_CfgPIO
 ()

2865 
	`AT91F_PIO_CfgPîùh
(

2866 
AT91C_BASE_PIOB
,

2867 ((Ë
AT91C_PB21_RXD1
 ) |

2868 ((Ë
AT91C_PB26_RTS1
 ) |

2869 ((Ë
AT91C_PB25_DSR1
 ) |

2870 ((Ë
AT91C_PB24_CTS1
 ) |

2871 ((Ë
AT91C_PB19_DTR1
 ) |

2872 ((Ë
AT91C_PB23_DCD1
 ) |

2873 ((Ë
AT91C_PB20_TXD1
 ) |

2874 ((Ë
AT91C_PB18_RI1
 ),

2876 
	}
}

2882 
ölöe
 
	$AT91F_US0_CfgPMC
 ()

2884 
	`AT91F_PMC_E«bÀPîùhClock
(

2885 
AT91C_BASE_PMC
,

2886 ((Ë1 << 
AT91C_ID_US0
));

2887 
	}
}

2893 
ölöe
 
	$AT91F_US0_CfgPIO
 ()

2896 
	`AT91F_PIO_CfgPîùh
(

2897 
AT91C_BASE_PIOA
,

2898 ((Ë
AT91C_PA17_TXD0
 ) |

2899 ((Ë
AT91C_PA21_RTS0
 ) |

2900 ((Ë
AT91C_PA19_SCK0
 ) |

2901 ((Ë
AT91C_PA20_CTS0
 ),

2903 
	}
}

2909 
ölöe
 
	$AT91F_MCI_CfgPMC
 ()

2911 
	`AT91F_PMC_E«bÀPîùhClock
(

2912 
AT91C_BASE_PMC
,

2913 ((Ë1 << 
AT91C_ID_MCI
));

2914 
	}
}

2920 
ölöe
 
	$AT91F_MCI_CfgPIO
 ()

2923 
	`AT91F_PIO_CfgPîùh
(

2924 
AT91C_BASE_PIOA
,

2925 ((Ë
AT91C_PA28_MCCDA
 ) |

2926 ((Ë
AT91C_PA29_MCDA0
 ) |

2927 ((Ë
AT91C_PA27_MCCK
 ),

2930 
	`AT91F_PIO_CfgPîùh
(

2931 
AT91C_BASE_PIOB
,

2933 ((Ë
AT91C_PB5_MCDA3
 ) |

2934 ((Ë
AT91C_PB3_MCDA1
 ) |

2935 ((Ë
AT91C_PB4_MCDA2
 ));

2936 
	}
}

2942 
ölöe
 
	$AT91F_AIC_CfgPMC
 ()

2944 
	`AT91F_PMC_E«bÀPîùhClock
(

2945 
AT91C_BASE_PMC
,

2946 ((Ë1 << 
AT91C_ID_IRQ4
) |

2947 ((Ë1 << 
AT91C_ID_FIQ
) |

2948 ((Ë1 << 
AT91C_ID_IRQ5
) |

2949 ((Ë1 << 
AT91C_ID_IRQ6
) |

2950 ((Ë1 << 
AT91C_ID_IRQ0
) |

2951 ((Ë1 << 
AT91C_ID_IRQ1
) |

2952 ((Ë1 << 
AT91C_ID_IRQ2
) |

2953 ((Ë1 << 
AT91C_ID_IRQ3
));

2954 
	}
}

2960 
ölöe
 
	$AT91F_UDP_CfgPMC
 ()

2962 
	`AT91F_PMC_E«bÀPîùhClock
(

2963 
AT91C_BASE_PMC
,

2964 ((Ë1 << 
AT91C_ID_UDP
));

2965 
	}
}

2971 
ölöe
 
	$AT91F_ST_CfgPMC
 ()

2973 
	`AT91F_PMC_E«bÀPîùhClock
(

2974 
AT91C_BASE_PMC
,

2975 ((Ë1 << 
AT91C_ID_SYS
));

2976 
	}
}

	@linux/at91/image/dfboot/src/init.c

15 
	~"c⁄fig.h
"

16 
	~"AT91RM9200.h
"

17 
	~"lib_AT91RM9200.h
"

18 
	~"°dio.h
"

24 
	$AT91F_SpuriousH™dÀr
()

26 
	`puts
("ISI");

28 
	}
}

35 
	$AT91F_D©aAb‹t
()

37 
	`puts
("IDA");

39 
	}
}

45 
	$AT91F_FëchAb‹t
()

47 
	`puts
("IFA");

49 
	}
}

55 
	$AT91F_UndefH™dÀr
()

57 
	`puts
("IUD");

59 
	}
}

68 
	$AT91F_InôSdøm
()

70 *
pRegi°î
;

74 
	`AT91F_PIO_CfgPîùh
(

75 
AT91C_BASE_PIOC
,

81 
pRegi°î
 = (*)0xFFFFFF98;

82 *
pRegi°î
 = 0x2188c155;

83 
pRegi°î
 = (*)0xFFFFFF90;

84 *
pRegi°î
 = 0x2;

85 
pRegi°î
 = (*)0x20000000;

86 *
pRegi°î
 = 0;

87 
pRegi°î
 = (*)0xFFFFFF90;

88 *
pRegi°î
 = 0x4;

89 
pRegi°î
 = (*)0x20000000;

90 *
pRegi°î
 = 0;

91 *
pRegi°î
 = 0;

92 *
pRegi°î
 = 0;

93 *
pRegi°î
 = 0;

94 *
pRegi°î
 = 0;

95 *
pRegi°î
 = 0;

96 *
pRegi°î
 = 0;

97 *
pRegi°î
 = 0;

98 
pRegi°î
 = (*)0xFFFFFF90;

99 *
pRegi°î
 = 0x3;

100 
pRegi°î
 = (*)0x20000080;

101 *
pRegi°î
 = 0;

103 
pRegi°î
 = (*)0xFFFFFF94;

104 *
pRegi°î
 = 0x2e0;

105 
pRegi°î
 = (*)0x20000000;

106 *
pRegi°î
 = 0;

108 
pRegi°î
 = (*)0xFFFFFF90;

109 *
pRegi°î
 = 0x00;

110 
pRegi°î
 = (*)0x20000000;

111 *
pRegi°î
 = 0;

112 
	}
}

119 
	$AT91F_InôMem‹õs
()

121 *
pEbi
 = (*)0xFFFFFF60;

124 
pEbi
 = (*)0xFFFFFF60;

125 *
pEbi
 = 0x00000002;

128 
pEbi
 = (*)0xFFFFFF70;

129 *
pEbi
 = 0x00003284;

131 
	`AT91F_InôSdøm
();

132 
	}
}

140 
	$AT91F_LowLevñInô
()

142 
i
;

145 
	`AT91F_AIC_O≥n
(

146 
AT91C_BASE_AIC
,

147 
AT91C_AIC_BRANCH_OPCODE
,

148 
AT91F_UndefH™dÀr
,

149 
AT91F_UndefH™dÀr
,

150 
AT91F_SpuriousH™dÀr
,

154 
i
=0; i<8; i++)

155 
	`AT91F_AIC_AcknowÀdgeIt
(
AT91C_BASE_AIC
);

157 
	`AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*)0x0C, 
AT91F_FëchAb‹t
);

158 
	`AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*)0x10, 
AT91F_D©aAb‹t
);

159 
	`AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*)0x4, 
AT91F_UndefH™dÀr
);

162 
	`AT91F_InôMem‹õs
();

164 
	}
}

	@linux/at91/image/dfboot/src/led.c

25 
	~<AT91RM9200.h
>

27 
	#GREEN_LED
 
AT91C_PIO_PB0


	)

28 
	#YELLOW_LED
 
AT91C_PIO_PB1


	)

29 
	#RED_LED
 
AT91C_PIO_PB2


	)

31 
	$LED_£t
(
Àd
)

33 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

34 
PIOB
->
PIO_SODR
 = (
Àd
 ^ 0x7) & 0x7;

35 
PIOB
->
PIO_CODR
 = 
Àd
 & 0x7;

36 
	}
}

38 
	$gªí_LED_⁄
()

40 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

42 
PIOB
->
PIO_CODR
 = (1 << 0);

43 
	}
}

45 
	$yñlow_LED_⁄
()

47 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

49 
PIOB
->
PIO_CODR
 = (1 << 1);

50 
	}
}

52 
	$ªd_LED_⁄
()

54 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

56 
PIOB
->
PIO_CODR
 = (1 << 2);

57 
	}
}

59 
	$gªí_LED_off
()

61 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

63 
PIOB
->
PIO_SODR
 = (1 << 0);

64 
	}
}

66 
	$yñlow_LED_off
()

68 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

70 
PIOB
->
PIO_SODR
 = (1 << 1);

71 
	}
}

73 
	$ªd_LED_off
()

75 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

77 
PIOB
->
PIO_SODR
 = (1 << 2);

78 
	}
}

80 
	$LED_blök
(
Àd
)

82 vﬁ©ûê
i
,
j
;

83 
i
 = 0; i < 5; i++) {

84 
	`LED_£t
((1 << 
Àd
)&0x7);

85 
j
= 0; j < 200000; j++);

86 
	`LED_£t
(0);

87 
j
= 0; j < 200000; j++);

89 
	}
}

92 
	$LED_öô
 ()

94 
AT91PS_PIO
 
PIOB
 = 
AT91C_BASE_PIOB
;

95 
AT91PS_PMC
 
PMC
 = 
AT91C_BASE_PMC
;

96 
PMC
->
PMC_PCER
 = (1 << 
AT91C_ID_PIOB
);

98 
PIOB
->
PIO_PER
 = 
AT91C_PIO_PB2
 | 
AT91C_PIO_PB1
 | 
AT91C_PIO_PB0
;

100 
PIOB
->
PIO_OER
 = 
AT91C_PIO_PB2
 | 
AT91C_PIO_PB1
 | 
AT91C_PIO_PB0
;

102 
PIOB
->
PIO_SODR
 = 
AT91C_PIO_PB2
 | 
AT91C_PIO_PB1
 | 
AT91C_PIO_PB0
;

103 
	}
}

	@linux/at91/image/dfboot/src/main.c

24 
	~"c⁄fig.h
"

25 
	~"°dio.h
"

26 
	~"AT91RM9200.h
"

27 
	~"lib_AT91RM9200.h
"

28 
	~"com.h
"

29 
	~"maö.h
"

30 
	~"d©aÊash.h
"

31 
	~"AT91C_MCI_Devi˚.h
"

33 
	#DEBUGOUT


	)

34 
	#XMODEM


	)

35 
	#MEMDISP


	)

37 #ifdef 
PAGESZ_1056


38 
	#PAGESIZE
 1056

	)

40 
	#PAGESIZE
 1024

	)

43 
	#AT91C_SDRAM_START
 0x20000000

	)

44 
	#AT91C_BOOT_ADDR
 0x21F00000

	)

45 
	#AT91C_BOOT_SIZE
 128*
PAGESIZE


	)

46 #ifdef 
PAGESZ_1056


47 
	#AT91C_BOOT_DATAFLASH_ADDR
 0xC0008400

	)

49 
	#AT91C_BOOT_DATAFLASH_ADDR
 0xC0008000

	)

51 
	#AT91C_PLLA_VALUE
 0x237A3E5A

54 

	)

57 
	#DISP_LINE_LEN
 16

	)

60 
	#IMAGE_BAD_SIZE
 0

	)

61 
	#IMAGE_READ_FAILURE
 1

	)

62 
	#IMAGE_CRC_ERROR
 2

	)

63 
	#IMAGE_ERROR
 3

	)

64 
	#SUCCESS
 -1

	)

67 
AT91F_ST_ASM_HANDLER
();

68 
Jump
(
addr
);

70 c⁄° *
	gmíu_d©aÊash
[] = {

71 #ifde‡
XMODEM


76 #ifdef 
PAGESZ_1056


81 #ifde‡
XMODEM


87 #ifde‡
XMODEM


88 
	#MAXMENU
 7

	)

90 
	#MAXMENU
 4

	)

93 
	gmesßge
[20];

94 #ifde‡
XMODEM


95 vﬁ©ûê
	gXmodemCom∂ëe
 = 0;

97 
	gStTick
 = 0;

99 
AT91S_RomBoŸ
 c⁄° *
	gpAT91
;

100 #ifde‡
XMODEM


101 
AT91S_SBuf„r
 
	gsXmBuf„r
;

102 
AT91S_SvcXmodem
 
	gsvcXmodem
;

103 
AT91S_Pùe
 
	gxmodemPùe
;

105 
AT91S_CéTempo
 
	g˘lTempo
;

114 
	$GëTickCou¡
()

116  
StTick
;

117 
	}
}

119 #ifde‡
XMODEM


126 
	$AT91_XmodemCom∂ëe
(
AT91S_PùeSètus
 
°©us
, *
pVoid
)

129 
svcXmodem
.
ãmpo
.
	`St›
(&(svcXmodem.tempo));

130 
XmodemCom∂ëe
 = 1;

131 
	}
}

140 
	$XmodemPrŸocﬁ
(
AT91S_PùeSètus
 
°©us
, *
pVoid
)

142 
AT91PS_SBuf„r
 
pSBuf„r
 = (AT91PS_SBuf„rË
xmodemPùe
.
pBuf„r
->
pChûd
;

143 
AT91PS_USART
 
pUßπ
 = 
svcXmodem
.pUsart;

145 i‡(
pSBuf„r
->
szRdBuf„r
 == 0) {

147 
svcXmodem
.
ãmpo
.
	`Sèπ
(&(svcXmodem.ãmpo), 10, 0, 
AT91_XmodemCom∂ëe
, 
pUßπ
);

149 
	}
}

158 
	$AT91F_ST_HANDLER
()

160 vﬁ©ûê
c§
 = *
AT91C_DBGU_CSR
;

161 #ifde‡
XMODEM


162 
îr‹
;

165 i‡(
AT91C_BASE_ST
->
ST_SR
 & 0x01) {

166 
StTick
++;

167 
˘lTempo
.
	`CéTempoTick
(&ctlTempo);

171 #ifde‡
XMODEM


172 
îr‹
 = 
	`AT91F_US_Eº‹
((
AT91PS_USART
)
AT91C_BASE_DBGU
);

173 i‡(
c§
 & 
îr‹
) {

175 *(
AT91C_DBGU_CR
Ë
AT91C_US_RSTSTA
;

176 
	`AT91F_US_DißbÀIt
((
AT91PS_USART
)
AT91C_BASE_DBGU
, 
AT91C_US_ENDRX
);

177 
	`AT91F_US_E«bÀIt
((
AT91PS_USART
)
AT91C_BASE_DBGU
, 
AT91C_US_RXRDY
);

181 i‡(
c§
 & (
AT91C_US_TXRDY
 | 
AT91C_US_ENDTX
 | 
AT91C_US_TXEMPTY
 |

182 
AT91C_US_RXRDY
 | 
AT91C_US_ENDRX
 | 
AT91C_US_TIMEOUT
 |

183 
AT91C_US_RXBUFF
)) {

184 i‡–!(
svcXmodem
.
eŸ
) )

185 
svcXmodem
.
	`H™dÀr
(&svcXmodem, 
c§
);

188 
	}
}

197 
	$AT91F_Di•œyMíu
()

199 
i
, 
mci_¥e£¡
 = 0;

200 
	`¥ötf
("\nDF LOADER %†%†%s\n",
AT91C_VERSION
,
__DATE__
,
__TIME__
);

201 
	`AT91F_D©aÊashPrötInfo
();

202 
mci_¥e£¡
 = 
	`AT91F_MCI_Inô
();

203 
i
 = 0; i < 
MAXMENU
; i++) {

204 
	`puts
(
míu_d©aÊash
[
i
]);

206  
mci_¥e£¡
;

207 
	}
}

216 
	$AsciiToHex
(*
s
, *
vÆ
)

218 
n
;

220 *
vÆ
=0;

222 if(
s
[0] == '0' && ((s[1] == 'x') || (s[1] == 'X')))

223 
s
+=2;

224 
n
 = 0;

225 (
n
 < 8Ë&& (
s
[n] !=0))

227 *
vÆ
 <<= 4;

228 i‡–(
s
[
n
] >= '0') && (s[n] <='9'))

229 *
vÆ
 +(
s
[
n
] - '0');

231 i‡((
s
[
n
] >= 'a') && (s[n] <='f'))

232 *
vÆ
 +(
s
[
n
] - 0x57);

234 i‡((
s
[
n
] >= 'A') && (s[n] <='F'))

235 *
vÆ
 +(
s
[
n
] - 0x37);

238 
n
++;

242 
	}
}

245 #ifde‡
MEMDISP


252 
	$AT91F_Mem‹yDi•œy
(
addr
, 
Àngth
)

254 
i
, 
nbyãs
, 
löebyãs
;

255 *
˝
;

258 *
u˝
;

259 
löebuf
[
DISP_LINE_LEN
];

262 
nbyãs
 = 
Àngth
;

267 
u˝
 = (*)
löebuf
;

269 
	`¥ötf
("%08x:", 
addr
);

270 
löebyãs
 = (
nbyãs
 > 
DISP_LINE_LEN
)?DISP_LINE_LEN:nbytes;

271 if((
addr
 & 0xF0000000) == 0x20000000) {

272 
i
 = 0; i < 
löebyãs
; i ++) {

273 
löebuf
[
i
] = *(*)(
addr
+i);

276 
	`ªad_d©aÊash
(
addr
, 
löebyãs
, 
löebuf
);

278 
i
=0; i<
löebyãs
; i++)

286 
	`¥ötf
(" %02x", *
u˝
++);

288 
addr
++;

290 
	`¥ötf
(" ");

291 
˝
 = 
löebuf
;

292 
i
=0; i<
löebyãs
; i++) {

293 i‡((*
˝
 < 0x20) || (*cp > 0x7e))

294 
	`¥ötf
(".");

296 
	`¥ötf
("%c", *
˝
);

297 
˝
++;

299 
	`¥ötf
("\n");

300 
nbyãs
 -
löebyãs
;

301 } 
nbyãs
 > 0);

303 
	}
}

312 
	$AT91F_SëPLL
()

314 
AT91_REG
 
tmp
;

315 
AT91PS_PMC
 
pPmc
 = 
AT91C_BASE_PMC
;

316 
AT91PS_CKGR
 
pCkgr
 = 
AT91C_BASE_CKGR
;

318 
pPmc
->
PMC_IDR
 = 0xFFFFFFFF;

321 
pCkgr
->
CKGR_PLLAR
 = 
AT91C_PLLA_VALUE
;

323 !(*
AT91C_PMC_SR
 & 
AT91C_PMC_LOCKA
));

326 
tmp
 = 
pPmc
->
PMC_MCKR
;

328 i‡(
tmp
 & 0x0000001C) {

329 
tmp
 = (tmp & ~0x0000001C);

330 
pPmc
->
PMC_MCKR
 = 
tmp
;

331 !(*
AT91C_PMC_SR
 & 
AT91C_PMC_MCKRDY
));

333 i‡(
tmp
 != 0x00000202) {

334 
pPmc
->
PMC_MCKR
 = 0x00000202;

335 i‡((
tmp
 & 0x00000003) != 0x00000002)

336 !(*
AT91C_PMC_SR
 & 
AT91C_PMC_MCKRDY
));

340 
	}
}

349 
	$AT91F_Re£tRegi°îs
()

351 vﬁ©ûê
i
 = 0;

356 #i‚def 
DEBUGOUT


357 *
AT91C_PIOA_ODR
 = 0xFFFFFFFF;

358 *
AT91C_PIOA_PER
 = 0xFFFFFFFF;

361 
	`AT91F_AIC_DißbÀIt
 (
AT91C_BASE_AIC
, 
AT91C_ID_SYS
);

364 #i‚def 
DEBUGOUT


365 
AT91C_BASE_PMC
->
PMC_PCDR
 = 0xFFFFFFFC;

368 
	`__asm__
 ("msr CPSR_c, #0xDF");

370 *
AT91C_AIC_ICCR
 = 0xffffffff;

373 
i
 = *
AT91C_AIC_IVR
;

374 
i
 = *
AT91C_AIC_FVR
;

377 *
AT91C_AIC_EOICR
 = 0;

380 
	}
}

383 
	$AT91F_LﬂdBoŸ
()

386 vﬁ©ûê
SizeToDow∆ﬂd
 = 0x21400;

387 vﬁ©ûê
AddªssToDow∆ﬂd
 = 
AT91C_BOOT_ADDR
;

391 i‡(
	`ªad_d©aÊash
(
AT91C_BOOT_DATAFLASH_ADDR
, 32,

392 (*)
AddªssToDow∆ﬂd
Ë!
AT91C_DATAFLASH_OK
)

394 
	`¥ötf
("Bad Code Size\n");

395  
IMAGE_BAD_SIZE
;

398 
SizeToDow∆ﬂd
 = *(*)(
AddªssToDow∆ﬂd
 + 
AT91C_OFFSET_VECT6
);

403 i‡(
	`ªad_d©aÊash
(
AT91C_BOOT_DATAFLASH_ADDR
, 
SizeToDow∆ﬂd
 + 8,

404 (*)
AddªssToDow∆ﬂd
Ë!
AT91C_DATAFLASH_OK
)

406 
	`¥ötf
("F DF RD\n");

407  
IMAGE_READ_FAILURE
;

410 
pAT91
->
	`CRC32
((c⁄° *)
AT91C_BOOT_ADDR
,

411 ()
SizeToDow∆ﬂd
 , (*)&
¸c2
);

412 
¸c1
 = ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
)) +

413 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 1) << 8) +

414 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 2) << 16) +

415 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 3) << 24);

418 *(*)(
AddªssToDow∆ﬂd
 + 
AT91C_OFFSET_VECT6
) =

419 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 4);

421 i‡(
¸c1
 !
¸c2
) {

422 
	`¥ötf
("DF CRC bad %x !%x\n",
¸c1
,
¸c2
);

423  
IMAGE_CRC_ERROR
;

426  
SUCCESS
;

427 
	}
}

429 
	$AT91F_SèπBoŸ
()

431 
°s
;

432 if((
°s
 = 
	`AT91F_LﬂdBoŸ
()Ë!
SUCCESS
)  sts;

435 i‡(
	`AT91F_Re£tRegi°îs
())

437 
	`¥ötf
("Jump");

438 
	`Jump
(
AT91C_BOOT_ADDR
);

441  
IMAGE_ERROR
;

442 
	}
}

445 
	$AT91F_RïóãdSèπBoŸ
()

447 
i
;

448 
i
 = 0; i < 
CRC_RETRIES
; i++) {

449 if(
	`AT91F_SèπBoŸ
(Ë!
IMAGE_CRC_ERROR
){

455 
	}
}

458 
	#TRUE
 1

	)

459 
	#FALSE
 0

	)

460 
	#TRX_MAGIC
 0x30524448

	)

461 
	#TRX_VERSION
 1

	)

463 
	såx_hódî
 {

464 
	mmagic
;

465 
	mÀn
;

466 
	m¸c32
;

467 
	mÊag_vîsi⁄
;

468 
	moff£ts
[3];

471 
	#AT91C_MCI_TIMEOUT
 1000000

	)

473 
AT91S_MciDevi˚
 
MCI_Devi˚
;

474 
AT91F_MCIDevi˚WaôRódy
();

475 
AT91F_MCI_RódBlockSwab
(
AT91PS_MciDevi˚
, , *, );

477 
	$Progøm_From_MCI
()

479 
i
;

480 
Max_Ród_D©aBlock_Lígth
;

481 
block
 = 0;

482 
buf„r
 = 
AT91C_DOWNLOAD_BASE_ADDRESS
;

483 
buÂos
 = 
AT91C_DOWNLOAD_BASE_ADDRESS
;

484 
NbPage
 = 0;

485 
åx_hódî
 *
p
;

487 
p
 = (
åx_hódî
 *)
buÂos
;

489 
Max_Ród_D©aBlock_Lígth
 = 
MCI_Devi˚
.
pMCI_Devi˚Fótuªs
->Max_Read_DataBlock_Length;

491 
	`AT91F_MCIDevi˚WaôRódy
(
AT91C_MCI_TIMEOUT
);

493 
	`AT91F_MCI_RódBlockSwab
(&
MCI_Devi˚
, 
block
*
Max_Ród_D©aBlock_Lígth
, (*)
buÂos
, Max_Read_DataBlock_Length);

495 i‡(
p
->
magic
 !
TRX_MAGIC
) {

496 
	`¥ötf
("Inv IMG 0x%08x\n", 
p
->
magic
);

497  
FALSE
;

500 
	`¥ötf
("RDSD");

501 
AT91C_BASE_PIOC
->
PIO_CODR
 = 
AT91C_PIO_PC7
 | 
AT91C_PIO_PC15
 | 
AT91C_PIO_PC8
 | 
AT91C_PIO_PC14
;

502 
i
=0; i<(
p
->
Àn
/512); i++) {

503 
	`AT91F_MCI_RódBlockSwab
(&
MCI_Devi˚
, 
block
*
Max_Ród_D©aBlock_Lígth
, (*)
buÂos
, Max_Read_DataBlock_Length);

504 
block
++;

505 
buÂos
 +
Max_Ród_D©aBlock_Lígth
;

508 
NbPage
 = 0;

509 
i
 = 
d©aÊash_öfo
[0].
Devi˚
.
∑ges_numbî
;

510 
i
 >>= 1)

511 
NbPage
++;

512 
i
 = ((
p
->
off£ts
[1] -Ö->off£ts[0])/ 512Ë+ 1 + (
NbPage
 << 13Ë+ (
d©aÊash_öfo
[0].
Devi˚
.
∑ges_size
 << 17);

513 *(*)(
buf„r
 + 
p
->
off£ts
[0] + 
AT91C_OFFSET_VECT6
Ë
i
;

515 
	`¥ötf
(" WDFB");

516 
AT91C_BASE_PIOC
->
PIO_CODR
 = 
AT91C_PIO_PC7
 | 
AT91C_PIO_PC15
 | 
AT91C_PIO_PC14
;

517 
AT91C_BASE_PIOC
->
PIO_SODR
 = 
AT91C_PIO_PC8
;

518 
	`wrôe_d©aÊash
(0xc0000000, 
buf„r
 + 
p
->
off£ts
[0],Ö->offsets[1] -Ö->offsets[0]);

519 
	`¥ötf
(" WUB");

520 
AT91C_BASE_PIOC
->
PIO_CODR
 = 
AT91C_PIO_PC7
 | 
AT91C_PIO_PC15
;

521 
AT91C_BASE_PIOC
->
PIO_SODR
 = 
AT91C_PIO_PC8
 | 
AT91C_PIO_PC14
;

522 
	`wrôe_d©aÊash
(0xc0008000, 
buf„r
 + 
p
->
off£ts
[1],Ö->offsets[2] -Ö->offsets[1]);

523 
	`¥ötf
(" WKRFS");

524 
AT91C_BASE_PIOC
->
PIO_CODR
 = 
AT91C_PIO_PC8
 | 
AT91C_PIO_PC15
;

525 
AT91C_BASE_PIOC
->
PIO_SODR
 = 
AT91C_PIO_PC7
 | 
AT91C_PIO_PC14
;

526 
	`wrôe_d©aÊash
(0xc0042000, 
buf„r
 + 
p
->
off£ts
[2],Ö->
Àn
 -Ö->offsets[2]);

527 
AT91C_BASE_PIOC
->
PIO_CODR
 = 
AT91C_PIO_PC8
 | 
AT91C_PIO_PC14
;

528 
AT91C_BASE_PIOC
->
PIO_SODR
 = 
AT91C_PIO_PC7
 | 
AT91C_PIO_PC15
;

529  
TRUE
;

530 
	}
}

538 
	$maö
()

540 #ifde‡
XMODEM


541 
AT91PS_Buf„r
 
pXmBuf„r
;

542 
AT91PS_SvcComm
 
pSvcXmodem
;

544 
AT91S_SvcTempo
 
svcBoŸTempo
;

545 
ix
;

546 vﬁ©ûê
AddªssToDow∆ﬂd
, 
SizeToDow∆ﬂd
;

547 
Devi˚Addªss
 = 0;

548 
comm™d
 = 0;

549 #ifde‡
XMODEM


550 vﬁ©ûê
i
 = 0;

551 
¸c1
 = 0, 
¸c2
 = 0;

552 vﬁ©ûê
devi˚
;

553 
NbPage
;

555 vﬁ©ûê
Nb_Devi˚
 = 0;

556 
mci_¥e£¡
 = 0;

558 
pAT91
 = 
AT91C_ROM_BOOT_ADDRESS
;

560 i‡(!
	`AT91F_SëPLL
())

562 
	`¥ötf
("F SetPLL");

566 
	`©91_öô_u¨ts
();

569 
pAT91
->
	`O≥nCéTempo
(&
˘lTempo
, (*Ë&’AT91->
SYSTIMER_DESC
));

570 
˘lTempo
.
	`CéTempoSèπ
((*Ë&(
pAT91
->
SYSTIMER_DESC
));

573 
˘lTempo
.
	`CéTempoCª©e
(&˘lTempo, &
svcBoŸTempo
);

577 #ifde‡
XMODEM


579 
pXmBuf„r
 = 
pAT91
->
	`O≥nSBuf„r
(&
sXmBuf„r
);

580 
pSvcXmodem
 = 
pAT91
->
	`O≥nSvcXmodem
(&
svcXmodem
,

581 (
AT91PS_USART
)
AT91C_BASE_DBGU
, &
˘lTempo
);

582 
pAT91
->
	`O≥nPùe
(&
xmodemPùe
, 
pSvcXmodem
, 
pXmBuf„r
);

586 
	`AT91F_AIC_C⁄figuªIt
(

587 
AT91C_BASE_AIC
,

588 
AT91C_ID_SYS
,

589 
AT91C_AIC_PRIOR_HIGHEST
,

590 
AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
,

591 
AT91F_ST_ASM_HANDLER


594 
	`AT91F_AIC_E«bÀIt
(
AT91C_BASE_AIC
, 
AT91C_ID_SYS
);

596 #i‚de‡
PRODTEST


599 
svcBoŸTempo
.
	`Sèπ
(&svcBoŸTempo, 
AT91C_DELAY_TO_BOOT
,

600 0, 
AT91F_SèπBoŸ
, 
NULL
);

605 
comm™d
 == 0)

607 
AddªssToDow∆ﬂd
 = 
AT91C_DOWNLOAD_BASE_ADDRESS
;

608 
SizeToDow∆ﬂd
 = 
AT91C_DOWNLOAD_MAX_SIZE
;

609 
Devi˚Addªss
 = 0;

612 i‡(!
Nb_Devi˚
)

613 
Nb_Devi˚
 = 
	`AT91F_D©aÊashInô
();

615 
mci_¥e£¡
 = 
	`AT91F_Di•œyMíu
();

617 #ifde‡
PRODTEST


618 i‡(
mci_¥e£¡
) {

619 i‡(
	`Progøm_From_MCI
())

620 
	`AT91F_SèπBoŸ
();

624 
mesßge
[0] = 0;

625 
	`AT91F_RódLöe
 ("E¡î: ", 
mesßge
);

627 #i‚de‡
PRODTEST


629 
svcBoŸTempo
.
	`St›
(&svcBootTempo);

632 
comm™d
 = 
mesßge
[0];

633 
ix
 = 1; (
mesßge
[ix] == ' ') && (ix < 12); ix++);

635 if(!
	`AsciiToHex
(&
mesßge
[
ix
], &
Devi˚Addªss
) )

636 
Devi˚Addªss
 = 0;

638 
comm™d
)

640 #ifde‡
XMODEM


644 if(
comm™d
 == '1') {

645 
Devi˚Addªss
 = 0xC0000000;

647 } if(
comm™d
 == '2') {

648 
Devi˚Addªss
 = 
AT91C_BOOT_DATAFLASH_ADDR
;

653 
Devi˚Addªss
 & 0xFF000000)

655 
CFG_DATAFLASH_LOGIC_ADDR_CS0
:

656 i‡(
d©aÊash_öfo
[0].
id
 == 0){

657 
	`¥ötf
("No DF");

658 
	`AT91F_WaôKeyPªs£d
();

659 
comm™d
 = 0;

662 
devi˚
 = 0;

665 
CFG_DATAFLASH_LOGIC_ADDR_CS3
:

666 i‡(
d©aÊash_öfo
[1].
id
 == 0){

667 
	`¥ötf
("No DF");

668 
	`AT91F_WaôKeyPªs£d
();

669 
comm™d
 = 0;

671 
devi˚
 = 1;

675 
comm™d
 = 0;

682 i‡(
mci_¥e£¡
)

683 
	`Progøm_From_MCI
();

684 
comm™d
 = 0;

688 
	`AT91F_SèπBoŸ
();

689 
comm™d
 = 0;

692 #ifde‡
MEMDISP


696 
	`AT91F_Mem‹yDi•œy
(
Devi˚Addªss
, 256);

697 
	`AT91F_RódLöe
 (
NULL
, 
mesßge
);

698 
Devi˚Addªss
 += 0x100;

700 
mesßge
[0] == '\0');

701 
comm™d
 = 0;

706 
Devi˚Addªss
 & 0xFF000000)

708 
CFG_DATAFLASH_LOGIC_ADDR_CS0
:

710 
CFG_DATAFLASH_LOGIC_ADDR_CS3
:

713 
comm™d
 = 0;

717 i‡(
comm™d
 != 0) {

718 
	`AT91F_RódLöe
 ("RDY ERA\nSure?",

719 
mesßge
);

720 if(
mesßge
[0] == 'Y' || message[0] == 'y') {

721 
	`îa£_d©aÊash
(
Devi˚Addªss
 & 0xFF000000);

727 
comm™d
 = 0;

732 
comm™d
 = 0;

736 #ifde‡
XMODEM


737 
i
 = 0; i <
AT91C_DOWNLOAD_MAX_SIZE
; i++)

738 *(*)(
AddªssToDow∆ﬂd
 + 
i
) = 0;

740 
xmodemPùe
.
	`Ród
(&xmodemPùe, (*)
AddªssToDow∆ﬂd
,

741 
SizeToDow∆ﬂd
, 
XmodemPrŸocﬁ
, 0);

742 
XmodemCom∂ëe
 !=1);

743 
SizeToDow∆ﬂd
 = ()((
svcXmodem
.
pD©a
) -

744 ()
AddªssToDow∆ﬂd
);

747 i‡((
Devi˚Addªss
 =
CFG_DATAFLASH_LOGIC_ADDR_CS0
)) {

749 
NbPage
 = 0;

750 
i
 = 
d©aÊash_öfo
[
devi˚
].
Devi˚
.
∑ges_numbî
;

751 
i
 >>= 1)

752 
NbPage
++;

753 
i
 = (
SizeToDow∆ﬂd
 / 512)+1 + (
NbPage
 << 13) +

754 (
d©aÊash_öfo
[
devi˚
].
Devi˚
.
∑ges_size
 << 17);

755 
SizeToDow∆ﬂd
 = 512 * (
i
 &0xFF);

761 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 4) =

762 *(*)(
AddªssToDow∆ﬂd
 + 
AT91C_OFFSET_VECT6
);

765 
i
 = 
SizeToDow∆ﬂd
;

768 *(*)(
AddªssToDow∆ﬂd
 + 
AT91C_OFFSET_VECT6
Ë
i
;

772 
¸c1
 = 0;

773 
pAT91
->
	`CRC32
((c⁄° *)
AddªssToDow∆ﬂd
, 
SizeToDow∆ﬂd
 , &
¸c1
);

776 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
Ë()(
¸c1
 & 0x000000FF);

777 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 1Ë()((
¸c1
 & 0x0000FF00) >> 8);

778 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 2Ë()((
¸c1
 & 0x00FF0000) >> 16);

779 *(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 3Ë()((
¸c1
 & 0xFF000000) >> 24);

782 
	`wrôe_d©aÊash
 (
Devi˚Addªss
, 
AddªssToDow∆ﬂd
, (
SizeToDow∆ﬂd
 + 8));

785 
i
=0; i <
SizeToDow∆ﬂd
; i++)

786 *(*)(
AddªssToDow∆ﬂd
 + 
i
) = 0;

789 
	`ªad_d©aÊash
 (
Devi˚Addªss
, (
SizeToDow∆ﬂd
 + 4), (*)(
AddªssToDow∆ﬂd
));

791 
	`¥ötf
("VFY: ");

792 
¸c2
 = 0;

794 
pAT91
->
	`CRC32
((c⁄° *)
AddªssToDow∆ﬂd
, 
SizeToDow∆ﬂd
 , &
¸c2
);

795 
¸c1
 = ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
)) +

796 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 1) << 8) +

797 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 2) << 16) +

798 ()(*(*)(
AddªssToDow∆ﬂd
 + 
SizeToDow∆ﬂd
 + 3) << 24);

800 i‡(
¸c1
 !
¸c2
)

801 
	`¥ötf
("ERR");

803 
	`¥ötf
("OK");

805 
comm™d
 = 0;

806 
XmodemCom∂ëe
 = 0;

807 
	`AT91F_WaôKeyPªs£d
();

810 
	}
}

	@linux/at91/image/dfboot/src/main.h

27 #i‚de‡
maö_h


28 
	#maö_h


	)

30 
	~"embedded_£rvi˚s.h
"

32 
	#AT91C_DOWNLOAD_BASE_ADDRESS
 0x20000000

	)

33 
	#AT91C_DOWNLOAD_MAX_SIZE
 0x00040000

	)

35 
	#AT91C_OFFSET_VECT6
 0x14

36 

	)

37 
	#AT91C_VERSION
 "VER 1.05"

	)

41 
GëTickCou¡
();

	@linux/at91/image/dfboot/src/mci_device.c

16 
	~<AT91C_MCI_Devi˚.h
>

17 
	~"°dio.h
"

19 
	#AT91C_MCI_TIMEOUT
 1000000

	)

20 
	#BUFFER_SIZE_MCI_DEVICE
 512

	)

21 
	#MASTER_CLOCK
 60000000

	)

22 
	#FALSE
 0

	)

23 
	#TRUE
 1

	)

26 
AT91F_ASM_MCI_H™dÀr
();

28 
AT91S_MciDevi˚Fótuªs
 
	gMCI_Devi˚_Fótuªs
;

29 
AT91S_MciDevi˚Desc
 
	gMCI_Devi˚_Desc
;

30 
AT91S_MciDevi˚
 
	gMCI_Devi˚
;

32 #unde‡
ENABLE_WRITE


33 #unde‡
MMC


39 
	$AT91F_MCI_SídComm™d
 (

40 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

41 
Cmd
,

42 
Arg
)

44 
îr‹
,
°©us
;

48 
AT91C_BASE_MCI
->
MCI_ARGR
 = 
Arg
;

49 
AT91C_BASE_MCI
->
MCI_CMDR
 = 
Cmd
;

54 
°©us
 = 
AT91C_BASE_MCI
->
MCI_SR
;

57  !(
°©us
 & 
AT91C_MCI_CMDRDY
) );

60 
îr‹
 = (
AT91C_BASE_MCI
->
MCI_SR
Ë& 
AT91C_MCI_SR_ERROR
;

61 if(
îr‹
 != 0 )

64 i‡–(
Cmd
 !
AT91C_SDCARD_APP_OP_COND_CMD
Ë&& (Cmd !
AT91C_MMC_SEND_OP_COND_CMD
) )

65  ((
AT91C_BASE_MCI
->
MCI_SR
Ë& 
AT91C_MCI_SR_ERROR
);

68 i‡(
îr‹
 !
AT91C_MCI_RCRCE
)

69  ((
AT91C_BASE_MCI
->
MCI_SR
Ë& 
AT91C_MCI_SR_ERROR
);

72  
AT91C_CMD_SEND_OK
;

73 
	}
}

79 
	$AT91F_MCI_SDC¨d_SídAµComm™d
 (

80 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

81 
Cmd_Aµ
,

82 
Arg
 )

84 
°©us
;

88 
AT91C_BASE_MCI
->
MCI_ARGR
 = (
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
 << 16 );

89 
AT91C_BASE_MCI
->
MCI_CMDR
 = 
AT91C_APP_CMD
;

94 
°©us
 = 
AT91C_BASE_MCI
->
MCI_SR
;

97  !(
°©us
 & 
AT91C_MCI_CMDRDY
) );

100 i‡(((
AT91C_BASE_MCI
->
MCI_SR
Ë& 
AT91C_MCI_SR_ERROR
) != 0 )

101  ((
AT91C_BASE_MCI
->
MCI_SR
Ë& 
AT91C_MCI_SR_ERROR
);

104 i‡–(
Cmd_Aµ
 && 
AT91C_SDCARD_APP_ALL_CMD
) == 0)

105  
AT91C_CMD_SEND_ERROR
;

107 –
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,
Cmd_Aµ
,
Arg
) );

108 
	}
}

114 
	$AT91F_MCI_GëSètus
(
AT91PS_MciDevi˚
 
pMCI_Devi˚
,
ªœtive_ˇrd_addªss
)

116 i‡(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

117 
AT91C_SEND_STATUS_CMD
,

118 
ªœtive_ˇrd_addªss
 <<16Ë=
AT91C_CMD_SEND_OK
)

119  (
AT91C_BASE_MCI
->
MCI_RSPR
[0]);

121  
AT91C_CMD_SEND_ERROR
;

122 
	}
}

128 
	$AT91F_MCI_Devi˚_H™dÀr
(

129 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

130 
°©us
)

133 i‡–
°©us
 & 
AT91C_MCI_TXBUFE
 )

135 
AT91C_BASE_MCI
->
MCI_IDR
 = 
AT91C_MCI_TXBUFE
;

136 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

138 
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 = 
AT91C_MCI_IDLE
;

142 i‡–
°©us
 & 
AT91C_MCI_RXBUFF
 )

144 
AT91C_BASE_MCI
->
MCI_IDR
 = 
AT91C_MCI_RXBUFF
;

145 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

147 
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 = 
AT91C_MCI_IDLE
;

150 
	}
}

156 
	$AT91F_MCI_H™dÀr
()

158 
°©us
;

160 
°©us
 = ( 
AT91C_BASE_MCI
->
MCI_SR
 & AT91C_BASE_MCI->
MCI_IMR
 );

162 
	`AT91F_MCI_Devi˚_H™dÀr
(&
MCI_Devi˚
,
°©us
);

163 
	}
}

169 
	$AT91F_MCI_RódBlock
(

170 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

171 
§c
,

172 *
d©aBuf„r
,

173 
sizeToRód
 )

176 if(
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 !
AT91C_MCI_IDLE
)

177  
AT91C_READ_ERROR
;

179 if–(
	`AT91F_MCI_GëSètus
(
pMCI_Devi˚
,pMCI_Devi˚->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
Ë& 
AT91C_SR_READY_FOR_DATA
) != AT91C_SR_READY_FOR_DATA)

180  
AT91C_READ_ERROR
;

182 i‡–(
§c
 + 
sizeToRód
Ë> 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Mem‹y_C≠acôy
 )

183  
AT91C_READ_ERROR
;

186 i‡–(
§c
 % 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
) != 0 )

187  
AT91C_READ_ERROR
;

191 if–(
sizeToRód
 < 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
)

192 && (
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Ród_P¨tül
 == 0x00) )

193  
AT91C_READ_ERROR
;

195 if–
sizeToRód
 > 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
)

196  
AT91C_READ_ERROR
;

200 
AT91C_BASE_MCI
->
MCI_MR
 |((
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
 << 16Ë| 
AT91C_MCI_PDCMODE
);

202 i‡(
sizeToRód
 %4)

203 
sizeToRód
 = (sizeToRead /4)+1;

205 
sizeToRód
 = sizeToRead/4;

207 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = (
AT91C_PDC_TXTDIS
 | 
AT91C_PDC_RXTDIS
);

208 
AT91C_BASE_PDC_MCI
->
PDC_RPR
 = ()
d©aBuf„r
;

209 
AT91C_BASE_PDC_MCI
->
PDC_RCR
 = 
sizeToRód
;

212 i‡–
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_READ_SINGLE_BLOCK_CMD
, 
§c
Ë!
AT91C_CMD_SEND_OK
 )

213  
AT91C_READ_ERROR
;

215 
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 = 
AT91C_MCI_RX_SINGLE_BLOCK
;

218 
AT91C_BASE_MCI
->
MCI_IER
 = 
AT91C_MCI_RXBUFF
;

221 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

223  
AT91C_READ_OK
;

224 
	}
}

227 #ifde‡
ENABLE_WRITE


232 
	$AT91F_MCI_WrôeBlock
(

233 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

234 
de°
,

235 *
d©aBuf„r
,

236 
sizeToWrôe
 )

239 if–
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 !
AT91C_MCI_IDLE
)

240  
AT91C_WRITE_ERROR
;

242 if–(
	`AT91F_MCI_GëSètus
(
pMCI_Devi˚
,pMCI_Devi˚->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
Ë& 
AT91C_SR_READY_FOR_DATA
) != AT91C_SR_READY_FOR_DATA)

243  
AT91C_WRITE_ERROR
;

245 i‡–(
de°
 + 
sizeToWrôe
Ë> 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Mem‹y_C≠acôy
 )

246  
AT91C_WRITE_ERROR
;

249 i‡–(
de°
 % 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
) != 0 )

250  
AT91C_WRITE_ERROR
;

253 if–(
sizeToWrôe
 < 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Wrôe_D©aBlock_Lígth
)

254 && (
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Wrôe_P¨tül
 == 0x00) )

255  
AT91C_WRITE_ERROR
;

257 if–
sizeToWrôe
 > 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Wrôe_D©aBlock_Lígth
 )

258  
AT91C_WRITE_ERROR
;

262 
AT91C_BASE_MCI
->
MCI_MR
 |((
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Wrôe_D©aBlock_Lígth
 << 16Ë| 
AT91C_MCI_PDCMODE
);

264 i‡(
sizeToWrôe
 %4)

265 
sizeToWrôe
 = (sizeToWrite /4)+1;

267 
sizeToWrôe
 = sizeToWrite/4;

270 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = (
AT91C_PDC_TXTDIS
 | 
AT91C_PDC_RXTDIS
);

271 
AT91C_BASE_PDC_MCI
->
PDC_TPR
 = (Ë
d©aBuf„r
;

272 
AT91C_BASE_PDC_MCI
->
PDC_TCR
 = 
sizeToWrôe
;

275 i‡–
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_WRITE_BLOCK_CMD
, 
de°
Ë!
AT91C_CMD_SEND_OK
)

276  
AT91C_WRITE_ERROR
;

278 
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
°©e
 = 
AT91C_MCI_TX_SINGLE_BLOCK
;

281 
AT91C_BASE_MCI
->
MCI_IER
 = 
AT91C_MCI_TXBUFE
;

284 
AT91C_BASE_PDC_MCI
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

286  
AT91C_WRITE_OK
;

287 
	}
}

290 #ifde‡
MMC


295 
	$AT91F_MCI_MMC_Sñe˘C¨d
(
AT91PS_MciDevi˚
 
pMCI_Devi˚
, 
ªœtive_ˇrd_addªss
)

297 
°©us
;

300 
°©us
 = 
	`AT91F_MCI_GëSètus
(
pMCI_Devi˚
,
ªœtive_ˇrd_addªss
);

302 i‡(
°©us
 < 0)

303  
AT91C_CARD_SELECTED_ERROR
;

305 i‡((
°©us
 & 
AT91C_SR_CARD_SELECTED
) == AT91C_SR_CARD_SELECTED)

306  
AT91C_CARD_SELECTED_OK
;

309 
°©us
 = 0;

310  (
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
°©us
].
Rñ©ive_C¨d_Addªss
 !
ªœtive_ˇrd_addªss
)

311 && (
°©us
 < 
AT91C_MAX_MCI_CARDS
) )

312 
°©us
++;

314 i‡(
°©us
 > 
AT91C_MAX_MCI_CARDS
)

315  
AT91C_CARD_SELECTED_ERROR
;

317 i‡(
	`AT91F_MCI_SídComm™d
–
pMCI_Devi˚
,

318 
AT91C_SEL_DESEL_CARD_CMD
,

319 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
°©us
].
Rñ©ive_C¨d_Addªss
 << 16Ë=
AT91C_CMD_SEND_OK
)

320  
AT91C_CARD_SELECTED_OK
;

321  
AT91C_CARD_SELECTED_ERROR
;

322 
	}
}

329 
	$AT91F_MCI_GëCSD
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
, 
ªœtive_ˇrd_addªss
 , * 
ª•⁄£
)

332 if(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

333 
AT91C_SEND_CSD_CMD
,

334 (
ªœtive_ˇrd_addªss
 << 16)Ë!
AT91C_CMD_SEND_OK
)

335  
AT91C_CMD_SEND_ERROR
;

337 
ª•⁄£
[0] = 
AT91C_BASE_MCI
->
MCI_RSPR
[0];

338 
ª•⁄£
[1] = 
AT91C_BASE_MCI
->
MCI_RSPR
[1];

339 
ª•⁄£
[2] = 
AT91C_BASE_MCI
->
MCI_RSPR
[2];

340 
ª•⁄£
[3] = 
AT91C_BASE_MCI
->
MCI_RSPR
[3];

342  
AT91C_CMD_SEND_OK
;

343 
	}
}

349 
	$AT91F_MCI_SëBlockÀngth
(
AT91PS_MciDevi˚
 
pMCI_Devi˚
,
Àngth
)

351 –
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_SET_BLOCKLEN_CMD
, 
Àngth
) );

352 
	}
}

354 #ifde‡
MMC


359 
	$AT91F_MCI_MMC_GëAŒOCR
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
)

361 
ª•⁄£
 =0x0;

365 
ª•⁄£
 = 
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

366 
AT91C_MMC_SEND_OP_COND_CMD
,

367 
AT91C_MMC_HOST_VOLTAGE_RANGE
);

368 i‡(
ª•⁄£
 !
AT91C_CMD_SEND_OK
)

369  
AT91C_INIT_ERROR
;

371 
ª•⁄£
 = 
AT91C_BASE_MCI
->
MCI_RSPR
[0];

373 i‡–(
ª•⁄£
 & 
AT91C_CARD_POWER_UP_BUSY
) == AT91C_CARD_POWER_UP_BUSY)

374 (
ª•⁄£
);

376 
	}
}

379 #ifde‡
MMC


384 
	$AT91F_MCI_MMC_GëAŒCID
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
, *
ª•⁄£
)

386 
Nb_C¨ds_Found
=-1;

390 if(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

391 
AT91C_MMC_ALL_SEND_CID_CMD
,

392 
AT91C_NO_ARGUMENT
Ë!
AT91C_CMD_SEND_OK
)

393  
Nb_C¨ds_Found
;

396 
Nb_C¨ds_Found
 = 0;

398 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
Nb_C¨ds_Found
].
Rñ©ive_C¨d_Addªss
 = Nb_C¨ds_Found + 
AT91C_FIRST_RCA
;

400 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
Nb_C¨ds_Found
].
C¨d_In£πed
 = 
AT91C_MMC_CARD_INSERTED
;

402 i‡(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

403 
AT91C_MMC_SET_RELATIVE_ADDR_CMD
,

404 (
Nb_C¨ds_Found
 + 
AT91C_FIRST_RCA
Ë<< 16Ë!
AT91C_CMD_SEND_OK
)

405  
AT91C_CMD_SEND_ERROR
;

408 
Nb_C¨ds_Found
++ ;

411 
	}
}

413 #ifde‡
MMC


418 
	$AT91F_MCI_MMC_Inô
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
)

420 
èb_ª•⁄£
[4];

421 
mu…
,
blockƒ
;

422 
i
,
Nb_C¨ds_Found
=0;

425 
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_MMC_GO_IDLE_STATE_CMD
, 
AT91C_NO_ARGUMENT
);

427 if(
	`AT91F_MCI_MMC_GëAŒOCR
(
pMCI_Devi˚
Ë=
AT91C_INIT_ERROR
)

428  
AT91C_INIT_ERROR
;

430 
Nb_C¨ds_Found
 = 
	`AT91F_MCI_MMC_GëAŒCID
(
pMCI_Devi˚
,
èb_ª•⁄£
);

431 i‡(
Nb_C¨ds_Found
 !
AT91C_CMD_SEND_ERROR
)

434 
AT91C_BASE_MCI
->
MCI_MR
 = 
AT91C_MCI_MR_PDCMODE
;

436 
i
 = 0; i < 
Nb_C¨ds_Found
; i++)

438 i‡(
	`AT91F_MCI_GëCSD
(
pMCI_Devi˚
,

439 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Rñ©ive_C¨d_Addªss
,

440 
èb_ª•⁄£
Ë!
AT91C_CMD_SEND_OK
)

441 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Rñ©ive_C¨d_Addªss
 = 0;

444 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Max_Ród_D©aBlock_Lígth
 = 1 << ((
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_LEN_S
Ë& 
AT91C_CSD_RD_B_LEN_M
 );

445 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Max_Wrôe_D©aBlock_Lígth
 = 1 << ((
èb_ª•⁄£
[3] >> 
AT91C_CSD_WBLEN_S
Ë& 
AT91C_CSD_WBLEN_M
 );

446 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Se˘‹_Size
 = 1 + ((
èb_ª•⁄£
[2] >> 
AT91C_CSD_v22_SECT_SIZE_S
Ë& 
AT91C_CSD_v22_SECT_SIZE_M
 );

447 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Ród_P¨tül
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_PAR_S
Ë& 
AT91C_CSD_RD_B_PAR_M
;

448 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Wrôe_P¨tül
 = (
èb_ª•⁄£
[3] >> 
AT91C_CSD_WBLOCK_P_S
Ë& 
AT91C_CSD_WBLOCK_P_M
;

451 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Eø£_Block_E«bÀ
 = 0;

453 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Ród_Block_Mißlignmít
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_MIS_S
Ë& 
AT91C_CSD_RD_B_MIS_M
;

454 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Wrôe_Block_Mißlignmít
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_WR_B_MIS_S
Ë& 
AT91C_CSD_WR_B_MIS_M
;

458 
mu…
 = 1 << ( ((
èb_ª•⁄£
[2] >> 
AT91C_CSD_C_SIZE_M_S
Ë& 
AT91C_CSD_C_SIZE_M_M
) + 2 );

460 
blockƒ
 = ((
èb_ª•⁄£
[1] >> 
AT91C_CSD_CSIZE_H_S
Ë& 
AT91C_CSD_CSIZE_H_M
) << 2;

462 
blockƒ
 = 
mu…
 * ( ( blockƒ + ( (
èb_ª•⁄£
[2] >> 
AT91C_CSD_CSIZE_L_S
Ë& 
AT91C_CSD_CSIZE_L_M
) ) + 1 );

464 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
[
i
].
Mem‹y_C≠acôy
 =ÖMCI_Devi˚->pMCI_Devi˚Fótuªs[i].
Max_Ród_D©aBlock_Lígth
 * 
blockƒ
;

470  
AT91C_INIT_OK
;

473  
AT91C_INIT_ERROR
;

474 
	}
}

481 
	$AT91F_MCI_SDC¨d_GëOCR
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
)

483 
ª•⁄£
 =0x0;

486 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
 = 0x0;

488  (
ª•⁄£
 & 
AT91C_CARD_POWER_UP_BUSY
) != AT91C_CARD_POWER_UP_BUSY )

490 
ª•⁄£
 = 
	`AT91F_MCI_SDC¨d_SídAµComm™d
(
pMCI_Devi˚
,

491 
AT91C_SDCARD_APP_OP_COND_CMD
,

492 
AT91C_MMC_HOST_VOLTAGE_RANGE
);

493 i‡(
ª•⁄£
 !
AT91C_CMD_SEND_OK
)

494  
AT91C_INIT_ERROR
;

496 
ª•⁄£
 = 
AT91C_BASE_MCI
->
MCI_RSPR
[0];

499 (
AT91C_BASE_MCI
->
MCI_RSPR
[0]);

500 
	}
}

506 
	$AT91F_MCI_SDC¨d_GëCID
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
, *
ª•⁄£
)

508 if(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

509 
AT91C_ALL_SEND_CID_CMD
,

510 
AT91C_NO_ARGUMENT
Ë!
AT91C_CMD_SEND_OK
)

511  
AT91C_CMD_SEND_ERROR
;

513 
ª•⁄£
[0] = 
AT91C_BASE_MCI
->
MCI_RSPR
[0];

514 
ª•⁄£
[1] = 
AT91C_BASE_MCI
->
MCI_RSPR
[1];

515 
ª•⁄£
[2] = 
AT91C_BASE_MCI
->
MCI_RSPR
[2];

516 
ª•⁄£
[3] = 
AT91C_BASE_MCI
->
MCI_RSPR
[3];

518  
AT91C_CMD_SEND_OK
;

519 
	}
}

525 
	$AT91F_MCI_SDC¨d_SëBusWidth
(
AT91PS_MciDevi˚
 
pMCI_Devi˚
)

527 vﬁ©ûê
ªt_vÆue
;

528 
bus_width
;

532 
ªt_vÆue
 =
	`AT91F_MCI_GëSètus
(
pMCI_Devi˚
,pMCI_Devi˚->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
);

534 (
ªt_vÆue
 > 0Ë&& (‘ë_vÆuê& 
AT91C_SR_READY_FOR_DATA
) == 0));

537 
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
,

538 
AT91C_SEL_DESEL_CARD_CMD
,

539 (
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
)<<16);

542 if(
pMCI_Devi˚
->
pMCI_Devi˚Desc
->
SDC¨d_bus_width
 =
AT91C_MCI_SCDBUS
)

543 
bus_width
 = 
AT91C_BUS_WIDTH_4BITS
;

544 
bus_width
 = 
AT91C_BUS_WIDTH_1BIT
;

546 i‡(
	`AT91F_MCI_SDC¨d_SídAµComm™d
(
pMCI_Devi˚
,
AT91C_SDCARD_SET_BUS_WIDTH_CMD
,
bus_width
Ë!
AT91C_CMD_SEND_OK
)

547  
AT91C_CMD_SEND_ERROR
;

549  
AT91C_CMD_SEND_OK
;

550 
	}
}

556 
	$AT91F_MCI_SDC¨d_Inô
 (
AT91PS_MciDevi˚
 
pMCI_Devi˚
)

558 
èb_ª•⁄£
[4];

559 
mu…
,
blockƒ
;

561 
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_GO_IDLE_STATE_CMD
, 
AT91C_NO_ARGUMENT
);

563 if(
	`AT91F_MCI_SDC¨d_GëOCR
(
pMCI_Devi˚
Ë=
AT91C_INIT_ERROR
)

564  
AT91C_INIT_ERROR
;

566 i‡(
	`AT91F_MCI_SDC¨d_GëCID
(
pMCI_Devi˚
,
èb_ª•⁄£
Ë=
AT91C_CMD_SEND_OK
)

568 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
C¨d_In£πed
 = 
AT91C_SD_CARD_INSERTED
;

570 i‡(
	`AT91F_MCI_SídComm™d
(
pMCI_Devi˚
, 
AT91C_SET_RELATIVE_ADDR_CMD
, 0Ë=
AT91C_CMD_SEND_OK
)

572 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
 = (
AT91C_BASE_MCI
->
MCI_RSPR
[0] >> 16);

573 i‡(
	`AT91F_MCI_GëCSD
(
pMCI_Devi˚
,pMCI_Devi˚->
pMCI_Devi˚Fótuªs
->
Rñ©ive_C¨d_Addªss
,
èb_ª•⁄£
Ë=
AT91C_CMD_SEND_OK
)

575 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
 = 1 << ((
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_LEN_S
Ë& 
AT91C_CSD_RD_B_LEN_M
 );

576 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Max_Wrôe_D©aBlock_Lígth
 = 1 << ((
èb_ª•⁄£
[3] >> 
AT91C_CSD_WBLEN_S
Ë& 
AT91C_CSD_WBLEN_M
 );

577 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Se˘‹_Size
 = 1 + ((
èb_ª•⁄£
[2] >> 
AT91C_CSD_v21_SECT_SIZE_S
Ë& 
AT91C_CSD_v21_SECT_SIZE_M
 );

578 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Ród_P¨tül
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_PAR_S
Ë& 
AT91C_CSD_RD_B_PAR_M
;

579 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Wrôe_P¨tül
 = (
èb_ª•⁄£
[3] >> 
AT91C_CSD_WBLOCK_P_S
Ë& 
AT91C_CSD_WBLOCK_P_M
;

580 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Eø£_Block_E«bÀ
 = (
èb_ª•⁄£
[3] >> 
AT91C_CSD_v21_ER_BLEN_EN_S
Ë& 
AT91C_CSD_v21_ER_BLEN_EN_M
;

581 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Ród_Block_Mißlignmít
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_RD_B_MIS_S
Ë& 
AT91C_CSD_RD_B_MIS_M
;

582 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Wrôe_Block_Mißlignmít
 = (
èb_ª•⁄£
[1] >> 
AT91C_CSD_WR_B_MIS_S
Ë& 
AT91C_CSD_WR_B_MIS_M
;

586 
mu…
 = 1 << ( ((
èb_ª•⁄£
[2] >> 
AT91C_CSD_C_SIZE_M_S
Ë& 
AT91C_CSD_C_SIZE_M_M
) + 2 );

588 
blockƒ
 = ((
èb_ª•⁄£
[1] >> 
AT91C_CSD_CSIZE_H_S
Ë& 
AT91C_CSD_CSIZE_H_M
) << 2;

590 
blockƒ
 = 
mu…
 * ( ( blockƒ + ( (
èb_ª•⁄£
[2] >> 
AT91C_CSD_CSIZE_L_S
Ë& 
AT91C_CSD_CSIZE_L_M
) ) + 1 );

592 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Mem‹y_C≠acôy
 =ÖMCI_Devi˚->pMCI_Devi˚Fótuªs->
Max_Ród_D©aBlock_Lígth
 * 
blockƒ
;

594 
	`¥ötf
("SD-C¨d: %d Byãs\n\r", 
pMCI_Devi˚
->
pMCI_Devi˚Fótuªs
->
Mem‹y_C≠acôy
);

596 if–
	`AT91F_MCI_SDC¨d_SëBusWidth
(
pMCI_Devi˚
Ë=
AT91C_CMD_SEND_OK
 )

598 i‡(
	`AT91F_MCI_SëBlockÀngth
(
pMCI_Devi˚
,pMCI_Devi˚->
pMCI_Devi˚Fótuªs
->
Max_Ród_D©aBlock_Lígth
Ë=
AT91C_CMD_SEND_OK
)

599  
AT91C_INIT_OK
;

604  
AT91C_INIT_ERROR
;

605 
	}
}

611 
	$AT91F_CfgDevi˚
()

615 
MCI_Devi˚_Fótuªs
.
Rñ©ive_C¨d_Addªss
 = 0;

616 
MCI_Devi˚_Fótuªs
.
C¨d_In£πed
 = 
AT91C_CARD_REMOVED
;

617 
MCI_Devi˚_Fótuªs
.
Max_Ród_D©aBlock_Lígth
 = 0;

618 
MCI_Devi˚_Fótuªs
.
Max_Wrôe_D©aBlock_Lígth
 = 0;

619 
MCI_Devi˚_Fótuªs
.
Ród_P¨tül
 = 0;

620 
MCI_Devi˚_Fótuªs
.
Wrôe_P¨tül
 = 0;

621 
MCI_Devi˚_Fótuªs
.
Eø£_Block_E«bÀ
 = 0;

622 
MCI_Devi˚_Fótuªs
.
Se˘‹_Size
 = 0;

623 
MCI_Devi˚_Fótuªs
.
Mem‹y_C≠acôy
 = 0;

625 
MCI_Devi˚_Desc
.
°©e
 = 
AT91C_MCI_IDLE
;

626 
MCI_Devi˚_Desc
.
SDC¨d_bus_width
 = 
AT91C_MCI_SCDBUS
;

629 
MCI_Devi˚
.
pMCI_Devi˚Desc
 = &
MCI_Devi˚_Desc
;

630 
MCI_Devi˚
.
pMCI_Devi˚Fótuªs
 = &
MCI_Devi˚_Fótuªs
;

632 
	}
}

638 
	$AT91F_MCI_Inô
()

646 
	`AT91F_PIO_CfgOuçut
(
AT91C_BASE_PIOB
,
AT91C_PIO_PB7
);

647 
	`AT91F_PIO_SëOuçut
(
AT91C_BASE_PIOB
,
AT91C_PIO_PB7
);

650 
	`AT91F_MCI_CfgPIO
();

651 
	`AT91F_MCI_CfgPMC
();

652 
	`AT91F_PDC_O≥n
(
AT91C_BASE_PDC_MCI
);

655 
AT91C_BASE_MCI
->
MCI_IDR
 = 0xFFFFFFFF;

658 
	`AT91F_CfgDevi˚
();

661 
	`AT91F_AIC_C⁄figuªIt
(
AT91C_BASE_AIC
,

662 
AT91C_ID_MCI
,

663 
AT91C_AIC_PRIOR_HIGHEST
,

664 
AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
,

665 
AT91F_ASM_MCI_H™dÀr
);

668 
	`AT91F_AIC_E«bÀIt
(
AT91C_BASE_AIC
,
AT91C_ID_MCI
);

671 
	`AT91F_US_E«bÀRx
((
AT91PS_USART
Ë
AT91C_BASE_DBGU
);

673 
	`AT91F_MCI_C⁄figuª
(
AT91C_BASE_MCI
,

674 
AT91C_MCI_DTOR_1MEGA_CYCLES
,

675 
AT91C_MCI_MR_PDCMODE
,

676 
AT91C_MCI_SDCARD_4BITS_SLOTA
);

678 if(
	`AT91F_MCI_SDC¨d_Inô
(&
MCI_Devi˚
Ë!
AT91C_INIT_OK
)

679  
FALSE
;

681  
TRUE
;

683 
	}
}

689 
	$AT91F_MCIDevi˚WaôRódy
(
timeout
)

691 vﬁ©ûê
°©us
;

695 
°©us
 = 
AT91C_BASE_MCI
->
MCI_SR
;

696 
timeout
--;

698  !(
°©us
 & 
AT91C_MCI_NOTBUSY
Ë&& (
timeout
>0) );

699 
	}
}

701 
	$swab32
(
d©a
)

703 
ªs
 = 0;

705 
ªs
 = (
d©a
 & 0x000000ff) << 24 |

706 (
d©a
 & 0x0000ff00) << 8 |

707 (
d©a
 & 0x00ff0000) >> 8 |

708 (
d©a
 & 0xff000000) >> 24;

710  
ªs
;

711 
	}
}

717 
	$AT91F_MCI_RódBlockSwab
(

718 
AT91PS_MciDevi˚
 
pMCI_Devi˚
,

719 
§c
,

720 *
d©abuf„r
,

721 
sizeToRód
)

723 
i
;

724 *
buf
 = (*)
d©abuf„r
;

727 
i
=0;i<
BUFFER_SIZE_MCI_DEVICE
;i++)

728 *
buf
++ = 0x00;

729 
	`AT91F_MCI_RódBlock
(&
MCI_Devi˚
,
§c
,
d©abuf„r
,
sizeToRód
);

732 
	`AT91F_MCIDevi˚WaôRódy
(
AT91C_MCI_TIMEOUT
);

735 
ödex
;

736 *
uiBuf„r
 = 
d©abuf„r
;

738 
ödex
 = 0; index < 512/4; index++)

739 
uiBuf„r
[
ödex
] = 
	`swab32
(uiBuffer[index]);

742 
	}
}

	@linux/at91/image/dfboot/src/stdio.h

1 
	~<°d¨g.h
>

2 
	~<°dboﬁ.h
>

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

8 
©91_öô_u¨ts
();

9 
puts
(c⁄° *
°r
);

10 
putc
(
c
);

11 
putch¨
(
c
);

12 
gëc
();

14 
°æí
(c⁄° *
°r
);

16 
hvÂrötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

18 
¥ötf
(c⁄° *
fmt
, ...);

	@linux/ath79/files/arch/mips/ath79/pci-ath9k-fixup.c

11 
	~<löux/pci.h
>

12 
	~<löux/dñay.h
>

14 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

15 
	~<asm/mach-©h79/©h79.h
>

17 
	s©h9k_fixup
 {

18 
u16
 *
	mˇl_d©a
;

19 
	m¶Ÿ
;

22 
	g©h9k_num_fixups
;

23 
©h9k_fixup
 
	g©h9k_fixups
[2];

25 
	$©h9k_pci_fixup
(
pci_dev
 *
dev
)

27 
__iomem
 *
mem
;

28 
u16
 *
ˇl_d©a
 = 
NULL
;

29 
u16
 
cmd
;

30 
u32
 
b¨0
;

31 
u32
 
vÆ
;

32 
i
;

34 
i
 = 0; i < 
©h9k_num_fixups
; i++) {

35 i‡(
©h9k_fixups
[
i
].
ˇl_d©a
 =
NULL
)

38 i‡(
©h9k_fixups
[
i
].
¶Ÿ
 !
	`PCI_SLOT
(
dev
->
dev‚
))

41 
ˇl_d©a
 = 
©h9k_fixups
[
i
].cal_data;

45 i‡(
ˇl_d©a
 =
NULL
)

48 i‡(*
ˇl_d©a
 != 0xa55a) {

49 
	`¥_îr
("pcò%s: invÆid cÆibøti⁄ d©a\n", 
	`pci_«me
(
dev
));

53 
	`¥_öfo
("pcò%s: fixu∞devi˚ c⁄figuøti⁄\n", 
	`pci_«me
(
dev
));

55 
mem
 = 
	`i‹em≠
(
AR71XX_PCI_MEM_BASE
, 0x10000);

56 i‡(!
mem
) {

57 
	`¥_îr
("pcò%s: i‹em≠Éº‹\n", 
	`pci_«me
(
dev
));

61 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, &
b¨0
);

63 
©h79_soc
) {

64 
ATH79_SOC_AR7161
:

65 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
,

66 
AR71XX_PCI_MEM_BASE
);

68 
ATH79_SOC_AR7240
:

69 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0xffff);

72 
ATH79_SOC_AR7241
:

73 
ATH79_SOC_AR7242
:

74 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0x1000ffff);

76 
ATH79_SOC_AR9344
:

77 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 0x1000ffff);

81 
	`BUG
();

84 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, &
cmd
);

85 
cmd
 |
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
;

86 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, 
cmd
);

89 
ˇl_d©a
 += 3;

90 *
ˇl_d©a
 != 0xffff) {

91 
u32
 
ªg
;

92 
ªg
 = *
ˇl_d©a
++;

93 
vÆ
 = *
ˇl_d©a
++;

94 
vÆ
 |(*
ˇl_d©a
++) << 16;

96 
	`__øw_wrôñ
(
vÆ
, 
mem
 + 
ªg
);

97 
	`udñay
(100);

100 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_VENDOR_ID
, &
vÆ
);

101 
dev
->
víd‹
 = 
vÆ
 & 0xffff;

102 
dev
->
devi˚
 = (
vÆ
 >> 16) & 0xffff;

104 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
PCI_CLASS_REVISION
, &
vÆ
);

105 
dev
->
ªvisi⁄
 = 
vÆ
 & 0xff;

106 
dev
->
˛ass
 = 
vÆ
 >> 8;

108 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, &
cmd
);

109 
cmd
 &~(
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
);

110 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
PCI_COMMAND
, 
cmd
);

112 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
PCI_BASE_ADDRESS_0
, 
b¨0
);

114 
	`iounm≠
(
mem
);

115 
	}
}

116 
DECLARE_PCI_FIXUP_EARLY
(
PCI_VENDOR_ID_ATHEROS
, 
PCI_ANY_ID
, 
©h9k_pci_fixup
);

118 
__öô
 
	$pci_íabÀ_©h9k_fixup
(
¶Ÿ
, 
u16
 *
ˇl_d©a
)

120 i‡(
©h9k_num_fixups
 >
	`ARRAY_SIZE
(
©h9k_fixups
))

123 
©h9k_fixups
[
©h9k_num_fixups
].
¶Ÿ
 = slot;

124 
©h9k_fixups
[
©h9k_num_fixups
].
ˇl_d©a
 = cal_data;

125 
©h9k_num_fixups
++;

126 
	}
}

	@linux/ath79/files/arch/mips/ath79/pci-ath9k-fixup.h

1 #i‚de‡
_PCI_ATH9K_FIXUP


2 
	#_PCI_ATH9K_FIXUP


	)

4 
	$pci_íabÀ_©h9k_fixup
(
¶Ÿ
, 
u16
 *
ˇl_d©a
Ë
__öô
;

	@linux/ath79/files/arch/mips/include/asm/fw/myloader/myloader.h

12 #i‚de‡
_ASM_MIPS_FW_MYLOADER_H


13 
	#_ASM_MIPS_FW_MYLOADER_H


	)

15 
	~<löux/mylﬂdî.h
>

17 
	smylﬂdî_öfo
 {

18 
uöt32_t
 
	mvid
;

19 
uöt32_t
 
	mdid
;

20 
uöt32_t
 
	msvid
;

21 
uöt32_t
 
	msdid
;

22 
uöt8_t
 
	mmacs
[
MYLO_ETHADDR_COUNT
][6];

25 #ifde‡
CONFIG_MYLOADER


26 
mylﬂdî_öfo
 *
	$mylﬂdî_gë_öfo
(Ë
__öô
;

28 
ölöe
 
mylﬂdî_öfo
 *
	$mylﬂdî_gë_öfo
()

30  
NULL
;

31 
	}
}

	@linux/ath79/files/drivers/mtd/parsers/parser_cybertan.c

24 
	~<löux/kî√l.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/vmÆloc.h
>

29 
	~<löux/mtd/mtd.h
>

30 
	~<löux/mtd/∑πôi⁄s.h
>

31 
	~<löux/vîsi⁄.h
>

33 
	scybîèn_hódî
 {

34 
	mmagic
[4];

35 
u8
 
	mªs1
[4];

36 
	mfw_d©e
[3];

37 
	mfw_vî
[3];

38 
	mid
[4];

39 
	mhw_vî
;

40 
	munu£d
;

41 
u8
 
	mÊags
[2];

42 
u8
 
	mªs2
[10];

43 } 
	g__∑cked
;

45 
	#TRX_PARTS
 3

	)

46 
	#TRX_MAGIC
 0x30524448

	)

47 
	#TRX_MAX_OFFSET
 3

	)

49 
	såx_hódî
 {

50 
__À32
 
	mmagic
;

51 
__À32
 
	mÀn
;

52 
__À32
 
	m¸c32
;

53 
__À32
 
	mÊag_vîsi⁄
;

54 
__À32
 
	moff£ts
[
TRX_MAX_OFFSET
];

55 } 
	g__∑cked
;

57 
	#IH_MAGIC
 0x27051956

	)

58 
	#IH_NMLEN
 32

	)

60 
	suimage_hódî
 {

61 
__be32
 
	mih_magic
;

62 
__be32
 
	mih_h¸c
;

63 
__be32
 
	mih_time
;

64 
__be32
 
	mih_size
;

65 
__be32
 
	mih_lﬂd
;

66 
__be32
 
	mih_ï
;

67 
__be32
 
	mih_d¸c
;

68 
uöt8_t
 
	mih_os
;

69 
uöt8_t
 
	mih_¨ch
;

70 
uöt8_t
 
	mih_ty≥
;

71 
uöt8_t
 
	mih_comp
;

72 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

73 } 
	g__∑cked
;

75 
	sfúmw¨e_hódî
 {

76 
cybîèn_hódî
 
	mcybîèn
;

77 
åx_hódî
 
	måx
;

78 
uimage_hódî
 
	muimage
;

79 } 
	g__∑cked
;

81 
	$cybîèn_∑r£_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

82 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

83 
mtd_∑π_∑r£r_d©a
 *
d©a
)

85 
fúmw¨e_hódî
 
hódî
;

86 
åx_hódî
 *
thódî
;

87 
uimage_hódî
 *
uhódî
;

88 
mtd_∑πôi⁄
 *
åx_∑πs
;

89 
size_t
 
ªéí
;

90 
kî√l_Àn
;

91 
ªt
;

93 
åx_∑πs
 = 
	`kˇŒoc
(
TRX_PARTS
, (
mtd_∑πôi⁄
),

94 
GFP_KERNEL
);

95 i‡(!
åx_∑πs
) {

96 
ªt
 = -
ENOMEM
;

97 
out
;

100 
ªt
 = 
	`mtd_ªad
(
ma°î
, 0, (
hódî
),

101 &
ªéí
, (
uöt8_t
 *)&
hódî
);

102 i‡(
ªt
)

103 
‰ì_∑πs
;

105 i‡(
ªéí
 !(
hódî
)) {

106 
ªt
 = -
EIO
;

107 
‰ì_∑πs
;

110 
thódî
 = &
hódî
.
åx
;

111 i‡(
thódî
->
magic
 !
	`˝u_to_À32
(
TRX_MAGIC
)) {

112 
	`¥ötk
(
KERN_NOTICE
 "%s:ÇÿTRX hódî found\n", 
ma°î
->
«me
);

113 
‰ì_∑πs
;

116 
uhódî
 = &
hódî
.
uimage
;

117 i‡(
uhódî
->
ih_magic
 !
	`˝u_to_be32
(
IH_MAGIC
)) {

118 
	`¥ötk
(
KERN_NOTICE
 "%s:ÇÿuImagêfound\n", 
ma°î
->
«me
);

119 
‰ì_∑πs
;

122 
kî√l_Àn
 = 
	`À32_to_˝u
(
thódî
->
off£ts
[1]) +

123 (
cybîèn_hódî
);

125 
åx_∑πs
[0].
«me
 = "header";

126 
åx_∑πs
[0].
off£t
 = 0;

127 
åx_∑πs
[0].
size
 = 
	`off£tof
(
fúmw¨e_hódî
, 
uimage
);

128 
åx_∑πs
[0].
mask_Êags
 = 0;

130 
åx_∑πs
[1].
«me
 = "kernel";

131 
åx_∑πs
[1].
off£t
 =Årx_∑πs[0].off£à+Årx_∑πs[0].
size
;

132 
åx_∑πs
[1].
size
 = 
kî√l_Àn
 -Årx_parts[0].size;

133 
åx_∑πs
[1].
mask_Êags
 = 0;

135 
åx_∑πs
[2].
«me
 = "rootfs";

136 
åx_∑πs
[2].
off£t
 =Årx_∑πs[1].off£à+Årx_∑πs[1].
size
;

137 
åx_∑πs
[2].
size
 = 
ma°î
->size -Årx_parts[1].size -Årx_parts[0].size;

138 
åx_∑πs
[2].
mask_Êags
 = 0;

140 *
µ¨ts
 = 
åx_∑πs
;

141  
TRX_PARTS
;

143 
‰ì_∑πs
:

144 
	`k‰ì
(
åx_∑πs
);

145 
out
:

146  
ªt
;

147 
	}
}

149 c⁄° 
of_devi˚_id
 
	gmtd_∑r£r_cybîèn_of_m©ch_èbÀ
[] = {

150 { .
com∑tibÀ
 = "cybertan,trx" },

153 
MODULE_DEVICE_TABLE
(
of
, 
mtd_∑r£r_cybîèn_of_m©ch_èbÀ
);

155 
mtd_∑π_∑r£r
 
	gmtd_∑r£r_cybîèn
 = {

156 .
∑r£_‚
 = 
cybîèn_∑r£_∑πôi⁄s
,

157 .
	g«me
 = "cybertan-trx",

158 .
	gof_m©ch_èbÀ
 = 
mtd_∑r£r_cybîèn_of_m©ch_èbÀ
,

160 
moduÀ_mtd_∑π_∑r£r
(
mtd_∑r£r_cybîèn
);

162 
MODULE_LICENSE
("GPL");

163 
MODULE_AUTHOR
("Christian Daniel <cd@maintech.de>");

	@linux/ath79/files/drivers/mtd/tplinkpart.c

10 
	~<löux/kî√l.h
>

11 
	~<löux/moduÀ.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/vmÆloc.h
>

14 
	~<löux/magic.h
>

16 
	~<löux/mtd/mtd.h
>

17 
	~<löux/mtd/∑πôi⁄s.h
>

18 
	~<löux/vîsi⁄.h
>

20 
	#TPLINK_NUM_PARTS
 5

	)

21 
	#TPLINK_HEADER_V1
 0x01000000

	)

22 
	#TPLINK_HEADER_V2
 0x02000000

	)

23 
	#MD5SUM_LEN
 16

	)

25 
	#TPLINK_ART_LEN
 0x10000

	)

26 
	#TPLINK_KERNEL_OFFS
 0x20000

	)

27 
	#TPLINK_64K_KERNEL_OFFS
 0x10000

	)

29 
	sçlök_fw_hódî
 {

30 
uöt32_t
 
	mvîsi⁄
;

31 
	mvíd‹_«me
[24];

32 
	mfw_vîsi⁄
[36];

33 
uöt32_t
 
	mhw_id
;

34 
uöt32_t
 
	mhw_ªv
;

35 
uöt32_t
 
	munk1
;

36 
uöt8_t
 
	mmd5sum1
[
MD5SUM_LEN
];

37 
uöt32_t
 
	munk2
;

38 
uöt8_t
 
	mmd5sum2
[
MD5SUM_LEN
];

39 
uöt32_t
 
	munk3
;

40 
uöt32_t
 
	mkî√l_œ
;

41 
uöt32_t
 
	mkî√l_ï
;

42 
uöt32_t
 
	mfw_Àngth
;

43 
uöt32_t
 
	mkî√l_ofs
;

44 
uöt32_t
 
	mkî√l_Àn
;

45 
uöt32_t
 
	mroŸfs_ofs
;

46 
uöt32_t
 
	mroŸfs_Àn
;

47 
uöt32_t
 
	mboŸ_ofs
;

48 
uöt32_t
 
	mboŸ_Àn
;

49 
uöt8_t
 
	m∑d
[360];

50 } 
__©åibuã__
 ((
∑cked
));

52 
çlök_fw_hódî
 *

53 
	$çlök_ªad_hódî
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
)

55 
çlök_fw_hódî
 *
hódî
;

56 
size_t
 
hódî_Àn
;

57 
size_t
 
ªéí
;

58 
ªt
;

59 
u32
 
t
;

61 
hódî
 = 
	`vmÆloc
((*header));

62 i‡(!
hódî
)

63 
îr
;

65 
hódî_Àn
 = (
çlök_fw_hódî
);

66 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, 
hódî_Àn
, &
ªéí
,

67 (*Ë
hódî
);

68 i‡(
ªt
)

69 
îr_‰ì_hódî
;

71 i‡(
ªéí
 !
hódî_Àn
)

72 
îr_‰ì_hódî
;

75 
t
 = 
	`be32_to_˝u
(
hódî
->
vîsi⁄
);

76 i‡((
t
 !
TPLINK_HEADER_V1
Ë&& (à!
TPLINK_HEADER_V2
))

77 
îr_‰ì_hódî
;

79 
t
 = 
	`be32_to_˝u
(
hódî
->
kî√l_ofs
);

80 i‡(
t
 !
hódî_Àn
)

81 
îr_‰ì_hódî
;

83  
hódî
;

85 
îr_‰ì_hódî
:

86 
	`v‰ì
(
hódî
);

87 
îr
:

88  
NULL
;

89 
	}
}

91 
	$çlök_check_roŸfs_magic
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
)

93 
u32
 
magic
;

94 
size_t
 
ªéí
;

95 
ªt
;

97 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, (
magic
), &
ªéí
,

98 (*Ë&
magic
);

99 i‡(
ªt
)

100  
ªt
;

102 i‡(
ªéí
 !(
magic
))

103  -
EIO
;

105 i‡(
	`À32_to_˝u
(
magic
Ë!
SQUASHFS_MAGIC
 &&

106 
magic
 != 0x19852003)

107  -
EINVAL
;

110 
	}
}

112 
çlök_∑r£_∑πôi⁄s_off£t
(
mtd_öfo
 *
ma°î
,

113 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

114 
mtd_∑πôi⁄
 **
µ¨ts
,

116 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

118 
mtd_∑π_∑r£r_d©a
 *
d©a
,

119 
size_t
 
off£t
)

121 
mtd_∑πôi⁄
 *
	g∑πs
;

122 
çlök_fw_hódî
 *
	ghódî
;

123 
	gƒ_∑πs
;

124 
size_t
 
	g¨t_off£t
;

125 
size_t
 
	groŸfs_off£t
;

126 
size_t
 
	gsquashfs_off£t
;

127 
	gªt
;

129 
	gƒ_∑πs
 = 
TPLINK_NUM_PARTS
;

130 
	g∑πs
 = 
kzÆloc
(
ƒ_∑πs
 * (
mtd_∑πôi⁄
), 
GFP_KERNEL
);

131 i‡(!
	g∑πs
) {

132 
	gªt
 = -
ENOMEM
;

133 
	gîr
;

136 
	ghódî
 = 
çlök_ªad_hódî
(
ma°î
, 
off£t
);

137 i‡(!
	ghódî
) {

138 
¥_nŸi˚
("%s:ÇÿTP-Lök hódî found\n", 
ma°î
->
«me
);

139 
	gªt
 = -
ENODEV
;

140 
	gîr_‰ì_∑πs
;

143 
	gsquashfs_off£t
 = 
off£t
 + (
çlök_fw_hódî
) +

144 
be32_to_˝u
(
hódî
->
kî√l_Àn
);

146 
	gªt
 = 
çlök_check_roŸfs_magic
(
ma°î
, 
squashfs_off£t
);

147 i‡(
	gªt
 == 0)

148 
roŸfs_off£t
 = 
squashfs_off£t
;

150 
	groŸfs_off£t
 = 
off£t
 + 
be32_to_˝u
(
hódî
->
roŸfs_ofs
);

152 
	g¨t_off£t
 = 
ma°î
->
size
 - 
TPLINK_ART_LEN
;

154 
	g∑πs
[0].
	g«me
 = "u-boot";

155 
	g∑πs
[0].
	goff£t
 = 0;

156 
	g∑πs
[0].
	gsize
 = 
off£t
;

157 
	g∑πs
[0].
	gmask_Êags
 = 
MTD_WRITEABLE
;

159 
	g∑πs
[1].
	g«me
 = "kernel";

160 
	g∑πs
[1].
	goff£t
 = 
off£t
;

161 
	g∑πs
[1].
	gsize
 = 
roŸfs_off£t
 - 
off£t
;

163 
	g∑πs
[2].
	g«me
 = "rootfs";

164 
	g∑πs
[2].
	goff£t
 = 
roŸfs_off£t
;

165 
	g∑πs
[2].
	gsize
 = 
¨t_off£t
 - 
roŸfs_off£t
;

167 
	g∑πs
[3].
	g«me
 = "art";

168 
	g∑πs
[3].
	goff£t
 = 
¨t_off£t
;

169 
	g∑πs
[3].
	gsize
 = 
TPLINK_ART_LEN
;

170 
	g∑πs
[3].
	gmask_Êags
 = 
MTD_WRITEABLE
;

172 
	g∑πs
[4].
	g«me
 = "firmware";

173 
	g∑πs
[4].
	goff£t
 = 
off£t
;

174 
	g∑πs
[4].
	gsize
 = 
¨t_off£t
 - 
off£t
;

176 
v‰ì
(
hódî
);

178 *
	gµ¨ts
 = 
∑πs
;

179  
	gƒ_∑πs
;

181 
	gîr_‰ì_∑πs
:

182 
k‰ì
(
∑πs
);

183 
	gîr
:

184 *
µ¨ts
 = 
NULL
;

185  
	gªt
;

188 
çlök_∑r£_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

189 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

190 
mtd_∑πôi⁄
 **
µ¨ts
,

192 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

194 
mtd_∑π_∑r£r_d©a
 *
d©a
)

196  
çlök_∑r£_∑πôi⁄s_off£t
(
ma°î
, 
µ¨ts
, 
d©a
,

197 
TPLINK_KERNEL_OFFS
);

200 
çlök_∑r£_64k_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

201 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,5,0)

202 
mtd_∑πôi⁄
 **
µ¨ts
,

204 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

206 
mtd_∑π_∑r£r_d©a
 *
d©a
)

208  
çlök_∑r£_∑πôi⁄s_off£t
(
ma°î
, 
µ¨ts
, 
d©a
,

209 
TPLINK_64K_KERNEL_OFFS
);

212 
mtd_∑π_∑r£r
 
	gçlök_∑r£r
 = {

213 .
ow√r
 = 
THIS_MODULE
,

214 .
	g∑r£_‚
 = 
çlök_∑r£_∑πôi⁄s
,

215 .
	g«me
 = "tp-link",

218 
mtd_∑π_∑r£r
 
	gçlök_64k_∑r£r
 = {

219 .
ow√r
 = 
THIS_MODULE
,

220 .
	g∑r£_‚
 = 
çlök_∑r£_64k_∑πôi⁄s
,

221 .
	g«me
 = "tp-link-64k",

224 
__öô
 
	$çlök_∑r£r_öô
()

226 
	`ªgi°î_mtd_∑r£r
(&
çlök_∑r£r
);

227 
	`ªgi°î_mtd_∑r£r
(&
çlök_64k_∑r£r
);

230 
	}
}

232 
moduÀ_öô
(
çlök_∑r£r_öô
);

234 
MODULE_LICENSE
("GPL v2");

235 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h

14 #i‚de‡
__AG71XX_H


15 
	#__AG71XX_H


	)

17 
	~<löux/kî√l.h
>

18 
	~<löux/vîsi⁄.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/øndom.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

26 
	~<löux/ëhtoﬁ.h
>

27 
	~<löux/ëhîdevi˚.h
>

28 
	~<löux/if_vœn.h
>

29 
	~<löux/phy.h
>

30 
	~<löux/skbuff.h
>

31 
	~<löux/dma-m≠pög.h
>

32 
	~<löux/w‹kqueue.h
>

33 
	~<löux/ª£t.h
>

34 
	~<löux/of.h
>

35 
	~<löux/mfd/sysc⁄.h
>

36 
	~<löux/ªgm≠.h
>

38 
	~<löux/bô›s.h
>

40 
	~<asm/mach-©h79/¨71xx_ªgs.h
>

41 
	~<asm/mach-©h79/©h79.h
>

43 
	#AG71XX_DRV_NAME
 "ag71xx"

	)

50 
	#AG71XX_NAPI_WEIGHT
 32

	)

51 
	#AG71XX_OOM_REFILL
 (1 + 
HZ
/10)

	)

53 
	#AG71XX_INT_ERR
 (
AG71XX_INT_RX_BE
 | 
AG71XX_INT_TX_BE
)

	)

54 
	#AG71XX_INT_TX
 (
AG71XX_INT_TX_PS
)

	)

55 
	#AG71XX_INT_RX
 (
AG71XX_INT_RX_PR
 | 
AG71XX_INT_RX_OF
)

	)

57 
	#AG71XX_INT_POLL
 (
AG71XX_INT_RX
 | 
AG71XX_INT_TX
)

	)

58 
	#AG71XX_INT_INIT
 (
AG71XX_INT_ERR
 | 
AG71XX_INT_POLL
)

	)

60 
	#AG71XX_TX_MTU_LEN
 1540

	)

62 
	#AG71XX_TX_RING_SPLIT
 512

	)

63 
	#AG71XX_TX_RING_DS_PER_PKT
 
	`DIV_ROUND_UP
(
AG71XX_TX_MTU_LEN
, \

64 
AG71XX_TX_RING_SPLIT
)

	)

65 
	#AG71XX_TX_RING_SIZE_DEFAULT
 128

	)

66 
	#AG71XX_RX_RING_SIZE_DEFAULT
 256

	)

68 
	#AG71XX_TX_RING_SIZE_MAX
 128

	)

69 
	#AG71XX_RX_RING_SIZE_MAX
 256

	)

71 #ifde‡
CONFIG_AG71XX_DEBUG


72 
	#DBG
(
fmt
, 
¨gs
...Ë
	`¥_debug
(fmt, ##árgs)

	)

74 
	#DBG
(
fmt
, 
¨gs
...Ëdÿ{} 0)

	)

77 
	#ag71xx_as£π
(
_c⁄d
) \

79 i‡(
_c⁄d
) \

81 
	`¥ötk
("%s,%d:ás£πi⁄ faûed\n", 
__FILE__
, 
__LINE__
); \

82 
	`BUG
(); \

83 } 0)

	)

85 
	sag71xx_desc
 {

86 
u32
 
	md©a
;

87 
u32
 
	m˘æ
;

88 
	#DESC_EMPTY
 
	`BIT
(31)

	)

89 
	#DESC_MORE
 
	`BIT
(24)

	)

90 
	#DESC_PKTLEN_M
 0xfff

	)

91 
u32
 
	m√xt
;

92 
u32
 
	m∑d
;

93 } 
__©åibuã__
((
Æig√d
(4)));

95 
	#AG71XX_DESC_SIZE
 
	`roundup
((
ag71xx_desc
), \

96 
L1_CACHE_BYTES
)

	)

98 
	sag71xx_buf
 {

100 
sk_buff
 *
	mskb
;

101 *
	mrx_buf
;

104 
dma_addr_t
 
	mdma_addr
;

105 
	mÀn
;

109 
	sag71xx_rög
 {

110 
ag71xx_buf
 *
	mbuf
;

111 
u8
 *
	mdescs_˝u
;

112 
dma_addr_t
 
	mdescs_dma
;

113 
u16
 
	mdesc_•lô
;

114 
u16
 
	m‹dî
;

115 
	mcuº
;

116 
	mdúty
;

119 
	sag71xx_öt_°©s
 {

120 
	mrx_¥
;

121 
	mrx_be
;

122 
	mrx_of
;

123 
	mtx_ps
;

124 
	mtx_be
;

125 
	mtx_ur
;

126 
	mtŸÆ
;

129 
	sag71xx_«pi_°©s
 {

130 
	m«pi_ˇŒs
;

131 
	mrx_cou¡
;

132 
	mrx_∑ckës
;

133 
	mrx_∑ckës_max
;

134 
	mtx_cou¡
;

135 
	mtx_∑ckës
;

136 
	mtx_∑ckës_max
;

138 
	mrx
[
AG71XX_NAPI_WEIGHT
 + 1];

139 
	mtx
[
AG71XX_NAPI_WEIGHT
 + 1];

142 
	sag71xx_debug
 {

143 
díåy
 *
	mdebugfs_dú
;

145 
ag71xx_öt_°©s
 
	möt_°©s
;

146 
ag71xx_«pi_°©s
 
	m«pi_°©s
;

149 
	sag71xx
 {

154 
ag71xx_rög
 
rx_rög
 
	m____ˇchñöe_Æig√d
;

155 
ag71xx_rög
 
tx_rög
 
	m____ˇchñöe_Æig√d
;

157 
	mmac_idx
;

159 
u16
 
	mdesc_pkéí_mask
;

160 
u16
 
	mrx_buf_size
;

161 
u8
 
	mrx_buf_off£t
;

162 
u8
 
	mtx_h™g_w‹k¨ound
:1;

164 
√t_devi˚
 *
	mdev
;

165 
∂©f‹m_devi˚
 *
	mpdev
;

166 
•ölock_t
 
	mlock
;

167 
«pi_°ru˘
 
	m«pi
;

168 
u32
 
	mmsg_íabÀ
;

173 
__iomem
 *
	mmac_ba£
;

174 
__iomem
 *
	mmii_ba£
;

176 
ag71xx_desc
 *
	m°›_desc
;

177 
dma_addr_t
 
	m°›_desc_dma
;

179 
phy_devi˚
 *
	mphy_dev
;

180 *
	mphy_¥iv
;

181 
	mphy_if_mode
;

183 
	mlök
;

184 
	m•ìd
;

185 
	mdu∂ex
;

187 
dñayed_w‹k
 
	mª°¨t_w‹k
;

188 
timî_li°
 
	moom_timî
;

190 
ª£t_c⁄åﬁ
 *
	mmac_ª£t
;

192 
u32
 
	mfifod©a
[3];

193 
u32
 
	m∂ld©a
[3];

194 
u32
 
	m∂Ãeg
[3];

195 
ªgm≠
 *
	m∂Ãegm≠
;

197 #ifde‡
CONFIG_AG71XX_DEBUG_FS


198 
ag71xx_debug
 
	mdebug
;

202 
	sag71xx_mdio
 {

203 
ª£t_c⁄åﬁ
 *
	mmdio_ª£t
;

204 
mii_bus
 *
	mmii_bus
;

205 
ªgm≠
 *
	mmii_ªgm≠
;

208 
ëhtoﬁ_›s
 
ag71xx_ëhtoﬁ_›s
;

209 
ag71xx_lök_adju°
(
ag71xx
 *
ag
);

211 
ag71xx_phy_c⁄√˘
(
ag71xx
 *
ag
);

212 
ag71xx_phy_disc⁄√˘
(
ag71xx
 *
ag
);

214 
ölöe
 
	$ag71xx_desc_em±y
(
ag71xx_desc
 *
desc
)

216  (
desc
->
˘æ
 & 
DESC_EMPTY
) != 0;

217 
	}
}

219 
ölöe
 
ag71xx_desc
 *

220 
	$ag71xx_rög_desc
(
ag71xx_rög
 *
rög
, 
idx
)

222  (
ag71xx_desc
 *Ë&
rög
->
descs_˝u
[
idx
 * 
AG71XX_DESC_SIZE
];

223 
	}
}

225 
ölöe
 

226 
	$ag71xx_rög_size_‹dî
(
size
)

228  
	`Ês
(
size
 - 1);

229 
	}
}

232 
	#AG71XX_REG_MAC_CFG1
 0x0000

	)

233 
	#AG71XX_REG_MAC_CFG2
 0x0004

	)

234 
	#AG71XX_REG_MAC_IPG
 0x0008

	)

235 
	#AG71XX_REG_MAC_HDX
 0x000c

	)

236 
	#AG71XX_REG_MAC_MFL
 0x0010

	)

237 
	#AG71XX_REG_MII_CFG
 0x0020

	)

238 
	#AG71XX_REG_MII_CMD
 0x0024

	)

239 
	#AG71XX_REG_MII_ADDR
 0x0028

	)

240 
	#AG71XX_REG_MII_CTRL
 0x002c

	)

241 
	#AG71XX_REG_MII_STATUS
 0x0030

	)

242 
	#AG71XX_REG_MII_IND
 0x0034

	)

243 
	#AG71XX_REG_MAC_IFCTL
 0x0038

	)

244 
	#AG71XX_REG_MAC_ADDR1
 0x0040

	)

245 
	#AG71XX_REG_MAC_ADDR2
 0x0044

	)

246 
	#AG71XX_REG_FIFO_CFG0
 0x0048

	)

247 
	#AG71XX_REG_FIFO_CFG1
 0x004c

	)

248 
	#AG71XX_REG_FIFO_CFG2
 0x0050

	)

249 
	#AG71XX_REG_FIFO_CFG3
 0x0054

	)

250 
	#AG71XX_REG_FIFO_CFG4
 0x0058

	)

251 
	#AG71XX_REG_FIFO_CFG5
 0x005c

	)

252 
	#AG71XX_REG_FIFO_RAM0
 0x0060

	)

253 
	#AG71XX_REG_FIFO_RAM1
 0x0064

	)

254 
	#AG71XX_REG_FIFO_RAM2
 0x0068

	)

255 
	#AG71XX_REG_FIFO_RAM3
 0x006c

	)

256 
	#AG71XX_REG_FIFO_RAM4
 0x0070

	)

257 
	#AG71XX_REG_FIFO_RAM5
 0x0074

	)

258 
	#AG71XX_REG_FIFO_RAM6
 0x0078

	)

259 
	#AG71XX_REG_FIFO_RAM7
 0x007c

	)

261 
	#AG71XX_REG_TX_CTRL
 0x0180

	)

262 
	#AG71XX_REG_TX_DESC
 0x0184

	)

263 
	#AG71XX_REG_TX_STATUS
 0x0188

	)

264 
	#AG71XX_REG_RX_CTRL
 0x018c

	)

265 
	#AG71XX_REG_RX_DESC
 0x0190

	)

266 
	#AG71XX_REG_RX_STATUS
 0x0194

	)

267 
	#AG71XX_REG_INT_ENABLE
 0x0198

	)

268 
	#AG71XX_REG_INT_STATUS
 0x019c

	)

270 
	#AG71XX_REG_FIFO_DEPTH
 0x01a8

	)

271 
	#AG71XX_REG_RX_SM
 0x01b0

	)

272 
	#AG71XX_REG_TX_SM
 0x01b4

	)

274 
	#MAC_CFG1_TXE
 
	`BIT
(0Ë

	)

275 
	#MAC_CFG1_STX
 
	`BIT
(1Ë

	)

276 
	#MAC_CFG1_RXE
 
	`BIT
(2Ë

	)

277 
	#MAC_CFG1_SRX
 
	`BIT
(3Ë

	)

278 
	#MAC_CFG1_TFC
 
	`BIT
(4Ë

	)

279 
	#MAC_CFG1_RFC
 
	`BIT
(5Ë

	)

280 
	#MAC_CFG1_LB
 
	`BIT
(8Ë

	)

281 
	#MAC_CFG1_SR
 
	`BIT
(31Ë

	)

283 
	#MAC_CFG2_FDX
 
	`BIT
(0)

	)

284 
	#MAC_CFG2_CRC_EN
 
	`BIT
(1)

	)

285 
	#MAC_CFG2_PAD_CRC_EN
 
	`BIT
(2)

	)

286 
	#MAC_CFG2_LEN_CHECK
 
	`BIT
(4)

	)

287 
	#MAC_CFG2_HUGE_FRAME_EN
 
	`BIT
(5)

	)

288 
	#MAC_CFG2_IF_1000
 
	`BIT
(9)

	)

289 
	#MAC_CFG2_IF_10_100
 
	`BIT
(8)

	)

291 
	#FIFO_CFG0_WTM
 
	`BIT
(0Ë

	)

292 
	#FIFO_CFG0_RXS
 
	`BIT
(1Ë

	)

293 
	#FIFO_CFG0_RXF
 
	`BIT
(2Ë

	)

294 
	#FIFO_CFG0_TXS
 
	`BIT
(3Ë

	)

295 
	#FIFO_CFG0_TXF
 
	`BIT
(4Ë

	)

296 
	#FIFO_CFG0_ALL
 (
FIFO_CFG0_WTM
 | 
FIFO_CFG0_RXS
 | 
FIFO_CFG0_RXF
 \

297 | 
FIFO_CFG0_TXS
 | 
FIFO_CFG0_TXF
)

	)

299 
	#FIFO_CFG0_ENABLE_SHIFT
 8

	)

301 
	#FIFO_CFG4_DE
 
	`BIT
(0Ë

	)

302 
	#FIFO_CFG4_DV
 
	`BIT
(1Ë

	)

303 
	#FIFO_CFG4_FC
 
	`BIT
(2Ë

	)

304 
	#FIFO_CFG4_CE
 
	`BIT
(3Ë

	)

305 
	#FIFO_CFG4_CR
 
	`BIT
(4Ë

	)

306 
	#FIFO_CFG4_LM
 
	`BIT
(5Ë

	)

307 
	#FIFO_CFG4_LO
 
	`BIT
(6Ë

	)

308 
	#FIFO_CFG4_OK
 
	`BIT
(7Ë

	)

309 
	#FIFO_CFG4_MC
 
	`BIT
(8Ë

	)

310 
	#FIFO_CFG4_BC
 
	`BIT
(9Ë

	)

311 
	#FIFO_CFG4_DR
 
	`BIT
(10Ë

	)

312 
	#FIFO_CFG4_LE
 
	`BIT
(11Ë

	)

313 
	#FIFO_CFG4_CF
 
	`BIT
(12Ë

	)

314 
	#FIFO_CFG4_PF
 
	`BIT
(13Ë

	)

315 
	#FIFO_CFG4_UO
 
	`BIT
(14Ë

	)

316 
	#FIFO_CFG4_VT
 
	`BIT
(15Ë

	)

317 
	#FIFO_CFG4_FT
 
	`BIT
(16Ë

	)

318 
	#FIFO_CFG4_UC
 
	`BIT
(17Ë

	)

320 
	#FIFO_CFG5_DE
 
	`BIT
(0Ë

	)

321 
	#FIFO_CFG5_DV
 
	`BIT
(1Ë

	)

322 
	#FIFO_CFG5_FC
 
	`BIT
(2Ë

	)

323 
	#FIFO_CFG5_CE
 
	`BIT
(3Ë

	)

324 
	#FIFO_CFG5_LM
 
	`BIT
(4Ë

	)

325 
	#FIFO_CFG5_LO
 
	`BIT
(5Ë

	)

326 
	#FIFO_CFG5_OK
 
	`BIT
(6Ë

	)

327 
	#FIFO_CFG5_MC
 
	`BIT
(7Ë

	)

328 
	#FIFO_CFG5_BC
 
	`BIT
(8Ë

	)

329 
	#FIFO_CFG5_DR
 
	`BIT
(9Ë

	)

330 
	#FIFO_CFG5_CF
 
	`BIT
(10Ë

	)

331 
	#FIFO_CFG5_PF
 
	`BIT
(11Ë

	)

332 
	#FIFO_CFG5_UO
 
	`BIT
(12Ë

	)

333 
	#FIFO_CFG5_VT
 
	`BIT
(13Ë

	)

334 
	#FIFO_CFG5_LE
 
	`BIT
(14Ë

	)

335 
	#FIFO_CFG5_FT
 
	`BIT
(15Ë

	)

336 
	#FIFO_CFG5_16
 
	`BIT
(16Ë

	)

337 
	#FIFO_CFG5_17
 
	`BIT
(17Ë

	)

338 
	#FIFO_CFG5_SF
 
	`BIT
(18Ë

	)

339 
	#FIFO_CFG5_BM
 
	`BIT
(19Ë

	)

341 
	#AG71XX_INT_TX_PS
 
	`BIT
(0)

	)

342 
	#AG71XX_INT_TX_UR
 
	`BIT
(1)

	)

343 
	#AG71XX_INT_TX_BE
 
	`BIT
(3)

	)

344 
	#AG71XX_INT_RX_PR
 
	`BIT
(4)

	)

345 
	#AG71XX_INT_RX_OF
 
	`BIT
(6)

	)

346 
	#AG71XX_INT_RX_BE
 
	`BIT
(7)

	)

348 
	#MAC_IFCTL_SPEED
 
	`BIT
(16)

	)

350 
	#MII_CFG_CLK_DIV_4
 0

	)

351 
	#MII_CFG_CLK_DIV_6
 2

	)

352 
	#MII_CFG_CLK_DIV_8
 3

	)

353 
	#MII_CFG_CLK_DIV_10
 4

	)

354 
	#MII_CFG_CLK_DIV_14
 5

	)

355 
	#MII_CFG_CLK_DIV_20
 6

	)

356 
	#MII_CFG_CLK_DIV_28
 7

	)

357 
	#MII_CFG_CLK_DIV_34
 8

	)

358 
	#MII_CFG_CLK_DIV_42
 9

	)

359 
	#MII_CFG_CLK_DIV_50
 10

	)

360 
	#MII_CFG_CLK_DIV_58
 11

	)

361 
	#MII_CFG_CLK_DIV_66
 12

	)

362 
	#MII_CFG_CLK_DIV_74
 13

	)

363 
	#MII_CFG_CLK_DIV_82
 14

	)

364 
	#MII_CFG_CLK_DIV_98
 15

	)

365 
	#MII_CFG_RESET
 
	`BIT
(31)

	)

367 
	#MII_CMD_WRITE
 0x0

	)

368 
	#MII_CMD_READ
 0x1

	)

369 
	#MII_ADDR_SHIFT
 8

	)

370 
	#MII_IND_BUSY
 
	`BIT
(0)

	)

371 
	#MII_IND_INVALID
 
	`BIT
(2)

	)

373 
	#TX_CTRL_TXE
 
	`BIT
(0Ë

	)

375 
	#TX_STATUS_PS
 
	`BIT
(0Ë

	)

376 
	#TX_STATUS_UR
 
	`BIT
(1Ë

	)

377 
	#TX_STATUS_BE
 
	`BIT
(3Ë

	)

379 
	#RX_CTRL_RXE
 
	`BIT
(0Ë

	)

381 
	#RX_STATUS_PR
 
	`BIT
(0Ë

	)

382 
	#RX_STATUS_OF
 
	`BIT
(2Ë

	)

383 
	#RX_STATUS_BE
 
	`BIT
(3Ë

	)

385 
ölöe
 
	$ag71xx_wr
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
vÆue
)

387 
	`__øw_wrôñ
(
vÆue
, 
ag
->
mac_ba£
 + 
ªg
);

389 (Ë
	`__øw_ªadl
(
ag
->
mac_ba£
 + 
ªg
);

390 
	}
}

392 
ölöe
 
u32
 
	$ag71xx_º
(
ag71xx
 *
ag
, 
ªg
)

394  
	`__øw_ªadl
(
ag
->
mac_ba£
 + 
ªg
);

395 
	}
}

397 
ölöe
 
	$ag71xx_sb
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
mask
)

399 
__iomem
 *
r
;

401 
r
 = 
ag
->
mac_ba£
 + 
ªg
;

402 
	`__øw_wrôñ
(
	`__øw_ªadl
(
r
Ë| 
mask
,Ñ);

404 (Ë
	`__øw_ªadl
(
r
);

405 
	}
}

407 
ölöe
 
	$ag71xx_cb
(
ag71xx
 *
ag
, 
ªg
, 
u32
 
mask
)

409 
__iomem
 *
r
;

411 
r
 = 
ag
->
mac_ba£
 + 
ªg
;

412 
	`__øw_wrôñ
(
	`__øw_ªadl
(
r
Ë& ~
mask
,Ñ);

414 (Ë
	`__øw_ªadl
(
r
);

415 
	}
}

417 
ölöe
 
	$ag71xx_öt_íabÀ
(
ag71xx
 *
ag
, 
u32
 
öts
)

419 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
öts
);

420 
	}
}

422 
ölöe
 
	$ag71xx_öt_dißbÀ
(
ag71xx
 *
ag
, 
u32
 
öts
)

424 
	`ag71xx_cb
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
öts
);

425 
	}
}

427 #ifde‡
CONFIG_AG71XX_DEBUG_FS


428 
ag71xx_debugfs_roŸ_öô
();

429 
ag71xx_debugfs_roŸ_exô
();

430 
ag71xx_debugfs_öô
(
ag71xx
 *
ag
);

431 
ag71xx_debugfs_exô
(
ag71xx
 *
ag
);

432 
ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
, 
u32
 
°©us
);

433 
ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
, 
rx
, 
tx
);

435 
ölöe
 
	$ag71xx_debugfs_roŸ_öô
(Ë{  0; 
	}
}

436 
ölöe
 
	$ag71xx_debugfs_roŸ_exô
(Ë{
	}
}

437 
ölöe
 
	$ag71xx_debugfs_öô
(
ag71xx
 *
ag
Ë{  0; 
	}
}

438 
ölöe
 
	$ag71xx_debugfs_exô
(
ag71xx
 *
ag
Ë{
	}
}

439 
ölöe
 
	$ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
,

440 
u32
 
°©us
Ë{
	}
}

441 
ölöe
 
	$ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
,

442 
rx
, 
tx
Ë{
	}
}

445 
ag71xx_¨7240_öô
(
ag71xx
 *
ag
, 
devi˚_node
 *
≈
);

446 
ag71xx_¨7240_˛ónup
(
ag71xx
 *
ag
);

448 
ag71xx_£tup_gmac
(
devi˚_node
 *
≈
);

450 
¨7240sw_phy_ªad
(
mii_bus
 *
mii
, 
addr
, 
ªg
);

451 
¨7240sw_phy_wrôe
(
mii_bus
 *
mii
, 
addr
, 
ªg
, 
u16
 
vÆ
);

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c

12 
	~<löux/ëhîdevi˚.h
>

13 
	~<löux/li°.h
>

14 
	~<löux/√tdevi˚.h
>

15 
	~<löux/of_mdio.h
>

16 
	~<löux/of_√t.h
>

17 
	~<löux/phy.h
>

18 
	~<löux/mii.h
>

19 
	~<löux/bô›s.h
>

20 
	~<löux/swôch.h
>

21 
	~"ag71xx.h
"

23 
	#BITM
(
_cou¡
Ë(
	`BIT
(_cou¡Ë- 1)

	)

24 
	#BITS
(
_shi·
, 
_cou¡
Ë(
	`BITM
(_cou¡Ë<< _shi·)

	)

26 
	#AR7240_REG_MASK_CTRL
 0x00

	)

27 
	#AR7240_MASK_CTRL_REVISION_M
 
	`BITM
(8)

	)

28 
	#AR7240_MASK_CTRL_VERSION_M
 
	`BITM
(8)

	)

29 
	#AR7240_MASK_CTRL_VERSION_S
 8

	)

30 
	#AR7240_MASK_CTRL_VERSION_AR7240
 0x01

	)

31 
	#AR7240_MASK_CTRL_VERSION_AR934X
 0x02

	)

32 
	#AR7240_MASK_CTRL_SOFT_RESET
 
	`BIT
(31)

	)

34 
	#AR7240_REG_MAC_ADDR0
 0x20

	)

35 
	#AR7240_REG_MAC_ADDR1
 0x24

	)

37 
	#AR7240_REG_FLOOD_MASK
 0x2c

	)

38 
	#AR7240_FLOOD_MASK_BROAD_TO_CPU
 
	`BIT
(26)

	)

40 
	#AR7240_REG_GLOBAL_CTRL
 0x30

	)

41 
	#AR7240_GLOBAL_CTRL_MTU_M
 
	`BITM
(11)

	)

42 
	#AR9340_GLOBAL_CTRL_MTU_M
 
	`BITM
(14)

	)

44 
	#AR7240_REG_VTU
 0x0040

	)

45 
	#AR7240_VTU_OP
 
	`BITM
(3)

	)

46 
	#AR7240_VTU_OP_NOOP
 0x0

	)

47 
	#AR7240_VTU_OP_FLUSH
 0x1

	)

48 
	#AR7240_VTU_OP_LOAD
 0x2

	)

49 
	#AR7240_VTU_OP_PURGE
 0x3

	)

50 
	#AR7240_VTU_OP_REMOVE_PORT
 0x4

	)

51 
	#AR7240_VTU_ACTIVE
 
	`BIT
(3)

	)

52 
	#AR7240_VTU_FULL
 
	`BIT
(4)

	)

53 
	#AR7240_VTU_PORT
 
	`BITS
(8, 4)

	)

54 
	#AR7240_VTU_PORT_S
 8

	)

55 
	#AR7240_VTU_VID
 
	`BITS
(16, 12)

	)

56 
	#AR7240_VTU_VID_S
 16

	)

57 
	#AR7240_VTU_PRIO
 
	`BITS
(28, 3)

	)

58 
	#AR7240_VTU_PRIO_S
 28

	)

59 
	#AR7240_VTU_PRIO_EN
 
	`BIT
(31)

	)

61 
	#AR7240_REG_VTU_DATA
 0x0044

	)

62 
	#AR7240_VTUDATA_MEMBER
 
	`BITS
(0, 10)

	)

63 
	#AR7240_VTUDATA_VALID
 
	`BIT
(11)

	)

65 
	#AR7240_REG_ATU
 0x50

	)

66 
	#AR7240_ATU_FLUSH_ALL
 0x1

	)

68 
	#AR7240_REG_AT_CTRL
 0x5c

	)

69 
	#AR7240_AT_CTRL_AGE_TIME
 
	`BITS
(0, 15)

	)

70 
	#AR7240_AT_CTRL_AGE_EN
 
	`BIT
(17)

	)

71 
	#AR7240_AT_CTRL_LEARN_CHANGE
 
	`BIT
(18)

	)

72 
	#AR7240_AT_CTRL_RESERVED
 
	`BIT
(19)

	)

73 
	#AR7240_AT_CTRL_ARP_EN
 
	`BIT
(20)

	)

75 
	#AR7240_REG_TAG_PRIORITY
 0x70

	)

77 
	#AR7240_REG_SERVICE_TAG
 0x74

	)

78 
	#AR7240_SERVICE_TAG_M
 
	`BITM
(16)

	)

80 
	#AR7240_REG_CPU_PORT
 0x78

	)

81 
	#AR7240_MIRROR_PORT_S
 4

	)

82 
	#AR7240_MIRROR_PORT_M
 
	`BITM
(4)

	)

83 
	#AR7240_CPU_PORT_EN
 
	`BIT
(8)

	)

85 
	#AR7240_REG_MIB_FUNCTION0
 0x80

	)

86 
	#AR7240_MIB_TIMER_M
 
	`BITM
(16)

	)

87 
	#AR7240_MIB_AT_HALF_EN
 
	`BIT
(16)

	)

88 
	#AR7240_MIB_BUSY
 
	`BIT
(17)

	)

89 
	#AR7240_MIB_FUNC_S
 24

	)

90 
	#AR7240_MIB_FUNC_M
 
	`BITM
(3)

	)

91 
	#AR7240_MIB_FUNC_NO_OP
 0x0

	)

92 
	#AR7240_MIB_FUNC_FLUSH
 0x1

	)

93 
	#AR7240_MIB_FUNC_CAPTURE
 0x3

	)

95 
	#AR7240_REG_MDIO_CTRL
 0x98

	)

96 
	#AR7240_MDIO_CTRL_DATA_M
 
	`BITM
(16)

	)

97 
	#AR7240_MDIO_CTRL_REG_ADDR_S
 16

	)

98 
	#AR7240_MDIO_CTRL_PHY_ADDR_S
 21

	)

99 
	#AR7240_MDIO_CTRL_CMD_WRITE
 0

	)

100 
	#AR7240_MDIO_CTRL_CMD_READ
 
	`BIT
(27)

	)

101 
	#AR7240_MDIO_CTRL_MASTER_EN
 
	`BIT
(30)

	)

102 
	#AR7240_MDIO_CTRL_BUSY
 
	`BIT
(31)

	)

104 
	#AR7240_REG_PORT_BASE
(
_p‹t
Ë(0x100 + (_p‹tË* 0x100)

	)

106 
	#AR7240_REG_PORT_STATUS
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x00)

	)

107 
	#AR7240_PORT_STATUS_SPEED_S
 0

	)

108 
	#AR7240_PORT_STATUS_SPEED_M
 
	`BITM
(2)

	)

109 
	#AR7240_PORT_STATUS_SPEED_10
 0

	)

110 
	#AR7240_PORT_STATUS_SPEED_100
 1

	)

111 
	#AR7240_PORT_STATUS_SPEED_1000
 2

	)

112 
	#AR7240_PORT_STATUS_TXMAC
 
	`BIT
(2)

	)

113 
	#AR7240_PORT_STATUS_RXMAC
 
	`BIT
(3)

	)

114 
	#AR7240_PORT_STATUS_TXFLOW
 
	`BIT
(4)

	)

115 
	#AR7240_PORT_STATUS_RXFLOW
 
	`BIT
(5)

	)

116 
	#AR7240_PORT_STATUS_DUPLEX
 
	`BIT
(6)

	)

117 
	#AR7240_PORT_STATUS_LINK_UP
 
	`BIT
(8)

	)

118 
	#AR7240_PORT_STATUS_LINK_AUTO
 
	`BIT
(9)

	)

119 
	#AR7240_PORT_STATUS_LINK_PAUSE
 
	`BIT
(10)

	)

121 
	#AR7240_REG_PORT_CTRL
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x04)

	)

122 
	#AR7240_PORT_CTRL_STATE_M
 
	`BITM
(3)

	)

123 
	#AR7240_PORT_CTRL_STATE_DISABLED
 0

	)

124 
	#AR7240_PORT_CTRL_STATE_BLOCK
 1

	)

125 
	#AR7240_PORT_CTRL_STATE_LISTEN
 2

	)

126 
	#AR7240_PORT_CTRL_STATE_LEARN
 3

	)

127 
	#AR7240_PORT_CTRL_STATE_FORWARD
 4

	)

128 
	#AR7240_PORT_CTRL_LEARN_LOCK
 
	`BIT
(7)

	)

129 
	#AR7240_PORT_CTRL_VLAN_MODE_S
 8

	)

130 
	#AR7240_PORT_CTRL_VLAN_MODE_KEEP
 0

	)

131 
	#AR7240_PORT_CTRL_VLAN_MODE_STRIP
 1

	)

132 
	#AR7240_PORT_CTRL_VLAN_MODE_ADD
 2

	)

133 
	#AR7240_PORT_CTRL_VLAN_MODE_DOUBLE_TAG
 3

	)

134 
	#AR7240_PORT_CTRL_IGMP_SNOOP
 
	`BIT
(10)

	)

135 
	#AR7240_PORT_CTRL_HEADER
 
	`BIT
(11)

	)

136 
	#AR7240_PORT_CTRL_MAC_LOOP
 
	`BIT
(12)

	)

137 
	#AR7240_PORT_CTRL_SINGLE_VLAN
 
	`BIT
(13)

	)

138 
	#AR7240_PORT_CTRL_LEARN
 
	`BIT
(14)

	)

139 
	#AR7240_PORT_CTRL_DOUBLE_TAG
 
	`BIT
(15)

	)

140 
	#AR7240_PORT_CTRL_MIRROR_TX
 
	`BIT
(16)

	)

141 
	#AR7240_PORT_CTRL_MIRROR_RX
 
	`BIT
(17)

	)

143 
	#AR7240_REG_PORT_VLAN
(
_p‹t
Ë(
	`AR7240_REG_PORT_BASE
((_p‹t)Ë+ 0x08)

	)

145 
	#AR7240_PORT_VLAN_DEFAULT_ID_S
 0

	)

146 
	#AR7240_PORT_VLAN_DEST_PORTS_S
 16

	)

147 
	#AR7240_PORT_VLAN_MODE_S
 30

	)

148 
	#AR7240_PORT_VLAN_MODE_PORT_ONLY
 0

	)

149 
	#AR7240_PORT_VLAN_MODE_PORT_FALLBACK
 1

	)

150 
	#AR7240_PORT_VLAN_MODE_VLAN_ONLY
 2

	)

151 
	#AR7240_PORT_VLAN_MODE_SECURE
 3

	)

154 
	#AR7240_REG_STATS_BASE
(
_p‹t
Ë(0x20000 + (_p‹tË* 0x100)

	)

156 
	#AR7240_STATS_RXBROAD
 0x00

	)

157 
	#AR7240_STATS_RXPAUSE
 0x04

	)

158 
	#AR7240_STATS_RXMULTI
 0x08

	)

159 
	#AR7240_STATS_RXFCSERR
 0x0c

	)

160 
	#AR7240_STATS_RXALIGNERR
 0x10

	)

161 
	#AR7240_STATS_RXRUNT
 0x14

	)

162 
	#AR7240_STATS_RXFRAGMENT
 0x18

	)

163 
	#AR7240_STATS_RX64BYTE
 0x1c

	)

164 
	#AR7240_STATS_RX128BYTE
 0x20

	)

165 
	#AR7240_STATS_RX256BYTE
 0x24

	)

166 
	#AR7240_STATS_RX512BYTE
 0x28

	)

167 
	#AR7240_STATS_RX1024BYTE
 0x2c

	)

168 
	#AR7240_STATS_RX1518BYTE
 0x30

	)

169 
	#AR7240_STATS_RXMAXBYTE
 0x34

	)

170 
	#AR7240_STATS_RXTOOLONG
 0x38

	)

171 
	#AR7240_STATS_RXGOODBYTE
 0x3c

	)

172 
	#AR7240_STATS_RXBADBYTE
 0x44

	)

173 
	#AR7240_STATS_RXOVERFLOW
 0x4c

	)

174 
	#AR7240_STATS_FILTERED
 0x50

	)

175 
	#AR7240_STATS_TXBROAD
 0x54

	)

176 
	#AR7240_STATS_TXPAUSE
 0x58

	)

177 
	#AR7240_STATS_TXMULTI
 0x5c

	)

178 
	#AR7240_STATS_TXUNDERRUN
 0x60

	)

179 
	#AR7240_STATS_TX64BYTE
 0x64

	)

180 
	#AR7240_STATS_TX128BYTE
 0x68

	)

181 
	#AR7240_STATS_TX256BYTE
 0x6c

	)

182 
	#AR7240_STATS_TX512BYTE
 0x70

	)

183 
	#AR7240_STATS_TX1024BYTE
 0x74

	)

184 
	#AR7240_STATS_TX1518BYTE
 0x78

	)

185 
	#AR7240_STATS_TXMAXBYTE
 0x7c

	)

186 
	#AR7240_STATS_TXOVERSIZE
 0x80

	)

187 
	#AR7240_STATS_TXBYTE
 0x84

	)

188 
	#AR7240_STATS_TXCOLLISION
 0x8c

	)

189 
	#AR7240_STATS_TXABORTCOL
 0x90

	)

190 
	#AR7240_STATS_TXMULTICOL
 0x94

	)

191 
	#AR7240_STATS_TXSINGLECOL
 0x98

	)

192 
	#AR7240_STATS_TXEXCDEFER
 0x9c

	)

193 
	#AR7240_STATS_TXDEFER
 0xa0

	)

194 
	#AR7240_STATS_TXLATECOL
 0xa4

	)

196 
	#AR7240_PORT_CPU
 0

	)

197 
	#AR7240_NUM_PORTS
 6

	)

198 
	#AR7240_NUM_PHYS
 5

	)

200 
	#AR7240_PHY_ID1
 0x004d

	)

201 
	#AR7240_PHY_ID2
 0xd041

	)

203 
	#AR934X_PHY_ID1
 0x004d

	)

204 
	#AR934X_PHY_ID2
 0xd042

	)

206 
	#AR7240_MAX_VLANS
 16

	)

208 
	#AR934X_REG_OPER_MODE0
 0x04

	)

209 
	#AR934X_OPER_MODE0_MAC_GMII_EN
 
	`BIT
(6)

	)

210 
	#AR934X_OPER_MODE0_PHY_MII_EN
 
	`BIT
(10)

	)

212 
	#AR934X_REG_OPER_MODE1
 0x08

	)

213 
	#AR934X_REG_OPER_MODE1_PHY4_MII_EN
 
	`BIT
(28)

	)

215 
	#AR934X_REG_FLOOD_MASK
 0x2c

	)

216 
	#AR934X_FLOOD_MASK_MC_DP
(
_p
Ë
	`BIT
(16 + (_p))

	)

217 
	#AR934X_FLOOD_MASK_BC_DP
(
_p
Ë
	`BIT
(25 + (_p))

	)

219 
	#AR934X_REG_QM_CTRL
 0x3c

	)

220 
	#AR934X_QM_CTRL_ARP_EN
 
	`BIT
(15)

	)

222 
	#AR934X_REG_AT_CTRL
 0x5c

	)

223 
	#AR934X_AT_CTRL_AGE_TIME
 
	`BITS
(0, 15)

	)

224 
	#AR934X_AT_CTRL_AGE_EN
 
	`BIT
(17)

	)

225 
	#AR934X_AT_CTRL_LEARN_CHANGE
 
	`BIT
(18)

	)

227 
	#AR934X_MIB_ENABLE
 
	`BIT
(30)

	)

229 
	#AR934X_REG_PORT_BASE
(
_p‹t
Ë(0x100 + (_p‹tË* 0x100)

	)

231 
	#AR934X_REG_PORT_VLAN1
(
_p‹t
Ë(
	`AR934X_REG_PORT_BASE
((_p‹t)Ë+ 0x08)

	)

232 
	#AR934X_PORT_VLAN1_DEFAULT_SVID_S
 0

	)

233 
	#AR934X_PORT_VLAN1_FORCE_DEFAULT_VID_EN
 
	`BIT
(12)

	)

234 
	#AR934X_PORT_VLAN1_PORT_TLS_MODE
 
	`BIT
(13)

	)

235 
	#AR934X_PORT_VLAN1_PORT_VLAN_PROP_EN
 
	`BIT
(14)

	)

236 
	#AR934X_PORT_VLAN1_PORT_CLONE_EN
 
	`BIT
(15)

	)

237 
	#AR934X_PORT_VLAN1_DEFAULT_CVID_S
 16

	)

238 
	#AR934X_PORT_VLAN1_FORCE_PORT_VLAN_EN
 
	`BIT
(28)

	)

239 
	#AR934X_PORT_VLAN1_ING_PORT_PRI_S
 29

	)

241 
	#AR934X_REG_PORT_VLAN2
(
_p‹t
Ë(
	`AR934X_REG_PORT_BASE
((_p‹t)Ë+ 0x0c)

	)

242 
	#AR934X_PORT_VLAN2_PORT_VID_MEM_S
 16

	)

243 
	#AR934X_PORT_VLAN2_8021Q_MODE_S
 30

	)

244 
	#AR934X_PORT_VLAN2_8021Q_MODE_PORT_ONLY
 0

	)

245 
	#AR934X_PORT_VLAN2_8021Q_MODE_PORT_FALLBACK
 1

	)

246 
	#AR934X_PORT_VLAN2_8021Q_MODE_VLAN_ONLY
 2

	)

247 
	#AR934X_PORT_VLAN2_8021Q_MODE_SECURE
 3

	)

249 
	#sw_to_¨7240
(
_dev
Ë
	`c⁄èöî_of
(_dev, 
¨7240sw
, 
swdev
)

	)

251 
	s¨7240sw_p‹t_°©
 {

252 
	mrx_brﬂdˇ°
;

253 
	mrx_∑u£
;

254 
	mrx_mu…iˇ°
;

255 
	mrx_fcs_îr‹
;

256 
	mrx_Æign_îr‹
;

257 
	mrx_ru¡
;

258 
	mrx_‰agmíts
;

259 
	mrx_64byã
;

260 
	mrx_128byã
;

261 
	mrx_256byã
;

262 
	mrx_512byã
;

263 
	mrx_1024byã
;

264 
	mrx_1518byã
;

265 
	mrx_maxbyã
;

266 
	mrx_toﬁ⁄g
;

267 
	mrx_good_byã
;

268 
	mrx_bad_byã
;

269 
	mrx_ovîÊow
;

270 
	mfûãªd
;

272 
	mtx_brﬂdˇ°
;

273 
	mtx_∑u£
;

274 
	mtx_mu…iˇ°
;

275 
	mtx_undîrun
;

276 
	mtx_64byã
;

277 
	mtx_128byã
;

278 
	mtx_256byã
;

279 
	mtx_512byã
;

280 
	mtx_1024byã
;

281 
	mtx_1518byã
;

282 
	mtx_maxbyã
;

283 
	mtx_ovîsize
;

284 
	mtx_byã
;

285 
	mtx_cﬁlisi⁄
;

286 
	mtx_ab‹tcﬁ
;

287 
	mtx_mu…icﬁ
;

288 
	mtx_sögÀcﬁ
;

289 
	mtx_excde„r
;

290 
	mtx_de„r
;

291 
	mtx_xœãcﬁ
;

294 
	s¨7240sw
 {

295 
mii_bus
 *
	mmii_bus
;

296 
mii_bus
 *
	mswôch_mii_bus
;

297 
devi˚_node
 *
	mof_node
;

298 
devi˚_node
 *
	mmdio_node
;

299 
swôch_dev
 
	mswdev
;

300 
	mnum_p‹ts
;

301 
u8
 
	mvî
;

302 
boﬁ
 
	mvœn
;

303 
u16
 
	mvœn_id
[
AR7240_MAX_VLANS
];

304 
u8
 
	mvœn_èbÀ
[
AR7240_MAX_VLANS
];

305 
u8
 
	mvœn_ègged
;

306 
u16
 
	mpvid
[
AR7240_NUM_PORTS
];

307 
	mbuf
[80];

309 
rwlock_t
 
	m°©s_lock
;

310 
¨7240sw_p‹t_°©
 
	mp‹t_°©s
[
AR7240_NUM_PORTS
];

313 
	s¨7240sw_hw_°©
 {

314 
	m°rög
[
ETH_GSTRING_LEN
];

315 
	msizeof_°©
;

316 
	mªg
;

319 
DEFINE_MUTEX
(
ªg_muãx
);

321 
ölöe
 
	$sw_is_¨7240
(
¨7240sw
 *
as
)

323  
as
->
vî
 =
AR7240_MASK_CTRL_VERSION_AR7240
;

324 
	}
}

326 
ölöe
 
	$sw_is_¨934x
(
¨7240sw
 *
as
)

328  
as
->
vî
 =
AR7240_MASK_CTRL_VERSION_AR934X
;

329 
	}
}

331 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask
(
¨7240sw
 *
as
, 
p‹t
)

333  
	`BIT
(
p‹t
);

334 
	}
}

336 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask_Æl
(
¨7240sw
 *
as
)

338  
	`BIT
(
as
->
swdev
.
p‹ts
) - 1;

339 
	}
}

341 
ölöe
 
u32
 
	$¨7240sw_p‹t_mask_but
(
¨7240sw
 *
as
, 
p‹t
)

343  
	`¨7240sw_p‹t_mask_Æl
(
as
Ë& ~
	`BIT
(
p‹t
);

344 
	}
}

346 
ölöe
 
u16
 
	$mk_phy_addr
(
u32
 
ªg
)

348  0x17 & ((
ªg
 >> 4) | 0x10);

349 
	}
}

351 
ölöe
 
u16
 
	$mk_phy_ªg
(
u32
 
ªg
)

353  (
ªg
 << 1) & 0x1e;

354 
	}
}

356 
ölöe
 
u16
 
	$mk_high_addr
(
u32
 
ªg
)

358  (
ªg
 >> 7) & 0x1ff;

359 
	}
}

361 
u32
 
	$__¨7240sw_ªg_ªad
(
mii_bus
 *
mii
, 
u32
 
ªg
)

363 
Êags
;

364 
u16
 
phy_addr
;

365 
u16
 
phy_ªg
;

366 
u32
 
hi
, 
lo
;

368 
ªg
 = (reg & 0xfffffffc) >> 2;

369 
phy_addr
 = 
	`mk_phy_addr
(
ªg
);

370 
phy_ªg
 = 
	`mk_phy_ªg
(
ªg
);

372 
	`loˇl_úq_ßve
(
Êags
);

373 
	`muãx_lock
(&
mii
->
mdio_lock
);

374 
mii
->
	`wrôe
(mii, 0x1f, 0x10, 
	`mk_high_addr
(
ªg
));

375 
lo
 = (
u32
Ë
mii
->
	`ªad
(mii, 
phy_addr
, 
phy_ªg
);

376 
hi
 = (
u32
Ë
mii
->
	`ªad
(mii, 
phy_addr
, 
phy_ªg
 + 1);

377 
	`muãx_u∆ock
(&
mii
->
mdio_lock
);

378 
	`loˇl_úq_ª°‹e
(
Êags
);

380  (
hi
 << 16Ë| 
lo
;

381 
	}
}

383 
	$__¨7240sw_ªg_wrôe
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
vÆ
)

385 
Êags
;

386 
u16
 
phy_addr
;

387 
u16
 
phy_ªg
;

389 
ªg
 = (reg & 0xfffffffc) >> 2;

390 
phy_addr
 = 
	`mk_phy_addr
(
ªg
);

391 
phy_ªg
 = 
	`mk_phy_ªg
(
ªg
);

393 
	`loˇl_úq_ßve
(
Êags
);

394 
	`muãx_lock
(&
mii
->
mdio_lock
);

395 
mii
->
	`wrôe
(mii, 0x1f, 0x10, 
	`mk_high_addr
(
ªg
));

396 
mii
->
	`wrôe
(mii, 
phy_addr
, 
phy_ªg
 + 1, (
vÆ
 >> 16));

397 
mii
->
	`wrôe
(mii, 
phy_addr
, 
phy_ªg
, (
vÆ
 & 0xffff));

398 
	`muãx_u∆ock
(&
mii
->
mdio_lock
);

399 
	`loˇl_úq_ª°‹e
(
Êags
);

400 
	}
}

402 
u32
 
	$¨7240sw_ªg_ªad
(
mii_bus
 *
mii
, 
u32
 
ªg_addr
)

404 
u32
 
ªt
;

406 
	`muãx_lock
(&
ªg_muãx
);

407 
ªt
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg_addr
);

408 
	`muãx_u∆ock
(&
ªg_muãx
);

410  
ªt
;

411 
	}
}

413 
	$¨7240sw_ªg_wrôe
(
mii_bus
 *
mii
, 
u32
 
ªg_addr
, u32 
ªg_vÆ
)

415 
	`muãx_lock
(&
ªg_muãx
);

416 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg_addr
, 
ªg_vÆ
);

417 
	`muãx_u∆ock
(&
ªg_muãx
);

418 
	}
}

420 
u32
 
	$¨7240sw_ªg_rmw
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
)

422 
u32
 
t
;

424 
	`muãx_lock
(&
ªg_muãx
);

425 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

426 
t
 &~
mask
;

427 
t
 |
vÆ
;

428 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg
, 
t
);

429 
	`muãx_u∆ock
(&
ªg_muãx
);

431  
t
;

432 
	}
}

434 
	$¨7240sw_ªg_£t
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
vÆ
)

436 
u32
 
t
;

438 
	`muãx_lock
(&
ªg_muãx
);

439 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

440 
t
 |
vÆ
;

441 
	`__¨7240sw_ªg_wrôe
(
mii
, 
ªg
, 
t
);

442 
	`muãx_u∆ock
(&
ªg_muãx
);

443 
	}
}

445 
	$__¨7240sw_ªg_waô
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
,

446 
timeout
)

448 
i
;

450 
i
 = 0; i < 
timeout
; i++) {

451 
u32
 
t
;

453 
t
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
ªg
);

454 i‡((
t
 & 
mask
Ë=
vÆ
)

457 
	`u¶ìp_ønge
(1000, 2000);

460  -
ETIMEDOUT
;

461 
	}
}

463 
	$¨7240sw_ªg_waô
(
mii_bus
 *
mii
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
,

464 
timeout
)

466 
ªt
;

468 
	`muãx_lock
(&
ªg_muãx
);

469 
ªt
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
ªg
, 
mask
, 
vÆ
, 
timeout
);

470 
	`muãx_u∆ock
(&
ªg_muãx
);

471  
ªt
;

472 
	}
}

474 
	$¨7240sw_phy_ªad
(
mii_bus
 *
bus
, 
phy_addr
, 
ªg_addr
)

476 
u32
 
t
, 
vÆ
 = 0xffff;

477 
îr
;

478 
¨7240sw
 *
as
 = 
bus
->
¥iv
;

479 
mii_bus
 *
mii
 = 
as
->mii_bus;

481 i‡(
phy_addr
 >
AR7240_NUM_PHYS
)

484 
	`muãx_lock
(&
ªg_muãx
);

485 
t
 = (
ªg_addr
 << 
AR7240_MDIO_CTRL_REG_ADDR_S
) |

486 (
phy_addr
 << 
AR7240_MDIO_CTRL_PHY_ADDR_S
) |

487 
AR7240_MDIO_CTRL_MASTER_EN
 |

488 
AR7240_MDIO_CTRL_BUSY
 |

489 
AR7240_MDIO_CTRL_CMD_READ
;

491 
	`__¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MDIO_CTRL
, 
t
);

492 
îr
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MDIO_CTRL
,

493 
AR7240_MDIO_CTRL_BUSY
, 0, 5);

494 i‡(!
îr
)

495 
vÆ
 = 
	`__¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_MDIO_CTRL
);

496 
	`muãx_u∆ock
(&
ªg_muãx
);

498  
vÆ
 & 
AR7240_MDIO_CTRL_DATA_M
;

499 
	}
}

501 
	$¨7240sw_phy_wrôe
(
mii_bus
 *
bus
, 
phy_addr
, 
ªg_addr
,

502 
u16
 
ªg_vÆ
)

504 
u32
 
t
;

505 
ªt
;

506 
¨7240sw
 *
as
 = 
bus
->
¥iv
;

507 
mii_bus
 *
mii
 = 
as
->mii_bus;

509 i‡(
phy_addr
 >
AR7240_NUM_PHYS
)

510  -
EINVAL
;

512 
	`muãx_lock
(&
ªg_muãx
);

513 
t
 = (
phy_addr
 << 
AR7240_MDIO_CTRL_PHY_ADDR_S
) |

514 (
ªg_addr
 << 
AR7240_MDIO_CTRL_REG_ADDR_S
) |

515 
AR7240_MDIO_CTRL_MASTER_EN
 |

516 
AR7240_MDIO_CTRL_BUSY
 |

517 
AR7240_MDIO_CTRL_CMD_WRITE
 |

518 
ªg_vÆ
;

520 
	`__¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MDIO_CTRL
, 
t
);

521 
ªt
 = 
	`__¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MDIO_CTRL
,

522 
AR7240_MDIO_CTRL_BUSY
, 0, 5);

523 
	`muãx_u∆ock
(&
ªg_muãx
);

525  
ªt
;

526 
	}
}

528 
	$¨7240sw_ˇ±uª_°©s
(
¨7240sw
 *
as
)

530 
mii_bus
 *
mii
 = 
as
->mii_bus;

531 
p‹t
;

532 
ªt
;

534 
	`wrôe_lock
(&
as
->
°©s_lock
);

537 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

538 (
AR7240_MIB_FUNC_M
 << 
AR7240_MIB_FUNC_S
),

539 (
AR7240_MIB_FUNC_CAPTURE
 << 
AR7240_MIB_FUNC_S
));

542 
ªt
 = 
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

543 
AR7240_MIB_BUSY
, 0, 10);

545 i‡(
ªt
)

546 
u∆ock
;

548 
p‹t
 = 0;Ö‹à< 
AR7240_NUM_PORTS
;Öort++) {

549 
ba£
;

550 
¨7240sw_p‹t_°©
 *
°©s
;

552 
ba£
 = 
	`AR7240_REG_STATS_BASE
(
p‹t
);

553 
°©s
 = &
as
->
p‹t_°©s
[
p‹t
];

555 
	#READ_STAT
(
_r
Ë
	`¨7240sw_ªg_ªad
(
mii
, 
ba£
 + 
AR7240_STATS_
 ## _r)

	)

557 
°©s
->
rx_good_byã
 +
	`READ_STAT
(
RXGOODBYTE
);

558 
°©s
->
tx_byã
 +
	`READ_STAT
(
TXBYTE
);

560 #unde‡
READ_STAT


563 
ªt
 = 0;

565 
u∆ock
:

566 
	`wrôe_u∆ock
(&
as
->
°©s_lock
);

567  
ªt
;

568 
	}
}

570 
	$¨7240sw_dißbÀ_p‹t
(
¨7240sw
 *
as
, 
p‹t
)

572 
	`¨7240sw_ªg_wrôe
(
as
->
mii_bus
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

573 
AR7240_PORT_CTRL_STATE_DISABLED
);

574 
	}
}

576 
	$¨7240sw_£tup
(
¨7240sw
 *
as
)

578 
mii_bus
 *
mii
 = 
as
->mii_bus;

581 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_CPU_PORT
,

582 
AR7240_CPU_PORT_EN
 |

583 (15 << 
AR7240_MIRROR_PORT_S
));

586 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_TAG_PRIORITY
, 0xfa50);

588 i‡(
	`sw_is_¨934x
(
as
)) {

590 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR934X_REG_AT_CTRL
,

592 
AR934X_AT_CTRL_AGE_EN
 |

593 
AR934X_AT_CTRL_LEARN_CHANGE
);

595 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_QM_CTRL
,

596 
AR934X_QM_CTRL_ARP_EN
);

598 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_FLOOD_MASK
,

599 
	`AR934X_FLOOD_MASK_BC_DP
(0) |

600 
	`AR934X_FLOOD_MASK_MC_DP
(0));

603 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_GLOBAL_CTRL
,

604 
AR9340_GLOBAL_CTRL_MTU_M
,

605 
AR9340_GLOBAL_CTRL_MTU_M
);

608 
	`¨7240sw_ªg_£t
(
mii
, 
AR7240_REG_MIB_FUNCTION0
,

609 
AR934X_MIB_ENABLE
);

613 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_AT_CTRL
,

614 
AR7240_AT_CTRL_RESERVED
 |

616 
AR7240_AT_CTRL_AGE_EN
 |

617 
AR7240_AT_CTRL_ARP_EN
 |

618 
AR7240_AT_CTRL_LEARN_CHANGE
);

620 
	`¨7240sw_ªg_£t
(
mii
, 
AR7240_REG_FLOOD_MASK
,

621 
AR7240_FLOOD_MASK_BROAD_TO_CPU
);

624 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_GLOBAL_CTRL
,

625 
AR7240_GLOBAL_CTRL_MTU_M
,

626 
AR7240_GLOBAL_CTRL_MTU_M
);

630 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_SERVICE_TAG
, 
AR7240_SERVICE_TAG_M
, 0);

631 
	}
}

635 
	$¨7240sw_phy_pﬁl_ª£t
(
mii_bus
 *
bus
)

637 c⁄° 
¶ìp_m£cs
 = 20;

638 
ªt
, 
ñ≠£d
, 
i
;

640 
ñ≠£d
 = 
¶ìp_m£cs
;Élapsed <= 600;

641 
ñ≠£d
 +
¶ìp_m£cs
) {

642 
	`m¶ìp
(
¶ìp_m£cs
);

643 
i
 = 0; i < 
AR7240_NUM_PHYS
; i++) {

644 
ªt
 = 
	`¨7240sw_phy_ªad
(
bus
, 
i
, 
MII_BMCR
);

645 i‡(
ªt
 < 0)

646  
ªt
;

647 i‡(
ªt
 & 
BMCR_RESET
)

649 i‡(
i
 =
AR7240_NUM_PHYS
 - 1) {

650 
	`u¶ìp_ønge
(1000, 2000);

655  -
ETIMEDOUT
;

656 
	}
}

658 
	$¨7240sw_ª£t
(
¨7240sw
 *
as
)

660 
mii_bus
 *
mii
 = 
as
->mii_bus;

661 
mii_bus
 *
swmii
 = 
as
->
swôch_mii_bus
;

662 
ªt
;

663 
i
;

666 
i
 = 0; i < 
AR7240_NUM_PORTS
; i++)

667 
	`¨7240sw_dißbÀ_p‹t
(
as
, 
i
);

670 
	`u¶ìp_ønge
(2000, 3000);

673 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_MASK_CTRL
,

674 
AR7240_MASK_CTRL_SOFT_RESET
);

676 
ªt
 = 
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_MASK_CTRL
,

677 
AR7240_MASK_CTRL_SOFT_RESET
, 0, 1000);

680 
i
 = 0; i < 
AR7240_NUM_PHYS
; i++) {

681 
	`¨7240sw_phy_wrôe
(
swmii
, 
i
, 
MII_ADVERTISE
,

682 
ADVERTISE_ALL
 | 
ADVERTISE_PAUSE_CAP
 |

683 
ADVERTISE_PAUSE_ASYM
);

684 
	`¨7240sw_phy_wrôe
(
swmii
, 
i
, 
MII_BMCR
,

685 
BMCR_RESET
 | 
BMCR_ANENABLE
);

687 
ªt
 = 
	`¨7240sw_phy_pﬁl_ª£t
(
swmii
);

688 i‡(
ªt
)

689  
ªt
;

691 
	`¨7240sw_£tup
(
as
);

692  
ªt
;

693 
	}
}

695 
	$¨7240sw_£tup_p‹t
(
¨7240sw
 *
as
, 
p‹t
, 
u8
 
p‹tmask
)

697 
mii_bus
 *
mii
 = 
as
->mii_bus;

698 
u32
 
˘æ
;

699 
u32
 
vid
, 
mode
;

701 
˘æ
 = 
AR7240_PORT_CTRL_STATE_FORWARD
 | 
AR7240_PORT_CTRL_LEARN
 |

702 
AR7240_PORT_CTRL_SINGLE_VLAN
;

704 i‡(
p‹t
 =
AR7240_PORT_CPU
) {

705 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
),

706 
AR7240_PORT_STATUS_SPEED_1000
 |

707 
AR7240_PORT_STATUS_TXFLOW
 |

708 
AR7240_PORT_STATUS_RXFLOW
 |

709 
AR7240_PORT_STATUS_TXMAC
 |

710 
AR7240_PORT_STATUS_RXMAC
 |

711 
AR7240_PORT_STATUS_DUPLEX
);

713 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
),

714 
AR7240_PORT_STATUS_LINK_AUTO
);

718 i‡(
as
->
vœn
) {

719 
vid
 = 
as
->
vœn_id
[as->
pvid
[
p‹t
]];

720 
mode
 = 
AR7240_PORT_VLAN_MODE_SECURE
;

722 
vid
 = 
p‹t
;

723 
mode
 = 
AR7240_PORT_VLAN_MODE_PORT_ONLY
;

726 i‡(
as
->
vœn
) {

727 i‡(
as
->
vœn_ègged
 & 
	`BIT
(
p‹t
))

728 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_ADD
 <<

729 
AR7240_PORT_CTRL_VLAN_MODE_S
;

731 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_STRIP
 <<

732 
AR7240_PORT_CTRL_VLAN_MODE_S
;

734 
˘æ
 |
AR7240_PORT_CTRL_VLAN_MODE_KEEP
 <<

735 
AR7240_PORT_CTRL_VLAN_MODE_S
;

738 i‡(!
p‹tmask
) {

739 i‡(
p‹t
 =
AR7240_PORT_CPU
)

740 
p‹tmask
 = 
	`¨7240sw_p‹t_mask_but
(
as
, 
AR7240_PORT_CPU
);

742 
p‹tmask
 = 
	`¨7240sw_p‹t_mask
(
as
, 
AR7240_PORT_CPU
);

746 
˘æ
 |
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
)) &

747 (
AR7240_PORT_CTRL_MIRROR_RX
 | 
AR7240_PORT_CTRL_MIRROR_TX
);

752 
p‹tmask
 &
	`¨7240sw_p‹t_mask_but
(
as
, 
p‹t
);

754 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
), 
˘æ
);

755 i‡(
	`sw_is_¨934x
(
as
)) {

756 
u32
 
vœn1
, 
vœn2
;

758 
vœn1
 = (
vid
 << 
AR934X_PORT_VLAN1_DEFAULT_CVID_S
);

759 
vœn2
 = (
p‹tmask
 << 
AR934X_PORT_VLAN2_PORT_VID_MEM_S
) |

760 (
mode
 << 
AR934X_PORT_VLAN2_8021Q_MODE_S
);

761 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR934X_REG_PORT_VLAN1
(
p‹t
), 
vœn1
);

762 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR934X_REG_PORT_VLAN2
(
p‹t
), 
vœn2
);

764 
u32
 
vœn
;

766 
vœn
 = 
vid
 | (
mode
 << 
AR7240_PORT_VLAN_MODE_S
) |

767 (
p‹tmask
 << 
AR7240_PORT_VLAN_DEST_PORTS_S
);

769 
	`¨7240sw_ªg_wrôe
(
mii
, 
	`AR7240_REG_PORT_VLAN
(
p‹t
), 
vœn
);

771 
	}
}

774 
	$¨7240_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

775 
swôch_vÆ
 *
vÆ
)

777 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

778 
as
->
vœn_id
[
vÆ
->
p‹t_vœn
] = vÆ->
vÆue
.
i
;

780 
	}
}

783 
	$¨7240_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

784 
swôch_vÆ
 *
vÆ
)

786 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

787 
vÆ
->
vÆue
.
i
 = 
as
->
vœn_id
[vÆ->
p‹t_vœn
];

789 
	}
}

792 
	$¨7240_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
)

794 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

798 i‡(
vœn
 >
dev
->
vœns
)

799  -
EINVAL
;

801 
as
->
pvid
[
p‹t
] = 
vœn
;

803 
	}
}

806 
	$¨7240_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
)

808 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

809 *
vœn
 = 
as
->
pvid
[
p‹t
];

811 
	}
}

814 
	$¨7240_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

816 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

817 
u8
 
p‹ts
 = 
as
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

818 
i
;

820 
vÆ
->
Àn
 = 0;

821 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

822 
swôch_p‹t
 *
p
;

824 i‡(!(
p‹ts
 & (1 << 
i
)))

827 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

828 
p
->
id
 = 
i
;

829 i‡(
as
->
vœn_ègged
 & (1 << 
i
))

830 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

832 
p
->
Êags
 = 0;

835 
	}
}

838 
	$¨7240_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

840 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

841 
u8
 *
vt
 = &
as
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

842 
i
, 
j
;

844 *
vt
 = 0;

845 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

846 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

848 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
))

849 
as
->
vœn_ègged
 |(1 << 
p
->
id
);

851 
as
->
vœn_ègged
 &~(1 << 
p
->
id
);

852 
as
->
pvid
[
p
->
id
] = 
vÆ
->
p‹t_vœn
;

856 
j
 = 0; j < 
AR7240_MAX_VLANS
; j++) {

857 i‡(
j
 =
vÆ
->
p‹t_vœn
)

859 
as
->
vœn_èbÀ
[
j
] &~(1 << 
p
->
id
);

863 *
vt
 |1 << 
p
->
id
;

866 
	}
}

869 
	$¨7240_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

870 
swôch_vÆ
 *
vÆ
)

872 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

873 
as
->
vœn
 = !!
vÆ
->
vÆue
.
i
;

875 
	}
}

878 
	$¨7240_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

879 
swôch_vÆ
 *
vÆ
)

881 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

882 
vÆ
->
vÆue
.
i
 = 
as
->
vœn
;

884 
	}
}

887 
	$¨7240_vtu_›
(
¨7240sw
 *
as
, 
u32
 
›
, u32 
vÆ
)

889 
mii_bus
 *
mii
 = 
as
->mii_bus;

891 i‡(
	`¨7240sw_ªg_waô
(
mii
, 
AR7240_REG_VTU
, 
AR7240_VTU_ACTIVE
, 0, 5))

894 i‡((
›
 & 
AR7240_VTU_OP
Ë=
AR7240_VTU_OP_LOAD
) {

895 
vÆ
 &
AR7240_VTUDATA_MEMBER
;

896 
vÆ
 |
AR7240_VTUDATA_VALID
;

897 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_VTU_DATA
, 
vÆ
);

899 
›
 |
AR7240_VTU_ACTIVE
;

900 
	`¨7240sw_ªg_wrôe
(
mii
, 
AR7240_REG_VTU
, 
›
);

901 
	}
}

904 
	$¨7240_hw_≠∂y
(
swôch_dev
 *
dev
)

906 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

907 
u8
 
p‹tmask
[
AR7240_NUM_PORTS
];

908 
i
, 
j
;

911 
	`¨7240_vtu_›
(
as
, 
AR7240_VTU_OP_FLUSH
, 0);

913 
	`mem£t
(
p‹tmask
, 0, (portmask));

914 i‡(
as
->
vœn
) {

917 
j
 = 0; j < 
AR7240_MAX_VLANS
; j++) {

918 
u8
 
vp
 = 
as
->
vœn_èbÀ
[
j
];

920 i‡(!
vp
)

923 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

924 
u8
 
mask
 = (1 << 
i
);

925 i‡(
vp
 & 
mask
)

926 
p‹tmask
[
i
] |
vp
 & ~
mask
;

929 
	`¨7240_vtu_›
(
as
,

930 
AR7240_VTU_OP_LOAD
 |

931 (
as
->
vœn_id
[
j
] << 
AR7240_VTU_VID_S
),

932 
as
->
vœn_èbÀ
[
j
]);

937 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++) {

938 i‡(
i
 =
AR7240_PORT_CPU
)

941 
p‹tmask
[
i
] = 1 << 
AR7240_PORT_CPU
;

942 
p‹tmask
[
AR7240_PORT_CPU
] |(1 << 
i
);

947 
i
 = 0; i < 
as
->
swdev
.
p‹ts
; i++)

948 
	`¨7240sw_£tup_p‹t
(
as
, 
i
, 
p‹tmask
[i]);

951 
	}
}

954 
	$¨7240_ª£t_swôch
(
swôch_dev
 *
dev
)

956 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

957 
	`¨7240sw_ª£t
(
as
);

959 
	}
}

962 
	$¨7240_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

963 
swôch_p‹t_lök
 *
lök
)

965 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

966 
mii_bus
 *
mii
 = 
as
->mii_bus;

967 
u32
 
°©us
;

969 i‡(
p‹t
 >
AR7240_NUM_PORTS
)

970  -
EINVAL
;

972 
°©us
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_STATUS
(
p‹t
));

973 
lök
->
™eg
 = !!(
°©us
 & 
AR7240_PORT_STATUS_LINK_AUTO
);

974 i‡(
lök
->
™eg
) {

975 
lök
->lök = !!(
°©us
 & 
AR7240_PORT_STATUS_LINK_UP
);

976 i‡(!
lök
->link)

979 
lök
->lök = 
åue
;

982 
lök
->
du∂ex
 = !!(
°©us
 & 
AR7240_PORT_STATUS_DUPLEX
);

983 
lök
->
tx_Êow
 = !!(
°©us
 & 
AR7240_PORT_STATUS_TXFLOW
);

984 
lök
->
rx_Êow
 = !!(
°©us
 & 
AR7240_PORT_STATUS_RXFLOW
);

985 
°©us
 & 
AR7240_PORT_STATUS_SPEED_M
) {

986 
AR7240_PORT_STATUS_SPEED_10
:

987 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

989 
AR7240_PORT_STATUS_SPEED_100
:

990 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

992 
AR7240_PORT_STATUS_SPEED_1000
:

993 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

998 
	}
}

1001 
	$¨7240_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1002 
swôch_p‹t_°©s
 *
°©s
)

1004 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1006 i‡(
p‹t
 >
AR7240_NUM_PORTS
)

1007  -
EINVAL
;

1009 
	`¨7240sw_ˇ±uª_°©s
(
as
);

1011 
	`ªad_lock
(&
as
->
°©s_lock
);

1012 
°©s
->
rx_byãs
 = 
as
->
p‹t_°©s
[
p‹t
].
rx_good_byã
;

1013 
°©s
->
tx_byãs
 = 
as
->
p‹t_°©s
[
p‹t
].
tx_byã
;

1014 
	`ªad_u∆ock
(&
as
->
°©s_lock
);

1017 
	}
}

1020 
	$¨7240_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1021 c⁄° 
swôch_©å
 *
©å
,

1022 
swôch_vÆ
 *
vÆ
)

1024 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1025 
mii_bus
 *
mii
 = 
as
->mii_bus;

1027 
p‹t
 = 
vÆ
->
vÆue
.
i
;

1029 i‡(
p‹t
 > 15)

1030  -
EINVAL
;

1032 
	`¨7240sw_ªg_rmw
(
mii
, 
AR7240_REG_CPU_PORT
,

1033 
AR7240_MIRROR_PORT_M
 << 
AR7240_MIRROR_PORT_S
,

1034 
p‹t
 << 
AR7240_MIRROR_PORT_S
);

1037 
	}
}

1040 
	$¨7240_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1041 c⁄° 
swôch_©å
 *
©å
,

1042 
swôch_vÆ
 *
vÆ
)

1044 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1045 
mii_bus
 *
mii
 = 
as
->mii_bus;

1047 
u32
 
ªt
;

1049 
ªt
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_CPU_PORT
);

1050 
vÆ
->
vÆue
.
i
 = (
ªt
 >> 
AR7240_MIRROR_PORT_S
Ë& 
AR7240_MIRROR_PORT_M
;

1053 
	}
}

1056 
	$¨7240_£t_múr‹_rx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1057 
swôch_vÆ
 *
vÆ
)

1059 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1060 
mii_bus
 *
mii
 = 
as
->mii_bus;

1062 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1064 i‡(
p‹t
 >
dev
->
p‹ts
)

1065  -
EINVAL
;

1067 i‡(
vÆ
 && vÆ->
vÆue
.
i
 == 1)

1068 
	`¨7240sw_ªg_£t
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1069 
AR7240_PORT_CTRL_MIRROR_RX
);

1071 
	`¨7240sw_ªg_rmw
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1072 
AR7240_PORT_CTRL_MIRROR_RX
, 0);

1075 
	}
}

1078 
	$¨7240_gë_múr‹_rx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1079 
swôch_vÆ
 *
vÆ
)

1081 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1082 
mii_bus
 *
mii
 = 
as
->mii_bus;

1084 
u32
 
˘æ
;

1086 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1088 i‡(
p‹t
 >
dev
->
p‹ts
)

1089  -
EINVAL
;

1091 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
));

1093 i‡((
˘æ
 & 
AR7240_PORT_CTRL_MIRROR_RX
) == AR7240_PORT_CTRL_MIRROR_RX)

1094 
vÆ
->
vÆue
.
i
 = 1;

1096 
vÆ
->
vÆue
.
i
 = 0;

1099 
	}
}

1102 
	$¨7240_£t_múr‹_tx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1103 
swôch_vÆ
 *
vÆ
)

1105 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1106 
mii_bus
 *
mii
 = 
as
->mii_bus;

1108 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1110 i‡(
p‹t
 >
dev
->
p‹ts
)

1111  -
EINVAL
;

1113 i‡(
vÆ
 && vÆ->
vÆue
.
i
 == 1)

1114 
	`¨7240sw_ªg_£t
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1115 
AR7240_PORT_CTRL_MIRROR_TX
);

1117 
	`¨7240sw_ªg_rmw
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
),

1118 
AR7240_PORT_CTRL_MIRROR_TX
, 0);

1121 
	}
}

1124 
	$¨7240_gë_múr‹_tx
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1125 
swôch_vÆ
 *
vÆ
)

1127 
¨7240sw
 *
as
 = 
	`sw_to_¨7240
(
dev
);

1128 
mii_bus
 *
mii
 = 
as
->mii_bus;

1130 
u32
 
˘æ
;

1132 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1134 i‡(
p‹t
 >
dev
->
p‹ts
)

1135  -
EINVAL
;

1137 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
	`AR7240_REG_PORT_CTRL
(
p‹t
));

1139 i‡((
˘æ
 & 
AR7240_PORT_CTRL_MIRROR_TX
) == AR7240_PORT_CTRL_MIRROR_TX)

1140 
vÆ
->
vÆue
.
i
 = 1;

1142 
vÆ
->
vÆue
.
i
 = 0;

1145 
	}
}

1147 
swôch_©å
 
	g¨7240_globÆs
[] = {

1149 .
ty≥
 = 
SWITCH_TYPE_INT
,

1150 .
	g«me
 = "enable_vlan",

1151 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1152 .
	g£t
 = 
¨7240_£t_vœn
,

1153 .
	ggë
 = 
¨7240_gë_vœn
,

1154 .
	gmax
 = 1

1157 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1158 .
	g«me
 = "mirror_monitor_port",

1159 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

1160 .
	g£t
 = 
¨7240_£t_múr‹_m⁄ô‹_p‹t
,

1161 .
	ggë
 = 
¨7240_gë_múr‹_m⁄ô‹_p‹t
,

1162 .
	gmax
 = 15

1166 
swôch_©å
 
	g¨7240_p‹t
[] = {

1168 .
ty≥
 = 
SWITCH_TYPE_INT
,

1169 .
	g«me
 = "enable_mirror_rx",

1170 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

1171 .
	g£t
 = 
¨7240_£t_múr‹_rx
,

1172 .
	ggë
 = 
¨7240_gë_múr‹_rx
,

1173 .
	gmax
 = 1

1176 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1177 .
	g«me
 = "enable_mirror_tx",

1178 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

1179 .
	g£t
 = 
¨7240_£t_múr‹_tx
,

1180 .
	ggë
 = 
¨7240_gë_múr‹_tx
,

1181 .
	gmax
 = 1

1185 
swôch_©å
 
	g¨7240_vœn
[] = {

1187 .
ty≥
 = 
SWITCH_TYPE_INT
,

1188 .
	g«me
 = "vid",

1189 .
	gdes¸ùti⁄
 = "VLAN ID",

1190 .
	g£t
 = 
¨7240_£t_vid
,

1191 .
	ggë
 = 
¨7240_gë_vid
,

1192 .
	gmax
 = 4094,

1196 c⁄° 
swôch_dev_›s
 
	g¨7240_›s
 = {

1197 .
©å_globÆ
 = {

1198 .
©å
 = 
¨7240_globÆs
,

1199 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_globÆs
),

1201 .
	g©å_p‹t
 = {

1202 .
©å
 = 
¨7240_p‹t
,

1203 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_p‹t
),

1205 .
	g©å_vœn
 = {

1206 .
©å
 = 
¨7240_vœn
,

1207 .
	gn_©å
 = 
ARRAY_SIZE
(
¨7240_vœn
),

1209 .
	ggë_p‹t_pvid
 = 
¨7240_gë_pvid
,

1210 .
	g£t_p‹t_pvid
 = 
¨7240_£t_pvid
,

1211 .
	ggë_vœn_p‹ts
 = 
¨7240_gë_p‹ts
,

1212 .
	g£t_vœn_p‹ts
 = 
¨7240_£t_p‹ts
,

1213 .
	g≠∂y_c⁄fig
 = 
¨7240_hw_≠∂y
,

1214 .
	gª£t_swôch
 = 
¨7240_ª£t_swôch
,

1215 .
	ggë_p‹t_lök
 = 
¨7240_gë_p‹t_lök
,

1216 .
	ggë_p‹t_°©s
 = 
¨7240_gë_p‹t_°©s
,

1220 
	$ag71xx_¨7240_¥obe
(
mdio_devi˚
 *
mdiodev
)

1222 
mii_bus
 *
mii
 = 
mdiodev
->
bus
;

1223 
¨7240sw
 *
as
;

1224 
swôch_dev
 *
swdev
;

1225 
ª£t_c⁄åﬁ
 *
swôch_ª£t
;

1226 
u32
 
˘æ
;

1227 
phy_if_mode
, 
îr
, 
i
;

1229 
as
 = 
	`devm_kzÆloc
(&
mdiodev
->
dev
, (*as), 
GFP_KERNEL
);

1230 i‡(!
as
)

1231  -
ENOMEM
;

1233 
as
->
mii_bus
 = 
mii
;

1234 
as
->
of_node
 = 
mdiodev
->
dev
.of_node;

1235 
as
->
mdio_node
 = 
	`of_gë_chûd_by_«me
◊s->
of_node
, "mdio-bus");

1237 
swdev
 = &
as
->swdev;

1239 
swôch_ª£t
 = 
	`devm_ª£t_c⁄åﬁ_gë_›ti⁄Æ
(&
mdiodev
->
dev
, "switch");

1240 i‡(
swôch_ª£t
) {

1241 
	`ª£t_c⁄åﬁ_as£π
(
swôch_ª£t
);

1242 
	`m¶ìp
(50);

1243 
	`ª£t_c⁄åﬁ_dós£π
(
swôch_ª£t
);

1244 
	`m¶ìp
(200);

1247 
˘æ
 = 
	`¨7240sw_ªg_ªad
(
mii
, 
AR7240_REG_MASK_CTRL
);

1248 
as
->
vî
 = (
˘æ
 >> 
AR7240_MASK_CTRL_VERSION_S
) &

1249 
AR7240_MASK_CTRL_VERSION_M
;

1251 i‡(
	`sw_is_¨7240
(
as
)) {

1252 
swdev
->
«me
 = "AR7240/AR9330 built-in switch";

1253 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
 - 1;

1254 } i‡(
	`sw_is_¨934x
(
as
)) {

1255 
swdev
->
«me
 = "AR934X built-in switch";

1256 
phy_if_mode
 = 
	`of_gë_phy_mode
(
as
->
of_node
);

1258 i‡(
phy_if_mode
 =
PHY_INTERFACE_MODE_GMII
) {

1259 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE0
,

1260 
AR934X_OPER_MODE0_MAC_GMII_EN
);

1261 } i‡(
phy_if_mode
 =
PHY_INTERFACE_MODE_MII
) {

1262 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE0
,

1263 
AR934X_OPER_MODE0_PHY_MII_EN
);

1265 
	`¥_îr
("%s: invalid PHY interface mode\n",

1266 
	`dev_«me
(&
mdiodev
->
dev
));

1267  -
EINVAL
;

1270 i‡(
	`of_¥›îty_ªad_boﬁ
(
as
->
of_node
, "phy4-mii-enable")) {

1271 
	`¨7240sw_ªg_£t
(
mii
, 
AR934X_REG_OPER_MODE1
,

1272 
AR934X_REG_OPER_MODE1_PHY4_MII_EN
);

1273 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
 - 1;

1275 
swdev
->
p‹ts
 = 
AR7240_NUM_PORTS
;

1278 
	`¥_îr
("%s: unsupported chip, ctrl=%08x\n",

1279 
	`dev_«me
(&
mdiodev
->
dev
), 
˘æ
);

1280  -
EINVAL
;

1283 
swdev
->
˝u_p‹t
 = 
AR7240_PORT_CPU
;

1284 
swdev
->
vœns
 = 
AR7240_MAX_VLANS
;

1285 
swdev
->
›s
 = &
¨7240_›s
;

1286 
swdev
->
Æüs
 = 
	`dev_«me
(&
mdiodev
->
dev
);

1288 i‡((
îr
 = 
	`ªgi°î_swôch
(&
as
->
swdev
, 
NULL
)) < 0)

1289  
îr
;

1291 
	`¥_öfo
("%s: Foundá¿%s\n", 
	`dev_«me
(&
mdiodev
->
dev
), 
swdev
->
«me
);

1293 
as
->
swôch_mii_bus
 = 
	`devm_mdiobus_Æloc
(&
mdiodev
->
dev
);

1294 
as
->
swôch_mii_bus
->
«me
 = "ar7240sw_mdio";

1295 
as
->
swôch_mii_bus
->
ªad
 = 
¨7240sw_phy_ªad
;

1296 
as
->
swôch_mii_bus
->
wrôe
 = 
¨7240sw_phy_wrôe
;

1297 
as
->
swôch_mii_bus
->
¥iv
 =ás;

1298 
as
->
swôch_mii_bus
->
∑ª¡
 = &
mdiodev
->
dev
;

1299 
	`¢¥ötf
(
as
->
swôch_mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s", 
	`dev_«me
(&
mdiodev
->
dev
));

1301 if(
as
->
mdio_node
) {

1302 
îr
 = 
	`of_mdiobus_ªgi°î
(
as
->
swôch_mii_bus
,ás->
mdio_node
);

1303 i‡(
îr
)

1304  
îr
;

1308 
i
 = 0; i < 
AR7240_MAX_VLANS
; i++)

1309 
as
->
vœn_id
[
i
] = i;

1311 
as
->
vœn_èbÀ
[0] = 
	`¨7240sw_p‹t_mask_Æl
(as);

1312 
	`¨7240sw_ª£t
(
as
);

1313 
	`¨7240_hw_≠∂y
(&
as
->
swdev
);

1314 
	`rwlock_öô
(&
as
->
°©s_lock
);

1315 
	`dev_£t_drvd©a
(&
mdiodev
->
dev
, 
as
);

1317 
	}
}

1320 
	$ag71xx_¨7240_ªmove
(
mdio_devi˚
 *
mdiodev
)

1322 
¨7240sw
 *
as
 = 
	`dev_gë_drvd©a
(&
mdiodev
->
dev
);

1323 if(
as
->
mdio_node
)

1324 
	`mdiobus_uƒegi°î
(
as
->
swôch_mii_bus
);

1325 
	`uƒegi°î_swôch
(&
as
->
swdev
);

1326 
	}
}

1328 c⁄° 
of_devi˚_id
 
	gag71xx_sw_of_m©ch
[] = {

1329 { .
com∑tibÀ
 = "qca,ar8216-builtin" },

1330 { .
	gcom∑tibÀ
 = "qca,ar8229-builtin" },

1334 
mdio_drivî
 
	gag71xx_sw_drivî
 = {

1335 .
¥obe
 = 
ag71xx_¨7240_¥obe
,

1336 .
	gªmove
 = 
ag71xx_¨7240_ªmove
,

1337 .
	gmdiodrv
.
	gdrivî
 = {

1338 .
«me
 = "ag71xx-switch",

1339 .
	gof_m©ch_èbÀ
 = 
ag71xx_sw_of_m©ch
,

1343 
mdio_moduÀ_drivî
(
ag71xx_sw_drivî
);

1344 
MODULE_LICENSE
("GPL");

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_debugfs.c

14 
	~<löux/debugfs.h
>

16 
	~"ag71xx.h
"

18 
díåy
 *
	gag71xx_debugfs_roŸ
;

20 
	$ag71xx_debugfs_gíîic_›í
(
öode
 *öode, 
fûe
 *file)

22 
fûe
->
¥iv©e_d©a
 = 
öode
->
i_¥iv©e
;

24 
	}
}

26 
	$ag71xx_debugfs_upd©e_öt_°©s
(
ag71xx
 *
ag
, 
u32
 
°©us
)

28 i‡(
°©us
)

29 
ag
->
debug
.
öt_°©s
.
tŸÆ
++;

30 i‡(
°©us
 & 
AG71XX_INT_TX_PS
)

31 
ag
->
debug
.
öt_°©s
.
tx_ps
++;

32 i‡(
°©us
 & 
AG71XX_INT_TX_UR
)

33 
ag
->
debug
.
öt_°©s
.
tx_ur
++;

34 i‡(
°©us
 & 
AG71XX_INT_TX_BE
)

35 
ag
->
debug
.
öt_°©s
.
tx_be
++;

36 i‡(
°©us
 & 
AG71XX_INT_RX_PR
)

37 
ag
->
debug
.
öt_°©s
.
rx_¥
++;

38 i‡(
°©us
 & 
AG71XX_INT_RX_OF
)

39 
ag
->
debug
.
öt_°©s
.
rx_of
++;

40 i‡(
°©us
 & 
AG71XX_INT_RX_BE
)

41 
ag
->
debug
.
öt_°©s
.
rx_be
++;

42 
	}
}

44 
ssize_t
 
	$ªad_fûe_öt_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

45 
size_t
 
cou¡
, 
loff_t
 *
µos
)

47 
	#PR_INT_STAT
(
_œbñ
, 
_fõld
) \

48 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, \

49 "%20s: %10lu\n", 
_œbñ
, 
ag
->
debug
.
öt_°©s
.
_fõld
);

	)

51 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

52 
buf
[256];

53 
Àn
 = 0;

55 
	`PR_INT_STAT
("TX Packë Sít", 
tx_ps
);

56 
	`PR_INT_STAT
("TX Undîrun", 
tx_ur
);

57 
	`PR_INT_STAT
("TX Bu†Eº‹", 
tx_be
);

58 
	`PR_INT_STAT
("RX Packë Re˚ived", 
rx_¥
);

59 
	`PR_INT_STAT
("RX OvîÊow", 
rx_of
);

60 
	`PR_INT_STAT
("RX Bu†Eº‹", 
rx_be
);

61 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "\n");

62 
	`PR_INT_STAT
("TŸÆ", 
tŸÆ
);

64  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

65 #unde‡
PR_INT_STAT


66 
	}
}

68 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_öt_°©s
 = {

69 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

70 .
	gªad
 = 
ªad_fûe_öt_°©s
,

71 .
	gow√r
 = 
THIS_MODULE


74 
	$ag71xx_debugfs_upd©e_«pi_°©s
(
ag71xx
 *
ag
, 
rx
, 
tx
)

76 
ag71xx_«pi_°©s
 *
°©s
 = &
ag
->
debug
.
«pi_°©s
;

78 i‡(
rx
) {

79 
°©s
->
rx_cou¡
++;

80 
°©s
->
rx_∑ckës
 +
rx
;

81 i‡(
rx
 <
AG71XX_NAPI_WEIGHT
)

82 
°©s
->
rx
[rx]++;

83 i‡(
rx
 > 
°©s
->
rx_∑ckës_max
)

84 
°©s
->
rx_∑ckës_max
 = 
rx
;

87 i‡(
tx
) {

88 
°©s
->
tx_cou¡
++;

89 
°©s
->
tx_∑ckës
 +
tx
;

90 i‡(
tx
 <
AG71XX_NAPI_WEIGHT
)

91 
°©s
->
tx
[tx]++;

92 i‡(
tx
 > 
°©s
->
tx_∑ckës_max
)

93 
°©s
->
tx_∑ckës_max
 = 
tx
;

95 
	}
}

97 
ssize_t
 
	$ªad_fûe_«pi_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

98 
size_t
 
cou¡
, 
loff_t
 *
µos
)

100 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

101 
ag71xx_«pi_°©s
 *
°©s
 = &
ag
->
debug
.
«pi_°©s
;

102 *
buf
;

103 
buÊí
;

104 
Àn
 = 0;

105 
rx_avg
 = 0;

106 
tx_avg
 = 0;

107 
ªt
;

108 
i
;

110 
buÊí
 = 2048;

111 
buf
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

112 i‡(!
buf
)

113  -
ENOMEM
;

115 i‡(
°©s
->
rx_cou¡
)

116 
rx_avg
 = 
°©s
->
rx_∑ckës
 / sèts->
rx_cou¡
;

118 i‡(
°©s
->
tx_cou¡
)

119 
tx_avg
 = 
°©s
->
tx_∑ckës
 / sèts->
tx_cou¡
;

121 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s %10s %10s\n",

124 
i
 = 1; i <
AG71XX_NAPI_WEIGHT
; i++)

125 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

127 
i
, 
°©s
->
rx
[i], sèts->
tx
[i]);

129 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "\n");

131 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

132 "sum", 
°©s
->
rx_cou¡
, sèts->
tx_cou¡
);

133 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

134 "avg", 
rx_avg
, 
tx_avg
);

135 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

136 "max", 
°©s
->
rx_∑ckës_max
, sèts->
tx_∑ckës_max
);

137 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, "%3s: %10lu %10lu\n",

138 "pkt", 
°©s
->
rx_∑ckës
, sèts->
tx_∑ckës
);

140 
ªt
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

141 
	`k‰ì
(
buf
);

143  
ªt
;

144 
	}
}

146 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_«pi_°©s
 = {

147 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

148 .
	gªad
 = 
ªad_fûe_«pi_°©s
,

149 .
	gow√r
 = 
THIS_MODULE


152 
	#DESC_PRINT_LEN
 64

	)

154 
ssize_t
 
	$ªad_fûe_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

155 
size_t
 
cou¡
, 
loff_t
 *
µos
,

156 
ag71xx
 *
ag
,

157 
ag71xx_rög
 *
rög
,

158 
desc_ªg
)

160 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

161 
rög_mask
 = 
rög_size
 - 1;

162 *
buf
;

163 
buÊí
;

164 
Àn
 = 0;

165 
Êags
;

166 
ssize_t
 
ªt
;

167 
cuº
;

168 
dúty
;

169 
u32
 
desc_hw
;

170 
i
;

172 
buÊí
 = (
rög_size
 * 
DESC_PRINT_LEN
);

173 
buf
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

174 i‡(!
buf
)

175  -
ENOMEM
;

177 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

181 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

183 
cuº
 = (
rög
->cuº & 
rög_mask
);

184 
dúty
 = (
rög
->dúty & 
rög_mask
);

185 
desc_hw
 = 
	`ag71xx_º
(
ag
, 
desc_ªg
);

186 
i
 = 0; i < 
rög_size
; i++) {

187 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

188 
u32
 
desc_dma
 = ((u32Ë
rög
->
descs_dma
Ë+ 
i
 * 
AG71XX_DESC_SIZE
;

190 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
buÊí
 -Üen,

192 
i
,

193 (
i
 =
cuº
) ? 'C' : ' ',

194 (
i
 =
dúty
) ? 'D' : ' ',

195 (
desc_hw
 =
desc_dma
) ? 'H' : ' ',

196 
desc_dma
,

197 
desc
->
√xt
,

198 
desc
->
d©a
,

199 
desc
->
˘æ
,

200 (
desc
->
˘æ
 & 
DESC_EMPTY
) ? 'E' : '*');

203 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

205 
ªt
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

206 
	`k‰ì
(
buf
);

208  
ªt
;

209 
	}
}

211 
ssize_t
 
	$ªad_fûe_tx_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

212 
size_t
 
cou¡
, 
loff_t
 *
µos
)

214 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

216  
	`ªad_fûe_rög
(
fûe
, 
u£r_buf
, 
cou¡
, 
µos
, 
ag
, &ag->
tx_rög
,

217 
AG71XX_REG_TX_DESC
);

218 
	}
}

220 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_tx_rög
 = {

221 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

222 .
	gªad
 = 
ªad_fûe_tx_rög
,

223 .
	gow√r
 = 
THIS_MODULE


226 
ssize_t
 
	$ªad_fûe_rx_rög
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

227 
size_t
 
cou¡
, 
loff_t
 *
µos
)

229 
ag71xx
 *
ag
 = 
fûe
->
¥iv©e_d©a
;

231  
	`ªad_fûe_rög
(
fûe
, 
u£r_buf
, 
cou¡
, 
µos
, 
ag
, &ag->
rx_rög
,

232 
AG71XX_REG_RX_DESC
);

233 
	}
}

235 c⁄° 
fûe_›î©i⁄s
 
	gag71xx_f›s_rx_rög
 = {

236 .
›í
 = 
ag71xx_debugfs_gíîic_›í
,

237 .
	gªad
 = 
ªad_fûe_rx_rög
,

238 .
	gow√r
 = 
THIS_MODULE


241 
	$ag71xx_debugfs_exô
(
ag71xx
 *
ag
)

243 
	`debugfs_ªmove_ªcursive
(
ag
->
debug
.
debugfs_dú
);

244 
	}
}

246 
	$ag71xx_debugfs_öô
(
ag71xx
 *
ag
)

248 
devi˚
 *
dev
 = &
ag
->
pdev
->dev;

250 
ag
->
debug
.
debugfs_dú
 = 
	`debugfs_¸óã_dú
(
	`dev_«me
(
dev
),

251 
ag71xx_debugfs_roŸ
);

252 i‡(!
ag
->
debug
.
debugfs_dú
) {

253 
	`dev_îr
(
dev
, "unableÅo create debugfs directory\n");

254  -
ENOENT
;

257 
	`debugfs_¸óã_fûe
("öt_°©s", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

258 
ag
, &
ag71xx_f›s_öt_°©s
);

259 
	`debugfs_¸óã_fûe
("«pi_°©s", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

260 
ag
, &
ag71xx_f›s_«pi_°©s
);

261 
	`debugfs_¸óã_fûe
("tx_rög", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

262 
ag
, &
ag71xx_f›s_tx_rög
);

263 
	`debugfs_¸óã_fûe
("rx_rög", 
S_IRUGO
, 
ag
->
debug
.
debugfs_dú
,

264 
ag
, &
ag71xx_f›s_rx_rög
);

267 
	}
}

269 
	$ag71xx_debugfs_roŸ_öô
()

271 i‡(
ag71xx_debugfs_roŸ
)

272  -
EBUSY
;

274 
ag71xx_debugfs_roŸ
 = 
	`debugfs_¸óã_dú
(
KBUILD_MODNAME
, 
NULL
);

275 i‡(!
ag71xx_debugfs_roŸ
)

276  -
ENOENT
;

279 
	}
}

281 
	$ag71xx_debugfs_roŸ_exô
()

283 
	`debugfs_ªmove
(
ag71xx_debugfs_roŸ
);

284 
ag71xx_debugfs_roŸ
 = 
NULL
;

285 
	}
}

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ethtool.c

14 
	~"ag71xx.h
"

16 
	$ag71xx_ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
,

17 
ëhtoﬁ_cmd
 *
cmd
)

19 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

20 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

22 i‡(!
phydev
)

23  -
ENODEV
;

25  
	`phy_ëhtoﬁ_io˘l
(
phydev
, 
cmd
);

26 
	}
}

28 
	$ag71xx_ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
,

29 
ëhtoﬁ_cmd
 *
cmd
)

31 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

32 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

34 i‡(!
phydev
)

35  -
ENODEV
;

37  
	`phy_ëhtoﬁ_io˘l
(
phydev
, 
cmd
);

38 
	}
}

40 
u32
 
	$ag71xx_ëhtoﬁ_gë_msgÀvñ
(
√t_devi˚
 *
dev
)

42 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

44  
ag
->
msg_íabÀ
;

45 
	}
}

47 
	$ag71xx_ëhtoﬁ_£t_msgÀvñ
(
√t_devi˚
 *
dev
, 
u32
 
msg_Àvñ
)

49 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

51 
ag
->
msg_íabÀ
 = 
msg_Àvñ
;

52 
	}
}

54 
	$ag71xx_ëhtoﬁ_gë_rög∑øm
(
√t_devi˚
 *
dev
,

55 
ëhtoﬁ_rög∑øm
 *
î
)

57 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

59 
î
->
tx_max_≥ndög
 = 
AG71XX_TX_RING_SIZE_MAX
;

60 
î
->
rx_max_≥ndög
 = 
AG71XX_RX_RING_SIZE_MAX
;

61 
î
->
rx_möi_max_≥ndög
 = 0;

62 
î
->
rx_jumbo_max_≥ndög
 = 0;

64 
î
->
tx_≥ndög
 = 
	`BIT
(
ag
->
tx_rög
.
‹dî
);

65 
î
->
rx_≥ndög
 = 
	`BIT
(
ag
->
rx_rög
.
‹dî
);

66 
î
->
rx_möi_≥ndög
 = 0;

67 
î
->
rx_jumbo_≥ndög
 = 0;

69 i‡(
ag
->
tx_rög
.
desc_•lô
)

70 
î
->
tx_≥ndög
 /
AG71XX_TX_RING_DS_PER_PKT
;

71 
	}
}

73 
	$ag71xx_ëhtoﬁ_£t_rög∑øm
(
√t_devi˚
 *
dev
,

74 
ëhtoﬁ_rög∑øm
 *
î
)

76 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

77 
tx_size
;

78 
rx_size
;

79 
îr
 = 0;

81 i‡(
î
->
rx_möi_≥ndög
 != 0||

82 
î
->
rx_jumbo_≥ndög
 != 0 ||

83 
î
->
rx_≥ndög
 == 0 ||

84 
î
->
tx_≥ndög
 == 0)

85  -
EINVAL
;

87 
tx_size
 = 
î
->
tx_≥ndög
 < 
AG71XX_TX_RING_SIZE_MAX
 ?

88 
î
->
tx_≥ndög
 : 
AG71XX_TX_RING_SIZE_MAX
;

90 
rx_size
 = 
î
->
rx_≥ndög
 < 
AG71XX_RX_RING_SIZE_MAX
 ?

91 
î
->
rx_≥ndög
 : 
AG71XX_RX_RING_SIZE_MAX
;

93 i‡(
	`√tif_ru¬ög
(
dev
)) {

94 
îr
 = 
dev
->
√tdev_›s
->
	`ndo_°›
(dev);

95 i‡(
îr
)

96  
îr
;

99 i‡(
ag
->
tx_rög
.
desc_•lô
)

100 
tx_size
 *
AG71XX_TX_RING_DS_PER_PKT
;

102 
ag
->
tx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
tx_size
);

103 
ag
->
rx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
rx_size
);

105 i‡(
	`√tif_ru¬ög
(
dev
))

106 
îr
 = 
dev
->
√tdev_›s
->
	`ndo_›í
(dev);

108  
îr
;

109 
	}
}

111 
ëhtoﬁ_›s
 
	gag71xx_ëhtoﬁ_›s
 = {

112 .
£t_£âögs
 = 
ag71xx_ëhtoﬁ_£t_£âögs
,

113 .
	ggë_£âögs
 = 
ag71xx_ëhtoﬁ_gë_£âögs
,

114 .
	ggë_msgÀvñ
 = 
ag71xx_ëhtoﬁ_gë_msgÀvñ
,

115 .
	g£t_msgÀvñ
 = 
ag71xx_ëhtoﬁ_£t_msgÀvñ
,

116 .
	ggë_rög∑øm
 = 
ag71xx_ëhtoﬁ_gë_rög∑øm
,

117 .
	g£t_rög∑øm
 = 
ag71xx_ëhtoﬁ_£t_rög∑øm
,

118 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

119 .
	ggë_ts_öfo
 = 
ëhtoﬁ_›_gë_ts_öfo
,

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_gmac.c

9 
	~<löux/sizes.h
>

10 
	~<löux/of_addªss.h
>

11 
	~"ag71xx.h
"

13 
	$ag71xx_of_£t
(
devi˚_node
 *
≈
, c⁄° *
¥›
,

14 
u32
 *
ªg
, u32 
shi·
, u32 
mask
)

16 
u32
 
vÆ
;

18 i‡(
	`of_¥›îty_ªad_u32
(
≈
, 
¥›
, &
vÆ
))

21 *
ªg
 &~(
mask
 << 
shi·
);

22 *
ªg
 |((
vÆ
 & 
mask
Ë<< 
shi·
);

23 
	}
}

25 
	$ag71xx_of_bô
(
devi˚_node
 *
≈
, c⁄° *
¥›
,

26 
u32
 *
ªg
, u32 
mask
)

28 
u32
 
vÆ
;

30 i‡(
	`of_¥›îty_ªad_u32
(
≈
, 
¥›
, &
vÆ
))

33 i‡(
vÆ
)

34 *
ªg
 |
mask
;

36 *
ªg
 &~
mask
;

37 
	}
}

39 
	$ag71xx_£tup_gmac_933x
(
devi˚_node
 *
≈
, 
__iomem
 *
ba£
)

41 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ba£
 + 
AR933X_GMAC_REG_ETH_CFG
);

43 
	`ag71xx_of_bô
(
≈
, "swôch-phy-sw≠", &
vÆ
, 
AR933X_ETH_CFG_SW_PHY_SWAP
);

44 
	`ag71xx_of_bô
(
≈
, "swôch-phy-addr-sw≠", &
vÆ
,

45 
AR933X_ETH_CFG_SW_PHY_ADDR_SWAP
);

47 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
AR933X_GMAC_REG_ETH_CFG
);

48 
	}
}

50 
	$ag71xx_£tup_gmac_934x
(
devi˚_node
 *
≈
, 
__iomem
 *
ba£
)

52 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

54 
	`ag71xx_of_bô
(
≈
, "rgmii-gmac0", &
vÆ
, 
AR934X_ETH_CFG_RGMII_GMAC0
);

55 
	`ag71xx_of_bô
(
≈
, "mii-gmac0", &
vÆ
, 
AR934X_ETH_CFG_MII_GMAC0
);

56 
	`ag71xx_of_bô
(
≈
, "gmii-gmac0", &
vÆ
, 
AR934X_ETH_CFG_GMII_GMAC0
);

57 
	`ag71xx_of_bô
(
≈
, "swôch-phy-sw≠", &
vÆ
, 
AR934X_ETH_CFG_SW_PHY_SWAP
);

58 
	`ag71xx_of_bô
(
≈
, "swôch-⁄ly-mode", &
vÆ
,

59 
AR934X_ETH_CFG_SW_ONLY_MODE
);

60 
	`ag71xx_of_£t
(
≈
, "rxdv-dñay", &
vÆ
,

61 
AR934X_ETH_CFG_RDV_DELAY_SHIFT
, 0x3);

62 
	`ag71xx_of_£t
(
≈
, "rxd-dñay", &
vÆ
,

63 
AR934X_ETH_CFG_RXD_DELAY_SHIFT
, 0x3);

64 
	`ag71xx_of_£t
(
≈
, "txd-dñay", &
vÆ
,

65 
AR934X_ETH_CFG_TXD_DELAY_SHIFT
, 0x3);

66 
	`ag71xx_of_£t
(
≈
, "txí-dñay", &
vÆ
,

67 
AR934X_ETH_CFG_TXE_DELAY_SHIFT
, 0x3);

69 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
AR934X_GMAC_REG_ETH_CFG
);

70 
	}
}

72 
	$ag71xx_£tup_gmac_955x
(
devi˚_node
 *
≈
, 
__iomem
 *
ba£
)

74 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

76 
	`ag71xx_of_bô
(
≈
, "rgmii-íabÀd", &
vÆ
, 
QCA955X_ETH_CFG_RGMII_EN
);

77 
	`ag71xx_of_bô
(
≈
, "ge0-sgmii", &
vÆ
, 
QCA955X_ETH_CFG_GE0_SGMII
);

78 
	`ag71xx_of_£t
(
≈
, "txí-dñay", &
vÆ
, 
QCA955X_ETH_CFG_TXE_DELAY_SHIFT
, 0x3);

79 
	`ag71xx_of_£t
(
≈
, "txd-dñay", &
vÆ
, 
QCA955X_ETH_CFG_TXD_DELAY_SHIFT
, 0x3);

80 
	`ag71xx_of_£t
(
≈
, "rxdv-dñay", &
vÆ
, 
QCA955X_ETH_CFG_RDV_DELAY_SHIFT
, 0x3);

81 
	`ag71xx_of_£t
(
≈
, "rxd-dñay", &
vÆ
, 
QCA955X_ETH_CFG_RXD_DELAY_SHIFT
, 0x3);

83 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
QCA955X_GMAC_REG_ETH_CFG
);

84 
	}
}

86 
	$ag71xx_£tup_gmac_956x
(
devi˚_node
 *
≈
, 
__iomem
 *
ba£
)

88 
u32
 
vÆ
 = 
	`__øw_ªadl
(
ba£
 + 
QCA956X_GMAC_REG_ETH_CFG
);

90 
	`ag71xx_of_bô
(
≈
, "swôch-phy-sw≠", &
vÆ
, 
QCA956X_ETH_CFG_SW_PHY_SWAP
);

91 
	`ag71xx_of_bô
(
≈
, "swôch-phy-addr-sw≠", &
vÆ
,

92 
QCA956X_ETH_CFG_SW_PHY_ADDR_SWAP
);

94 
	`__øw_wrôñ
(
vÆ
, 
ba£
 + 
QCA956X_GMAC_REG_ETH_CFG
);

95 
	}
}

97 
	$ag71xx_£tup_gmac
(
devi˚_node
 *
≈
)

99 
devi˚_node
 *
≈_dev
;

100 
__iomem
 *
ba£
;

101 
îr
 = 0;

103 
≈
 = 
	`of_gë_chûd_by_«me
(np, "gmac-config");

104 i‡(!
≈
)

107 
≈_dev
 = 
	`of_∑r£_ph™dÀ
(
≈
, "device", 0);

108 i‡(!
≈_dev
)

109 
out
;

111 
ba£
 = 
	`of_iom≠
(
≈_dev
, 0);

112 i‡(!
ba£
) {

113 
	`¥_îr
("%pOF: c™'àm≠ GMACÑegi°îs\n", 
≈_dev
);

114 
îr
 = -
ENOMEM
;

115 
îr_iom≠
;

118 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈_dev
, "qca,ar9330-gmac"))

119 
	`ag71xx_£tup_gmac_933x
(
≈
, 
ba£
);

120 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈_dev
, "qca,ar9340-gmac"))

121 
	`ag71xx_£tup_gmac_934x
(
≈
, 
ba£
);

122 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈_dev
, "qca,qca9550-gmac"))

123 
	`ag71xx_£tup_gmac_955x
(
≈
, 
ba£
);

124 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈_dev
, "qca,qca9560-gmac"))

125 
	`ag71xx_£tup_gmac_956x
(
≈
, 
ba£
);

127 
	`iounm≠
(
ba£
);

129 
îr_iom≠
:

130 
	`of_node_put
(
≈_dev
);

131 
out
:

132 
	`of_node_put
(
≈
);

133  
îr
;

134 
	}
}

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c

14 
	~<löux/sizes.h
>

15 
	~<löux/of_√t.h
>

16 
	~<löux/of_addªss.h
>

17 
	~<löux/of_∂©f‹m.h
>

18 
	~"ag71xx.h
"

20 
	#AG71XX_DEFAULT_MSG_ENABLE
 \

21 (
NETIF_MSG_DRV
 \

22 | 
NETIF_MSG_PROBE
 \

23 | 
NETIF_MSG_LINK
 \

24 | 
NETIF_MSG_TIMER
 \

25 | 
NETIF_MSG_IFDOWN
 \

26 | 
NETIF_MSG_IFUP
 \

27 | 
NETIF_MSG_RX_ERR
 \

28 | 
NETIF_MSG_TX_ERR
)

	)

30 
	gag71xx_msg_Àvñ
 = -1;

32 
moduÀ_∑øm_«med
(
msg_Àvñ
, 
ag71xx_msg_Àvñ
, , 0);

33 
MODULE_PARM_DESC
(
msg_Àvñ
, "MessageÜevel (-1=defaults,0=none,...,16=all)");

35 
	#ETH_SWITCH_HEADER_LEN
 2

	)

37 
ag71xx_tx_∑ckës
(
ag71xx
 *
ag
, 
boﬁ
 
Êush
);

39 
ölöe
 
	$ag71xx_max_‰ame_Àn
(
mtu
)

41  
ETH_SWITCH_HEADER_LEN
 + 
ETH_HLEN
 + 
VLAN_HLEN
 + 
mtu
 + 
ETH_FCS_LEN
;

42 
	}
}

44 
	$ag71xx_dump_dma_ªgs
(
ag71xx
 *
ag
)

46 
	`DBG
("%s: dma_tx_ctrl=%08x, dma_tx_desc=%08x, dma_tx_status=%08x\n",

47 
ag
->
dev
->
«me
,

48 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_CTRL
),

49 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_DESC
),

50 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
));

52 
	`DBG
("%s: dma_rx_ctrl=%08x, dma_rx_desc=%08x, dma_rx_status=%08x\n",

53 
ag
->
dev
->
«me
,

54 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_CTRL
),

55 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_DESC
),

56 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
));

57 
	}
}

59 
	$ag71xx_dump_ªgs
(
ag71xx
 *
ag
)

61 
	`DBG
("%s: mac_cfg1=%08x, mac_cfg2=%08x, ipg=%08x, hdx=%08x, mfl=%08x\n",

62 
ag
->
dev
->
«me
,

63 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG1
),

64 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG2
),

65 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IPG
),

66 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_HDX
),

67 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_MFL
));

68 
	`DBG
("%s: mac_ifctl=%08x, mac_addr1=%08x, mac_addr2=%08x\n",

69 
ag
->
dev
->
«me
,

70 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IFCTL
),

71 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_ADDR1
),

72 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_ADDR2
));

73 
	`DBG
("%s: fifo_cfg0=%08x, fifo_cfg1=%08x, fifo_cfg2=%08x\n",

74 
ag
->
dev
->
«me
,

75 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG0
),

76 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG1
),

77 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG2
));

78 
	`DBG
("%s: fifo_cfg3=%08x, fifo_cfg4=%08x, fifo_cfg5=%08x\n",

79 
ag
->
dev
->
«me
,

80 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG3
),

81 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG4
),

82 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG5
));

83 
	}
}

85 
ölöe
 
	$ag71xx_dump_öå
(
ag71xx
 *
ag
, *
œbñ
, 
u32
 
öå
)

87 
	`DBG
("%s: %s intr=%08x %s%s%s%s%s%s\n",

88 
ag
->
dev
->
«me
, 
œbñ
, 
öå
,

89 (
öå
 & 
AG71XX_INT_TX_PS
) ? "TXPS " : "",

90 (
öå
 & 
AG71XX_INT_TX_UR
) ? "TXUR " : "",

91 (
öå
 & 
AG71XX_INT_TX_BE
) ? "TXBE " : "",

92 (
öå
 & 
AG71XX_INT_RX_PR
) ? "RXPR " : "",

93 (
öå
 & 
AG71XX_INT_RX_OF
) ? "RXOF " : "",

94 (
öå
 & 
AG71XX_INT_RX_BE
) ? "RXBE " : "");

95 
	}
}

97 
	$ag71xx_rög_tx_˛ón
(
ag71xx
 *
ag
)

99 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

100 
√t_devi˚
 *
dev
 = 
ag
->dev;

101 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

102 
u32
 
byãs_com∂
 = 0, 
pkts_com∂
 = 0;

104 
rög
->
cuº
 !rög->
dúty
) {

105 
ag71xx_desc
 *
desc
;

106 
u32
 
i
 = 
rög
->
dúty
 & 
rög_mask
;

108 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

109 i‡(!
	`ag71xx_desc_em±y
(
desc
)) {

110 
desc
->
˘æ
 = 0;

111 
dev
->
°©s
.
tx_îr‹s
++;

114 i‡(
rög
->
buf
[
i
].
skb
) {

115 
byãs_com∂
 +
rög
->
buf
[
i
].
Àn
;

116 
pkts_com∂
++;

117 
	`dev_k‰ì_skb_™y
(
rög
->
buf
[
i
].
skb
);

119 
rög
->
buf
[
i
].
skb
 = 
NULL
;

120 
rög
->
dúty
++;

124 
	`wmb
();

126 
	`√tdev_com∂ëed_queue
(
dev
, 
pkts_com∂
, 
byãs_com∂
);

127 
	}
}

129 
	$ag71xx_rög_tx_öô
(
ag71xx
 *
ag
)

131 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

132 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

133 
rög_mask
 = 
rög_size
 - 1;

134 
i
;

136 
i
 = 0; i < 
rög_size
; i++) {

137 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

139 
desc
->
√xt
 = (
u32
Ë(
rög
->
descs_dma
 +

140 
AG71XX_DESC_SIZE
 * ((
i
 + 1Ë& 
rög_mask
));

142 
desc
->
˘æ
 = 
DESC_EMPTY
;

143 
rög
->
buf
[
i
].
skb
 = 
NULL
;

147 
	`wmb
();

149 
rög
->
cuº
 = 0;

150 
rög
->
dúty
 = 0;

151 
	`√tdev_ª£t_queue
(
ag
->
dev
);

152 
	}
}

154 
	$ag71xx_rög_rx_˛ón
(
ag71xx
 *
ag
)

156 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

157 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

158 
i
;

160 i‡(!
rög
->
buf
)

163 
i
 = 0; i < 
rög_size
; i++)

164 i‡(
rög
->
buf
[
i
].
rx_buf
) {

165 
	`dma_unm≠_sögÀ
(&
ag
->
dev
->dev, 
rög
->
buf
[
i
].
dma_addr
,

166 
ag
->
rx_buf_size
, 
DMA_FROM_DEVICE
);

167 
	`skb_‰ì_‰ag
(
rög
->
buf
[
i
].
rx_buf
);

169 
	}
}

171 
	$ag71xx_buf„r_size
(
ag71xx
 *
ag
)

173  
ag
->
rx_buf_size
 +

174 
	`SKB_DATA_ALIGN
((
skb_sh¨ed_öfo
));

175 
	}
}

177 
boﬁ
 
	$ag71xx_fûl_rx_buf
(
ag71xx
 *
ag
, 
ag71xx_buf
 *
buf
,

178 
off£t
,

179 *(*
Æloc
)(
size
))

181 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

182 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
buf
 - &ring->buf[0]);

183 *
d©a
;

185 
d©a
 = 
	`Æloc
(
	`ag71xx_buf„r_size
(
ag
));

186 i‡(!
d©a
)

187  
Ál£
;

189 
buf
->
rx_buf
 = 
d©a
;

190 
buf
->
dma_addr
 = 
	`dma_m≠_sögÀ
(&
ag
->
dev
->dev, 
d©a
,ág->
rx_buf_size
,

191 
DMA_FROM_DEVICE
);

192 
desc
->
d©a
 = (
u32
Ë
buf
->
dma_addr
 + 
off£t
;

193  
åue
;

194 
	}
}

196 
	$ag71xx_rög_rx_öô
(
ag71xx
 *
ag
)

198 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

199 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

200 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

201 
i
;

202 
ªt
;

204 
ªt
 = 0;

205 
i
 = 0; i < 
rög_size
; i++) {

206 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

208 
desc
->
√xt
 = (
u32
Ë(
rög
->
descs_dma
 +

209 
AG71XX_DESC_SIZE
 * ((
i
 + 1Ë& 
rög_mask
));

211 
	`DBG
("ag71xx: RX descát %p,Çext is %08x\n",

212 
desc
, desc->
√xt
);

215 
i
 = 0; i < 
rög_size
; i++) {

216 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

218 i‡(!
	`ag71xx_fûl_rx_buf
(
ag
, &
rög
->
buf
[
i
],ág->
rx_buf_off£t
,

219 
√tdev_Æloc_‰ag
)) {

220 
ªt
 = -
ENOMEM
;

224 
desc
->
˘æ
 = 
DESC_EMPTY
;

228 
	`wmb
();

230 
rög
->
cuº
 = 0;

231 
rög
->
dúty
 = 0;

233  
ªt
;

234 
	}
}

236 
	$ag71xx_rög_rx_ªfûl
(
ag71xx
 *
ag
)

238 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

239 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

240 
cou¡
;

241 
off£t
 = 
ag
->
rx_buf_off£t
;

243 
cou¡
 = 0;

244 ; 
rög
->
cuº
 -Ñög->
dúty
 > 0;Ñing->dirty++) {

245 
ag71xx_desc
 *
desc
;

246 
i
;

248 
i
 = 
rög
->
dúty
 & 
rög_mask
;

249 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

251 i‡(!
rög
->
buf
[
i
].
rx_buf
 &&

252 !
	`ag71xx_fûl_rx_buf
(
ag
, &
rög
->
buf
[
i
], 
off£t
,

253 
«pi_Æloc_‰ag
))

256 
desc
->
˘æ
 = 
DESC_EMPTY
;

257 
cou¡
++;

261 
	`wmb
();

263 
	`DBG
("%s: %uÑx des¸ùt‹†ªfûÀd\n", 
ag
->
dev
->
«me
, 
cou¡
);

265  
cou¡
;

266 
	}
}

268 
	$ag71xx_rögs_öô
(
ag71xx
 *
ag
)

270 
ag71xx_rög
 *
tx
 = &
ag
->
tx_rög
;

271 
ag71xx_rög
 *
rx
 = &
ag
->
rx_rög
;

272 
rög_size
 = 
	`BIT
(
tx
->
‹dî
Ë+ BIT(
rx
->order);

273 
tx_size
 = 
	`BIT
(
tx
->
‹dî
);

275 
tx
->
buf
 = 
	`kzÆloc
(
rög_size
 * (*tx->buf), 
GFP_KERNEL
);

276 i‡(!
tx
->
buf
)

277  -
ENOMEM
;

279 
tx
->
descs_˝u
 = 
	`dma_Æloc_cohîít
(
NULL
, 
rög_size
 * 
AG71XX_DESC_SIZE
,

280 &
tx
->
descs_dma
, 
GFP_ATOMIC
);

281 i‡(!
tx
->
descs_˝u
) {

282 
	`k‰ì
(
tx
->
buf
);

283 
tx
->
buf
 = 
NULL
;

284  -
ENOMEM
;

287 
rx
->
buf
 = &
tx
->buf[
	`BIT
—x->
‹dî
)];

288 
rx
->
descs_˝u
 = ((*)
tx
->descs_˝uË+ 
tx_size
 * 
AG71XX_DESC_SIZE
;

289 
rx
->
descs_dma
 = 
tx
->descs_dm®+ 
tx_size
 * 
AG71XX_DESC_SIZE
;

291 
	`ag71xx_rög_tx_öô
(
ag
);

292  
	`ag71xx_rög_rx_öô
(
ag
);

293 
	}
}

295 
	$ag71xx_rögs_‰ì
(
ag71xx
 *
ag
)

297 
ag71xx_rög
 *
tx
 = &
ag
->
tx_rög
;

298 
ag71xx_rög
 *
rx
 = &
ag
->
rx_rög
;

299 
rög_size
 = 
	`BIT
(
tx
->
‹dî
Ë+ BIT(
rx
->order);

301 i‡(
tx
->
descs_˝u
)

302 
	`dma_‰ì_cohîít
(
NULL
, 
rög_size
 * 
AG71XX_DESC_SIZE
,

303 
tx
->
descs_˝u
,Åx->
descs_dma
);

305 
	`k‰ì
(
tx
->
buf
);

307 
tx
->
descs_˝u
 = 
NULL
;

308 
rx
->
descs_˝u
 = 
NULL
;

309 
tx
->
buf
 = 
NULL
;

310 
rx
->
buf
 = 
NULL
;

311 
	}
}

313 
	$ag71xx_rögs_˛ónup
(
ag71xx
 *
ag
)

315 
	`ag71xx_rög_rx_˛ón
(
ag
);

316 
	`ag71xx_rög_tx_˛ón
(
ag
);

317 
	`ag71xx_rögs_‰ì
(
ag
);

319 
	`√tdev_ª£t_queue
(
ag
->
dev
);

320 
	}
}

322 *
	$ag71xx_•ìd_°r
(
ag71xx
 *
ag
)

324 
ag
->
•ìd
) {

325 
SPEED_1000
:

327 
SPEED_100
:

329 
SPEED_10
:

334 
	}
}

336 
	$ag71xx_hw_£t_maˇddr
(
ag71xx
 *
ag
, *
mac
)

338 
u32
 
t
;

340 
t
 = (((
u32
Ë
mac
[5]) << 24) | (((u32) mac[4]) << 16)

341 | (((
u32
Ë
mac
[3]) << 8) | ((u32) mac[2]);

343 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_ADDR1
, 
t
);

345 
t
 = (((
u32
Ë
mac
[1]) << 24) | (((u32) mac[0]) << 16);

346 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_ADDR2
, 
t
);

347 
	}
}

349 
	$ag71xx_dma_ª£t
(
ag71xx
 *
ag
)

351 
u32
 
vÆ
;

352 
i
;

354 
	`ag71xx_dump_dma_ªgs
(
ag
);

357 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 0);

358 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 0);

364 
	`mdñay
(1);

367 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
°›_desc_dma
);

368 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
,ág->
°›_desc_dma
);

371 
i
 = 0; i < 256; i++) {

372 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_PR
);

373 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_PS
);

377 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_BE
 | 
RX_STATUS_OF
);

378 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_BE
 | 
TX_STATUS_UR
);

380 
vÆ
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
);

381 i‡(
vÆ
)

382 
	`¥_Æît
("%s: unableÅo clear DMA Rx status: %08x\n",

383 
ag
->
dev
->
«me
, 
vÆ
);

385 
vÆ
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
);

388 
vÆ
 &= ~0xff000000;

390 i‡(
vÆ
)

391 
	`¥_Æît
("%s: unableÅo clear DMA Tx status: %08x\n",

392 
ag
->
dev
->
«me
, 
vÆ
);

394 
	`ag71xx_dump_dma_ªgs
(
ag
);

395 
	}
}

397 
	#MAC_CFG1_INIT
 (
MAC_CFG1_RXE
 | 
MAC_CFG1_TXE
 | \

398 
MAC_CFG1_SRX
 | 
MAC_CFG1_STX
)

	)

400 
	#FIFO_CFG0_INIT
 (
FIFO_CFG0_ALL
 << 
FIFO_CFG0_ENABLE_SHIFT
)

	)

402 
	#FIFO_CFG4_INIT
 (
FIFO_CFG4_DE
 | 
FIFO_CFG4_DV
 | 
FIFO_CFG4_FC
 | \

403 
FIFO_CFG4_CE
 | 
FIFO_CFG4_CR
 | 
FIFO_CFG4_LM
 | \

404 
FIFO_CFG4_LO
 | 
FIFO_CFG4_OK
 | 
FIFO_CFG4_MC
 | \

405 
FIFO_CFG4_BC
 | 
FIFO_CFG4_DR
 | 
FIFO_CFG4_LE
 | \

406 
FIFO_CFG4_CF
 | 
FIFO_CFG4_PF
 | 
FIFO_CFG4_UO
 | \

407 
FIFO_CFG4_VT
)

	)

409 
	#FIFO_CFG5_INIT
 (
FIFO_CFG5_DE
 | 
FIFO_CFG5_DV
 | 
FIFO_CFG5_FC
 | \

410 
FIFO_CFG5_CE
 | 
FIFO_CFG5_LO
 | 
FIFO_CFG5_OK
 | \

411 
FIFO_CFG5_MC
 | 
FIFO_CFG5_BC
 | 
FIFO_CFG5_DR
 | \

412 
FIFO_CFG5_CF
 | 
FIFO_CFG5_PF
 | 
FIFO_CFG5_VT
 | \

413 
FIFO_CFG5_LE
 | 
FIFO_CFG5_FT
 | 
FIFO_CFG5_16
 | \

414 
FIFO_CFG5_17
 | 
FIFO_CFG5_SF
)

	)

416 
	$ag71xx_hw_°›
(
ag71xx
 *
ag
)

419 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_INT_ENABLE
, 0);

420 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 0);

421 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 0);

422 
	}
}

424 
	$ag71xx_hw_£tup
(
ag71xx
 *
ag
)

426 
devi˚_node
 *
≈
 = 
ag
->
pdev
->
dev
.
of_node
;

427 
u32
 
öô
 = 
MAC_CFG1_INIT
;

430 i‡(
	`of_¥›îty_ªad_boﬁ
(
≈
, "flow-control"))

431 
öô
 |
MAC_CFG1_TFC
 | 
MAC_CFG1_RFC
;

432 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_CFG1
, 
öô
);

434 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_MAC_CFG2
,

435 
MAC_CFG2_PAD_CRC_EN
 | 
MAC_CFG2_LEN_CHECK
);

438 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
, 0);

441 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG0
, 
FIFO_CFG0_INIT
);

442 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG1
,ág->
fifod©a
[0]);

443 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG2
,ág->
fifod©a
[1]);

444 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG4
, 
FIFO_CFG4_INIT
);

445 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG5
, 
FIFO_CFG5_INIT
);

446 
	}
}

448 
	$ag71xx_hw_öô
(
ag71xx
 *
ag
)

450 
	`ag71xx_hw_°›
(
ag
);

452 
	`ag71xx_sb
(
ag
, 
AG71XX_REG_MAC_CFG1
, 
MAC_CFG1_SR
);

453 
	`udñay
(20);

455 
	`ª£t_c⁄åﬁ_as£π
(
ag
->
mac_ª£t
);

456 
	`m¶ìp
(100);

457 
	`ª£t_c⁄åﬁ_dós£π
(
ag
->
mac_ª£t
);

458 
	`m¶ìp
(200);

460 
	`ag71xx_hw_£tup
(
ag
);

462 
	`ag71xx_dma_ª£t
(
ag
);

463 
	}
}

465 
	$ag71xx_Á°_ª£t
(
ag71xx
 *
ag
)

467 
√t_devi˚
 *
dev
 = 
ag
->dev;

468 
u32
 
rx_ds
;

469 
u32
 
mii_ªg
;

471 
	`ag71xx_hw_°›
(
ag
);

472 
	`wmb
();

474 
mii_ªg
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MII_CFG
);

475 
rx_ds
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_DESC
);

477 
	`ag71xx_tx_∑ckës
(
ag
, 
åue
);

479 
	`ª£t_c⁄åﬁ_as£π
(
ag
->
mac_ª£t
);

480 
	`udñay
(10);

481 
	`ª£t_c⁄åﬁ_dós£π
(
ag
->
mac_ª£t
);

482 
	`udñay
(10);

484 
	`ag71xx_dma_ª£t
(
ag
);

485 
	`ag71xx_hw_£tup
(
ag
);

486 
ag
->
tx_rög
.
cuº
 = 0;

487 
ag
->
tx_rög
.
dúty
 = 0;

488 
	`√tdev_ª£t_queue
(
ag
->
dev
);

491 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
,

492 
	`ag71xx_max_‰ame_Àn
(
ag
->
dev
->
mtu
));

494 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
, 
rx_ds
);

495 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
tx_rög
.
descs_dma
);

496 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MII_CFG
, 
mii_ªg
);

498 
	`ag71xx_hw_£t_maˇddr
(
ag
, 
dev
->
dev_addr
);

499 
	}
}

501 
	$ag71xx_hw_°¨t
(
ag71xx
 *
ag
)

504 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 
RX_CTRL_RXE
);

507 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_INT_ENABLE
, 
AG71XX_INT_INIT
);

509 
	`√tif_wake_queue
(
ag
->
dev
);

510 
	}
}

512 
	$©h79_£t_∂lvÆ
(
ag71xx
 *
ag
)

514 
u32
 
∂l_ªg
 = 
ag
->
∂Ãeg
[1];

515 
u32
 
∂l_vÆ
;

517 i‡(!
ag
->
∂Ãegm≠
)

520 
ag
->
•ìd
) {

521 
SPEED_10
:

522 
∂l_vÆ
 = 
ag
->
∂ld©a
[2];

524 
SPEED_100
:

525 
∂l_vÆ
 = 
ag
->
∂ld©a
[1];

527 
SPEED_1000
:

528 
∂l_vÆ
 = 
ag
->
∂ld©a
[0];

531 
	`BUG
();

534 i‡(
∂l_vÆ
)

535 
	`ªgm≠_wrôe
(
ag
->
∂Ãegm≠
, 
∂l_ªg
, 
∂l_vÆ
);

536 
	}
}

538 
	$©h79_£t_∂l
(
ag71xx
 *
ag
)

540 
u32
 
∂l_cfg
 = 
ag
->
∂Ãeg
[0];

541 
u32
 
∂l_shi·
 = 
ag
->
∂Ãeg
[2];

543 i‡(!
ag
->
∂Ãegm≠
)

546 
	`ªgm≠_upd©e_bôs
(
ag
->
∂Ãegm≠
, 
∂l_cfg
, 3 << 
∂l_shi·
, 2 <<Öll_shift);

547 
	`udñay
(100);

549 
	`©h79_£t_∂lvÆ
(
ag
);

551 
	`ªgm≠_upd©e_bôs
(
ag
->
∂Ãegm≠
, 
∂l_cfg
, 3 << 
∂l_shi·
, 3 <<Öll_shift);

552 
	`udñay
(100);

554 
	`ªgm≠_upd©e_bôs
(
ag
->
∂Ãegm≠
, 
∂l_cfg
, 3 << 
∂l_shi·
, 0);

555 
	`udñay
(100);

556 
	}
}

558 
	$©h79_mii_˘æ_£t_if
(
ag71xx
 *
ag
, 
mii_if
)

560 
u32
 
t
;

562 
t
 = 
	`__øw_ªadl
(
ag
->
mii_ba£
);

563 
t
 &~(
AR71XX_MII_CTRL_IF_MASK
);

564 
t
 |(
mii_if
 & 
AR71XX_MII_CTRL_IF_MASK
);

565 
	`__øw_wrôñ
(
t
, 
ag
->
mii_ba£
);

566 
	}
}

568 
	$©h79_mii0_˘æ_£t_if
(
ag71xx
 *
ag
)

570 
mii_if
;

572 
ag
->
phy_if_mode
) {

573 
PHY_INTERFACE_MODE_MII
:

574 
mii_if
 = 
AR71XX_MII0_CTRL_IF_MII
;

576 
PHY_INTERFACE_MODE_GMII
:

577 
mii_if
 = 
AR71XX_MII0_CTRL_IF_GMII
;

579 
PHY_INTERFACE_MODE_RGMII
:

580 
mii_if
 = 
AR71XX_MII0_CTRL_IF_RGMII
;

582 
PHY_INTERFACE_MODE_RMII
:

583 
mii_if
 = 
AR71XX_MII0_CTRL_IF_RMII
;

586 
	`WARN
(1, "Impossible PHY mode defined.\n");

590 
	`©h79_mii_˘æ_£t_if
(
ag
, 
mii_if
);

591 
	}
}

593 
	$©h79_mii1_˘æ_£t_if
(
ag71xx
 *
ag
)

595 
mii_if
;

597 
ag
->
phy_if_mode
) {

598 
PHY_INTERFACE_MODE_RMII
:

599 
mii_if
 = 
AR71XX_MII1_CTRL_IF_RMII
;

601 
PHY_INTERFACE_MODE_RGMII
:

602 
mii_if
 = 
AR71XX_MII1_CTRL_IF_RGMII
;

605 
	`WARN
(1, "Impossible PHY mode defined.\n");

609 
	`©h79_mii_˘æ_£t_if
(
ag
, 
mii_if
);

610 
	}
}

612 
	$©h79_mii_˘æ_£t_•ìd
(
ag71xx
 *
ag
)

614 
mii_•ìd
;

615 
u32
 
t
;

617 i‡(!
ag
->
mii_ba£
)

620 
ag
->
•ìd
) {

621 
SPEED_10
:

622 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_10
;

624 
SPEED_100
:

625 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_100
;

627 
SPEED_1000
:

628 
mii_•ìd
 = 
AR71XX_MII_CTRL_SPEED_1000
;

631 
	`BUG
();

634 
t
 = 
	`__øw_ªadl
(
ag
->
mii_ba£
);

635 
t
 &~(
AR71XX_MII_CTRL_SPEED_MASK
 << 
AR71XX_MII_CTRL_SPEED_SHIFT
);

636 
t
 |
mii_•ìd
 << 
AR71XX_MII_CTRL_SPEED_SHIFT
;

637 
	`__øw_wrôñ
(
t
, 
ag
->
mii_ba£
);

638 
	}
}

641 
	$__ag71xx_lök_adju°
(
ag71xx
 *
ag
, 
boﬁ
 
upd©e
)

643 
devi˚_node
 *
≈
 = 
ag
->
pdev
->
dev
.
of_node
;

644 
u32
 
cfg2
;

645 
u32
 
if˘l
;

646 
u32
 
fifo5
;

648 i‡(!
ag
->
lök
 && 
upd©e
) {

649 
	`ag71xx_hw_°›
(
ag
);

650 
	`√tif_ˇºõr_off
(
ag
->
dev
);

651 i‡(
	`√tif_msg_lök
(
ag
))

652 
	`¥_öfo
("%s:Üök down\n", 
ag
->
dev
->
«me
);

656 i‡(!
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9130-eth") &&

657 !
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth"))

658 
	`ag71xx_Á°_ª£t
(
ag
);

660 
cfg2
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_CFG2
);

661 
cfg2
 &~(
MAC_CFG2_IF_1000
 | 
MAC_CFG2_IF_10_100
 | 
MAC_CFG2_FDX
);

662 
cfg2
 |(
ag
->
du∂ex
Ë? 
MAC_CFG2_FDX
 : 0;

664 
if˘l
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_MAC_IFCTL
);

665 
if˘l
 &~(
MAC_IFCTL_SPEED
);

667 
fifo5
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_CFG5
);

668 
fifo5
 &~
FIFO_CFG5_BM
;

670 
ag
->
•ìd
) {

671 
SPEED_1000
:

672 
cfg2
 |
MAC_CFG2_IF_1000
;

673 
fifo5
 |
FIFO_CFG5_BM
;

675 
SPEED_100
:

676 
cfg2
 |
MAC_CFG2_IF_10_100
;

677 
if˘l
 |
MAC_IFCTL_SPEED
;

679 
SPEED_10
:

680 
cfg2
 |
MAC_CFG2_IF_10_100
;

683 
	`BUG
();

687 i‡(
ag
->
tx_rög
.
desc_•lô
) {

688 
ag
->
fifod©a
[2] &= 0xffff;

689 
ag
->
fifod©a
[2] |((2048 -ág->
tx_rög
.
desc_•lô
) / 4) << 16;

692 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG3
,ág->
fifod©a
[2]);

694 i‡(
upd©e
) {

695 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth") ||

696 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9130-eth")) {

697 
	`©h79_£t_∂l
(
ag
);

698 
	`©h79_mii_˘æ_£t_•ìd
(
ag
);

699 } i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7242-eth") ||

700 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9340-eth") ||

701 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9550-eth") ||

702 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9560-eth")) {

703 
	`©h79_£t_∂lvÆ
(
ag
);

707 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_CFG2
, 
cfg2
);

708 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_FIFO_CFG5
, 
fifo5
);

709 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_IFCTL
, 
if˘l
);

711 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9530-eth") ||

712 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9560-eth")) {

719 
__iomem
 *
dam
 = 
	`i‹em≠_noˇche
(0xb90001bc, 0x4);

720 i‡(
dam
) {

721 
	`__øw_wrôñ
(
	`__øw_ªadl
(
dam
Ë& ~
	`BIT
(27), dam);

722 ()
	`__øw_ªadl
(
dam
);

723 
	`iounm≠
(
dam
);

727 
	`ag71xx_hw_°¨t
(
ag
);

729 
	`√tif_ˇºõr_⁄
(
ag
->
dev
);

730 i‡(
upd©e
 && 
	`√tif_msg_lök
(
ag
))

731 
	`¥_öfo
("%s:Üink up (%sMbps/%s duplex)\n",

732 
ag
->
dev
->
«me
,

733 
	`ag71xx_•ìd_°r
(
ag
),

734 (
DUPLEX_FULL
 =
ag
->
du∂ex
) ? "Full" : "Half");

736 
	`ag71xx_dump_ªgs
(
ag
);

737 
	}
}

739 
	$ag71xx_lök_adju°
(
ag71xx
 *
ag
)

741 
	`__ag71xx_lök_adju°
(
ag
, 
åue
);

742 
	}
}

744 
	$ag71xx_hw_íabÀ
(
ag71xx
 *
ag
)

746 
ªt
;

748 
ªt
 = 
	`ag71xx_rögs_öô
(
ag
);

749 i‡(
ªt
)

750  
ªt
;

752 
	`«pi_íabÀ
(&
ag
->
«pi
);

753 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_DESC
,ág->
tx_rög
.
descs_dma
);

754 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_DESC
,ág->
rx_rög
.
descs_dma
);

755 
	`√tif_°¨t_queue
(
ag
->
dev
);

758 
	}
}

760 
	$ag71xx_hw_dißbÀ
(
ag71xx
 *
ag
)

762 
Êags
;

764 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

766 
	`√tif_°›_queue
(
ag
->
dev
);

768 
	`ag71xx_hw_°›
(
ag
);

769 
	`ag71xx_dma_ª£t
(
ag
);

771 
	`«pi_dißbÀ
(&
ag
->
«pi
);

772 
	`dñ_timî_sync
(&
ag
->
oom_timî
);

774 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

776 
	`ag71xx_rögs_˛ónup
(
ag
);

777 
	}
}

779 
	$ag71xx_›í
(
√t_devi˚
 *
dev
)

781 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

782 
max_‰ame_Àn
;

783 
ªt
;

785 
	`√tif_ˇºõr_off
(
dev
);

786 
max_‰ame_Àn
 = 
	`ag71xx_max_‰ame_Àn
(
dev
->
mtu
);

787 
ag
->
rx_buf_size
 = 
	`SKB_DATA_ALIGN
(
max_‰ame_Àn
 + 
NET_SKB_PAD
 + 
NET_IP_ALIGN
);

790 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
, 
max_‰ame_Àn
);

791 
	`ag71xx_hw_£t_maˇddr
(
ag
, 
dev
->
dev_addr
);

793 
ªt
 = 
	`ag71xx_hw_íabÀ
(
ag
);

794 i‡(
ªt
)

795 
îr
;

797 
	`phy_°¨t
(
ag
->
phy_dev
);

801 
îr
:

802 
	`ag71xx_rögs_˛ónup
(
ag
);

803  
ªt
;

804 
	}
}

806 
	$ag71xx_°›
(
√t_devi˚
 *
dev
)

808 
Êags
;

809 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

811 
	`√tif_ˇºõr_off
(
dev
);

812 
	`phy_°›
(
ag
->
phy_dev
);

814 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

815 i‡(
ag
->
lök
) {

816 
ag
->
lök
 = 0;

817 
	`ag71xx_lök_adju°
(
ag
);

819 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

821 
	`ag71xx_hw_dißbÀ
(
ag
);

824 
	}
}

826 
	$ag71xx_fûl_dma_desc
(
ag71xx_rög
 *
rög
, 
u32
 
addr
, 
Àn
)

828 
i
;

829 
ag71xx_desc
 *
desc
;

830 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

831 
ndesc
 = 0;

832 
•lô
 = 
rög
->
desc_•lô
;

834 i‡(!
•lô
)

835 
•lô
 = 
Àn
;

837 
Àn
 > 0) {

838 
cur_Àn
 = 
Àn
;

840 
i
 = (
rög
->
cuº
 + 
ndesc
Ë& 
rög_mask
;

841 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

843 i‡(!
	`ag71xx_desc_em±y
(
desc
))

846 i‡(
cur_Àn
 > 
•lô
) {

847 
cur_Àn
 = 
•lô
;

853 i‡(
Àn
 <
•lô
 + 4)

854 
cur_Àn
 -= 4;

857 
desc
->
d©a
 = 
addr
;

858 
addr
 +
cur_Àn
;

859 
Àn
 -
cur_Àn
;

861 i‡(
Àn
 > 0)

862 
cur_Àn
 |
DESC_MORE
;

865 i‡(!
ndesc
)

866 
cur_Àn
 |
DESC_EMPTY
;

868 
desc
->
˘æ
 = 
cur_Àn
;

869 
ndesc
++;

872  
ndesc
;

873 
	}
}

875 
√tdev_tx_t
 
	$ag71xx_h¨d_°¨t_xmô
(
sk_buff
 *
skb
,

876 
√t_devi˚
 *
dev
)

878 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

879 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

880 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

881 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

882 
ag71xx_desc
 *
desc
;

883 
dma_addr_t
 
dma_addr
;

884 
i
, 
n
, 
rög_mö
;

886 i‡(
skb
->
Àn
 <= 4) {

887 
	`DBG
("%s:ÖackëÜí i†toÿsmÆl\n", 
ag
->
dev
->
«me
);

888 
îr_dr›
;

891 
dma_addr
 = 
	`dma_m≠_sögÀ
(&
dev
->dev, 
skb
->
d©a
, skb->
Àn
,

892 
DMA_TO_DEVICE
);

894 
i
 = 
rög
->
cuº
 & 
rög_mask
;

895 
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

898 
n
 = 
	`ag71xx_fûl_dma_desc
(
rög
, (
u32
Ë
dma_addr
, 
skb
->
Àn
 & 
ag
->
desc_pkéí_mask
);

899 i‡(
n
 < 0)

900 
îr_dr›_unm≠
;

902 
i
 = (
rög
->
cuº
 + 
n
 - 1Ë& 
rög_mask
;

903 
rög
->
buf
[
i
].
Àn
 = 
skb
->len;

904 
rög
->
buf
[
i
].
skb
 = skb;

906 
	`√tdev_£¡_queue
(
dev
, 
skb
->
Àn
);

908 
	`skb_tx_time°amp
(
skb
);

910 
desc
->
˘æ
 &~
DESC_EMPTY
;

911 
rög
->
cuº
 +
n
;

914 
	`wmb
();

916 
rög_mö
 = 2;

917 i‡(
rög
->
desc_•lô
)

918 
rög_mö
 *
AG71XX_TX_RING_DS_PER_PKT
;

920 i‡(
rög
->
cuº
 -Ñög->
dúty
 >
rög_size
 - 
rög_mö
) {

921 
	`DBG
("%s:Åx queuêfuŒ\n", 
dev
->
«me
);

922 
	`√tif_°›_queue
(
dev
);

925 
	`DBG
("%s:Öackë inje˘ed i¡ÿTX queue\n", 
ag
->
dev
->
«me
);

928 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_CTRL
, 
TX_CTRL_TXE
);

930  
NETDEV_TX_OK
;

932 
îr_dr›_unm≠
:

933 
	`dma_unm≠_sögÀ
(&
dev
->dev, 
dma_addr
, 
skb
->
Àn
, 
DMA_TO_DEVICE
);

935 
îr_dr›
:

936 
dev
->
°©s
.
tx_dr›≥d
++;

938 
	`dev_k‰ì_skb
(
skb
);

939  
NETDEV_TX_OK
;

940 
	}
}

942 
	$ag71xx_do_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
i‰
, 
cmd
)

944 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

945 
ªt
;

947 
cmd
) {

948 
SIOCETHTOOL
:

949 i‡(
ag
->
phy_dev
 =
NULL
)

952 
	`•ö_lock_úq
(&
ag
->
lock
);

953 
ªt
 = 
	`phy_ëhtoﬁ_io˘l
(
ag
->
phy_dev
, (*Ë
i‰
->
i‰_d©a
);

954 
	`•ö_u∆ock_úq
(&
ag
->
lock
);

955  
ªt
;

957 
SIOCSIFHWADDR
:

958 i‡(
c›y_‰om_u£r


959 (
dev
->
dev_addr
, 
i‰
->
i‰_d©a
, (dev->dev_addr)))

960  -
EFAULT
;

963 
SIOCGIFHWADDR
:

964 i‡(
c›y_to_u£r


965 (
i‰
->
i‰_d©a
, 
dev
->
dev_addr
, (dev->dev_addr)))

966  -
EFAULT
;

969 
SIOCGMIIPHY
:

970 
SIOCGMIIREG
:

971 
SIOCSMIIREG
:

972 i‡(
ag
->
phy_dev
 =
NULL
)

975  
	`phy_mii_io˘l
(
ag
->
phy_dev
, 
i‰
, 
cmd
);

981  -
EOPNOTSUPP
;

982 
	}
}

984 
	$ag71xx_oom_timî_h™dÀr
(
d©a
)

986 
√t_devi˚
 *
dev
 = (√t_devi˚ *Ë
d©a
;

987 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

989 
	`«pi_scheduÀ
(&
ag
->
«pi
);

990 
	}
}

992 
	$ag71xx_tx_timeout
(
√t_devi˚
 *
dev
)

994 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

996 i‡(
	`√tif_msg_tx_îr
(
ag
))

997 
	`¥_öfo
("%s:ÅxÅimeout\n", 
ag
->
dev
->
«me
);

999 
	`scheduÀ_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
, 1);

1000 
	}
}

1002 
	$ag71xx_ª°¨t_w‹k_func
(
w‹k_°ru˘
 *
w‹k
)

1004 
ag71xx
 *
ag
 = 
	`c⁄èöî_of
(
w‹k
, ag71xx, 
ª°¨t_w‹k
.work);

1006 
	`π∆_lock
();

1007 
	`ag71xx_hw_dißbÀ
(
ag
);

1008 
	`ag71xx_hw_íabÀ
(
ag
);

1009 i‡(
ag
->
lök
)

1010 
	`__ag71xx_lök_adju°
(
ag
, 
Ál£
);

1011 
	`π∆_u∆ock
();

1012 
	}
}

1014 
boﬁ
 
	$ag71xx_check_dma_°uck
(
ag71xx
 *
ag
)

1016 
time°amp
;

1017 
u32
 
rx_sm
, 
tx_sm
, 
rx_fd
;

1019 
time°amp
 = 
	`√tdev_gë_tx_queue
(
ag
->
dev
, 0)->
å™s_°¨t
;

1020 i‡(
	`likñy
(
	`time_bef‹e
(
jiffõs
, 
time°amp
 + 
HZ
/10)))

1021  
Ál£
;

1023 i‡(!
	`√tif_ˇºõr_ok
(
ag
->
dev
))

1024  
Ál£
;

1026 
rx_sm
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_SM
);

1027 i‡((
rx_sm
 & 0x7) == 0x3 && ((rx_sm >> 4) & 0x7) == 0x6)

1028  
åue
;

1030 
tx_sm
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_SM
);

1031 
rx_fd
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_FIFO_DEPTH
);

1032 i‡(((
tx_sm
 >> 4Ë& 0x7Ë=0 && ((
rx_sm
 & 0x7) == 0) &&

1033 ((
rx_sm
 >> 4Ë& 0x7Ë=0 && 
rx_fd
 == 0)

1034  
åue
;

1036  
Ál£
;

1037 
	}
}

1039 
	$ag71xx_tx_∑ckës
(
ag71xx
 *
ag
, 
boﬁ
 
Êush
)

1041 
ag71xx_rög
 *
rög
 = &
ag
->
tx_rög
;

1042 
boﬁ
 
dma_°uck
 = 
Ál£
;

1043 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

1044 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

1045 
£¡
 = 0;

1046 
byãs_com∂
 = 0;

1047 
n
 = 0;

1049 
	`DBG
("%s:Öro˚ssög TXÑög\n", 
ag
->
dev
->
«me
);

1051 
rög
->
dúty
 + 
n
 !rög->
cuº
) {

1052 
i
 = (
rög
->
dúty
 + 
n
Ë& 
rög_mask
;

1053 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

1054 
sk_buff
 *
skb
 = 
rög
->
buf
[
i
].skb;

1056 i‡(!
Êush
 && !
	`ag71xx_desc_em±y
(
desc
)) {

1057 i‡(
ag
->
tx_h™g_w‹k¨ound
 &&

1058 
	`ag71xx_check_dma_°uck
(
ag
)) {

1059 
	`scheduÀ_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
, 
HZ
 / 2);

1060 
dma_°uck
 = 
åue
;

1065 i‡(
Êush
)

1066 
desc
->
˘æ
 |
DESC_EMPTY
;

1068 
n
++;

1069 i‡(!
skb
)

1072 
	`dev_k‰ì_skb_™y
(
skb
);

1073 
rög
->
buf
[
i
].
skb
 = 
NULL
;

1075 
byãs_com∂
 +
rög
->
buf
[
i
].
Àn
;

1077 
£¡
++;

1078 
rög
->
dúty
 +
n
;

1080 
n
 > 0) {

1081 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_PS
);

1082 
n
--;

1086 
	`DBG
("%s: %dÖackë†£¡ out\n", 
ag
->
dev
->
«me
, 
£¡
);

1088 i‡(!
£¡
)

1091 
ag
->
dev
->
°©s
.
tx_byãs
 +
byãs_com∂
;

1092 
ag
->
dev
->
°©s
.
tx_∑ckës
 +
£¡
;

1094 
	`√tdev_com∂ëed_queue
(
ag
->
dev
, 
£¡
, 
byãs_com∂
);

1095 i‡((
rög
->
cuº
 -Ñög->
dúty
Ë< (
rög_size
 * 3) / 4)

1096 
	`√tif_wake_queue
(
ag
->
dev
);

1098 i‡(!
dma_°uck
)

1099 
	`ˇn˚l_dñayed_w‹k
(&
ag
->
ª°¨t_w‹k
);

1101  
£¡
;

1102 
	}
}

1104 
	$ag71xx_rx_∑ckës
(
ag71xx
 *
ag
, 
limô
)

1106 
√t_devi˚
 *
dev
 = 
ag
->dev;

1107 
ag71xx_rög
 *
rög
 = &
ag
->
rx_rög
;

1108 
pkéí_mask
 = 
ag
->
desc_pkéí_mask
;

1109 
off£t
 = 
ag
->
rx_buf_off£t
;

1110 
rög_mask
 = 
	`BIT
(
rög
->
‹dî
) - 1;

1111 
rög_size
 = 
	`BIT
(
rög
->
‹dî
);

1112 
sk_buff_hód
 
queue
;

1113 
sk_buff
 *
skb
;

1114 
d⁄e
 = 0;

1116 
	`DBG
("%s:ÑxÖackets,Üimit=%d, curr=%u, dirty=%u\n",

1117 
dev
->
«me
, 
limô
, 
rög
->
cuº
,Ñög->
dúty
);

1119 
	`skb_queue_hód_öô
(&
queue
);

1121 
d⁄e
 < 
limô
) {

1122 
i
 = 
rög
->
cuº
 & 
rög_mask
;

1123 
ag71xx_desc
 *
desc
 = 
	`ag71xx_rög_desc
(
rög
, 
i
);

1124 
pkéí
;

1125 
îr
 = 0;

1127 i‡(
	`ag71xx_desc_em±y
(
desc
))

1130 i‡((
rög
->
dúty
 + 
rög_size
Ë=rög->
cuº
) {

1131 
	`ag71xx_as£π
(0);

1135 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_PR
);

1137 
pkéí
 = 
desc
->
˘æ
 & 
pkéí_mask
;

1138 
pkéí
 -
ETH_FCS_LEN
;

1140 
	`dma_unm≠_sögÀ
(&
dev
->dev, 
rög
->
buf
[
i
].
dma_addr
,

1141 
ag
->
rx_buf_size
, 
DMA_FROM_DEVICE
);

1143 
dev
->
°©s
.
rx_∑ckës
++;

1144 
dev
->
°©s
.
rx_byãs
 +
pkéí
;

1146 
skb
 = 
	`buûd_skb
(
rög
->
buf
[
i
].
rx_buf
, 
	`ag71xx_buf„r_size
(
ag
));

1147 i‡(!
skb
) {

1148 
	`skb_‰ì_‰ag
(
rög
->
buf
[
i
].
rx_buf
);

1149 
√xt
;

1152 
	`skb_ª£rve
(
skb
, 
off£t
);

1153 
	`skb_put
(
skb
, 
pkéí
);

1155 i‡(
îr
) {

1156 
dev
->
°©s
.
rx_dr›≥d
++;

1157 
	`k‰ì_skb
(
skb
);

1159 
skb
->
dev
 = dev;

1160 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

1161 
	`__skb_queue_èû
(&
queue
, 
skb
);

1164 
√xt
:

1165 
rög
->
buf
[
i
].
rx_buf
 = 
NULL
;

1166 
d⁄e
++;

1168 
rög
->
cuº
++;

1171 
	`ag71xx_rög_rx_ªfûl
(
ag
);

1173 (
skb
 = 
	`__skb_dequeue
(&
queue
)Ë!
NULL
) {

1174 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1175 
	`√tif_ª˚ive_skb
(
skb
);

1178 
	`DBG
("%s:Ñx finish, curr=%u, dirty=%u, done=%d\n",

1179 
dev
->
«me
, 
rög
->
cuº
,Ñög->
dúty
, 
d⁄e
);

1181  
d⁄e
;

1182 
	}
}

1184 
	$ag71xx_pﬁl
(
«pi_°ru˘
 *
«pi
, 
limô
)

1186 
ag71xx
 *
ag
 = 
	`c⁄èöî_of
(
«pi
, ag71xx,Çapi);

1187 
√t_devi˚
 *
dev
 = 
ag
->dev;

1188 
ag71xx_rög
 *
rx_rög
 = &
ag
->rx_ring;

1189 
rx_rög_size
 = 
	`BIT
(
rx_rög
->
‹dî
);

1190 
Êags
;

1191 
u32
 
°©us
;

1192 
tx_d⁄e
;

1193 
rx_d⁄e
;

1195 
tx_d⁄e
 = 
	`ag71xx_tx_∑ckës
(
ag
, 
Ál£
);

1197 
	`DBG
("%s:Öro˚ssög RXÑög\n", 
dev
->
«me
);

1198 
rx_d⁄e
 = 
	`ag71xx_rx_∑ckës
(
ag
, 
limô
);

1200 
	`ag71xx_debugfs_upd©e_«pi_°©s
(
ag
, 
rx_d⁄e
, 
tx_d⁄e
);

1202 i‡(
rx_rög
->
buf
[rx_rög->
dúty
 % 
rx_rög_size
].
rx_buf
 =
NULL
)

1203 
oom
;

1205 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_RX_STATUS
);

1206 i‡(
	`u∆ikñy
(
°©us
 & 
RX_STATUS_OF
)) {

1207 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_OF
);

1208 
dev
->
°©s
.
rx_fifo_îr‹s
++;

1211 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_CTRL
, 
RX_CTRL_RXE
);

1214 i‡(
rx_d⁄e
 < 
limô
) {

1215 i‡(
°©us
 & 
RX_STATUS_PR
)

1216 
m‹e
;

1218 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_TX_STATUS
);

1219 i‡(
°©us
 & 
TX_STATUS_PS
)

1220 
m‹e
;

1222 
	`DBG
("%s: disableÖolling mode,Ñx=%d,Åx=%d,limit=%d\n",

1223 
dev
->
«me
, 
rx_d⁄e
, 
tx_d⁄e
, 
limô
);

1225 
	`«pi_com∂ëe
(
«pi
);

1228 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

1229 
	`ag71xx_öt_íabÀ
(
ag
, 
AG71XX_INT_POLL
);

1230 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

1231  
rx_d⁄e
;

1234 
m‹e
:

1235 
	`DBG
("%s: stay inÖolling mode,Ñx=%d,Åx=%d,Üimit=%d\n",

1236 
dev
->
«me
, 
rx_d⁄e
, 
tx_d⁄e
, 
limô
);

1237  
limô
;

1239 
oom
:

1240 i‡(
	`√tif_msg_rx_îr
(
ag
))

1241 
	`¥_öfo
("%s: ouào‡mem‹y\n", 
dev
->
«me
);

1243 
	`mod_timî
(&
ag
->
oom_timî
, 
jiffõs
 + 
AG71XX_OOM_REFILL
);

1244 
	`«pi_com∂ëe
(
«pi
);

1246 
	}
}

1248 
úqªtu∫_t
 
	$ag71xx_öãºu±
(
úq
, *
dev_id
)

1250 
√t_devi˚
 *
dev
 = 
dev_id
;

1251 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

1252 
u32
 
°©us
;

1254 
°©us
 = 
	`ag71xx_º
(
ag
, 
AG71XX_REG_INT_STATUS
);

1255 
	`ag71xx_dump_öå
(
ag
, "øw", 
°©us
);

1257 i‡(
	`u∆ikñy
(!
°©us
))

1258  
IRQ_NONE
;

1260 i‡(
	`u∆ikñy
(
°©us
 & 
AG71XX_INT_ERR
)) {

1261 i‡(
°©us
 & 
AG71XX_INT_TX_BE
) {

1262 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_TX_STATUS
, 
TX_STATUS_BE
);

1263 
	`dev_îr
(&
dev
->dev, "TX BUSÉrror\n");

1265 i‡(
°©us
 & 
AG71XX_INT_RX_BE
) {

1266 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_RX_STATUS
, 
RX_STATUS_BE
);

1267 
	`dev_îr
(&
dev
->dev, "RX BUSÉrror\n");

1271 i‡(
	`likñy
(
°©us
 & 
AG71XX_INT_POLL
)) {

1272 
	`ag71xx_öt_dißbÀ
(
ag
, 
AG71XX_INT_POLL
);

1273 
	`DBG
("%s:É«bÀÖﬁlög mode\n", 
dev
->
«me
);

1274 
	`«pi_scheduÀ
(&
ag
->
«pi
);

1277 
	`ag71xx_debugfs_upd©e_öt_°©s
(
ag
, 
°©us
);

1279  
IRQ_HANDLED
;

1280 
	}
}

1282 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1288 
	$ag71xx_√çﬁl
(
√t_devi˚
 *
dev
)

1290 
	`dißbÀ_úq
(
dev
->
úq
);

1291 
	`ag71xx_öãºu±
(
dev
->
úq
, dev);

1292 
	`íabÀ_úq
(
dev
->
úq
);

1293 
	}
}

1296 
	$ag71xx_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

1298 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

1300 
dev
->
mtu
 = 
√w_mtu
;

1301 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_MFL
,

1302 
	`ag71xx_max_‰ame_Àn
(
dev
->
mtu
));

1305 
	}
}

1307 c⁄° 
√t_devi˚_›s
 
	gag71xx_√tdev_›s
 = {

1308 .
ndo_›í
 = 
ag71xx_›í
,

1309 .
	gndo_°›
 = 
ag71xx_°›
,

1310 .
	gndo_°¨t_xmô
 = 
ag71xx_h¨d_°¨t_xmô
,

1311 .
	gndo_do_io˘l
 = 
ag71xx_do_io˘l
,

1312 .
	gndo_tx_timeout
 = 
ag71xx_tx_timeout
,

1313 .
	gndo_ch™ge_mtu
 = 
ag71xx_ch™ge_mtu
,

1314 .
	gndo_£t_mac_addªss
 = 
ëh_mac_addr
,

1315 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1316 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1317 .
	gndo_pﬁl_c⁄åﬁÀr
 = 
ag71xx_√çﬁl
,

1321 c⁄° *
	$ag71xx_gë_phy_if_mode_«me
(
phy_öãrÁ˚_t
 
mode
)

1323 
mode
) {

1324 
PHY_INTERFACE_MODE_MII
:

1326 
PHY_INTERFACE_MODE_GMII
:

1328 
PHY_INTERFACE_MODE_RMII
:

1330 
PHY_INTERFACE_MODE_RGMII
:

1332 
PHY_INTERFACE_MODE_SGMII
:

1339 
	}
}

1341 
	$ag71xx_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1343 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

1344 
devi˚_node
 *
mdio_node
;

1345 
√t_devi˚
 *
dev
;

1346 
ªsour˚
 *
ªs
;

1347 
ag71xx
 *
ag
;

1348 c⁄° *
mac_addr
;

1349 
u32
 
max_‰ame_Àn
;

1350 
tx_size
, 
îr
;

1352 i‡(!
≈
)

1353  -
ENODEV
;

1355 
dev
 = 
	`Æloc_ëhîdev
((*
ag
));

1356 i‡(!
dev
)

1357  -
ENOMEM
;

1359 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1360 i‡(!
ªs
)

1361  -
EINVAL
;

1363 
îr
 = 
	`ag71xx_£tup_gmac
(
≈
);

1364 i‡(
îr
)

1365  
îr
;

1367 
	`SET_NETDEV_DEV
(
dev
, &
pdev
->dev);

1369 
ag
 = 
	`√tdev_¥iv
(
dev
);

1370 
ag
->
pdev
 =Ödev;

1371 
ag
->
dev
 = dev;

1372 
ag
->
msg_íabÀ
 = 
	`√tif_msg_öô
(
ag71xx_msg_Àvñ
,

1373 
AG71XX_DEFAULT_MSG_ENABLE
);

1374 
	`•ö_lock_öô
(&
ag
->
lock
);

1376 
ag
->
mac_ª£t
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
pdev
->
dev
, "mac");

1377 i‡(
	`IS_ERR
(
ag
->
mac_ª£t
)) {

1378 
	`dev_îr
(&
pdev
->
dev
, "missing macÑeset\n");

1379 
îr
 = 
	`PTR_ERR
(
ag
->
mac_ª£t
);

1380 
îr_‰ì
;

1383 i‡(
	`of_¥›îty_ªad_u32_¨øy
(
≈
, "fifo-d©a", 
ag
->
fifod©a
, 3)) {

1384 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9130-eth") ||

1385 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth")) {

1386 
ag
->
fifod©a
[0] = 0x0fff0000;

1387 
ag
->
fifod©a
[1] = 0x00001fff;

1389 
ag
->
fifod©a
[0] = 0x0010ffff;

1390 
ag
->
fifod©a
[1] = 0x015500aa;

1391 
ag
->
fifod©a
[2] = 0x01f00140;

1393 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9130-eth"))

1394 
ag
->
fifod©a
[2] = 0x00780fff;

1395 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth"))

1396 
ag
->
fifod©a
[2] = 0x008001ff;

1399 i‡(
	`of_¥›îty_ªad_u32_¨øy
(
≈
, "∂l-d©a", 
ag
->
∂ld©a
, 3))

1400 
	`dev_dbg
(&
pdev
->
dev
, "failedÅoÑeadÖll-dataÖroperty\n");

1402 i‡(
	`of_¥›îty_ªad_u32_¨øy
(
≈
, "∂l-ªg", 
ag
->
∂Ãeg
, 3))

1403 
	`dev_dbg
(&
pdev
->
dev
, "failedÅoÑeadÖll-regÖroperty\n");

1405 
ag
->
∂Ãegm≠
 = 
	`sysc⁄_ªgm≠_lookup_by_ph™dÀ
(
≈
, "pll-handle");

1406 i‡(
	`IS_ERR
(
ag
->
∂Ãegm≠
)) {

1407 
	`dev_dbg
(&
pdev
->
dev
, "failedÅoÑeadÖll-handleÖroperty\n");

1408 
ag
->
∂Ãegm≠
 = 
NULL
;

1411 
ag
->
mac_ba£
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
ªs
->
°¨t
,

1412 
ªs
->
íd
 -Ñes->
°¨t
 + 1);

1413 i‡(!
ag
->
mac_ba£
) {

1414 
îr
 = -
ENOMEM
;

1415 
îr_‰ì
;

1417 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

1418 i‡(
ªs
) {

1419 
ag
->
mii_ba£
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
ªs
->
°¨t
,

1420 
ªs
->
íd
 -Ñes->
°¨t
 + 1);

1421 i‡(!
ag
->
mii_ba£
) {

1422 
îr
 = -
ENOMEM
;

1423 
îr_‰ì
;

1427 
dev
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

1428 
îr
 = 
	`devm_ªque°_úq
(&
pdev
->
dev
, dev->
úq
, 
ag71xx_öãºu±
,

1429 0x0, 
	`dev_«me
(&
pdev
->
dev
), dev);

1430 i‡(
îr
) {

1431 
	`dev_îr
(&
pdev
->
dev
, "u«bÀÅÿªque° IRQ %d\n", dev->
úq
);

1432 
îr_‰ì
;

1435 
dev
->
√tdev_›s
 = &
ag71xx_√tdev_›s
;

1436 
dev
->
ëhtoﬁ_›s
 = &
ag71xx_ëhtoﬁ_›s
;

1438 
	`INIT_DELAYED_WORK
(&
ag
->
ª°¨t_w‹k
, 
ag71xx_ª°¨t_w‹k_func
);

1440 
	`öô_timî
(&
ag
->
oom_timî
);

1441 
ag
->
oom_timî
.
d©a
 = (Ë
dev
;

1442 
ag
->
oom_timî
.
fun˘i⁄
 = 
ag71xx_oom_timî_h™dÀr
;

1444 
tx_size
 = 
AG71XX_TX_RING_SIZE_DEFAULT
;

1445 
ag
->
rx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
AG71XX_RX_RING_SIZE_DEFAULT
);

1447 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9340-eth") ||

1448 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9530-eth") ||

1449 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9550-eth") ||

1450 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9560-eth"))

1451 
ag
->
desc_pkéí_mask
 = 
SZ_16K
 - 1;

1453 
ag
->
desc_pkéí_mask
 = 
SZ_4K
 - 1;

1455 i‡(
ag
->
desc_pkéí_mask
 =
SZ_16K
 - 1 &&

1456 !
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9550-eth") &&

1457 !
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,qca9560-eth"))

1458 
max_‰ame_Àn
 = 
ag
->
desc_pkéí_mask
;

1460 
max_‰ame_Àn
 = 1540;

1462 
dev
->
mö_mtu
 = 68;

1463 
dev
->
max_mtu
 = 
max_‰ame_Àn
 - 
	`ag71xx_max_‰ame_Àn
(0);

1465 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7240-eth"))

1466 
ag
->
tx_h™g_w‹k¨ound
 = 1;

1468 
ag
->
rx_buf_off£t
 = 
NET_SKB_PAD
;

1469 i‡(!
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth") &&

1470 !
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9130-eth"))

1471 
ag
->
rx_buf_off£t
 +
NET_IP_ALIGN
;

1473 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7100-eth")) {

1474 
ag
->
tx_rög
.
desc_•lô
 = 
AG71XX_TX_RING_SPLIT
;

1475 
tx_size
 *
AG71XX_TX_RING_DS_PER_PKT
;

1477 
ag
->
tx_rög
.
‹dî
 = 
	`ag71xx_rög_size_‹dî
(
tx_size
);

1479 
ag
->
°›_desc
 = 
	`dmam_Æloc_cohîít
(&
pdev
->
dev
,

1480 (
ag71xx_desc
),

1481 &
ag
->
°›_desc_dma
, 
GFP_KERNEL
);

1482 i‡(!
ag
->
°›_desc
)

1483 
îr_‰ì
;

1485 
ag
->
°›_desc
->
d©a
 = 0;

1486 
ag
->
°›_desc
->
˘æ
 = 0;

1487 
ag
->
°›_desc
->
√xt
 = (
u32
Ëag->
°›_desc_dma
;

1489 
mac_addr
 = 
	`of_gë_mac_addªss
(
≈
);

1490 i‡(
mac_addr
)

1491 
	`mem˝y
(
dev
->
dev_addr
, 
mac_addr
, 
ETH_ALEN
);

1492 i‡(!
mac_addr
 || !
	`is_vÆid_ëhî_addr
(
dev
->
dev_addr
)) {

1493 
	`dev_îr
(&
pdev
->
dev
, "invalid MACáddress, usingÑandomáddress\n");

1494 
	`ëh_øndom_addr
(
dev
->
dev_addr
);

1497 
ag
->
phy_if_mode
 = 
	`of_gë_phy_mode
(
≈
);

1498 i‡(
ag
->
phy_if_mode
 < 0) {

1499 
	`dev_îr
(&
pdev
->
dev
, "missingÖhy-modeÖroperty in DT\n");

1500 
îr
 = 
ag
->
phy_if_mode
;

1501 
îr_‰ì
;

1504 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "qˇ,mac-idx", &
ag
->
mac_idx
))

1505 
ag
->
mac_idx
 = -1;

1506 i‡(
ag
->
mii_ba£
)

1507 
ag
->
mac_idx
) {

1509 
	`©h79_mii0_˘æ_£t_if
(
ag
);

1512 
	`©h79_mii1_˘æ_£t_if
(
ag
);

1518 
	`√tif_«pi_add
(
dev
, &
ag
->
«pi
, 
ag71xx_pﬁl
, 
AG71XX_NAPI_WEIGHT
);

1520 
	`ag71xx_dump_ªgs
(
ag
);

1522 
	`ag71xx_wr
(
ag
, 
AG71XX_REG_MAC_CFG1
, 0);

1524 
	`ag71xx_hw_öô
(
ag
);

1526 
	`ag71xx_dump_ªgs
(
ag
);

1528 i‡(!
	`of_devi˚_is_com∑tibÀ
(
≈
, "simple-mfd")) {

1529 
mdio_node
 = 
	`of_gë_chûd_by_«me
(
≈
, "mdio-bus");

1530 i‡(!
	`IS_ERR
(
mdio_node
))

1531 
	`of_∂©f‹m_devi˚_¸óã
(
mdio_node
, 
NULL
, NULL);

1534 
îr
 = 
	`ag71xx_phy_c⁄√˘
(
ag
);

1535 i‡(
îr
)

1536 
îr_‰ì
;

1538 
îr
 = 
	`ag71xx_debugfs_öô
(
ag
);

1539 i‡(
îr
)

1540 
îr_phy_disc⁄√˘
;

1542 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

1544 
îr
 = 
	`ªgi°î_√tdev
(
dev
);

1545 i‡(
îr
) {

1546 
	`dev_îr
(&
pdev
->
dev
, "unableÅoÑegisterÇet device\n");

1547 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1548 
	`ag71xx_debugfs_exô
(
ag
);

1549 
îr_phy_disc⁄√˘
;

1552 
	`¥_öfo
("%s: Atheros AG71xxát 0x%08lx, irq %d, mode:%s\n",

1553 
dev
->
«me
, (Ë
ag
->
mac_ba£
, dev->
úq
,

1554 
	`ag71xx_gë_phy_if_mode_«me
(
ag
->
phy_if_mode
));

1558 
îr_phy_disc⁄√˘
:

1559 
	`ag71xx_phy_disc⁄√˘
(
ag
);

1560 
îr_‰ì
:

1561 
	`‰ì_√tdev
(
dev
);

1562  
îr
;

1563 
	}
}

1565 
	$ag71xx_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1567 
√t_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1568 
ag71xx
 *
ag
;

1570 i‡(!
dev
)

1573 
ag
 = 
	`√tdev_¥iv
(
dev
);

1574 
	`ag71xx_debugfs_exô
(
ag
);

1575 
	`ag71xx_phy_disc⁄√˘
(
ag
);

1576 
	`uƒegi°î_√tdev
(
dev
);

1577 
	`‰ì_úq
(
dev
->
úq
, dev);

1578 
	`iounm≠
(
ag
->
mac_ba£
);

1579 
	`k‰ì
(
dev
);

1580 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1583 
	}
}

1585 c⁄° 
of_devi˚_id
 
	gag71xx_m©ch
[] = {

1586 { .
com∑tibÀ
 = "qca,ar7100-eth" },

1587 { .
	gcom∑tibÀ
 = "qca,ar7240-eth" },

1588 { .
	gcom∑tibÀ
 = "qca,ar7241-eth" },

1589 { .
	gcom∑tibÀ
 = "qca,ar7242-eth" },

1590 { .
	gcom∑tibÀ
 = "qca,ar9130-eth" },

1591 { .
	gcom∑tibÀ
 = "qca,ar9330-eth" },

1592 { .
	gcom∑tibÀ
 = "qca,ar9340-eth" },

1593 { .
	gcom∑tibÀ
 = "qca,qca9530-eth" },

1594 { .
	gcom∑tibÀ
 = "qca,qca9550-eth" },

1595 { .
	gcom∑tibÀ
 = "qca,qca9560-eth" },

1599 
∂©f‹m_drivî
 
	gag71xx_drivî
 = {

1600 .
¥obe
 = 
ag71xx_¥obe
,

1601 .
	gªmove
 = 
ag71xx_ªmove
,

1602 .
	gdrivî
 = {

1603 .
«me
 = 
AG71XX_DRV_NAME
,

1604 .
	gof_m©ch_èbÀ
 = 
ag71xx_m©ch
,

1608 
__öô
 
	$ag71xx_moduÀ_öô
()

1610 
ªt
;

1612 
ªt
 = 
	`ag71xx_debugfs_roŸ_öô
();

1613 i‡(
ªt
)

1614 
îr_out
;

1616 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
ag71xx_drivî
);

1617 i‡(
ªt
)

1618 
îr_debugfs_exô
;

1622 
îr_debugfs_exô
:

1623 
	`ag71xx_debugfs_roŸ_exô
();

1624 
îr_out
:

1625  
ªt
;

1626 
	}
}

1628 
__exô
 
	$ag71xx_moduÀ_exô
()

1630 
	`∂©f‹m_drivî_uƒegi°î
(&
ag71xx_drivî
);

1631 
	`ag71xx_debugfs_roŸ_exô
();

1632 
	}
}

1634 
moduÀ_öô
(
ag71xx_moduÀ_öô
);

1635 
moduÀ_exô
(
ag71xx_moduÀ_exô
);

1637 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1638 
MODULE_AUTHOR
("Imre Kaloz <kaloz@openwrt.org>");

1639 
MODULE_AUTHOR
("Felix Fietkau <nbd@nbd.name>");

1640 
MODULE_LICENSE
("GPL v2");

1641 
MODULE_ALIAS
("∂©f‹m:" 
AG71XX_DRV_NAME
);

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c

14 
	~<löux/˛k.h
>

15 
	~<löux/of_mdio.h
>

16 
	~"ag71xx.h
"

18 
	#AG71XX_MDIO_RETRY
 1000

	)

19 
	#AG71XX_MDIO_DELAY
 5

	)

21 
	gbus_cou¡
;

23 
	$ag71xx_mdio_waô_busy
(
ag71xx_mdio
 *
am
)

25 
i
;

27 
i
 = 0; i < 
AG71XX_MDIO_RETRY
; i++) {

28 
u32
 
busy
;

30 
	`udñay
(
AG71XX_MDIO_DELAY
);

32 
	`ªgm≠_ªad
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_IND
, &
busy
);

33 i‡(!
busy
)

36 
	`udñay
(
AG71XX_MDIO_DELAY
);

39 
	`¥_îr
("%s: MDIO o≥øti⁄Åimed out\n", 
am
->
mii_bus
->
«me
);

41  -
ETIMEDOUT
;

42 
	}
}

44 
	$ag71xx_mdio_mii_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

46 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

47 
îr
;

48 
ªt
;

50 
îr
 = 
	`ag71xx_mdio_waô_busy
(
am
);

51 i‡(
îr
)

54 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_WRITE
);

55 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_ADDR
,

56 ((
addr
 & 0xffË<< 
MII_ADDR_SHIFT
Ë| (
ªg
 & 0xff));

57 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_READ
);

59 
îr
 = 
	`ag71xx_mdio_waô_busy
(
am
);

60 i‡(
îr
)

63 
	`ªgm≠_ªad
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_STATUS
, &
ªt
);

64 
ªt
 &= 0xffff;

65 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CMD
, 
MII_CMD_WRITE
);

67 
	`DBG
("mii_ªad:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
addr
, 
ªg
, 
ªt
);

69  
ªt
;

70 
	}
}

72 
	$ag71xx_mdio_mii_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

74 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

76 
	`DBG
("mii_wrôe:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
addr
, 
ªg
, 
vÆ
);

78 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_ADDR
,

79 ((
addr
 & 0xffË<< 
MII_ADDR_SHIFT
Ë| (
ªg
 & 0xff));

80 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CTRL
, 
vÆ
);

82 
	`ag71xx_mdio_waô_busy
(
am
);

85 
	}
}

87 c⁄° 
u32
 
	g¨71xx_mdio_div_èbÀ
[] = {

91 c⁄° 
u32
 
	g¨7240_mdio_div_èbÀ
[] = {

95 c⁄° 
u32
 
	g¨933x_mdio_div_èbÀ
[] = {

99 
	$ag71xx_mdio_gë_dividî
(
devi˚_node
 *
≈
, 
u32
 *
div
)

101 
˛k
 *
ªf_˛k
 = 
	`of_˛k_gë
(
≈
, 0);

102 
ªf_˛ock
;

103 
u32
 
mdio_˛ock
;

104 c⁄° 
u32
 *
èbÀ
;

105 
ndivs
, 
i
;

107 i‡(
	`IS_ERR
(
ªf_˛k
))

108  -
EINVAL
;

110 
ªf_˛ock
 = 
	`˛k_gë_øã
(
ªf_˛k
);

111 
	`˛k_put
(
ªf_˛k
);

113 if(
	`of_¥›îty_ªad_u32
(
≈
, "qˇ,mdio-max-‰equícy", &
mdio_˛ock
)) {

114 i‡(
	`of_¥›îty_ªad_boﬁ
(
≈
, "builtin-switch"))

115 
mdio_˛ock
 = 5000000;

117 
mdio_˛ock
 = 2000000;

120 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9330-mdio") ||

121 
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9340-mdio")) {

122 
èbÀ
 = 
¨933x_mdio_div_èbÀ
;

123 
ndivs
 = 
	`ARRAY_SIZE
(
¨933x_mdio_div_èbÀ
);

124 } i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar7240-mdio")) {

125 
èbÀ
 = 
¨7240_mdio_div_èbÀ
;

126 
ndivs
 = 
	`ARRAY_SIZE
(
¨7240_mdio_div_èbÀ
);

128 
èbÀ
 = 
¨71xx_mdio_div_èbÀ
;

129 
ndivs
 = 
	`ARRAY_SIZE
(
¨71xx_mdio_div_èbÀ
);

132 
i
 = 0; i < 
ndivs
; i++) {

133 
t
;

135 
t
 = 
ªf_˛ock
 / 
èbÀ
[
i
];

136 i‡(
t
 <
mdio_˛ock
) {

137 *
div
 = 
i
;

142  -
ENOENT
;

143 
	}
}

145 
	$ag71xx_mdio_ª£t
(
mii_bus
 *
bus
)

147 
devi˚_node
 *
≈
 = 
bus
->
dev
.
of_node
;

148 
ag71xx_mdio
 *
am
 = 
bus
->
¥iv
;

149 
boﬁ
 
buûtö_swôch
;

150 
u32
 
t
;

152 
buûtö_swôch
 = 
	`of_¥›îty_ªad_boﬁ
(
≈
, "builtin-switch");

154 i‡(
	`ag71xx_mdio_gë_dividî
(
≈
, &
t
)) {

155 i‡(
	`of_devi˚_is_com∑tibÀ
(
≈
, "qca,ar9340-mdio"))

156 
t
 = 
MII_CFG_CLK_DIV_58
;

157 i‡(
buûtö_swôch
)

158 
t
 = 
MII_CFG_CLK_DIV_10
;

160 
t
 = 
MII_CFG_CLK_DIV_28
;

163 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CFG
, 
t
 | 
MII_CFG_RESET
);

164 
	`udñay
(100);

166 
	`ªgm≠_wrôe
(
am
->
mii_ªgm≠
, 
AG71XX_REG_MII_CFG
, 
t
);

167 
	`udñay
(100);

170 
	}
}

172 
	$ag71xx_mdio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

174 
devi˚
 *
amdev
 = &
pdev
->
dev
;

175 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

176 
ag71xx_mdio
 *
am
;

177 
mii_bus
 *mii_bus;

178 
boﬁ
 
buûtö_swôch
;

179 
i
, 
îr
;

181 
am
 = 
	`devm_kzÆloc
(
amdev
, (*am), 
GFP_KERNEL
);

182 i‡(!
am
)

183  -
ENOMEM
;

185 
am
->
mii_ªgm≠
 = 
	`sysc⁄_ªgm≠_lookup_by_ph™dÀ
(
≈
, "regmap");

186 i‡(
	`IS_ERR
(
am
->
mii_ªgm≠
))

187  
	`PTR_ERR
(
am
->
mii_ªgm≠
);

189 
mii_bus
 = 
	`devm_mdiobus_Æloc
(
amdev
);

190 i‡(!
mii_bus
)

191  -
ENOMEM
;

193 
am
->
mdio_ª£t
 = 
	`of_ª£t_c⁄åﬁ_gë_ex˛usive
(
≈
, "mdio");

194 
buûtö_swôch
 = 
	`of_¥›îty_ªad_boﬁ
(
≈
, "builtin-switch");

196 
mii_bus
->
«me
 = "ag71xx_mdio";

197 
mii_bus
->
ªad
 = 
ag71xx_mdio_mii_ªad
;

198 
mii_bus
->
wrôe
 = 
ag71xx_mdio_mii_wrôe
;

199 
mii_bus
->
ª£t
 = 
ag71xx_mdio_ª£t
;

200 
mii_bus
->
¥iv
 = 
am
;

201 
mii_bus
->
∑ª¡
 = 
amdev
;

202 
	`¢¥ötf
(
mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s.%d", 
≈
->
«me
, 
bus_cou¡
++);

204 i‡(!
buûtö_swôch
 &&

205 
	`of_¥›îty_ªad_u32
(
≈
, "phy-mask", &
mii_bus
->
phy_mask
))

206 
mii_bus
->
phy_mask
 = 0;

208 
i
 = 0; i < 
PHY_MAX_ADDR
; i++)

209 
mii_bus
->
úq
[
i
] = 
PHY_POLL
;

211 i‡(!
	`IS_ERR
(
am
->
mdio_ª£t
)) {

212 
	`ª£t_c⁄åﬁ_as£π
(
am
->
mdio_ª£t
);

213 
	`m¶ìp
(100);

214 
	`ª£t_c⁄åﬁ_dós£π
(
am
->
mdio_ª£t
);

215 
	`m¶ìp
(200);

218 
îr
 = 
	`of_mdiobus_ªgi°î
(
mii_bus
, 
≈
);

219 i‡(
îr
)

220  
îr
;

222 
am
->
mii_bus
 = mii_bus;

223 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
am
);

226 
	}
}

228 
	$ag71xx_mdio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

230 
ag71xx_mdio
 *
am
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

232 
	`mdiobus_uƒegi°î
(
am
->
mii_bus
);

234 
	}
}

236 c⁄° 
of_devi˚_id
 
	gag71xx_mdio_m©ch
[] = {

237 { .
com∑tibÀ
 = "qca,ar7240-mdio" },

238 { .
	gcom∑tibÀ
 = "qca,ar9330-mdio" },

239 { .
	gcom∑tibÀ
 = "qca,ar9340-mdio" },

240 { .
	gcom∑tibÀ
 = "qca,ath79-mdio" },

244 
∂©f‹m_drivî
 
	gag71xx_mdio_drivî
 = {

245 .
¥obe
 = 
ag71xx_mdio_¥obe
,

246 .
	gªmove
 = 
ag71xx_mdio_ªmove
,

247 .
	gdrivî
 = {

248 .
«me
 = "ag71xx-mdio",

249 .
	gof_m©ch_èbÀ
 = 
ag71xx_mdio_m©ch
,

253 
moduÀ_∂©f‹m_drivî
(
ag71xx_mdio_drivî
);

254 
MODULE_LICENSE
("GPL");

	@linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c

14 
	~<löux/of_mdio.h
>

15 
	~"ag71xx.h
"

17 
	$ag71xx_phy_lök_adju°
(
√t_devi˚
 *
dev
)

19 
ag71xx
 *
ag
 = 
	`√tdev_¥iv
(
dev
);

20 
phy_devi˚
 *
phydev
 = 
ag
->
phy_dev
;

21 
Êags
;

22 
°©us_ch™ge
 = 0;

24 
	`•ö_lock_úqßve
(&
ag
->
lock
, 
Êags
);

26 i‡(
phydev
->
lök
) {

27 i‡(
ag
->
du∂ex
 !
phydev
->duplex

28 || 
ag
->
•ìd
 !
phydev
->speed) {

29 
°©us_ch™ge
 = 1;

33 i‡(
phydev
->
lök
 !
ag
->link)

34 
°©us_ch™ge
 = 1;

36 
ag
->
lök
 = 
phydev
->link;

37 
ag
->
du∂ex
 = 
phydev
->duplex;

38 
ag
->
•ìd
 = 
phydev
->speed;

40 i‡(
°©us_ch™ge
)

41 
	`ag71xx_lök_adju°
(
ag
);

43 
	`•ö_u∆ock_úqª°‹e
(&
ag
->
lock
, 
Êags
);

44 
	}
}

46 
	$ag71xx_phy_c⁄√˘
(
ag71xx
 *
ag
)

48 
devi˚_node
 *
≈
 = 
ag
->
pdev
->
dev
.
of_node
;

49 
devi˚_node
 *
phy_node
;

50 
ªt
;

52 i‡(
	`of_phy_is_fixed_lök
(
≈
)) {

53 
ªt
 = 
	`of_phy_ªgi°î_fixed_lök
(
≈
);

54 i‡(
ªt
 < 0) {

55 
	`dev_îr
(&
ag
->
pdev
->
dev
,

56 "FaûedÅÿªgi°î fixed PHYÜök: %d\n", 
ªt
);

57  
ªt
;

60 
phy_node
 = 
	`of_node_gë
(
≈
);

62 
phy_node
 = 
	`of_∑r£_ph™dÀ
(
≈
, "phy-handle", 0);

65 i‡(!
phy_node
) {

66 
	`dev_îr
(&
ag
->
pdev
->
dev
,

68  -
ENODEV
;

71 
ag
->
phy_dev
 = 
	`of_phy_c⁄√˘
◊g->
dev
, 
phy_node
, 
ag71xx_phy_lök_adju°
,

72 0, 
ag
->
phy_if_mode
);

74 
	`of_node_put
(
phy_node
);

76 i‡(!
ag
->
phy_dev
) {

77 
	`dev_îr
(&
ag
->
pdev
->
dev
,

79  -
ENODEV
;

82 
	`dev_öfo
(&
ag
->
pdev
->
dev
, "connectedÅo PHYát %s [uid=%08x, driver=%s]\n",

83 
	`phydev_«me
(
ag
->
phy_dev
),

84 
ag
->
phy_dev
->
phy_id
,ág->phy_dev->
drv
->
«me
);

87 
	}
}

89 
	$ag71xx_phy_disc⁄√˘
(
ag71xx
 *
ag
)

91 
	`phy_disc⁄√˘
(
ag
->
phy_dev
);

92 
	}
}

	@linux/ath79/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 
	#kNumT›Bôs
 24

	)

25 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

27 
	#kNumBôModñTŸÆBôs
 11

	)

28 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

29 
	#kNumMoveBôs
 5

	)

31 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

33 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

34 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

36 #ifde‡
_LZMA_IN_CB


38 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

39 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

40 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

42 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

46 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

48 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

52 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

54 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

55 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

56 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

58 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

59 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

60 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

62 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

64 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

65 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

66 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

67 
ªs
 -(1 << 
numLevñs
); }

	)

70 
	#kNumPosBôsMax
 4

	)

71 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

73 
	#kLíNumLowBôs
 3

	)

74 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

75 
	#kLíNumMidBôs
 3

	)

76 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

77 
	#kLíNumHighBôs
 8

	)

78 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

80 
	#LíChoi˚
 0

	)

81 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

82 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

83 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

84 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

85 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

88 
	#kNumSèãs
 12

	)

89 
	#kNumLôSèãs
 7

	)

91 
	#kSèπPosModñIndex
 4

	)

92 
	#kEndPosModñIndex
 14

	)

93 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

95 
	#kNumPosSlŸBôs
 6

	)

96 
	#kNumLíToPosSèãs
 4

	)

98 
	#kNumAlignBôs
 4

	)

99 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

101 
	#kM©chMöLí
 2

	)

103 
	#IsM©ch
 0

	)

104 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

105 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

106 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

107 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

108 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

109 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

110 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

111 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

112 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

113 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

114 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

116 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


117 
	gSt›CompûögDueBUG


120 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

122 
¥›0
;

123 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

124  
LZMA_RESULT_DATA_ERROR
;

125 
¥›0
 = 
¥›sD©a
[0];

126 i‡(
¥›0
 >= (9 * 5 * 5))

127  
LZMA_RESULT_DATA_ERROR
;

129 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

130 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

131 
¥›sRes
->
lc
 = 
¥›0
;

140 #ifde‡
_LZMA_OUT_READ


142 
i
;

143 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

144 
i
 = 0; i < 4; i++)

145 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

146 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

147 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

150  
LZMA_RESULT_OK
;

151 
	}
}

153 
	#kLzmaSåómWasFöishedId
 (-1)

	)

155 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

156 #ifde‡
_LZMA_IN_CB


157 
ILzmaInCÆlback
 *
InCÆlback
,

159 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

161 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

163 
CProb
 *
	gp
 = 
vs
->
Probs
;

164 
SizeT
 
	gnowPos
 = 0;

165 
Byã
 
	g¥eviousByã
 = 0;

166 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

167 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

168 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

170 #ifde‡
_LZMA_OUT_READ


172 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

173 
UI¡32
 
	gCode
 = 
vs
->
Code
;

174 #ifde‡
_LZMA_IN_CB


175 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

176 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

178 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

179 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

181 
	g°©e
 = 
vs
->
Sèã
;

182 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

183 
	gÀn
 = 
vs
->
RemaöLí
;

184 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

185 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

187 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

188 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

189 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

191 
Byã
 
	gãmpDi˘i⁄¨y
[4];

193 #i‚de‡
_LZMA_IN_CB


194 *
	göSizePro˚s£d
 = 0;

196 *
	goutSizePro˚s£d
 = 0;

197 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

198  
LZMA_RESULT_OK
;

200 i‡(
	gdi˘i⁄¨ySize
 == 0)

202 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

203 
	gdi˘i⁄¨ySize
 = 1;

204 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

207 i‡(
	gÀn
 =
kLzmaNìdInôId
)

210 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

211 
UI¡32
 
	gi
;

212 
	gi
 = 0; i < 
	gnumProbs
; i++)

213 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

214 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

215 
	g°©e
 = 0;

216 
	gglobÆPos
 = 0;

217 
	gdi°™˚Limô
 = 0;

218 
	gdi˘i⁄¨yPos
 = 0;

219 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

220 #ifde‡
_LZMA_IN_CB


221 
	gRC_INIT
;

223 
RC_INIT
(
öSåóm
, 
öSize
);

226 
	gÀn
 = 0;

228 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

230 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

231 i‡(
	gpos
 >
di˘i⁄¨ySize
)

232 
pos
 +
di˘i⁄¨ySize
;

233 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

234 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

235 
di˘i⁄¨yPos
 = 0;

236 
	gÀn
--;

238 i‡(
	gdi˘i⁄¨yPos
 == 0)

239 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

241 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

245 
	g°©e
 = 0;

246 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

247 
	gÀn
 = 0;

248 c⁄° 
Byã
 *
	gBuf„r
;

249 c⁄° 
Byã
 *
	gBuf„rLim
;

250 
UI¡32
 
	gR™ge
;

251 
UI¡32
 
	gCode
;

253 #i‚de‡
_LZMA_IN_CB


254 *
	göSizePro˚s£d
 = 0;

256 *
	goutSizePro˚s£d
 = 0;

259 
UI¡32
 
	gi
;

260 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

261 
	gi
 = 0; i < 
	gnumProbs
; i++)

262 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

265 #ifde‡
_LZMA_IN_CB


266 
	gRC_INIT
;

268 
RC_INIT
(
öSåóm
, 
öSize
);

273 
	gnowPos
 < 
	goutSize
)

275 
CProb
 *
	g¥ob
;

276 
UI¡32
 
	gbound
;

277 
	gposSèã
 = ()(

278 (
nowPos


279 #ifde‡
_LZMA_OUT_READ


280 + 
globÆPos


283 & 
posSèãMask
);

285 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

286 
IfBô0
(
¥ob
)

288 
	gsymbﬁ
 = 1;

289 
Upd©eBô0
(
¥ob
)

290 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

292 (
nowPos


293 #ifde‡
_LZMA_OUT_READ


294 + 
globÆPos


297 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

299 i‡(
	g°©e
 >
kNumLôSèãs
)

301 
m©chByã
;

302 #ifde‡
_LZMA_OUT_READ


303 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

304 i‡(
	gpos
 >
di˘i⁄¨ySize
)

305 
pos
 +
di˘i⁄¨ySize
;

306 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

308 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

312 
	gbô
;

313 
CProb
 *
	g¥obLô
;

314 
	gm©chByã
 <<= 1;

315 
	gbô
 = (
m©chByã
 & 0x100);

316 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

317 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

319 
	gsymbﬁ
 < 0x100);

321 
	gsymbﬁ
 < 0x100)

323 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

324 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

326 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

328 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

329 #ifde‡
_LZMA_OUT_READ


330 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

331 
	gdi°™˚Limô
++;

333 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

334 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

335 
di˘i⁄¨yPos
 = 0;

337 i‡(
	g°©e
 < 4) state = 0;

338 i‡(
	g°©e
 < 10) state -= 3;

339 
	g°©e
 -= 6;

343 
Upd©eBô1
(
¥ob
);

344 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

345 
IfBô0
(
¥ob
)

347 
Upd©eBô0
(
¥ob
);

348 
	gªp3
 = 
ªp2
;

349 
	gªp2
 = 
ªp1
;

350 
	gªp1
 = 
ªp0
;

351 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

352 
	g¥ob
 = 
p
 + 
LíCodî
;

356 
Upd©eBô1
(
¥ob
);

357 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

358 
IfBô0
(
¥ob
)

360 
Upd©eBô0
(
¥ob
);

361 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

362 
IfBô0
(
¥ob
)

364 #ifde‡
_LZMA_OUT_READ


365 
UI¡32
 
	gpos
;

367 
Upd©eBô0
(
¥ob
);

369 #ifde‡
_LZMA_OUT_READ


370 i‡(
	gdi°™˚Limô
 == 0)

372 i‡(
nowPos
 == 0)

374  
LZMA_RESULT_DATA_ERROR
;

376 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

377 #ifde‡
_LZMA_OUT_READ


378 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

379 i‡(
	gpos
 >
di˘i⁄¨ySize
)

380 
pos
 +
di˘i⁄¨ySize
;

381 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

382 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

383 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

384 
di˘i⁄¨yPos
 = 0;

386 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

388 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

389 #ifde‡
_LZMA_OUT_READ


390 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

391 
	gdi°™˚Limô
++;

398 
Upd©eBô1
(
¥ob
);

403 
UI¡32
 
	gdi°™˚
;

404 
Upd©eBô1
(
¥ob
);

405 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

406 
IfBô0
(
¥ob
)

408 
Upd©eBô0
(
¥ob
);

409 
	gdi°™˚
 = 
ªp1
;

413 
Upd©eBô1
(
¥ob
);

414 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

415 
IfBô0
(
¥ob
)

417 
Upd©eBô0
(
¥ob
);

418 
	gdi°™˚
 = 
ªp2
;

422 
Upd©eBô1
(
¥ob
);

423 
	gdi°™˚
 = 
ªp3
;

424 
	gªp3
 = 
ªp2
;

426 
	gªp2
 = 
ªp1
;

428 
	gªp1
 = 
ªp0
;

429 
	gªp0
 = 
di°™˚
;

431 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

432 
	g¥ob
 = 
p
 + 
RïLíCodî
;

435 
	gnumBôs
, 
	goff£t
;

436 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

437 
IfBô0
(
¥obLí
)

439 
Upd©eBô0
(
¥obLí
);

440 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

441 
	goff£t
 = 0;

442 
	gnumBôs
 = 
kLíNumLowBôs
;

446 
Upd©eBô1
(
¥obLí
);

447 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

448 
IfBô0
(
¥obLí
)

450 
Upd©eBô0
(
¥obLí
);

451 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

452 
	goff£t
 = 
kLíNumLowSymbﬁs
;

453 
	gnumBôs
 = 
kLíNumMidBôs
;

457 
Upd©eBô1
(
¥obLí
);

458 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

459 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

460 
	gnumBôs
 = 
kLíNumHighBôs
;

463 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

464 
	gÀn
 +
off£t
;

467 i‡(
	g°©e
 < 4)

469 
	gposSlŸ
;

470 
	g°©e
 +
kNumLôSèãs
;

471 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

472 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

473 
kNumPosSlŸBôs
);

474 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

475 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

477 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

478 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

479 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

481 
	gªp0
 <<
numDúe˘Bôs
;

482 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

486 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

489 
RC_NORMALIZE


490 
	gR™ge
 >>= 1;

491 
	gªp0
 <<= 1;

492 i‡(
	gCode
 >
R™ge
)

494 
Code
 -
R™ge
;

495 
	gªp0
 |= 1;

498 --
	gnumDúe˘Bôs
 != 0);

499 
	g¥ob
 = 
p
 + 
Align
;

500 
	gªp0
 <<
kNumAlignBôs
;

501 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

504 
	gi
 = 1;

505 
	gmi
 = 1;

508 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

509 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

510 
	gi
 <<= 1;

512 --
	gnumDúe˘Bôs
 != 0);

516 
	gªp0
 = 
posSlŸ
;

517 i‡(++
	gªp0
 =(
UI¡32
)(0))

520 
Àn
 = 
kLzmaSåómWasFöishedId
;

525 
	gÀn
 +
kM©chMöLí
;

526 #ifde‡
_LZMA_OUT_READ


527 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

529 i‡(
	gªp0
 > 
	gnowPos
)

531  
	gLZMA_RESULT_DATA_ERROR
;

533 #ifde‡
_LZMA_OUT_READ


534 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

535 
	gdi°™˚Limô
 +
Àn
;

537 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

542 #ifde‡
_LZMA_OUT_READ


543 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

544 i‡(
	gpos
 >
di˘i⁄¨ySize
)

545 
pos
 +
di˘i⁄¨ySize
;

546 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

547 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

548 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

549 
di˘i⁄¨yPos
 = 0;

551 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

553 
	gÀn
--;

554 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

556 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

559 
	gRC_NORMALIZE
;

561 #ifde‡
_LZMA_OUT_READ


562 
	gvs
->
	gR™ge
 = 
R™ge
;

563 
	gvs
->
	gCode
 = 
Code
;

564 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

565 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

566 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

567 
	gvs
->
	gRïs
[0] = 
ªp0
;

568 
	gvs
->
	gRïs
[1] = 
ªp1
;

569 
	gvs
->
	gRïs
[2] = 
ªp2
;

570 
	gvs
->
	gRïs
[3] = 
ªp3
;

571 
	gvs
->
	gSèã
 = 
°©e
;

572 
	gvs
->
	gRemaöLí
 = 
Àn
;

573 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

576 #ifde‡
_LZMA_IN_CB


577 
	gvs
->
	gBuf„r
 = 
Buf„r
;

578 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

580 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

582 *
	goutSizePro˚s£d
 = 
nowPos
;

583  
	gLZMA_RESULT_OK
;

	@linux/ath79/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

25 
	~"LzmaTy≥s.h
"

40 #ifde‡
_LZMA_PROB32


41 
	#CProb
 
UI¡32


	)

43 
	#CProb
 
UI¡16


	)

46 
	#LZMA_RESULT_OK
 0

	)

47 
	#LZMA_RESULT_DATA_ERROR
 1

	)

49 #ifde‡
_LZMA_IN_CB


50 
	s_ILzmaInCÆlback


52 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

53 } 
	tILzmaInCÆlback
;

56 
	#LZMA_BASE_SIZE
 1846

	)

57 
	#LZMA_LIT_SIZE
 768

	)

59 
	#LZMA_PROPERTIES_SIZE
 5

	)

61 
	s_CLzmaPr›îtõs


63 
	mlc
;

64 
	mÕ
;

65 
	mpb
;

66 #ifde‡
_LZMA_OUT_READ


67 
UI¡32
 
	mDi˘i⁄¨ySize
;

69 }
	tCLzmaPr›îtõs
;

71 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

73 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

75 
	#kLzmaNìdInôId
 (-2)

	)

77 
	s_CLzmaDecodîSèã


79 
CLzmaPr›îtõs
 
	mPr›îtõs
;

80 
CProb
 *
	mProbs
;

82 #ifde‡
_LZMA_IN_CB


83 c⁄° *
	mBuf„r
;

84 c⁄° *
	mBuf„rLim
;

87 #ifde‡
_LZMA_OUT_READ


88 *
	mDi˘i⁄¨y
;

89 
UI¡32
 
	mR™ge
;

90 
UI¡32
 
	mCode
;

91 
UI¡32
 
	mDi˘i⁄¨yPos
;

92 
UI¡32
 
	mGlobÆPos
;

93 
UI¡32
 
	mDi°™˚Limô
;

94 
UI¡32
 
	mRïs
[4];

95 
	mSèã
;

96 
	mRemaöLí
;

97 
	mTempDi˘i⁄¨y
[4];

99 } 
	tCLzmaDecodîSèã
;

101 #ifde‡
_LZMA_OUT_READ


102 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

105 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

106 #ifde‡
_LZMA_IN_CB


107 
ILzmaInCÆlback
 *
öCÆlback
,

109 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

111 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/ath79/image/lzma-loader/src/LzmaTypes.h

10 #i‚de‡
__LZMATYPES_H


11 
	#__LZMATYPES_H


	)

13 #i‚de‡
_7ZIP_BYTE_DEFINED


14 
	#_7ZIP_BYTE_DEFINED


	)

15 
	tByã
;

18 #i‚de‡
_7ZIP_UINT16_DEFINED


19 
	#_7ZIP_UINT16_DEFINED


	)

20 
	tUI¡16
;

23 #i‚de‡
_7ZIP_UINT32_DEFINED


24 
	#_7ZIP_UINT32_DEFINED


	)

25 #ifde‡
_LZMA_UINT32_IS_ULONG


26 
	tUI¡32
;

28 
	tUI¡32
;

35 #i‚de‡
_7ZIP_SIZET_DEFINED


36 
	#_7ZIP_SIZET_DEFINED


	)

37 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


38 
UI¡32
 
	tSizeT
;

40 
	~<°ddef.h
>

41 
size_t
 
	tSizeT
;

	@linux/ath79/image/lzma-loader/src/ar71xx_regs.h

15 #i‚de‡
__ASM_MACH_AR71XX_REGS_H


16 
	#__ASM_MACH_AR71XX_REGS_H


	)

18 
	#BIT
(
_x
Ë(1UL << (_x))

	)

20 
	#AR71XX_APB_BASE
 0x18000000

	)

21 
	#AR71XX_GE0_BASE
 0x19000000

	)

22 
	#AR71XX_GE0_SIZE
 0x10000

	)

23 
	#AR71XX_GE1_BASE
 0x1a000000

	)

24 
	#AR71XX_GE1_SIZE
 0x10000

	)

25 
	#AR71XX_EHCI_BASE
 0x1b000000

	)

26 
	#AR71XX_EHCI_SIZE
 0x1000

	)

27 
	#AR71XX_OHCI_BASE
 0x1c000000

	)

28 
	#AR71XX_OHCI_SIZE
 0x1000

	)

29 
	#AR71XX_SPI_BASE
 0x1f000000

	)

30 
	#AR71XX_SPI_SIZE
 0x01000000

	)

32 
	#AR71XX_DDR_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00000000)

	)

33 
	#AR71XX_DDR_CTRL_SIZE
 0x100

	)

34 
	#AR71XX_UART_BASE
 (
AR71XX_APB_BASE
 + 0x00020000)

	)

35 
	#AR71XX_UART_SIZE
 0x100

	)

36 
	#AR71XX_USB_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00030000)

	)

37 
	#AR71XX_USB_CTRL_SIZE
 0x100

	)

38 
	#AR71XX_GPIO_BASE
 (
AR71XX_APB_BASE
 + 0x00040000)

	)

39 
	#AR71XX_GPIO_SIZE
 0x100

	)

40 
	#AR71XX_PLL_BASE
 (
AR71XX_APB_BASE
 + 0x00050000)

	)

41 
	#AR71XX_PLL_SIZE
 0x100

	)

42 
	#AR71XX_RESET_BASE
 (
AR71XX_APB_BASE
 + 0x00060000)

	)

43 
	#AR71XX_RESET_SIZE
 0x100

	)

44 
	#AR71XX_MII_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

45 
	#AR71XX_MII_SIZE
 0x100

	)

47 
	#AR71XX_PCI_MEM_BASE
 0x10000000

	)

48 
	#AR71XX_PCI_MEM_SIZE
 0x07000000

	)

50 
	#AR71XX_PCI_WIN0_OFFS
 0x10000000

	)

51 
	#AR71XX_PCI_WIN1_OFFS
 0x11000000

	)

52 
	#AR71XX_PCI_WIN2_OFFS
 0x12000000

	)

53 
	#AR71XX_PCI_WIN3_OFFS
 0x13000000

	)

54 
	#AR71XX_PCI_WIN4_OFFS
 0x14000000

	)

55 
	#AR71XX_PCI_WIN5_OFFS
 0x15000000

	)

56 
	#AR71XX_PCI_WIN6_OFFS
 0x16000000

	)

57 
	#AR71XX_PCI_WIN7_OFFS
 0x07000000

	)

59 
	#AR71XX_PCI_CFG_BASE
 \

60 (
AR71XX_PCI_MEM_BASE
 + 
AR71XX_PCI_WIN7_OFFS
 + 0x10000)

	)

61 
	#AR71XX_PCI_CFG_SIZE
 0x100

	)

63 
	#AR7240_USB_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x00030000)

	)

64 
	#AR7240_USB_CTRL_SIZE
 0x100

	)

65 
	#AR7240_OHCI_BASE
 0x1b000000

	)

66 
	#AR7240_OHCI_SIZE
 0x1000

	)

68 
	#AR724X_PCI_MEM_BASE
 0x10000000

	)

69 
	#AR724X_PCI_MEM_SIZE
 0x04000000

	)

71 
	#AR724X_PCI_CFG_BASE
 0x14000000

	)

72 
	#AR724X_PCI_CFG_SIZE
 0x1000

	)

73 
	#AR724X_PCI_CRP_BASE
 (
AR71XX_APB_BASE
 + 0x000c0000)

	)

74 
	#AR724X_PCI_CRP_SIZE
 0x1000

	)

75 
	#AR724X_PCI_CTRL_BASE
 (
AR71XX_APB_BASE
 + 0x000f0000)

	)

76 
	#AR724X_PCI_CTRL_SIZE
 0x100

	)

78 
	#AR724X_EHCI_BASE
 0x1b000000

	)

79 
	#AR724X_EHCI_SIZE
 0x1000

	)

81 
	#AR913X_EHCI_BASE
 0x1b000000

	)

82 
	#AR913X_EHCI_SIZE
 0x1000

	)

83 
	#AR913X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x000C0000)

	)

84 
	#AR913X_WMAC_SIZE
 0x30000

	)

86 
	#AR933X_UART_BASE
 (
AR71XX_APB_BASE
 + 0x00020000)

	)

87 
	#AR933X_UART_SIZE
 0x14

	)

88 
	#AR933X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

89 
	#AR933X_GMAC_SIZE
 0x04

	)

90 
	#AR933X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

91 
	#AR933X_WMAC_SIZE
 0x20000

	)

92 
	#AR933X_EHCI_BASE
 0x1b000000

	)

93 
	#AR933X_EHCI_SIZE
 0x1000

	)

95 
	#AR934X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

96 
	#AR934X_GMAC_SIZE
 0x14

	)

97 
	#AR934X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

98 
	#AR934X_WMAC_SIZE
 0x20000

	)

99 
	#AR934X_EHCI_BASE
 0x1b000000

	)

100 
	#AR934X_EHCI_SIZE
 0x200

	)

102 
	#QCA955X_PCI_MEM_BASE0
 0x10000000

	)

103 
	#QCA955X_PCI_MEM_BASE1
 0x12000000

	)

104 
	#QCA955X_PCI_MEM_SIZE
 0x02000000

	)

105 
	#QCA955X_PCI_CFG_BASE0
 0x14000000

	)

106 
	#QCA955X_PCI_CFG_BASE1
 0x16000000

	)

107 
	#QCA955X_PCI_CFG_SIZE
 0x1000

	)

108 
	#QCA955X_PCI_CRP_BASE0
 (
AR71XX_APB_BASE
 + 0x000c0000)

	)

109 
	#QCA955X_PCI_CRP_BASE1
 (
AR71XX_APB_BASE
 + 0x00250000)

	)

110 
	#QCA955X_PCI_CRP_SIZE
 0x1000

	)

111 
	#QCA955X_PCI_CTRL_BASE0
 (
AR71XX_APB_BASE
 + 0x000f0000)

	)

112 
	#QCA955X_PCI_CTRL_BASE1
 (
AR71XX_APB_BASE
 + 0x00280000)

	)

113 
	#QCA955X_PCI_CTRL_SIZE
 0x100

	)

115 
	#QCA955X_WMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00100000)

	)

116 
	#QCA955X_WMAC_SIZE
 0x20000

	)

117 
	#QCA955X_EHCI0_BASE
 0x1b000000

	)

118 
	#QCA955X_EHCI1_BASE
 0x1b400000

	)

119 
	#QCA955X_EHCI_SIZE
 0x1000

	)

120 
	#QCA955X_GMAC_BASE
 (
AR71XX_APB_BASE
 + 0x00070000)

	)

121 
	#QCA955X_GMAC_SIZE
 0x40

	)

123 
	#AR9300_OTP_BASE
 0x14000

	)

124 
	#AR9300_OTP_STATUS
 0x15f18

	)

125 
	#AR9300_OTP_STATUS_TYPE
 0x7

	)

126 
	#AR9300_OTP_STATUS_VALID
 0x4

	)

127 
	#AR9300_OTP_STATUS_ACCESS_BUSY
 0x2

	)

128 
	#AR9300_OTP_STATUS_SM_BUSY
 0x1

	)

129 
	#AR9300_OTP_READ_DATA
 0x15f1c

	)

134 
	#AR71XX_DDR_REG_PCI_WIN0
 0x7c

	)

135 
	#AR71XX_DDR_REG_PCI_WIN1
 0x80

	)

136 
	#AR71XX_DDR_REG_PCI_WIN2
 0x84

	)

137 
	#AR71XX_DDR_REG_PCI_WIN3
 0x88

	)

138 
	#AR71XX_DDR_REG_PCI_WIN4
 0x8c

	)

139 
	#AR71XX_DDR_REG_PCI_WIN5
 0x90

	)

140 
	#AR71XX_DDR_REG_PCI_WIN6
 0x94

	)

141 
	#AR71XX_DDR_REG_PCI_WIN7
 0x98

	)

142 
	#AR71XX_DDR_REG_FLUSH_GE0
 0x9c

	)

143 
	#AR71XX_DDR_REG_FLUSH_GE1
 0xa0

	)

144 
	#AR71XX_DDR_REG_FLUSH_USB
 0xa4

	)

145 
	#AR71XX_DDR_REG_FLUSH_PCI
 0xa8

	)

147 
	#AR724X_DDR_REG_FLUSH_GE0
 0x7c

	)

148 
	#AR724X_DDR_REG_FLUSH_GE1
 0x80

	)

149 
	#AR724X_DDR_REG_FLUSH_USB
 0x84

	)

150 
	#AR724X_DDR_REG_FLUSH_PCIE
 0x88

	)

152 
	#AR913X_DDR_REG_FLUSH_GE0
 0x7c

	)

153 
	#AR913X_DDR_REG_FLUSH_GE1
 0x80

	)

154 
	#AR913X_DDR_REG_FLUSH_USB
 0x84

	)

155 
	#AR913X_DDR_REG_FLUSH_WMAC
 0x88

	)

157 
	#AR933X_DDR_REG_FLUSH_GE0
 0x7c

	)

158 
	#AR933X_DDR_REG_FLUSH_GE1
 0x80

	)

159 
	#AR933X_DDR_REG_FLUSH_USB
 0x84

	)

160 
	#AR933X_DDR_REG_FLUSH_WMAC
 0x88

	)

162 
	#AR934X_DDR_REG_FLUSH_GE0
 0x9c

	)

163 
	#AR934X_DDR_REG_FLUSH_GE1
 0xa0

	)

164 
	#AR934X_DDR_REG_FLUSH_USB
 0xa4

	)

165 
	#AR934X_DDR_REG_FLUSH_PCIE
 0xa8

	)

166 
	#AR934X_DDR_REG_FLUSH_WMAC
 0xac

	)

171 
	#AR71XX_PLL_REG_CPU_CONFIG
 0x00

	)

172 
	#AR71XX_PLL_REG_SEC_CONFIG
 0x04

	)

173 
	#AR71XX_PLL_REG_ETH0_INT_CLOCK
 0x10

	)

174 
	#AR71XX_PLL_REG_ETH1_INT_CLOCK
 0x14

	)

176 
	#AR71XX_PLL_DIV_SHIFT
 3

	)

177 
	#AR71XX_PLL_DIV_MASK
 0x1f

	)

178 
	#AR71XX_CPU_DIV_SHIFT
 16

	)

179 
	#AR71XX_CPU_DIV_MASK
 0x3

	)

180 
	#AR71XX_DDR_DIV_SHIFT
 18

	)

181 
	#AR71XX_DDR_DIV_MASK
 0x3

	)

182 
	#AR71XX_AHB_DIV_SHIFT
 20

	)

183 
	#AR71XX_AHB_DIV_MASK
 0x7

	)

185 
	#AR71XX_ETH0_PLL_SHIFT
 17

	)

186 
	#AR71XX_ETH1_PLL_SHIFT
 19

	)

188 
	#AR724X_PLL_REG_CPU_CONFIG
 0x00

	)

189 
	#AR724X_PLL_REG_PCIE_CONFIG
 0x18

	)

191 
	#AR724X_PLL_DIV_SHIFT
 0

	)

192 
	#AR724X_PLL_DIV_MASK
 0x3ff

	)

193 
	#AR724X_PLL_REF_DIV_SHIFT
 10

	)

194 
	#AR724X_PLL_REF_DIV_MASK
 0xf

	)

195 
	#AR724X_AHB_DIV_SHIFT
 19

	)

196 
	#AR724X_AHB_DIV_MASK
 0x1

	)

197 
	#AR724X_DDR_DIV_SHIFT
 22

	)

198 
	#AR724X_DDR_DIV_MASK
 0x3

	)

200 
	#AR7242_PLL_REG_ETH0_INT_CLOCK
 0x2c

	)

202 
	#AR913X_PLL_REG_CPU_CONFIG
 0x00

	)

203 
	#AR913X_PLL_REG_ETH_CONFIG
 0x04

	)

204 
	#AR913X_PLL_REG_ETH0_INT_CLOCK
 0x14

	)

205 
	#AR913X_PLL_REG_ETH1_INT_CLOCK
 0x18

	)

207 
	#AR913X_PLL_DIV_SHIFT
 0

	)

208 
	#AR913X_PLL_DIV_MASK
 0x3ff

	)

209 
	#AR913X_DDR_DIV_SHIFT
 22

	)

210 
	#AR913X_DDR_DIV_MASK
 0x3

	)

211 
	#AR913X_AHB_DIV_SHIFT
 19

	)

212 
	#AR913X_AHB_DIV_MASK
 0x1

	)

214 
	#AR913X_ETH0_PLL_SHIFT
 20

	)

215 
	#AR913X_ETH1_PLL_SHIFT
 22

	)

217 
	#AR933X_PLL_CPU_CONFIG_REG
 0x00

	)

218 
	#AR933X_PLL_CLOCK_CTRL_REG
 0x08

	)

220 
	#AR933X_PLL_CPU_CONFIG_NINT_SHIFT
 10

	)

221 
	#AR933X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

222 
	#AR933X_PLL_CPU_CONFIG_REFDIV_SHIFT
 16

	)

223 
	#AR933X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

224 
	#AR933X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 23

	)

225 
	#AR933X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x7

	)

227 
	#AR933X_PLL_CLOCK_CTRL_BYPASS
 
	`BIT
(2)

	)

228 
	#AR933X_PLL_CLOCK_CTRL_CPU_DIV_SHIFT
 5

	)

229 
	#AR933X_PLL_CLOCK_CTRL_CPU_DIV_MASK
 0x3

	)

230 
	#AR933X_PLL_CLOCK_CTRL_DDR_DIV_SHIFT
 10

	)

231 
	#AR933X_PLL_CLOCK_CTRL_DDR_DIV_MASK
 0x3

	)

232 
	#AR933X_PLL_CLOCK_CTRL_AHB_DIV_SHIFT
 15

	)

233 
	#AR933X_PLL_CLOCK_CTRL_AHB_DIV_MASK
 0x7

	)

235 
	#AR934X_PLL_CPU_CONFIG_REG
 0x00

	)

236 
	#AR934X_PLL_DDR_CONFIG_REG
 0x04

	)

237 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_REG
 0x08

	)

238 
	#AR934X_PLL_ETH_XMII_CONTROL_REG
 0x2c

	)

240 
	#AR934X_PLL_CPU_CONFIG_NFRAC_SHIFT
 0

	)

241 
	#AR934X_PLL_CPU_CONFIG_NFRAC_MASK
 0x3f

	)

242 
	#AR934X_PLL_CPU_CONFIG_NINT_SHIFT
 6

	)

243 
	#AR934X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

244 
	#AR934X_PLL_CPU_CONFIG_REFDIV_SHIFT
 12

	)

245 
	#AR934X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

246 
	#AR934X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 19

	)

247 
	#AR934X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x3

	)

249 
	#AR934X_PLL_DDR_CONFIG_NFRAC_SHIFT
 0

	)

250 
	#AR934X_PLL_DDR_CONFIG_NFRAC_MASK
 0x3ff

	)

251 
	#AR934X_PLL_DDR_CONFIG_NINT_SHIFT
 10

	)

252 
	#AR934X_PLL_DDR_CONFIG_NINT_MASK
 0x3f

	)

253 
	#AR934X_PLL_DDR_CONFIG_REFDIV_SHIFT
 16

	)

254 
	#AR934X_PLL_DDR_CONFIG_REFDIV_MASK
 0x1f

	)

255 
	#AR934X_PLL_DDR_CONFIG_OUTDIV_SHIFT
 23

	)

256 
	#AR934X_PLL_DDR_CONFIG_OUTDIV_MASK
 0x7

	)

258 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_PLL_BYPASS
 
	`BIT
(2)

	)

259 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_PLL_BYPASS
 
	`BIT
(3)

	)

260 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_PLL_BYPASS
 
	`BIT
(4)

	)

261 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_POST_DIV_SHIFT
 5

	)

262 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPU_POST_DIV_MASK
 0x1f

	)

263 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_POST_DIV_SHIFT
 10

	)

264 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDR_POST_DIV_MASK
 0x1f

	)

265 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_POST_DIV_SHIFT
 15

	)

266 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHB_POST_DIV_MASK
 0x1f

	)

267 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_CPUCLK_FROM_CPUPLL
 
	`BIT
(20)

	)

268 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_DDRCLK_FROM_DDRPLL
 
	`BIT
(21)

	)

269 
	#AR934X_PLL_CPU_DDR_CLK_CTRL_AHBCLK_FROM_DDRPLL
 
	`BIT
(24)

	)

271 
	#QCA955X_PLL_CPU_CONFIG_REG
 0x00

	)

272 
	#QCA955X_PLL_DDR_CONFIG_REG
 0x04

	)

273 
	#QCA955X_PLL_CLK_CTRL_REG
 0x08

	)

275 
	#QCA955X_PLL_CPU_CONFIG_NFRAC_SHIFT
 0

	)

276 
	#QCA955X_PLL_CPU_CONFIG_NFRAC_MASK
 0x3f

	)

277 
	#QCA955X_PLL_CPU_CONFIG_NINT_SHIFT
 6

	)

278 
	#QCA955X_PLL_CPU_CONFIG_NINT_MASK
 0x3f

	)

279 
	#QCA955X_PLL_CPU_CONFIG_REFDIV_SHIFT
 12

	)

280 
	#QCA955X_PLL_CPU_CONFIG_REFDIV_MASK
 0x1f

	)

281 
	#QCA955X_PLL_CPU_CONFIG_OUTDIV_SHIFT
 19

	)

282 
	#QCA955X_PLL_CPU_CONFIG_OUTDIV_MASK
 0x3

	)

284 
	#QCA955X_PLL_DDR_CONFIG_NFRAC_SHIFT
 0

	)

285 
	#QCA955X_PLL_DDR_CONFIG_NFRAC_MASK
 0x3ff

	)

286 
	#QCA955X_PLL_DDR_CONFIG_NINT_SHIFT
 10

	)

287 
	#QCA955X_PLL_DDR_CONFIG_NINT_MASK
 0x3f

	)

288 
	#QCA955X_PLL_DDR_CONFIG_REFDIV_SHIFT
 16

	)

289 
	#QCA955X_PLL_DDR_CONFIG_REFDIV_MASK
 0x1f

	)

290 
	#QCA955X_PLL_DDR_CONFIG_OUTDIV_SHIFT
 23

	)

291 
	#QCA955X_PLL_DDR_CONFIG_OUTDIV_MASK
 0x7

	)

293 
	#QCA955X_PLL_CLK_CTRL_CPU_PLL_BYPASS
 
	`BIT
(2)

	)

294 
	#QCA955X_PLL_CLK_CTRL_DDR_PLL_BYPASS
 
	`BIT
(3)

	)

295 
	#QCA955X_PLL_CLK_CTRL_AHB_PLL_BYPASS
 
	`BIT
(4)

	)

296 
	#QCA955X_PLL_CLK_CTRL_CPU_POST_DIV_SHIFT
 5

	)

297 
	#QCA955X_PLL_CLK_CTRL_CPU_POST_DIV_MASK
 0x1f

	)

298 
	#QCA955X_PLL_CLK_CTRL_DDR_POST_DIV_SHIFT
 10

	)

299 
	#QCA955X_PLL_CLK_CTRL_DDR_POST_DIV_MASK
 0x1f

	)

300 
	#QCA955X_PLL_CLK_CTRL_AHB_POST_DIV_SHIFT
 15

	)

301 
	#QCA955X_PLL_CLK_CTRL_AHB_POST_DIV_MASK
 0x1f

	)

302 
	#QCA955X_PLL_CLK_CTRL_CPUCLK_FROM_CPUPLL
 
	`BIT
(20)

	)

303 
	#QCA955X_PLL_CLK_CTRL_DDRCLK_FROM_DDRPLL
 
	`BIT
(21)

	)

304 
	#QCA955X_PLL_CLK_CTRL_AHBCLK_FROM_DDRPLL
 
	`BIT
(24)

	)

309 
	#AR71XX_USB_CTRL_REG_FLADJ
 0x00

	)

310 
	#AR71XX_USB_CTRL_REG_CONFIG
 0x04

	)

315 
	#AR71XX_RESET_REG_TIMER
 0x00

	)

316 
	#AR71XX_RESET_REG_TIMER_RELOAD
 0x04

	)

317 
	#AR71XX_RESET_REG_WDOG_CTRL
 0x08

	)

318 
	#AR71XX_RESET_REG_WDOG
 0x0c

	)

319 
	#AR71XX_RESET_REG_MISC_INT_STATUS
 0x10

	)

320 
	#AR71XX_RESET_REG_MISC_INT_ENABLE
 0x14

	)

321 
	#AR71XX_RESET_REG_PCI_INT_STATUS
 0x18

	)

322 
	#AR71XX_RESET_REG_PCI_INT_ENABLE
 0x1c

	)

323 
	#AR71XX_RESET_REG_GLOBAL_INT_STATUS
 0x20

	)

324 
	#AR71XX_RESET_REG_RESET_MODULE
 0x24

	)

325 
	#AR71XX_RESET_REG_PERFC_CTRL
 0x2c

	)

326 
	#AR71XX_RESET_REG_PERFC0
 0x30

	)

327 
	#AR71XX_RESET_REG_PERFC1
 0x34

	)

328 
	#AR71XX_RESET_REG_REV_ID
 0x90

	)

330 
	#AR913X_RESET_REG_GLOBAL_INT_STATUS
 0x18

	)

331 
	#AR913X_RESET_REG_RESET_MODULE
 0x1c

	)

332 
	#AR913X_RESET_REG_PERF_CTRL
 0x20

	)

333 
	#AR913X_RESET_REG_PERFC0
 0x24

	)

334 
	#AR913X_RESET_REG_PERFC1
 0x28

	)

336 
	#AR724X_RESET_REG_RESET_MODULE
 0x1c

	)

338 
	#AR933X_RESET_REG_RESET_MODULE
 0x1c

	)

339 
	#AR933X_RESET_REG_BOOTSTRAP
 0xac

	)

341 
	#AR934X_RESET_REG_RESET_MODULE
 0x1c

	)

342 
	#AR934X_RESET_REG_BOOTSTRAP
 0xb0

	)

343 
	#AR934X_RESET_REG_PCIE_WMAC_INT_STATUS
 0xac

	)

345 
	#QCA955X_RESET_REG_BOOTSTRAP
 0xb0

	)

346 
	#QCA955X_RESET_REG_EXT_INT_STATUS
 0xac

	)

348 
	#MISC_INT_ETHSW
 
	`BIT
(12)

	)

349 
	#MISC_INT_TIMER4
 
	`BIT
(10)

	)

350 
	#MISC_INT_TIMER3
 
	`BIT
(9)

	)

351 
	#MISC_INT_TIMER2
 
	`BIT
(8)

	)

352 
	#MISC_INT_DMA
 
	`BIT
(7)

	)

353 
	#MISC_INT_OHCI
 
	`BIT
(6)

	)

354 
	#MISC_INT_PERFC
 
	`BIT
(5)

	)

355 
	#MISC_INT_WDOG
 
	`BIT
(4)

	)

356 
	#MISC_INT_UART
 
	`BIT
(3)

	)

357 
	#MISC_INT_GPIO
 
	`BIT
(2)

	)

358 
	#MISC_INT_ERROR
 
	`BIT
(1)

	)

359 
	#MISC_INT_TIMER
 
	`BIT
(0)

	)

361 
	#AR71XX_RESET_EXTERNAL
 
	`BIT
(28)

	)

362 
	#AR71XX_RESET_FULL_CHIP
 
	`BIT
(24)

	)

363 
	#AR71XX_RESET_CPU_NMI
 
	`BIT
(21)

	)

364 
	#AR71XX_RESET_CPU_COLD
 
	`BIT
(20)

	)

365 
	#AR71XX_RESET_DMA
 
	`BIT
(19)

	)

366 
	#AR71XX_RESET_SLIC
 
	`BIT
(18)

	)

367 
	#AR71XX_RESET_STEREO
 
	`BIT
(17)

	)

368 
	#AR71XX_RESET_DDR
 
	`BIT
(16)

	)

369 
	#AR71XX_RESET_GE1_MAC
 
	`BIT
(13)

	)

370 
	#AR71XX_RESET_GE1_PHY
 
	`BIT
(12)

	)

371 
	#AR71XX_RESET_USBSUS_OVERRIDE
 
	`BIT
(10)

	)

372 
	#AR71XX_RESET_GE0_MAC
 
	`BIT
(9)

	)

373 
	#AR71XX_RESET_GE0_PHY
 
	`BIT
(8)

	)

374 
	#AR71XX_RESET_USB_OHCI_DLL
 
	`BIT
(6)

	)

375 
	#AR71XX_RESET_USB_HOST
 
	`BIT
(5)

	)

376 
	#AR71XX_RESET_USB_PHY
 
	`BIT
(4)

	)

377 
	#AR71XX_RESET_PCI_BUS
 
	`BIT
(1)

	)

378 
	#AR71XX_RESET_PCI_CORE
 
	`BIT
(0)

	)

380 
	#AR7240_RESET_USB_HOST
 
	`BIT
(5)

	)

381 
	#AR7240_RESET_OHCI_DLL
 
	`BIT
(3)

	)

383 
	#AR724X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

384 
	#AR724X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

385 
	#AR724X_RESET_PCIE_PHY_SERIAL
 
	`BIT
(10)

	)

386 
	#AR724X_RESET_PCIE_PHY
 
	`BIT
(7)

	)

387 
	#AR724X_RESET_PCIE
 
	`BIT
(6)

	)

388 
	#AR724X_RESET_USB_HOST
 
	`BIT
(5)

	)

389 
	#AR724X_RESET_USB_PHY
 
	`BIT
(4)

	)

390 
	#AR724X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

392 
	#AR913X_RESET_AMBA2WMAC
 
	`BIT
(22)

	)

393 
	#AR913X_RESET_USBSUS_OVERRIDE
 
	`BIT
(10)

	)

394 
	#AR913X_RESET_USB_HOST
 
	`BIT
(5)

	)

395 
	#AR913X_RESET_USB_PHY
 
	`BIT
(4)

	)

397 
	#AR933X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

398 
	#AR933X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

399 
	#AR933X_RESET_GE1_MAC
 
	`BIT
(13)

	)

400 
	#AR933X_RESET_WMAC
 
	`BIT
(11)

	)

401 
	#AR933X_RESET_GE0_MAC
 
	`BIT
(9)

	)

402 
	#AR933X_RESET_USB_HOST
 
	`BIT
(5)

	)

403 
	#AR933X_RESET_USB_PHY
 
	`BIT
(4)

	)

404 
	#AR933X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

406 
	#AR934X_RESET_HOST
 
	`BIT
(31)

	)

407 
	#AR934X_RESET_SLIC
 
	`BIT
(30)

	)

408 
	#AR934X_RESET_HDMA
 
	`BIT
(29)

	)

409 
	#AR934X_RESET_EXTERNAL
 
	`BIT
(28)

	)

410 
	#AR934X_RESET_RTC
 
	`BIT
(27)

	)

411 
	#AR934X_RESET_PCIE_EP_INT
 
	`BIT
(26)

	)

412 
	#AR934X_RESET_CHKSUM_ACC
 
	`BIT
(25)

	)

413 
	#AR934X_RESET_FULL_CHIP
 
	`BIT
(24)

	)

414 
	#AR934X_RESET_GE1_MDIO
 
	`BIT
(23)

	)

415 
	#AR934X_RESET_GE0_MDIO
 
	`BIT
(22)

	)

416 
	#AR934X_RESET_CPU_NMI
 
	`BIT
(21)

	)

417 
	#AR934X_RESET_CPU_COLD
 
	`BIT
(20)

	)

418 
	#AR934X_RESET_HOST_RESET_INT
 
	`BIT
(19)

	)

419 
	#AR934X_RESET_PCIE_EP
 
	`BIT
(18)

	)

420 
	#AR934X_RESET_UART1
 
	`BIT
(17)

	)

421 
	#AR934X_RESET_DDR
 
	`BIT
(16)

	)

422 
	#AR934X_RESET_USB_PHY_PLL_PWD_EXT
 
	`BIT
(15)

	)

423 
	#AR934X_RESET_NANDF
 
	`BIT
(14)

	)

424 
	#AR934X_RESET_GE1_MAC
 
	`BIT
(13)

	)

425 
	#AR934X_RESET_ETH_SWITCH_ANALOG
 
	`BIT
(12)

	)

426 
	#AR934X_RESET_USB_PHY_ANALOG
 
	`BIT
(11)

	)

427 
	#AR934X_RESET_HOST_DMA_INT
 
	`BIT
(10)

	)

428 
	#AR934X_RESET_GE0_MAC
 
	`BIT
(9)

	)

429 
	#AR934X_RESET_ETH_SWITCH
 
	`BIT
(8)

	)

430 
	#AR934X_RESET_PCIE_PHY
 
	`BIT
(7)

	)

431 
	#AR934X_RESET_PCIE
 
	`BIT
(6)

	)

432 
	#AR934X_RESET_USB_HOST
 
	`BIT
(5)

	)

433 
	#AR934X_RESET_USB_PHY
 
	`BIT
(4)

	)

434 
	#AR934X_RESET_USBSUS_OVERRIDE
 
	`BIT
(3)

	)

435 
	#AR934X_RESET_LUT
 
	`BIT
(2)

	)

436 
	#AR934X_RESET_MBOX
 
	`BIT
(1)

	)

437 
	#AR934X_RESET_I2S
 
	`BIT
(0)

	)

439 
	#AR933X_BOOTSTRAP_MDIO_GPIO_EN
 
	`BIT
(18)

	)

440 
	#AR933X_BOOTSTRAP_EEPBUSY
 
	`BIT
(4)

	)

441 
	#AR933X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(0)

	)

443 
	#AR934X_BOOTSTRAP_SW_OPTION8
 
	`BIT
(23)

	)

444 
	#AR934X_BOOTSTRAP_SW_OPTION7
 
	`BIT
(22)

	)

445 
	#AR934X_BOOTSTRAP_SW_OPTION6
 
	`BIT
(21)

	)

446 
	#AR934X_BOOTSTRAP_SW_OPTION5
 
	`BIT
(20)

	)

447 
	#AR934X_BOOTSTRAP_SW_OPTION4
 
	`BIT
(19)

	)

448 
	#AR934X_BOOTSTRAP_SW_OPTION3
 
	`BIT
(18)

	)

449 
	#AR934X_BOOTSTRAP_SW_OPTION2
 
	`BIT
(17)

	)

450 
	#AR934X_BOOTSTRAP_SW_OPTION1
 
	`BIT
(16)

	)

451 
	#AR934X_BOOTSTRAP_USB_MODE_DEVICE
 
	`BIT
(7)

	)

452 
	#AR934X_BOOTSTRAP_PCIE_RC
 
	`BIT
(6)

	)

453 
	#AR934X_BOOTSTRAP_EJTAG_MODE
 
	`BIT
(5)

	)

454 
	#AR934X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(4)

	)

455 
	#AR934X_BOOTSTRAP_BOOT_FROM_SPI
 
	`BIT
(2)

	)

456 
	#AR934X_BOOTSTRAP_SDRAM_DISABLED
 
	`BIT
(1)

	)

457 
	#AR934X_BOOTSTRAP_DDR1
 
	`BIT
(0)

	)

459 
	#QCA955X_BOOTSTRAP_REF_CLK_40
 
	`BIT
(4)

	)

461 
	#AR934X_PCIE_WMAC_INT_WMAC_MISC
 
	`BIT
(0)

	)

462 
	#AR934X_PCIE_WMAC_INT_WMAC_TX
 
	`BIT
(1)

	)

463 
	#AR934X_PCIE_WMAC_INT_WMAC_RXLP
 
	`BIT
(2)

	)

464 
	#AR934X_PCIE_WMAC_INT_WMAC_RXHP
 
	`BIT
(3)

	)

465 
	#AR934X_PCIE_WMAC_INT_PCIE_RC
 
	`BIT
(4)

	)

466 
	#AR934X_PCIE_WMAC_INT_PCIE_RC0
 
	`BIT
(5)

	)

467 
	#AR934X_PCIE_WMAC_INT_PCIE_RC1
 
	`BIT
(6)

	)

468 
	#AR934X_PCIE_WMAC_INT_PCIE_RC2
 
	`BIT
(7)

	)

469 
	#AR934X_PCIE_WMAC_INT_PCIE_RC3
 
	`BIT
(8)

	)

470 
	#AR934X_PCIE_WMAC_INT_WMAC_ALL
 \

471 (
AR934X_PCIE_WMAC_INT_WMAC_MISC
 | 
AR934X_PCIE_WMAC_INT_WMAC_TX
 | \

472 
AR934X_PCIE_WMAC_INT_WMAC_RXLP
 | 
AR934X_PCIE_WMAC_INT_WMAC_RXHP
)

	)

474 
	#AR934X_PCIE_WMAC_INT_PCIE_ALL
 \

475 (
AR934X_PCIE_WMAC_INT_PCIE_RC
 | 
AR934X_PCIE_WMAC_INT_PCIE_RC0
 | \

476 
AR934X_PCIE_WMAC_INT_PCIE_RC1
 | 
AR934X_PCIE_WMAC_INT_PCIE_RC2
 | \

477 
AR934X_PCIE_WMAC_INT_PCIE_RC3
)

	)

479 
	#QCA955X_EXT_INT_WMAC_MISC
 
	`BIT
(0)

	)

480 
	#QCA955X_EXT_INT_WMAC_TX
 
	`BIT
(1)

	)

481 
	#QCA955X_EXT_INT_WMAC_RXLP
 
	`BIT
(2)

	)

482 
	#QCA955X_EXT_INT_WMAC_RXHP
 
	`BIT
(3)

	)

483 
	#QCA955X_EXT_INT_PCIE_RC1
 
	`BIT
(4)

	)

484 
	#QCA955X_EXT_INT_PCIE_RC1_INT0
 
	`BIT
(5)

	)

485 
	#QCA955X_EXT_INT_PCIE_RC1_INT1
 
	`BIT
(6)

	)

486 
	#QCA955X_EXT_INT_PCIE_RC1_INT2
 
	`BIT
(7)

	)

487 
	#QCA955X_EXT_INT_PCIE_RC1_INT3
 
	`BIT
(8)

	)

488 
	#QCA955X_EXT_INT_PCIE_RC2
 
	`BIT
(12)

	)

489 
	#QCA955X_EXT_INT_PCIE_RC2_INT0
 
	`BIT
(13)

	)

490 
	#QCA955X_EXT_INT_PCIE_RC2_INT1
 
	`BIT
(14)

	)

491 
	#QCA955X_EXT_INT_PCIE_RC2_INT2
 
	`BIT
(15)

	)

492 
	#QCA955X_EXT_INT_PCIE_RC2_INT3
 
	`BIT
(16)

	)

493 
	#QCA955X_EXT_INT_USB1
 
	`BIT
(24)

	)

494 
	#QCA955X_EXT_INT_USB2
 
	`BIT
(28)

	)

496 
	#QCA955X_EXT_INT_WMAC_ALL
 \

497 (
QCA955X_EXT_INT_WMAC_MISC
 | 
QCA955X_EXT_INT_WMAC_TX
 | \

498 
QCA955X_EXT_INT_WMAC_RXLP
 | 
QCA955X_EXT_INT_WMAC_RXHP
)

	)

500 
	#QCA955X_EXT_INT_PCIE_RC1_ALL
 \

501 (
QCA955X_EXT_INT_PCIE_RC1
 | 
QCA955X_EXT_INT_PCIE_RC1_INT0
 | \

502 
QCA955X_EXT_INT_PCIE_RC1_INT1
 | 
QCA955X_EXT_INT_PCIE_RC1_INT2
 | \

503 
QCA955X_EXT_INT_PCIE_RC1_INT3
)

	)

505 
	#QCA955X_EXT_INT_PCIE_RC2_ALL
 \

506 (
QCA955X_EXT_INT_PCIE_RC2
 | 
QCA955X_EXT_INT_PCIE_RC2_INT0
 | \

507 
QCA955X_EXT_INT_PCIE_RC2_INT1
 | 
QCA955X_EXT_INT_PCIE_RC2_INT2
 | \

508 
QCA955X_EXT_INT_PCIE_RC2_INT3
)

	)

510 
	#REV_ID_MAJOR_MASK
 0xfff0

	)

511 
	#REV_ID_MAJOR_AR71XX
 0x00a0

	)

512 
	#REV_ID_MAJOR_AR913X
 0x00b0

	)

513 
	#REV_ID_MAJOR_AR7240
 0x00c0

	)

514 
	#REV_ID_MAJOR_AR7241
 0x0100

	)

515 
	#REV_ID_MAJOR_AR7242
 0x1100

	)

516 
	#REV_ID_MAJOR_AR9330
 0x0110

	)

517 
	#REV_ID_MAJOR_AR9331
 0x1110

	)

518 
	#REV_ID_MAJOR_AR9341
 0x0120

	)

519 
	#REV_ID_MAJOR_AR9342
 0x1120

	)

520 
	#REV_ID_MAJOR_AR9344
 0x2120

	)

521 
	#REV_ID_MAJOR_QCA9558
 0x1130

	)

523 
	#AR71XX_REV_ID_MINOR_MASK
 0x3

	)

524 
	#AR71XX_REV_ID_MINOR_AR7130
 0x0

	)

525 
	#AR71XX_REV_ID_MINOR_AR7141
 0x1

	)

526 
	#AR71XX_REV_ID_MINOR_AR7161
 0x2

	)

527 
	#AR71XX_REV_ID_REVISION_MASK
 0x3

	)

528 
	#AR71XX_REV_ID_REVISION_SHIFT
 2

	)

530 
	#AR913X_REV_ID_MINOR_MASK
 0x3

	)

531 
	#AR913X_REV_ID_MINOR_AR9130
 0x0

	)

532 
	#AR913X_REV_ID_MINOR_AR9132
 0x1

	)

533 
	#AR913X_REV_ID_REVISION_MASK
 0x3

	)

534 
	#AR913X_REV_ID_REVISION_SHIFT
 2

	)

536 
	#AR933X_REV_ID_REVISION_MASK
 0x3

	)

538 
	#AR724X_REV_ID_REVISION_MASK
 0x3

	)

540 
	#AR934X_REV_ID_REVISION_MASK
 0xf

	)

542 
	#AR944X_REV_ID_REVISION_MASK
 0xf

	)

547 
	#AR71XX_SPI_REG_FS
 0x00

	)

548 
	#AR71XX_SPI_REG_CTRL
 0x04

	)

549 
	#AR71XX_SPI_REG_IOC
 0x08

	)

550 
	#AR71XX_SPI_REG_RDS
 0x0¯

	)

552 
	#AR71XX_SPI_FS_GPIO
 
	`BIT
(0Ë

	)

554 
	#AR71XX_SPI_CTRL_RD
 
	`BIT
(6Ë

	)

555 
	#AR71XX_SPI_CTRL_DIV_MASK
 0x3f

	)

557 
	#AR71XX_SPI_IOC_DO
 
	`BIT
(0Ë

	)

558 
	#AR71XX_SPI_IOC_CLK
 
	`BIT
(8Ë

	)

559 
	#AR71XX_SPI_IOC_CS
(
n
Ë
	`BIT
(16 + (n))

	)

560 
	#AR71XX_SPI_IOC_CS0
 
	`AR71XX_SPI_IOC_CS
(0)

	)

561 
	#AR71XX_SPI_IOC_CS1
 
	`AR71XX_SPI_IOC_CS
(1)

	)

562 
	#AR71XX_SPI_IOC_CS2
 
	`AR71XX_SPI_IOC_CS
(2)

	)

563 
	#AR71XX_SPI_IOC_CS_ALL
 (
AR71XX_SPI_IOC_CS0
 | 
AR71XX_SPI_IOC_CS1
 | \

564 
AR71XX_SPI_IOC_CS2
)

	)

569 
	#AR71XX_GPIO_REG_OE
 0x00

	)

570 
	#AR71XX_GPIO_REG_IN
 0x04

	)

571 
	#AR71XX_GPIO_REG_OUT
 0x08

	)

572 
	#AR71XX_GPIO_REG_SET
 0x0c

	)

573 
	#AR71XX_GPIO_REG_CLEAR
 0x10

	)

574 
	#AR71XX_GPIO_REG_INT_MODE
 0x14

	)

575 
	#AR71XX_GPIO_REG_INT_TYPE
 0x18

	)

576 
	#AR71XX_GPIO_REG_INT_POLARITY
 0x1c

	)

577 
	#AR71XX_GPIO_REG_INT_PENDING
 0x20

	)

578 
	#AR71XX_GPIO_REG_INT_ENABLE
 0x24

	)

579 
	#AR71XX_GPIO_REG_FUNC
 0x28

	)

581 
	#AR934X_GPIO_REG_OUT_FUNC0
 0x2c

	)

582 
	#AR934X_GPIO_REG_OUT_FUNC1
 0x30

	)

583 
	#AR934X_GPIO_REG_OUT_FUNC2
 0x34

	)

584 
	#AR934X_GPIO_REG_OUT_FUNC3
 0x38

	)

585 
	#AR934X_GPIO_REG_OUT_FUNC4
 0x3c

	)

586 
	#AR934X_GPIO_REG_OUT_FUNC5
 0x40

	)

587 
	#AR934X_GPIO_REG_FUNC
 0x6c

	)

589 
	#AR71XX_GPIO_COUNT
 16

	)

590 
	#AR724X_GPIO_COUNT
 18

	)

591 
	#AR913X_GPIO_COUNT
 22

	)

592 
	#AR933X_GPIO_COUNT
 30

	)

593 
	#AR934X_GPIO_COUNT
 23

	)

594 
	#QCA955X_GPIO_COUNT
 24

	)

596 
	#AR71XX_GPIO_FUNC_STEREO_EN
 
	`BIT
(17)

	)

597 
	#AR71XX_GPIO_FUNC_SLIC_EN
 
	`BIT
(16)

	)

598 
	#AR71XX_GPIO_FUNC_SPI_CS2_EN
 
	`BIT
(13)

	)

599 
	#AR71XX_GPIO_FUNC_SPI_CS1_EN
 
	`BIT
(12)

	)

600 
	#AR71XX_GPIO_FUNC_UART_EN
 
	`BIT
(8)

	)

601 
	#AR71XX_GPIO_FUNC_USB_OC_EN
 
	`BIT
(4)

	)

602 
	#AR71XX_GPIO_FUNC_USB_CLK_EN
 
	`BIT
(0)

	)

604 
	#AR724X_GPIO_FUNC_GE0_MII_CLK_EN
 
	`BIT
(19)

	)

605 
	#AR724X_GPIO_FUNC_SPI_EN
 
	`BIT
(18)

	)

606 
	#AR724X_GPIO_FUNC_SPI_CS_EN2
 
	`BIT
(14)

	)

607 
	#AR724X_GPIO_FUNC_SPI_CS_EN1
 
	`BIT
(13)

	)

608 
	#AR724X_GPIO_FUNC_CLK_OBS5_EN
 
	`BIT
(12)

	)

609 
	#AR724X_GPIO_FUNC_CLK_OBS4_EN
 
	`BIT
(11)

	)

610 
	#AR724X_GPIO_FUNC_CLK_OBS3_EN
 
	`BIT
(10)

	)

611 
	#AR724X_GPIO_FUNC_CLK_OBS2_EN
 
	`BIT
(9)

	)

612 
	#AR724X_GPIO_FUNC_CLK_OBS1_EN
 
	`BIT
(8)

	)

613 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 
	`BIT
(7)

	)

614 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 
	`BIT
(6)

	)

615 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 
	`BIT
(5)

	)

616 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 
	`BIT
(4)

	)

617 
	#AR724X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 
	`BIT
(3)

	)

618 
	#AR724X_GPIO_FUNC_UART_RTS_CTS_EN
 
	`BIT
(2)

	)

619 
	#AR724X_GPIO_FUNC_UART_EN
 
	`BIT
(1)

	)

620 
	#AR724X_GPIO_FUNC_JTAG_DISABLE
 
	`BIT
(0)

	)

622 
	#AR913X_GPIO_FUNC_WMAC_LED_EN
 
	`BIT
(22)

	)

623 
	#AR913X_GPIO_FUNC_EXP_PORT_CS_EN
 
	`BIT
(21)

	)

624 
	#AR913X_GPIO_FUNC_I2S_REFCLKEN
 
	`BIT
(20)

	)

625 
	#AR913X_GPIO_FUNC_I2S_MCKEN
 
	`BIT
(19)

	)

626 
	#AR913X_GPIO_FUNC_I2S1_EN
 
	`BIT
(18)

	)

627 
	#AR913X_GPIO_FUNC_I2S0_EN
 
	`BIT
(17)

	)

628 
	#AR913X_GPIO_FUNC_SLIC_EN
 
	`BIT
(16)

	)

629 
	#AR913X_GPIO_FUNC_UART_RTSCTS_EN
 
	`BIT
(9)

	)

630 
	#AR913X_GPIO_FUNC_UART_EN
 
	`BIT
(8)

	)

631 
	#AR913X_GPIO_FUNC_USB_CLK_EN
 
	`BIT
(4)

	)

633 
	#AR933X_GPIO_FUNC_SPDIF2TCK
 
	`BIT
(31)

	)

634 
	#AR933X_GPIO_FUNC_SPDIF_EN
 
	`BIT
(30)

	)

635 
	#AR933X_GPIO_FUNC_I2SO_22_18_EN
 
	`BIT
(29)

	)

636 
	#AR933X_GPIO_FUNC_I2S_MCK_EN
 
	`BIT
(27)

	)

637 
	#AR933X_GPIO_FUNC_I2SO_EN
 
	`BIT
(26)

	)

638 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_DUPL
 
	`BIT
(25)

	)

639 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_COLL
 
	`BIT
(24)

	)

640 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED_ACT
 
	`BIT
(23)

	)

641 
	#AR933X_GPIO_FUNC_SPI_EN
 
	`BIT
(18)

	)

642 
	#AR933X_GPIO_FUNC_SPI_CS_EN2
 
	`BIT
(14)

	)

643 
	#AR933X_GPIO_FUNC_SPI_CS_EN1
 
	`BIT
(13)

	)

644 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED4_EN
 
	`BIT
(7)

	)

645 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN
 
	`BIT
(6)

	)

646 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN
 
	`BIT
(5)

	)

647 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN
 
	`BIT
(4)

	)

648 
	#AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN
 
	`BIT
(3)

	)

649 
	#AR933X_GPIO_FUNC_UART_RTS_CTS_EN
 
	`BIT
(2)

	)

650 
	#AR933X_GPIO_FUNC_UART_EN
 
	`BIT
(1)

	)

651 
	#AR933X_GPIO_FUNC_JTAG_DISABLE
 
	`BIT
(0)

	)

653 
	#AR934X_GPIO_FUNC_DDR_DQOE_EN
 
	`BIT
(17)

	)

654 
	#AR934X_GPIO_FUNC_SPI_CS_1_EN
 
	`BIT
(14)

	)

655 
	#AR934X_GPIO_FUNC_SPI_CS_0_EN
 
	`BIT
(13)

	)

657 
	#AR934X_GPIO_OUT_GPIO
 0x00

	)

662 
	#AR71XX_MII_REG_MII0_CTRL
 0x00

	)

663 
	#AR71XX_MII_REG_MII1_CTRL
 0x04

	)

665 
	#AR71XX_MII_CTRL_IF_MASK
 3

	)

666 
	#AR71XX_MII_CTRL_SPEED_SHIFT
 4

	)

667 
	#AR71XX_MII_CTRL_SPEED_MASK
 3

	)

668 
	#AR71XX_MII_CTRL_SPEED_10
 0

	)

669 
	#AR71XX_MII_CTRL_SPEED_100
 1

	)

670 
	#AR71XX_MII_CTRL_SPEED_1000
 2

	)

672 
	#AR71XX_MII0_CTRL_IF_GMII
 0

	)

673 
	#AR71XX_MII0_CTRL_IF_MII
 1

	)

674 
	#AR71XX_MII0_CTRL_IF_RGMII
 2

	)

675 
	#AR71XX_MII0_CTRL_IF_RMII
 3

	)

677 
	#AR71XX_MII1_CTRL_IF_RGMII
 0

	)

678 
	#AR71XX_MII1_CTRL_IF_RMII
 1

	)

683 
	#AR933X_GMAC_REG_ETH_CFG
 0x00

	)

685 
	#AR933X_ETH_CFG_RGMII_GE0
 
	`BIT
(0)

	)

686 
	#AR933X_ETH_CFG_MII_GE0
 
	`BIT
(1)

	)

687 
	#AR933X_ETH_CFG_GMII_GE0
 
	`BIT
(2)

	)

688 
	#AR933X_ETH_CFG_MII_GE0_MASTER
 
	`BIT
(3)

	)

689 
	#AR933X_ETH_CFG_MII_GE0_SLAVE
 
	`BIT
(4)

	)

690 
	#AR933X_ETH_CFG_MII_GE0_ERR_EN
 
	`BIT
(5)

	)

691 
	#AR933X_ETH_CFG_SW_PHY_SWAP
 
	`BIT
(7)

	)

692 
	#AR933X_ETH_CFG_SW_PHY_ADDR_SWAP
 
	`BIT
(8)

	)

693 
	#AR933X_ETH_CFG_RMII_GE0
 
	`BIT
(9)

	)

694 
	#AR933X_ETH_CFG_RMII_GE0_SPD_10
 0

	)

695 
	#AR933X_ETH_CFG_RMII_GE0_SPD_100
 
	`BIT
(10)

	)

700 
	#AR934X_GMAC_REG_ETH_CFG
 0x00

	)

702 
	#AR934X_ETH_CFG_RGMII_GMAC0
 
	`BIT
(0)

	)

703 
	#AR934X_ETH_CFG_MII_GMAC0
 
	`BIT
(1)

	)

704 
	#AR934X_ETH_CFG_GMII_GMAC0
 
	`BIT
(2)

	)

705 
	#AR934X_ETH_CFG_MII_GMAC0_MASTER
 
	`BIT
(3)

	)

706 
	#AR934X_ETH_CFG_MII_GMAC0_SLAVE
 
	`BIT
(4)

	)

707 
	#AR934X_ETH_CFG_MII_GMAC0_ERR_EN
 
	`BIT
(5)

	)

708 
	#AR934X_ETH_CFG_SW_ONLY_MODE
 
	`BIT
(6)

	)

709 
	#AR934X_ETH_CFG_SW_PHY_SWAP
 
	`BIT
(7)

	)

710 
	#AR934X_ETH_CFG_SW_APB_ACCESS
 
	`BIT
(9)

	)

711 
	#AR934X_ETH_CFG_RMII_GMAC0
 
	`BIT
(10)

	)

712 
	#AR933X_ETH_CFG_MII_CNTL_SPEED
 
	`BIT
(11)

	)

713 
	#AR934X_ETH_CFG_RMII_GMAC0_MASTER
 
	`BIT
(12)

	)

714 
	#AR933X_ETH_CFG_SW_ACC_MSB_FIRST
 
	`BIT
(13)

	)

720 
	#QCA955X_GMAC_REG_ETH_CFG
 0x00

	)

722 
	#QCA955X_ETH_CFG_RGMII_GMAC0
 
	`BIT
(0)

	)

723 
	#QCA955X_ETH_CFG_SGMII_GMAC0
 
	`BIT
(6)

	)

	@linux/ath79/image/lzma-loader/src/board.c

11 
	~<°ddef.h
>

12 
	~"c⁄fig.h
"

13 
	~"¨71xx_ªgs.h
"

15 
	#READREG
(
r
Ë*(vﬁ©ûê*)‘)

	)

16 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê*)‘Ë
	)
v

18 
	#KSEG1ADDR
(
_x
Ë(((_xË& 0x1fffffffË| 0xa0000000)

	)

20 
	#UART_BASE
 0xb8020000

	)

22 
	#UART_TX
 0

	)

23 
	#UART_LSR
 5

	)

25 
	#UART_LSR_THRE
 0x20

	)

27 
	#UART_READ
(
r
Ë
	`READREG
(
UART_BASE
 + 4 * (r))

	)

28 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART_BASE
 + 4 * (r), (v))

	)

30 
	$bﬂrd_putc
(
ch
)

32 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

33 
	`UART_WRITE
(
UART_TX
, 
ch
);

34 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

35 
	}
}

37 #ifde‡
CONFIG_BOARD_TL_WR1043ND_V1


38 
	$éwr1043nd_öô
()

40 
ªg
 = 
	`KSEG1ADDR
(
AR71XX_RESET_BASE
);

41 
t
;

43 
t
 = 
	`READREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
);

44 
t
 |
AR71XX_RESET_GE0_PHY
;

45 
	`WRITEREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
, 
t
);

47 
t
 = 
	`READREG
(
ªg
 + 
AR913X_RESET_REG_RESET_MODULE
);

48 
	}
}

50 
ölöe
 
	$éwr1043nd_öô
(Ë{
	}
}

53 
	$bﬂrd_öô
()

55 
	`éwr1043nd_öô
();

56 
	}
}

	@linux/ath79/image/lzma-loader/src/cache.c

16 
	~"ˇche.h
"

17 
	~"ˇche›s.h
"

18 
	~"c⁄fig.h
"

20 
	#ˇche_›
(
›
,
addr
) \

21 
__asm__
 
	`__vﬁ©ûe__
( \

28 : "i" (
›
), "R" (*(*)(
addr
)))

	)

30 
	$Êush_ˇche
(
°¨t_addr
, 
size
)

32 
lsize
 = 
CONFIG_CACHELINE_SIZE
;

33 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

34 
´nd
 = (
°¨t_addr
 + 
size
 - 1Ë& ~(
lsize
 - 1);

37 
	`ˇche_›
(
Hô_Wrôeback_Inv_D
, 
addr
);

38 
	`ˇche_›
(
Hô_InvÆid©e_I
, 
addr
);

39 i‡(
addr
 =
´nd
)

41 
addr
 +
lsize
;

43 
	}
}

	@linux/ath79/image/lzma-loader/src/cache.h

12 #i‚de‡
__CACHE_H


13 
	#__CACHE_H


	)

15 
Êush_ˇche
(
°¨t_addr
, 
size
);

	@linux/ath79/image/lzma-loader/src/cacheops.h

11 #i‚def 
__ASM_CACHEOPS_H


12 
	#__ASM_CACHEOPS_H


	)

17 
	#Index_InvÆid©e_I
 0x00

	)

18 
	#Index_Wrôeback_Inv_D
 0x01

	)

19 
	#Index_Lﬂd_Tag_I
 0x04

	)

20 
	#Index_Lﬂd_Tag_D
 0x05

	)

21 
	#Index_St‹e_Tag_I
 0x08

	)

22 
	#Index_St‹e_Tag_D
 0x09

	)

23 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

24 
	#Hô_InvÆid©e_I
 0x00

	)

26 
	#Hô_InvÆid©e_I
 0x10

	)

28 
	#Hô_InvÆid©e_D
 0x11

	)

29 
	#Hô_Wrôeback_Inv_D
 0x15

	)

34 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

35 
	#Fûl
 0x14

	)

36 
	#Hô_Wrôeback_I
 0x18

	)

37 
	#Hô_Wrôeback_D
 0x19

	)

42 
	#Index_InvÆid©e_SI
 0x02

	)

43 
	#Index_Wrôeback_Inv_SD
 0x03

	)

44 
	#Index_Lﬂd_Tag_SI
 0x06

	)

45 
	#Index_Lﬂd_Tag_SD
 0x07

	)

46 
	#Index_St‹e_Tag_SI
 0x0A

	)

47 
	#Index_St‹e_Tag_SD
 0x0B

	)

48 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

49 
	#Hô_InvÆid©e_SI
 0x12

	)

50 
	#Hô_InvÆid©e_SD
 0x13

	)

51 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

52 
	#Hô_Wrôeback_SD
 0x1b

	)

53 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

54 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

59 
	#R5K_Page_InvÆid©e_S
 0x17

	)

64 
	#Page_InvÆid©e_T
 0x16

	)

72 
	#Index_Wrôeback_Inv_S
 0x03

	)

73 
	#Index_Lﬂd_Tag_S
 0x07

	)

74 
	#Index_St‹e_Tag_S
 0x0B

	)

75 
	#Hô_InvÆid©e_S
 0x13

	)

76 
	#Cache_B¨rõr
 0x14

	)

77 
	#Hô_Wrôeback_Inv_S
 0x17

	)

78 
	#Index_Lﬂd_D©a_I
 0x18

	)

79 
	#Index_Lﬂd_D©a_D
 0x19

	)

80 
	#Index_Lﬂd_D©a_S
 0x1b

	)

81 
	#Index_St‹e_D©a_I
 0x1c

	)

82 
	#Index_St‹e_D©a_D
 0x1d

	)

83 
	#Index_St‹e_D©a_S
 0x1f

	)

	@linux/ath79/image/lzma-loader/src/config.h

12 #i‚de‡
_CONFIG_H_


13 
	#_CONFIG_H_


	)

15 
	#CONFIG_ICACHE_SIZE
 (32 * 1024)

	)

16 
	#CONFIG_DCACHE_SIZE
 (64 * 1024)

	)

17 
	#CONFIG_CACHELINE_SIZE
 32

	)

19 #i‚de‡
CONFIG_FLASH_OFFS


20 
	#CONFIG_FLASH_OFFS
 0

	)

23 #i‚de‡
CONFIG_FLASH_MAX


24 
	#CONFIG_FLASH_MAX
 0

	)

27 #i‚de‡
CONFIG_FLASH_STEP


28 
	#CONFIG_FLASH_STEP
 0x1000

	)

	@linux/ath79/image/lzma-loader/src/cp0regdef.h

7 #i‚de‡
_˝0ªgdef_h_


8 
	#_˝0ªgdef_h_


	)

10 
	#CP0_INDEX
 
$0


	)

11 
	#CP0_RANDOM
 
$1


	)

12 
	#CP0_ENTRYLO0
 
$2


	)

13 
	#CP0_ENTRYLO1
 
$3


	)

14 
	#CP0_CONTEXT
 
$4


	)

15 
	#CP0_PAGEMASK
 
$5


	)

16 
	#CP0_WIRED
 
$6


	)

17 
	#CP0_BADVADDR
 
$8


	)

18 
	#CP0_COUNT
 
$9


	)

19 
	#CP0_ENTRYHI
 
$10


	)

20 
	#CP0_COMPARE
 
$11


	)

21 
	#CP0_STATUS
 
$12


	)

22 
	#CP0_CAUSE
 
$13


	)

23 
	#CP0_EPC
 
$14


	)

24 
	#CP0_PRID
 
$15


	)

25 
	#CP0_CONFIG
 
$16


	)

26 
	#CP0_LLADDR
 
$17


	)

27 
	#CP0_WATCHLO
 
$18


	)

28 
	#CP0_WATCHHI
 
$19


	)

29 
	#CP0_XCONTEXT
 
$20


	)

30 
	#CP0_FRAMEMASK
 
$21


	)

31 
	#CP0_DIAGNOSTIC
 
$22


	)

32 
	#CP0_PERFORMANCE
 
$25


	)

33 
	#CP0_ECC
 
$26


	)

34 
	#CP0_CACHEERR
 
$27


	)

35 
	#CP0_TAGLO
 
$28


	)

36 
	#CP0_TAGHI
 
$29


	)

37 
	#CP0_ERROREPC
 
$30


	)

	@linux/ath79/image/lzma-loader/src/loader.c

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

25 
	~"c⁄fig.h
"

26 
	~"ˇche.h
"

27 
	~"¥ötf.h
"

28 
	~"LzmaDecode.h
"

30 
	#AR71XX_FLASH_START
 0x1f000000

	)

31 
	#AR71XX_FLASH_END
 0x1„00000

	)

33 
	#KSEG0
 0x80000000

	)

34 
	#KSEG1
 0xa0000000

	)

36 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

38 #unde‡
LZMA_DEBUG


40 #ifde‡
LZMA_DEBUG


41 
	#DBG
(
f
, 
a
...Ë
	`¥ötf
(f, ##á)

	)

43 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

46 
	#IH_MAGIC_OKLI
 0x4f4b4c49

	)

48 
	#IH_NMLEN
 32

	)

50 
	simage_hódî
 {

51 
uöt32_t
 
	mih_magic
;

52 
uöt32_t
 
	mih_h¸c
;

53 
uöt32_t
 
	mih_time
;

54 
uöt32_t
 
	mih_size
;

55 
uöt32_t
 
	mih_lﬂd
;

56 
uöt32_t
 
	mih_ï
;

57 
uöt32_t
 
	mih_d¸c
;

58 
uöt8_t
 
	mih_os
;

59 
uöt8_t
 
	mih_¨ch
;

60 
uöt8_t
 
	mih_ty≥
;

61 
uöt8_t
 
	mih_comp
;

62 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

63 } 
	timage_hódî_t
;

66 
w‹k•a˚
[];

67 
bﬂrd_öô
();

69 
CLzmaDecodîSèã
 
	glzma_°©e
;

70 *
	glzma_d©a
;

71 
	glzma_d©asize
;

72 
	glzma_outsize
;

73 
	gkî√l_œ
;

75 #ifde‡
CONFIG_KERNEL_CMDLINE


76 
	#kî√l_¨gc
 2

	)

77 c⁄° 
	gkî√l_cmdlöe
[] = 
CONFIG_KERNEL_CMDLINE
;

78 c⁄° *c⁄° 
	gkî√l_¨gv
[] = {

79 
NULL
,

80 
kî√l_cmdlöe
,

81 
NULL
,

85 
	$hÆt
()

87 
	`¥ötf
("\nSystem halted!\n");

89 
	}
}

91 
__ölöe__
 
	$gë_be32
(*
buf
)

93 *
p
 = 
buf
;

95  (((Ë
p
[0] << 24) +

96 ((Ë
p
[1] << 16) +

97 ((Ë
p
[2] << 8) +

98 (Ë
p
[3]);

99 
	}
}

101 
__ölöe__
 
	$lzma_gë_byã
()

103 
c
;

105 
lzma_d©asize
--;

106 
c
 = *
lzma_d©a
++;

108  
c
;

109 
	}
}

111 
	$lzma_öô_¥›s
()

113 
¥›s
[
LZMA_PROPERTIES_SIZE
];

114 
ªs
;

115 
i
;

118 
i
 = 0; i < 
LZMA_PROPERTIES_SIZE
; i++)

119 
¥›s
[
i
] = 
	`lzma_gë_byã
();

122 
lzma_outsize
 = ((
SizeT
Ë
	`lzma_gë_byã
()) +

123 ((
SizeT
Ë
	`lzma_gë_byã
() << 8) +

124 ((
SizeT
Ë
	`lzma_gë_byã
() << 16) +

125 ((
SizeT
Ë
	`lzma_gë_byã
() << 24);

128 
i
 = 0; i < 4; i++)

129 
	`lzma_gë_byã
();

131 
ªs
 = 
	`LzmaDecodePr›îtõs
(&
lzma_°©e
.
Pr›îtõs
, 
¥›s
,

132 
LZMA_PROPERTIES_SIZE
);

133  
ªs
;

134 
	}
}

136 
	$lzma_decom¥ess
(*
outSåóm
)

138 
SizeT
 
ù
, 
›
;

139 
ªt
;

141 
lzma_°©e
.
Probs
 = (
CProb
 *Ë
w‹k•a˚
;

143 
ªt
 = 
	`LzmaDecode
(&
lzma_°©e
, 
lzma_d©a
, 
lzma_d©asize
, &
ù
, 
outSåóm
,

144 
lzma_outsize
, &
›
);

146 i‡(
ªt
 !
LZMA_RESULT_OK
) {

147 
i
;

149 
	`DBG
("LzmaDecodeÉrror %dát %08x, osize:%d ip:%d op:%d\n",

150 
ªt
, 
lzma_d©a
 + 
ù
, 
lzma_outsize
, ip, 
›
);

152 
i
 = 0; i < 16; i++)

153 
	`DBG
("%02x ", 
lzma_d©a
[
ù
 + 
i
]);

155 
	`DBG
("\n");

158  
ªt
;

159 
	}
}

161 #i‡(
LZMA_WRAPPER
)

162 
	$lzma_öô_d©a
()

164 
_lzma_d©a_°¨t
[];

165 
_lzma_d©a_íd
[];

167 
kî√l_œ
 = 
LOADADDR
;

168 
lzma_d©a
 = 
_lzma_d©a_°¨t
;

169 
lzma_d©asize
 = 
_lzma_d©a_íd
 - 
_lzma_d©a_°¨t
;

170 
	}
}

172 
	$lzma_öô_d©a
()

174 
image_hódî
 *
hdr
 = 
NULL
;

175 *
Êash_ba£
;

176 
Êash_ofs
;

177 
kî√l_ofs
;

178 
kî√l_size
;

180 
Êash_ba£
 = (*Ë
	`KSEG1ADDR
(
AR71XX_FLASH_START
);

182 
	`¥ötf
("Looking for OpenWrt image... ");

184 
Êash_ofs
 = 
CONFIG_FLASH_OFFS
;

185 
Êash_ofs
 <(
CONFIG_FLASH_OFFS
 + 
CONFIG_FLASH_MAX
);

186 
Êash_ofs
 +
CONFIG_FLASH_STEP
) {

187 
magic
;

188 *
p
;

190 
p
 = 
Êash_ba£
 + 
Êash_ofs
;

191 
magic
 = 
	`gë_be32
(
p
);

192 i‡(
magic
 =
IH_MAGIC_OKLI
) {

193 
hdr
 = (
image_hódî
 *Ë
p
;

198 i‡(
hdr
 =
NULL
) {

199 
	`¥ötf
("not found!\n");

200 
	`hÆt
();

203 
	`¥ötf
("foundáà0x%08x\n", 
Êash_ba£
 + 
Êash_ofs
);

205 
kî√l_ofs
 = (
image_hódî
);

206 
kî√l_size
 = 
	`gë_be32
(&
hdr
->
ih_size
);

207 
kî√l_œ
 = 
	`gë_be32
(&
hdr
->
ih_lﬂd
);

209 
lzma_d©a
 = 
Êash_ba£
 + 
Êash_ofs
 + 
kî√l_ofs
;

210 
lzma_d©asize
 = 
kî√l_size
;

211 
	}
}

214 
	$lﬂdî_maö
(
ªg_a0
, 
ªg_a1
,

215 
ªg_a2
, 
ªg_a3
)

217 (*
kî√l_íåy
) (, , ,

219 
ªs
;

221 
	`bﬂrd_öô
();

223 
	`¥ötf
("\n\nOpenWrt kernelÜoader for AR7XXX/AR9XXX\n");

224 
	`¥ötf
("Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>\n");

226 
	`lzma_öô_d©a
();

228 
ªs
 = 
	`lzma_öô_¥›s
();

229 i‡(
ªs
 !
LZMA_RESULT_OK
) {

230 
	`¥ötf
("Incorrect LZMA streamÖroperties!\n");

231 
	`hÆt
();

234 
	`¥ötf
("Decompressing kernel... ");

236 
ªs
 = 
	`lzma_decom¥ess
((*Ë
kî√l_œ
);

237 i‡(
ªs
 !
LZMA_RESULT_OK
) {

238 
	`¥ötf
("failed, ");

239 
ªs
) {

240 
LZMA_RESULT_DATA_ERROR
:

241 
	`¥ötf
("dataÉrror!\n");

244 
	`¥ötf
("unknow¿îr‹ %d!\n", 
ªs
);

246 
	`hÆt
();

248 
	`¥ötf
("done!\n");

251 
	`Êush_ˇche
(
kî√l_œ
, 
lzma_outsize
);

253 
	`¥ötf
("Sèπög kî√»© %08x...\n\n", 
kî√l_œ
);

255 #ifde‡
CONFIG_KERNEL_CMDLINE


256 
ªg_a0
 = 
kî√l_¨gc
;

257 
ªg_a1
 = (Ë
kî√l_¨gv
;

258 
ªg_a2
 = 0;

259 
ªg_a3
 = 0;

262 
kî√l_íåy
 = (*Ë
kî√l_œ
;

263 
	`kî√l_íåy
(
ªg_a0
, 
ªg_a1
, 
ªg_a2
, 
ªg_a3
);

264 
	}
}

	@linux/ath79/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

14 
bﬂrd_putc
(
ch
);

17 
	#LP_MAX_BUF
 256

	)

20 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

21 
	#Ctod
(
x
Ë–(xË- '0')

	)

24 
PrötCh¨
(*, , , );

25 
PrötSåög
(*, *, , );

26 
PrötNum
(*, , , , , , , );

29 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

35 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

36 * 
¨g
,

37 *
fmt
,

38 
va_li°
 
≠
)

41 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

42 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

43 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

45 (*
ouçut
)(
¨g
, 
s
, 
l
); \

47 }

	)

49 
buf
[
LP_MAX_BUF
];

51 
c
;

52 *
s
;

53 
num
;

55 
l⁄gFœg
;

56 
√gFœg
;

57 
width
;

58 
¥ec
;

59 
œdju°
;

60 
∑dc
;

62 
Àngth
;

67 *
fmtSèπ
 = 
fmt
;

68  (*
fmt
 != '\0') && (*fmt != '%')) {

69 
fmt
 ++;

73 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

76 i‡(*
fmt
 == '\0') ;

80 
fmt
 ++;

83 i‡(*
fmt
 == 'l') {

84 
l⁄gFœg
 = 1;

85 
fmt
 ++;

87 
l⁄gFœg
 = 0;

91 
width
 = 0;

92 
¥ec
 = -1;

93 
œdju°
 = 0;

94 
∑dc
 = ' ';

96 i‡(*
fmt
 == '-') {

97 
œdju°
 = 1;

98 
fmt
 ++;

101 i‡(*
fmt
 == '0') {

102 
∑dc
 = '0';

103 
fmt
++;

106 i‡(
	`IsDigô
(*
fmt
)) {

107 
	`IsDigô
(*
fmt
)) {

108 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

112 i‡(*
fmt
 == '.') {

113 
fmt
 ++;

114 i‡(
	`IsDigô
(*
fmt
)) {

115 
¥ec
 = 0;

116 
	`IsDigô
(*
fmt
)) {

117 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

124 
√gFœg
 = 0;

125 *
fmt
) {

127 i‡(
l⁄gFœg
) {

128 
num
 = 
	`va_¨g
(
≠
, );

130 
num
 = 
	`va_¨g
(
≠
, );

132 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

133 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

138 i‡(
l⁄gFœg
) {

139 
num
 = 
	`va_¨g
(
≠
, );

141 
num
 = 
	`va_¨g
(
≠
, );

143 i‡(
num
 < 0) {

144 
num
 = -Çum;

145 
√gFœg
 = 1;

147 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

148 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

153 i‡(
l⁄gFœg
) {

154 
num
 = 
	`va_¨g
(
≠
, );

156 
num
 = 
	`va_¨g
(
≠
, );

158 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

159 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

164 i‡(
l⁄gFœg
) {

165 
num
 = 
	`va_¨g
(
≠
, );

167 
num
 = 
	`va_¨g
(
≠
, );

169 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

170 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

174 i‡(
l⁄gFœg
) {

175 
num
 = 
	`va_¨g
(
≠
, );

177 
num
 = 
	`va_¨g
(
≠
, );

179 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

180 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

184 i‡(
l⁄gFœg
) {

185 
num
 = 
	`va_¨g
(
≠
, );

187 
num
 = 
	`va_¨g
(
≠
, );

189 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

190 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

194 
c
 = ()
	`va_¨g
(
≠
, );

195 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

196 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

200 
s
 = (*)
	`va_¨g
(
≠
, *);

201 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

202 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

206 
fmt
 --;

211 
	`OUTPUT
(
¨g
, 
fmt
, 1);

214 
fmt
 ++;

218 
	`OUTPUT
(
¨g
, "\0", 1);

219 
	}
}

224 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

226 
i
;

228 i‡(
Àngth
 < 1)Üength = 1;

229 i‡(
œdju°
) {

230 *
buf
 = 
c
;

231 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

233 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

234 
buf
[
Àngth
 - 1] = 
c
;

236  
Àngth
;

237 
	}
}

240 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

242 
i
;

243 
Àn
=0;

244 * 
s1
 = 
s
;

245 *
s1
++Ë
Àn
++;

246 i‡(
Àngth
 < 
Àn
)Üength =Üen;

248 i‡(
œdju°
) {

249 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

250 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

252 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

253 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

255  
Àngth
;

256 
	}
}

259 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

260 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

272 
a˘uÆLígth
 =0;

273 *
p
 = 
buf
;

274 
i
;

277 
tmp
 = 
u
 %
ba£
;

278 i‡(
tmp
 <= 9) {

279 *
p
++ = '0' + 
tmp
;

280 } i‡(
upˇ£
) {

281 *
p
++ = 'A' + 
tmp
 - 10;

283 *
p
++ = 'a' + 
tmp
 - 10;

285 
u
 /
ba£
;

286 } 
u
 != 0);

288 i‡(
√gFœg
) {

289 *
p
++ = '-';

293 
a˘uÆLígth
 = 
p
 - 
buf
;

294 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

297 i‡(
œdju°
) {

298 
∑dc
 = ' ';

300 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

301 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

302 
buf
[
Àngth
 -1] = '-';

304 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

310 
begö
 = 0;

311 
íd
;

312 i‡(
œdju°
) {

313 
íd
 = 
a˘uÆLígth
 - 1;

315 
íd
 = 
Àngth
 -1;

318 
íd
 > 
begö
) {

319 
tmp
 = 
buf
[
begö
];

320 
buf
[
begö
] = buf[
íd
];

321 
buf
[
íd
] = 
tmp
;

322 
begö
 ++;

323 
íd
 --;

328  
Àngth
;

329 
	}
}

331 
	$¥ötf_ouçut
(*
¨g
, *
s
, 
l
)

333 
i
;

336 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

338 
i
=0; i< 
l
; i++) {

339 
	`bﬂrd_putc
(
s
[
i
]);

340 i‡(
s
[
i
] ='\n'Ë
	`bﬂrd_putc
('\r');

342 
	}
}

344 
	$¥ötf
(*
fmt
, ...)

346 
va_li°
 
≠
;

347 
	`va_°¨t
(
≠
, 
fmt
);

348 
	`Õ_Pröt
(
¥ötf_ouçut
, 0, 
fmt
, 
≠
);

349 
	`va_íd
(
≠
);

350 
	}
}

	@linux/ath79/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/brcm47xx/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 #i‚de‡
Byã


25 
	#Byã
 

	)

28 
	#kNumT›Bôs
 24

	)

29 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

31 
	#kNumBôModñTŸÆBôs
 11

	)

32 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

33 
	#kNumMoveBôs
 5

	)

35 
	s_CR™geDecodî


37 
Byã
 *
	mBuf„r
;

38 
Byã
 *
	mBuf„rLim
;

39 
UI¡32
 
	mR™ge
;

40 
UI¡32
 
	mCode
;

41 #ifde‡
_LZMA_IN_CB


42 
ILzmaInCÆlback
 *
	mInCÆlback
;

43 
	mResu…
;

45 
	mExåaByãs
;

46 } 
	tCR™geDecodî
;

48 
Byã
 
	$R™geDecodîRódByã
(
CR™geDecodî
 *
rd
)

50 i‡(
rd
->
Buf„r
 =rd->
Buf„rLim
)

52 #ifde‡
_LZMA_IN_CB


53 
UI¡32
 
size
;

54 
rd
->
Resu…
 =Ñd->
InCÆlback
->
	`Ród
‘d->InCÆlback, &rd->
Buf„r
, &
size
);

55 
rd
->
Buf„rLim
 =Ñd->
Buf„r
 + 
size
;

56 i‡(
size
 == 0)

59 
rd
->
ExåaByãs
 = 1;

63  (*
rd
->
Buf„r
++);

64 
	}
}

67 
	#RódByã
 (
	`R™geDecodîRódByã
(
rd
))

	)

69 
R™geDecodîInô
(
CR™geDecodî
 *
rd
,

70 #ifde‡
_LZMA_IN_CB


71 
ILzmaInCÆlback
 *
öCÆlback


73 
Byã
 *
°ªam
, 
UI¡32
 
buf„rSize


77 
	gi
;

78 #ifde‡
_LZMA_IN_CB


79 
	grd
->
	gInCÆlback
 = 
öCÆlback
;

80 
	grd
->
	gBuf„r
 = 
rd
->
Buf„rLim
 = 0;

82 
	grd
->
	gBuf„r
 = 
°ªam
;

83 
	grd
->
	gBuf„rLim
 = 
°ªam
 + 
buf„rSize
;

85 
	grd
->
	gExåaByãs
 = 0;

86 
	grd
->
	gCode
 = 0;

87 
	grd
->
	gR™ge
 = (0xFFFFFFFF);

88 
	gi
 = 0; i < 5; i++)

89 
	grd
->
	gCode
 = (
rd
->
Code
 << 8Ë| 
RódByã
;

92 
	#RC_INIT_VAR
 
UI¡32
 
ønge
 = 
rd
->
R™ge
; UI¡32 
code
 =Ñd->
Code
;

	)

93 
	#RC_FLUSH_VAR
 
rd
->
R™ge
 = 
ønge
;Ñd->
Code
 = 
code
;

	)

94 
	#RC_NORMALIZE
 i‡(
ønge
 < 
kT›VÆue
Ë{Ñ™gê<<8; 
code
 = (codê<< 8Ë| 
RódByã
; }

	)

96 
UI¡32
 
	$R™geDecodîDecodeDúe˘Bôs
(
CR™geDecodî
 *
rd
, 
numTŸÆBôs
)

98 
RC_INIT_VAR


99 
UI¡32
 
ªsu…
 = 0;

100 
i
;

101 
i
 = 
numTŸÆBôs
; i > 0; i--)

104 
ønge
 >>= 1;

106 
ªsu…
 <<= 1;

107 i‡(
code
 >
ønge
)

109 
code
 -
ønge
;

110 
ªsu…
 |= 1;

118 
RC_NORMALIZE


120 
RC_FLUSH_VAR


121  
ªsu…
;

122 
	}
}

124 
	$R™geDecodîBôDecode
(
CProb
 *
¥ob
, 
CR™geDecodî
 *
rd
)

126 
UI¡32
 
bound
 = (
rd
->
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *
¥ob
;

127 i‡(
rd
->
Code
 < 
bound
)

129 
rd
->
R™ge
 = 
bound
;

130 *
¥ob
 +(
kBôModñTŸÆ
 - *¥obË>> 
kNumMoveBôs
;

131 i‡(
rd
->
R™ge
 < 
kT›VÆue
)

133 
rd
->
Code
 = (rd->Codê<< 8Ë| 
RódByã
;

134 
rd
->
R™ge
 <<= 8;

140 
rd
->
R™ge
 -
bound
;

141 
rd
->
Code
 -
bound
;

142 *
¥ob
 -(*¥obË>> 
kNumMoveBôs
;

143 i‡(
rd
->
R™ge
 < 
kT›VÆue
)

145 
rd
->
Code
 = (rd->Codê<< 8Ë| 
RódByã
;

146 
rd
->
R™ge
 <<= 8;

150 
	}
}

152 
	#RC_GET_BIT2
(
¥ob
, 
mi
, 
A0
, 
A1
) \

153 
UI¡32
 
bound
 = (
ønge
 >> 
kNumBôModñTŸÆBôs
Ë* *
¥ob
; \

154 i‡(
code
 < 
bound
) \

155 { 
A0
; 
ønge
 = 
bound
; *
¥ob
 +(
kBôModñTŸÆ
 - *¥obË>> 
kNumMoveBôs
; 
mi
 <<= 1; } \

157 { 
A1
; 
ønge
 -
bound
; 
code
 -bound; *
¥ob
 -(*¥obË>> 
kNumMoveBôs
; 
mi
 = (mi + mi) + 1; } \

158 
RC_NORMALIZE


	)

160 
	#RC_GET_BIT
(
¥ob
, 
mi
Ë
	`RC_GET_BIT2
’rob, mi, ; , ;)

	)

162 
	$R™geDecodîBôTªeDecode
(
CProb
 *
¥obs
, 
numLevñs
, 
CR™geDecodî
 *
rd
)

164 
mi
 = 1;

165 
i
;

166 #ifde‡
_LZMA_LOC_OPT


167 
RC_INIT_VAR


169 
i
 = 
numLevñs
; i > 0; i--)

171 #ifde‡
_LZMA_LOC_OPT


172 
CProb
 *
¥ob
 = 
¥obs
 + 
mi
;

173 
	`RC_GET_BIT
(
¥ob
, 
mi
)

175 
mi
 = (mò+ miË+ 
	`R™geDecodîBôDecode
(
¥obs
 + mi, 
rd
);

178 #ifde‡
_LZMA_LOC_OPT


179 
RC_FLUSH_VAR


181  
mi
 - (1 << 
numLevñs
);

182 
	}
}

184 
	$R™geDecodîRevî£BôTªeDecode
(
CProb
 *
¥obs
, 
numLevñs
, 
CR™geDecodî
 *
rd
)

186 
mi
 = 1;

187 
i
;

188 
symbﬁ
 = 0;

189 #ifde‡
_LZMA_LOC_OPT


190 
RC_INIT_VAR


192 
i
 = 0; i < 
numLevñs
; i++)

194 #ifde‡
_LZMA_LOC_OPT


195 
CProb
 *
¥ob
 = 
¥obs
 + 
mi
;

196 
	`RC_GET_BIT2
(
¥ob
, 
mi
, ; , 
symbﬁ
 |(1 << 
i
))

198 
bô
 = 
	`R™geDecodîBôDecode
(
¥obs
 + 
mi
, 
rd
);

199 
mi
 = mò+ mò+ 
bô
;

200 
symbﬁ
 |(
bô
 << 
i
);

203 #ifde‡
_LZMA_LOC_OPT


204 
RC_FLUSH_VAR


206  
symbﬁ
;

207 
	}
}

209 
Byã
 
	$LzmaLôîÆDecode
(
CProb
 *
¥obs
, 
CR™geDecodî
 *
rd
)

211 
symbﬁ
 = 1;

212 #ifde‡
_LZMA_LOC_OPT


213 
RC_INIT_VAR


217 #ifde‡
_LZMA_LOC_OPT


218 
CProb
 *
¥ob
 = 
¥obs
 + 
symbﬁ
;

219 
	`RC_GET_BIT
(
¥ob
, 
symbﬁ
)

221 
symbﬁ
 = (symbﬁ + symbﬁË| 
	`R™geDecodîBôDecode
(
¥obs
 + symbﬁ, 
rd
);

224 
symbﬁ
 < 0x100);

225 #ifde‡
_LZMA_LOC_OPT


226 
RC_FLUSH_VAR


228  
symbﬁ
;

229 
	}
}

231 
Byã
 
	$LzmaLôîÆDecodeM©ch
(
CProb
 *
¥obs
, 
CR™geDecodî
 *
rd
, 
Byã
 
m©chByã
)

233 
symbﬁ
 = 1;

234 #ifde‡
_LZMA_LOC_OPT


235 
RC_INIT_VAR


239 
bô
;

240 
m©chBô
 = (
m©chByã
 >> 7) & 1;

241 
m©chByã
 <<= 1;

242 #ifde‡
_LZMA_LOC_OPT


244 
CProb
 *
¥ob
 = 
¥obs
 + ((1 + 
m©chBô
Ë<< 8Ë+ 
symbﬁ
;

245 
	`RC_GET_BIT2
(
¥ob
, 
symbﬁ
, 
bô
 = 0, bit = 1)

248 
bô
 = 
	`R™geDecodîBôDecode
(
¥obs
 + ((1 + 
m©chBô
Ë<< 8Ë+ 
symbﬁ
, 
rd
);

249 
symbﬁ
 = (symbﬁ << 1Ë| 
bô
;

251 i‡(
m©chBô
 !
bô
)

253 
symbﬁ
 < 0x100)

255 #ifde‡
_LZMA_LOC_OPT


256 
CProb
 *
¥ob
 = 
¥obs
 + 
symbﬁ
;

257 
	`RC_GET_BIT
(
¥ob
, 
symbﬁ
)

259 
symbﬁ
 = (symbﬁ + symbﬁË| 
	`R™geDecodîBôDecode
(
¥obs
 + symbﬁ, 
rd
);

265 
symbﬁ
 < 0x100);

266 #ifde‡
_LZMA_LOC_OPT


267 
RC_FLUSH_VAR


269  
symbﬁ
;

270 
	}
}

272 
	#kNumPosBôsMax
 4

	)

273 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

275 
	#kLíNumLowBôs
 3

	)

276 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

277 
	#kLíNumMidBôs
 3

	)

278 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

279 
	#kLíNumHighBôs
 8

	)

280 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

282 
	#LíChoi˚
 0

	)

283 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

284 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

285 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

286 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

287 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

289 
	$LzmaLíDecode
(
CProb
 *
p
, 
CR™geDecodî
 *
rd
, 
posSèã
)

291 if(
	`R™geDecodîBôDecode
(
p
 + 
LíChoi˚
, 
rd
) == 0)

292  
	`R™geDecodîBôTªeDecode
(
p
 + 
LíLow
 +

293 (
posSèã
 << 
kLíNumLowBôs
), kLíNumLowBôs, 
rd
);

294 if(
	`R™geDecodîBôDecode
(
p
 + 
LíChoi˚2
, 
rd
) == 0)

295  
kLíNumLowSymbﬁs
 + 
	`R™geDecodîBôTªeDecode
(
p
 + 
LíMid
 +

296 (
posSèã
 << 
kLíNumMidBôs
), kLíNumMidBôs, 
rd
);

297  
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
 +

298 
	`R™geDecodîBôTªeDecode
(
p
 + 
LíHigh
, 
kLíNumHighBôs
, 
rd
);

299 
	}
}

301 
	#kNumSèãs
 12

	)

303 
	#kSèπPosModñIndex
 4

	)

304 
	#kEndPosModñIndex
 14

	)

305 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

307 
	#kNumPosSlŸBôs
 6

	)

308 
	#kNumLíToPosSèãs
 4

	)

310 
	#kNumAlignBôs
 4

	)

311 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

313 
	#kM©chMöLí
 2

	)

315 
	#IsM©ch
 0

	)

316 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

317 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

318 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

319 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

320 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

321 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

322 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

323 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

324 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

325 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

326 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

328 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


329 
	gSt›CompûögDueBUG


332 #ifde‡
_LZMA_OUT_READ


334 
	s_LzmaV¨Sèã


336 
CR™geDecodî
 
	mR™geDecodî
;

337 
Byã
 *
	mDi˘i⁄¨y
;

338 
UI¡32
 
	mDi˘i⁄¨ySize
;

339 
UI¡32
 
	mDi˘i⁄¨yPos
;

340 
UI¡32
 
	mGlobÆPos
;

341 
UI¡32
 
	mRïs
[4];

342 
	mlc
;

343 
	mÕ
;

344 
	mpb
;

345 
	mSèã
;

346 
	mPªviousIsM©ch
;

347 
	mRemaöLí
;

348 } 
	tLzmaV¨Sèã
;

350 
LzmaDecodîInô
(

351 *
buf„r
, 
UI¡32
 
buf„rSize
,

352 
lc
, 
Õ
, 
pb
,

353 *
di˘i⁄¨y
, 
UI¡32
 
di˘i⁄¨ySize
,

354 #ifde‡
_LZMA_IN_CB


355 
ILzmaInCÆlback
 *
öCÆlback


357 *
öSåóm
, 
UI¡32
 
öSize


361 
LzmaV¨Sèã
 *
	gvs
 = (LzmaV¨Sèã *)
buf„r
;

362 
CProb
 *
	gp
 = (CProb *)(
buf„r
 + (
LzmaV¨Sèã
));

363 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
Õ
));

364 
UI¡32
 
	gi
;

365 i‡(
	gbuf„rSize
 < 
numProbs
 * (
	gCProb
Ë+ (
	gLzmaV¨Sèã
))

366  
	gLZMA_RESULT_NOT_ENOUGH_MEM
;

367 
	gvs
->
	gDi˘i⁄¨y
 = 
di˘i⁄¨y
;

368 
	gvs
->
	gDi˘i⁄¨ySize
 = 
di˘i⁄¨ySize
;

369 
	gvs
->
	gDi˘i⁄¨yPos
 = 0;

370 
	gvs
->
	gGlobÆPos
 = 0;

371 
	gvs
->
	gRïs
[0] = 
vs
->
Rïs
[1] = vs->Reps[2] = vs->Reps[3] = 1;

372 
	gvs
->
	glc
 = 
lc
;

373 
	gvs
->
	gÕ
 = 
Õ
;

374 
	gvs
->
	gpb
 = 
pb
;

375 
	gvs
->
	gSèã
 = 0;

376 
	gvs
->
	gPªviousIsM©ch
 = 0;

377 
	gvs
->
	gRemaöLí
 = 0;

378 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

379 
	gi
 = 0; i < 
	gnumProbs
; i++)

380 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

381 
R™geDecodîInô
(&
vs
->
R™geDecodî
,

382 #ifde‡
_LZMA_IN_CB


383 
öCÆlback


385 
öSåóm
, 
öSize


388  
	gLZMA_RESULT_OK
;

391 
	$LzmaDecode
(*
buf„r
,

392 *
outSåóm
, 
UI¡32
 
outSize
,

393 
UI¡32
 *
outSizePro˚s£d
)

395 
LzmaV¨Sèã
 *
vs
 = (LzmaV¨Sèã *)
buf„r
;

396 
CProb
 *
p
 = (CProb *)(
buf„r
 + (
LzmaV¨Sèã
));

397 
CR™geDecodî
 
rd
 = 
vs
->
R™geDecodî
;

398 
°©e
 = 
vs
->
Sèã
;

399 
¥eviousIsM©ch
 = 
vs
->
PªviousIsM©ch
;

400 
Byã
 
¥eviousByã
;

401 
UI¡32
 
ªp0
 = 
vs
->
Rïs
[0], 
ªp1
 = vs->Rïs[1], 
ªp2
 = vs->Rïs[2], 
ªp3
 = vs->Reps[3];

402 
UI¡32
 
nowPos
 = 0;

403 
UI¡32
 
posSèãMask
 = (1 << (
vs
->
pb
)) - 1;

404 
UI¡32
 
lôîÆPosMask
 = (1 << (
vs
->
Õ
)) - 1;

405 
lc
 = 
vs
->lc;

406 
Àn
 = 
vs
->
RemaöLí
;

407 
UI¡32
 
globÆPos
 = 
vs
->
GlobÆPos
;

409 
Byã
 *
di˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

410 
UI¡32
 
di˘i⁄¨ySize
 = 
vs
->
Di˘i⁄¨ySize
;

411 
UI¡32
 
di˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

413 i‡(
Àn
 == -1)

415 *
outSizePro˚s£d
 = 0;

416  
LZMA_RESULT_OK
;

419 
Àn
 > 0 && 
nowPos
 < 
outSize
)

421 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

422 i‡(
pos
 >
di˘i⁄¨ySize
)

423 
pos
 +
di˘i⁄¨ySize
;

424 
outSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

425 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

426 
di˘i⁄¨yPos
 = 0;

427 
Àn
--;

429 i‡(
di˘i⁄¨yPos
 == 0)

430 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

432 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

435 
	`LzmaDecode
(

436 
Byã
 *
buf„r
, 
UI¡32
 
buf„rSize
,

437 
lc
, 
Õ
, 
pb
,

438 #ifde‡
_LZMA_IN_CB


439 
ILzmaInCÆlback
 *
öCÆlback
,

441 *
öSåóm
, 
UI¡32
 
öSize
,

443 *
outSåóm
, 
UI¡32
 
outSize
,

444 
UI¡32
 *
outSizePro˚s£d
)

446 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
Õ
));

447 
CProb
 *
p
 = (CProb *)
buf„r
;

448 
CR™geDecodî
 
rd
;

449 
UI¡32
 
i
;

450 
°©e
 = 0;

451 
¥eviousIsM©ch
 = 0;

452 
Byã
 
¥eviousByã
 = 0;

453 
UI¡32
 
ªp0
 = 1, 
ªp1
 = 1, 
ªp2
 = 1, 
ªp3
 = 1;

454 
UI¡32
 
nowPos
 = 0;

455 
UI¡32
 
posSèãMask
 = (1 << 
pb
) - 1;

456 
UI¡32
 
lôîÆPosMask
 = (1 << 
Õ
) - 1;

457 
Àn
 = 0;

458 i‡(
buf„rSize
 < 
numProbs
 * (
CProb
))

459  
LZMA_RESULT_NOT_ENOUGH_MEM
;

460 
i
 = 0; i < 
numProbs
; i++)

461 
p
[
i
] = 
kBôModñTŸÆ
 >> 1;

462 
	`R™geDecodîInô
(&
rd
,

463 #ifde‡
_LZMA_IN_CB


464 
öCÆlback


466 
öSåóm
, 
öSize


471 *
outSizePro˚s£d
 = 0;

472 
nowPos
 < 
outSize
)

474 
posSèã
 = ()(

475 (
nowPos


476 #ifde‡
_LZMA_OUT_READ


477 + 
globÆPos


480 & 
posSèãMask
);

481 #ifde‡
_LZMA_IN_CB


482 i‡(
rd
.
Resu…
 !
LZMA_RESULT_OK
)

483  
rd
.
Resu…
;

485 i‡(
rd
.
ExåaByãs
 != 0)

486  
LZMA_RESULT_DATA_ERROR
;

487 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
, &
rd
) == 0)

489 
CProb
 *
¥obs
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

491 (
nowPos


492 #ifde‡
_LZMA_OUT_READ


493 + 
globÆPos


496 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

498 i‡(
°©e
 < 4) state = 0;

499 i‡(
°©e
 < 10) state -= 3;

500 
°©e
 -= 6;

501 i‡(
¥eviousIsM©ch
)

503 
Byã
 
m©chByã
;

504 #ifde‡
_LZMA_OUT_READ


505 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

506 i‡(
pos
 >
di˘i⁄¨ySize
)

507 
pos
 +
di˘i⁄¨ySize
;

508 
m©chByã
 = 
di˘i⁄¨y
[
pos
];

510 
m©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

512 
¥eviousByã
 = 
	`LzmaLôîÆDecodeM©ch
(
¥obs
, &
rd
, 
m©chByã
);

513 
¥eviousIsM©ch
 = 0;

516 
¥eviousByã
 = 
	`LzmaLôîÆDecode
(
¥obs
, &
rd
);

517 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

518 #ifde‡
_LZMA_OUT_READ


519 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

520 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

521 
di˘i⁄¨yPos
 = 0;

526 
¥eviousIsM©ch
 = 1;

527 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRï
 + 
°©e
, &
rd
) == 1)

529 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG0
 + 
°©e
, &
rd
) == 0)

531 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
, &
rd
) == 0)

533 #ifde‡
_LZMA_OUT_READ


534 
UI¡32
 
pos
;

537 (
nowPos


538 #ifde‡
_LZMA_OUT_READ


539 + 
globÆPos


543  
LZMA_RESULT_DATA_ERROR
;

544 
°©e
 = state < 7 ? 9 : 11;

545 #ifde‡
_LZMA_OUT_READ


546 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

547 i‡(
pos
 >
di˘i⁄¨ySize
)

548 
pos
 +
di˘i⁄¨ySize
;

549 
¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

550 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

551 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

552 
di˘i⁄¨yPos
 = 0;

554 
¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

556 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

562 
UI¡32
 
di°™˚
;

563 if(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG1
 + 
°©e
, &
rd
) == 0)

564 
di°™˚
 = 
ªp1
;

567 if(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG2
 + 
°©e
, &
rd
) == 0)

568 
di°™˚
 = 
ªp2
;

571 
di°™˚
 = 
ªp3
;

572 
ªp3
 = 
ªp2
;

574 
ªp2
 = 
ªp1
;

576 
ªp1
 = 
ªp0
;

577 
ªp0
 = 
di°™˚
;

579 
Àn
 = 
	`LzmaLíDecode
(
p
 + 
RïLíCodî
, &
rd
, 
posSèã
);

580 
°©e
 = state < 7 ? 8 : 11;

584 
posSlŸ
;

585 
ªp3
 = 
ªp2
;

586 
ªp2
 = 
ªp1
;

587 
ªp1
 = 
ªp0
;

588 
°©e
 = state < 7 ? 7 : 10;

589 
Àn
 = 
	`LzmaLíDecode
(
p
 + 
LíCodî
, &
rd
, 
posSèã
);

590 
posSlŸ
 = 
	`R™geDecodîBôTªeDecode
(
p
 + 
PosSlŸ
 +

591 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

592 
kNumPosSlŸBôs
), kNumPosSlŸBôs, &
rd
);

593 i‡(
posSlŸ
 >
kSèπPosModñIndex
)

595 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

596 
ªp0
 = ((2 | ((
UI¡32
)
posSlŸ
 & 1)Ë<< 
numDúe˘Bôs
);

597 i‡(
posSlŸ
 < 
kEndPosModñIndex
)

599 
ªp0
 +
	`R™geDecodîRevî£BôTªeDecode
(

600 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1, 
numDúe˘Bôs
, &
rd
);

604 
ªp0
 +
	`R™geDecodîDecodeDúe˘Bôs
(&
rd
,

605 
numDúe˘Bôs
 - 
kNumAlignBôs
) << kNumAlignBits;

606 
ªp0
 +
	`R™geDecodîRevî£BôTªeDecode
(
p
 + 
Align
, 
kNumAlignBôs
, &
rd
);

610 
ªp0
 = 
posSlŸ
;

611 
ªp0
++;

613 i‡(
ªp0
 =(
UI¡32
)(0))

616 
Àn
 = -1;

619 i‡(
ªp0
 > 
nowPos


620 #ifde‡
_LZMA_OUT_READ


621 + 
globÆPos


625  
LZMA_RESULT_DATA_ERROR
;

627 
Àn
 +
kM©chMöLí
;

630 #ifde‡
_LZMA_OUT_READ


631 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

632 i‡(
pos
 >
di˘i⁄¨ySize
)

633 
pos
 +
di˘i⁄¨ySize
;

634 
¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

635 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

636 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

637 
di˘i⁄¨yPos
 = 0;

639 
¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

641 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

642 
Àn
--;

644 
Àn
 > 0 && 
nowPos
 < 
outSize
);

648 #ifde‡
_LZMA_OUT_READ


649 
vs
->
R™geDecodî
 = 
rd
;

650 
vs
->
Di˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

651 
vs
->
GlobÆPos
 = 
globÆPos
 + 
nowPos
;

652 
vs
->
Rïs
[0] = 
ªp0
;

653 
vs
->
Rïs
[1] = 
ªp1
;

654 
vs
->
Rïs
[2] = 
ªp2
;

655 
vs
->
Rïs
[3] = 
ªp3
;

656 
vs
->
Sèã
 = 
°©e
;

657 
vs
->
PªviousIsM©ch
 = 
¥eviousIsM©ch
;

658 
vs
->
RemaöLí
 = 
Àn
;

661 *
outSizePro˚s£d
 = 
nowPos
;

662  
LZMA_RESULT_OK
;

663 
	}
}

	@linux/brcm47xx/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

38 #i‚de‡
UI¡32


39 #ifde‡
_LZMA_UINT32_IS_ULONG


40 
	#UI¡32
 

	)

42 
	#UI¡32
 

	)

46 #ifde‡
_LZMA_PROB32


47 
	#CProb
 
UI¡32


	)

49 
	#CProb
 

	)

52 
	#LZMA_RESULT_OK
 0

	)

53 
	#LZMA_RESULT_DATA_ERROR
 1

	)

54 
	#LZMA_RESULT_NOT_ENOUGH_MEM
 2

	)

56 #ifde‡
_LZMA_IN_CB


57 
	s_ILzmaInCÆlback


59 (*
	mRód
)(*
	mobje˘
, **
	mbuf„r
, 
UI¡32
 *
	mbuf„rSize
);

60 } 
	tILzmaInCÆlback
;

63 
	#LZMA_BASE_SIZE
 1846

	)

64 
	#LZMA_LIT_SIZE
 768

	)

73 #ifde‡
_LZMA_OUT_READ


74 
LzmaDecodîInô
(

75 *
buf„r
, 
UI¡32
 
buf„rSize
,

76 
lc
, 
Õ
, 
pb
,

77 *
di˘i⁄¨y
, 
UI¡32
 
di˘i⁄¨ySize
,

78 #ifde‡
_LZMA_IN_CB


79 
ILzmaInCÆlback
 *
öCÆlback


81 *
öSåóm
, 
UI¡32
 
öSize


86 
LzmaDecode
(

87 *
buf„r
,

88 #i‚de‡
_LZMA_OUT_READ


89 
UI¡32
 
buf„rSize
,

90 
lc
, 
Õ
, 
pb
,

91 #ifde‡
_LZMA_IN_CB


92 
ILzmaInCÆlback
 *
öCÆlback
,

94 *
öSåóm
, 
UI¡32
 
öSize
,

97 *
outSåóm
, 
UI¡32
 
outSize
,

98 
UI¡32
 *
outSizePro˚s£d
);

	@linux/brcm47xx/image/lzma-loader/src/decompress.c

35 
	~"LzmaDecode.h
"

37 
	#BCM4710_FLASH
 0x1fc00000

	)

39 
	#KSEG0
 0x80000000

	)

40 
	#KSEG1
 0xa0000000

	)

42 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

44 
	#Index_InvÆid©e_I
 0x00

	)

45 
	#Index_Wrôeback_Inv_D
 0x01

	)

47 
	#ˇche_uƒﬁl
(
ba£
,
›
) \

48 
__asm__
 
	`__vﬁ©ûe__
( \

55 : "r" (
ba£
), \

56 "i" (
›
));

	)

58 
__ölöe__
 
	$bœ°_iˇche
(
size
, 
lsize
)

60 
°¨t
 = 
KSEG0
;

61 
íd
 = (
°¨t
 + 
size
);

63 
°¨t
 < 
íd
) {

64 
	`ˇche_uƒﬁl
(
°¨t
,
Index_InvÆid©e_I
);

65 
°¨t
 +
lsize
;

67 
	}
}

69 
__ölöe__
 
	$bœ°_dˇche
(
size
, 
lsize
)

71 
°¨t
 = 
KSEG0
;

72 
íd
 = (
°¨t
 + 
size
);

74 
°¨t
 < 
íd
) {

75 
	`ˇche_uƒﬁl
(
°¨t
,
Index_Wrôeback_Inv_D
);

76 
°¨t
 +
lsize
;

78 
	}
}

80 
	#TRX_MAGIC
 0x30524448

	)

82 
	såx_hódî
 {

83 
	mmagic
;

84 
	mÀn
;

85 
	m¸c32
;

86 
	mÊag_vîsi⁄
;

87 
	moff£ts
[3];

90 
	#EDIMAX_PS_HEADER_MAGIC
 0x36315350

	)

91 
	#EDIMAX_PS_HEADER_LEN
 0x¯

	)

94 
w‹k•a˚
[];

96 
	goff£t
;

97 *
	gd©a
;

101 
	$ªad_byã
(*
obje˘
, **
buf„r
, 
UI¡32
 *
buf„rSize
)

103 
vÆ
;

105 i‡((()
off£t
 % 4) == 0) {

106 
vÆ
 = *(*)
d©a
;

107 
d©a
 += 4;

110 *
buf„rSize
 = 1;

111 *
buf„r
 = ((*)&
vÆ
Ë+ (
off£t
++ & 3);

113  
LZMA_RESULT_OK
;

114 
	}
}

116 
__ölöe__
 
	$gë_byã
()

118 *
buf„r
;

119 
UI¡32
 
Áke
;

121  
	`ªad_byã
(0, &
buf„r
, &
Áke
), *buffer;

122 
	}
}

125 
	$íåy
(
iˇche_size
, 
iˇche_lsize
,

126 
dˇche_size
, 
dˇche_lsize
,

127 
fw_¨g0
, 
fw_¨g1
,

128 
fw_¨g2
, 
fw_¨g3
)

130 
i
;

131 
lc
;

132 
Õ
;

133 
pb
;

134 
osize
;

136 
ILzmaInCÆlback
 
ˇŒback
;

137 
ˇŒback
.
Ród
 = 
ªad_byã
;

140 
d©a
 = ((*Ë
	`KSEG1ADDR
(
BCM4710_FLASH
));

141 ((
åx_hódî
 *)
d©a
)->
magic
 !
TRX_MAGIC
 &&

142 ((
åx_hódî
 *)
d©a
)->
magic
 !
EDIMAX_PS_HEADER_MAGIC
;

143 
d©a
 += 65536);

145 i‡(((
åx_hódî
 *)
d©a
)->
magic
 =
EDIMAX_PS_HEADER_MAGIC
)

146 
d©a
 +
EDIMAX_PS_HEADER_LEN
;

148 i‡(((
åx_hódî
 *)
d©a
)->
off£ts
[1] > 65536)

149 
d©a
 +((
åx_hódî
 *)d©a)->
off£ts
[0];

151 
d©a
 +((
åx_hódî
 *)d©a)->
off£ts
[1];

153 
off£t
 = 0;

156 
i
 = 
	`gë_byã
();

157 
lc
 = 
i
 % 9, i = i / 9;

158 
Õ
 = 
i
 % 5, 
pb
 = i / 5;

161 
i
 = 0; i < 4; i++)

162 
	`gë_byã
();

165 
osize
 = (()
	`gë_byã
()) +

166 (()
	`gë_byã
() << 8) +

167 (()
	`gë_byã
() << 16) +

168 (()
	`gë_byã
() << 24);

171 
i
 = 0; i < 4; i++)

172 
	`gë_byã
();

175 i‡(
	`LzmaDecode
(
w‹k•a˚
, ~0, 
lc
, 
Õ
, 
pb
, &
ˇŒback
,

176 (*)
LOADADDR
, 
osize
, &
i
Ë=
LZMA_RESULT_OK
)

178 
	`bœ°_dˇche
(
dˇche_size
, 
dˇche_lsize
);

179 
	`bœ°_iˇche
(
iˇche_size
, 
iˇche_lsize
);

183 )Ë
LOADADDR
)(
fw_¨g0
, 
fw_¨g1
, 
fw_¨g2
,

184 
fw_¨g3
);

186 
	}
}

	@linux/brcm63xx/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 
	#kNumT›Bôs
 24

	)

25 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

27 
	#kNumBôModñTŸÆBôs
 11

	)

28 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

29 
	#kNumMoveBôs
 5

	)

31 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

33 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

34 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

36 #ifde‡
_LZMA_IN_CB


38 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

39 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

40 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

42 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

46 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

48 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

52 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

54 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

55 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

56 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

58 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

59 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

60 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

62 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

64 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

65 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

66 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

67 
ªs
 -(1 << 
numLevñs
); }

	)

70 
	#kNumPosBôsMax
 4

	)

71 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

73 
	#kLíNumLowBôs
 3

	)

74 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

75 
	#kLíNumMidBôs
 3

	)

76 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

77 
	#kLíNumHighBôs
 8

	)

78 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

80 
	#LíChoi˚
 0

	)

81 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

82 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

83 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

84 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

85 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

88 
	#kNumSèãs
 12

	)

89 
	#kNumLôSèãs
 7

	)

91 
	#kSèπPosModñIndex
 4

	)

92 
	#kEndPosModñIndex
 14

	)

93 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

95 
	#kNumPosSlŸBôs
 6

	)

96 
	#kNumLíToPosSèãs
 4

	)

98 
	#kNumAlignBôs
 4

	)

99 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

101 
	#kM©chMöLí
 2

	)

103 
	#IsM©ch
 0

	)

104 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

105 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

106 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

107 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

108 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

109 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

110 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

111 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

112 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

113 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

114 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

116 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


117 
	gSt›CompûögDueBUG


120 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

122 
¥›0
;

123 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

124  
LZMA_RESULT_DATA_ERROR
;

125 
¥›0
 = 
¥›sD©a
[0];

126 i‡(
¥›0
 >= (9 * 5 * 5))

127  
LZMA_RESULT_DATA_ERROR
;

129 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

130 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

131 
¥›sRes
->
lc
 = 
¥›0
;

140 #ifde‡
_LZMA_OUT_READ


142 
i
;

143 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

144 
i
 = 0; i < 4; i++)

145 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

146 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

147 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

150  
LZMA_RESULT_OK
;

151 
	}
}

153 
	#kLzmaSåómWasFöishedId
 (-1)

	)

155 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

156 #ifde‡
_LZMA_IN_CB


157 
ILzmaInCÆlback
 *
InCÆlback
,

159 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

161 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

163 
CProb
 *
	gp
 = 
vs
->
Probs
;

164 
SizeT
 
	gnowPos
 = 0;

165 
Byã
 
	g¥eviousByã
 = 0;

166 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

167 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

168 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

170 #ifde‡
_LZMA_OUT_READ


172 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

173 
UI¡32
 
	gCode
 = 
vs
->
Code
;

174 #ifde‡
_LZMA_IN_CB


175 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

176 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

178 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

179 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

181 
	g°©e
 = 
vs
->
Sèã
;

182 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

183 
	gÀn
 = 
vs
->
RemaöLí
;

184 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

185 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

187 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

188 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

189 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

191 
Byã
 
	gãmpDi˘i⁄¨y
[4];

193 #i‚de‡
_LZMA_IN_CB


194 *
	göSizePro˚s£d
 = 0;

196 *
	goutSizePro˚s£d
 = 0;

197 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

198  
LZMA_RESULT_OK
;

200 i‡(
	gdi˘i⁄¨ySize
 == 0)

202 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

203 
	gdi˘i⁄¨ySize
 = 1;

204 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

207 i‡(
	gÀn
 =
kLzmaNìdInôId
)

210 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

211 
UI¡32
 
	gi
;

212 
	gi
 = 0; i < 
	gnumProbs
; i++)

213 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

214 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

215 
	g°©e
 = 0;

216 
	gglobÆPos
 = 0;

217 
	gdi°™˚Limô
 = 0;

218 
	gdi˘i⁄¨yPos
 = 0;

219 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

220 #ifde‡
_LZMA_IN_CB


221 
	gRC_INIT
;

223 
RC_INIT
(
öSåóm
, 
öSize
);

226 
	gÀn
 = 0;

228 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

230 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

231 i‡(
	gpos
 >
di˘i⁄¨ySize
)

232 
pos
 +
di˘i⁄¨ySize
;

233 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

234 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

235 
di˘i⁄¨yPos
 = 0;

236 
	gÀn
--;

238 i‡(
	gdi˘i⁄¨yPos
 == 0)

239 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

241 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

245 
	g°©e
 = 0;

246 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

247 
	gÀn
 = 0;

248 c⁄° 
Byã
 *
	gBuf„r
;

249 c⁄° 
Byã
 *
	gBuf„rLim
;

250 
UI¡32
 
	gR™ge
;

251 
UI¡32
 
	gCode
;

253 #i‚de‡
_LZMA_IN_CB


254 *
	göSizePro˚s£d
 = 0;

256 *
	goutSizePro˚s£d
 = 0;

259 
UI¡32
 
	gi
;

260 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

261 
	gi
 = 0; i < 
	gnumProbs
; i++)

262 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

265 #ifde‡
_LZMA_IN_CB


266 
	gRC_INIT
;

268 
RC_INIT
(
öSåóm
, 
öSize
);

273 
	gnowPos
 < 
	goutSize
)

275 
CProb
 *
	g¥ob
;

276 
UI¡32
 
	gbound
;

277 
	gposSèã
 = ()(

278 (
nowPos


279 #ifde‡
_LZMA_OUT_READ


280 + 
globÆPos


283 & 
posSèãMask
);

285 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

286 
IfBô0
(
¥ob
)

288 
	gsymbﬁ
 = 1;

289 
Upd©eBô0
(
¥ob
)

290 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

292 (
nowPos


293 #ifde‡
_LZMA_OUT_READ


294 + 
globÆPos


297 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

299 i‡(
	g°©e
 >
kNumLôSèãs
)

301 
m©chByã
;

302 #ifde‡
_LZMA_OUT_READ


303 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

304 i‡(
	gpos
 >
di˘i⁄¨ySize
)

305 
pos
 +
di˘i⁄¨ySize
;

306 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

308 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

312 
	gbô
;

313 
CProb
 *
	g¥obLô
;

314 
	gm©chByã
 <<= 1;

315 
	gbô
 = (
m©chByã
 & 0x100);

316 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

317 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

319 
	gsymbﬁ
 < 0x100);

321 
	gsymbﬁ
 < 0x100)

323 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

324 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

326 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

328 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

329 #ifde‡
_LZMA_OUT_READ


330 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

331 
	gdi°™˚Limô
++;

333 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

334 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

335 
di˘i⁄¨yPos
 = 0;

337 i‡(
	g°©e
 < 4) state = 0;

338 i‡(
	g°©e
 < 10) state -= 3;

339 
	g°©e
 -= 6;

343 
Upd©eBô1
(
¥ob
);

344 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

345 
IfBô0
(
¥ob
)

347 
Upd©eBô0
(
¥ob
);

348 
	gªp3
 = 
ªp2
;

349 
	gªp2
 = 
ªp1
;

350 
	gªp1
 = 
ªp0
;

351 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

352 
	g¥ob
 = 
p
 + 
LíCodî
;

356 
Upd©eBô1
(
¥ob
);

357 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

358 
IfBô0
(
¥ob
)

360 
Upd©eBô0
(
¥ob
);

361 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

362 
IfBô0
(
¥ob
)

364 #ifde‡
_LZMA_OUT_READ


365 
UI¡32
 
	gpos
;

367 
Upd©eBô0
(
¥ob
);

369 #ifde‡
_LZMA_OUT_READ


370 i‡(
	gdi°™˚Limô
 == 0)

372 i‡(
nowPos
 == 0)

374  
LZMA_RESULT_DATA_ERROR
;

376 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

377 #ifde‡
_LZMA_OUT_READ


378 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

379 i‡(
	gpos
 >
di˘i⁄¨ySize
)

380 
pos
 +
di˘i⁄¨ySize
;

381 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

382 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

383 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

384 
di˘i⁄¨yPos
 = 0;

386 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

388 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

389 #ifde‡
_LZMA_OUT_READ


390 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

391 
	gdi°™˚Limô
++;

398 
Upd©eBô1
(
¥ob
);

403 
UI¡32
 
	gdi°™˚
;

404 
Upd©eBô1
(
¥ob
);

405 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

406 
IfBô0
(
¥ob
)

408 
Upd©eBô0
(
¥ob
);

409 
	gdi°™˚
 = 
ªp1
;

413 
Upd©eBô1
(
¥ob
);

414 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

415 
IfBô0
(
¥ob
)

417 
Upd©eBô0
(
¥ob
);

418 
	gdi°™˚
 = 
ªp2
;

422 
Upd©eBô1
(
¥ob
);

423 
	gdi°™˚
 = 
ªp3
;

424 
	gªp3
 = 
ªp2
;

426 
	gªp2
 = 
ªp1
;

428 
	gªp1
 = 
ªp0
;

429 
	gªp0
 = 
di°™˚
;

431 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

432 
	g¥ob
 = 
p
 + 
RïLíCodî
;

435 
	gnumBôs
, 
	goff£t
;

436 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

437 
IfBô0
(
¥obLí
)

439 
Upd©eBô0
(
¥obLí
);

440 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

441 
	goff£t
 = 0;

442 
	gnumBôs
 = 
kLíNumLowBôs
;

446 
Upd©eBô1
(
¥obLí
);

447 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

448 
IfBô0
(
¥obLí
)

450 
Upd©eBô0
(
¥obLí
);

451 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

452 
	goff£t
 = 
kLíNumLowSymbﬁs
;

453 
	gnumBôs
 = 
kLíNumMidBôs
;

457 
Upd©eBô1
(
¥obLí
);

458 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

459 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

460 
	gnumBôs
 = 
kLíNumHighBôs
;

463 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

464 
	gÀn
 +
off£t
;

467 i‡(
	g°©e
 < 4)

469 
	gposSlŸ
;

470 
	g°©e
 +
kNumLôSèãs
;

471 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

472 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

473 
kNumPosSlŸBôs
);

474 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

475 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

477 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

478 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

479 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

481 
	gªp0
 <<
numDúe˘Bôs
;

482 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

486 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

489 
RC_NORMALIZE


490 
	gR™ge
 >>= 1;

491 
	gªp0
 <<= 1;

492 i‡(
	gCode
 >
R™ge
)

494 
Code
 -
R™ge
;

495 
	gªp0
 |= 1;

498 --
	gnumDúe˘Bôs
 != 0);

499 
	g¥ob
 = 
p
 + 
Align
;

500 
	gªp0
 <<
kNumAlignBôs
;

501 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

504 
	gi
 = 1;

505 
	gmi
 = 1;

508 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

509 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

510 
	gi
 <<= 1;

512 --
	gnumDúe˘Bôs
 != 0);

516 
	gªp0
 = 
posSlŸ
;

517 i‡(++
	gªp0
 =(
UI¡32
)(0))

520 
Àn
 = 
kLzmaSåómWasFöishedId
;

525 
	gÀn
 +
kM©chMöLí
;

526 #ifde‡
_LZMA_OUT_READ


527 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

529 i‡(
	gªp0
 > 
	gnowPos
)

531  
	gLZMA_RESULT_DATA_ERROR
;

533 #ifde‡
_LZMA_OUT_READ


534 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

535 
	gdi°™˚Limô
 +
Àn
;

537 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

542 #ifde‡
_LZMA_OUT_READ


543 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

544 i‡(
	gpos
 >
di˘i⁄¨ySize
)

545 
pos
 +
di˘i⁄¨ySize
;

546 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

547 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

548 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

549 
di˘i⁄¨yPos
 = 0;

551 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

553 
	gÀn
--;

554 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

556 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

559 
	gRC_NORMALIZE
;

561 #ifde‡
_LZMA_OUT_READ


562 
	gvs
->
	gR™ge
 = 
R™ge
;

563 
	gvs
->
	gCode
 = 
Code
;

564 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

565 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

566 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

567 
	gvs
->
	gRïs
[0] = 
ªp0
;

568 
	gvs
->
	gRïs
[1] = 
ªp1
;

569 
	gvs
->
	gRïs
[2] = 
ªp2
;

570 
	gvs
->
	gRïs
[3] = 
ªp3
;

571 
	gvs
->
	gSèã
 = 
°©e
;

572 
	gvs
->
	gRemaöLí
 = 
Àn
;

573 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

576 #ifde‡
_LZMA_IN_CB


577 
	gvs
->
	gBuf„r
 = 
Buf„r
;

578 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

580 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

582 *
	goutSizePro˚s£d
 = 
nowPos
;

583  
	gLZMA_RESULT_OK
;

	@linux/brcm63xx/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

25 
	~"LzmaTy≥s.h
"

40 #ifde‡
_LZMA_PROB32


41 
	#CProb
 
UI¡32


	)

43 
	#CProb
 
UI¡16


	)

46 
	#LZMA_RESULT_OK
 0

	)

47 
	#LZMA_RESULT_DATA_ERROR
 1

	)

49 #ifde‡
_LZMA_IN_CB


50 
	s_ILzmaInCÆlback


52 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

53 } 
	tILzmaInCÆlback
;

56 
	#LZMA_BASE_SIZE
 1846

	)

57 
	#LZMA_LIT_SIZE
 768

	)

59 
	#LZMA_PROPERTIES_SIZE
 5

	)

61 
	s_CLzmaPr›îtõs


63 
	mlc
;

64 
	mÕ
;

65 
	mpb
;

66 #ifde‡
_LZMA_OUT_READ


67 
UI¡32
 
	mDi˘i⁄¨ySize
;

69 }
	tCLzmaPr›îtõs
;

71 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

73 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

75 
	#kLzmaNìdInôId
 (-2)

	)

77 
	s_CLzmaDecodîSèã


79 
CLzmaPr›îtõs
 
	mPr›îtõs
;

80 
CProb
 *
	mProbs
;

82 #ifde‡
_LZMA_IN_CB


83 c⁄° *
	mBuf„r
;

84 c⁄° *
	mBuf„rLim
;

87 #ifde‡
_LZMA_OUT_READ


88 *
	mDi˘i⁄¨y
;

89 
UI¡32
 
	mR™ge
;

90 
UI¡32
 
	mCode
;

91 
UI¡32
 
	mDi˘i⁄¨yPos
;

92 
UI¡32
 
	mGlobÆPos
;

93 
UI¡32
 
	mDi°™˚Limô
;

94 
UI¡32
 
	mRïs
[4];

95 
	mSèã
;

96 
	mRemaöLí
;

97 
	mTempDi˘i⁄¨y
[4];

99 } 
	tCLzmaDecodîSèã
;

101 #ifde‡
_LZMA_OUT_READ


102 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

105 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

106 #ifde‡
_LZMA_IN_CB


107 
ILzmaInCÆlback
 *
öCÆlback
,

109 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

111 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/brcm63xx/image/lzma-loader/src/LzmaTypes.h

10 #i‚de‡
__LZMATYPES_H


11 
	#__LZMATYPES_H


	)

13 #i‚de‡
_7ZIP_BYTE_DEFINED


14 
	#_7ZIP_BYTE_DEFINED


	)

15 
	tByã
;

18 #i‚de‡
_7ZIP_UINT16_DEFINED


19 
	#_7ZIP_UINT16_DEFINED


	)

20 
	tUI¡16
;

23 #i‚de‡
_7ZIP_UINT32_DEFINED


24 
	#_7ZIP_UINT32_DEFINED


	)

25 #ifde‡
_LZMA_UINT32_IS_ULONG


26 
	tUI¡32
;

28 
	tUI¡32
;

35 #i‚de‡
_7ZIP_SIZET_DEFINED


36 
	#_7ZIP_SIZET_DEFINED


	)

37 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


38 
UI¡32
 
	tSizeT
;

40 
	~<°ddef.h
>

41 
size_t
 
	tSizeT
;

	@linux/brcm63xx/image/lzma-loader/src/board.c

11 
	~<°ddef.h
>

12 
	~"c⁄fig.h
"

13 
	~"˝0ªgdef.h
"

15 
	#READREG
(
r
Ë*(vﬁ©ûê*)‘)

	)

16 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê*)‘Ë
	)
v

18 
	#UART_IR_REG
 0x10

	)

19 
	#UART_FIFO_REG
 0x14

	)

21 
	gu¨t_ba£
;

23 
	$waô_x„ªd
()

25 
vÆ
;

28 
vÆ
 = 
	`READREG
(
u¨t_ba£
 + 
UART_IR_REG
);

29 i‡(
vÆ
 & (1 << 5))

32 
	}
}

34 
	$bﬂrd_putc
(
ch
)

36 i‡(!
u¨t_ba£
)

39 
	`waô_x„ªd
();

40 
	`WRITEREG
(
u¨t_ba£
 + 
UART_FIFO_REG
, 
ch
);

41 
	`waô_x„ªd
();

42 
	}
}

44 
	#PRID_IMP_BMIPS32_REV4
 0x4000

	)

45 
	#PRID_IMP_BMIPS32_REV8
 0x8000

	)

46 
	#PRID_IMP_BMIPS3300
 0x9000

	)

47 
	#PRID_IMP_BMIPS3300_ALT
 0x9100

	)

48 
	#PRID_IMP_BMIPS3300_BUG
 0x0000

	)

49 
	#PRID_IMP_BMIPS43XX
 0xa000

	)

51 
	$bﬂrd_öô
()

53 
¥id
, 
chùid
, 
chùid_ªg
;

55 
¥id
 = 
	`ªad_32bô_c0_ªgi°î
(
$15
, 0);

57 
¥id
 & 0xff00) {

58 
PRID_IMP_BMIPS32_REV4
:

59 
PRID_IMP_BMIPS32_REV8
:

60 
PRID_IMP_BMIPS3300_ALT
:

61 
PRID_IMP_BMIPS3300_BUG
:

62 
chùid_ªg
 = 0xfffe0000;

64 
PRID_IMP_BMIPS3300
:

65 i‡((
¥id
 & 0xff) >= 0x33)

66 
chùid_ªg
 = 0xb0000000;

68 
chùid_ªg
 = 0xfffe0000;

70 
PRID_IMP_BMIPS43XX
:

71 i‡((
¥id
 & 0xff) == 0x04)

72 
chùid_ªg
 = 0xfff8c000;

73 i‡((
¥id
 & 0xff) == 0x70)

75 i‡((
¥id
 & 0xff) >= 0x30)

76 
chùid_ªg
 = 0xb0000000;

78 
chùid_ªg
 = 0xfffe0000;

84 
chùid
 = 
	`READREG
(
chùid_ªg
);

86 
chùid
 >> 16) {

94 
u¨t_ba£
 = 
chùid_ªg
 + 0x100;

98 
u¨t_ba£
 = 
chùid_ªg
 + 0x180;

101 
u¨t_ba£
 = 
chùid_ªg
 + 0x200;

106 
u¨t_ba£
 = 
chùid_ªg
 + 0x300;

111 
	}
}

	@linux/brcm63xx/image/lzma-loader/src/cache.c

16 
	~"ˇche.h
"

17 
	~"ˇche›s.h
"

18 
	~"c⁄fig.h
"

19 
	~"¥ötf.h
"

21 
	#ˇche_›
(
›
,
addr
) \

22 
__asm__
 
	`__vﬁ©ûe__
( \

29 : "i" (
›
), "R" (*(*)(
addr
)))

	)

31 
	$Êush_ˇche
(
°¨t_addr
, 
size
)

33 
lsize
 = 
CONFIG_CACHELINE_SIZE
;

34 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

35 
´nd
 = (
°¨t_addr
 + 
size
 + (
lsize
 - 1)) & ~(lsize - 1);

37 
	`¥ötf
("bœ°ög from 0x%08xÅÿ0x%08x (0x%08x - 0x%08x)\n", 
°¨t_addr
, 
size
, 
addr
, 
´nd
);

40 
	`ˇche_›
(
Hô_Wrôeback_Inv_D
, 
addr
);

41 
	`ˇche_›
(
Hô_InvÆid©e_I
, 
addr
);

42 i‡(
addr
 =
´nd
)

44 
addr
 +
lsize
;

46 
	}
}

	@linux/brcm63xx/image/lzma-loader/src/cache.h

12 #i‚de‡
__CACHE_H


13 
	#__CACHE_H


	)

15 
Êush_ˇche
(
°¨t_addr
, 
size
);

	@linux/brcm63xx/image/lzma-loader/src/cacheops.h

11 #i‚def 
__ASM_CACHEOPS_H


12 
	#__ASM_CACHEOPS_H


	)

17 
	#Index_InvÆid©e_I
 0x00

	)

18 
	#Index_Wrôeback_Inv_D
 0x01

	)

19 
	#Index_Lﬂd_Tag_I
 0x04

	)

20 
	#Index_Lﬂd_Tag_D
 0x05

	)

21 
	#Index_St‹e_Tag_I
 0x08

	)

22 
	#Index_St‹e_Tag_D
 0x09

	)

23 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

24 
	#Hô_InvÆid©e_I
 0x00

	)

26 
	#Hô_InvÆid©e_I
 0x10

	)

28 
	#Hô_InvÆid©e_D
 0x11

	)

29 
	#Hô_Wrôeback_Inv_D
 0x15

	)

34 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

35 
	#Fûl
 0x14

	)

36 
	#Hô_Wrôeback_I
 0x18

	)

37 
	#Hô_Wrôeback_D
 0x19

	)

42 
	#Index_InvÆid©e_SI
 0x02

	)

43 
	#Index_Wrôeback_Inv_SD
 0x03

	)

44 
	#Index_Lﬂd_Tag_SI
 0x06

	)

45 
	#Index_Lﬂd_Tag_SD
 0x07

	)

46 
	#Index_St‹e_Tag_SI
 0x0A

	)

47 
	#Index_St‹e_Tag_SD
 0x0B

	)

48 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

49 
	#Hô_InvÆid©e_SI
 0x12

	)

50 
	#Hô_InvÆid©e_SD
 0x13

	)

51 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

52 
	#Hô_Wrôeback_SD
 0x1b

	)

53 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

54 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

59 
	#R5K_Page_InvÆid©e_S
 0x17

	)

64 
	#Page_InvÆid©e_T
 0x16

	)

72 
	#Index_Wrôeback_Inv_S
 0x03

	)

73 
	#Index_Lﬂd_Tag_S
 0x07

	)

74 
	#Index_St‹e_Tag_S
 0x0B

	)

75 
	#Hô_InvÆid©e_S
 0x13

	)

76 
	#Cache_B¨rõr
 0x14

	)

77 
	#Hô_Wrôeback_Inv_S
 0x17

	)

78 
	#Index_Lﬂd_D©a_I
 0x18

	)

79 
	#Index_Lﬂd_D©a_D
 0x19

	)

80 
	#Index_Lﬂd_D©a_S
 0x1b

	)

81 
	#Index_St‹e_D©a_I
 0x1c

	)

82 
	#Index_St‹e_D©a_D
 0x1d

	)

83 
	#Index_St‹e_D©a_S
 0x1f

	)

	@linux/brcm63xx/image/lzma-loader/src/config.h

12 #i‚de‡
_CONFIG_H_


13 
	#_CONFIG_H_


	)

15 
	#CONFIG_ICACHE_SIZE
 (32 * 1024)

	)

16 
	#CONFIG_DCACHE_SIZE
 (32 * 1024)

	)

17 
	#CONFIG_CACHELINE_SIZE
 16

	)

19 #i‚de‡
CONFIG_FLASH_OFFS


20 
	#CONFIG_FLASH_OFFS
 0

	)

23 #i‚de‡
CONFIG_FLASH_MAX


24 
	#CONFIG_FLASH_MAX
 0

	)

27 #i‚de‡
CONFIG_FLASH_STEP


28 
	#CONFIG_FLASH_STEP
 0x1000

	)

	@linux/brcm63xx/image/lzma-loader/src/cp0regdef.h

7 #i‚de‡
_˝0ªgdef_h_


8 
	#_˝0ªgdef_h_


	)

10 
	#CP0_INDEX
 
$0


	)

11 
	#CP0_RANDOM
 
$1


	)

12 
	#CP0_ENTRYLO0
 
$2


	)

13 
	#CP0_ENTRYLO1
 
$3


	)

14 
	#CP0_CONTEXT
 
$4


	)

15 
	#CP0_PAGEMASK
 
$5


	)

16 
	#CP0_WIRED
 
$6


	)

17 
	#CP0_BADVADDR
 
$8


	)

18 
	#CP0_COUNT
 
$9


	)

19 
	#CP0_ENTRYHI
 
$10


	)

20 
	#CP0_COMPARE
 
$11


	)

21 
	#CP0_STATUS
 
$12


	)

22 
	#CP0_CAUSE
 
$13


	)

23 
	#CP0_EPC
 
$14


	)

24 
	#CP0_PRID
 
$15


	)

25 
	#CP0_CONFIG
 
$16


	)

26 
	#CP0_LLADDR
 
$17


	)

27 
	#CP0_WATCHLO
 
$18


	)

28 
	#CP0_WATCHHI
 
$19


	)

29 
	#CP0_XCONTEXT
 
$20


	)

30 
	#CP0_FRAMEMASK
 
$21


	)

31 
	#CP0_DIAGNOSTIC
 
$22


	)

32 
	#CP0_PERFORMANCE
 
$25


	)

33 
	#CP0_ECC
 
$26


	)

34 
	#CP0_CACHEERR
 
$27


	)

35 
	#CP0_TAGLO
 
$28


	)

36 
	#CP0_TAGHI
 
$29


	)

37 
	#CP0_ERROREPC
 
$30


	)

39 
	#ªad_32bô_c0_ªgi°î
(
ªg
,
£l
) \

40 ({ 
__ªs
; \

41 i‡(
£l
 == 0) \

42 
__asm__
 
	`__vﬁ©ûe__
( \

44 : "Ù" (
__ªs
)); \

46 
__asm__
 
	`__vﬁ©ûe__
( \

50 : "Ù" (
__ªs
)); \

51 
__ªs
; \

52 })

	)

	@linux/brcm63xx/image/lzma-loader/src/loader.c

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

25 
	~"c⁄fig.h
"

26 
	~"ˇche.h
"

27 
	~"¥ötf.h
"

28 
	~"LzmaDecode.h
"

30 
	#KSEG0
 0x80000000

	)

31 
	#KSEG1
 0xa0000000

	)

33 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

35 #unde‡
LZMA_DEBUG


37 #ifde‡
LZMA_DEBUG


38 
	#DBG
(
f
, 
a
...Ë
	`¥ötf
(f, ##á)

	)

40 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

44 
w‹k•a˚
[];

47 
bﬂrd_öô
();

49 
CLzmaDecodîSèã
 
	glzma_°©e
;

50 *
	glzma_d©a
;

51 
	glzma_d©asize
;

52 
	glzma_outsize
;

53 
	gkî√l_œ
;

55 
	$hÆt
()

57 
	`¥ötf
("\nSystem halted!\n");

59 
	}
}

61 
__ölöe__
 
	$lzma_gë_byã
()

63 
c
;

65 
lzma_d©asize
--;

66 
c
 = *
lzma_d©a
++;

68  
c
;

69 
	}
}

71 
	$lzma_öô_¥›s
()

73 
¥›s
[
LZMA_PROPERTIES_SIZE
];

74 
ªs
;

75 
i
;

78 
i
 = 0; i < 
LZMA_PROPERTIES_SIZE
; i++)

79 
¥›s
[
i
] = 
	`lzma_gë_byã
();

82 
lzma_outsize
 = ((
SizeT
Ë
	`lzma_gë_byã
()) +

83 ((
SizeT
Ë
	`lzma_gë_byã
() << 8) +

84 ((
SizeT
Ë
	`lzma_gë_byã
() << 16) +

85 ((
SizeT
Ë
	`lzma_gë_byã
() << 24);

88 
i
 = 0; i < 4; i++)

89 
	`lzma_gë_byã
();

91 
ªs
 = 
	`LzmaDecodePr›îtõs
(&
lzma_°©e
.
Pr›îtõs
, 
¥›s
,

92 
LZMA_PROPERTIES_SIZE
);

93  
ªs
;

94 
	}
}

96 
	$lzma_decom¥ess
(*
outSåóm
)

98 
SizeT
 
ù
, 
›
;

99 
ªt
;

101 
lzma_°©e
.
Probs
 = (
CProb
 *Ë
w‹k•a˚
;

103 
ªt
 = 
	`LzmaDecode
(&
lzma_°©e
, 
lzma_d©a
, 
lzma_d©asize
, &
ù
, 
outSåóm
,

104 
lzma_outsize
, &
›
);

106 i‡(
ªt
 !
LZMA_RESULT_OK
) {

107 
i
;

109 
	`DBG
("LzmaDecodeÉrror %dát %08x, osize:%d ip:%d op:%d\n",

110 
ªt
, 
lzma_d©a
 + 
ù
, 
lzma_outsize
, ip, 
›
);

112 
i
 = 0; i < 16; i++)

113 
	`DBG
("%02x ", 
lzma_d©a
[
ù
 + 
i
]);

115 
	`DBG
("\n");

118  
ªt
;

119 
	}
}

121 
	$lzma_öô_d©a
()

123 
_lzma_d©a_°¨t
[];

124 
_lzma_d©a_íd
[];

126 
kî√l_œ
 = 
LOADADDR
;

127 
lzma_d©a
 = 
_lzma_d©a_°¨t
;

128 
lzma_d©asize
 = 
_lzma_d©a_íd
 - 
_lzma_d©a_°¨t
;

129 
	}
}

131 
	$lﬂdî_maö
(
ªg_a0
, 
ªg_a1
,

132 
ªg_a2
, 
ªg_a3
)

134 (*
kî√l_íåy
) (, , ,

136 
ªs
;

138 
	`bﬂrd_öô
();

140 
	`¥ötf
("\n\nOpenWrt kernelÜoader for BCM63XX\n");

141 
	`¥ötf
("Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>\n");

142 
	`¥ötf
("Copyright (C) 2014 Jonas Gorski <jogo@openwrt.org>\n");

144 
	`lzma_öô_d©a
();

146 
ªs
 = 
	`lzma_öô_¥›s
();

147 i‡(
ªs
 !
LZMA_RESULT_OK
) {

148 
	`¥ötf
("Incorrect LZMA streamÖroperties!\n");

149 
	`hÆt
();

152 
	`¥ötf
("Decompressing kernel... ");

154 
ªs
 = 
	`lzma_decom¥ess
((*Ë
kî√l_œ
);

155 i‡(
ªs
 !
LZMA_RESULT_OK
) {

156 
	`¥ötf
("failed, ");

157 
ªs
) {

158 
LZMA_RESULT_DATA_ERROR
:

159 
	`¥ötf
("dataÉrror!\n");

162 
	`¥ötf
("unknow¿îr‹ %d!\n", 
ªs
);

164 
	`hÆt
();

166 
	`¥ötf
("done!\n");

169 
	`Êush_ˇche
(
kî√l_œ
, 
lzma_outsize
);

171 
	`¥ötf
("Sèπög kî√»© %08x...\n\n", 
kî√l_œ
);

173 
kî√l_íåy
 = (*Ë
kî√l_œ
;

174 
	`kî√l_íåy
(
ªg_a0
, 
ªg_a1
, 
ªg_a2
, 
ªg_a3
);

175 
	}
}

	@linux/brcm63xx/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

14 
bﬂrd_putc
(
ch
);

17 
	#LP_MAX_BUF
 256

	)

20 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

21 
	#Ctod
(
x
Ë–(xË- '0')

	)

24 
PrötCh¨
(*, , , );

25 
PrötSåög
(*, *, , );

26 
PrötNum
(*, , , , , , , );

29 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

35 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

36 * 
¨g
,

37 *
fmt
,

38 
va_li°
 
≠
)

41 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

42 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

43 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

45 (*
ouçut
)(
¨g
, 
s
, 
l
); \

47 }

	)

49 
buf
[
LP_MAX_BUF
];

51 
c
;

52 *
s
;

53 
num
;

55 
l⁄gFœg
;

56 
√gFœg
;

57 
width
;

58 
¥ec
;

59 
œdju°
;

60 
∑dc
;

62 
Àngth
;

67 *
fmtSèπ
 = 
fmt
;

68  (*
fmt
 != '\0') && (*fmt != '%')) {

69 
fmt
 ++;

73 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

76 i‡(*
fmt
 == '\0') ;

80 
fmt
 ++;

83 i‡(*
fmt
 == 'l') {

84 
l⁄gFœg
 = 1;

85 
fmt
 ++;

87 
l⁄gFœg
 = 0;

91 
width
 = 0;

92 
¥ec
 = -1;

93 
œdju°
 = 0;

94 
∑dc
 = ' ';

96 i‡(*
fmt
 == '-') {

97 
œdju°
 = 1;

98 
fmt
 ++;

101 i‡(*
fmt
 == '0') {

102 
∑dc
 = '0';

103 
fmt
++;

106 i‡(
	`IsDigô
(*
fmt
)) {

107 
	`IsDigô
(*
fmt
)) {

108 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

112 i‡(*
fmt
 == '.') {

113 
fmt
 ++;

114 i‡(
	`IsDigô
(*
fmt
)) {

115 
¥ec
 = 0;

116 
	`IsDigô
(*
fmt
)) {

117 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

124 
√gFœg
 = 0;

125 *
fmt
) {

127 i‡(
l⁄gFœg
) {

128 
num
 = 
	`va_¨g
(
≠
, );

130 
num
 = 
	`va_¨g
(
≠
, );

132 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

133 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

138 i‡(
l⁄gFœg
) {

139 
num
 = 
	`va_¨g
(
≠
, );

141 
num
 = 
	`va_¨g
(
≠
, );

143 i‡(
num
 < 0) {

144 
num
 = -Çum;

145 
√gFœg
 = 1;

147 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

148 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

153 i‡(
l⁄gFœg
) {

154 
num
 = 
	`va_¨g
(
≠
, );

156 
num
 = 
	`va_¨g
(
≠
, );

158 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

159 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

164 i‡(
l⁄gFœg
) {

165 
num
 = 
	`va_¨g
(
≠
, );

167 
num
 = 
	`va_¨g
(
≠
, );

169 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

170 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

174 i‡(
l⁄gFœg
) {

175 
num
 = 
	`va_¨g
(
≠
, );

177 
num
 = 
	`va_¨g
(
≠
, );

179 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

180 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

184 i‡(
l⁄gFœg
) {

185 
num
 = 
	`va_¨g
(
≠
, );

187 
num
 = 
	`va_¨g
(
≠
, );

189 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

190 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

194 
c
 = ()
	`va_¨g
(
≠
, );

195 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

196 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

200 
s
 = (*)
	`va_¨g
(
≠
, *);

201 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

202 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

206 
fmt
 --;

211 
	`OUTPUT
(
¨g
, 
fmt
, 1);

214 
fmt
 ++;

218 
	`OUTPUT
(
¨g
, "\0", 1);

219 
	}
}

224 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

226 
i
;

228 i‡(
Àngth
 < 1)Üength = 1;

229 i‡(
œdju°
) {

230 *
buf
 = 
c
;

231 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

233 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

234 
buf
[
Àngth
 - 1] = 
c
;

236  
Àngth
;

237 
	}
}

240 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

242 
i
;

243 
Àn
=0;

244 * 
s1
 = 
s
;

245 *
s1
++Ë
Àn
++;

246 i‡(
Àngth
 < 
Àn
)Üength =Üen;

248 i‡(
œdju°
) {

249 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

250 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

252 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

253 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

255  
Àngth
;

256 
	}
}

259 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

260 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

272 
a˘uÆLígth
 =0;

273 *
p
 = 
buf
;

274 
i
;

277 
tmp
 = 
u
 %
ba£
;

278 i‡(
tmp
 <= 9) {

279 *
p
++ = '0' + 
tmp
;

280 } i‡(
upˇ£
) {

281 *
p
++ = 'A' + 
tmp
 - 10;

283 *
p
++ = 'a' + 
tmp
 - 10;

285 
u
 /
ba£
;

286 } 
u
 != 0);

288 i‡(
√gFœg
) {

289 *
p
++ = '-';

293 
a˘uÆLígth
 = 
p
 - 
buf
;

294 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

297 i‡(
œdju°
) {

298 
∑dc
 = ' ';

300 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

301 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

302 
buf
[
Àngth
 -1] = '-';

304 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

310 
begö
 = 0;

311 
íd
;

312 i‡(
œdju°
) {

313 
íd
 = 
a˘uÆLígth
 - 1;

315 
íd
 = 
Àngth
 -1;

318 
íd
 > 
begö
) {

319 
tmp
 = 
buf
[
begö
];

320 
buf
[
begö
] = buf[
íd
];

321 
buf
[
íd
] = 
tmp
;

322 
begö
 ++;

323 
íd
 --;

328  
Àngth
;

329 
	}
}

331 
	$¥ötf_ouçut
(*
¨g
, *
s
, 
l
)

333 
i
;

336 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

338 
i
=0; i< 
l
; i++) {

339 
	`bﬂrd_putc
(
s
[
i
]);

340 i‡(
s
[
i
] ='\n'Ë
	`bﬂrd_putc
('\r');

342 
	}
}

344 
	$¥ötf
(*
fmt
, ...)

346 
va_li°
 
≠
;

347 
	`va_°¨t
(
≠
, 
fmt
);

348 
	`Õ_Pröt
(
¥ötf_ouçut
, 0, 
fmt
, 
≠
);

349 
	`va_íd
(
≠
);

350 
	}
}

	@linux/brcm63xx/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/gpio.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/öãºu±.h
>

14 
	~<löux/úqchù/chaöed_úq.h
>

15 
	~<löux/io.h
>

16 
	~<löux/gpio.h
>

17 
	~<löux/úq.h
>

18 
	~<löux/úqdomaö.h
>

20 
	~<asm/mach/úq.h
>

25 
	#GPIO_INPUT
 0x04

	)

26 
	#GPIO_DIR
 0x08

	)

27 
	#GPIO_SET
 0x10

	)

28 
	#GPIO_CLEAR
 0x14

	)

29 
	#GPIO_INTERRUPT_ENABLE
 0x20

	)

30 
	#GPIO_INTERRUPT_RAW_STATUS
 0x24

	)

31 
	#GPIO_INTERRUPT_MASKED_STATUS
 0x28

	)

32 
	#GPIO_INTERRUPT_MASK
 0x2C

	)

33 
	#GPIO_INTERRUPT_CLEAR
 0x30

	)

34 
	#GPIO_INTERRUPT_TRIGGER_METHOD
 0x34

	)

35 
	#GPIO_INTERRUPT_TRIGGER_BOTH_EDGES
 0x38

	)

36 
	#GPIO_INTERRUPT_TRIGGER_TYPE
 0x3C

	)

38 
	#GPIO_INTERRUPT_TRIGGER_METHOD_EDGE
 0

	)

39 
	#GPIO_INTERRUPT_TRIGGER_METHOD_LEVEL
 1

	)

40 
	#GPIO_INTERRUPT_TRIGGER_EDGE_SINGLE
 0

	)

41 
	#GPIO_INTERRUPT_TRIGGER_EDGE_BOTH
 1

	)

42 
	#GPIO_INTERRUPT_TRIGGER_TYPE_RISING
 0

	)

43 
	#GPIO_INTERRUPT_TRIGGER_TYPE_FALLING
 1

	)

44 
	#GPIO_INTERRUPT_TRIGGER_TYPE_HIGH
 0

	)

45 
	#GPIO_INTERRUPT_TRIGGER_TYPE_LOW
 1

	)

47 
	s˙s3xxx_gpio_chù
 {

48 
gpio_chù
 
	mchù
;

49 
úq_domaö
 *
	mdomaö
;

50 
•ölock_t
 
	mlock
;

51 
__iomem
 *
	mba£
;

54 
˙s3xxx_gpio_chù
 
	g˙s3xxx_gpio_chùs
[2];

55 
	g˙s3xxx_gpio_chù_cou¡
;

57 
ölöe
 

58 
	$__£t_dúe˘i⁄
(
˙s3xxx_gpio_chù
 *
cchù
, 
pö
, 
öput
)

60 
u32
 
ªg
;

62 
ªg
 = 
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_DIR
);

63 i‡(
öput
)

64 
ªg
 &~(1 << 
pö
);

66 
ªg
 |(1 << 
pö
);

67 
	`__øw_wrôñ
(
ªg
, 
cchù
->
ba£
 + 
GPIO_DIR
);

68 
	}
}

73 
	$˙s3xxx_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
, 
pö
)

75 
˙s3xxx_gpio_chù
 *
cchù
 =

76 
	`c⁄èöî_of
(
chù
, 
˙s3xxx_gpio_chù
, chip);

77 
Êags
;

79 
	`•ö_lock_úqßve
(&
cchù
->
lock
, 
Êags
);

80 
	`__£t_dúe˘i⁄
(
cchù
, 
pö
, 1);

81 
	`•ö_u∆ock_úqª°‹e
(&
cchù
->
lock
, 
Êags
);

84 
	}
}

86 
	$˙s3xxx_gpio_gë
(
gpio_chù
 *
chù
, 
pö
)

88 
˙s3xxx_gpio_chù
 *
cchù
 =

89 
	`c⁄èöî_of
(
chù
, 
˙s3xxx_gpio_chù
, chip);

90 
vÆ
;

92 
vÆ
 = ((
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_INPUT
Ë>> 
pö
) & 0x1);

94  
vÆ
;

95 
	}
}

97 
	$˙s3xxx_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
, 
pö
, 
Àvñ
)

99 
˙s3xxx_gpio_chù
 *
cchù
 =

100 
	`c⁄èöî_of
(
chù
, 
˙s3xxx_gpio_chù
, chip);

101 
Êags
;

103 
	`•ö_lock_úqßve
(&
cchù
->
lock
, 
Êags
);

104 i‡(
Àvñ
)

105 
	`__øw_wrôñ
(1 << 
pö
, 
cchù
->
ba£
 + 
GPIO_SET
);

107 
	`__øw_wrôñ
(1 << 
pö
, 
cchù
->
ba£
 + 
GPIO_CLEAR
);

108 
	`__£t_dúe˘i⁄
(
cchù
, 
pö
, 0);

109 
	`•ö_u∆ock_úqª°‹e
(&
cchù
->
lock
, 
Êags
);

112 
	}
}

114 
	$˙s3xxx_gpio_£t
(
gpio_chù
 *
chù
, 
pö
,

115 
Àvñ
)

117 
˙s3xxx_gpio_chù
 *
cchù
 =

118 
	`c⁄èöî_of
(
chù
, 
˙s3xxx_gpio_chù
, chip);

120 i‡(
Àvñ
)

121 
	`__øw_wrôñ
(1 << 
pö
, 
cchù
->
ba£
 + 
GPIO_SET
);

123 
	`__øw_wrôñ
(1 << 
pö
, 
cchù
->
ba£
 + 
GPIO_CLEAR
);

124 
	}
}

126 
	$˙s3xxx_gpio_to_úq
(
gpio_chù
 *
chù
, 
pö
)

128 
˙s3xxx_gpio_chù
 *
cchù
 =

129 
	`c⁄èöî_of
(
chù
, 
˙s3xxx_gpio_chù
, chip);

131  
	`úq_föd_m≠pög
(
cchù
->
domaö
, 
pö
);

132 
	}
}

142 
	$˙s3xxx_gpio_úq_h™dÀr
(
úq_desc
 *
desc
)

144 
˙s3xxx_gpio_chù
 *
cchù
 = 
	`úq_desc_gë_h™dÀr_d©a
(
desc
);

145 
úq_chù
 *
chù
 = 
	`úq_desc_gë_chù
(
desc
);

146 
u16
 
i
;

147 
u32
 
ªg
;

149 
	`chaöed_úq_íãr
(
chù
, 
desc
);

152 
ªg
 = 
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_INTERRUPT_RAW_STATUS
);

153 
i
 = 0; i < 32; i++) {

154 i‡(
ªg
 & (1 << 
i
)) {

156 
	`gíîic_h™dÀ_úq
(
	`úq_föd_m≠pög
(
cchù
->
domaö
, 
i
));

160 
	`chaöed_úq_exô
(
chù
, 
desc
);

161 
	}
}

163 
	$˙s3xxx_gpio_úq_£t_ty≥
(
úq_d©a
 *
d
, 
u32
 
úqty≥
)

165 
úq_chù_gíîic
 *
gc
 = 
	`úq_d©a_gë_úq_chù_d©a
(
d
);

166 
˙s3xxx_gpio_chù
 *
cchù
 = 
gc
->
¥iv©e
;

167 
u32
 
gpio
 = 
d
->
hwúq
;

168 
Êags
;

169 
u32
 
mëhod
, 
edges
, 
ty≥
;

171 
	`•ö_lock_úqßve
(&
cchù
->
lock
, 
Êags
);

172 
mëhod
 = 
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_METHOD
);

173 
edges
 = 
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_BOTH_EDGES
);

174 
ty≥
 = 
	`__øw_ªadl
(
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_TYPE
);

175 
mëhod
 &~(1 << 
gpio
);

176 
edges
 &~(1 << 
gpio
);

177 
ty≥
 &~(1 << 
gpio
);

179 
úqty≥
) {

180 
IRQ_TYPE_EDGE_RISING
:

181 
mëhod
 |(
GPIO_INTERRUPT_TRIGGER_METHOD_EDGE
 << 
gpio
);

182 
edges
 |(
GPIO_INTERRUPT_TRIGGER_EDGE_SINGLE
 << 
gpio
);

183 
ty≥
 |(
GPIO_INTERRUPT_TRIGGER_TYPE_RISING
 << 
gpio
);

185 
IRQ_TYPE_EDGE_FALLING
:

186 
mëhod
 |(
GPIO_INTERRUPT_TRIGGER_METHOD_EDGE
 << 
gpio
);

187 
edges
 |(
GPIO_INTERRUPT_TRIGGER_EDGE_SINGLE
 << 
gpio
);

188 
ty≥
 |(
GPIO_INTERRUPT_TRIGGER_TYPE_FALLING
 << 
gpio
);

190 
IRQ_TYPE_EDGE_BOTH
:

191 
mëhod
 |(
GPIO_INTERRUPT_TRIGGER_METHOD_EDGE
 << 
gpio
);

192 
edges
 |(
GPIO_INTERRUPT_TRIGGER_EDGE_BOTH
 << 
gpio
);

194 
IRQ_TYPE_LEVEL_LOW
:

195 
mëhod
 |(
GPIO_INTERRUPT_TRIGGER_METHOD_LEVEL
 << 
gpio
);

196 
ty≥
 |(
GPIO_INTERRUPT_TRIGGER_TYPE_LOW
 << 
gpio
);

198 
IRQ_TYPE_LEVEL_HIGH
:

199 
mëhod
 |(
GPIO_INTERRUPT_TRIGGER_METHOD_LEVEL
 << 
gpio
);

200 
ty≥
 |(
GPIO_INTERRUPT_TRIGGER_TYPE_HIGH
 << 
gpio
);

203 
	`¥ötk
(
KERN_WARNING
 "No irqÅype\n");

204 
	`•ö_u∆ock_úqª°‹e
(&
cchù
->
lock
, 
Êags
);

205  -
EINVAL
;

208 
	`__øw_wrôñ
(
mëhod
, 
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_METHOD
);

209 
	`__øw_wrôñ
(
edges
, 
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_BOTH_EDGES
);

210 
	`__øw_wrôñ
(
ty≥
, 
cchù
->
ba£
 + 
GPIO_INTERRUPT_TRIGGER_TYPE
);

211 
	`•ö_u∆ock_úqª°‹e
(&
cchù
->
lock
, 
Êags
);

213 i‡(
ty≥
 & (
IRQ_TYPE_LEVEL_LOW
 | 
IRQ_TYPE_LEVEL_HIGH
))

214 
	`úq_£t_h™dÀr_locked
(
d
, 
h™dÀ_Àvñ_úq
);

215 i‡(
ty≥
 & (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
))

216 
	`úq_£t_h™dÀr_locked
(
d
, 
h™dÀ_edge_úq
);

219 
	}
}

221 
__öô
 
	$˙s3xxx_gpio_öô
(
gpio_ba£
, 
ngpio
,

222 
u32
 
ba£
, 
úq
, 
£c⁄d¨y_úq_ba£
)

224 
˙s3xxx_gpio_chù
 *
cchù
;

225 
úq_chù_gíîic
 *
gc
;

226 
úq_chù_ty≥
 *
˘
;

227 
gc_œbñ
[16];

228 
úq_ba£
;

230 i‡(
˙s3xxx_gpio_chù_cou¡
 =
	`ARRAY_SIZE
(
˙s3xxx_gpio_chùs
))

233 
	`¢¥ötf
(
gc_œbñ
, (gc_label), "cns3xxx_gpio%d",

234 
˙s3xxx_gpio_chù_cou¡
);

236 
cchù
 = 
˙s3xxx_gpio_chùs
 + 
˙s3xxx_gpio_chù_cou¡
;

237 
cchù
->
chù
.
œbñ
 = 
	`k°rdup
(
gc_œbñ
, 
GFP_KERNEL
);

238 
cchù
->
chù
.
dúe˘i⁄_öput
 = 
˙s3xxx_gpio_dúe˘i⁄_öput
;

239 
cchù
->
chù
.
gë
 = 
˙s3xxx_gpio_gë
;

240 
cchù
->
chù
.
dúe˘i⁄_ouçut
 = 
˙s3xxx_gpio_dúe˘i⁄_ouçut
;

241 
cchù
->
chù
.
£t
 = 
˙s3xxx_gpio_£t
;

242 
cchù
->
chù
.
to_úq
 = 
˙s3xxx_gpio_to_úq
;

243 
cchù
->
chù
.
ba£
 = 
gpio_ba£
;

244 
cchù
->
chù
.
ngpio
 =Çgpio;

245 
cchù
->
chù
.
ˇn_¶ìp
 = 0;

246 
	`•ö_lock_öô
(&
cchù
->
lock
);

247 
cchù
->
ba£
 = (
__iomem
 *)base;

249 
	`BUG_ON
(
	`gpiochù_add
(&
cchù
->
chù
) < 0);

250 
˙s3xxx_gpio_chù_cou¡
++;

253 
	`__øw_wrôñ
(0xffff, 
cchù
->
ba£
 + 
GPIO_INTERRUPT_CLEAR
);

255 
úq_ba£
 = 
	`úq_Æloc_descs
(-1, 
£c⁄d¨y_úq_ba£
, 
ngpio
,

256 
	`numa_node_id
());

257 i‡(
úq_ba£
 < 0)

258 
out_úqdesc_‰ì
;

260 
cchù
->
domaö
 = 
	`úq_domaö_add_Àgacy
(
NULL
, 
ngpio
, 
úq_ba£
, 0,

261 &
úq_domaö_sim∂e_›s
, 
NULL
);

262 i‡(!
cchù
->
domaö
)

263 
out_úqdesc_‰ì
;

268 
gc
 = 
	`úq_Æloc_gíîic_chù
("˙s3xxx_gpio_úq", 1, 
úq_ba£
,

269 
cchù
->
ba£
, 
h™dÀ_edge_úq
);

271 
gc
->
¥iv©e
 = 
cchù
;

273 
˘
 = 
gc
->
chù_ty≥s
;

274 
˘
->
ty≥
 = 
IRQ_TYPE_EDGE_FALLING
;

275 
˘
->
ªgs
.
ack
 = 
GPIO_INTERRUPT_CLEAR
;

276 
˘
->
chù
.
úq_ack
 = 
úq_gc_ack_£t_bô
;

277 
˘
->
ªgs
.
mask
 = 
GPIO_INTERRUPT_ENABLE
;

278 
˘
->
chù
.
úq_íabÀ
 = 
úq_gc_mask_£t_bô
;

279 
˘
->
chù
.
úq_dißbÀ
 = 
úq_gc_mask_˛r_bô
;

280 
˘
->
chù
.
úq_£t_ty≥
 = 
˙s3xxx_gpio_úq_£t_ty≥
;

281 
˘
->
h™dÀr
 = 
h™dÀ_edge_úq
;

283 
	`úq_£tup_gíîic_chù
(
gc
, 
	`IRQ_MSK
(
ngpio
), 
IRQ_GC_INIT_MASK_CACHE
,

284 
IRQ_NOREQUEST
, 0);

285 
	`úq_£t_chaöed_h™dÀr
(
úq
, 
˙s3xxx_gpio_úq_h™dÀr
);

286 
	`úq_£t_h™dÀr_d©a
(
úq
, 
cchù
);

290 
out_úqdesc_‰ì
:

291 
	`úq_‰ì_descs
(
úq_ba£
, 
ngpio
);

292 
	}
}

	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/hotplug.c

13 
	~<löux/kî√l.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/smp.h
>

17 
	~<asm/ˇcheÊush.h
>

19 vﬁ©ûê
≥n_ªÀa£
;

21 
ölöe
 
	$˝u_íãr_lowpowî
()

23 
v
;

25 
	`Êush_ˇche_Æl
();

26 
asm
 volatile(

38 : "=&r" (
v
)

39 : "r" (0), "Ir" (
CR_C
), "Ir" (0x40)

41 
	}
}

43 
ölöe
 
	$˝u_Àave_lowpowî
()

45 
v
;

47 
asm
 volatile(

54 : "=&r" (
v
)

55 : "Ir" (
CR_C
), "Ir" (0x40)

57 
	}
}

59 
ölöe
 
	$∂©f‹m_do_lowpowî
(
˝u
, *
•urious
)

70 
	`asm
(".word 0xe320f003\n"

75 i‡(
≥n_ªÀa£
 =
˝u
) {

89 (*
•urious
)++;

91 
	}
}

93 
	$∂©f‹m_˝u_kûl
(
˝u
)

96 
	}
}

103 
	$∂©f‹m_˝u_dõ
(
˝u
)

105 
•urious
 = 0;

110 
	`˝u_íãr_lowpowî
();

111 
	`∂©f‹m_do_lowpowî
(
˝u
, &
•urious
);

117 
	`˝u_Àave_lowpowî
();

119 i‡(
•urious
)

120 
	`¥_w¨n
("CPU%u: %u spuriou†wakeu∞ˇŒs\n", 
˝u
, 
•urious
);

121 
	}
}

123 
	$∂©f‹m_˝u_dißbÀ
(
˝u
)

129  
˝u
 =0 ? -
EPERM
 : 0;

130 
	}
}

	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/include/mach/gpio.h

9 #i‚de‡
__ASM_ARCH_CNS3XXX_GPIO_H


10 
	#__ASM_ARCH_CNS3XXX_GPIO_H


	)

12 
	~<löux/kî√l.h
>

14 
__öô
 
˙s3xxx_gpio_öô
(
gpio_ba£
, 
ngpio
,

15 
u32
 
ba£
, 
úq
, 
£c⁄d¨y_úq_ba£
);

	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/include/mach/smp.h

1 #i‚de‡
__MACH_SMP_H


2 
	#__MACH_SMP_H


	)

4 
smp_dma_m≠_¨ó
(c⁄° *, 
size_t
, );

5 
smp_dma_unm≠_¨ó
(c⁄° *, 
size_t
, );

6 
smp_dma_Êush_ønge
(const *, const *);

	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/laguna.c

20 
	~<löux/öô.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/compûî.h
>

23 
	~<löux/io.h
>

24 
	~<löux/úq.h
>

25 
	~<löux/gpio.h
>

26 
	~<löux/dma-m≠pög.h
>

27 
	~<löux/£rül_c‹e.h
>

28 
	~<löux/£rül_8250.h
>

29 
	~<löux/∂©f‹m_devi˚.h
>

30 
	~<löux/mtd/mtd.h
>

31 
	~<löux/mtd/physm≠.h
>

32 
	~<löux/mtd/∑πôi⁄s.h
>

33 
	~<löux/Àds.h
>

34 
	~<löux/i2c.h
>

35 
	~<löux/∂©f‹m_d©a/©24.h
>

36 
	~<löux/∂©f‹m_d©a/pˇ953x.h
>

37 
	~<löux/•i/•i.h
>

38 
	~<löux/•i/Êash.h
>

39 
	~<löux/if_ëhî.h
>

40 
	~<löux/µs-gpio.h
>

41 
	~<löux/usb/ehci_pdrivî.h
>

42 
	~<löux/usb/ohci_pdrivî.h
>

43 
	~<löux/˛k-¥ovidî.h
>

44 
	~<löux/˛kdev.h
>

45 
	~<löux/∂©f‹m_d©a/˙s3xxx.h
>

46 
	~<asm/£tup.h
>

47 
	~<asm/mach-ty≥s.h
>

48 
	~<asm/mach/¨ch.h
>

49 
	~<asm/mach/m≠.h
>

50 
	~<asm/mach/time.h
>

51 
	~<mach/gpio.h
>

52 
	~"c‹e.h
"

53 
	~"devi˚s.h
"

54 
	~"˙s3xxx.h
"

55 
	~"pm.h
"

57 
	#ARRAY_AND_SIZE
(
x
Ë(x), 
	`ARRAY_SIZE
(x)

	)

60 
	#ETH0_LOAD
 
	`BIT
(0)

	)

61 
	#ETH1_LOAD
 
	`BIT
(1)

	)

62 
	#ETH2_LOAD
 
	`BIT
(2)

	)

63 
	#SATA0_LOAD
 
	`BIT
(3)

	)

64 
	#SATA1_LOAD
 
	`BIT
(4)

	)

65 
	#PCM_LOAD
 
	`BIT
(5)

	)

66 
	#I2S_LOAD
 
	`BIT
(6)

	)

67 
	#SPI0_LOAD
 
	`BIT
(7)

	)

68 
	#SPI1_LOAD
 
	`BIT
(8)

	)

69 
	#PCIE0_LOAD
 
	`BIT
(9)

	)

70 
	#PCIE1_LOAD
 
	`BIT
(10)

	)

71 
	#USB0_LOAD
 
	`BIT
(11)

	)

72 
	#USB1_LOAD
 
	`BIT
(12)

	)

73 
	#USB1_ROUTE
 
	`BIT
(13)

	)

74 
	#SD_LOAD
 
	`BIT
(14)

	)

75 
	#UART0_LOAD
 
	`BIT
(15)

	)

76 
	#UART1_LOAD
 
	`BIT
(16)

	)

77 
	#UART2_LOAD
 
	`BIT
(17)

	)

78 
	#MPCI0_LOAD
 
	`BIT
(18)

	)

79 
	#MPCI1_LOAD
 
	`BIT
(19)

	)

80 
	#MPCI2_LOAD
 
	`BIT
(20)

	)

81 
	#MPCI3_LOAD
 
	`BIT
(21)

	)

82 
	#FP_BUT_LOAD
 
	`BIT
(22)

	)

83 
	#FP_BUT_HEADER_LOAD
 
	`BIT
(23)

	)

84 
	#FP_LED_LOAD
 
	`BIT
(24)

	)

85 
	#FP_LED_HEADER_LOAD
 
	`BIT
(25)

	)

86 
	#FP_TAMPER_LOAD
 
	`BIT
(26)

	)

87 
	#HEADER_33V_LOAD
 
	`BIT
(27)

	)

88 
	#SATA_POWER_LOAD
 
	`BIT
(28)

	)

89 
	#FP_POWER_LOAD
 
	`BIT
(29)

	)

90 
	#GPIO_HEADER_LOAD
 
	`BIT
(30)

	)

91 
	#GSP_BAT_LOAD
 
	`BIT
(31)

	)

94 
	#FAN_LOAD
 
	`BIT
(0)

	)

95 
	#SPI_FLASH_LOAD
 
	`BIT
(1)

	)

96 
	#NOR_FLASH_LOAD
 
	`BIT
(2)

	)

97 
	#GPS_LOAD
 
	`BIT
(3)

	)

98 
	#SUPPLY_5V_LOAD
 
	`BIT
(6)

	)

99 
	#SUPPLY_33V_LOAD
 
	`BIT
(7)

	)

101 
	sœgu«_bﬂrd_öfo
 {

102 
	mmodñ
[16];

103 
u32
 
	mc⁄fig_bôm≠
;

104 
u32
 
	mc⁄fig2_bôm≠
;

105 
u8
 
	mn‹_Êash_size
;

106 
u8
 
	m•i_Êash_size
;

109 
œgu«_bﬂrd_öfo
 
œgu«_öfo
 
	g__öôd©a
;

114 
mtd_∑πôi⁄
 
	gœgu«_n‹_∑πôi⁄s
[] = {

116 .
«me
 = "uboot",

117 .
	gsize
 = 
SZ_256K
,

118 .
	goff£t
 = 0,

119 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

121 .
	g«me
 = "params",

122 .
	gsize
 = 
SZ_128K
,

123 .
	goff£t
 = 
SZ_256K
,

125 .
	g«me
 = "firmware",

126 .
	goff£t
 = 
SZ_256K
 + 
SZ_128K
,

130 
physm≠_Êash_d©a
 
	gœgu«_n‹_pd©a
 = {

131 .
width
 = 2,

132 .
	g∑πs
 = 
œgu«_n‹_∑πôi⁄s
,

133 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
œgu«_n‹_∑πôi⁄s
),

136 
ªsour˚
 
	gœgu«_n‹_ªs
 = {

137 .
°¨t
 = 
CNS3XXX_FLASH_BASE
,

138 .
	gíd
 = 
CNS3XXX_FLASH_BASE
 + 
SZ_128M
 - 1,

139 .
	gÊags
 = 
IORESOURCE_MEM
 | 
IORESOURCE_MEM_32BIT
,

142 
∂©f‹m_devi˚
 
	gœgu«_n‹_pdev
 = {

143 .
«me
 = "physmap-flash",

144 .
	gid
 = 0,

145 .
	gªsour˚
 = &
œgu«_n‹_ªs
,

146 .
	gnum_ªsour˚s
 = 1,

147 .
	gdev
 = {

148 .
∂©f‹m_d©a
 = &
œgu«_n‹_pd©a
,

155 
mtd_∑πôi⁄
 
	gœgu«_•i_∑πôi⁄s
[] = {

157 .
«me
 = "uboot",

158 .
	gsize
 = 
SZ_256K
,

159 .
	goff£t
 = 0,

160 .
	gmask_Êags
 = 
MTD_WRITEABLE
,

162 .
	g«me
 = "params",

163 .
	gsize
 = 
SZ_256K
,

164 .
	goff£t
 = 
SZ_256K
,

166 .
	g«me
 = "firmware",

167 .
	goff£t
 = 
SZ_512K
,

171 
Êash_∂©f‹m_d©a
 
	gœgu«_•i_pd©a
 = {

172 .
∑πs
 = 
œgu«_•i_∑πôi⁄s
,

173 .
	gƒ_∑πs
 = 
ARRAY_SIZE
(
œgu«_•i_∑πôi⁄s
),

176 
•i_bﬂrd_öfo
 
__öôd©a
 
	gœgu«_•i_devi˚s
[] = {

178 .
modÆüs
 = "m25p80",

179 .
	g∂©f‹m_d©a
 = &
œgu«_•i_pd©a
,

180 .
	gmax_•ìd_hz
 = 50000000,

181 .
	gbus_num
 = 1,

182 .
	gchù_£À˘
 = 0,

186 
ªsour˚
 
	gœgu«_•i_ªsour˚
 = {

187 .
°¨t
 = 
CNS3XXX_SSP_BASE
 + 0x40,

188 .
	gíd
 = 
CNS3XXX_SSP_BASE
 + 0x6f,

189 .
	gÊags
 = 
IORESOURCE_MEM
,

192 
∂©f‹m_devi˚
 
	gœgu«_•i_c⁄åﬁÀr
 = {

193 .
«me
 = "cns3xxx_spi",

194 .
	gªsour˚
 = &
œgu«_•i_ªsour˚
,

195 .
	gnum_ªsour˚s
 = 1,

201 
gpio_Àd
 
	gœgu«_gpio_Àds
[] = {

203 .
«me
 = "user1",

204 .
	ggpio
 = 115,

205 .
	ga˘ive_low
 = 1,

207 .
	g«me
 = "user2",

208 .
	ggpio
 = 114,

209 .
	ga˘ive_low
 = 1,

211 .
	g«me
 = "pwr1",

212 .
	ggpio
 = 116,

213 .
	ga˘ive_low
 = 1,

215 .
	g«me
 = "pwr2",

216 .
	ggpio
 = 117,

217 .
	ga˘ive_low
 = 1,

219 .
	g«me
 = "txd1",

220 .
	ggpio
 = 118,

221 .
	ga˘ive_low
 = 1,

223 .
	g«me
 = "txd2",

224 .
	ggpio
 = 119,

225 .
	ga˘ive_low
 = 1,

227 .
	g«me
 = "rxd1",

228 .
	ggpio
 = 120,

229 .
	ga˘ive_low
 = 1,

231 .
	g«me
 = "rxd2",

232 .
	ggpio
 = 121,

233 .
	ga˘ive_low
 = 1,

235 .
	g«me
 = "ser1",

236 .
	ggpio
 = 122,

237 .
	ga˘ive_low
 = 1,

239 .
	g«me
 = "ser2",

240 .
	ggpio
 = 123,

241 .
	ga˘ive_low
 = 1,

243 .
	g«me
 = "enet1",

244 .
	ggpio
 = 124,

245 .
	ga˘ive_low
 = 1,

247 .
	g«me
 = "enet2",

248 .
	ggpio
 = 125,

249 .
	ga˘ive_low
 = 1,

251 .
	g«me
 = "sig1_1",

252 .
	ggpio
 = 126,

253 .
	ga˘ive_low
 = 1,

255 .
	g«me
 = "sig1_2",

256 .
	ggpio
 = 127,

257 .
	ga˘ive_low
 = 1,

259 .
	g«me
 = "sig2_1",

260 .
	ggpio
 = 128,

261 .
	ga˘ive_low
 = 1,

263 .
	g«me
 = "sig2_2",

264 .
	ggpio
 = 129,

265 .
	ga˘ive_low
 = 1,

267 .
	g«me
 = "sig3_1",

268 .
	ggpio
 = 130,

269 .
	ga˘ive_low
 = 1,

271 .
	g«me
 = "sig3_2",

272 .
	ggpio
 = 131,

273 .
	ga˘ive_low
 = 1,

275 .
	g«me
 = "net1",

276 .
	ggpio
 = 109,

277 .
	ga˘ive_low
 = 1,

279 .
	g«me
 = "net2",

280 .
	ggpio
 = 110,

281 .
	ga˘ive_low
 = 1,

283 .
	g«me
 = "mod1",

284 .
	ggpio
 = 111,

285 .
	ga˘ive_low
 = 1,

287 .
	g«me
 = "mod2",

288 .
	ggpio
 = 112,

289 .
	ga˘ive_low
 = 1,

293 
gpio_Àd_∂©f‹m_d©a
 
	gœgu«_gpio_Àds_d©a
 = {

294 .
num_Àds
 = 22,

295 .
	gÀds
 = 
œgu«_gpio_Àds
,

298 
∂©f‹m_devi˚
 
	gœgu«_gpio_Àds_devi˚
 = {

299 .
«me
 = "leds-gpio",

300 .
	gid
 = 
PLATFORM_DEVID_NONE
,

301 .
	gdev
.
	g∂©f‹m_d©a
 = &
œgu«_gpio_Àds_d©a
,

307 
˙s3xxx_∂©_öfo
 
	gœgu«_√t_d©a
 = {

308 .
p‹ts
 = 0,

309 .
	gphy
 = {

316 
ªsour˚
 
	gœgu«_√t_ªsour˚
[] = {

318 .
«me
 = "eth0_mem",

319 .
	g°¨t
 = 
CNS3XXX_SWITCH_BASE
,

320 .
	gíd
 = 
CNS3XXX_SWITCH_BASE
 + 
SZ_4K
 - 1,

321 .
	gÊags
 = 
IORESOURCE_MEM


323 .
	g«me
 = "eth_rx",

324 .
	g°¨t
 = 
IRQ_CNS3XXX_SW_R0RXC
,

325 .
	gíd
 = 
IRQ_CNS3XXX_SW_R0RXC
,

326 .
	gÊags
 = 
IORESOURCE_IRQ


328 .
	g«me
 = "eth_stat",

329 .
	g°¨t
 = 
IRQ_CNS3XXX_SW_STATUS
,

330 .
	gíd
 = 
IRQ_CNS3XXX_SW_STATUS
,

331 .
	gÊags
 = 
IORESOURCE_IRQ


335 
u64
 
	gœgu«_√t_dmamask
 = 
DMA_BIT_MASK
(32);

336 
∂©f‹m_devi˚
 
	gœgu«_√t_devi˚
 = {

337 .
«me
 = "cns3xxx_eth",

338 .
	gid
 = 0,

339 .
	gªsour˚
 = 
œgu«_√t_ªsour˚
,

340 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
œgu«_√t_ªsour˚
),

341 .
	gdev
 = {

342 .
dma_mask
 = &
œgu«_√t_dmamask
,

343 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(32),

344 .
	g∂©f‹m_d©a
 = &
œgu«_√t_d©a
,

351 
__öô
 
	$œgu«_óæy_£rül_£tup
()

353 #ifde‡
CONFIG_SERIAL_8250_CONSOLE


354 
u¨t_p‹t
 
œgu«_£rül_p‹t
 = {

355 .
memba£
 = (
__iomem
 *)
CNS3XXX_UART0_BASE_VIRT
,

356 .
m≠ba£
 = 
CNS3XXX_UART0_BASE
,

357 .
úq
 = 
IRQ_CNS3XXX_UART0
,

358 .
iŸy≥
 = 
UPIO_MEM
,

359 .
Êags
 = 
UPF_BOOT_AUTOCONF
 | 
UPF_FIXED_TYPE
,

360 .
ªgshi·
 = 2,

361 .
u¨t˛k
 = 24000000,

362 .
löe
 = 0,

363 .
ty≥
 = 
PORT_16550A
,

364 .
fifosize
 = 16,

367 
	`óæy_£rül_£tup
(&
œgu«_£rül_p‹t
);

369 
	}
}

371 
ªsour˚
 
	gœgu«_u¨t_ªsour˚s
[] = {

373 .
°¨t
 = 
CNS3XXX_UART0_BASE
,

374 .
	gíd
 = 
CNS3XXX_UART0_BASE
 + 
SZ_4K
 - 1,

375 .
	gÊags
 = 
IORESOURCE_MEM


377 .
	g°¨t
 = 
CNS3XXX_UART1_BASE
,

378 .
	gíd
 = 
CNS3XXX_UART1_BASE
 + 
SZ_4K
 - 1,

379 .
	gÊags
 = 
IORESOURCE_MEM


381 .
	g°¨t
 = 
CNS3XXX_UART2_BASE
,

382 .
	gíd
 = 
CNS3XXX_UART2_BASE
 + 
SZ_4K
 - 1,

383 .
	gÊags
 = 
IORESOURCE_MEM


387 
∂©_£rül8250_p‹t
 
	gœgu«_u¨t_d©a
[] = {

389 .
m≠ba£
 = (
CNS3XXX_UART0_BASE
),

390 .
	gúq
 = 
IRQ_CNS3XXX_UART0
,

391 .
	giŸy≥
 = 
UPIO_MEM
,

392 .
	gÊags
 = 
UPF_BOOT_AUTOCONF
 | 
UPF_FIXED_TYPE
 | 
UPF_IOREMAP
,

393 .
	gªgshi·
 = 2,

394 .
	gu¨t˛k
 = 24000000,

395 .
	gty≥
 = 
PORT_16550A
,

397 .
	gm≠ba£
 = (
CNS3XXX_UART1_BASE
),

398 .
	gúq
 = 
IRQ_CNS3XXX_UART1
,

399 .
	giŸy≥
 = 
UPIO_MEM
,

400 .
	gÊags
 = 
UPF_BOOT_AUTOCONF
 | 
UPF_FIXED_TYPE
 | 
UPF_IOREMAP
,

401 .
	gªgshi·
 = 2,

402 .
	gu¨t˛k
 = 24000000,

403 .
	gty≥
 = 
PORT_16550A
,

405 .
	gm≠ba£
 = (
CNS3XXX_UART2_BASE
),

406 .
	gúq
 = 
IRQ_CNS3XXX_UART2
,

407 .
	giŸy≥
 = 
UPIO_MEM
,

408 .
	gÊags
 = 
UPF_BOOT_AUTOCONF
 | 
UPF_FIXED_TYPE
 | 
UPF_IOREMAP
,

409 .
	gªgshi·
 = 2,

410 .
	gu¨t˛k
 = 24000000,

411 .
	gty≥
 = 
PORT_16550A
,

416 
∂©f‹m_devi˚
 
	gœgu«_u¨t
 = {

417 .
«me
 = "serial8250",

418 .
	gid
 = 
PLAT8250_DEV_PLATFORM
,

419 .
	gdev
.
	g∂©f‹m_d©a
 = 
œgu«_u¨t_d©a
,

420 .
	gnum_ªsour˚s
 = 3,

421 .
	gªsour˚
 = 
œgu«_u¨t_ªsour˚s


427 
ªsour˚
 
	g˙s3xxx_usb_ehci_ªsour˚s
[] = {

429 .
°¨t
 = 
CNS3XXX_USB_BASE
,

430 .
	gíd
 = 
CNS3XXX_USB_BASE
 + 
SZ_16M
 - 1,

431 .
	gÊags
 = 
IORESOURCE_MEM
,

434 .
°¨t
 = 
IRQ_CNS3XXX_USB_EHCI
,

435 .
	gÊags
 = 
IORESOURCE_IRQ
,

439 
u64
 
	g˙s3xxx_usb_ehci_dma_mask
 = 
DMA_BIT_MASK
(32);

441 
	$c¢3xxx_usb_powî_⁄
(
∂©f‹m_devi˚
 *
pdev
)

451 i‡(
	`©omic_öc_ªtu∫
(&
usb_pwr_ªf
) == 1) {

452 
	`˙s3xxx_pwr_powî_up
(1 << 
PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_USB
);

453 
	`˙s3xxx_pwr_˛k_í
(1 << 
PM_CLK_GATE_REG_OFFSET_USB_HOST
);

454 
	`˙s3xxx_pwr_so·_r°
(1 << 
PM_SOFT_RST_REG_OFFST_USB_HOST
);

455 
	`__øw_wrôñ
((
	`__øw_ªadl
(
MISC_CHIP_CONFIG_REG
) | (0X2 << 24)),

456 
MISC_CHIP_CONFIG_REG
);

460 
	}
}

462 
	$c¢3xxx_usb_powî_off
(
∂©f‹m_devi˚
 *
pdev
)

470 i‡(
	`©omic_dec_ªtu∫
(&
usb_pwr_ªf
) == 0)

471 
	`˙s3xxx_pwr_˛k_dis
(1 << 
PM_CLK_GATE_REG_OFFSET_USB_HOST
);

472 
	}
}

474 
usb_ehci_pd©a
 
	g˙s3xxx_usb_ehci_pd©a
 = {

475 .
powî_⁄
 = 
c¢3xxx_usb_powî_⁄
,

476 .
	gpowî_off
 = 
c¢3xxx_usb_powî_off
,

479 
∂©f‹m_devi˚
 
	g˙s3xxx_usb_ehci_devi˚
 = {

480 .
«me
 = "ehci-platform",

481 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
˙s3xxx_usb_ehci_ªsour˚s
),

482 .
	gªsour˚
 = 
˙s3xxx_usb_ehci_ªsour˚s
,

483 .
	gdev
 = {

484 .
dma_mask
 = &
˙s3xxx_usb_ehci_dma_mask
,

485 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(32),

486 .
	g∂©f‹m_d©a
 = &
˙s3xxx_usb_ehci_pd©a
,

490 
ªsour˚
 
	g˙s3xxx_usb_ohci_ªsour˚s
[] = {

492 .
°¨t
 = 
CNS3XXX_USB_OHCI_BASE
,

493 .
	gíd
 = 
CNS3XXX_USB_OHCI_BASE
 + 
SZ_16M
 - 1,

494 .
	gÊags
 = 
IORESOURCE_MEM
,

497 .
°¨t
 = 
IRQ_CNS3XXX_USB_OHCI
,

498 .
	gÊags
 = 
IORESOURCE_IRQ
,

502 
u64
 
	g˙s3xxx_usb_ohci_dma_mask
 = 
DMA_BIT_MASK
(32);

504 
usb_ohci_pd©a
 
	g˙s3xxx_usb_ohci_pd©a
 = {

505 .
num_p‹ts
 = 1,

506 .
	gpowî_⁄
 = 
c¢3xxx_usb_powî_⁄
,

507 .
	gpowî_off
 = 
c¢3xxx_usb_powî_off
,

510 
∂©f‹m_devi˚
 
	g˙s3xxx_usb_ohci_devi˚
 = {

511 .
«me
 = "ohci-platform",

512 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
˙s3xxx_usb_ohci_ªsour˚s
),

513 .
	gªsour˚
 = 
˙s3xxx_usb_ohci_ªsour˚s
,

514 .
	gdev
 = {

515 .
dma_mask
 = &
˙s3xxx_usb_ohci_dma_mask
,

516 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(32),

517 .
	g∂©f‹m_d©a
 = &
˙s3xxx_usb_ohci_pd©a
,

521 
ªsour˚
 
	g˙s3xxx_usb_Ÿg_ªsour˚s
[] = {

523 .
°¨t
 = 
CNS3XXX_USBOTG_BASE
,

524 .
	gíd
 = 
CNS3XXX_USBOTG_BASE
 + 
SZ_16M
 - 1,

525 .
	gÊags
 = 
IORESOURCE_MEM
,

528 .
°¨t
 = 
IRQ_CNS3XXX_USB_OTG
,

529 .
	gÊags
 = 
IORESOURCE_IRQ
,

533 
u64
 
	g˙s3xxx_usb_Ÿg_dma_mask
 = 
DMA_BIT_MASK
(32);

535 
∂©f‹m_devi˚
 
	g˙s3xxx_usb_Ÿg_devi˚
 = {

536 .
«me
 = "dwc2",

537 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
˙s3xxx_usb_Ÿg_ªsour˚s
),

538 .
	gªsour˚
 = 
˙s3xxx_usb_Ÿg_ªsour˚s
,

539 .
	gdev
 = {

540 .
dma_mask
 = &
˙s3xxx_usb_Ÿg_dma_mask
,

541 .
	gcohîít_dma_mask
 = 
DMA_BIT_MASK
(32),

548 
ªsour˚
 
	gœgu«_i2c_ªsour˚
[] = {

550 .
°¨t
 = 
CNS3XXX_SSP_BASE
 + 0x20,

551 .
	gíd
 = 
CNS3XXX_SSP_BASE
 + 0x3f,

552 .
	gÊags
 = 
IORESOURCE_MEM
,

554 .
	g°¨t
 = 
IRQ_CNS3XXX_I2C
,

555 .
	gÊags
 = 
IORESOURCE_IRQ
,

559 
∂©f‹m_devi˚
 
	gœgu«_i2c_c⁄åﬁÀr
 = {

560 .
«me
 = "cns3xxx-i2c",

561 .
	gnum_ªsour˚s
 = 2,

562 .
	gªsour˚
 = 
œgu«_i2c_ªsour˚
,

565 
nvmem_devi˚
 *
	g©24_nvmem
;

567 
	$©24_£tup
(
nvmem_devi˚
 *
mem_acc
, *
c⁄ãxt
)

569 
buf
[16];

571 
©24_nvmem
 = 
mem_acc
;

574 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x100, 6, 
buf
) == 6)

575 
	`mem˝y
(&
œgu«_√t_d©a
.
hwaddr
[0], 
buf
, 
ETH_ALEN
);

576 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x106, 6, 
buf
) == 6)

577 
	`mem˝y
(&
œgu«_√t_d©a
.
hwaddr
[1], 
buf
, 
ETH_ALEN
);

578 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x10C, 6, 
buf
) == 6)

579 
	`mem˝y
(&
œgu«_√t_d©a
.
hwaddr
[2], 
buf
, 
ETH_ALEN
);

580 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x112, 6, 
buf
) == 6)

581 
	`mem˝y
(&
œgu«_√t_d©a
.
hwaddr
[3], 
buf
, 
ETH_ALEN
);

584 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x130, 16, 
buf
) == 16)

585 
	`mem˝y
(&
œgu«_öfo
.
modñ
, 
buf
, 16);

586 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x140, 1, 
buf
) == 1)

587 
	`mem˝y
(&
œgu«_öfo
.
n‹_Êash_size
, 
buf
, 1);

588 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x141, 1, 
buf
) == 1)

589 
	`mem˝y
(&
œgu«_öfo
.
•i_Êash_size
, 
buf
, 1);

590 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x142, 4, 
buf
) == 4)

591 
	`mem˝y
(&
œgu«_öfo
.
c⁄fig_bôm≠
, 
buf
, 4);

592 i‡(
	`nvmem_devi˚_ªad
(
©24_nvmem
, 0x146, 4, 
buf
) == 4)

593 
	`mem˝y
(&
œgu«_öfo
.
c⁄fig2_bôm≠
, 
buf
, 4);

594 
	}
};

596 
©24_∂©f‹m_d©a
 
	gœgu«_ì¥om_öfo
 = {

597 .
byã_Àn
 = 1024,

598 .
	g∑ge_size
 = 16,

599 .
	gÊags
 = 
AT24_FLAG_READONLY
,

600 .
	g£tup
 = 
©24_£tup
,

603 
pˇ953x_∂©f‹m_d©a
 
	gœgu«_pˇ_d©a
 = {

604 .
gpio_ba£
 = 100,

605 .
	gúq_ba£
 = -1,

608 
pˇ953x_∂©f‹m_d©a
 
	gœgu«_pˇ2_d©a
 = {

609 .
gpio_ba£
 = 116,

610 .
	gúq_ba£
 = -1,

613 
i2c_bﬂrd_öfo
 
__öôd©a
 
	gœgu«_i2c_devi˚s
[] = {

615 
I2C_BOARD_INFO
("pca9555", 0x23),

616 .
∂©f‹m_d©a
 = &
œgu«_pˇ_d©a
,

618 
I2C_BOARD_INFO
("pca9555", 0x27),

619 .
	g∂©f‹m_d©a
 = &
œgu«_pˇ2_d©a
,

621 
I2C_BOARD_INFO
("gsp", 0x29),

623 
I2C_BOARD_INFO
 ("24c08",0x50),

624 .
	g∂©f‹m_d©a
 = &
œgu«_ì¥om_öfo
,

626 
I2C_BOARD_INFO
("ds1672", 0x68),

634 
ªsour˚
 
	gœgu«_w©chdog_ªsour˚s
[] = {

636 .
°¨t
 = 
CNS3XXX_TC11MP_TWD_BASE
 + 0x100,

637 .
	gíd
 = 
CNS3XXX_TC11MP_TWD_BASE
 + 
SZ_4K
 - 1,

638 .
	gÊags
 = 
IORESOURCE_MEM
,

642 
∂©f‹m_devi˚
 
	gœgu«_w©chdog
 = {

643 .
«me
 = "mpcore_wdt",

644 .
	gid
 = 
PLATFORM_DEVID_NONE
,

645 .
	gnum_ªsour˚s
 = 
ARRAY_SIZE
(
œgu«_w©chdog_ªsour˚s
),

646 .
	gªsour˚
 = 
œgu«_w©chdog_ªsour˚s
,

652 
µs_gpio_∂©f‹m_d©a
 
	gœgu«_µs_d©a
 = {

653 .
gpio_pö
 = 0,

654 .
	ggpio_œbñ
 = "GPS_PPS",

655 .
	gas£π_ÁŒög_edge
 = 0,

656 .
	gˇ±uª_˛ór
 = 0,

659 
∂©f‹m_devi˚
 
	gœgu«_µs_devi˚
 = {

660 .
«me
 = "pps-gpio",

661 .
	gid
 = 
PLATFORM_DEVID_NONE
,

662 .
	gdev
.
	g∂©f‹m_d©a
 = &
œgu«_µs_d©a
,

669 
gpio
 
	gœgu«_gpio_gw2391
[] = {

670 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

671 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

672 { 2, 
GPIOF_IN
 , "*USB_FAULT#" },

673 { 5, 
GPIOF_OUT_INIT_LOW
 , "*USB0_PCI_SEL" },

674 { 6, 
GPIOF_OUT_INIT_HIGH
, "*USB_VBUS_EN" },

675 { 7, 
GPIOF_OUT_INIT_LOW
 , "*USB1_PCI_SEL" },

676 { 8, 
GPIOF_OUT_INIT_HIGH
, "*PERST#" },

677 { 9, 
GPIOF_OUT_INIT_LOW
 , "*FP_SER_EN#" },

678 { 100, 
GPIOF_IN
 , "*USER_PB#" },

679 { 103, 
GPIOF_OUT_INIT_HIGH
, "*V5_EN" },

680 { 108, 
GPIOF_IN
 , "DIO0" },

681 { 109, 
GPIOF_IN
 , "DIO1" },

682 { 110, 
GPIOF_IN
 , "DIO2" },

683 { 111, 
GPIOF_IN
 , "DIO3" },

684 { 112, 
GPIOF_IN
 , "DIO4" },

687 
gpio
 
	gœgu«_gpio_gw2388
[] = {

688 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

689 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

690 { 3, 
GPIOF_IN
 , "*USB_FAULT#" },

691 { 6, 
GPIOF_OUT_INIT_HIGH
, "*USB_VBUS_EN" },

692 { 7, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL0" },

693 { 8, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL1" },

694 { 9, 
GPIOF_OUT_INIT_LOW
 , "*FP_SER_EN" },

695 { 100, 
GPIOF_OUT_INIT_HIGH
, "*USER_PB#" },

696 { 108, 
GPIOF_IN
 , "DIO0" },

697 { 109, 
GPIOF_IN
 , "DIO1" },

698 { 110, 
GPIOF_IN
 , "DIO2" },

699 { 111, 
GPIOF_IN
 , "DIO3" },

700 { 112, 
GPIOF_IN
 , "DIO4" },

703 
gpio
 
	gœgu«_gpio_gw2387
[] = {

704 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

705 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

706 { 2, 
GPIOF_IN
 , "*USB_FAULT#" },

707 { 5, 
GPIOF_OUT_INIT_LOW
 , "*USB_PCI_SEL" },

708 { 6, 
GPIOF_OUT_INIT_HIGH
, "*USB_VBUS_EN" },

709 { 7, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL0" },

710 { 8, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL1" },

711 { 9, 
GPIOF_OUT_INIT_LOW
 , "*FP_SER_EN" },

712 { 100, 
GPIOF_IN
 , "*USER_PB#" },

713 { 103, 
GPIOF_OUT_INIT_HIGH
, "*V5_EN" },

714 { 108, 
GPIOF_IN
 , "DIO0" },

715 { 109, 
GPIOF_IN
 , "DIO1" },

716 { 110, 
GPIOF_IN
 , "DIO2" },

717 { 111, 
GPIOF_IN
 , "DIO3" },

718 { 112, 
GPIOF_IN
 , "DIO4" },

719 { 113, 
GPIOF_IN
 , "DIO5" },

722 
gpio
 
	gœgu«_gpio_gw2386
[] = {

723 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

724 { 2, 
GPIOF_IN
 , "*USB_FAULT#" },

725 { 6, 
GPIOF_OUT_INIT_LOW
 , "*USB_PCI_SEL" },

726 { 7, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL0" },

727 { 8, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL1" },

728 { 9, 
GPIOF_OUT_INIT_LOW
 , "*FP_SER_EN" },

729 { 108, 
GPIOF_IN
 , "DIO0" },

730 { 109, 
GPIOF_IN
 , "DIO1" },

731 { 110, 
GPIOF_IN
 , "DIO2" },

732 { 111, 
GPIOF_IN
 , "DIO3" },

733 { 112, 
GPIOF_IN
 , "DIO4" },

734 { 113, 
GPIOF_IN
 , "DIO5" },

737 
gpio
 
	gœgu«_gpio_gw2385
[] = {

738 { 0, 
GPIOF_IN
 , "*GSC_IRQ#" },

739 { 1, 
GPIOF_OUT_INIT_HIGH
, "*USB_HST_VBUS_EN" },

740 { 2, 
GPIOF_IN
 , "*USB_HST_FAULT#" },

741 { 5, 
GPIOF_IN
 , "*USB_OTG_FAULT#" },

742 { 6, 
GPIOF_OUT_INIT_LOW
 , "*USB_HST_PCI_SEL" },

743 { 7, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL0" },

744 { 8, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL1" },

745 { 9, 
GPIOF_OUT_INIT_LOW
 , "*SER_EN" },

746 { 10, 
GPIOF_IN
, "*USER_PB#" },

747 { 11, 
GPIOF_OUT_INIT_HIGH
, "*PERST#" },

748 { 100, 
GPIOF_IN
 , "*USER_PB#" },

749 { 103, 
GPIOF_OUT_INIT_HIGH
, "V5_EN" },

752 
gpio
 
	gœgu«_gpio_gw2384
[] = {

753 { 0, 
GPIOF_IN
 , "*GSC_IRQ#" },

754 { 1, 
GPIOF_OUT_INIT_HIGH
, "*USB_HST_VBUS_EN" },

755 { 2, 
GPIOF_IN
 , "*USB_HST_FAULT#" },

756 { 5, 
GPIOF_IN
 , "*USB_OTG_FAULT#" },

757 { 6, 
GPIOF_OUT_INIT_LOW
 , "*USB_HST_PCI_SEL" },

758 { 7, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL0" },

759 { 8, 
GPIOF_OUT_INIT_LOW
 , "*GSM_SEL1" },

760 { 9, 
GPIOF_OUT_INIT_LOW
 , "*FP_SER_EN" },

761 { 12, 
GPIOF_OUT_INIT_LOW
 , "J10_DIOLED0" },

762 { 13, 
GPIOF_OUT_INIT_HIGH
, "*I2CMUX_RST#" },

763 { 14, 
GPIOF_OUT_INIT_LOW
 , "J10_DIOLED1" },

764 { 15, 
GPIOF_OUT_INIT_LOW
 , "J10_DIOLED2" },

765 { 100, 
GPIOF_IN
 , "*USER_PB#" },

766 { 103, 
GPIOF_OUT_INIT_HIGH
, "V5_EN" },

767 { 108, 
GPIOF_IN
 , "J9_DIOGSC0" },

770 
gpio
 
	gœgu«_gpio_gw2383
[] = {

771 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

772 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

773 { 2, 
GPIOF_OUT_INIT_HIGH
, "*PCIE_RST#" },

774 { 3, 
GPIOF_IN
 , "GPIO0" },

775 { 8, 
GPIOF_IN
 , "GPIO1" },

776 { 100, 
GPIOF_IN
 , "DIO0" },

777 { 101, 
GPIOF_IN
 , "DIO1" },

778 { 108, 
GPIOF_IN
 , "*USER_PB#" },

781 
gpio
 
	gœgu«_gpio_gw2382
[] = {

782 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

783 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

784 { 2, 
GPIOF_OUT_INIT_HIGH
, "*PCIE_RST#" },

785 { 3, 
GPIOF_IN
 , "GPIO0" },

786 { 4, 
GPIOF_IN
 , "GPIO1" },

787 { 9, 
GPIOF_OUT_INIT_HIGH
, "*USB_VBUS_EN" },

788 { 10, 
GPIOF_OUT_INIT_HIGH
, "*USB_PCI_SEL#" },

789 { 100, 
GPIOF_IN
 , "DIO0" },

790 { 101, 
GPIOF_IN
 , "DIO1" },

791 { 108, 
GPIOF_IN
 , "*USER_PB#" },

794 
gpio
 
	gœgu«_gpio_gw2380
[] = {

795 { 0, 
GPIOF_IN
 , "*GPS_PPS" },

796 { 1, 
GPIOF_IN
 , "*GSC_IRQ#" },

797 { 3, 
GPIOF_IN
 , "GPIO0" },

798 { 8, 
GPIOF_IN
 , "GPIO1" },

799 { 100, 
GPIOF_IN
 , "DIO0" },

800 { 101, 
GPIOF_IN
 , "DIO1" },

801 { 102, 
GPIOF_IN
 , "DIO2" },

802 { 103, 
GPIOF_IN
 , "DIO3" },

803 { 108, 
GPIOF_IN
 , "*USER_PB#" },

809 
__öô
 
	$œgu«_öô
()

811 
˛k
 *clk;

812 
u32
 
__iomem
 *
ªg
;

814 
˛k
 = 
	`˛k_ªgi°î_fixed_øã
(
NULL
, "cpu", NULL,

815 
CLK_IGNORE_UNUSED
,

816 
	`˙s3xxx_˝u_˛ock
() * (1000000 / 8));

817 
	`˛k_ªgi°î_˛kdev
(
˛k
, "˝u", 
NULL
);

819 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_w©chdog
);

821 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_i2c_c⁄åﬁÀr
);

824 
ªg
 = 
MISC_IO_PAD_DRIVE_STRENGTH_CTRL_B
;

825 *
ªg
 |= 0x300;

828 
ªg
 = 
MISC_GPIOB_PIN_ENABLE_REG
;

829 *
ªg
 |
	`BIT
(12) | BIT(13);

832 *
ªg
 |
	`BIT
(7) | BIT(8) | BIT(9) | BIT(10) | BIT(11);

834 
	`˙s3xxx_pwr_˛k_í
(1 << 
PM_CLK_GATE_REG_OFFSET_SPI_PCM_I2C
);

835 
	`˙s3xxx_pwr_powî_up
(1 << 
PM_CLK_GATE_REG_OFFSET_SPI_PCM_I2C
);

836 
	`˙s3xxx_pwr_so·_r°
(1 << 
PM_CLK_GATE_REG_OFFSET_SPI_PCM_I2C
);

838 
	`˙s3xxx_pwr_˛k_í
(
	`CNS3XXX_PWR_CLK_EN
(
SPI_PCM_I2C
));

839 
	`˙s3xxx_pwr_so·_r°
(
	`CNS3XXX_PWR_SOFTWARE_RST
(
SPI_PCM_I2C
));

841 
	`i2c_ªgi°î_bﬂrd_öfo
(0, 
	`ARRAY_AND_SIZE
(
œgu«_i2c_devi˚s
));

843 
pm_powî_off
 = 
˙s3xxx_powî_off
;

844 
	}
}

846 
m≠_desc
 
	gœgu«_io_desc
[] 
	g__öôd©a
 = {

848 .
vútuÆ
 = 
CNS3XXX_UART0_BASE_VIRT
,

849 .
	gp‚
 = 
__phys_to_p‚
(
CNS3XXX_UART0_BASE
),

850 .
	gÀngth
 = 
SZ_4K
,

851 .
	gty≥
 = 
MT_DEVICE
,

855 
__öô
 
	$œgu«_m≠_io
()

857 
	`˙s3xxx_m≠_io
();

858 
	`iŸabÀ_öô
(
	`ARRAY_AND_SIZE
(
œgu«_io_desc
));

859 
	`œgu«_óæy_£rül_£tup
();

860 
	}
}

862 
	$œgu«_ªgi°î_gpio
(
gpio
 *
¨øy
, 
size_t
 
num
)

864 
i
, 
îr
, 
ªt
;

866 
ªt
 = 0;

867 
i
 = 0; i < 
num
; i++, 
¨øy
++) {

868 c⁄° *
œbñ
 = 
¨øy
->label;

869 i‡(
œbñ
[0] == '*')

870 
œbñ
++;

871 
îr
 = 
	`gpio_ªque°_⁄e
(
¨øy
->
gpio
,áºay->
Êags
, 
œbñ
);

872 i‡(
îr
)

873 
ªt
 = 
îr
;

875 
îr
 = 
	`gpio_exp‹t
(
¨øy
->
gpio
,áºay->
œbñ
[0] != '*');

878  
ªt
;

879 
	}
}

882 
	g˙s3xxx_pcõxtúq
 = 1;

883 
__öô
 
	$˙s3xxx_pcõxtúq_dißbÀ
(*
s
)

885 
˙s3xxx_pcõxtúq
 = 0;

887 
	}
}

888 
__£tup
("n€xtúq", 
˙s3xxx_pcõxtúq_dißbÀ
);

890 
__öô
 
	$œgu«_pcõ_öô_úq
()

892 
u32
 
__iomem
 *
mem
 = (__iomem *)(
CNS3XXX_GPIOB_BASE_VIRT
 + 0x0004);

893 
u32
 
ªg
 = (
	`__øw_ªadl
(
mem
) >> 26) & 0xf;

894 
úqs
[] = {

895 
IRQ_CNS3XXX_EXTERNAL_PIN0
,

896 
IRQ_CNS3XXX_EXTERNAL_PIN1
,

897 
IRQ_CNS3XXX_EXTERNAL_PIN2
,

901 i‡(!
	`machöe_is_gw2388
())

905 i‡(
˙s3xxx_pcõxtúq
 && 
ªg
 != 1)

906 
˙s3xxx_pcõxtúq
 = 0;

908 i‡(
˙s3xxx_pcõxtúq
) {

909 
	`¥ötk
("laguna: using isolated PCI interrupts:"

911 
úqs
[0], irqs[1], irqs[2], irqs[3]);

912 
	`˙s3xxx_pcõ_£t_úqs
(0, 
úqs
);

914 
	`¥ötk
("laguna: using shared PCI interrupts: irq%d\n",

915 
IRQ_CNS3XXX_PCIE0_DEVICE
);

919 
	}
}

920 
subsys_öôˇŒ
(
œgu«_pcõ_öô_úq
);

922 
__öô
 
	$œgu«_modñ_£tup
()

924 
u32
 
__iomem
 *
mem
;

925 
u32
 
ªg
;

927 i‡(!
	`machöe_is_gw2388
())

930 
	`¥ötk
("Ru¬ög o¿G©ew‹k†Lagu« %s\n", 
œgu«_öfo
.
modñ
);

931 
	`˙s3xxx_gpio_öô
–0, 32, 
CNS3XXX_GPIOA_BASE_VIRT
, 
IRQ_CNS3XXX_GPIOA
,

932 
NR_IRQS_CNS3XXX
);

941 i‡(
˙s3xxx_pcõxtúq
) {

942 
mem
 = (
__iomem
 *)(
CNS3XXX_MISC_BASE_VIRT
 + 0x0018);

943 
ªg
 = 
	`__øw_ªadl
(
mem
);

945 
ªg
 &= ~0x3c000000;

946 
ªg
 |= 0x38000000;

947 
	`__øw_wrôñ
(
ªg
, 
mem
);

949 
	`˙s3xxx_gpio_öô
(32, 32, 
CNS3XXX_GPIOB_BASE_VIRT
,

950 
IRQ_CNS3XXX_GPIOB
, 
NR_IRQS_CNS3XXX
 + 32);

952 
	`úq_£t_úq_ty≥
(154, 
IRQ_TYPE_LEVEL_LOW
);

953 
	`úq_£t_úq_ty≥
(93, 
IRQ_TYPE_LEVEL_HIGH
);

954 
	`úq_£t_úq_ty≥
(94, 
IRQ_TYPE_LEVEL_HIGH
);

955 
	`úq_£t_úq_ty≥
(95, 
IRQ_TYPE_LEVEL_HIGH
);

957 
	`˙s3xxx_gpio_öô
(32, 32, 
CNS3XXX_GPIOB_BASE_VIRT
,

958 
IRQ_CNS3XXX_GPIOB
, 
NR_IRQS_CNS3XXX
 + 32);

961 i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW", 2) == 0) {

962 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & 
ETH0_LOAD
)

963 
œgu«_√t_d©a
.
p‹ts
 |
	`BIT
(0);

964 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & 
ETH1_LOAD
)

965 
œgu«_√t_d©a
.
p‹ts
 |
	`BIT
(1);

966 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & 
ETH2_LOAD
)

967 
œgu«_√t_d©a
.
p‹ts
 |
	`BIT
(2);

968 i‡(
œgu«_√t_d©a
.
p‹ts
)

969 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_√t_devi˚
);

971 i‡((
œgu«_öfo
.
c⁄fig_bôm≠
 & 
SATA0_LOAD
) ||

972 (
œgu«_öfo
.
c⁄fig_bôm≠
 & 
SATA1_LOAD
))

973 
	`˙s3xxx_ahci_öô
();

975 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
USB0_LOAD
)) {

976 
	`˙s3xxx_pwr_powî_up
(1 << 
PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_USB
);

979 
mem
 = (
__iomem
 *)(
CNS3XXX_MISC_BASE_VIRT
 + 0x0014);

980 
ªg
 = 
	`__øw_ªadl
(
mem
);

981 
ªg
 |= 0x8;

982 
	`__øw_wrôñ
(
ªg
, 
mem
);

985 
mem
 = (
__iomem
 *)(
CNS3XXX_MISC_BASE_VIRT
 + 0x0808);

986 
ªg
 = 
	`__øw_ªadl
(
mem
);

987 
ªg
 &= ~(1 << 10);

988 
	`__øw_wrôñ
(
ªg
, 
mem
);

990 
	`∂©f‹m_devi˚_ªgi°î
(&
˙s3xxx_usb_Ÿg_devi˚
);

993 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
USB1_LOAD
)) {

994 
	`∂©f‹m_devi˚_ªgi°î
(&
˙s3xxx_usb_ehci_devi˚
);

995 
	`∂©f‹m_devi˚_ªgi°î
(&
˙s3xxx_usb_ohci_devi˚
);

998 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
SD_LOAD
))

999 
	`˙s3xxx_sdhci_öô
();

1001 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
UART0_LOAD
))

1002 
œgu«_u¨t
.
num_ªsour˚s
 = 1;

1003 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
UART1_LOAD
))

1004 
œgu«_u¨t
.
num_ªsour˚s
 = 2;

1005 i‡(
œgu«_öfo
.
c⁄fig_bôm≠
 & (
UART2_LOAD
))

1006 
œgu«_u¨t
.
num_ªsour˚s
 = 3;

1007 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_u¨t
);

1009 i‡(
œgu«_öfo
.
c⁄fig2_bôm≠
 & (
NOR_FLASH_LOAD
)) {

1010 
œgu«_n‹_∑πôi⁄s
[2].
size
 =

1011 (
SZ_4M
 << 
œgu«_öfo
.
n‹_Êash_size
) -

1012 
œgu«_n‹_∑πôi⁄s
[2].
off£t
;

1013 
œgu«_n‹_ªs
.
íd
 = 
CNS3XXX_FLASH_BASE
 +

1014 
œgu«_n‹_∑πôi⁄s
[2].
off£t
 +

1015 
œgu«_n‹_∑πôi⁄s
[2].
size
 - 1;

1016 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_n‹_pdev
);

1019 i‡(
œgu«_öfo
.
c⁄fig2_bôm≠
 & (
SPI_FLASH_LOAD
)) {

1020 
œgu«_•i_∑πôi⁄s
[2].
size
 =

1021 (
SZ_2M
 << 
œgu«_öfo
.
•i_Êash_size
) -

1022 
œgu«_•i_∑πôi⁄s
[2].
off£t
;

1023 
	`•i_ªgi°î_bﬂrd_öfo
(
	`ARRAY_AND_SIZE
(
œgu«_•i_devi˚s
));

1026 i‡((
œgu«_öfo
.
c⁄fig_bôm≠
 & 
SPI0_LOAD
) ||

1027 (
œgu«_öfo
.
c⁄fig_bôm≠
 & 
SPI1_LOAD
))

1028 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_•i_c⁄åﬁÀr
);

1030 i‡(
œgu«_öfo
.
c⁄fig2_bôm≠
 & 
GPS_LOAD
)

1031 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_µs_devi˚
);

1038 i‡–(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2388", 6) == 0)

1039 || (
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2389", 6) == 0) )

1042 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2388
));

1044 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 2;

1045 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2387", 6) == 0) {

1047 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2387
));

1049 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 2;

1050 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2386", 6) == 0) {

1052 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2386
));

1054 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 2;

1055 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2385", 6) == 0) {

1057 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2385
));

1059 
œgu«_gpio_Àds
[0].
gpio
 = 115;

1060 
œgu«_gpio_Àds
[1].
gpio
 = 12;

1061 
œgu«_gpio_Àds
[1].
«me
 = "red";

1062 
œgu«_gpio_Àds
[1].
a˘ive_low
 = 0,

1063 
œgu«_gpio_Àds
[2].
gpio
 = 14;

1064 
œgu«_gpio_Àds
[2].
«me
 = "green";

1065 
œgu«_gpio_Àds
[2].
a˘ive_low
 = 0,

1066 
œgu«_gpio_Àds
[3].
gpio
 = 15;

1067 
œgu«_gpio_Àds
[3].
«me
 = "blue";

1068 
œgu«_gpio_Àds
[3].
a˘ive_low
 = 0,

1069 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 4;

1070 } i‡–(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2384", 6) == 0)

1071 || (
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2394", 6) == 0) )

1074 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2384
));

1076 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 1;

1077 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2383", 6) == 0) {

1079 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2383
));

1081 
œgu«_gpio_Àds
[0].
gpio
 = 107;

1082 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 1;

1083 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2382", 6) == 0) {

1085 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2382
));

1087 
œgu«_gpio_Àds
[0].
gpio
 = 107;

1088 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 1;

1089 } i‡(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2380", 6) == 0) {

1091 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2380
));

1093 
œgu«_gpio_Àds
[0].
gpio
 = 107;

1094 
œgu«_gpio_Àds
[1].
gpio
 = 106;

1095 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 2;

1096 } i‡–(
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2391", 6) == 0)

1097 || (
	`°∫cmp
(
œgu«_öfo
.
modñ
, "GW2393", 6) == 0) )

1100 
	`œgu«_ªgi°î_gpio
(
	`ARRAY_AND_SIZE
(
œgu«_gpio_gw2391
));

1102 
œgu«_gpio_Àds_d©a
.
num_Àds
 = 2;

1104 
	`∂©f‹m_devi˚_ªgi°î
(&
œgu«_gpio_Àds_devi˚
);

1109 
	}
}

1110 
œã_öôˇŒ
(
œgu«_modñ_£tup
);

1112 
MACHINE_START
(
GW2388
, "Gateworks Corporation Laguna Platform")

1113 .
	gsmp
 = 
smp_›s
(
˙s3xxx_smp_›s
),

1114 .
	g©ag_off£t
 = 0x100,

1115 .
	gm≠_io
 = 
œgu«_m≠_io
,

1116 .
	göô_úq
 = 
˙s3xxx_öô_úq
,

1117 .
	göô_time
 = 
˙s3xxx_timî_öô
,

1118 .
	göô_machöe
 = 
œgu«_öô
,

1119 .
	göô_œã
 = 
˙s3xxx_pcõ_öô_œã
,

1120 .
	gª°¨t
 = 
˙s3xxx_ª°¨t
,

1121 
	gMACHINE_END


	@linux/cns3xxx/files/arch/arm/mach-cns3xxx/platsmp.c

15 
	~<löux/öô.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/devi˚.h
>

19 
	~<löux/jiffõs.h
>

20 
	~<löux/smp.h
>

21 
	~<löux/io.h
>

23 
	~<asm/ˇcheÊush.h
>

24 
	~<asm/smp_scu.h
>

25 
	~<asm/unifõd.h
>

26 
	~<asm/fiq.h
>

27 
	~<mach/smp.h
>

28 
	~"˙s3xxx.h
"

30 
fiq_h™dÀr
 
	gfh
 = {

31 .
«me
 = "cns3xxx-fiq"

34 
	sfiq_ªq
 {

37 c⁄° *
	maddr
;

38 
size_t
 
	msize
;

39 } 
	mm≠
;

41 c⁄° *
	maddr
;

42 
size_t
 
	msize
;

43 } 
	munm≠
;

45 c⁄° *
	m°¨t
;

46 c⁄° *
	míd
;

47 } 
	mÊush
;

49 vﬁ©ûê
uöt
 
	mÊags
;

50 
__iomem
 *
	mªg
;

51 } 
	g____ˇchñöe_Æig√d
;

53 
fiq_numbî
[2];

55 
DEFINE_PER_CPU
(
fiq_ªq
, 
fiq_d©a
);

57 
	#FIQ_ENABLED
 0x80000000

	)

58 
	#FIQ_GENERATE
 0x00010000

	)

59 
	#CNS3XXX_MAP_AREA
 0x01000000

	)

60 
	#CNS3XXX_UNMAP_AREA
 0x02000000

	)

61 
	#CNS3XXX_FLUSH_RANGE
 0x03000000

	)

63 
˙s3xxx_£c⁄d¨y_°¨tup
();

64 
˙s3xxx_fiq_°¨t
, 
˙s3xxx_fiq_íd
;

66 
	#SCU_CPU_STATUS
 0x08

	)

67 
__iomem
 *
	gscu_ba£
;

69 
ölöe
 
	$˙s3xxx_£t_fiq_ªgs
(
˝u
)

71 
±_ªgs
 
FIQ_ªgs
;

72 
fiq_ªq
 *fiq_ªq = &
	`≥r_˝u
(
fiq_d©a
, !
˝u
);

74 
FIQ_ªgs
.
ARM_r8
 = 0;

75 
FIQ_ªgs
.
ARM_ù
 = ()
fiq_ªq
;

76 
FIQ_ªgs
.
ARM_•
 = (Ë
	`MISC_FIQ_CPU
(!
˝u
);

77 
fiq_ªq
->
ªg
 = 
	`MISC_FIQ_CPU
(!
˝u
);

79 
	`£t_fiq_ªgs
(&
FIQ_ªgs
);

80 
	}
}

82 
__öô
 
	$˙s3xxx_öô_fiq
()

84 *
fiqh™dÀr_°¨t
;

85 
fiqh™dÀr_Àngth
;

86 
ªt
;

88 
fiqh™dÀr_°¨t
 = &
˙s3xxx_fiq_°¨t
;

89 
fiqh™dÀr_Àngth
 = &
˙s3xxx_fiq_íd
 - &
˙s3xxx_fiq_°¨t
;

91 
ªt
 = 
	`˛aim_fiq
(&
fh
);

92 i‡(
ªt
)

95 
	`£t_fiq_h™dÀr
(
fiqh™dÀr_°¨t
, 
fiqh™dÀr_Àngth
);

96 
	}
}

104 
	$wrôe_≥n_ªÀa£
(
vÆ
)

106 
≥n_ªÀa£
 = 
vÆ
;

107 
	`smp_wmb
();

108 
	`__˝uc_Êush_dˇche_¨ó
((*)&
≥n_ªÀa£
, (pen_release));

109 
	`ouãr_˛ón_ønge
(
	`__∑
(&
≥n_ªÀa£
), __pa(&pen_release + 1));

110 
	}
}

112 
DEFINE_SPINLOCK
(
boŸ_lock
);

114 
	$˙s3xxx_£c⁄d¨y_öô
(
˝u
)

119 
	`˙s3xxx_£t_fiq_ªgs
(1);

125 
	`wrôe_≥n_ªÀa£
(-1);

130 
	`•ö_lock
(&
boŸ_lock
);

131 
	`•ö_u∆ock
(&
boŸ_lock
);

132 
	}
}

134 
	$˙s3xxx_boŸ_£c⁄d¨y
(
˝u
, 
èsk_°ru˘
 *
idÀ
)

136 
timeout
;

142 
	`•ö_lock
(&
boŸ_lock
);

152 
	`wrôe_≥n_ªÀa£
(
˝u
);

159 
	`¨ch_£nd_wakeup_ùi_mask
(
	`˝umask_of
(
˝u
));;

161 
timeout
 = 
jiffõs
 + (1 * 
HZ
);

162 
	`time_bef‹e
(
jiffõs
, 
timeout
)) {

163 
	`smp_rmb
();

164 i‡(
≥n_ªÀa£
 == -1)

167 
	`udñay
(10);

174 
	`•ö_u∆ock
(&
boŸ_lock
);

176  
≥n_ªÀa£
 !-1 ? -
ENOSYS
 : 0;

177 
	}
}

183 
__öô
 
	$˙s3xxx_smp_öô_˝us
()

185 
i
, 
nc‹es
;

186 
°©us
;

188 
scu_ba£
 = (
__iomem
 *Ë
CNS3XXX_TC11MP_SCU_BASE_VIRT
;

193 
°©us
 = 
	`__øw_ªadl
(
scu_ba£
 + 
SCU_CPU_STATUS
);

194 
i
 = 0; i < 
NR_CPUS
+1; i++) {

195 i‡(((
°©us
 >> (
i
*2)) & 0x3) == 0)

196 
	`£t_˝u_possibÀ
(
i
, 
åue
);

200 
nc‹es
 = 
i
;

201 
	}
}

203 
__öô
 
	$˙s3xxx_smp_¥ï¨e_˝us
(
max_˝us
)

208 
	`scu_íabÀ
(
scu_ba£
);

216 
	`__øw_wrôñ
(
	`vút_to_phys
(
˙s3xxx_£c⁄d¨y_°¨tup
),

217 (
__iomem
 *)(
CNS3XXX_MISC_BASE_VIRT
 + 0x0600));

222 
	`˙s3xxx_öô_fiq
();

223 
	`˙s3xxx_£t_fiq_ªgs
(0);

224 
	}
}

226 
v6_dma_m≠_¨ó
(c⁄° *, 
size_t
, );

227 
v6_dma_unm≠_¨ó
(c⁄° *, 
size_t
, );

228 
v6_dma_Êush_ønge
(const *, const *);

229 
v6_Êush_kîn_dˇche_¨ó
(*, 
size_t
);

231 
	$fiq_dma_m≠_¨ó
(c⁄° *
addr
, 
size_t
 
size
, 
dú
)

233 
Êags
;

234 
fiq_ªq
 *
ªq
;

236 
	`øw_loˇl_úq_ßve
(
Êags
);

238 i‡(!
	`˝u_⁄löe
(1)) {

239 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

240 
	`v6_dma_m≠_¨ó
(
addr
, 
size
, 
dú
);

244 
ªq
 = 
	`this_˝u_±r
(&
fiq_d©a
);

245 
ªq
->
m≠
.
addr
 =áddr;

246 
ªq
->
m≠
.
size
 = size;

247 
ªq
->
Êags
 = 
dú
 | 
CNS3XXX_MAP_AREA
;

248 
	`smp_mb
();

250 
	`wrôñ_ªœxed
(
FIQ_GENERATE
, 
ªq
->
ªg
);

252 
	`v6_dma_m≠_¨ó
(
addr
, 
size
, 
dú
);

253 
ªq
->
Êags
)

254 
	`b¨rõr
();

256 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

257 
	}
}

259 
	$fiq_dma_unm≠_¨ó
(c⁄° *
addr
, 
size_t
 
size
, 
dú
)

261 
Êags
;

262 
fiq_ªq
 *
ªq
;

264 
	`øw_loˇl_úq_ßve
(
Êags
);

266 i‡(!
	`˝u_⁄löe
(1)) {

267 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

268 
	`v6_dma_unm≠_¨ó
(
addr
, 
size
, 
dú
);

272 
ªq
 = 
	`this_˝u_±r
(&
fiq_d©a
);

273 
ªq
->
unm≠
.
addr
 =áddr;

274 
ªq
->
unm≠
.
size
 = size;

275 
ªq
->
Êags
 = 
dú
 | 
CNS3XXX_UNMAP_AREA
;

276 
	`smp_mb
();

278 
	`wrôñ_ªœxed
(
FIQ_GENERATE
, 
ªq
->
ªg
);

280 
	`v6_dma_unm≠_¨ó
(
addr
, 
size
, 
dú
);

281 
ªq
->
Êags
)

282 
	`b¨rõr
();

284 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

285 
	}
}

287 
	$fiq_dma_Êush_ønge
(c⁄° *
°¨t
, c⁄° *
íd
)

289 
Êags
;

290 
fiq_ªq
 *
ªq
;

292 
	`øw_loˇl_úq_ßve
(
Êags
);

294 i‡(!
	`˝u_⁄löe
(1)) {

295 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

296 
	`v6_dma_Êush_ønge
(
°¨t
, 
íd
);

300 
ªq
 = 
	`this_˝u_±r
(&
fiq_d©a
);

302 
ªq
->
Êush
.
°¨t
 = start;

303 
ªq
->
Êush
.
íd
 =Énd;

304 
ªq
->
Êags
 = 
CNS3XXX_FLUSH_RANGE
;

305 
	`smp_mb
();

307 
	`wrôñ_ªœxed
(
FIQ_GENERATE
, 
ªq
->
ªg
);

309 
	`v6_dma_Êush_ønge
(
°¨t
, 
íd
);

311 
ªq
->
Êags
)

312 
	`b¨rõr
();

314 
	`øw_loˇl_úq_ª°‹e
(
Êags
);

315 
	}
}

317 
	$fiq_Êush_kîn_dˇche_¨ó
(*
addr
, 
size_t
 
size
)

319 
	`fiq_dma_Êush_ønge
(
addr
,ádd∏+ 
size
);

320 
	}
}

322 
smp_›î©i⁄s
 
˙s3xxx_smp_›s
 
	g__öôd©a
 = {

323 .
smp_öô_˝us
 = 
˙s3xxx_smp_öô_˝us
,

324 .
	gsmp_¥ï¨e_˝us
 = 
˙s3xxx_smp_¥ï¨e_˝us
,

325 .
	gsmp_£c⁄d¨y_öô
 = 
˙s3xxx_£c⁄d¨y_öô
,

326 .
	gsmp_boŸ_£c⁄d¨y
 = 
˙s3xxx_boŸ_£c⁄d¨y
,

	@linux/cns3xxx/files/drivers/i2c/busses/i2c-cns3xxx.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/∂©f‹m_devi˚.h
>

18 
	~<asm/io.h
>

19 
	~<löux/waô.h
>

20 
	~<löux/öãºu±.h
>

21 
	~<löux/dñay.h
>

22 
	~<löux/i2c.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/˛k.h
>

30 
	#I2C_MEM_MAP_ADDR
(
x
Ë(
i2c
->
ba£
 + x)

	)

31 
	#I2C_MEM_MAP_VALUE
(
x
Ë(*((vﬁ©ûe*)
	`I2C_MEM_MAP_ADDR
(x)))

	)

33 
	#I2C_CONTROLLER_REG
 
	`I2C_MEM_MAP_VALUE
(0x00)

	)

34 
	#I2C_TIME_OUT_REG
 
	`I2C_MEM_MAP_VALUE
(0x04)

	)

35 
	#I2C_SLAVE_ADDRESS_REG
 
	`I2C_MEM_MAP_VALUE
(0x08)

	)

36 
	#I2C_WRITE_DATA_REG
 
	`I2C_MEM_MAP_VALUE
(0x0C)

	)

37 
	#I2C_READ_DATA_REG
 
	`I2C_MEM_MAP_VALUE
(0x10)

	)

38 
	#I2C_INTERRUPT_STATUS_REG
 
	`I2C_MEM_MAP_VALUE
(0x14)

	)

39 
	#I2C_INTERRUPT_ENABLE_REG
 
	`I2C_MEM_MAP_VALUE
(0x18)

	)

40 
	#I2C_TWI_OUT_DLY_REG
 
	`I2C_MEM_MAP_VALUE
(0x1C)

	)

42 
	#I2C_BUS_ERROR_FLAG
 (0x1)

	)

43 
	#I2C_ACTION_DONE_FLAG
 (0x2)

	)

45 
	#CNS3xxx_I2C_ENABLE
(Ë(
I2C_CONTROLLER_REG
Ë|(()0x1 << 31)

	)

46 
	#CNS3xxx_I2C_DISABLE
(Ë(
I2C_CONTROLLER_REG
Ë&~(()0x1 << 31)

	)

47 
	#CNS3xxx_I2C_ENABLE_INTR
(Ë(
I2C_INTERRUPT_ENABLE_REG
Ë|0x03

	)

48 
	#CNS3xxx_I2C_DISABLE_INTR
(Ë(
I2C_INTERRUPT_ENABLE_REG
Ë&0xfc

	)

50 
	#TWI_TIMEOUT
 (10*
HZ
)

	)

51 
	#I2C_100KHZ
 100000

	)

52 
	#I2C_200KHZ
 200000

	)

53 
	#I2C_300KHZ
 300000

	)

54 
	#I2C_400KHZ
 400000

	)

56 
	#CNS3xxx_I2C_CLK
 
I2C_100KHZ


	)

58 
	#STATE_DONE
 1

	)

59 
	#STATE_ERROR
 2

	)

61 
	s˙s3xxx_i2c
 {

62 
devi˚
 *
	mdev
;

63 
__iomem
 *
	mba£
;

64 
waô_queue_hód_t
 
	mwaô
;

65 
i2c_ad≠ãr
 
	mad≠
;

66 
i2c_msg
 *
	mmsg
;

67 
u8
 
	m°©e
;

68 
u8
 
	mîr‹
;

69 
	mrd_wr_Àn
;

70 
u8
 *
	mbuf
;

73 
u32
 
	$˙s3xxx_i2c_func
(
i2c_ad≠ãr
 *
ad≠
)

75  
I2C_FUNC_I2C
 | 
I2C_FUNC_SMBUS_EMUL
;

76 
	}
}

79 
	$˙s3xxx_i2c_x„r_msg
(
i2c_ad≠ãr
 *
ad≠
, 
i2c_msg
 *
msg
)

81 
˙s3xxx_i2c
 *
i2c
 = 
	`i2c_gë_ad≠d©a
(
ad≠
);

82 
i
, 
j
;

83 
u8
 
buf
[1] = { 0 };

85 i‡(
msg
->
Àn
 == 0) {

90 
msg
->
Àn
 = 1;

91 
i2c
->
buf
 = buf;

93 
i2c
->
buf
 = 
msg
->buf;

96 i‡(
msg
->
Êags
 & 
I2C_M_TEN
) {

97 
¥ötk


99 
__FUNCTION__
, 
__LINE__
);

100  -
EINVAL
;

102 
i2c
->
msg
 = msg;

104 
i
 = 0; i < 
msg
->
Àn
; i++) {

105 i‡(
msg
->
Àn
 - 
i
 >= 4)

106 
i2c
->
rd_wr_Àn
 = 3;

108 
i2c
->
rd_wr_Àn
 = 
msg
->
Àn
 - 
i
 - 1;

111 
I2C_CONTROLLER_REG
 = 0x80000000 | (
i2c
->
rd_wr_Àn
 << 2) | (i2c->rd_wr_len);

114 
I2C_WRITE_DATA_REG
 = 0;

117 
I2C_SLAVE_ADDRESS_REG
 = (
msg
->
addr
 << 1);

120 i‡(!(
msg
->
Êags
 & 
I2C_M_RD
)) {

121 
I2C_CONTROLLER_REG
 |= (1 << 4);

122 i‡(
i
 != 0) {

128 
i2c
->
buf
--;

129 *
i2c
->
buf
 = buf[0] + 
i
 - 1;

131 i‡(
i2c
->
rd_wr_Àn
 < 3) {

132 
i
 +
i2c
->
rd_wr_Àn
;

133 
i2c
->
rd_wr_Àn
++;

134 
I2C_CONTROLLER_REG
 = 0x80000000 | (1 << 4Ë| (
i2c
->
rd_wr_Àn
 << 2) | (i2c->rd_wr_len);

136 
i
 +
i2c
->
rd_wr_Àn
 - 1;

139 
i
 +
i2c
->
rd_wr_Àn
;

140 
buf
[0] = *
i2c
->buf;

142 
j
 = 0; j <
i2c
->
rd_wr_Àn
; j++) {

143 
I2C_WRITE_DATA_REG
 |((*
i2c
->
buf
++Ë<< (8 * 
j
));

146 
i
 +
i2c
->
rd_wr_Àn
;

150 
i2c
->
°©e
 = 0;

151 
i2c
->
îr‹
 = 0;

152 
I2C_CONTROLLER_REG
 |= (1 << 6);

154 i‡(
	`waô_evít_timeout
(
i2c
->
waô
, (i2c->
°©e
 =
STATE_ERROR
) ||

155 (
i2c
->
°©e
 =
STATE_DONE
), 
TWI_TIMEOUT
)) {

156 i‡(
i2c
->
°©e
 =
STATE_ERROR
) {

157 
	`dev_dbg
(
i2c
->
dev
, "c⁄åﬁÀ∏îr‹: 0x%2x", i2c->
îr‹
);

158  -
EAGAIN
;

161 
	`dev_îr
(
i2c
->
dev
, "controllerÅimed out "

163  -
ETIMEDOUT
;

167 
	}
}

170 
	$˙s3xxx_i2c_x„r
(
i2c_ad≠ãr
 *
ad≠
, 
i2c_msg
 *
msgs
, 
num
)

172 
i
;

173 
ªt
;

174 
i
 = 0; i < 
num
; i++)

176 
ªt
 = 
	`˙s3xxx_i2c_x„r_msg
(
ad≠
, &
msgs
[
i
]);

177 i‡(
ªt
 < 0) {

178  
ªt
;

181  
num
;

182 
	}
}

185 
i2c_Æg‹ôhm
 
	g˙s3xxx_i2c_Ægo
 = {

186 .
ma°î_x„r
 = 
˙s3xxx_i2c_x„r
,

187 .
	gfun˘i⁄Æôy
 = 
˙s3xxx_i2c_func
,

190 
i2c_ad≠ãr
 
	g˙s3xxx_i2c_ad≠ãr
 = {

191 .
ow√r
 = 
THIS_MODULE
,

192 .
	gÆgo
 = &
˙s3xxx_i2c_Ægo
,

193 .
	gÆgo_d©a
 = 
NULL
,

194 .
	gƒ
 = 0,

195 .
	g«me
 = "CNS3xxx I2C 0",

196 .
	gªåõs
 = 5,

199 
	$˙s3xxx_i2c_ad≠ãr_öô
(
˙s3xxx_i2c
 *
i2c
)

201 
˛k
 *clk;

203 
˛k
 = 
	`devm_˛k_gë
(
i2c
->
dev
, "cpu");

204 i‡(
	`WARN_ON
(!
˛k
))

208 
I2C_CONTROLLER_REG
 = 0;

211 
I2C_TIME_OUT_REG
 =

212 (((((
	`˛k_gë_øã
(
˛k
Ë/ (2 * 
CNS3xxx_I2C_CLK
)) -

214 
I2C_TWI_OUT_DLY_REG
 |= 0x3;

217 
	`CNS3xxx_I2C_ENABLE_INTR
();

220 
I2C_INTERRUPT_STATUS_REG
 |(
I2C_ACTION_DONE_FLAG
 | 
I2C_BUS_ERROR_FLAG
);

223 
	`CNS3xxx_I2C_ENABLE
();

224 
	}
}

226 
úqªtu∫_t
 
	$˙s3xxx_i2c_i§
(
úq
, *
dev_id
)

228 
˙s3xxx_i2c
 *
i2c
 = 
dev_id
;

229 
i
;

230 
uöt32_t
 
°©
 = 
I2C_INTERRUPT_STATUS_REG
;

233 
I2C_INTERRUPT_STATUS_REG
 |= 0x1;

235 i‡(
°©
 & 
I2C_BUS_ERROR_FLAG
) {

236 
i2c
->
°©e
 = 
STATE_ERROR
;

237 
i2c
->
îr‹
 = (
I2C_INTERRUPT_STATUS_REG
 & 0xff00)>>8;

239 i‡(
i2c
->
msg
->
Êags
 & 
I2C_M_RD
) {

240 
i
 = 0; i <
i2c
->
rd_wr_Àn
; i++)

242 *
i2c
->
buf
++ = ((
I2C_READ_DATA_REG
 >> (8 * 
i
)) & 0xff);

245 
i2c
->
°©e
 = 
STATE_DONE
;

247 
	`wake_up
(&
i2c
->
waô
);

248  
IRQ_HANDLED
;

249 
	}
}

251 
	$˙s3xxx_i2c_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

253 
˙s3xxx_i2c
 *
i2c
;

254 
ªsour˚
 *
ªs
, *
ªs2
;

255 
ªt
;

257 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

258 i‡(!
ªs
) {

259 
	`¥ötk
("%s: IORESOURCE_MEMÇŸ deföed \n", 
__FUNCTION__
);

260  -
ENODEV
;

263 
ªs2
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

264 i‡(!
ªs2
) {

265 
	`¥ötk
("%s: IORESOURCE_IRQÇŸ deföed \n", 
__FUNCTION__
);

266  -
ENODEV
;

269 
i2c
 = 
	`kzÆloc
((*i2c), 
GFP_KERNEL
);

270 i‡(!
i2c
)

271  -
ENOMEM
;

273 i‡(!
	`ªque°_mem_ªgi⁄
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1,

274 
pdev
->
«me
)) {

275 
	`dev_îr
(&
pdev
->
dev
, "MemoryÑegion busy\n");

276 
ªt
 = -
EBUSY
;

277 
ªque°_mem_Áûed
;

280 
i2c
->
dev
 = &
pdev
->dev;

281 
i2c
->
ba£
 = 
	`i‹em≠
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1);

282 i‡(!
i2c
->
ba£
) {

283 
	`dev_îr
(&
pdev
->
dev
, "UnableÅo mapÑegisters\n");

284 
ªt
 = -
EIO
;

285 
m≠_Áûed
;

288 
	`˙s3xxx_i2c_ad≠ãr_öô
(
i2c
);

290 
	`öô_waôqueue_hód
(&
i2c
->
waô
);

291 
ªt
 = 
	`ªque°_úq
(
ªs2
->
°¨t
, 
˙s3xxx_i2c_i§
, 0, 
pdev
->
«me
, 
i2c
);

292 i‡(
ªt
) {

293 
	`dev_îr
(&
pdev
->
dev
, "Cannot claim IRQ\n");

294 
ªque°_úq_Áûed
;

297 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
i2c
);

298 
i2c
->
ad≠
 = 
˙s3xxx_i2c_ad≠ãr
;

299 
	`i2c_£t_ad≠d©a
(&
i2c
->
ad≠
, i2c);

300 
i2c
->
ad≠
.
dev
.
∑ª¡
 = &
pdev
->dev;

303 
ªt
 = 
	`i2c_add_numbîed_ad≠ãr
(&
i2c
->
ad≠
);

304 i‡(
ªt
) {

305 
	`dev_îr
(&
pdev
->
dev
, "FailedÅoáddádapter\n");

306 
add_ad≠ãr_Áûed
;

311 
add_ad≠ãr_Áûed
:

312 
	`‰ì_úq
(
ªs2
->
°¨t
, 
i2c
);

313 
ªque°_úq_Áûed
:

314 
	`iounm≠
(
i2c
->
ba£
);

315 
m≠_Áûed
:

316 
	`ªÀa£_mem_ªgi⁄
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1);

317 
ªque°_mem_Áûed
:

318 
	`k‰ì
(
i2c
);

320  
ªt
;

321 
	}
}

323 
	$˙s3xxx_i2c_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

325 
˙s3xxx_i2c
 *
i2c
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

326 
ªsour˚
 *
ªs
;

329 
	`CNS3xxx_I2C_DISABLE_INTR
();

330 
	`CNS3xxx_I2C_DISABLE
();

332 
	`i2c_dñ_ad≠ãr
(&
i2c
->
ad≠
);

333 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

335 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

336 i‡(
ªs
)

337 
	`‰ì_úq
(
ªs
->
°¨t
, 
i2c
);

339 
	`iounm≠
(
i2c
->
ba£
);

341 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

342 i‡(
ªs
)

343 
	`ªÀa£_mem_ªgi⁄
(
ªs
->
°¨t
,Ñes->
íd
 -Ñes->start + 1);

345 
	`k‰ì
(
i2c
);

348 
	}
}

350 
∂©f‹m_drivî
 
	g˙s3xxx_i2c_drivî
 = {

351 .
¥obe
 = 
˙s3xxx_i2c_¥obe
,

352 .
	gªmove
 = 
˙s3xxx_i2c_ªmove
,

353 .
	gdrivî
 = {

354 .
ow√r
 = 
THIS_MODULE
,

355 .
	g«me
 = "cns3xxx-i2c",

359 
__öô
 
	$˙s3xxx_i2c_öô
()

361  
	`∂©f‹m_drivî_ªgi°î
(&
˙s3xxx_i2c_drivî
);

362 
	}
}

364 
__exô
 
	$˙s3xxx_i2c_exô
()

366 
	`∂©f‹m_drivî_uƒegi°î
(&
˙s3xxx_i2c_drivî
);

367 
	}
}

369 
moduÀ_öô
(
˙s3xxx_i2c_öô
);

370 
moduÀ_exô
(
˙s3xxx_i2c_exô
);

372 
MODULE_AUTHOR
("Cavium Networks");

373 
MODULE_DESCRIPTION
("Cavium CNS3XXX I2C Controller");

374 
MODULE_LICENSE
("GPL");

	@linux/cns3xxx/files/drivers/net/ethernet/cavium/cns3xxx_eth.c

13 
	~<löux/dñay.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/dma-m≠pög.h
>

16 
	~<löux/dm≠oﬁ.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/öãºu±.h
>

19 
	~<löux/io.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/phy.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/∂©f‹m_d©a/˙s3xxx.h
>

24 
	~<löux/skbuff.h
>

26 
	#DRV_NAME
 "˙s3xxx_ëh"

	)

28 
	#RX_DESCS
 256

	)

29 
	#TX_DESCS
 128

	)

30 
	#TX_DESC_RESERVE
 20

	)

32 
	#RX_POOL_ALLOC_SIZE
 ((
rx_desc
Ë* 
RX_DESCS
)

	)

33 
	#TX_POOL_ALLOC_SIZE
 ((
tx_desc
Ë* 
TX_DESCS
)

	)

34 
	#REGS_SIZE
 336

	)

36 
	#RX_BUFFER_ALIGN
 64

	)

37 
	#RX_BUFFER_ALIGN_MASK
 (~(
RX_BUFFER_ALIGN
 - 1))

	)

39 
	#SKB_HEAD_ALIGN
 (((
PAGE_SIZE
 - 
NET_SKB_PAD
Ë% 
RX_BUFFER_ALIGN
Ë+ NET_SKB_PAD + 
NET_IP_ALIGN
)

	)

40 
	#RX_SEGMENT_ALLOC_SIZE
 2048

	)

41 
	#RX_SEGMENT_BUFSIZE
 (
	`SKB_WITH_OVERHEAD
(
RX_SEGMENT_ALLOC_SIZE
))

	)

42 
	#RX_SEGMENT_MRU
 (((
RX_SEGMENT_BUFSIZE
 - 
SKB_HEAD_ALIGN
Ë& 
RX_BUFFER_ALIGN_MASK
Ë- 
NET_IP_ALIGN
)

	)

43 
	#MAX_MTU
 9500

	)

45 
	#NAPI_WEIGHT
 64

	)

48 
	#MDIO_CMD_COMPLETE
 0x00008000

	)

49 
	#MDIO_WRITE_COMMAND
 0x00002000

	)

50 
	#MDIO_READ_COMMAND
 0x00004000

	)

51 
	#MDIO_REG_OFFSET
 8

	)

52 
	#MDIO_VALUE_OFFSET
 16

	)

55 
	#END_OF_RING
 0x40000000

	)

56 
	#FIRST_SEGMENT
 0x20000000

	)

57 
	#LAST_SEGMENT
 0x10000000

	)

58 
	#FORCE_ROUTE
 0x04000000

	)

59 
	#UDP_CHECKSUM
 0x00020000

	)

60 
	#TCP_CHECKSUM
 0x00010000

	)

63 
	#PORT_BP_ENABLE
 0x00020000

	)

64 
	#PORT_DISABLE
 0x00040000

	)

65 
	#PORT_LEARN_DIS
 0x00080000

	)

66 
	#PORT_BLOCK_STATE
 0x00100000

	)

67 
	#PORT_BLOCK_MODE
 0x00200000

	)

69 
	#PROMISC_OFFSET
 29

	)

72 
	#UNKNOWN_VLAN_TO_CPU
 0x02000000

	)

73 
	#ACCEPT_CRC_PACKET
 0x00200000

	)

74 
	#CRC_STRIPPING
 0x00100000

	)

77 
	#NIC_MODE
 0x00008000

	)

78 
	#VLAN_UNAWARE
 0x00000001

	)

81 
	#TS_POLL_EN
 0x00000020

	)

82 
	#TS_SUSPEND
 0x00000010

	)

83 
	#FS_POLL_EN
 0x00000002

	)

84 
	#FS_SUSPEND
 0x00000001

	)

87 
	#QUEUE_THRESHOLD
 0x000000f0

	)

88 
	#CLR_FS_STATE
 0x80000000

	)

91 
	#MAC0_STATUS_CHANGE
 0x00004000

	)

92 
	#MAC1_STATUS_CHANGE
 0x00008000

	)

93 
	#MAC2_STATUS_CHANGE
 0x00010000

	)

94 
	#MAC0_RX_ERROR
 0x00100000

	)

95 
	#MAC1_RX_ERROR
 0x00200000

	)

96 
	#MAC2_RX_ERROR
 0x00400000

	)

98 
	stx_desc


100 
u32
 
	msdp
;

104 
u32
 
	msdl
:16;

105 
u32
 
	mtco
:1;

106 
u32
 
	muco
:1;

107 
u32
 
	mico
:1;

108 
u32
 
	mrsv_1
:3;

109 
u32
 
	m¥i
:3;

110 
u32
 
	mÂ
:1;

111 
u32
 
	m‰
:1;

112 
u32
 
	möãºu±
:1;

113 
u32
 
	mlsd
:1;

114 
u32
 
	mfsd
:1;

115 
u32
 
	me‹
:1;

116 
u32
 
	mcown
:1;

118 
u32
 
	mc⁄fig0
;

123 
u32
 
	m˘v
:1;

124 
u32
 
	m°v
:1;

125 
u32
 
	msid
:4;

126 
u32
 
	möss
:1;

127 
u32
 
	mdñs
:1;

128 
u32
 
	mrsv_2
:9;

129 
u32
 
	mpm≠
:5;

130 
u32
 
	mm¨k
:3;

131 
u32
 
	mew™
:1;

132 
u32
 
	m„w™
:1;

133 
u32
 
	mrsv_3
:5;

135 
u32
 
	mc⁄fig1
;

140 
u32
 
	mc_vid
:12;

141 
u32
 
	mc_cfs
:1;

142 
u32
 
	mc_¥i
:3;

143 
u32
 
	ms_vid
:12;

144 
u32
 
	ms_dei
:1;

145 
u32
 
	ms_¥i
:3;

147 
u32
 
	mc⁄fig2
;

150 
u8
 
	mÆignmít
[16];

153 
	srx_desc


155 
u32
 
	msdp
;

159 
u32
 
	msdl
:16;

160 
u32
 
	ml4f
:1;

161 
u32
 
	mùf
:1;

162 
u32
 
	m¥Ÿ
:4;

163 
u32
 
	mhr
:6;

164 
u32
 
	mlsd
:1;

165 
u32
 
	mfsd
:1;

166 
u32
 
	me‹
:1;

167 
u32
 
	mcown
:1;

169 
u32
 
	mc⁄fig0
;

174 
u32
 
	m˘v
:1;

175 
u32
 
	m°v
:1;

176 
u32
 
	munv
:1;

177 
u32
 
	miw™
:1;

178 
u32
 
	mexdv
:1;

179 
u32
 
	me_w™
:1;

180 
u32
 
	mrsv_1
:2;

181 
u32
 
	m•
:3;

182 
u32
 
	m¸c_îr
:1;

183 
u32
 
	mun_ëh
:1;

184 
u32
 
	mtc
:2;

185 
u32
 
	mrsv_2
:1;

186 
u32
 
	mù_off£t
:5;

187 
u32
 
	mrsv_3
:11;

189 
u32
 
	mc⁄fig1
;

194 
u32
 
	mc_vid
:12;

195 
u32
 
	mc_cfs
:1;

196 
u32
 
	mc_¥i
:3;

197 
u32
 
	ms_vid
:12;

198 
u32
 
	ms_dei
:1;

199 
u32
 
	ms_¥i
:3;

201 
u32
 
	mc⁄fig2
;

204 
u8
 
	mÆignmít
[16];

208 
	sswôch_ªgs
 {

209 
u32
 
	mphy_c⁄åﬁ
;

210 
u32
 
	mphy_auto_addr
;

211 
u32
 
	mmac_glob_cfg
;

212 
u32
 
	mmac_cfg
[4];

213 
u32
 
	mmac_¥i_˘æ
[5], 
	m__ªs
;

214 
u32
 
	mëy≥
[2];

215 
u32
 
	mudp_ønge
[4];

216 
u32
 
	m¥io_ëy≥_udp
;

217 
u32
 
	m¥io_ùds˝
[8];

218 
u32
 
	mtc_˘æ
;

219 
u32
 
	møã_˘æ
;

220 
u32
 
	mfc_glob_thrs
;

221 
u32
 
	mfc_p‹t_thrs
;

222 
u32
 
	mmc_fc_glob_thrs
;

223 
u32
 
	mdc_glob_thrs
;

224 
u32
 
	m¨l_vœn_cmd
;

225 
u32
 
	m¨l_˘æ
[3];

226 
u32
 
	mvœn_cfg
;

227 
u32
 
	mpvid
[2];

228 
u32
 
	mvœn_˘æ
[3];

229 
u32
 
	m£ssi⁄_id
[8];

230 
u32
 
	möå_°©
;

231 
u32
 
	möå_mask
;

232 
u32
 
	m§am_ã°
;

233 
u32
 
	mmem_queue
;

234 
u32
 
	mÁæ_˘æ
;

235 
u32
 
	mfc_öput_thrs
, 
	m__ªs1
[2];

236 
u32
 
	m˛k_skew_˘æ
;

237 
u32
 
	mmac_glob_cfg_ext
, 
	m__ªs2
[2];

238 
u32
 
	mdma_rög_˘æ
;

239 
u32
 
	mdma_auto_pﬁl_cfg
;

240 
u32
 
	mdñay_öå_cfg
, 
	m__ªs3
;

241 
u32
 
	mts_dma_˘æ0
;

242 
u32
 
	mts_desc_±r0
;

243 
u32
 
	mts_desc_ba£_addr0
, 
	m__ªs4
;

244 
u32
 
	mfs_dma_˘æ0
;

245 
u32
 
	mfs_desc_±r0
;

246 
u32
 
	mfs_desc_ba£_addr0
, 
	m__ªs5
;

247 
u32
 
	mts_dma_˘æ1
;

248 
u32
 
	mts_desc_±r1
;

249 
u32
 
	mts_desc_ba£_addr1
, 
	m__ªs6
;

250 
u32
 
	mfs_dma_˘æ1
;

251 
u32
 
	mfs_desc_±r1
;

252 
u32
 
	mfs_desc_ba£_addr1
;

253 
u32
 
	m__ªs7
[109];

254 
u32
 
	mmac_cou¡î0
[13];

257 
	s_tx_rög
 {

258 
tx_desc
 *
	mdesc
;

259 
dma_addr_t
 
	mphys_addr
;

260 
tx_desc
 *
	mcur_addr
;

261 
sk_buff
 *
	mbuff_èb
[
TX_DESCS
];

262 
	mphys_èb
[
TX_DESCS
];

263 
u32
 
	m‰ì_ödex
;

264 
u32
 
	mcou¡_ödex
;

265 
u32
 
	mcur_ödex
;

266 
	mnum_u£d
;

267 
	mnum_cou¡
;

268 
boﬁ
 
	m°›≥d
;

271 
	s_rx_rög
 {

272 
rx_desc
 *
	mdesc
;

273 
dma_addr_t
 
	mphys_addr
;

274 
rx_desc
 *
	mcur_addr
;

275 *
	mbuff_èb
[
RX_DESCS
];

276 
	mphys_èb
[
RX_DESCS
];

277 
u32
 
	mcur_ödex
;

278 
u32
 
	mÆloc_ödex
;

279 
	mÆloc_cou¡
;

282 
	ssw
 {

283 
swôch_ªgs
 
__iomem
 *
	mªgs
;

284 
«pi_°ru˘
 
	m«pi
;

285 
˙s3xxx_∂©_öfo
 *
	m∂©
;

286 
_tx_rög
 
	mtx_rög
;

287 
_rx_rög
 
	mrx_rög
;

288 
sk_buff
 *
	m‰ag_fú°
;

289 
sk_buff
 *
	m‰ag_œ°
;

290 
devi˚
 *
	mdev
;

291 
	mrx_úq
;

292 
	m°©_úq
;

295 
	sp‹t
 {

296 
√t_devi˚
 *
	m√tdev
;

297 
phy_devi˚
 *
	mphydev
;

298 
sw
 *
	msw
;

299 
	mid
;

300 
	m•ìd
, 
	mdu∂ex
;

303 
•ölock_t
 
	gmdio_lock
;

304 
DEFINE_SPINLOCK
(
tx_lock
);

305 
swôch_ªgs
 
__iomem
 *
	gmdio_ªgs
;

306 
mii_bus
 *
	gmdio_bus
;

307 
	gp‹ts_›í
;

308 
p‹t
 *
	gswôch_p‹t_èb
[4];

309 
√t_devi˚
 *
	g«pi_dev
;

311 
	$˙s3xxx_mdio_cmd
(
mii_bus
 *
bus
, 
phy_id
, 
loˇti⁄
,

312 
wrôe
, 
u16
 
cmd
)

314 
cy˛es
 = 0;

315 
u32
 
ãmp
 = 0;

317 
ãmp
 = 
	`__øw_ªadl
(&
mdio_ªgs
->
phy_c⁄åﬁ
);

318 
ãmp
 |
MDIO_CMD_COMPLETE
;

319 
	`__øw_wrôñ
(
ãmp
, &
mdio_ªgs
->
phy_c⁄åﬁ
);

320 
	`udñay
(10);

322 i‡(
wrôe
) {

323 
ãmp
 = (
cmd
 << 
MDIO_VALUE_OFFSET
);

324 
ãmp
 |
MDIO_WRITE_COMMAND
;

326 
ãmp
 = 
MDIO_READ_COMMAND
;

329 
ãmp
 |((
loˇti⁄
 & 0x1fË<< 
MDIO_REG_OFFSET
);

330 
ãmp
 |(
phy_id
 & 0x1f);

332 
	`__øw_wrôñ
(
ãmp
, &
mdio_ªgs
->
phy_c⁄åﬁ
);

334 ((
	`__øw_ªadl
(&
mdio_ªgs
->
phy_c⁄åﬁ
Ë& 
MDIO_CMD_COMPLETE
) == 0)

335 && 
cy˛es
 < 5000) {

336 
	`udñay
(1);

337 
cy˛es
++;

340 i‡(
cy˛es
 == 5000) {

341 
	`¥ötk
(
KERN_ERR
 "%†#%i: MIIÅønß˘i⁄ faûed\n", 
bus
->
«me
, 
phy_id
);

345 
ãmp
 = 
	`__øw_ªadl
(&
mdio_ªgs
->
phy_c⁄åﬁ
);

346 
ãmp
 |
MDIO_CMD_COMPLETE
;

347 
	`__øw_wrôñ
(
ãmp
, &
mdio_ªgs
->
phy_c⁄åﬁ
);

349 i‡(
wrôe
)

352  ((
ãmp
 >> 
MDIO_VALUE_OFFSET
) & 0xFFFF);

353 
	}
}

355 
	$˙s3xxx_mdio_ªad
(
mii_bus
 *
bus
, 
phy_id
, 
loˇti⁄
)

357 
Êags
;

358 
ªt
;

360 
	`•ö_lock_úqßve
(&
mdio_lock
, 
Êags
);

361 
ªt
 = 
	`˙s3xxx_mdio_cmd
(
bus
, 
phy_id
, 
loˇti⁄
, 0, 0);

362 
	`•ö_u∆ock_úqª°‹e
(&
mdio_lock
, 
Êags
);

363  
ªt
;

364 
	}
}

366 
	$˙s3xxx_mdio_wrôe
(
mii_bus
 *
bus
, 
phy_id
, 
loˇti⁄
, 
u16
 
vÆ
)

368 
Êags
;

369 
ªt
;

371 
	`•ö_lock_úqßve
(&
mdio_lock
, 
Êags
);

372 
ªt
 = 
	`˙s3xxx_mdio_cmd
(
bus
, 
phy_id
, 
loˇti⁄
, 1, 
vÆ
);

373 
	`•ö_u∆ock_úqª°‹e
(&
mdio_lock
, 
Êags
);

374  
ªt
;

375 
	}
}

377 
	$˙s3xxx_mdio_ªgi°î
(
__iomem
 *
ba£
)

379 
îr
;

381 i‡(!(
mdio_bus
 = 
	`mdiobus_Æloc
()))

382  -
ENOMEM
;

384 
mdio_ªgs
 = 
ba£
;

386 
	`•ö_lock_öô
(&
mdio_lock
);

387 
mdio_bus
->
«me
 = "CNS3xxx MII Bus";

388 
mdio_bus
->
ªad
 = &
˙s3xxx_mdio_ªad
;

389 
mdio_bus
->
wrôe
 = &
˙s3xxx_mdio_wrôe
;

390 
	`°r˝y
(
mdio_bus
->
id
, "0");

392 i‡((
îr
 = 
	`mdiobus_ªgi°î
(
mdio_bus
)))

393 
	`mdiobus_‰ì
(
mdio_bus
);

395  
îr
;

396 
	}
}

398 
	$˙s3xxx_mdio_ªmove
()

400 
	`mdiobus_uƒegi°î
(
mdio_bus
);

401 
	`mdiobus_‰ì
(
mdio_bus
);

402 
	}
}

404 
	$íabÀ_tx_dma
(
sw
 *sw)

406 
	`__øw_wrôñ
(0x1, &
sw
->
ªgs
->
ts_dma_˘æ0
);

407 
	}
}

409 
	$íabÀ_rx_dma
(
sw
 *sw)

411 
	`__øw_wrôñ
(0x1, &
sw
->
ªgs
->
fs_dma_˘æ0
);

412 
	}
}

414 
	$˙s3xxx_adju°_lök
(
√t_devi˚
 *
dev
)

416 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

417 
phy_devi˚
 *
phydev
 = 
p‹t
->phydev;

419 i‡(!
phydev
->
lök
) {

420 i‡(
p‹t
->
•ìd
) {

421 
p‹t
->
•ìd
 = 0;

422 
	`¥ötk
(
KERN_INFO
 "%s:Üök down\n", 
dev
->
«me
);

427 i‡(
p‹t
->
•ìd
 =
phydev
->•ìd &&Ö‹t->
du∂ex
 ==Öhydev->duplex)

430 
p‹t
->
•ìd
 = 
phydev
->speed;

431 
p‹t
->
du∂ex
 = 
phydev
->duplex;

433 
	`¥ötk
(
KERN_INFO
 "%s:Üink up, speed %u Mb/s, %s duplex\n",

434 
dev
->
«me
, 
p‹t
->
•ìd
,Ö‹t->
du∂ex
 ? "full" : "half");

435 
	}
}

437 
	$ëh_scheduÀ_pﬁl
(
sw
 *sw)

439 i‡(
	`u∆ikñy
(!
	`«pi_scheduÀ_¥ï
(&
sw
->
«pi
)))

442 
	`dißbÀ_úq_nosync
(
sw
->
rx_úq
);

443 
	`__«pi_scheduÀ
(&
sw
->
«pi
);

444 
	}
}

446 
úqªtu∫_t
 
	$ëh_rx_úq
(
úq
, *
pdev
)

448 
√t_devi˚
 *
dev
 = 
pdev
;

449 
sw
 *sw = 
	`√tdev_¥iv
(
dev
);

450 
	`ëh_scheduÀ_pﬁl
(
sw
);

451  (
IRQ_HANDLED
);

452 
	}
}

454 
úqªtu∫_t
 
	$ëh_°©_úq
(
úq
, *
pdev
)

456 
√t_devi˚
 *
dev
 = 
pdev
;

457 
sw
 *sw = 
	`√tdev_¥iv
(
dev
);

458 
u32
 
cfg
;

459 
u32
 
°©
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
öå_°©
);

460 
	`__øw_wrôñ
(0xffffffff, &
sw
->
ªgs
->
öå_°©
);

462 i‡(
°©
 & 
MAC2_RX_ERROR
)

463 
swôch_p‹t_èb
[3]->
√tdev
->
°©s
.
rx_dr›≥d
++;

464 i‡(
°©
 & 
MAC1_RX_ERROR
)

465 
swôch_p‹t_èb
[1]->
√tdev
->
°©s
.
rx_dr›≥d
++;

466 i‡(
°©
 & 
MAC0_RX_ERROR
)

467 
swôch_p‹t_èb
[0]->
√tdev
->
°©s
.
rx_dr›≥d
++;

469 i‡(
°©
 & 
MAC0_STATUS_CHANGE
) {

470 
cfg
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[0]);

471 
swôch_p‹t_èb
[0]->
phydev
->
lök
 = (
cfg
 & 0x1);

472 
swôch_p‹t_èb
[0]->
phydev
->
du∂ex
 = ((
cfg
 >> 4) & 0x1);

473 i‡(((
cfg
 >> 2) & 0x3) == 2)

474 
swôch_p‹t_èb
[0]->
phydev
->
•ìd
 = 1000;

475 i‡(((
cfg
 >> 2) & 0x3) == 1)

476 
swôch_p‹t_èb
[0]->
phydev
->
•ìd
 = 100;

478 
swôch_p‹t_èb
[0]->
phydev
->
•ìd
 = 10;

479 
	`˙s3xxx_adju°_lök
(
swôch_p‹t_èb
[0]->
√tdev
);

482 i‡(
°©
 & 
MAC1_STATUS_CHANGE
) {

483 
cfg
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[1]);

484 
swôch_p‹t_èb
[1]->
phydev
->
lök
 = (
cfg
 & 0x1);

485 
swôch_p‹t_èb
[1]->
phydev
->
du∂ex
 = ((
cfg
 >> 4) & 0x1);

486 i‡(((
cfg
 >> 2) & 0x3) == 2)

487 
swôch_p‹t_èb
[1]->
phydev
->
•ìd
 = 1000;

488 i‡(((
cfg
 >> 2) & 0x3) == 1)

489 
swôch_p‹t_èb
[1]->
phydev
->
•ìd
 = 100;

491 
swôch_p‹t_èb
[1]->
phydev
->
•ìd
 = 10;

492 
	`˙s3xxx_adju°_lök
(
swôch_p‹t_èb
[1]->
√tdev
);

495 i‡(
°©
 & 
MAC2_STATUS_CHANGE
) {

496 
cfg
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[3]);

497 
swôch_p‹t_èb
[3]->
phydev
->
lök
 = (
cfg
 & 0x1);

498 
swôch_p‹t_èb
[3]->
phydev
->
du∂ex
 = ((
cfg
 >> 4) & 0x1);

499 i‡(((
cfg
 >> 2) & 0x3) == 2)

500 
swôch_p‹t_èb
[3]->
phydev
->
•ìd
 = 1000;

501 i‡(((
cfg
 >> 2) & 0x3) == 1)

502 
swôch_p‹t_èb
[3]->
phydev
->
•ìd
 = 100;

504 
swôch_p‹t_èb
[3]->
phydev
->
•ìd
 = 10;

505 
	`˙s3xxx_adju°_lök
(
swôch_p‹t_èb
[3]->
√tdev
);

508  (
IRQ_HANDLED
);

509 
	}
}

512 
	$˙s3xxx_Æloc_rx_buf
(
sw
 *sw, 
ª˚ived
)

514 
_rx_rög
 *
rx_rög
 = &
sw
->rx_ring;

515 
i
 = 
rx_rög
->
Æloc_ödex
;

516 
rx_desc
 *
desc
 = &(
rx_rög
)->desc[
i
];

517 *
buf
;

518 
phys
;

520 
ª˚ived
 +
rx_rög
->
Æloc_cou¡
;Ñeceived > 0;Ñeceived--) {

521 
buf
 = 
	`«pi_Æloc_‰ag
(
RX_SEGMENT_ALLOC_SIZE
);

522 i‡(!
buf
)

525 
phys
 = 
	`dma_m≠_sögÀ
(
sw
->
dev
, 
buf
 + 
SKB_HEAD_ALIGN
,

526 
RX_SEGMENT_MRU
, 
DMA_FROM_DEVICE
);

527 i‡(
	`dma_m≠pög_îr‹
(
sw
->
dev
, 
phys
)) {

528 
	`skb_‰ì_‰ag
(
buf
);

532 
desc
->
sdl
 = 
RX_SEGMENT_MRU
;

533 
desc
->
sdp
 = 
phys
;

535 
	`wmb
();

538 
rx_rög
->
buff_èb
[
i
] = 
buf
;

539 
rx_rög
->
phys_èb
[
i
] = 
phys
;

541 i‡(
i
 =
RX_DESCS
 - 1) {

542 
desc
->
c⁄fig0
 = 
FIRST_SEGMENT
 | 
LAST_SEGMENT
 | 
RX_SEGMENT_MRU
 | 
END_OF_RING
;

543 
i
 = 0;

544 
desc
 = &(
rx_rög
)->desc[
i
];

546 
desc
->
c⁄fig0
 = 
FIRST_SEGMENT
 | 
LAST_SEGMENT
 | 
RX_SEGMENT_MRU
;

547 
i
++;

548 
desc
++;

552 
rx_rög
->
Æloc_cou¡
 = 
ª˚ived
;

553 
rx_rög
->
Æloc_ödex
 = 
i
;

554 
	}
}

556 
	$ëh_check_num_u£d
(
_tx_rög
 *
tx_rög
)

558 
boﬁ
 
°›
 = 
Ál£
;

559 
i
;

561 i‡(
tx_rög
->
num_u£d
 >
TX_DESCS
 - 
TX_DESC_RESERVE
)

562 
°›
 = 
åue
;

564 i‡(
tx_rög
->
°›≥d
 =
°›
)

567 
tx_rög
->
°›≥d
 = 
°›
;

569 
i
 = 0; i < 4; i++) {

570 
p‹t
 *p‹à
swôch_p‹t_èb
[
i
];

571 
√t_devi˚
 *
dev
;

573 i‡(!
p‹t
)

576 
dev
 = 
p‹t
->
√tdev
;

578 i‡(
°›
)

579 
	`√tif_°›_queue
(
dev
);

581 
	`√tif_wake_queue
(
dev
);

583 
	}
}

585 
	$ëh_com∂ëe_tx
(
sw
 *sw)

587 
_tx_rög
 *
tx_rög
 = &
sw
->tx_ring;

588 
tx_desc
 *
desc
;

589 
i
;

590 
ödex
;

591 
num_u£d
 = 
tx_rög
->num_used;

592 
sk_buff
 *
skb
;

594 
ödex
 = 
tx_rög
->
‰ì_ödex
;

595 
desc
 = &(
tx_rög
)->desc[
ödex
];

597 
i
 = 0; i < 
num_u£d
; i++) {

598 i‡(!
desc
->
cown
)

601 
skb
 = 
tx_rög
->
buff_èb
[
ödex
];

602 
tx_rög
->
buff_èb
[
ödex
] = 0;

604 i‡(
skb
)

605 
	`dev_k‰ì_skb_™y
(
skb
);

607 
	`dma_unm≠_sögÀ
(
sw
->
dev
, 
tx_rög
->
phys_èb
[
ödex
], 
desc
->
sdl
, 
DMA_TO_DEVICE
);

609 i‡(
ödex
 =
TX_DESCS
 - 1) {

610 
ödex
 = 0;

611 
desc
 = &(
tx_rög
)->desc[
ödex
];

613 
ödex
++;

614 
desc
++;

618 
tx_rög
->
‰ì_ödex
 = 
ödex
;

619 
tx_rög
->
num_u£d
 -
i
;

620 
	`ëh_check_num_u£d
(
tx_rög
);

621 
	}
}

623 
	$ëh_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

625 
sw
 *sw = 
	`c⁄èöî_of
(
«pi
, sw,Çapi);

626 
_rx_rög
 *
rx_rög
 = &
sw
->rx_ring;

627 
ª˚ived
 = 0;

628 
Àngth
;

629 
i
 = 
rx_rög
->
cur_ödex
;

630 
rx_desc
 *
desc
 = &(
rx_rög
)->desc[
i
];

631 
Æloc_cou¡
 = 
rx_rög
->alloc_count;

633 
desc
->
cown
 && 
Æloc_cou¡
 + 
ª˚ived
 < 
RX_DESCS
 - 1) {

634 
sk_buff
 *
skb
;

635 
ª£rve
 = 
SKB_HEAD_ALIGN
;

637 i‡(
ª˚ived
 >
budgë
)

641 
	`dma_unm≠_sögÀ
(
sw
->
dev
, 
rx_rög
->
phys_èb
[
i
], 
RX_SEGMENT_MRU
, 
DMA_FROM_DEVICE
);

643 
skb
 = 
	`buûd_skb
(
rx_rög
->
buff_èb
[
i
], 
RX_SEGMENT_ALLOC_SIZE
);

644 i‡(!
skb
)

647 
skb
->
dev
 = 
swôch_p‹t_èb
[
desc
->
•
]->
√tdev
;

649 
Àngth
 = 
desc
->
sdl
;

650 i‡(
desc
->
fsd
 && !desc->
lsd
)

651 
Àngth
 = 
RX_SEGMENT_MRU
;

653 i‡(!
desc
->
fsd
) {

654 
ª£rve
 -
NET_IP_ALIGN
;

655 i‡(!
desc
->
lsd
)

656 
Àngth
 +
NET_IP_ALIGN
;

659 
	`skb_ª£rve
(
skb
, 
ª£rve
);

660 
	`skb_put
(
skb
, 
Àngth
);

662 i‡(!
sw
->
‰ag_fú°
)

663 
sw
->
‰ag_fú°
 = 
skb
;

665 i‡(
sw
->
‰ag_fú°
 =sw->
‰ag_œ°
)

666 
	`skb_shöfo
(
sw
->
‰ag_fú°
)->
‰ag_li°
 = 
skb
;

668 
sw
->
‰ag_œ°
->
√xt
 = 
skb
;

669 
sw
->
‰ag_fú°
->
Àn
 +
skb
->len;

670 
sw
->
‰ag_fú°
->
d©a_Àn
 +
skb
->
Àn
;

671 
sw
->
‰ag_fú°
->
åuesize
 +
skb
->truesize;

673 
sw
->
‰ag_œ°
 = 
skb
;

675 i‡(
desc
->
lsd
) {

676 
√t_devi˚
 *
dev
;

678 
skb
 = 
sw
->
‰ag_fú°
;

679 
dev
 = 
skb
->dev;

680 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

682 
dev
->
°©s
.
rx_∑ckës
++;

683 
dev
->
°©s
.
rx_byãs
 +
skb
->
Àn
;

686 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

687 
desc
->
¥Ÿ
) {

694 i‡(!
desc
->
l4f
) {

695 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

696 
	`«pi_gro_ª˚ive
(
«pi
, 
skb
);

701 
	`√tif_ª˚ive_skb
(
skb
);

705 
sw
->
‰ag_fú°
 = 
NULL
;

706 
sw
->
‰ag_œ°
 = 
NULL
;

709 
ª˚ived
++;

710 i‡(
i
 =
RX_DESCS
 - 1) {

711 
i
 = 0;

712 
desc
 = &(
rx_rög
)->desc[
i
];

714 
i
++;

715 
desc
++;

719 
rx_rög
->
cur_ödex
 = 
i
;

721 
	`˙s3xxx_Æloc_rx_buf
(
sw
, 
ª˚ived
);

722 
	`wmb
();

723 
	`íabÀ_rx_dma
(
sw
);

725 i‡(
ª˚ived
 < 
budgë
 && 
	`«pi_com∂ëe_d⁄e
(
«pi
,Ñeceived)) {

726 
	`íabÀ_úq
(
sw
->
rx_úq
);

729 
	`•ö_lock_bh
(&
tx_lock
);

730 
	`ëh_com∂ëe_tx
(
sw
);

731 
	`•ö_u∆ock_bh
(&
tx_lock
);

733  
ª˚ived
;

734 
	}
}

736 
	$ëh_£t_desc
(
sw
 *sw, 
_tx_rög
 *
tx_rög
, 
ödex
,

737 
ödex_œ°
, *
d©a
, 
Àn
, 
u32
 
c⁄fig0
,

738 
u32
 
pm≠
)

740 
tx_desc
 *tx_des¯&(
tx_rög
)->
desc
[
ödex
];

741 
phys
;

743 
phys
 = 
	`dma_m≠_sögÀ
(
sw
->
dev
, 
d©a
, 
Àn
, 
DMA_TO_DEVICE
);

744 
tx_desc
->
sdp
 = 
phys
;

745 
tx_desc
->
pm≠
 =Ömap;

746 
tx_rög
->
phys_èb
[
ödex
] = 
phys
;

748 
c⁄fig0
 |
Àn
;

750 i‡(
ödex
 =
TX_DESCS
 - 1)

751 
c⁄fig0
 |
END_OF_RING
;

753 i‡(
ödex
 =
ödex_œ°
)

754 
c⁄fig0
 |
LAST_SEGMENT
;

756 
	`wmb
();

757 
tx_desc
->
c⁄fig0
 = config0;

758 
	}
}

760 
	$ëh_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

762 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

763 
sw
 *sw = 
p‹t
->sw;

764 
_tx_rög
 *
tx_rög
 = &
sw
->tx_ring;

765 
sk_buff
 *
skb1
;

766 
pm≠
 = (1 << 
p‹t
->
id
);

767 
ƒ_‰ags
 = 
	`skb_shöfo
(
skb
)->nr_frags;

768 
ƒ_desc
 = 
ƒ_‰ags
;

769 
ödex0
, 
ödex
, 
ödex_œ°
;

770 
Àn0
;

771 
i
;

772 
u32
 
c⁄fig0
;

774 i‡(
pm≠
 == 8)

775 
pm≠
 = (1 << 4);

777 
	`skb_wÆk_‰ags
(
skb
, 
skb1
)

778 
ƒ_desc
++;

780 
	`ëh_scheduÀ_pﬁl
(
sw
);

781 
	`•ö_lock_bh
(&
tx_lock
);

783 i‡((
tx_rög
->
num_u£d
 + 
ƒ_desc
 + 1Ë>
TX_DESCS
) {

784 
	`•ö_u∆ock_bh
(&
tx_lock
);

785  
NETDEV_TX_BUSY
;

788 
ödex
 = 
ödex0
 = 
tx_rög
->
cur_ödex
;

789 
ödex_œ°
 = (
ödex0
 + 
ƒ_desc
Ë% 
TX_DESCS
;

790 
tx_rög
->
cur_ödex
 = (
ödex_œ°
 + 1Ë% 
TX_DESCS
;

792 
	`•ö_u∆ock_bh
(&
tx_lock
);

794 
c⁄fig0
 = 
FORCE_ROUTE
;

795 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
)

796 
c⁄fig0
 |
UDP_CHECKSUM
 | 
TCP_CHECKSUM
;

798 
Àn0
 = 
skb
->
Àn
;

801 
i
 = 0; i < 
ƒ_‰ags
; i++) {

802 
skb_‰ag_°ru˘
 *
‰ag
;

803 *
addr
;

805 
ödex
 = (ödex + 1Ë% 
TX_DESCS
;

807 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
i
];

808 
addr
 = 
	`∑ge_addªss
(
	`skb_‰ag_∑ge
(
‰ag
)Ë+ føg->
∑ge_off£t
;

810 
	`ëh_£t_desc
(
sw
, 
tx_rög
, 
ödex
, 
ödex_œ°
, 
addr
, 
‰ag
->
size
,

811 
c⁄fig0
, 
pm≠
);

814 i‡(
ƒ_‰ags
)

815 
Àn0
 = 
skb
->
Àn
 - skb->
d©a_Àn
;

817 
	`skb_wÆk_‰ags
(
skb
, 
skb1
) {

818 
ödex
 = (ödex + 1Ë% 
TX_DESCS
;

819 
Àn0
 -
skb1
->
Àn
;

821 
	`ëh_£t_desc
(
sw
, 
tx_rög
, 
ödex
, 
ödex_œ°
, 
skb1
->
d©a
,

822 
skb1
->
Àn
, 
c⁄fig0
, 
pm≠
);

825 
tx_rög
->
buff_èb
[
ödex0
] = 
skb
;

826 
	`ëh_£t_desc
(
sw
, 
tx_rög
, 
ödex0
, 
ödex_œ°
, 
skb
->
d©a
, 
Àn0
,

827 
c⁄fig0
 | 
FIRST_SEGMENT
, 
pm≠
);

829 
	`wmb
();

831 
	`•ö_lock
(&
tx_lock
);

832 
tx_rög
->
num_u£d
 +
ƒ_desc
 + 1;

833 
	`•ö_u∆ock
(&
tx_lock
);

835 
dev
->
°©s
.
tx_∑ckës
++;

836 
dev
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

838 
	`íabÀ_tx_dma
(
sw
);

840  
NETDEV_TX_OK
;

841 
	}
}

843 
	$ëh_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
ªq
, 
cmd
)

845 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

847 i‡(!
	`√tif_ru¬ög
(
dev
))

848  -
EINVAL
;

849  
	`phy_mii_io˘l
(
p‹t
->
phydev
, 
ªq
, 
cmd
);

850 
	}
}

854 
	$˙s3xxx_gë_drvöfo
(
√t_devi˚
 *
dev
,

855 
ëhtoﬁ_drvöfo
 *
öfo
)

857 
	`°r˝y
(
öfo
->
drivî
, 
DRV_NAME
);

858 
	`°r˝y
(
öfo
->
bus_öfo
, "internal");

859 
	}
}

861 
	$˙s3xxx_nway_ª£t
(
√t_devi˚
 *
dev
)

863 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

864  
	`phy_°¨t_™eg
(
p‹t
->
phydev
);

865 
	}
}

867 
ëhtoﬁ_›s
 
	g˙s3xxx_ëhtoﬁ_›s
 = {

868 .
gë_drvöfo
 = 
˙s3xxx_gë_drvöfo
,

869 .
	ggë_lök_k£âögs
 = 
phy_ëhtoﬁ_gë_lök_k£âögs
,

870 .
	g£t_lök_k£âögs
 = 
phy_ëhtoﬁ_£t_lök_k£âögs
,

871 .
	gnway_ª£t
 = 
˙s3xxx_nway_ª£t
,

872 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

876 
	$öô_rögs
(
sw
 *sw)

878 
i
;

879 
_rx_rög
 *
rx_rög
 = &
sw
->rx_ring;

880 
_tx_rög
 *
tx_rög
 = &
sw
->tx_ring;

882 
	`__øw_wrôñ
(0, &
sw
->
ªgs
->
fs_dma_˘æ0
);

883 
	`__øw_wrôñ
(
TS_SUSPEND
 | 
FS_SUSPEND
, &
sw
->
ªgs
->
dma_auto_pﬁl_cfg
);

884 
	`__øw_wrôñ
(
QUEUE_THRESHOLD
, &
sw
->
ªgs
->
dma_rög_˘æ
);

885 
	`__øw_wrôñ
(
CLR_FS_STATE
 | 
QUEUE_THRESHOLD
, &
sw
->
ªgs
->
dma_rög_˘æ
);

886 
	`__øw_wrôñ
(
QUEUE_THRESHOLD
, &
sw
->
ªgs
->
dma_rög_˘æ
);

888 
rx_rög
->
desc
 = 
	`dmam_Æloc_cohîít
(
sw
->
dev
, 
RX_POOL_ALLOC_SIZE
,

889 &
rx_rög
->
phys_addr
, 
GFP_KERNEL
);

890 i‡(!
rx_rög
->
desc
)

891  -
ENOMEM
;

894 
	`mem£t
(
rx_rög
->
desc
, 0, 
RX_POOL_ALLOC_SIZE
);

896 
i
 = 0; i < 
RX_DESCS
; i++) {

897 
rx_desc
 *
desc
 = &(
rx_rög
)->desc[
i
];

898 *
buf
;

900 
buf
 = 
	`√tdev_Æloc_‰ag
(
RX_SEGMENT_ALLOC_SIZE
);

901 i‡(!
buf
)

902  -
ENOMEM
;

904 
desc
->
sdl
 = 
RX_SEGMENT_MRU
;

906 i‡(
i
 =(
RX_DESCS
 - 1))

907 
desc
->
e‹
 = 1;

909 
desc
->
fsd
 = 1;

910 
desc
->
lsd
 = 1;

912 
desc
->
sdp
 = 
	`dma_m≠_sögÀ
(
sw
->
dev
, 
buf
 + 
SKB_HEAD_ALIGN
,

913 
RX_SEGMENT_MRU
, 
DMA_FROM_DEVICE
);

915 i‡(
	`dma_m≠pög_îr‹
(
sw
->
dev
, 
desc
->
sdp
))

916  -
EIO
;

918 
rx_rög
->
buff_èb
[
i
] = 
buf
;

919 
rx_rög
->
phys_èb
[
i
] = 
desc
->
sdp
;

920 
desc
->
cown
 = 0;

922 
	`__øw_wrôñ
(
rx_rög
->
phys_addr
, &
sw
->
ªgs
->
fs_desc_±r0
);

923 
	`__øw_wrôñ
(
rx_rög
->
phys_addr
, &
sw
->
ªgs
->
fs_desc_ba£_addr0
);

925 
tx_rög
->
desc
 = 
	`dmam_Æloc_cohîít
(
sw
->
dev
, 
TX_POOL_ALLOC_SIZE
,

926 &
tx_rög
->
phys_addr
, 
GFP_KERNEL
);

927 i‡(!
tx_rög
->
desc
)

928  -
ENOMEM
;

931 
	`mem£t
(
tx_rög
->
desc
, 0, 
TX_POOL_ALLOC_SIZE
);

933 
i
 = 0; i < 
TX_DESCS
; i++) {

934 
tx_desc
 *
desc
 = &(
tx_rög
)->desc[
i
];

935 
tx_rög
->
buff_èb
[
i
] = 0;

937 i‡(
i
 =(
TX_DESCS
 - 1))

938 
desc
->
e‹
 = 1;

940 
desc
->
cown
 = 1;

942 
	`__øw_wrôñ
(
tx_rög
->
phys_addr
, &
sw
->
ªgs
->
ts_desc_±r0
);

943 
	`__øw_wrôñ
(
tx_rög
->
phys_addr
, &
sw
->
ªgs
->
ts_desc_ba£_addr0
);

946 
	}
}

948 
	$de°roy_rögs
(
sw
 *sw)

950 
i
;

952 
i
 = 0; i < 
RX_DESCS
; i++) {

953 
_rx_rög
 *
rx_rög
 = &
sw
->rx_ring;

954 
rx_desc
 *
desc
 = &(
rx_rög
)->desc[
i
];

955 *
buf
 = 
sw
->
rx_rög
.
buff_èb
[
i
];

957 i‡(!
buf
)

960 
	`dma_unm≠_sögÀ
(
sw
->
dev
, 
desc
->
sdp
, 
RX_SEGMENT_MRU
, 
DMA_FROM_DEVICE
);

961 
	`skb_‰ì_‰ag
(
buf
);

964 
i
 = 0; i < 
TX_DESCS
; i++) {

965 
_tx_rög
 *
tx_rög
 = &
sw
->tx_ring;

966 
tx_desc
 *
desc
 = &(
tx_rög
)->desc[
i
];

967 
sk_buff
 *
skb
 = 
sw
->
tx_rög
.
buff_èb
[
i
];

969 i‡(!
skb
)

972 
	`dma_unm≠_sögÀ
(
sw
->
dev
, 
desc
->
sdp
, 
skb
->
Àn
, 
DMA_TO_DEVICE
);

973 
	`dev_k‰ì_skb
(
skb
);

975 
	}
}

977 
	$ëh_›í
(
√t_devi˚
 *
dev
)

979 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

980 
sw
 *sw = 
p‹t
->sw;

981 
u32
 
ãmp
;

983 
p‹t
->
•ìd
 = 0;

984 
	`phy_°¨t
(
p‹t
->
phydev
);

986 
	`√tif_°¨t_queue
(
dev
);

988 i‡(!
p‹ts_›í
) {

989 
	`ªque°_úq
(
sw
->
rx_úq
, 
ëh_rx_úq
, 
IRQF_SHARED
, "gig_swôch", 
«pi_dev
);

990 
	`ªque°_úq
(
sw
->
°©_úq
, 
ëh_°©_úq
, 
IRQF_SHARED
, "gig_°©", 
«pi_dev
);

991 
	`«pi_íabÀ
(&
sw
->
«pi
);

992 
	`√tif_°¨t_queue
(
«pi_dev
);

994 
	`__øw_wrôñ
(~(
MAC0_STATUS_CHANGE
 | 
MAC1_STATUS_CHANGE
 | 
MAC2_STATUS_CHANGE
 |

995 
MAC0_RX_ERROR
 | 
MAC1_RX_ERROR
 | 
MAC2_RX_ERROR
), &
sw
->
ªgs
->
öå_mask
);

997 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[2]);

998 
ãmp
 &~(
PORT_DISABLE
);

999 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[2]);

1001 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
dma_auto_pﬁl_cfg
);

1002 
ãmp
 &~(
TS_SUSPEND
 | 
FS_SUSPEND
);

1003 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
dma_auto_pﬁl_cfg
);

1005 
	`íabÀ_rx_dma
(
sw
);

1007 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1008 
ãmp
 &~(
PORT_DISABLE
);

1009 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1011 
p‹ts_›í
++;

1012 
	`√tif_ˇºõr_⁄
(
dev
);

1015 
	}
}

1017 
	$ëh_˛o£
(
√t_devi˚
 *
dev
)

1019 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

1020 
sw
 *sw = 
p‹t
->sw;

1021 
u32
 
ãmp
;

1023 
p‹ts_›í
--;

1025 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1026 
ãmp
 |(
PORT_DISABLE
);

1027 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1029 
	`√tif_°›_queue
(
dev
);

1031 
	`phy_°›
(
p‹t
->
phydev
);

1033 i‡(!
p‹ts_›í
) {

1034 
	`dißbÀ_úq
(
sw
->
rx_úq
);

1035 
	`‰ì_úq
(
sw
->
rx_úq
, 
«pi_dev
);

1036 
	`dißbÀ_úq
(
sw
->
°©_úq
);

1037 
	`‰ì_úq
(
sw
->
°©_úq
, 
«pi_dev
);

1038 
	`«pi_dißbÀ
(&
sw
->
«pi
);

1039 
	`√tif_°›_queue
(
«pi_dev
);

1040 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[2]);

1041 
ãmp
 |(
PORT_DISABLE
);

1042 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[2]);

1044 
	`__øw_wrôñ
(
TS_SUSPEND
 | 
FS_SUSPEND
,

1045 &
sw
->
ªgs
->
dma_auto_pﬁl_cfg
);

1048 
	`√tif_ˇºõr_off
(
dev
);

1050 
	}
}

1052 
	$ëh_rx_mode
(
√t_devi˚
 *
dev
)

1054 
p‹t
 *p‹à
	`√tdev_¥iv
(
dev
);

1055 
sw
 *sw = 
p‹t
->sw;

1056 
u32
 
ãmp
;

1058 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_glob_cfg
);

1060 i‡(
dev
->
Êags
 & 
IFF_PROMISC
) {

1061 i‡(
p‹t
->
id
 == 3)

1062 
ãmp
 |((1 << 2Ë<< 
PROMISC_OFFSET
);

1064 
ãmp
 |((1 << 
p‹t
->
id
Ë<< 
PROMISC_OFFSET
);

1066 i‡(
p‹t
->
id
 == 3)

1067 
ãmp
 &~((1 << 2Ë<< 
PROMISC_OFFSET
);

1069 
ãmp
 &~((1 << 
p‹t
->
id
Ë<< 
PROMISC_OFFSET
);

1071 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_glob_cfg
);

1072 
	}
}

1074 
	$ëh_£t_mac
(
√t_devi˚
 *
√tdev
, *
p
)

1076 
p‹t
 *p‹à
	`√tdev_¥iv
(
√tdev
);

1077 
sw
 *sw = 
p‹t
->sw;

1078 
sockaddr
 *
addr
 = 
p
;

1079 
u32
 
cy˛es
 = 0;

1081 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

1082  -
EADDRNOTAVAIL
;

1085 i‡(
p‹t
->
id
 == 3)

1086 
	`__øw_wrôñ
((
p‹t
->
id
 << 16Ë| (0x4 << 9), &
sw
->
ªgs
->
¨l_˘æ
[0]);

1088 
	`__øw_wrôñ
(((
p‹t
->
id
 + 1Ë<< 16Ë| (0x4 << 9), &
sw
->
ªgs
->
¨l_˘æ
[0]);

1089 
	`__øw_wrôñ
–((
√tdev
->
dev_addr
[0] << 24) | (netdev->dev_addr[1] << 16) |

1090 (
√tdev
->
dev_addr
[2] << 8) | (netdev->dev_addr[3])),

1091 &
sw
->
ªgs
->
¨l_˘æ
[1]);

1093 
	`__øw_wrôñ
–((
√tdev
->
dev_addr
[4] << 24) | (netdev->dev_addr[5] << 16) |

1095 &
sw
->
ªgs
->
¨l_˘æ
[2]);

1096 
	`__øw_wrôñ
((1 << 19), &
sw
->
ªgs
->
¨l_vœn_cmd
);

1098 ((
	`__øw_ªadl
(&
sw
->
ªgs
->
¨l_vœn_cmd
) & (1 << 21)) == 0)

1099 && 
cy˛es
 < 5000) {

1100 
	`udñay
(1);

1101 
cy˛es
++;

1104 
cy˛es
 = 0;

1105 
	`mem˝y
(
√tdev
->
dev_addr
, 
addr
->
ß_d©a
,Çëdev->
addr_Àn
);

1107 i‡(
p‹t
->
id
 == 3)

1108 
	`__øw_wrôñ
((
p‹t
->
id
 << 16Ë| (0x4 << 9), &
sw
->
ªgs
->
¨l_˘æ
[0]);

1110 
	`__øw_wrôñ
(((
p‹t
->
id
 + 1Ë<< 16Ë| (0x4 << 9), &
sw
->
ªgs
->
¨l_˘æ
[0]);

1111 
	`__øw_wrôñ
–((
addr
->
ß_d©a
[0] << 24) | (addr->sa_data[1] << 16) |

1112 (
addr
->
ß_d©a
[2] << 8) | (addr->sa_data[3])),

1113 &
sw
->
ªgs
->
¨l_˘æ
[1]);

1115 
	`__øw_wrôñ
–((
addr
->
ß_d©a
[4] << 24) | (addr->sa_data[5] << 16) |

1116 (7 << 4Ë| (1 << 1)), &
sw
->
ªgs
->
¨l_˘æ
[2]);

1117 
	`__øw_wrôñ
((1 << 19), &
sw
->
ªgs
->
¨l_vœn_cmd
);

1119 ((
	`__øw_ªadl
(&
sw
->
ªgs
->
¨l_vœn_cmd
) & (1 << 21)) == 0)

1120 && 
cy˛es
 < 5000) {

1121 
	`udñay
(1);

1122 
cy˛es
++;

1125 
	}
}

1127 c⁄° 
√t_devi˚_›s
 
	g˙s3xxx_√tdev_›s
 = {

1128 .
ndo_›í
 = 
ëh_›í
,

1129 .
	gndo_°›
 = 
ëh_˛o£
,

1130 .
	gndo_°¨t_xmô
 = 
ëh_xmô
,

1131 .
	gndo_£t_rx_mode
 = 
ëh_rx_mode
,

1132 .
	gndo_do_io˘l
 = 
ëh_io˘l
,

1133 .
	gndo_£t_mac_addªss
 = 
ëh_£t_mac
,

1134 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1137 
	$ëh_öô_⁄e
(
∂©f‹m_devi˚
 *
pdev
)

1139 
i
;

1140 
p‹t
 *port;

1141 
sw
 *sw;

1142 
√t_devi˚
 *
dev
;

1143 
˙s3xxx_∂©_öfo
 *
∂©
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

1144 
phy_id
[
MII_BUS_ID_SIZE
 + 3];

1145 
îr
;

1146 
u32
 
ãmp
;

1147 
ªsour˚
 *
ªs
;

1148 
__iomem
 *
ªgs
;

1150 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1151 
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

1152 i‡(
	`IS_ERR
(
ªgs
))

1153  
	`PTR_ERR
(
ªgs
);

1155 
îr
 = 
	`˙s3xxx_mdio_ªgi°î
(
ªgs
);

1156 i‡(
îr
)

1157  
îr
;

1159 i‡(!(
«pi_dev
 = 
	`Æloc_ëhîdev
((
sw
)))) {

1160 
îr
 = -
ENOMEM
;

1161 
îr_ªmove_mdio
;

1164 
	`°r˝y
(
«pi_dev
->
«me
, "cns3xxx_eth");

1165 
«pi_dev
->
„©uªs
 = 
NETIF_F_IP_CSUM
 | 
NETIF_F_SG
 | 
NETIF_F_FRAGLIST
;

1167 
	`SET_NETDEV_DEV
(
«pi_dev
, &
pdev
->
dev
);

1168 
sw
 = 
	`√tdev_¥iv
(
«pi_dev
);

1169 
	`mem£t
(
sw
, 0, (sw));

1170 
sw
->
ªgs
 =Ñegs;

1171 
sw
->
dev
 = &
pdev
->dev;

1173 
sw
->
rx_úq
 = 
	`∂©f‹m_gë_úq_by«me
(
pdev
, "eth_rx");

1174 
sw
->
°©_úq
 = 
	`∂©f‹m_gë_úq_by«me
(
pdev
, "eth_stat");

1176 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
phy_auto_addr
);

1177 
ãmp
 |= (3 << 30);

1178 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
phy_auto_addr
);

1180 
i
 = 0; i < 4; i++) {

1181 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[
i
]);

1182 
ãmp
 |(
PORT_DISABLE
);

1183 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[
i
]);

1186 
ãmp
 = 
PORT_DISABLE
;

1187 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[2]);

1189 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
vœn_cfg
);

1190 
ãmp
 |
NIC_MODE
 | 
VLAN_UNAWARE
;

1191 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
vœn_cfg
);

1193 
	`__øw_wrôñ
(
UNKNOWN_VLAN_TO_CPU
 |

1194 
CRC_STRIPPING
, &
sw
->
ªgs
->
mac_glob_cfg
);

1196 i‡((
îr
 = 
	`öô_rögs
(
sw
)) != 0) {

1197 
îr
 = -
ENOMEM
;

1198 
îr_‰ì
;

1200 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
«pi_dev
);

1202 
	`√tif_«pi_add
(
«pi_dev
, &
sw
->
«pi
, 
ëh_pﬁl
, 
NAPI_WEIGHT
);

1204 
i
 = 0; i < 3; i++) {

1205 i‡(!(
∂©
->
p‹ts
 & (1 << 
i
))) {

1209 i‡(!(
dev
 = 
	`Æloc_ëhîdev
((
p‹t
)))) {

1210 
‰ì_p‹ts
;

1213 
p‹t
 = 
	`√tdev_¥iv
(
dev
);

1214 
p‹t
->
√tdev
 = 
dev
;

1215 i‡(
i
 == 2)

1216 
p‹t
->
id
 = 3;

1218 
p‹t
->
id
 = 
i
;

1219 
p‹t
->
sw
 = sw;

1221 
ãmp
 = 
	`__øw_ªadl
(&
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1222 
ãmp
 |(
PORT_DISABLE
 | 
PORT_BLOCK_STATE
 | 
PORT_LEARN_DIS
);

1223 
	`__øw_wrôñ
(
ãmp
, &
sw
->
ªgs
->
mac_cfg
[
p‹t
->
id
]);

1225 
	`SET_NETDEV_DEV
(
dev
, &
pdev
->dev);

1226 
dev
->
√tdev_›s
 = &
˙s3xxx_√tdev_›s
;

1227 
dev
->
ëhtoﬁ_›s
 = &
˙s3xxx_ëhtoﬁ_›s
;

1228 
dev
->
tx_queue_Àn
 = 1000;

1229 
dev
->
max_mtu
 = 
MAX_MTU
;

1230 
dev
->
„©uªs
 = 
NETIF_F_IP_CSUM
 | 
NETIF_F_SG
 | 
NETIF_F_FRAGLIST
;

1232 
swôch_p‹t_èb
[
p‹t
->
id
] =Öort;

1233 
	`mem˝y
(
dev
->
dev_addr
, &
∂©
->
hwaddr
[
i
], 
ETH_ALEN
);

1235 
	`¢¥ötf
(
phy_id
, 
MII_BUS_ID_SIZE
 + 3, 
PHY_ID_FMT
, "0", 
∂©
->
phy
[
i
]);

1236 
p‹t
->
phydev
 = 
	`phy_c⁄√˘
(
dev
, 
phy_id
, &
˙s3xxx_adju°_lök
,

1237 
PHY_INTERFACE_MODE_RGMII
);

1238 i‡((
îr
 = 
	`IS_ERR
(
p‹t
->
phydev
))) {

1239 
swôch_p‹t_èb
[
p‹t
->
id
] = 0;

1240 
	`‰ì_√tdev
(
dev
);

1241 
‰ì_p‹ts
;

1244 
p‹t
->
phydev
->
úq
 = 
PHY_IGNORE_INTERRUPT
;

1246 i‡((
îr
 = 
	`ªgi°î_√tdev
(
dev
))) {

1247 
	`phy_disc⁄√˘
(
p‹t
->
phydev
);

1248 
swôch_p‹t_èb
[
p‹t
->
id
] = 0;

1249 
	`‰ì_√tdev
(
dev
);

1250 
‰ì_p‹ts
;

1253 
	`¥ötk
(
KERN_INFO
 "%s: RGMII PHY %ò⁄ cns3xxx Swôch\n", 
dev
->
«me
, 
∂©
->
phy
[
i
]);

1254 
	`√tif_ˇºõr_off
(
dev
);

1255 
dev
 = 0;

1260 
‰ì_p‹ts
:

1261 
îr
 = -
ENOMEM
;

1262 --
i
; i >= 0; i--) {

1263 i‡(
swôch_p‹t_èb
[
i
]) {

1264 
p‹t
 = 
swôch_p‹t_èb
[
i
];

1265 
dev
 = 
p‹t
->
√tdev
;

1266 
	`uƒegi°î_√tdev
(
dev
);

1267 
	`phy_disc⁄√˘
(
p‹t
->
phydev
);

1268 
swôch_p‹t_èb
[
i
] = 0;

1269 
	`‰ì_√tdev
(
dev
);

1272 
îr_‰ì
:

1273 
	`‰ì_√tdev
(
«pi_dev
);

1274 
îr_ªmove_mdio
:

1275 
	`˙s3xxx_mdio_ªmove
();

1276  
îr
;

1277 
	}
}

1279 
	$ëh_ªmove_⁄e
(
∂©f‹m_devi˚
 *
pdev
)

1281 
√t_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1282 
sw
 *sw = 
	`√tdev_¥iv
(
dev
);

1283 
i
;

1285 
	`de°roy_rögs
(
sw
);

1286 
i
 = 3; i >= 0; i--) {

1287 i‡(
swôch_p‹t_èb
[
i
]) {

1288 
p‹t
 *p‹à
swôch_p‹t_èb
[
i
];

1289 
√t_devi˚
 *
dev
 = 
p‹t
->
√tdev
;

1290 
	`uƒegi°î_√tdev
(
dev
);

1291 
	`phy_disc⁄√˘
(
p‹t
->
phydev
);

1292 
swôch_p‹t_èb
[
i
] = 0;

1293 
	`‰ì_√tdev
(
dev
);

1297 
	`‰ì_√tdev
(
«pi_dev
);

1298 
	`˙s3xxx_mdio_ªmove
();

1301 
	}
}

1303 
∂©f‹m_drivî
 
	g˙s3xxx_ëh_drivî
 = {

1304 .
drivî
.
«me
 = 
DRV_NAME
,

1305 .
	g¥obe
 = 
ëh_öô_⁄e
,

1306 .
	gªmove
 = 
ëh_ªmove_⁄e
,

1309 
__öô
 
	$ëh_öô_moduÀ
()

1311  
	`∂©f‹m_drivî_ªgi°î
(&
˙s3xxx_ëh_drivî
);

1312 
	}
}

1314 
__exô
 
	$ëh_˛ónup_moduÀ
()

1316 
	`∂©f‹m_drivî_uƒegi°î
(&
˙s3xxx_ëh_drivî
);

1317 
	}
}

1319 
moduÀ_öô
(
ëh_öô_moduÀ
);

1320 
moduÀ_exô
(
ëh_˛ónup_moduÀ
);

1322 
MODULE_AUTHOR
("Chris Lang");

1323 
MODULE_DESCRIPTION
("Cavium CNS3xxx Ethernet driver");

1324 
MODULE_LICENSE
("GPL v2");

1325 
MODULE_ALIAS
("platform:cns3xxx_eth");

	@linux/cns3xxx/files/drivers/spi/spi-cns3xxx.c

28 
	~<löux/öô.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/w‹kqueue.h
>

31 
	~<löux/öãºu±.h
>

32 
	~<löux/dñay.h
>

33 
	~<löux/î∫o.h
>

34 
	~<löux/îr.h
>

35 
	~<löux/˛k.h
>

36 
	~<löux/∂©f‹m_devi˚.h
>

38 
	~<löux/•i/•i.h
>

39 
	~<löux/•i/•i_bôb™g.h
>

40 
	~<löux/mtd/∑πôi⁄s.h
>

41 
	~<löux/dma-m≠pög.h
>

42 
	~<löux/¶ab.h
>

44 
	~<asm/io.h
>

45 
	~<asm/mem‹y.h
>

46 
	~<asm/dma.h
>

47 
	~<asm/dñay.h
>

48 
	~<löux/moduÀ.h
>

53 
	#SPI_MEM_MAP_VALUE
(
ªg_off£t
Ë(*((
u32
 vﬁ©ûê*)(
hw
->
ba£
 +Ñeg_off£t)))

	)

55 
	#SPI_CONFIGURATION_REG
 
	`SPI_MEM_MAP_VALUE
(0x00)

	)

56 
	#SPI_SERVICE_STATUS_REG
 
	`SPI_MEM_MAP_VALUE
(0x04)

	)

57 
	#SPI_BIT_RATE_CONTROL_REG
 
	`SPI_MEM_MAP_VALUE
(0x08)

	)

58 
	#SPI_TRANSMIT_CONTROL_REG
 
	`SPI_MEM_MAP_VALUE
(0x0C)

	)

59 
	#SPI_TRANSMIT_BUFFER_REG
 
	`SPI_MEM_MAP_VALUE
(0x10)

	)

60 
	#SPI_RECEIVE_CONTROL_REG
 
	`SPI_MEM_MAP_VALUE
(0x14)

	)

61 
	#SPI_RECEIVE_BUFFER_REG
 
	`SPI_MEM_MAP_VALUE
(0x18)

	)

62 
	#SPI_FIFO_TRANSMIT_CONFIG_REG
 
	`SPI_MEM_MAP_VALUE
(0x1C)

	)

63 
	#SPI_FIFO_TRANSMIT_CONTROL_REG
 
	`SPI_MEM_MAP_VALUE
(0x20)

	)

64 
	#SPI_FIFO_RECEIVE_CONFIG_REG
 
	`SPI_MEM_MAP_VALUE
(0x24)

	)

65 
	#SPI_INTERRUPT_STATUS_REG
 
	`SPI_MEM_MAP_VALUE
(0x28)

	)

66 
	#SPI_INTERRUPT_ENABLE_REG
 
	`SPI_MEM_MAP_VALUE
(0x2C)

	)

68 
	#SPI_TRANSMIT_BUFFER_REG_ADDR
 (
CNS3XXX_SSP_BASE
 +0x10)

	)

69 
	#SPI_RECEIVE_BUFFER_REG_ADDR
 (
CNS3XXX_SSP_BASE
 +0x18)

	)

72 
	s˙s3xxx_•i
 {

74 
•i_bôb™g
 
	mbôb™g
;

75 
com∂ëi⁄
 
	md⁄e
;

76 
waô_queue_hód_t
 
	mwaô
;

78 
	mÀn
;

79 
	mcou¡
;

80 
	mœ°_ö_mesßge_li°
;

83 c⁄° *
	mtx
;

84 *
	mrx
;

86 
__iomem
 *
	mba£
;

87 
•i_ma°î
 *
	mma°î
;

88 
∂©f‹m_devi˚
 *
	mpdev
;

89 
devi˚
 *
	mdev
;

92 
ölöe
 
u8
 
	$˙s3xxx_•i_bus_idÀ
(
˙s3xxx_•i
 *
hw
)

94  ((
SPI_SERVICE_STATUS_REG
 & 0x1) ? 0 : 1);

95 
	}
}

97 
ölöe
 
u8
 
	$˙s3xxx_•i_tx_buf„r_em±y
(
˙s3xxx_•i
 *
hw
)

99  ((
SPI_INTERRUPT_STATUS_REG
 & (0x1 << 3)) ? 1 : 0);

100 
	}
}

102 
ölöe
 
u8
 
	$˙s3xxx_•i_rx_buf„r_fuŒ
(
˙s3xxx_•i
 *
hw
)

104  ((
SPI_INTERRUPT_STATUS_REG
 & (0x1 << 2)) ? 1 : 0);

105 
	}
}

107 
u8
 
	$˙s3xxx_•i_tx_rx
(
˙s3xxx_•i
 *
hw
, 
u8
 
tx_ch™√l
, u8 
tx_eof
,

108 
u32
 
tx_d©a
, u32 * 
rx_d©a
)

110 
u8
 
rx_ch™√l
;

111 
u8
 
rx_eof
;

113 !
	`˙s3xxx_•i_bus_idÀ
(
hw
)) ;

115 !
	`˙s3xxx_•i_tx_buf„r_em±y
(
hw
)) ;

117 
SPI_TRANSMIT_CONTROL_REG
 &= ~(0x7);

118 
SPI_TRANSMIT_CONTROL_REG
 |(
tx_ch™√l
 & 0x3Ë| ((
tx_eof
 & 0x1) << 2);

120 
SPI_TRANSMIT_BUFFER_REG
 = 
tx_d©a
;

122 !
	`˙s3xxx_•i_rx_buf„r_fuŒ
(
hw
)) ;

124 
rx_ch™√l
 = 
SPI_RECEIVE_CONTROL_REG
 & 0x3;

125 
rx_eof
 = (
SPI_RECEIVE_CONTROL_REG
 & (0x1 << 2)) ? 1 : 0;

127 *
rx_d©a
 = 
SPI_RECEIVE_BUFFER_REG
;

129 i‡((
tx_ch™√l
 !
rx_ch™√l
Ë|| (
tx_eof
 !
rx_eof
)) {

134 
	}
}

136 
u8
 
	$˙s3xxx_•i_tx
(
˙s3xxx_•i
 *
hw
, 
u8
 
tx_ch™√l
, u8 
tx_eof
, 
u32
 
tx_d©a
)

139 !
	`˙s3xxx_•i_bus_idÀ
(
hw
)) ;

141 !
	`˙s3xxx_•i_tx_buf„r_em±y
(
hw
)) ;

143 
SPI_TRANSMIT_CONTROL_REG
 &= ~(0x7);

144 
SPI_TRANSMIT_CONTROL_REG
 |(
tx_ch™√l
 & 0x3Ë| ((
tx_eof
 & 0x1) << 2);

146 
SPI_TRANSMIT_BUFFER_REG
 = 
tx_d©a
;

149 
	}
}

151 
ölöe
 
˙s3xxx_•i
 *
	$to_hw
(
•i_devi˚
 *
sdev
)

153  
	`•i_ma°î_gë_devd©a
(
sdev
->
ma°î
);

154 
	}
}

156 
	$˙s3xxx_•i_£tup_å™s„r
(
•i_devi˚
 *
•i
,

157 
•i_å™s„r
 *
t
)

160 
	}
}

162 
	$˙s3xxx_•i_chù£À˘
(
•i_devi˚
 *
•i
, 
vÆue
)

164 
˙s3xxx_•i
 *
hw
 = 
	`to_hw
(
•i
);

165 
•i_c⁄fig
;

167 
vÆue
) {

168 
BITBANG_CS_INACTIVE
:

171 
BITBANG_CS_ACTIVE
:

172 
•i_c⁄fig
 = 
SPI_CONFIGURATION_REG
;

174 i‡(
•i
->
mode
 & 
SPI_CPHA
)

175 
•i_c⁄fig
 |= (0x1 << 13);

177 
•i_c⁄fig
 &= ~(0x1 << 13);

179 i‡(
•i
->
mode
 & 
SPI_CPOL
)

180 
•i_c⁄fig
 |= (0x1 << 14);

182 
•i_c⁄fig
 &= ~(0x1 << 14);

185 
SPI_CONFIGURATION_REG
 = 
•i_c⁄fig
;

187 
SPI_TRANSMIT_CONTROL_REG
 &= ~(0x7);

188 
SPI_TRANSMIT_CONTROL_REG
 |(
•i
->
chù_£À˘
 & 0x3);

192 
	}
}

194 
	$˙s3xxx_•i_£tup
(
•i_devi˚
 *
•i
)

196 i‡(!
•i
->
bôs_≥r_w‹d
)

197 
•i
->
bôs_≥r_w‹d
 = 8;

200 
	}
}

202 
	$˙s3xxx_•i_txrx
(
•i_devi˚
 *
•i
, 
•i_å™s„r
 *
t
)

204 
˙s3xxx_•i
 *
hw
 = 
	`to_hw
(
•i
);

206 
	`dev_dbg
(&
•i
->
dev
, "txrx:Åx %p,Ñx %p,Üí %d\n", 
t
->
tx_buf
,Å->
rx_buf
,

207 
t
->
Àn
);

209 
hw
->
tx
 = 
t
->
tx_buf
;

210 
hw
->
rx
 = 
t
->
rx_buf
;

211 
hw
->
Àn
 = 
t
->len;

212 
hw
->
cou¡
 = 0;

213 
hw
->
œ°_ö_mesßge_li°
 = 
t
->last_in_message_list;

215 
	`öô_com∂ëi⁄
(&
hw
->
d⁄e
);

217 i‡(
hw
->
tx
) {

218 
i
;

219 
u32
 
rx_d©a
;

220 
i
 = 0; i < (
hw
->
Àn
 - 1); i++) {

221 
	`dev_dbg
(&
•i
->
dev
,

222 "[SPI_CNS3XXX_DEBUG] hw->tx[%02d]: 0x%02x\n", 
i
,

223 
hw
->
tx
[
i
]);

224 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 0, hw->
tx
[
i
],

225 &
rx_d©a
);

226 i‡(
hw
->
rx
) {

227 
hw
->
rx
[
i
] = 
rx_d©a
;

228 
	`dev_dbg
(&
•i
->
dev
,

230 
i
, 
hw
->
rx
[i]);

234 i‡(
t
->
œ°_ö_mesßge_li°
) {

235 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 1, hw->
tx
[
i
],

236 &
rx_d©a
);

237 i‡(
hw
->
rx
) {

238 
hw
->
rx
[
i
] = 
rx_d©a
;

239 
	`dev_dbg
(&
•i
->
dev
,

241 
i
, 
hw
->
rx
[i]);

244 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 0, hw->
tx
[
i
],

245 &
rx_d©a
);

247 
d⁄e
;

250 i‡(
hw
->
rx
) {

251 
i
;

252 
u32
 
rx_d©a
;

253 
i
 = 0; i < (
hw
->
Àn
 - 1); i++) {

254 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 0, 0xff, &
rx_d©a
);

255 
hw
->
rx
[
i
] = 
rx_d©a
;

256 
	`dev_dbg
(&
•i
->
dev
,

257 "[SPI_CNS3XXX_DEBUG] hw->rx[%02d]: 0x%02x\n", 
i
,

258 
hw
->
rx
[
i
]);

261 i‡(
t
->
œ°_ö_mesßge_li°
) {

262 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 1, 0xff, &
rx_d©a
);

264 
	`˙s3xxx_•i_tx_rx
(
hw
, 
•i
->
chù_£À˘
, 0, 0xff, &
rx_d©a
);

266 
hw
->
rx
[
i
] = 
rx_d©a
;

267 
	`dev_dbg
(&
•i
->
dev
, "[SPI_CNS3XXX_DEBUG] hw->rx[%02d]: 0x%02x\n",

268 
i
, 
hw
->
rx
[i]);

270 
d⁄e
:

271  
hw
->
Àn
;

272 
	}
}

274 
__öô
 
	$˙s3xxx_•i_öôül
(
˙s3xxx_•i
 *
hw
)

276 
SPI_CONFIGURATION_REG
 = (((0x0 & 0x3) << 0) |

289 
SPI_BIT_RATE_CONTROL_REG
 = 0x1;

292 
SPI_TRANSMIT_CONTROL_REG
 = 0x0;

295 
SPI_FIFO_TRANSMIT_CONFIG_REG
 &= ~(0x03 << 4);

296 
SPI_FIFO_TRANSMIT_CONFIG_REG
 |= ((0x0 & 0x03) << 4);

299 
SPI_FIFO_RECEIVE_CONFIG_REG
 &= ~(0x03 << 4);

300 
SPI_FIFO_RECEIVE_CONFIG_REG
 |= ((0x0 & 0x03) << 4);

303 
SPI_INTERRUPT_ENABLE_REG
 = 0x0;

306 
SPI_INTERRUPT_STATUS_REG
 = (0x0F << 4);

309 
SPI_CONFIGURATION_REG
 |= (0x1 << 31);

312 
	}
}

314 
	$˙s3xxx_•i_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

316 
•i_ma°î
 *
ma°î
;

317 
˙s3xxx_•i
 *
hw
;

318 
ªsour˚
 *
ªs
;

319 
îr
 = 0;

321 
	`¥ötk
("%s: sëu∞CNS3XXX SPI C⁄åﬁÀr\n", 
__FUNCTION__
);

323 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

324 i‡(!
ªs
)

325  -
ENODEV
;

328 
ma°î
 = 
	`•i_Æloc_ma°î
(&
pdev
->
dev
, (
˙s3xxx_•i
));

329 i‡(
ma°î
 =
NULL
) {

330 
	`dev_îr
(&
pdev
->
dev
, "No memory for spi_master\n");

331 
îr
 = -
ENOMEM
;

332 
îr_nomem
;

335 
hw
 = 
	`•i_ma°î_gë_devd©a
(
ma°î
);

336 
	`mem£t
(
hw
, 0, (
˙s3xxx_•i
));

338 
hw
->
ma°î
 = 
	`•i_ma°î_gë
(master);

339 
hw
->
dev
 = &
pdev
->dev;

341 
hw
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(hw->
dev
, 
ªs
);

342 i‡(
	`IS_ERR
(
hw
->
ba£
)) {

343 
	`dev_îr
(
hw
->
dev
, "UnableÅo mapÑegisters\n");

344 
îr
 = 
	`PTR_ERR
(
hw
->
ba£
);

345 
îr_ªgi°î
;

348 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
hw
);

349 
	`öô_com∂ëi⁄
(&
hw
->
d⁄e
);

353 
ma°î
->
num_chù£À˘
 = 4;

354 
ma°î
->
bus_num
 = 1;

358 
hw
->
bôb™g
.
ma°î
 = hw->master;

359 
hw
->
bôb™g
.
£tup_å™s„r
 = 
˙s3xxx_•i_£tup_å™s„r
;

360 
hw
->
bôb™g
.
chù£À˘
 = 
˙s3xxx_•i_chù£À˘
;

361 
hw
->
bôb™g
.
txrx_bufs
 = 
˙s3xxx_•i_txrx
;

362 
hw
->
bôb™g
.
ma°î
->
£tup
 = 
˙s3xxx_•i_£tup
;

364 
	`dev_dbg
(
hw
->
dev
, "bôb™gáà%p\n", &hw->
bôb™g
);

367 
	`˙s3xxx_•i_öôül
(
hw
);

371 
îr
 = 
	`•i_bôb™g_°¨t
(&
hw
->
bôb™g
);

372 i‡(
îr
) {

373 
	`dev_îr
(&
pdev
->
dev
, "FailedÅoÑegister SPI master\n");

374 
îr_ªgi°î
;

379 
îr_ªgi°î
:

380 
	`•i_ma°î_put
(
hw
->
ma°î
);;

382 
îr_nomem
:

383  
îr
;

384 
	}
}

386 
	$˙s3xxx_•i_ªmove
(
∂©f‹m_devi˚
 *
dev
)

388 
˙s3xxx_•i
 *
hw
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

390 
	`∂©f‹m_£t_drvd©a
(
dev
, 
NULL
);

392 
	`•i_uƒegi°î_ma°î
(
hw
->
ma°î
);

394 
	`•i_ma°î_put
(
hw
->
ma°î
);

396 
	}
}

398 #ifde‡
CONFIG_PM


400 
	$˙s3xxx_•i_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
msg
)

402 
˙s3xxx_•i
 *
hw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

405 
	}
}

407 
	$˙s3xxx_•i_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

409 
˙s3xxx_•i
 *
hw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

412 
	}
}

415 
	#˙s3xxx_•i_su•íd
 
NULL


	)

416 
	#˙s3xxx_•i_ªsume
 
NULL


	)

419 
∂©f‹m_drivî
 
	g˙s3xxx_•i_drivî
 = {

420 .
¥obe
 = 
˙s3xxx_•i_¥obe
,

421 .
	gªmove
 = 
˙s3xxx_•i_ªmove
,

422 .
	gsu•íd
 = 
˙s3xxx_•i_su•íd
,

423 .
	gªsume
 = 
˙s3xxx_•i_ªsume
,

424 .
	gdrivî
 = {

425 .
«me
 = "cns3xxx_spi",

426 .
	gow√r
 = 
THIS_MODULE
,

430 
__öô
 
	$˙s3xxx_•i_öô
()

432  
	`∂©f‹m_drivî_ªgi°î
(&
˙s3xxx_•i_drivî
);

433 
	}
}

435 
__exô
 
	$˙s3xxx_•i_exô
()

437 
	`∂©f‹m_drivî_uƒegi°î
(&
˙s3xxx_•i_drivî
);

438 
	}
}

440 
moduÀ_öô
(
˙s3xxx_•i_öô
);

441 
moduÀ_exô
(
˙s3xxx_•i_exô
);

443 
MODULE_AUTHOR
("Cavium Networks");

444 
MODULE_DESCRIPTION
("CNS3XXX SPI Controller Driver");

445 
MODULE_LICENSE
("GPL");

446 
MODULE_ALIAS
("platform:cns3xxx_spi");

448 
EXPORT_SYMBOL_GPL
(
˙s3xxx_•i_tx_rx
);

	@linux/cns3xxx/files/include/linux/platform_data/cns3xxx.h

13 #i‚de‡
__ASM_ARCH_PLATFORM_H


14 
	#__ASM_ARCH_PLATFORM_H


	)

16 #i‚de‡
__ASSEMBLY__


19 
	s˙s3xxx_∂©_öfo
 {

20 
u8
 
	mp‹ts
;

21 
u8
 
	mhwaddr
[4][6];

22 
u32
 
	mphy
[3];

	@linux/generic/files/arch/mips/fw/myloader/myloader.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<löux/°rög.h
>

17 
	~<asm/addr•a˚.h
>

18 
	~<asm/fw/mylﬂdî/mylﬂdî.h
>

20 
	#SYS_PARAMS_ADDR
 
	`KSEG1ADDR
(0x80000800)

	)

21 
	#BOARD_PARAMS_ADDR
 
	`KSEG1ADDR
(0x80000A00)

	)

22 
	#PART_TABLE_ADDR
 
	`KSEG1ADDR
(0x80000C00)

	)

23 
	#BOOT_PARAMS_ADDR
 
	`KSEG1ADDR
(0x80000E00)

	)

25 
mylﬂdî_öfo
 mylﬂdî_öfÿ
	g__öôd©a
;

26 
mylﬂdî_found
 
	g__öôd©a
;

28 
mylﬂdî_öfo
 * 
__öô
 
	$mylﬂdî_gë_öfo
()

30 
mylo_sy°em_∑øms
 *
sy•
;

31 
mylo_bﬂrd_∑øms
 *
bﬂrdp
;

32 
mylo_∑πôi⁄_èbÀ
 *
∑πs
;

34 i‡(
mylﬂdî_found
)

35  &
mylﬂdî_öfo
;

37 
sy•
 = (
mylo_sy°em_∑øms
 *)(
SYS_PARAMS_ADDR
);

38 
bﬂrdp
 = (
mylo_bﬂrd_∑øms
 *)(
BOARD_PARAMS_ADDR
);

39 
∑πs
 = (
mylo_∑πôi⁄_èbÀ
 *)(
PART_TABLE_ADDR
);

41 
	`¥ötk
(
KERN_DEBUG
 "MyLoader: sysp=%08x, boardp=%08x,Öarts=%08x\n",

42 
sy•
->
magic
, 
bﬂrdp
->magic, 
∑πs
->magic);

45 i‡(
sy•
->
magic
 !
MYLO_MAGIC_SYS_PARAMS
 ||

46 
bﬂrdp
->
magic
 !
MYLO_MAGIC_BOARD_PARAMS
 ||

47 
	`À32_to_˝u
(
∑πs
->
magic
Ë!
MYLO_MAGIC_PARTITIONS
)

48  
NULL
;

50 
	`¥ötk
(
KERN_DEBUG
 "MyLoader: id=%04x:%04x, sub_id=%04x:%04x\n",

51 
sy•
->
vid
, sy•->
did
, sy•->
svid
, sy•->
sdid
);

53 
mylﬂdî_öfo
.
vid
 = 
sy•
->vid;

54 
mylﬂdî_öfo
.
did
 = 
sy•
->did;

55 
mylﬂdî_öfo
.
svid
 = 
sy•
->svid;

56 
mylﬂdî_öfo
.
sdid
 = 
sy•
->sdid;

58 
	`mem˝y
(
mylﬂdî_öfo
.
macs
, 
bﬂrdp
->
addr
, (myloader_info.macs));

60 
mylﬂdî_found
 = 1;

62  &
mylﬂdî_öfo
;

63 
	}
}

	@linux/generic/files/drivers/misc/owl-loader.c

19 
	~<löux/moduÀ.h
>

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/com∂ëi⁄.h
>

22 
	~<löux/ëhîdevi˚.h
>

23 
	~<löux/fúmw¨e.h
>

24 
	~<löux/pci.h
>

25 
	~<löux/dñay.h
>

26 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~<löux/©h9k_∂©f‹m.h
>

29 
	sowl_˘x
 {

30 
com∂ëi⁄
 
	mì¥om_lﬂd
;

33 
	#EEPROM_FILENAME_LEN
 100

	)

35 
	#AR5416_EEPROM_MAGIC
 0xa55a

	)

37 
	$©h9k_pci_fixup
(
pci_dev
 *
pdev
, c⁄° 
u16
 *
ˇl_d©a
,

38 
size_t
 
ˇl_Àn
)

40 
__iomem
 *
mem
;

41 c⁄° *
ˇl_íd
 = (*)
ˇl_d©a
 + 
ˇl_Àn
;

43 
__be16
 
ªg
;

44 
__be16
 
low_vÆ
;

45 
__be16
 
high_vÆ
;

46 } 
__∑cked
 *
d©a
;

47 
u16
 
cmd
;

48 
u32
 
b¨0
;

49 
boﬁ
 
sw≠_√eded
 = 
Ál£
;

51 i‡(*
ˇl_d©a
 !
AR5416_EEPROM_MAGIC
) {

52 i‡(*
ˇl_d©a
 !
	`swab16
(
AR5416_EEPROM_MAGIC
)) {

53 
	`dev_îr
(&
pdev
->
dev
, "invalid calibration data\n");

54  -
EINVAL
;

57 
	`dev_dbg
(&
pdev
->
dev
, "calibration dataÇeeds swapping\n");

58 
sw≠_√eded
 = 
åue
;

61 
	`dev_öfo
(&
pdev
->
dev
, "fixup device configuration\n");

63 
mem
 = 
	`pcim_iom≠
(
pdev
, 0, 0);

64 i‡(!
mem
) {

65 
	`dev_îr
(&
pdev
->
dev
, "ioremapÉrror\n");

66  -
EINVAL
;

69 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
PCI_BASE_ADDRESS_0
, &
b¨0
);

70 
	`pci_wrôe_c⁄fig_dw‹d
(
pdev
, 
PCI_BASE_ADDRESS_0
,

71 
	`pci_ªsour˚_°¨t
(
pdev
, 0));

72 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, &
cmd
);

73 
cmd
 |
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
;

74 
	`pci_wrôe_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, 
cmd
);

77 
d©a
 = (c⁄° *Ë(
ˇl_d©a
 + 3);

78 (c⁄° *Ë
d©a
 <
ˇl_íd
 && d©a->
ªg
 !
	`˝u_to_be16
(~0);

79 
d©a
++) {

80 
u32
 
vÆ
;

81 
u16
 
ªg
;

83 
ªg
 = 
d©a
->reg;

84 
vÆ
 = 
d©a
->
low_vÆ
;

85 
vÆ
 |
d©a
->
high_vÆ
 << 16;

87 i‡(
sw≠_√eded
) {

88 
ªg
 = 
	`swab16
(reg);

89 
vÆ
 = 
	`swahb32
(val);

92 #ifde‡
CONFIG_LANTIQ


93 
vÆ
 = 
	`swab32
(val);

96 
	`__øw_wrôñ
(
vÆ
, 
mem
 + 
ªg
);

97 
	`udñay
(100);

100 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, &
cmd
);

101 
cmd
 &~(
PCI_COMMAND_MASTER
 | 
PCI_COMMAND_MEMORY
);

102 
	`pci_wrôe_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, 
cmd
);

104 
	`pci_wrôe_c⁄fig_dw‹d
(
pdev
, 
PCI_BASE_ADDRESS_0
, 
b¨0
);

105 
	`pcim_iounm≠
(
pdev
, 
mem
);

107 
	`pci_dißbÀ_devi˚
(
pdev
);

110 
	}
}

112 
	$owl_fw_cb
(c⁄° 
fúmw¨e
 *
fw
, *
c⁄ãxt
)

114 
pci_dev
 *
pdev
 = (pci_dev *Ë
c⁄ãxt
;

115 
owl_˘x
 *
˘x
 = (owl_˘x *Ë
	`pci_gë_drvd©a
(
pdev
);

116 
©h9k_∂©f‹m_d©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

117 
pci_bus
 *
bus
;

119 
	`com∂ëe
(&
˘x
->
ì¥om_lﬂd
);

121 i‡(!
fw
) {

122 
	`dev_îr
(&
pdev
->
dev
, "noÉeprom dataÑeceived.\n");

123 
ªÀa£
;

127 i‡(
fw
->
size
 > (
pd©a
->
ì¥om_d©a
) || fw->size < 0x200 ||

128 (
fw
->
size
 & 1) == 1) {

129 
	`dev_îr
(&
pdev
->
dev
, "eeprom file hasán invalid size.\n");

130 
ªÀa£
;

133 i‡(
pd©a
) {

134 
	`mem˝y
(
pd©a
->
ì¥om_d©a
, 
fw
->
d©a
, fw->
size
);

140 
pd©a
->
ì¥om_«me
 = 
NULL
;

143 i‡(
	`©h9k_pci_fixup
(
pdev
, (c⁄° 
u16
 *Ë
fw
->
d©a
, fw->
size
))

144 
ªÀa£
;

146 
	`pci_lock_ªsˇn_ªmove
();

147 
bus
 = 
pdev
->bus;

148 
	`pci_°›_™d_ªmove_bus_devi˚
(
pdev
);

153 
	`pci_ªsˇn_bus
(
bus
);

154 
	`pci_u∆ock_ªsˇn_ªmove
();

156 
ªÀa£
:

157 
	`ªÀa£_fúmw¨e
(
fw
);

158 
	}
}

160 c⁄° *
	$owl_gë_ì¥om_«me
(
pci_dev
 *
pdev
)

162 
devi˚
 *
dev
 = &
pdev
->dev;

163 
©h9k_∂©f‹m_d©a
 *
pd©a
;

164 *
ì¥om_«me
;

167 
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

168 i‡(
pd©a
 &&Öd©a->
ì¥om_«me
)

169  
pd©a
->
ì¥om_«me
;

171 
	`dev_dbg
(
dev
, "usingáuto-generatedÉeprom filename\n");

173 
ì¥om_«me
 = 
	`devm_kzÆloc
(
dev
, 
EEPROM_FILENAME_LEN
, 
GFP_KERNEL
);

174 i‡(!
ì¥om_«me
)

175  
NULL
;

178 
	`s˙¥ötf
(
ì¥om_«me
, 
EEPROM_FILENAME_LEN
, "ath9k-eeprom-pci-%s.bin",

179 
	`dev_«me
(
dev
));

181  
ì¥om_«me
;

182 
	}
}

184 
	$owl_¥obe
(
pci_dev
 *
pdev
,

185 c⁄° 
pci_devi˚_id
 *
id
)

187 
owl_˘x
 *
˘x
;

188 c⁄° *
ì¥om_«me
;

189 
îr
 = 0;

191 i‡(
	`pcim_íabÀ_devi˚
(
pdev
))

192  -
EIO
;

194 
	`pcim_pö_devi˚
(
pdev
);

196 
ì¥om_«me
 = 
	`owl_gë_ì¥om_«me
(
pdev
);

197 i‡(!
ì¥om_«me
) {

198 
	`dev_îr
(&
pdev
->
dev
, "noÉeprom filename found.\n");

199  -
ENODEV
;

202 
˘x
 = 
	`kzÆloc
((*˘x), 
GFP_KERNEL
);

203 i‡(!
˘x
) {

204 
	`dev_îr
(&
pdev
->
dev
, "failedÅoálloc device context.\n");

205  -
ENOMEM
;

207 
	`öô_com∂ëi⁄
(&
˘x
->
ì¥om_lﬂd
);

209 
	`pci_£t_drvd©a
(
pdev
, 
˘x
);

210 
îr
 = 
	`ªque°_fúmw¨e_nowaô
(
THIS_MODULE
, 
åue
, 
ì¥om_«me
,

211 &
pdev
->
dev
, 
GFP_KERNEL
,Ödev, 
owl_fw_cb
);

212 i‡(
îr
) {

213 
	`dev_îr
(&
pdev
->
dev
, "ÁûedÅÿªque° cÆd©®(%d).\n", 
îr
);

214 
	`k‰ì
(
˘x
);

216  
îr
;

217 
	}
}

219 
	$owl_ªmove
(
pci_dev
 *
pdev
)

221 
owl_˘x
 *
˘x
 = 
	`pci_gë_drvd©a
(
pdev
);

223 i‡(
˘x
) {

224 
	`waô_f‹_com∂ëi⁄
(&
˘x
->
ì¥om_lﬂd
);

225 
	`pci_£t_drvd©a
(
pdev
, 
NULL
);

226 
	`k‰ì
(
˘x
);

228 
	}
}

230 c⁄° 
pci_devi˚_id
 
	gowl_pci_èbÀ
[] = {

231 { 
PCI_VDEVICE
(
ATHEROS
, 0xff1c) },

232 { 
PCI_VDEVICE
(
ATHEROS
, 0xff1d) },

235 
MODULE_DEVICE_TABLE
(
pci
, 
owl_pci_èbÀ
);

237 
pci_drivî
 
	gowl_drivî
 = {

238 .
«me
 = "owl-loader",

239 .
	gid_èbÀ
 = 
owl_pci_èbÀ
,

240 .
	g¥obe
 = 
owl_¥obe
,

241 .
	gªmove
 = 
owl_ªmove
,

243 
moduÀ_pci_drivî
(
owl_drivî
);

244 
MODULE_AUTHOR
("Christian Lamparter <chunkeey@googlemail.com>");

245 
MODULE_DESCRIPTION
("Initializes Atheros' Owl Emulation devices");

246 
MODULE_LICENSE
("GPL v2");

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit.c

13 
	#¥_fmt
(
fmt
Ë"mtd•lô: " 
	)
fmt

15 
	~<löux/exp‹t.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/magic.h
>

19 
	~<löux/mtd/mtd.h
>

20 
	~<löux/mtd/∑πôi⁄s.h
>

21 
	~<löux/byã‹dî/gíîic.h
>

23 
	~"mtd•lô.h
"

25 
	#UBI_EC_MAGIC
 0x55424923

	)

27 
	ssquashfs_su≥r_block
 {

28 
__À32
 
	ms_magic
;

29 
__À32
 
	m∑d0
[9];

30 
__À64
 
	mbyãs_u£d
;

33 
	$mtd_gë_squashfs_Àn
(
mtd_öfo
 *
ma°î
,

34 
size_t
 
off£t
,

35 
size_t
 *
squashfs_Àn
)

37 
squashfs_su≥r_block
 
sb
;

38 
size_t
 
ªéí
;

39 
îr
;

41 
îr
 = 
	`mtd_ªad
(
ma°î
, 
off£t
, (
sb
), &
ªéí
, (*)&sb);

42 i‡(
îr
 || (
ªéí
 !(
sb
))) {

43 
	`¥_Æît
("error occured whileÑeading from \"%s\"\n",

44 
ma°î
->
«me
);

45  -
EIO
;

48 i‡(
	`À32_to_˝u
(
sb
.
s_magic
Ë!
SQUASHFS_MAGIC
) {

49 
	`¥_Æît
("nÿsquashf†found i¿\"%s\"\n", 
ma°î
->
«me
);

50  -
EINVAL
;

53 
ªéí
 = 
	`À64_to_˝u
(
sb
.
byãs_u£d
);

54 i‡(
ªéí
 <= 0) {

55 
	`¥_Æît
("squashf†i†em±y i¿\"%s\"\n", 
ma°î
->
«me
);

56  -
ENODEV
;

59 i‡(
off£t
 + 
ªéí
 > 
ma°î
->
size
) {

60 
	`¥_Æît
("squashfs has invalid size in \"%s\"\n",

61 
ma°î
->
«me
);

62  -
EINVAL
;

65 *
squashfs_Àn
 = 
ªéí
;

67 
	}
}

68 
EXPORT_SYMBOL_GPL
(
mtd_gë_squashfs_Àn
);

70 
ssize_t
 
	$mtd_√xt_eb
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
)

72  
	`mtd_rounddown_to_eb
(
off£t
, 
mtd
Ë+ mtd->
îa£size
;

73 
	}
}

75 
	$mtd_check_roŸfs_magic
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
,

76 
mtd•lô_∑π_ty≥
 *
ty≥
)

78 
u32
 
magic
;

79 
size_t
 
ªéí
;

80 
ªt
;

82 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, (
magic
), &
ªéí
,

83 (*Ë&
magic
);

84 i‡(
ªt
)

85  
ªt
;

87 i‡(
ªéí
 !(
magic
))

88  -
EIO
;

90 i‡(
	`À32_to_˝u
(
magic
Ë=
SQUASHFS_MAGIC
) {

91 i‡(
ty≥
)

92 *
ty≥
 = 
MTDSPLIT_PART_TYPE_SQUASHFS
;

94 } i‡(
magic
 == 0x19852003) {

95 i‡(
ty≥
)

96 *
ty≥
 = 
MTDSPLIT_PART_TYPE_JFFS2
;

98 } i‡(
	`be32_to_˝u
(
magic
Ë=
UBI_EC_MAGIC
) {

99 i‡(
ty≥
)

100 *
ty≥
 = 
MTDSPLIT_PART_TYPE_UBI
;

104  -
EINVAL
;

105 
	}
}

106 
EXPORT_SYMBOL_GPL
(
mtd_check_roŸfs_magic
);

108 
	$mtd_föd_roŸfs_‰om
(
mtd_öfo
 *
mtd
,

109 
size_t
 
‰om
,

110 
size_t
 
limô
,

111 
size_t
 *
ªt_off£t
,

112 
mtd•lô_∑π_ty≥
 *
ty≥
)

114 
size_t
 
off£t
;

115 
îr
;

117 
off£t
 = 
‰om
; off£à< 
limô
;

118 
off£t
 = 
	`mtd_√xt_eb
(
mtd
, offset)) {

119 
îr
 = 
	`mtd_check_roŸfs_magic
(
mtd
, 
off£t
, 
ty≥
);

120 i‡(
îr
)

123 *
ªt_off£t
 = 
off£t
;

127  -
ENODEV
;

128 
	}
}

129 
EXPORT_SYMBOL_GPL
(
mtd_föd_roŸfs_‰om
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit.h

13 #i‚de‡
_MTDSPLIT_H


14 
	#_MTDSPLIT_H


	)

16 
	#KERNEL_PART_NAME
 "kî√l"

	)

17 
	#ROOTFS_PART_NAME
 "roŸfs"

	)

18 
	#UBI_PART_NAME
 "ubi"

	)

20 
	#ROOTFS_SPLIT_NAME
 "roŸfs_d©a"

	)

22 
	emtd•lô_∑π_ty≥
 {

23 
	mMTDSPLIT_PART_TYPE_UNK
 = 0,

24 
	mMTDSPLIT_PART_TYPE_SQUASHFS
,

25 
	mMTDSPLIT_PART_TYPE_JFFS2
,

26 
	mMTDSPLIT_PART_TYPE_UBI
,

29 #ifde‡
CONFIG_MTD_SPLIT


30 
mtd_gë_squashfs_Àn
(
mtd_öfo
 *
ma°î
,

31 
size_t
 
off£t
,

32 
size_t
 *
squashfs_Àn
);

34 
mtd_check_roŸfs_magic
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
,

35 
mtd•lô_∑π_ty≥
 *
ty≥
);

37 
mtd_föd_roŸfs_‰om
(
mtd_öfo
 *
mtd
,

38 
size_t
 
‰om
,

39 
size_t
 
limô
,

40 
size_t
 *
ªt_off£t
,

41 
mtd•lô_∑π_ty≥
 *
ty≥
);

44 
ölöe
 
	$mtd_gë_squashfs_Àn
(
mtd_öfo
 *
ma°î
,

45 
size_t
 
off£t
,

46 
size_t
 *
squashfs_Àn
)

48  -
ENODEV
;

49 
	}
}

51 
ölöe
 
	$mtd_check_roŸfs_magic
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
,

52 
mtd•lô_∑π_ty≥
 *
ty≥
)

54  -
EINVAL
;

55 
	}
}

57 
ölöe
 
	$mtd_föd_roŸfs_‰om
(
mtd_öfo
 *
mtd
,

58 
size_t
 
‰om
,

59 
size_t
 
limô
,

60 
size_t
 *
ªt_off£t
,

61 
mtd•lô_∑π_ty≥
 *
ty≥
)

63  -
ENODEV
;

64 
	}
}

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_brnimage.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/mtd/mtd.h
>

16 
	~<löux/mtd/∑πôi⁄s.h
>

17 
	~<löux/byã‹dî/gíîic.h
>

19 
	~"mtd•lô.h
"

21 
	#BRNIMAGE_NR_PARTS
 2

	)

23 
	#BRNIMAGE_ALIGN_BYTES
 0x400

	)

24 
	#BRNIMAGE_FOOTER_SIZE
 12

	)

26 
	#BRNIMAGE_MIN_OVERHEAD
 (
BRNIMAGE_FOOTER_SIZE
)

	)

27 
	#BRNIMAGE_MAX_OVERHEAD
 (
BRNIMAGE_ALIGN_BYTES
 + 
BRNIMAGE_FOOTER_SIZE
)

	)

29 
	$mtd•lô_∑r£_b∫image
(
mtd_öfo
 *
ma°î
,

30 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

31 
mtd_∑π_∑r£r_d©a
 *
d©a
)

33 
mtd_∑πôi⁄
 *
∑πs
;

34 
uöt32_t
 
buf
;

35 
roŸfs_off£t
, 
roŸfs_size
, 
kî√l_size
;

36 
size_t
 
Àn
;

37 
ªt
 = 0;

39 
roŸfs_off£t
 = 0;ÑoŸfs_off£à< 
ma°î
->
size
;

40 
roŸfs_off£t
 +
BRNIMAGE_ALIGN_BYTES
) {

41 
ªt
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 
roŸfs_off£t
, 
NULL
);

42 i‡(!
ªt
)

46 i‡(
ªt
)

47  
ªt
;

49 i‡(
roŸfs_off£t
 >
ma°î
->
size
)

50  -
EINVAL
;

52 
ªt
 = 
	`mtd_ªad
(
ma°î
, 
roŸfs_off£t
 - 
BRNIMAGE_FOOTER_SIZE
, 4, &
Àn
,

53 (*)&
buf
);

54 i‡(
ªt
)

55  
ªt
;

57 i‡(
Àn
 != 4)

58  -
EIO
;

60 
kî√l_size
 = 
	`À32_to_˝u
(
buf
);

62 i‡(
kî√l_size
 > (
roŸfs_off£t
 - 
BRNIMAGE_MIN_OVERHEAD
))

63  -
EINVAL
;

65 i‡(
kî√l_size
 < (
roŸfs_off£t
 - 
BRNIMAGE_MAX_OVERHEAD
))

66  -
EINVAL
;

72 
roŸfs_size
 = 
ma°î
->
size
 - 
roŸfs_off£t
 - 
BRNIMAGE_FOOTER_SIZE
;

74 
∑πs
 = 
	`kzÆloc
(
BRNIMAGE_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

75 i‡(!
∑πs
)

76  -
ENOMEM
;

78 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

79 
∑πs
[0].
off£t
 = 0;

80 
∑πs
[0].
size
 = 
kî√l_size
;

82 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

83 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

84 
∑πs
[1].
size
 = 
roŸfs_size
;

86 *
µ¨ts
 = 
∑πs
;

87  
BRNIMAGE_NR_PARTS
;

88 
	}
}

90 
mtd_∑π_∑r£r
 
	gmtd•lô_b∫image_∑r£r
 = {

91 .
ow√r
 = 
THIS_MODULE
,

92 .
	g«me
 = "brnimage-fw",

93 .
	g∑r£_‚
 = 
mtd•lô_∑r£_b∫image
,

94 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

97 
__öô
 
	$mtd•lô_b∫image_öô
()

99 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_b∫image_∑r£r
);

102 
	}
}

104 
subsys_öôˇŒ
(
mtd•lô_b∫image_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_eva.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/mtd/mtd.h
>

16 
	~<löux/mtd/∑πôi⁄s.h
>

17 
	~<löux/byã‹dî/gíîic.h
>

19 
	~"mtd•lô.h
"

21 
	#EVA_NR_PARTS
 2

	)

22 
	#EVA_MAGIC
 0x„ed1281

	)

23 
	#EVA_FOOTER_SIZE
 0x18

	)

24 
	#EVA_DUMMY_SQUASHFS_SIZE
 0x100

	)

26 
	seva_image_hódî
 {

27 
uöt32_t
 
	mmagic
;

28 
uöt32_t
 
	msize
;

31 
	$mtd•lô_∑r£_eva
(
mtd_öfo
 *
ma°î
,

32 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

33 
mtd_∑π_∑r£r_d©a
 *
d©a
)

35 
mtd_∑πôi⁄
 *
∑πs
;

36 
eva_image_hódî
 
hdr
;

37 
size_t
 
ªéí
;

38 
kî√l_size
, 
roŸfs_off£t
;

39 
îr
;

41 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, (
hdr
), &
ªéí
, (*) &hdr);

42 i‡(
îr
)

43  
îr
;

45 i‡(
ªéí
 !(
hdr
))

46  -
EIO
;

48 i‡(
	`À32_to_˝u
(
hdr
.
magic
Ë!
EVA_MAGIC
)

49  -
EINVAL
;

51 
kî√l_size
 = 
	`À32_to_˝u
(
hdr
.
size
Ë+ 
EVA_FOOTER_SIZE
;

54 
roŸfs_off£t
 = 
	`round_up
(
kî√l_size
, 0x10000);

57 
roŸfs_off£t
 +
EVA_DUMMY_SQUASHFS_SIZE
;

59 i‡(
roŸfs_off£t
 >
ma°î
->
size
)

60  -
EINVAL
;

62 
îr
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 
roŸfs_off£t
, 
NULL
);

63 i‡(
îr
)

64  
îr
;

66 
∑πs
 = 
	`kzÆloc
(
EVA_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

67 i‡(!
∑πs
)

68  -
ENOMEM
;

70 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

71 
∑πs
[0].
off£t
 = 0;

72 
∑πs
[0].
size
 = 
kî√l_size
;

74 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

75 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

76 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

78 *
µ¨ts
 = 
∑πs
;

79  
EVA_NR_PARTS
;

80 
	}
}

82 c⁄° 
of_devi˚_id
 
	gmtd•lô_eva_of_m©ch_èbÀ
[] = {

83 { .
com∑tibÀ
 = "avm,eva-firmware" },

87 
mtd_∑π_∑r£r
 
	gmtd•lô_eva_∑r£r
 = {

88 .
ow√r
 = 
THIS_MODULE
,

89 .
	g«me
 = "eva-fw",

90 .
	gof_m©ch_èbÀ
 = 
mtd•lô_eva_of_m©ch_èbÀ
,

91 .
	g∑r£_‚
 = 
mtd•lô_∑r£_eva
,

92 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

95 
__öô
 
	$mtd•lô_eva_öô
()

97 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_eva_∑r£r
);

100 
	}
}

102 
subsys_öôˇŒ
(
mtd•lô_eva_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_fit.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/mtd/mtd.h
>

20 
	~<löux/mtd/∑πôi⁄s.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/byã‹dî/gíîic.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/of_fdt.h
>

26 
	~"mtd•lô.h
"

28 
	sfdt_hódî
 {

29 
uöt32_t
 
	mmagic
;

30 
uöt32_t
 
	mtŸÆsize
;

31 
uöt32_t
 
	moff_dt_°ru˘
;

32 
uöt32_t
 
	moff_dt_°rögs
;

33 
uöt32_t
 
	moff_mem_rsvm≠
;

34 
uöt32_t
 
	mvîsi⁄
;

35 
uöt32_t
 
	mœ°_comp_vîsi⁄
;

38 
uöt32_t
 
	mboŸ_˝uid_phys
;

41 
uöt32_t
 
	msize_dt_°rögs
;

44 
uöt32_t
 
	msize_dt_°ru˘
;

48 
	$mtd•lô_fô_∑r£
(
mtd_öfo
 *
mtd
,

49 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

50 
mtd_∑π_∑r£r_d©a
 *
d©a
)

52 
fdt_hódî
 
hdr
;

53 
size_t
 
hdr_Àn
, 
ªéí
;

54 
size_t
 
off£t
;

55 
size_t
 
fô_off£t
, 
fô_size
;

56 
size_t
 
roŸfs_off£t
, 
roŸfs_size
;

57 
mtd_∑πôi⁄
 *
∑πs
;

58 
ªt
;

60 
hdr_Àn
 = (
fdt_hódî
);

63 
off£t
 = 0; off£à< 
mtd
->
size
; off£à+mtd->
îa£size
) {

64 
ªt
 = 
	`mtd_ªad
(
mtd
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

65 i‡(
ªt
) {

66 
	`¥_îr
("readÉrror in \"%s\"át offset 0x%llx\n",

67 
mtd
->
«me
, (Ë
off£t
);

68  
ªt
;

71 i‡(
ªéí
 !
hdr_Àn
) {

72 
	`¥_îr
("sh‹àªad i¿\"%s\"\n", 
mtd
->
«me
);

73  -
EIO
;

77 i‡(
	`be32_to_˝u
(
hdr
.
magic
Ë!
OF_DT_HEADER
) {

78 
	`¥_debug
("no valid FIT image found in \"%s\"át offset %llx\n",

79 
mtd
->
«me
, (Ë
off£t
);

87 
fô_off£t
 = 
off£t
;

88 
fô_size
 = 
	`be32_to_˝u
(
hdr
.
tŸÆsize
);

90 i‡(
fô_size
 == 0) {

91 
	`¥_îr
("FIT image in \"%s\"át offset %llx hasÇull size\n",

92 
mtd
->
«me
, (Ë
fô_off£t
);

93  -
ENODEV
;

97 
ªt
 = 
	`mtd_föd_roŸfs_‰om
(
mtd
, 
fô_off£t
 + 
fô_size
, mtd->
size
,

98 &
roŸfs_off£t
, 
NULL
);

99 i‡(
ªt
) {

100 
	`¥_öfo
("noÑootfs foundáfter FIT image in \"%s\"\n",

101 
mtd
->
«me
);

102  
ªt
;

105 
roŸfs_size
 = 
mtd
->
size
 - 
roŸfs_off£t
;

107 
∑πs
 = 
	`kzÆloc
(2 * (*∑πs), 
GFP_KERNEL
);

108 i‡(!
∑πs
)

109  -
ENOMEM
;

111 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

112 
∑πs
[0].
off£t
 = 
fô_off£t
;

113 
∑πs
[0].
size
 = 
	`mtd_rounddown_to_eb
(
fô_size
, 
mtd
Ë+ mtd->
îa£size
;

115 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

116 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

117 
∑πs
[1].
size
 = 
roŸfs_size
;

119 *
µ¨ts
 = 
∑πs
;

121 
	}
}

123 c⁄° 
of_devi˚_id
 
	gmtd•lô_fô_of_m©ch_èbÀ
[] = {

124 { .
com∑tibÀ
 = "denx,fit" },

128 
mtd_∑π_∑r£r
 
	guimage_∑r£r
 = {

129 .
ow√r
 = 
THIS_MODULE
,

130 .
	g«me
 = "fit-fw",

131 .
	gof_m©ch_èbÀ
 = 
mtd•lô_fô_of_m©ch_èbÀ
,

132 .
	g∑r£_‚
 = 
mtd•lô_fô_∑r£
,

133 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

140 
__öô
 
	$mtd•lô_fô_öô
()

142 
	`ªgi°î_mtd_∑r£r
(&
uimage_∑r£r
);

145 
	}
}

147 
moduÀ_öô
(
mtd•lô_fô_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_jimage.c

13 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/vmÆloc.h
>

20 
	~<löux/mtd/mtd.h
>

21 
	~<löux/mtd/∑πôi⁄s.h
>

22 
	~<löux/byã‹dî/gíîic.h
>

24 
	~"mtd•lô.h
"

26 
	#MAX_HEADER_LEN
 ( 
STAG_SIZE
 + 
SCH2_SIZE
 )

	)

28 
	#STAG_SIZE
 16

	)

29 
	#STAG_ID
 0x04

	)

30 
	#STAG_MAGIC
 0x2B24

	)

32 
	#SCH2_SIZE
 40

	)

33 
	#SCH2_MAGIC
 0x2124

	)

34 
	#SCH2_VER
 0x02

	)

41 
	sjimage_hódî


43 
uöt8_t
 
	m°ag_cm¨k
;

44 
uöt8_t
 
	m°ag_id
;

45 
uöt16_t
 
	m°ag_magic
;

46 
uöt32_t
 
	m°ag_time_°amp
;

47 
uöt32_t
 
	m°ag_image_Àngth
;

48 
uöt16_t
 
	m°ag_image_checksum
;

49 
uöt16_t
 
	m°ag_èg_checksum
;

50 
uöt16_t
 
	msch2_magic
;

51 
uöt8_t
 
	msch2_˝_ty≥
;

52 
uöt8_t
 
	msch2_vîsi⁄
;

53 
uöt32_t
 
	msch2_øm_addr
;

54 
uöt32_t
 
	msch2_image_Àn
;

55 
uöt32_t
 
	msch2_image_¸c32
;

56 
uöt32_t
 
	msch2_°¨t_addr
;

57 
uöt32_t
 
	msch2_roŸfs_addr
;

58 
uöt32_t
 
	msch2_roŸfs_Àn
;

59 
uöt32_t
 
	msch2_roŸfs_¸c32
;

60 
uöt32_t
 
	msch2_hódî_¸c32
;

61 
uöt16_t
 
	msch2_hódî_Àngth
;

62 
uöt16_t
 
	msch2_cmd_löe_Àngth
;

66 
	$ªad_jimage_hódî
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
, 
u_ch¨
 *
buf
,

67 
size_t
 
hódî_Àn
)

69 
size_t
 
ªéí
;

70 
ªt
;

72 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, 
hódî_Àn
, &
ªéí
, 
buf
);

73 i‡(
ªt
) {

74 
	`¥_debug
("ªadÉº‹ i¿\"%s\"\n", 
mtd
->
«me
);

75  
ªt
;

78 i‡(
ªéí
 !
hódî_Àn
) {

79 
	`¥_debug
("sh‹àªad i¿\"%s\"\n", 
mtd
->
«me
);

80  -
EIO
;

84 
	}
}

92 
	$__mtd•lô_∑r£_jimage
(
mtd_öfo
 *
ma°î
,

93 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

94 
mtd_∑π_∑r£r_d©a
 *
d©a
,

95 
	$ssize_t
 (*
föd_hódî
)(
u_ch¨
 *
buf
, 
size_t
 
Àn
))

97 
mtd_∑πôi⁄
 *
∑πs
;

98 
u_ch¨
 *
buf
;

99 
ƒ_∑πs
;

100 
size_t
 
off£t
;

101 
size_t
 
jimage_off£t
;

102 
size_t
 
jimage_size
 = 0;

103 
size_t
 
roŸfs_off£t
;

104 
size_t
 
roŸfs_size
 = 0;

105 
jimage_∑π
, 
rf_∑π
;

106 
ªt
;

107 
mtd•lô_∑π_ty≥
 
ty≥
;

109 
ƒ_∑πs
 = 2;

110 
∑πs
 = 
	`kzÆloc
(
ƒ_∑πs
 * (*∑πs), 
GFP_KERNEL
);

111 i‡(!
∑πs
)

112  -
ENOMEM
;

114 
buf
 = 
	`vmÆloc
(
MAX_HEADER_LEN
);

115 i‡(!
buf
) {

116 
ªt
 = -
ENOMEM
;

117 
îr_‰ì_∑πs
;

121 
off£t
 = 0; off£à< 
ma°î
->
size
; off£à+ma°î->
îa£size
) {

122 
jimage_hódî
 *
hódî
;

124 
jimage_size
 = 0;

126 
ªt
 = 
	`ªad_jimage_hódî
(
ma°î
, 
off£t
, 
buf
, 
MAX_HEADER_LEN
);

127 i‡(
ªt
)

130 
ªt
 = 
	`föd_hódî
(
buf
, 
MAX_HEADER_LEN
);

131 i‡(
ªt
 < 0) {

132 
	`¥_debug
("no valid jImage found in \"%s\"át offset %llx\n",

133 
ma°î
->
«me
, (Ë
off£t
);

136 
hódî
 = (
jimage_hódî
 *)(
buf
 + 
ªt
);

138 
jimage_size
 = (*
hódî
Ë+ hódî->
sch2_image_Àn
 + 
ªt
;

139 i‡((
off£t
 + 
jimage_size
Ë> 
ma°î
->
size
) {

140 
	`¥_debug
("jImageÉxceeds MTD device \"%s\"\n",

141 
ma°î
->
«me
);

147 i‡(
jimage_size
 == 0) {

148 
	`¥_debug
("nÿjImagêfound i¿\"%s\"\n", 
ma°î
->
«me
);

149 
ªt
 = -
ENODEV
;

150 
îr_‰ì_buf
;

153 
jimage_off£t
 = 
off£t
;

155 i‡(
jimage_off£t
 == 0) {

156 
jimage_∑π
 = 0;

157 
rf_∑π
 = 1;

160 
ªt
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, 
jimage_off£t
 + 
jimage_size
,

161 
ma°î
->
size
, &
roŸfs_off£t
, &
ty≥
);

162 i‡(
ªt
) {

163 
	`¥_debug
("noÑootfsáfter jImage in \"%s\"\n",

164 
ma°î
->
«me
);

165 
îr_‰ì_buf
;

168 
roŸfs_size
 = 
ma°î
->
size
 - 
roŸfs_off£t
;

169 
jimage_size
 = 
roŸfs_off£t
 - 
jimage_off£t
;

171 
rf_∑π
 = 0;

172 
jimage_∑π
 = 1;

175 
ªt
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 0, &
ty≥
);

176 i‡(
ªt
) {

177 
	`¥_debug
("noÑootfs before jImage in \"%s\"\n",

178 
ma°î
->
«me
);

179 
îr_‰ì_buf
;

182 
roŸfs_off£t
 = 0;

183 
roŸfs_size
 = 
jimage_off£t
;

186 i‡(
roŸfs_size
 == 0) {

187 
	`¥_debug
("nÿroŸf†found i¿\"%s\"\n", 
ma°î
->
«me
);

188 
ªt
 = -
ENODEV
;

189 
îr_‰ì_buf
;

192 
∑πs
[
jimage_∑π
].
«me
 = 
KERNEL_PART_NAME
;

193 
∑πs
[
jimage_∑π
].
off£t
 = 
jimage_off£t
;

194 
∑πs
[
jimage_∑π
].
size
 = 
jimage_size
;

196 i‡(
ty≥
 =
MTDSPLIT_PART_TYPE_UBI
)

197 
∑πs
[
rf_∑π
].
«me
 = 
UBI_PART_NAME
;

199 
∑πs
[
rf_∑π
].
«me
 = 
ROOTFS_PART_NAME
;

200 
∑πs
[
rf_∑π
].
off£t
 = 
roŸfs_off£t
;

201 
∑πs
[
rf_∑π
].
size
 = 
roŸfs_size
;

203 
	`v‰ì
(
buf
);

205 *
µ¨ts
 = 
∑πs
;

206  
ƒ_∑πs
;

208 
îr_‰ì_buf
:

209 
	`v‰ì
(
buf
);

211 
îr_‰ì_∑πs
:

212 
	`k‰ì
(
∑πs
);

213  
ªt
;

214 
	}
}

216 
ssize_t
 
	$jimage_vîify_deÁu…
(
u_ch¨
 *
buf
, 
size_t
 
Àn
)

218 
jimage_hódî
 *
hódî
 = (jimage_hódî *)
buf
;

221 i‡(
hódî
->
°ag_magic
 !
STAG_MAGIC
) {

222 
	`¥_debug
("invalid jImage stag header magic: %04x\n",

223 
hódî
->
°ag_magic
);

224  -
EINVAL
;

226 i‡(
hódî
->
sch2_magic
 !
SCH2_MAGIC
) {

227 
	`¥_debug
("invalid jImage sch2 header magic: %04x\n",

228 
hódî
->
°ag_magic
);

229  -
EINVAL
;

231 i‡(
hódî
->
°ag_cm¨k
 !hódî->
°ag_id
) {

232 
	`¥_debug
("invalid jImage stag header cmark: %02x\n",

233 
hódî
->
°ag_magic
);

234  -
EINVAL
;

236 i‡(
hódî
->
°ag_id
 !
STAG_ID
) {

237 
	`¥_debug
("invalid jImage stag header id: %02x\n",

238 
hódî
->
°ag_magic
);

239  -
EINVAL
;

241 i‡(
hódî
->
sch2_vîsi⁄
 !
SCH2_VER
) {

242 
	`¥_debug
("invalid jImage sch2 header version: %02x\n",

243 
hódî
->
°ag_magic
);

244  -
EINVAL
;

248 
	}
}

251 
	$mtd•lô_jimage_∑r£_gíîic
(
mtd_öfo
 *
ma°î
,

252 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

253 
mtd_∑π_∑r£r_d©a
 *
d©a
)

255  
	`__mtd•lô_∑r£_jimage
(
ma°î
, 
µ¨ts
, 
d©a
,

256 
jimage_vîify_deÁu…
);

257 
	}
}

259 c⁄° 
of_devi˚_id
 
	gmtd•lô_jimage_of_m©ch_èbÀ
[] = {

260 { .
com∑tibÀ
 = "amit,jimage" },

264 
mtd_∑π_∑r£r
 
	gjimage_gíîic_∑r£r
 = {

265 .
ow√r
 = 
THIS_MODULE
,

266 .
	g«me
 = "jimage-fw",

267 .
	gof_m©ch_èbÀ
 = 
mtd•lô_jimage_of_m©ch_èbÀ
,

268 .
	g∑r£_‚
 = 
mtd•lô_jimage_∑r£_gíîic
,

269 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

276 
__öô
 
	$mtd•lô_jimage_öô
()

278 
	`ªgi°î_mtd_∑r£r
(&
jimage_gíîic_∑r£r
);

281 
	}
}

283 
moduÀ_öô
(
mtd•lô_jimage_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_lzma.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/mtd/mtd.h
>

15 
	~<löux/mtd/∑πôi⁄s.h
>

17 
	~<asm/u«lig√d.h
>

19 
	~"mtd•lô.h
"

21 
	#LZMA_NR_PARTS
 2

	)

22 
	#LZMA_PROPERTIES_SIZE
 5

	)

24 
	slzma_hódî
 {

25 
u8
 
	m¥›s
[
LZMA_PROPERTIES_SIZE
];

26 
u8
 
	msize_low
[4];

27 
u8
 
	msize_high
[4];

30 
	$mtd•lô_∑r£_lzma
(
mtd_öfo
 *
ma°î
,

31 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

32 
mtd_∑π_∑r£r_d©a
 *
d©a
)

34 
lzma_hódî
 
hdr
;

35 
size_t
 
hdr_Àn
, 
ªéí
;

36 
size_t
 
roŸfs_off£t
;

37 
u32
 
t
;

38 
mtd_∑πôi⁄
 *
∑πs
;

39 
îr
;

41 
hdr_Àn
 = (
hdr
);

42 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

43 i‡(
îr
)

44  
îr
;

46 i‡(
ªéí
 !
hdr_Àn
)

47  -
EIO
;

50 i‡(
hdr
.
¥›s
[0] >= (9 * 5 * 5))

51  -
EINVAL
;

53 
t
 = 
	`gë_u«lig√d_À32
(&
hdr
.
¥›s
[1]);

54 i‡(!
	`is_powî_of_2
(
t
))

55  -
EINVAL
;

57 
t
 = 
	`gë_u«lig√d_À32
(&
hdr
.
size_high
);

58 i‡(
t
)

59  -
EINVAL
;

61 
îr
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, ma°î->
îa£size
, ma°î->
size
,

62 &
roŸfs_off£t
, 
NULL
);

63 i‡(
îr
)

64  
îr
;

66 
∑πs
 = 
	`kzÆloc
(
LZMA_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

67 i‡(!
∑πs
)

68  -
ENOMEM
;

70 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

71 
∑πs
[0].
off£t
 = 0;

72 
∑πs
[0].
size
 = 
roŸfs_off£t
;

74 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

75 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

76 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

78 *
µ¨ts
 = 
∑πs
;

79  
LZMA_NR_PARTS
;

80 
	}
}

82 c⁄° 
of_devi˚_id
 
	gmtd•lô_lzma_of_m©ch_èbÀ
[] = {

83 { .
com∑tibÀ
 = "lzma" },

86 
MODULE_DEVICE_TABLE
(
of
, 
mtd•lô_lzma_of_m©ch_èbÀ
);

88 
mtd_∑π_∑r£r
 
	gmtd•lô_lzma_∑r£r
 = {

89 .
ow√r
 = 
THIS_MODULE
,

90 .
	g«me
 = "lzma-fw",

91 .
	gof_m©ch_èbÀ
 = 
mtd•lô_lzma_of_m©ch_èbÀ
,

92 .
	g∑r£_‚
 = 
mtd•lô_∑r£_lzma
,

93 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

96 
__öô
 
	$mtd•lô_lzma_öô
()

98 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_lzma_∑r£r
);

101 
	}
}

103 
subsys_öôˇŒ
(
mtd•lô_lzma_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_minor.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/kî√l.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/mtd/mtd.h
>

28 
	~<löux/mtd/∑πôi⁄s.h
>

29 
	~<löux/°rög.h
>

31 
	~"mtd•lô.h
"

33 
	#YAFFS_OBJECT_TYPE_FILE
 0x1

	)

34 
	#YAFFS_OBJECTID_ROOT
 0x1

	)

35 
	#YAFFS_SUM_UNUSED
 0xFFFF

	)

36 
	#YAFFS_NAME
 "kî√l"

	)

38 
	#MINOR_NR_PARTS
 2

	)

44 
	smö‹_hódî
 {

45 
	myaffs_ty≥
;

46 
	myaffs_obj_id
;

47 
u16
 
	myaffs_sum_unu£d
;

48 
	myaffs_«me
[(
YAFFS_NAME
)];

51 
	$mtd•lô_∑r£_mö‹
(
mtd_öfo
 *
ma°î
,

52 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

53 
mtd_∑π_∑r£r_d©a
 *
d©a
)

55 
mö‹_hódî
 
hdr
;

56 
size_t
 
hdr_Àn
, 
ªéí
;

57 
size_t
 
roŸfs_off£t
;

58 
mtd_∑πôi⁄
 *
∑πs
;

59 
îr
;

61 
hdr_Àn
 = (
hdr
);

62 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

63 i‡(
îr
)

64  
îr
;

66 i‡(
ªéí
 !
hdr_Àn
)

67  -
EIO
;

70 i‡(
hdr
.
yaffs_ty≥
 !
YAFFS_OBJECT_TYPE_FILE
)

71  -
EINVAL
;

73 i‡(
hdr
.
yaffs_obj_id
 !
YAFFS_OBJECTID_ROOT
)

74  -
EINVAL
;

76 i‡(
hdr
.
yaffs_sum_unu£d
 !
YAFFS_SUM_UNUSED
)

77  -
EINVAL
;

79 i‡(
	`memcmp
(
hdr
.
yaffs_«me
, 
YAFFS_NAME
, (YAFFS_NAME)))

80  -
EINVAL
;

82 
îr
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, ma°î->
îa£size
, ma°î->
size
,

83 &
roŸfs_off£t
, 
NULL
);

84 i‡(
îr
)

85  
îr
;

87 
∑πs
 = 
	`kzÆloc
(
MINOR_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

88 i‡(!
∑πs
)

89  -
ENOMEM
;

91 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

92 
∑πs
[0].
off£t
 = 0;

93 
∑πs
[0].
size
 = 
roŸfs_off£t
;

95 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

96 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

97 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

99 *
µ¨ts
 = 
∑πs
;

100  
MINOR_NR_PARTS
;

101 
	}
}

103 c⁄° 
of_devi˚_id
 
	gmtd•lô_mö‹_of_m©ch_èbÀ
[] = {

104 { .
com∑tibÀ
 = "mikrotik,minor" },

107 
MODULE_DEVICE_TABLE
(
of
, 
mtd•lô_mö‹_of_m©ch_èbÀ
);

109 
mtd_∑π_∑r£r
 
	gmtd•lô_mö‹_∑r£r
 = {

110 .
ow√r
 = 
THIS_MODULE
,

111 .
	g«me
 = "minor-fw",

112 .
	gof_m©ch_èbÀ
 = 
mtd•lô_mö‹_of_m©ch_èbÀ
,

113 .
	g∑r£_‚
 = 
mtd•lô_∑r£_mö‹
,

114 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

117 
__öô
 
	$mtd•lô_mö‹_öô
()

119 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_mö‹_∑r£r
);

122 
	}
}

124 
subsys_öôˇŒ
(
mtd•lô_mö‹_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_seama.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/mtd/mtd.h
>

15 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<löux/byã‹dî/gíîic.h
>

18 
	~"mtd•lô.h
"

20 
	#SEAMA_MAGIC
 0x5EA3A417

	)

21 
	#SEAMA_NR_PARTS
 2

	)

22 
	#SEAMA_MIN_ROOTFS_OFFS
 0x80000

	)

24 
	s£ama_hódî
 {

25 
__be32
 
	mmagic
;

26 
__be16
 
	mª£rved
;

27 
__be16
 
	mmëasize
;

28 
__be32
 
	msize
;

29 
u8
 
	mmd5
[16];

32 
	$mtd•lô_∑r£_£ama
(
mtd_öfo
 *
ma°î
,

33 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

34 
mtd_∑π_∑r£r_d©a
 *
d©a
)

36 
£ama_hódî
 
hdr
;

37 
size_t
 
hdr_Àn
, 
ªéí
, 
kî√l_ít_size
;

38 
size_t
 
roŸfs_off£t
;

39 
mtd_∑πôi⁄
 *
∑πs
;

40 
mtd•lô_∑π_ty≥
 
ty≥
;

41 
îr
;

43 
hdr_Àn
 = (
hdr
);

44 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

45 i‡(
îr
)

46  
îr
;

48 i‡(
ªéí
 !
hdr_Àn
)

49  -
EIO
;

52 i‡(
	`be32_to_˝u
(
hdr
.
magic
Ë!
SEAMA_MAGIC
)

53  -
EINVAL
;

55 
kî√l_ít_size
 = 
hdr_Àn
 + 
	`be32_to_˝u
(
hdr
.
size
) +

56 
	`be16_to_˝u
(
hdr
.
mëasize
);

57 i‡(
kî√l_ít_size
 > 
ma°î
->
size
)

58  -
EINVAL
;

61 
îr
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 
kî√l_ít_size
, &
ty≥
);

62 i‡(!
îr
) {

63 
roŸfs_off£t
 = 
kî√l_ít_size
;

71 
îr
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, 
SEAMA_MIN_ROOTFS_OFFS
,

72 
ma°î
->
size
, &
roŸfs_off£t
, &
ty≥
);

73 i‡(
îr
)

74  
îr
;

77 
∑πs
 = 
	`kzÆloc
(
SEAMA_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

78 i‡(!
∑πs
)

79  -
ENOMEM
;

81 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

82 
∑πs
[0].
off£t
 =  
hdr
 + 
	`be16_to_˝u
(hdr.
mëasize
);

83 
∑πs
[0].
size
 = 
roŸfs_off£t
 -Ö¨ts[0].
off£t
;

85 i‡(
ty≥
 =
MTDSPLIT_PART_TYPE_UBI
)

86 
∑πs
[1].
«me
 = 
UBI_PART_NAME
;

88 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

89 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

90 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

92 *
µ¨ts
 = 
∑πs
;

93  
SEAMA_NR_PARTS
;

94 
	}
}

96 c⁄° 
of_devi˚_id
 
	gmtd•lô_£ama_of_m©ch_èbÀ
[] = {

97 { .
com∑tibÀ
 = "seama" },

100 
MODULE_DEVICE_TABLE
(
of
, 
mtd•lô_£ama_of_m©ch_èbÀ
);

102 
mtd_∑π_∑r£r
 
	gmtd•lô_£ama_∑r£r
 = {

103 .
ow√r
 = 
THIS_MODULE
,

104 .
	g«me
 = "seama-fw",

105 .
	gof_m©ch_èbÀ
 = 
mtd•lô_£ama_of_m©ch_èbÀ
,

106 .
	g∑r£_‚
 = 
mtd•lô_∑r£_£ama
,

107 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

110 
__öô
 
	$mtd•lô_£ama_öô
()

112 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_£ama_∑r£r
);

115 
	}
}

117 
subsys_öôˇŒ
(
mtd•lô_£ama_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_squashfs.c

11 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/magic.h
>

18 
	~<löux/mtd/mtd.h
>

19 
	~<löux/mtd/∑πôi⁄s.h
>

20 
	~<löux/byã‹dî/gíîic.h
>

22 
	~"mtd•lô.h
"

25 
	$mtd•lô_∑r£_squashfs
(
mtd_öfo
 *
ma°î
,

26 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

27 
mtd_∑π_∑r£r_d©a
 *
d©a
)

29 
mtd_∑πôi⁄
 *
∑π
;

30 
mtd_öfo
 *
∑ª¡_mtd
;

31 
size_t
 
∑π_off£t
;

32 
size_t
 
squashfs_Àn
;

33 
îr
;

35 
îr
 = 
	`mtd_gë_squashfs_Àn
(
ma°î
, 0, &
squashfs_Àn
);

36 i‡(
îr
)

37  
îr
;

39 
∑ª¡_mtd
 = 
	`mtd∑π_gë_ma°î
(
ma°î
);

40 
∑π_off£t
 = 
	`mtd∑π_gë_off£t
(
ma°î
);

42 
∑π
 = 
	`kzÆloc
((*∑π), 
GFP_KERNEL
);

43 i‡(!
∑π
) {

44 
	`¥_Æît
("unableÅoállocate memory for \"%s\"Öartition\n",

45 
ROOTFS_SPLIT_NAME
);

46  -
ENOMEM
;

49 
∑π
->
«me
 = 
ROOTFS_SPLIT_NAME
;

50 
∑π
->
off£t
 = 
	`mtd_roundup_to_eb
(
∑π_off£t
 + 
squashfs_Àn
,

51 
∑ª¡_mtd
Ë- 
∑π_off£t
;

52 
∑π
->
size
 = 
	`mtd_rounddown_to_eb
(
ma°î
->sizê-Ö¨t->
off£t
, master);

54 *
µ¨ts
 = 
∑π
;

56 
	}
}

58 
mtd_∑π_∑r£r
 
	gmtd•lô_squashfs_∑r£r
 = {

59 .
ow√r
 = 
THIS_MODULE
,

60 .
	g«me
 = "squashfs-split",

61 .
	g∑r£_‚
 = 
mtd•lô_∑r£_squashfs
,

62 .
	gty≥
 = 
MTD_PARSER_TYPE_ROOTFS
,

65 
__öô
 
	$mtd•lô_squashfs_öô
()

67 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_squashfs_∑r£r
);

70 
	}
}

72 
subsys_öôˇŒ
(
mtd•lô_squashfs_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_tplink.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/mtd/mtd.h
>

16 
	~<löux/mtd/∑πôi⁄s.h
>

17 
	~<löux/byã‹dî/gíîic.h
>

19 
	~"mtd•lô.h
"

21 
	#TPLINK_NR_PARTS
 2

	)

22 
	#TPLINK_MIN_ROOTFS_OFFS
 0x80000

	)

24 
	#MD5SUM_LEN
 16

	)

26 
	sfw_v1
 {

27 
	mvíd‹_«me
[24];

28 
	mfw_vîsi⁄
[36];

29 
uöt32_t
 
	mhw_id
;

30 
uöt32_t
 
	mhw_ªv
;

31 
uöt32_t
 
	munk1
;

32 
uöt8_t
 
	mmd5sum1
[
MD5SUM_LEN
];

33 
uöt32_t
 
	munk2
;

34 
uöt8_t
 
	mmd5sum2
[
MD5SUM_LEN
];

35 
uöt32_t
 
	munk3
;

36 
uöt32_t
 
	mkî√l_œ
;

37 
uöt32_t
 
	mkî√l_ï
;

38 
uöt32_t
 
	mfw_Àngth
;

39 
uöt32_t
 
	mkî√l_ofs
;

40 
uöt32_t
 
	mkî√l_Àn
;

41 
uöt32_t
 
	mroŸfs_ofs
;

42 
uöt32_t
 
	mroŸfs_Àn
;

43 
uöt32_t
 
	mboŸ_ofs
;

44 
uöt32_t
 
	mboŸ_Àn
;

45 
uöt8_t
 
	m∑d
[360];

46 } 
__©åibuã__
 ((
∑cked
));

48 
	sfw_v2
 {

49 
	mfw_vîsi⁄
[48];

50 
uöt32_t
 
	mhw_id
;

51 
uöt32_t
 
	mhw_ªv
;

52 
uöt32_t
 
	munk1
;

53 
uöt8_t
 
	mmd5sum1
[
MD5SUM_LEN
];

54 
uöt32_t
 
	munk2
;

55 
uöt8_t
 
	mmd5sum2
[
MD5SUM_LEN
];

56 
uöt32_t
 
	munk3
;

58 
uöt32_t
 
	mkî√l_œ
;

59 
uöt32_t
 
	mkî√l_ï
;

60 
uöt32_t
 
	mfw_Àngth
;

61 
uöt32_t
 
	mkî√l_ofs
;

62 
uöt32_t
 
	mkî√l_Àn
;

63 
uöt32_t
 
	mroŸfs_ofs
;

64 
uöt32_t
 
	mroŸfs_Àn
;

65 
uöt32_t
 
	mboŸ_ofs
;

66 
uöt32_t
 
	mboŸ_Àn
;

67 
uöt16_t
 
	munk4
;

68 
uöt8_t
 
	msvî_hi
;

69 
uöt8_t
 
	msvî_lo
;

70 
uöt8_t
 
	munk5
;

71 
uöt8_t
 
	mvî_hi
;

72 
uöt8_t
 
	mvî_mid
;

73 
uöt8_t
 
	mvî_lo
;

74 
uöt8_t
 
	m∑d
[364];

75 } 
__©åibuã__
 ((
∑cked
));

77 
	sçlök_fw_hódî
 {

78 
uöt32_t
 
	mvîsi⁄
;

80 
fw_v1
 
	mv1
;

81 
fw_v2
 
	mv2
;

85 
	$mtd•lô_∑r£_çlök
(
mtd_öfo
 *
ma°î
,

86 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

87 
mtd_∑π_∑r£r_d©a
 *
d©a
)

89 
çlök_fw_hódî
 
hdr
;

90 
size_t
 
hdr_Àn
, 
ªéí
, 
kî√l_size
;

91 
size_t
 
roŸfs_off£t
;

92 
mtd_∑πôi⁄
 *
∑πs
;

93 
îr
;

95 
hdr_Àn
 = (
hdr
);

96 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

97 i‡(
îr
)

98  
îr
;

100 i‡(
ªéí
 !
hdr_Àn
)

101  -
EIO
;

103 
	`À32_to_˝u
(
hdr
.
vîsi⁄
)) {

105 i‡(
	`be32_to_˝u
(
hdr
.
v1
.
kî√l_ofs
) != (hdr))

106  -
EINVAL
;

108 
kî√l_size
 = (
hdr
Ë+ 
	`be32_to_˝u
(hdr.
v1
.
kî√l_Àn
);

109 
roŸfs_off£t
 = 
	`be32_to_˝u
(
hdr
.
v1
.
roŸfs_ofs
);

113 i‡(
	`be32_to_˝u
(
hdr
.
v2
.
kî√l_ofs
) != (hdr))

114  -
EINVAL
;

116 
kî√l_size
 = (
hdr
Ë+ 
	`be32_to_˝u
(hdr.
v2
.
kî√l_Àn
);

117 
roŸfs_off£t
 = 
	`be32_to_˝u
(
hdr
.
v2
.
roŸfs_ofs
);

120  -
EINVAL
;

123 i‡(
kî√l_size
 > 
ma°î
->
size
)

124  -
EINVAL
;

127 
îr
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 
roŸfs_off£t
, 
NULL
);

128 i‡(
îr
) {

133 
îr
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, 
TPLINK_MIN_ROOTFS_OFFS
,

134 
ma°î
->
size
, &
roŸfs_off£t
, 
NULL
);

135 i‡(
îr
)

136  
îr
;

139 
∑πs
 = 
	`kzÆloc
(
TPLINK_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

140 i‡(!
∑πs
)

141  -
ENOMEM
;

143 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

144 
∑πs
[0].
off£t
 = 0;

145 
∑πs
[0].
size
 = 
kî√l_size
;

147 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

148 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

149 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

151 *
µ¨ts
 = 
∑πs
;

152  
TPLINK_NR_PARTS
;

153 
	}
}

155 c⁄° 
of_devi˚_id
 
	gmtd•lô_çlök_of_m©ch_èbÀ
[] = {

156 { .
com∑tibÀ
 = "tplink,firmware" },

160 
mtd_∑π_∑r£r
 
	gmtd•lô_çlök_∑r£r
 = {

161 .
ow√r
 = 
THIS_MODULE
,

162 .
	g«me
 = "tplink-fw",

163 .
	gof_m©ch_èbÀ
 = 
mtd•lô_çlök_of_m©ch_èbÀ
,

164 .
	g∑r£_‚
 = 
mtd•lô_∑r£_çlök
,

165 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

168 
__öô
 
	$mtd•lô_çlök_öô
()

170 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_çlök_∑r£r
);

173 
	}
}

175 
subsys_öôˇŒ
(
mtd•lô_çlök_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_trx.c

11 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/byã‹dî/gíîic.h
>

21 
	~"mtd•lô.h
"

23 
	#TRX_MAGIC
 0x30524448

	)

25 
	såx_hódî
 {

26 
__À32
 
	mmagic
;

27 
__À32
 
	mÀn
;

28 
__À32
 
	m¸c32
;

29 
__À32
 
	mÊag_vîsi⁄
;

30 
__À32
 
	moff£t
[4];

34 
	$ªad_åx_hódî
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
,

35 
åx_hódî
 *
hódî
)

37 
size_t
 
hódî_Àn
;

38 
size_t
 
ªéí
;

39 
ªt
;

41 
hódî_Àn
 = (*
hódî
);

42 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, 
hódî_Àn
, &
ªéí
,

43 (*Ë
hódî
);

44 i‡(
ªt
) {

45 
	`¥_debug
("ªadÉº‹ i¿\"%s\"\n", 
mtd
->
«me
);

46  
ªt
;

49 i‡(
ªéí
 !
hódî_Àn
) {

50 
	`¥_debug
("sh‹àªad i¿\"%s\"\n", 
mtd
->
«me
);

51  -
EIO
;

55 
	}
}

58 
	$mtd•lô_∑r£_åx
(
mtd_öfo
 *
ma°î
,

59 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

60 
mtd_∑π_∑r£r_d©a
 *
d©a
)

62 
mtd_∑πôi⁄
 *
∑πs
;

63 
åx_hódî
 
hdr
;

64 
ƒ_∑πs
;

65 
size_t
 
off£t
;

66 
size_t
 
åx_off£t
;

67 
size_t
 
åx_size
 = 0;

68 
size_t
 
roŸfs_off£t
;

69 
size_t
 
roŸfs_size
 = 0;

70 
ªt
;

72 
ƒ_∑πs
 = 2;

73 
∑πs
 = 
	`kzÆloc
(
ƒ_∑πs
 * (*∑πs), 
GFP_KERNEL
);

74 i‡(!
∑πs
)

75  -
ENOMEM
;

78 
off£t
 = 0; off£à< 
ma°î
->
size
; off£à+ma°î->
îa£size
) {

79 
åx_size
 = 0;

81 
ªt
 = 
	`ªad_åx_hódî
(
ma°î
, 
off£t
, &
hdr
);

82 i‡(
ªt
)

85 i‡(
hdr
.
magic
 !
	`˝u_to_À32
(
TRX_MAGIC
)) {

86 
	`¥_debug
("no validÅrx header found in \"%s\"át offset %llx\n",

87 
ma°î
->
«me
, (Ë
off£t
);

91 
åx_size
 = 
	`À32_to_˝u
(
hdr
.
Àn
);

92 i‡((
off£t
 + 
åx_size
Ë> 
ma°î
->
size
) {

93 
	`¥_debug
("trx imageÉxceeds MTD device \"%s\"\n",

94 
ma°î
->
«me
);

100 i‡(
åx_size
 == 0) {

101 
	`¥_debug
("nÿåx hódî found i¿\"%s\"\n", 
ma°î
->
«me
);

102 
ªt
 = -
ENODEV
;

103 
îr
;

106 
åx_off£t
 = 
off£t
 + 
hdr
.offset[0];

107 
roŸfs_off£t
 = 
off£t
 + 
hdr
.offset[1];

108 
roŸfs_size
 = 
ma°î
->
size
 - 
roŸfs_off£t
;

109 
åx_size
 = 
roŸfs_off£t
 - 
åx_off£t
;

111 i‡(
roŸfs_size
 == 0) {

112 
	`¥_debug
("nÿroŸf†found i¿\"%s\"\n", 
ma°î
->
«me
);

113 
ªt
 = -
ENODEV
;

114 
îr
;

117 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

118 
∑πs
[0].
off£t
 = 
åx_off£t
;

119 
∑πs
[0].
size
 = 
åx_size
;

121 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

122 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

123 
∑πs
[1].
size
 = 
roŸfs_size
;

125 *
µ¨ts
 = 
∑πs
;

126  
ƒ_∑πs
;

128 
îr
:

129 
	`k‰ì
(
∑πs
);

130  
ªt
;

131 
	}
}

133 c⁄° 
of_devi˚_id
 
	gåx_∑r£r_of_m©ch_èbÀ
[] = {

134 { .
com∑tibÀ
 = "openwrt,trx" },

137 
MODULE_DEVICE_TABLE
(
of
, 
åx_∑r£r_of_m©ch_èbÀ
);

139 
mtd_∑π_∑r£r
 
	gåx_∑r£r
 = {

140 .
ow√r
 = 
THIS_MODULE
,

141 .
	g«me
 = "trx-fw",

142 .
	gof_m©ch_èbÀ
 = 
åx_∑r£r_of_m©ch_èbÀ
,

143 .
	g∑r£_‚
 = 
mtd•lô_∑r£_åx
,

144 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

147 
__öô
 
	$mtd•lô_åx_öô
()

149 
	`ªgi°î_mtd_∑r£r
(&
åx_∑r£r
);

152 
	}
}

154 
moduÀ_öô
(
mtd•lô_åx_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_uimage.c

10 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/vmÆloc.h
>

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/∑πôi⁄s.h
>

19 
	~<löux/vîsi⁄.h
>

20 
	~<löux/byã‹dî/gíîic.h
>

22 
	~"mtd•lô.h
"

28 
	#MAX_HEADER_LEN
 84

	)

30 
	#IH_MAGIC
 0x27051956

	)

31 
	#IH_NMLEN
 32

	)

33 
	#IH_OS_LINUX
 5

	)

35 
	#IH_TYPE_KERNEL
 2

	)

36 
	#IH_TYPE_FILESYSTEM
 7

	)

42 
	suimage_hódî
 {

43 
uöt32_t
 
	mih_magic
;

44 
uöt32_t
 
	mih_h¸c
;

45 
uöt32_t
 
	mih_time
;

46 
uöt32_t
 
	mih_size
;

47 
uöt32_t
 
	mih_lﬂd
;

48 
uöt32_t
 
	mih_ï
;

49 
uöt32_t
 
	mih_d¸c
;

50 
uöt8_t
 
	mih_os
;

51 
uöt8_t
 
	mih_¨ch
;

52 
uöt8_t
 
	mih_ty≥
;

53 
uöt8_t
 
	mih_comp
;

54 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

58 
	$ªad_uimage_hódî
(
mtd_öfo
 *
mtd
, 
size_t
 
off£t
, 
u_ch¨
 *
buf
,

59 
size_t
 
hódî_Àn
)

61 
size_t
 
ªéí
;

62 
ªt
;

64 
ªt
 = 
	`mtd_ªad
(
mtd
, 
off£t
, 
hódî_Àn
, &
ªéí
, 
buf
);

65 i‡(
ªt
) {

66 
	`¥_debug
("ªadÉº‹ i¿\"%s\"\n", 
mtd
->
«me
);

67  
ªt
;

70 i‡(
ªéí
 !
hódî_Àn
) {

71 
	`¥_debug
("sh‹àªad i¿\"%s\"\n", 
mtd
->
«me
);

72  -
EIO
;

76 
	}
}

84 
	$__mtd•lô_∑r£_uimage
(
mtd_öfo
 *
ma°î
,

85 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

86 
mtd_∑π_∑r£r_d©a
 *
d©a
,

87 
	$ssize_t
 (*
föd_hódî
)(
u_ch¨
 *
buf
, 
size_t
 
Àn
))

89 
mtd_∑πôi⁄
 *
∑πs
;

90 
u_ch¨
 *
buf
;

91 
ƒ_∑πs
;

92 
size_t
 
off£t
;

93 
size_t
 
uimage_off£t
;

94 
size_t
 
uimage_size
 = 0;

95 
size_t
 
roŸfs_off£t
;

96 
size_t
 
roŸfs_size
 = 0;

97 
uimage_∑π
, 
rf_∑π
;

98 
ªt
;

99 
mtd•lô_∑π_ty≥
 
ty≥
;

101 
ƒ_∑πs
 = 2;

102 
∑πs
 = 
	`kzÆloc
(
ƒ_∑πs
 * (*∑πs), 
GFP_KERNEL
);

103 i‡(!
∑πs
)

104  -
ENOMEM
;

106 
buf
 = 
	`vmÆloc
(
MAX_HEADER_LEN
);

107 i‡(!
buf
) {

108 
ªt
 = -
ENOMEM
;

109 
îr_‰ì_∑πs
;

113 
off£t
 = 0; off£à< 
ma°î
->
size
; off£à+ma°î->
îa£size
) {

114 
uimage_hódî
 *
hódî
;

116 
uimage_size
 = 0;

118 
ªt
 = 
	`ªad_uimage_hódî
(
ma°î
, 
off£t
, 
buf
, 
MAX_HEADER_LEN
);

119 i‡(
ªt
)

122 
ªt
 = 
	`föd_hódî
(
buf
, 
MAX_HEADER_LEN
);

123 i‡(
ªt
 < 0) {

124 
	`¥_debug
("no valid uImage found in \"%s\"át offset %llx\n",

125 
ma°î
->
«me
, (Ë
off£t
);

128 
hódî
 = (
uimage_hódî
 *)(
buf
 + 
ªt
);

130 
uimage_size
 = (*
hódî
Ë+ 
	`be32_to_˝u
(hódî->
ih_size
Ë+ 
ªt
;

131 i‡((
off£t
 + 
uimage_size
Ë> 
ma°î
->
size
) {

132 
	`¥_debug
("uImageÉxceeds MTD device \"%s\"\n",

133 
ma°î
->
«me
);

139 i‡(
uimage_size
 == 0) {

140 
	`¥_debug
("nÿuImagêfound i¿\"%s\"\n", 
ma°î
->
«me
);

141 
ªt
 = -
ENODEV
;

142 
îr_‰ì_buf
;

145 
uimage_off£t
 = 
off£t
;

147 i‡(
uimage_off£t
 == 0) {

148 
uimage_∑π
 = 0;

149 
rf_∑π
 = 1;

152 
ªt
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, 
uimage_off£t
 + 
uimage_size
,

153 
ma°î
->
size
, &
roŸfs_off£t
, &
ty≥
);

154 i‡(
ªt
) {

155 
	`¥_debug
("noÑootfsáfter uImage in \"%s\"\n",

156 
ma°î
->
«me
);

157 
îr_‰ì_buf
;

160 
roŸfs_size
 = 
ma°î
->
size
 - 
roŸfs_off£t
;

161 
uimage_size
 = 
roŸfs_off£t
 - 
uimage_off£t
;

163 
rf_∑π
 = 0;

164 
uimage_∑π
 = 1;

167 
ªt
 = 
	`mtd_check_roŸfs_magic
(
ma°î
, 0, &
ty≥
);

168 i‡(
ªt
) {

169 
	`¥_debug
("noÑootfs before uImage in \"%s\"\n",

170 
ma°î
->
«me
);

171 
îr_‰ì_buf
;

174 
roŸfs_off£t
 = 0;

175 
roŸfs_size
 = 
uimage_off£t
;

178 i‡(
roŸfs_size
 == 0) {

179 
	`¥_debug
("nÿroŸf†found i¿\"%s\"\n", 
ma°î
->
«me
);

180 
ªt
 = -
ENODEV
;

181 
îr_‰ì_buf
;

184 
∑πs
[
uimage_∑π
].
«me
 = 
KERNEL_PART_NAME
;

185 
∑πs
[
uimage_∑π
].
off£t
 = 
uimage_off£t
;

186 
∑πs
[
uimage_∑π
].
size
 = 
uimage_size
;

188 i‡(
ty≥
 =
MTDSPLIT_PART_TYPE_UBI
)

189 
∑πs
[
rf_∑π
].
«me
 = 
UBI_PART_NAME
;

191 
∑πs
[
rf_∑π
].
«me
 = 
ROOTFS_PART_NAME
;

192 
∑πs
[
rf_∑π
].
off£t
 = 
roŸfs_off£t
;

193 
∑πs
[
rf_∑π
].
size
 = 
roŸfs_size
;

195 
	`v‰ì
(
buf
);

197 *
µ¨ts
 = 
∑πs
;

198  
ƒ_∑πs
;

200 
îr_‰ì_buf
:

201 
	`v‰ì
(
buf
);

203 
îr_‰ì_∑πs
:

204 
	`k‰ì
(
∑πs
);

205  
ªt
;

206 
	}
}

208 
ssize_t
 
	$uimage_vîify_deÁu…
(
u_ch¨
 *
buf
, 
size_t
 
Àn
)

210 
uimage_hódî
 *
hódî
 = (uimage_hódî *)
buf
;

213 i‡(
	`be32_to_˝u
(
hódî
->
ih_magic
Ë!
IH_MAGIC
) {

214 
	`¥_debug
("invalid uImage magic: %08x\n",

215 
	`be32_to_˝u
(
hódî
->
ih_magic
));

216  -
EINVAL
;

219 i‡(
hódî
->
ih_os
 !
IH_OS_LINUX
) {

220 
	`¥_debug
("invalid uImage OS: %08x\n",

221 
	`be32_to_˝u
(
hódî
->
ih_os
));

222  -
EINVAL
;

225 i‡(
hódî
->
ih_ty≥
 !
IH_TYPE_KERNEL
) {

226 
	`¥_debug
("invalid uImageÅype: %08x\n",

227 
	`be32_to_˝u
(
hódî
->
ih_ty≥
));

228  -
EINVAL
;

232 
	}
}

235 
	$mtd•lô_uimage_∑r£_gíîic
(
mtd_öfo
 *
ma°î
,

236 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

237 
mtd_∑π_∑r£r_d©a
 *
d©a
)

239  
	`__mtd•lô_∑r£_uimage
(
ma°î
, 
µ¨ts
, 
d©a
,

240 
uimage_vîify_deÁu…
);

241 
	}
}

243 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

244 c⁄° 
of_devi˚_id
 
	gmtd•lô_uimage_of_m©ch_èbÀ
[] = {

245 { .
com∑tibÀ
 = "denx,uimage" },

250 
mtd_∑π_∑r£r
 
	guimage_gíîic_∑r£r
 = {

251 .
ow√r
 = 
THIS_MODULE
,

252 .
	g«me
 = "uimage-fw",

253 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

254 .
	gof_m©ch_èbÀ
 = 
mtd•lô_uimage_of_m©ch_èbÀ
,

256 .
	g∑r£_‚
 = 
mtd•lô_uimage_∑r£_gíîic
,

257 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

260 
	#FW_MAGIC_WNR2000V1
 0x32303031

	)

261 
	#FW_MAGIC_WNR2000V3
 0x32303033

	)

262 
	#FW_MAGIC_WNR2000V4
 0x32303034

	)

263 
	#FW_MAGIC_WNR2200
 0x32323030

	)

264 
	#FW_MAGIC_WNR612V2
 0x32303631

	)

265 
	#FW_MAGIC_WNR1000V2
 0x31303031

	)

266 
	#FW_MAGIC_WNR1000V2_VC
 0x31303030

	)

267 
	#FW_MAGIC_WNDR3700
 0x33373030

	)

268 
	#FW_MAGIC_WNDR3700V2
 0x33373031

	)

269 
	#FW_MAGIC_WPN824N
 0x31313030

	)

271 
ssize_t
 
	$uimage_vîify_wndr3700
(
u_ch¨
 *
buf
, 
size_t
 
Àn
)

273 
uimage_hódî
 *
hódî
 = (uimage_hódî *)
buf
;

274 
uöt8_t
 
ex≥˘ed_ty≥
 = 
IH_TYPE_FILESYSTEM
;

276 
	`be32_to_˝u
(
hódî
->
ih_magic
)) {

277 
FW_MAGIC_WNR612V2
:

278 
FW_MAGIC_WNR1000V2
:

279 
FW_MAGIC_WNR1000V2_VC
:

280 
FW_MAGIC_WNR2000V1
:

281 
FW_MAGIC_WNR2000V3
:

282 
FW_MAGIC_WNR2200
:

283 
FW_MAGIC_WNDR3700
:

284 
FW_MAGIC_WNDR3700V2
:

285 
FW_MAGIC_WPN824N
:

287 
FW_MAGIC_WNR2000V4
:

288 
ex≥˘ed_ty≥
 = 
IH_TYPE_KERNEL
;

291  -
EINVAL
;

294 i‡(
hódî
->
ih_os
 !
IH_OS_LINUX
 ||

295 
hódî
->
ih_ty≥
 !
ex≥˘ed_ty≥
)

296  -
EINVAL
;

299 
	}
}

302 
	$mtd•lô_uimage_∑r£_√tgór
(
mtd_öfo
 *
ma°î
,

303 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

304 
mtd_∑π_∑r£r_d©a
 *
d©a
)

306  
	`__mtd•lô_∑r£_uimage
(
ma°î
, 
µ¨ts
, 
d©a
,

307 
uimage_vîify_wndr3700
);

308 
	}
}

310 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

311 c⁄° 
of_devi˚_id
 
	gmtd•lô_uimage_√tgór_of_m©ch_èbÀ
[] = {

312 { .
com∑tibÀ
 = "netgear,uimage" },

317 
mtd_∑π_∑r£r
 
	guimage_√tgór_∑r£r
 = {

318 .
ow√r
 = 
THIS_MODULE
,

319 .
	g«me
 = "netgear-fw",

320 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

321 .
	gof_m©ch_èbÀ
 = 
mtd•lô_uimage_√tgór_of_m©ch_èbÀ
,

323 .
	g∑r£_‚
 = 
mtd•lô_uimage_∑r£_√tgór
,

324 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

331 
	#FW_EDIMAX_OFFSET
 20

	)

332 
	#FW_MAGIC_EDIMAX
 0x43535953

	)

334 
ssize_t
 
	$uimage_föd_edimax
(
u_ch¨
 *
buf
, 
size_t
 
Àn
)

336 
u32
 *
magic
;

338 i‡(
Àn
 < 
FW_EDIMAX_OFFSET
 + (
uimage_hódî
)) {

339 
	`¥_îr
("BufferÅoo small for checking Edimax header\n");

340  -
ENOSPC
;

343 
magic
 = (
u32
 *)
buf
;

344 i‡(
	`be32_to_˝u
(*
magic
Ë!
FW_MAGIC_EDIMAX
)

345  -
EINVAL
;

347 i‡(!
	`uimage_vîify_deÁu…
(
buf
 + 
FW_EDIMAX_OFFSET
, 
Àn
))

348  
FW_EDIMAX_OFFSET
;

350  -
EINVAL
;

351 
	}
}

354 
	$mtd•lô_uimage_∑r£_edimax
(
mtd_öfo
 *
ma°î
,

355 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

356 
mtd_∑π_∑r£r_d©a
 *
d©a
)

358  
	`__mtd•lô_∑r£_uimage
(
ma°î
, 
µ¨ts
, 
d©a
,

359 
uimage_föd_edimax
);

360 
	}
}

362 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

363 c⁄° 
of_devi˚_id
 
	gmtd•lô_uimage_edimax_of_m©ch_èbÀ
[] = {

364 { .
com∑tibÀ
 = "edimax,uimage" },

369 
mtd_∑π_∑r£r
 
	guimage_edimax_∑r£r
 = {

370 .
ow√r
 = 
THIS_MODULE
,

371 .
	g«me
 = "edimax-fw",

372 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 9, 0)

373 .
	gof_m©ch_èbÀ
 = 
mtd•lô_uimage_edimax_of_m©ch_èbÀ
,

375 .
	g∑r£_‚
 = 
mtd•lô_uimage_∑r£_edimax
,

376 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

383 
__öô
 
	$mtd•lô_uimage_öô
()

385 
	`ªgi°î_mtd_∑r£r
(&
uimage_gíîic_∑r£r
);

386 
	`ªgi°î_mtd_∑r£r
(&
uimage_√tgór_∑r£r
);

387 
	`ªgi°î_mtd_∑r£r
(&
uimage_edimax_∑r£r
);

390 
	}
}

392 
moduÀ_öô
(
mtd•lô_uimage_öô
);

	@linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_wrgg.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/mtd/mtd.h
>

17 
	~<löux/mtd/∑πôi⁄s.h
>

18 
	~<löux/byã‹dî/gíîic.h
>

20 
	~"mtd•lô.h
"

22 
	#WRGG_NR_PARTS
 2

	)

23 
	#WRGG_MIN_ROOTFS_OFFS
 0x80000

	)

24 
	#WRGG03_MAGIC
 0x20080321

	)

25 
	#WRG_MAGIC
 0x20040220

	)

27 
	swrgg03_hódî
 {

28 
	msig«tuª
[32];

29 
uöt32_t
 
	mmagic1
;

30 
uöt32_t
 
	mmagic2
;

31 
	mvîsi⁄
[16];

32 
	mmodñ
[16];

33 
uöt32_t
 
	mÊag
[2];

34 
uöt32_t
 
	mª£rve
[2];

35 
	mbuûdno
[16];

36 
uöt32_t
 
	msize
;

37 
uöt32_t
 
	moff£t
;

38 
	mdev«me
[32];

39 
	mdige°
[16];

40 } 
__©åibuã__
 ((
∑cked
));

42 
	swrg_hódî
 {

43 
	msig«tuª
[32];

44 
uöt32_t
 
	mmagic1
;

45 
uöt32_t
 
	mmagic2
;

46 
uöt32_t
 
	msize
;

47 
uöt32_t
 
	moff£t
;

48 
	mdev«me
[32];

49 
	mdige°
[16];

50 } 
__©åibuã__
 ((
∑cked
));

53 
	$mtd•lô_∑r£_wrgg
(
mtd_öfo
 *
ma°î
,

54 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

55 
mtd_∑π_∑r£r_d©a
 *
d©a
)

57 
wrgg03_hódî
 
hdr
;

58 
size_t
 
hdr_Àn
, 
ªéí
, 
kî√l_ít_size
;

59 
size_t
 
roŸfs_off£t
;

60 
mtd_∑πôi⁄
 *
∑πs
;

61 
mtd•lô_∑π_ty≥
 
ty≥
;

62 
îr
;

64 
hdr_Àn
 = (
hdr
);

65 
îr
 = 
	`mtd_ªad
(
ma°î
, 0, 
hdr_Àn
, &
ªéí
, (*Ë&
hdr
);

66 i‡(
îr
)

67  
îr
;

69 i‡(
ªéí
 !
hdr_Àn
)

70  -
EIO
;

73 i‡(
	`À32_to_˝u
(
hdr
.
magic1
Ë=
WRGG03_MAGIC
) {

74 
kî√l_ít_size
 = 
hdr_Àn
 + 
	`be32_to_˝u
(
hdr
.
size
);

75 } i‡(
	`À32_to_˝u
(
hdr
.
magic1
Ë=
WRG_MAGIC
) {

76 
kî√l_ít_size
 = (
wrg_hódî
Ë+ 
	`À32_to_˝u
(

77 ((
wrg_hódî
*)&
hdr
)->
size
);

79  -
EINVAL
;

82 i‡(
kî√l_ít_size
 > 
ma°î
->
size
)

83  -
EINVAL
;

89 
îr
 = 
	`mtd_föd_roŸfs_‰om
(
ma°î
, 
WRGG_MIN_ROOTFS_OFFS
,

90 
ma°î
->
size
, &
roŸfs_off£t
, &
ty≥
);

91 i‡(
îr
)

92  
îr
;

94 
∑πs
 = 
	`kzÆloc
(
WRGG_NR_PARTS
 * (*∑πs), 
GFP_KERNEL
);

95 i‡(!
∑πs
)

96  -
ENOMEM
;

98 
∑πs
[0].
«me
 = 
KERNEL_PART_NAME
;

99 
∑πs
[0].
off£t
 = 0;

100 
∑πs
[0].
size
 = 
roŸfs_off£t
;

102 
∑πs
[1].
«me
 = 
ROOTFS_PART_NAME
;

103 
∑πs
[1].
off£t
 = 
roŸfs_off£t
;

104 
∑πs
[1].
size
 = 
ma°î
->sizê- 
roŸfs_off£t
;

106 *
µ¨ts
 = 
∑πs
;

107  
WRGG_NR_PARTS
;

108 
	}
}

110 c⁄° 
of_devi˚_id
 
	gmtd•lô_wrgg_of_m©ch_èbÀ
[] = {

111 { .
com∑tibÀ
 = "wrg" },

114 
MODULE_DEVICE_TABLE
(
of
, 
mtd•lô_wrgg_of_m©ch_èbÀ
);

116 
mtd_∑π_∑r£r
 
	gmtd•lô_wrgg_∑r£r
 = {

117 .
ow√r
 = 
THIS_MODULE
,

118 .
	g«me
 = "wrgg-fw",

119 .
	gof_m©ch_èbÀ
 = 
mtd•lô_wrgg_of_m©ch_èbÀ
,

120 .
	g∑r£_‚
 = 
mtd•lô_∑r£_wrgg
,

121 .
	gty≥
 = 
MTD_PARSER_TYPE_FIRMWARE
,

124 
__öô
 
	$mtd•lô_wrgg_öô
()

126 
	`ªgi°î_mtd_∑r£r
(&
mtd•lô_wrgg_∑r£r
);

129 
	}
}

131 
subsys_öôˇŒ
(
mtd•lô_wrgg_öô
);

	@linux/generic/files/drivers/mtd/myloader.c

16 
	~<löux/kî√l.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/vîsi⁄.h
>

19 
	~<löux/¶ab.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/vmÆloc.h
>

22 
	~<löux/mtd/mtd.h
>

23 
	~<löux/mtd/∑πôi⁄s.h
>

24 
	~<löux/byã‹dî/gíîic.h
>

25 
	~<löux/mylﬂdî.h
>

27 
	#BLOCK_LEN_MIN
 0x10000

	)

28 
	#PART_NAME_LEN
 32

	)

30 
	s∑π_d©a
 {

31 
mylo_∑πôi⁄_èbÀ
 
	mèb
;

32 
	m«mes
[
MYLO_MAX_PARTITIONS
][
PART_NAME_LEN
];

35 
	$mylﬂdî_∑r£_∑πôi⁄s
(
mtd_öfo
 *
ma°î
,

36 c⁄° 
mtd_∑πôi⁄
 **
µ¨ts
,

37 
mtd_∑π_∑r£r_d©a
 *
d©a
)

39 
∑π_d©a
 *
buf
;

40 
mylo_∑πôi⁄_èbÀ
 *
èb
;

41 
mylo_∑πôi⁄
 *
∑π
;

42 
mtd_∑πôi⁄
 *
mtd_∑πs
;

43 
mtd_∑πôi⁄
 *
mtd_∑π
;

44 
num_∑πs
;

45 
ªt
, 
i
;

46 
size_t
 
ªéí
;

47 *
«mes
;

48 
off£t
;

49 
blockÀn
;

51 
buf
 = 
	`vmÆloc
((*buf));

52 i‡(!
buf
) {

53  -
ENOMEM
;

54 
out
;

56 
èb
 = &
buf
->tab;

58 
blockÀn
 = 
ma°î
->
îa£size
;

59 i‡(
blockÀn
 < 
BLOCK_LEN_MIN
)

60 
blockÀn
 = 
BLOCK_LEN_MIN
;

62 
off£t
 = 
blockÀn
;

65 
i
 = 0; i < 4; i++, 
off£t
 +
blockÀn
) {

66 
	`¥ötk
(
KERN_DEBUG
 "%s: searching for MyLoaderÖartitionÅable"

67 "áàoff£à0x%lx\n", 
ma°î
->
«me
, 
off£t
);

69 
ªt
 = 
	`mtd_ªad
(
ma°î
, 
off£t
, (*
buf
), &
ªéí
,

70 (*)
buf
);

71 i‡(
ªt
)

72 
out_‰ì_buf
;

74 i‡(
ªéí
 !(*
buf
)) {

75 
ªt
 = -
EIO
;

76 
out_‰ì_buf
;

80 i‡(
èb
->
magic
 =
	`À32_to_˝u
(
MYLO_MAGIC_PARTITIONS
))

85 i‡(
èb
->
magic
 !
	`À32_to_˝u
(
MYLO_MAGIC_PARTITIONS
)) {

86 
	`¥ötk
(
KERN_DEBUG
 "%s:Ço MyLoaderÖartitionÅable found\n",

87 
ma°î
->
«me
);

88 
ªt
 = 0;

89 
out_‰ì_buf
;

93 
num_∑πs
 = 2;

96 
i
 = 0; i < 
MYLO_MAX_PARTITIONS
; i++) {

97 
∑π
 = &
èb
->
∑πôi⁄s
[
i
];

99 i‡(
	`À16_to_˝u
(
∑π
->
ty≥
Ë=
PARTITION_TYPE_FREE
)

102 
num_∑πs
++;

105 
mtd_∑πs
 = 
	`kzÆloc
((
num_∑πs
 * (*
mtd_∑π
) +

106 
num_∑πs
 * 
PART_NAME_LEN
), 
GFP_KERNEL
);

108 i‡(!
mtd_∑πs
) {

109 
ªt
 = -
ENOMEM
;

110 
out_‰ì_buf
;

113 
mtd_∑π
 = 
mtd_∑πs
;

114 
«mes
 = (*)&
mtd_∑πs
[
num_∑πs
];

116 
	`°∫˝y
(
«mes
, "mylﬂdî", 
PART_NAME_LEN
);

117 
mtd_∑π
->
«me
 = 
«mes
;

118 
mtd_∑π
->
off£t
 = 0;

119 
mtd_∑π
->
size
 = 
off£t
;

120 
mtd_∑π
->
mask_Êags
 = 
MTD_WRITEABLE
;

121 
mtd_∑π
++;

122 
«mes
 +
PART_NAME_LEN
;

124 
	`°∫˝y
(
«mes
, "∑πôi⁄_èbÀ", 
PART_NAME_LEN
);

125 
mtd_∑π
->
«me
 = 
«mes
;

126 
mtd_∑π
->
off£t
 = offset;

127 
mtd_∑π
->
size
 = 
blockÀn
;

128 
mtd_∑π
->
mask_Êags
 = 
MTD_WRITEABLE
;

129 
mtd_∑π
++;

130 
«mes
 +
PART_NAME_LEN
;

132 
i
 = 0; i < 
MYLO_MAX_PARTITIONS
; i++) {

133 
∑π
 = &
èb
->
∑πôi⁄s
[
i
];

135 i‡(
	`À16_to_˝u
(
∑π
->
ty≥
Ë=
PARTITION_TYPE_FREE
)

138 i‡((
buf
->
«mes
[
i
][0]) && (buf->names[i][0] != '\xff'))

139 
	`°∫˝y
(
«mes
, 
buf
->«mes[
i
], 
PART_NAME_LEN
);

141 
	`¢¥ötf
(
«mes
, 
PART_NAME_LEN
, "∑πôi⁄%d", 
i
);

143 
mtd_∑π
->
off£t
 = 
	`À32_to_˝u
(
∑π
->
addr
);

144 
mtd_∑π
->
size
 = 
	`À32_to_˝u
(
∑π
->size);

145 
mtd_∑π
->
«me
 = 
«mes
;

146 
mtd_∑π
++;

147 
«mes
 +
PART_NAME_LEN
;

150 *
µ¨ts
 = 
mtd_∑πs
;

151 
ªt
 = 
num_∑πs
;

153 
out_‰ì_buf
:

154 
	`v‰ì
(
buf
);

155 
out
:

156  
ªt
;

157 
	}
}

159 
mtd_∑π_∑r£r
 
	gmylﬂdî_mtd_∑r£r
 = {

160 .
ow√r
 = 
THIS_MODULE
,

161 .
	g∑r£_‚
 = 
mylﬂdî_∑r£_∑πôi⁄s
,

162 .
	g«me
 = "MyLoader",

165 
__öô
 
	$mylﬂdî_mtd_∑r£r_öô
()

167 
	`ªgi°î_mtd_∑r£r
(&
mylﬂdî_mtd_∑r£r
);

170 
	}
}

172 
__exô
 
	$mylﬂdî_mtd_∑r£r_exô
()

174 
	`dîegi°î_mtd_∑r£r
(&
mylﬂdî_mtd_∑r£r
);

175 
	}
}

177 
moduÀ_öô
(
mylﬂdî_mtd_∑r£r_öô
);

178 
moduÀ_exô
(
mylﬂdî_mtd_∑r£r_exô
);

180 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

181 
MODULE_DESCRIPTION
("Parsing code for MyLoaderÖartitionÅables");

182 
MODULE_LICENSE
("GPL v2");

	@linux/generic/files/drivers/net/phy/adm6996.c

16 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

19 
	~<löux/kî√l.h
>

20 
	~<löux/°rög.h
>

21 
	~<löux/î∫o.h
>

22 
	~<löux/uni°d.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/öãºu±.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/dñay.h
>

27 
	~<löux/gpio.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/ëhîdevi˚.h
>

30 
	~<löux/skbuff.h
>

31 
	~<löux/•ölock.h
>

32 
	~<löux/mm.h
>

33 
	~<löux/moduÀ.h
>

34 
	~<löux/mii.h
>

35 
	~<löux/∂©f‹m_devi˚.h
>

36 
	~<löux/∂©f‹m_d©a/adm6996-gpio.h
>

37 
	~<löux/ëhtoﬁ.h
>

38 
	~<löux/phy.h
>

39 
	~<löux/swôch.h
>

41 
	~<asm/io.h
>

42 
	~<asm/úq.h
>

43 
	~<asm/uac˚ss.h
>

44 
	~"adm6996.h
"

46 
MODULE_DESCRIPTION
("Infineon ADM6996 Switch");

47 
MODULE_AUTHOR
("Felix Fietkau, Peter Lebbing <peter@digitalbrains.com>");

48 
MODULE_LICENSE
("GPL");

50 c⁄° * c⁄° 
	gadm6996_modñ_«me
[] =

52 
NULL
,

58 
	sadm6996_mib_desc
 {

59 
	moff£t
;

60 c⁄° *
	m«me
;

63 
	sadm6996_¥iv
 {

64 
swôch_dev
 
	mdev
;

65 *
	m¥iv
;

67 
u8
 
	mìcs
;

68 
u8
 
	mìsk
;

69 
u8
 
	mìdi
;

71 
adm6996_modñ
 
	mmodñ
;

73 
boﬁ
 
	míabÀ_vœn
;

74 
boﬁ
 
	mvœn_íabÀd
;

76 #ifde‡
DEBUG


77 
u16
 
	maddr
;

80 
u16
 
	mpvid
[
ADM_NUM_PORTS
];

81 
u8
 
	mègged_p‹ts
;

83 
u16
 
	mvœn_id
[
ADM_NUM_VLANS
];

84 
u8
 
	mvœn_èbÀ
[
ADM_NUM_VLANS
];

85 
u8
 
	mvœn_ègged
[
ADM_NUM_VLANS
];

87 
muãx
 
	mmib_lock
;

88 
	mbuf
[2048];

90 
muãx
 
	mªg_muãx
;

93 
u16
 (*
ªad
)(
adm6996_¥iv
 *
	m¥iv
, 
admªg
 
	mªg
);

94 (*
	mwrôe
)(
adm6996_¥iv
 *
	m¥iv
, 
admªg
 
	mªg
, 
u16
 
	mvÆ
);

97 
	#to_adm
(
_dev
Ë
	`c⁄èöî_of
(_dev, 
adm6996_¥iv
, 
dev
)

	)

98 
	#phy_to_adm
(
_phy
Ë((
adm6996_¥iv
 *Ë(_phy)->
¥iv
)

	)

100 
	#MIB_DESC
(
_o
, 
_n
) \

102 .
off£t
 = (
_o
), \

103 .
«me
 = (
_n
), \

104 }

	)

106 c⁄° 
adm6996_mib_desc
 
	gadm6996_mibs
[] = {

107 
MIB_DESC
(
ADM_CL0
, "RxPacket"),

108 
MIB_DESC
(
ADM_CL6
, "RxByte"),

109 
MIB_DESC
(
ADM_CL12
, "TxPacket"),

110 
MIB_DESC
(
ADM_CL18
, "TxByte"),

111 
MIB_DESC
(
ADM_CL24
, "Collision"),

112 
MIB_DESC
(
ADM_CL30
, "Error"),

115 
	#ADM6996_MIB_RXB_ID
 1

	)

116 
	#ADM6996_MIB_TXB_ID
 3

	)

118 
ölöe
 
u16


119 
	$r16
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
)

121  
¥iv
->
	`ªad
’riv, 
ªg
);

122 
	}
}

124 
ölöe
 

125 
	$w16
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
, 
u16
 
vÆ
)

127 
¥iv
->
	`wrôe
’riv, 
ªg
, 
vÆ
);

128 
	}
}

131 
	#EECK_EDGE_TIME
 3

	)

132 
	#EEDI_SETUP_TIME
 1

	)

133 
	#EECS_SETUP_TIME
 1

	)

135 
	$adm6996_gpio_wrôe
(
adm6996_¥iv
 *
¥iv
, 
cs
, *
buf
, 
bôs
)

137 
i
, 
Àn
 = (
bôs
 + 7) / 8;

138 
u8
 
mask
;

140 
	`gpio_£t_vÆue
(
¥iv
->
ìcs
, 
cs
);

141 
	`udñay
(
EECK_EDGE_TIME
);

144 
i
 = 0; i < 
Àn
; i++) {

146 
mask
 = 0x80; mask && 
bôs
 > 0; mask >>= 1, bits --) {

148 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 0);

149 
	`udñay
(
EECK_EDGE_TIME
);

152 
	`gpio_£t_vÆue
(
¥iv
->
ìdi
, (
mask
 & 
buf
[
i
]));

153 
	`udñay
(
EEDI_SETUP_TIME
);

156 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 1);

157 
	`udñay
(
EECK_EDGE_TIME
);

162 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 0);

163 
	`udñay
(
EECK_EDGE_TIME
);

165 i‡(
cs
)

166 
	`gpio_£t_vÆue
(
¥iv
->
ìcs
, 0);

167 
	}
}

169 
	$adm6996_gpio_ªad
(
adm6996_¥iv
 *
¥iv
, 
cs
, *
buf
, 
bôs
)

171 
i
, 
Àn
 = (
bôs
 + 7) / 8;

172 
u8
 
mask
;

174 
	`gpio_£t_vÆue
(
¥iv
->
ìcs
, 
cs
);

175 
	`udñay
(
EECK_EDGE_TIME
);

178 
i
 = 0; i < 
Àn
; i++) {

179 
u8
 
byã
;

182 
mask
 = 0x80, 
byã
 = 0; mask && 
bôs
 > 0; mask >>= 1, bits --) {

183 
u8
 
gp
;

186 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 0);

187 
	`udñay
(
EECK_EDGE_TIME
);

190 
gp
 = 
	`gpio_gë_vÆue
(
¥iv
->
ìdi
);

191 i‡(
gp
)

192 
byã
 |
mask
;

195 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 1);

196 
	`udñay
(
EECK_EDGE_TIME
);

199 *
buf
++ = 
byã
;

203 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 0);

204 
	`udñay
(
EECK_EDGE_TIME
);

206 i‡(
cs
)

207 
	`gpio_£t_vÆue
(
¥iv
->
ìcs
, 0);

208 
	}
}

211 
	$adm6996_gpio_ad˛k
(
adm6996_¥iv
 *
¥iv
, 
˛ocks
)

213 
i
;

214 
i
 = 0; i < 
˛ocks
; i++) {

216 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 1);

217 
	`udñay
(
EECK_EDGE_TIME
);

220 
	`gpio_£t_vÆue
(
¥iv
->
ìsk
, 0);

221 
	`udñay
(
EECK_EDGE_TIME
);

223 
	}
}

225 
u16


226 
	$adm6996_ªad_gpio_ªg
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
)

229 
u8
 
bôs
[6] = {

231 (0x06 << 4Ë| ((0 & 0x01Ë<< 3 | (
ªg
&64)>>6),

232 ((
ªg
&63)<<2)

235 
u8
 
rbôs
[4];

238 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìcs
, 0);

239 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìsk
, 0);

240 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìdi
, 0);

242 
	`adm6996_gpio_wrôe
(
¥iv
, 0, 
bôs
, 46);

243 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìdi
);

244 
	`adm6996_gpio_ad˛k
(
¥iv
, 2);

245 
	`adm6996_gpio_ªad
(
¥iv
, 0, 
rbôs
, 32);

248 
	`adm6996_gpio_ad˛k
(
¥iv
, 2);

251 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìcs
);

252 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìsk
);

255  (
ªg
 & 0x01 ? (
rbôs
[0]<<8) |Ñbits[1] : (rbits[2]<<8) | (rbits[3]));

256 
	}
}

261 
	$adm6996_wrôe_gpio_ªg
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
, 
u16
 
vÆ
)

264 
u8
 
bôs
[4] = {

265 (0x05 << 5Ë| (
ªg
 >> 3),

266 (
ªg
 << 5Ë| (
u8
)(
vÆ
 >> 11),

267 (
u8
)(
vÆ
 >> 3),

268 (
u8
)(
vÆ
 << 5)

272 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìcs
, 0);

273 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìsk
, 0);

274 
	`gpio_dúe˘i⁄_ouçut
(
¥iv
->
ìdi
, 0);

277 
	`adm6996_gpio_wrôe
(
¥iv
, 1, 
bôs
, 27);

280 
	`adm6996_gpio_ad˛k
(
¥iv
, 2);

283 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìcs
);

284 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìsk
);

285 
	`gpio_dúe˘i⁄_öput
(
¥iv
->
ìdi
);

286 
	}
}

288 
u16


289 
	$adm6996_ªad_mii_ªg
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
)

291 
phy_devi˚
 *
phydev
 = 
¥iv
->priv;

292 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

294  
bus
->
	`ªad
(bus, 
	`PHYADDR
(
ªg
));

295 
	}
}

298 
	$adm6996_wrôe_mii_ªg
(
adm6996_¥iv
 *
¥iv
, 
admªg
 
ªg
, 
u16
 
vÆ
)

300 
phy_devi˚
 *
phydev
 = 
¥iv
->priv;

301 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

303 
bus
->
	`wrôe
(bus, 
	`PHYADDR
(
ªg
), 
vÆ
);

304 
	}
}

307 
	$adm6996_£t_íabÀ_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

308 
swôch_vÆ
 *
vÆ
)

310 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

312 i‡(
vÆ
->
vÆue
.
i
 > 1)

313  -
EINVAL
;

315 
¥iv
->
íabÀ_vœn
 = 
vÆ
->
vÆue
.
i
;

318 
	}
};

321 
	$adm6996_gë_íabÀ_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

322 
swôch_vÆ
 *
vÆ
)

324 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

326 
vÆ
->
vÆue
.
i
 = 
¥iv
->
íabÀ_vœn
;

329 
	}
};

331 #ifde‡
DEBUG


334 
	$adm6996_£t_addr
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

335 
swôch_vÆ
 *
vÆ
)

337 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

339 i‡(
vÆ
->
vÆue
.
i
 > 1023)

340  -
EINVAL
;

342 
¥iv
->
addr
 = 
vÆ
->
vÆue
.
i
;

345 
	}
};

348 
	$adm6996_gë_addr
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

349 
swôch_vÆ
 *
vÆ
)

351 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

353 
vÆ
->
vÆue
.
i
 = 
¥iv
->
addr
;

356 
	}
};

359 
	$adm6996_£t_d©a
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

360 
swôch_vÆ
 *
vÆ
)

362 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

364 i‡(
vÆ
->
vÆue
.
i
 > 65535)

365  -
EINVAL
;

367 
	`w16
(
¥iv
,Öriv->
addr
, 
vÆ
->
vÆue
.
i
);

370 
	}
};

373 
	$adm6996_gë_d©a
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

374 
swôch_vÆ
 *
vÆ
)

376 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

378 
vÆ
->
vÆue
.
i
 = 
	`r16
(
¥iv
,Öriv->
addr
);

381 
	}
};

386 
	$adm6996_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
)

388 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

390 
	`¥_devñ
("£t_pvidÖ‹à%d vœ¿%d\n", 
p‹t
, 
vœn
);

392 i‡(
vœn
 > 
ADM_VLAN_MAX_ID
)

393  -
EINVAL
;

395 
¥iv
->
pvid
[
p‹t
] = 
vœn
;

398 
	}
}

401 
	$adm6996_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
)

403 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

405 
	`¥_devñ
("gë_pvidÖ‹à%d\n", 
p‹t
);

406 *
vœn
 = 
¥iv
->
pvid
[
p‹t
];

409 
	}
}

412 
	$adm6996_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

413 
swôch_vÆ
 *
vÆ
)

415 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

417 
	`¥_devñ
("£t_vidÖ‹à%d vid %d\n", 
vÆ
->
p‹t_vœn
, vÆ->
vÆue
.
i
);

419 i‡(
vÆ
->
vÆue
.
i
 > 
ADM_VLAN_MAX_ID
)

420  -
EINVAL
;

422 
¥iv
->
vœn_id
[
vÆ
->
p‹t_vœn
] = vÆ->
vÆue
.
i
;

425 
	}
};

428 
	$adm6996_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

429 
swôch_vÆ
 *
vÆ
)

431 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

433 
	`¥_devñ
("gë_vidÖ‹à%d\n", 
vÆ
->
p‹t_vœn
);

435 
vÆ
->
vÆue
.
i
 = 
¥iv
->
vœn_id
[vÆ->
p‹t_vœn
];

438 
	}
};

441 
	$adm6996_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

443 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

444 
u8
 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

445 
u8
 
ègged
 = 
¥iv
->
vœn_ègged
[
vÆ
->
p‹t_vœn
];

446 
i
;

448 
	`¥_devñ
("gë_p‹t†p‹t_vœ¿%d\n", 
vÆ
->
p‹t_vœn
);

450 
vÆ
->
Àn
 = 0;

452 
i
 = 0; i < 
ADM_NUM_PORTS
; i++) {

453 
swôch_p‹t
 *
p
;

455 i‡(!(
p‹ts
 & (1 << 
i
)))

458 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

459 
p
->
id
 = 
i
;

460 i‡(
ègged
 & (1 << 
i
))

461 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

463 
p
->
Êags
 = 0;

467 
	}
};

470 
	$adm6996_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

472 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

473 
u8
 *
p‹ts
 = &
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

474 
u8
 *
ègged
 = &
¥iv
->
vœn_ègged
[
vÆ
->
p‹t_vœn
];

475 
i
;

477 
	`¥_devñ
("£t_p‹t†p‹t_vœ¿%dÖ‹ts", 
vÆ
->
p‹t_vœn
);

479 *
p‹ts
 = 0;

480 *
ègged
 = 0;

482 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

483 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

485 #ifde‡
DEBUG


486 
	`¥_c⁄t
(" %d%s", 
p
->
id
,

487 ((
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)) ? "T" :

491 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)) {

492 *
ègged
 |(1 << 
p
->
id
);

493 
¥iv
->
ègged_p‹ts
 |(1 << 
p
->
id
);

496 *
p‹ts
 |(1 << 
p
->
id
);

499 #ifde‡
DEBUG


500 
	`¥_c⁄t
("\n");

504 
	}
};

510 
	$adm6996_íabÀ_vœn
(
adm6996_¥iv
 *
¥iv
)

512 
u16
 
ªg
;

514 
ªg
 = 
	`r16
(
¥iv
, 
ADM_OTBE_P2_PVID
);

515 
ªg
 &~(
ADM_OTBE_MASK
);

516 
	`w16
(
¥iv
, 
ADM_OTBE_P2_PVID
, 
ªg
);

517 
ªg
 = 
	`r16
(
¥iv
, 
ADM_IFNTE
);

518 
ªg
 &~(
ADM_IFNTE_MASK
);

519 
	`w16
(
¥iv
, 
ADM_IFNTE
, 
ªg
);

520 
ªg
 = 
	`r16
(
¥iv
, 
ADM_VID_CHECK
);

521 
ªg
 |
ADM_VID_CHECK_MASK
;

522 
	`w16
(
¥iv
, 
ADM_VID_CHECK
, 
ªg
);

523 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC0
);

524 
ªg
 |
ADM_NTTE
;

525 
ªg
 &~(
ADM_RVID1
);

526 
	`w16
(
¥iv
, 
ADM_SYSC0
, 
ªg
);

527 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC3
);

528 
ªg
 |
ADM_TBV
;

529 
	`w16
(
¥iv
, 
ADM_SYSC3
, 
ªg
);

530 
	}
}

533 
	$adm6996_íabÀ_vœn_6996l
(
adm6996_¥iv
 *
¥iv
)

535 
u16
 
ªg
;

537 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC3
);

538 
ªg
 |
ADM_TBV
;

539 
ªg
 |
ADM_MAC_CLONE
;

540 
	`w16
(
¥iv
, 
ADM_SYSC3
, 
ªg
);

541 
	}
}

552 
	$adm6996_dißbÀ_vœn
(
adm6996_¥iv
 *
¥iv
)

554 
u16
 
ªg
;

555 
i
;

557 
i
 = 0; i < 
ADM_NUM_VLANS
; i++) {

558 
ªg
 = 
ADM_VLAN_FILT_MEMBER_MASK
;

559 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_L
(
i
), 
ªg
);

560 
ªg
 = 
ADM_VLAN_FILT_VALID
 | 
	`ADM_VLAN_FILT_VID
(1);

561 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_H
(
i
), 
ªg
);

564 
ªg
 = 
	`r16
(
¥iv
, 
ADM_OTBE_P2_PVID
);

565 
ªg
 |
ADM_OTBE_MASK
;

566 
	`w16
(
¥iv
, 
ADM_OTBE_P2_PVID
, 
ªg
);

567 
ªg
 = 
	`r16
(
¥iv
, 
ADM_IFNTE
);

568 
ªg
 |
ADM_IFNTE_MASK
;

569 
	`w16
(
¥iv
, 
ADM_IFNTE
, 
ªg
);

570 
ªg
 = 
	`r16
(
¥iv
, 
ADM_VID_CHECK
);

571 
ªg
 &~(
ADM_VID_CHECK_MASK
);

572 
	`w16
(
¥iv
, 
ADM_VID_CHECK
, 
ªg
);

573 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC0
);

574 
ªg
 &~(
ADM_NTTE
);

575 
ªg
 |
ADM_RVID1
;

576 
	`w16
(
¥iv
, 
ADM_SYSC0
, 
ªg
);

577 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC3
);

578 
ªg
 &~(
ADM_TBV
);

579 
	`w16
(
¥iv
, 
ADM_SYSC3
, 
ªg
);

580 
	}
}

591 
	$adm6996_dißbÀ_vœn_6996l
(
adm6996_¥iv
 *
¥iv
)

593 
u16
 
ªg
;

594 
i
;

596 
i
 = 0; i < 
ADM_NUM_VLANS
; i++) {

597 
	`w16
(
¥iv
, 
	`ADM_VLAN_MAP
(
i
), 0);

600 
ªg
 = 
	`r16
(
¥iv
, 
ADM_SYSC3
);

601 
ªg
 &~(
ADM_TBV
);

602 
ªg
 &~(
ADM_MAC_CLONE
);

603 
	`w16
(
¥iv
, 
ADM_SYSC3
, 
ªg
);

604 
	}
}

610 
	$adm6996_≠∂y_p‹t_pvids
(
adm6996_¥iv
 *
¥iv
)

612 
u16
 
ªg
;

613 
i
;

615 
i
 = 0; i < 
ADM_NUM_PORTS
; i++) {

616 
ªg
 = 
	`r16
(
¥iv
, 
adm_p‹tcfg
[
i
]);

617 
ªg
 &~(
ADM_PORTCFG_PVID_MASK
);

618 
ªg
 |
	`ADM_PORTCFG_PVID
(
¥iv
->
pvid
[
i
]);

619 i‡(
¥iv
->
modñ
 =
ADM6996L
) {

620 i‡(
¥iv
->
ègged_p‹ts
 & (1 << 
i
))

621 
ªg
 |= (1 << 4);

623 
ªg
 &= ~(1 << 4);

625 
	`w16
(
¥iv
, 
adm_p‹tcfg
[
i
], 
ªg
);

628 
	`w16
(
¥iv
, 
ADM_P0_PVID
, 
	`ADM_P0_PVID_VAL
’riv->
pvid
[0]));

629 
	`w16
(
¥iv
, 
ADM_P1_PVID
, 
	`ADM_P1_PVID_VAL
’riv->
pvid
[1]));

630 
ªg
 = 
	`r16
(
¥iv
, 
ADM_OTBE_P2_PVID
);

631 
ªg
 &~(
ADM_P2_PVID_MASK
);

632 
ªg
 |
	`ADM_P2_PVID_VAL
(
¥iv
->
pvid
[2]);

633 
	`w16
(
¥iv
, 
ADM_OTBE_P2_PVID
, 
ªg
);

634 
ªg
 = 
	`ADM_P3_PVID_VAL
(
¥iv
->
pvid
[3]);

635 
ªg
 |
	`ADM_P4_PVID_VAL
(
¥iv
->
pvid
[4]);

636 
	`w16
(
¥iv
, 
ADM_P3_P4_PVID
, 
ªg
);

637 
ªg
 = 
	`r16
(
¥iv
, 
ADM_P5_PVID
);

638 
ªg
 &~(
ADM_P2_PVID_MASK
);

639 
ªg
 |
	`ADM_P5_PVID_VAL
(
¥iv
->
pvid
[5]);

640 
	`w16
(
¥iv
, 
ADM_P5_PVID
, 
ªg
);

641 
	}
}

647 
	$adm6996_≠∂y_vœn_fûãrs
(
adm6996_¥iv
 *
¥iv
)

649 
u8
 
p‹ts
, 
ègged
;

650 
u16
 
vid
, 
ªg
;

651 
i
;

653 
i
 = 0; i < 
ADM_NUM_VLANS
; i++) {

654 
vid
 = 
¥iv
->
vœn_id
[
i
];

655 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
i
];

656 
ègged
 = 
¥iv
->
vœn_ègged
[
i
];

658 i‡(
p‹ts
 == 0) {

660 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_H
(
i
), 0);

661 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_L
(
i
), 0);

665 
ªg
 = 
	`ADM_VLAN_FILT_MEMBER
(
p‹ts
);

666 
ªg
 |
	`ADM_VLAN_FILT_TAGGED
(
ègged
);

667 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_L
(
i
), 
ªg
);

668 
ªg
 = 
ADM_VLAN_FILT_VALID
 | 
	`ADM_VLAN_FILT_VID
(
vid
);

669 
	`w16
(
¥iv
, 
	`ADM_VLAN_FILT_H
(
i
), 
ªg
);

671 
	}
}

674 
	$adm6996_≠∂y_vœn_fûãrs_6996l
(
adm6996_¥iv
 *
¥iv
)

676 
u8
 
p‹ts
;

677 
u16
 
ªg
;

678 
i
;

680 
i
 = 0; i < 
ADM_NUM_VLANS
; i++) {

681 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
i
];

683 i‡(
p‹ts
 == 0) {

685 
	`w16
(
¥iv
, 
	`ADM_VLAN_MAP
(
i
), 0);

688 
ªg
 = 
	`ADM_VLAN_FILT
(
p‹ts
);

689 
	`w16
(
¥iv
, 
	`ADM_VLAN_MAP
(
i
), 
ªg
);

692 
	}
}

695 
	$adm6996_hw_≠∂y
(
swôch_dev
 *
dev
)

697 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

699 
	`¥_devñ
("hw_apply\n");

701 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

703 i‡(!
¥iv
->
íabÀ_vœn
) {

704 i‡(
¥iv
->
vœn_íabÀd
) {

705 i‡(
¥iv
->
modñ
 =
ADM6996L
)

706 
	`adm6996_dißbÀ_vœn_6996l
(
¥iv
);

708 
	`adm6996_dißbÀ_vœn
(
¥iv
);

709 
¥iv
->
vœn_íabÀd
 = 0;

711 
out
;

714 i‡(!
¥iv
->
vœn_íabÀd
) {

715 i‡(
¥iv
->
modñ
 =
ADM6996L
)

716 
	`adm6996_íabÀ_vœn_6996l
(
¥iv
);

718 
	`adm6996_íabÀ_vœn
(
¥iv
);

719 
¥iv
->
vœn_íabÀd
 = 1;

722 
	`adm6996_≠∂y_p‹t_pvids
(
¥iv
);

723 i‡(
¥iv
->
modñ
 =
ADM6996L
)

724 
	`adm6996_≠∂y_vœn_fûãrs_6996l
(
¥iv
);

726 
	`adm6996_≠∂y_vœn_fûãrs
(
¥iv
);

728 
out
:

729 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

732 
	}
}

743 
	$adm6996_≥rf‹m_ª£t
 (
adm6996_¥iv
 *
¥iv
)

745 
i
;

748 
i
 = 0; i < 
ADM_NUM_PORTS
 - 1; i++) {

749 
	`w16
(
¥iv
, 
adm_p‹tcfg
[
i
], 
ADM_PORTCFG_INIT
 |

750 
	`ADM_PORTCFG_PVID
(0));

752 
	`w16
(
¥iv
, 
adm_p‹tcfg
[5], 
ADM_PORTCFG_CPU
);

754 i‡(
¥iv
->
modñ
 =
ADM6996M
 ||Öriv->modñ =
ADM6996FC
) {

756 
i
 = 0; i < 
ADM_PHY_PORTS
; i++) {

757 
	`w16
(
¥iv
, 
	`ADM_PHY_PORT
(
i
), 
ADM_PHYCFG_INIT
);

761 
¥iv
->
íabÀ_vœn
 = 0;

762 
¥iv
->
vœn_íabÀd
 = 0;

764 
i
 = 0; i < 
ADM_NUM_PORTS
; i++) {

765 
¥iv
->
pvid
[
i
] = 0;

768 
i
 = 0; i < 
ADM_NUM_VLANS
; i++) {

769 
¥iv
->
vœn_id
[
i
] = i;

770 
¥iv
->
vœn_èbÀ
[
i
] = 0;

771 
¥iv
->
vœn_ègged
[
i
] = 0;

774 i‡(
¥iv
->
modñ
 =
ADM6996M
) {

776 
	`w16
 (
¥iv
, 
ADM_VLAN_PRIOMAP
, 0);

778 
	`adm6996_dißbÀ_vœn
(
¥iv
);

779 
	`adm6996_≠∂y_p‹t_pvids
(
¥iv
);

780 } i‡(
¥iv
->
modñ
 =
ADM6996L
) {

782 
	`w16
 (
¥iv
, 
ADM_VLAN_PRIOMAP
, 0);

784 
	`adm6996_dißbÀ_vœn_6996l
(
¥iv
);

785 
	`adm6996_≠∂y_p‹t_pvids
(
¥iv
);

787 
	}
}

790 
	$adm6996_ª£t_swôch
(
swôch_dev
 *
dev
)

792 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

794 
	`¥_devñ
("reset\n");

796 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

797 
	`adm6996_≥rf‹m_ª£t
 (
¥iv
);

798 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

800 
	}
}

803 
	$adm6996_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

804 
swôch_p‹t_lök
 *
lök
)

806 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

808 
u16
 
ªg
 = 0;

810 i‡(
p‹t
 >
ADM_NUM_PORTS
)

811  -
EINVAL
;

813 
p‹t
) {

815 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS0
);

818 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS0
);

819 
ªg
 =Ñeg >> 8;

822 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS1
);

825 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS1
);

826 
ªg
 =Ñeg >> 8;

829 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS1
);

830 
ªg
 =Ñeg >> 12;

833 
ªg
 = 
	`r16
(
¥iv
, 
ADM_PS2
);

835 
ªg
 = (reg & 3) | ((reg & 24) >> 1);

838  -
EINVAL
;

841 
lök
->lök = 
ªg
 & 
ADM_PS_LS
;

842 i‡(!
lök
->link)

844 
lök
->
™eg
 = 
åue
;

845 
lök
->
du∂ex
 = 
ªg
 & 
ADM_PS_DS
;

846 
lök
->
tx_Êow
 = 
ªg
 & 
ADM_PS_FCS
;

847 
lök
->
rx_Êow
 = 
ªg
 & 
ADM_PS_FCS
;

848 i‡(
ªg
 & 
ADM_PS_SS
)

849 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

851 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

854 
	}
}

857 
	$adm6996_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

858 c⁄° 
swôch_©å
 *
©å
,

859 
swôch_vÆ
 *
vÆ
)

861 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

862 
p‹t
;

863 *
buf
 = 
¥iv
->buf;

864 
i
, 
Àn
 = 0;

865 
u32
 
ªg
 = 0;

867 
p‹t
 = 
vÆ
->
p‹t_vœn
;

868 i‡(
p‹t
 >
ADM_NUM_PORTS
)

869  -
EINVAL
;

871 
	`muãx_lock
(&
¥iv
->
mib_lock
);

873 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->buf) -Üen,

875 
p‹t
);

877 
i
 = 0; i < 
	`ARRAY_SIZE
(
adm6996_mibs
); i++) {

878 
ªg
 = 
	`r16
(
¥iv
, 
adm6996_mibs
[
i
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
));

879 
ªg
 +
	`r16
(
¥iv
, 
adm6996_mibs
[
i
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
) + 1) << 16;

880 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->buf) -Üen,

882 
adm6996_mibs
[
i
].
«me
,

883 
ªg
);

886 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

888 
vÆ
->
vÆue
.
s
 = 
buf
;

889 
vÆ
->
Àn
 =Üen;

892 
	}
}

895 
	$adm6996_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

896 
swôch_p‹t_°©s
 *
°©s
)

898 
adm6996_¥iv
 *
¥iv
 = 
	`to_adm
(
dev
);

899 
id
;

900 
u32
 
ªg
 = 0;

902 i‡(
p‹t
 >
ADM_NUM_PORTS
)

903  -
EINVAL
;

905 
	`muãx_lock
(&
¥iv
->
mib_lock
);

907 
id
 = 
ADM6996_MIB_TXB_ID
;

908 
ªg
 = 
	`r16
(
¥iv
, 
adm6996_mibs
[
id
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
));

909 
ªg
 +
	`r16
(
¥iv
, 
adm6996_mibs
[
id
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
) + 1) << 16;

910 
°©s
->
tx_byãs
 = 
ªg
;

912 
id
 = 
ADM6996_MIB_RXB_ID
;

913 
ªg
 = 
	`r16
(
¥iv
, 
adm6996_mibs
[
id
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
));

914 
ªg
 +
	`r16
(
¥iv
, 
adm6996_mibs
[
id
].
off£t
 + 
	`ADM_OFFSET_PORT
(
p‹t
) + 1) << 16;

915 
°©s
->
rx_byãs
 = 
ªg
;

917 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

920 
	}
}

922 
swôch_©å
 
	gadm6996_globÆs
[] = {

924 .
ty≥
 = 
SWITCH_TYPE_INT
,

925 .
	g«me
 = "enable_vlan",

926 .
	gdes¸ùti⁄
 = "Enable VLANs",

927 .
	g£t
 = 
adm6996_£t_íabÀ_vœn
,

928 .
	ggë
 = 
adm6996_gë_íabÀ_vœn
,

930 #ifde‡
DEBUG


932 .
	gty≥
 = 
SWITCH_TYPE_INT
,

933 .
	g«me
 = "addr",

934 .
	gdes¸ùti⁄
 =

936 .
	g£t
 = 
adm6996_£t_addr
,

937 .
	ggë
 = 
adm6996_gë_addr
,

940 .
	gty≥
 = 
SWITCH_TYPE_INT
,

941 .
	g«me
 = "data",

942 .
	gdes¸ùti⁄
 =

944 .
	g£t
 = 
adm6996_£t_d©a
,

945 .
	ggë
 = 
adm6996_gë_d©a
,

950 
swôch_©å
 
	gadm6996_p‹t
[] = {

952 .
ty≥
 = 
SWITCH_TYPE_STRING
,

953 .
	g«me
 = "mib",

954 .
	gdes¸ùti⁄
 = "GetÖort's MIB counters",

955 .
	g£t
 = 
NULL
,

956 .
	ggë
 = 
adm6996_sw_gë_p‹t_mib
,

960 
swôch_©å
 
	gadm6996_vœn
[] = {

962 .
ty≥
 = 
SWITCH_TYPE_INT
,

963 .
	g«me
 = "vid",

964 .
	gdes¸ùti⁄
 = "VLAN ID",

965 .
	g£t
 = 
adm6996_£t_vid
,

966 .
	ggë
 = 
adm6996_gë_vid
,

970 
swôch_dev_›s
 
	gadm6996_›s
 = {

971 .
©å_globÆ
 = {

972 .
©å
 = 
adm6996_globÆs
,

973 .
	gn_©å
 = 
ARRAY_SIZE
(
adm6996_globÆs
),

975 .
	g©å_p‹t
 = {

976 .
©å
 = 
adm6996_p‹t
,

977 .
	gn_©å
 = 
ARRAY_SIZE
(
adm6996_p‹t
),

979 .
	g©å_vœn
 = {

980 .
©å
 = 
adm6996_vœn
,

981 .
	gn_©å
 = 
ARRAY_SIZE
(
adm6996_vœn
),

983 .
	ggë_p‹t_pvid
 = 
adm6996_gë_pvid
,

984 .
	g£t_p‹t_pvid
 = 
adm6996_£t_pvid
,

985 .
	ggë_vœn_p‹ts
 = 
adm6996_gë_p‹ts
,

986 .
	g£t_vœn_p‹ts
 = 
adm6996_£t_p‹ts
,

987 .
	g≠∂y_c⁄fig
 = 
adm6996_hw_≠∂y
,

988 .
	gª£t_swôch
 = 
adm6996_ª£t_swôch
,

989 .
	ggë_p‹t_lök
 = 
adm6996_gë_p‹t_lök
,

990 .
	ggë_p‹t_°©s
 = 
adm6996_gë_p‹t_°©s
,

993 
	$adm6996_swôch_öô
(
adm6996_¥iv
 *
¥iv
, c⁄° *
Æüs
, 
√t_devi˚
 *
√tdev
)

995 
swôch_dev
 *
swdev
;

996 
u16
 
ã°
, 
ﬁd
;

998 i‡(!
¥iv
->
modñ
) {

1000 
ﬁd
 = 
	`r16
(
¥iv
, 
ADM_VID_CHECK
);

1001 
ã°
 = 
ﬁd
 ^ (1 << 12);

1002 
	`w16
(
¥iv
, 
ADM_VID_CHECK
, 
ã°
);

1003 
ã°
 ^
	`r16
(
¥iv
, 
ADM_VID_CHECK
);

1004 i‡(
ã°
 & (1 << 12)) {

1009 
¥iv
->
modñ
 = 
ADM6996FC
;

1012 
¥iv
->
modñ
 = 
ADM6996M
;

1013 
	`w16
(
¥iv
, 
ADM_VID_CHECK
, 
ﬁd
);

1017 
swdev
 = &
¥iv
->
dev
;

1018 
swdev
->
«me
 = (
adm6996_modñ_«me
[
¥iv
->
modñ
]);

1019 
swdev
->
˝u_p‹t
 = 
ADM_CPU_PORT
;

1020 
swdev
->
p‹ts
 = 
ADM_NUM_PORTS
;

1021 
swdev
->
vœns
 = 
ADM_NUM_VLANS
;

1022 
swdev
->
›s
 = &
adm6996_›s
;

1023 
swdev
->
Æüs
 =álias;

1027 i‡(
¥iv
->
modñ
 =
ADM6996L
) {

1028 
adm6996_›s
.
©å_p‹t
.
n_©å
 = 0;

1029 
adm6996_›s
.
gë_p‹t_lök
 = 
NULL
;

1032 
	`¥_öfo
 ("%s: %†modñ PHY found.\n", 
Æüs
, 
swdev
->
«me
);

1034 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1035 
	`adm6996_≥rf‹m_ª£t
 (
¥iv
);

1036 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1038 i‡(
¥iv
->
modñ
 =
ADM6996M
 ||Öriv->modñ =
ADM6996L
) {

1039  
	`ªgi°î_swôch
(
swdev
, 
√tdev
);

1042  -
ENODEV
;

1043 
	}
}

1045 
	$adm6996_c⁄fig_öô
(
phy_devi˚
 *
pdev
)

1047 
adm6996_¥iv
 *
¥iv
;

1048 
ªt
;

1050 
pdev
->
suµ‹ãd
 = 
ADVERTISED_100ba£T_FuŒ
;

1051 
pdev
->
advîtisög
 = 
ADVERTISED_100ba£T_FuŒ
;

1053 i‡(
pdev
->
mdio
.
addr
 != 0) {

1054 
	`¥_öfo
 ("%s: PHY overlaps ADM6996,Öroviding fixed PHY 0x%x.\n"

1055 , 
pdev
->
©èched_dev
->
«me
,Ödev->
mdio
.
addr
);

1059 
¥iv
 = 
	`devm_kzÆloc
(&
pdev
->
mdio
.
dev
, (
adm6996_¥iv
), 
GFP_KERNEL
);

1060 i‡(!
¥iv
)

1061  -
ENOMEM
;

1063 
	`muãx_öô
(&
¥iv
->
ªg_muãx
);

1064 
	`muãx_öô
(&
¥iv
->
mib_lock
);

1065 
¥iv
->¥iv = 
pdev
;

1066 
¥iv
->
ªad
 = 
adm6996_ªad_mii_ªg
;

1067 
¥iv
->
wrôe
 = 
adm6996_wrôe_mii_ªg
;

1069 
ªt
 = 
	`adm6996_swôch_öô
(
¥iv
, 
pdev
->
©èched_dev
->
«me
,Ödev->attached_dev);

1070 i‡(
ªt
 < 0)

1071  
ªt
;

1073 
pdev
->
¥iv
 =Öriv;

1076 
	}
}

1081 
	$adm6996_ªad_°©us
(
phy_devi˚
 *
phydev
)

1083 
phydev
->
•ìd
 = 
SPEED_100
;

1084 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

1085 
phydev
->
lök
 = 1;

1087 
phydev
->
°©e
 = 
PHY_RUNNING
;

1088 
	`√tif_ˇºõr_⁄
(
phydev
->
©èched_dev
);

1089 
phydev
->
	`adju°_lök
’hydev->
©èched_dev
);

1092 
	}
}

1097 
	$adm6996_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

1100 
	}
}

1102 
	$adm6996_fixup
(
phy_devi˚
 *
dev
)

1104 
mii_bus
 *
bus
 = 
dev
->
mdio
.bus;

1105 
u16
 
ªg
;

1108 i‡(
dev
->
mdio
.
addr
 > 10)

1112 
ªg
 = 
bus
->
	`ªad
(bus, 
	`PHYADDR
(
ADM_SIG0
)Ë& 
ADM_SIG0_MASK
;

1113 i‡(
ªg
 !
ADM_SIG0_VAL
)

1116 
ªg
 = 
bus
->
	`ªad
(bus, 
	`PHYADDR
(
ADM_SIG1
)Ë& 
ADM_SIG1_MASK
;

1117 i‡(
ªg
 !
ADM_SIG1_VAL
)

1120 
dev
->
phy_id
 = (
ADM_SIG0_VAL
 << 16Ë| 
ADM_SIG1_VAL
;

1123 
	}
}

1125 
	$adm6996_¥obe
(
phy_devi˚
 *
pdev
)

1128 
	}
}

1130 
	$adm6996_ªmove
(
phy_devi˚
 *
pdev
)

1132 
adm6996_¥iv
 *
¥iv
 = 
	`phy_to_adm
(
pdev
);

1134 i‡(
¥iv
 && (¥iv->
modñ
 =
ADM6996M
 ||Öriv->modñ =
ADM6996L
))

1135 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

1136 
	}
}

1138 
	$adm6996_so·_ª£t
(
phy_devi˚
 *
phydev
)

1142 
	}
}

1144 
phy_drivî
 
	gadm6996_phy_drivî
 = {

1145 .
«me
 = "Infineon ADM6996",

1146 .
	gphy_id
 = (
ADM_SIG0_VAL
 << 16Ë| 
ADM_SIG1_VAL
,

1147 .
	gphy_id_mask
 = 0xffffffff,

1148 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

1149 .
	g¥obe
 = 
adm6996_¥obe
,

1150 .
	gªmove
 = 
adm6996_ªmove
,

1151 .
	gc⁄fig_öô
 = &
adm6996_c⁄fig_öô
,

1152 .
	gc⁄fig_™eg
 = &
adm6996_c⁄fig_™eg
,

1153 .
	gªad_°©us
 = &
adm6996_ªad_°©us
,

1154 .
	gso·_ª£t
 = 
adm6996_so·_ª£t
,

1157 
	$adm6996_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1159 
adm6996_gpio_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

1160 
adm6996_¥iv
 *
¥iv
;

1161 
ªt
;

1163 i‡(!
pd©a
)

1164  -
EINVAL
;

1166 
¥iv
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
adm6996_¥iv
), 
GFP_KERNEL
);

1167 i‡(!
¥iv
)

1168  -
ENOMEM
;

1170 
	`muãx_öô
(&
¥iv
->
ªg_muãx
);

1171 
	`muãx_öô
(&
¥iv
->
mib_lock
);

1173 
¥iv
->
ìcs
 = 
pd©a
->eecs;

1174 
¥iv
->
ìdi
 = 
pd©a
->eedi;

1175 
¥iv
->
ìsk
 = 
pd©a
->eesk;

1177 
¥iv
->
modñ
 = 
pd©a
->model;

1178 
¥iv
->
ªad
 = 
adm6996_ªad_gpio_ªg
;

1179 
¥iv
->
wrôe
 = 
adm6996_wrôe_gpio_ªg
;

1181 
ªt
 = 
	`devm_gpio_ªque°
(&
pdev
->
dev
, 
¥iv
->
ìcs
, "adm_eecs");

1182 i‡(
ªt
)

1183  
ªt
;

1184 
ªt
 = 
	`devm_gpio_ªque°
(&
pdev
->
dev
, 
¥iv
->
ìdi
, "adm_eedi");

1185 i‡(
ªt
)

1186  
ªt
;

1187 
ªt
 = 
	`devm_gpio_ªque°
(&
pdev
->
dev
, 
¥iv
->
ìsk
, "adm_eesk");

1188 i‡(
ªt
)

1189  
ªt
;

1191 
ªt
 = 
	`adm6996_swôch_öô
(
¥iv
, 
	`dev_«me
(&
pdev
->
dev
), 
NULL
);

1192 i‡(
ªt
 < 0)

1193  
ªt
;

1195 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
¥iv
);

1198 
	}
}

1200 
	$adm6996_gpio_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1202 
adm6996_¥iv
 *
¥iv
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1204 i‡(
¥iv
 && (¥iv->
modñ
 =
ADM6996M
 ||Öriv->modñ =
ADM6996L
))

1205 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

1208 
	}
}

1210 
∂©f‹m_drivî
 
	gadm6996_gpio_drivî
 = {

1211 .
¥obe
 = 
adm6996_gpio_¥obe
,

1212 .
	gªmove
 = 
adm6996_gpio_ªmove
,

1213 .
	gdrivî
 = {

1214 .
«me
 = "adm6996_gpio",

1218 
__öô
 
	$adm6996_öô
()

1220 
îr
;

1222 
	`phy_ªgi°î_fixup_f‹_id
(
PHY_ANY_ID
, 
adm6996_fixup
);

1223 
îr
 = 
	`phy_drivî_ªgi°î
(&
adm6996_phy_drivî
, 
THIS_MODULE
);

1224 i‡(
îr
)

1225  
îr
;

1227 
îr
 = 
	`∂©f‹m_drivî_ªgi°î
(&
adm6996_gpio_drivî
);

1228 i‡(
îr
)

1229 
	`phy_drivî_uƒegi°î
(&
adm6996_phy_drivî
);

1231  
îr
;

1232 
	}
}

1234 
__exô
 
	$adm6996_exô
()

1236 
	`∂©f‹m_drivî_uƒegi°î
(&
adm6996_gpio_drivî
);

1237 
	`phy_drivî_uƒegi°î
(&
adm6996_phy_drivî
);

1238 
	}
}

1240 
moduÀ_öô
(
adm6996_öô
);

1241 
moduÀ_exô
(
adm6996_exô
);

	@linux/generic/files/drivers/net/phy/adm6996.h

11 #i‚de‡
__ADM6996_H


12 
	#__ADM6996_H


	)

19 
	#ADM_PHY_PORTS
 4

	)

20 
	#ADM_NUM_PORTS
 6

	)

21 
	#ADM_CPU_PORT
 5

	)

23 
	#ADM_NUM_VLANS
 16

	)

24 
	#ADM_VLAN_MAX_ID
 4094

	)

26 
	eadmªg
 {

27 
	mADM_EEPROM_BASE
 = 0x0,

28 
	mADM_P0_CFG
 = 
ADM_EEPROM_BASE
 + 1,

29 
	mADM_P1_CFG
 = 
ADM_EEPROM_BASE
 + 3,

30 
	mADM_P2_CFG
 = 
ADM_EEPROM_BASE
 + 5,

31 
	mADM_P3_CFG
 = 
ADM_EEPROM_BASE
 + 7,

32 
	mADM_P4_CFG
 = 
ADM_EEPROM_BASE
 + 8,

33 
	mADM_P5_CFG
 = 
ADM_EEPROM_BASE
 + 9,

34 
	mADM_SYSC0
 = 
ADM_EEPROM_BASE
 + 0xa,

35 
	mADM_VLAN_PRIOMAP
 = 
ADM_EEPROM_BASE
 + 0xe,

36 
	mADM_SYSC3
 = 
ADM_EEPROM_BASE
 + 0x11,

38 
	mADM_IFNTE
 = 
ADM_EEPROM_BASE
 + 0x20,

39 
	mADM_VID_CHECK
 = 
ADM_EEPROM_BASE
 + 0x26,

40 
	mADM_P0_PVID
 = 
ADM_EEPROM_BASE
 + 0x28,

41 
	mADM_P1_PVID
 = 
ADM_EEPROM_BASE
 + 0x29,

43 
	mADM_OTBE_P2_PVID
 = 
ADM_EEPROM_BASE
 + 0x2a,

44 
	mADM_P3_P4_PVID
 = 
ADM_EEPROM_BASE
 + 0x2b,

45 
	mADM_P5_PVID
 = 
ADM_EEPROM_BASE
 + 0x2c,

46 
	mADM_EEPROM_EXT_BASE
 = 0x40,

47 
	#ADM_VLAN_FILT_L
(
n
Ë(
ADM_EEPROM_EXT_BASE
 + 2 * (n))

	)

48 
	#ADM_VLAN_FILT_H
(
n
Ë(
ADM_EEPROM_EXT_BASE
 + 1 + 2 * (n))

	)

49 
	#ADM_VLAN_MAP
(
n
Ë(
ADM_EEPROM_BASE
 + 0x13 +Ç)

	)

50 
	mADM_COUNTER_BASE
 = 0xa0,

51 
	mADM_SIG0
 = 
ADM_COUNTER_BASE
 + 0,

52 
	mADM_SIG1
 = 
ADM_COUNTER_BASE
 + 1,

53 
	mADM_PS0
 = 
ADM_COUNTER_BASE
 + 2,

54 
	mADM_PS1
 = 
ADM_COUNTER_BASE
 + 3,

55 
	mADM_PS2
 = 
ADM_COUNTER_BASE
 + 4,

56 
	mADM_CL0
 = 
ADM_COUNTER_BASE
 + 8,

57 
	mADM_CL6
 = 
ADM_COUNTER_BASE
 + 0x1a,

58 
	mADM_CL12
 = 
ADM_COUNTER_BASE
 + 0x2c,

59 
	mADM_CL18
 = 
ADM_COUNTER_BASE
 + 0x3e,

60 
	mADM_CL24
 = 
ADM_COUNTER_BASE
 + 0x50,

61 
	mADM_CL30
 = 
ADM_COUNTER_BASE
 + 0x62,

62 
	#ADM_OFFSET_PORT
(
n
Ë(“ * 4Ë- (¿/ 4Ë* 2 - (¿/ 5Ë* 2)

	)

63 
	mADM_PHY_BASE
 = 0x200,

64 
	#ADM_PHY_PORT
(
n
Ë(
ADM_PHY_BASE
 + (0x20 *Ç))

	)

68 
	#ADM_SIG0_MASK
 0xffff

	)

69 
	#ADM_SIG0_VAL
 0x1023

	)

70 
	#ADM_SIG1_MASK
 0xffff

	)

71 
	#ADM_SIG1_VAL
 0x0007

	)

74 
	mADM_PHYCFG_COLTST
 = (1 << 7),

75 
	mADM_PHYCFG_DPLX
 = (1 << 8),

76 
	mADM_PHYCFG_ANEN_RST
 = (1 << 9),

77 
	mADM_PHYCFG_ISO
 = (1 << 10),

78 
	mADM_PHYCFG_PDN
 = (1 << 11),

79 
	mADM_PHYCFG_ANEN
 = (1 << 12),

80 
	mADM_PHYCFG_SPEED_100
 = (1 << 13),

81 
	mADM_PHYCFG_LPBK
 = (1 << 14),

82 
	mADM_PHYCFG_RST
 = (1 << 15),

83 
	mADM_PHYCFG_INIT
 = (

84 
ADM_PHYCFG_RST
 |

85 
ADM_PHYCFG_SPEED_100
 |

86 
ADM_PHYCFG_ANEN
 |

87 
ADM_PHYCFG_ANEN_RST


92 
	mADM_PORTCFG_FC
 = (1 << 0),

93 
	mADM_PORTCFG_AN
 = (1 << 1),

94 
	mADM_PORTCFG_SPEED_100
 = (1 << 2),

95 
	mADM_PORTCFG_DPLX
 = (1 << 3),

96 
	mADM_PORTCFG_OT
 = (1 << 4),

97 
	mADM_PORTCFG_PD
 = (1 << 5),

98 
	mADM_PORTCFG_TV_PRIO
 = (1 << 6),

100 
	mADM_PORTCFG_PPE
 = (1 << 7),

101 
	mADM_PORTCFG_PP_S
 = (1 << 8),

102 
	mADM_PORTCFG_PVID_BASE
 = (1 << 10),

103 
	mADM_PORTCFG_FSE
 = (1 << 14),

104 
	mADM_PORTCFG_CAM
 = (1 << 15),

106 
	mADM_PORTCFG_INIT
 = (

107 
ADM_PORTCFG_FC
 |

108 
ADM_PORTCFG_AN
 |

109 
ADM_PORTCFG_SPEED_100
 |

110 
ADM_PORTCFG_DPLX
 |

111 
ADM_PORTCFG_CAM


113 
	mADM_PORTCFG_CPU
 = (

114 
ADM_PORTCFG_FC
 |

115 
ADM_PORTCFG_SPEED_100
 |

116 
ADM_PORTCFG_OT
 |

117 
ADM_PORTCFG_DPLX


121 
	#ADM_PORTCFG_PPID
(
n
Ë(“ & 0x3Ë<< 8)

	)

122 
	#ADM_PORTCFG_PVID
(
n
Ë(“ & 0xfË<< 10)

	)

123 
	#ADM_PORTCFG_PVID_MASK
 (0x‡<< 10)

	)

125 
	#ADM_IFNTE_MASK
 (0x3‡<< 9)

	)

126 
	#ADM_VID_CHECK_MASK
 (0x3‡<< 6)

	)

128 
	#ADM_P0_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 0)

	)

129 
	#ADM_P1_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 0)

	)

130 
	#ADM_P2_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 0)

	)

131 
	#ADM_P3_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 0)

	)

132 
	#ADM_P4_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 8)

	)

133 
	#ADM_P5_PVID_VAL
(
n
Ë(((“Ë& 0xff0Ë>> 4Ë<< 0)

	)

134 
	#ADM_P2_PVID_MASK
 0xff

	)

136 
	#ADM_OTBE
(
n
Ë((“Ë& 0x3fË<< 8)

	)

137 
	#ADM_OTBE_MASK
 (0x3‡<< 8)

	)

141 
	mADM_NTTE
 = (1 << 2),

142 
	mADM_RVID1
 = (1 << 8)

146 
	#ADM_MAC_CLONE
 
	`BIT
(4)

	)

147 
	#ADM_TBV
 
	`BIT
(5)

	)

149 c⁄° 
u8
 
	gadm_p‹tcfg
[] = {

150 [0] = 
ADM_P0_CFG
,

151 [1] = 
ADM_P1_CFG
,

152 [2] = 
ADM_P2_CFG
,

153 [3] = 
ADM_P3_CFG
,

154 [4] = 
ADM_P4_CFG
,

155 [5] = 
ADM_P5_CFG
,

159 
	#ADM_VLAN_FILT_FID
(
n
Ë((“Ë& 0xfË<< 12)

	)

160 
	#ADM_VLAN_FILT_TAGGED
(
n
Ë((“Ë& 0x3fË<< 6)

	)

161 
	#ADM_VLAN_FILT_MEMBER
(
n
Ë((“Ë& 0x3fË<< 0)

	)

162 
	#ADM_VLAN_FILT_MEMBER_MASK
 0x3f

	)

164 
	#ADM_VLAN_FILT_VALID
 (1 << 15)

	)

165 
	#ADM_VLAN_FILT_VID
(
n
Ë((“Ë& 0xfffË<< 0)

	)

168 
	#ADM_VLAN_FILT
(
p‹ts
) ((ports & 0x01) | ((ports & 0x02) << 1) | \

169 ((
p‹ts
 & 0x04) << 2) | ((ports & 0x08) << 3) | \

170 ((
p‹ts
 & 0x10Ë<< 3Ë| (’‹t†& 0x20Ë<< 3))

	)

174 
	mADM_PS_LS
 = (1 << 0),

175 
	mADM_PS_SS
 = (1 << 1),

176 
	mADM_PS_DS
 = (1 << 2),

177 
	mADM_PS_FCS
 = (1 << 3)

184 
	#PHYADDR
(
_ªg
Ë((_ªg >> 5Ë& 0xff), (_ªg & 0x1f)

	)

	@linux/generic/files/drivers/net/phy/ar8216.c

18 
	~<löux/if.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/√éök.h
>

26 
	~<löux/bô›s.h
>

27 
	~<√t/gíëlök.h
>

28 
	~<löux/swôch.h
>

29 
	~<löux/dñay.h
>

30 
	~<löux/phy.h
>

31 
	~<löux/√tdevi˚.h
>

32 
	~<löux/ëhîdevi˚.h
>

33 
	~<löux/lockdï.h
>

34 
	~<löux/¨8216_∂©f‹m.h
>

35 
	~<löux/w‹kqueue.h
>

36 
	~<löux/vîsi⁄.h
>

38 
	~"¨8216.h
"

40 c⁄° 
¨8xxx_chù
 
¨8327_chù
;

41 c⁄° 
¨8xxx_chù
 
¨8337_chù
;

43 
	#AR8XXX_MIB_WORK_DELAY
 2000

	)

45 
	#MIB_DESC
(
_s
 , 
_o
, 
_n
) \

47 .
size
 = (
_s
), \

48 .
off£t
 = (
_o
), \

49 .
«me
 = (
_n
), \

50 }

	)

52 c⁄° 
¨8xxx_mib_desc
 
	g¨8216_mibs
[] = {

53 
MIB_DESC
(1, 
AR8216_STATS_RXBROAD
, "RxBroad"),

54 
MIB_DESC
(1, 
AR8216_STATS_RXPAUSE
, "RxPause"),

55 
MIB_DESC
(1, 
AR8216_STATS_RXMULTI
, "RxMulti"),

56 
MIB_DESC
(1, 
AR8216_STATS_RXFCSERR
, "RxFcsErr"),

57 
MIB_DESC
(1, 
AR8216_STATS_RXALIGNERR
, "RxAlignErr"),

58 
MIB_DESC
(1, 
AR8216_STATS_RXRUNT
, "RxRunt"),

59 
MIB_DESC
(1, 
AR8216_STATS_RXFRAGMENT
, "RxFragment"),

60 
MIB_DESC
(1, 
AR8216_STATS_RX64BYTE
, "Rx64Byte"),

61 
MIB_DESC
(1, 
AR8216_STATS_RX128BYTE
, "Rx128Byte"),

62 
MIB_DESC
(1, 
AR8216_STATS_RX256BYTE
, "Rx256Byte"),

63 
MIB_DESC
(1, 
AR8216_STATS_RX512BYTE
, "Rx512Byte"),

64 
MIB_DESC
(1, 
AR8216_STATS_RX1024BYTE
, "Rx1024Byte"),

65 
MIB_DESC
(1, 
AR8216_STATS_RXMAXBYTE
, "RxMaxByte"),

66 
MIB_DESC
(1, 
AR8216_STATS_RXTOOLONG
, "RxTooLong"),

67 
MIB_DESC
(2, 
AR8216_STATS_RXGOODBYTE
, "RxGoodByte"),

68 
MIB_DESC
(2, 
AR8216_STATS_RXBADBYTE
, "RxBadByte"),

69 
MIB_DESC
(1, 
AR8216_STATS_RXOVERFLOW
, "RxOverFlow"),

70 
MIB_DESC
(1, 
AR8216_STATS_FILTERED
, "Filtered"),

71 
MIB_DESC
(1, 
AR8216_STATS_TXBROAD
, "TxBroad"),

72 
MIB_DESC
(1, 
AR8216_STATS_TXPAUSE
, "TxPause"),

73 
MIB_DESC
(1, 
AR8216_STATS_TXMULTI
, "TxMulti"),

74 
MIB_DESC
(1, 
AR8216_STATS_TXUNDERRUN
, "TxUnderRun"),

75 
MIB_DESC
(1, 
AR8216_STATS_TX64BYTE
, "Tx64Byte"),

76 
MIB_DESC
(1, 
AR8216_STATS_TX128BYTE
, "Tx128Byte"),

77 
MIB_DESC
(1, 
AR8216_STATS_TX256BYTE
, "Tx256Byte"),

78 
MIB_DESC
(1, 
AR8216_STATS_TX512BYTE
, "Tx512Byte"),

79 
MIB_DESC
(1, 
AR8216_STATS_TX1024BYTE
, "Tx1024Byte"),

80 
MIB_DESC
(1, 
AR8216_STATS_TXMAXBYTE
, "TxMaxByte"),

81 
MIB_DESC
(1, 
AR8216_STATS_TXOVERSIZE
, "TxOverSize"),

82 
MIB_DESC
(2, 
AR8216_STATS_TXBYTE
, "TxByte"),

83 
MIB_DESC
(1, 
AR8216_STATS_TXCOLLISION
, "TxCollision"),

84 
MIB_DESC
(1, 
AR8216_STATS_TXABORTCOL
, "TxAbortCol"),

85 
MIB_DESC
(1, 
AR8216_STATS_TXMULTICOL
, "TxMultiCol"),

86 
MIB_DESC
(1, 
AR8216_STATS_TXSINGLECOL
, "TxSingleCol"),

87 
MIB_DESC
(1, 
AR8216_STATS_TXEXCDEFER
, "TxExcDefer"),

88 
MIB_DESC
(1, 
AR8216_STATS_TXDEFER
, "TxDefer"),

89 
MIB_DESC
(1, 
AR8216_STATS_TXLATECOL
, "TxLateCol"),

92 c⁄° 
¨8xxx_mib_desc
 
	g¨8236_mibs
[39] = {

93 
MIB_DESC
(1, 
AR8236_STATS_RXBROAD
, "RxBroad"),

94 
MIB_DESC
(1, 
AR8236_STATS_RXPAUSE
, "RxPause"),

95 
MIB_DESC
(1, 
AR8236_STATS_RXMULTI
, "RxMulti"),

96 
MIB_DESC
(1, 
AR8236_STATS_RXFCSERR
, "RxFcsErr"),

97 
MIB_DESC
(1, 
AR8236_STATS_RXALIGNERR
, "RxAlignErr"),

98 
MIB_DESC
(1, 
AR8236_STATS_RXRUNT
, "RxRunt"),

99 
MIB_DESC
(1, 
AR8236_STATS_RXFRAGMENT
, "RxFragment"),

100 
MIB_DESC
(1, 
AR8236_STATS_RX64BYTE
, "Rx64Byte"),

101 
MIB_DESC
(1, 
AR8236_STATS_RX128BYTE
, "Rx128Byte"),

102 
MIB_DESC
(1, 
AR8236_STATS_RX256BYTE
, "Rx256Byte"),

103 
MIB_DESC
(1, 
AR8236_STATS_RX512BYTE
, "Rx512Byte"),

104 
MIB_DESC
(1, 
AR8236_STATS_RX1024BYTE
, "Rx1024Byte"),

105 
MIB_DESC
(1, 
AR8236_STATS_RX1518BYTE
, "Rx1518Byte"),

106 
MIB_DESC
(1, 
AR8236_STATS_RXMAXBYTE
, "RxMaxByte"),

107 
MIB_DESC
(1, 
AR8236_STATS_RXTOOLONG
, "RxTooLong"),

108 
MIB_DESC
(2, 
AR8236_STATS_RXGOODBYTE
, "RxGoodByte"),

109 
MIB_DESC
(2, 
AR8236_STATS_RXBADBYTE
, "RxBadByte"),

110 
MIB_DESC
(1, 
AR8236_STATS_RXOVERFLOW
, "RxOverFlow"),

111 
MIB_DESC
(1, 
AR8236_STATS_FILTERED
, "Filtered"),

112 
MIB_DESC
(1, 
AR8236_STATS_TXBROAD
, "TxBroad"),

113 
MIB_DESC
(1, 
AR8236_STATS_TXPAUSE
, "TxPause"),

114 
MIB_DESC
(1, 
AR8236_STATS_TXMULTI
, "TxMulti"),

115 
MIB_DESC
(1, 
AR8236_STATS_TXUNDERRUN
, "TxUnderRun"),

116 
MIB_DESC
(1, 
AR8236_STATS_TX64BYTE
, "Tx64Byte"),

117 
MIB_DESC
(1, 
AR8236_STATS_TX128BYTE
, "Tx128Byte"),

118 
MIB_DESC
(1, 
AR8236_STATS_TX256BYTE
, "Tx256Byte"),

119 
MIB_DESC
(1, 
AR8236_STATS_TX512BYTE
, "Tx512Byte"),

120 
MIB_DESC
(1, 
AR8236_STATS_TX1024BYTE
, "Tx1024Byte"),

121 
MIB_DESC
(1, 
AR8236_STATS_TX1518BYTE
, "Tx1518Byte"),

122 
MIB_DESC
(1, 
AR8236_STATS_TXMAXBYTE
, "TxMaxByte"),

123 
MIB_DESC
(1, 
AR8236_STATS_TXOVERSIZE
, "TxOverSize"),

124 
MIB_DESC
(2, 
AR8236_STATS_TXBYTE
, "TxByte"),

125 
MIB_DESC
(1, 
AR8236_STATS_TXCOLLISION
, "TxCollision"),

126 
MIB_DESC
(1, 
AR8236_STATS_TXABORTCOL
, "TxAbortCol"),

127 
MIB_DESC
(1, 
AR8236_STATS_TXMULTICOL
, "TxMultiCol"),

128 
MIB_DESC
(1, 
AR8236_STATS_TXSINGLECOL
, "TxSingleCol"),

129 
MIB_DESC
(1, 
AR8236_STATS_TXEXCDEFER
, "TxExcDefer"),

130 
MIB_DESC
(1, 
AR8236_STATS_TXDEFER
, "TxDefer"),

131 
MIB_DESC
(1, 
AR8236_STATS_TXLATECOL
, "TxLateCol"),

134 
DEFINE_MUTEX
(
¨8xxx_dev_li°_lock
);

135 
LIST_HEAD
(
¨8xxx_dev_li°
);

139 
	$¨8xxx_phy_pﬁl_ª£t
(
mii_bus
 *
bus
)

141 
¶ìp_m£cs
 = 20;

142 
ªt
, 
ñ≠£d
, 
i
;

144 
ñ≠£d
 = 
¶ìp_m£cs
;Élapsed <= 600;

145 
ñ≠£d
 +
¶ìp_m£cs
) {

146 
	`m¶ìp
(
¶ìp_m£cs
);

147 
i
 = 0; i < 
AR8XXX_NUM_PHYS
; i++) {

148 
ªt
 = 
	`mdiobus_ªad
(
bus
, 
i
, 
MII_BMCR
);

149 i‡(
ªt
 < 0)

150  
ªt
;

151 i‡(
ªt
 & 
BMCR_RESET
)

153 i‡(
i
 =
AR8XXX_NUM_PHYS
 - 1) {

154 
	`u¶ìp_ønge
(1000, 2000);

159  -
ETIMEDOUT
;

160 
	}
}

163 
	$¨8xxx_phy_check_™eg
(
phy_devi˚
 *
phydev
)

165 
ªt
;

167 i‡(
phydev
->
aut⁄eg
 !
AUTONEG_ENABLE
)

174 
ªt
 = 
	`phy_ªad
(
phydev
, 
MII_BMCR
);

175 i‡(
ªt
 < 0)

176  
ªt
;

177 i‡(
ªt
 & 
BMCR_ANENABLE
)

180 
	`dev_öfo
(&
phydev
->
mdio
.
dev
, "ANEG disabled,Ñe-enabling ...\n");

181 
ªt
 |
BMCR_ANENABLE
 | 
BMCR_ANRESTART
;

182  
	`phy_wrôe
(
phydev
, 
MII_BMCR
, 
ªt
);

183 
	}
}

186 
	$¨8xxx_phy_öô
(
¨8xxx_¥iv
 *
¥iv
)

188 
i
;

189 
mii_bus
 *
bus
;

191 
bus
 = 
¥iv
->
mii_bus
;

192 
i
 = 0; i < 
AR8XXX_NUM_PHYS
; i++) {

193 i‡(
¥iv
->
chù
->
phy_fixup
)

194 
¥iv
->
chù
->
	`phy_fixup
’riv, 
i
);

197 
	`mdiobus_wrôe
(
bus
, 
i
, 
MII_ADVERTISE
,

198 
ADVERTISE_ALL
 | 
ADVERTISE_PAUSE_CAP
 | 
ADVERTISE_PAUSE_ASYM
);

199 i‡(
	`¨8xxx_has_gige
(
¥iv
))

200 
	`mdiobus_wrôe
(
bus
, 
i
, 
MII_CTRL1000
, 
ADVERTISE_1000FULL
);

201 
	`mdiobus_wrôe
(
bus
, 
i
, 
MII_BMCR
, 
BMCR_RESET
 | 
BMCR_ANENABLE
);

204 
	`¨8xxx_phy_pﬁl_ª£t
(
bus
);

205 
	}
}

207 
u32


208 
	$¨8xxx_mii_ªad32
(
¨8xxx_¥iv
 *
¥iv
, 
phy_id
, 
ªgnum
)

210 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

211 
u16
 
lo
, 
hi
;

213 
lo
 = 
bus
->
	`ªad
(bus, 
phy_id
, 
ªgnum
);

214 
hi
 = 
bus
->
	`ªad
(bus, 
phy_id
, 
ªgnum
 + 1);

216  (
hi
 << 16Ë| 
lo
;

217 
	}
}

220 
	$¨8xxx_mii_wrôe32
(
¨8xxx_¥iv
 *
¥iv
, 
phy_id
, 
ªgnum
, 
u32
 
vÆ
)

222 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

223 
u16
 
lo
, 
hi
;

225 
lo
 = 
vÆ
 & 0xffff;

226 
hi
 = (
u16
Ë(
vÆ
 >> 16);

228 i‡(
¥iv
->
chù
->
mii_lo_fú°
)

230 
bus
->
	`wrôe
(bus, 
phy_id
, 
ªgnum
, 
lo
);

231 
bus
->
	`wrôe
(bus, 
phy_id
, 
ªgnum
 + 1, 
hi
);

233 
bus
->
	`wrôe
(bus, 
phy_id
, 
ªgnum
 + 1, 
hi
);

234 
bus
->
	`wrôe
(bus, 
phy_id
, 
ªgnum
, 
lo
);

236 
	}
}

238 
u32


239 
	$¨8xxx_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
)

241 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

242 
u16
 
r1
, 
r2
, 
∑ge
;

243 
u32
 
vÆ
;

245 
	`•lô_addr
((
u32
Ë
ªg
, &
r1
, &
r2
, &
∑ge
);

247 
	`muãx_lock
(&
bus
->
mdio_lock
);

249 
bus
->
	`wrôe
(bus, 0x18, 0, 
∑ge
);

250 
	`waô_f‹_∑ge_swôch
();

251 
vÆ
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 0x10 | 
r2
, 
r1
);

253 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

255  
vÆ
;

256 
	}
}

259 
	$¨8xxx_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
vÆ
)

261 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

262 
u16
 
r1
, 
r2
, 
∑ge
;

264 
	`•lô_addr
((
u32
Ë
ªg
, &
r1
, &
r2
, &
∑ge
);

266 
	`muãx_lock
(&
bus
->
mdio_lock
);

268 
bus
->
	`wrôe
(bus, 0x18, 0, 
∑ge
);

269 
	`waô_f‹_∑ge_swôch
();

270 
	`¨8xxx_mii_wrôe32
(
¥iv
, 0x10 | 
r2
, 
r1
, 
vÆ
);

272 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

273 
	}
}

275 
u32


276 
	$¨8xxx_rmw
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
mask
, u32 
vÆ
)

278 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

279 
u16
 
r1
, 
r2
, 
∑ge
;

280 
u32
 
ªt
;

282 
	`•lô_addr
((
u32
Ë
ªg
, &
r1
, &
r2
, &
∑ge
);

284 
	`muãx_lock
(&
bus
->
mdio_lock
);

286 
bus
->
	`wrôe
(bus, 0x18, 0, 
∑ge
);

287 
	`waô_f‹_∑ge_swôch
();

289 
ªt
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 0x10 | 
r2
, 
r1
);

290 
ªt
 &~
mask
;

291 
ªt
 |
vÆ
;

292 
	`¨8xxx_mii_wrôe32
(
¥iv
, 0x10 | 
r2
, 
r1
, 
ªt
);

294 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

296  
ªt
;

297 
	}
}

299 
	$¨8xxx_phy_dbg_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
,

300 
u16
 
dbg_addr
, u16 *
dbg_d©a
)

302 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

304 
	`muãx_lock
(&
bus
->
mdio_lock
);

305 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_DBG_ADDR
, 
dbg_addr
);

306 *
dbg_d©a
 = 
bus
->
	`ªad
(bus, 
phy_addr
, 
MII_ATH_DBG_DATA
);

307 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

308 
	}
}

311 
	$¨8xxx_phy_dbg_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
,

312 
u16
 
dbg_addr
, u16 
dbg_d©a
)

314 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

316 
	`muãx_lock
(&
bus
->
mdio_lock
);

317 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_DBG_ADDR
, 
dbg_addr
);

318 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_DBG_DATA
, 
dbg_d©a
);

319 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

320 
	}
}

322 
ölöe
 

323 
	$¨8xxx_phy_mmd_¥ï
(
mii_bus
 *
bus
, 
phy_addr
, 
u16
 
addr
, u16 
ªg
)

325 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_MMD_ADDR
, 
addr
);

326 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_MMD_DATA
, 
ªg
);

327 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_MMD_ADDR
, 
addr
 | 0x4000);

328 
	}
}

331 
	$¨8xxx_phy_mmd_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
, 
u16
 
addr
, u16 
ªg
, u16 
d©a
)

333 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

335 
	`muãx_lock
(&
bus
->
mdio_lock
);

336 
	`¨8xxx_phy_mmd_¥ï
(
bus
, 
phy_addr
, 
addr
, 
ªg
);

337 
bus
->
	`wrôe
(bus, 
phy_addr
, 
MII_ATH_MMD_DATA
, 
d©a
);

338 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

339 
	}
}

341 
u16


342 
	$¨8xxx_phy_mmd_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
, 
u16
 
addr
, u16 
ªg
)

344 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

345 
u16
 
d©a
;

347 
	`muãx_lock
(&
bus
->
mdio_lock
);

348 
	`¨8xxx_phy_mmd_¥ï
(
bus
, 
phy_addr
, 
addr
, 
ªg
);

349 
d©a
 = 
bus
->
	`ªad
(bus, 
phy_addr
, 
MII_ATH_MMD_DATA
);

350 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

352  
d©a
;

353 
	}
}

356 
	$¨8xxx_ªg_waô
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
,

357 
timeout
)

359 
i
;

361 
i
 = 0; i < 
timeout
; i++) {

362 
u32
 
t
;

364 
t
 = 
	`¨8xxx_ªad
(
¥iv
, 
ªg
);

365 i‡((
t
 & 
mask
Ë=
vÆ
)

368 
	`u¶ìp_ønge
(1000, 2000);

369 
	`c⁄d_ªsched
();

372  -
ETIMEDOUT
;

373 
	}
}

376 
	$¨8xxx_mib_›
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
›
)

378 
mib_func
 = 
¥iv
->
chù
->mib_func;

379 
ªt
;

381 
	`lockdï_as£π_hñd
(&
¥iv
->
mib_lock
);

384 
	`¨8xxx_rmw
(
¥iv
, 
mib_func
, 
AR8216_MIB_FUNC
, (
›
 << 
AR8216_MIB_FUNC_S
));

387 
ªt
 = 
	`¨8xxx_ªg_waô
(
¥iv
, 
mib_func
, 
AR8216_MIB_BUSY
, 0, 10);

388 i‡(
ªt
)

389 
out
;

391 
ªt
 = 0;

393 
out
:

394  
ªt
;

395 
	}
}

398 
	$¨8xxx_mib_ˇ±uª
(
¨8xxx_¥iv
 *
¥iv
)

400  
	`¨8xxx_mib_›
(
¥iv
, 
AR8216_MIB_FUNC_CAPTURE
);

401 
	}
}

404 
	$¨8xxx_mib_Êush
(
¨8xxx_¥iv
 *
¥iv
)

406  
	`¨8xxx_mib_›
(
¥iv
, 
AR8216_MIB_FUNC_FLUSH
);

407 
	}
}

410 
	$¨8xxx_mib_„tch_p‹t_°©
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
, 
boﬁ
 
Êush
)

412 
ba£
;

413 
u64
 *
mib_°©s
;

414 
i
;

416 
	`WARN_ON
(
p‹t
 >
¥iv
->
dev
.
p‹ts
);

418 
	`lockdï_as£π_hñd
(&
¥iv
->
mib_lock
);

420 
ba£
 = 
¥iv
->
chù
->
ªg_p‹t_°©s_°¨t
 +

421 
¥iv
->
chù
->
ªg_p‹t_°©s_Àngth
 * 
p‹t
;

423 
mib_°©s
 = &
¥iv
->mib_°©s[
p‹t
 *Öriv->
chù
->
num_mibs
];

424 
i
 = 0; i < 
¥iv
->
chù
->
num_mibs
; i++) {

425 c⁄° 
¨8xxx_mib_desc
 *
mib
;

426 
u64
 
t
;

428 
mib
 = &
¥iv
->
chù
->
mib_decs
[
i
];

429 
t
 = 
	`¨8xxx_ªad
(
¥iv
, 
ba£
 + 
mib
->
off£t
);

430 i‡(
mib
->
size
 == 2) {

431 
u64
 
hi
;

433 
hi
 = 
	`¨8xxx_ªad
(
¥iv
, 
ba£
 + 
mib
->
off£t
 + 4);

434 
t
 |
hi
 << 32;

437 i‡(
Êush
)

438 
mib_°©s
[
i
] = 0;

440 
mib_°©s
[
i
] +
t
;

441 
	`c⁄d_ªsched
();

443 
	}
}

446 
	$¨8216_ªad_p‹t_lök
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
,

447 
swôch_p‹t_lök
 *
lök
)

449 
u32
 
°©us
;

450 
u32
 
•ìd
;

452 
	`mem£t
(
lök
, '\0', (*link));

454 
°©us
 = 
¥iv
->
chù
->
	`ªad_p‹t_°©us
’riv, 
p‹t
);

456 
lök
->
™eg
 = !!(
°©us
 & 
AR8216_PORT_STATUS_LINK_AUTO
);

457 i‡(
lök
->
™eg
) {

458 
lök
->lök = !!(
°©us
 & 
AR8216_PORT_STATUS_LINK_UP
);

460 
lök
->lök = 
åue
;

462 i‡(
¥iv
->
gë_p‹t_lök
) {

463 
îr
;

465 
îr
 = 
¥iv
->
	`gë_p‹t_lök
(
p‹t
);

466 i‡(
îr
 >= 0)

467 
lök
->lök = !!
îr
;

471 i‡(!
lök
->link)

474 
lök
->
du∂ex
 = !!(
°©us
 & 
AR8216_PORT_STATUS_DUPLEX
);

475 
lök
->
tx_Êow
 = !!(
°©us
 & 
AR8216_PORT_STATUS_TXFLOW
);

476 
lök
->
rx_Êow
 = !!(
°©us
 & 
AR8216_PORT_STATUS_RXFLOW
);

478 i‡(
lök
->
™eg
 &&Üök->
du∂ex
 && 
¥iv
->
chù
->
ªad_p‹t_ìe_°©us
)

479 
lök
->
ìe
 = 
¥iv
->
chù
->
	`ªad_p‹t_ìe_°©us
’riv, 
p‹t
);

481 
•ìd
 = (
°©us
 & 
AR8216_PORT_STATUS_SPEED
) >>

482 
AR8216_PORT_STATUS_SPEED_S
;

484 
•ìd
) {

485 
AR8216_PORT_SPEED_10M
:

486 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

488 
AR8216_PORT_SPEED_100M
:

489 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

491 
AR8216_PORT_SPEED_1000M
:

492 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

495 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

498 
	}
}

500 
sk_buff
 *

501 
	$¨8216_m™gÀ_tx
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

503 
¨8xxx_¥iv
 *
¥iv
 = 
dev
->
phy_±r
;

504 *
buf
;

506 i‡(
	`u∆ikñy
(!
¥iv
))

507 
îr‹
;

509 i‡(!
¥iv
->
vœn
)

510 
£nd
;

512 i‡(
	`u∆ikñy
(
	`skb_hódroom
(
skb
) < 2)) {

513 i‡(
	`pskb_ex∑nd_hód
(
skb
, 2, 0, 
GFP_ATOMIC
) < 0)

514 
îr‹
;

517 
buf
 = 
	`skb_push
(
skb
, 2);

518 
buf
[0] = 0x10;

519 
buf
[1] = 0x80;

521 
£nd
:

522  
skb
;

524 
îr‹
:

525 
	`dev_k‰ì_skb_™y
(
skb
);

526  
NULL
;

527 
	}
}

530 
	$¨8216_m™gÀ_rx
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

532 
¨8xxx_¥iv
 *
¥iv
;

533 *
buf
;

534 
p‹t
, 
vœn
;

536 
¥iv
 = 
dev
->
phy_±r
;

537 i‡(!
¥iv
)

541 i‡(!
¥iv
->
vœn
)

545 
buf
 = 
skb
->
d©a
;

546 
	`skb_puŒ
(
skb
, 2);

549 i‡((
buf
[12 + 2] != 0x81) || (buf[13 + 2] != 0x00))

552 
p‹t
 = 
buf
[0] & 0x7;

555 i‡(
¥iv
->
vœn_ègged
 & (1 << 
p‹t
))

559 
vœn
 = 
¥iv
->
vœn_id
[¥iv->
pvid
[
p‹t
]];

561 
buf
[14 + 2] &= 0xf0;

562 
buf
[14 + 2] |
vœn
 >> 8;

563 
buf
[15 + 2] = 
vœn
 & 0xff;

564 
	}
}

567 
	$¨8216_waô_bô
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
mask
, u32 
vÆ
)

569 
timeout
 = 20;

570 
u32
 
t
 = 0;

573 
t
 = 
	`¨8xxx_ªad
(
¥iv
, 
ªg
);

574 i‡((
t
 & 
mask
Ë=
vÆ
)

577 i‡(
timeout
-- <= 0)

580 
	`udñay
(10);

581 
	`c⁄d_ªsched
();

584 
	`¥_îr
("ar8216:Åimeout onÑeg %08x: %08x & %08x != %08x\n",

585 (Ë
ªg
, 
t
, 
mask
, 
vÆ
);

586  -
ETIMEDOUT
;

587 
	}
}

590 
	$¨8216_vtu_›
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
›
, u32 
vÆ
)

592 i‡(
	`¨8216_waô_bô
(
¥iv
, 
AR8216_REG_VTU
, 
AR8216_VTU_ACTIVE
, 0))

594 i‡((
›
 & 
AR8216_VTU_OP
Ë=
AR8216_VTU_OP_LOAD
) {

595 
vÆ
 &
AR8216_VTUDATA_MEMBER
;

596 
vÆ
 |
AR8216_VTUDATA_VALID
;

597 
	`¨8xxx_wrôe
(
¥iv
, 
AR8216_REG_VTU_DATA
, 
vÆ
);

599 
›
 |
AR8216_VTU_ACTIVE
;

600 
	`¨8xxx_wrôe
(
¥iv
, 
AR8216_REG_VTU
, 
›
);

601 
	}
}

604 
	$¨8216_vtu_Êush
(
¨8xxx_¥iv
 *
¥iv
)

606 
	`¨8216_vtu_›
(
¥iv
, 
AR8216_VTU_OP_FLUSH
, 0);

607 
	}
}

610 
	$¨8216_vtu_lﬂd_vœn
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
vid
, u32 
p‹t_mask
)

612 
u32
 
›
;

614 
›
 = 
AR8216_VTU_OP_LOAD
 | (
vid
 << 
AR8216_VTU_VID_S
);

615 
	`¨8216_vtu_›
(
¥iv
, 
›
, 
p‹t_mask
);

616 
	}
}

619 
	$¨8216_©u_Êush
(
¨8xxx_¥iv
 *
¥iv
)

621 
ªt
;

623 
ªt
 = 
	`¨8216_waô_bô
(
¥iv
, 
AR8216_REG_ATU_FUNC0
, 
AR8216_ATU_ACTIVE
, 0);

624 i‡(!
ªt
)

625 
	`¨8xxx_wrôe
(
¥iv
, 
AR8216_REG_ATU_FUNC0
, 
AR8216_ATU_OP_FLUSH
 |

626 
AR8216_ATU_ACTIVE
);

628  
ªt
;

629 
	}
}

632 
	$¨8216_©u_Êush_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

634 
u32
 
t
;

635 
ªt
;

637 
ªt
 = 
	`¨8216_waô_bô
(
¥iv
, 
AR8216_REG_ATU_FUNC0
, 
AR8216_ATU_ACTIVE
, 0);

638 i‡(!
ªt
) {

639 
t
 = (
p‹t
 << 
AR8216_ATU_PORT_NUM_S
Ë| 
AR8216_ATU_OP_FLUSH_PORT
;

640 
t
 |
AR8216_ATU_ACTIVE
;

641 
	`¨8xxx_wrôe
(
¥iv
, 
AR8216_REG_ATU_FUNC0
, 
t
);

644  
ªt
;

645 
	}
}

647 
u32


648 
	$¨8216_ªad_p‹t_°©us
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

650  
	`¨8xxx_ªad
(
¥iv
, 
	`AR8216_REG_PORT_STATUS
(
p‹t
));

651 
	}
}

654 
	$¨8216_£tup_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
, 
u32
 
membîs
)

656 
u32
 
hódî
;

657 
u32
 
egªss
, 
ögªss
;

658 
u32
 
pvid
;

660 i‡(
¥iv
->
vœn
) {

661 
pvid
 = 
¥iv
->
vœn_id
[¥iv->pvid[
p‹t
]];

662 i‡(
¥iv
->
vœn_ègged
 & (1 << 
p‹t
))

663 
egªss
 = 
AR8216_OUT_ADD_VLAN
;

665 
egªss
 = 
AR8216_OUT_STRIP_VLAN
;

666 
ögªss
 = 
AR8216_IN_SECURE
;

668 
pvid
 = 
p‹t
;

669 
egªss
 = 
AR8216_OUT_KEEP
;

670 
ögªss
 = 
AR8216_IN_PORT_ONLY
;

673 i‡(
	`chù_is_¨8216
(
¥iv
Ë&&Öriv->
vœn
 && 
p‹t
 =
AR8216_PORT_CPU
)

674 
hódî
 = 
AR8216_PORT_CTRL_HEADER
;

676 
hódî
 = 0;

678 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
(
p‹t
),

679 
AR8216_PORT_CTRL_LEARN
 | 
AR8216_PORT_CTRL_VLAN_MODE
 |

680 
AR8216_PORT_CTRL_SINGLE_VLAN
 | 
AR8216_PORT_CTRL_STATE
 |

681 
AR8216_PORT_CTRL_HEADER
 | 
AR8216_PORT_CTRL_LEARN_LOCK
,

682 
AR8216_PORT_CTRL_LEARN
 | 
hódî
 |

683 (
egªss
 << 
AR8216_PORT_CTRL_VLAN_MODE_S
) |

684 (
AR8216_PORT_STATE_FORWARD
 << 
AR8216_PORT_CTRL_STATE_S
));

686 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8216_REG_PORT_VLAN
(
p‹t
),

687 
AR8216_PORT_VLAN_DEST_PORTS
 | 
AR8216_PORT_VLAN_MODE
 |

688 
AR8216_PORT_VLAN_DEFAULT_ID
,

689 (
membîs
 << 
AR8216_PORT_VLAN_DEST_PORTS_S
) |

690 (
ögªss
 << 
AR8216_PORT_VLAN_MODE_S
) |

691 (
pvid
 << 
AR8216_PORT_VLAN_DEFAULT_ID_S
));

692 
	}
}

695 
	$¨8216_hw_öô
(
¨8xxx_¥iv
 *
¥iv
)

697 i‡(
¥iv
->
öôülized
)

700 
	`¨8xxx_phy_öô
(
¥iv
);

702 
¥iv
->
öôülized
 = 
åue
;

704 
	}
}

707 
	$¨8216_öô_globÆs
(
¨8xxx_¥iv
 *
¥iv
)

710 
	`¨8xxx_wrôe
(
¥iv
, 0x38, 0xc000050e);

712 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_GLOBAL_CTRL
,

713 
AR8216_GCTRL_MTU
, 1518 + 8 + 2);

714 
	}
}

717 
	$¨8216_öô_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

720 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
(
p‹t
),

721 
AR8216_PORT_CTRL_LEARN
 |

722 (4 << 
AR8216_PORT_CTRL_STATE_S
));

724 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8216_REG_PORT_VLAN
(
p‹t
), 0);

726 i‡(
p‹t
 =
AR8216_PORT_CPU
) {

727 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8216_REG_PORT_STATUS
(
p‹t
),

728 
AR8216_PORT_STATUS_LINK_UP
 |

729 (
	`¨8xxx_has_gige
(
¥iv
) ?

730 
AR8216_PORT_SPEED_1000M
 : 
AR8216_PORT_SPEED_100M
) |

731 
AR8216_PORT_STATUS_TXMAC
 |

732 
AR8216_PORT_STATUS_RXMAC
 |

733 (
	`chù_is_¨8316
(
¥iv
Ë? 
AR8216_PORT_STATUS_RXFLOW
 : 0) |

734 (
	`chù_is_¨8316
(
¥iv
Ë? 
AR8216_PORT_STATUS_TXFLOW
 : 0) |

735 
AR8216_PORT_STATUS_DUPLEX
);

737 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8216_REG_PORT_STATUS
(
p‹t
),

738 
AR8216_PORT_STATUS_LINK_AUTO
);

740 
	}
}

743 
	$¨8216_waô_©u_ªady
(
¨8xxx_¥iv
 *
¥iv
, 
u16
 
r2
, u16 
r1
)

745 
timeout
 = 20;

747 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1
Ë& 
AR8216_ATU_ACTIVE
 && --
timeout
) {

748 
	`udñay
(10);

749 
	`c⁄d_ªsched
();

752 i‡(!
timeout
)

753 
	`¥_îr
("ar8216:Åimeout waiting forátuÅo becomeÑeady\n");

754 
	}
}

756 
	$¨8216_gë_¨l_íåy
(
¨8xxx_¥iv
 *
¥iv
,

757 
¨l_íåy
 *
a
, 
u32
 *
°©us
, 
¨l_›
 
›
)

759 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

760 
u16
 
r2
, 
∑ge
;

761 
u16
 
r1_func0
, 
r1_func1
, 
r1_func2
;

762 
u32
 
t
, 
vÆ0
, 
vÆ1
, 
vÆ2
;

764 
	`•lô_addr
(
AR8216_REG_ATU_FUNC0
, &
r1_func0
, &
r2
, &
∑ge
);

765 
r2
 |= 0x10;

767 
r1_func1
 = (
AR8216_REG_ATU_FUNC1
 >> 1) & 0x1e;

768 
r1_func2
 = (
AR8216_REG_ATU_FUNC2
 >> 1) & 0x1e;

770 
›
) {

771 
AR8XXX_ARL_INITIALIZE
:

775 
bus
->
	`wrôe
(bus, 0x18, 0, 
∑ge
);

776 
	`waô_f‹_∑ge_swôch
();

778 
	`¨8216_waô_©u_ªady
(
¥iv
, 
r2
, 
r1_func0
);

780 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_func0
, 
AR8216_ATU_OP_GET_NEXT
);

781 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_func1
, 0);

782 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_func2
, 0);

784 
AR8XXX_ARL_GET_NEXT
:

785 
t
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_func0
);

786 
t
 |
AR8216_ATU_ACTIVE
;

787 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_func0
, 
t
);

788 
	`¨8216_waô_©u_ªady
(
¥iv
, 
r2
, 
r1_func0
);

790 
vÆ0
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_func0
);

791 
vÆ1
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_func1
);

792 
vÆ2
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_func2
);

794 *
°©us
 = (
vÆ2
 & 
AR8216_ATU_STATUS
Ë>> 
AR8216_ATU_STATUS_S
;

795 i‡(!*
°©us
)

798 
a
->
p‹tm≠
 = (
vÆ2
 & 
AR8216_ATU_PORTS
Ë>> 
AR8216_ATU_PORTS_S
;

799 
a
->
mac
[0] = (
vÆ0
 & 
AR8216_ATU_ADDR5
Ë>> 
AR8216_ATU_ADDR5_S
;

800 
a
->
mac
[1] = (
vÆ0
 & 
AR8216_ATU_ADDR4
Ë>> 
AR8216_ATU_ADDR4_S
;

801 
a
->
mac
[2] = (
vÆ1
 & 
AR8216_ATU_ADDR3
Ë>> 
AR8216_ATU_ADDR3_S
;

802 
a
->
mac
[3] = (
vÆ1
 & 
AR8216_ATU_ADDR2
Ë>> 
AR8216_ATU_ADDR2_S
;

803 
a
->
mac
[4] = (
vÆ1
 & 
AR8216_ATU_ADDR1
Ë>> 
AR8216_ATU_ADDR1_S
;

804 
a
->
mac
[5] = (
vÆ1
 & 
AR8216_ATU_ADDR0
Ë>> 
AR8216_ATU_ADDR0_S
;

807 
	}
}

810 
	$¨8236_£tup_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
, 
u32
 
membîs
)

812 
u32
 
egªss
, 
ögªss
;

813 
u32
 
pvid
;

815 i‡(
¥iv
->
vœn
) {

816 
pvid
 = 
¥iv
->
vœn_id
[¥iv->pvid[
p‹t
]];

817 i‡(
¥iv
->
vœn_ègged
 & (1 << 
p‹t
))

818 
egªss
 = 
AR8216_OUT_ADD_VLAN
;

820 
egªss
 = 
AR8216_OUT_STRIP_VLAN
;

821 
ögªss
 = 
AR8216_IN_SECURE
;

823 
pvid
 = 
p‹t
;

824 
egªss
 = 
AR8216_OUT_KEEP
;

825 
ögªss
 = 
AR8216_IN_PORT_ONLY
;

828 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
(
p‹t
),

829 
AR8216_PORT_CTRL_LEARN
 | 
AR8216_PORT_CTRL_VLAN_MODE
 |

830 
AR8216_PORT_CTRL_SINGLE_VLAN
 | 
AR8216_PORT_CTRL_STATE
 |

831 
AR8216_PORT_CTRL_HEADER
 | 
AR8216_PORT_CTRL_LEARN_LOCK
,

832 
AR8216_PORT_CTRL_LEARN
 |

833 (
egªss
 << 
AR8216_PORT_CTRL_VLAN_MODE_S
) |

834 (
AR8216_PORT_STATE_FORWARD
 << 
AR8216_PORT_CTRL_STATE_S
));

836 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8236_REG_PORT_VLAN
(
p‹t
),

837 
AR8236_PORT_VLAN_DEFAULT_ID
,

838 (
pvid
 << 
AR8236_PORT_VLAN_DEFAULT_ID_S
));

840 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8236_REG_PORT_VLAN2
(
p‹t
),

841 
AR8236_PORT_VLAN2_VLAN_MODE
 |

842 
AR8236_PORT_VLAN2_MEMBER
,

843 (
ögªss
 << 
AR8236_PORT_VLAN2_VLAN_MODE_S
) |

844 (
membîs
 << 
AR8236_PORT_VLAN2_MEMBER_S
));

845 
	}
}

848 
	$¨8236_öô_globÆs
(
¨8xxx_¥iv
 *
¥iv
)

851 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_GLOBAL_CTRL
,

852 
AR8316_GCTRL_MTU
, 9018 + 8 + 2);

855 
	`¨8xxx_ªg_£t
(
¥iv
, 
AR8216_REG_ATU_CTRL
,

856 
AR8236_ATU_CTRL_RES
);

859 
	`¨8xxx_ªg_£t
(
¥iv
, 
AR8216_REG_FLOOD_MASK
,

860 
AR8236_FM_CPU_BROADCAST_EN
 | 
AR8236_FM_CPU_BCAST_FWD_EN
);

863 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_MIB_FUNC
, 
AR8216_MIB_FUNC
 | 
AR8236_MIB_EN
,

864 (
AR8216_MIB_FUNC_NO_OP
 << 
AR8216_MIB_FUNC_S
) |

865 
AR8236_MIB_EN
);

866 
	}
}

869 
	$¨8316_hw_öô
(
¨8xxx_¥iv
 *
¥iv
)

871 
u32
 
vÆ
, 
√wvÆ
;

873 
vÆ
 = 
	`¨8xxx_ªad
(
¥iv
, 
AR8316_REG_POSTRIP
);

875 i‡(
¥iv
->
phy
->
öãrÁ˚
 =
PHY_INTERFACE_MODE_RGMII
) {

876 i‡(
¥iv
->
p‹t4_phy
) {

878 
√wvÆ
 = 0x81461bea;

879 
	`¥_öfo
("ar8316: UsingÖort 4ás PHY\n");

881 
√wvÆ
 = 0x01261be2;

882 
	`¥_öfo
("ar8316: UsingÖort 4ás switchÖort\n");

884 } i‡(
¥iv
->
phy
->
öãrÁ˚
 =
PHY_INTERFACE_MODE_GMII
) {

886 
√wvÆ
 = 0x010e5b71;

889 
	`¥_îr
("ar8316: unsupported mii mode: %d.\n",

890 
¥iv
->
phy
->
öãrÁ˚
);

891  -
EINVAL
;

894 i‡(
vÆ
 =
√wvÆ
)

895 
out
;

897 
	`¨8xxx_wrôe
(
¥iv
, 
AR8316_REG_POSTRIP
, 
√wvÆ
);

899 i‡(
¥iv
->
p‹t4_phy
 &&

900 
¥iv
->
phy
->
öãrÁ˚
 =
PHY_INTERFACE_MODE_RGMII
) {

902 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 4, 0x12, 0x480c);

904 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 4, 0x0, 0x824e);

906 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 4, 0x5, 0x3d47);

907 
	`m¶ìp
(1000);

910 
	`¨8xxx_phy_öô
(
¥iv
);

912 
out
:

913 
¥iv
->
öôülized
 = 
åue
;

915 
	}
}

918 
	$¨8316_öô_globÆs
(
¨8xxx_¥iv
 *
¥iv
)

921 
	`¨8xxx_wrôe
(
¥iv
, 0x38, 0xc000050e);

924 
	`¨8xxx_wrôe
(
¥iv
, 
AR8216_REG_FLOOD_MASK
, 0x003f003f);

927 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_GLOBAL_CTRL
,

928 
AR8316_GCTRL_MTU
, 9018 + 8 + 2);

931 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_MIB_FUNC
, 
AR8216_MIB_FUNC
 | 
AR8236_MIB_EN
,

932 (
AR8216_MIB_FUNC_NO_OP
 << 
AR8216_MIB_FUNC_S
) |

933 
AR8236_MIB_EN
);

934 
	}
}

937 
	$¨8xxx_sw_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

938 
swôch_vÆ
 *
vÆ
)

940 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

941 
¥iv
->
vœn
 = !!
vÆ
->
vÆue
.
i
;

943 
	}
}

946 
	$¨8xxx_sw_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

947 
swôch_vÆ
 *
vÆ
)

949 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

950 
vÆ
->
vÆue
.
i
 = 
¥iv
->
vœn
;

952 
	}
}

956 
	$¨8xxx_sw_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
)

958 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

962 i‡(
vœn
 < 0 || vœ¿>
dev
->
vœns
 ||

963 
p‹t
 < 0 ||Ö‹à>
AR8X16_MAX_PORTS
)

964  -
EINVAL
;

966 
¥iv
->
pvid
[
p‹t
] = 
vœn
;

968 
	}
}

971 
	$¨8xxx_sw_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
)

973 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

975 i‡(
p‹t
 < 0 ||Ö‹à>
AR8X16_MAX_PORTS
)

976  -
EINVAL
;

978 *
vœn
 = 
¥iv
->
pvid
[
p‹t
];

980 
	}
}

983 
	$¨8xxx_sw_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

984 
swôch_vÆ
 *
vÆ
)

986 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

988 i‡(
vÆ
->
p‹t_vœn
 >
AR8X16_MAX_VLANS
)

989  -
EINVAL
;

991 
¥iv
->
vœn_id
[
vÆ
->
p‹t_vœn
] = vÆ->
vÆue
.
i
;

993 
	}
}

996 
	$¨8xxx_sw_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

997 
swôch_vÆ
 *
vÆ
)

999 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1000 
vÆ
->
vÆue
.
i
 = 
¥iv
->
vœn_id
[vÆ->
p‹t_vœn
];

1002 
	}
}

1005 
	$¨8xxx_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

1006 
swôch_p‹t_lök
 *
lök
)

1008 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1010 
	`¨8216_ªad_p‹t_lök
(
¥iv
, 
p‹t
, 
lök
);

1012 
	}
}

1015 
	$¨8xxx_sw_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1017 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1018 
u8
 
p‹ts
;

1019 
i
;

1021 i‡(
vÆ
->
p‹t_vœn
 >
AR8X16_MAX_VLANS
)

1022  -
EINVAL
;

1024 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

1025 
vÆ
->
Àn
 = 0;

1026 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

1027 
swôch_p‹t
 *
p
;

1029 i‡(!(
p‹ts
 & (1 << 
i
)))

1032 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

1033 
p
->
id
 = 
i
;

1034 i‡(
¥iv
->
vœn_ègged
 & (1 << 
i
))

1035 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

1037 
p
->
Êags
 = 0;

1040 
	}
}

1043 
	$¨8xxx_sw_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1045 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1046 
u8
 *
vt
 = &
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

1047 
i
, 
j
;

1049 *
vt
 = 0;

1050 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

1051 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

1053 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)) {

1054 
¥iv
->
vœn_ègged
 |(1 << 
p
->
id
);

1056 
¥iv
->
vœn_ègged
 &~(1 << 
p
->
id
);

1057 
¥iv
->
pvid
[
p
->
id
] = 
vÆ
->
p‹t_vœn
;

1061 
j
 = 0; j < 
AR8X16_MAX_VLANS
; j++) {

1062 i‡(
j
 =
vÆ
->
p‹t_vœn
)

1064 
¥iv
->
vœn_èbÀ
[
j
] &~(1 << 
p
->
id
);

1068 *
vt
 |1 << 
p
->
id
;

1071 
	}
}

1074 
	$¨8216_£t_múr‹_ªgs
(
¨8xxx_¥iv
 *
¥iv
)

1076 
p‹t
;

1079 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_GLOBAL_CPUPORT
,

1080 
AR8216_GLOBAL_CPUPORT_MIRROR_PORT
,

1081 (0xF << 
AR8216_GLOBAL_CPUPORT_MIRROR_PORT_S
));

1082 
p‹t
 = 0;Ö‹à< 
AR8216_NUM_PORTS
;Öort++) {

1083 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
(
p‹t
),

1084 
AR8216_PORT_CTRL_MIRROR_RX
);

1086 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
(
p‹t
),

1087 
AR8216_PORT_CTRL_MIRROR_TX
);

1091 i‡(
¥iv
->
sour˚_p‹t
 >
AR8216_NUM_PORTS
 ||

1092 
¥iv
->
m⁄ô‹_p‹t
 >
AR8216_NUM_PORTS
 ||

1093 
¥iv
->
sour˚_p‹t
 =¥iv->
m⁄ô‹_p‹t
) {

1097 
	`¨8xxx_rmw
(
¥iv
, 
AR8216_REG_GLOBAL_CPUPORT
,

1098 
AR8216_GLOBAL_CPUPORT_MIRROR_PORT
,

1099 (
¥iv
->
m⁄ô‹_p‹t
 << 
AR8216_GLOBAL_CPUPORT_MIRROR_PORT_S
));

1101 i‡(
¥iv
->
múr‹_rx
)

1102 
	`¨8xxx_ªg_£t
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
’riv->
sour˚_p‹t
),

1103 
AR8216_PORT_CTRL_MIRROR_RX
);

1105 i‡(
¥iv
->
múr‹_tx
)

1106 
	`¨8xxx_ªg_£t
(
¥iv
, 
	`AR8216_REG_PORT_CTRL
’riv->
sour˚_p‹t
),

1107 
AR8216_PORT_CTRL_MIRROR_TX
);

1108 
	}
}

1110 
ölöe
 
u32


1111 
	$¨8xxx_age_time_vÆ
(
age_time
)

1113  (
age_time
 + 
AR8XXX_REG_ARL_CTRL_AGE_TIME_SECS
 / 2) /

1114 
AR8XXX_REG_ARL_CTRL_AGE_TIME_SECS
;

1115 
	}
}

1117 
ölöe
 

1118 
	$¨8xxx_£t_age_time
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
)

1120 
u32
 
age_time
 = 
	`¨8xxx_age_time_vÆ
(
¥iv
->
¨l_age_time
);

1121 
	`¨8xxx_rmw
(
¥iv
, 
ªg
, 
AR8216_ATU_CTRL_AGE_TIME
, 
age_time
 << 
AR8216_ATU_CTRL_AGE_TIME_S
);

1122 
	}
}

1125 
	$¨8xxx_sw_hw_≠∂y
(
swôch_dev
 *
dev
)

1127 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1128 c⁄° 
¨8xxx_chù
 *
chù
 = 
¥iv
->chip;

1129 
u8
 
p‹tmask
[
AR8X16_MAX_PORTS
];

1130 
i
, 
j
;

1132 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1134 
¥iv
->
chù
->
	`vtu_Êush
(priv);

1136 
	`mem£t
(
p‹tmask
, 0, (portmask));

1137 i‡(!
¥iv
->
öô
) {

1140 
j
 = 0; j < 
AR8X16_MAX_VLANS
; j++) {

1141 
u8
 
vp
 = 
¥iv
->
vœn_èbÀ
[
j
];

1143 i‡(!
vp
)

1146 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

1147 
u8
 
mask
 = (1 << 
i
);

1148 i‡(
vp
 & 
mask
)

1149 
p‹tmask
[
i
] |
vp
 & ~
mask
;

1152 
chù
->
	`vtu_lﬂd_vœn
(
¥iv
,Öriv->
vœn_id
[
j
],

1153 
¥iv
->
vœn_èbÀ
[
j
]);

1158 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

1159 i‡(
i
 =
AR8216_PORT_CPU
)

1162 
p‹tmask
[
i
] = 1 << 
AR8216_PORT_CPU
;

1163 
p‹tmask
[
AR8216_PORT_CPU
] |(1 << 
i
);

1168 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

1169 
chù
->
	`£tup_p‹t
(
¥iv
, 
i
, 
p‹tmask
[i]);

1172 
chù
->
	`£t_múr‹_ªgs
(
¥iv
);

1175 i‡(
chù
->
ªg_¨l_˘æ
)

1176 
	`¨8xxx_£t_age_time
(
¥iv
, 
chù
->
ªg_¨l_˘æ
);

1178 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1180 
	}
}

1183 
	$¨8xxx_sw_ª£t_swôch
(
swôch_dev
 *
dev
)

1185 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1186 c⁄° 
¨8xxx_chù
 *
chù
 = 
¥iv
->chip;

1187 
i
;

1189 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1190 
	`mem£t
(&
¥iv
->
vœn
, 0, (
¨8xxx_¥iv
) -

1191 
	`off£tof
(
¨8xxx_¥iv
, 
vœn
));

1193 
i
 = 0; i < 
AR8X16_MAX_VLANS
; i++)

1194 
¥iv
->
vœn_id
[
i
] = i;

1197 
i
 = 0; i < 
dev
->
p‹ts
; i++)

1198 
chù
->
	`öô_p‹t
(
¥iv
, 
i
);

1200 
¥iv
->
múr‹_rx
 = 
Ál£
;

1201 
¥iv
->
múr‹_tx
 = 
Ál£
;

1202 
¥iv
->
sour˚_p‹t
 = 0;

1203 
¥iv
->
m⁄ô‹_p‹t
 = 0;

1204 
¥iv
->
¨l_age_time
 = 
AR8XXX_DEFAULT_ARL_AGE_TIME
;

1206 
chù
->
	`öô_globÆs
(
¥iv
);

1207 
chù
->
	`©u_Êush
(
¥iv
);

1209 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1211  
chù
->
	`sw_hw_≠∂y
(
dev
);

1212 
	}
}

1215 
	$¨8xxx_sw_£t_ª£t_mibs
(
swôch_dev
 *
dev
,

1216 c⁄° 
swôch_©å
 *
©å
,

1217 
swôch_vÆ
 *
vÆ
)

1219 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1220 
Àn
;

1221 
ªt
;

1223 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1224  -
EOPNOTSUPP
;

1226 
	`muãx_lock
(&
¥iv
->
mib_lock
);

1228 
Àn
 = 
¥iv
->
dev
.
p‹ts
 *Öriv->
chù
->
num_mibs
 *

1229 (*
¥iv
->
mib_°©s
);

1230 
	`mem£t
(
¥iv
->
mib_°©s
, '\0', 
Àn
);

1231 
ªt
 = 
	`¨8xxx_mib_Êush
(
¥iv
);

1232 i‡(
ªt
)

1233 
u∆ock
;

1235 
ªt
 = 0;

1237 
u∆ock
:

1238 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

1239  
ªt
;

1240 
	}
}

1243 
	$¨8xxx_sw_£t_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

1244 c⁄° 
swôch_©å
 *
©å
,

1245 
swôch_vÆ
 *
vÆ
)

1247 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1249 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1250 
¥iv
->
múr‹_rx
 = !!
vÆ
->
vÆue
.
i
;

1251 
¥iv
->
chù
->
	`£t_múr‹_ªgs
(priv);

1252 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1255 
	}
}

1258 
	$¨8xxx_sw_gë_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

1259 c⁄° 
swôch_©å
 *
©å
,

1260 
swôch_vÆ
 *
vÆ
)

1262 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1263 
vÆ
->
vÆue
.
i
 = 
¥iv
->
múr‹_rx
;

1265 
	}
}

1268 
	$¨8xxx_sw_£t_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

1269 c⁄° 
swôch_©å
 *
©å
,

1270 
swôch_vÆ
 *
vÆ
)

1272 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1274 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1275 
¥iv
->
múr‹_tx
 = !!
vÆ
->
vÆue
.
i
;

1276 
¥iv
->
chù
->
	`£t_múr‹_ªgs
(priv);

1277 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1280 
	}
}

1283 
	$¨8xxx_sw_gë_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

1284 c⁄° 
swôch_©å
 *
©å
,

1285 
swôch_vÆ
 *
vÆ
)

1287 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1288 
vÆ
->
vÆue
.
i
 = 
¥iv
->
múr‹_tx
;

1290 
	}
}

1293 
	$¨8xxx_sw_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1294 c⁄° 
swôch_©å
 *
©å
,

1295 
swôch_vÆ
 *
vÆ
)

1297 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1299 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1300 
¥iv
->
m⁄ô‹_p‹t
 = 
vÆ
->
vÆue
.
i
;

1301 
¥iv
->
chù
->
	`£t_múr‹_ªgs
(priv);

1302 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1305 
	}
}

1308 
	$¨8xxx_sw_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1309 c⁄° 
swôch_©å
 *
©å
,

1310 
swôch_vÆ
 *
vÆ
)

1312 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1313 
vÆ
->
vÆue
.
i
 = 
¥iv
->
m⁄ô‹_p‹t
;

1315 
	}
}

1318 
	$¨8xxx_sw_£t_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

1319 c⁄° 
swôch_©å
 *
©å
,

1320 
swôch_vÆ
 *
vÆ
)

1322 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1324 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1325 
¥iv
->
sour˚_p‹t
 = 
vÆ
->
vÆue
.
i
;

1326 
¥iv
->
chù
->
	`£t_múr‹_ªgs
(priv);

1327 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1330 
	}
}

1333 
	$¨8xxx_sw_gë_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

1334 c⁄° 
swôch_©å
 *
©å
,

1335 
swôch_vÆ
 *
vÆ
)

1337 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1338 
vÆ
->
vÆue
.
i
 = 
¥iv
->
sour˚_p‹t
;

1340 
	}
}

1343 
	$¨8xxx_sw_£t_p‹t_ª£t_mib
(
swôch_dev
 *
dev
,

1344 c⁄° 
swôch_©å
 *
©å
,

1345 
swôch_vÆ
 *
vÆ
)

1347 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1348 
p‹t
;

1349 
ªt
;

1351 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1352  -
EOPNOTSUPP
;

1354 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1355 i‡(
p‹t
 >
dev
->
p‹ts
)

1356  -
EINVAL
;

1358 
	`muãx_lock
(&
¥iv
->
mib_lock
);

1359 
ªt
 = 
	`¨8xxx_mib_ˇ±uª
(
¥iv
);

1360 i‡(
ªt
)

1361 
u∆ock
;

1363 
	`¨8xxx_mib_„tch_p‹t_°©
(
¥iv
, 
p‹t
, 
åue
);

1365 
ªt
 = 0;

1367 
u∆ock
:

1368 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

1369  
ªt
;

1370 
	}
}

1373 
	$¨8xxx_byã_to_°r
(*
buf
, 
Àn
, 
u64
 
byã
)

1375 
b
;

1376 c⁄° *
unô
;

1378 i‡(
byã
 >= 0x40000000) {

1379 
b
 = 
byã
 * 10 / 0x40000000;

1380 
unô
 = "GiB";

1381 } i‡(
byã
 >= 0x100000) {

1382 
b
 = 
byã
 * 10 / 0x100000;

1383 
unô
 = "MiB";

1384 } i‡(
byã
 >= 0x400) {

1385 
b
 = 
byã
 * 10 / 0x400;

1386 
unô
 = "KiB";

1388 
b
 = 
byã
;

1389 
unô
 = "Byte";

1391 i‡(
	`°rcmp
(
unô
, "Byte"))

1392 
	`¢¥ötf
(
buf
, 
Àn
, "%lu.%lu %s", 
b
 / 10, b % 10, 
unô
);

1394 
	`¢¥ötf
(
buf
, 
Àn
, "%lu %s", 
b
, 
unô
);

1395 
	}
}

1398 
	$¨8xxx_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

1399 c⁄° 
swôch_©å
 *
©å
,

1400 
swôch_vÆ
 *
vÆ
)

1402 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1403 c⁄° 
¨8xxx_chù
 *
chù
 = 
¥iv
->chip;

1404 
u64
 *
mib_°©s
, 
mib_d©a
;

1405 
p‹t
;

1406 
ªt
;

1407 *
buf
 = 
¥iv
->buf;

1408 
buf1
[64];

1409 c⁄° *
mib_«me
;

1410 
i
, 
Àn
 = 0;

1411 
boﬁ
 
mib_°©s_em±y
 = 
åue
;

1413 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1414  -
EOPNOTSUPP
;

1416 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1417 i‡(
p‹t
 >
dev
->
p‹ts
)

1418  -
EINVAL
;

1420 
	`muãx_lock
(&
¥iv
->
mib_lock
);

1421 
ªt
 = 
	`¨8xxx_mib_ˇ±uª
(
¥iv
);

1422 i‡(
ªt
)

1423 
u∆ock
;

1425 
	`¨8xxx_mib_„tch_p‹t_°©
(
¥iv
, 
p‹t
, 
Ál£
);

1427 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->buf) -Üen,

1430 
mib_°©s
 = &
¥iv
->mib_°©s[
p‹t
 * 
chù
->
num_mibs
];

1431 
i
 = 0; i < 
chù
->
num_mibs
; i++) {

1432 
mib_«me
 = 
chù
->
mib_decs
[
i
].
«me
;

1433 
mib_d©a
 = 
mib_°©s
[
i
];

1434 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->buf) -Üen,

1435 "%-12s: %Œu\n", 
mib_«me
, 
mib_d©a
);

1436 i‡((!
	`°rcmp
(
mib_«me
, "TxByte") ||

1437 !
	`°rcmp
(
mib_«me
, "RxGoodByte")) &&

1438 
mib_d©a
 >= 1024) {

1439 
	`¨8xxx_byã_to_°r
(
buf1
, (buf1), 
mib_d©a
);

1440 --
Àn
;

1441 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->buf) -Üen,

1442 " (%s)\n", 
buf1
);

1444 i‡(
mib_°©s_em±y
 && 
mib_d©a
)

1445 
mib_°©s_em±y
 = 
Ál£
;

1448 i‡(
mib_°©s_em±y
)

1449 
Àn
 = 
	`¢¥ötf
(
buf
, (
¥iv
->buf), "No MIB data");

1451 
vÆ
->
vÆue
.
s
 = 
buf
;

1452 
vÆ
->
Àn
 =Üen;

1454 
ªt
 = 0;

1456 
u∆ock
:

1457 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

1458  
ªt
;

1459 
	}
}

1462 
	$¨8xxx_sw_£t_¨l_age_time
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1463 
swôch_vÆ
 *
vÆ
)

1465 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1466 
age_time
 = 
vÆ
->
vÆue
.
i
;

1467 
u32
 
age_time_vÆ
;

1469 i‡(
age_time
 < 0)

1470  -
EINVAL
;

1472 
age_time_vÆ
 = 
	`¨8xxx_age_time_vÆ
(
age_time
);

1473 i‡(
age_time_vÆ
 == 0 ||áge_time_val > 0xffff)

1474  -
EINVAL
;

1476 
¥iv
->
¨l_age_time
 = 
age_time
;

1478 
	}
}

1481 
	$¨8xxx_sw_gë_¨l_age_time
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1482 
swôch_vÆ
 *
vÆ
)

1484 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1485 
vÆ
->
vÆue
.
i
 = 
¥iv
->
¨l_age_time
;

1487 
	}
}

1490 
	$¨8xxx_sw_gë_¨l_èbÀ
(
swôch_dev
 *
dev
,

1491 c⁄° 
swôch_©å
 *
©å
,

1492 
swôch_vÆ
 *
vÆ
)

1494 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1495 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

1496 c⁄° 
¨8xxx_chù
 *
chù
 = 
¥iv
->chip;

1497 *
buf
 = 
¥iv
->
¨l_buf
;

1498 
i
, 
j
, 
k
, 
Àn
 = 0;

1499 
¨l_íåy
 *
a
, *
a1
;

1500 
u32
 
°©us
;

1502 i‡(!
chù
->
gë_¨l_íåy
)

1503  -
EOPNOTSUPP
;

1505 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1506 
	`muãx_lock
(&
bus
->
mdio_lock
);

1508 
chù
->
	`gë_¨l_íåy
(
¥iv
, 
NULL
, NULL, 
AR8XXX_ARL_INITIALIZE
);

1510 
i
 = 0; i < 
AR8XXX_NUM_ARL_RECORDS
; ++i) {

1511 
a
 = &
¥iv
->
¨l_èbÀ
[
i
];

1512 
du∂iˇã
:

1513 
chù
->
	`gë_¨l_íåy
(
¥iv
, 
a
, &
°©us
, 
AR8XXX_ARL_GET_NEXT
);

1515 i‡(!
°©us
)

1522 
j
 = 0; j < 
i
; ++j) {

1523 
a1
 = &
¥iv
->
¨l_èbÀ
[
j
];

1524 i‡(!
	`memcmp
(
a
->
mac
, 
a1
->mac, (a->mac))) {

1526 
a
->
p‹tm≠
 &~
a1
->portmap;

1527 i‡(!
a
->
p‹tm≠
)

1528 
du∂iˇã
;

1533 
	`muãx_u∆ock
(&
bus
->
mdio_lock
);

1535 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->
¨l_buf
) -Üen,

1538 i‡(
i
 =
AR8XXX_NUM_ARL_RECORDS
)

1539 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->
¨l_buf
) -Üen,

1541 
AR8XXX_NUM_ARL_RECORDS
);

1543 
j
 = 0; j < 
¥iv
->
dev
.
p‹ts
; ++j) {

1544 
k
 = 0; k < 
i
; ++k) {

1545 
a
 = &
¥iv
->
¨l_èbÀ
[
k
];

1546 i‡(!(
a
->
p‹tm≠
 & 
	`BIT
(
j
)))

1548 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
¥iv
->
¨l_buf
) -Üen,

1550 
j
,

1551 
a
->
mac
[5],á->mac[4],á->mac[3],

1552 
a
->
mac
[2],á->mac[1],á->mac[0]);

1556 
vÆ
->
vÆue
.
s
 = 
buf
;

1557 
vÆ
->
Àn
 =Üen;

1559 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1562 
	}
}

1565 
	$¨8xxx_sw_£t_Êush_¨l_èbÀ
(
swôch_dev
 *
dev
,

1566 c⁄° 
swôch_©å
 *
©å
,

1567 
swôch_vÆ
 *
vÆ
)

1569 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1570 
ªt
;

1572 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1573 
ªt
 = 
¥iv
->
chù
->
	`©u_Êush
(priv);

1574 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1576  
ªt
;

1577 
	}
}

1580 
	$¨8xxx_sw_£t_Êush_p‹t_¨l_èbÀ
(
swôch_dev
 *
dev
,

1581 c⁄° 
swôch_©å
 *
©å
,

1582 
swôch_vÆ
 *
vÆ
)

1584 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1585 
p‹t
, 
ªt
;

1587 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1588 i‡(
p‹t
 >
dev
->
p‹ts
)

1589  -
EINVAL
;

1591 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1592 
ªt
 = 
¥iv
->
chù
->
	`©u_Êush_p‹t
’riv, 
p‹t
);

1593 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1595  
ªt
;

1596 
	}
}

1598 c⁄° 
swôch_©å
 
	g¨8xxx_sw_©å_globÆs
[] = {

1600 .
ty≥
 = 
SWITCH_TYPE_INT
,

1601 .
	g«me
 = "enable_vlan",

1602 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1603 .
	g£t
 = 
¨8xxx_sw_£t_vœn
,

1604 .
	ggë
 = 
¨8xxx_sw_gë_vœn
,

1605 .
	gmax
 = 1

1608 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1609 .
	g«me
 = "reset_mibs",

1610 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1611 .
	g£t
 = 
¨8xxx_sw_£t_ª£t_mibs
,

1614 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1615 .
	g«me
 = "enable_mirror_rx",

1616 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

1617 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_rx_íabÀ
,

1618 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_rx_íabÀ
,

1619 .
	gmax
 = 1

1622 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1623 .
	g«me
 = "enable_mirror_tx",

1624 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

1625 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_tx_íabÀ
,

1626 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_tx_íabÀ
,

1627 .
	gmax
 = 1

1630 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1631 .
	g«me
 = "mirror_monitor_port",

1632 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

1633 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_m⁄ô‹_p‹t
,

1634 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_m⁄ô‹_p‹t
,

1635 .
	gmax
 = 
AR8216_NUM_PORTS
 - 1

1638 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1639 .
	g«me
 = "mirror_source_port",

1640 .
	gdes¸ùti⁄
 = "Mirror sourceÖort",

1641 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_sour˚_p‹t
,

1642 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_sour˚_p‹t
,

1643 .
	gmax
 = 
AR8216_NUM_PORTS
 - 1

1646 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1647 .
	g«me
 = "arl_table",

1648 .
	gdes¸ùti⁄
 = "Get ARLÅable",

1649 .
	g£t
 = 
NULL
,

1650 .
	ggë
 = 
¨8xxx_sw_gë_¨l_èbÀ
,

1653 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1654 .
	g«me
 = "flush_arl_table",

1655 .
	gdes¸ùti⁄
 = "Flush ARLÅable",

1656 .
	g£t
 = 
¨8xxx_sw_£t_Êush_¨l_èbÀ
,

1660 c⁄° 
swôch_©å
 
	g¨8xxx_sw_©å_p‹t
[] = {

1662 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1663 .
	g«me
 = "reset_mib",

1664 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1665 .
	g£t
 = 
¨8xxx_sw_£t_p‹t_ª£t_mib
,

1668 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1669 .
	g«me
 = "mib",

1670 .
	gdes¸ùti⁄
 = "GetÖort's MIB counters",

1671 .
	g£t
 = 
NULL
,

1672 .
	ggë
 = 
¨8xxx_sw_gë_p‹t_mib
,

1675 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1676 .
	g«me
 = "flush_arl_table",

1677 .
	gdes¸ùti⁄
 = "FlushÖort's ARLÅableÉntries",

1678 .
	g£t
 = 
¨8xxx_sw_£t_Êush_p‹t_¨l_èbÀ
,

1682 c⁄° 
swôch_©å
 
	g¨8xxx_sw_©å_vœn
[1] = {

1684 .
ty≥
 = 
SWITCH_TYPE_INT
,

1685 .
	g«me
 = "vid",

1686 .
	gdes¸ùti⁄
 = "VLAN ID (0-4094)",

1687 .
	g£t
 = 
¨8xxx_sw_£t_vid
,

1688 .
	ggë
 = 
¨8xxx_sw_gë_vid
,

1689 .
	gmax
 = 4094,

1693 c⁄° 
swôch_dev_›s
 
	g¨8xxx_sw_›s
 = {

1694 .
©å_globÆ
 = {

1695 .
©å
 = 
¨8xxx_sw_©å_globÆs
,

1696 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8xxx_sw_©å_globÆs
),

1698 .
	g©å_p‹t
 = {

1699 .
©å
 = 
¨8xxx_sw_©å_p‹t
,

1700 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8xxx_sw_©å_p‹t
),

1702 .
	g©å_vœn
 = {

1703 .
©å
 = 
¨8xxx_sw_©å_vœn
,

1704 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8xxx_sw_©å_vœn
),

1706 .
	ggë_p‹t_pvid
 = 
¨8xxx_sw_gë_pvid
,

1707 .
	g£t_p‹t_pvid
 = 
¨8xxx_sw_£t_pvid
,

1708 .
	ggë_vœn_p‹ts
 = 
¨8xxx_sw_gë_p‹ts
,

1709 .
	g£t_vœn_p‹ts
 = 
¨8xxx_sw_£t_p‹ts
,

1710 .
	g≠∂y_c⁄fig
 = 
¨8xxx_sw_hw_≠∂y
,

1711 .
	gª£t_swôch
 = 
¨8xxx_sw_ª£t_swôch
,

1712 .
	ggë_p‹t_lök
 = 
¨8xxx_sw_gë_p‹t_lök
,

1721 .
	ggë_p‹t_°©s
 = 
¨8xxx_sw_gë_p‹t_°©s
,

1725 c⁄° 
¨8xxx_chù
 
	g¨8216_chù
 = {

1726 .
ˇps
 = 
AR8XXX_CAP_MIB_COUNTERS
,

1728 .
	gªg_p‹t_°©s_°¨t
 = 0x19000,

1729 .
	gªg_p‹t_°©s_Àngth
 = 0xa0,

1730 .
	gªg_¨l_˘æ
 = 
AR8216_REG_ATU_CTRL
,

1732 .
	g«me
 = "Atheros AR8216",

1733 .
	gp‹ts
 = 
AR8216_NUM_PORTS
,

1734 .
	gvœns
 = 
AR8216_NUM_VLANS
,

1735 .
	gsw›s
 = &
¨8xxx_sw_›s
,

1737 .
	ghw_öô
 = 
¨8216_hw_öô
,

1738 .
	göô_globÆs
 = 
¨8216_öô_globÆs
,

1739 .
	göô_p‹t
 = 
¨8216_öô_p‹t
,

1740 .
	g£tup_p‹t
 = 
¨8216_£tup_p‹t
,

1741 .
	gªad_p‹t_°©us
 = 
¨8216_ªad_p‹t_°©us
,

1742 .
	g©u_Êush
 = 
¨8216_©u_Êush
,

1743 .
	g©u_Êush_p‹t
 = 
¨8216_©u_Êush_p‹t
,

1744 .
	gvtu_Êush
 = 
¨8216_vtu_Êush
,

1745 .
	gvtu_lﬂd_vœn
 = 
¨8216_vtu_lﬂd_vœn
,

1746 .
	g£t_múr‹_ªgs
 = 
¨8216_£t_múr‹_ªgs
,

1747 .
	ggë_¨l_íåy
 = 
¨8216_gë_¨l_íåy
,

1748 .
	gsw_hw_≠∂y
 = 
¨8xxx_sw_hw_≠∂y
,

1750 .
	gnum_mibs
 = 
ARRAY_SIZE
(
¨8216_mibs
),

1751 .
	gmib_decs
 = 
¨8216_mibs
,

1752 .
	gmib_func
 = 
AR8216_REG_MIB_FUNC


1755 c⁄° 
¨8xxx_chù
 
	g¨8236_chù
 = {

1756 .
ˇps
 = 
AR8XXX_CAP_MIB_COUNTERS
,

1758 .
	gªg_p‹t_°©s_°¨t
 = 0x20000,

1759 .
	gªg_p‹t_°©s_Àngth
 = 0x100,

1760 .
	gªg_¨l_˘æ
 = 
AR8216_REG_ATU_CTRL
,

1762 .
	g«me
 = "Atheros AR8236",

1763 .
	gp‹ts
 = 
AR8216_NUM_PORTS
,

1764 .
	gvœns
 = 
AR8216_NUM_VLANS
,

1765 .
	gsw›s
 = &
¨8xxx_sw_›s
,

1767 .
	ghw_öô
 = 
¨8216_hw_öô
,

1768 .
	göô_globÆs
 = 
¨8236_öô_globÆs
,

1769 .
	göô_p‹t
 = 
¨8216_öô_p‹t
,

1770 .
	g£tup_p‹t
 = 
¨8236_£tup_p‹t
,

1771 .
	gªad_p‹t_°©us
 = 
¨8216_ªad_p‹t_°©us
,

1772 .
	g©u_Êush
 = 
¨8216_©u_Êush
,

1773 .
	g©u_Êush_p‹t
 = 
¨8216_©u_Êush_p‹t
,

1774 .
	gvtu_Êush
 = 
¨8216_vtu_Êush
,

1775 .
	gvtu_lﬂd_vœn
 = 
¨8216_vtu_lﬂd_vœn
,

1776 .
	g£t_múr‹_ªgs
 = 
¨8216_£t_múr‹_ªgs
,

1777 .
	ggë_¨l_íåy
 = 
¨8216_gë_¨l_íåy
,

1778 .
	gsw_hw_≠∂y
 = 
¨8xxx_sw_hw_≠∂y
,

1780 .
	gnum_mibs
 = 
ARRAY_SIZE
(
¨8236_mibs
),

1781 .
	gmib_decs
 = 
¨8236_mibs
,

1782 .
	gmib_func
 = 
AR8216_REG_MIB_FUNC


1785 c⁄° 
¨8xxx_chù
 
	g¨8316_chù
 = {

1786 .
ˇps
 = 
AR8XXX_CAP_GIGE
 | 
AR8XXX_CAP_MIB_COUNTERS
,

1788 .
	gªg_p‹t_°©s_°¨t
 = 0x20000,

1789 .
	gªg_p‹t_°©s_Àngth
 = 0x100,

1790 .
	gªg_¨l_˘æ
 = 
AR8216_REG_ATU_CTRL
,

1792 .
	g«me
 = "Atheros AR8316",

1793 .
	gp‹ts
 = 
AR8216_NUM_PORTS
,

1794 .
	gvœns
 = 
AR8X16_MAX_VLANS
,

1795 .
	gsw›s
 = &
¨8xxx_sw_›s
,

1797 .
	ghw_öô
 = 
¨8316_hw_öô
,

1798 .
	göô_globÆs
 = 
¨8316_öô_globÆs
,

1799 .
	göô_p‹t
 = 
¨8216_öô_p‹t
,

1800 .
	g£tup_p‹t
 = 
¨8216_£tup_p‹t
,

1801 .
	gªad_p‹t_°©us
 = 
¨8216_ªad_p‹t_°©us
,

1802 .
	g©u_Êush
 = 
¨8216_©u_Êush
,

1803 .
	g©u_Êush_p‹t
 = 
¨8216_©u_Êush_p‹t
,

1804 .
	gvtu_Êush
 = 
¨8216_vtu_Êush
,

1805 .
	gvtu_lﬂd_vœn
 = 
¨8216_vtu_lﬂd_vœn
,

1806 .
	g£t_múr‹_ªgs
 = 
¨8216_£t_múr‹_ªgs
,

1807 .
	ggë_¨l_íåy
 = 
¨8216_gë_¨l_íåy
,

1808 .
	gsw_hw_≠∂y
 = 
¨8xxx_sw_hw_≠∂y
,

1810 .
	gnum_mibs
 = 
ARRAY_SIZE
(
¨8236_mibs
),

1811 .
	gmib_decs
 = 
¨8236_mibs
,

1812 .
	gmib_func
 = 
AR8216_REG_MIB_FUNC


1816 
	$¨8xxx_id_chù
(
¨8xxx_¥iv
 *
¥iv
)

1818 
u32
 
vÆ
;

1819 
u16
 
id
;

1820 
i
;

1822 
vÆ
 = 
	`¨8xxx_ªad
(
¥iv
, 
AR8216_REG_CTRL
);

1823 i‡(
vÆ
 == ~0)

1824  -
ENODEV
;

1826 
id
 = 
vÆ
 & (
AR8216_CTRL_REVISION
 | 
AR8216_CTRL_VERSION
);

1827 
i
 = 0; i < 
AR8X16_PROBE_RETRIES
; i++) {

1828 
u16
 
t
;

1830 
vÆ
 = 
	`¨8xxx_ªad
(
¥iv
, 
AR8216_REG_CTRL
);

1831 i‡(
vÆ
 == ~0)

1832  -
ENODEV
;

1834 
t
 = 
vÆ
 & (
AR8216_CTRL_REVISION
 | 
AR8216_CTRL_VERSION
);

1835 i‡(
t
 !
id
)

1836  -
ENODEV
;

1839 
¥iv
->
chù_vî
 = (
id
 & 
AR8216_CTRL_VERSION
Ë>> 
AR8216_CTRL_VERSION_S
;

1840 
¥iv
->
chù_ªv
 = (
id
 & 
AR8216_CTRL_REVISION
);

1842 
¥iv
->
chù_vî
) {

1843 
AR8XXX_VER_AR8216
:

1844 
¥iv
->
chù
 = &
¨8216_chù
;

1846 
AR8XXX_VER_AR8236
:

1847 
¥iv
->
chù
 = &
¨8236_chù
;

1849 
AR8XXX_VER_AR8316
:

1850 
¥iv
->
chù
 = &
¨8316_chù
;

1852 
AR8XXX_VER_AR8327
:

1853 
¥iv
->
chù
 = &
¨8327_chù
;

1855 
AR8XXX_VER_AR8337
:

1856 
¥iv
->
chù
 = &
¨8337_chù
;

1859 
	`¥_îr
("ar8216: Unknown Atheros device [ver=%d,Ñev=%d]\n",

1860 
¥iv
->
chù_vî
,Öriv->
chù_ªv
);

1862  -
ENODEV
;

1866 
	}
}

1869 
	$¨8xxx_mib_w‹k_func
(
w‹k_°ru˘
 *
w‹k
)

1871 
¨8xxx_¥iv
 *
¥iv
;

1872 
îr
;

1874 
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, 
¨8xxx_¥iv
, 
mib_w‹k
.work);

1876 
	`muãx_lock
(&
¥iv
->
mib_lock
);

1878 
îr
 = 
	`¨8xxx_mib_ˇ±uª
(
¥iv
);

1879 i‡(
îr
)

1880 
√xt_p‹t
;

1882 
	`¨8xxx_mib_„tch_p‹t_°©
(
¥iv
,Öriv->
mib_√xt_p‹t
, 
Ál£
);

1884 
√xt_p‹t
:

1885 
¥iv
->
mib_√xt_p‹t
++;

1886 i‡(
¥iv
->
mib_√xt_p‹t
 >¥iv->
dev
.
p‹ts
)

1887 
¥iv
->
mib_√xt_p‹t
 = 0;

1889 
	`muãx_u∆ock
(&
¥iv
->
mib_lock
);

1890 
	`scheduÀ_dñayed_w‹k
(&
¥iv
->
mib_w‹k
,

1891 
	`m£cs_to_jiffõs
(
AR8XXX_MIB_WORK_DELAY
));

1892 
	}
}

1895 
	$¨8xxx_mib_öô
(
¨8xxx_¥iv
 *
¥iv
)

1897 
Àn
;

1899 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1902 
	`BUG_ON
(!
¥iv
->
chù
->
mib_decs
 || !¥iv->chù->
num_mibs
);

1904 
Àn
 = 
¥iv
->
dev
.
p‹ts
 *Öriv->
chù
->
num_mibs
 *

1905 (*
¥iv
->
mib_°©s
);

1906 
¥iv
->
mib_°©s
 = 
	`kzÆloc
(
Àn
, 
GFP_KERNEL
);

1908 i‡(!
¥iv
->
mib_°©s
)

1909  -
ENOMEM
;

1912 
	}
}

1915 
	$¨8xxx_mib_°¨t
(
¨8xxx_¥iv
 *
¥iv
)

1917 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1920 
	`scheduÀ_dñayed_w‹k
(&
¥iv
->
mib_w‹k
,

1921 
	`m£cs_to_jiffõs
(
AR8XXX_MIB_WORK_DELAY
));

1922 
	}
}

1925 
	$¨8xxx_mib_°›
(
¨8xxx_¥iv
 *
¥iv
)

1927 i‡(!
	`¨8xxx_has_mib_cou¡îs
(
¥iv
))

1930 
	`ˇn˚l_dñayed_w‹k_sync
(&
¥iv
->
mib_w‹k
);

1931 
	}
}

1933 
¨8xxx_¥iv
 *

1934 
	$¨8xxx_¸óã
()

1936 
¨8xxx_¥iv
 *
¥iv
;

1938 
¥iv
 = 
	`kzÆloc
((
¨8xxx_¥iv
), 
GFP_KERNEL
);

1939 i‡(
¥iv
 =
NULL
)

1940  
NULL
;

1942 
	`muãx_öô
(&
¥iv
->
ªg_muãx
);

1943 
	`muãx_öô
(&
¥iv
->
mib_lock
);

1944 
	`INIT_DELAYED_WORK
(&
¥iv
->
mib_w‹k
, 
¨8xxx_mib_w‹k_func
);

1946  
¥iv
;

1947 
	}
}

1950 
	$¨8xxx_‰ì
(
¨8xxx_¥iv
 *
¥iv
)

1952 i‡(
¥iv
->
chù
 &&Öriv->chù->
˛ónup
)

1953 
¥iv
->
chù
->
	`˛ónup
(priv);

1955 
	`k‰ì
(
¥iv
->
chù_d©a
);

1956 
	`k‰ì
(
¥iv
->
mib_°©s
);

1957 
	`k‰ì
(
¥iv
);

1958 
	}
}

1961 
	$¨8xxx_¥obe_swôch
(
¨8xxx_¥iv
 *
¥iv
)

1963 c⁄° 
¨8xxx_chù
 *
chù
;

1964 
swôch_dev
 *
swdev
;

1965 
ªt
;

1967 
ªt
 = 
	`¨8xxx_id_chù
(
¥iv
);

1968 i‡(
ªt
)

1969  
ªt
;

1971 
chù
 = 
¥iv
->chip;

1973 
swdev
 = &
¥iv
->
dev
;

1974 
swdev
->
˝u_p‹t
 = 
AR8216_PORT_CPU
;

1975 
swdev
->
«me
 = 
chù
->name;

1976 
swdev
->
vœns
 = 
chù
->vlans;

1977 
swdev
->
p‹ts
 = 
chù
->ports;

1978 
swdev
->
›s
 = 
chù
->
sw›s
;

1980 
ªt
 = 
	`¨8xxx_mib_öô
(
¥iv
);

1981 i‡(
ªt
)

1982  
ªt
;

1985 
	}
}

1988 
	$¨8xxx_°¨t
(
¨8xxx_¥iv
 *
¥iv
)

1990 
ªt
;

1992 
¥iv
->
öô
 = 
åue
;

1994 
ªt
 = 
¥iv
->
chù
->
	`hw_öô
(priv);

1995 i‡(
ªt
)

1996  
ªt
;

1998 
ªt
 = 
	`¨8xxx_sw_ª£t_swôch
(&
¥iv
->
dev
);

1999 i‡(
ªt
)

2000  
ªt
;

2002 
¥iv
->
öô
 = 
Ál£
;

2004 
	`¨8xxx_mib_°¨t
(
¥iv
);

2007 
	}
}

2010 
	$¨8xxx_phy_c⁄fig_öô
(
phy_devi˚
 *
phydev
)

2012 
¨8xxx_¥iv
 *
¥iv
 = 
phydev
->priv;

2013 
√t_devi˚
 *
dev
 = 
phydev
->
©èched_dev
;

2014 
ªt
;

2016 i‡(
	`WARN_ON
(!
¥iv
))

2017  -
ENODEV
;

2019 i‡(
¥iv
->
chù
->
c⁄fig_©_¥obe
)

2020  
	`¨8xxx_phy_check_™eg
(
phydev
);

2022 
¥iv
->
phy
 = 
phydev
;

2024 i‡(
phydev
->
mdio
.
addr
 != 0) {

2025 i‡(
	`chù_is_¨8316
(
¥iv
)) {

2027 
¥iv
->
dev
.
p‹ts
 = (
AR8216_NUM_PORTS
 - 1);

2028 
¥iv
->
öôülized
 = 
Ál£
;

2029 
¥iv
->
p‹t4_phy
 = 
åue
;

2030 
	`¨8316_hw_öô
(
¥iv
);

2037 
ªt
 = 
	`¨8xxx_°¨t
(
¥iv
);

2038 i‡(
ªt
)

2039  
ªt
;

2042 i‡(
	`chù_is_¨8216
(
¥iv
)) {

2043 
dev
->
phy_±r
 = 
¥iv
;

2044 
dev
->
¥iv_Êags
 |
IFF_NO_IP_ALIGN
;

2045 
dev
->
ëh_m™gÀ_rx
 = 
¨8216_m™gÀ_rx
;

2046 
dev
->
ëh_m™gÀ_tx
 = 
¨8216_m™gÀ_tx
;

2050 
	}
}

2052 
boﬁ


2053 
	$¨8xxx_check_lök_°©es
(
¨8xxx_¥iv
 *
¥iv
)

2055 
boﬁ
 
lök_√w
, 
ch™ged
 = 
Ál£
;

2056 
u32
 
°©us
;

2057 
i
;

2059 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

2061 
i
 = 0; i < 
¥iv
->
dev
.
p‹ts
; i++) {

2062 
°©us
 = 
¥iv
->
chù
->
	`ªad_p‹t_°©us
’riv, 
i
);

2063 
lök_√w
 = !!(
°©us
 & 
AR8216_PORT_STATUS_LINK_UP
);

2064 i‡(
lök_√w
 =
¥iv
->
lök_up
[
i
])

2067 
¥iv
->
lök_up
[
i
] = 
lök_√w
;

2068 
ch™ged
 = 
åue
;

2070 i‡(!
lök_√w
)

2071 
¥iv
->
chù
->
	`©u_Êush_p‹t
’riv, 
i
);

2072 
	`dev_öfo
(&
¥iv
->
phy
->
mdio
.
dev
, "Port %d is %s\n",

2073 
i
, 
lök_√w
 ? "up" : "down");

2076 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

2078  
ch™ged
;

2079 
	}
}

2082 
	$¨8xxx_phy_ªad_°©us
(
phy_devi˚
 *
phydev
)

2084 
¨8xxx_¥iv
 *
¥iv
 = 
phydev
->priv;

2085 
swôch_p‹t_lök
 
lök
;

2088 i‡(
phydev
->
°©e
 =
PHY_CHANGELINK
)

2089 
	`¨8xxx_check_lök_°©es
(
¥iv
);

2091 i‡(
phydev
->
mdio
.
addr
 != 0)

2092  
	`gíphy_ªad_°©us
(
phydev
);

2094 
	`¨8216_ªad_p‹t_lök
(
¥iv
, 
phydev
->
mdio
.
addr
, &
lök
);

2095 
phydev
->
lök
 = !!link.link;

2096 i‡(!
phydev
->
lök
)

2099 
lök
.
•ìd
) {

2100 
SWITCH_PORT_SPEED_10
:

2101 
phydev
->
•ìd
 = 
SPEED_10
;

2103 
SWITCH_PORT_SPEED_100
:

2104 
phydev
->
•ìd
 = 
SPEED_100
;

2106 
SWITCH_PORT_SPEED_1000
:

2107 
phydev
->
•ìd
 = 
SPEED_1000
;

2110 
phydev
->
•ìd
 = 0;

2112 
phydev
->
du∂ex
 = 
lök
.du∂ex ? 
DUPLEX_FULL
 : 
DUPLEX_HALF
;

2114 
phydev
->
°©e
 = 
PHY_RUNNING
;

2115 
	`√tif_ˇºõr_⁄
(
phydev
->
©èched_dev
);

2116 i‡(
phydev
->
adju°_lök
)

2117 
phydev
->
	`adju°_lök
’hydev->
©èched_dev
);

2120 
	}
}

2123 
	$¨8xxx_phy_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

2125 i‡(
phydev
->
mdio
.
addr
 == 0)

2128  
	`gíphy_c⁄fig_™eg
(
phydev
);

2129 
	}
}

2131 c⁄° 
u32
 
	g¨8xxx_phy_ids
[] = {

2140 
boﬁ


2141 
	$¨8xxx_phy_m©ch
(
u32
 
phy_id
)

2143 
i
;

2145 
i
 = 0; i < 
	`ARRAY_SIZE
(
¨8xxx_phy_ids
); i++)

2146 i‡(
phy_id
 =
¨8xxx_phy_ids
[
i
])

2147  
åue
;

2149  
Ál£
;

2150 
	}
}

2152 
boﬁ


2153 
	$¨8xxx_is_possibÀ
(
mii_bus
 *
bus
)

2155 
i
, 
found_phys
 = 0;

2157 
i
 = 0; i < 5; i++) {

2158 
u32
 
phy_id
;

2160 
phy_id
 = 
	`mdiobus_ªad
(
bus
, 
i
, 
MII_PHYSID1
) << 16;

2161 
phy_id
 |
	`mdiobus_ªad
(
bus
, 
i
, 
MII_PHYSID2
);

2162 i‡(
	`¨8xxx_phy_m©ch
(
phy_id
)) {

2163 
found_phys
++;

2164 } i‡(
phy_id
) {

2165 
	`¥_debug
("ar8xxx: unknown PHYát %s:%02x id:%08x\n",

2166 
	`dev_«me
(&
bus
->
dev
), 
i
, 
phy_id
);

2169  !!
found_phys
;

2170 
	}
}

2173 
	$¨8xxx_phy_¥obe
(
phy_devi˚
 *
phydev
)

2175 
¨8xxx_¥iv
 *
¥iv
;

2176 
swôch_dev
 *
swdev
;

2177 
ªt
;

2180 i‡(
phydev
->
mdio
.
addr
 != 0 &&Öhydev->mdio.addr != 3 &&Öhydev->mdio.addr != 4)

2181  -
ENODEV
;

2183 i‡(!
	`¨8xxx_is_possibÀ
(
phydev
->
mdio
.
bus
))

2184  -
ENODEV
;

2186 
	`muãx_lock
(&
¨8xxx_dev_li°_lock
);

2187 
	`li°_f‹_óch_íåy
(
¥iv
, &
¨8xxx_dev_li°
, 
li°
)

2188 i‡(
¥iv
->
mii_bus
 =
phydev
->
mdio
.
bus
)

2189 
found
;

2191 
¥iv
 = 
	`¨8xxx_¸óã
();

2192 i‡(
¥iv
 =
NULL
) {

2193 
ªt
 = -
ENOMEM
;

2194 
u∆ock
;

2197 
¥iv
->
mii_bus
 = 
phydev
->
mdio
.
bus
;

2199 
ªt
 = 
	`¨8xxx_¥obe_swôch
(
¥iv
);

2200 i‡(
ªt
)

2201 
‰ì_¥iv
;

2203 
swdev
 = &
¥iv
->
dev
;

2204 
swdev
->
Æüs
 = 
	`dev_«me
(&
¥iv
->
mii_bus
->
dev
);

2205 
ªt
 = 
	`ªgi°î_swôch
(
swdev
, 
NULL
);

2206 i‡(
ªt
)

2207 
‰ì_¥iv
;

2209 
	`¥_öfo
("%s: %sÑev. %u switchÑegistered on %s\n",

2210 
swdev
->
dev«me
, swdev->
«me
, 
¥iv
->
chù_ªv
,

2211 
	`dev_«me
(&
¥iv
->
mii_bus
->
dev
));

2213 
	`li°_add
(&
¥iv
->
li°
, &
¨8xxx_dev_li°
);

2215 
found
:

2216 
¥iv
->
u£_cou¡
++;

2218 i‡(
phydev
->
mdio
.
addr
 == 0) {

2219 i‡(
	`¨8xxx_has_gige
(
¥iv
)) {

2220 
phydev
->
suµ‹ãd
 = 
SUPPORTED_1000ba£T_FuŒ
;

2221 
phydev
->
advîtisög
 = 
ADVERTISED_1000ba£T_FuŒ
;

2223 
phydev
->
suµ‹ãd
 = 
SUPPORTED_100ba£T_FuŒ
;

2224 
phydev
->
advîtisög
 = 
ADVERTISED_100ba£T_FuŒ
;

2227 i‡(
¥iv
->
chù
->
c⁄fig_©_¥obe
) {

2228 
¥iv
->
phy
 = 
phydev
;

2230 
ªt
 = 
	`¨8xxx_°¨t
(
¥iv
);

2231 i‡(
ªt
)

2232 
îr_uƒegi°î_swôch
;

2235 i‡(
	`¨8xxx_has_gige
(
¥iv
)) {

2236 
phydev
->
suµ‹ãd
 |
SUPPORTED_1000ba£T_FuŒ
;

2237 
phydev
->
advîtisög
 |
ADVERTISED_1000ba£T_FuŒ
;

2239 i‡(
¥iv
->
chù
->
phy_rgmii_£t
)

2240 
¥iv
->
chù
->
	`phy_rgmii_£t
’riv, 
phydev
);

2243 
phydev
->
¥iv
 =Öriv;

2245 
	`muãx_u∆ock
(&
¨8xxx_dev_li°_lock
);

2249 
îr_uƒegi°î_swôch
:

2250 i‡(--
¥iv
->
u£_cou¡
)

2251 
u∆ock
;

2253 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

2255 
‰ì_¥iv
:

2256 
	`¨8xxx_‰ì
(
¥iv
);

2257 
u∆ock
:

2258 
	`muãx_u∆ock
(&
¨8xxx_dev_li°_lock
);

2259  
ªt
;

2260 
	}
}

2263 
	$¨8xxx_phy_dëach
(
phy_devi˚
 *
phydev
)

2265 
√t_devi˚
 *
dev
 = 
phydev
->
©èched_dev
;

2267 i‡(!
dev
)

2270 
dev
->
phy_±r
 = 
NULL
;

2271 
dev
->
¥iv_Êags
 &~
IFF_NO_IP_ALIGN
;

2272 
dev
->
ëh_m™gÀ_rx
 = 
NULL
;

2273 
dev
->
ëh_m™gÀ_tx
 = 
NULL
;

2274 
	}
}

2277 
	$¨8xxx_phy_ªmove
(
phy_devi˚
 *
phydev
)

2279 
¨8xxx_¥iv
 *
¥iv
 = 
phydev
->priv;

2281 i‡(
	`WARN_ON
(!
¥iv
))

2284 
phydev
->
¥iv
 = 
NULL
;

2286 
	`muãx_lock
(&
¨8xxx_dev_li°_lock
);

2288 i‡(--
¥iv
->
u£_cou¡
 > 0) {

2289 
	`muãx_u∆ock
(&
¨8xxx_dev_li°_lock
);

2293 
	`li°_dñ
(&
¥iv
->
li°
);

2294 
	`muãx_u∆ock
(&
¨8xxx_dev_li°_lock
);

2296 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

2297 
	`¨8xxx_mib_°›
(
¥iv
);

2298 
	`¨8xxx_‰ì
(
¥iv
);

2299 
	}
}

2302 
	$¨8xxx_phy_so·_ª£t
(
phy_devi˚
 *
phydev
)

2306 
	}
}

2308 
phy_drivî
 
	g¨8xxx_phy_drivî
[] = {

2310 .
phy_id
 = 0x004d0000,

2311 .
	g«me
 = "Atheros AR8216/AR8236/AR8316",

2312 .
	gphy_id_mask
 = 0xffff0000,

2313 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

2314 .
	g¥obe
 = 
¨8xxx_phy_¥obe
,

2315 .
	gªmove
 = 
¨8xxx_phy_ªmove
,

2316 .
	gdëach
 = 
¨8xxx_phy_dëach
,

2317 .
	gc⁄fig_öô
 = 
¨8xxx_phy_c⁄fig_öô
,

2318 .
	gc⁄fig_™eg
 = 
¨8xxx_phy_c⁄fig_™eg
,

2319 .
	gªad_°©us
 = 
¨8xxx_phy_ªad_°©us
,

2320 .
	gso·_ª£t
 = 
¨8xxx_phy_so·_ª£t
,

2324 
moduÀ_phy_drivî
(
¨8xxx_phy_drivî
);

2325 
MODULE_LICENSE
("GPL");

	@linux/generic/files/drivers/net/phy/ar8216.h

17 #i‚de‡
__AR8216_H


18 
	#__AR8216_H


	)

20 
	#BITS
(
_s
, 
_n
Ë(((1UL << (_n)Ë- 1Ë<< _s)

	)

22 
	#AR8XXX_CAP_GIGE
 
	`BIT
(0)

	)

23 
	#AR8XXX_CAP_MIB_COUNTERS
 
	`BIT
(1)

	)

25 
	#AR8XXX_NUM_PHYS
 5

	)

26 
	#AR8216_PORT_CPU
 0

	)

27 
	#AR8216_NUM_PORTS
 6

	)

28 
	#AR8216_NUM_VLANS
 16

	)

29 
	#AR8316_NUM_VLANS
 4096

	)

32 
	#AR8X16_MAX_VLANS
 128

	)

33 
	#AR8X16_PROBE_RETRIES
 10

	)

34 
	#AR8X16_MAX_PORTS
 8

	)

36 
	#AR8XXX_REG_ARL_CTRL_AGE_TIME_SECS
 7

	)

37 
	#AR8XXX_DEFAULT_ARL_AGE_TIME
 300

	)

40 
	#MII_ATH_MMD_ADDR
 0x0d

	)

41 
	#MII_ATH_MMD_DATA
 0x0e

	)

42 
	#MII_ATH_DBG_ADDR
 0x1d

	)

43 
	#MII_ATH_DBG_DATA
 0x1e

	)

45 
	#AR8216_REG_CTRL
 0x0000

	)

46 
	#AR8216_CTRL_REVISION
 
	`BITS
(0, 8)

	)

47 
	#AR8216_CTRL_REVISION_S
 0

	)

48 
	#AR8216_CTRL_VERSION
 
	`BITS
(8, 8)

	)

49 
	#AR8216_CTRL_VERSION_S
 8

	)

50 
	#AR8216_CTRL_RESET
 
	`BIT
(31)

	)

52 
	#AR8216_REG_FLOOD_MASK
 0x002C

	)

53 
	#AR8216_FM_UNI_DEST_PORTS
 
	`BITS
(0, 6)

	)

54 
	#AR8216_FM_MULTI_DEST_PORTS
 
	`BITS
(16, 6)

	)

55 
	#AR8236_FM_CPU_BROADCAST_EN
 
	`BIT
(26)

	)

56 
	#AR8236_FM_CPU_BCAST_FWD_EN
 
	`BIT
(25)

	)

58 
	#AR8216_REG_GLOBAL_CTRL
 0x0030

	)

59 
	#AR8216_GCTRL_MTU
 
	`BITS
(0, 11)

	)

60 
	#AR8236_GCTRL_MTU
 
	`BITS
(0, 14)

	)

61 
	#AR8316_GCTRL_MTU
 
	`BITS
(0, 14)

	)

63 
	#AR8216_REG_VTU
 0x0040

	)

64 
	#AR8216_VTU_OP
 
	`BITS
(0, 3)

	)

65 
	#AR8216_VTU_OP_NOOP
 0x0

	)

66 
	#AR8216_VTU_OP_FLUSH
 0x1

	)

67 
	#AR8216_VTU_OP_LOAD
 0x2

	)

68 
	#AR8216_VTU_OP_PURGE
 0x3

	)

69 
	#AR8216_VTU_OP_REMOVE_PORT
 0x4

	)

70 
	#AR8216_VTU_ACTIVE
 
	`BIT
(3)

	)

71 
	#AR8216_VTU_FULL
 
	`BIT
(4)

	)

72 
	#AR8216_VTU_PORT
 
	`BITS
(8, 4)

	)

73 
	#AR8216_VTU_PORT_S
 8

	)

74 
	#AR8216_VTU_VID
 
	`BITS
(16, 12)

	)

75 
	#AR8216_VTU_VID_S
 16

	)

76 
	#AR8216_VTU_PRIO
 
	`BITS
(28, 3)

	)

77 
	#AR8216_VTU_PRIO_S
 28

	)

78 
	#AR8216_VTU_PRIO_EN
 
	`BIT
(31)

	)

80 
	#AR8216_REG_VTU_DATA
 0x0044

	)

81 
	#AR8216_VTUDATA_MEMBER
 
	`BITS
(0, 10)

	)

82 
	#AR8236_VTUDATA_MEMBER
 
	`BITS
(0, 7)

	)

83 
	#AR8216_VTUDATA_VALID
 
	`BIT
(11)

	)

85 
	#AR8216_REG_ATU_FUNC0
 0x0050

	)

86 
	#AR8216_ATU_OP
 
	`BITS
(0, 3)

	)

87 
	#AR8216_ATU_OP_NOOP
 0x0

	)

88 
	#AR8216_ATU_OP_FLUSH
 0x1

	)

89 
	#AR8216_ATU_OP_LOAD
 0x2

	)

90 
	#AR8216_ATU_OP_PURGE
 0x3

	)

91 
	#AR8216_ATU_OP_FLUSH_UNLOCKED
 0x4

	)

92 
	#AR8216_ATU_OP_FLUSH_PORT
 0x5

	)

93 
	#AR8216_ATU_OP_GET_NEXT
 0x6

	)

94 
	#AR8216_ATU_ACTIVE
 
	`BIT
(3)

	)

95 
	#AR8216_ATU_PORT_NUM
 
	`BITS
(8, 4)

	)

96 
	#AR8216_ATU_PORT_NUM_S
 8

	)

97 
	#AR8216_ATU_FULL_VIO
 
	`BIT
(12)

	)

98 
	#AR8216_ATU_ADDR5
 
	`BITS
(16, 8)

	)

99 
	#AR8216_ATU_ADDR5_S
 16

	)

100 
	#AR8216_ATU_ADDR4
 
	`BITS
(24, 8)

	)

101 
	#AR8216_ATU_ADDR4_S
 24

	)

103 
	#AR8216_REG_ATU_FUNC1
 0x0054

	)

104 
	#AR8216_ATU_ADDR3
 
	`BITS
(0, 8)

	)

105 
	#AR8216_ATU_ADDR3_S
 0

	)

106 
	#AR8216_ATU_ADDR2
 
	`BITS
(8, 8)

	)

107 
	#AR8216_ATU_ADDR2_S
 8

	)

108 
	#AR8216_ATU_ADDR1
 
	`BITS
(16, 8)

	)

109 
	#AR8216_ATU_ADDR1_S
 16

	)

110 
	#AR8216_ATU_ADDR0
 
	`BITS
(24, 8)

	)

111 
	#AR8216_ATU_ADDR0_S
 24

	)

113 
	#AR8216_REG_ATU_FUNC2
 0x0058

	)

114 
	#AR8216_ATU_PORTS
 
	`BITS
(0, 6)

	)

115 
	#AR8216_ATU_PORTS_S
 0

	)

116 
	#AR8216_ATU_PORT0
 
	`BIT
(0)

	)

117 
	#AR8216_ATU_PORT1
 
	`BIT
(1)

	)

118 
	#AR8216_ATU_PORT2
 
	`BIT
(2)

	)

119 
	#AR8216_ATU_PORT3
 
	`BIT
(3)

	)

120 
	#AR8216_ATU_PORT4
 
	`BIT
(4)

	)

121 
	#AR8216_ATU_PORT5
 
	`BIT
(5)

	)

122 
	#AR8216_ATU_STATUS
 
	`BITS
(16, 4)

	)

123 
	#AR8216_ATU_STATUS_S
 16

	)

125 
	#AR8216_REG_ATU_CTRL
 0x005C

	)

126 
	#AR8216_ATU_CTRL_AGE_EN
 
	`BIT
(17)

	)

127 
	#AR8216_ATU_CTRL_AGE_TIME
 
	`BITS
(0, 16)

	)

128 
	#AR8216_ATU_CTRL_AGE_TIME_S
 0

	)

129 
	#AR8236_ATU_CTRL_RES
 
	`BIT
(20)

	)

131 
	#AR8216_REG_MIB_FUNC
 0x0080

	)

132 
	#AR8216_MIB_TIMER
 
	`BITS
(0, 16)

	)

133 
	#AR8216_MIB_AT_HALF_EN
 
	`BIT
(16)

	)

134 
	#AR8216_MIB_BUSY
 
	`BIT
(17)

	)

135 
	#AR8216_MIB_FUNC
 
	`BITS
(24, 3)

	)

136 
	#AR8216_MIB_FUNC_S
 24

	)

137 
	#AR8216_MIB_FUNC_NO_OP
 0x0

	)

138 
	#AR8216_MIB_FUNC_FLUSH
 0x1

	)

139 
	#AR8216_MIB_FUNC_CAPTURE
 0x3

	)

140 
	#AR8236_MIB_EN
 
	`BIT
(30)

	)

142 
	#AR8216_REG_GLOBAL_CPUPORT
 0x0078

	)

143 
	#AR8216_GLOBAL_CPUPORT_MIRROR_PORT
 
	`BITS
(4, 4)

	)

144 
	#AR8216_GLOBAL_CPUPORT_MIRROR_PORT_S
 4

	)

146 
	#AR8216_PORT_OFFSET
(
_i
Ë(0x0100 * (_ò+ 1))

	)

147 
	#AR8216_REG_PORT_STATUS
(
_i
Ë(
	`AR8216_PORT_OFFSET
(_iË+ 0x0000)

	)

148 
	#AR8216_PORT_STATUS_SPEED
 
	`BITS
(0,2)

	)

149 
	#AR8216_PORT_STATUS_SPEED_S
 0

	)

150 
	#AR8216_PORT_STATUS_TXMAC
 
	`BIT
(2)

	)

151 
	#AR8216_PORT_STATUS_RXMAC
 
	`BIT
(3)

	)

152 
	#AR8216_PORT_STATUS_TXFLOW
 
	`BIT
(4)

	)

153 
	#AR8216_PORT_STATUS_RXFLOW
 
	`BIT
(5)

	)

154 
	#AR8216_PORT_STATUS_DUPLEX
 
	`BIT
(6)

	)

155 
	#AR8216_PORT_STATUS_LINK_UP
 
	`BIT
(8)

	)

156 
	#AR8216_PORT_STATUS_LINK_AUTO
 
	`BIT
(9)

	)

157 
	#AR8216_PORT_STATUS_LINK_PAUSE
 
	`BIT
(10)

	)

158 
	#AR8216_PORT_STATUS_FLOW_CONTROL
 
	`BIT
(12)

	)

160 
	#AR8216_REG_PORT_CTRL
(
_i
Ë(
	`AR8216_PORT_OFFSET
(_iË+ 0x0004)

	)

163 
	#AR8216_PORT_CTRL_STATE
 
	`BITS
(0, 3)

	)

164 
	#AR8216_PORT_CTRL_STATE_S
 0

	)

166 
	#AR8216_PORT_CTRL_LEARN_LOCK
 
	`BIT
(7)

	)

169 
	#AR8216_PORT_CTRL_VLAN_MODE
 
	`BITS
(8, 2)

	)

170 
	#AR8216_PORT_CTRL_VLAN_MODE_S
 8

	)

172 
	#AR8216_PORT_CTRL_IGMP_SNOOP
 
	`BIT
(10)

	)

173 
	#AR8216_PORT_CTRL_HEADER
 
	`BIT
(11)

	)

174 
	#AR8216_PORT_CTRL_MAC_LOOP
 
	`BIT
(12)

	)

175 
	#AR8216_PORT_CTRL_SINGLE_VLAN
 
	`BIT
(13)

	)

176 
	#AR8216_PORT_CTRL_LEARN
 
	`BIT
(14)

	)

177 
	#AR8216_PORT_CTRL_MIRROR_TX
 
	`BIT
(16)

	)

178 
	#AR8216_PORT_CTRL_MIRROR_RX
 
	`BIT
(17)

	)

180 
	#AR8216_REG_PORT_VLAN
(
_i
Ë(
	`AR8216_PORT_OFFSET
(_iË+ 0x0008)

	)

182 
	#AR8216_PORT_VLAN_DEFAULT_ID
 
	`BITS
(0, 12)

	)

183 
	#AR8216_PORT_VLAN_DEFAULT_ID_S
 0

	)

185 
	#AR8216_PORT_VLAN_DEST_PORTS
 
	`BITS
(16, 9)

	)

186 
	#AR8216_PORT_VLAN_DEST_PORTS_S
 16

	)

189 
	#AR8216_PORT_VLAN_TX_PRIO
 
	`BIT
(27)

	)

192 
	#AR8216_PORT_VLAN_PRIORITY
 
	`BITS
(28, 2)

	)

193 
	#AR8216_PORT_VLAN_PRIORITY_S
 28

	)

196 
	#AR8216_PORT_VLAN_MODE
 
	`BITS
(30, 2)

	)

197 
	#AR8216_PORT_VLAN_MODE_S
 30

	)

199 
	#AR8216_REG_PORT_RATE
(
_i
Ë(
	`AR8216_PORT_OFFSET
(_iË+ 0x000c)

	)

200 
	#AR8216_REG_PORT_PRIO
(
_i
Ë(
	`AR8216_PORT_OFFSET
(_iË+ 0x0010)

	)

202 
	#AR8216_STATS_RXBROAD
 0x00

	)

203 
	#AR8216_STATS_RXPAUSE
 0x04

	)

204 
	#AR8216_STATS_RXMULTI
 0x08

	)

205 
	#AR8216_STATS_RXFCSERR
 0x0c

	)

206 
	#AR8216_STATS_RXALIGNERR
 0x10

	)

207 
	#AR8216_STATS_RXRUNT
 0x14

	)

208 
	#AR8216_STATS_RXFRAGMENT
 0x18

	)

209 
	#AR8216_STATS_RX64BYTE
 0x1c

	)

210 
	#AR8216_STATS_RX128BYTE
 0x20

	)

211 
	#AR8216_STATS_RX256BYTE
 0x24

	)

212 
	#AR8216_STATS_RX512BYTE
 0x28

	)

213 
	#AR8216_STATS_RX1024BYTE
 0x2c

	)

214 
	#AR8216_STATS_RXMAXBYTE
 0x30

	)

215 
	#AR8216_STATS_RXTOOLONG
 0x34

	)

216 
	#AR8216_STATS_RXGOODBYTE
 0x38

	)

217 
	#AR8216_STATS_RXBADBYTE
 0x40

	)

218 
	#AR8216_STATS_RXOVERFLOW
 0x48

	)

219 
	#AR8216_STATS_FILTERED
 0x4c

	)

220 
	#AR8216_STATS_TXBROAD
 0x50

	)

221 
	#AR8216_STATS_TXPAUSE
 0x54

	)

222 
	#AR8216_STATS_TXMULTI
 0x58

	)

223 
	#AR8216_STATS_TXUNDERRUN
 0x5c

	)

224 
	#AR8216_STATS_TX64BYTE
 0x60

	)

225 
	#AR8216_STATS_TX128BYTE
 0x64

	)

226 
	#AR8216_STATS_TX256BYTE
 0x68

	)

227 
	#AR8216_STATS_TX512BYTE
 0x6c

	)

228 
	#AR8216_STATS_TX1024BYTE
 0x70

	)

229 
	#AR8216_STATS_TXMAXBYTE
 0x74

	)

230 
	#AR8216_STATS_TXOVERSIZE
 0x78

	)

231 
	#AR8216_STATS_TXBYTE
 0x7c

	)

232 
	#AR8216_STATS_TXCOLLISION
 0x84

	)

233 
	#AR8216_STATS_TXABORTCOL
 0x88

	)

234 
	#AR8216_STATS_TXMULTICOL
 0x8c

	)

235 
	#AR8216_STATS_TXSINGLECOL
 0x90

	)

236 
	#AR8216_STATS_TXEXCDEFER
 0x94

	)

237 
	#AR8216_STATS_TXDEFER
 0x98

	)

238 
	#AR8216_STATS_TXLATECOL
 0x9c

	)

240 
	#AR8236_REG_PORT_VLAN
(
_i
Ë(
	`AR8216_PORT_OFFSET
((_i)Ë+ 0x0008)

	)

241 
	#AR8236_PORT_VLAN_DEFAULT_ID
 
	`BITS
(16, 12)

	)

242 
	#AR8236_PORT_VLAN_DEFAULT_ID_S
 16

	)

243 
	#AR8236_PORT_VLAN_PRIORITY
 
	`BITS
(29, 3)

	)

244 
	#AR8236_PORT_VLAN_PRIORITY_S
 28

	)

246 
	#AR8236_REG_PORT_VLAN2
(
_i
Ë(
	`AR8216_PORT_OFFSET
((_i)Ë+ 0x000c)

	)

247 
	#AR8236_PORT_VLAN2_MEMBER
 
	`BITS
(16, 7)

	)

248 
	#AR8236_PORT_VLAN2_MEMBER_S
 16

	)

249 
	#AR8236_PORT_VLAN2_TX_PRIO
 
	`BIT
(23)

	)

250 
	#AR8236_PORT_VLAN2_VLAN_MODE
 
	`BITS
(30, 2)

	)

251 
	#AR8236_PORT_VLAN2_VLAN_MODE_S
 30

	)

253 
	#AR8236_STATS_RXBROAD
 0x00

	)

254 
	#AR8236_STATS_RXPAUSE
 0x04

	)

255 
	#AR8236_STATS_RXMULTI
 0x08

	)

256 
	#AR8236_STATS_RXFCSERR
 0x0c

	)

257 
	#AR8236_STATS_RXALIGNERR
 0x10

	)

258 
	#AR8236_STATS_RXRUNT
 0x14

	)

259 
	#AR8236_STATS_RXFRAGMENT
 0x18

	)

260 
	#AR8236_STATS_RX64BYTE
 0x1c

	)

261 
	#AR8236_STATS_RX128BYTE
 0x20

	)

262 
	#AR8236_STATS_RX256BYTE
 0x24

	)

263 
	#AR8236_STATS_RX512BYTE
 0x28

	)

264 
	#AR8236_STATS_RX1024BYTE
 0x2c

	)

265 
	#AR8236_STATS_RX1518BYTE
 0x30

	)

266 
	#AR8236_STATS_RXMAXBYTE
 0x34

	)

267 
	#AR8236_STATS_RXTOOLONG
 0x38

	)

268 
	#AR8236_STATS_RXGOODBYTE
 0x3c

	)

269 
	#AR8236_STATS_RXBADBYTE
 0x44

	)

270 
	#AR8236_STATS_RXOVERFLOW
 0x4c

	)

271 
	#AR8236_STATS_FILTERED
 0x50

	)

272 
	#AR8236_STATS_TXBROAD
 0x54

	)

273 
	#AR8236_STATS_TXPAUSE
 0x58

	)

274 
	#AR8236_STATS_TXMULTI
 0x5c

	)

275 
	#AR8236_STATS_TXUNDERRUN
 0x60

	)

276 
	#AR8236_STATS_TX64BYTE
 0x64

	)

277 
	#AR8236_STATS_TX128BYTE
 0x68

	)

278 
	#AR8236_STATS_TX256BYTE
 0x6c

	)

279 
	#AR8236_STATS_TX512BYTE
 0x70

	)

280 
	#AR8236_STATS_TX1024BYTE
 0x74

	)

281 
	#AR8236_STATS_TX1518BYTE
 0x78

	)

282 
	#AR8236_STATS_TXMAXBYTE
 0x7c

	)

283 
	#AR8236_STATS_TXOVERSIZE
 0x80

	)

284 
	#AR8236_STATS_TXBYTE
 0x84

	)

285 
	#AR8236_STATS_TXCOLLISION
 0x8c

	)

286 
	#AR8236_STATS_TXABORTCOL
 0x90

	)

287 
	#AR8236_STATS_TXMULTICOL
 0x94

	)

288 
	#AR8236_STATS_TXSINGLECOL
 0x98

	)

289 
	#AR8236_STATS_TXEXCDEFER
 0x9c

	)

290 
	#AR8236_STATS_TXDEFER
 0xa0

	)

291 
	#AR8236_STATS_TXLATECOL
 0xa4

	)

293 
	#AR8316_REG_POSTRIP
 0x0008

	)

294 
	#AR8316_POSTRIP_MAC0_GMII_EN
 
	`BIT
(0)

	)

295 
	#AR8316_POSTRIP_MAC0_RGMII_EN
 
	`BIT
(1)

	)

296 
	#AR8316_POSTRIP_PHY4_GMII_EN
 
	`BIT
(2)

	)

297 
	#AR8316_POSTRIP_PHY4_RGMII_EN
 
	`BIT
(3)

	)

298 
	#AR8316_POSTRIP_MAC0_MAC_MODE
 
	`BIT
(4)

	)

299 
	#AR8316_POSTRIP_RTL_MODE
 
	`BIT
(5)

	)

300 
	#AR8316_POSTRIP_RGMII_RXCLK_DELAY_EN
 
	`BIT
(6)

	)

301 
	#AR8316_POSTRIP_RGMII_TXCLK_DELAY_EN
 
	`BIT
(7)

	)

302 
	#AR8316_POSTRIP_SERDES_EN
 
	`BIT
(8)

	)

303 
	#AR8316_POSTRIP_SEL_ANA_RST
 
	`BIT
(9)

	)

304 
	#AR8316_POSTRIP_GATE_25M_EN
 
	`BIT
(10)

	)

305 
	#AR8316_POSTRIP_SEL_CLK25M
 
	`BIT
(11)

	)

306 
	#AR8316_POSTRIP_HIB_PULSE_HW
 
	`BIT
(12)

	)

307 
	#AR8316_POSTRIP_DBG_MODE_I
 
	`BIT
(13)

	)

308 
	#AR8316_POSTRIP_MAC5_MAC_MODE
 
	`BIT
(14)

	)

309 
	#AR8316_POSTRIP_MAC5_PHY_MODE
 
	`BIT
(15)

	)

310 
	#AR8316_POSTRIP_POWER_DOWN_HW
 
	`BIT
(16)

	)

311 
	#AR8316_POSTRIP_LPW_STATE_EN
 
	`BIT
(17)

	)

312 
	#AR8316_POSTRIP_MAN_EN
 
	`BIT
(18)

	)

313 
	#AR8316_POSTRIP_PHY_PLL_ON
 
	`BIT
(19)

	)

314 
	#AR8316_POSTRIP_LPW_EXIT
 
	`BIT
(20)

	)

315 
	#AR8316_POSTRIP_TXDELAY_S0
 
	`BIT
(21)

	)

316 
	#AR8316_POSTRIP_TXDELAY_S1
 
	`BIT
(22)

	)

317 
	#AR8316_POSTRIP_RXDELAY_S0
 
	`BIT
(23)

	)

318 
	#AR8316_POSTRIP_LED_OPEN_EN
 
	`BIT
(24)

	)

319 
	#AR8316_POSTRIP_SPI_EN
 
	`BIT
(25)

	)

320 
	#AR8316_POSTRIP_RXDELAY_S1
 
	`BIT
(26)

	)

321 
	#AR8316_POSTRIP_POWER_ON_SEL
 
	`BIT
(31)

	)

325 
	mAR8216_PORT_SPEED_10M
 = 0,

326 
	mAR8216_PORT_SPEED_100M
 = 1,

327 
	mAR8216_PORT_SPEED_1000M
 = 2,

328 
	mAR8216_PORT_SPEED_ERR
 = 3,

333 
	mAR8216_IN_PORT_ONLY
 = 0,

334 
	mAR8216_IN_PORT_FALLBACK
 = 1,

335 
	mAR8216_IN_VLAN_ONLY
 = 2,

336 
	mAR8216_IN_SECURE
 = 3

341 
	mAR8216_OUT_KEEP
 = 0,

342 
	mAR8216_OUT_STRIP_VLAN
 = 1,

343 
	mAR8216_OUT_ADD_VLAN
 = 2

348 
	mAR8216_PORT_STATE_DISABLED
 = 0,

349 
	mAR8216_PORT_STATE_BLOCK
 = 1,

350 
	mAR8216_PORT_STATE_LISTEN
 = 2,

351 
	mAR8216_PORT_STATE_LEARN
 = 3,

352 
	mAR8216_PORT_STATE_FORWARD
 = 4

356 
	mAR8XXX_VER_AR8216
 = 0x01,

357 
	mAR8XXX_VER_AR8236
 = 0x03,

358 
	mAR8XXX_VER_AR8316
 = 0x10,

359 
	mAR8XXX_VER_AR8327
 = 0x12,

360 
	mAR8XXX_VER_AR8337
 = 0x13,

363 
	#AR8XXX_NUM_ARL_RECORDS
 100

	)

365 
	e¨l_›
 {

366 
	mAR8XXX_ARL_INITIALIZE
,

367 
	mAR8XXX_ARL_GET_NEXT


370 
	s¨l_íåy
 {

371 
u16
 
	mp‹tm≠
;

372 
u8
 
	mmac
[6];

375 
	g¨8xxx_¥iv
;

377 
	s¨8xxx_mib_desc
 {

378 
	msize
;

379 
	moff£t
;

380 c⁄° *
	m«me
;

383 
	s¨8xxx_chù
 {

384 
	mˇps
;

385 
boﬁ
 
	mc⁄fig_©_¥obe
;

386 
boﬁ
 
	mmii_lo_fú°
;

389 
	mªg_p‹t_°©s_°¨t
;

390 
	mªg_p‹t_°©s_Àngth
;

392 
	mªg_¨l_˘æ
;

394 (*
	mhw_öô
)(
¨8xxx_¥iv
 *
	m¥iv
);

395 (*
	m˛ónup
)(
¨8xxx_¥iv
 *
	m¥iv
);

397 c⁄° *
	m«me
;

398 
	mvœns
;

399 
	mp‹ts
;

400 c⁄° 
swôch_dev_›s
 *
	msw›s
;

402 (*
	möô_globÆs
)(
¨8xxx_¥iv
 *
	m¥iv
);

403 (*
	möô_p‹t
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mp‹t
);

404 (*
	m£tup_p‹t
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mp‹t
, 
u32
 
	mmembîs
);

405 
u32
 (*
ªad_p‹t_°©us
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mp‹t
);

406 
u32
 (*
ªad_p‹t_ìe_°©us
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mp‹t
);

407 (*
	m©u_Êush
)(
¨8xxx_¥iv
 *
	m¥iv
);

408 (*
	m©u_Êush_p‹t
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mp‹t
);

409 (*
	mvtu_Êush
)(
¨8xxx_¥iv
 *
	m¥iv
);

410 (*
	mvtu_lﬂd_vœn
)(
¨8xxx_¥iv
 *
	m¥iv
, 
u32
 
	mvid
, u32 
	mp‹t_mask
);

411 (*
	mphy_fixup
)(
¨8xxx_¥iv
 *
	m¥iv
, 
	mphy
);

412 (*
	m£t_múr‹_ªgs
)(
¨8xxx_¥iv
 *
	m¥iv
);

413 (*
	mgë_¨l_íåy
)(
¨8xxx_¥iv
 *
	m¥iv
, 
¨l_íåy
 *
	ma
,

414 
u32
 *
	m°©us
, 
¨l_›
 
	m›
);

415 (*
	msw_hw_≠∂y
)(
swôch_dev
 *
	mdev
);

416 (*
	mphy_rgmii_£t
)(
¨8xxx_¥iv
 *
	m¥iv
, 
phy_devi˚
 *
	mphydev
);

418 c⁄° 
¨8xxx_mib_desc
 *
	mmib_decs
;

419 
	mnum_mibs
;

420 
	mmib_func
;

423 
	s¨8xxx_¥iv
 {

424 
swôch_dev
 
	mdev
;

425 
mii_bus
 *
	mmii_bus
;

426 
phy_devi˚
 *
	mphy
;

428 (*
	mgë_p‹t_lök
)(
	mp‹t
);

430 c⁄° 
√t_devi˚_›s
 *
	mndo_ﬁd
;

431 
√t_devi˚_›s
 
	mndo
;

432 
muãx
 
	mªg_muãx
;

433 
u8
 
	mchù_vî
;

434 
u8
 
	mchù_ªv
;

435 c⁄° 
¨8xxx_chù
 *
	mchù
;

436 *
	mchù_d©a
;

437 
boﬁ
 
	möôülized
;

438 
boﬁ
 
	mp‹t4_phy
;

439 
	mbuf
[2048];

440 
¨l_íåy
 
	m¨l_èbÀ
[
AR8XXX_NUM_ARL_RECORDS
];

441 
	m¨l_buf
[
AR8XXX_NUM_ARL_RECORDS
 * 32 + 256];

442 
boﬁ
 
	mlök_up
[
AR8X16_MAX_PORTS
];

444 
boﬁ
 
	möô
;

446 
muãx
 
	mmib_lock
;

447 
dñayed_w‹k
 
	mmib_w‹k
;

448 
	mmib_√xt_p‹t
;

449 
u64
 *
	mmib_°©s
;

451 
li°_hód
 
	mli°
;

452 
	mu£_cou¡
;

455 
boﬁ
 
	mvœn
;

456 
u16
 
	mvœn_id
[
AR8X16_MAX_VLANS
];

457 
u8
 
	mvœn_èbÀ
[
AR8X16_MAX_VLANS
];

458 
u8
 
	mvœn_ègged
;

459 
u16
 
	mpvid
[
AR8X16_MAX_PORTS
];

460 
	m¨l_age_time
;

463 
boﬁ
 
	mmúr‹_rx
;

464 
boﬁ
 
	mmúr‹_tx
;

465 
	msour˚_p‹t
;

466 
	mm⁄ô‹_p‹t
;

467 
u8
 
	mp‹t_vœn_¥io
[
AR8X16_MAX_PORTS
];

470 
u32


471 
¨8xxx_mii_ªad32
(
¨8xxx_¥iv
 *
¥iv
, 
phy_id
, 
ªgnum
);

473 
¨8xxx_mii_wrôe32
(
¨8xxx_¥iv
 *
¥iv
, 
phy_id
, 
ªgnum
, 
u32
 
vÆ
);

474 
u32


475 
¨8xxx_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
);

477 
¨8xxx_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
vÆ
);

478 
u32


479 
¨8xxx_rmw
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
mask
, u32 
vÆ
);

482 
¨8xxx_phy_dbg_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
,

483 
u16
 
dbg_addr
, u16 *
dbg_d©a
);

485 
¨8xxx_phy_dbg_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
,

486 
u16
 
dbg_addr
, u16 
dbg_d©a
);

488 
¨8xxx_phy_mmd_wrôe
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
, 
u16
 
addr
, u16 
ªg
, u16 
d©a
);

489 
u16


490 
¨8xxx_phy_mmd_ªad
(
¨8xxx_¥iv
 *
¥iv
, 
phy_addr
, 
u16
 
addr
, u16 
ªg
);

492 
¨8xxx_phy_öô
(
¨8xxx_¥iv
 *
¥iv
);

494 
¨8xxx_sw_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

495 
swôch_vÆ
 *
vÆ
);

497 
¨8xxx_sw_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

498 
swôch_vÆ
 *
vÆ
);

500 
¨8xxx_sw_£t_ª£t_mibs
(
swôch_dev
 *
dev
,

501 c⁄° 
swôch_©å
 *
©å
,

502 
swôch_vÆ
 *
vÆ
);

504 
¨8xxx_sw_£t_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

505 c⁄° 
swôch_©å
 *
©å
,

506 
swôch_vÆ
 *
vÆ
);

508 
¨8xxx_sw_gë_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

509 c⁄° 
swôch_©å
 *
©å
,

510 
swôch_vÆ
 *
vÆ
);

512 
¨8xxx_sw_£t_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

513 c⁄° 
swôch_©å
 *
©å
,

514 
swôch_vÆ
 *
vÆ
);

516 
¨8xxx_sw_gë_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

517 c⁄° 
swôch_©å
 *
©å
,

518 
swôch_vÆ
 *
vÆ
);

520 
¨8xxx_sw_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

521 c⁄° 
swôch_©å
 *
©å
,

522 
swôch_vÆ
 *
vÆ
);

524 
¨8xxx_sw_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

525 c⁄° 
swôch_©å
 *
©å
,

526 
swôch_vÆ
 *
vÆ
);

528 
¨8xxx_sw_£t_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

529 c⁄° 
swôch_©å
 *
©å
,

530 
swôch_vÆ
 *
vÆ
);

532 
¨8xxx_sw_gë_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

533 c⁄° 
swôch_©å
 *
©å
,

534 
swôch_vÆ
 *
vÆ
);

536 
¨8xxx_sw_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
);

538 
¨8xxx_sw_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
);

540 
¨8xxx_sw_hw_≠∂y
(
swôch_dev
 *
dev
);

542 
¨8xxx_sw_ª£t_swôch
(
swôch_dev
 *
dev
);

544 
¨8xxx_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

545 
swôch_p‹t_lök
 *
lök
);

547 
¨8xxx_sw_£t_p‹t_ª£t_mib
(
swôch_dev
 *
dev
,

548 c⁄° 
swôch_©å
 *
©å
,

549 
swôch_vÆ
 *
vÆ
);

551 
¨8xxx_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

552 c⁄° 
swôch_©å
 *
©å
,

553 
swôch_vÆ
 *
vÆ
);

555 
¨8xxx_sw_gë_¨l_age_time
(
swôch_dev
 *
dev
,

556 c⁄° 
swôch_©å
 *
©å
,

557 
swôch_vÆ
 *
vÆ
);

559 
¨8xxx_sw_£t_¨l_age_time
(
swôch_dev
 *
dev
,

560 c⁄° 
swôch_©å
 *
©å
,

561 
swôch_vÆ
 *
vÆ
);

563 
¨8xxx_sw_gë_¨l_èbÀ
(
swôch_dev
 *
dev
,

564 c⁄° 
swôch_©å
 *
©å
,

565 
swôch_vÆ
 *
vÆ
);

567 
¨8xxx_sw_£t_Êush_¨l_èbÀ
(
swôch_dev
 *
dev
,

568 c⁄° 
swôch_©å
 *
©å
,

569 
swôch_vÆ
 *
vÆ
);

571 
¨8xxx_sw_£t_Êush_p‹t_¨l_èbÀ
(
swôch_dev
 *
dev
,

572 c⁄° 
swôch_©å
 *
©å
,

573 
swôch_vÆ
 *
vÆ
);

575 
¨8216_waô_bô
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
mask
, u32 
vÆ
);

577 
ölöe
 
¨8xxx_¥iv
 *

578 
	$swdev_to_¨8xxx
(
swôch_dev
 *
swdev
)

580  
	`c⁄èöî_of
(
swdev
, 
¨8xxx_¥iv
, 
dev
);

581 
	}
}

583 
ölöe
 
boﬁ
 
	$¨8xxx_has_gige
(
¨8xxx_¥iv
 *
¥iv
)

585  
¥iv
->
chù
->
ˇps
 & 
AR8XXX_CAP_GIGE
;

586 
	}
}

588 
ölöe
 
boﬁ
 
	$¨8xxx_has_mib_cou¡îs
(
¨8xxx_¥iv
 *
¥iv
)

590  
¥iv
->
chù
->
ˇps
 & 
AR8XXX_CAP_MIB_COUNTERS
;

591 
	}
}

593 
ölöe
 
boﬁ
 
	$chù_is_¨8216
(
¨8xxx_¥iv
 *
¥iv
)

595  
¥iv
->
chù_vî
 =
AR8XXX_VER_AR8216
;

596 
	}
}

598 
ölöe
 
boﬁ
 
	$chù_is_¨8236
(
¨8xxx_¥iv
 *
¥iv
)

600  
¥iv
->
chù_vî
 =
AR8XXX_VER_AR8236
;

601 
	}
}

603 
ölöe
 
boﬁ
 
	$chù_is_¨8316
(
¨8xxx_¥iv
 *
¥iv
)

605  
¥iv
->
chù_vî
 =
AR8XXX_VER_AR8316
;

606 
	}
}

608 
ölöe
 
boﬁ
 
	$chù_is_¨8327
(
¨8xxx_¥iv
 *
¥iv
)

610  
¥iv
->
chù_vî
 =
AR8XXX_VER_AR8327
;

611 
	}
}

613 
ölöe
 
boﬁ
 
	$chù_is_¨8337
(
¨8xxx_¥iv
 *
¥iv
)

615  
¥iv
->
chù_vî
 =
AR8XXX_VER_AR8337
;

616 
	}
}

618 
ölöe
 

619 
	$¨8xxx_ªg_£t
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
vÆ
)

621 
	`¨8xxx_rmw
(
¥iv
, 
ªg
, 0, 
vÆ
);

622 
	}
}

624 
ölöe
 

625 
	$¨8xxx_ªg_˛ór
(
¨8xxx_¥iv
 *
¥iv
, 
ªg
, 
u32
 
vÆ
)

627 
	`¨8xxx_rmw
(
¥iv
, 
ªg
, 
vÆ
, 0);

628 
	}
}

630 
ölöe
 

631 
	$•lô_addr
(
u32
 
ªgaddr
, 
u16
 *
r1
, u16 *
r2
, u16 *
∑ge
)

633 
ªgaddr
 >>= 1;

634 *
r1
 = 
ªgaddr
 & 0x1e;

636 
ªgaddr
 >>= 5;

637 *
r2
 = 
ªgaddr
 & 0x7;

639 
ªgaddr
 >>= 3;

640 *
∑ge
 = 
ªgaddr
 & 0x1ff;

641 
	}
}

643 
ölöe
 

644 
	$waô_f‹_∑ge_swôch
()

646 
	`udñay
(5);

647 
	}
}

	@linux/generic/files/drivers/net/phy/ar8327.c

18 
	~<löux/li°.h
>

19 
	~<löux/bô›s.h
>

20 
	~<löux/swôch.h
>

21 
	~<löux/dñay.h
>

22 
	~<löux/phy.h
>

23 
	~<löux/lockdï.h
>

24 
	~<löux/¨8216_∂©f‹m.h
>

25 
	~<löux/w‹kqueue.h
>

26 
	~<löux/of_devi˚.h
>

27 
	~<löux/Àds.h
>

28 
	~<löux/mdio.h
>

30 
	~"¨8216.h
"

31 
	~"¨8327.h
"

33 c⁄° 
¨8xxx_mib_desc
 
¨8236_mibs
[39];

34 c⁄° 
swôch_©å
 
¨8xxx_sw_©å_vœn
[1];

36 
u32


37 
	$¨8327_gë_∑d_cfg
(
¨8327_∑d_cfg
 *
cfg
)

39 
u32
 
t
;

41 i‡(!
cfg
)

44 
t
 = 0;

45 
cfg
->
mode
) {

46 
AR8327_PAD_NC
:

49 
AR8327_PAD_MAC2MAC_MII
:

50 
t
 = 
AR8327_PAD_MAC_MII_EN
;

51 i‡(
cfg
->
rx˛k_£l
)

52 
t
 |
AR8327_PAD_MAC_MII_RXCLK_SEL
;

53 i‡(
cfg
->
tx˛k_£l
)

54 
t
 |
AR8327_PAD_MAC_MII_TXCLK_SEL
;

57 
AR8327_PAD_MAC2MAC_GMII
:

58 
t
 = 
AR8327_PAD_MAC_GMII_EN
;

59 i‡(
cfg
->
rx˛k_£l
)

60 
t
 |
AR8327_PAD_MAC_GMII_RXCLK_SEL
;

61 i‡(
cfg
->
tx˛k_£l
)

62 
t
 |
AR8327_PAD_MAC_GMII_TXCLK_SEL
;

65 
AR8327_PAD_MAC_SGMII
:

66 
t
 = 
AR8327_PAD_SGMII_EN
;

74 
t
 |
cfg
->
tx˛k_dñay_£l
 << 
AR8327_PAD_RGMII_TXCLK_DELAY_SEL_S
;

75 
t
 |
cfg
->
rx˛k_dñay_£l
 << 
AR8327_PAD_RGMII_RXCLK_DELAY_SEL_S
;

76 i‡(
cfg
->
rx˛k_dñay_í
)

77 
t
 |
AR8327_PAD_RGMII_RXCLK_DELAY_EN
;

78 i‡(
cfg
->
tx˛k_dñay_í
)

79 
t
 |
AR8327_PAD_RGMII_TXCLK_DELAY_EN
;

81 i‡(
cfg
->
sgmii_dñay_í
)

82 
t
 |
AR8327_PAD_SGMII_DELAY_EN
;

86 
AR8327_PAD_MAC2PHY_MII
:

87 
t
 = 
AR8327_PAD_PHY_MII_EN
;

88 i‡(
cfg
->
rx˛k_£l
)

89 
t
 |
AR8327_PAD_PHY_MII_RXCLK_SEL
;

90 i‡(
cfg
->
tx˛k_£l
)

91 
t
 |
AR8327_PAD_PHY_MII_TXCLK_SEL
;

94 
AR8327_PAD_MAC2PHY_GMII
:

95 
t
 = 
AR8327_PAD_PHY_GMII_EN
;

96 i‡(
cfg
->
pùe_rx˛k_£l
)

97 
t
 |
AR8327_PAD_PHY_GMII_PIPE_RXCLK_SEL
;

98 i‡(
cfg
->
rx˛k_£l
)

99 
t
 |
AR8327_PAD_PHY_GMII_RXCLK_SEL
;

100 i‡(
cfg
->
tx˛k_£l
)

101 
t
 |
AR8327_PAD_PHY_GMII_TXCLK_SEL
;

104 
AR8327_PAD_MAC_RGMII
:

105 
t
 = 
AR8327_PAD_RGMII_EN
;

106 
t
 |
cfg
->
tx˛k_dñay_£l
 << 
AR8327_PAD_RGMII_TXCLK_DELAY_SEL_S
;

107 
t
 |
cfg
->
rx˛k_dñay_£l
 << 
AR8327_PAD_RGMII_RXCLK_DELAY_SEL_S
;

108 i‡(
cfg
->
rx˛k_dñay_í
)

109 
t
 |
AR8327_PAD_RGMII_RXCLK_DELAY_EN
;

110 i‡(
cfg
->
tx˛k_dñay_í
)

111 
t
 |
AR8327_PAD_RGMII_TXCLK_DELAY_EN
;

114 
AR8327_PAD_PHY_GMII
:

115 
t
 = 
AR8327_PAD_PHYX_GMII_EN
;

118 
AR8327_PAD_PHY_RGMII
:

119 
t
 = 
AR8327_PAD_PHYX_RGMII_EN
;

122 
AR8327_PAD_PHY_MII
:

123 
t
 = 
AR8327_PAD_PHYX_MII_EN
;

127  
t
;

128 
	}
}

131 
	$¨8327_phy_rgmii_£t
(
¨8xxx_¥iv
 *
¥iv
, 
phy_devi˚
 *
phydev
)

133 
u16
 
phy_vÆ
 = 0;

134 
phyaddr
 = 
phydev
->
mdio
.
addr
;

135 
devi˚_node
 *
≈
 = 
phydev
->
mdio
.
dev
.
of_node
;

137 i‡(!
≈
)

140 i‡(!
	`of_¥›îty_ªad_boﬁ
(
≈
, "qca,phy-rgmii-en")) {

141 
	`¥_îr
("ar8327: qca,phy-rgmii-en isÇot specified\n");

144 
	`¨8xxx_phy_dbg_ªad
(
¥iv
, 
phyaddr
,

145 
AR8327_PHY_MODE_SEL
, &
phy_vÆ
);

146 
phy_vÆ
 |
AR8327_PHY_MODE_SEL_RGMII
;

147 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phyaddr
,

148 
AR8327_PHY_MODE_SEL
, 
phy_vÆ
);

151 i‡(!
	`of_¥›îty_ªad_boﬁ
(
≈
, "qca,txclk-delay-en")) {

152 
	`¥_îr
("ar8327: qca,txclk-delay-en isÇot specified\n");

155 
	`¨8xxx_phy_dbg_ªad
(
¥iv
, 
phyaddr
,

156 
AR8327_PHY_SYS_CTRL
, &
phy_vÆ
);

157 
phy_vÆ
 |
AR8327_PHY_SYS_CTRL_RGMII_TX_DELAY
;

158 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phyaddr
,

159 
AR8327_PHY_SYS_CTRL
, 
phy_vÆ
);

162 i‡(!
	`of_¥›îty_ªad_boﬁ
(
≈
, "qca,rxclk-delay-en")) {

163 
	`¥_îr
("ar8327: qca,rxclk-delay-en isÇot specified\n");

166 
	`¨8xxx_phy_dbg_ªad
(
¥iv
, 
phyaddr
,

167 
AR8327_PHY_TEST_CTRL
, &
phy_vÆ
);

168 
phy_vÆ
 |
AR8327_PHY_TEST_CTRL_RGMII_RX_DELAY
;

169 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phyaddr
,

170 
AR8327_PHY_TEST_CTRL
, 
phy_vÆ
);

171 
	}
}

174 
	$¨8327_phy_fixup
(
¨8xxx_¥iv
 *
¥iv
, 
phy
)

176 
¥iv
->
chù_ªv
) {

179 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phy
, 0, 0x02ea);

181 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phy
, 0x3d, 0x68a0);

185 
	`¨8xxx_phy_mmd_wrôe
(
¥iv
, 
phy
, 0x7, 0x3c, 0x0);

188 
	`¨8xxx_phy_mmd_wrôe
(
¥iv
, 
phy
, 0x3, 0x800d, 0x803f);

189 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phy
, 0x3d, 0x6860);

190 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phy
, 0x5, 0x2c46);

191 
	`¨8xxx_phy_dbg_wrôe
(
¥iv
, 
phy
, 0x3c, 0x6000);

194 
	}
}

196 
u32


197 
	$¨8327_gë_p‹t_öô_°©us
(
¨8327_p‹t_cfg
 *
cfg
)

199 
u32
 
t
;

201 i‡(!
cfg
->
f‹˚_lök
)

202  
AR8216_PORT_STATUS_LINK_AUTO
;

204 
t
 = 
AR8216_PORT_STATUS_TXMAC
 | 
AR8216_PORT_STATUS_RXMAC
;

205 
t
 |
cfg
->
du∂ex
 ? 
AR8216_PORT_STATUS_DUPLEX
 : 0;

206 
t
 |
cfg
->
rx∑u£
 ? 
AR8216_PORT_STATUS_RXFLOW
 : 0;

207 
t
 |
cfg
->
tx∑u£
 ? 
AR8216_PORT_STATUS_TXFLOW
 : 0;

209 
cfg
->
•ìd
) {

210 
AR8327_PORT_SPEED_10
:

211 
t
 |
AR8216_PORT_SPEED_10M
;

213 
AR8327_PORT_SPEED_100
:

214 
t
 |
AR8216_PORT_SPEED_100M
;

216 
AR8327_PORT_SPEED_1000
:

217 
t
 |
AR8216_PORT_SPEED_1000M
;

221  
t
;

222 
	}
}

224 
	#AR8327_LED_ENTRY
(
_num
, 
_ªg
, 
_shi·
) \

225 [
_num
] = { .
ªg
 = (
_ªg
), .
shi·
 = (
_shi·
Ë}

	)

227 c⁄° 
¨8327_Àd_íåy


228 
	g¨8327_Àd_m≠
[
AR8327_NUM_LEDS
] = {

229 
AR8327_LED_ENTRY
(
AR8327_LED_PHY0_0
, 0, 14),

230 
AR8327_LED_ENTRY
(
AR8327_LED_PHY0_1
, 1, 14),

231 
AR8327_LED_ENTRY
(
AR8327_LED_PHY0_2
, 2, 14),

233 
AR8327_LED_ENTRY
(
AR8327_LED_PHY1_0
, 3, 8),

234 
AR8327_LED_ENTRY
(
AR8327_LED_PHY1_1
, 3, 10),

235 
AR8327_LED_ENTRY
(
AR8327_LED_PHY1_2
, 3, 12),

237 
AR8327_LED_ENTRY
(
AR8327_LED_PHY2_0
, 3, 14),

238 
AR8327_LED_ENTRY
(
AR8327_LED_PHY2_1
, 3, 16),

239 
AR8327_LED_ENTRY
(
AR8327_LED_PHY2_2
, 3, 18),

241 
AR8327_LED_ENTRY
(
AR8327_LED_PHY3_0
, 3, 20),

242 
AR8327_LED_ENTRY
(
AR8327_LED_PHY3_1
, 3, 22),

243 
AR8327_LED_ENTRY
(
AR8327_LED_PHY3_2
, 3, 24),

245 
AR8327_LED_ENTRY
(
AR8327_LED_PHY4_0
, 0, 30),

246 
AR8327_LED_ENTRY
(
AR8327_LED_PHY4_1
, 1, 30),

247 
AR8327_LED_ENTRY
(
AR8327_LED_PHY4_2
, 2, 30),

251 
	$¨8327_£t_Àd_∑âîn
(
¨8xxx_¥iv
 *
¥iv
, 
Àd_num
,

252 
¨8327_Àd_∑âîn
 
∑âîn
)

254 c⁄° 
¨8327_Àd_íåy
 *
íåy
;

256 
íåy
 = &
¨8327_Àd_m≠
[
Àd_num
];

257 
	`¨8xxx_rmw
(
¥iv
, 
	`AR8327_REG_LED_CTRL
(
íåy
->
ªg
),

258 (3 << 
íåy
->
shi·
), 
∑âîn
 <<Éntry->shift);

259 
	}
}

262 
	$¨8327_Àd_w‹k_func
(
w‹k_°ru˘
 *
w‹k
)

264 
¨8327_Àd
 *
Æed
;

265 
u8
 
∑âîn
;

267 
Æed
 = 
	`c⁄èöî_of
(
w‹k
, 
¨8327_Àd
, 
Àd_w‹k
);

269 
∑âîn
 = 
Æed
->pattern;

271 
	`¨8327_£t_Àd_∑âîn
(
Æed
->
sw_¥iv
,áÀd->
Àd_num
,

272 
∑âîn
);

273 
	}
}

276 
	$¨8327_Àd_scheduÀ_ch™ge
(
¨8327_Àd
 *
Æed
, 
u8
 
∑âîn
)

278 i‡(
Æed
->
∑âîn
 ==Öattern)

281 
Æed
->
∑âîn
 =Öattern;

282 
	`scheduÀ_w‹k
(&
Æed
->
Àd_w‹k
);

283 
	}
}

285 
ölöe
 
¨8327_Àd
 *

286 
	$Àd_cdev_to_¨8327_Àd
(
Àd_˛assdev
 *
Àd_cdev
)

288  
	`c⁄èöî_of
(
Àd_cdev
, 
¨8327_Àd
, 
cdev
);

289 
	}
}

292 
	$¨8327_Àd_blök_£t
(
Àd_˛assdev
 *
Àd_cdev
,

293 *
dñay_⁄
,

294 *
dñay_off
)

296 
¨8327_Àd
 *
Æed
 = 
	`Àd_cdev_to_¨8327_Àd
(
Àd_cdev
);

298 i‡(*
dñay_⁄
 =0 && *
dñay_off
 == 0) {

299 *
dñay_⁄
 = 125;

300 *
dñay_off
 = 125;

303 i‡(*
dñay_⁄
 !125 || *
dñay_off
 != 125) {

308  -
EINVAL
;

311 
	`•ö_lock
(&
Æed
->
lock
);

313 
Æed
->
íabÀ_hw_mode
 = 
Ál£
;

314 
	`¨8327_Àd_scheduÀ_ch™ge
(
Æed
, 
AR8327_LED_PATTERN_BLINK
);

316 
	`•ö_u∆ock
(&
Æed
->
lock
);

319 
	}
}

322 
	$¨8327_Àd_£t_brighäess
(
Àd_˛assdev
 *
Àd_cdev
,

323 
Àd_brighäess
 
brighäess
)

325 
¨8327_Àd
 *
Æed
 = 
	`Àd_cdev_to_¨8327_Àd
(
Àd_cdev
);

326 
u8
 
∑âîn
;

327 
boﬁ
 
a˘ive
;

329 
a˘ive
 = (
brighäess
 !
LED_OFF
);

330 
a˘ive
 ^
Æed
->
a˘ive_low
;

332 
∑âîn
 = (
a˘ive
Ë? 
AR8327_LED_PATTERN_ON
 :

333 
AR8327_LED_PATTERN_OFF
;

335 
	`•ö_lock
(&
Æed
->
lock
);

337 
Æed
->
íabÀ_hw_mode
 = 
Ál£
;

338 
	`¨8327_Àd_scheduÀ_ch™ge
(
Æed
, 
∑âîn
);

340 
	`•ö_u∆ock
(&
Æed
->
lock
);

341 
	}
}

343 
ssize_t


344 
	$¨8327_Àd_íabÀ_hw_mode_show
(
devi˚
 *
dev
,

345 
devi˚_©åibuã
 *
©å
,

346 *
buf
)

348 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

349 
¨8327_Àd
 *
Æed
 = 
	`Àd_cdev_to_¨8327_Àd
(
Àd_cdev
);

350 
ssize_t
 
ªt
 = 0;

352 
ªt
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "%d\n", 
Æed
->
íabÀ_hw_mode
);

354  
ªt
;

355 
	}
}

357 
ssize_t


358 
	$¨8327_Àd_íabÀ_hw_mode_°‹e
(
devi˚
 *
dev
,

359 
devi˚_©åibuã
 *
©å
,

360 c⁄° *
buf
,

361 
size_t
 
size
)

363 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

364 
¨8327_Àd
 *
Æed
 = 
	`Àd_cdev_to_¨8327_Àd
(
Àd_cdev
);

365 
u8
 
∑âîn
;

366 
u8
 
vÆue
;

367 
ªt
;

369 
ªt
 = 
	`k°πou8
(
buf
, 10, &
vÆue
);

370 i‡(
ªt
 < 0)

371  -
EINVAL
;

373 
	`•ö_lock
(&
Æed
->
lock
);

375 
Æed
->
íabÀ_hw_mode
 = !!
vÆue
;

376 i‡(
Æed
->
íabÀ_hw_mode
)

377 
∑âîn
 = 
AR8327_LED_PATTERN_RULE
;

379 
∑âîn
 = 
AR8327_LED_PATTERN_OFF
;

381 
	`¨8327_Àd_scheduÀ_ch™ge
(
Æed
, 
∑âîn
);

383 
	`•ö_u∆ock
(&
Æed
->
lock
);

385  
size
;

386 
	}
}

388 
DEVICE_ATTR
(
íabÀ_hw_mode
, 
S_IRUGO
 | 
S_IWUSR
,

389 
¨8327_Àd_íabÀ_hw_mode_show
,

390 
¨8327_Àd_íabÀ_hw_mode_°‹e
);

393 
	$¨8327_Àd_ªgi°î
(
¨8327_Àd
 *
Æed
)

395 
ªt
;

397 
ªt
 = 
	`Àd_˛assdev_ªgi°î
(
NULL
, &
Æed
->
cdev
);

398 i‡(
ªt
 < 0)

399  
ªt
;

401 i‡(
Æed
->
mode
 =
AR8327_LED_MODE_HW
) {

402 
ªt
 = 
	`devi˚_¸óã_fûe
(
Æed
->
cdev
.
dev
,

403 &
dev_©å_íabÀ_hw_mode
);

404 i‡(
ªt
)

405 
îr_uƒegi°î
;

410 
îr_uƒegi°î
:

411 
	`Àd_˛assdev_uƒegi°î
(&
Æed
->
cdev
);

412  
ªt
;

413 
	}
}

416 
	$¨8327_Àd_uƒegi°î
(
¨8327_Àd
 *
Æed
)

418 i‡(
Æed
->
mode
 =
AR8327_LED_MODE_HW
)

419 
	`devi˚_ªmove_fûe
(
Æed
->
cdev
.
dev
, &
dev_©å_íabÀ_hw_mode
);

421 
	`Àd_˛assdev_uƒegi°î
(&
Æed
->
cdev
);

422 
	`ˇn˚l_w‹k_sync
(&
Æed
->
Àd_w‹k
);

423 
	}
}

426 
	$¨8327_Àd_¸óã
(
¨8xxx_¥iv
 *
¥iv
,

427 c⁄° 
¨8327_Àd_öfo
 *
Àd_öfo
)

429 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

430 
¨8327_Àd
 *
Æed
;

431 
ªt
;

433 i‡(!
	`IS_ENABLED
(
CONFIG_AR8216_PHY_LEDS
))

436 i‡(!
Àd_öfo
->
«me
)

437  -
EINVAL
;

439 i‡(
Àd_öfo
->
Àd_num
 >
AR8327_NUM_LEDS
)

440  -
EINVAL
;

442 
Æed
 = 
	`kzÆloc
((*ÆedË+ 
	`°æí
(
Àd_öfo
->
«me
) + 1,

443 
GFP_KERNEL
);

444 i‡(!
Æed
)

445  -
ENOMEM
;

447 
Æed
->
sw_¥iv
 = 
¥iv
;

448 
Æed
->
Àd_num
 = 
Àd_öfo
->led_num;

449 
Æed
->
a˘ive_low
 = 
Àd_öfo
->active_low;

450 
Æed
->
mode
 = 
Àd_öfo
->mode;

452 i‡(
Æed
->
mode
 =
AR8327_LED_MODE_HW
)

453 
Æed
->
íabÀ_hw_mode
 = 
åue
;

455 
Æed
->
«me
 = (*)(aled + 1);

456 
	`°r˝y
(
Æed
->
«me
, 
Àd_öfo
->name);

458 
Æed
->
cdev
.
«me
 =áled->name;

459 
Æed
->
cdev
.
brighäess_£t
 = 
¨8327_Àd_£t_brighäess
;

460 
Æed
->
cdev
.
blök_£t
 = 
¨8327_Àd_blök_£t
;

461 
Æed
->
cdev
.
deÁu…_åiggî
 = 
Àd_öfo
->default_trigger;

463 
	`•ö_lock_öô
(&
Æed
->
lock
);

464 
	`muãx_öô
(&
Æed
->
muãx
);

465 
	`INIT_WORK
(&
Æed
->
Àd_w‹k
, 
¨8327_Àd_w‹k_func
);

467 
ªt
 = 
	`¨8327_Àd_ªgi°î
(
Æed
);

468 i‡(
ªt
)

469 
îr_‰ì
;

471 
d©a
->
Àds
[d©a->
num_Àds
++] = 
Æed
;

475 
îr_‰ì
:

476 
	`k‰ì
(
Æed
);

477  
ªt
;

478 
	}
}

481 
	$¨8327_Àd_de°roy
(
¨8327_Àd
 *
Æed
)

483 
	`¨8327_Àd_uƒegi°î
(
Æed
);

484 
	`k‰ì
(
Æed
);

485 
	}
}

488 
	$¨8327_Àds_öô
(
¨8xxx_¥iv
 *
¥iv
)

490 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

491 
i
;

493 i‡(!
	`IS_ENABLED
(
CONFIG_AR8216_PHY_LEDS
))

496 
i
 = 0; i < 
d©a
->
num_Àds
; i++) {

497 
¨8327_Àd
 *
Æed
;

499 
Æed
 = 
d©a
->
Àds
[
i
];

501 i‡(
Æed
->
íabÀ_hw_mode
)

502 
Æed
->
∑âîn
 = 
AR8327_LED_PATTERN_RULE
;

504 
Æed
->
∑âîn
 = 
AR8327_LED_PATTERN_OFF
;

506 
	`¨8327_£t_Àd_∑âîn
(
¥iv
, 
Æed
->
Àd_num
,áÀd->
∑âîn
);

508 
	}
}

511 
	$¨8327_Àds_˛ónup
(
¨8xxx_¥iv
 *
¥iv
)

513 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

514 
i
;

516 i‡(!
	`IS_ENABLED
(
CONFIG_AR8216_PHY_LEDS
))

519 
i
 = 0; i < 
d©a
->
num_Àds
; i++) {

520 
¨8327_Àd
 *
Æed
;

522 
Æed
 = 
d©a
->
Àds
[
i
];

523 
	`¨8327_Àd_de°roy
(
Æed
);

526 
	`k‰ì
(
d©a
->
Àds
);

527 
	}
}

530 
	$¨8327_hw_c⁄fig_pd©a
(
¨8xxx_¥iv
 *
¥iv
,

531 
¨8327_∂©f‹m_d©a
 *
pd©a
)

533 
¨8327_Àd_cfg
 *
Àd_cfg
;

534 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

535 
u32
 
pos
, 
√w_pos
;

536 
u32
 
t
;

538 i‡(!
pd©a
)

539  -
EINVAL
;

541 
¥iv
->
gë_p‹t_lök
 = 
pd©a
->get_port_link;

543 
d©a
->
p‹t0_°©us
 = 
	`¨8327_gë_p‹t_öô_°©us
(&
pd©a
->
p‹t0_cfg
);

544 
d©a
->
p‹t6_°©us
 = 
	`¨8327_gë_p‹t_öô_°©us
(&
pd©a
->
p‹t6_cfg
);

546 
t
 = 
	`¨8327_gë_∑d_cfg
(
pd©a
->
∑d0_cfg
);

547 i‡(
	`chù_is_¨8337
(
¥iv
Ë&& !
pd©a
->
∑d0_cfg
->
mac06_exch™ge_dis
)

548 
t
 |
AR8337_PAD_MAC06_EXCHANGE_EN
;

549 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_PAD0_MODE
, 
t
);

551 
t
 = 
	`¨8327_gë_∑d_cfg
(
pd©a
->
∑d5_cfg
);

552 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_PAD5_MODE
, 
t
);

553 
t
 = 
	`¨8327_gë_∑d_cfg
(
pd©a
->
∑d6_cfg
);

554 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_PAD6_MODE
, 
t
);

556 
pos
 = 
	`¨8xxx_ªad
(
¥iv
, 
AR8327_REG_POWER_ON_STRIP
);

557 
√w_pos
 = 
pos
;

559 
Àd_cfg
 = 
pd©a
->led_cfg;

560 i‡(
Àd_cfg
) {

561 i‡(
Àd_cfg
->
›í_døö
)

562 
√w_pos
 |
AR8327_POWER_ON_STRIP_LED_OPEN_EN
;

564 
√w_pos
 &~
AR8327_POWER_ON_STRIP_LED_OPEN_EN
;

566 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_LED_CTRL0
, 
Àd_cfg
->
Àd_˘æ0
);

567 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_LED_CTRL1
, 
Àd_cfg
->
Àd_˘æ1
);

568 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_LED_CTRL2
, 
Àd_cfg
->
Àd_˘æ2
);

569 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_LED_CTRL3
, 
Àd_cfg
->
Àd_˘æ3
);

571 i‡(
√w_pos
 !
pos
)

572 
√w_pos
 |
AR8327_POWER_ON_STRIP_POWER_ON_SEL
;

575 i‡(
pd©a
->
sgmii_cfg
) {

576 
t
 = 
pd©a
->
sgmii_cfg
->
sgmii_˘æ
;

577 i‡(
¥iv
->
chù_ªv
 == 1)

578 
t
 |
AR8327_SGMII_CTRL_EN_PLL
 |

579 
AR8327_SGMII_CTRL_EN_RX
 |

580 
AR8327_SGMII_CTRL_EN_TX
;

582 
t
 &~(
AR8327_SGMII_CTRL_EN_PLL
 |

583 
AR8327_SGMII_CTRL_EN_RX
 |

584 
AR8327_SGMII_CTRL_EN_TX
);

586 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_SGMII_CTRL
, 
t
);

588 i‡(
pd©a
->
sgmii_cfg
->
£rdes_´n
)

589 
√w_pos
 &~
AR8327_POWER_ON_STRIP_SERDES_AEN
;

591 
√w_pos
 |
AR8327_POWER_ON_STRIP_SERDES_AEN
;

594 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_POWER_ON_STRIP
, 
√w_pos
);

596 i‡(
pd©a
->
Àds
 &&Öd©a->
num_Àds
) {

597 
i
;

599 
d©a
->
Àds
 = 
	`kzÆloc
(
pd©a
->
num_Àds
 * (*),

600 
GFP_KERNEL
);

601 i‡(!
d©a
->
Àds
)

602  -
ENOMEM
;

604 
i
 = 0; i < 
pd©a
->
num_Àds
; i++)

605 
	`¨8327_Àd_¸óã
(
¥iv
, &
pd©a
->
Àds
[
i
]);

609 
	}
}

611 #ifde‡
CONFIG_OF


613 
	$¨8327_hw_c⁄fig_of
(
¨8xxx_¥iv
 *
¥iv
, 
devi˚_node
 *
≈
)

615 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

616 c⁄° 
__be32
 *
∑ddr
;

617 
Àn
;

618 
i
;

620 
∑ddr
 = 
	`of_gë_¥›îty
(
≈
, "qˇ,¨8327-öôvÆs", &
Àn
);

621 i‡(!
∑ddr
 || 
Àn
 < (2 * (*paddr)))

622  -
EINVAL
;

624 
Àn
 /(*
∑ddr
);

626 
i
 = 0; i < 
Àn
 - 1; i += 2) {

627 
u32
 
ªg
;

628 
u32
 
vÆ
;

630 
ªg
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
);

631 
vÆ
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
 + 1);

633 
ªg
) {

634 
	`AR8327_REG_PORT_STATUS
(0):

635 
d©a
->
p‹t0_°©us
 = 
vÆ
;

637 
	`AR8327_REG_PORT_STATUS
(6):

638 
d©a
->
p‹t6_°©us
 = 
vÆ
;

641 
	`¨8xxx_wrôe
(
¥iv
, 
ªg
, 
vÆ
);

647 
	}
}

649 
ölöe
 

650 
	$¨8327_hw_c⁄fig_of
(
¨8xxx_¥iv
 *
¥iv
, 
devi˚_node
 *
≈
)

652  -
EINVAL
;

653 
	}
}

657 
	$¨8327_hw_öô
(
¨8xxx_¥iv
 *
¥iv
)

659 
ªt
;

661 
¥iv
->
chù_d©a
 = 
	`kzÆloc
((
¨8327_d©a
), 
GFP_KERNEL
);

662 i‡(!
¥iv
->
chù_d©a
)

663  -
ENOMEM
;

665 i‡(
¥iv
->
phy
->
mdio
.
dev
.
of_node
)

666 
ªt
 = 
	`¨8327_hw_c⁄fig_of
(
¥iv
,Öriv->
phy
->
mdio
.
dev
.
of_node
);

668 
ªt
 = 
	`¨8327_hw_c⁄fig_pd©a
(
¥iv
,

669 
¥iv
->
phy
->
mdio
.
dev
.
∂©f‹m_d©a
);

671 i‡(
ªt
)

672  
ªt
;

674 
	`¨8327_Àds_öô
(
¥iv
);

676 
	`¨8xxx_phy_öô
(
¥iv
);

679 
	}
}

682 
	$¨8327_˛ónup
(
¨8xxx_¥iv
 *
¥iv
)

684 
	`¨8327_Àds_˛ónup
(
¥iv
);

685 
	}
}

688 
	$¨8327_öô_globÆs
(
¨8xxx_¥iv
 *
¥iv
)

690 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

691 
u32
 
t
;

692 
i
;

695 
t
 = 
AR8327_FWD_CTRL0_CPU_PORT_EN
 |

696 
AR8327_FWD_CTRL0_MIRROR_PORT
;

697 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_FWD_CTRL0
, 
t
);

700 
t
 = (
AR8327_PORTS_ALL
 << 
AR8327_FWD_CTRL1_UC_FLOOD_S
) |

701 (
AR8327_PORTS_ALL
 << 
AR8327_FWD_CTRL1_MC_FLOOD_S
) |

702 (
AR8327_PORTS_ALL
 << 
AR8327_FWD_CTRL1_BC_FLOOD_S
);

703 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_FWD_CTRL1
, 
t
);

706 
	`¨8xxx_rmw
(
¥iv
, 
AR8327_REG_MAX_FRAME_SIZE
,

707 
AR8327_MAX_FRAME_SIZE_MTU
, 9018 + 8 + 2);

710 
	`¨8xxx_ªg_£t
(
¥iv
, 
AR8327_REG_MODULE_EN
,

711 
AR8327_MODULE_EN_MIB
);

714 
i
 = 0; i < 
AR8XXX_NUM_PHYS
; i++)

715 
d©a
->
ìe
[
i
] = 
Ál£
;

716 
	}
}

719 
	$¨8327_öô_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

721 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

722 
u32
 
t
;

724 i‡(
p‹t
 =
AR8216_PORT_CPU
)

725 
t
 = 
d©a
->
p‹t0_°©us
;

726 i‡(
p‹t
 == 6)

727 
t
 = 
d©a
->
p‹t6_°©us
;

729 
t
 = 
AR8216_PORT_STATUS_LINK_AUTO
;

731 i‡(
p‹t
 !
AR8216_PORT_CPU
 &&Öort != 6) {

734 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_STATUS
(
p‹t
), 0);

735 
	`m¶ìp
(100);

736 
t
 |
AR8216_PORT_STATUS_FLOW_CONTROL
;

737 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_STATUS
(
p‹t
), 
t
);

739 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_STATUS
(
p‹t
), 
t
);

742 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_HEADER
(
p‹t
), 0);

744 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_VLAN0
(
p‹t
), 0);

746 
t
 = 
AR8327_PORT_VLAN1_OUT_MODE_UNTOUCH
 << 
AR8327_PORT_VLAN1_OUT_MODE_S
;

747 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_VLAN1
(
p‹t
), 
t
);

749 
t
 = 
AR8327_PORT_LOOKUP_LEARN
;

750 
t
 |
AR8216_PORT_STATE_FORWARD
 << 
AR8327_PORT_LOOKUP_STATE_S
;

751 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_LOOKUP
(
p‹t
), 
t
);

752 
	}
}

754 
u32


755 
	$¨8327_ªad_p‹t_°©us
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

757 
u32
 
t
;

759 
t
 = 
	`¨8xxx_ªad
(
¥iv
, 
	`AR8327_REG_PORT_STATUS
(
p‹t
));

764 i‡(
t
 & 
AR8216_PORT_STATUS_LINK_UP
 &&

765 
t
 & 
AR8216_PORT_STATUS_LINK_AUTO
) {

766 
t
 &~(
AR8216_PORT_STATUS_TXFLOW
 | 
AR8216_PORT_STATUS_RXFLOW
);

767 i‡(
t
 & 
AR8327_PORT_STATUS_TXFLOW_AUTO
)

768 
t
 |
AR8216_PORT_STATUS_TXFLOW
;

769 i‡(
t
 & 
AR8327_PORT_STATUS_RXFLOW_AUTO
)

770 
t
 |
AR8216_PORT_STATUS_RXFLOW
;

773  
t
;

774 
	}
}

776 
u32


777 
	$¨8327_ªad_p‹t_ìe_°©us
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

779 
phy
;

780 
u16
 
t
;

782 i‡(
p‹t
 >
¥iv
->
dev
.
p‹ts
)

785 i‡(
p‹t
 == 0 ||Öort == 6)

788 
phy
 = 
p‹t
 - 1;

791 
t
 = 
	`¨8xxx_phy_mmd_ªad
(
¥iv
, 
phy
, 0x7, 0x8000);

793  
	`mmd_ìe_adv_to_ëhtoﬁ_adv_t
(
t
);

794 
	}
}

797 
	$¨8327_©u_Êush
(
¨8xxx_¥iv
 *
¥iv
)

799 
ªt
;

801 
ªt
 = 
	`¨8216_waô_bô
(
¥iv
, 
AR8327_REG_ATU_FUNC
,

802 
AR8327_ATU_FUNC_BUSY
, 0);

803 i‡(!
ªt
)

804 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_ATU_FUNC
,

805 
AR8327_ATU_FUNC_OP_FLUSH
 |

806 
AR8327_ATU_FUNC_BUSY
);

808  
ªt
;

809 
	}
}

812 
	$¨8327_©u_Êush_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

814 
u32
 
t
;

815 
ªt
;

817 
ªt
 = 
	`¨8216_waô_bô
(
¥iv
, 
AR8327_REG_ATU_FUNC
,

818 
AR8327_ATU_FUNC_BUSY
, 0);

819 i‡(!
ªt
) {

820 
t
 = (
p‹t
 << 
AR8327_ATU_PORT_NUM_S
);

821 
t
 |
AR8327_ATU_FUNC_OP_FLUSH_PORT
;

822 
t
 |
AR8327_ATU_FUNC_BUSY
;

823 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_ATU_FUNC
, 
t
);

826  
ªt
;

827 
	}
}

830 
	$¨8327_gë_p‹t_igmp
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
)

832 
u32
 
fwd_˘æ
, 
‰ame_ack
;

834 
fwd_˘æ
 = (
	`BIT
(
p‹t
Ë<< 
AR8327_FWD_CTRL1_IGMP_S
);

835 
‰ame_ack
 = ((
AR8327_FRAME_ACK_CTRL_IGMP_MLD
 |

836 
AR8327_FRAME_ACK_CTRL_IGMP_JOIN
 |

837 
AR8327_FRAME_ACK_CTRL_IGMP_LEAVE
) <<

838 
	`AR8327_FRAME_ACK_CTRL_S
(
p‹t
));

840  (
	`¨8xxx_ªad
(
¥iv
, 
AR8327_REG_FWD_CTRL1
) &

841 
fwd_˘æ
) == fwd_ctrl &&

842 (
	`¨8xxx_ªad
(
¥iv
, 
	`AR8327_REG_FRAME_ACK_CTRL
(
p‹t
)) &

843 
‰ame_ack
) == frame_ack;

844 
	}
}

847 
	$¨8327_£t_p‹t_igmp
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
, 
íabÀ
)

849 
ªg_‰ame_ack
 = 
	`AR8327_REG_FRAME_ACK_CTRL
(
p‹t
);

850 
u32
 
vÆ_‰ame_ack
 = (
AR8327_FRAME_ACK_CTRL_IGMP_MLD
 |

851 
AR8327_FRAME_ACK_CTRL_IGMP_JOIN
 |

852 
AR8327_FRAME_ACK_CTRL_IGMP_LEAVE
) <<

853 
	`AR8327_FRAME_ACK_CTRL_S
(
p‹t
);

855 i‡(
íabÀ
) {

856 
	`¨8xxx_rmw
(
¥iv
, 
AR8327_REG_FWD_CTRL1
,

857 
	`BIT
(
p‹t
Ë<< 
AR8327_FWD_CTRL1_MC_FLOOD_S
,

858 
	`BIT
(
p‹t
Ë<< 
AR8327_FWD_CTRL1_IGMP_S
);

859 
	`¨8xxx_ªg_£t
(
¥iv
, 
ªg_‰ame_ack
, 
vÆ_‰ame_ack
);

861 
	`¨8xxx_rmw
(
¥iv
, 
AR8327_REG_FWD_CTRL1
,

862 
	`BIT
(
p‹t
Ë<< 
AR8327_FWD_CTRL1_IGMP_S
,

863 
	`BIT
(
p‹t
Ë<< 
AR8327_FWD_CTRL1_MC_FLOOD_S
);

864 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
ªg_‰ame_ack
, 
vÆ_‰ame_ack
);

866 
	}
}

869 
	$¨8327_vtu_›
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
›
, u32 
vÆ
)

871 i‡(
	`¨8216_waô_bô
(
¥iv
, 
AR8327_REG_VTU_FUNC1
,

872 
AR8327_VTU_FUNC1_BUSY
, 0))

875 i‡((
›
 & 
AR8327_VTU_FUNC1_OP
Ë=
AR8327_VTU_FUNC1_OP_LOAD
)

876 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_VTU_FUNC0
, 
vÆ
);

878 
›
 |
AR8327_VTU_FUNC1_BUSY
;

879 
	`¨8xxx_wrôe
(
¥iv
, 
AR8327_REG_VTU_FUNC1
, 
›
);

880 
	}
}

883 
	$¨8327_vtu_Êush
(
¨8xxx_¥iv
 *
¥iv
)

885 
	`¨8327_vtu_›
(
¥iv
, 
AR8327_VTU_FUNC1_OP_FLUSH
, 0);

886 
	}
}

889 
	$¨8327_vtu_lﬂd_vœn
(
¨8xxx_¥iv
 *
¥iv
, 
u32
 
vid
, u32 
p‹t_mask
)

891 
u32
 
›
;

892 
u32
 
vÆ
;

893 
i
;

895 
›
 = 
AR8327_VTU_FUNC1_OP_LOAD
 | (
vid
 << 
AR8327_VTU_FUNC1_VID_S
);

896 
vÆ
 = 
AR8327_VTU_FUNC0_VALID
 | 
AR8327_VTU_FUNC0_IVL
;

897 
i
 = 0; i < 
AR8327_NUM_PORTS
; i++) {

898 
u32
 
mode
;

900 i‡((
p‹t_mask
 & 
	`BIT
(
i
)) == 0)

901 
mode
 = 
AR8327_VTU_FUNC0_EG_MODE_NOT
;

902 i‡(
¥iv
->
vœn
 == 0)

903 
mode
 = 
AR8327_VTU_FUNC0_EG_MODE_KEEP
;

904 i‡((
¥iv
->
vœn_ègged
 & 
	`BIT
(
i
)Ë|| (¥iv->
vœn_id
[¥iv->
pvid
[i]] !
vid
))

905 
mode
 = 
AR8327_VTU_FUNC0_EG_MODE_TAG
;

907 
mode
 = 
AR8327_VTU_FUNC0_EG_MODE_UNTAG
;

909 
vÆ
 |
mode
 << 
	`AR8327_VTU_FUNC0_EG_MODE_S
(
i
);

911 
	`¨8327_vtu_›
(
¥iv
, 
›
, 
vÆ
);

912 
	}
}

915 
	$¨8327_£tup_p‹t
(
¨8xxx_¥iv
 *
¥iv
, 
p‹t
, 
u32
 
membîs
)

917 
u32
 
t
;

918 
u32
 
egªss
, 
ögªss
;

919 
u32
 
pvid
 = 
¥iv
->
vœn_id
[¥iv->pvid[
p‹t
]];

921 i‡(
¥iv
->
vœn
) {

922 
egªss
 = 
AR8327_PORT_VLAN1_OUT_MODE_UNMOD
;

923 
ögªss
 = 
AR8216_IN_SECURE
;

925 
egªss
 = 
AR8327_PORT_VLAN1_OUT_MODE_UNTOUCH
;

926 
ögªss
 = 
AR8216_IN_PORT_ONLY
;

929 
t
 = 
pvid
 << 
AR8327_PORT_VLAN0_DEF_SVID_S
;

930 
t
 |
pvid
 << 
AR8327_PORT_VLAN0_DEF_CVID_S
;

931 i‡(
¥iv
->
vœn
 &&Öriv->
p‹t_vœn_¥io
[
p‹t
]) {

932 
u32
 
¥io
 = 
¥iv
->
p‹t_vœn_¥io
[
p‹t
];

934 
t
 |
¥io
 << 
AR8327_PORT_VLAN0_DEF_SPRI_S
;

935 
t
 |
¥io
 << 
AR8327_PORT_VLAN0_DEF_CPRI_S
;

937 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_VLAN0
(
p‹t
), 
t
);

939 
t
 = 
AR8327_PORT_VLAN1_PORT_VLAN_PROP
;

940 
t
 |
egªss
 << 
AR8327_PORT_VLAN1_OUT_MODE_S
;

941 i‡(
¥iv
->
vœn
 &&Öriv->
p‹t_vœn_¥io
[
p‹t
])

942 
t
 |
AR8327_PORT_VLAN1_VLAN_PRI_PROP
;

944 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_VLAN1
(
p‹t
), 
t
);

946 
t
 = 
membîs
;

947 
t
 |
AR8327_PORT_LOOKUP_LEARN
;

948 
t
 |
ögªss
 << 
AR8327_PORT_LOOKUP_IN_MODE_S
;

949 
t
 |
AR8216_PORT_STATE_FORWARD
 << 
AR8327_PORT_LOOKUP_STATE_S
;

950 
	`¨8xxx_wrôe
(
¥iv
, 
	`AR8327_REG_PORT_LOOKUP
(
p‹t
), 
t
);

951 
	}
}

954 
	$¨8327_sw_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

956 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

957 
u8
 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

958 
i
;

960 
vÆ
->
Àn
 = 0;

961 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

962 
swôch_p‹t
 *
p
;

964 i‡(!(
p‹ts
 & (1 << 
i
)))

967 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

968 
p
->
id
 = 
i
;

969 i‡((
¥iv
->
vœn_ègged
 & (1 << 
i
)Ë|| (¥iv->
pvid
[i] !
vÆ
->
p‹t_vœn
))

970 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

972 
p
->
Êags
 = 0;

975 
	}
}

978 
	$¨8327_sw_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

980 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

981 
u8
 *
vt
 = &
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

982 
i
;

984 *
vt
 = 0;

985 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

986 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

988 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)) {

989 i‡(
vÆ
->
p‹t_vœn
 =
¥iv
->
pvid
[
p
->
id
]) {

990 
¥iv
->
vœn_ègged
 |(1 << 
p
->
id
);

993 
¥iv
->
vœn_ègged
 &~(1 << 
p
->
id
);

994 
¥iv
->
pvid
[
p
->
id
] = 
vÆ
->
p‹t_vœn
;

997 *
vt
 |1 << 
p
->
id
;

1000 
	}
}

1003 
	$¨8327_£t_múr‹_ªgs
(
¨8xxx_¥iv
 *
¥iv
)

1005 
p‹t
;

1008 
	`¨8xxx_rmw
(
¥iv
, 
AR8327_REG_FWD_CTRL0
,

1009 
AR8327_FWD_CTRL0_MIRROR_PORT
,

1010 (0xF << 
AR8327_FWD_CTRL0_MIRROR_PORT_S
));

1011 
p‹t
 = 0;Ö‹à< 
AR8327_NUM_PORTS
;Öort++) {

1012 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
	`AR8327_REG_PORT_LOOKUP
(
p‹t
),

1013 
AR8327_PORT_LOOKUP_ING_MIRROR_EN
);

1015 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
	`AR8327_REG_PORT_HOL_CTRL1
(
p‹t
),

1016 
AR8327_PORT_HOL_CTRL1_EG_MIRROR_EN
);

1020 i‡(
¥iv
->
sour˚_p‹t
 >
AR8327_NUM_PORTS
 ||

1021 
¥iv
->
m⁄ô‹_p‹t
 >
AR8327_NUM_PORTS
 ||

1022 
¥iv
->
sour˚_p‹t
 =¥iv->
m⁄ô‹_p‹t
) {

1026 
	`¨8xxx_rmw
(
¥iv
, 
AR8327_REG_FWD_CTRL0
,

1027 
AR8327_FWD_CTRL0_MIRROR_PORT
,

1028 (
¥iv
->
m⁄ô‹_p‹t
 << 
AR8327_FWD_CTRL0_MIRROR_PORT_S
));

1030 i‡(
¥iv
->
múr‹_rx
)

1031 
	`¨8xxx_ªg_£t
(
¥iv
, 
	`AR8327_REG_PORT_LOOKUP
’riv->
sour˚_p‹t
),

1032 
AR8327_PORT_LOOKUP_ING_MIRROR_EN
);

1034 i‡(
¥iv
->
múr‹_tx
)

1035 
	`¨8xxx_ªg_£t
(
¥iv
, 
	`AR8327_REG_PORT_HOL_CTRL1
’riv->
sour˚_p‹t
),

1036 
AR8327_PORT_HOL_CTRL1_EG_MIRROR_EN
);

1037 
	}
}

1040 
	$¨8327_sw_£t_ìe
(
swôch_dev
 *
dev
,

1041 c⁄° 
swôch_©å
 *
©å
,

1042 
swôch_vÆ
 *
vÆ
)

1044 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1045 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

1046 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1047 
phy
;

1049 i‡(
p‹t
 >
dev
->
p‹ts
)

1050  -
EINVAL
;

1051 i‡(
p‹t
 == 0 ||Öort == 6)

1052  -
EOPNOTSUPP
;

1054 
phy
 = 
p‹t
 - 1;

1056 
d©a
->
ìe
[
phy
] = !!(
vÆ
->
vÆue
.
i
);

1059 
	}
}

1062 
	$¨8327_sw_gë_ìe
(
swôch_dev
 *
dev
,

1063 c⁄° 
swôch_©å
 *
©å
,

1064 
swôch_vÆ
 *
vÆ
)

1066 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1067 c⁄° 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

1068 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1069 
phy
;

1071 i‡(
p‹t
 >
dev
->
p‹ts
)

1072  -
EINVAL
;

1073 i‡(
p‹t
 == 0 ||Öort == 6)

1074  -
EOPNOTSUPP
;

1076 
phy
 = 
p‹t
 - 1;

1078 
vÆ
->
vÆue
.
i
 = 
d©a
->
ìe
[
phy
];

1081 
	}
}

1084 
	$¨8327_waô_©u_ªady
(
¨8xxx_¥iv
 *
¥iv
, 
u16
 
r2
, u16 
r1
)

1086 
timeout
 = 20;

1088 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1
Ë& 
AR8327_ATU_FUNC_BUSY
 && --
timeout
) {

1089 
	`udñay
(10);

1090 
	`c⁄d_ªsched
();

1093 i‡(!
timeout
)

1094 
	`¥_îr
("ar8327:Åimeout waiting forátuÅo becomeÑeady\n");

1095 
	}
}

1097 
	$¨8327_gë_¨l_íåy
(
¨8xxx_¥iv
 *
¥iv
,

1098 
¨l_íåy
 *
a
, 
u32
 *
°©us
, 
¨l_›
 
›
)

1100 
mii_bus
 *
bus
 = 
¥iv
->mii_bus;

1101 
u16
 
r2
, 
∑ge
;

1102 
u16
 
r1_d©a0
, 
r1_d©a1
, 
r1_d©a2
, 
r1_func
;

1103 
u32
 
vÆ0
, 
vÆ1
, 
vÆ2
;

1105 
	`•lô_addr
(
AR8327_REG_ATU_DATA0
, &
r1_d©a0
, &
r2
, &
∑ge
);

1106 
r2
 |= 0x10;

1108 
r1_d©a1
 = (
AR8327_REG_ATU_DATA1
 >> 1) & 0x1e;

1109 
r1_d©a2
 = (
AR8327_REG_ATU_DATA2
 >> 1) & 0x1e;

1110 
r1_func
 = (
AR8327_REG_ATU_FUNC
 >> 1) & 0x1e;

1112 
›
) {

1113 
AR8XXX_ARL_INITIALIZE
:

1117 
bus
->
	`wrôe
(bus, 0x18, 0, 
∑ge
);

1118 
	`waô_f‹_∑ge_swôch
();

1120 
	`¨8327_waô_©u_ªady
(
¥iv
, 
r2
, 
r1_func
);

1122 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_d©a0
, 0);

1123 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_d©a1
, 0);

1124 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_d©a2
, 0);

1126 
AR8XXX_ARL_GET_NEXT
:

1127 
	`¨8xxx_mii_wrôe32
(
¥iv
, 
r2
, 
r1_func
,

1128 
AR8327_ATU_FUNC_OP_GET_NEXT
 |

1129 
AR8327_ATU_FUNC_BUSY
);

1130 
	`¨8327_waô_©u_ªady
(
¥iv
, 
r2
, 
r1_func
);

1132 
vÆ0
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_d©a0
);

1133 
vÆ1
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_d©a1
);

1134 
vÆ2
 = 
	`¨8xxx_mii_ªad32
(
¥iv
, 
r2
, 
r1_d©a2
);

1136 *
°©us
 = 
vÆ2
 & 
AR8327_ATU_STATUS
;

1137 i‡(!*
°©us
)

1140 
a
->
p‹tm≠
 = (
vÆ1
 & 
AR8327_ATU_PORTS
Ë>> 
AR8327_ATU_PORTS_S
;

1141 
a
->
mac
[0] = (
vÆ0
 & 
AR8327_ATU_ADDR0
Ë>> 
AR8327_ATU_ADDR0_S
;

1142 
a
->
mac
[1] = (
vÆ0
 & 
AR8327_ATU_ADDR1
Ë>> 
AR8327_ATU_ADDR1_S
;

1143 
a
->
mac
[2] = (
vÆ0
 & 
AR8327_ATU_ADDR2
Ë>> 
AR8327_ATU_ADDR2_S
;

1144 
a
->
mac
[3] = (
vÆ0
 & 
AR8327_ATU_ADDR3
Ë>> 
AR8327_ATU_ADDR3_S
;

1145 
a
->
mac
[4] = (
vÆ1
 & 
AR8327_ATU_ADDR4
Ë>> 
AR8327_ATU_ADDR4_S
;

1146 
a
->
mac
[5] = (
vÆ1
 & 
AR8327_ATU_ADDR5
Ë>> 
AR8327_ATU_ADDR5_S
;

1149 
	}
}

1152 
	$¨8327_sw_hw_≠∂y
(
swôch_dev
 *
dev
)

1154 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1155 c⁄° 
¨8327_d©a
 *
d©a
 = 
¥iv
->
chù_d©a
;

1156 
ªt
, 
i
;

1158 
ªt
 = 
	`¨8xxx_sw_hw_≠∂y
(
dev
);

1159 i‡(
ªt
)

1160  
ªt
;

1162 
i
=0; i < 
AR8XXX_NUM_PHYS
; i++) {

1163 i‡(
d©a
->
ìe
[
i
])

1164 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
AR8327_REG_EEE_CTRL
,

1165 
	`AR8327_EEE_CTRL_DISABLE_PHY
(
i
));

1167 
	`¨8xxx_ªg_£t
(
¥iv
, 
AR8327_REG_EEE_CTRL
,

1168 
	`AR8327_EEE_CTRL_DISABLE_PHY
(
i
));

1172 
	}
}

1175 
	$¨8327_sw_gë_p‹t_igmp_¢o›ög
(
swôch_dev
 *
dev
,

1176 c⁄° 
swôch_©å
 *
©å
,

1177 
swôch_vÆ
 *
vÆ
)

1179 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1180 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1182 i‡(
p‹t
 >
dev
->
p‹ts
)

1183  -
EINVAL
;

1185 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1186 
vÆ
->
vÆue
.
i
 = 
	`¨8327_gë_p‹t_igmp
(
¥iv
, 
p‹t
);

1187 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1190 
	}
}

1193 
	$¨8327_sw_£t_p‹t_igmp_¢o›ög
(
swôch_dev
 *
dev
,

1194 c⁄° 
swôch_©å
 *
©å
,

1195 
swôch_vÆ
 *
vÆ
)

1197 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1198 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1200 i‡(
p‹t
 >
dev
->
p‹ts
)

1201  -
EINVAL
;

1203 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1204 
	`¨8327_£t_p‹t_igmp
(
¥iv
, 
p‹t
, 
vÆ
->
vÆue
.
i
);

1205 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1208 
	}
}

1211 
	$¨8327_sw_gë_igmp_¢o›ög
(
swôch_dev
 *
dev
,

1212 c⁄° 
swôch_©å
 *
©å
,

1213 
swôch_vÆ
 *
vÆ
)

1215 
p‹t
;

1217 
p‹t
 = 0;Ö‹à< 
dev
->
p‹ts
;Öort++) {

1218 
vÆ
->
p‹t_vœn
 = 
p‹t
;

1219 i‡(
	`¨8327_sw_gë_p‹t_igmp_¢o›ög
(
dev
, 
©å
, 
vÆ
) ||

1220 !
vÆ
->
vÆue
.
i
)

1225 
	}
}

1228 
	$¨8327_sw_£t_igmp_¢o›ög
(
swôch_dev
 *
dev
,

1229 c⁄° 
swôch_©å
 *
©å
,

1230 
swôch_vÆ
 *
vÆ
)

1232 
p‹t
;

1234 
p‹t
 = 0;Ö‹à< 
dev
->
p‹ts
;Öort++) {

1235 
vÆ
->
p‹t_vœn
 = 
p‹t
;

1236 i‡(
	`¨8327_sw_£t_p‹t_igmp_¢o›ög
(
dev
, 
©å
, 
vÆ
))

1241 
	}
}

1244 
	$¨8327_sw_gë_igmp_v3
(
swôch_dev
 *
dev
,

1245 c⁄° 
swôch_©å
 *
©å
,

1246 
swôch_vÆ
 *
vÆ
)

1248 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1249 
u32
 
vÆ_ªg
;

1251 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1252 
vÆ_ªg
 = 
	`¨8xxx_ªad
(
¥iv
, 
AR8327_REG_FRAME_ACK_CTRL1
);

1253 
vÆ
->
vÆue
.
i
 = ((
vÆ_ªg
 & 
AR8327_FRAME_ACK_CTRL_IGMP_V3_EN
) != 0);

1254 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1257 
	}
}

1260 
	$¨8327_sw_£t_igmp_v3
(
swôch_dev
 *
dev
,

1261 c⁄° 
swôch_©å
 *
©å
,

1262 
swôch_vÆ
 *
vÆ
)

1264 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1266 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

1267 i‡(
vÆ
->
vÆue
.
i
)

1268 
	`¨8xxx_ªg_£t
(
¥iv
, 
AR8327_REG_FRAME_ACK_CTRL1
,

1269 
AR8327_FRAME_ACK_CTRL_IGMP_V3_EN
);

1271 
	`¨8xxx_ªg_˛ór
(
¥iv
, 
AR8327_REG_FRAME_ACK_CTRL1
,

1272 
AR8327_FRAME_ACK_CTRL_IGMP_V3_EN
);

1273 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

1276 
	}
}

1279 
	$¨8327_sw_£t_p‹t_vœn_¥io
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1280 
swôch_vÆ
 *
vÆ
)

1282 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1283 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1285 i‡(
p‹t
 >
dev
->
p‹ts
)

1286  -
EINVAL
;

1287 i‡(
p‹t
 == 0 ||Öort == 6)

1288  -
EOPNOTSUPP
;

1289 i‡(
vÆ
->
vÆue
.
i
 < 0 || val->value.i > 7)

1290  -
EINVAL
;

1292 
¥iv
->
p‹t_vœn_¥io
[
p‹t
] = 
vÆ
->
vÆue
.
i
;

1295 
	}
}

1298 
	$¨8327_sw_gë_p‹t_vœn_¥io
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

1299 
swôch_vÆ
 *
vÆ
)

1301 
¨8xxx_¥iv
 *
¥iv
 = 
	`swdev_to_¨8xxx
(
dev
);

1302 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1304 
vÆ
->
vÆue
.
i
 = 
¥iv
->
p‹t_vœn_¥io
[
p‹t
];

1307 
	}
}

1309 c⁄° 
swôch_©å
 
	g¨8327_sw_©å_globÆs
[] = {

1311 .
ty≥
 = 
SWITCH_TYPE_INT
,

1312 .
	g«me
 = "enable_vlan",

1313 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1314 .
	g£t
 = 
¨8xxx_sw_£t_vœn
,

1315 .
	ggë
 = 
¨8xxx_sw_gë_vœn
,

1316 .
	gmax
 = 1

1319 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1320 .
	g«me
 = "reset_mibs",

1321 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1322 .
	g£t
 = 
¨8xxx_sw_£t_ª£t_mibs
,

1325 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1326 .
	g«me
 = "enable_mirror_rx",

1327 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

1328 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_rx_íabÀ
,

1329 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_rx_íabÀ
,

1330 .
	gmax
 = 1

1333 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1334 .
	g«me
 = "enable_mirror_tx",

1335 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

1336 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_tx_íabÀ
,

1337 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_tx_íabÀ
,

1338 .
	gmax
 = 1

1341 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1342 .
	g«me
 = "mirror_monitor_port",

1343 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

1344 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_m⁄ô‹_p‹t
,

1345 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_m⁄ô‹_p‹t
,

1346 .
	gmax
 = 
AR8327_NUM_PORTS
 - 1

1349 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1350 .
	g«me
 = "mirror_source_port",

1351 .
	gdes¸ùti⁄
 = "Mirror sourceÖort",

1352 .
	g£t
 = 
¨8xxx_sw_£t_múr‹_sour˚_p‹t
,

1353 .
	ggë
 = 
¨8xxx_sw_gë_múr‹_sour˚_p‹t
,

1354 .
	gmax
 = 
AR8327_NUM_PORTS
 - 1

1357 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1358 .
	g«me
 = "arl_age_time",

1359 .
	gdes¸ùti⁄
 = "ARLágeÅime (secs)",

1360 .
	g£t
 = 
¨8xxx_sw_£t_¨l_age_time
,

1361 .
	ggë
 = 
¨8xxx_sw_gë_¨l_age_time
,

1364 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1365 .
	g«me
 = "arl_table",

1366 .
	gdes¸ùti⁄
 = "Get ARLÅable",

1367 .
	g£t
 = 
NULL
,

1368 .
	ggë
 = 
¨8xxx_sw_gë_¨l_èbÀ
,

1371 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1372 .
	g«me
 = "flush_arl_table",

1373 .
	gdes¸ùti⁄
 = "Flush ARLÅable",

1374 .
	g£t
 = 
¨8xxx_sw_£t_Êush_¨l_èbÀ
,

1377 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1378 .
	g«me
 = "igmp_snooping",

1379 .
	gdes¸ùti⁄
 = "Enable IGMP Snooping",

1380 .
	g£t
 = 
¨8327_sw_£t_igmp_¢o›ög
,

1381 .
	ggë
 = 
¨8327_sw_gë_igmp_¢o›ög
,

1382 .
	gmax
 = 1

1385 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1386 .
	g«me
 = "igmp_v3",

1387 .
	gdes¸ùti⁄
 = "Enable IGMPv3 support",

1388 .
	g£t
 = 
¨8327_sw_£t_igmp_v3
,

1389 .
	ggë
 = 
¨8327_sw_gë_igmp_v3
,

1390 .
	gmax
 = 1

1394 c⁄° 
swôch_©å
 
	g¨8327_sw_©å_p‹t
[] = {

1396 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1397 .
	g«me
 = "reset_mib",

1398 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1399 .
	g£t
 = 
¨8xxx_sw_£t_p‹t_ª£t_mib
,

1402 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1403 .
	g«me
 = "mib",

1404 .
	gdes¸ùti⁄
 = "GetÖort's MIB counters",

1405 .
	g£t
 = 
NULL
,

1406 .
	ggë
 = 
¨8xxx_sw_gë_p‹t_mib
,

1409 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1410 .
	g«me
 = "enable_eee",

1411 .
	gdes¸ùti⁄
 = "Enable EEE PHY sleep mode",

1412 .
	g£t
 = 
¨8327_sw_£t_ìe
,

1413 .
	ggë
 = 
¨8327_sw_gë_ìe
,

1414 .
	gmax
 = 1,

1417 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1418 .
	g«me
 = "flush_arl_table",

1419 .
	gdes¸ùti⁄
 = "FlushÖort's ARLÅableÉntries",

1420 .
	g£t
 = 
¨8xxx_sw_£t_Êush_p‹t_¨l_èbÀ
,

1423 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1424 .
	g«me
 = "igmp_snooping",

1425 .
	gdes¸ùti⁄
 = "EnableÖort's IGMP Snooping",

1426 .
	g£t
 = 
¨8327_sw_£t_p‹t_igmp_¢o›ög
,

1427 .
	ggë
 = 
¨8327_sw_gë_p‹t_igmp_¢o›ög
,

1428 .
	gmax
 = 1

1431 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1432 .
	g«me
 = "vlan_prio",

1433 .
	gdes¸ùti⁄
 = "Port VLAN defaultÖriority (VLAN PCP) (0-7)",

1434 .
	g£t
 = 
¨8327_sw_£t_p‹t_vœn_¥io
,

1435 .
	ggë
 = 
¨8327_sw_gë_p‹t_vœn_¥io
,

1436 .
	gmax
 = 7,

1440 c⁄° 
swôch_dev_›s
 
	g¨8327_sw_›s
 = {

1441 .
©å_globÆ
 = {

1442 .
©å
 = 
¨8327_sw_©å_globÆs
,

1443 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8327_sw_©å_globÆs
),

1445 .
	g©å_p‹t
 = {

1446 .
©å
 = 
¨8327_sw_©å_p‹t
,

1447 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8327_sw_©å_p‹t
),

1449 .
	g©å_vœn
 = {

1450 .
©å
 = 
¨8xxx_sw_©å_vœn
,

1451 .
	gn_©å
 = 
ARRAY_SIZE
(
¨8xxx_sw_©å_vœn
),

1453 .
	ggë_p‹t_pvid
 = 
¨8xxx_sw_gë_pvid
,

1454 .
	g£t_p‹t_pvid
 = 
¨8xxx_sw_£t_pvid
,

1455 .
	ggë_vœn_p‹ts
 = 
¨8327_sw_gë_p‹ts
,

1456 .
	g£t_vœn_p‹ts
 = 
¨8327_sw_£t_p‹ts
,

1457 .
	g≠∂y_c⁄fig
 = 
¨8327_sw_hw_≠∂y
,

1458 .
	gª£t_swôch
 = 
¨8xxx_sw_ª£t_swôch
,

1459 .
	ggë_p‹t_lök
 = 
¨8xxx_sw_gë_p‹t_lök
,

1468 .
	ggë_p‹t_°©s
 = 
¨8xxx_sw_gë_p‹t_°©s
,

1472 c⁄° 
¨8xxx_chù
 
	g¨8327_chù
 = {

1473 .
ˇps
 = 
AR8XXX_CAP_GIGE
 | 
AR8XXX_CAP_MIB_COUNTERS
,

1474 .
	gc⁄fig_©_¥obe
 = 
åue
,

1475 .
	gmii_lo_fú°
 = 
åue
,

1477 .
	g«me
 = "Atheros AR8327",

1478 .
	gp‹ts
 = 
AR8327_NUM_PORTS
,

1479 .
	gvœns
 = 
AR8X16_MAX_VLANS
,

1480 .
	gsw›s
 = &
¨8327_sw_›s
,

1482 .
	gªg_p‹t_°©s_°¨t
 = 0x1000,

1483 .
	gªg_p‹t_°©s_Àngth
 = 0x100,

1484 .
	gªg_¨l_˘æ
 = 
AR8327_REG_ARL_CTRL
,

1486 .
	ghw_öô
 = 
¨8327_hw_öô
,

1487 .
	g˛ónup
 = 
¨8327_˛ónup
,

1488 .
	göô_globÆs
 = 
¨8327_öô_globÆs
,

1489 .
	göô_p‹t
 = 
¨8327_öô_p‹t
,

1490 .
	g£tup_p‹t
 = 
¨8327_£tup_p‹t
,

1491 .
	gªad_p‹t_°©us
 = 
¨8327_ªad_p‹t_°©us
,

1492 .
	gªad_p‹t_ìe_°©us
 = 
¨8327_ªad_p‹t_ìe_°©us
,

1493 .
	g©u_Êush
 = 
¨8327_©u_Êush
,

1494 .
	g©u_Êush_p‹t
 = 
¨8327_©u_Êush_p‹t
,

1495 .
	gvtu_Êush
 = 
¨8327_vtu_Êush
,

1496 .
	gvtu_lﬂd_vœn
 = 
¨8327_vtu_lﬂd_vœn
,

1497 .
	gphy_fixup
 = 
¨8327_phy_fixup
,

1498 .
	g£t_múr‹_ªgs
 = 
¨8327_£t_múr‹_ªgs
,

1499 .
	ggë_¨l_íåy
 = 
¨8327_gë_¨l_íåy
,

1500 .
	gsw_hw_≠∂y
 = 
¨8327_sw_hw_≠∂y
,

1502 .
	gnum_mibs
 = 
ARRAY_SIZE
(
¨8236_mibs
),

1503 .
	gmib_decs
 = 
¨8236_mibs
,

1504 .
	gmib_func
 = 
AR8327_REG_MIB_FUNC


1507 c⁄° 
¨8xxx_chù
 
	g¨8337_chù
 = {

1508 .
ˇps
 = 
AR8XXX_CAP_GIGE
 | 
AR8XXX_CAP_MIB_COUNTERS
,

1509 .
	gc⁄fig_©_¥obe
 = 
åue
,

1510 .
	gmii_lo_fú°
 = 
åue
,

1512 .
	g«me
 = "Atheros AR8337",

1513 .
	gp‹ts
 = 
AR8327_NUM_PORTS
,

1514 .
	gvœns
 = 
AR8X16_MAX_VLANS
,

1515 .
	gsw›s
 = &
¨8327_sw_›s
,

1517 .
	gªg_p‹t_°©s_°¨t
 = 0x1000,

1518 .
	gªg_p‹t_°©s_Àngth
 = 0x100,

1519 .
	gªg_¨l_˘æ
 = 
AR8327_REG_ARL_CTRL
,

1521 .
	ghw_öô
 = 
¨8327_hw_öô
,

1522 .
	g˛ónup
 = 
¨8327_˛ónup
,

1523 .
	göô_globÆs
 = 
¨8327_öô_globÆs
,

1524 .
	göô_p‹t
 = 
¨8327_öô_p‹t
,

1525 .
	g£tup_p‹t
 = 
¨8327_£tup_p‹t
,

1526 .
	gªad_p‹t_°©us
 = 
¨8327_ªad_p‹t_°©us
,

1527 .
	gªad_p‹t_ìe_°©us
 = 
¨8327_ªad_p‹t_ìe_°©us
,

1528 .
	g©u_Êush
 = 
¨8327_©u_Êush
,

1529 .
	g©u_Êush_p‹t
 = 
¨8327_©u_Êush_p‹t
,

1530 .
	gvtu_Êush
 = 
¨8327_vtu_Êush
,

1531 .
	gvtu_lﬂd_vœn
 = 
¨8327_vtu_lﬂd_vœn
,

1532 .
	gphy_fixup
 = 
¨8327_phy_fixup
,

1533 .
	g£t_múr‹_ªgs
 = 
¨8327_£t_múr‹_ªgs
,

1534 .
	ggë_¨l_íåy
 = 
¨8327_gë_¨l_íåy
,

1535 .
	gsw_hw_≠∂y
 = 
¨8327_sw_hw_≠∂y
,

1536 .
	gphy_rgmii_£t
 = 
¨8327_phy_rgmii_£t
,

1538 .
	gnum_mibs
 = 
ARRAY_SIZE
(
¨8236_mibs
),

1539 .
	gmib_decs
 = 
¨8236_mibs
,

1540 .
	gmib_func
 = 
AR8327_REG_MIB_FUNC


	@linux/generic/files/drivers/net/phy/ar8327.h

17 #i‚de‡
__AR8327_H


18 
	#__AR8327_H


	)

20 
	#AR8327_NUM_PORTS
 7

	)

21 
	#AR8327_NUM_LEDS
 15

	)

22 
	#AR8327_PORTS_ALL
 0x7f

	)

23 
	#AR8327_NUM_LED_CTRL_REGS
 4

	)

25 
	#AR8327_REG_MASK
 0x000

	)

27 
	#AR8327_REG_PAD0_MODE
 0x004

	)

28 
	#AR8327_REG_PAD5_MODE
 0x008

	)

29 
	#AR8327_REG_PAD6_MODE
 0x00c

	)

30 
	#AR8327_PAD_MAC_MII_RXCLK_SEL
 
	`BIT
(0)

	)

31 
	#AR8327_PAD_MAC_MII_TXCLK_SEL
 
	`BIT
(1)

	)

32 
	#AR8327_PAD_MAC_MII_EN
 
	`BIT
(2)

	)

33 
	#AR8327_PAD_MAC_GMII_RXCLK_SEL
 
	`BIT
(4)

	)

34 
	#AR8327_PAD_MAC_GMII_TXCLK_SEL
 
	`BIT
(5)

	)

35 
	#AR8327_PAD_MAC_GMII_EN
 
	`BIT
(6)

	)

36 
	#AR8327_PAD_SGMII_EN
 
	`BIT
(7)

	)

37 
	#AR8327_PAD_PHY_MII_RXCLK_SEL
 
	`BIT
(8)

	)

38 
	#AR8327_PAD_PHY_MII_TXCLK_SEL
 
	`BIT
(9)

	)

39 
	#AR8327_PAD_PHY_MII_EN
 
	`BIT
(10)

	)

40 
	#AR8327_PAD_PHY_GMII_PIPE_RXCLK_SEL
 
	`BIT
(11)

	)

41 
	#AR8327_PAD_PHY_GMII_RXCLK_SEL
 
	`BIT
(12)

	)

42 
	#AR8327_PAD_PHY_GMII_TXCLK_SEL
 
	`BIT
(13)

	)

43 
	#AR8327_PAD_PHY_GMII_EN
 
	`BIT
(14)

	)

44 
	#AR8327_PAD_PHYX_GMII_EN
 
	`BIT
(16)

	)

45 
	#AR8327_PAD_PHYX_RGMII_EN
 
	`BIT
(17)

	)

46 
	#AR8327_PAD_PHYX_MII_EN
 
	`BIT
(18)

	)

47 
	#AR8327_PAD_SGMII_DELAY_EN
 
	`BIT
(19)

	)

48 
	#AR8327_PAD_RGMII_RXCLK_DELAY_SEL
 
	`BITS
(20, 2)

	)

49 
	#AR8327_PAD_RGMII_RXCLK_DELAY_SEL_S
 20

	)

50 
	#AR8327_PAD_RGMII_TXCLK_DELAY_SEL
 
	`BITS
(22, 2)

	)

51 
	#AR8327_PAD_RGMII_TXCLK_DELAY_SEL_S
 22

	)

52 
	#AR8327_PAD_RGMII_RXCLK_DELAY_EN
 
	`BIT
(24)

	)

53 
	#AR8327_PAD_RGMII_TXCLK_DELAY_EN
 
	`BIT
(25)

	)

54 
	#AR8327_PAD_RGMII_EN
 
	`BIT
(26)

	)

56 
	#AR8327_REG_POWER_ON_STRIP
 0x010

	)

57 
	#AR8327_POWER_ON_STRIP_POWER_ON_SEL
 
	`BIT
(31)

	)

58 
	#AR8327_POWER_ON_STRIP_LED_OPEN_EN
 
	`BIT
(24)

	)

59 
	#AR8327_POWER_ON_STRIP_SERDES_AEN
 
	`BIT
(7)

	)

61 
	#AR8327_REG_INT_STATUS0
 0x020

	)

62 
	#AR8327_INT0_VT_DONE
 
	`BIT
(20)

	)

64 
	#AR8327_REG_INT_STATUS1
 0x024

	)

65 
	#AR8327_REG_INT_MASK0
 0x028

	)

66 
	#AR8327_REG_INT_MASK1
 0x02c

	)

68 
	#AR8327_REG_MODULE_EN
 0x030

	)

69 
	#AR8327_MODULE_EN_MIB
 
	`BIT
(0)

	)

71 
	#AR8327_REG_MIB_FUNC
 0x034

	)

72 
	#AR8327_MIB_CPU_KEEP
 
	`BIT
(20)

	)

74 
	#AR8327_REG_SERVICE_TAG
 0x048

	)

75 
	#AR8327_REG_LED_CTRL
(
_i
Ë(0x050 + (_iË* 4)

	)

76 
	#AR8327_REG_LED_CTRL0
 0x050

	)

77 
	#AR8327_REG_LED_CTRL1
 0x054

	)

78 
	#AR8327_REG_LED_CTRL2
 0x058

	)

79 
	#AR8327_REG_LED_CTRL3
 0x05c

	)

80 
	#AR8327_REG_MAC_ADDR0
 0x060

	)

81 
	#AR8327_REG_MAC_ADDR1
 0x064

	)

83 
	#AR8327_REG_MAX_FRAME_SIZE
 0x078

	)

84 
	#AR8327_MAX_FRAME_SIZE_MTU
 
	`BITS
(0, 14)

	)

86 
	#AR8327_REG_PORT_STATUS
(
_i
Ë(0x07¯+ (_iË* 4)

	)

87 
	#AR8327_PORT_STATUS_TXFLOW_AUTO
 
	`BIT
(10)

	)

88 
	#AR8327_PORT_STATUS_RXFLOW_AUTO
 
	`BIT
(11)

	)

90 
	#AR8327_REG_HEADER_CTRL
 0x098

	)

91 
	#AR8327_REG_PORT_HEADER
(
_i
Ë(0x09¯+ (_iË* 4)

	)

93 
	#AR8327_REG_SGMII_CTRL
 0x0e0

	)

94 
	#AR8327_SGMII_CTRL_EN_PLL
 
	`BIT
(1)

	)

95 
	#AR8327_SGMII_CTRL_EN_RX
 
	`BIT
(2)

	)

96 
	#AR8327_SGMII_CTRL_EN_TX
 
	`BIT
(3)

	)

98 
	#AR8327_REG_EEE_CTRL
 0x100

	)

99 
	#AR8327_EEE_CTRL_DISABLE_PHY
(
_i
Ë
	`BIT
(4 + (_iË* 2)

	)

101 
	#AR8327_REG_FRAME_ACK_CTRL0
 0x210

	)

102 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN0
 
	`BIT
(0)

	)

103 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN0
 
	`BIT
(1)

	)

104 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN0
 
	`BIT
(2)

	)

105 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN0
 
	`BIT
(3)

	)

106 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN0
 
	`BIT
(4)

	)

107 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN0
 
	`BIT
(5)

	)

108 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN0
 
	`BIT
(6)

	)

109 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN1
 
	`BIT
(8)

	)

110 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN1
 
	`BIT
(9)

	)

111 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN1
 
	`BIT
(10)

	)

112 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN1
 
	`BIT
(11)

	)

113 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN1
 
	`BIT
(12)

	)

114 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN1
 
	`BIT
(13)

	)

115 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN1
 
	`BIT
(14)

	)

116 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN2
 
	`BIT
(16)

	)

117 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN2
 
	`BIT
(17)

	)

118 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN2
 
	`BIT
(18)

	)

119 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN2
 
	`BIT
(19)

	)

120 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN2
 
	`BIT
(20)

	)

121 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN2
 
	`BIT
(21)

	)

122 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN2
 
	`BIT
(22)

	)

123 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN3
 
	`BIT
(24)

	)

124 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN3
 
	`BIT
(25)

	)

125 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN3
 
	`BIT
(26)

	)

126 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN3
 
	`BIT
(27)

	)

127 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN3
 
	`BIT
(28)

	)

128 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN3
 
	`BIT
(29)

	)

129 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN3
 
	`BIT
(30)

	)

131 
	#AR8327_REG_FRAME_ACK_CTRL1
 0x214

	)

132 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN4
 
	`BIT
(0)

	)

133 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN4
 
	`BIT
(1)

	)

134 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN4
 
	`BIT
(2)

	)

135 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN4
 
	`BIT
(3)

	)

136 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN4
 
	`BIT
(4)

	)

137 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN4
 
	`BIT
(5)

	)

138 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN4
 
	`BIT
(6)

	)

139 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN5
 
	`BIT
(8)

	)

140 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN5
 
	`BIT
(9)

	)

141 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN5
 
	`BIT
(10)

	)

142 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN5
 
	`BIT
(11)

	)

143 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN5
 
	`BIT
(12)

	)

144 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN5
 
	`BIT
(13)

	)

145 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN5
 
	`BIT
(14)

	)

146 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN6
 
	`BIT
(16)

	)

147 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN6
 
	`BIT
(17)

	)

148 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN6
 
	`BIT
(18)

	)

149 
	#AR8327_FRAME_ACK_CTRL_EAPOL_EN6
 
	`BIT
(19)

	)

150 
	#AR8327_FRAME_ACK_CTRL_DHCP_EN6
 
	`BIT
(20)

	)

151 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK_EN6
 
	`BIT
(21)

	)

152 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ_EN6
 
	`BIT
(22)

	)

153 
	#AR8327_FRAME_ACK_CTRL_IGMP_V3_EN
 
	`BIT
(24)

	)

154 
	#AR8327_FRAME_ACK_CTRL_PPPOE_EN
 
	`BIT
(25)

	)

156 
	#AR8327_REG_FRAME_ACK_CTRL
(
_i
Ë(0x210 + ((_iË/ 4Ë* 0x4)

	)

157 
	#AR8327_FRAME_ACK_CTRL_IGMP_MLD
 
	`BIT
(0)

	)

158 
	#AR8327_FRAME_ACK_CTRL_IGMP_JOIN
 
	`BIT
(1)

	)

159 
	#AR8327_FRAME_ACK_CTRL_IGMP_LEAVE
 
	`BIT
(2)

	)

160 
	#AR8327_FRAME_ACK_CTRL_EAPOL
 
	`BIT
(3)

	)

161 
	#AR8327_FRAME_ACK_CTRL_DHCP
 
	`BIT
(4)

	)

162 
	#AR8327_FRAME_ACK_CTRL_ARP_ACK
 
	`BIT
(5)

	)

163 
	#AR8327_FRAME_ACK_CTRL_ARP_REQ
 
	`BIT
(6)

	)

164 
	#AR8327_FRAME_ACK_CTRL_S
(
_i
Ë(((_iË% 4Ë* 8)

	)

166 
	#AR8327_REG_PORT_VLAN0
(
_i
Ë(0x420 + (_iË* 0x8)

	)

167 
	#AR8327_PORT_VLAN0_DEF_PRI_MASK
 
	`BITS
(0, 3)

	)

168 
	#AR8327_PORT_VLAN0_DEF_SVID
 
	`BITS
(0, 12)

	)

169 
	#AR8327_PORT_VLAN0_DEF_SVID_S
 0

	)

170 
	#AR8327_PORT_VLAN0_DEF_SPRI
 
	`BITS
(13, 3)

	)

171 
	#AR8327_PORT_VLAN0_DEF_SPRI_S
 13

	)

172 
	#AR8327_PORT_VLAN0_DEF_CVID
 
	`BITS
(16, 12)

	)

173 
	#AR8327_PORT_VLAN0_DEF_CVID_S
 16

	)

174 
	#AR8327_PORT_VLAN0_DEF_CPRI
 
	`BITS
(29, 3)

	)

175 
	#AR8327_PORT_VLAN0_DEF_CPRI_S
 29

	)

177 
	#AR8327_REG_PORT_VLAN1
(
_i
Ë(0x424 + (_iË* 0x8)

	)

178 
	#AR8327_PORT_VLAN1_VLAN_PRI_PROP
 
	`BIT
(4)

	)

179 
	#AR8327_PORT_VLAN1_PORT_VLAN_PROP
 
	`BIT
(6)

	)

180 
	#AR8327_PORT_VLAN1_OUT_MODE
 
	`BITS
(12, 2)

	)

181 
	#AR8327_PORT_VLAN1_OUT_MODE_S
 12

	)

182 
	#AR8327_PORT_VLAN1_OUT_MODE_UNMOD
 0

	)

183 
	#AR8327_PORT_VLAN1_OUT_MODE_UNTAG
 1

	)

184 
	#AR8327_PORT_VLAN1_OUT_MODE_TAG
 2

	)

185 
	#AR8327_PORT_VLAN1_OUT_MODE_UNTOUCH
 3

	)

187 
	#AR8327_REG_ATU_DATA0
 0x600

	)

188 
	#AR8327_ATU_ADDR0
 
	`BITS
(0, 8)

	)

189 
	#AR8327_ATU_ADDR0_S
 0

	)

190 
	#AR8327_ATU_ADDR1
 
	`BITS
(8, 8)

	)

191 
	#AR8327_ATU_ADDR1_S
 8

	)

192 
	#AR8327_ATU_ADDR2
 
	`BITS
(16, 8)

	)

193 
	#AR8327_ATU_ADDR2_S
 16

	)

194 
	#AR8327_ATU_ADDR3
 
	`BITS
(24, 8)

	)

195 
	#AR8327_ATU_ADDR3_S
 24

	)

196 
	#AR8327_REG_ATU_DATA1
 0x604

	)

197 
	#AR8327_ATU_ADDR4
 
	`BITS
(0, 8)

	)

198 
	#AR8327_ATU_ADDR4_S
 0

	)

199 
	#AR8327_ATU_ADDR5
 
	`BITS
(8, 8)

	)

200 
	#AR8327_ATU_ADDR5_S
 8

	)

201 
	#AR8327_ATU_PORTS
 
	`BITS
(16, 7)

	)

202 
	#AR8327_ATU_PORTS_S
 16

	)

203 
	#AR8327_ATU_PORT0
 
	`BIT
(16)

	)

204 
	#AR8327_ATU_PORT1
 
	`BIT
(17)

	)

205 
	#AR8327_ATU_PORT2
 
	`BIT
(18)

	)

206 
	#AR8327_ATU_PORT3
 
	`BIT
(19)

	)

207 
	#AR8327_ATU_PORT4
 
	`BIT
(20)

	)

208 
	#AR8327_ATU_PORT5
 
	`BIT
(21)

	)

209 
	#AR8327_ATU_PORT6
 
	`BIT
(22)

	)

210 
	#AR8327_REG_ATU_DATA2
 0x608

	)

211 
	#AR8327_ATU_STATUS
 
	`BITS
(0, 4)

	)

213 
	#AR8327_REG_ATU_FUNC
 0x60c

	)

214 
	#AR8327_ATU_FUNC_OP
 
	`BITS
(0, 4)

	)

215 
	#AR8327_ATU_FUNC_OP_NOOP
 0x0

	)

216 
	#AR8327_ATU_FUNC_OP_FLUSH
 0x1

	)

217 
	#AR8327_ATU_FUNC_OP_LOAD
 0x2

	)

218 
	#AR8327_ATU_FUNC_OP_PURGE
 0x3

	)

219 
	#AR8327_ATU_FUNC_OP_FLUSH_UNLOCKED
 0x4

	)

220 
	#AR8327_ATU_FUNC_OP_FLUSH_PORT
 0x5

	)

221 
	#AR8327_ATU_FUNC_OP_GET_NEXT
 0x6

	)

222 
	#AR8327_ATU_FUNC_OP_SEARCH_MAC
 0x7

	)

223 
	#AR8327_ATU_FUNC_OP_CHANGE_TRUNK
 0x8

	)

224 
	#AR8327_ATU_PORT_NUM
 
	`BITS
(8, 4)

	)

225 
	#AR8327_ATU_PORT_NUM_S
 8

	)

226 
	#AR8327_ATU_FUNC_BUSY
 
	`BIT
(31)

	)

228 
	#AR8327_REG_VTU_FUNC0
 0x0610

	)

229 
	#AR8327_VTU_FUNC0_EG_MODE
 
	`BITS
(4, 14)

	)

230 
	#AR8327_VTU_FUNC0_EG_MODE_S
(
_i
Ë(4 + (_iË* 2)

	)

231 
	#AR8327_VTU_FUNC0_EG_MODE_KEEP
 0

	)

232 
	#AR8327_VTU_FUNC0_EG_MODE_UNTAG
 1

	)

233 
	#AR8327_VTU_FUNC0_EG_MODE_TAG
 2

	)

234 
	#AR8327_VTU_FUNC0_EG_MODE_NOT
 3

	)

235 
	#AR8327_VTU_FUNC0_IVL
 
	`BIT
(19)

	)

236 
	#AR8327_VTU_FUNC0_VALID
 
	`BIT
(20)

	)

238 
	#AR8327_REG_VTU_FUNC1
 0x0614

	)

239 
	#AR8327_VTU_FUNC1_OP
 
	`BITS
(0, 3)

	)

240 
	#AR8327_VTU_FUNC1_OP_NOOP
 0

	)

241 
	#AR8327_VTU_FUNC1_OP_FLUSH
 1

	)

242 
	#AR8327_VTU_FUNC1_OP_LOAD
 2

	)

243 
	#AR8327_VTU_FUNC1_OP_PURGE
 3

	)

244 
	#AR8327_VTU_FUNC1_OP_REMOVE_PORT
 4

	)

245 
	#AR8327_VTU_FUNC1_OP_GET_NEXT
 5

	)

246 
	#AR8327_VTU_FUNC1_OP_GET_ONE
 6

	)

247 
	#AR8327_VTU_FUNC1_FULL
 
	`BIT
(4)

	)

248 
	#AR8327_VTU_FUNC1_PORT
 
	`BIT
(8, 4)

	)

249 
	#AR8327_VTU_FUNC1_PORT_S
 8

	)

250 
	#AR8327_VTU_FUNC1_VID
 
	`BIT
(16, 12)

	)

251 
	#AR8327_VTU_FUNC1_VID_S
 16

	)

252 
	#AR8327_VTU_FUNC1_BUSY
 
	`BIT
(31)

	)

254 
	#AR8327_REG_ARL_CTRL
 0x0618

	)

256 
	#AR8327_REG_FWD_CTRL0
 0x620

	)

257 
	#AR8327_FWD_CTRL0_CPU_PORT_EN
 
	`BIT
(10)

	)

258 
	#AR8327_FWD_CTRL0_MIRROR_PORT
 
	`BITS
(4, 4)

	)

259 
	#AR8327_FWD_CTRL0_MIRROR_PORT_S
 4

	)

261 
	#AR8327_REG_FWD_CTRL1
 0x624

	)

262 
	#AR8327_FWD_CTRL1_UC_FLOOD
 
	`BITS
(0, 7)

	)

263 
	#AR8327_FWD_CTRL1_UC_FLOOD_S
 0

	)

264 
	#AR8327_FWD_CTRL1_MC_FLOOD
 
	`BITS
(8, 7)

	)

265 
	#AR8327_FWD_CTRL1_MC_FLOOD_S
 8

	)

266 
	#AR8327_FWD_CTRL1_BC_FLOOD
 
	`BITS
(16, 7)

	)

267 
	#AR8327_FWD_CTRL1_BC_FLOOD_S
 16

	)

268 
	#AR8327_FWD_CTRL1_IGMP
 
	`BITS
(24, 7)

	)

269 
	#AR8327_FWD_CTRL1_IGMP_S
 24

	)

271 
	#AR8327_REG_PORT_LOOKUP
(
_i
Ë(0x660 + (_iË* 0xc)

	)

272 
	#AR8327_PORT_LOOKUP_MEMBER
 
	`BITS
(0, 7)

	)

273 
	#AR8327_PORT_LOOKUP_IN_MODE
 
	`BITS
(8, 2)

	)

274 
	#AR8327_PORT_LOOKUP_IN_MODE_S
 8

	)

275 
	#AR8327_PORT_LOOKUP_STATE
 
	`BITS
(16, 3)

	)

276 
	#AR8327_PORT_LOOKUP_STATE_S
 16

	)

277 
	#AR8327_PORT_LOOKUP_LEARN
 
	`BIT
(20)

	)

278 
	#AR8327_PORT_LOOKUP_ING_MIRROR_EN
 
	`BIT
(25)

	)

280 
	#AR8327_REG_PORT_PRIO
(
_i
Ë(0x664 + (_iË* 0xc)

	)

282 
	#AR8327_REG_PORT_HOL_CTRL1
(
_i
Ë(0x974 + (_iË* 0x8)

	)

283 
	#AR8327_PORT_HOL_CTRL1_EG_MIRROR_EN
 
	`BIT
(16)

	)

285 
	#AR8337_PAD_MAC06_EXCHANGE_EN
 
	`BIT
(31)

	)

287 
	#AR8327_PHY_MODE_SEL
 0x12

	)

288 
	#AR8327_PHY_MODE_SEL_RGMII
 
	`BIT
(3)

	)

289 
	#AR8327_PHY_TEST_CTRL
 0x0

	)

290 
	#AR8327_PHY_TEST_CTRL_RGMII_RX_DELAY
 
	`BIT
(15)

	)

291 
	#AR8327_PHY_SYS_CTRL
 0x5

	)

292 
	#AR8327_PHY_SYS_CTRL_RGMII_TX_DELAY
 
	`BIT
(8)

	)

294 
	e¨8327_Àd_∑âîn
 {

295 
	mAR8327_LED_PATTERN_OFF
 = 0,

296 
	mAR8327_LED_PATTERN_BLINK
,

297 
	mAR8327_LED_PATTERN_ON
,

298 
	mAR8327_LED_PATTERN_RULE
,

301 
	s¨8327_Àd_íåy
 {

302 
	mªg
;

303 
	mshi·
;

306 
	s¨8327_Àd
 {

307 
Àd_˛assdev
 
	mcdev
;

308 
¨8xxx_¥iv
 *
	msw_¥iv
;

310 *
	m«me
;

311 
boﬁ
 
	ma˘ive_low
;

312 
u8
 
	mÀd_num
;

313 
¨8327_Àd_mode
 
	mmode
;

315 
muãx
 
	mmuãx
;

316 
•ölock_t
 
	mlock
;

317 
w‹k_°ru˘
 
	mÀd_w‹k
;

318 
boﬁ
 
	míabÀ_hw_mode
;

319 
¨8327_Àd_∑âîn
 
	m∑âîn
;

322 
	s¨8327_d©a
 {

323 
u32
 
	mp‹t0_°©us
;

324 
u32
 
	mp‹t6_°©us
;

326 
¨8327_Àd
 **
	mÀds
;

327 
	mnum_Àds
;

330 
boﬁ
 
	mìe
[
AR8XXX_NUM_PHYS
];

	@linux/generic/files/drivers/net/phy/b53/b53_common.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/dñay.h
>

22 
	~<löux/exp‹t.h
>

23 
	~<löux/gpio.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/swôch.h
>

27 
	~<löux/phy.h
>

28 
	~<löux/of.h
>

29 
	~<löux/of_√t.h
>

30 
	~<löux/∂©f‹m_d©a/b53.h
>

32 
	~"b53_ªgs.h
"

33 
	~"b53_¥iv.h
"

36 
	#B53_BUF_SIZE
 1188

	)

38 
	sb53_mib_desc
 {

39 
u8
 
	msize
;

40 
u8
 
	moff£t
;

41 c⁄° *
	m«me
;

45 c⁄° 
b53_mib_desc
 
	gb53_mibs_65
[] = {

81 
	#B63XX_MIB_TXB_ID
 0

	)

82 
	#B63XX_MIB_RXB_ID
 14

	)

85 c⁄° 
b53_mib_desc
 
	gb53_mibs_63xx
[] = {

131 
	#B53XX_MIB_TXB_ID
 0

	)

132 
	#B53XX_MIB_RXB_ID
 12

	)

135 c⁄° 
b53_mib_desc
 
	gb53_mibs
[] = {

174 
	$b53_do_vœn_›
(
b53_devi˚
 *
dev
, 
u8
 
›
)

176 
i
;

178 
	`b53_wrôe8
(
dev
, 
B53_ARLIO_PAGE
, dev->
vè_ªgs
[0], 
VTA_START_CMD
 | 
›
);

180 
i
 = 0; i < 10; i++) {

181 
u8
 
vè
;

183 
	`b53_ªad8
(
dev
, 
B53_ARLIO_PAGE
, dev->
vè_ªgs
[0], &
vè
);

184 i‡(!(
vè
 & 
VTA_START_CMD
))

187 
	`u¶ìp_ønge
(100, 200);

190  -
EIO
;

191 
	}
}

193 
	$b53_£t_vœn_íåy
(
b53_devi˚
 *
dev
, 
u16
 
vid
, u16 
membîs
,

194 
u16
 
u¡ag
)

196 i‡(
	`is5325
(
dev
)) {

197 
u32
 
íåy
 = 0;

199 i‡(
membîs
) {

200 
íåy
 = ((
u¡ag
 & 
VA_UNTAG_MASK_25
Ë<< 
VA_UNTAG_S_25
) |

201 
membîs
;

202 i‡(
dev
->
c‹e_ªv
 >= 3)

203 
íåy
 |
VA_VALID_25_R4
 | 
vid
 << 
VA_VID_HIGH_S
;

205 
íåy
 |
VA_VALID_25
;

208 
	`b53_wrôe32
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_WRITE_25
, 
íåy
);

209 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_TABLE_ACCESS_25
, 
vid
 |

210 
VTA_RW_STATE_WR
 | 
VTA_RW_OP_EN
);

211 } i‡(
	`is5365
(
dev
)) {

212 
u16
 
íåy
 = 0;

214 i‡(
membîs
)

215 
íåy
 = ((
u¡ag
 & 
VA_UNTAG_MASK_65
Ë<< 
VA_UNTAG_S_65
) |

216 
membîs
 | 
VA_VALID_65
;

218 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_WRITE_65
, 
íåy
);

219 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_TABLE_ACCESS_65
, 
vid
 |

220 
VTA_RW_STATE_WR
 | 
VTA_RW_OP_EN
);

222 
	`b53_wrôe16
(
dev
, 
B53_ARLIO_PAGE
, dev->
vè_ªgs
[1], 
vid
);

223 
	`b53_wrôe32
(
dev
, 
B53_ARLIO_PAGE
, dev->
vè_ªgs
[2],

224 (
u¡ag
 << 
VTE_UNTAG_S
Ë| 
membîs
);

226 
	`b53_do_vœn_›
(
dev
, 
VTA_CMD_WRITE
);

228 
	}
}

230 
	$b53_£t_f‹w¨dög
(
b53_devi˚
 *
dev
, 
íabÀ
)

232 
u8
 
mgmt
;

234 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, &
mgmt
);

236 i‡(
íabÀ
)

237 
mgmt
 |
SM_SW_FWD_EN
;

239 
mgmt
 &~
SM_SW_FWD_EN
;

241 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, 
mgmt
);

242 
	}
}

244 
	$b53_íabÀ_vœn
(
b53_devi˚
 *
dev
, 
íabÀ
)

246 
u8
 
mgmt
, 
vc0
, 
vc1
, 
vc4
 = 0, 
vc5
;

248 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, &
mgmt
);

249 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL0
, &
vc0
);

250 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL1
, &
vc1
);

252 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev)) {

253 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4_25
, &
vc4
);

254 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5_25
, &
vc5
);

255 } i‡(
	`is63xx
(
dev
)) {

256 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4_63XX
, &
vc4
);

257 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5_63XX
, &
vc5
);

259 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4
, &
vc4
);

260 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5
, &
vc5
);

263 
mgmt
 &~
SM_SW_FWD_MODE
;

265 i‡(
íabÀ
) {

266 
vc0
 |
VC0_VLAN_EN
 | 
VC0_VID_CHK_EN
 | 
VC0_VID_HASH_VID
;

267 
vc1
 |
VC1_RX_MCST_UNTAG_EN
 | 
VC1_RX_MCST_FWD_EN
;

268 
vc4
 &~
VC4_ING_VID_CHECK_MASK
;

269 
vc4
 |
VC4_ING_VID_VIO_DROP
 << 
VC4_ING_VID_CHECK_S
;

270 
vc5
 |
VC5_DROP_VTABLE_MISS
;

272 i‡(
	`is5325
(
dev
))

273 
vc0
 &~
VC0_RESERVED_1
;

275 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

276 
vc1
 |
VC1_RX_MCST_TAG_EN
;

278 i‡(!
	`is5325
(
dev
Ë&& !
	`is5365
(dev)) {

279 i‡(
dev
->
Ælow_vid_4095
)

280 
vc5
 |
VC5_VID_FFF_EN
;

282 
vc5
 &~
VC5_VID_FFF_EN
;

285 
vc0
 &~(
VC0_VLAN_EN
 | 
VC0_VID_CHK_EN
 | 
VC0_VID_HASH_VID
);

286 
vc1
 &~(
VC1_RX_MCST_UNTAG_EN
 | 
VC1_RX_MCST_FWD_EN
);

287 
vc4
 &~
VC4_ING_VID_CHECK_MASK
;

288 
vc5
 &~
VC5_DROP_VTABLE_MISS
;

290 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

291 
vc4
 |
VC4_ING_VID_VIO_FWD
 << 
VC4_ING_VID_CHECK_S
;

293 
vc4
 |
VC4_ING_VID_VIO_TO_IMP
 << 
VC4_ING_VID_CHECK_S
;

295 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

296 
vc1
 &~
VC1_RX_MCST_TAG_EN
;

298 i‡(!
	`is5325
(
dev
Ë&& !
	`is5365
(dev))

299 
vc5
 &~
VC5_VID_FFF_EN
;

302 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL0
, 
vc0
);

303 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL1
, 
vc1
);

305 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev)) {

307 i‡(
	`is5325
(
dev
Ë&& 
íabÀ
)

308 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL3
,

309 
VC3_HIGH_8BIT_EN
);

311 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL3
, 0);

313 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4_25
, 
vc4
);

314 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5_25
, 
vc5
);

315 } i‡(
	`is63xx
(
dev
)) {

316 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL3_63XX
, 0);

317 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4_63XX
, 
vc4
);

318 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5_63XX
, 
vc5
);

320 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL3
, 0);

321 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4
, 
vc4
);

322 
	`b53_wrôe8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL5
, 
vc5
);

325 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, 
mgmt
);

326 
	}
}

328 
	$b53_£t_jumbo
(
b53_devi˚
 *
dev
, 
íabÀ
, 
Ælow_10_100
)

330 
u32
 
p‹t_mask
 = 0;

331 
u16
 
max_size
 = 
JMS_MIN_SIZE
;

333 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

334  -
EINVAL
;

336 i‡(
íabÀ
) {

337 
p‹t_mask
 = 
dev
->
íabÀd_p‹ts
;

338 
max_size
 = 
JMS_MAX_SIZE
;

339 i‡(
Ælow_10_100
)

340 
p‹t_mask
 |
JPM_10_100_JUMBO_EN
;

343 
	`b53_wrôe32
(
dev
, 
B53_JUMBO_PAGE
, dev->
jumbo_pm_ªg
, 
p‹t_mask
);

344  
	`b53_wrôe16
(
dev
, 
B53_JUMBO_PAGE
, dev->
jumbo_size_ªg
, 
max_size
);

345 
	}
}

347 
	$b53_Êush_¨l
(
b53_devi˚
 *
dev
)

349 
i
;

351 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_FAST_AGE_CTRL
,

352 
FAST_AGE_DONE
 | 
FAST_AGE_DYNAMIC
 | 
FAST_AGE_STATIC
);

354 
i
 = 0; i < 10; i++) {

355 
u8
 
Á°_age_˘æ
;

357 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_FAST_AGE_CTRL
,

358 &
Á°_age_˘æ
);

360 i‡(!(
Á°_age_˘æ
 & 
FAST_AGE_DONE
))

363 
	`mdñay
(1);

366 
	`¥_w¨n
("time out while flushing ARL\n");

368  -
EINVAL
;

369 
	}
}

371 
	$b53_íabÀ_p‹ts
(
b53_devi˚
 *
dev
)

373 
i
;

375 
	`b53_f‹_óch_p‹t
(
dev
, 
i
) {

376 
u8
 
p‹t_˘æ
;

377 
u16
 
pvœn_mask
;

383 i‡(
dev
->
íabÀ_vœn
 || 
	`is_˝u_p‹t
(dev, 
i
))

384 
pvœn_mask
 = 0x1ff;

385 i‡(
	`is531x5
(
dev
Ë|| 
	`is5301x
(dev))

387 
pvœn_mask
 = 
	`BIT
(
dev
->
sw_dev
.
˝u_p‹t
);

389 
pvœn_mask
 = 
	`BIT
(
B53_CPU_PORT
);

392 i‡((
	`is5325
(
dev
Ë|| 
	`is5365
(dev)Ë&& 
i
 =
B53_CPU_PORT_25
)

393 
i
 = 
B53_CPU_PORT
;

395 i‡(
dev
->
chù_id
 =
BCM5398_DEVICE_ID
 && (
i
 == 6 || i == 7))

397 
p‹t_˘æ
 = 
PORT_CTRL_RX_DISABLE
 | 
PORT_CTRL_TX_DISABLE
;

398 i‡(
i
 =
B53_CPU_PORT
)

399 
p‹t_˘æ
 = 
PORT_CTRL_RX_BCST_EN
 |

400 
PORT_CTRL_RX_MCST_EN
 |

401 
PORT_CTRL_RX_UCST_EN
;

403 
p‹t_˘æ
 = 0;

405 
	`b53_wrôe16
(
dev
, 
B53_PVLAN_PAGE
, 
	`B53_PVLAN_PORT_MASK
(
i
),

406 
pvœn_mask
);

409 i‡(!
	`is63xx
(
dev
Ë&& !(
	`is5301x
(devË&& 
i
 == 6))

410 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
	`B53_PORT_CTRL
(
i
),

411 
p‹t_˘æ
);

413 
	}
}

415 
	$b53_íabÀ_mib
(
b53_devi˚
 *
dev
)

417 
u8
 
gc
;

419 
	`b53_ªad8
(
dev
, 
B53_MGMT_PAGE
, 
B53_GLOBAL_CONFIG
, &
gc
);

421 
gc
 &~(
GC_RESET_MIB
 | 
GC_MIB_AC_EN
);

423 
	`b53_wrôe8
(
dev
, 
B53_MGMT_PAGE
, 
B53_GLOBAL_CONFIG
, 
gc
);

424 
	}
}

426 
	$b53_≠∂y
(
b53_devi˚
 *
dev
)

428 
i
;

431 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev)) {

432 
i
 = 1; i < 
dev
->
sw_dev
.
vœns
; i++)

433 
	`b53_£t_vœn_íåy
(
dev
, 
i
, 0, 0);

435 
	`b53_do_vœn_›
(
dev
, 
VTA_CMD_CLEAR
);

438 
	`b53_íabÀ_vœn
(
dev
, dev->
íabÀ_vœn
);

441 i‡(
dev
->
íabÀ_vœn
) {

442 
i
 = 0; i < 
dev
->
sw_dev
.
vœns
; i++) {

443 
b53_vœn
 *
vœn
 = &
dev
->
vœns
[
i
];

445 i‡(!
vœn
->
membîs
)

448 
	`b53_£t_vœn_íåy
(
dev
, 
i
, 
vœn
->
membîs
, vœn->
u¡ag
);

451 
	`b53_f‹_óch_p‹t
(
dev
, 
i
)

452 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
,

453 
	`B53_VLAN_PORT_DEF_TAG
(
i
),

454 
dev
->
p‹ts
[
i
].
pvid
);

456 
	`b53_f‹_óch_p‹t
(
dev
, 
i
)

457 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
,

458 
	`B53_VLAN_PORT_DEF_TAG
(
i
), 1);

462 
	`b53_íabÀ_p‹ts
(
dev
);

464 i‡(!
	`is5325
(
dev
Ë&& !
	`is5365
(dev))

465 
	`b53_£t_jumbo
(
dev
, dev->
íabÀ_jumbo
, 1);

468 
	}
}

470 
	$b53_swôch_ª£t_gpio
(
b53_devi˚
 *
dev
)

472 
gpio
 = 
dev
->
ª£t_gpio
;

474 i‡(
gpio
 < 0)

480 
	`gpio_£t_vÆue
(
gpio
, 0);

481 
	`mdñay
(50);

483 
	`gpio_£t_vÆue
(
gpio
, 1);

484 
	`mdñay
(20);

486 
dev
->
cuºít_∑ge
 = 0xff;

487 
	}
}

489 
	$b53_c⁄figuª_p‹ts_of
(
b53_devi˚
 *
dev
)

491 
devi˚_node
 *
dn
, *
≤
;

492 
u32
 
p‹t_num
;

494 
dn
 = 
	`of_gë_chûd_by_«me
(
	`dev_of_node
(
dev
->dev), "ports");

496 
	`f‹_óch_avaûabÀ_chûd_of_node
(
dn
, 
≤
) {

497 
devi˚_node
 *
fixed_lök
;

499 i‡(
	`of_¥›îty_ªad_u32
(
≤
, "ªg", &
p‹t_num
))

502 i‡(
p‹t_num
 > 
B53_CPU_PORT
)

505 
fixed_lök
 = 
	`of_gë_chûd_by_«me
(
≤
, "fixed-link");

506 i‡(
fixed_lök
) {

507 
u32
 
•d
;

508 
u8
 
po
 = 
GMII_PO_LINK
;

509 
mode
 = 
	`of_gë_phy_mode
(
≤
);

511 i‡(!
	`of_¥›îty_ªad_u32
(
fixed_lök
, "•ìd", &
•d
)) {

512 
•d
) {

514 
po
 |
GMII_PO_SPEED_10M
;

517 
po
 |
GMII_PO_SPEED_100M
;

520 i‡(
	`is_imp_p‹t
(
dev
, 
p‹t_num
))

521 
po
 |
PORT_OVERRIDE_SPEED_2000M
;

523 
po
 |
GMII_PO_SPEED_2000M
;

526 
po
 |
GMII_PO_SPEED_1000M
;

531 i‡(
	`of_¥›îty_ªad_boﬁ
(
fixed_lök
, "full-duplex"))

532 
po
 |
PORT_OVERRIDE_FULL_DUPLEX
;

533 i‡(
	`of_¥›îty_ªad_boﬁ
(
fixed_lök
, "pause"))

534 
po
 |
GMII_PO_RX_FLOW
;

535 i‡(
	`of_¥›îty_ªad_boﬁ
(
fixed_lök
, "asym-pause"))

536 
po
 |
GMII_PO_TX_FLOW
;

538 i‡(
	`is_imp_p‹t
(
dev
, 
p‹t_num
)) {

539 
po
 |
PORT_OVERRIDE_EN
;

541 i‡(
	`is5325
(
dev
) &&

542 
mode
 =
PHY_INTERFACE_MODE_REVMII
)

543 
po
 |
PORT_OVERRIDE_RV_MII_25
;

545 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
,

546 
B53_PORT_OVERRIDE_CTRL
, 
po
);

548 i‡(
	`is5325
(
dev
) &&

549 
mode
 =
PHY_INTERFACE_MODE_REVMII
) {

550 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
,

551 
B53_PORT_OVERRIDE_CTRL
, &
po
);

552 i‡(!(
po
 & 
PORT_OVERRIDE_RV_MII_25
))

553 
	`¥_îr
("FailedÅoÉnableÑeverse MII mode\n");

554  -
EINVAL
;

557 
po
 |
GMII_PO_EN
;

558 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
,

559 
	`B53_GMII_PORT_OVERRIDE_CTRL
(
p‹t_num
),

560 
po
);

566 
	}
}

568 
	$b53_c⁄figuª_p‹ts
(
b53_devi˚
 *
dev
)

570 
u8
 
˝u_p‹t
 = 
dev
->
sw_dev
.cpu_port;

573 i‡(
	`is5325
(
dev
)) {

574 
u8
 
mii_p‹t_ovîride
;

576 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

577 &
mii_p‹t_ovîride
);

579 i‡(!(
mii_p‹t_ovîride
 & 
PORT_OVERRIDE_RV_MII_25
)) {

580 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

581 
mii_p‹t_ovîride
 | 
PORT_OVERRIDE_RV_MII_25
);

582 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

583 &
mii_p‹t_ovîride
);

585 i‡(!(
mii_p‹t_ovîride
 & 
PORT_OVERRIDE_RV_MII_25
)) {

586 
	`¥_îr
("FailedÅoÉnableÑeverse MII mode\n");

587  -
EINVAL
;

590 } i‡(
	`is531x5
(
dev
Ë&& 
˝u_p‹t
 =
B53_CPU_PORT
) {

591 
u8
 
mii_p‹t_ovîride
;

593 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

594 &
mii_p‹t_ovîride
);

595 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

596 
mii_p‹t_ovîride
 | 
PORT_OVERRIDE_EN
 |

597 
PORT_OVERRIDE_LINK
);

600 i‡(
dev
->
íabÀd_p‹ts
 & 
	`BIT
(5)) {

601 
u8
 
po_ªg
 = 
	`B53_GMII_PORT_OVERRIDE_CTRL
(5);

602 
u8
 
gmii_po
;

604 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
po_ªg
, &
gmii_po
);

605 
gmii_po
 |
GMII_PO_LINK
 |

606 
GMII_PO_RX_FLOW
 |

607 
GMII_PO_TX_FLOW
 |

608 
GMII_PO_EN
;

609 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
po_ªg
, 
gmii_po
);

611 } i‡(
	`is5301x
(
dev
)) {

612 i‡(
˝u_p‹t
 == 8) {

613 
u8
 
mii_p‹t_ovîride
;

615 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

616 &
mii_p‹t_ovîride
);

617 
mii_p‹t_ovîride
 |
PORT_OVERRIDE_LINK
 |

618 
PORT_OVERRIDE_RX_FLOW
 |

619 
PORT_OVERRIDE_TX_FLOW
 |

620 
PORT_OVERRIDE_SPEED_2000M
 |

621 
PORT_OVERRIDE_EN
;

622 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_PORT_OVERRIDE_CTRL
,

623 
mii_p‹t_ovîride
);

627 
u8
 
po_ªg
 = 
	`B53_GMII_PORT_OVERRIDE_CTRL
(
˝u_p‹t
);

628 
u8
 
gmii_po
;

630 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
po_ªg
, &
gmii_po
);

631 
gmii_po
 |
GMII_PO_LINK
 |

632 
GMII_PO_RX_FLOW
 |

633 
GMII_PO_TX_FLOW
 |

634 
GMII_PO_EN
 |

635 
GMII_PO_SPEED_2000M
;

636 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
po_ªg
, 
gmii_po
);

641 
	}
}

643 
	$b53_swôch_ª£t
(
b53_devi˚
 *
dev
)

645 
ªt
 = 0;

646 
u8
 
mgmt
;

648 
	`b53_swôch_ª£t_gpio
(
dev
);

650 i‡(
	`is539x
(
dev
)) {

651 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SOFTRESET
, 0x83);

652 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SOFTRESET
, 0x00);

655 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, &
mgmt
);

657 i‡(!(
mgmt
 & 
SM_SW_FWD_EN
)) {

658 
mgmt
 &~
SM_SW_FWD_MODE
;

659 
mgmt
 |
SM_SW_FWD_EN
;

661 
	`b53_wrôe8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, 
mgmt
);

662 
	`b53_ªad8
(
dev
, 
B53_CTRL_PAGE
, 
B53_SWITCH_MODE
, &
mgmt
);

664 i‡(!(
mgmt
 & 
SM_SW_FWD_EN
)) {

665 
	`¥_îr
("FailedÅoÉnable switch!\n");

666  -
EINVAL
;

671 
	`b53_íabÀ_p‹ts
(
dev
);

673 i‡(
dev
->dev->
of_node
)

674 
ªt
 = 
	`b53_c⁄figuª_p‹ts_of
(
dev
);

676 
ªt
 = 
	`b53_c⁄figuª_p‹ts
(
dev
);

678 i‡(
ªt
)

679  
ªt
;

681 
	`b53_íabÀ_mib
(
dev
);

683  
	`b53_Êush_¨l
(
dev
);

684 
	}
}

690 
	$b53_globÆ_gë_vœn_íabÀ
(
swôch_dev
 *
dev
,

691 c⁄° 
swôch_©å
 *
©å
,

692 
swôch_vÆ
 *
vÆ
)

694 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

696 
vÆ
->
vÆue
.
i
 = 
¥iv
->
íabÀ_vœn
;

699 
	}
}

701 
	$b53_globÆ_£t_vœn_íabÀ
(
swôch_dev
 *
dev
,

702 c⁄° 
swôch_©å
 *
©å
,

703 
swôch_vÆ
 *
vÆ
)

705 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

707 
¥iv
->
íabÀ_vœn
 = 
vÆ
->
vÆue
.
i
;

710 
	}
}

712 
	$b53_globÆ_gë_jumbo_íabÀ
(
swôch_dev
 *
dev
,

713 c⁄° 
swôch_©å
 *
©å
,

714 
swôch_vÆ
 *
vÆ
)

716 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

718 
vÆ
->
vÆue
.
i
 = 
¥iv
->
íabÀ_jumbo
;

721 
	}
}

723 
	$b53_globÆ_£t_jumbo_íabÀ
(
swôch_dev
 *
dev
,

724 c⁄° 
swôch_©å
 *
©å
,

725 
swôch_vÆ
 *
vÆ
)

727 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

729 
¥iv
->
íabÀ_jumbo
 = 
vÆ
->
vÆue
.
i
;

732 
	}
}

734 
	$b53_globÆ_gë_4095_íabÀ
(
swôch_dev
 *
dev
,

735 c⁄° 
swôch_©å
 *
©å
,

736 
swôch_vÆ
 *
vÆ
)

738 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

740 
vÆ
->
vÆue
.
i
 = 
¥iv
->
Ælow_vid_4095
;

743 
	}
}

745 
	$b53_globÆ_£t_4095_íabÀ
(
swôch_dev
 *
dev
,

746 c⁄° 
swôch_©å
 *
©å
,

747 
swôch_vÆ
 *
vÆ
)

749 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

751 
¥iv
->
Ælow_vid_4095
 = 
vÆ
->
vÆue
.
i
;

754 
	}
}

756 
	$b53_globÆ_gë_p‹ts
(
swôch_dev
 *
dev
,

757 c⁄° 
swôch_©å
 *
©å
,

758 
swôch_vÆ
 *
vÆ
)

760 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

762 
vÆ
->
Àn
 = 
	`¢¥ötf
(
¥iv
->
buf
, 
B53_BUF_SIZE
, "0x%04x",

763 
¥iv
->
íabÀd_p‹ts
);

764 
vÆ
->
vÆue
.
s
 = 
¥iv
->
buf
;

767 
	}
}

769 
	$b53_p‹t_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

771 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

773 *
vÆ
 = 
¥iv
->
p‹ts
[
p‹t
].
pvid
;

776 
	}
}

778 
	$b53_p‹t_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
)

780 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

782 i‡(
vÆ
 > 15 && 
	`is5325
(
¥iv
))

783  -
EINVAL
;

784 i‡(
vÆ
 =4095 && !
¥iv
->
Ælow_vid_4095
)

785  -
EINVAL
;

787 
¥iv
->
p‹ts
[
p‹t
].
pvid
 = 
vÆ
;

790 
	}
}

792 
	$b53_vœn_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

794 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

795 
swôch_p‹t
 *
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[0];

796 
b53_vœn
 *
vœn
 = &
¥iv
->
vœns
[
vÆ
->
p‹t_vœn
];

797 
i
;

799 
vÆ
->
Àn
 = 0;

801 i‡(!
vœn
->
membîs
)

804 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

805 i‡(!(
vœn
->
membîs
 & 
	`BIT
(
i
)))

809 i‡(!(
vœn
->
u¡ag
 & 
	`BIT
(
i
)))

810 
p‹t
->
Êags
 = 
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
);

812 
p‹t
->
Êags
 = 0;

814 
p‹t
->
id
 = 
i
;

815 
vÆ
->
Àn
++;

816 
p‹t
++;

820 
	}
}

822 
	$b53_vœn_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

824 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

825 
swôch_p‹t
 *
p‹t
;

826 
b53_vœn
 *
vœn
 = &
¥iv
->
vœns
[
vÆ
->
p‹t_vœn
];

827 
i
;

830 i‡(
vÆ
->
p‹t_vœn
 =0 && !
	`is5325
(
¥iv
Ë&& !
	`is5365
(priv))

831  -
EINVAL
;

834 i‡(
vÆ
->
p‹t_vœn
 =4095 && !
¥iv
->
Ælow_vid_4095
)

835  -
EINVAL
;

837 
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[0];

838 
vœn
->
membîs
 = 0;

839 
vœn
->
u¡ag
 = 0;

840 
i
 = 0; i < 
vÆ
->
Àn
; i++, 
p‹t
++) {

841 
vœn
->
membîs
 |
	`BIT
(
p‹t
->
id
);

843 i‡(!(
p‹t
->
Êags
 & 
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
))) {

844 
vœn
->
u¡ag
 |
	`BIT
(
p‹t
->
id
);

845 
¥iv
->
p‹ts
[
p‹t
->
id
].
pvid
 = 
vÆ
->
p‹t_vœn
;

850 
vœn
->
membîs
 &
¥iv
->
íabÀd_p‹ts
;

851 
vœn
->
u¡ag
 &
¥iv
->
íabÀd_p‹ts
;

854 
	}
}

856 
	$b53_p‹t_gë_lök
(
swôch_dev
 *
dev
, 
p‹t
,

857 
swôch_p‹t_lök
 *
lök
)

859 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

861 i‡(
	`is_˝u_p‹t
(
¥iv
, 
p‹t
)) {

862 
lök
->link = 1;

863 
lök
->
du∂ex
 = 1;

864 
lök
->
•ìd
 = 
	`is5325
(
¥iv
Ë|| 
	`is5365
(priv) ?

865 
SWITCH_PORT_SPEED_100
 : 
SWITCH_PORT_SPEED_1000
;

866 
lök
->
™eg
 = 0;

867 } i‡(
¥iv
->
íabÀd_p‹ts
 & 
	`BIT
(
p‹t
)) {

868 
u32
 
•ìd
;

869 
u16
 
 k
, 
du∂ex
;

871 
	`b53_ªad16
(
¥iv
, 
B53_STAT_PAGE
, 
B53_LINK_STAT
, &
 k
);

872 
	`b53_ªad16
(
¥iv
, 
B53_STAT_PAGE
,Öriv->
du∂ex_ªg
, &
du∂ex
);

874 
 k
 = ( k >> 
p‹t
) & 1;

875 
du∂ex
 = (du∂ex >> 
p‹t
) & 1;

877 i‡(
	`is5325
(
¥iv
Ë|| 
	`is5365
(priv)) {

878 
u16
 
tmp
;

880 
	`b53_ªad16
(
¥iv
, 
B53_STAT_PAGE
, 
B53_SPEED_STAT
, &
tmp
);

881 
•ìd
 = 
	`SPEED_PORT_FE
(
tmp
, 
p‹t
);

883 
	`b53_ªad32
(
¥iv
, 
B53_STAT_PAGE
, 
B53_SPEED_STAT
, &
•ìd
);

884 
•ìd
 = 
	`SPEED_PORT_GE
(•ìd, 
p‹t
);

887 
lök
->lök = 
 k
;

888 i‡(
 k
) {

889 
lök
->
du∂ex
 = duplex;

890 
•ìd
) {

891 
SPEED_STAT_10M
:

892 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

894 
SPEED_STAT_100M
:

895 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

897 
SPEED_STAT_1000M
:

898 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

903 
lök
->
™eg
 = 1;

905 
lök
->link = 0;

910 
	}
}

912 
	$b53_p‹t_£t_lök
(
swôch_dev
 *
sw_dev
, 
p‹t
,

913 
swôch_p‹t_lök
 *
lök
)

915 
b53_devi˚
 *
dev
 = 
	`sw_to_b53
(
sw_dev
);

921 i‡(
	`is63xx
(
dev
))

922  -
ENOTSUPP
;

924 i‡(
p‹t
 =
sw_dev
->
˝u_p‹t
)

925  -
EINVAL
;

927 i‡(!(
	`BIT
(
p‹t
Ë& 
dev
->
íabÀd_p‹ts
))

928  -
EINVAL
;

930 i‡(
lök
->
•ìd
 =
SWITCH_PORT_SPEED_1000
 &&

931 (
	`is5325
(
dev
Ë|| 
	`is5365
(dev)))

932  -
EINVAL
;

934 i‡(
lök
->
•ìd
 =
SWITCH_PORT_SPEED_1000
 && !lök->
du∂ex
)

935  -
EINVAL
;

937  
	`swôch_gíîic_£t_lök
(
sw_dev
, 
p‹t
, 
lök
);

938 
	}
}

940 
	$b53_phy_ªad16
(
swôch_dev
 *
dev
, 
addr
, 
u8
 
ªg
, 
u16
 *
vÆue
)

942 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

944 i‡(
¥iv
->
›s
->
phy_ªad16
)

945  
¥iv
->
›s
->
	`phy_ªad16
’riv, 
addr
, 
ªg
, 
vÆue
);

947  
	`b53_ªad16
(
¥iv
, 
	`B53_PORT_MII_PAGE
(
addr
), 
ªg
, 
vÆue
);

948 
	}
}

950 
	$b53_phy_wrôe16
(
swôch_dev
 *
dev
, 
addr
, 
u8
 
ªg
, 
u16
 
vÆue
)

952 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

954 i‡(
¥iv
->
›s
->
phy_wrôe16
)

955  
¥iv
->
›s
->
	`phy_wrôe16
’riv, 
addr
, 
ªg
, 
vÆue
);

957  
	`b53_wrôe16
(
¥iv
, 
	`B53_PORT_MII_PAGE
(
addr
), 
ªg
, 
vÆue
);

958 
	}
}

960 
	$b53_globÆ_ª£t_swôch
(
swôch_dev
 *
dev
)

962 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

965 
¥iv
->
íabÀ_vœn
 = 0;

966 
¥iv
->
íabÀ_jumbo
 = 0;

967 
¥iv
->
Ælow_vid_4095
 = 0;

969 
	`mem£t
(
¥iv
->
vœns
, 0, (*¥iv->vœnsË* 
dev
->vlans);

970 
	`mem£t
(
¥iv
->
p‹ts
, 0, (*¥iv->p‹tsË* 
dev
->ports);

972  
	`b53_swôch_ª£t
(
¥iv
);

973 
	}
}

975 
	$b53_globÆ_≠∂y_c⁄fig
(
swôch_dev
 *
dev
)

977 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

980 
	`b53_£t_f‹w¨dög
(
¥iv
, 0);

982 
	`b53_≠∂y
(
¥iv
);

985 
	`b53_£t_f‹w¨dög
(
¥iv
, 1);

988 
	}
}

991 
	$b53_globÆ_ª£t_mib
(
swôch_dev
 *
dev
,

992 c⁄° 
swôch_©å
 *
©å
,

993 
swôch_vÆ
 *
vÆ
)

995 
b53_devi˚
 *
¥iv
 = 
	`sw_to_b53
(
dev
);

996 
u8
 
gc
;

998 
	`b53_ªad8
(
¥iv
, 
B53_MGMT_PAGE
, 
B53_GLOBAL_CONFIG
, &
gc
);

1000 
	`b53_wrôe8
(
¥iv
, 
B53_MGMT_PAGE
, 
B53_GLOBAL_CONFIG
, 
gc
 | 
GC_RESET_MIB
);

1001 
	`mdñay
(1);

1002 
	`b53_wrôe8
(
¥iv
, 
B53_MGMT_PAGE
, 
B53_GLOBAL_CONFIG
, 
gc
 & ~
GC_RESET_MIB
);

1003 
	`mdñay
(1);

1006 
	}
}

1008 
	$b53_p‹t_gë_mib
(
swôch_dev
 *
sw_dev
,

1009 c⁄° 
swôch_©å
 *
©å
,

1010 
swôch_vÆ
 *
vÆ
)

1012 
b53_devi˚
 *
dev
 = 
	`sw_to_b53
(
sw_dev
);

1013 c⁄° 
b53_mib_desc
 *
mibs
;

1014 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1015 
Àn
 = 0;

1017 i‡(!(
	`BIT
(
p‹t
Ë& 
dev
->
íabÀd_p‹ts
))

1020 i‡(
	`is5365
(
dev
)) {

1021 i‡(
p‹t
 == 5)

1022 
p‹t
 = 8;

1024 
mibs
 = 
b53_mibs_65
;

1025 } i‡(
	`is63xx
(
dev
)) {

1026 
mibs
 = 
b53_mibs_63xx
;

1028 
mibs
 = 
b53_mibs
;

1031 
dev
->
buf
[0] = 0;

1033 ; 
mibs
->
size
 > 0; mibs++) {

1034 
u64
 
vÆ
;

1036 i‡(
mibs
->
size
 == 8) {

1037 
	`b53_ªad64
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
->
off£t
, &
vÆ
);

1039 
u32
 
vÆ32
;

1041 
	`b53_ªad32
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
->
off£t
,

1042 &
vÆ32
);

1043 
vÆ
 = 
vÆ32
;

1046 
Àn
 +
	`¢¥ötf
(
dev
->
buf
 +Üí, 
B53_BUF_SIZE
 -Üen,

1047 "%-20s: %Œu\n", 
mibs
->
«me
, 
vÆ
);

1050 
vÆ
->
Àn
 =Üen;

1051 
vÆ
->
vÆue
.
s
 = 
dev
->
buf
;

1054 
	}
}

1056 
	$b53_p‹t_gë_°©s
(
swôch_dev
 *
sw_dev
, 
p‹t
,

1057 
swôch_p‹t_°©s
 *
°©s
)

1059 
b53_devi˚
 *
dev
 = 
	`sw_to_b53
(
sw_dev
);

1060 c⁄° 
b53_mib_desc
 *
mibs
;

1061 
txb_id
, 
rxb_id
;

1062 
u64
 
rxb
, 
txb
;

1064 i‡(!(
	`BIT
(
p‹t
Ë& 
dev
->
íabÀd_p‹ts
))

1065  -
EINVAL
;

1067 
txb_id
 = 
B53XX_MIB_TXB_ID
;

1068 
rxb_id
 = 
B53XX_MIB_RXB_ID
;

1070 i‡(
	`is5365
(
dev
)) {

1071 i‡(
p‹t
 == 5)

1072 
p‹t
 = 8;

1074 
mibs
 = 
b53_mibs_65
;

1075 } i‡(
	`is63xx
(
dev
)) {

1076 
mibs
 = 
b53_mibs_63xx
;

1077 
txb_id
 = 
B63XX_MIB_TXB_ID
;

1078 
rxb_id
 = 
B63XX_MIB_RXB_ID
;

1080 
mibs
 = 
b53_mibs
;

1083 
dev
->
buf
[0] = 0;

1085 i‡(
mibs
->
size
 == 8) {

1086 
	`b53_ªad64
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
[
txb_id
].
off£t
, &
txb
);

1087 
	`b53_ªad64
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
[
rxb_id
].
off£t
, &
rxb
);

1089 
u32
 
vÆ32
;

1091 
	`b53_ªad32
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
[
txb_id
].
off£t
, &
vÆ32
);

1092 
txb
 = 
vÆ32
;

1094 
	`b53_ªad32
(
dev
, 
	`B53_MIB_PAGE
(
p‹t
), 
mibs
[
rxb_id
].
off£t
, &
vÆ32
);

1095 
rxb
 = 
vÆ32
;

1098 
°©s
->
tx_byãs
 = 
txb
;

1099 
°©s
->
rx_byãs
 = 
rxb
;

1102 
	}
}

1104 
swôch_©å
 
	gb53_globÆ_›s_25
[] = {

1106 .
ty≥
 = 
SWITCH_TYPE_INT
,

1107 .
	g«me
 = "enable_vlan",

1108 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1109 .
	g£t
 = 
b53_globÆ_£t_vœn_íabÀ
,

1110 .
	ggë
 = 
b53_globÆ_gë_vœn_íabÀ
,

1111 .
	gmax
 = 1,

1114 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1115 .
	g«me
 = "ports",

1116 .
	gdes¸ùti⁄
 = "AvailableÖorts (as bitmask)",

1117 .
	ggë
 = 
b53_globÆ_gë_p‹ts
,

1121 
swôch_©å
 
	gb53_globÆ_›s_65
[] = {

1123 .
ty≥
 = 
SWITCH_TYPE_INT
,

1124 .
	g«me
 = "enable_vlan",

1125 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1126 .
	g£t
 = 
b53_globÆ_£t_vœn_íabÀ
,

1127 .
	ggë
 = 
b53_globÆ_gë_vœn_íabÀ
,

1128 .
	gmax
 = 1,

1131 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1132 .
	g«me
 = "ports",

1133 .
	gdes¸ùti⁄
 = "AvailableÖorts (as bitmask)",

1134 .
	ggë
 = 
b53_globÆ_gë_p‹ts
,

1137 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1138 .
	g«me
 = "reset_mib",

1139 .
	gdes¸ùti⁄
 = "Reset MIB counters",

1140 .
	g£t
 = 
b53_globÆ_ª£t_mib
,

1144 
swôch_©å
 
	gb53_globÆ_›s
[] = {

1146 .
ty≥
 = 
SWITCH_TYPE_INT
,

1147 .
	g«me
 = "enable_vlan",

1148 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1149 .
	g£t
 = 
b53_globÆ_£t_vœn_íabÀ
,

1150 .
	ggë
 = 
b53_globÆ_gë_vœn_íabÀ
,

1151 .
	gmax
 = 1,

1154 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1155 .
	g«me
 = "ports",

1156 .
	gdes¸ùti⁄
 = "Available Ports (as bitmask)",

1157 .
	ggë
 = 
b53_globÆ_gë_p‹ts
,

1160 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1161 .
	g«me
 = "reset_mib",

1162 .
	gdes¸ùti⁄
 = "Reset MIB counters",

1163 .
	g£t
 = 
b53_globÆ_ª£t_mib
,

1166 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1167 .
	g«me
 = "enable_jumbo",

1168 .
	gdes¸ùti⁄
 = "Enable Jumbo Frames",

1169 .
	g£t
 = 
b53_globÆ_£t_jumbo_íabÀ
,

1170 .
	ggë
 = 
b53_globÆ_gë_jumbo_íabÀ
,

1171 .
	gmax
 = 1,

1174 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1175 .
	g«me
 = "allow_vid_4095",

1176 .
	gdes¸ùti⁄
 = "Allow VID 4095",

1177 .
	g£t
 = 
b53_globÆ_£t_4095_íabÀ
,

1178 .
	ggë
 = 
b53_globÆ_gë_4095_íabÀ
,

1179 .
	gmax
 = 1,

1183 
swôch_©å
 
	gb53_p‹t_›s
[] = {

1185 .
ty≥
 = 
SWITCH_TYPE_STRING
,

1186 .
	g«me
 = "mib",

1187 .
	gdes¸ùti⁄
 = "GetÖort's MIB counters",

1188 .
	ggë
 = 
b53_p‹t_gë_mib
,

1192 
swôch_©å
 
	gb53_no_›s
[] = {

1195 c⁄° 
swôch_dev_›s
 
	gb53_swôch_›s_25
 = {

1196 .
©å_globÆ
 = {

1197 .
©å
 = 
b53_globÆ_›s_25
,

1198 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_globÆ_›s_25
),

1200 .
	g©å_p‹t
 = {

1201 .
©å
 = 
b53_no_›s
,

1202 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_no_›s
),

1204 .
	g©å_vœn
 = {

1205 .
©å
 = 
b53_no_›s
,

1206 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_no_›s
),

1209 .
	ggë_vœn_p‹ts
 = 
b53_vœn_gë_p‹ts
,

1210 .
	g£t_vœn_p‹ts
 = 
b53_vœn_£t_p‹ts
,

1211 .
	ggë_p‹t_pvid
 = 
b53_p‹t_gë_pvid
,

1212 .
	g£t_p‹t_pvid
 = 
b53_p‹t_£t_pvid
,

1213 .
	g≠∂y_c⁄fig
 = 
b53_globÆ_≠∂y_c⁄fig
,

1214 .
	gª£t_swôch
 = 
b53_globÆ_ª£t_swôch
,

1215 .
	ggë_p‹t_lök
 = 
b53_p‹t_gë_lök
,

1216 .
	g£t_p‹t_lök
 = 
b53_p‹t_£t_lök
,

1217 .
	ggë_p‹t_°©s
 = 
b53_p‹t_gë_°©s
,

1218 .
	gphy_ªad16
 = 
b53_phy_ªad16
,

1219 .
	gphy_wrôe16
 = 
b53_phy_wrôe16
,

1222 c⁄° 
swôch_dev_›s
 
	gb53_swôch_›s_65
 = {

1223 .
©å_globÆ
 = {

1224 .
©å
 = 
b53_globÆ_›s_65
,

1225 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_globÆ_›s_65
),

1227 .
	g©å_p‹t
 = {

1228 .
©å
 = 
b53_p‹t_›s
,

1229 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_p‹t_›s
),

1231 .
	g©å_vœn
 = {

1232 .
©å
 = 
b53_no_›s
,

1233 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_no_›s
),

1236 .
	ggë_vœn_p‹ts
 = 
b53_vœn_gë_p‹ts
,

1237 .
	g£t_vœn_p‹ts
 = 
b53_vœn_£t_p‹ts
,

1238 .
	ggë_p‹t_pvid
 = 
b53_p‹t_gë_pvid
,

1239 .
	g£t_p‹t_pvid
 = 
b53_p‹t_£t_pvid
,

1240 .
	g≠∂y_c⁄fig
 = 
b53_globÆ_≠∂y_c⁄fig
,

1241 .
	gª£t_swôch
 = 
b53_globÆ_ª£t_swôch
,

1242 .
	ggë_p‹t_lök
 = 
b53_p‹t_gë_lök
,

1243 .
	g£t_p‹t_lök
 = 
b53_p‹t_£t_lök
,

1244 .
	ggë_p‹t_°©s
 = 
b53_p‹t_gë_°©s
,

1245 .
	gphy_ªad16
 = 
b53_phy_ªad16
,

1246 .
	gphy_wrôe16
 = 
b53_phy_wrôe16
,

1249 c⁄° 
swôch_dev_›s
 
	gb53_swôch_›s
 = {

1250 .
©å_globÆ
 = {

1251 .
©å
 = 
b53_globÆ_›s
,

1252 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_globÆ_›s
),

1254 .
	g©å_p‹t
 = {

1255 .
©å
 = 
b53_p‹t_›s
,

1256 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_p‹t_›s
),

1258 .
	g©å_vœn
 = {

1259 .
©å
 = 
b53_no_›s
,

1260 .
	gn_©å
 = 
ARRAY_SIZE
(
b53_no_›s
),

1263 .
	ggë_vœn_p‹ts
 = 
b53_vœn_gë_p‹ts
,

1264 .
	g£t_vœn_p‹ts
 = 
b53_vœn_£t_p‹ts
,

1265 .
	ggë_p‹t_pvid
 = 
b53_p‹t_gë_pvid
,

1266 .
	g£t_p‹t_pvid
 = 
b53_p‹t_£t_pvid
,

1267 .
	g≠∂y_c⁄fig
 = 
b53_globÆ_≠∂y_c⁄fig
,

1268 .
	gª£t_swôch
 = 
b53_globÆ_ª£t_swôch
,

1269 .
	ggë_p‹t_lök
 = 
b53_p‹t_gë_lök
,

1270 .
	g£t_p‹t_lök
 = 
b53_p‹t_£t_lök
,

1271 .
	ggë_p‹t_°©s
 = 
b53_p‹t_gë_°©s
,

1272 .
	gphy_ªad16
 = 
b53_phy_ªad16
,

1273 .
	gphy_wrôe16
 = 
b53_phy_wrôe16
,

1276 
	sb53_chù_d©a
 {

1277 
u32
 
	mchù_id
;

1278 c⁄° *
	mdev_«me
;

1279 c⁄° *
	mÆüs
;

1280 
u16
 
	mvœns
;

1281 
u16
 
	míabÀd_p‹ts
;

1282 
u8
 
	m˝u_p‹t
;

1283 
u8
 
	mvè_ªgs
[3];

1284 
u8
 
	mdu∂ex_ªg
;

1285 
u8
 
	mjumbo_pm_ªg
;

1286 
u8
 
	mjumbo_size_ªg
;

1287 c⁄° 
swôch_dev_›s
 *
	msw_›s
;

1290 
	#B53_VTA_REGS
 \

1291 { 
B53_VT_ACCESS
, 
B53_VT_INDEX
, 
B53_VT_ENTRY
 }

	)

1292 
	#B53_VTA_REGS_9798
 \

1293 { 
B53_VT_ACCESS_9798
, 
B53_VT_INDEX_9798
, 
B53_VT_ENTRY_9798
 }

	)

1294 
	#B53_VTA_REGS_63XX
 \

1295 { 
B53_VT_ACCESS_63XX
, 
B53_VT_INDEX_63XX
, 
B53_VT_ENTRY_63XX
 }

	)

1297 c⁄° 
b53_chù_d©a
 
	gb53_swôch_chùs
[] = {

1299 .
chù_id
 = 
BCM5325_DEVICE_ID
,

1300 .
	gdev_«me
 = "BCM5325",

1301 .
	gÆüs
 = "bcm5325",

1302 .
	gvœns
 = 16,

1303 .
	gíabÀd_p‹ts
 = 0x1f,

1304 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1305 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_FE
,

1306 .
	gsw_›s
 = &
b53_swôch_›s_25
,

1309 .
	gchù_id
 = 
BCM5365_DEVICE_ID
,

1310 .
	gdev_«me
 = "BCM5365",

1311 .
	gÆüs
 = "bcm5365",

1312 .
	gvœns
 = 256,

1313 .
	gíabÀd_p‹ts
 = 0x1f,

1314 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1315 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_FE
,

1316 .
	gsw_›s
 = &
b53_swôch_›s_65
,

1319 .
	gchù_id
 = 
BCM5395_DEVICE_ID
,

1320 .
	gdev_«me
 = "BCM5395",

1321 .
	gÆüs
 = "bcm5395",

1322 .
	gvœns
 = 4096,

1323 .
	gíabÀd_p‹ts
 = 0x1f,

1324 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1325 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1326 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1327 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1328 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1329 .
	gsw_›s
 = &
b53_swôch_›s
,

1332 .
	gchù_id
 = 
BCM5397_DEVICE_ID
,

1333 .
	gdev_«me
 = "BCM5397",

1334 .
	gÆüs
 = "bcm5397",

1335 .
	gvœns
 = 4096,

1336 .
	gíabÀd_p‹ts
 = 0x1f,

1337 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1338 .
	gvè_ªgs
 = 
B53_VTA_REGS_9798
,

1339 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1340 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1341 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1342 .
	gsw_›s
 = &
b53_swôch_›s
,

1345 .
	gchù_id
 = 
BCM5398_DEVICE_ID
,

1346 .
	gdev_«me
 = "BCM5398",

1347 .
	gÆüs
 = "bcm5398",

1348 .
	gvœns
 = 4096,

1349 .
	gíabÀd_p‹ts
 = 0x7f,

1350 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1351 .
	gvè_ªgs
 = 
B53_VTA_REGS_9798
,

1352 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1353 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1354 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1355 .
	gsw_›s
 = &
b53_swôch_›s
,

1358 .
	gchù_id
 = 
BCM53115_DEVICE_ID
,

1359 .
	gdev_«me
 = "BCM53115",

1360 .
	gÆüs
 = "bcm53115",

1361 .
	gvœns
 = 4096,

1362 .
	gíabÀd_p‹ts
 = 0x1f,

1363 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1364 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1365 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1366 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1367 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1368 .
	gsw_›s
 = &
b53_swôch_›s
,

1371 .
	gchù_id
 = 
BCM53125_DEVICE_ID
,

1372 .
	gdev_«me
 = "BCM53125",

1373 .
	gÆüs
 = "bcm53125",

1374 .
	gvœns
 = 4096,

1375 .
	gíabÀd_p‹ts
 = 0x1f,

1376 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1377 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1378 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1379 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1380 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1381 .
	gsw_›s
 = &
b53_swôch_›s
,

1384 .
	gchù_id
 = 
BCM53128_DEVICE_ID
,

1385 .
	gdev_«me
 = "BCM53128",

1386 .
	gÆüs
 = "bcm53128",

1387 .
	gvœns
 = 4096,

1388 .
	gíabÀd_p‹ts
 = 0x1ff,

1389 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1390 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1391 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1392 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1393 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1394 .
	gsw_›s
 = &
b53_swôch_›s
,

1397 .
	gchù_id
 = 
BCM63XX_DEVICE_ID
,

1398 .
	gdev_«me
 = "BCM63xx",

1399 .
	gÆüs
 = "bcm63xx",

1400 .
	gvœns
 = 4096,

1401 .
	gíabÀd_p‹ts
 = 0,

1402 .
	g˝u_p‹t
 = 
B53_CPU_PORT
,

1403 .
	gvè_ªgs
 = 
B53_VTA_REGS_63XX
,

1404 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_63XX
,

1405 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK_63XX
,

1406 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE_63XX
,

1407 .
	gsw_›s
 = &
b53_swôch_›s
,

1410 .
	gchù_id
 = 
BCM53010_DEVICE_ID
,

1411 .
	gdev_«me
 = "BCM53010",

1412 .
	gÆüs
 = "bcm53011",

1413 .
	gvœns
 = 4096,

1414 .
	gíabÀd_p‹ts
 = 0x1f,

1415 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1416 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1417 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1418 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1419 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1420 .
	gsw_›s
 = &
b53_swôch_›s
,

1423 .
	gchù_id
 = 
BCM53011_DEVICE_ID
,

1424 .
	gdev_«me
 = "BCM53011",

1425 .
	gÆüs
 = "bcm53011",

1426 .
	gvœns
 = 4096,

1427 .
	gíabÀd_p‹ts
 = 0x1bf,

1428 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1429 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1430 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1431 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1432 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1433 .
	gsw_›s
 = &
b53_swôch_›s
,

1436 .
	gchù_id
 = 
BCM53012_DEVICE_ID
,

1437 .
	gdev_«me
 = "BCM53012",

1438 .
	gÆüs
 = "bcm53011",

1439 .
	gvœns
 = 4096,

1440 .
	gíabÀd_p‹ts
 = 0x1bf,

1441 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1442 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1443 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1444 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1445 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1446 .
	gsw_›s
 = &
b53_swôch_›s
,

1449 .
	gchù_id
 = 
BCM53018_DEVICE_ID
,

1450 .
	gdev_«me
 = "BCM53018",

1451 .
	gÆüs
 = "bcm53018",

1452 .
	gvœns
 = 4096,

1453 .
	gíabÀd_p‹ts
 = 0x1f,

1454 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1455 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1456 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1457 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1458 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1459 .
	gsw_›s
 = &
b53_swôch_›s
,

1462 .
	gchù_id
 = 
BCM53019_DEVICE_ID
,

1463 .
	gdev_«me
 = "BCM53019",

1464 .
	gÆüs
 = "bcm53019",

1465 .
	gvœns
 = 4096,

1466 .
	gíabÀd_p‹ts
 = 0x1f,

1467 .
	g˝u_p‹t
 = 
B53_CPU_PORT_25
,

1468 .
	gvè_ªgs
 = 
B53_VTA_REGS
,

1469 .
	gdu∂ex_ªg
 = 
B53_DUPLEX_STAT_GE
,

1470 .
	gjumbo_pm_ªg
 = 
B53_JUMBO_PORT_MASK
,

1471 .
	gjumbo_size_ªg
 = 
B53_JUMBO_MAX_SIZE
,

1472 .
	gsw_›s
 = &
b53_swôch_›s
,

1476 
	$b53_swôch_öô_of
(
b53_devi˚
 *
dev
)

1478 
devi˚_node
 *
dn
, *
≤
;

1479 c⁄° *
Æüs
;

1480 
u32
 
p‹t_num
;

1481 
u16
 
p‹ts
 = 0;

1483 
dn
 = 
	`of_gë_chûd_by_«me
(
	`dev_of_node
(
dev
->dev), "ports");

1484 i‡(!
dn
)

1485  -
EINVAL
;

1487 
	`f‹_óch_avaûabÀ_chûd_of_node
(
dn
, 
≤
) {

1488 c⁄° *
œbñ
;

1489 
Àn
;

1491 i‡(
	`of_¥›îty_ªad_u32
(
≤
, "ªg", &
p‹t_num
))

1494 i‡(
p‹t_num
 > 
B53_CPU_PORT
)

1497 
p‹ts
 |
	`BIT
(
p‹t_num
);

1499 
œbñ
 = 
	`of_gë_¥›îty
(
≤
, "œbñ", &
Àn
);

1500 i‡(
œbñ
 && !
	`°rcmp
(label, "cpu"))

1501 
dev
->
sw_dev
.
˝u_p‹t
 = 
p‹t_num
;

1504 
dev
->
íabÀd_p‹ts
 = 
p‹ts
;

1506 i‡(!
	`of_¥›îty_ªad_°rög
(
	`dev_of_node
(
dev
->dev), "lede,alias",

1507 &
Æüs
))

1508 
dev
->
sw_dev
.
Æüs
 = 
	`devm_k°rdup
(dev->dev,álüs, 
GFP_KERNEL
);

1511 
	}
}

1513 
	$b53_swôch_öô
(
b53_devi˚
 *
dev
)

1515 
swôch_dev
 *
sw_dev
 = &
dev
->sw_dev;

1516 
i
;

1517 
ªt
;

1519 
i
 = 0; i < 
	`ARRAY_SIZE
(
b53_swôch_chùs
); i++) {

1520 c⁄° 
b53_chù_d©a
 *
chù
 = &
b53_swôch_chùs
[
i
];

1522 i‡(
chù
->
chù_id
 =
dev
->chip_id) {

1523 
sw_dev
->
«me
 = 
chù
->
dev_«me
;

1524 i‡(!
sw_dev
->
Æüs
)

1525 
sw_dev
->
Æüs
 = 
chù
->alias;

1526 i‡(!
dev
->
íabÀd_p‹ts
)

1527 
dev
->
íabÀd_p‹ts
 = 
chù
->enabled_ports;

1528 
dev
->
du∂ex_ªg
 = 
chù
->duplex_reg;

1529 
dev
->
vè_ªgs
[0] = 
chù
->vta_regs[0];

1530 
dev
->
vè_ªgs
[1] = 
chù
->vta_regs[1];

1531 
dev
->
vè_ªgs
[2] = 
chù
->vta_regs[2];

1532 
dev
->
jumbo_pm_ªg
 = 
chù
->jumbo_pm_reg;

1533 
sw_dev
->
›s
 = 
chù
->
sw_›s
;

1534 
sw_dev
->
˝u_p‹t
 = 
chù
->cpu_port;

1535 
sw_dev
->
vœns
 = 
chù
->vlans;

1540 i‡(!
sw_dev
->
«me
)

1541  -
EINVAL
;

1544 i‡(
	`is5325
(
dev
)) {

1545 
u8
 
vc4
;

1547 
	`b53_ªad8
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_CTRL4_25
, &
vc4
);

1550 
vc4
 & 3) {

1556 
dev
->
íabÀd_p‹ts
 &~
	`BIT
(4);

1560 #i‚de‡
CONFIG_BCM47XX


1562  -
EINVAL
;

1567 } i‡(
dev
->
chù_id
 =
BCM53115_DEVICE_ID
) {

1568 
u64
 
°øp_vÆue
;

1570 
	`b53_ªad48
(
dev
, 
B53_STAT_PAGE
, 
B53_STRAP_VALUE
, &
°øp_vÆue
);

1572 i‡(
°øp_vÆue
 & 
SV_GMII_CTRL_115
)

1573 
sw_dev
->
˝u_p‹t
 = 5;

1576 i‡(
	`dev_of_node
(
dev
->dev)) {

1577 
ªt
 = 
	`b53_swôch_öô_of
(
dev
);

1578 i‡(
ªt
)

1579  
ªt
;

1582 
dev
->
íabÀd_p‹ts
 |
	`BIT
(
sw_dev
->
˝u_p‹t
);

1583 
sw_dev
->
p‹ts
 = 
	`Ês
(
dev
->
íabÀd_p‹ts
);

1585 
dev
->
p‹ts
 = 
	`devm_kzÆloc
(dev->dev,

1586 (
b53_p‹t
Ë* 
sw_dev
->
p‹ts
,

1587 
GFP_KERNEL
);

1588 i‡(!
dev
->
p‹ts
)

1589  -
ENOMEM
;

1591 
dev
->
vœns
 = 
	`devm_kzÆloc
(dev->dev,

1592 (
b53_vœn
Ë* 
sw_dev
->
vœns
,

1593 
GFP_KERNEL
);

1594 i‡(!
dev
->
vœns
)

1595  -
ENOMEM
;

1597 
dev
->
buf
 = 
	`devm_kzÆloc
(dev->dev, 
B53_BUF_SIZE
, 
GFP_KERNEL
);

1598 i‡(!
dev
->
buf
)

1599  -
ENOMEM
;

1601 
dev
->
ª£t_gpio
 = 
	`b53_swôch_gë_ª£t_gpio
(dev);

1602 i‡(
dev
->
ª£t_gpio
 >= 0) {

1603 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(
dev
->dev, dev->
ª£t_gpio
,

1604 
GPIOF_OUT_INIT_HIGH
, "robo_reset");

1605 i‡(
ªt
)

1606  
ªt
;

1609  
	`b53_swôch_ª£t
(
dev
);

1610 
	}
}

1612 
b53_devi˚
 *
	$b53_swôch_Æloc
(
devi˚
 *
ba£
, 
b53_io_›s
 *
›s
,

1613 *
¥iv
)

1615 
b53_devi˚
 *
dev
;

1617 
dev
 = 
	`devm_kzÆloc
(
ba£
, (*dev), 
GFP_KERNEL
);

1618 i‡(!
dev
)

1619  
NULL
;

1621 
dev
->dev = 
ba£
;

1622 
dev
->
›s
 = ops;

1623 
dev
->
¥iv
 =Öriv;

1624 
	`muãx_öô
(&
dev
->
ªg_muãx
);

1626  
dev
;

1627 
	}
}

1628 
EXPORT_SYMBOL
(
b53_swôch_Æloc
);

1630 
	$b53_swôch_dëe˘
(
b53_devi˚
 *
dev
)

1632 
u32
 
id32
;

1633 
u16
 
tmp
;

1634 
u8
 
id8
;

1635 
ªt
;

1637 
ªt
 = 
	`b53_ªad8
(
dev
, 
B53_MGMT_PAGE
, 
B53_DEVICE_ID
, &
id8
);

1638 i‡(
ªt
)

1639  
ªt
;

1641 
id8
) {

1652 
	`b53_wrôe16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_TABLE_ACCESS_25
, 0xf);

1653 
	`b53_ªad16
(
dev
, 
B53_VLAN_PAGE
, 
B53_VLAN_TABLE_ACCESS_25
, &
tmp
);

1655 i‡(
tmp
 == 0xf)

1656 
dev
->
chù_id
 = 
BCM5325_DEVICE_ID
;

1658 
dev
->
chù_id
 = 
BCM5365_DEVICE_ID
;

1660 
BCM5395_DEVICE_ID
:

1661 
BCM5397_DEVICE_ID
:

1662 
BCM5398_DEVICE_ID
:

1663 
dev
->
chù_id
 = 
id8
;

1666 
ªt
 = 
	`b53_ªad32
(
dev
, 
B53_MGMT_PAGE
, 
B53_DEVICE_ID
, &
id32
);

1667 i‡(
ªt
)

1668  
ªt
;

1670 
id32
) {

1671 
BCM53115_DEVICE_ID
:

1672 
BCM53125_DEVICE_ID
:

1673 
BCM53128_DEVICE_ID
:

1674 
BCM53010_DEVICE_ID
:

1675 
BCM53011_DEVICE_ID
:

1676 
BCM53012_DEVICE_ID
:

1677 
BCM53018_DEVICE_ID
:

1678 
BCM53019_DEVICE_ID
:

1679 
dev
->
chù_id
 = 
id32
;

1682 
	`¥_îr
("unsupported switch detected (BCM53%02x/BCM%x)\n",

1683 
id8
, 
id32
);

1684  -
ENODEV
;

1688 i‡(
dev
->
chù_id
 =
BCM5325_DEVICE_ID
)

1689  
	`b53_ªad8
(
dev
, 
B53_STAT_PAGE
, 
B53_REV_ID_25
,

1690 &
dev
->
c‹e_ªv
);

1692  
	`b53_ªad8
(
dev
, 
B53_MGMT_PAGE
, 
B53_REV_ID
,

1693 &
dev
->
c‹e_ªv
);

1694 
	}
}

1695 
EXPORT_SYMBOL
(
b53_swôch_dëe˘
);

1697 
	$b53_swôch_ªgi°î
(
b53_devi˚
 *
dev
)

1699 
ªt
;

1701 i‡(
dev
->
pd©a
) {

1702 
dev
->
chù_id
 = dev->
pd©a
->chip_id;

1703 
dev
->
íabÀd_p‹ts
 = dev->
pd©a
->enabled_ports;

1704 
dev
->
sw_dev
.
Æüs
 = dev->
pd©a
->alias;

1707 i‡(!
dev
->
chù_id
 && 
	`b53_swôch_dëe˘
(dev))

1708  -
EINVAL
;

1710 
ªt
 = 
	`b53_swôch_öô
(
dev
);

1711 i‡(
ªt
)

1712  
ªt
;

1714 
	`¥_öfo
("found swôch: %s,Ñev %i\n", 
dev
->
sw_dev
.
«me
, dev->
c‹e_ªv
);

1716  
	`ªgi°î_swôch
(&
dev
->
sw_dev
, 
NULL
);

1717 
	}
}

1718 
EXPORT_SYMBOL
(
b53_swôch_ªgi°î
);

1720 
MODULE_AUTHOR
("Jonas Gorski <jogo@openwrt.org>");

1721 
MODULE_DESCRIPTION
("B53 switchÜibrary");

1722 
MODULE_LICENSE
("Dual BSD/GPL");

	@linux/generic/files/drivers/net/phy/b53/b53_mdio.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/phy.h
>

21 
	~<löux/moduÀ.h
>

23 
	~"b53_¥iv.h
"

25 
	#B53_PSEUDO_PHY
 0x1ê

	)

28 
	#REG_MII_PAGE
 0x10

	)

29 
	#REG_MII_ADDR
 0x11

	)

30 
	#REG_MII_DATA0
 0x18

	)

31 
	#REG_MII_DATA1
 0x19

	)

32 
	#REG_MII_DATA2
 0x1®

	)

33 
	#REG_MII_DATA3
 0x1b

	)

35 
	#REG_MII_PAGE_ENABLE
 
	`BIT
(0)

	)

36 
	#REG_MII_ADDR_WRITE
 
	`BIT
(0)

	)

37 
	#REG_MII_ADDR_READ
 
	`BIT
(1)

	)

39 
	$b53_mdio_›
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 
›
)

41 
i
;

42 
u16
 
v
;

43 
ªt
;

44 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

46 i‡(
dev
->
cuºít_∑ge
 !
∑ge
) {

48 
v
 = (
∑ge
 << 8Ë| 
REG_MII_PAGE_ENABLE
;

49 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_PAGE
, 
v
);

50 i‡(
ªt
)

51  
ªt
;

52 
dev
->
cuºít_∑ge
 = 
∑ge
;

56 
v
 = (
ªg
 << 8Ë| 
›
;

57 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_ADDR
, 
v
);

58 i‡(
ªt
)

59  
ªt
;

62 
i
 = 0; i < 5; ++i) {

63 
v
 = 
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_ADDR
);

64 i‡(!(
v
 & (
REG_MII_ADDR_WRITE
 | 
REG_MII_ADDR_READ
)))

66 
	`u¶ìp_ønge
(10, 100);

69 i‡(
	`WARN_ON
(
i
 == 5))

70  -
EIO
;

73 
	}
}

75 
	$b53_mdio_ªad8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
vÆ
)

77 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

78 
ªt
;

80 
ªt
 = 
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_READ
);

81 i‡(
ªt
)

82  
ªt
;

84 *
vÆ
 = 
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
) & 0xff;

87 
	}
}

89 
	$b53_mdio_ªad16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 *
vÆ
)

91 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

92 
ªt
;

94 
ªt
 = 
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_READ
);

95 i‡(
ªt
)

96  
ªt
;

98 *
vÆ
 = 
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
);

101 
	}
}

103 
	$b53_mdio_ªad32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 *
vÆ
)

105 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

106 
ªt
;

108 
ªt
 = 
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_READ
);

109 i‡(
ªt
)

110  
ªt
;

112 *
vÆ
 = 
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
);

113 *
vÆ
 |
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA1
) << 16;

116 
	}
}

118 
	$b53_mdio_ªad48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

120 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

121 
u64
 
ãmp
 = 0;

122 
i
;

123 
ªt
;

125 
ªt
 = 
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_READ
);

126 i‡(
ªt
)

127  
ªt
;

129 
i
 = 2; i >= 0; i--) {

130 
ãmp
 <<= 16;

131 
ãmp
 |
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
 + 
i
);

134 *
vÆ
 = 
ãmp
;

137 
	}
}

139 
	$b53_mdio_ªad64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

141 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

142 
u64
 
ãmp
 = 0;

143 
i
;

144 
ªt
;

146 
ªt
 = 
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_READ
);

147 i‡(
ªt
)

148  
ªt
;

150 
i
 = 3; i >= 0; i--) {

151 
ãmp
 <<= 16;

152 
ãmp
 |
	`mdiobus_ªad
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
 + 
i
);

155 *
vÆ
 = 
ãmp
;

158 
	}
}

160 
	$b53_mdio_wrôe8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 
vÆue
)

162 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

163 
ªt
;

165 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
, 
vÆue
);

166 i‡(
ªt
)

167  
ªt
;

169  
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_WRITE
);

170 
	}
}

172 
	$b53_mdio_wrôe16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

173 
u16
 
vÆue
)

175 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

176 
ªt
;

178 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
, 
vÆue
);

179 i‡(
ªt
)

180  
ªt
;

182  
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_WRITE
);

183 
	}
}

185 
	$b53_mdio_wrôe32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

186 
u32
 
vÆue
)

188 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

189 
i
;

190 
u32
 
ãmp
 = 
vÆue
;

192 
i
 = 0; i < 2; i++) {

193 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
 + 
i
,

194 
ãmp
 & 0xffff);

195 i‡(
ªt
)

196  
ªt
;

197 
ãmp
 >>= 16;

200  
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_WRITE
);

202 
	}
}

204 
	$b53_mdio_wrôe48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

205 
u64
 
vÆue
)

207 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

208 
i
;

209 
u64
 
ãmp
 = 
vÆue
;

211 
i
 = 0; i < 3; i++) {

212 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
 + 
i
,

213 
ãmp
 & 0xffff);

214 i‡(
ªt
)

215  
ªt
;

216 
ãmp
 >>= 16;

219  
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_WRITE
);

221 
	}
}

223 
	$b53_mdio_wrôe64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

224 
u64
 
vÆue
)

226 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

227 
i
;

228 
u64
 
ãmp
 = 
vÆue
;

230 
i
 = 0; i < 4; i++) {

231 
ªt
 = 
	`mdiobus_wrôe
(
bus
, 
B53_PSEUDO_PHY
, 
REG_MII_DATA0
 + 
i
,

232 
ãmp
 & 0xffff);

233 i‡(
ªt
)

234  
ªt
;

235 
ãmp
 >>= 16;

238  
	`b53_mdio_›
(
dev
, 
∑ge
, 
ªg
, 
REG_MII_ADDR_WRITE
);

239 
	}
}

241 
	$b53_mdio_phy_ªad16
(
b53_devi˚
 *
dev
, 
addr
, 
u8
 
ªg
,

242 
u16
 *
vÆue
)

244 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

246 *
vÆue
 = 
	`mdiobus_ªad
(
bus
, 
addr
, 
ªg
);

249 
	}
}

251 
	$b53_mdio_phy_wrôe16
(
b53_devi˚
 *
dev
, 
addr
, 
u8
 
ªg
,

252 
u16
 
vÆue
)

254 
mii_bus
 *
bus
 = 
dev
->
¥iv
;

256  
	`mdiobus_wrôe
(
bus
, 
addr
, 
ªg
, 
vÆue
);

257 
	}
}

259 
b53_io_›s
 
	gb53_mdio_›s
 = {

260 .
ªad8
 = 
b53_mdio_ªad8
,

261 .
	gªad16
 = 
b53_mdio_ªad16
,

262 .
	gªad32
 = 
b53_mdio_ªad32
,

263 .
	gªad48
 = 
b53_mdio_ªad48
,

264 .
	gªad64
 = 
b53_mdio_ªad64
,

265 .
	gwrôe8
 = 
b53_mdio_wrôe8
,

266 .
	gwrôe16
 = 
b53_mdio_wrôe16
,

267 .
	gwrôe32
 = 
b53_mdio_wrôe32
,

268 .
	gwrôe48
 = 
b53_mdio_wrôe48
,

269 .
	gwrôe64
 = 
b53_mdio_wrôe64
,

270 .
	gphy_ªad16
 = 
b53_mdio_phy_ªad16
,

271 .
	gphy_wrôe16
 = 
b53_mdio_phy_wrôe16
,

274 
	$b53_phy_¥obe
(
phy_devi˚
 *
phydev
)

276 
b53_devi˚
 *
dev
;

277 
ªt
;

280 i‡(
phydev
->
mdio
.
addr
 !
B53_PSEUDO_PHY
 &&Öhydev->mdio.addr != 0)

281  -
ENODEV
;

283 
dev
 = 
	`b53_swôch_Æloc
(&
phydev
->
mdio
.dev, &
b53_mdio_›s
,Öhydev->mdio.
bus
);

284 i‡(!
dev
)

285  -
ENOMEM
;

287 
dev
->
cuºít_∑ge
 = 0xff;

288 
dev
->
¥iv
 = 
phydev
->
mdio
.
bus
;

289 
dev
->
›s
 = &
b53_mdio_›s
;

290 
dev
->
pd©a
 = 
NULL
;

291 
	`muãx_öô
(&
dev
->
ªg_muãx
);

293 
ªt
 = 
	`b53_swôch_dëe˘
(
dev
);

294 i‡(
ªt
)

295  
ªt
;

297 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

298 
phydev
->
suµ‹ãd
 = 
SUPPORTED_100ba£T_FuŒ
;

300 
phydev
->
suµ‹ãd
 = 
SUPPORTED_1000ba£T_FuŒ
;

302 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
;

304 
ªt
 = 
	`b53_swôch_ªgi°î
(
dev
);

305 i‡(
ªt
) {

306 
	`dev_îr
(
dev
->dev, "ÁûedÅÿªgi°î swôch: %i\n", 
ªt
);

307  
ªt
;

310 
phydev
->
¥iv
 = 
dev
;

313 
	}
}

315 
	$b53_phy_c⁄fig_öô
(
phy_devi˚
 *
phydev
)

317 
b53_devi˚
 *
dev
 = 
phydev
->
¥iv
;

320 
dev
->
cuºít_∑ge
 = 0xff;

322 
dev
->
sw_dev
.
Æüs
 = 
phydev
->
©èched_dev
->
«me
;

325 
	}
}

327 
	$b53_phy_ªmove
(
phy_devi˚
 *
phydev
)

329 
b53_devi˚
 *
¥iv
 = 
phydev
->priv;

331 i‡(!
¥iv
)

334 
	`b53_swôch_ªmove
(
¥iv
);

336 
phydev
->
¥iv
 = 
NULL
;

337 
	}
}

339 
	$b53_phy_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

342 
	}
}

344 
	$b53_phy_ªad_°©us
(
phy_devi˚
 *
phydev
)

346 
b53_devi˚
 *
¥iv
 = 
phydev
->priv;

348 i‡(
	`is5325
(
¥iv
Ë|| 
	`is5365
(priv))

349 
phydev
->
•ìd
 = 100;

351 
phydev
->
•ìd
 = 1000;

353 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

354 
phydev
->
lök
 = 1;

355 
phydev
->
°©e
 = 
PHY_RUNNING
;

357 
	`√tif_ˇºõr_⁄
(
phydev
->
©èched_dev
);

358 
phydev
->
	`adju°_lök
’hydev->
©èched_dev
);

361 
	}
}

364 
phy_drivî
 
	gb53_phy_drivî_id1
 = {

365 .
phy_id
 = 0x0143bc00,

366 .
	g«me
 = "Broadcom B53 (1)",

367 .
	gphy_id_mask
 = 0x1ffffc00,

368 .
	g„©uªs
 = 0,

369 .
	g¥obe
 = 
b53_phy_¥obe
,

370 .
	gªmove
 = 
b53_phy_ªmove
,

371 .
	gc⁄fig_™eg
 = 
b53_phy_c⁄fig_™eg
,

372 .
	gc⁄fig_öô
 = 
b53_phy_c⁄fig_öô
,

373 .
	gªad_°©us
 = 
b53_phy_ªad_°©us
,

377 
phy_drivî
 
	gb53_phy_drivî_id2
 = {

378 .
phy_id
 = 0x03625c00,

379 .
	g«me
 = "Broadcom B53 (2)",

380 .
	gphy_id_mask
 = 0x1ffffc00,

381 .
	g„©uªs
 = 0,

382 .
	g¥obe
 = 
b53_phy_¥obe
,

383 .
	gªmove
 = 
b53_phy_ªmove
,

384 .
	gc⁄fig_™eg
 = 
b53_phy_c⁄fig_™eg
,

385 .
	gc⁄fig_öô
 = 
b53_phy_c⁄fig_öô
,

386 .
	gªad_°©us
 = 
b53_phy_ªad_°©us
,

390 
phy_drivî
 
	gb53_phy_drivî_id3
 = {

391 .
phy_id
 = 0x00406000,

392 .
	g«me
 = "Broadcom B53 (3)",

393 .
	gphy_id_mask
 = 0x1ffffc00,

394 .
	g„©uªs
 = 0,

395 .
	g¥obe
 = 
b53_phy_¥obe
,

396 .
	gªmove
 = 
b53_phy_ªmove
,

397 .
	gc⁄fig_™eg
 = 
b53_phy_c⁄fig_™eg
,

398 .
	gc⁄fig_öô
 = 
b53_phy_c⁄fig_öô
,

399 .
	gªad_°©us
 = 
b53_phy_ªad_°©us
,

402 
__öô
 
	$b53_phy_drivî_ªgi°î
()

404 
ªt
;

406 
ªt
 = 
	`phy_drivî_ªgi°î
(&
b53_phy_drivî_id1
, 
THIS_MODULE
);

407 i‡(
ªt
)

408  
ªt
;

410 
ªt
 = 
	`phy_drivî_ªgi°î
(&
b53_phy_drivî_id2
, 
THIS_MODULE
);

411 i‡(
ªt
)

412 
îr1
;

414 
ªt
 = 
	`phy_drivî_ªgi°î
(&
b53_phy_drivî_id3
, 
THIS_MODULE
);

415 i‡(!
ªt
)

418 
	`phy_drivî_uƒegi°î
(&
b53_phy_drivî_id2
);

419 
îr1
:

420 
	`phy_drivî_uƒegi°î
(&
b53_phy_drivî_id1
);

421  
ªt
;

422 
	}
}

424 
__exô
 
	$b53_phy_drivî_uƒegi°î
()

426 
	`phy_drivî_uƒegi°î
(&
b53_phy_drivî_id3
);

427 
	`phy_drivî_uƒegi°î
(&
b53_phy_drivî_id2
);

428 
	`phy_drivî_uƒegi°î
(&
b53_phy_drivî_id1
);

429 
	}
}

431 
moduÀ_öô
(
b53_phy_drivî_ªgi°î
);

432 
moduÀ_exô
(
b53_phy_drivî_uƒegi°î
);

434 
MODULE_DESCRIPTION
("B53 MDIOáccess driver");

435 
MODULE_LICENSE
("Dual BSD/GPL");

	@linux/generic/files/drivers/net/phy/b53/b53_mmap.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/∂©f‹m_d©a/b53.h
>

24 
	~"b53_¥iv.h
"

26 
	$b53_mm≠_ªad8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
vÆ
)

28 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

30 *
vÆ
 = 
	`ªadb
(
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

33 
	}
}

35 
	$b53_mm≠_ªad16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 *
vÆ
)

37 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

39 i‡(
	`WARN_ON
(
ªg
 % 2))

40  -
EINVAL
;

42 i‡(
dev
->
pd©a
 && dev->pd©a->
big_ídün
)

43 *
vÆ
 = 
	`ªadw_be
(
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

45 *
vÆ
 = 
	`ªadw
(
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

48 
	}
}

50 
	$b53_mm≠_ªad32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 *
vÆ
)

52 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

54 i‡(
	`WARN_ON
(
ªg
 % 4))

55  -
EINVAL
;

57 i‡(
dev
->
pd©a
 && dev->pd©a->
big_ídün
)

58 *
vÆ
 = 
	`ªadl_be
(
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

60 *
vÆ
 = 
	`ªadl
(
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

63 
	}
}

65 
	$b53_mm≠_ªad48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

67 i‡(
	`WARN_ON
(
ªg
 % 2))

68  -
EINVAL
;

70 i‡(
ªg
 % 4) {

71 
u16
 
lo
;

72 
u32
 
hi
;

74 
	`b53_mm≠_ªad16
(
dev
, 
∑ge
, 
ªg
, &
lo
);

75 
	`b53_mm≠_ªad32
(
dev
, 
∑ge
, 
ªg
 + 2, &
hi
);

77 *
vÆ
 = ((
u64
)
hi
 << 16Ë| 
lo
;

79 
u32
 
lo
;

80 
u16
 
hi
;

82 
	`b53_mm≠_ªad32
(
dev
, 
∑ge
, 
ªg
, &
lo
);

83 
	`b53_mm≠_ªad16
(
dev
, 
∑ge
, 
ªg
 + 4, &
hi
);

85 *
vÆ
 = ((
u64
)
hi
 << 32Ë| 
lo
;

89 
	}
}

91 
	$b53_mm≠_ªad64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

93 
u32
 
hi
, 
lo
;

95 i‡(
	`WARN_ON
(
ªg
 % 4))

96  -
EINVAL
;

98 
	`b53_mm≠_ªad32
(
dev
, 
∑ge
, 
ªg
, &
lo
);

99 
	`b53_mm≠_ªad32
(
dev
, 
∑ge
, 
ªg
 + 4, &
hi
);

101 *
vÆ
 = ((
u64
)
hi
 << 32Ë| 
lo
;

104 
	}
}

106 
	$b53_mm≠_wrôe8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 
vÆue
)

108 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

110 
	`wrôeb
(
vÆue
, 
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

113 
	}
}

115 
	$b53_mm≠_wrôe16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

116 
u16
 
vÆue
)

118 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

120 i‡(
	`WARN_ON
(
ªg
 % 2))

121  -
EINVAL
;

123 i‡(
dev
->
pd©a
 && dev->pd©a->
big_ídün
)

124 
	`wrôew_be
(
vÆue
, 
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

126 
	`wrôew
(
vÆue
, 
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

129 
	}
}

131 
	$b53_mm≠_wrôe32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

132 
u32
 
vÆue
)

134 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

136 i‡(
	`WARN_ON
(
ªg
 % 4))

137  -
EINVAL
;

139 i‡(
dev
->
pd©a
 && dev->pd©a->
big_ídün
)

140 
	`wrôñ_be
(
vÆue
, 
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

142 
	`wrôñ
(
vÆue
, 
ªgs
 + (
∑ge
 << 8Ë+ 
ªg
);

145 
	}
}

147 
	$b53_mm≠_wrôe48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

148 
u64
 
vÆue
)

150 i‡(
	`WARN_ON
(
ªg
 % 2))

151  -
EINVAL
;

153 i‡(
ªg
 % 4) {

154 
u32
 
hi
 = (u32)(
vÆue
 >> 16);

155 
u16
 
lo
 = (u16)
vÆue
;

157 
	`b53_mm≠_wrôe16
(
dev
, 
∑ge
, 
ªg
, 
lo
);

158 
	`b53_mm≠_wrôe32
(
dev
, 
∑ge
, 
ªg
 + 2, 
hi
);

160 
u16
 
hi
 = (u16)(
vÆue
 >> 32);

161 
u32
 
lo
 = (u32)
vÆue
;

163 
	`b53_mm≠_wrôe32
(
dev
, 
∑ge
, 
ªg
, 
lo
);

164 
	`b53_mm≠_wrôe16
(
dev
, 
∑ge
, 
ªg
 + 4, 
hi
);

168 
	}
}

170 
	$b53_mm≠_wrôe64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

171 
u64
 
vÆue
)

173 
u32
 
hi
, 
lo
;

175 
hi
 = (
u32
)(
vÆue
 >> 32);

176 
lo
 = (
u32
)
vÆue
;

178 i‡(
	`WARN_ON
(
ªg
 % 4))

179  -
EINVAL
;

181 
	`b53_mm≠_wrôe32
(
dev
, 
∑ge
, 
ªg
, 
lo
);

182 
	`b53_mm≠_wrôe32
(
dev
, 
∑ge
, 
ªg
 + 4, 
hi
);

185 
	}
}

187 
b53_io_›s
 
	gb53_mm≠_›s
 = {

188 .
ªad8
 = 
b53_mm≠_ªad8
,

189 .
	gªad16
 = 
b53_mm≠_ªad16
,

190 .
	gªad32
 = 
b53_mm≠_ªad32
,

191 .
	gªad48
 = 
b53_mm≠_ªad48
,

192 .
	gªad64
 = 
b53_mm≠_ªad64
,

193 .
	gwrôe8
 = 
b53_mm≠_wrôe8
,

194 .
	gwrôe16
 = 
b53_mm≠_wrôe16
,

195 .
	gwrôe32
 = 
b53_mm≠_wrôe32
,

196 .
	gwrôe48
 = 
b53_mm≠_wrôe48
,

197 .
	gwrôe64
 = 
b53_mm≠_wrôe64
,

200 
	$b53_mm≠_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

202 
b53_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

203 
b53_devi˚
 *
dev
;

205 i‡(!
pd©a
)

206  -
EINVAL
;

208 
dev
 = 
	`b53_swôch_Æloc
(&
pdev
->dev, &
b53_mm≠_›s
, 
pd©a
->
ªgs
);

209 i‡(!
dev
)

210  -
ENOMEM
;

212 i‡(
pd©a
)

213 
dev
->
pd©a
 =Ödata;

215 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

217  
	`b53_swôch_ªgi°î
(
dev
);

218 
	}
}

220 
	$b53_mm≠_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

222 
b53_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

224 i‡(
dev
)

225 
	`b53_swôch_ªmove
(
dev
);

228 
	}
}

230 
∂©f‹m_drivî
 
	gb53_mm≠_drivî
 = {

231 .
¥obe
 = 
b53_mm≠_¥obe
,

232 .
	gªmove
 = 
b53_mm≠_ªmove
,

233 .
	gdrivî
 = {

234 .
«me
 = "b53-switch",

238 
moduÀ_∂©f‹m_drivî
(
b53_mm≠_drivî
);

239 
MODULE_AUTHOR
("Jonas Gorski <jogo@openwrt.org>");

240 
MODULE_DESCRIPTION
("B53 MMAPáccess driver");

241 
MODULE_LICENSE
("Dual BSD/GPL");

	@linux/generic/files/drivers/net/phy/b53/b53_phy_fixup.c

19 
	~<löux/öô.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/phy.h
>

23 
	#B53_PSEUDO_PHY
 0x1ê

	)

25 
	#B53_BRCM_OUI_1
 0x0143bc00

	)

26 
	#B53_BRCM_OUI_2
 0x03625c00

	)

27 
	#B53_BRCM_OUI_3
 0x00406000

	)

29 
	$b53_phy_fixup
(
phy_devi˚
 *
dev
)

31 
mii_bus
 *
bus
 = 
dev
->
mdio
.bus;

32 
u32
 
phy_id
;

34 i‡(
dev
->
mdio
.
addr
 !
B53_PSEUDO_PHY
)

38 
phy_id
 = 
	`mdiobus_ªad
(
bus
, 0, 2) << 16;

39 
phy_id
 |
	`mdiobus_ªad
(
bus
, 0, 3);

41 i‡((
phy_id
 & 0xfffffc00Ë=
B53_BRCM_OUI_1
 ||

42 (
phy_id
 & 0xfffffc00Ë=
B53_BRCM_OUI_2
 ||

43 (
phy_id
 & 0xfffffc00Ë=
B53_BRCM_OUI_3
) {

44 
dev
->
phy_id
 =Öhy_id;

48 
	}
}

50 
__öô
 
	$b53_phy_fixup_ªgi°î
()

52  
	`phy_ªgi°î_fixup_f‹_id
(
PHY_ANY_ID
, 
b53_phy_fixup
);

53 
	}
}

55 
subsys_öôˇŒ
(
b53_phy_fixup_ªgi°î
);

	@linux/generic/files/drivers/net/phy/b53/b53_priv.h

19 #i‚de‡
__B53_PRIV_H


20 
	#__B53_PRIV_H


	)

22 
	~<löux/kî√l.h
>

23 
	~<löux/muãx.h
>

24 
	~<löux/swôch.h
>

26 
	gb53_devi˚
;

28 
	sb53_io_›s
 {

29 (*
	mªad8
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, u8 *
	mvÆue
);

30 (*
	mªad16
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u16
 *
	mvÆue
);

31 (*
	mªad32
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u32
 *
	mvÆue
);

32 (*
	mªad48
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u64
 *
	mvÆue
);

33 (*
	mªad64
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u64
 *
	mvÆue
);

34 (*
	mwrôe8
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, u8 
	mvÆue
);

35 (*
	mwrôe16
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u16
 
	mvÆue
);

36 (*
	mwrôe32
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u32
 
	mvÆue
);

37 (*
	mwrôe48
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u64
 
	mvÆue
);

38 (*
	mwrôe64
)(
b53_devi˚
 *
	mdev
, 
u8
 
	m∑ge
, u8 
	mªg
, 
u64
 
	mvÆue
);

39 (*
	mphy_ªad16
)(
b53_devi˚
 *
	mdev
, 
	maddr
, 
u8
 
	mªg
, 
u16
 *
	mvÆue
);

40 (*
	mphy_wrôe16
)(
b53_devi˚
 *
	mdev
, 
	maddr
, 
u8
 
	mªg
, 
u16
 
	mvÆue
);

44 
	mBCM5325_DEVICE_ID
 = 0x25,

45 
	mBCM5365_DEVICE_ID
 = 0x65,

46 
	mBCM5395_DEVICE_ID
 = 0x95,

47 
	mBCM5397_DEVICE_ID
 = 0x97,

48 
	mBCM5398_DEVICE_ID
 = 0x98,

49 
	mBCM53115_DEVICE_ID
 = 0x53115,

50 
	mBCM53125_DEVICE_ID
 = 0x53125,

51 
	mBCM53128_DEVICE_ID
 = 0x53128,

52 
	mBCM63XX_DEVICE_ID
 = 0x6300,

53 
	mBCM53010_DEVICE_ID
 = 0x53010,

54 
	mBCM53011_DEVICE_ID
 = 0x53011,

55 
	mBCM53012_DEVICE_ID
 = 0x53012,

56 
	mBCM53018_DEVICE_ID
 = 0x53018,

57 
	mBCM53019_DEVICE_ID
 = 0x53019,

60 
	#B53_N_PORTS
 9

	)

61 
	#B53_N_PORTS_25
 6

	)

63 
	sb53_vœn
 {

64 
	mmembîs
:
B53_N_PORTS
;

65 
	mu¡ag
:
B53_N_PORTS
;

68 
	sb53_p‹t
 {

69 
	mpvid
:12;

72 
	sb53_devi˚
 {

73 
swôch_dev
 
	msw_dev
;

74 
b53_∂©f‹m_d©a
 *
	mpd©a
;

76 
muãx
 
	mªg_muãx
;

77 c⁄° 
b53_io_›s
 *
	m›s
;

80 
u32
 
	mchù_id
;

81 
u8
 
	mc‹e_ªv
;

82 
u8
 
	mvè_ªgs
[3];

83 
u8
 
	mdu∂ex_ªg
;

84 
u8
 
	mjumbo_pm_ªg
;

85 
u8
 
	mjumbo_size_ªg
;

86 
	mª£t_gpio
;

89 
u16
 
	míabÀd_p‹ts
;

92 
u8
 
	mcuºít_∑ge
;

93 
devi˚
 *
	mdev
;

94 *
	m¥iv
;

97 
	míabÀ_vœn
:1;

98 
	míabÀ_jumbo
:1;

99 
	mÆlow_vid_4095
:1;

101 
b53_p‹t
 *
	mp‹ts
;

102 
b53_vœn
 *
	mvœns
;

104 *
	mbuf
;

107 
	#b53_f‹_óch_p‹t
(
dev
, 
i
) \

108 
i
 = 0; i < 
B53_N_PORTS
; i++) \

109 i‡(
dev
->
íabÀd_p‹ts
 & 
	`BIT
(
i
))

	)

113 
ölöe
 
	$is5325
(
b53_devi˚
 *
dev
)

115  
dev
->
chù_id
 =
BCM5325_DEVICE_ID
;

116 
	}
}

118 
ölöe
 
	$is5365
(
b53_devi˚
 *
dev
)

120 #ifde‡
CONFIG_BCM47XX


121  
dev
->
chù_id
 =
BCM5365_DEVICE_ID
;

125 
	}
}

127 
ölöe
 
	$is5397_98
(
b53_devi˚
 *
dev
)

129  
dev
->
chù_id
 =
BCM5397_DEVICE_ID
 ||

130 
dev
->
chù_id
 =
BCM5398_DEVICE_ID
;

131 
	}
}

133 
ölöe
 
	$is539x
(
b53_devi˚
 *
dev
)

135  
dev
->
chù_id
 =
BCM5395_DEVICE_ID
 ||

136 
dev
->
chù_id
 =
BCM5397_DEVICE_ID
 ||

137 
dev
->
chù_id
 =
BCM5398_DEVICE_ID
;

138 
	}
}

140 
ölöe
 
	$is531x5
(
b53_devi˚
 *
dev
)

142  
dev
->
chù_id
 =
BCM53115_DEVICE_ID
 ||

143 
dev
->
chù_id
 =
BCM53125_DEVICE_ID
 ||

144 
dev
->
chù_id
 =
BCM53128_DEVICE_ID
;

145 
	}
}

147 
ölöe
 
	$is63xx
(
b53_devi˚
 *
dev
)

149 #ifde‡
CONFIG_BCM63XX


150  
dev
->
chù_id
 =
BCM63XX_DEVICE_ID
;

154 
	}
}

156 
ölöe
 
	$is5301x
(
b53_devi˚
 *
dev
)

158  
dev
->
chù_id
 =
BCM53010_DEVICE_ID
 ||

159 
dev
->
chù_id
 =
BCM53011_DEVICE_ID
 ||

160 
dev
->
chù_id
 =
BCM53012_DEVICE_ID
 ||

161 
dev
->
chù_id
 =
BCM53018_DEVICE_ID
 ||

162 
dev
->
chù_id
 =
BCM53019_DEVICE_ID
;

163 
	}
}

165 
	#B53_CPU_PORT_25
 5

	)

166 
	#B53_CPU_PORT
 8

	)

168 
ölöe
 
	$is_˝u_p‹t
(
b53_devi˚
 *
dev
, 
p‹t
)

170  
dev
->
sw_dev
.
˝u_p‹t
 =
p‹t
;

171 
	}
}

173 
ölöe
 
	$is_imp_p‹t
(
b53_devi˚
 *
dev
, 
p‹t
)

175 i‡(
	`is5325
(
dev
Ë|| 
	`is5365
(dev))

176  
p‹t
 =
B53_CPU_PORT_25
;

178  
p‹t
 =
B53_CPU_PORT
;

179 
	}
}

181 
ölöe
 
b53_devi˚
 *
	$sw_to_b53
(
swôch_dev
 *
sw
)

183  
	`c⁄èöî_of
(
sw
, 
b53_devi˚
, 
sw_dev
);

184 
	}
}

186 
b53_devi˚
 *
b53_swôch_Æloc
(
devi˚
 *
ba£
, 
b53_io_›s
 *
›s
,

187 *
¥iv
);

189 
b53_swôch_dëe˘
(
b53_devi˚
 *
dev
);

191 
b53_swôch_ªgi°î
(
b53_devi˚
 *
dev
);

193 
ölöe
 
	$b53_swôch_ªmove
(
b53_devi˚
 *
dev
)

195 
	`uƒegi°î_swôch
(&
dev
->
sw_dev
);

196 
	}
}

198 
ölöe
 
	$b53_ªad8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
vÆ
)

200 
ªt
;

202 
	`muãx_lock
(&
dev
->
ªg_muãx
);

203 
ªt
 = 
dev
->
›s
->
	`ªad8
(dev, 
∑ge
, 
ªg
, 
vÆ
);

204 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

206  
ªt
;

207 
	}
}

209 
ölöe
 
	$b53_ªad16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 *
vÆ
)

211 
ªt
;

213 
	`muãx_lock
(&
dev
->
ªg_muãx
);

214 
ªt
 = 
dev
->
›s
->
	`ªad16
(dev, 
∑ge
, 
ªg
, 
vÆ
);

215 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

217  
ªt
;

218 
	}
}

220 
ölöe
 
	$b53_ªad32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 *
vÆ
)

222 
ªt
;

224 
	`muãx_lock
(&
dev
->
ªg_muãx
);

225 
ªt
 = 
dev
->
›s
->
	`ªad32
(dev, 
∑ge
, 
ªg
, 
vÆ
);

226 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

228  
ªt
;

229 
	}
}

231 
ölöe
 
	$b53_ªad48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

233 
ªt
;

235 
	`muãx_lock
(&
dev
->
ªg_muãx
);

236 
ªt
 = 
dev
->
›s
->
	`ªad48
(dev, 
∑ge
, 
ªg
, 
vÆ
);

237 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

239  
ªt
;

240 
	}
}

242 
ölöe
 
	$b53_ªad64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

244 
ªt
;

246 
	`muãx_lock
(&
dev
->
ªg_muãx
);

247 
ªt
 = 
dev
->
›s
->
	`ªad64
(dev, 
∑ge
, 
ªg
, 
vÆ
);

248 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

250  
ªt
;

251 
	}
}

253 
ölöe
 
	$b53_wrôe8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 
vÆue
)

255 
ªt
;

257 
	`muãx_lock
(&
dev
->
ªg_muãx
);

258 
ªt
 = 
dev
->
›s
->
	`wrôe8
(dev, 
∑ge
, 
ªg
, 
vÆue
);

259 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

261  
ªt
;

262 
	}
}

264 
ölöe
 
	$b53_wrôe16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

265 
u16
 
vÆue
)

267 
ªt
;

269 
	`muãx_lock
(&
dev
->
ªg_muãx
);

270 
ªt
 = 
dev
->
›s
->
	`wrôe16
(dev, 
∑ge
, 
ªg
, 
vÆue
);

271 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

273  
ªt
;

274 
	}
}

276 
ölöe
 
	$b53_wrôe32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

277 
u32
 
vÆue
)

279 
ªt
;

281 
	`muãx_lock
(&
dev
->
ªg_muãx
);

282 
ªt
 = 
dev
->
›s
->
	`wrôe32
(dev, 
∑ge
, 
ªg
, 
vÆue
);

283 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

285  
ªt
;

286 
	}
}

288 
ölöe
 
	$b53_wrôe48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

289 
u64
 
vÆue
)

291 
ªt
;

293 
	`muãx_lock
(&
dev
->
ªg_muãx
);

294 
ªt
 = 
dev
->
›s
->
	`wrôe48
(dev, 
∑ge
, 
ªg
, 
vÆue
);

295 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

297  
ªt
;

298 
	}
}

300 
ölöe
 
	$b53_wrôe64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

301 
u64
 
vÆue
)

303 
ªt
;

305 
	`muãx_lock
(&
dev
->
ªg_muãx
);

306 
ªt
 = 
dev
->
›s
->
	`wrôe64
(dev, 
∑ge
, 
ªg
, 
vÆue
);

307 
	`muãx_u∆ock
(&
dev
->
ªg_muãx
);

309  
ªt
;

310 
	}
}

312 #ifde‡
CONFIG_BCM47XX


313 
	~<bcm47xx_bﬂrd.h
>

316 
	~<löux/vîsi⁄.h
>

317 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 1, 0))

318 
	~<löux/bcm47xx_nvøm.h
>

320 
ölöe
 
	$b53_swôch_gë_ª£t_gpio
(
b53_devi˚
 *
dev
)

322 #ifde‡
CONFIG_BCM47XX


323 
bcm47xx_bﬂrd
 
bﬂrd
 = 
	`bcm47xx_bﬂrd_gë
();

325 
bﬂrd
) {

326 
BCM47XX_BOARD_LINKSYS_WRT300NV11
:

327 
BCM47XX_BOARD_LINKSYS_WRT310NV1
:

334 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4, 1, 0))

335  
	`bcm47xx_nvøm_gpio_pö
("robo_reset");

337  -
ENOENT
;

339 
	}
}

	@linux/generic/files/drivers/net/phy/b53/b53_regs.h

20 #i‚de‡
__B53_REGS_H


21 
	#__B53_REGS_H


	)

24 
	#B53_CTRL_PAGE
 0x00

	)

25 
	#B53_STAT_PAGE
 0x01

	)

26 
	#B53_MGMT_PAGE
 0x02

	)

27 
	#B53_MIB_AC_PAGE
 0x03

	)

28 
	#B53_ARLCTRL_PAGE
 0x04

	)

29 
	#B53_ARLIO_PAGE
 0x05

	)

30 
	#B53_FRAMEBUF_PAGE
 0x06

	)

31 
	#B53_MEM_ACCESS_PAGE
 0x08

	)

34 
	#B53_PORT_MII_PAGE
(
i
Ë(0x10 + (i)Ë

	)

35 
	#B53_IM_PORT_PAGE
 0x18

	)

36 
	#B53_ALL_PORT_PAGE
 0x19

	)

39 
	#B53_MIB_PAGE
(
i
Ë(0x20 + (i))

	)

42 
	#B53_QOS_PAGE
 0x30

	)

45 
	#B53_PVLAN_PAGE
 0x31

	)

48 
	#B53_VLAN_PAGE
 0x34

	)

51 
	#B53_JUMBO_PAGE
 0x40

	)

54 
	#B53_CFP_PAGE
 0xa1

	)

61 
	#B53_PORT_CTRL
(
i
Ë(0x00 + (i))

	)

62 
	#PORT_CTRL_RX_DISABLE
 
	`BIT
(0)

	)

63 
	#PORT_CTRL_TX_DISABLE
 
	`BIT
(1)

	)

64 
	#PORT_CTRL_RX_BCST_EN
 
	`BIT
(2Ë

	)

65 
	#PORT_CTRL_RX_MCST_EN
 
	`BIT
(3Ë

	)

66 
	#PORT_CTRL_RX_UCST_EN
 
	`BIT
(4Ë

	)

67 
	#PORT_CTRL_STP_STATE_S
 5

	)

68 
	#PORT_CTRL_STP_STATE_MASK
 (0x7 << 
PORT_CTRL_STP_STATE_S
)

	)

71 
	#B53_SMP_CTRL
 0x0a

	)

74 
	#B53_SWITCH_MODE
 0x0b

	)

75 
	#SM_SW_FWD_MODE
 
	`BIT
(0Ë

	)

76 
	#SM_SW_FWD_EN
 
	`BIT
(1Ë

	)

79 
	#B53_PORT_OVERRIDE_CTRL
 0x0e

	)

80 
	#PORT_OVERRIDE_LINK
 
	`BIT
(0)

	)

81 
	#PORT_OVERRIDE_FULL_DUPLEX
 
	`BIT
(1Ë

	)

82 
	#PORT_OVERRIDE_SPEED_S
 2

	)

83 
	#PORT_OVERRIDE_SPEED_10M
 (0 << 
PORT_OVERRIDE_SPEED_S
)

	)

84 
	#PORT_OVERRIDE_SPEED_100M
 (1 << 
PORT_OVERRIDE_SPEED_S
)

	)

85 
	#PORT_OVERRIDE_SPEED_1000M
 (2 << 
PORT_OVERRIDE_SPEED_S
)

	)

86 
	#PORT_OVERRIDE_RV_MII_25
 
	`BIT
(4Ë

	)

87 
	#PORT_OVERRIDE_RX_FLOW
 
	`BIT
(4)

	)

88 
	#PORT_OVERRIDE_TX_FLOW
 
	`BIT
(5)

	)

89 
	#PORT_OVERRIDE_SPEED_2000M
 
	`BIT
(6Ë

	)

90 
	#PORT_OVERRIDE_EN
 
	`BIT
(7Ë

	)

93 
	#B53_PD_MODE_CTRL_25
 0x0f

	)

96 
	#B53_IP_MULTICAST_CTRL
 0x21

	)

97 
	#B53_IPMC_FWD_EN
 
	`BIT
(1)

	)

98 
	#B53_UC_FWD_EN
 
	`BIT
(6)

	)

99 
	#B53_MC_FWD_EN
 
	`BIT
(7)

	)

102 
	#B53_UC_FLOOD_MASK
 0x32

	)

103 
	#B53_MC_FLOOD_MASK
 0x34

	)

104 
	#B53_IPMC_FLOOD_MASK
 0x36

	)

113 
	#B53_GMII_PORT_OVERRIDE_CTRL
(
i
Ë(0x58 + (i))

	)

114 
	#GMII_PO_LINK
 
	`BIT
(0)

	)

115 
	#GMII_PO_FULL_DUPLEX
 
	`BIT
(1Ë

	)

116 
	#GMII_PO_SPEED_S
 2

	)

117 
	#GMII_PO_SPEED_10M
 (0 << 
GMII_PO_SPEED_S
)

	)

118 
	#GMII_PO_SPEED_100M
 (1 << 
GMII_PO_SPEED_S
)

	)

119 
	#GMII_PO_SPEED_1000M
 (2 << 
GMII_PO_SPEED_S
)

	)

120 
	#GMII_PO_RX_FLOW
 
	`BIT
(4)

	)

121 
	#GMII_PO_TX_FLOW
 
	`BIT
(5)

	)

122 
	#GMII_PO_EN
 
	`BIT
(6Ë

	)

123 
	#GMII_PO_SPEED_2000M
 
	`BIT
(7Ë

	)

126 
	#B53_SOFTRESET
 0x79

	)

129 
	#B53_FAST_AGE_CTRL
 0x88

	)

130 
	#FAST_AGE_STATIC
 
	`BIT
(0)

	)

131 
	#FAST_AGE_DYNAMIC
 
	`BIT
(1)

	)

132 
	#FAST_AGE_PORT
 
	`BIT
(2)

	)

133 
	#FAST_AGE_VLAN
 
	`BIT
(3)

	)

134 
	#FAST_AGE_STP
 
	`BIT
(4)

	)

135 
	#FAST_AGE_MC
 
	`BIT
(5)

	)

136 
	#FAST_AGE_DONE
 
	`BIT
(7)

	)

143 
	#B53_LINK_STAT
 0x00

	)

146 
	#B53_LINK_STAT_CHANGE
 0x02

	)

149 
	#B53_SPEED_STAT
 0x04

	)

150 
	#SPEED_PORT_FE
(
ªg
, 
p‹t
Ë((‘egË>> (p‹t)Ë& 1)

	)

151 
	#SPEED_PORT_GE
(
ªg
, 
p‹t
Ë((‘egË>> 2 * (p‹t)Ë& 3)

	)

152 
	#SPEED_STAT_10M
 0

	)

153 
	#SPEED_STAT_100M
 1

	)

154 
	#SPEED_STAT_1000M
 2

	)

157 
	#B53_DUPLEX_STAT_FE
 0x06

	)

158 
	#B53_DUPLEX_STAT_GE
 0x08

	)

159 
	#B53_DUPLEX_STAT_63XX
 0x0c

	)

162 
	#B53_REV_ID_25
 0x50

	)

165 
	#B53_STRAP_VALUE
 0x70

	)

166 
	#SV_GMII_CTRL_115
 
	`BIT
(27)

	)

173 
	#B53_GLOBAL_CONFIG
 0x00

	)

174 
	#GC_RESET_MIB
 0x01

	)

175 
	#GC_RX_BPDU_EN
 0x02

	)

176 
	#GC_MIB_AC_HDR_EN
 0x10

	)

177 
	#GC_MIB_AC_EN
 0x20

	)

178 
	#GC_FRM_MGMT_PORT_M
 0xC0

	)

179 
	#GC_FRM_MGMT_PORT_04
 0x00

	)

180 
	#GC_FRM_MGMT_PORT_MII
 0x80

	)

183 
	#B53_BRCM_HDR
 0x03

	)

184 
	#BRCM_HDR_P8_EN
 
	`BIT
(0Ë

	)

185 
	#BRCM_HDR_P5_EN
 
	`BIT
(1Ë

	)

188 
	#B53_DEVICE_ID
 0x30

	)

191 
	#B53_REV_ID
 0x40

	)

198 
	#B53_VT_ACCESS
 0x80

	)

199 
	#B53_VT_ACCESS_9798
 0x60

	)

200 
	#B53_VT_ACCESS_63XX
 0x60

	)

201 
	#VTA_CMD_WRITE
 0

	)

202 
	#VTA_CMD_READ
 1

	)

203 
	#VTA_CMD_CLEAR
 2

	)

204 
	#VTA_START_CMD
 
	`BIT
(7)

	)

207 
	#B53_VT_INDEX
 0x81

	)

208 
	#B53_VT_INDEX_9798
 0x61

	)

209 
	#B53_VT_INDEX_63XX
 0x62

	)

212 
	#B53_VT_ENTRY
 0x83

	)

213 
	#B53_VT_ENTRY_9798
 0x63

	)

214 
	#B53_VT_ENTRY_63XX
 0x64

	)

215 
	#VTE_MEMBERS
 0x1ff

	)

216 
	#VTE_UNTAG_S
 9

	)

217 
	#VTE_UNTAG
 (0x1f‡<< 9)

	)

224 
	#B53_PVLAN_PORT_MASK
(
i
Ë((iË* 2)

	)

231 
	#B53_QOS_GLOBAL_CTL
 0x00

	)

234 
	#B53_802_1P_EN
 0x04

	)

241 
	#B53_VLAN_CTRL0
 0x00

	)

242 
	#VC0_8021PF_CTRL_MASK
 0x3

	)

243 
	#VC0_8021PF_CTRL_NONE
 0x0

	)

244 
	#VC0_8021PF_CTRL_CHANGE_PRI
 0x1

	)

245 
	#VC0_8021PF_CTRL_CHANGE_VID
 0x2

	)

246 
	#VC0_8021PF_CTRL_CHANGE_BOTH
 0x3

	)

247 
	#VC0_8021QF_CTRL_MASK
 0xc

	)

248 
	#VC0_8021QF_CTRL_CHANGE_PRI
 0x1

	)

249 
	#VC0_8021QF_CTRL_CHANGE_VID
 0x2

	)

250 
	#VC0_8021QF_CTRL_CHANGE_BOTH
 0x3

	)

251 
	#VC0_RESERVED_1
 
	`BIT
(1)

	)

252 
	#VC0_DROP_VID_MISS
 
	`BIT
(4)

	)

253 
	#VC0_VID_HASH_VID
 
	`BIT
(5)

	)

254 
	#VC0_VID_CHK_EN
 
	`BIT
(6Ë

	)

255 
	#VC0_VLAN_EN
 
	`BIT
(7Ë

	)

258 
	#B53_VLAN_CTRL1
 0x01

	)

259 
	#VC1_RX_MCST_TAG_EN
 
	`BIT
(1)

	)

260 
	#VC1_RX_MCST_FWD_EN
 
	`BIT
(2)

	)

261 
	#VC1_RX_MCST_UNTAG_EN
 
	`BIT
(3)

	)

264 
	#B53_VLAN_CTRL2
 0x02

	)

267 
	#B53_VLAN_CTRL3
 0x03

	)

268 
	#B53_VLAN_CTRL3_63XX
 0x04

	)

269 
	#VC3_MAXSIZE_1532
 
	`BIT
(6Ë

	)

270 
	#VC3_HIGH_8BIT_EN
 
	`BIT
(7Ë

	)

273 
	#B53_VLAN_CTRL4
 0x05

	)

274 
	#B53_VLAN_CTRL4_25
 0x04

	)

275 
	#B53_VLAN_CTRL4_63XX
 0x06

	)

276 
	#VC4_ING_VID_CHECK_S
 6

	)

277 
	#VC4_ING_VID_CHECK_MASK
 (0x3 << 
VC4_ING_VID_CHECK_S
)

	)

278 
	#VC4_ING_VID_VIO_FWD
 0

	)

279 
	#VC4_ING_VID_VIO_DROP
 1

	)

280 
	#VC4_NO_ING_VID_CHK
 2

	)

281 
	#VC4_ING_VID_VIO_TO_IMP
 3

	)

284 
	#B53_VLAN_CTRL5
 0x06

	)

285 
	#B53_VLAN_CTRL5_25
 0x05

	)

286 
	#B53_VLAN_CTRL5_63XX
 0x07

	)

287 
	#VC5_VID_FFF_EN
 
	`BIT
(2)

	)

288 
	#VC5_DROP_VTABLE_MISS
 
	`BIT
(3)

	)

291 
	#B53_VLAN_CTRL6
 0x07

	)

292 
	#B53_VLAN_CTRL6_63XX
 0x08

	)

295 
	#B53_VLAN_TABLE_ACCESS_25
 0x06

	)

296 
	#B53_VLAN_TABLE_ACCESS_65
 0x08

	)

297 
	#VTA_VID_LOW_MASK_25
 0xf

	)

298 
	#VTA_VID_LOW_MASK_65
 0xff

	)

299 
	#VTA_VID_HIGH_S_25
 4

	)

300 
	#VTA_VID_HIGH_S_65
 8

	)

301 
	#VTA_VID_HIGH_MASK_25
 (0xf‡<< 
VTA_VID_HIGH_S_25E
)

	)

302 
	#VTA_VID_HIGH_MASK_65
 (0x‡<< 
VTA_VID_HIGH_S_65
)

	)

303 
	#VTA_RW_STATE
 
	`BIT
(12)

	)

304 
	#VTA_RW_STATE_RD
 0

	)

305 
	#VTA_RW_STATE_WR
 
	`BIT
(12)

	)

306 
	#VTA_RW_OP_EN
 
	`BIT
(13)

	)

309 
	#B53_VLAN_WRITE_25
 0x08

	)

310 
	#B53_VLAN_WRITE_65
 0x0a

	)

311 
	#B53_VLAN_READ
 0x0c

	)

312 
	#VA_MEMBER_MASK
 0x3f

	)

313 
	#VA_UNTAG_S_25
 6

	)

314 
	#VA_UNTAG_MASK_25
 0x3f

	)

315 
	#VA_UNTAG_S_65
 7

	)

316 
	#VA_UNTAG_MASK_65
 0x1f

	)

317 
	#VA_VID_HIGH_S
 12

	)

318 
	#VA_VID_HIGH_MASK
 (0xfff‡<< 
VA_VID_HIGH_S
)

	)

319 
	#VA_VALID_25
 
	`BIT
(20)

	)

320 
	#VA_VALID_25_R4
 
	`BIT
(24)

	)

321 
	#VA_VALID_65
 
	`BIT
(14)

	)

324 
	#B53_VLAN_PORT_DEF_TAG
(
i
Ë(0x10 + 2 * (i))

	)

331 
	#B53_JUMBO_PORT_MASK
 0x01

	)

332 
	#B53_JUMBO_PORT_MASK_63XX
 0x04

	)

333 
	#JPM_10_100_JUMBO_EN
 
	`BIT
(24Ë

	)

336 
	#B53_JUMBO_MAX_SIZE
 0x05

	)

337 
	#B53_JUMBO_MAX_SIZE_63XX
 0x08

	)

338 
	#JMS_MIN_SIZE
 1518

	)

339 
	#JMS_MAX_SIZE
 9724

	)

346 
	#B53_CFP_CTRL
 0x00

	)

	@linux/generic/files/drivers/net/phy/b53/b53_spi.c

19 
	~<asm/u«lig√d.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/•i/•i.h
>

24 
	~<löux/of.h
>

25 
	~<löux/∂©f‹m_d©a/b53.h
>

27 
	~"b53_¥iv.h
"

29 
	#B53_SPI_DATA
 0xf0

	)

31 
	#B53_SPI_STATUS
 0x„

	)

32 
	#B53_SPI_CMD_SPIF
 
	`BIT
(7)

	)

33 
	#B53_SPI_CMD_RACK
 
	`BIT
(5)

	)

35 
	#B53_SPI_CMD_READ
 0x00

	)

36 
	#B53_SPI_CMD_WRITE
 0x01

	)

37 
	#B53_SPI_CMD_NORMAL
 0x60

	)

38 
	#B53_SPI_CMD_FAST
 0x10

	)

40 
	#B53_SPI_PAGE_SELECT
 0xff

	)

42 
ölöe
 
	$b53_•i_ªad_ªg
(
•i_devi˚
 *
•i
, 
u8
 
ªg
, u8 *
vÆ
,

43 
Àn
)

45 
u8
 
txbuf
[2];

47 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_READ
;

48 
txbuf
[1] = 
ªg
;

50  
	`•i_wrôe_thí_ªad
(
•i
, 
txbuf
, 2, 
vÆ
, 
Àn
);

51 
	}
}

53 
ölöe
 
	$b53_•i_˛ór_°©us
(
•i_devi˚
 *
•i
)

55 
i
;

56 
u8
 
rxbuf
;

57 
ªt
;

59 
i
 = 0; i < 10; i++) {

60 
ªt
 = 
	`b53_•i_ªad_ªg
(
•i
, 
B53_SPI_STATUS
, &
rxbuf
, 1);

61 i‡(
ªt
)

62  
ªt
;

64 i‡(!(
rxbuf
 & 
B53_SPI_CMD_SPIF
))

67 
	`mdñay
(1);

70 i‡(
i
 == 10)

71  -
EIO
;

74 
	}
}

76 
ölöe
 
	$b53_•i_£t_∑ge
(
•i_devi˚
 *
•i
, 
u8
 
∑ge
)

78 
u8
 
txbuf
[3];

80 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

81 
txbuf
[1] = 
B53_SPI_PAGE_SELECT
;

82 
txbuf
[2] = 
∑ge
;

84  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf));

85 
	}
}

87 
ölöe
 
	$b53_¥ï¨e_ªg_ac˚ss
(
•i_devi˚
 *
•i
, 
u8
 
∑ge
)

89 
ªt
 = 
	`b53_•i_˛ór_°©us
(
•i
);

91 i‡(
ªt
)

92  
ªt
;

94  
	`b53_•i_£t_∑ge
(
•i
, 
∑ge
);

95 
	}
}

97 
	$b53_•i_¥ï¨e_ªg_ªad
(
•i_devi˚
 *
•i
, 
u8
 
ªg
)

99 
u8
 
rxbuf
;

100 
ªåy_cou¡
;

101 
ªt
;

103 
ªt
 = 
	`b53_•i_ªad_ªg
(
•i
, 
ªg
, &
rxbuf
, 1);

104 i‡(
ªt
)

105  
ªt
;

107 
ªåy_cou¡
 = 0;Ñetry_count < 10;Ñetry_count++) {

108 
ªt
 = 
	`b53_•i_ªad_ªg
(
•i
, 
B53_SPI_STATUS
, &
rxbuf
, 1);

109 i‡(
ªt
)

110  
ªt
;

112 i‡(
rxbuf
 & 
B53_SPI_CMD_RACK
)

115 
	`mdñay
(1);

118 i‡(
ªåy_cou¡
 == 10)

119  -
EIO
;

122 
	}
}

124 
	$b53_•i_ªad
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
d©a
,

125 
Àn
)

127 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

128 
ªt
;

130 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

131 i‡(
ªt
)

132  
ªt
;

134 
ªt
 = 
	`b53_•i_¥ï¨e_ªg_ªad
(
•i
, 
ªg
);

135 i‡(
ªt
)

136  
ªt
;

138  
	`b53_•i_ªad_ªg
(
•i
, 
B53_SPI_DATA
, 
d©a
, 
Àn
);

139 
	}
}

141 
	$b53_•i_ªad8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
vÆ
)

143  
	`b53_•i_ªad
(
dev
, 
∑ge
, 
ªg
, 
vÆ
, 1);

144 
	}
}

146 
	$b53_•i_ªad16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 *
vÆ
)

148 
ªt
 = 
	`b53_•i_ªad
(
dev
, 
∑ge
, 
ªg
, (
u8
 *)
vÆ
, 2);

150 i‡(!
ªt
)

151 *
vÆ
 = 
	`À16_to_˝u
(*val);

153  
ªt
;

154 
	}
}

156 
	$b53_•i_ªad32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 *
vÆ
)

158 
ªt
 = 
	`b53_•i_ªad
(
dev
, 
∑ge
, 
ªg
, (
u8
 *)
vÆ
, 4);

160 i‡(!
ªt
)

161 *
vÆ
 = 
	`À32_to_˝u
(*val);

163  
ªt
;

164 
	}
}

166 
	$b53_•i_ªad48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

168 
ªt
;

170 *
vÆ
 = 0;

171 
ªt
 = 
	`b53_•i_ªad
(
dev
, 
∑ge
, 
ªg
, (
u8
 *)
vÆ
, 6);

172 i‡(!
ªt
)

173 *
vÆ
 = 
	`À64_to_˝u
(*val);

175  
ªt
;

176 
	}
}

178 
	$b53_•i_ªad64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

180 
ªt
 = 
	`b53_•i_ªad
(
dev
, 
∑ge
, 
ªg
, (
u8
 *)
vÆ
, 8);

182 i‡(!
ªt
)

183 *
vÆ
 = 
	`À64_to_˝u
(*val);

185  
ªt
;

186 
	}
}

188 
	$b53_•i_wrôe8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 
vÆue
)

190 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

191 
ªt
;

192 
u8
 
txbuf
[3];

194 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

195 i‡(
ªt
)

196  
ªt
;

198 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

199 
txbuf
[1] = 
ªg
;

200 
txbuf
[2] = 
vÆue
;

202  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf));

203 
	}
}

205 
	$b53_•i_wrôe16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 
vÆue
)

207 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

208 
ªt
;

209 
u8
 
txbuf
[4];

211 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

212 i‡(
ªt
)

213  
ªt
;

215 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

216 
txbuf
[1] = 
ªg
;

217 
	`put_u«lig√d_À16
(
vÆue
, &
txbuf
[2]);

219  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf));

220 
	}
}

222 
	$b53_•i_wrôe32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 
vÆue
)

224 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

225 
ªt
;

226 
u8
 
txbuf
[6];

228 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

229 i‡(
ªt
)

230  
ªt
;

232 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

233 
txbuf
[1] = 
ªg
;

234 
	`put_u«lig√d_À32
(
vÆue
, &
txbuf
[2]);

236  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf));

237 
	}
}

239 
	$b53_•i_wrôe48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 
vÆue
)

241 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

242 
ªt
;

243 
u8
 
txbuf
[10];

245 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

246 i‡(
ªt
)

247  
ªt
;

249 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

250 
txbuf
[1] = 
ªg
;

251 
	`put_u«lig√d_À64
(
vÆue
, &
txbuf
[2]);

253  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf) - 2);

254 
	}
}

256 
	$b53_•i_wrôe64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 
vÆue
)

258 
•i_devi˚
 *
•i
 = 
dev
->
¥iv
;

259 
ªt
;

260 
u8
 
txbuf
[10];

262 
ªt
 = 
	`b53_¥ï¨e_ªg_ac˚ss
(
•i
, 
∑ge
);

263 i‡(
ªt
)

264  
ªt
;

266 
txbuf
[0] = 
B53_SPI_CMD_NORMAL
 | 
B53_SPI_CMD_WRITE
;

267 
txbuf
[1] = 
ªg
;

268 
	`put_u«lig√d_À64
(
vÆue
, &
txbuf
[2]);

270  
	`•i_wrôe
(
•i
, 
txbuf
, (txbuf));

271 
	}
}

273 
b53_io_›s
 
	gb53_•i_›s
 = {

274 .
ªad8
 = 
b53_•i_ªad8
,

275 .
	gªad16
 = 
b53_•i_ªad16
,

276 .
	gªad32
 = 
b53_•i_ªad32
,

277 .
	gªad48
 = 
b53_•i_ªad48
,

278 .
	gªad64
 = 
b53_•i_ªad64
,

279 .
	gwrôe8
 = 
b53_•i_wrôe8
,

280 .
	gwrôe16
 = 
b53_•i_wrôe16
,

281 .
	gwrôe32
 = 
b53_•i_wrôe32
,

282 .
	gwrôe48
 = 
b53_•i_wrôe48
,

283 .
	gwrôe64
 = 
b53_•i_wrôe64
,

286 
	$b53_•i_¥obe
(
•i_devi˚
 *
•i
)

288 
b53_devi˚
 *
dev
;

289 
ªt
;

291 
dev
 = 
	`b53_swôch_Æloc
(&
•i
->dev, &
b53_•i_›s
, spi);

292 i‡(!
dev
)

293  -
ENOMEM
;

295 i‡(
•i
->
dev
.
∂©f‹m_d©a
)

296 
dev
->
pd©a
 = 
•i
->dev.
∂©f‹m_d©a
;

298 
ªt
 = 
	`b53_swôch_ªgi°î
(
dev
);

299 i‡(
ªt
)

300  
ªt
;

302 
	`•i_£t_drvd©a
(
•i
, 
dev
);

305 
	}
}

307 
	$b53_•i_ªmove
(
•i_devi˚
 *
•i
)

309 
b53_devi˚
 *
dev
 = 
	`•i_gë_drvd©a
(
•i
);

311 i‡(
dev
)

312 
	`b53_swôch_ªmove
(
dev
);

315 
	}
}

317 c⁄° 
of_devi˚_id
 
	gb53_of_m©ch
[] = {

318 { .
com∑tibÀ
 = "brcm,bcm5325" },

319 { .
	gcom∑tibÀ
 = "brcm,bcm53115" },

320 { .
	gcom∑tibÀ
 = "brcm,bcm53125" },

321 { .
	gcom∑tibÀ
 = "brcm,bcm53128" },

322 { .
	gcom∑tibÀ
 = "brcm,bcm5365" },

323 { .
	gcom∑tibÀ
 = "brcm,bcm5395" },

324 { .
	gcom∑tibÀ
 = "brcm,bcm5397" },

325 { .
	gcom∑tibÀ
 = "brcm,bcm5398" },

329 
•i_drivî
 
	gb53_•i_drivî
 = {

330 .
drivî
 = {

331 .
«me
 = "b53-switch",

332 .
	gbus
 = &
•i_bus_ty≥
,

333 .
	gow√r
 = 
THIS_MODULE
,

334 .
	gof_m©ch_èbÀ
 = 
b53_of_m©ch
,

336 .
	g¥obe
 = 
b53_•i_¥obe
,

337 .
	gªmove
 = 
b53_•i_ªmove
,

340 
moduÀ_•i_drivî
(
b53_•i_drivî
);

342 
MODULE_AUTHOR
("Jonas Gorski <jogo@openwrt.org>");

343 
MODULE_DESCRIPTION
("B53 SPIáccess driver");

344 
MODULE_LICENSE
("Dual BSD/GPL");

	@linux/generic/files/drivers/net/phy/b53/b53_srab.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/∂©f‹m_d©a/b53.h
>

24 
	~"b53_¥iv.h
"

27 
	#B53_SRAB_CMDSTAT
 0x2c

	)

28 
	#B53_SRAB_CMDSTAT_RST
 
	`BIT
(2)

	)

29 
	#B53_SRAB_CMDSTAT_WRITE
 
	`BIT
(1)

	)

30 
	#B53_SRAB_CMDSTAT_GORDYN
 
	`BIT
(0)

	)

31 
	#B53_SRAB_CMDSTAT_PAGE
 24

	)

32 
	#B53_SRAB_CMDSTAT_REG
 16

	)

35 
	#B53_SRAB_WD_H
 0x30

	)

38 
	#B53_SRAB_WD_L
 0x34

	)

41 
	#B53_SRAB_RD_H
 0x38

	)

44 
	#B53_SRAB_RD_L
 0x3c

	)

47 
	#B53_SRAB_CTRLS
 0x40

	)

48 
	#B53_SRAB_CTRLS_RCAREQ
 
	`BIT
(3)

	)

49 
	#B53_SRAB_CTRLS_RCAGNT
 
	`BIT
(4)

	)

50 
	#B53_SRAB_CTRLS_SW_INIT_DONE
 
	`BIT
(6)

	)

53 
	#B53_SRAB_INTR
 0x44

	)

55 
	$b53_§ab_ªque°_gø¡
(
b53_devi˚
 *
dev
)

57 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

58 
u32
 
˘æs
;

59 
i
;

61 
˘æs
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_CTRLS
);

62 
˘æs
 |
B53_SRAB_CTRLS_RCAREQ
;

63 
	`wrôñ
(
˘æs
, 
ªgs
 + 
B53_SRAB_CTRLS
);

65 
i
 = 0; i < 20; i++) {

66 
˘æs
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_CTRLS
);

67 i‡(
˘æs
 & 
B53_SRAB_CTRLS_RCAGNT
)

69 
	`u¶ìp_ønge
(10, 100);

71 i‡(
	`WARN_ON
(
i
 == 5))

72  -
EIO
;

75 
	}
}

77 
	$b53_§ab_ªÀa£_gø¡
(
b53_devi˚
 *
dev
)

79 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

80 
u32
 
˘æs
;

82 
˘æs
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_CTRLS
);

83 
˘æs
 &~
B53_SRAB_CTRLS_RCAREQ
;

84 
	`wrôñ
(
˘æs
, 
ªgs
 + 
B53_SRAB_CTRLS
);

85 
	}
}

87 
	$b53_§ab_›
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 
›
)

89 
i
;

90 
u32
 
cmd°©
;

91 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

94 
cmd°©
 = (
∑ge
 << 
B53_SRAB_CMDSTAT_PAGE
) |

95 (
ªg
 << 
B53_SRAB_CMDSTAT_REG
) |

96 
B53_SRAB_CMDSTAT_GORDYN
 |

97 
›
;

98 
	`wrôñ
(
cmd°©
, 
ªgs
 + 
B53_SRAB_CMDSTAT
);

101 
i
 = 0; i < 5; ++i) {

102 
cmd°©
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_CMDSTAT
);

103 i‡(!(
cmd°©
 & 
B53_SRAB_CMDSTAT_GORDYN
))

105 
	`u¶ìp_ønge
(10, 100);

108 i‡(
	`WARN_ON
(
i
 == 5))

109  -
EIO
;

112 
	}
}

114 
	$b53_§ab_ªad8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 *
vÆ
)

116 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

117 
ªt
 = 0;

119 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

120 i‡(
ªt
)

121 
îr
;

123 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 0);

124 i‡(
ªt
)

125 
îr
;

127 *
vÆ
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_L
) & 0xff;

129 
îr
:

130 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

132  
ªt
;

133 
	}
}

135 
	$b53_§ab_ªad16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u16
 *
vÆ
)

137 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

138 
ªt
 = 0;

140 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

141 i‡(
ªt
)

142 
îr
;

144 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 0);

145 i‡(
ªt
)

146 
îr
;

148 *
vÆ
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_L
) & 0xffff;

150 
îr
:

151 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

153  
ªt
;

154 
	}
}

156 
	$b53_§ab_ªad32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u32
 *
vÆ
)

158 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

159 
ªt
 = 0;

161 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

162 i‡(
ªt
)

163 
îr
;

165 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 0);

166 i‡(
ªt
)

167 
îr
;

169 *
vÆ
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_L
);

171 
îr
:

172 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

174  
ªt
;

175 
	}
}

177 
	$b53_§ab_ªad48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

179 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

180 
ªt
 = 0;

182 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

183 i‡(
ªt
)

184 
îr
;

186 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 0);

187 i‡(
ªt
)

188 
îr
;

190 *
vÆ
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_L
);

191 *
vÆ
 +((
u64
)
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_H
) & 0xffff) << 32;

193 
îr
:

194 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

196  
ªt
;

197 
	}
}

199 
	$b53_§ab_ªad64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, 
u64
 *
vÆ
)

201 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

202 
ªt
 = 0;

204 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

205 i‡(
ªt
)

206 
îr
;

208 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 0);

209 i‡(
ªt
)

210 
îr
;

212 *
vÆ
 = 
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_L
);

213 *
vÆ
 +(
u64
)
	`ªadl
(
ªgs
 + 
B53_SRAB_RD_H
) << 32;

215 
îr
:

216 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

218  
ªt
;

219 
	}
}

221 
	$b53_§ab_wrôe8
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
, u8 
vÆue
)

223 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

224 
ªt
 = 0;

226 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

227 i‡(
ªt
)

228 
îr
;

230 
	`wrôñ
(
vÆue
, 
ªgs
 + 
B53_SRAB_WD_L
);

232 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 
B53_SRAB_CMDSTAT_WRITE
);

234 
îr
:

235 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

237  
ªt
;

238 
	}
}

240 
	$b53_§ab_wrôe16
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

241 
u16
 
vÆue
)

243 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

244 
ªt
 = 0;

246 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

247 i‡(
ªt
)

248 
îr
;

250 
	`wrôñ
(
vÆue
, 
ªgs
 + 
B53_SRAB_WD_L
);

252 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 
B53_SRAB_CMDSTAT_WRITE
);

254 
îr
:

255 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

257  
ªt
;

258 
	}
}

260 
	$b53_§ab_wrôe32
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

261 
u32
 
vÆue
)

263 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

264 
ªt
 = 0;

266 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

267 i‡(
ªt
)

268 
îr
;

270 
	`wrôñ
(
vÆue
, 
ªgs
 + 
B53_SRAB_WD_L
);

272 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 
B53_SRAB_CMDSTAT_WRITE
);

274 
îr
:

275 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

277  
ªt
;

279 
	}
}

281 
	$b53_§ab_wrôe48
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

282 
u64
 
vÆue
)

284 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

285 
ªt
 = 0;

287 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

288 i‡(
ªt
)

289 
îr
;

291 
	`wrôñ
((
u32
)
vÆue
, 
ªgs
 + 
B53_SRAB_WD_L
);

292 
	`wrôñ
((
u16
)(
vÆue
 >> 32), 
ªgs
 + 
B53_SRAB_WD_H
);

294 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 
B53_SRAB_CMDSTAT_WRITE
);

296 
îr
:

297 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

299  
ªt
;

301 
	}
}

303 
	$b53_§ab_wrôe64
(
b53_devi˚
 *
dev
, 
u8
 
∑ge
, u8 
ªg
,

304 
u64
 
vÆue
)

306 
u8
 
__iomem
 *
ªgs
 = 
dev
->
¥iv
;

307 
ªt
 = 0;

309 
ªt
 = 
	`b53_§ab_ªque°_gø¡
(
dev
);

310 i‡(
ªt
)

311 
îr
;

313 
	`wrôñ
((
u32
)
vÆue
, 
ªgs
 + 
B53_SRAB_WD_L
);

314 
	`wrôñ
((
u32
)(
vÆue
 >> 32), 
ªgs
 + 
B53_SRAB_WD_H
);

316 
ªt
 = 
	`b53_§ab_›
(
dev
, 
∑ge
, 
ªg
, 
B53_SRAB_CMDSTAT_WRITE
);

318 
îr
:

319 
	`b53_§ab_ªÀa£_gø¡
(
dev
);

321  
ªt
;

322 
	}
}

324 
b53_io_›s
 
	gb53_§ab_›s
 = {

325 .
ªad8
 = 
b53_§ab_ªad8
,

326 .
	gªad16
 = 
b53_§ab_ªad16
,

327 .
	gªad32
 = 
b53_§ab_ªad32
,

328 .
	gªad48
 = 
b53_§ab_ªad48
,

329 .
	gªad64
 = 
b53_§ab_ªad64
,

330 .
	gwrôe8
 = 
b53_§ab_wrôe8
,

331 .
	gwrôe16
 = 
b53_§ab_wrôe16
,

332 .
	gwrôe32
 = 
b53_§ab_wrôe32
,

333 .
	gwrôe48
 = 
b53_§ab_wrôe48
,

334 .
	gwrôe64
 = 
b53_§ab_wrôe64
,

337 
	$b53_§ab_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

339 
b53_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

340 
b53_devi˚
 *
dev
;

342 i‡(!
pd©a
)

343  -
EINVAL
;

345 
dev
 = 
	`b53_swôch_Æloc
(&
pdev
->dev, &
b53_§ab_›s
, 
pd©a
->
ªgs
);

346 i‡(!
dev
)

347  -
ENOMEM
;

349 i‡(
pd©a
)

350 
dev
->
pd©a
 =Ödata;

352 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

354  
	`b53_swôch_ªgi°î
(
dev
);

355 
	}
}

357 
	$b53_§ab_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

359 
b53_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

361 i‡(
dev
)

362 
	`b53_swôch_ªmove
(
dev
);

365 
	}
}

367 
∂©f‹m_drivî
 
	gb53_§ab_drivî
 = {

368 .
¥obe
 = 
b53_§ab_¥obe
,

369 .
	gªmove
 = 
b53_§ab_ªmove
,

370 .
	gdrivî
 = {

371 .
«me
 = "b53-srab-switch",

375 
moduÀ_∂©f‹m_drivî
(
b53_§ab_drivî
);

376 
MODULE_AUTHOR
("Hauke Mehrtens <hauke@hauke-m.de>");

377 
MODULE_DESCRIPTION
("B53 Switch Register Access Bridge Registers (SRAB)áccess driver");

378 
MODULE_LICENSE
("Dual BSD/GPL");

	@linux/generic/files/drivers/net/phy/ip17xx.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/li°.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/mii.h
>

25 
	~<löux/phy.h
>

26 
	~<löux/dñay.h
>

27 
	~<löux/swôch.h
>

28 
	~<löux/devi˚.h
>

30 
	#MAX_VLANS
 16

	)

31 
	#MAX_PORTS
 9

	)

32 #unde‡
DUMP_MII_IO


34 
	sù17xx_ªg
 {

35 
u16
 
	mp
;

36 
u16
 
	mm
;

37 } 
	tªg
;

38 
	tbônum
;

40 
	#NOTSUPPORTED
 {-1,-1}

	)

42 
	#REG_SUPP
(
x
Ë(((x).
m
 !((
u16
)-1)Ë&& ((x).
p
 !(u16)-1))

	)

44 
	gù17xx_°©e
;

47 
	sªgi°î_m≠pögs
 {

48 *
	mNAME
;

49 
u16
 
	mMODEL_NO
;

50 
bônum
 
	mNUM_PORTS
;

51 
bônum
 
	mCPU_PORT
;

56 
ªg
 
	mVLAN_DEFAULT_TAG_REG
[
MAX_PORTS
];

60 
ªg
 
	mADD_TAG_REG
;

61 
ªg
 
	mREMOVE_TAG_REG
;

62 
bônum
 
	mADD_TAG_BIT
[
MAX_PORTS
];

66 
bônum
 
	mREMOVE_TAG_BIT
[
MAX_PORTS
];

71 
ªg
 
	mVLAN_LOOKUP_REG
;

73 
ªg
 
	mVLAN_LOOKUP_REG_5
;

74 
bônum
 
	mVLAN_LOOKUP_EVEN_BIT
[
MAX_PORTS
];

75 
bônum
 
	mVLAN_LOOKUP_ODD_BIT
[
MAX_PORTS
];

79 
ªg
 
	mTAG_VLAN_MASK_REG
;

80 
bônum
 
	mTAG_VLAN_MASK_EVEN_BIT
[
MAX_PORTS
];

81 
bônum
 
	mTAG_VLAN_MASK_ODD_BIT
[
MAX_PORTS
];

83 
	mRESET_VAL
;

84 
ªg
 
	mRESET_REG
;

86 
ªg
 
	mMODE_REG
;

87 
	mMODE_VAL
;

90 
ªg
 
	mROUTER_CONTROL_REG
;

91 
ªg
 
	mVLAN_CONTROL_REG
;

92 
bônum
 
	mTAG_VLAN_BIT
;

93 
bônum
 
	mROUTER_EN_BIT
;

94 
bônum
 
	mNUMLAN_GROUPS_MAX
;

95 
bônum
 
	mNUMLAN_GROUPS_BIT
;

97 
ªg
 
	mMII_REGISTER_EN
;

98 
bônum
 
	mMII_REGISTER_EN_BIT
;

101 
bônum
 
	mSIMPLE_VLAN_REGISTERS
;

104 (*
	mupd©e_°©e
)(
ù17xx_°©e
 *
	m°©e
);

105 (*
	m£t_vœn_mode
)(
ù17xx_°©e
 *
	m°©e
);

106 (*
	mª£t
)(
ù17xx_°©e
 *
	m°©e
);

109 
ù175c_upd©e_°©e
(
ù17xx_°©e
 *
°©e
);

110 
ù175c_£t_vœn_mode
(
ù17xx_°©e
 *
°©e
);

111 
ù175c_ª£t
(
ù17xx_°©e
 *
°©e
);

113 c⁄° 
ªgi°î_m≠pögs
 
	gIP178C
 = {

114 .
NAME
 = "IP178C",

115 .
	gMODEL_NO
 = 0x18,

116 .
	gVLAN_DEFAULT_TAG_REG
 = {

121 .
	gADD_TAG_REG
 = {30,12},

122 .
	gADD_TAG_BIT
 = {0,1,2,3,4,5,6,7,8},

123 .
	gREMOVE_TAG_REG
 = {30,13},

124 .
	gREMOVE_TAG_BIT
 = {4,5,6,7,8,9,10,11,12},

126 .
	gSIMPLE_VLAN_REGISTERS
 = 1,

128 .
	gVLAN_LOOKUP_REG
 = {31,0},

129 .
	gVLAN_LOOKUP_REG_5
 = 
NOTSUPPORTED
,

130 .
	gVLAN_LOOKUP_EVEN_BIT
 = {0,1,2,3,4,5,6,7,8},

131 .
	gVLAN_LOOKUP_ODD_BIT
 = {0,1,2,3,4,5,6,7,8},

133 .
	gTAG_VLAN_MASK_REG
 = {30,14},

134 .
	gTAG_VLAN_MASK_EVEN_BIT
 = {0,1,2,3,4,5,6,7,8},

135 .
	gTAG_VLAN_MASK_ODD_BIT
 = {0,1,2,3,4,5,6,7,8},

137 .
	gRESET_VAL
 = 0x55AA,

138 .
	gRESET_REG
 = {30,0},

139 .
	gMODE_VAL
 = 0,

140 .
	gMODE_REG
 = 
NOTSUPPORTED
,

142 .
	gROUTER_CONTROL_REG
 = {30,30},

143 .
	gROUTER_EN_BIT
 = 11,

144 .
	gNUMLAN_GROUPS_MAX
 = 8,

145 .
	gNUMLAN_GROUPS_BIT
 = 8,

147 .
	gVLAN_CONTROL_REG
 = {30,13},

148 .
	gTAG_VLAN_BIT
 = 3,

150 .
	gCPU_PORT
 = 8,

151 .
	gNUM_PORTS
 = 9,

153 .
	gMII_REGISTER_EN
 = 
NOTSUPPORTED
,

155 .
	gupd©e_°©e
 = 
ù175c_upd©e_°©e
,

156 .
	g£t_vœn_mode
 = 
ù175c_£t_vœn_mode
,

157 .
	gª£t
 = 
ù175c_ª£t
,

160 c⁄° 
ªgi°î_m≠pögs
 
	gIP175C
 = {

161 .
NAME
 = "IP175C",

162 .
	gMODEL_NO
 = 0x18,

163 .
	gVLAN_DEFAULT_TAG_REG
 = {

165 
NOTSUPPORTED
,NOTSUPPORTED,NOTSUPPORTED

168 .
	gADD_TAG_REG
 = {29,23},

169 .
	gREMOVE_TAG_REG
 = {29,23},

170 .
	gADD_TAG_BIT
 = {11,12,13,14,15,1,-1,-1,-1},

171 .
	gREMOVE_TAG_BIT
 = {6,7,8,9,10,0,-1,-1,-1},

173 .
	gSIMPLE_VLAN_REGISTERS
 = 0,

175 .
	gVLAN_LOOKUP_REG
 = {29,19},

176 .
	gVLAN_LOOKUP_REG_5
 = {30,18},

177 .
	gVLAN_LOOKUP_EVEN_BIT
 = {8,9,10,11,12,15,-1,-1,-1},

178 .
	gVLAN_LOOKUP_ODD_BIT
 = {0,1,2,3,4,7,-1,-1,-1},

180 .
	gTAG_VLAN_MASK_REG
 = {30,1},

181 .
	gTAG_VLAN_MASK_EVEN_BIT
 = {0,1,2,3,4,5,-1,-1,-1},

182 .
	gTAG_VLAN_MASK_ODD_BIT
 = {8,9,10,11,12,13,-1,-1,-1},

184 .
	gRESET_VAL
 = 0x175C,

185 .
	gRESET_REG
 = {30,0},

186 .
	gMODE_VAL
 = 0x175C,

187 .
	gMODE_REG
 = {29,31},

189 .
	gROUTER_CONTROL_REG
 = {30,9},

190 .
	gROUTER_EN_BIT
 = 3,

191 .
	gNUMLAN_GROUPS_MAX
 = 8,

192 .
	gNUMLAN_GROUPS_BIT
 = 0,

194 .
	gVLAN_CONTROL_REG
 = {30,9},

195 .
	gTAG_VLAN_BIT
 = 7,

197 .
	gNUM_PORTS
 = 6,

198 .
	gCPU_PORT
 = 5,

200 .
	gMII_REGISTER_EN
 = 
NOTSUPPORTED
,

202 .
	gupd©e_°©e
 = 
ù175c_upd©e_°©e
,

203 .
	g£t_vœn_mode
 = 
ù175c_£t_vœn_mode
,

204 .
	gª£t
 = 
ù175c_ª£t
,

207 c⁄° 
ªgi°î_m≠pögs
 
	gIP175A
 = {

208 .
NAME
 = "IP175A",

209 .
	gMODEL_NO
 = 0x05,

210 .
	gVLAN_DEFAULT_TAG_REG
 = {

211 {0,24},{0,25},{0,26},{0,27},{0,28},
NOTSUPPORTED
,

212 
NOTSUPPORTED
,NOTSUPPORTED,NOTSUPPORTED

215 .
	gADD_TAG_REG
 = {0,23},

216 .
	gREMOVE_TAG_REG
 = {0,23},

217 .
	gADD_TAG_BIT
 = {11,12,13,14,15,-1,-1,-1,-1},

218 .
	gREMOVE_TAG_BIT
 = {6,7,8,9,10,-1,-1,-1,-1},

220 .
	gSIMPLE_VLAN_REGISTERS
 = 0,

223 .
	gVLAN_LOOKUP_REG
 = 
NOTSUPPORTED
,

224 .
	gVLAN_LOOKUP_REG_5
 = 
NOTSUPPORTED
,

225 .
	gVLAN_LOOKUP_EVEN_BIT
 = {8,9,10,11,12,-1,-1,-1,-1},

226 .
	gVLAN_LOOKUP_ODD_BIT
 = {0,1,2,3,4,-1,-1,-1,-1},

228 .
	gTAG_VLAN_MASK_REG
 = 
NOTSUPPORTED
,

229 .
	gTAG_VLAN_MASK_EVEN_BIT
 = {-1,-1,-1,-1,-1,-1,-1,-1,-1},

230 .
	gTAG_VLAN_MASK_ODD_BIT
 = {-1,-1,-1,-1,-1,-1,-1,-1,-1},

232 .
	gRESET_VAL
 = -1,

233 .
	gRESET_REG
 = 
NOTSUPPORTED
,

234 .
	gMODE_VAL
 = 0,

235 .
	gMODE_REG
 = 
NOTSUPPORTED
,

237 .
	gROUTER_CONTROL_REG
 = 
NOTSUPPORTED
,

238 .
	gVLAN_CONTROL_REG
 = 
NOTSUPPORTED
,

239 .
	gTAG_VLAN_BIT
 = -1,

240 .
	gROUTER_EN_BIT
 = -1,

241 .
	gNUMLAN_GROUPS_MAX
 = -1,

242 .
	gNUMLAN_GROUPS_BIT
 = -1,

244 .
	gNUM_PORTS
 = 5,

245 .
	gCPU_PORT
 = 4,

247 .
	gMII_REGISTER_EN
 = {0, 18},

248 .
	gMII_REGISTER_EN_BIT
 = 7,

250 .
	gupd©e_°©e
 = 
ù175c_upd©e_°©e
,

251 .
	g£t_vœn_mode
 = 
ù175c_£t_vœn_mode
,

252 .
	gª£t
 = 
ù175c_ª£t
,

256 
ù175d_upd©e_°©e
(
ù17xx_°©e
 *
°©e
);

257 
ù175d_£t_vœn_mode
(
ù17xx_°©e
 *
°©e
);

258 
ù175d_ª£t
(
ù17xx_°©e
 *
°©e
);

260 c⁄° 
ªgi°î_m≠pögs
 
	gIP175D
 = {

261 .
NAME
 = "IP175D",

262 .
	gMODEL_NO
 = 0x18,

267 .
	gVLAN_DEFAULT_TAG_REG
 = {

268 
NOTSUPPORTED
,NOTSUPPORTED,NOTSUPPORTED,NOTSUPPORTED,

269 
NOTSUPPORTED
,NOTSUPPORTED,NOTSUPPORTED,NOTSUPPORTED,

272 .
	gADD_TAG_REG
 = 
NOTSUPPORTED
,

273 .
	gREMOVE_TAG_REG
 = 
NOTSUPPORTED
,

275 .
	gSIMPLE_VLAN_REGISTERS
 = 0,

277 .
	gVLAN_LOOKUP_REG
 = 
NOTSUPPORTED
,

278 .
	gVLAN_LOOKUP_REG_5
 = 
NOTSUPPORTED
,

279 .
	gTAG_VLAN_MASK_REG
 = 
NOTSUPPORTED
,

281 .
	gRESET_VAL
 = 0x175D,

282 .
	gRESET_REG
 = {20,2},

283 .
	gMODE_REG
 = 
NOTSUPPORTED
,

285 .
	gROUTER_CONTROL_REG
 = 
NOTSUPPORTED
,

286 .
	gROUTER_EN_BIT
 = -1,

287 .
	gNUMLAN_GROUPS_BIT
 = -1,

289 .
	gVLAN_CONTROL_REG
 = 
NOTSUPPORTED
,

290 .
	gTAG_VLAN_BIT
 = -1,

292 .
	gNUM_PORTS
 = 6,

293 .
	gCPU_PORT
 = 5,

295 .
	gMII_REGISTER_EN
 = 
NOTSUPPORTED
,

297 .
	gupd©e_°©e
 = 
ù175d_upd©e_°©e
,

298 .
	g£t_vœn_mode
 = 
ù175d_£t_vœn_mode
,

299 .
	gª£t
 = 
ù175d_ª£t
,

302 
	sù17xx_°©e
 {

303 
swôch_dev
 
	mdev
;

304 
mii_bus
 *
	mmii_bus
;

305 
boﬁ
 
	mªgi°îed
;

307 
	mrouãr_mode
;

308 
	mvœn_íabÀd
;

309 
	sp‹t_°©e
 {

310 
u16
 
	mpvid
;

311 
	msh¨ï‹ts
;

312 } 
	mp‹ts
[
MAX_PORTS
];

313 
	madd_èg
;

314 
	mªmove_èg
;

315 
	mnum_vœns
;

316 
	svœn_°©e
 {

317 
	mp‹ts
;

318 
	mèg
;

319 } 
	mvœns
[
MAX_VLANS
];

320 c⁄° 
ªgi°î_m≠pögs
 *
	mªgs
;

321 
ªg
 
	m¥oc_mii
;

323 
	mbuf
[80];

326 
	#gë_°©e
(
_dev
Ë
	`c⁄èöî_of
((_dev), 
ù17xx_°©e
, 
dev
)

	)

328 
	$ù_phy_ªad
(
ù17xx_°©e
 *
°©e
, 
p‹t
, 
ªg
)

330 
vÆ
 = 
	`mdiobus_ªad
(
°©e
->
mii_bus
, 
p‹t
, 
ªg
);

331 i‡(
vÆ
 < 0)

332 
	`¥_w¨nög
("IP17xx: U«bÀÅÿgë MIIÑegi°î %d,%d:Éº‹ %d\n", 
p‹t
, 
ªg
, -
vÆ
);

333 #ifde‡
DUMP_MII_IO


335 
	`¥_debug
("IP17xx: Ród MII(%d,%dË-> %04x\n", 
p‹t
, 
ªg
, 
vÆ
);

337  
vÆ
;

338 
	}
}

340 
	$ù_phy_wrôe
(
ù17xx_°©e
 *
°©e
, 
p‹t
, 
ªg
, 
u16
 
vÆ
)

342 
îr
;

344 #ifde‡
DUMP_MII_IO


345 
	`¥_debug
("IP17xx: WrôêMII(%d,%dË<- %04x\n", 
p‹t
, 
ªg
, 
vÆ
);

347 
îr
 = 
	`mdiobus_wrôe
(
°©e
->
mii_bus
, 
p‹t
, 
ªg
, 
vÆ
);

348 i‡(
îr
 < 0)

349 
	`¥_w¨nög
("IP17xx: U«bÀÅÿwrôêMIIÑegi°î %d,%d:Éº‹ %d\n", 
p‹t
, 
ªg
, -
îr
);

350  
îr
;

351 
	}
}

353 
	$ù_phy_wrôe_masked
(
ù17xx_°©e
 *
°©e
, 
p‹t
, 
ªg
, 
mask
, 
d©a
)

355 
vÆ
 = 
	`ù_phy_ªad
(
°©e
, 
p‹t
, 
ªg
);

356 i‡(
vÆ
 < 0)

358  
	`ù_phy_wrôe
(
°©e
, 
p‹t
, 
ªg
, (
vÆ
 & ~
mask
Ë| 
d©a
);

359 
	}
}

361 
	$gëPhy
(
ù17xx_°©e
 *
°©e
, 
ªg
 
mii
)

363 i‡(!
	`REG_SUPP
(
mii
))

364  -
EFAULT
;

365  
	`ù_phy_ªad
(
°©e
, 
mii
.
p
, mii.
m
);

366 
	}
}

368 
	$£tPhy
(
ù17xx_°©e
 *
°©e
, 
ªg
 
mii
, 
u16
 
vÆue
)

370 
îr
;

372 i‡(!
	`REG_SUPP
(
mii
))

373  -
EFAULT
;

374 
îr
 = 
	`ù_phy_wrôe
(
°©e
, 
mii
.
p
, mii.
m
, 
vÆue
);

375 i‡(
îr
 < 0)

376  
îr
;

377 
	`mdñay
(2);

378 
	`gëPhy
(
°©e
, 
mii
);

380 
	}
}

388 
	#GET_PORT_BITS
(
°©e
, 
bôs
, 
addr
, 
bô_lookup
) \

390 
i
, 
vÆ
 = 
	`gëPhy
((
°©e
), (
addr
)); \

391 i‡(
vÆ
 < 0) \

392  
vÆ
; \

393 (
bôs
) = 0; \

394 
i
 = 0; i < 
MAX_PORTS
; i++) { \

395 i‡((
bô_lookup
)[
i
] == -1) ; \

396 i‡(
vÆ
 & (1<<(
bô_lookup
)[
i
])) \

397 (
bôs
Ë|(1<<
i
); \

399 } 0)

	)

401 
	#SET_PORT_BITS
(
°©e
, 
bôs
, 
addr
, 
bô_lookup
) \

403 
i
, 
vÆ
 = 
	`gëPhy
((
°©e
), (
addr
)); \

404 i‡(
vÆ
 < 0) \

405  
vÆ
; \

406 
i
 = 0; i < 
MAX_PORTS
; i++) { \

407 
√wmask
 = ((
bôs
)&(1<<
i
)); \

408 i‡((
bô_lookup
)[
i
] == -1) ; \

409 
vÆ
 &~(1<<(
bô_lookup
)[
i
]); \

410 
vÆ
 |((
√wmask
>>
i
)<<(
bô_lookup
)[i]); \

412 
vÆ
 = 
	`£tPhy
((
°©e
), (
addr
), val); \

413 i‡(
vÆ
 < 0) \

414  
vÆ
; \

415 } 0)

	)

418 
	$gë_modñ
(
ù17xx_°©e
 *
°©e
)

420 
id1
, 
id2
;

421 
oui_id
, 
modñ_no
, 
ªv_no
, 
chù_no
;

423 
id1
 = 
	`ù_phy_ªad
(
°©e
, 0, 2);

424 
id2
 = 
	`ù_phy_ªad
(
°©e
, 0, 3);

425 
oui_id
 = (
id1
 << 6Ë| ((
id2
 >> 10) & 0x3f);

426 
modñ_no
 = (
id2
 >> 4) & 0x3f;

427 
ªv_no
 = 
id2
 & 0xf;

428 
	`¥_debug
("IP17xx: Idítifõd oui=%06x modñ=%02xÑev=%X\n", 
oui_id
, 
modñ_no
, 
ªv_no
);

430 i‡(
oui_id
 != 0x0090c3)

431  -
ENODEV
;

433 i‡(
modñ_no
 =
IP175A
.
MODEL_NO
) {

434 
°©e
->
ªgs
 = &
IP175A
;

435 } i‡(
modñ_no
 =
IP175C
.
MODEL_NO
) {

442 i‡(
	`ù_phy_ªad
(
°©e
, 5, 2) == 0x0243) {

443 
°©e
->
ªgs
 = &
IP178C
;

445 
chù_no
 = 
	`ù_phy_ªad
(
°©e
, 20, 0);

446 
	`¥_debug
("IP17xx: Chù IDÑegi°îÑód†%04x\n", 
chù_no
);

447 i‡(
chù_no
 == 0x175d) {

448 
°©e
->
ªgs
 = &
IP175D
;

450 
°©e
->
ªgs
 = &
IP175C
;

454 
	`¥_w¨nög
("IP17xx: Foundá¿unknow¿IC+ swôch wôh modñÇumbî %02x,Ñevisi⁄ %X.\n", 
modñ_no
, 
ªv_no
);

455  -
EPERM
;

458 
	}
}

463 
	$ù175c_£t_Êags
(
ù17xx_°©e
 *
°©e
)

465 
vÆ
;

467 i‡(!
	`REG_SUPP
(
°©e
->
ªgs
->
ROUTER_CONTROL_REG
)) {

471 
vÆ
 = 
	`gëPhy
(
°©e
, sèã->
ªgs
->
ROUTER_CONTROL_REG
);

472 i‡(
vÆ
 < 0) {

473  
vÆ
;

475 i‡(
°©e
->
ªgs
->
ROUTER_EN_BIT
 >= 0) {

476 i‡(
°©e
->
rouãr_mode
) {

477 
vÆ
 |(1<<
°©e
->
ªgs
->
ROUTER_EN_BIT
);

479 
vÆ
 &(~(1<<
°©e
->
ªgs
->
ROUTER_EN_BIT
));

482 i‡(
°©e
->
ªgs
->
TAG_VLAN_BIT
 >= 0) {

483 i‡(
°©e
->
vœn_íabÀd
) {

484 
vÆ
 |(1<<
°©e
->
ªgs
->
TAG_VLAN_BIT
);

486 
vÆ
 &(~(1<<
°©e
->
ªgs
->
TAG_VLAN_BIT
));

489 i‡(
°©e
->
ªgs
->
NUMLAN_GROUPS_BIT
 >= 0) {

490 
vÆ
 &(~((
°©e
->
ªgs
->
NUMLAN_GROUPS_MAX
-1)<<°©e->ªgs->
NUMLAN_GROUPS_BIT
));

491 i‡(
°©e
->
num_vœns
 > sèã->
ªgs
->
NUMLAN_GROUPS_MAX
) {

492 
vÆ
 |
°©e
->
ªgs
->
NUMLAN_GROUPS_MAX
 << sèã->ªgs->
NUMLAN_GROUPS_BIT
;

493 } i‡(
°©e
->
num_vœns
 >= 1) {

494 
vÆ
 |(
°©e
->
num_vœns
-1Ë<< sèã->
ªgs
->
NUMLAN_GROUPS_BIT
;

497  
	`£tPhy
(
°©e
, sèã->
ªgs
->
ROUTER_CONTROL_REG
, 
vÆ
);

498 
	}
}

501 
	$ù175c_£t_°©e
(
ù17xx_°©e
 *
°©e
)

503 
j
;

504 
i
;

505 
	`SET_PORT_BITS
(
°©e
, sèã->
add_èg
,

506 
°©e
->
ªgs
->
ADD_TAG_REG
, sèã->ªgs->
ADD_TAG_BIT
);

507 
	`SET_PORT_BITS
(
°©e
, sèã->
ªmove_èg
,

508 
°©e
->
ªgs
->
REMOVE_TAG_REG
, sèã->ªgs->
REMOVE_TAG_BIT
);

510 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
VLAN_LOOKUP_REG
)) {

511 
j
=0; j<
°©e
->
ªgs
->
NUM_PORTS
; j++) {

512 
ªg
 
addr
;

513 c⁄° 
bônum
 *
bô_lookup
 = (
j
%2==0)?

514 
°©e
->
ªgs
->
VLAN_LOOKUP_EVEN_BIT
:

515 
°©e
->
ªgs
->
VLAN_LOOKUP_ODD_BIT
;

517 
addr
 = 
°©e
->
ªgs
->
VLAN_LOOKUP_REG
;

518 i‡(
°©e
->
ªgs
->
SIMPLE_VLAN_REGISTERS
) {

519 
addr
.
m
 +
j
;

521 
j
) {

527 
addr
.
m
+=1;

530 
addr
.
m
+=2;

533 
addr
 = 
°©e
->
ªgs
->
VLAN_LOOKUP_REG_5
;

536 
addr
.
m
 = -1;

541 i‡(
	`REG_SUPP
(
addr
)) {

542 
	`SET_PORT_BITS
(
°©e
, sèã->
p‹ts
[
j
].
sh¨ï‹ts
, 
addr
, 
bô_lookup
);

546 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
TAG_VLAN_MASK_REG
)) {

547 
j
=0; j<
MAX_VLANS
; j++) {

548 
ªg
 
addr
 = 
°©e
->
ªgs
->
TAG_VLAN_MASK_REG
;

549 c⁄° 
bônum
 *
bô_lookup
 = (
j
%2==0)?

550 
°©e
->
ªgs
->
TAG_VLAN_MASK_EVEN_BIT
:

551 
°©e
->
ªgs
->
TAG_VLAN_MASK_ODD_BIT
;

552 
vœn_mask
;

553 i‡(
°©e
->
ªgs
->
SIMPLE_VLAN_REGISTERS
) {

554 
addr
.
m
 +
j
;

556 
addr
.
m
 +
j
/2;

558 
vœn_mask
 = 
°©e
->
vœns
[
j
].
p‹ts
;

559 
	`SET_PORT_BITS
(
°©e
, 
vœn_mask
, 
addr
, 
bô_lookup
);

563 
i
=0; i<
MAX_PORTS
; i++) {

564 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
VLAN_DEFAULT_TAG_REG
[
i
])) {

565 
îr
 = 
	`£tPhy
(
°©e
, sèã->
ªgs
->
VLAN_DEFAULT_TAG_REG
[
i
],

566 
°©e
->
p‹ts
[
i
].
pvid
);

567 i‡(
îr
 < 0) {

568  
îr
;

573  
	`ù175c_£t_Êags
(
°©e
);

574 
	}
}

580 
	$ù175c_c‹ª˘_vœn_°©e
(
ù17xx_°©e
 *
°©e
)

582 
i
, 
j
;

583 
°©e
->
num_vœns
 = 0;

584 
i
=0; i<
MAX_VLANS
; i++) {

585 i‡(
°©e
->
vœns
[
i
].
p‹ts
 != 0) {

586 
°©e
->
num_vœns
 = 
i
+1;

590 
i
=0; i<
°©e
->
ªgs
->
NUM_PORTS
; i++) {

591 
p‹tmask
 = (1<<
i
);

592 i‡(!
°©e
->
vœn_íabÀd
) {

594 
°©e
->
p‹ts
[
i
].
sh¨ï‹ts
 = (1<<°©e->
ªgs
->
NUM_PORTS
)-1;

597 
°©e
->
p‹ts
[
i
].
sh¨ï‹ts
 = 
p‹tmask
;

598 
j
=0; j<
MAX_VLANS
; j++) {

599 i‡(
°©e
->
vœns
[
j
].
p‹ts
 & 
p‹tmask
)

600 
°©e
->
p‹ts
[
i
].
sh¨ï‹ts
 |°©e->
vœns
[
j
].ports;

603 
	}
}

605 
	$ù175c_upd©e_°©e
(
ù17xx_°©e
 *
°©e
)

607 
	`ù175c_c‹ª˘_vœn_°©e
(
°©e
);

608  
	`ù175c_£t_°©e
(
°©e
);

609 
	}
}

611 
	$ù175c_£t_vœn_mode
(
ù17xx_°©e
 *
°©e
)

613  
	`ù175c_upd©e_°©e
(
°©e
);

614 
	}
}

616 
	$ù175c_ª£t
(
ù17xx_°©e
 *
°©e
)

618 
îr
;

620 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
MODE_REG
)) {

621 
îr
 = 
	`£tPhy
(
°©e
, sèã->
ªgs
->
MODE_REG
, sèã->ªgs->
MODE_VAL
);

622 i‡(
îr
 < 0)

623  
îr
;

624 
îr
 = 
	`gëPhy
(
°©e
, sèã->
ªgs
->
MODE_REG
);

625 i‡(
îr
 < 0)

626  
îr
;

629  
	`ù175c_upd©e_°©e
(
°©e
);

630 
	}
}

634 
	$ù175d_upd©e_°©e
(
ù17xx_°©e
 *
°©e
)

636 
fûãr_mask
 = 0;

637 
p‹ts
[16], 
add
[16], 
ªm
[16];

638 
i
, 
j
;

639 
îr
 = 0;

641 
i
 = 0; i < 16; i++) {

642 
p‹ts
[
i
] = 0;

643 
add
[
i
] = 0;

644 
ªm
[
i
] = 0;

645 i‡(!
°©e
->
vœn_íabÀd
) {

646 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 14+
i
, i+1);

647 
p‹ts
[
i
] = 0x3f;

650 i‡(!
°©e
->
vœns
[
i
].
èg
) {

652 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 14+
i
, 0);

655 
fûãr_mask
 |1 << 
i
;

656 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 14+
i
, sèã->
vœns
[i].
èg
);

657 
p‹ts
[
i
] = 
°©e
->
vœns
[i].ports;

658 
j
 = 0; j < 6; j++) {

659 i‡(
p‹ts
[
i
] & (1 << 
j
)) {

660 i‡(
°©e
->
add_èg
 & (1 << 
j
))

661 
add
[
i
] |1 << 
j
;

662 i‡(
°©e
->
ªmove_èg
 & (1 << 
j
))

663 
ªm
[
i
] |1 << 
j
;

669 
i
 = 0; i < 8; i++) {

670 
îr
 |
	`ù_phy_wrôe
(
°©e
, 23, 
i
, 
p‹ts
[2*i] | (ports[2*i+1] << 8));

671 
îr
 |
	`ù_phy_wrôe
(
°©e
, 23, 8+
i
, 
add
[2*i] | (add[2*i+1] << 8));

672 
îr
 |
	`ù_phy_wrôe
(
°©e
, 23, 16+
i
, 
ªm
[2*i] | (rem[2*i+1] << 8));

674 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 10, 
fûãr_mask
);

677 
i
 = 0; i < 6; i++)

678 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 4+
i
, sèã->
vœns
[°©e->
p‹ts
[i].
pvid
].
èg
);

680  (
îr
 ? -
EIO
 : 0);

681 
	}
}

683 
	$ù175d_£t_vœn_mode
(
ù17xx_°©e
 *
°©e
)

685 
i
;

686 
îr
 = 0;

688 i‡(
°©e
->
vœn_íabÀd
) {

691 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 0, 0x3fff, 0x003f);

696 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 1, 0x0fff, 0x0c3f);

699 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 2, 0x0fff, 0x0000);

702 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 0, 0xbfff, 0x8000);

705 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 1, 0x0fff, 0x0c3f);

706 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 22, 2, 0x0fff, 0x0000);

710 
i
 = 0; i < 6; i++)

711 
°©e
->
p‹ts
[
i
].
pvid
 = 0;

713 
îr
 |
	`ù175d_upd©e_°©e
(
°©e
);

715  (
îr
 ? -
EIO
 : 0);

716 
	}
}

718 
	$ù175d_ª£t
(
ù17xx_°©e
 *
°©e
)

720 
îr
 = 0;

723 
îr
 |
	`ù_phy_wrôe_masked
(
°©e
, 21, 22, 0x0003, 0x0000);

726 
îr
 |
	`ù_phy_wrôe
(
°©e
, 22, 3, 0x8100);

728 
°©e
->
vœn_íabÀd
 = 0;

729 
îr
 |
	`ù175d_£t_vœn_mode
(
°©e
);

731  (
îr
 ? -
EIO
 : 0);

732 
	}
}

736 
	$ù17xx_gë_íabÀ_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

738 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

740 
vÆ
->
vÆue
.
i
 = 
°©e
->
vœn_íabÀd
;

742 
	}
}

744 
	$ù17xx_ª£t_vœn_c⁄fig
(
ù17xx_°©e
 *
°©e
)

746 
i
;

748 
°©e
->
ªmove_èg
 = (°©e->
vœn_íabÀd
 ? ((1<<°©e->
ªgs
->
NUM_PORTS
)-1) : 0x0000);

749 
°©e
->
add_èg
 = 0x0000;

750 
i
 = 0; i < 
MAX_VLANS
; i++) {

751 
°©e
->
vœns
[
i
].
p‹ts
 = 0x0000;

752 
°©e
->
vœns
[
i
].
èg
 = (i ? i : 16);

754 
i
 = 0; i < 
MAX_PORTS
; i++)

755 
°©e
->
p‹ts
[
i
].
pvid
 = 0;

756 
	}
}

758 
	$ù17xx_£t_íabÀ_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

760 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

761 
íabÀ
;

763 
íabÀ
 = 
vÆ
->
vÆue
.
i
;

764 i‡(
°©e
->
vœn_íabÀd
 =
íabÀ
) {

768 
°©e
->
vœn_íabÀd
 = 
íabÀ
;

771 
	`ù17xx_ª£t_vœn_c⁄fig
(
°©e
);

773  
°©e
->
ªgs
->
	`£t_vœn_mode
(state);

774 
	}
}

776 
	$ù17xx_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

778 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

779 
b
;

780 
öd
;

781 
p‹ts
;

783 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
 || val->port_vlan < 0)

784  -
EINVAL
;

786 
p‹ts
 = 
°©e
->
vœns
[
vÆ
->
p‹t_vœn
].ports;

787 
b
 = 0;

788 
öd
 = 0;

789 
b
 < 
MAX_PORTS
) {

790 i‡(
p‹ts
&1) {

791 
i°agged
 = ((
°©e
->
add_èg
 >> 
b
) & 1);

792 
vÆ
->
vÆue
.
p‹ts
[
öd
].
id
 = 
b
;

793 
vÆ
->
vÆue
.
p‹ts
[
öd
].
Êags
 = (
i°agged
 << 
SWITCH_PORT_FLAG_TAGGED
);

794 
öd
++;

796 
b
++;

797 
p‹ts
 >>= 1;

799 
vÆ
->
Àn
 = 
öd
;

802 
	}
}

804 
	$ù17xx_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

806 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

807 
i
;

809 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
 || val->port_vlan < 0)

810  -
EINVAL
;

812 
°©e
->
vœns
[
vÆ
->
p‹t_vœn
].
p‹ts
 = 0;

813 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

814 
bômask
 = (1<<
vÆ
->
vÆue
.
p‹ts
[
i
].
id
);

815 
°©e
->
vœns
[
vÆ
->
p‹t_vœn
].
p‹ts
 |
bômask
;

816 i‡(
vÆ
->
vÆue
.
p‹ts
[
i
].
Êags
 & (1<<
SWITCH_PORT_FLAG_TAGGED
)) {

817 
°©e
->
add_èg
 |
bômask
;

818 
°©e
->
ªmove_èg
 &(~
bômask
);

820 
°©e
->
add_èg
 &(~
bômask
);

821 
°©e
->
ªmove_èg
 |
bômask
;

825  
°©e
->
ªgs
->
	`upd©e_°©e
(state);

826 
	}
}

828 
	$ù17xx_≠∂y
(
swôch_dev
 *
dev
)

830 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

832 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
MII_REGISTER_EN
)) {

833 
vÆ
 = 
	`gëPhy
(
°©e
, sèã->
ªgs
->
MII_REGISTER_EN
);

834 i‡(
vÆ
 < 0) {

835  
vÆ
;

837 
vÆ
 |(1<<
°©e
->
ªgs
->
MII_REGISTER_EN_BIT
);

838  
	`£tPhy
(
°©e
, sèã->
ªgs
->
MII_REGISTER_EN
, 
vÆ
);

841 
	}
}

843 
	$ù17xx_ª£t
(
swôch_dev
 *
dev
)

845 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

846 
i
, 
îr
;

848 i‡(
	`REG_SUPP
(
°©e
->
ªgs
->
RESET_REG
)) {

849 
îr
 = 
	`£tPhy
(
°©e
, sèã->
ªgs
->
RESET_REG
, sèã->ªgs->
RESET_VAL
);

850 i‡(
îr
 < 0)

851  
îr
;

852 
îr
 = 
	`gëPhy
(
°©e
, sèã->
ªgs
->
RESET_REG
);

859 
	`mdñay
(2);

863 
i
 = 0; i < 
°©e
->
ªgs
->
NUM_PORTS
-1; i++) {

864 
îr
 = 
	`ù_phy_wrôe
(
°©e
, 
i
, 
MII_BMCR
, 
BMCR_RESET
);

865 i‡(
îr
 < 0)

866  
îr
;

869 
°©e
->
rouãr_mode
 = 0;

870 
°©e
->
vœn_íabÀd
 = 0;

871 
	`ù17xx_ª£t_vœn_c⁄fig
(
°©e
);

873  
°©e
->
ªgs
->
	`ª£t
(state);

874 
	}
}

876 
	$ù17xx_gë_ègged
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

878 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

880 i‡(
°©e
->
add_èg
 & (1<<
vÆ
->
p‹t_vœn
)) {

881 i‡(
°©e
->
ªmove_èg
 & (1<<
vÆ
->
p‹t_vœn
))

882 
vÆ
->
vÆue
.
i
 = 3;

884 
vÆ
->
vÆue
.
i
 = 1;

886 i‡(
°©e
->
ªmove_èg
 & (1<<
vÆ
->
p‹t_vœn
))

887 
vÆ
->
vÆue
.
i
 = 0;

889 
vÆ
->
vÆue
.
i
 = 2;

892 
	}
}

894 
	$ù17xx_£t_ègged
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

896 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

898 
°©e
->
add_èg
 &~(1<<
vÆ
->
p‹t_vœn
);

899 
°©e
->
ªmove_èg
 &~(1<<
vÆ
->
p‹t_vœn
);

901 i‡(
vÆ
->
vÆue
.
i
 == 0)

902 
°©e
->
ªmove_èg
 |(1<<
vÆ
->
p‹t_vœn
);

903 i‡(
vÆ
->
vÆue
.
i
 == 1)

904 
°©e
->
add_èg
 |(1<<
vÆ
->
p‹t_vœn
);

906  
°©e
->
ªgs
->
	`upd©e_°©e
(state);

907 
	}
}

910 
	$ù17xx_gë_phy
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

912 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

914 
vÆ
->
vÆue
.
i
 = 
°©e
->
¥oc_mii
.
p
;

916 
	}
}

919 
	$ù17xx_£t_phy
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

921 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

922 
√w_ªg
 = 
vÆ
->
vÆue
.
i
;

924 i‡(
√w_ªg
 < 0 ||Çew_reg > 31)

925 
°©e
->
¥oc_mii
.
p
 = (
u16
)-1;

927 
°©e
->
¥oc_mii
.
p
 = (
u16
)
√w_ªg
;

929 
	}
}

932 
	$ù17xx_gë_ªg
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

934 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

936 
vÆ
->
vÆue
.
i
 = 
°©e
->
¥oc_mii
.
m
;

938 
	}
}

941 
	$ù17xx_£t_ªg
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

943 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

944 
√w_ªg
 = 
vÆ
->
vÆue
.
i
;

946 i‡(
√w_ªg
 < 0 ||Çew_reg > 31)

947 
°©e
->
¥oc_mii
.
m
 = (
u16
)-1;

949 
°©e
->
¥oc_mii
.
m
 = (
u16
)
√w_ªg
;

951 
	}
}

954 
	$ù17xx_gë_vÆ
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

956 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

957 
ªtvÆ
 = -
EINVAL
;

958 i‡(
	`REG_SUPP
(
°©e
->
¥oc_mii
))

959 
ªtvÆ
 = 
	`gëPhy
(
°©e
, sèã->
¥oc_mii
);

961 i‡(
ªtvÆ
 < 0) {

962  
ªtvÆ
;

964 
vÆ
->
vÆue
.
i
 = 
ªtvÆ
;

967 
	}
}

970 
	$ù17xx_£t_vÆ
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

972 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

973 
myvÆ
, 
îr
 = -
EINVAL
;

975 
myvÆ
 = 
vÆ
->
vÆue
.
i
;

976 i‡(
myvÆ
 <0xfff‡&& myvÆ >0 && 
	`REG_SUPP
(
°©e
->
¥oc_mii
)) {

977 
îr
 = 
	`£tPhy
(
°©e
, sèã->
¥oc_mii
, (
u16
)
myvÆ
);

979  
îr
;

980 
	}
}

982 
	$ù17xx_ªad_«me
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

984 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

985 
vÆ
->
vÆue
.
s
 = 
°©e
->
ªgs
->
NAME
;

987 
	}
}

989 
	$ù17xx_gë_èg
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

991 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

992 
vœn
 = 
vÆ
->
p‹t_vœn
;

994 i‡(
vœn
 < 0 || vœ¿>
MAX_VLANS
)

995  -
EINVAL
;

997 
vÆ
->
vÆue
.
i
 = 
°©e
->
vœns
[
vœn
].
èg
;

999 
	}
}

1001 
	$ù17xx_£t_èg
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

1003 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1004 
vœn
 = 
vÆ
->
p‹t_vœn
;

1005 
èg
 = 
vÆ
->
vÆue
.
i
;

1007 i‡(
vœn
 < 0 || vœ¿>
MAX_VLANS
)

1008  -
EINVAL
;

1010 i‡(
èg
 < 0 ||Åag > 4095)

1011  -
EINVAL
;

1013 
°©e
->
vœns
[
vœn
].
èg
 =Åag;

1014  
°©e
->
ªgs
->
	`upd©e_°©e
(state);

1015 
	}
}

1017 
	$ù17xx_£t_p‹t_•ìd
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

1019 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1020 
ƒ
 = 
vÆ
->
p‹t_vœn
;

1021 
˘æ
;

1022 
aut⁄eg
;

1023 
•ìd
;

1024 i‡(
vÆ
->
vÆue
.
i
 == 100) {

1025 
•ìd
 = 1;

1026 
aut⁄eg
 = 0;

1027 } i‡(
vÆ
->
vÆue
.
i
 == 10) {

1028 
•ìd
 = 0;

1029 
aut⁄eg
 = 0;

1031 
aut⁄eg
 = 1;

1032 
•ìd
 = 1;

1036 i‡(
ƒ
 =
°©e
->
ªgs
->
CPU_PORT
)

1037  -
EINVAL
;

1039 i‡(
ƒ
 >
dev
->
p‹ts
 ||Çr < 0)

1040  -
EINVAL
;

1042 
˘æ
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 0);

1043 i‡(
˘æ
 < 0)

1044  -
EIO
;

1046 
˘æ
 &= (~(1<<12));

1047 
˘æ
 &= (~(1<<13));

1048 
˘æ
 |(
aut⁄eg
<<12);

1049 
˘æ
 |(
•ìd
<<13);

1051  
	`ù_phy_wrôe
(
°©e
, 
ƒ
, 0, 
˘æ
);

1052 
	}
}

1054 
	$ù17xx_gë_p‹t_•ìd
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

1056 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1057 
ƒ
 = 
vÆ
->
p‹t_vœn
;

1058 
•ìd
, 
°©us
;

1060 i‡(
ƒ
 =
°©e
->
ªgs
->
CPU_PORT
) {

1061 
vÆ
->
vÆue
.
i
 = 100;

1065 i‡(
ƒ
 >
dev
->
p‹ts
 ||Çr < 0)

1066  -
EINVAL
;

1068 
°©us
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 1);

1069 
•ìd
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 18);

1070 i‡(
°©us
 < 0 || 
•ìd
 < 0)

1071  -
EIO
;

1073 i‡(
°©us
 & 4)

1074 
vÆ
->
vÆue
.
i
 = ((
•ìd
 & (1<<11)) ? 100 : 10);

1076 
vÆ
->
vÆue
.
i
 = 0;

1079 
	}
}

1081 
	$ù17xx_gë_p‹t_°©us
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

1083 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1084 
˘æ
, 
•ìd
, 
°©us
;

1085 
ƒ
 = 
vÆ
->
p‹t_vœn
;

1086 
Àn
;

1087 *
buf
 = 
°©e
->buf;

1089 i‡(
ƒ
 =
°©e
->
ªgs
->
CPU_PORT
) {

1090 
	`•rötf
(
buf
, "up, 100 Mbps, cpuÖort");

1091 
vÆ
->
vÆue
.
s
 = 
buf
;

1095 i‡(
ƒ
 >
dev
->
p‹ts
 ||Çr < 0)

1096  -
EINVAL
;

1098 
˘æ
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 0);

1099 
°©us
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 1);

1100 
•ìd
 = 
	`ù_phy_ªad
(
°©e
, 
ƒ
, 18);

1101 i‡(
˘æ
 < 0 || 
°©us
 < 0 || 
•ìd
 < 0)

1102  -
EIO
;

1104 i‡(
°©us
 & 4)

1105 
Àn
 = 
	`•rötf
(
buf
, "up, %d Mbps, %s duplex",

1106 ((
•ìd
 & (1<<11)) ? 100 : 10),

1107 ((
•ìd
 & (1<<10)) ? "full" : "half"));

1109 
Àn
 = 
	`•rötf
(
buf
, "down");

1111 i‡(
˘æ
 & (1<<12)) {

1112 
Àn
 +
	`•rötf
(
buf
+len, ",áuto-negotiate");

1113 i‡(!(
°©us
 & (1<<5)))

1114 
Àn
 +
	`•rötf
(
buf
+len, " (inÖrogress)");

1116 
Àn
 +
	`•rötf
(
buf
+len, ", fixed speed (%d)",

1117 ((
˘æ
 & (1<<13)) ? 100 : 10));

1120 
buf
[
Àn
] = '\0';

1121 
vÆ
->
vÆue
.
s
 = 
buf
;

1123 
	}
}

1125 
	$ù17xx_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

1127 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1129 *
vÆ
 = 
°©e
->
p‹ts
[
p‹t
].
pvid
;

1131 
	}
}

1133 
	$ù17xx_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
)

1135 
ù17xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

1137 i‡(
vÆ
 < 0 || vÆ >
MAX_VLANS
)

1138  -
EINVAL
;

1140 
°©e
->
p‹ts
[
p‹t
].
pvid
 = 
vÆ
;

1141  
°©e
->
ªgs
->
	`upd©e_°©e
(state);

1142 
	}
}

1145 
	eP‹ts
 {

1146 
	mIP17XX_PORT_STATUS
,

1147 
	mIP17XX_PORT_LINK
,

1148 
	mIP17XX_PORT_TAGGED
,

1149 
	mIP17XX_PORT_PVID
,

1152 
	eGlobÆs
 {

1153 
	mIP17XX_ENABLE_VLAN
,

1154 
	mIP17XX_GET_NAME
,

1155 
	mIP17XX_REGISTER_PHY
,

1156 
	mIP17XX_REGISTER_MII
,

1157 
	mIP17XX_REGISTER_VALUE
,

1158 
	mIP17XX_REGISTER_ERRNO
,

1161 
	eVœns
 {

1162 
	mIP17XX_VLAN_TAG
,

1165 c⁄° 
swôch_©å
 
	gù17xx_globÆ
[] = {

1166 [
IP17XX_ENABLE_VLAN
] = {

1167 .
id
 = 
IP17XX_ENABLE_VLAN
,

1168 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1169 .
	g«me
 = "enable_vlan",

1170 .
	gdes¸ùti⁄
 = "FlagÅoÉnable or disable VLANsándÅagging",

1171 .
	ggë
 = 
ù17xx_gë_íabÀ_vœn
,

1172 .
	g£t
 = 
ù17xx_£t_íabÀ_vœn
,

1174 [
IP17XX_GET_NAME
] = {

1175 .
id
 = 
IP17XX_GET_NAME
,

1176 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1177 .
	gdes¸ùti⁄
 = "ReturnsÅheÅype of IC+ chip.",

1178 .
	g«me
 = "name",

1179 .
	ggë
 = 
ù17xx_ªad_«me
,

1180 .
	g£t
 = 
NULL
,

1183 [
IP17XX_REGISTER_PHY
] = {

1184 .
id
 = 
IP17XX_REGISTER_PHY
,

1185 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1186 .
	gdes¸ùti⁄
 = "DirectÑegisteráccess: set PHY (0-4, or 29,30,31)",

1187 .
	g«me
 = "phy",

1188 .
	ggë
 = 
ù17xx_gë_phy
,

1189 .
	g£t
 = 
ù17xx_£t_phy
,

1191 [
IP17XX_REGISTER_MII
] = {

1192 .
id
 = 
IP17XX_REGISTER_MII
,

1193 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1194 .
	gdes¸ùti⁄
 = "DirectÑegisteráccess: set MIIÑegisterÇumber (0-31)",

1195 .
	g«me
 = "reg",

1196 .
	ggë
 = 
ù17xx_gë_ªg
,

1197 .
	g£t
 = 
ù17xx_£t_ªg
,

1199 [
IP17XX_REGISTER_VALUE
] = {

1200 .
id
 = 
IP17XX_REGISTER_VALUE
,

1201 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1202 .
	gdes¸ùti⁄
 = "DirectÑegisteráccess:Ñead/writeÅoÑegister (0-65535)",

1203 .
	g«me
 = "val",

1204 .
	ggë
 = 
ù17xx_gë_vÆ
,

1205 .
	g£t
 = 
ù17xx_£t_vÆ
,

1209 c⁄° 
swôch_©å
 
	gù17xx_vœn
[] = {

1210 [
IP17XX_VLAN_TAG
] = {

1211 .
id
 = 
IP17XX_VLAN_TAG
,

1212 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1213 .
	gdes¸ùti⁄
 = "VLAN ID (0-4095) [IP175D only]",

1214 .
	g«me
 = "vid",

1215 .
	ggë
 = 
ù17xx_gë_èg
,

1216 .
	g£t
 = 
ù17xx_£t_èg
,

1220 c⁄° 
swôch_©å
 
	gù17xx_p‹t
[] = {

1221 [
IP17XX_PORT_STATUS
] = {

1222 .
id
 = 
IP17XX_PORT_STATUS
,

1223 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1224 .
	gdes¸ùti⁄
 = "Returns DetailedÖort status",

1225 .
	g«me
 = "status",

1226 .
	ggë
 = 
ù17xx_gë_p‹t_°©us
,

1227 .
	g£t
 = 
NULL
,

1229 [
IP17XX_PORT_LINK
] = {

1230 .
id
 = 
IP17XX_PORT_LINK
,

1231 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1232 .
	gdes¸ùti⁄
 = "Link speed. Can write 0 foráuto-negotiate, or 10 or 100",

1233 .
	g«me
 = "link",

1234 .
	ggë
 = 
ù17xx_gë_p‹t_•ìd
,

1235 .
	g£t
 = 
ù17xx_£t_p‹t_•ìd
,

1237 [
IP17XX_PORT_TAGGED
] = {

1238 .
id
 = 
IP17XX_PORT_LINK
,

1239 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1240 .
	gdes¸ùti⁄
 = "0 = untag, 1 =áddÅags, 2 = doÇotálter (This value isÑeset if vlansáreáltered)",

1241 .
	g«me
 = "tagged",

1242 .
	ggë
 = 
ù17xx_gë_ègged
,

1243 .
	g£t
 = 
ù17xx_£t_ègged
,

1247 c⁄° 
swôch_dev_›s
 
	gù17xx_›s
 = {

1248 .
©å_globÆ
 = {

1249 .
©å
 = 
ù17xx_globÆ
,

1250 .
	gn_©å
 = 
ARRAY_SIZE
(
ù17xx_globÆ
),

1252 .
	g©å_p‹t
 = {

1253 .
©å
 = 
ù17xx_p‹t
,

1254 .
	gn_©å
 = 
ARRAY_SIZE
(
ù17xx_p‹t
),

1256 .
	g©å_vœn
 = {

1257 .
©å
 = 
ù17xx_vœn
,

1258 .
	gn_©å
 = 
ARRAY_SIZE
(
ù17xx_vœn
),

1261 .
	ggë_p‹t_pvid
 = 
ù17xx_gë_pvid
,

1262 .
	g£t_p‹t_pvid
 = 
ù17xx_£t_pvid
,

1263 .
	ggë_vœn_p‹ts
 = 
ù17xx_gë_p‹ts
,

1264 .
	g£t_vœn_p‹ts
 = 
ù17xx_£t_p‹ts
,

1265 .
	g≠∂y_c⁄fig
 = 
ù17xx_≠∂y
,

1266 .
	gª£t_swôch
 = 
ù17xx_ª£t
,

1269 
	$ù17xx_¥obe
(
phy_devi˚
 *
pdev
)

1271 
ù17xx_°©e
 *
°©e
;

1272 
swôch_dev
 *
dev
;

1273 
îr
;

1276 i‡(
pdev
->
mdio
.
addr
 != 0)

1277  -
ENODEV
;

1279 
°©e
 = 
	`kzÆloc
((*°©e), 
GFP_KERNEL
);

1280 i‡(!
°©e
)

1281  -
ENOMEM
;

1283 
dev
 = &
°©e
->dev;

1285 
pdev
->
¥iv
 = 
°©e
;

1286 
°©e
->
mii_bus
 = 
pdev
->
mdio
.
bus
;

1288 
îr
 = 
	`gë_modñ
(
°©e
);

1289 i‡(
îr
 < 0)

1290 
îr‹
;

1292 
dev
->
vœns
 = 
MAX_VLANS
;

1293 
dev
->
˝u_p‹t
 = 
°©e
->
ªgs
->
CPU_PORT
;

1294 
dev
->
p‹ts
 = 
°©e
->
ªgs
->
NUM_PORTS
;

1295 
dev
->
«me
 = 
°©e
->
ªgs
->
NAME
;

1296 
dev
->
›s
 = &
ù17xx_›s
;

1298 
	`¥_öfo
("IP17xx: Found %†© %s\n", 
dev
->
«me
, 
	`dev_«me
(&
pdev
->
mdio
.dev));

1301 
îr‹
:

1302 
	`k‰ì
(
°©e
);

1303  
îr
;

1304 
	}
}

1306 
	$ù17xx_c⁄fig_öô
(
phy_devi˚
 *
pdev
)

1308 
ù17xx_°©e
 *
°©e
 = 
pdev
->
¥iv
;

1309 
√t_devi˚
 *
dev
 = 
pdev
->
©èched_dev
;

1310 
îr
;

1312 
îr
 = 
	`ªgi°î_swôch
(&
°©e
->
dev
, dev);

1313 i‡(
îr
 < 0)

1314  
îr
;

1316 
°©e
->
ªgi°îed
 = 
åue
;

1317 
	`ù17xx_ª£t
(&
°©e
->
dev
);

1319 
	}
}

1321 
	$ù17xx_ªmove
(
phy_devi˚
 *
pdev
)

1323 
ù17xx_°©e
 *
°©e
 = 
pdev
->
¥iv
;

1325 i‡(
°©e
->
ªgi°îed
)

1326 
	`uƒegi°î_swôch
(&
°©e
->
dev
);

1327 
	`k‰ì
(
°©e
);

1328 
	}
}

1330 
	$ù17xx_c⁄fig_™eg
(
phy_devi˚
 *
pdev
)

1333 
	}
}

1335 
	$ù17xx_™eg_d⁄e
(
phy_devi˚
 *
pdev
)

1338 
	}
}

1340 
	$ù17xx_upd©e_lök
(
phy_devi˚
 *
pdev
)

1342 
pdev
->
lök
 = 1;

1344 
	}
}

1346 
	$ù17xx_ªad_°©us
(
phy_devi˚
 *
pdev
)

1348 
pdev
->
•ìd
 = 
SPEED_100
;

1349 
pdev
->
du∂ex
 = 
DUPLEX_FULL
;

1350 
pdev
->
∑u£
 =Ödev->
asym_∑u£
 = 0;

1351 
pdev
->
lök
 = 1;

1354 
	}
}

1356 
phy_drivî
 
	gù17xx_drivî
[] = {

1358 .
«me
 = "IC+ IP17xx",

1359 .
	gphy_id
 = 0x02430c00,

1360 .
	gphy_id_mask
 = 0x0ffffc00,

1361 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

1362 .
	g¥obe
 = 
ù17xx_¥obe
,

1363 .
	gªmove
 = 
ù17xx_ªmove
,

1364 .
	gc⁄fig_öô
 = 
ù17xx_c⁄fig_öô
,

1365 .
	gc⁄fig_™eg
 = 
ù17xx_c⁄fig_™eg
,

1366 .
	g™eg_d⁄e
 = 
ù17xx_™eg_d⁄e
,

1367 .
	gupd©e_lök
 = 
ù17xx_upd©e_lök
,

1368 .
	gªad_°©us
 = 
ù17xx_ªad_°©us
,

1372 
moduÀ_phy_drivî
(
ù17xx_drivî
);

1374 
MODULE_AUTHOR
("Patrick Horn <patrick.horn@gmail.com>");

1375 
MODULE_AUTHOR
("Felix Fietkau <nbd@nbd.name>");

1376 
MODULE_AUTHOR
("Martin Mares <mj@ucw.cz>");

1377 
MODULE_LICENSE
("GPL");

	@linux/generic/files/drivers/net/phy/mvsw61xx.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/mii.h
>

19 
	~<löux/phy.h
>

20 
	~<löux/of.h
>

21 
	~<löux/of_mdio.h
>

22 
	~<löux/dñay.h
>

23 
	~<löux/swôch.h
>

24 
	~<löux/devi˚.h
>

25 
	~<löux/∂©f‹m_devi˚.h
>

27 
	~"mvsw61xx.h
"

29 
MODULE_DESCRIPTION
("Marvell 88E61xx Switch driver");

30 
MODULE_AUTHOR
("Claudio Leite <leitec@staticky.com>");

31 
MODULE_AUTHOR
("Nikita Nazarenko <nnazarenko@radiofid.com>");

32 
MODULE_LICENSE
("GPL v2");

33 
MODULE_ALIAS
("platform:mvsw61xx");

48 
	$mvsw61xx_waô_mask_øw
(
mii_bus
 *
bus
, 
addr
,

49 
ªg
, 
u16
 
mask
, u16 
vÆ
)

51 
i
 = 100;

52 
u16
 
r
;

55 
r
 = 
bus
->
	`ªad
(bus, 
addr
, 
ªg
);

56 i‡((
r
 & 
mask
Ë=
vÆ
)

58 } --
i
 > 0);

60  -
ETIMEDOUT
;

61 
	}
}

63 
u16


64 
	$r16
(
mii_bus
 *
bus
, 
boﬁ
 
ödúe˘
, 
ba£_addr
, 
addr
, 
ªg
)

66 
u16
 
öd_addr
;

68 i‡(!
ödúe˘
)

69  
bus
->
	`ªad
(bus, 
addr
, 
ªg
);

72 
	`mvsw61xx_waô_mask_øw
(
bus
, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

73 
MV_INDIRECT_INPROGRESS
, 0);

76 
öd_addr
 = 
MV_INDIRECT_READ
 | (
addr
 << 
MV_INDIRECT_ADDR_S
Ë| 
ªg
;

77 
bus
->
	`wrôe
(bus, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

78 
öd_addr
);

81 
	`mvsw61xx_waô_mask_øw
(
bus
, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

82 
MV_INDIRECT_INPROGRESS
, 0);

85  
bus
->
	`ªad
(bus, 
ba£_addr
, 
MV_INDIRECT_REG_DATA
);

86 
	}
}

89 
	$w16
(
mii_bus
 *
bus
, 
boﬁ
 
ödúe˘
, 
ba£_addr
, 
addr
,

90 
ªg
, 
u16
 
vÆ
)

92 
u16
 
öd_addr
;

94 i‡(!
ödúe˘
) {

95 
bus
->
	`wrôe
(bus, 
addr
, 
ªg
, 
vÆ
);

100 
	`mvsw61xx_waô_mask_øw
(
bus
, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

101 
MV_INDIRECT_INPROGRESS
, 0);

104 
bus
->
	`wrôe
(bus, 
ba£_addr
, 
MV_INDIRECT_REG_DATA
, 
vÆ
);

107 
	`mvsw61xx_waô_mask_øw
(
bus
, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

108 
MV_INDIRECT_INPROGRESS
, 0);

111 
öd_addr
 = 
MV_INDIRECT_WRITE
 | (
addr
 << 
MV_INDIRECT_ADDR_S
Ë| 
ªg
;

112 
bus
->
	`wrôe
(bus, 
ba£_addr
, 
MV_INDIRECT_REG_CMD
,

113 
öd_addr
);

114 
	}
}

118 
ölöe
 
u16


119 
	$§16
(
swôch_dev
 *
dev
, 
addr
, 
ªg
)

121 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

123  
	`r16
(
°©e
->
bus
, sèã->
is_ödúe˘
, sèã->
ba£_addr
, 
addr
, 
ªg
);

124 
	}
}

126 
ölöe
 

127 
	$sw16
(
swôch_dev
 *
dev
, 
addr
, 
ªg
, 
u16
 
vÆ
)

129 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

131 
	`w16
(
°©e
->
bus
, sèã->
is_ödúe˘
, sèã->
ba£_addr
, 
addr
, 
ªg
, 
vÆ
);

132 
	}
}

135 
	$mvsw61xx_waô_mask_s
(
swôch_dev
 *
dev
, 
addr
,

136 
ªg
, 
u16
 
mask
, u16 
vÆ
)

138 
i
 = 100;

139 
u16
 
r
;

142 
r
 = 
	`§16
(
dev
, 
addr
, 
ªg
Ë& 
mask
;

143 i‡(
r
 =
vÆ
)

145 } --
i
 > 0);

147  -
ETIMEDOUT
;

148 
	}
}

151 
	$mvsw61xx_mdio_ªad
(
swôch_dev
 *
dev
, 
addr
, 
ªg
)

153 
	`sw16
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_OP
),

154 
MV_INDIRECT_READ
 | (
addr
 << 
MV_INDIRECT_ADDR_S
Ë| 
ªg
);

156 i‡(
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_OP
),

157 
MV_INDIRECT_INPROGRESS
, 0) < 0)

158  -
ETIMEDOUT
;

160  
	`§16
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_DATA
));

161 
	}
}

164 
	$mvsw61xx_mdio_wrôe
(
swôch_dev
 *
dev
, 
addr
, 
ªg
, 
u16
 
vÆ
)

166 
	`sw16
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_DATA
), 
vÆ
);

168 
	`sw16
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_OP
),

169 
MV_INDIRECT_WRITE
 | (
addr
 << 
MV_INDIRECT_ADDR_S
Ë| 
ªg
);

171  
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBAL2REG
(
SMI_OP
),

172 
MV_INDIRECT_INPROGRESS
, 0) < 0;

173 
	}
}

176 
	$mvsw61xx_mdio_∑ge_ªad
(
swôch_dev
 *
dev
, 
p‹t
, 
∑ge
, 
ªg
)

178 
ªt
;

180 
	`mvsw61xx_mdio_wrôe
(
dev
, 
p‹t
, 
MII_MV_PAGE
, 
∑ge
);

181 
ªt
 = 
	`mvsw61xx_mdio_ªad
(
dev
, 
p‹t
, 
ªg
);

182 
	`mvsw61xx_mdio_wrôe
(
dev
, 
p‹t
, 
MII_MV_PAGE
, 0);

184  
ªt
;

185 
	}
}

188 
	$mvsw61xx_mdio_∑ge_wrôe
(
swôch_dev
 *
dev
, 
p‹t
, 
∑ge
, 
ªg
,

189 
u16
 
vÆ
)

191 
	`mvsw61xx_mdio_wrôe
(
dev
, 
p‹t
, 
MII_MV_PAGE
, 
∑ge
);

192 
	`mvsw61xx_mdio_wrôe
(
dev
, 
p‹t
, 
ªg
, 
vÆ
);

193 
	`mvsw61xx_mdio_wrôe
(
dev
, 
p‹t
, 
MII_MV_PAGE
, 0);

194 
	}
}

197 
	$mvsw61xx_gë_p‹t_mask
(
swôch_dev
 *
dev
,

198 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

200 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

201 *
buf
 = 
°©e
->buf;

202 
p‹t
, 
Àn
, 
i
;

203 
u16
 
ªg
;

205 
p‹t
 = 
vÆ
->
p‹t_vœn
;

206 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
VLANMAP
, 
p‹t
)Ë& 
MV_PORTS_MASK
;

208 
Àn
 = 
	`•rötf
(
buf
, "0x%04x: ", 
ªg
);

210 
i
 = 0; i < 
MV_PORTS
; i++) {

211 i‡(
ªg
 & (1 << 
i
))

212 
Àn
 +
	`•rötf
(
buf
 +Üí, "%d ", 
i
);

213 i‡(
i
 =
p‹t
)

214 
Àn
 +
	`•rötf
(
buf
 +Üí, "(%dË", 
i
);

217 
vÆ
->
vÆue
.
s
 = 
buf
;

220 
	}
}

223 
	$mvsw61xx_gë_p‹t_qmode
(
swôch_dev
 *
dev
,

224 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

226 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

228 
vÆ
->
vÆue
.
i
 = 
°©e
->
p‹ts
[vÆ->
p‹t_vœn
].
qmode
;

231 
	}
}

234 
	$mvsw61xx_£t_p‹t_qmode
(
swôch_dev
 *
dev
,

235 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

237 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

239 
°©e
->
p‹ts
[
vÆ
->
p‹t_vœn
].
qmode
 = vÆ->
vÆue
.
i
;

242 
	}
}

245 
	$mvsw61xx_gë_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

247 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

249 *
vÆ
 = 
°©e
->
p‹ts
[
p‹t
].
pvid
;

252 
	}
}

255 
	$mvsw61xx_£t_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
)

257 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

259 i‡(
vÆ
 < 0 || vÆ >
MV_VLANS
)

260  -
EINVAL
;

262 
°©e
->
p‹ts
[
p‹t
].
pvid
 = (
u16
)
vÆ
;

265 
	}
}

268 
	$mvsw61xx_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

269 
swôch_p‹t_lök
 *
lök
)

271 
u16
 
°©us
, 
•ìd
;

273 
°©us
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
STATUS
, 
p‹t
));

275 
lök
->lök = 
°©us
 & 
MV_PORT_STATUS_LINK
;

276 i‡(!
lök
->link)

279 
lök
->
du∂ex
 = 
°©us
 & 
MV_PORT_STATUS_FDX
;

281 
•ìd
 = (
°©us
 & 
MV_PORT_STATUS_SPEED_MASK
) >>

282 
MV_PORT_STATUS_SPEED_SHIFT
;

284 
•ìd
) {

285 
MV_PORT_STATUS_SPEED_10
:

286 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

288 
MV_PORT_STATUS_SPEED_100
:

289 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

291 
MV_PORT_STATUS_SPEED_1000
:

292 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

297 
	}
}

299 
	$mvsw61xx_gë_vœn_p‹ts
(
swôch_dev
 *
dev
,

300 
swôch_vÆ
 *
vÆ
)

302 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

303 
i
, 
j
, 
mode
, 
vno
;

305 
vno
 = 
vÆ
->
p‹t_vœn
;

307 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

308  -
EINVAL
;

310 
i
 = 0, 
j
 = 0; i < 
dev
->
p‹ts
; i++) {

311 i‡(
°©e
->
vœns
[
vno
].
mask
 & (1 << 
i
)) {

312 
vÆ
->
vÆue
.
p‹ts
[
j
].
id
 = 
i
;

314 
mode
 = (
°©e
->
vœns
[
vno
].
p‹t_mode
 >> (
i
 * 4)) & 0xf;

315 i‡(
mode
 =
MV_VTUCTL_EGRESS_TAGGED
)

316 
vÆ
->
vÆue
.
p‹ts
[
j
].
Êags
 =

317 (1 << 
SWITCH_PORT_FLAG_TAGGED
);

319 
vÆ
->
vÆue
.
p‹ts
[
j
].
Êags
 = 0;

321 
j
++;

325 
vÆ
->
Àn
 = 
j
;

328 
	}
}

330 
	$mvsw61xx_£t_vœn_p‹ts
(
swôch_dev
 *
dev
,

331 
swôch_vÆ
 *
vÆ
)

333 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

334 
i
, 
mode
, 
≤o
, 
vno
;

336 
vno
 = 
vÆ
->
p‹t_vœn
;

338 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

339  -
EINVAL
;

341 
°©e
->
vœns
[
vno
].
mask
 = 0;

342 
°©e
->
vœns
[
vno
].
p‹t_mode
 = 0;

343 
°©e
->
vœns
[
vno
].
p‹t_s°©e
 = 0;

345 if(
°©e
->
vœns
[
vno
].
vid
 == 0)

346 
°©e
->
vœns
[
vno
].
vid
 = vno;

348 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

349 
≤o
 = 
vÆ
->
vÆue
.
p‹ts
[
i
].
id
;

351 
°©e
->
vœns
[
vno
].
mask
 |(1 << 
≤o
);

352 i‡(
vÆ
->
vÆue
.
p‹ts
[
i
].
Êags
 &

353 (1 << 
SWITCH_PORT_FLAG_TAGGED
))

354 
mode
 = 
MV_VTUCTL_EGRESS_TAGGED
;

356 
mode
 = 
MV_VTUCTL_EGRESS_UNTAGGED
;

358 
°©e
->
vœns
[
vno
].
p‹t_mode
 |
mode
 << (
≤o
 * 4);

359 
°©e
->
vœns
[
vno
].
p‹t_s°©e
 |=

360 
MV_STUCTL_STATE_FORWARDING
 << (
≤o
 * 4 + 2);

367 
i
 = 0; i < 
dev
->
p‹ts
; i++)

368 i‡(!(
°©e
->
vœns
[
vno
].
mask
 & (1 << 
i
)))

369 
°©e
->
vœns
[
vno
].
p‹t_mode
 |=

370 
MV_VTUCTL_DISCARD
 << (
i
 * 4);

373 
	}
}

375 
	$mvsw61xx_gë_vœn_p‹t_ba£d
(
swôch_dev
 *
dev
,

376 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

378 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

379 
vno
 = 
vÆ
->
p‹t_vœn
;

381 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

382  -
EINVAL
;

384 i‡(
°©e
->
vœns
[
vno
].
p‹t_ba£d
)

385 
vÆ
->
vÆue
.
i
 = 1;

387 
vÆ
->
vÆue
.
i
 = 0;

390 
	}
}

392 
	$mvsw61xx_£t_vœn_p‹t_ba£d
(
swôch_dev
 *
dev
,

393 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

395 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

396 
vno
 = 
vÆ
->
p‹t_vœn
;

398 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

399  -
EINVAL
;

401 i‡(
vÆ
->
vÆue
.
i
 == 1)

402 
°©e
->
vœns
[
vno
].
p‹t_ba£d
 = 
åue
;

404 
°©e
->
vœns
[
vno
].
p‹t_ba£d
 = 
Ál£
;

407 
	}
}

409 
	$mvsw61xx_gë_vid
(
swôch_dev
 *
dev
,

410 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

412 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

413 
vno
 = 
vÆ
->
p‹t_vœn
;

415 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

416  -
EINVAL
;

418 
vÆ
->
vÆue
.
i
 = 
°©e
->
vœns
[
vno
].
vid
;

421 
	}
}

423 
	$mvsw61xx_£t_vid
(
swôch_dev
 *
dev
,

424 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

426 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

427 
vno
 = 
vÆ
->
p‹t_vœn
;

429 i‡(
vno
 <0 || vnÿ>
dev
->
vœns
)

430  -
EINVAL
;

432 
°©e
->
vœns
[
vno
].
vid
 = 
vÆ
->
vÆue
.
i
;

435 
	}
}

437 
	$mvsw61xx_gë_íabÀ_vœn
(
swôch_dev
 *
dev
,

438 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

440 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

442 
vÆ
->
vÆue
.
i
 = 
°©e
->
vœn_íabÀd
;

445 
	}
}

447 
	$mvsw61xx_£t_íabÀ_vœn
(
swôch_dev
 *
dev
,

448 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

450 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

452 
°©e
->
vœn_íabÀd
 = 
vÆ
->
vÆue
.
i
;

455 
	}
}

457 
	$mvsw61xx_gë_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

458 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

460 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

462 
vÆ
->
vÆue
.
i
 = 
°©e
->
múr‹_rx
;

465 
	}
}

467 
	$mvsw61xx_£t_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

468 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

470 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

472 
°©e
->
múr‹_rx
 = 
vÆ
->
vÆue
.
i
;

475 
	}
}

477 
	$mvsw61xx_gë_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

478 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

480 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

482 
vÆ
->
vÆue
.
i
 = 
°©e
->
múr‹_tx
;

485 
	}
}

487 
	$mvsw61xx_£t_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

488 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

490 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

492 
°©e
->
múr‹_tx
 = 
vÆ
->
vÆue
.
i
;

495 
	}
}

497 
	$mvsw61xx_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

498 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

500 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

502 
vÆ
->
vÆue
.
i
 = 
°©e
->
m⁄ô‹_p‹t
;

505 
	}
}

507 
	$mvsw61xx_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

508 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

510 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

512 
°©e
->
m⁄ô‹_p‹t
 = 
vÆ
->
vÆue
.
i
;

515 
	}
}

517 
	$mvsw61xx_gë_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

518 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

520 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

522 
vÆ
->
vÆue
.
i
 = 
°©e
->
sour˚_p‹t
;

525 
	}
}

527 
	$mvsw61xx_£t_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

528 c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

530 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

532 
°©e
->
sour˚_p‹t
 = 
vÆ
->
vÆue
.
i
;

535 
	}
}

537 
	$mvsw61xx_vtu_¥ogøm
(
swôch_dev
 *
dev
)

539 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

540 
u16
 
v1
, 
v2
, 
s1
, 
s2
;

541 
i
;

544 
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

545 
MV_VTUOP_INPROGRESS
, 0);

546 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

547 
MV_VTUOP_INPROGRESS
 | 
MV_VTUOP_PURGE
);

550 
i
 = 1; i < 
dev
->
vœns
; i++) {

551 i‡(
°©e
->
vœns
[
i
].
mask
 == 0 ||

552 
°©e
->
vœns
[
i
].
vid
 == 0 ||

553 
°©e
->
vœns
[
i
].
p‹t_ba£d
 =
åue
)

556 
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

557 
MV_VTUOP_INPROGRESS
, 0);

560 
s1
 = (
u16
Ë(
°©e
->
vœns
[
i
].
p‹t_s°©e
 & 0xffff);

561 
s2
 = (
u16
Ë((
°©e
->
vœns
[
i
].
p‹t_s°©e
 >> 16) & 0xffff);

563 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_VID
), 
MV_VTU_VID_VALID
);

564 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_SID
), 
i
);

565 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA1
), 
s1
);

566 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA2
), 
s2
);

567 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA3
), 0);

569 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

570 
MV_VTUOP_INPROGRESS
 | 
MV_VTUOP_STULOAD
);

571 
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

572 
MV_VTUOP_INPROGRESS
, 0);

575 
v1
 = (
u16
Ë(
°©e
->
vœns
[
i
].
p‹t_mode
 & 0xffff);

576 
v2
 = (
u16
Ë((
°©e
->
vœns
[
i
].
p‹t_mode
 >> 16) & 0xffff);

578 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_VID
),

579 
MV_VTU_VID_VALID
 | 
°©e
->
vœns
[
i
].
vid
);

580 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_SID
), 
i
);

581 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_FID
), 
i
);

582 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA1
), 
v1
);

583 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA2
), 
v2
);

584 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_DATA3
), 0);

586 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

587 
MV_VTUOP_INPROGRESS
 | 
MV_VTUOP_LOAD
);

588 
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBALREG
(
VTU_OP
),

589 
MV_VTUOP_INPROGRESS
, 0);

593 
	}
}

595 
	$mvsw61xx_vœn_p‹t_c⁄fig
(
swôch_dev
 *
dev
, 
vno
)

597 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

598 
i
, 
mode
;

600 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

601 i‡(!(
°©e
->
vœns
[
vno
].
mask
 & (1 << 
i
)))

604 
mode
 = (
°©e
->
vœns
[
vno
].
p‹t_mode
 >> (
i
 * 4)) & 0xf;

606 if(
mode
 !
MV_VTUCTL_EGRESS_TAGGED
)

607 
°©e
->
p‹ts
[
i
].
pvid
 = sèã->
vœns
[
vno
].
vid
;

609 i‡(
°©e
->
vœns
[
vno
].
p‹t_ba£d
) {

610 
°©e
->
p‹ts
[
i
].
mask
 |°©e->
vœns
[
vno
].mask;

611 
°©e
->
p‹ts
[
i
].
fdb
 = 
vno
;

614 
°©e
->
p‹ts
[
i
].
qmode
 = 
MV_8021Q_MODE_SECURE
;

616 
	}
}

618 
	$mvsw61xx_upd©e_°©e
(
swôch_dev
 *
dev
)

620 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

621 
i
;

622 
u16
 
ªg
;

624 i‡(!
°©e
->
ªgi°îed
)

625  -
EINVAL
;

637 
ªg
 = 
	`§16
(
dev
, 
	`MV_GLOBAL2REG
(
SDET_POLARITY
));

639 i‡(
°©e
->
vœn_íabÀd
)

640 
ªg
 |
MV_8021Q_VLAN_ONLY
;

642 
ªg
 &~
MV_8021Q_VLAN_ONLY
;

644 
	`sw16
(
dev
, 
	`MV_GLOBAL2REG
(
SDET_POLARITY
), 
ªg
);

654 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

655 
°©e
->
p‹ts
[
i
].
mask
 = 0;

656 
°©e
->
p‹ts
[
i
].
qmode
 = 
MV_8021Q_MODE_DISABLE
;

659 
i
 = 0; i < 
dev
->
vœns
; i++)

660 
	`mvsw61xx_vœn_p‹t_c⁄fig
(
dev
, 
i
);

662 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

663 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
VLANID
, 
i
)Ë& ~
MV_PVID_MASK
;

664 
ªg
 |
°©e
->
p‹ts
[
i
].
pvid
;

665 
	`sw16
(
dev
, 
	`MV_PORTREG
(
VLANID
, 
i
), 
ªg
);

667 
°©e
->
p‹ts
[
i
].
mask
 &= ~(1 << i);

670 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL1
, 
i
)Ë& ~
MV_FDB_HI_MASK
;

671 
ªg
 |(
°©e
->
p‹ts
[
i
].
fdb
 >> 
MV_FDB_HI_SHIFT
) &

672 
MV_FDB_HI_MASK
;

673 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL1
, 
i
), 
ªg
);

675 
ªg
 = ((
°©e
->
p‹ts
[
i
].
fdb
 & 0xfË<< 
MV_FDB_LO_SHIFT
) |

676 
°©e
->
p‹ts
[
i
].
mask
;

677 
	`sw16
(
dev
, 
	`MV_PORTREG
(
VLANMAP
, 
i
), 
ªg
);

679 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
i
)) &

680 ~
MV_8021Q_MODE_MASK
;

681 
ªg
 |
°©e
->
p‹ts
[
i
].
qmode
 << 
MV_8021Q_MODE_SHIFT
;

682 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
i
), 
ªg
);

685 
	`mvsw61xx_vtu_¥ogøm
(
dev
);

689 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

690 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
i
));

691 
ªg
 &~(
MV_MIRROR_RX_SRC_MASK
 | 
MV_MIRROR_TX_SRC_MASK
);

692 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
i
), 
ªg
);

694 
ªg
 = 
	`§16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
));

695 
ªg
 |
MV_MIRROR_RX_DEST_MASK
 | 
MV_MIRROR_TX_DEST_MASK
;

696 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
), 
ªg
);

699 i‡(
°©e
->
múr‹_rx
) {

701 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
°©e
->
sour˚_p‹t
)Ë& ~
MV_MIRROR_RX_SRC_MASK
;

702 
ªg
 |
°©e
->
múr‹_rx
 << 
MV_MIRROR_RX_SRC_SHIFT
;

703 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
°©e
->
sour˚_p‹t
), 
ªg
);

705 
ªg
 = 
	`§16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
)Ë& ~
MV_MIRROR_RX_DEST_MASK
;

706 
ªg
 |
°©e
->
m⁄ô‹_p‹t
 << 
MV_MIRROR_RX_DEST_SHIFT
;

707 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
), 
ªg
);

710 i‡(
°©e
->
múr‹_tx
) {

712 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
°©e
->
sour˚_p‹t
)Ë& ~
MV_MIRROR_TX_SRC_MASK
;

713 
ªg
 |
°©e
->
múr‹_tx
 << 
MV_MIRROR_TX_SRC_SHIFT
;

714 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL2
, 
°©e
->
sour˚_p‹t
), 
ªg
);

716 
ªg
 = 
	`§16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
)Ë& ~
MV_MIRROR_TX_DEST_MASK
;

717 
ªg
 |
°©e
->
m⁄ô‹_p‹t
 << 
MV_MIRROR_TX_DEST_SHIFT
;

718 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
MONITOR_CTRL
), 
ªg
);

722 
	}
}

724 
	$mvsw61xx_≠∂y
(
swôch_dev
 *
dev
)

726  
	`mvsw61xx_upd©e_°©e
(
dev
);

727 
	}
}

729 
	$mvsw61xx_íabÀ_£rdes
(
swôch_dev
 *
dev
)

731 
bm¸
 = 
	`mvsw61xx_mdio_∑ge_ªad
(
dev
, 
MV_REG_FIBER_SERDES
,

732 
MV_PAGE_FIBER_SERDES
, 
MII_BMCR
);

733 i‡(
bm¸
 < 0)

736 i‡(
bm¸
 & 
BMCR_PDOWN
)

737 
	`mvsw61xx_mdio_∑ge_wrôe
(
dev
, 
MV_REG_FIBER_SERDES
,

738 
MV_PAGE_FIBER_SERDES
, 
MII_BMCR
,

739 
bm¸
 & ~
BMCR_PDOWN
);

740 
	}
}

742 
	$_mvsw61xx_ª£t
(
swôch_dev
 *
dev
, 
boﬁ
 
fuŒ
)

744 
mvsw61xx_°©e
 *
°©e
 = 
	`gë_°©e
(
dev
);

745 
i
;

746 
u16
 
ªg
;

749 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

750 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL
, 
i
)) &

751 ~
MV_PORTCTRL_FORWARDING
;

752 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL
, 
i
), 
ªg
);

755 
ªg
 = 
	`§16
(
dev
, 
	`MV_GLOBALREG
(
CONTROL
)Ë| 
MV_CONTROL_RESET
;

757 
	`sw16
(
dev
, 
	`MV_GLOBALREG
(
CONTROL
), 
ªg
);

758 i‡(
	`mvsw61xx_waô_mask_s
(
dev
, 
	`MV_GLOBALREG
(
CONTROL
),

759 
MV_CONTROL_RESET
, 0) < 0)

760  -
ETIMEDOUT
;

762 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

763 
°©e
->
p‹ts
[
i
].
fdb
 = 0;

764 
°©e
->
p‹ts
[
i
].
qmode
 = 0;

765 
°©e
->
p‹ts
[
i
].
mask
 = 0;

766 
°©e
->
p‹ts
[
i
].
pvid
 = 0;

769 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
PHYCTL
, 
i
)Ë& ~
MV_PHYCTL_FC_MASK
;

770 
ªg
 |
MV_PHYCTL_FC_DISABLE
;

771 
	`sw16
(
dev
, 
	`MV_PORTREG
(
PHYCTL
, 
i
), 
ªg
);

774 
	`sw16
(
dev
, 
	`MV_PORTREG
(
ASSOC
, 
i
), (1 << i));

777 i‡(
fuŒ
 && 
i
 < 5) {

778 
	`mvsw61xx_mdio_wrôe
(
dev
, 
i
, 
MII_MV_SPEC_CTRL
,

779 
MV_SPEC_MDI_CROSS_AUTO
 |

780 
MV_SPEC_ENERGY_DETECT
 |

781 
MV_SPEC_DOWNSHIFT_COUNTER
);

782 
	`mvsw61xx_mdio_wrôe
(
dev
, 
i
, 
MII_BMCR
, 
BMCR_RESET
 |

783 
BMCR_ANENABLE
 | 
BMCR_FULLDPLX
 |

784 
BMCR_SPEED1000
);

788 i‡(
fuŒ
 && 
i
 >5 && 
°©e
->
modñ
 =
MV_IDENT_VALUE_6176
) {

789 
u16
 
°s
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
STATUS
, 
i
));

790 
u16
 
mode
 = 
°s
 & 
MV_PORT_STATUS_CMODE_MASK
;

792 i‡(
mode
 =
MV_PORT_STATUS_CMODE_100BASE_X
 ||

793 
mode
 =
MV_PORT_STATUS_CMODE_1000BASE_X
 ||

794 
mode
 =
MV_PORT_STATUS_CMODE_SGMII
) {

795 
	`mvsw61xx_íabÀ_£rdes
(
dev
);

800 
i
 = 0; i < 
dev
->
vœns
; i++) {

801 
°©e
->
vœns
[
i
].
p‹t_ba£d
 = 
Ál£
;

802 
°©e
->
vœns
[
i
].
mask
 = 0;

803 
°©e
->
vœns
[
i
].
vid
 = 0;

804 
°©e
->
vœns
[
i
].
p‹t_mode
 = 0;

805 
°©e
->
vœns
[
i
].
p‹t_s°©e
 = 0;

808 
°©e
->
vœn_íabÀd
 = 0;

810 
°©e
->
múr‹_rx
 = 
Ál£
;

811 
°©e
->
múr‹_tx
 = 
Ál£
;

812 
°©e
->
sour˚_p‹t
 = 0;

813 
°©e
->
m⁄ô‹_p‹t
 = 0;

815 
	`mvsw61xx_upd©e_°©e
(
dev
);

818 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

819 
ªg
 = 
	`§16
(
dev
, 
	`MV_PORTREG
(
CONTROL
, 
i
)) |

820 
MV_PORTCTRL_FORWARDING
;

821 
	`sw16
(
dev
, 
	`MV_PORTREG
(
CONTROL
, 
i
), 
ªg
);

825 
	}
}

827 
	$mvsw61xx_ª£t
(
swôch_dev
 *
dev
)

829  
	`_mvsw61xx_ª£t
(
dev
, 
Ál£
);

830 
	}
}

833 
	mMVSW61XX_VLAN_PORT_BASED
,

834 
	mMVSW61XX_VLAN_ID
,

838 
	mMVSW61XX_PORT_MASK
,

839 
	mMVSW61XX_PORT_QMODE
,

842 c⁄° 
swôch_©å
 
	gmvsw61xx_globÆ
[] = {

844 .
ty≥
 = 
SWITCH_TYPE_INT
,

845 .
	g«me
 = "enable_vlan",

846 .
	gdes¸ùti⁄
 = "Enable 802.1q VLAN support",

847 .
	ggë
 = 
mvsw61xx_gë_íabÀ_vœn
,

848 .
	g£t
 = 
mvsw61xx_£t_íabÀ_vœn
,

851 .
	gty≥
 = 
SWITCH_TYPE_INT
,

852 .
	g«me
 = "enable_mirror_rx",

853 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

854 .
	g£t
 = 
mvsw61xx_£t_múr‹_rx_íabÀ
,

855 .
	ggë
 = 
mvsw61xx_gë_múr‹_rx_íabÀ
,

856 .
	gmax
 = 1

859 .
	gty≥
 = 
SWITCH_TYPE_INT
,

860 .
	g«me
 = "enable_mirror_tx",

861 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

862 .
	g£t
 = 
mvsw61xx_£t_múr‹_tx_íabÀ
,

863 .
	ggë
 = 
mvsw61xx_gë_múr‹_tx_íabÀ
,

864 .
	gmax
 = 1

867 .
	gty≥
 = 
SWITCH_TYPE_INT
,

868 .
	g«me
 = "mirror_monitor_port",

869 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

870 .
	g£t
 = 
mvsw61xx_£t_múr‹_m⁄ô‹_p‹t
,

871 .
	ggë
 = 
mvsw61xx_gë_múr‹_m⁄ô‹_p‹t
,

872 .
	gmax
 = 
MV_PORTS
 - 1

875 .
	gty≥
 = 
SWITCH_TYPE_INT
,

876 .
	g«me
 = "mirror_source_port",

877 .
	gdes¸ùti⁄
 = "Mirror sourceÖort",

878 .
	g£t
 = 
mvsw61xx_£t_múr‹_sour˚_p‹t
,

879 .
	ggë
 = 
mvsw61xx_gë_múr‹_sour˚_p‹t
,

880 .
	gmax
 = 
MV_PORTS
 - 1

884 c⁄° 
swôch_©å
 
	gmvsw61xx_vœn
[] = {

885 [
MVSW61XX_VLAN_PORT_BASED
] = {

886 .
id
 = 
MVSW61XX_VLAN_PORT_BASED
,

887 .
	gty≥
 = 
SWITCH_TYPE_INT
,

888 .
	g«me
 = "port_based",

889 .
	gdes¸ùti⁄
 = "UseÖort-based (non-802.1q) VLAN only",

890 .
	ggë
 = 
mvsw61xx_gë_vœn_p‹t_ba£d
,

891 .
	g£t
 = 
mvsw61xx_£t_vœn_p‹t_ba£d
,

893 [
MVSW61XX_VLAN_ID
] = {

894 .
id
 = 
MVSW61XX_VLAN_ID
,

895 .
	gty≥
 = 
SWITCH_TYPE_INT
,

896 .
	g«me
 = "vid",

897 .
	gdes¸ùti⁄
 = "Get/set VLAN ID",

898 .
	ggë
 = 
mvsw61xx_gë_vid
,

899 .
	g£t
 = 
mvsw61xx_£t_vid
,

903 c⁄° 
swôch_©å
 
	gmvsw61xx_p‹t
[] = {

904 [
MVSW61XX_PORT_MASK
] = {

905 .
id
 = 
MVSW61XX_PORT_MASK
,

906 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

907 .
	gdes¸ùti⁄
 = "Port-based VLAN mask",

908 .
	g«me
 = "mask",

909 .
	ggë
 = 
mvsw61xx_gë_p‹t_mask
,

910 .
	g£t
 = 
NULL
,

912 [
MVSW61XX_PORT_QMODE
] = {

913 .
id
 = 
MVSW61XX_PORT_QMODE
,

914 .
	gty≥
 = 
SWITCH_TYPE_INT
,

915 .
	gdes¸ùti⁄
 = "802.1q mode: 0=off/1=fallback/2=check/3=secure",

916 .
	g«me
 = "qmode",

917 .
	ggë
 = 
mvsw61xx_gë_p‹t_qmode
,

918 .
	g£t
 = 
mvsw61xx_£t_p‹t_qmode
,

922 c⁄° 
swôch_dev_›s
 
	gmvsw61xx_›s
 = {

923 .
©å_globÆ
 = {

924 .
©å
 = 
mvsw61xx_globÆ
,

925 .
	gn_©å
 = 
ARRAY_SIZE
(
mvsw61xx_globÆ
),

927 .
	g©å_vœn
 = {

928 .
©å
 = 
mvsw61xx_vœn
,

929 .
	gn_©å
 = 
ARRAY_SIZE
(
mvsw61xx_vœn
),

931 .
	g©å_p‹t
 = {

932 .
©å
 = 
mvsw61xx_p‹t
,

933 .
	gn_©å
 = 
ARRAY_SIZE
(
mvsw61xx_p‹t
),

935 .
	ggë_p‹t_lök
 = 
mvsw61xx_gë_p‹t_lök
,

936 .
	ggë_p‹t_pvid
 = 
mvsw61xx_gë_p‹t_pvid
,

937 .
	g£t_p‹t_pvid
 = 
mvsw61xx_£t_p‹t_pvid
,

938 .
	ggë_vœn_p‹ts
 = 
mvsw61xx_gë_vœn_p‹ts
,

939 .
	g£t_vœn_p‹ts
 = 
mvsw61xx_£t_vœn_p‹ts
,

940 .
	g≠∂y_c⁄fig
 = 
mvsw61xx_≠∂y
,

941 .
	gª£t_swôch
 = 
mvsw61xx_ª£t
,

946 
	$mvsw61xx_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

948 
mvsw61xx_°©e
 *
°©e
;

949 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

950 
devi˚_node
 *
mdio
;

951 *
modñ_°r
;

952 
u32
 
vÆ
;

953 
îr
;

955 
°©e
 = 
	`kzÆloc
((*°©e), 
GFP_KERNEL
);

956 i‡(!
°©e
)

957  -
ENOMEM
;

959 
mdio
 = 
	`of_∑r£_ph™dÀ
(
≈
, "mii-bus", 0);

960 i‡(!
mdio
) {

961 
	`dev_îr
(&
pdev
->
dev
, "Couldn't get MII bus handle\n");

962 
îr
 = -
ENODEV
;

963 
out_îr
;

966 
°©e
->
bus
 = 
	`of_mdio_föd_bus
(
mdio
);

967 i‡(!
°©e
->
bus
) {

968 
	`dev_îr
(&
pdev
->
dev
, "Couldn't find MII bus from handle\n");

969 
îr
 = -
ENODEV
;

970 
out_îr
;

973 
°©e
->
is_ödúe˘
 = 
	`of_¥›îty_ªad_boﬁ
(
≈
, "is-indirect");

975 i‡(
°©e
->
is_ödúe˘
) {

976 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "ªg", &
vÆ
)) {

977 
	`dev_îr
(&
pdev
->
dev
, "SwitcháddressÇot specified\n");

978 
îr
 = -
ENODEV
;

979 
out_îr
;

982 
°©e
->
ba£_addr
 = 
vÆ
;

984 
°©e
->
ba£_addr
 = 
MV_BASE
;

987 
°©e
->
modñ
 = 
	`r16
(°©e->
bus
, sèã->
is_ödúe˘
, sèã->
ba£_addr
,

988 
	`MV_PORTREG
(
IDENT
, 0)Ë& 
MV_IDENT_MASK
;

990 
°©e
->
modñ
) {

991 
MV_IDENT_VALUE_6171
:

992 
modñ_°r
 = 
MV_IDENT_STR_6171
;

994 
MV_IDENT_VALUE_6172
:

995 
modñ_°r
 = 
MV_IDENT_STR_6172
;

997 
MV_IDENT_VALUE_6176
:

998 
modñ_°r
 = 
MV_IDENT_STR_6176
;

1000 
MV_IDENT_VALUE_6352
:

1001 
modñ_°r
 = 
MV_IDENT_STR_6352
;

1004 
	`dev_îr
(&
pdev
->
dev
, "No compatible switch foundát 0x%02x\n",

1005 
°©e
->
ba£_addr
);

1006 
îr
 = -
ENODEV
;

1007 
out_îr
;

1010 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
°©e
);

1011 
	`dev_öfo
(&
pdev
->
dev
, "Found %†© %s:%02x\n", 
modñ_°r
,

1012 
°©e
->
bus
->
id
, sèã->
ba£_addr
);

1014 
	`dev_öfo
(&
pdev
->
dev
, "Using %sdirectáddressing\n",

1015 (
°©e
->
is_ödúe˘
 ? "in" : ""));

1017 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "˝u-p‹t-0", &
vÆ
)) {

1018 
	`dev_îr
(&
pdev
->
dev
, "CPUÖortÇot set\n");

1019 
îr
 = -
ENODEV
;

1020 
out_îr
;

1023 
°©e
->
˝u_p‹t0
 = 
vÆ
;

1025 i‡(!
	`of_¥›îty_ªad_u32
(
≈
, "˝u-p‹t-1", &
vÆ
))

1026 
°©e
->
˝u_p‹t1
 = 
vÆ
;

1028 
°©e
->
˝u_p‹t1
 = -1;

1030 
°©e
->
dev
.
vœns
 = 
MV_VLANS
;

1031 
°©e
->
dev
.
˝u_p‹t
 = sèã->
˝u_p‹t0
;

1032 
°©e
->
dev
.
p‹ts
 = 
MV_PORTS
;

1033 
°©e
->
dev
.
«me
 = 
modñ_°r
;

1034 
°©e
->
dev
.
›s
 = &
mvsw61xx_›s
;

1035 
°©e
->
dev
.
Æüs
 = 
	`dev_«me
(&
pdev
->dev);

1037 
	`_mvsw61xx_ª£t
(&
°©e
->
dev
, 
åue
);

1039 
îr
 = 
	`ªgi°î_swôch
(&
°©e
->
dev
, 
NULL
);

1040 i‡(
îr
 < 0)

1041 
out_îr
;

1043 
°©e
->
ªgi°îed
 = 
åue
;

1046 
out_îr
:

1047 
	`k‰ì
(
°©e
);

1048  
îr
;

1049 
	}
}

1052 
	$mvsw61xx_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1054 
mvsw61xx_°©e
 *
°©e
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1056 i‡(
°©e
->
ªgi°îed
)

1057 
	`uƒegi°î_swôch
(&
°©e
->
dev
);

1059 
	`k‰ì
(
°©e
);

1062 
	}
}

1064 c⁄° 
of_devi˚_id
 
	gmvsw61xx_m©ch
[] = {

1065 { .
com∑tibÀ
 = "marvell,88e6171" },

1066 { .
	gcom∑tibÀ
 = "marvell,88e6172" },

1067 { .
	gcom∑tibÀ
 = "marvell,88e6176" },

1068 { .
	gcom∑tibÀ
 = "marvell,88e6352" },

1071 
MODULE_DEVICE_TABLE
(
of
, 
mvsw61xx_m©ch
);

1073 
∂©f‹m_drivî
 
	gmvsw61xx_drivî
 = {

1074 .
¥obe
 = 
mvsw61xx_¥obe
,

1075 .
	gªmove
 = 
mvsw61xx_ªmove
,

1076 .
	gdrivî
 = {

1077 .
«me
 = "mvsw61xx",

1078 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
mvsw61xx_m©ch
),

1079 .
	gow√r
 = 
THIS_MODULE
,

1083 
__öô
 
	$mvsw61xx_moduÀ_öô
()

1085  
	`∂©f‹m_drivî_ªgi°î
(&
mvsw61xx_drivî
);

1086 
	}
}

1087 
œã_öôˇŒ
(
mvsw61xx_moduÀ_öô
);

1089 
__exô
 
	$mvsw61xx_moduÀ_exô
()

1091 
	`∂©f‹m_drivî_uƒegi°î
(&
mvsw61xx_drivî
);

1092 
	}
}

1093 
moduÀ_exô
(
mvsw61xx_moduÀ_exô
);

	@linux/generic/files/drivers/net/phy/mvsw61xx.h

14 #i‚de‡
__MVSW61XX_H


15 
	#__MVSW61XX_H


	)

17 
	#MV_PORTS
 7

	)

18 
	#MV_PORTS_MASK
 ((1 << 
MV_PORTS
Ë- 1)

	)

20 
	#MV_BASE
 0x10

	)

22 
	#MV_SWITCHPORT_BASE
 0x10

	)

23 
	#MV_SWITCHPORT
(
_n
Ë(
MV_SWITCHPORT_BASE
 + (_n))

	)

24 
	#MV_SWITCHREGS
 (
MV_BASE
 + 0xb)

	)

26 
	#MV_VLANS
 64

	)

29 
	mMV_PORT_STATUS
 = 0x00,

30 
	mMV_PORT_PHYCTL
 = 0x01,

31 
	mMV_PORT_JAMCTL
 = 0x02,

32 
	mMV_PORT_IDENT
 = 0x03,

33 
	mMV_PORT_CONTROL
 = 0x04,

34 
	mMV_PORT_CONTROL1
 = 0x05,

35 
	mMV_PORT_VLANMAP
 = 0x06,

36 
	mMV_PORT_VLANID
 = 0x07,

37 
	mMV_PORT_CONTROL2
 = 0x08,

38 
	mMV_PORT_ASSOC
 = 0x0b,

39 
	mMV_PORT_RX_DISCARD_LOW
 = 0x10,

40 
	mMV_PORT_RX_DISCARD_HIGH
 = 0x11,

41 
	mMV_PORT_IN_FILTERED
 = 0x12,

42 
	mMV_PORT_OUT_ACCEPTED
 = 0x13,

44 
	#MV_PORTREG
(
_ty≥
, 
_p‹t
Ë
	`MV_SWITCHPORT
(_p‹t), 
MV_PORT_
##
	)
_ty≥

47 
	mMV_PORT_STATUS_FDX
 = (1 << 10),

48 
	mMV_PORT_STATUS_LINK
 = (1 << 11),

52 
	mMV_PORT_STATUS_CMODE_100BASE_X
 = 0x8,

53 
	mMV_PORT_STATUS_CMODE_1000BASE_X
 = 0x9,

54 
	mMV_PORT_STATUS_CMODE_SGMII
 = 0xa,

57 
	#MV_PORT_STATUS_CMODE_MASK
 0xf

	)

60 
	mMV_PORT_STATUS_SPEED_10
 = 0x00,

61 
	mMV_PORT_STATUS_SPEED_100
 = 0x01,

62 
	mMV_PORT_STATUS_SPEED_1000
 = 0x02,

64 
	#MV_PORT_STATUS_SPEED_SHIFT
 8

	)

65 
	#MV_PORT_STATUS_SPEED_MASK
 (3 << 8)

	)

68 
	mMV_PORTCTRL_DISABLED
 = (0 << 0),

69 
	mMV_PORTCTRL_BLOCKING
 = (1 << 0),

70 
	mMV_PORTCTRL_LEARNING
 = (2 << 0),

71 
	mMV_PORTCTRL_FORWARDING
 = (3 << 0),

72 
	mMV_PORTCTRL_VLANTUN
 = (1 << 7),

73 
	mMV_PORTCTRL_EGRESS
 = (1 << 12),

76 
	#MV_PHYCTL_FC_MASK
 (3 << 6)

	)

79 
	mMV_PHYCTL_FC_ENABLE
 = (3 << 6),

80 
	mMV_PHYCTL_FC_DISABLE
 = (1 << 6),

84 
	mMV_8021Q_EGRESS_UNMODIFIED
 = 0x00,

85 
	mMV_8021Q_EGRESS_UNTAGGED
 = 0x01,

86 
	mMV_8021Q_EGRESS_TAGGED
 = 0x02,

87 
	mMV_8021Q_EGRESS_ADDTAG
 = 0x03,

90 
	#MV_8021Q_MODE_SHIFT
 10

	)

91 
	#MV_8021Q_MODE_MASK
 (0x3 << 
MV_8021Q_MODE_SHIFT
)

	)

94 
	mMV_8021Q_MODE_DISABLE
 = 0x00,

95 
	mMV_8021Q_MODE_FALLBACK
 = 0x01,

96 
	mMV_8021Q_MODE_CHECK
 = 0x02,

97 
	mMV_8021Q_MODE_SECURE
 = 0x03,

101 
	mMV_8021Q_VLAN_ONLY
 = (1 << 15),

104 
	#MV_PORTASSOC_MONITOR
 (1 << 15)

	)

107 
	mMV_SWITCH_ATU_FID0
 = 0x01,

108 
	mMV_SWITCH_ATU_FID1
 = 0x02,

109 
	mMV_SWITCH_ATU_SID
 = 0x03,

110 
	mMV_SWITCH_CTRL
 = 0x04,

111 
	mMV_SWITCH_ATU_CTRL
 = 0x0a,

112 
	mMV_SWITCH_ATU_OP
 = 0x0b,

113 
	mMV_SWITCH_ATU_DATA
 = 0x0c,

114 
	mMV_SWITCH_ATU_MAC0
 = 0x0d,

115 
	mMV_SWITCH_ATU_MAC1
 = 0x0e,

116 
	mMV_SWITCH_ATU_MAC2
 = 0x0f,

117 
	mMV_SWITCH_GLOBAL
 = 0x1b,

118 
	mMV_SWITCH_GLOBAL2
 = 0x1c,

120 
	#MV_SWITCHREG
(
_ty≥
Ë
MV_SWITCHREGS
, 
MV_SWITCH_
##
	)
_ty≥

123 
	mMV_SWITCHCTL_EEIE
 = (1 << 0),

124 
	mMV_SWITCHCTL_PHYIE
 = (1 << 1),

125 
	mMV_SWITCHCTL_ATUDONE
 = (1 << 2),

126 
	mMV_SWITCHCTL_ATUIE
 = (1 << 3),

127 
	mMV_SWITCHCTL_CTRMODE
 = (1 << 8),

128 
	mMV_SWITCHCTL_RELOAD
 = (1 << 9),

129 
	mMV_SWITCHCTL_MSIZE
 = (1 << 10),

130 
	mMV_SWITCHCTL_DROP
 = (1 << 13),

134 
	#MV_ATUCTL_AGETIME_MIN
 16

	)

135 
	#MV_ATUCTL_AGETIME_MAX
 4080

	)

136 
	#MV_ATUCTL_AGETIME
(
_n
Ë((((_nË/ 16Ë& 0xffË<< 4)

	)

137 
	mMV_ATUCTL_ATU_256
 = (0 << 12),

138 
	mMV_ATUCTL_ATU_512
 = (1 << 12),

139 
	mMV_ATUCTL_ATU_1K
 = (2 << 12),

140 
	mMV_ATUCTL_ATUMASK
 = (3 << 12),

141 
	mMV_ATUCTL_NO_LEARN
 = (1 << 14),

142 
	mMV_ATUCTL_RESET
 = (1 << 15),

146 
	#MV_ATUOP_DBNUM
(
_n
Ë((_nË& 0x0f)

	)

147 
	mMV_ATUOP_NOOP
 = (0 << 12),

148 
	mMV_ATUOP_FLUSH_ALL
 = (1 << 12),

149 
	mMV_ATUOP_FLUSH_U
 = (2 << 12),

150 
	mMV_ATUOP_LOAD_DB
 = (3 << 12),

151 
	mMV_ATUOP_GET_NEXT
 = (4 << 12),

152 
	mMV_ATUOP_FLUSH_DB
 = (5 << 12),

153 
	mMV_ATUOP_FLUSH_DB_UU
 = (6 << 12),

154 
	mMV_ATUOP_INPROGRESS
 = (1 << 15),

158 
	mMV_GLOBAL_STATUS
 = 0x00,

159 
	mMV_GLOBAL_ATU_FID
 = 0x01,

160 
	mMV_GLOBAL_VTU_FID
 = 0x02,

161 
	mMV_GLOBAL_VTU_SID
 = 0x03,

162 
	mMV_GLOBAL_CONTROL
 = 0x04,

163 
	mMV_GLOBAL_VTU_OP
 = 0x05,

164 
	mMV_GLOBAL_VTU_VID
 = 0x06,

165 
	mMV_GLOBAL_VTU_DATA1
 = 0x07,

166 
	mMV_GLOBAL_VTU_DATA2
 = 0x08,

167 
	mMV_GLOBAL_VTU_DATA3
 = 0x09,

168 
	mMV_GLOBAL_MONITOR_CTRL
 = 0x1a,

169 
	mMV_GLOBAL_CONTROL2
 = 0x1c,

171 
	#MV_GLOBALREG
(
_ty≥
Ë
MV_SWITCH_GLOBAL
, 
MV_GLOBAL_
##
	)
_ty≥

174 
	mMV_GLOBAL2_SMI_OP
 = 0x18,

175 
	mMV_GLOBAL2_SMI_DATA
 = 0x19,

176 
	mMV_GLOBAL2_SDET_POLARITY
 = 0x1d,

178 
	#MV_GLOBAL2REG
(
_ty≥
Ë
MV_SWITCH_GLOBAL2
, 
MV_GLOBAL2_
##
	)
_ty≥

181 
	mMV_VTU_VID_VALID
 = (1 << 12),

185 
	mMV_VTUOP_PURGE
 = (1 << 12),

186 
	mMV_VTUOP_LOAD
 = (3 << 12),

187 
	mMV_VTUOP_INPROGRESS
 = (1 << 15),

188 
	mMV_VTUOP_STULOAD
 = (5 << 12),

189 
	mMV_VTUOP_VTU_GET_NEXT
 = (4 << 12),

190 
	mMV_VTUOP_STU_GET_NEXT
 = (6 << 12),

191 
	mMV_VTUOP_GET_VIOLATION
 = (7 << 12),

195 
	mMV_CONTROL_RESET
 = (1 << 15),

196 
	mMV_CONTROL_PPU_ENABLE
 = (1 << 14),

200 
	mMV_VTUCTL_EGRESS_UNMODIFIED
 = (0 << 0),

201 
	mMV_VTUCTL_EGRESS_UNTAGGED
 = (1 << 0),

202 
	mMV_VTUCTL_EGRESS_TAGGED
 = (2 << 0),

203 
	mMV_VTUCTL_DISCARD
 = (3 << 0),

207 
	mMV_STUCTL_STATE_DISABLED
 = (0 << 0),

208 
	mMV_STUCTL_STATE_BLOCKING
 = (1 << 0),

209 
	mMV_STUCTL_STATE_LEARNING
 = (2 << 0),

210 
	mMV_STUCTL_STATE_FORWARDING
 = (3 << 0),

214 
	mMV_INDIRECT_REG_CMD
 = 0,

215 
	mMV_INDIRECT_REG_DATA
 = 1,

219 
	mMV_INDIRECT_INPROGRESS
 = 0x8000,

220 
	mMV_INDIRECT_WRITE
 = 0x9400,

221 
	mMV_INDIRECT_READ
 = 0x9800,

223 
	#MV_INDIRECT_ADDR_S
 5

	)

225 
	#MV_IDENT_MASK
 0xfff0

	)

227 
	#MV_IDENT_VALUE_6171
 0x1710

	)

228 
	#MV_IDENT_STR_6171
 "MV88E6171"

	)

230 
	#MV_IDENT_VALUE_6172
 0x1720

	)

231 
	#MV_IDENT_STR_6172
 "MV88E6172"

	)

233 
	#MV_IDENT_VALUE_6176
 0x1760

	)

234 
	#MV_IDENT_STR_6176
 "MV88E6176"

	)

236 
	#MV_IDENT_VALUE_6352
 0x3520

	)

237 
	#MV_IDENT_STR_6352
 "MV88E6352"

	)

239 
	#MV_PVID_MASK
 0x0fff

	)

241 
	#MV_FDB_HI_MASK
 0x00ff

	)

242 
	#MV_FDB_LO_MASK
 0xf000

	)

243 
	#MV_FDB_HI_SHIFT
 4

	)

244 
	#MV_FDB_LO_SHIFT
 12

	)

246 
	#MV_MIRROR_RX_DEST_MASK
 0xf000

	)

247 
	#MV_MIRROR_TX_DEST_MASK
 0x0f00

	)

248 
	#MV_MIRROR_RX_DEST_SHIFT
 12

	)

249 
	#MV_MIRROR_TX_DEST_SHIFT
 8

	)

251 
	#MV_MIRROR_RX_SRC_SHIFT
 4

	)

252 
	#MV_MIRROR_RX_SRC_MASK
 (1 << 
MV_MIRROR_RX_SRC_SHIFT
)

	)

253 
	#MV_MIRROR_TX_SRC_SHIFT
 5

	)

254 
	#MV_MIRROR_TX_SRC_MASK
 (1 << 
MV_MIRROR_TX_SRC_SHIFT
)

	)

257 
	#MII_MV_SPEC_CTRL
 16

	)

259 
	mMV_SPEC_MDI_CROSS_AUTO
 = (0x6 << 4),

260 
	mMV_SPEC_ENERGY_DETECT
 = (0x3 << 8),

261 
	mMV_SPEC_DOWNSHIFT_COUNTER
 = (0x3 << 12),

264 
	#MII_MV_PAGE
 22

	)

266 
	#MV_REG_FIBER_SERDES
 0xf

	)

267 
	#MV_PAGE_FIBER_SERDES
 0x1

	)

269 
	smvsw61xx_°©e
 {

270 
swôch_dev
 
	mdev
;

271 
mii_bus
 *
	mbus
;

272 
	mba£_addr
;

273 
u16
 
	mmodñ
;

275 
boﬁ
 
	mªgi°îed
;

276 
boﬁ
 
	mis_ödúe˘
;

278 
	m˝u_p‹t0
;

279 
	m˝u_p‹t1
;

281 
	mvœn_íabÀd
;

282 
	sp‹t_°©e
 {

283 
u16
 
	mfdb
;

284 
u16
 
	mpvid
;

285 
u16
 
	mmask
;

286 
u8
 
	mqmode
;

287 } 
	mp‹ts
[
MV_PORTS
];

289 
	svœn_°©e
 {

290 
boﬁ
 
	mp‹t_ba£d
;

292 
u16
 
	mmask
;

293 
u16
 
	mvid
;

294 
u32
 
	mp‹t_mode
;

295 
u32
 
	mp‹t_s°©e
;

296 } 
	mvœns
[
MV_VLANS
];

299 
boﬁ
 
	mmúr‹_rx
;

300 
boﬁ
 
	mmúr‹_tx
;

301 
	msour˚_p‹t
;

302 
	mm⁄ô‹_p‹t
;

304 
	mbuf
[128];

307 
	#gë_°©e
(
_dev
Ë
	`c⁄èöî_of
((_dev), 
mvsw61xx_°©e
, 
dev
)

	)

	@linux/generic/files/drivers/net/phy/mvswitch.c

9 
	~<löux/kî√l.h
>

10 
	~<löux/°rög.h
>

11 
	~<löux/î∫o.h
>

12 
	~<löux/uni°d.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/öãºu±.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/dñay.h
>

17 
	~<löux/√tdevi˚.h
>

18 
	~<löux/ëhîdevi˚.h
>

19 
	~<löux/skbuff.h
>

20 
	~<löux/•ölock.h
>

21 
	~<löux/mm.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/mii.h
>

24 
	~<löux/ëhtoﬁ.h
>

25 
	~<löux/phy.h
>

26 
	~<löux/if_vœn.h
>

28 
	~<asm/io.h
>

29 
	~<asm/úq.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~"mvswôch.h
"

35 
	#HEADER_MODE
 1

	)

37 
MODULE_DESCRIPTION
("Marvell 88E6060 Switch driver");

38 
MODULE_AUTHOR
("Felix Fietkau");

39 
MODULE_LICENSE
("GPL");

41 
	#MVSWITCH_MAGIC
 0x88E6060

	)

43 
	smvswôch_¥iv
 {

44 
√tdev_„©uªs_t
 
	m‹ig_„©uªs
;

45 
u8
 
	mvœns
[16];

48 
	#to_mvsw
(
_phy
Ë((
mvswôch_¥iv
 *Ë(_phy)->
¥iv
)

	)

50 
ölöe
 
u16


51 
	$r16
(
phy_devi˚
 *
phydev
, 
addr
, 
ªg
)

53 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

55  
bus
->
	`ªad
(bus, 
addr
, 
ªg
);

56 
	}
}

58 
ölöe
 

59 
	$w16
(
phy_devi˚
 *
phydev
, 
addr
, 
ªg
, 
u16
 
vÆ
)

61 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

63 
bus
->
	`wrôe
(bus, 
addr
, 
ªg
, 
vÆ
);

64 
	}
}

67 
sk_buff
 *

68 
	$mvswôch_m™gÀ_tx
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

70 
mvswôch_¥iv
 *
¥iv
;

71 *
buf
 = 
NULL
;

72 
u16
 
vid
;

74 
¥iv
 = 
dev
->
phy_±r
;

75 i‡(
	`u∆ikñy
(!
¥iv
))

76 
îr‹
;

78 i‡(
	`u∆ikñy
(
skb
->
Àn
 < 16))

79 
îr‹
;

81 #ifde‡
HEADER_MODE


82 i‡(
	`__vœn_hwac˚l_gë_èg
(
skb
, &
vid
))

83 
îr‹
;

85 i‡(
	`skb_˛⁄ed
(
skb
Ë|| (skb->
Àn
 <62Ë|| (
	`skb_hódroom
(skbË< 
MV_HEADER_SIZE
)) {

86 i‡(
	`pskb_ex∑nd_hód
(
skb
, 
MV_HEADER_SIZE
, (skb->
Àn
 < 62 ? 62 - skb->À¿: 0), 
GFP_ATOMIC
))

87 
îr‹_ex∑nd
;

88 i‡(
skb
->
Àn
 < 62)

89 
skb
->
Àn
 = 62;

91 
buf
 = 
	`skb_push
(
skb
, 
MV_HEADER_SIZE
);

93 i‡(
	`__vœn_gë_èg
(
skb
, &
vid
))

94 
îr‹
;

96 i‡(
	`u∆ikñy
((
vid
 > 15 || !
¥iv
->
vœns
[vid])))

97 
îr‹
;

99 i‡(
skb
->
Àn
 <= 64) {

100 i‡(
	`pskb_ex∑nd_hód
(
skb
, 0, 64 + 
MV_TRAILER_SIZE
 - skb->
Àn
, 
GFP_ATOMIC
))

101 
îr‹_ex∑nd
;

103 
buf
 = 
skb
->
d©a
 + 64;

104 
skb
->
Àn
 = 64 + 
MV_TRAILER_SIZE
;

106 i‡(
	`skb_˛⁄ed
(
skb
Ë|| 
	`u∆ikñy
(
	`skb_èûroom
(skb) < 4)) {

107 i‡(
	`pskb_ex∑nd_hód
(
skb
, 0, 4, 
GFP_ATOMIC
))

108 
îr‹_ex∑nd
;

110 
buf
 = 
	`skb_put
(
skb
, 4);

114 
	`memmove
(
skb
->
d©a
 + 4, skb->data, 12);

115 
skb
->
d©a
 += 4;

116 
skb
->
Àn
 -= 4;

117 
skb
->
mac_hódî
 += 4;

120 i‡(!
buf
)

121 
îr‹
;

124 #ifde‡
HEADER_MODE


126 *((
__be16
 *Ë
buf
Ë
	`˝u_to_be16
(

127 ((
vid
 << 
MV_HEADER_VLAN_S
Ë& 
MV_HEADER_VLAN_M
) |

128 ((
¥iv
->
vœns
[
vid
] << 
MV_HEADER_PORTS_S
Ë& 
MV_HEADER_PORTS_M
)

132 *((
__be32
 *Ë
buf
Ë
	`˝u_to_be32
((

133 (
MV_TRAILER_OVERRIDE
 << 
MV_TRAILER_FLAGS_S
) |

134 ((
¥iv
->
vœns
[
vid
] & 
MV_TRAILER_PORTS_M
Ë<< 
MV_TRAILER_PORTS_S
)

138  
skb
;

140 
îr‹_ex∑nd
:

141 i‡(
	`√t_øãlimô
())

142 
	`¥ötk
("%s: faûedÅÿex∑nd/upd©êskb f‹Åhêswôch\n", 
dev
->
«me
);

144 
îr‹
:

146 
	`dev_k‰ì_skb_™y
(
skb
);

147  
NULL
;

148 
	}
}

151 
	$mvswôch_m™gÀ_rx
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

153 
mvswôch_¥iv
 *
¥iv
;

154 *
buf
;

155 
vœn
 = -1;

156 
i
;

158 
¥iv
 = 
dev
->
phy_±r
;

159 i‡(
	`WARN_ON_ONCE
(!
¥iv
))

162 #ifde‡
HEADER_MODE


163 
buf
 = 
skb
->
d©a
;

164 
	`skb_puŒ
(
skb
, 
MV_HEADER_SIZE
);

166 
buf
 = 
skb
->
d©a
 + skb->
Àn
 - 
MV_TRAILER_SIZE
;

167 i‡(
buf
[0] != 0x80)

172 
i
 = 0; i < 
	`ARRAY_SIZE
(
¥iv
->
vœns
); i++) {

173 i‡((1 << 
buf
[1]Ë& 
¥iv
->
vœns
[
i
])

174 
vœn
 = 
i
;

177 i‡(
vœn
 == -1)

180 
	`__vœn_hwac˚l_put_èg
(
skb
, 
	`ht⁄s
(
ETH_P_8021Q
), 
vœn
);

181 
	}
}

185 
	$mvswôch_waô_mask
(
phy_devi˚
 *
pdev
, 
addr
, 
ªg
, 
u16
 
mask
, u16 
vÆ
)

187 
i
 = 100;

188 
u16
 
r
;

191 
r
 = 
	`r16
(
pdev
, 
addr
, 
ªg
Ë& 
mask
;

192 i‡(
r
 =
vÆ
)

194 } --
i
 > 0);

195  -
ETIMEDOUT
;

196 
	}
}

199 
	$mvswôch_c⁄fig_öô
(
phy_devi˚
 *
pdev
)

201 
mvswôch_¥iv
 *
¥iv
 = 
	`to_mvsw
(
pdev
);

202 
√t_devi˚
 *
dev
 = 
pdev
->
©èched_dev
;

203 
u8
 
vlm≠
 = 0;

204 
i
;

206 i‡(!
dev
)

207  -
EINVAL
;

209 
	`¥ötk
("%s: M¨vñ»88E6060 PHY drivîáâached.\n", 
dev
->
«me
);

210 
pdev
->
suµ‹ãd
 = 
ADVERTISED_100ba£T_FuŒ
;

211 
pdev
->
advîtisög
 = 
ADVERTISED_100ba£T_FuŒ
;

212 
dev
->
phy_±r
 = 
¥iv
;

213 
pdev
->
úq
 = 
PHY_POLL
;

214 #ifde‡
HEADER_MODE


215 
dev
->
Êags
 |
IFF_PROMISC
;

219 
i
 = 0; i < 
MV_PORTS
; i++)

220 
¥iv
->
vœns
[(
i
 =
MV_WANPORT
 ? 2 : 1)] |= (1 << i);

223 
i
 = 0; i < 
MV_PORTS
; i++)

224 
	`w16
(
pdev
, 
	`MV_PORTREG
(
CONTROL
, 
i
), 0x00);

226 
	`m¶ìp
(2);

229 
	`w16
(
pdev
, 
	`MV_SWITCHREG
(
ATU_CTRL
), 
MV_ATUCTL_RESET
);

231 
i
 = 
	`mvswôch_waô_mask
(
pdev
, 
	`MV_SWITCHREG
(
ATU_CTRL
), 
MV_ATUCTL_RESET
, 0);

232 i‡(
i
 < 0) {

233 
	`¥ötk
("%s: Timeouàwaôög f‹ÅhêswôchÅÿª£t.\n", 
dev
->
«me
);

234  
i
;

238 
	`w16
(
pdev
, 
	`MV_SWITCHREG
(
ATU_CTRL
),

239 
MV_ATUCTL_NO_LEARN
 |

240 
MV_ATUCTL_ATU_1K
 |

241 
	`MV_ATUCTL_AGETIME
(
MV_ATUCTL_AGETIME_MIN
)

245 
	`w16
(
pdev
, 
	`MV_PORTREG
(
CONTROL
, 
MV_CPUPORT
),

246 #ifde‡
HEADER_MODE


247 
MV_PORTCTRL_HEADER
 |

249 
MV_PORTCTRL_RXTR
 |

250 
MV_PORTCTRL_TXTR
 |

252 
MV_PORTCTRL_ENABLED


255 
	`m¶ìp
(2);

256 
i
 = 0; i < 
MV_PORTS
; i++) {

257 
u8
 
pvid
 = 0;

258 
j
;

260 
vlm≠
 = 0;

263 
j
 = 0; j < 
	`ARRAY_SIZE
(
¥iv
->
vœns
); j++) {

264 i‡(
¥iv
->
vœns
[
j
] & (1 << 
i
)) {

265 
vlm≠
 = 
¥iv
->
vœns
[
j
];

266 
pvid
 = 
j
;

270 i‡(!
vlm≠
)

274 
vlm≠
 |(1 << 
MV_CPUPORT
);

277 
vlm≠
 &~(1 << 
i
);

280 
	`w16
(
pdev
, 
	`MV_PORTREG
(
VLANMAP
, 
i
),

281 
	`MV_PORTVLAN_PORTS
(
vlm≠
) |

282 
	`MV_PORTVLAN_ID
(
i
)

286 
	`w16
(
pdev
, 
	`MV_PORTREG
(
CONTROL
, 
i
),

287 
MV_PORTCTRL_ENABLED


291 
	`w16
(
pdev
, 
	`MV_PORTREG
(
VLANMAP
, 
MV_CPUPORT
),

292 
	`MV_PORTVLAN_ID
(
MV_CPUPORT
)

296 
i
 = 0; i <
MV_PORTS
; i++) {

297 
	`w16
(
pdev
, 
	`MV_PORTREG
(
ASSOC
, 
i
),

298 
	`MV_PORTASSOC_PORTS
(1 << 
i
)

303 
	`w16
(
pdev
, 
	`MV_SWITCHREG
(
CTRL
),

304 
MV_SWITCHCTL_MSIZE
 |

305 
MV_SWITCHCTL_DROP


308 
dev
->
ëh_m™gÀ_rx
 = 
mvswôch_m™gÀ_rx
;

309 
dev
->
ëh_m™gÀ_tx
 = 
mvswôch_m™gÀ_tx
;

310 
¥iv
->
‹ig_„©uªs
 = 
dev
->
„©uªs
;

312 #ifde‡
HEADER_MODE


313 
dev
->
¥iv_Êags
 |
IFF_NO_IP_ALIGN
;

314 
dev
->
„©uªs
 |
NETIF_F_HW_VLAN_CTAG_RX
 | 
NETIF_F_HW_VLAN_CTAG_TX
;

316 
dev
->
„©uªs
 |
NETIF_F_HW_VLAN_CTAG_RX
;

320 
	}
}

323 
	$mvswôch_ªad_°©us
(
phy_devi˚
 *
pdev
)

325 
pdev
->
•ìd
 = 
SPEED_100
;

326 
pdev
->
du∂ex
 = 
DUPLEX_FULL
;

327 
pdev
->
lök
 = 1;

334 
	`mvswôch_waô_mask
(
pdev
, 
	`MV_SWITCHREG
(
ATU_OP
), 
MV_ATUOP_INPROGRESS
, 0);

337 
	`w16
(
pdev
, 
	`MV_SWITCHREG
(
ATU_OP
),

338 
MV_ATUOP_INPROGRESS
 |

339 
MV_ATUOP_FLUSH_ALL


343 
	`mvswôch_waô_mask
(
pdev
, 
	`MV_SWITCHREG
(
ATU_OP
), 
MV_ATUOP_INPROGRESS
, 0);

346 
	}
}

349 
	$mvswôch_™eg_d⁄e
(
phy_devi˚
 *
phydev
)

352 
	}
}

355 
	$mvswôch_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

358 
	}
}

361 
	$mvswôch_dëach
(
phy_devi˚
 *
pdev
)

363 
mvswôch_¥iv
 *
¥iv
 = 
	`to_mvsw
(
pdev
);

364 
√t_devi˚
 *
dev
 = 
pdev
->
©èched_dev
;

366 i‡(!
dev
)

369 
dev
->
phy_±r
 = 
NULL
;

370 
dev
->
ëh_m™gÀ_rx
 = 
NULL
;

371 
dev
->
ëh_m™gÀ_tx
 = 
NULL
;

372 
dev
->
„©uªs
 = 
¥iv
->
‹ig_„©uªs
;

373 
dev
->
¥iv_Êags
 &~
IFF_NO_IP_ALIGN
;

374 
	}
}

377 
	$mvswôch_ªmove
(
phy_devi˚
 *
pdev
)

379 
mvswôch_¥iv
 *
¥iv
 = 
	`to_mvsw
(
pdev
);

381 
	`k‰ì
(
¥iv
);

382 
	}
}

385 
	$mvswôch_¥obe
(
phy_devi˚
 *
pdev
)

387 
mvswôch_¥iv
 *
¥iv
;

389 
¥iv
 = 
	`kzÆloc
((
mvswôch_¥iv
), 
GFP_KERNEL
);

390 i‡(
¥iv
 =
NULL
)

391  -
ENOMEM
;

393 
pdev
->
¥iv
 =Öriv;

396 
	}
}

399 
	$mvswôch_fixup
(
phy_devi˚
 *
dev
)

401 
mii_bus
 *
bus
 = 
dev
->
mdio
.bus;

402 
u16
 
ªg
;

404 i‡(
dev
->
mdio
.
addr
 != 0x10)

407 
ªg
 = 
bus
->
	`ªad
(bus, 
	`MV_PORTREG
(
IDENT
, 0)Ë& 
MV_IDENT_MASK
;

408 i‡(
ªg
 !
MV_IDENT_VALUE
)

411 
dev
->
phy_id
 = 
MVSWITCH_MAGIC
;

413 
	}
}

416 
phy_drivî
 
	gmvswôch_drivî
 = {

417 .
«me
 = "Marvell 88E6060",

418 .
	gphy_id
 = 
MVSWITCH_MAGIC
,

419 .
	gphy_id_mask
 = 0xffffffff,

420 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

421 .
	g¥obe
 = &
mvswôch_¥obe
,

422 .
	gªmove
 = &
mvswôch_ªmove
,

423 .
	gdëach
 = &
mvswôch_dëach
,

424 .
	gc⁄fig_öô
 = &
mvswôch_c⁄fig_öô
,

425 .
	gc⁄fig_™eg
 = &
mvswôch_c⁄fig_™eg
,

426 .
	g™eg_d⁄e
 = &
mvswôch_™eg_d⁄e
,

427 .
	gªad_°©us
 = &
mvswôch_ªad_°©us
,

430 
__öô


431 
	$mvswôch_öô
()

433 
	`phy_ªgi°î_fixup_f‹_id
(
PHY_ANY_ID
, 
mvswôch_fixup
);

434  
	`phy_drivî_ªgi°î
(&
mvswôch_drivî
, 
THIS_MODULE
);

435 
	}
}

437 
__exô


438 
	$mvswôch_exô
()

440 
	`phy_drivî_uƒegi°î
(&
mvswôch_drivî
);

441 
	}
}

443 
moduÀ_öô
(
mvswôch_öô
);

444 
moduÀ_exô
(
mvswôch_exô
);

	@linux/generic/files/drivers/net/phy/mvswitch.h

9 #i‚de‡
__MVSWITCH_H


10 
	#__MVSWITCH_H


	)

12 
	#MV_HEADER_SIZE
 2

	)

13 
	#MV_HEADER_PORTS_M
 0x001f

	)

14 
	#MV_HEADER_PORTS_S
 0

	)

15 
	#MV_HEADER_VLAN_M
 0xf000

	)

16 
	#MV_HEADER_VLAN_S
 12

	)

18 
	#MV_TRAILER_SIZE
 4

	)

19 
	#MV_TRAILER_PORTS_M
 0x1f

	)

20 
	#MV_TRAILER_PORTS_S
 16

	)

21 
	#MV_TRAILER_FLAGS_S
 24

	)

22 
	#MV_TRAILER_OVERRIDE
 0x80

	)

25 
	#MV_PORTS
 5

	)

26 
	#MV_WANPORT
 4

	)

27 
	#MV_CPUPORT
 5

	)

29 
	#MV_BASE
 0x10

	)

31 
	#MV_PHYPORT_BASE
 (
MV_BASE
 + 0x0)

	)

32 
	#MV_PHYPORT
(
_n
Ë(
MV_PHYPORT_BASE
 + (_n))

	)

33 
	#MV_SWITCHPORT_BASE
 (
MV_BASE
 + 0x8)

	)

34 
	#MV_SWITCHPORT
(
_n
Ë(
MV_SWITCHPORT_BASE
 + (_n))

	)

35 
	#MV_SWITCHREGS
 (
MV_BASE
 + 0xf)

	)

38 
	mMV_PHY_CONTROL
 = 0x00,

39 
	mMV_PHY_STATUS
 = 0x01,

40 
	mMV_PHY_IDENT0
 = 0x02,

41 
	mMV_PHY_IDENT1
 = 0x03,

42 
	mMV_PHY_ANEG
 = 0x04,

43 
	mMV_PHY_LINK_ABILITY
 = 0x05,

44 
	mMV_PHY_ANEG_EXPAND
 = 0x06,

45 
	mMV_PHY_XMIT_NEXTP
 = 0x07,

46 
	mMV_PHY_LINK_NEXTP
 = 0x08,

47 
	mMV_PHY_CONTROL1
 = 0x10,

48 
	mMV_PHY_STATUS1
 = 0x11,

49 
	mMV_PHY_INTR_EN
 = 0x12,

50 
	mMV_PHY_INTR_STATUS
 = 0x13,

51 
	mMV_PHY_INTR_PORT
 = 0x14,

52 
	mMV_PHY_RECV_COUNTER
 = 0x16,

53 
	mMV_PHY_LED_PARALLEL
 = 0x16,

54 
	mMV_PHY_LED_STREAM
 = 0x17,

55 
	mMV_PHY_LED_CTRL
 = 0x18,

56 
	mMV_PHY_LED_OVERRIDE
 = 0x19,

57 
	mMV_PHY_VCT_CTRL
 = 0x1a,

58 
	mMV_PHY_VCT_STATUS
 = 0x1b,

59 
	mMV_PHY_CONTROL2
 = 0x1e

61 
	#MV_PHYREG
(
_ty≥
, 
_p‹t
Ë
	`MV_PHYPORT
(_p‹t), 
MV_PHY_
##
	)
_ty≥

64 
	mMV_PORT_STATUS
 = 0x00,

65 
	mMV_PORT_IDENT
 = 0x03,

66 
	mMV_PORT_CONTROL
 = 0x04,

67 
	mMV_PORT_VLANMAP
 = 0x06,

68 
	mMV_PORT_ASSOC
 = 0x0b,

69 
	mMV_PORT_RXCOUNT
 = 0x10,

70 
	mMV_PORT_TXCOUNT
 = 0x11,

72 
	#MV_PORTREG
(
_ty≥
, 
_p‹t
Ë
	`MV_SWITCHPORT
(_p‹t), 
MV_PORT_
##
	)
_ty≥

75 
	mMV_PORTCTRL_BLOCK
 = (1 << 0),

76 
	mMV_PORTCTRL_LEARN
 = (2 << 0),

77 
	mMV_PORTCTRL_ENABLED
 = (3 << 0),

78 
	mMV_PORTCTRL_VLANTUN
 = (1 << 7),

79 
	mMV_PORTCTRL_RXTR
 = (1 << 8),

80 
	mMV_PORTCTRL_HEADER
 = (1 << 11),

81 
	mMV_PORTCTRL_TXTR
 = (1 << 14),

82 
	mMV_PORTCTRL_FORCEFL
 = (1 << 15),

85 
	#MV_PORTVLAN_ID
(
_n
Ë(((_nË& 0xfË<< 12)

	)

86 
	#MV_PORTVLAN_PORTS
(
_n
Ë((_nË& 0x3f)

	)

88 
	#MV_PORTASSOC_PORTS
(
_n
Ë((_nË& 0x1f)

	)

89 
	#MV_PORTASSOC_MONITOR
 (1 << 15)

	)

92 
	mMV_SWITCH_MAC0
 = 0x01,

93 
	mMV_SWITCH_MAC1
 = 0x02,

94 
	mMV_SWITCH_MAC2
 = 0x03,

95 
	mMV_SWITCH_CTRL
 = 0x04,

96 
	mMV_SWITCH_ATU_CTRL
 = 0x0a,

97 
	mMV_SWITCH_ATU_OP
 = 0x0b,

98 
	mMV_SWITCH_ATU_DATA
 = 0x0c,

99 
	mMV_SWITCH_ATU_MAC0
 = 0x0d,

100 
	mMV_SWITCH_ATU_MAC1
 = 0x0e,

101 
	mMV_SWITCH_ATU_MAC2
 = 0x0f,

103 
	#MV_SWITCHREG
(
_ty≥
Ë
MV_SWITCHREGS
, 
MV_SWITCH_
##
	)
_ty≥

106 
	mMV_SWITCHCTL_EEIE
 = (1 << 0),

107 
	mMV_SWITCHCTL_PHYIE
 = (1 << 1),

108 
	mMV_SWITCHCTL_ATUDONE
= (1 << 2),

109 
	mMV_SWITCHCTL_ATUIE
 = (1 << 3),

110 
	mMV_SWITCHCTL_CTRMODE
= (1 << 8),

111 
	mMV_SWITCHCTL_RELOAD
 = (1 << 9),

112 
	mMV_SWITCHCTL_MSIZE
 = (1 << 10),

113 
	mMV_SWITCHCTL_DROP
 = (1 << 13),

117 
	#MV_ATUCTL_AGETIME_MIN
 16

	)

118 
	#MV_ATUCTL_AGETIME_MAX
 4080

	)

119 
	#MV_ATUCTL_AGETIME
(
_n
Ë((((_nË/ 16Ë& 0xffË<< 4)

	)

120 
	mMV_ATUCTL_ATU_256
 = (0 << 12),

121 
	mMV_ATUCTL_ATU_512
 = (1 << 12),

122 
	mMV_ATUCTL_ATU_1K
 = (2 << 12),

123 
	mMV_ATUCTL_ATUMASK
 = (3 << 12),

124 
	mMV_ATUCTL_NO_LEARN
 = (1 << 14),

125 
	mMV_ATUCTL_RESET
 = (1 << 15),

129 
	#MV_ATUOP_DBNUM
(
_n
Ë((_nË& 0x0f)

	)

131 
	mMV_ATUOP_NOOP
 = (0 << 12),

132 
	mMV_ATUOP_FLUSH_ALL
 = (1 << 12),

133 
	mMV_ATUOP_FLUSH_U
 = (2 << 12),

134 
	mMV_ATUOP_LOAD_DB
 = (3 << 12),

135 
	mMV_ATUOP_GET_NEXT
 = (4 << 12),

136 
	mMV_ATUOP_FLUSH_DB
 = (5 << 12),

137 
	mMV_ATUOP_FLUSH_DB_UU
= (6 << 12),

139 
	mMV_ATUOP_INPROGRESS
 = (1 << 15),

142 
	#MV_IDENT_MASK
 0xfff0

	)

143 
	#MV_IDENT_VALUE
 0x0600

	)

	@linux/generic/files/drivers/net/phy/psb6970.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/√tdevi˚.h
>

17 
	~<löux/swôch.h
>

18 
	~<löux/phy.h
>

20 
	#PSB6970_MAX_VLANS
 16

	)

21 
	#PSB6970_NUM_PORTS
 7

	)

22 
	#PSB6970_DEFAULT_PORT_CPU
 6

	)

23 
	#PSB6970_IS_CPU_PORT
(
x
Ë((xË> 4)

	)

25 
	#PHYADDR
(
_ªg
Ë((_ªg >> 5Ë& 0xff), (_ªg & 0x1f)

	)

28 
	#PSB6970_CI0
 0x0100

	)

29 
	#PSB6970_CI0_MASK
 0x000f

	)

30 
	#PSB6970_CI1
 0x0101

	)

31 
	#PSB6970_CI1_VAL
 0x2599

	)

32 
	#PSB6970_CI1_MASK
 0xffff

	)

35 
	#PSB6970_VFxL
(
i
Ë((i)*2+0x10Ë

	)

36 
	#PSB6970_VFxL_VV
 (1 << 15Ë

	)

38 
	#PSB6970_VFxH
(
i
Ë((i)*2+0x11Ë

	)

39 
	#PSB6970_VFxH_TM_SHIFT
 7

	)

42 
	#PSB6970_EC
(
p
Ë(’)*0x20+2Ë

	)

43 
	#PSB6970_EC_IFNTE
 (1 << 1Ë

	)

45 
	#PSB6970_PBVM
(
p
Ë(’)*0x20+3Ë

	)

46 
	#PSB6970_PBVM_VMCE
 (1 << 8)

	)

47 
	#PSB6970_PBVM_AOVTP
 (1 << 9)

	)

48 
	#PSB6970_PBVM_VSD
 (1 << 10)

	)

49 
	#PSB6970_PBVM_VC
 (1 << 11Ë

	)

50 
	#PSB6970_PBVM_TBVE
 (1 << 13Ë

	)

52 
	#PSB6970_DVID
(
p
Ë(’)*0x20+4Ë

	)

54 
	spsb6970_¥iv
 {

55 
swôch_dev
 
	mdev
;

56 
phy_devi˚
 *
	mphy
;

57 
u16
 (*
ªad
Ë(
phy_devi˚
* 
	mphydev
, 
	mªg
);

58 (*
	mwrôe
Ë(
phy_devi˚
* 
	mphydev
, 
	mªg
, 
u16
 
	mvÆ
);

59 
muãx
 
	mªg_muãx
;

62 
boﬁ
 
	mvœn
;

63 
u16
 
	mvœn_id
[
PSB6970_MAX_VLANS
];

64 
u8
 
	mvœn_èbÀ
[
PSB6970_MAX_VLANS
];

65 
u8
 
	mvœn_ègged
;

66 
u16
 
	mpvid
[
PSB6970_NUM_PORTS
];

69 
	#to_psb6970
(
_dev
Ë
	`c⁄èöî_of
(_dev, 
psb6970_¥iv
, 
dev
)

	)

71 
u16
 
	$psb6970_mii_ªad
(
phy_devi˚
 *
phydev
, 
ªg
)

73 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

75  
bus
->
	`ªad
(bus, 
	`PHYADDR
(
ªg
));

76 
	}
}

78 
	$psb6970_mii_wrôe
(
phy_devi˚
 *
phydev
, 
ªg
, 
u16
 
vÆ
)

80 
mii_bus
 *
bus
 = 
phydev
->
mdio
.bus;

82 
bus
->
	`wrôe
(bus, 
	`PHYADDR
(
ªg
), 
vÆ
);

83 
	}
}

86 
	$psb6970_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

87 
swôch_vÆ
 *
vÆ
)

89 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

90 
¥iv
->
vœn
 = !!
vÆ
->
vÆue
.
i
;

92 
	}
}

95 
	$psb6970_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

96 
swôch_vÆ
 *
vÆ
)

98 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

99 
vÆ
->
vÆue
.
i
 = 
¥iv
->
vœn
;

101 
	}
}

103 
	$psb6970_£t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vœn
)

105 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

108 i‡(
vœn
 >
dev
->
vœns
)

109  -
EINVAL
;

111 
¥iv
->
pvid
[
p‹t
] = 
vœn
;

113 
	}
}

115 
	$psb6970_gë_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vœn
)

117 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

118 *
vœn
 = 
¥iv
->
pvid
[
p‹t
];

120 
	}
}

123 
	$psb6970_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

124 
swôch_vÆ
 *
vÆ
)

126 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

127 
¥iv
->
vœn_id
[
vÆ
->
p‹t_vœn
] = vÆ->
vÆue
.
i
;

129 
	}
}

132 
	$psb6970_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

133 
swôch_vÆ
 *
vÆ
)

135 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

136 
vÆ
->
vÆue
.
i
 = 
¥iv
->
vœn_id
[vÆ->
p‹t_vœn
];

138 
	}
}

140 
swôch_©å
 
	gpsb6970_globÆs
[] = {

142 .
ty≥
 = 
SWITCH_TYPE_INT
,

143 .
	g«me
 = "enable_vlan",

144 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

145 .
	g£t
 = 
psb6970_£t_vœn
,

146 .
	ggë
 = 
psb6970_gë_vœn
,

147 .
	gmax
 = 1},

150 
swôch_©å
 
	gpsb6970_p‹t
[] = {

153 
swôch_©å
 
	gpsb6970_vœn
[] = {

155 .
ty≥
 = 
SWITCH_TYPE_INT
,

156 .
	g«me
 = "vid",

157 .
	gdes¸ùti⁄
 = "VLAN ID (0-4094)",

158 .
	g£t
 = 
psb6970_£t_vid
,

159 .
	ggë
 = 
psb6970_gë_vid
,

160 .
	gmax
 = 4094,

164 
	$psb6970_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

166 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

167 
u8
 
p‹ts
 = 
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

168 
i
;

170 
vÆ
->
Àn
 = 0;

171 
i
 = 0; i < 
PSB6970_NUM_PORTS
; i++) {

172 
swôch_p‹t
 *
p
;

174 i‡(!(
p‹ts
 & (1 << 
i
)))

177 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

178 
p
->
id
 = 
i
;

179 i‡(
¥iv
->
vœn_ègged
 & (1 << 
i
))

180 
p
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

182 
p
->
Êags
 = 0;

185 
	}
}

187 
	$psb6970_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

189 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

190 
u8
 *
vt
 = &
¥iv
->
vœn_èbÀ
[
vÆ
->
p‹t_vœn
];

191 
i
, 
j
;

193 *
vt
 = 0;

194 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

195 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

197 i‡(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
))

198 
¥iv
->
vœn_ègged
 |(1 << 
p
->
id
);

200 
¥iv
->
vœn_ègged
 &~(1 << 
p
->
id
);

201 
¥iv
->
pvid
[
p
->
id
] = 
vÆ
->
p‹t_vœn
;

205 
j
 = 0; j < 
PSB6970_MAX_VLANS
; j++) {

206 i‡(
j
 =
vÆ
->
p‹t_vœn
)

208 
¥iv
->
vœn_èbÀ
[
j
] &~(1 << 
p
->
id
);

212 *
vt
 |1 << 
p
->
id
;

215 
	}
}

217 
	$psb6970_hw_≠∂y
(
swôch_dev
 *
dev
)

219 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

220 
i
, 
j
;

222 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

224 i‡(
¥iv
->
vœn
) {

226 
j
 = 0; j < 
PSB6970_MAX_VLANS
; j++) {

227 
u8
 
vp
 = 
¥iv
->
vœn_èbÀ
[
j
];

229 i‡(
vp
) {

230 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_VFxL
(
j
),

231 
PSB6970_VFxL_VV
 | 
¥iv
->
vœn_id
[
j
]);

232 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_VFxH
(
j
),

233 ((
vp
 & 
¥iv
->

234 
vœn_ègged
) <<

235 
PSB6970_VFxH_TM_SHIFT
Ë| 
vp
);

237 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_VFxL
(
j
), 0);

243 
i
 = 0; i < 
PSB6970_NUM_PORTS
; i++) {

244 
dvid
 = 1, 
pbvm
 = 0x7‡| 
PSB6970_PBVM_VSD
, 
ec
 = 0;

246 i‡(
¥iv
->
vœn
) {

247 
ec
 = 
PSB6970_EC_IFNTE
;

248 
dvid
 = 
¥iv
->
vœn_id
[¥iv->
pvid
[
i
]];

249 
pbvm
 |
PSB6970_PBVM_TBVE
 | 
PSB6970_PBVM_VMCE
;

251 i‡((
i
 << 1Ë& 
¥iv
->
vœn_ègged
)

252 
pbvm
 |
PSB6970_PBVM_AOVTP
 | 
PSB6970_PBVM_VC
;

255 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_PBVM
(
i
), 
pbvm
);

257 i‡(!
	`PSB6970_IS_CPU_PORT
(
i
)) {

258 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_EC
(
i
), 
ec
);

259 
¥iv
->
	`wrôe
’riv->
phy
, 
	`PSB6970_DVID
(
i
), 
dvid
);

263 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

265 
	}
}

267 
	$psb6970_ª£t_swôch
(
swôch_dev
 *
dev
)

269 
psb6970_¥iv
 *
¥iv
 = 
	`to_psb6970
(
dev
);

270 
i
;

272 
	`muãx_lock
(&
¥iv
->
ªg_muãx
);

274 
	`mem£t
(&
¥iv
->
vœn
, 0, (
psb6970_¥iv
) -

275 
	`off£tof
(
psb6970_¥iv
, 
vœn
));

277 
i
 = 0; i < 
PSB6970_MAX_VLANS
; i++)

278 
¥iv
->
vœn_id
[
i
] = i;

280 
	`muãx_u∆ock
(&
¥iv
->
ªg_muãx
);

282  
	`psb6970_hw_≠∂y
(
dev
);

283 
	}
}

285 c⁄° 
swôch_dev_›s
 
	gpsb6970_›s
 = {

286 .
©å_globÆ
 = {

287 .
©å
 = 
psb6970_globÆs
,

288 .
	gn_©å
 = 
ARRAY_SIZE
(
psb6970_globÆs
),

290 .
	g©å_p‹t
 = {

291 .
©å
 = 
psb6970_p‹t
,

292 .
	gn_©å
 = 
ARRAY_SIZE
(
psb6970_p‹t
),

294 .
	g©å_vœn
 = {

295 .
©å
 = 
psb6970_vœn
,

296 .
	gn_©å
 = 
ARRAY_SIZE
(
psb6970_vœn
),

298 .
	ggë_p‹t_pvid
 = 
psb6970_gë_pvid
,

299 .
	g£t_p‹t_pvid
 = 
psb6970_£t_pvid
,

300 .
	ggë_vœn_p‹ts
 = 
psb6970_gë_p‹ts
,

301 .
	g£t_vœn_p‹ts
 = 
psb6970_£t_p‹ts
,

302 .
	g≠∂y_c⁄fig
 = 
psb6970_hw_≠∂y
,

303 .
	gª£t_swôch
 = 
psb6970_ª£t_swôch
,

306 
	$psb6970_c⁄fig_öô
(
phy_devi˚
 *
pdev
)

308 
psb6970_¥iv
 *
¥iv
;

309 
√t_devi˚
 *
dev
 = 
pdev
->
©èched_dev
;

310 
swôch_dev
 *
swdev
;

311 
ªt
;

313 
¥iv
 = 
	`kzÆloc
((
psb6970_¥iv
), 
GFP_KERNEL
);

314 i‡(
¥iv
 =
NULL
)

315  -
ENOMEM
;

317 
¥iv
->
phy
 = 
pdev
;

319 i‡(
pdev
->
mdio
.
addr
 == 0)

320 
	`¥ötk
(
KERN_INFO
 "%s:Ösb6970 switch driveráttached.\n",

321 
pdev
->
©èched_dev
->
«me
);

323 i‡(
pdev
->
mdio
.
addr
 != 0) {

324 
	`k‰ì
(
¥iv
);

328 
pdev
->
suµ‹ãd
 =Ödev->
advîtisög
 = 
SUPPORTED_100ba£T_FuŒ
;

330 
	`muãx_öô
(&
¥iv
->
ªg_muãx
);

331 
¥iv
->
ªad
 = 
psb6970_mii_ªad
;

332 
¥iv
->
wrôe
 = 
psb6970_mii_wrôe
;

334 
pdev
->
¥iv
 =Öriv;

336 
swdev
 = &
¥iv
->
dev
;

337 
swdev
->
˝u_p‹t
 = 
PSB6970_DEFAULT_PORT_CPU
;

338 
swdev
->
›s
 = &
psb6970_›s
;

340 
swdev
->
«me
 = "Lantiq PSB6970";

341 
swdev
->
vœns
 = 
PSB6970_MAX_VLANS
;

342 
swdev
->
p‹ts
 = 
PSB6970_NUM_PORTS
;

344 i‡((
ªt
 = 
	`ªgi°î_swôch
(&
¥iv
->
dev
, 
pdev
->
©èched_dev
)) < 0) {

345 
	`k‰ì
(
¥iv
);

346 
d⁄e
;

349 
ªt
 = 
	`psb6970_ª£t_swôch
(&
¥iv
->
dev
);

350 i‡(
ªt
) {

351 
	`k‰ì
(
¥iv
);

352 
d⁄e
;

355 
dev
->
phy_±r
 = 
¥iv
;

357 
d⁄e
:

358  
ªt
;

359 
	}
}

361 
	$psb6970_ªad_°©us
(
phy_devi˚
 *
phydev
)

363 
phydev
->
•ìd
 = 
SPEED_100
;

364 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

365 
phydev
->
lök
 = 1;

367 
phydev
->
°©e
 = 
PHY_RUNNING
;

368 
	`√tif_ˇºõr_⁄
(
phydev
->
©èched_dev
);

369 
phydev
->
	`adju°_lök
’hydev->
©èched_dev
);

372 
	}
}

374 
	$psb6970_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

377 
	}
}

379 
	$psb6970_¥obe
(
phy_devi˚
 *
pdev
)

382 
	}
}

384 
	$psb6970_ªmove
(
phy_devi˚
 *
pdev
)

386 
psb6970_¥iv
 *
¥iv
 = 
pdev
->priv;

388 i‡(!
¥iv
)

391 i‡(
pdev
->
mdio
.
addr
 == 0)

392 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

393 
	`k‰ì
(
¥iv
);

394 
	}
}

396 
	$psb6970_fixup
(
phy_devi˚
 *
dev
)

398 
mii_bus
 *
bus
 = 
dev
->
mdio
.bus;

399 
u16
 
ªg
;

402 
ªg
 = 
bus
->
	`ªad
(bus, 
	`PHYADDR
(
PSB6970_CI1
)Ë& 
PSB6970_CI1_MASK
;

403 i‡(
ªg
 !
PSB6970_CI1_VAL
)

406 
dev
->
phy_id
 = (
ªg
 << 16);

407 
dev
->
phy_id
 |
bus
->
	`ªad
(bus, 
	`PHYADDR
(
PSB6970_CI0
)Ë& 
PSB6970_CI0_MASK
;

410 
	}
}

412 
phy_drivî
 
	gpsb6970_drivî
 = {

413 .
«me
 = "Lantiq PSB6970",

414 .
	gphy_id
 = 
PSB6970_CI1_VAL
 << 16,

415 .
	gphy_id_mask
 = 0xffff0000,

416 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

417 .
	g¥obe
 = 
psb6970_¥obe
,

418 .
	gªmove
 = 
psb6970_ªmove
,

419 .
	gc⁄fig_öô
 = &
psb6970_c⁄fig_öô
,

420 .
	gc⁄fig_™eg
 = &
psb6970_c⁄fig_™eg
,

421 .
	gªad_°©us
 = &
psb6970_ªad_°©us
,

424 
__öô
 
	$psb6970_öô
()

426 
	`phy_ªgi°î_fixup_f‹_id
(
PHY_ANY_ID
, 
psb6970_fixup
);

427  
	`phy_drivî_ªgi°î
(&
psb6970_drivî
, 
THIS_MODULE
);

428 
	}
}

430 
moduÀ_öô
(
psb6970_öô
);

432 
__exô
 
	$psb6970_exô
()

434 
	`phy_drivî_uƒegi°î
(&
psb6970_drivî
);

435 
	}
}

437 
moduÀ_exô
(
psb6970_exô
);

439 
MODULE_DESCRIPTION
("Lantiq PSB6970 Switch");

440 
MODULE_AUTHOR
("Ithamar R. Adema <ithamar.adema@team-embedded.nl>");

441 
MODULE_LICENSE
("GPL");

	@linux/generic/files/drivers/net/phy/rtl8306.c

16 
	~<löux/if.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/öô.h
>

19 
	~<löux/li°.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/√éök.h
>

24 
	~<√t/gíëlök.h
>

25 
	~<löux/swôch.h
>

26 
	~<löux/dñay.h
>

27 
	~<löux/phy.h
>

28 
	~<löux/vîsi⁄.h
>

33 
	#RTL8306_REG_PAGE
 16

	)

34 
	#RTL8306_REG_PAGE_LO
 (1 << 15)

	)

35 
	#RTL8306_REG_PAGE_HI
 (1 << 1Ë

	)

37 
	#RTL8306_NUM_VLANS
 16

	)

38 
	#RTL8306_NUM_PORTS
 6

	)

39 
	#RTL8306_PORT_CPU
 5

	)

40 
	#RTL8306_NUM_PAGES
 4

	)

41 
	#RTL8306_NUM_REGS
 32

	)

43 
	#RTL_NAME_S
 "RTL8306S"

	)

44 
	#RTL_NAME_SD
 "RTL8306SD"

	)

45 
	#RTL_NAME_SDM
 "RTL8306SDM"

	)

46 
	#RTL_NAME_UNKNOWN
 "RTL8306(unknown)"

	)

48 
	#RTL8306_MAGIC
 0x8306

	)

50 
LIST_HEAD
(
phydevs
);

52 
	sπl_¥iv
 {

53 
li°_hód
 
	mli°
;

54 
swôch_dev
 
	mdev
;

55 
	m∑ge
;

56 
	mty≥
;

57 
	mdo_˝u
;

58 
mii_bus
 *
	mbus
;

59 
	mhw«me
[(
RTL_NAME_UNKNOWN
)];

60 
boﬁ
 
	mfixup
;

63 
	sπl_phyªgs
 {

64 
	mnway
;

65 
	m•ìd
;

66 
	mdu∂ex
;

69 
	#to_πl
(
_dev
Ë
	`c⁄èöî_of
(_dev, 
πl_¥iv
, 
dev
)

	)

72 
	mRTL_TYPE_S
,

73 
	mRTL_TYPE_SD
,

74 
	mRTL_TYPE_SDM
,

77 
	sπl_ªg
 {

78 
	m∑ge
;

79 
	mphy
;

80 
	mªg
;

81 
	mbôs
;

82 
	mshi·
;

83 
	mövîãd
;

86 
	#RTL_VLAN_REGOFS
(
«me
) \

87 (
RTL_REG_VLAN1_
##
«me
 - 
RTL_REG_VLAN0_
##«me)

	)

89 
	#RTL_PORT_REGOFS
(
«me
) \

90 (
RTL_REG_PORT1_
##
«me
 - 
RTL_REG_PORT0_
##«me)

	)

92 
	#RTL_PORT_REG
(
id
, 
ªg
) \

93 (
RTL_REG_PORT0_
##
ªg
 + (
id
 * 
	`RTL_PORT_REGOFS
‘eg)))

	)

95 
	#RTL_VLAN_REG
(
id
, 
ªg
) \

96 (
RTL_REG_VLAN0_
##
ªg
 + (
id
 * 
	`RTL_VLAN_REGOFS
‘eg)))

	)

98 
	#RTL_GLOBAL_REGATTR
(
ªg
) \

99 .
id
 = 
RTL_REG_
##
ªg
, \

100 .
ty≥
 = 
SWITCH_TYPE_INT
, \

101 .
ofs
 = 0, \

102 .
£t
 = 
πl_©å_£t_öt
, \

103 .
gë
 = 
πl_©å_gë_öt


	)

105 
	#RTL_PORT_REGATTR
(
ªg
) \

106 .
id
 = 
RTL_REG_PORT0_
##
ªg
, \

107 .
ty≥
 = 
SWITCH_TYPE_INT
, \

108 .
ofs
 = 
	`RTL_PORT_REGOFS
(
ªg
), \

109 .
£t
 = 
πl_©å_£t_p‹t_öt
, \

110 .
gë
 = 
πl_©å_gë_p‹t_öt


	)

112 
	#RTL_VLAN_REGATTR
(
ªg
) \

113 .
id
 = 
RTL_REG_VLAN0_
##
ªg
, \

114 .
ty≥
 = 
SWITCH_TYPE_INT
, \

115 .
ofs
 = 
	`RTL_VLAN_REGOFS
(
ªg
), \

116 .
£t
 = 
πl_©å_£t_vœn_öt
, \

117 .
gë
 = 
πl_©å_gë_vœn_öt


	)

119 
	eπl_ªgidx
 {

120 
	mRTL_REG_CHIPID
,

121 
	mRTL_REG_CHIPVER
,

122 
	mRTL_REG_CHIPTYPE
,

123 
	mRTL_REG_CPUPORT
,

125 
	mRTL_REG_EN_CPUPORT
,

126 
	mRTL_REG_EN_TAG_OUT
,

127 
	mRTL_REG_EN_TAG_CLR
,

128 
	mRTL_REG_EN_TAG_IN
,

129 
	mRTL_REG_TRAP_CPU
,

130 
	mRTL_REG_CPU_LINKUP
,

131 
	mRTL_REG_TRUNK_PORTSEL
,

132 
	mRTL_REG_EN_TRUNK
,

133 
	mRTL_REG_RESET
,

135 
	mRTL_REG_VLAN_ENABLE
,

136 
	mRTL_REG_VLAN_FILTER
,

137 
	mRTL_REG_VLAN_TAG_ONLY
,

138 
	mRTL_REG_VLAN_TAG_AWARE
,

139 
	#RTL_VLAN_ENUM
(
id
) \

140 
RTL_REG_VLAN
##
id
##
_VID
, \

141 
RTL_REG_VLAN
##
id
##
_PORTMASK


	)

142 
RTL_VLAN_ENUM
(0),

143 
RTL_VLAN_ENUM
(1),

144 
RTL_VLAN_ENUM
(2),

145 
RTL_VLAN_ENUM
(3),

146 
RTL_VLAN_ENUM
(4),

147 
RTL_VLAN_ENUM
(5),

148 
RTL_VLAN_ENUM
(6),

149 
RTL_VLAN_ENUM
(7),

150 
RTL_VLAN_ENUM
(8),

151 
RTL_VLAN_ENUM
(9),

152 
RTL_VLAN_ENUM
(10),

153 
RTL_VLAN_ENUM
(11),

154 
RTL_VLAN_ENUM
(12),

155 
RTL_VLAN_ENUM
(13),

156 
RTL_VLAN_ENUM
(14),

157 
RTL_VLAN_ENUM
(15),

158 
	#RTL_PORT_ENUM
(
id
) \

159 
RTL_REG_PORT
##
id
##
_PVID
, \

160 
RTL_REG_PORT
##
id
##
_NULL_VID_REPLACE
, \

161 
RTL_REG_PORT
##
id
##
_NON_PVID_DISCARD
, \

162 
RTL_REG_PORT
##
id
##
_VID_INSERT
, \

163 
RTL_REG_PORT
##
id
##
_TAG_INSERT
, \

164 
RTL_REG_PORT
##
id
##
_LINK
, \

165 
RTL_REG_PORT
##
id
##
_SPEED
, \

166 
RTL_REG_PORT
##
id
##
_NWAY
, \

167 
RTL_REG_PORT
##
id
##
_NRESTART
, \

168 
RTL_REG_PORT
##
id
##
_DUPLEX
, \

169 
RTL_REG_PORT
##
id
##
_RXEN
, \

170 
RTL_REG_PORT
##
id
##
_TXEN


	)

171 
RTL_PORT_ENUM
(0),

172 
RTL_PORT_ENUM
(1),

173 
RTL_PORT_ENUM
(2),

174 
RTL_PORT_ENUM
(3),

175 
RTL_PORT_ENUM
(4),

176 
RTL_PORT_ENUM
(5),

179 c⁄° 
πl_ªg
 
	gπl_ªgs
[] = {

180 [
RTL_REG_CHIPID
] = { 0, 4, 30, 16, 0, 0 },

181 [
RTL_REG_CHIPVER
] = { 0, 4, 31, 8, 0, 0 },

182 [
RTL_REG_CHIPTYPE
] = { 0, 4, 31, 2, 8, 0 },

185 [
RTL_REG_CPUPORT
] = { 2, 4, 21, 3, 0, 0 },

187 [
RTL_REG_EN_CPUPORT
] = { 3, 2, 21, 1, 15, 1 },

189 [
RTL_REG_EN_TAG_OUT
] = { 3, 2, 21, 1, 12, 0 },

191 [
RTL_REG_EN_TAG_CLR
] = { 3, 2, 21, 1, 11, 0 },

193 [
RTL_REG_EN_TAG_IN
] = { 0, 4, 21, 1, 7, 0 },

194 [
RTL_REG_EN_TRUNK
] = { 0, 0, 19, 1, 11, 1 },

195 [
RTL_REG_TRUNK_PORTSEL
] = { 0, 0, 16, 1, 6, 1 },

196 [
RTL_REG_RESET
] = { 0, 0, 16, 1, 12, 0 },

198 [
RTL_REG_TRAP_CPU
] = { 3, 2, 22, 1, 6, 0 },

199 [
RTL_REG_CPU_LINKUP
] = { 0, 6, 22, 1, 15, 0 },

201 [
RTL_REG_VLAN_TAG_ONLY
] = { 0, 0, 16, 1, 8, 1 },

202 [
RTL_REG_VLAN_FILTER
] = { 0, 0, 16, 1, 9, 1 },

203 [
RTL_REG_VLAN_TAG_AWARE
] = { 0, 0, 16, 1, 10, 1 },

204 [
RTL_REG_VLAN_ENABLE
] = { 0, 0, 18, 1, 8, 1 },

206 
	#RTL_VLAN_REGS
(
id
, 
phy
, 
∑ge
, 
ªgofs
) \

207 [
RTL_REG_VLAN
##
id
##
_VID
] = { 
∑ge
, 
phy
, 25 + 
ªgofs
, 12, 0, 0 }, \

208 [
RTL_REG_VLAN
##
id
##
_PORTMASK
] = { 
∑ge
, 
phy
, 24 + 
ªgofs
, 6, 0, 0 }

	)

209 
RTL_VLAN_REGS
( 0, 0, 0, 0),

210 
RTL_VLAN_REGS
( 1, 1, 0, 0),

211 
RTL_VLAN_REGS
( 2, 2, 0, 0),

212 
RTL_VLAN_REGS
( 3, 3, 0, 0),

213 
RTL_VLAN_REGS
( 4, 4, 0, 0),

214 
RTL_VLAN_REGS
( 5, 0, 1, 2),

215 
RTL_VLAN_REGS
( 6, 1, 1, 2),

216 
RTL_VLAN_REGS
( 7, 2, 1, 2),

217 
RTL_VLAN_REGS
( 8, 3, 1, 2),

218 
RTL_VLAN_REGS
( 9, 4, 1, 2),

219 
RTL_VLAN_REGS
(10, 0, 1, 4),

220 
RTL_VLAN_REGS
(11, 1, 1, 4),

221 
RTL_VLAN_REGS
(12, 2, 1, 4),

222 
RTL_VLAN_REGS
(13, 3, 1, 4),

223 
RTL_VLAN_REGS
(14, 4, 1, 4),

224 
RTL_VLAN_REGS
(15, 0, 1, 6),

226 
	#REG_PORT_SETTING
(
p‹t
, 
phy
) \

227 [
RTL_REG_PORT
##
p‹t
##
_SPEED
] = { 0, 
phy
, 0, 1, 13, 0 }, \

228 [
RTL_REG_PORT
##
p‹t
##
_NWAY
] = { 0, 
phy
, 0, 1, 12, 0 }, \

229 [
RTL_REG_PORT
##
p‹t
##
_NRESTART
] = { 0, 
phy
, 0, 1, 9, 0 }, \

230 [
RTL_REG_PORT
##
p‹t
##
_DUPLEX
] = { 0, 
phy
, 0, 1, 8, 0 }, \

231 [
RTL_REG_PORT
##
p‹t
##
_TXEN
] = { 0, 
phy
, 24, 1, 11, 0 }, \

232 [
RTL_REG_PORT
##
p‹t
##
_RXEN
] = { 0, 
phy
, 24, 1, 10, 0 }, \

233 [
RTL_REG_PORT
##
p‹t
##
_LINK
] = { 0, 
phy
, 1, 1, 2, 0 }, \

234 [
RTL_REG_PORT
##
p‹t
##
_NULL_VID_REPLACE
] = { 0, 
phy
, 22, 1, 12, 0 }, \

235 [
RTL_REG_PORT
##
p‹t
##
_NON_PVID_DISCARD
] = { 0, 
phy
, 22, 1, 11, 0 }, \

236 [
RTL_REG_PORT
##
p‹t
##
_VID_INSERT
] = { 0, 
phy
, 22, 2, 9, 0 }, \

237 [
RTL_REG_PORT
##
p‹t
##
_TAG_INSERT
] = { 0, 
phy
, 22, 2, 0, 0 }

	)

239 
REG_PORT_SETTING
(0, 0),

240 
REG_PORT_SETTING
(1, 1),

241 
REG_PORT_SETTING
(2, 2),

242 
REG_PORT_SETTING
(3, 3),

243 
REG_PORT_SETTING
(4, 4),

244 
REG_PORT_SETTING
(5, 6),

246 
	#REG_PORT_PVID
(
phy
, 
∑ge
, 
ªgofs
) \

247 { 
∑ge
, 
phy
, 24 + 
ªgofs
, 4, 12, 0 }

	)

248 [
RTL_REG_PORT0_PVID
] = 
REG_PORT_PVID
(0, 0, 0),

249 [
RTL_REG_PORT1_PVID
] = 
REG_PORT_PVID
(1, 0, 0),

250 [
RTL_REG_PORT2_PVID
] = 
REG_PORT_PVID
(2, 0, 0),

251 [
RTL_REG_PORT3_PVID
] = 
REG_PORT_PVID
(3, 0, 0),

252 [
RTL_REG_PORT4_PVID
] = 
REG_PORT_PVID
(4, 0, 0),

253 [
RTL_REG_PORT5_PVID
] = 
REG_PORT_PVID
(0, 1, 2),

257 
ölöe
 

258 
	$πl_£t_∑ge
(
πl_¥iv
 *
¥iv
, 
∑ge
)

260 
mii_bus
 *
bus
 = 
¥iv
->bus;

261 
u16
 
pg£l
;

263 i‡(
¥iv
->
fixup
)

266 i‡(
¥iv
->
∑ge
 ==Öage)

269 
	`BUG_ON
(
∑ge
 > 
RTL8306_NUM_PAGES
);

270 
pg£l
 = 
bus
->
	`ªad
(bus, 0, 
RTL8306_REG_PAGE
);

271 
pg£l
 &~(
RTL8306_REG_PAGE_LO
 | 
RTL8306_REG_PAGE_HI
);

272 i‡(
∑ge
 & (1 << 0))

273 
pg£l
 |
RTL8306_REG_PAGE_LO
;

274 i‡(!(
∑ge
 & (1 << 1)))

275 
pg£l
 |
RTL8306_REG_PAGE_HI
;

276 
bus
->
	`wrôe
(bus, 0, 
RTL8306_REG_PAGE
, 
pg£l
);

277 
	}
}

279 
ölöe
 

280 
	$πl_w16
(
swôch_dev
 *
dev
, 
∑ge
, 
phy
, 
ªg
, 
u16
 
vÆ
)

282 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

283 
mii_bus
 *
bus
 = 
¥iv
->bus;

285 
	`πl_£t_∑ge
(
¥iv
, 
∑ge
);

286 
bus
->
	`wrôe
(bus, 
phy
, 
ªg
, 
vÆ
);

287 
bus
->
	`ªad
(bus, 
phy
, 
ªg
);

289 
	}
}

291 
ölöe
 

292 
	$πl_r16
(
swôch_dev
 *
dev
, 
∑ge
, 
phy
, 
ªg
)

294 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

295 
mii_bus
 *
bus
 = 
¥iv
->bus;

297 
	`πl_£t_∑ge
(
¥iv
, 
∑ge
);

298  
bus
->
	`ªad
(bus, 
phy
, 
ªg
);

299 
	}
}

301 
ölöe
 
u16


302 
	$πl_rmw
(
swôch_dev
 *
dev
, 
∑ge
, 
phy
, 
ªg
, 
u16
 
mask
, u16 
vÆ
)

304 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

305 
mii_bus
 *
bus
 = 
¥iv
->bus;

306 
u16
 
r
;

308 
	`πl_£t_∑ge
(
¥iv
, 
∑ge
);

309 
r
 = 
bus
->
	`ªad
(bus, 
phy
, 
ªg
);

310 
r
 &~
mask
;

311 
r
 |
vÆ
;

312 
bus
->
	`wrôe
(bus, 
phy
, 
ªg
, 
r
);

313  
bus
->
	`ªad
(bus, 
phy
, 
ªg
);

314 
	}
}

317 
ölöe
 

318 
	$πl_gë
(
swôch_dev
 *
dev
, 
πl_ªgidx
 
s
)

320 c⁄° 
πl_ªg
 *
r
 = &
πl_ªgs
[
s
];

321 
u16
 
vÆ
;

323 
	`BUG_ON
(
s
 >
	`ARRAY_SIZE
(
πl_ªgs
));

324 i‡(
r
->
bôs
 == 0)

327 
vÆ
 = 
	`πl_r16
(
dev
, 
r
->
∑ge
,Ñ->
phy
,Ñ->
ªg
);

329 i‡(
r
->
shi·
 > 0)

330 
vÆ
 >>
r
->
shi·
;

332 i‡(
r
->
övîãd
)

333 
vÆ
 = ~val;

335 
vÆ
 &(1 << 
r
->
bôs
) - 1;

337  
vÆ
;

338 
	}
}

341 
	$πl_£t
(
swôch_dev
 *
dev
, 
πl_ªgidx
 
s
, 
vÆ
)

343 c⁄° 
πl_ªg
 *
r
 = &
πl_ªgs
[
s
];

344 
u16
 
mask
 = 0xffff;

346 
	`BUG_ON
(
s
 >
	`ARRAY_SIZE
(
πl_ªgs
));

348 i‡(
r
->
bôs
 == 0)

351 i‡(
r
->
shi·
 > 0)

352 
vÆ
 <<
r
->
shi·
;

354 i‡(
r
->
övîãd
)

355 
vÆ
 = ~val;

357 i‡(
r
->
bôs
 != 16) {

358 
mask
 = (1 << 
r
->
bôs
) - 1;

359 
mask
 <<
r
->
shi·
;

361 
vÆ
 &
mask
;

362  
	`πl_rmw
(
dev
, 
r
->
∑ge
,Ñ->
phy
,Ñ->
ªg
, 
mask
, 
vÆ
);

363 
	}
}

366 
	$πl_phy_ßve
(
swôch_dev
 *
dev
, 
p‹t
, 
πl_phyªgs
 *
ªgs
)

368 
ªgs
->
nway
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
NWAY
));

369 
ªgs
->
•ìd
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
SPEED
));

370 
ªgs
->
du∂ex
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
DUPLEX
));

371 
	}
}

374 
	$πl_phy_ª°‹e
(
swôch_dev
 *
dev
, 
p‹t
, 
πl_phyªgs
 *
ªgs
)

376 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
NWAY
), 
ªgs
->
nway
);

377 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
SPEED
), 
ªgs
->
•ìd
);

378 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
DUPLEX
), 
ªgs
->
du∂ex
);

379 
	}
}

382 
	$πl_p‹t_£t_íabÀ
(
swôch_dev
 *
dev
, 
p‹t
, 
íabÀd
)

384 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
RXEN
), 
íabÀd
);

385 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
TXEN
), 
íabÀd
);

387 i‡((
p‹t
 >5Ë|| !
íabÀd
)

391 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
NRESTART
), 1);

392 
	}
}

395 
	$πl_hw_≠∂y
(
swôch_dev
 *
dev
)

397 
i
;

398 
åunk_í
, 
åunk_p£l
;

399 
πl_phyªgs
 
p‹t5
;

401 
	`πl_phy_ßve
(
dev
, 5, &
p‹t5
);

404 
i
 = 0; i < 
RTL8306_NUM_PORTS
 - 1; i++) {

405 
	`πl_p‹t_£t_íabÀ
(
dev
, 
i
, 0);

409 
åunk_í
 = 
	`πl_gë
(
dev
, 
RTL_REG_EN_TRUNK
);

410 
åunk_p£l
 = 
	`πl_gë
(
dev
, 
RTL_REG_TRUNK_PORTSEL
);

414 
	`πl_£t
(
dev
, 
RTL_REG_EN_TRUNK
, 1);

415 
	`πl_£t
(
dev
, 
RTL_REG_TRUNK_PORTSEL
, 1);

418 
	`πl_£t
(
dev
, 
RTL_REG_RESET
, 1);

422 
i
 = 0; i < 10; i++) {

423 i‡(
	`πl_gë
(
dev
, 
RTL_REG_RESET
) == 0)

426 
	`m¶ìp
(1);

430 
i
 = 0; i < 
RTL8306_NUM_PORTS
 - 1; i++) {

431 
	`πl_p‹t_£t_íabÀ
(
dev
, 
i
, 1);

435 
	`πl_£t
(
dev
, 
RTL_REG_EN_TRUNK
, 
åunk_í
);

436 
	`πl_£t
(
dev
, 
RTL_REG_TRUNK_PORTSEL
, 
åunk_p£l
);

437 
	`πl_phy_ª°‹e
(
dev
, 5, &
p‹t5
);

439 
	`πl_£t
(
dev
, 
RTL_REG_CPU_LINKUP
, 1);

442 
	}
}

445 
	$πl_hw_öô
(
swôch_dev
 *
dev
)

447 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

448 
˝u_mask
 = 1 << 
dev
->
˝u_p‹t
;

449 
i
;

451 
	`πl_£t
(
dev
, 
RTL_REG_VLAN_ENABLE
, 0);

452 
	`πl_£t
(
dev
, 
RTL_REG_VLAN_FILTER
, 0);

453 
	`πl_£t
(
dev
, 
RTL_REG_EN_TRUNK
, 0);

454 
	`πl_£t
(
dev
, 
RTL_REG_TRUNK_PORTSEL
, 0);

457 i‡(
¥iv
->
do_˝u
) {

458 
	`πl_£t
(
dev
, 
RTL_REG_CPUPORT
, dev->
˝u_p‹t
);

459 
	`πl_£t
(
dev
, 
RTL_REG_EN_CPUPORT
, 1);

461 
	`πl_£t
(
dev
, 
RTL_REG_CPUPORT
, 7);

462 
	`πl_£t
(
dev
, 
RTL_REG_EN_CPUPORT
, 0);

464 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_OUT
, 0);

465 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_IN
, 0);

466 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_CLR
, 0);

469 
i
 = 0; i < 
RTL8306_NUM_VLANS
; i++) {

470 
	`πl_£t
(
dev
, 
	`RTL_VLAN_REG
(
i
, 
VID
), i);

471 
	`πl_£t
(
dev
, 
	`RTL_VLAN_REG
(
i
, 
PORTMASK
), 0);

475 
i
 = 0; i < 
RTL8306_NUM_PORTS
; i++) {

476 
mask
;

478 i‡((1 << 
i
Ë=
˝u_mask
)

479 
mask
 = ((1 << 
RTL8306_NUM_PORTS
Ë- 1Ë& ~
˝u_mask
;

481 
mask
 = 
˝u_mask
 | (1 << 
i
);

483 
	`πl_£t
(
dev
, 
	`RTL_VLAN_REG
(
i
, 
PORTMASK
), 
mask
);

484 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
PVID
), i);

485 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
NULL_VID_REPLACE
), 1);

486 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
VID_INSERT
), 1);

487 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
TAG_INSERT
), 3);

489 
	`πl_hw_≠∂y
(
dev
);

490 
	}
}

492 #ifde‡
DEBUG


494 
	$πl_£t_u£_˝up‹t
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

496 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

497 
¥iv
->
do_˝u
 = 
vÆ
->
vÆue
.
i
;

498 
	`πl_hw_öô
(
dev
);

500 
	}
}

503 
	$πl_gë_u£_˝up‹t
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

505 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

506 
vÆ
->
vÆue
.
i
 = 
¥iv
->
do_˝u
;

508 
	}
}

511 
	$πl_£t_˝up‹t
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

513 
dev
->
˝u_p‹t
 = 
vÆ
->
vÆue
.
i
;

514 
	`πl_hw_öô
(
dev
);

516 
	}
}

519 
	$πl_gë_˝up‹t
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

521 
vÆ
->
vÆue
.
i
 = 
dev
->
˝u_p‹t
;

523 
	}
}

527 
	$πl_ª£t
(
swôch_dev
 *
dev
)

529 
	`πl_hw_öô
(
dev
);

531 
	}
}

534 
	$πl_©å_£t_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

536 
idx
 = 
©å
->
id
 + (
vÆ
->
p‹t_vœn
 *áâr->
ofs
);

537 
πl_phyªgs
 
p‹t
;

539 i‡(
©å
->
id
 >
	`ARRAY_SIZE
(
πl_ªgs
))

540  -
EINVAL
;

542 i‡((
©å
->
max
 > 0Ë&& (
vÆ
->
vÆue
.
i
 >áttr->max))

543  -
EINVAL
;

547 i‡((
vÆ
->
p‹t_vœn
 > 3) &&

548 (
πl_ªgs
[
idx
].
ªg
 == 22) &&

549 (
πl_ªgs
[
idx
].
∑ge
 == 0)) {

551 
	`πl_phy_ßve
(
dev
, 
vÆ
->
p‹t_vœn
, &
p‹t
);

552 
	`πl_£t
(
dev
, 
idx
, 
vÆ
->
vÆue
.
i
);

553 
	`πl_phy_ª°‹e
(
dev
, 
vÆ
->
p‹t_vœn
, &
p‹t
);

555 
	`πl_£t
(
dev
, 
idx
, 
vÆ
->
vÆue
.
i
);

559 
	}
}

562 
	$πl_©å_gë_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

564 
idx
 = 
©å
->
id
 + (
vÆ
->
p‹t_vœn
 *áâr->
ofs
);

566 i‡(
idx
 >
	`ARRAY_SIZE
(
πl_ªgs
))

567  -
EINVAL
;

569 
vÆ
->
vÆue
.
i
 = 
	`πl_gë
(
dev
, 
idx
);

571 
	}
}

574 
	$πl_©å_£t_p‹t_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

576 i‡(
vÆ
->
p‹t_vœn
 >
RTL8306_NUM_PORTS
)

577  -
EINVAL
;

579  
	`πl_©å_£t_öt
(
dev
, 
©å
, 
vÆ
);

580 
	}
}

583 
	$πl_©å_gë_p‹t_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

585 i‡(
vÆ
->
p‹t_vœn
 >
RTL8306_NUM_PORTS
)

586  -
EINVAL
;

587  
	`πl_©å_gë_öt
(
dev
, 
©å
, 
vÆ
);

588 
	}
}

591 
	$πl_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
, 
swôch_p‹t_lök
 *
lök
)

593 i‡(
p‹t
 >
RTL8306_NUM_PORTS
)

594  -
EINVAL
;

597 
lök
->lök = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
LINK
));

598 i‡(!
lök
->link)

599 
lök
->lök = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
LINK
));

601 i‡(!
lök
->link)

604 
lök
->
du∂ex
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
DUPLEX
));

605 
lök
->
™eg
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
NWAY
));

607 i‡(
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
p‹t
, 
SPEED
)))

608 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

610 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

613 
	}
}

616 
	$πl_©å_£t_vœn_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

618 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
)

619  -
EINVAL
;

621  
	`πl_©å_£t_öt
(
dev
, 
©å
, 
vÆ
);

622 
	}
}

625 
	$πl_©å_gë_vœn_öt
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

627 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
)

628  -
EINVAL
;

630  
	`πl_©å_gë_öt
(
dev
, 
©å
, 
vÆ
);

631 
	}
}

634 
	$πl_gë_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

636 
i
, 
mask
;

638 
mask
 = 
	`πl_gë
(
dev
, 
	`RTL_VLAN_REG
(
vÆ
->
p‹t_vœn
, 
PORTMASK
));

639 
i
 = 0; i < 
RTL8306_NUM_PORTS
; i++) {

640 
swôch_p‹t
 *
p‹t
;

642 i‡(!(
mask
 & (1 << 
i
)))

645 
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
];

646 
p‹t
->
id
 = 
i
;

647 i‡(
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
i
, 
TAG_INSERT
)Ë=2 || i =dev->
˝u_p‹t
)

648 
p‹t
->
Êags
 = (1 << 
SWITCH_PORT_FLAG_TAGGED
);

649 
vÆ
->
Àn
++;

653 
	}
}

656 
	$πl_£t_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

658 
πl_¥iv
 *
¥iv
 = 
	`to_πl
(
dev
);

659 
πl_phyªgs
 
p‹t
;

660 
í
 = 
vÆ
->
vÆue
.
i
;

661 
i
;

663 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_OUT
, 
í
 && 
¥iv
->
do_˝u
);

664 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_IN
, 
í
 && 
¥iv
->
do_˝u
);

665 
	`πl_£t
(
dev
, 
RTL_REG_EN_TAG_CLR
, 
í
 && 
¥iv
->
do_˝u
);

666 
	`πl_£t
(
dev
, 
RTL_REG_VLAN_TAG_AWARE
, 
í
);

667 i‡(
í
)

668 
	`πl_£t
(
dev
, 
RTL_REG_VLAN_FILTER
, 
í
);

670 
i
 = 0; i < 
RTL8306_NUM_PORTS
; i++) {

671 i‡(
i
 > 3)

672 
	`πl_phy_ßve
(
dev
, 
vÆ
->
p‹t_vœn
, &
p‹t
);

673 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
NULL_VID_REPLACE
), 1);

674 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
VID_INSERT
), (
í
 ? (ò=dev->
˝u_p‹t
 ? 0 : 1) : 1));

675 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
TAG_INSERT
), (
í
 ? (ò=dev->
˝u_p‹t
 ? 2 : 1) : 3));

676 i‡(
i
 > 3)

677 
	`πl_phy_ª°‹e
(
dev
, 
vÆ
->
p‹t_vœn
, &
p‹t
);

679 
	`πl_£t
(
dev
, 
RTL_REG_VLAN_ENABLE
, 
í
);

682 
	}
}

685 
	$πl_gë_vœn
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
, 
swôch_vÆ
 *
vÆ
)

687 
vÆ
->
vÆue
.
i
 = 
	`πl_gë
(
dev
, 
RTL_REG_VLAN_ENABLE
);

689 
	}
}

692 
	$πl_£t_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

694 
mask
 = 0;

695 
ﬁdmask
;

696 
i
;

698 
i
 = 0; i < 
vÆ
->
Àn
; i++)

700 
swôch_p‹t
 *
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

701 
boﬁ
 
ègged
 = 
Ál£
;

703 
mask
 |(1 << 
p‹t
->
id
);

705 i‡(
p‹t
->
id
 =
dev
->
˝u_p‹t
)

708 i‡((
i
 =
dev
->
˝u_p‹t
) ||

709 (
p‹t
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)))

710 
ègged
 = 
åue
;

713 i‡(!
ègged
)

714 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
->
id
, 
PVID
), 
vÆ
->
p‹t_vœn
);

716 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
->
id
, 
NON_PVID_DISCARD
), (
ègged
 ? 0 : 1));

717 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
->
id
, 
VID_INSERT
), (
ègged
 ? 0 : 1));

718 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
p‹t
->
id
, 
TAG_INSERT
), (
ègged
 ? 2 : 1));

721 
ﬁdmask
 = 
	`πl_gë
(
dev
, 
	`RTL_VLAN_REG
(
vÆ
->
p‹t_vœn
, 
PORTMASK
));

722 
	`πl_£t
(
dev
, 
	`RTL_VLAN_REG
(
vÆ
->
p‹t_vœn
, 
PORTMASK
), 
mask
);

725 
ﬁdmask
 &~
mask
;

726 
i
 = 0; i < 
RTL8306_NUM_PORTS
; i++) {

727 i‡(!(
ﬁdmask
 & (1 << 
i
)))

730 i‡(
i
 =
dev
->
˝u_p‹t
)

733 i‡(
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(
i
, 
PVID
)Ë=
vÆ
->
p‹t_vœn
)

734 
	`πl_£t
(
dev
, 
	`RTL_PORT_REG
(
i
, 
PVID
), dev->
vœns
 - 1);

738 
	}
}

740 
swôch_©å
 
	gπl_globÆs
[] = {

742 .
ty≥
 = 
SWITCH_TYPE_INT
,

743 .
	g«me
 = "enable_vlan",

744 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

745 .
	gmax
 = 1,

746 .
	g£t
 = 
πl_£t_vœn
,

747 .
	ggë
 = 
πl_gë_vœn
,

750 
RTL_GLOBAL_REGATTR
(
EN_TRUNK
),

751 .
	g«me
 = "trunk",

752 .
	gdes¸ùti⁄
 = "EnableÖortÅrunking",

753 .
	gmax
 = 1,

756 
RTL_GLOBAL_REGATTR
(
TRUNK_PORTSEL
),

757 .
	g«me
 = "trunk_sel",

758 .
	gdes¸ùti⁄
 = "SelectÖorts forÅrunking (0: 0,1 - 1: 3,4)",

759 .
	gmax
 = 1,

761 #ifde‡
DEBUG


763 
RTL_GLOBAL_REGATTR
(
VLAN_FILTER
),

764 .
	g«me
 = "vlan_filter",

765 .
	gdes¸ùti⁄
 = "Filter incomingÖackets forállowed VLANS",

766 .
	gmax
 = 1,

769 .
	gty≥
 = 
SWITCH_TYPE_INT
,

770 .
	g«me
 = "cpuport",

771 .
	gdes¸ùti⁄
 = "CPU Port",

772 .
	g£t
 = 
πl_£t_˝up‹t
,

773 .
	ggë
 = 
πl_gë_˝up‹t
,

774 .
	gmax
 = 
RTL8306_NUM_PORTS
,

777 .
	gty≥
 = 
SWITCH_TYPE_INT
,

778 .
	g«me
 = "use_cpuport",

779 .
	gdes¸ùti⁄
 = "CPU Port handling flag",

780 .
	g£t
 = 
πl_£t_u£_˝up‹t
,

781 .
	ggë
 = 
πl_gë_u£_˝up‹t
,

782 .
	gmax
 = 
RTL8306_NUM_PORTS
,

785 
RTL_GLOBAL_REGATTR
(
TRAP_CPU
),

786 .
	g«me
 = "trap_cpu",

787 .
	gdes¸ùti⁄
 = "VLANÅrapÅo CPU",

788 .
	gmax
 = 1,

791 
RTL_GLOBAL_REGATTR
(
VLAN_TAG_AWARE
),

792 .
	g«me
 = "vlan_tag_aware",

793 .
	gdes¸ùti⁄
 = "Enable VLANÅagáwareness",

794 .
	gmax
 = 1,

797 
RTL_GLOBAL_REGATTR
(
VLAN_TAG_ONLY
),

798 .
	g«me
 = "tag_only",

799 .
	gdes¸ùti⁄
 = "OnlyácceptÅaggedÖackets",

800 .
	gmax
 = 1,

804 
swôch_©å
 
	gπl_p‹t
[] = {

806 
RTL_PORT_REGATTR
(
PVID
),

807 .
«me
 = "pvid",

808 .
	gdes¸ùti⁄
 = "Port VLAN ID",

809 .
	gmax
 = 
RTL8306_NUM_VLANS
 - 1,

811 #ifde‡
DEBUG


813 
RTL_PORT_REGATTR
(
NULL_VID_REPLACE
),

814 .
	g«me
 = "null_vid",

815 .
	gdes¸ùti⁄
 = "NULL VID getsÑeplaced byÖort default vid",

816 .
	gmax
 = 1,

819 
RTL_PORT_REGATTR
(
NON_PVID_DISCARD
),

820 .
	g«me
 = "non_pvid_discard",

821 .
	gdes¸ùti⁄
 = "discardÖackets with VID != PVID",

822 .
	gmax
 = 1,

825 
RTL_PORT_REGATTR
(
VID_INSERT
),

826 .
	g«me
 = "vid_insert_remove",

827 .
	gdes¸ùti⁄
 = "how shouldÅhe switch insertándÑemove vids ?",

828 .
	gmax
 = 3,

831 
RTL_PORT_REGATTR
(
TAG_INSERT
),

832 .
	g«me
 = "tag_insert",

833 .
	gdes¸ùti⁄
 = "tag insertion handling",

834 .
	gmax
 = 3,

839 
swôch_©å
 
	gπl_vœn
[] = {

841 
RTL_VLAN_REGATTR
(
VID
),

842 .
«me
 = "vid",

843 .
	gdes¸ùti⁄
 = "VLAN ID (1-4095)",

844 .
	gmax
 = 4095,

848 c⁄° 
swôch_dev_›s
 
	gπl8306_›s
 = {

849 .
©å_globÆ
 = {

850 .
©å
 = 
πl_globÆs
,

851 .
	gn_©å
 = 
ARRAY_SIZE
(
πl_globÆs
),

853 .
	g©å_p‹t
 = {

854 .
©å
 = 
πl_p‹t
,

855 .
	gn_©å
 = 
ARRAY_SIZE
(
πl_p‹t
),

857 .
	g©å_vœn
 = {

858 .
©å
 = 
πl_vœn
,

859 .
	gn_©å
 = 
ARRAY_SIZE
(
πl_vœn
),

862 .
	ggë_vœn_p‹ts
 = 
πl_gë_p‹ts
,

863 .
	g£t_vœn_p‹ts
 = 
πl_£t_p‹ts
,

864 .
	g≠∂y_c⁄fig
 = 
πl_hw_≠∂y
,

865 .
	gª£t_swôch
 = 
πl_ª£t
,

866 .
	ggë_p‹t_lök
 = 
πl_gë_p‹t_lök
,

870 
	$πl8306_c⁄fig_öô
(
phy_devi˚
 *
pdev
)

872 
√t_devi˚
 *
√tdev
 = 
pdev
->
©èched_dev
;

873 
πl_¥iv
 *
¥iv
 = 
pdev
->priv;

874 
swôch_dev
 *
dev
 = &
¥iv
->dev;

875 
swôch_vÆ
 
vÆ
;

876 
chùid
, 
chùvî
, 
chùty≥
;

877 
îr
;

880 i‡(
pdev
->
mdio
.
addr
 != 0)

883 
vÆ
.
vÆue
.
i
 = 1;

884 
¥iv
->
dev
.
˝u_p‹t
 = 
RTL8306_PORT_CPU
;

885 
¥iv
->
dev
.
p‹ts
 = 
RTL8306_NUM_PORTS
;

886 
¥iv
->
dev
.
vœns
 = 
RTL8306_NUM_VLANS
;

887 
¥iv
->
dev
.
›s
 = &
πl8306_›s
;

888 
¥iv
->
do_˝u
 = 0;

889 
¥iv
->
∑ge
 = -1;

890 
¥iv
->
bus
 = 
pdev
->
mdio
.bus;

892 
chùid
 = 
	`πl_gë
(
dev
, 
RTL_REG_CHIPID
);

893 
chùvî
 = 
	`πl_gë
(
dev
, 
RTL_REG_CHIPVER
);

894 
chùty≥
 = 
	`πl_gë
(
dev
, 
RTL_REG_CHIPTYPE
);

895 
chùty≥
) {

898 
	`°∫˝y
(
¥iv
->
hw«me
, 
RTL_NAME_S
, (priv->hwname));

899 
¥iv
->
ty≥
 = 
RTL_TYPE_S
;

902 
	`°∫˝y
(
¥iv
->
hw«me
, 
RTL_NAME_SD
, (priv->hwname));

903 
¥iv
->
ty≥
 = 
RTL_TYPE_SD
;

906 
	`°∫˝y
(
¥iv
->
hw«me
, 
RTL_NAME_SDM
, (priv->hwname));

907 
¥iv
->
ty≥
 = 
RTL_TYPE_SDM
;

910 
	`°∫˝y
(
¥iv
->
hw«me
, 
RTL_NAME_UNKNOWN
, (priv->hwname));

914 
dev
->
«me
 = 
¥iv
->
hw«me
;

915 
	`πl_hw_öô
(
dev
);

917 
	`¥ötk
(
KERN_INFO
 "Regi°îög %†swôch wôh Chù ID: 0x%04x, vîsi⁄: 0x%04x\n", 
¥iv
->
hw«me
, 
chùid
, 
chùvî
);

919 
îr
 = 
	`ªgi°î_swôch
(
dev
, 
√tdev
);

920 i‡(
îr
 < 0) {

921 
	`k‰ì
(
¥iv
);

922  
îr
;

926 
	}
}

930 
	$πl8306_fixup
(
phy_devi˚
 *
pdev
)

932 
πl_¥iv
 
¥iv
;

933 
u16
 
chùid
;

936 i‡(
pdev
->
mdio
.
addr
 != 0 &&Ödev->mdio.addr != 4)

939 
	`mem£t
(&
¥iv
, 0, (priv));

940 
¥iv
.
fixup
 = 
åue
;

941 
¥iv
.
∑ge
 = -1;

942 
¥iv
.
bus
 = 
pdev
->
mdio
.bus;

943 
chùid
 = 
	`πl_gë
(&
¥iv
.
dev
, 
RTL_REG_CHIPID
);

944 i‡(
chùid
 == 0x5988)

945 
pdev
->
phy_id
 = 
RTL8306_MAGIC
;

948 
	}
}

951 
	$πl8306_¥obe
(
phy_devi˚
 *
pdev
)

953 
πl_¥iv
 *
¥iv
;

955 
	`li°_f‹_óch_íåy
(
¥iv
, &
phydevs
, 
li°
) {

960 i‡(
¥iv
->
bus
 =
pdev
->
mdio
.bus)

961 
found
;

963 
¥iv
 = 
	`kzÆloc
((
πl_¥iv
), 
GFP_KERNEL
);

964 i‡(!
¥iv
)

965  -
ENOMEM
;

967 
¥iv
->
bus
 = 
pdev
->
mdio
.bus;

969 
found
:

970 
pdev
->
¥iv
 =Öriv;

972 
	}
}

975 
	$πl8306_ªmove
(
phy_devi˚
 *
pdev
)

977 
πl_¥iv
 *
¥iv
 = 
pdev
->priv;

978 
	`uƒegi°î_swôch
(&
¥iv
->
dev
);

979 
	`k‰ì
(
¥iv
);

980 
	}
}

983 
	$πl8306_c⁄fig_™eg
(
phy_devi˚
 *
pdev
)

985 
πl_¥iv
 *
¥iv
 = 
pdev
->priv;

988 i‡(
pdev
->
mdio
.
addr
 == 0)

992 
	`πl_£t
(&
¥iv
->
dev
, 
	`RTL_PORT_REG
(4, 
NWAY
), 1);

993 
	`πl_£t
(&
¥iv
->
dev
, 
	`RTL_PORT_REG
(4, 
NRESTART
), 1);

996 
	}
}

999 
	$πl8306_ªad_°©us
(
phy_devi˚
 *
pdev
)

1001 
πl_¥iv
 *
¥iv
 = 
pdev
->priv;

1002 
swôch_dev
 *
dev
 = &
¥iv
->dev;

1004 i‡(
pdev
->
mdio
.
addr
 == 4) {

1006 
pdev
->
•ìd
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(4, 
SPEED
)Ë? 
SPEED_100
 : 
SPEED_10
;

1007 
pdev
->
du∂ex
 = 
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(4, 
DUPLEX
)Ë? 
DUPLEX_FULL
 : 
DUPLEX_HALF
;

1008 
pdev
->
lök
 = !!
	`πl_gë
(
dev
, 
	`RTL_PORT_REG
(4, 
LINK
));

1011 
pdev
->
•ìd
 = 
SPEED_100
;

1012 
pdev
->
du∂ex
 = 
DUPLEX_FULL
;

1013 
pdev
->
lök
 = 1;

1020 i‡(
pdev
->
lök
) {

1021 
pdev
->
°©e
 = 
PHY_RUNNING
;

1022 
	`√tif_ˇºõr_⁄
(
pdev
->
©èched_dev
);

1023 
pdev
->
	`adju°_lök
’dev->
©èched_dev
);

1025 
pdev
->
°©e
 = 
PHY_NOLINK
;

1026 
	`√tif_ˇºõr_off
(
pdev
->
©èched_dev
);

1027 
pdev
->
	`adju°_lök
’dev->
©èched_dev
);

1031 
	}
}

1034 
phy_drivî
 
	gπl8306_drivî
 = {

1035 .
«me
 = "Realtek RTL8306S",

1036 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,13,0))

1037 .
	gÊags
 = 
PHY_HAS_MAGICANEG
,

1039 .
	gphy_id
 = 
RTL8306_MAGIC
,

1040 .
	gphy_id_mask
 = 0xffffffff,

1041 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

1042 .
	g¥obe
 = &
πl8306_¥obe
,

1043 .
	gªmove
 = &
πl8306_ªmove
,

1044 .
	gc⁄fig_öô
 = &
πl8306_c⁄fig_öô
,

1045 .
	gc⁄fig_™eg
 = &
πl8306_c⁄fig_™eg
,

1046 .
	gªad_°©us
 = &
πl8306_ªad_°©us
,

1050 
__öô


1051 
	$πl_öô
()

1053 
	`phy_ªgi°î_fixup_f‹_id
(
PHY_ANY_ID
, 
πl8306_fixup
);

1054  
	`phy_drivî_ªgi°î
(&
πl8306_drivî
, 
THIS_MODULE
);

1055 
	}
}

1057 
__exô


1058 
	$πl_exô
()

1060 
	`phy_drivî_uƒegi°î
(&
πl8306_drivî
);

1061 
	}
}

1063 
moduÀ_öô
(
πl_öô
);

1064 
moduÀ_exô
(
πl_exô
);

1065 
MODULE_LICENSE
("GPL");

	@linux/generic/files/drivers/net/phy/rtl8366_smi.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/devi˚.h
>

14 
	~<löux/dñay.h
>

15 
	~<löux/gpio.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/of.h
>

19 
	~<löux/of_∂©f‹m.h
>

20 
	~<löux/of_gpio.h
>

21 
	~<löux/πl8366.h
>

22 
	~<löux/vîsi⁄.h
>

23 
	~<löux/of_mdio.h
>

25 #ifde‡
CONFIG_RTL8366_SMI_DEBUG_FS


26 
	~<löux/debugfs.h
>

29 
	~"πl8366_smi.h
"

31 
	#RTL8366_SMI_ACK_RETRY_COUNT
 5

	)

33 
	#RTL8366_SMI_HW_STOP_DELAY
 25

	)

34 
	#RTL8366_SMI_HW_START_DELAY
 100

	)

36 
ölöe
 
	$πl8366_smi_˛k_dñay
(
πl8366_smi
 *
smi
)

38 
	`ndñay
(
smi
->
˛k_dñay
);

39 
	}
}

41 
	$πl8366_smi_°¨t
(
πl8366_smi
 *
smi
)

43 
sda
 = 
smi
->
gpio_sda
;

44 
sck
 = 
smi
->
gpio_sck
;

50 
	`gpio_dúe˘i⁄_ouçut
(
sck
, 0);

51 
	`gpio_dúe˘i⁄_ouçut
(
sda
, 1);

52 
	`πl8366_smi_˛k_dñay
(
smi
);

55 
	`gpio_£t_vÆue
(
sck
, 1);

56 
	`πl8366_smi_˛k_dñay
(
smi
);

57 
	`gpio_£t_vÆue
(
sck
, 0);

58 
	`πl8366_smi_˛k_dñay
(
smi
);

61 
	`gpio_£t_vÆue
(
sck
, 1);

62 
	`πl8366_smi_˛k_dñay
(
smi
);

63 
	`gpio_£t_vÆue
(
sda
, 0);

64 
	`πl8366_smi_˛k_dñay
(
smi
);

65 
	`gpio_£t_vÆue
(
sck
, 0);

66 
	`πl8366_smi_˛k_dñay
(
smi
);

67 
	`gpio_£t_vÆue
(
sda
, 1);

68 
	}
}

70 
	$πl8366_smi_°›
(
πl8366_smi
 *
smi
)

72 
sda
 = 
smi
->
gpio_sda
;

73 
sck
 = 
smi
->
gpio_sck
;

75 
	`πl8366_smi_˛k_dñay
(
smi
);

76 
	`gpio_£t_vÆue
(
sda
, 0);

77 
	`gpio_£t_vÆue
(
sck
, 1);

78 
	`πl8366_smi_˛k_dñay
(
smi
);

79 
	`gpio_£t_vÆue
(
sda
, 1);

80 
	`πl8366_smi_˛k_dñay
(
smi
);

81 
	`gpio_£t_vÆue
(
sck
, 1);

82 
	`πl8366_smi_˛k_dñay
(
smi
);

83 
	`gpio_£t_vÆue
(
sck
, 0);

84 
	`πl8366_smi_˛k_dñay
(
smi
);

85 
	`gpio_£t_vÆue
(
sck
, 1);

88 
	`πl8366_smi_˛k_dñay
(
smi
);

89 
	`gpio_£t_vÆue
(
sck
, 0);

90 
	`πl8366_smi_˛k_dñay
(
smi
);

91 
	`gpio_£t_vÆue
(
sck
, 1);

94 
	`gpio_dúe˘i⁄_öput
(
sda
);

95 
	`gpio_dúe˘i⁄_öput
(
sck
);

96 
	}
}

98 
	$πl8366_smi_wrôe_bôs
(
πl8366_smi
 *
smi
, 
u32
 
d©a
, u32 
Àn
)

100 
sda
 = 
smi
->
gpio_sda
;

101 
sck
 = 
smi
->
gpio_sck
;

103 ; 
Àn
 > 0;Üen--) {

104 
	`πl8366_smi_˛k_dñay
(
smi
);

107 
	`gpio_£t_vÆue
(
sda
, !!(
d©a
 & ( 1 << (
Àn
 - 1))));

108 
	`πl8366_smi_˛k_dñay
(
smi
);

111 
	`gpio_£t_vÆue
(
sck
, 1);

112 
	`πl8366_smi_˛k_dñay
(
smi
);

113 
	`gpio_£t_vÆue
(
sck
, 0);

115 
	}
}

117 
	$πl8366_smi_ªad_bôs
(
πl8366_smi
 *
smi
, 
u32
 
Àn
, u32 *
d©a
)

119 
sda
 = 
smi
->
gpio_sda
;

120 
sck
 = 
smi
->
gpio_sck
;

122 
	`gpio_dúe˘i⁄_öput
(
sda
);

124 *
d©a
 = 0; 
Àn
 > 0;Üen--) {

125 
u32
 
u
;

127 
	`πl8366_smi_˛k_dñay
(
smi
);

130 
	`gpio_£t_vÆue
(
sck
, 1);

131 
	`πl8366_smi_˛k_dñay
(
smi
);

132 
u
 = !!
	`gpio_gë_vÆue
(
sda
);

133 
	`gpio_£t_vÆue
(
sck
, 0);

135 *
d©a
 |(
u
 << (
Àn
 - 1));

138 
	`gpio_dúe˘i⁄_ouçut
(
sda
, 0);

139 
	}
}

141 
	$πl8366_smi_waô_f‹_ack
(
πl8366_smi
 *
smi
)

143 
ªåy_˙t
;

145 
ªåy_˙t
 = 0;

147 
u32
 
ack
;

149 
	`πl8366_smi_ªad_bôs
(
smi
, 1, &
ack
);

150 i‡(
ack
 == 0)

153 i‡(++
ªåy_˙t
 > 
RTL8366_SMI_ACK_RETRY_COUNT
) {

154 
	`dev_îr
(
smi
->
∑ª¡
, "ACKÅimeout\n");

155  -
ETIMEDOUT
;

160 
	}
}

162 
	$πl8366_smi_wrôe_byã
(
πl8366_smi
 *
smi
, 
u8
 
d©a
)

164 
	`πl8366_smi_wrôe_bôs
(
smi
, 
d©a
, 8);

165  
	`πl8366_smi_waô_f‹_ack
(
smi
);

166 
	}
}

168 
	$πl8366_smi_wrôe_byã_nﬂck
(
πl8366_smi
 *
smi
, 
u8
 
d©a
)

170 
	`πl8366_smi_wrôe_bôs
(
smi
, 
d©a
, 8);

172 
	}
}

174 
	$πl8366_smi_ªad_byã0
(
πl8366_smi
 *
smi
, 
u8
 *
d©a
)

176 
u32
 
t
;

179 
	`πl8366_smi_ªad_bôs
(
smi
, 8, &
t
);

180 *
d©a
 = (
t
 & 0xff);

183 
	`πl8366_smi_wrôe_bôs
(
smi
, 0x00, 1);

186 
	}
}

188 
	$πl8366_smi_ªad_byã1
(
πl8366_smi
 *
smi
, 
u8
 *
d©a
)

190 
u32
 
t
;

193 
	`πl8366_smi_ªad_bôs
(
smi
, 8, &
t
);

194 *
d©a
 = (
t
 & 0xff);

197 
	`πl8366_smi_wrôe_bôs
(
smi
, 0x01, 1);

200 
	}
}

202 
	$__πl8366_smi_ªad_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 *
d©a
)

204 
Êags
;

205 
u8
 
lo
 = 0;

206 
u8
 
hi
 = 0;

207 
ªt
;

209 
	`•ö_lock_úqßve
(&
smi
->
lock
, 
Êags
);

211 
	`πl8366_smi_°¨t
(
smi
);

214 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, smi->
cmd_ªad
);

215 i‡(
ªt
)

216 
out
;

219 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
addr
 & 0xff);

220 i‡(
ªt
)

221 
out
;

224 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
addr
 >> 8);

225 i‡(
ªt
)

226 
out
;

229 
	`πl8366_smi_ªad_byã0
(
smi
, &
lo
);

231 
	`πl8366_smi_ªad_byã1
(
smi
, &
hi
);

233 *
d©a
 = ((
u32
Ë
lo
Ë| (((u32Ë
hi
) << 8);

235 
ªt
 = 0;

237 
out
:

238 
	`πl8366_smi_°›
(
smi
);

239 
	`•ö_u∆ock_úqª°‹e
(&
smi
->
lock
, 
Êags
);

241  
ªt
;

242 
	}
}

244 
	#MDC_MDIO_CTRL0_REG
 31

	)

245 
	#MDC_MDIO_START_REG
 29

	)

246 
	#MDC_MDIO_CTRL1_REG
 21

	)

247 
	#MDC_MDIO_ADDRESS_REG
 23

	)

248 
	#MDC_MDIO_DATA_WRITE_REG
 24

	)

249 
	#MDC_MDIO_DATA_READ_REG
 25

	)

251 
	#MDC_MDIO_START_OP
 0xFFFF

	)

252 
	#MDC_MDIO_ADDR_OP
 0x000E

	)

253 
	#MDC_MDIO_READ_OP
 0x0001

	)

254 
	#MDC_MDIO_WRITE_OP
 0x0003

	)

255 
	#MDC_REALTEK_PHY_ADDR
 0x0

	)

257 
	$__πl8366_mdio_ªad_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 *
d©a
)

259 
u32
 
phy_id
 = 
MDC_REALTEK_PHY_ADDR
;

260 
mii_bus
 *
mbus
 = 
smi
->
ext_mbus
;

262 
	`BUG_ON
(
	`ö_öãºu±
());

264 
	`muãx_lock
(&
mbus
->
mdio_lock
);

266 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

269 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_CTRL0_REG
, 
MDC_MDIO_ADDR_OP
);

272 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

275 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_ADDRESS_REG
, 
addr
);

278 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

281 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_CTRL1_REG
, 
MDC_MDIO_READ_OP
);

284 
mbus
->
	`wrôe
(
smi
->
ext_mbus
, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

287 *
d©a
 = 
mbus
->
	`ªad
(mbus, 
phy_id
, 
MDC_MDIO_DATA_READ_REG
);

289 
	`muãx_u∆ock
(&
mbus
->
mdio_lock
);

292 
	}
}

294 
	$__πl8366_mdio_wrôe_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
d©a
)

296 
u32
 
phy_id
 = 
MDC_REALTEK_PHY_ADDR
;

297 
mii_bus
 *
mbus
 = 
smi
->
ext_mbus
;

299 
	`BUG_ON
(
	`ö_öãºu±
());

301 
	`muãx_lock
(&
mbus
->
mdio_lock
);

304 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

307 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_CTRL0_REG
, 
MDC_MDIO_ADDR_OP
);

310 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

313 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_ADDRESS_REG
, 
addr
);

316 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

319 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_DATA_WRITE_REG
, 
d©a
);

322 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_START_REG
, 
MDC_MDIO_START_OP
);

325 
mbus
->
	`wrôe
(mbus, 
phy_id
, 
MDC_MDIO_CTRL1_REG
, 
MDC_MDIO_WRITE_OP
);

327 
	`muãx_u∆ock
(&
mbus
->
mdio_lock
);

329 
	}
}

331 
	$πl8366_smi_ªad_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 *
d©a
)

333 i‡(
smi
->
ext_mbus
)

334  
	`__πl8366_mdio_ªad_ªg
(
smi
, 
addr
, 
d©a
);

336  
	`__πl8366_smi_ªad_ªg
(
smi
, 
addr
, 
d©a
);

337 
	}
}

338 
EXPORT_SYMBOL_GPL
(
πl8366_smi_ªad_ªg
);

340 
	$__πl8366_smi_wrôe_ªg
(
πl8366_smi
 *
smi
,

341 
u32
 
addr
, u32 
d©a
, 
boﬁ
 
ack
)

343 
Êags
;

344 
ªt
;

346 
	`•ö_lock_úqßve
(&
smi
->
lock
, 
Êags
);

348 
	`πl8366_smi_°¨t
(
smi
);

351 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, smi->
cmd_wrôe
);

352 i‡(
ªt
)

353 
out
;

356 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
addr
 & 0xff);

357 i‡(
ªt
)

358 
out
;

361 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
addr
 >> 8);

362 i‡(
ªt
)

363 
out
;

366 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
d©a
 & 0xff);

367 i‡(
ªt
)

368 
out
;

371 i‡(
ack
)

372 
ªt
 = 
	`πl8366_smi_wrôe_byã
(
smi
, 
d©a
 >> 8);

374 
ªt
 = 
	`πl8366_smi_wrôe_byã_nﬂck
(
smi
, 
d©a
 >> 8);

375 i‡(
ªt
)

376 
out
;

378 
ªt
 = 0;

380 
out
:

381 
	`πl8366_smi_°›
(
smi
);

382 
	`•ö_u∆ock_úqª°‹e
(&
smi
->
lock
, 
Êags
);

384  
ªt
;

385 
	}
}

387 
	$πl8366_smi_wrôe_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
d©a
)

389 i‡(
smi
->
ext_mbus
)

390  
	`__πl8366_mdio_wrôe_ªg
(
smi
, 
addr
, 
d©a
);

392  
	`__πl8366_smi_wrôe_ªg
(
smi
, 
addr
, 
d©a
, 
åue
);

393 
	}
}

394 
EXPORT_SYMBOL_GPL
(
πl8366_smi_wrôe_ªg
);

396 
	$πl8366_smi_wrôe_ªg_nﬂck
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
d©a
)

398  
	`__πl8366_smi_wrôe_ªg
(
smi
, 
addr
, 
d©a
, 
Ál£
);

399 
	}
}

400 
EXPORT_SYMBOL_GPL
(
πl8366_smi_wrôe_ªg_nﬂck
);

402 
	$πl8366_smi_rmwr
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
mask
, u32 
d©a
)

404 
u32
 
t
;

405 
îr
;

407 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
addr
, &
t
);

408 i‡(
îr
)

409  
îr
;

411 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
addr
, (
t
 & ~
mask
Ë| 
d©a
);

412  
îr
;

414 
	}
}

415 
EXPORT_SYMBOL_GPL
(
πl8366_smi_rmwr
);

417 
	$πl8366_ª£t
(
πl8366_smi
 *
smi
)

419 i‡(
smi
->
hw_ª£t
) {

420 
smi
->
	`hw_ª£t
(smi, 
åue
);

421 
	`m¶ìp
(
RTL8366_SMI_HW_STOP_DELAY
);

422 
smi
->
	`hw_ª£t
(smi, 
Ál£
);

423 
	`m¶ìp
(
RTL8366_SMI_HW_START_DELAY
);

427  
smi
->
›s
->
	`ª£t_chù
(smi);

428 
	}
}

430 
	$πl8366_mc_is_u£d
(
πl8366_smi
 *
smi
, 
mc_ödex
, *
u£d
)

432 
îr
;

433 
i
;

435 *
u£d
 = 0;

436 
i
 = 0; i < 
smi
->
num_p‹ts
; i++) {

437 
ödex
 = 0;

439 
îr
 = 
smi
->
›s
->
	`gë_mc_ödex
(smi, 
i
, &
ödex
);

440 i‡(
îr
)

441  
îr
;

443 i‡(
mc_ödex
 =
ödex
) {

444 *
u£d
 = 1;

450 
	}
}

452 
	$πl8366_£t_vœn
(
πl8366_smi
 *
smi
, 
vid
, 
u32
 
membî
,

453 
u32
 
u¡ag
, u32 
fid
)

455 
πl8366_vœn_4k
 
vœn4k
;

456 
îr
;

457 
i
;

460 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vid
, &
vœn4k
);

461 i‡(
îr
)

462  
îr
;

464 
vœn4k
.
membî
 = member;

465 
vœn4k
.
u¡ag
 = untag;

466 
vœn4k
.
fid
 = fid;

467 
îr
 = 
smi
->
›s
->
	`£t_vœn_4k
(smi, &
vœn4k
);

468 i‡(
îr
)

469  
îr
;

472 
i
 = 0; i < 
smi
->
num_vœn_mc
; i++) {

473 
πl8366_vœn_mc
 
vœnmc
;

475 
îr
 = 
smi
->
›s
->
	`gë_vœn_mc
(smi, 
i
, &
vœnmc
);

476 i‡(
îr
)

477  
îr
;

479 i‡(
vid
 =
vœnmc
.vid) {

481 
vœnmc
.
membî
 = member;

482 
vœnmc
.
u¡ag
 = untag;

483 
vœnmc
.
fid
 = fid;

485 
îr
 = 
smi
->
›s
->
	`£t_vœn_mc
(smi, 
i
, &
vœnmc
);

490  
îr
;

491 
	}
}

493 
	$πl8366_gë_pvid
(
πl8366_smi
 *
smi
, 
p‹t
, *
vÆ
)

495 
πl8366_vœn_mc
 
vœnmc
;

496 
îr
;

497 
ödex
;

499 
îr
 = 
smi
->
›s
->
	`gë_mc_ödex
(smi, 
p‹t
, &
ödex
);

500 i‡(
îr
)

501  
îr
;

503 
îr
 = 
smi
->
›s
->
	`gë_vœn_mc
(smi, 
ödex
, &
vœnmc
);

504 i‡(
îr
)

505  
îr
;

507 *
vÆ
 = 
vœnmc
.
vid
;

509 
	}
}

511 
	$πl8366_£t_pvid
(
πl8366_smi
 *
smi
, 
p‹t
,

512 
vid
)

514 
πl8366_vœn_mc
 
vœnmc
;

515 
πl8366_vœn_4k
 
vœn4k
;

516 
îr
;

517 
i
;

520 
i
 = 0; i < 
smi
->
num_vœn_mc
; i++) {

521 
îr
 = 
smi
->
›s
->
	`gë_vœn_mc
(smi, 
i
, &
vœnmc
);

522 i‡(
îr
)

523  
îr
;

525 i‡(
vid
 =
vœnmc
.vid) {

526 
îr
 = 
smi
->
›s
->
	`£t_vœn_mc
(smi, 
i
, &
vœnmc
);

527 i‡(
îr
)

528  
îr
;

530 
îr
 = 
smi
->
›s
->
	`£t_mc_ödex
(smi, 
p‹t
, 
i
);

531  
îr
;

536 
i
 = 0; i < 
smi
->
num_vœn_mc
; i++) {

537 
îr
 = 
smi
->
›s
->
	`gë_vœn_mc
(smi, 
i
, &
vœnmc
);

538 i‡(
îr
)

539  
îr
;

541 i‡(
vœnmc
.
vid
 =0 && vœnmc.
membî
 == 0) {

543 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vid
, &
vœn4k
);

544 i‡(
îr
)

545  
îr
;

547 
vœnmc
.
vid
 = vid;

548 
vœnmc
.
membî
 = 
vœn4k
.member;

549 
vœnmc
.
u¡ag
 = 
vœn4k
.untag;

550 
vœnmc
.
fid
 = 
vœn4k
.fid;

551 
îr
 = 
smi
->
›s
->
	`£t_vœn_mc
(smi, 
i
, &
vœnmc
);

552 i‡(
îr
)

553  
îr
;

555 
îr
 = 
smi
->
›s
->
	`£t_mc_ödex
(smi, 
p‹t
, 
i
);

556  
îr
;

561 
i
 = 0; i < 
smi
->
num_vœn_mc
; i++) {

562 
u£d
;

564 
îr
 = 
	`πl8366_mc_is_u£d
(
smi
, 
i
, &
u£d
);

565 i‡(
îr
)

566  
îr
;

568 i‡(!
u£d
) {

570 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vid
, &
vœn4k
);

571 i‡(
îr
)

572  
îr
;

574 
vœnmc
.
vid
 = vid;

575 
vœnmc
.
membî
 = 
vœn4k
.member;

576 
vœnmc
.
u¡ag
 = 
vœn4k
.untag;

577 
vœnmc
.
fid
 = 
vœn4k
.fid;

578 
îr
 = 
smi
->
›s
->
	`£t_vœn_mc
(smi, 
i
, &
vœnmc
);

579 i‡(
îr
)

580  
îr
;

582 
îr
 = 
smi
->
›s
->
	`£t_mc_ödex
(smi, 
p‹t
, 
i
);

583  
îr
;

587 
	`dev_îr
(
smi
->
∑ª¡
,

590  -
ENOSPC
;

591 
	}
}

593 
	$πl8366_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
)

595 
îr
;

597 
îr
 = 
smi
->
›s
->
	`íabÀ_vœn
(smi, 
íabÀ
);

598 i‡(
îr
)

599  
îr
;

601 
smi
->
vœn_íabÀd
 = 
íabÀ
;

603 i‡(!
íabÀ
) {

604 
smi
->
vœn4k_íabÀd
 = 0;

605 
îr
 = 
smi
->
›s
->
	`íabÀ_vœn4k
(smi, 
íabÀ
);

608  
îr
;

609 
	}
}

610 
EXPORT_SYMBOL_GPL
(
πl8366_íabÀ_vœn
);

612 
	$πl8366_íabÀ_vœn4k
(
πl8366_smi
 *
smi
, 
íabÀ
)

614 
îr
;

616 i‡(
íabÀ
) {

617 
îr
 = 
smi
->
›s
->
	`íabÀ_vœn
(smi, 
íabÀ
);

618 i‡(
îr
)

619  
îr
;

621 
smi
->
vœn_íabÀd
 = 
íabÀ
;

624 
îr
 = 
smi
->
›s
->
	`íabÀ_vœn4k
(smi, 
íabÀ
);

625 i‡(
îr
)

626  
îr
;

628 
smi
->
vœn4k_íabÀd
 = 
íabÀ
;

630 
	}
}

632 
	$πl8366_íabÀ_Æl_p‹ts
(
πl8366_smi
 *
smi
, 
íabÀ
)

634 
p‹t
;

635 
îr
;

637 
p‹t
 = 0;Ö‹à< 
smi
->
num_p‹ts
;Öort++) {

638 
îr
 = 
smi
->
›s
->
	`íabÀ_p‹t
(smi, 
p‹t
, 
íabÀ
);

639 i‡(
îr
)

640  
îr
;

644 
	}
}

645 
EXPORT_SYMBOL_GPL
(
πl8366_íabÀ_Æl_p‹ts
);

647 
	$πl8366_ª£t_vœn
(
πl8366_smi
 *
smi
)

649 
πl8366_vœn_mc
 
vœnmc
;

650 
îr
;

651 
i
;

653 
	`πl8366_íabÀ_vœn
(
smi
, 0);

654 
	`πl8366_íabÀ_vœn4k
(
smi
, 0);

657 
vœnmc
.
vid
 = 0;

658 
vœnmc
.
¥i‹ôy
 = 0;

659 
vœnmc
.
membî
 = 0;

660 
vœnmc
.
u¡ag
 = 0;

661 
vœnmc
.
fid
 = 0;

662 
i
 = 0; i < 
smi
->
num_vœn_mc
; i++) {

663 
îr
 = 
smi
->
›s
->
	`£t_vœn_mc
(smi, 
i
, &
vœnmc
);

664 i‡(
îr
)

665  
îr
;

669 
	}
}

670 
EXPORT_SYMBOL_GPL
(
πl8366_ª£t_vœn
);

672 
	$πl8366_öô_vœn
(
πl8366_smi
 *
smi
)

674 
p‹t
;

675 
îr
;

677 
îr
 = 
	`πl8366_ª£t_vœn
(
smi
);

678 i‡(
îr
)

679  
îr
;

681 
p‹t
 = 0;Ö‹à< 
smi
->
num_p‹ts
;Öort++) {

682 
u32
 
mask
;

684 i‡(
p‹t
 =
smi
->
˝u_p‹t
)

685 
mask
 = (1 << 
smi
->
num_p‹ts
) - 1;

687 
mask
 = (1 << 
p‹t
Ë| (1 << 
smi
->
˝u_p‹t
);

689 
îr
 = 
	`πl8366_£t_vœn
(
smi
, (
p‹t
 + 1), 
mask
, mask, 0);

690 i‡(
îr
)

691  
îr
;

693 
îr
 = 
	`πl8366_£t_pvid
(
smi
, 
p‹t
, (port + 1));

694 i‡(
îr
)

695  
îr
;

698  
	`πl8366_íabÀ_vœn
(
smi
, 1);

699 
	}
}

701 #ifde‡
CONFIG_RTL8366_SMI_DEBUG_FS


702 
	$πl8366_debugfs_›í
(
öode
 *öode, 
fûe
 *file)

704 
fûe
->
¥iv©e_d©a
 = 
öode
->
i_¥iv©e
;

706 
	}
}

707 
EXPORT_SYMBOL_GPL
(
πl8366_debugfs_›í
);

709 
ssize_t
 
	$πl8366_ªad_debugfs_vœn_mc
(
fûe
 *file,

710 
__u£r
 *
u£r_buf
,

711 
size_t
 
cou¡
, 
loff_t
 *
µos
)

713 
πl8366_smi
 *
smi
 = (πl8366_smò*)
fûe
->
¥iv©e_d©a
;

714 
i
, 
Àn
 = 0;

715 *
buf
 = 
smi
->buf;

717 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

721 
i
 = 0; i < 
smi
->
num_vœn_mc
; ++i) {

722 
πl8366_vœn_mc
 
vœnmc
;

724 
smi
->
›s
->
	`gë_vœn_mc
(smi, 
i
, &
vœnmc
);

726 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

728 
i
, 
vœnmc
.
vid
, vœnmc.
¥i‹ôy
,

729 
vœnmc
.
membî
, vœnmc.
u¡ag
, vœnmc.
fid
);

732  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

733 
	}
}

735 
	#RTL8366_VLAN4K_PAGE_SIZE
 64

	)

736 
	#RTL8366_VLAN4K_NUM_PAGES
 (4096 / 
RTL8366_VLAN4K_PAGE_SIZE
)

	)

738 
ssize_t
 
	$πl8366_ªad_debugfs_vœn_4k
(
fûe
 *file,

739 
__u£r
 *
u£r_buf
,

740 
size_t
 
cou¡
, 
loff_t
 *
µos
)

742 
πl8366_smi
 *
smi
 = (πl8366_smò*)
fûe
->
¥iv©e_d©a
;

743 
i
, 
Àn
 = 0;

744 
off£t
;

745 *
buf
 = 
smi
->buf;

747 i‡(
smi
->
dbg_vœn_4k_∑ge
 >
RTL8366_VLAN4K_NUM_PAGES
) {

748 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

749 "övÆidÖage: %u\n", 
smi
->
dbg_vœn_4k_∑ge
);

750  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

753 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

757 
off£t
 = 
RTL8366_VLAN4K_PAGE_SIZE
 * 
smi
->
dbg_vœn_4k_∑ge
;

758 
i
 = 0; i < 
RTL8366_VLAN4K_PAGE_SIZE
; i++) {

759 
πl8366_vœn_4k
 
vœn4k
;

761 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
off£t
 + 
i
, &
vœn4k
);

763 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

765 
vœn4k
.
vid
, vœn4k.
membî
,

766 
vœn4k
.
u¡ag
, vœn4k.
fid
);

769  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

770 
	}
}

772 
ssize_t
 
	$πl8366_ªad_debugfs_pvid
(
fûe
 *file,

773 
__u£r
 *
u£r_buf
,

774 
size_t
 
cou¡
, 
loff_t
 *
µos
)

776 
πl8366_smi
 *
smi
 = (πl8366_smò*)
fûe
->
¥iv©e_d©a
;

777 *
buf
 = 
smi
->buf;

778 
Àn
 = 0;

779 
i
;

781 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, "%4s %4s\n",

784 
i
 = 0; i < 
smi
->
num_p‹ts
; i++) {

785 
pvid
;

786 
îr
;

788 
îr
 = 
	`πl8366_gë_pvid
(
smi
, 
i
, &
pvid
);

789 i‡(
îr
)

790 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

791 "%4dÉº‹\n", 
i
);

793 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

794 "%4d %4d\n", 
i
, 
pvid
);

797  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

798 
	}
}

800 
ssize_t
 
	$πl8366_ªad_debugfs_ªg
(
fûe
 *file,

801 
__u£r
 *
u£r_buf
,

802 
size_t
 
cou¡
, 
loff_t
 *
µos
)

804 
πl8366_smi
 *
smi
 = (πl8366_smò*)
fûe
->
¥iv©e_d©a
;

805 
u32
 
t
, 
ªg
 = 
smi
->
dbg_ªg
;

806 
îr
, 
Àn
 = 0;

807 *
buf
 = 
smi
->buf;

809 
	`mem£t
(
buf
, '\0', (
smi
->buf));

811 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
ªg
, &
t
);

812 i‡(
îr
) {

813 
Àn
 +
	`¢¥ötf
(
buf
, (
smi
->buf),

814 "Ród faûed (ªg: 0x%04x)\n", 
ªg
);

815  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

818 
Àn
 +
	`¢¥ötf
(
buf
, (
smi
->buf), "reg = 0x%04x, val = 0x%04x\n",

819 
ªg
, 
t
);

821  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

822 
	}
}

824 
ssize_t
 
	$πl8366_wrôe_debugfs_ªg
(
fûe
 *file,

825 c⁄° 
__u£r
 *
u£r_buf
,

826 
size_t
 
cou¡
, 
loff_t
 *
µos
)

828 
πl8366_smi
 *
smi
 = (πl8366_smò*)
fûe
->
¥iv©e_d©a
;

829 
d©a
;

830 
u32
 
ªg
 = 
smi
->
dbg_ªg
;

831 
îr
;

832 
size_t
 
Àn
;

833 *
buf
 = 
smi
->buf;

835 
Àn
 = 
	`mö
(
cou¡
, (
smi
->
buf
) - 1);

836 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
)) {

837 
	`dev_îr
(
smi
->
∑ª¡
, "copy from user failed\n");

838  -
EFAULT
;

841 
buf
[
Àn
] = '\0';

842 i‡(
Àn
 > 0 && 
buf
[len - 1] == '\n')

843 
buf
[
Àn
 - 1] = '\0';

846 i‡(
	`k°πoul
(
buf
, 16, &
d©a
)) {

847 
	`dev_îr
(
smi
->
∑ª¡
, "InvÆidÑeg vÆuê%s\n", 
buf
);

849 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
ªg
, 
d©a
);

850 i‡(
îr
) {

851 
	`dev_îr
(
smi
->
∑ª¡
,

853 
ªg
, 
d©a
);

857  
cou¡
;

858 
	}
}

860 
ssize_t
 
	$πl8366_ªad_debugfs_mibs
(
fûe
 *file,

861 
__u£r
 *
u£r_buf
,

862 
size_t
 
cou¡
, 
loff_t
 *
µos
)

864 
πl8366_smi
 *
smi
 = 
fûe
->
¥iv©e_d©a
;

865 
i
, 
j
, 
Àn
 = 0;

866 *
buf
 = 
smi
->buf;

868 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, "%-36s",

871 
i
 = 0; i < 
smi
->
num_p‹ts
; i++) {

872 
p‹t_buf
[10];

874 
	`¢¥ötf
(
p‹t_buf
, ’‹t_buf), "P‹à%d", 
i
);

875 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, " %12s",

876 
p‹t_buf
);

878 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, "\n");

880 
i
 = 0; i < 
smi
->
num_mib_cou¡îs
; i++) {

881 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, "%-36s ",

882 
smi
->
mib_cou¡îs
[
i
].
«me
);

883 
j
 = 0; j < 
smi
->
num_p‹ts
; j++) {

884 
cou¡î
 = 0;

886 i‡(!
smi
->
›s
->
	`gë_mib_cou¡î
(smi, 
i
, 
j
, &
cou¡î
))

887 
Àn
 +
	`¢¥ötf
(
buf
 +Üen,

888 (
smi
->
buf
Ë- 
Àn
,

889 "%12Œu ", 
cou¡î
);

891 
Àn
 +
	`¢¥ötf
(
buf
 +Üen,

892 (
smi
->
buf
Ë- 
Àn
,

895 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen, "\n");

898  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

899 
	}
}

901 c⁄° 
fûe_›î©i⁄s
 
	gf›s_πl8366_ªgs
 = {

902 .
ªad
 = 
πl8366_ªad_debugfs_ªg
,

903 .
	gwrôe
 = 
πl8366_wrôe_debugfs_ªg
,

904 .
	g›í
 = 
πl8366_debugfs_›í
,

905 .
	gow√r
 = 
THIS_MODULE


908 c⁄° 
fûe_›î©i⁄s
 
	gf›s_πl8366_vœn_mc
 = {

909 .
ªad
 = 
πl8366_ªad_debugfs_vœn_mc
,

910 .
	g›í
 = 
πl8366_debugfs_›í
,

911 .
	gow√r
 = 
THIS_MODULE


914 c⁄° 
fûe_›î©i⁄s
 
	gf›s_πl8366_vœn_4k
 = {

915 .
ªad
 = 
πl8366_ªad_debugfs_vœn_4k
,

916 .
	g›í
 = 
πl8366_debugfs_›í
,

917 .
	gow√r
 = 
THIS_MODULE


920 c⁄° 
fûe_›î©i⁄s
 
	gf›s_πl8366_pvid
 = {

921 .
ªad
 = 
πl8366_ªad_debugfs_pvid
,

922 .
	g›í
 = 
πl8366_debugfs_›í
,

923 .
	gow√r
 = 
THIS_MODULE


926 c⁄° 
fûe_›î©i⁄s
 
	gf›s_πl8366_mibs
 = {

927 .
ªad
 = 
πl8366_ªad_debugfs_mibs
,

928 .
	g›í
 = 
πl8366_debugfs_›í
,

929 .
	gow√r
 = 
THIS_MODULE


932 
	$πl8366_debugfs_öô
(
πl8366_smi
 *
smi
)

934 
díåy
 *
node
;

935 
díåy
 *
roŸ
;

937 i‡(!
smi
->
debugfs_roŸ
)

938 
smi
->
debugfs_roŸ
 = 
	`debugfs_¸óã_dú
(
	`dev_«me
(smi->
∑ª¡
),

939 
NULL
);

941 i‡(!
smi
->
debugfs_roŸ
) {

942 
	`dev_îr
(
smi
->
∑ª¡
, "UnableÅo create debugfs dir\n");

945 
roŸ
 = 
smi
->
debugfs_roŸ
;

947 
node
 = 
	`debugfs_¸óã_x16
("ªg", 
S_IRUGO
 | 
S_IWUSR
, 
roŸ
,

948 &
smi
->
dbg_ªg
);

949 i‡(!
node
) {

950 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

955 
node
 = 
	`debugfs_¸óã_fûe
("vÆ", 
S_IRUGO
 | 
S_IWUSR
, 
roŸ
, 
smi
,

956 &
f›s_πl8366_ªgs
);

957 i‡(!
node
) {

958 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

963 
node
 = 
	`debugfs_¸óã_fûe
("vœn_mc", 
S_IRUSR
, 
roŸ
, 
smi
,

964 &
f›s_πl8366_vœn_mc
);

965 i‡(!
node
) {

966 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

971 
node
 = 
	`debugfs_¸óã_u8
("vœn_4k_∑ge", 
S_IRUGO
 | 
S_IWUSR
, 
roŸ
,

972 &
smi
->
dbg_vœn_4k_∑ge
);

973 i‡(!
node
) {

974 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

979 
node
 = 
	`debugfs_¸óã_fûe
("vœn_4k", 
S_IRUSR
, 
roŸ
, 
smi
,

980 &
f›s_πl8366_vœn_4k
);

981 i‡(!
node
) {

982 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

987 
node
 = 
	`debugfs_¸óã_fûe
("pvid", 
S_IRUSR
, 
roŸ
, 
smi
,

988 &
f›s_πl8366_pvid
);

989 i‡(!
node
) {

990 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

995 
node
 = 
	`debugfs_¸óã_fûe
("mibs", 
S_IRUSR
, 
smi
->
debugfs_roŸ
, smi,

996 &
f›s_πl8366_mibs
);

997 i‡(!
node
)

998 
	`dev_îr
(
smi
->
∑ª¡
, "Creating debugfs file '%s' failed\n",

1000 
	}
}

1002 
	$πl8366_debugfs_ªmove
(
πl8366_smi
 *
smi
)

1004 i‡(
smi
->
debugfs_roŸ
) {

1005 
	`debugfs_ªmove_ªcursive
(
smi
->
debugfs_roŸ
);

1006 
smi
->
debugfs_roŸ
 = 
NULL
;

1008 
	}
}

1010 
ölöe
 
	$πl8366_debugfs_öô
(
πl8366_smi
 *
smi
Ë{
	}
}

1011 
ölöe
 
	$πl8366_debugfs_ªmove
(
πl8366_smi
 *
smi
Ë{
	}
}

1014 
	$πl8366_smi_mii_öô
(
πl8366_smi
 *
smi
)

1016 
ªt
;

1018 #ifde‡
CONFIG_OF


1019 
devi˚_node
 *
≈
 = 
NULL
;

1021 
≈
 = 
	`of_gë_chûd_by_«me
(
smi
->
∑ª¡
->
of_node
, "mdio-bus");

1024 
smi
->
mii_bus
 = 
	`mdiobus_Æloc
();

1025 i‡(
smi
->
mii_bus
 =
NULL
) {

1026 
ªt
 = -
ENOMEM
;

1027 
îr
;

1030 
smi
->
mii_bus
->
¥iv
 = (*) smi;

1031 
smi
->
mii_bus
->
«me
 = 
	`dev_«me
(smi->
∑ª¡
);

1032 
smi
->
mii_bus
->
ªad
 = smi->
›s
->
mii_ªad
;

1033 
smi
->
mii_bus
->
wrôe
 = smi->
›s
->
mii_wrôe
;

1034 
	`¢¥ötf
(
smi
->
mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s",

1035 
	`dev_«me
(
smi
->
∑ª¡
));

1036 
smi
->
mii_bus
->
∑ª¡
 = smi->parent;

1037 
smi
->
mii_bus
->
phy_mask
 = ~(0x1f);

1038 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,5,0)

1040 
i
;

1041 
smi
->
mii_bus
->
úq
 = smi->
mii_úq
;

1042 
i
 = 0; i < 
PHY_MAX_ADDR
; i++)

1043 
smi
->
mii_úq
[
i
] = 
PHY_POLL
;

1047 #ifde‡
CONFIG_OF


1048 i‡(
≈
)

1049 
ªt
 = 
	`of_mdiobus_ªgi°î
(
smi
->
mii_bus
, 
≈
);

1052 
ªt
 = 
	`mdiobus_ªgi°î
(
smi
->
mii_bus
);

1054 i‡(
ªt
)

1055 
îr_‰ì
;

1059 
îr_‰ì
:

1060 
	`mdiobus_‰ì
(
smi
->
mii_bus
);

1061 
îr
:

1062  
ªt
;

1063 
	}
}

1065 
	$πl8366_smi_mii_˛ónup
(
πl8366_smi
 *
smi
)

1067 
	`mdiobus_uƒegi°î
(
smi
->
mii_bus
);

1068 
	`mdiobus_‰ì
(
smi
->
mii_bus
);

1069 
	}
}

1071 
	$πl8366_sw_ª£t_swôch
(
swôch_dev
 *
dev
)

1073 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1074 
îr
;

1076 
îr
 = 
	`πl8366_ª£t
(
smi
);

1077 i‡(
îr
)

1078  
îr
;

1080 
îr
 = 
smi
->
›s
->
	`£tup
(smi);

1081 i‡(
îr
)

1082  
îr
;

1084 
îr
 = 
	`πl8366_ª£t_vœn
(
smi
);

1085 i‡(
îr
)

1086  
îr
;

1088 
îr
 = 
	`πl8366_íabÀ_vœn
(
smi
, 1);

1089 i‡(
îr
)

1090  
îr
;

1092  
	`πl8366_íabÀ_Æl_p‹ts
(
smi
, 1);

1093 
	}
}

1094 
EXPORT_SYMBOL_GPL
(
πl8366_sw_ª£t_swôch
);

1096 
	$πl8366_sw_gë_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

1098 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1099  
	`πl8366_gë_pvid
(
smi
, 
p‹t
, 
vÆ
);

1100 
	}
}

1101 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_p‹t_pvid
);

1103 
	$πl8366_sw_£t_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
)

1105 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1106  
	`πl8366_£t_pvid
(
smi
, 
p‹t
, 
vÆ
);

1107 
	}
}

1108 
EXPORT_SYMBOL_GPL
(
πl8366_sw_£t_p‹t_pvid
);

1110 
	$πl8366_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

1111 c⁄° 
swôch_©å
 *
©å
,

1112 
swôch_vÆ
 *
vÆ
)

1114 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1115 
i
, 
Àn
 = 0;

1116 
cou¡î
 = 0;

1117 *
buf
 = 
smi
->buf;

1119 i‡(
vÆ
->
p‹t_vœn
 >
smi
->
num_p‹ts
)

1120  -
EINVAL
;

1122 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1124 
vÆ
->
p‹t_vœn
);

1126 
i
 = 0; i < 
smi
->
num_mib_cou¡îs
; ++i) {

1127 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1128 "%-36s: ", 
smi
->
mib_cou¡îs
[
i
].
«me
);

1129 i‡(!
smi
->
›s
->
	`gë_mib_cou¡î
(smi, 
i
, 
vÆ
->
p‹t_vœn
,

1130 &
cou¡î
))

1131 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1132 "%Œu\n", 
cou¡î
);

1134 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1138 
vÆ
->
vÆue
.
s
 = 
buf
;

1139 
vÆ
->
Àn
 =Üen;

1141 
	}
}

1142 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_p‹t_mib
);

1144 
	$πl8366_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1145 
swôch_p‹t_°©s
 *
°©s
,

1146 
txb_id
, 
rxb_id
)

1148 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1149 
cou¡î
 = 0;

1150 
ªt
;

1152 i‡(
p‹t
 >
smi
->
num_p‹ts
)

1153  -
EINVAL
;

1155 
ªt
 = 
smi
->
›s
->
	`gë_mib_cou¡î
(smi, 
txb_id
, 
p‹t
, &
cou¡î
);

1156 i‡(
ªt
)

1157  
ªt
;

1159 
°©s
->
tx_byãs
 = 
cou¡î
;

1161 
ªt
 = 
smi
->
›s
->
	`gë_mib_cou¡î
(smi, 
rxb_id
, 
p‹t
, &
cou¡î
);

1162 i‡(
ªt
)

1163  
ªt
;

1165 
°©s
->
rx_byãs
 = 
cou¡î
;

1168 
	}
}

1169 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_p‹t_°©s
);

1171 
	$πl8366_sw_gë_vœn_öfo
(
swôch_dev
 *
dev
,

1172 c⁄° 
swôch_©å
 *
©å
,

1173 
swôch_vÆ
 *
vÆ
)

1175 
i
;

1176 
u32
 
Àn
 = 0;

1177 
πl8366_vœn_4k
 
vœn4k
;

1178 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1179 *
buf
 = 
smi
->buf;

1180 
îr
;

1182 i‡(!
smi
->
›s
->
	`is_vœn_vÆid
(smi, 
vÆ
->
p‹t_vœn
))

1183  -
EINVAL
;

1185 
	`mem£t
(
buf
, '\0', (
smi
->buf));

1187 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vÆ
->
p‹t_vœn
, &
vœn4k
);

1188 i‡(
îr
)

1189  
îr
;

1191 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1192 "VLAN %d: P‹ts: '", 
vœn4k
.
vid
);

1194 
i
 = 0; i < 
smi
->
num_p‹ts
; i++) {

1195 i‡(!(
vœn4k
.
membî
 & (1 << 
i
)))

1198 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->bufË-Üí, "%d%s", 
i
,

1199 (
vœn4k
.
u¡ag
 & (1 << 
i
)) ? "" : "t");

1202 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, (
smi
->buf) -Üen,

1204 
vœn4k
.
membî
, vœn4k.
u¡ag
, vœn4k.
fid
);

1206 
vÆ
->
vÆue
.
s
 = 
buf
;

1207 
vÆ
->
Àn
 =Üen;

1210 
	}
}

1211 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_vœn_öfo
);

1213 
	$πl8366_sw_gë_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1215 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1216 
swôch_p‹t
 *
p‹t
;

1217 
πl8366_vœn_4k
 
vœn4k
;

1218 
i
;

1220 i‡(!
smi
->
›s
->
	`is_vœn_vÆid
(smi, 
vÆ
->
p‹t_vœn
))

1221  -
EINVAL
;

1223 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vÆ
->
p‹t_vœn
, &
vœn4k
);

1225 
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[0];

1226 
vÆ
->
Àn
 = 0;

1227 
i
 = 0; i < 
smi
->
num_p‹ts
; i++) {

1228 i‡(!(
vœn4k
.
membî
 & 
	`BIT
(
i
)))

1231 
p‹t
->
id
 = 
i
;

1232 
p‹t
->
Êags
 = (
vœn4k
.
u¡ag
 & 
	`BIT
(
i
)) ?

1233 0 : 
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
);

1234 
vÆ
->
Àn
++;

1235 
p‹t
++;

1238 
	}
}

1239 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_vœn_p‹ts
);

1241 
	$πl8366_sw_£t_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1243 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1244 
swôch_p‹t
 *
p‹t
;

1245 
u32
 
membî
 = 0;

1246 
u32
 
u¡ag
 = 0;

1247 
îr
;

1248 
i
;

1250 i‡(!
smi
->
›s
->
	`is_vœn_vÆid
(smi, 
vÆ
->
p‹t_vœn
))

1251  -
EINVAL
;

1253 
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[0];

1254 
i
 = 0; i < 
vÆ
->
Àn
; i++, 
p‹t
++) {

1255 
pvid
 = 0;

1256 
membî
 |
	`BIT
(
p‹t
->
id
);

1258 i‡(!(
p‹t
->
Êags
 & 
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
)))

1259 
u¡ag
 |
	`BIT
(
p‹t
->
id
);

1265 
îr
 = 
	`πl8366_gë_pvid
(
smi
, 
p‹t
->
id
, &
pvid
);

1266 i‡(
îr
 < 0)

1267  
îr
;

1268 i‡(
pvid
 == 0) {

1269 
îr
 = 
	`πl8366_£t_pvid
(
smi
, 
p‹t
->
id
, 
vÆ
->
p‹t_vœn
);

1270 i‡(
îr
 < 0)

1271  
îr
;

1275  
	`πl8366_£t_vœn
(
smi
, 
vÆ
->
p‹t_vœn
, 
membî
, 
u¡ag
, 0);

1276 
	}
}

1277 
EXPORT_SYMBOL_GPL
(
πl8366_sw_£t_vœn_p‹ts
);

1279 
	$πl8366_sw_gë_vœn_fid
(
swôch_dev
 *
dev
,

1280 c⁄° 
swôch_©å
 *
©å
,

1281 
swôch_vÆ
 *
vÆ
)

1283 
πl8366_vœn_4k
 
vœn4k
;

1284 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1285 
îr
;

1287 i‡(!
smi
->
›s
->
	`is_vœn_vÆid
(smi, 
vÆ
->
p‹t_vœn
))

1288  -
EINVAL
;

1290 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vÆ
->
p‹t_vœn
, &
vœn4k
);

1291 i‡(
îr
)

1292  
îr
;

1294 
vÆ
->
vÆue
.
i
 = 
vœn4k
.
fid
;

1297 
	}
}

1298 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_vœn_fid
);

1300 
	$πl8366_sw_£t_vœn_fid
(
swôch_dev
 *
dev
,

1301 c⁄° 
swôch_©å
 *
©å
,

1302 
swôch_vÆ
 *
vÆ
)

1304 
πl8366_vœn_4k
 
vœn4k
;

1305 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1306 
îr
;

1308 i‡(!
smi
->
›s
->
	`is_vœn_vÆid
(smi, 
vÆ
->
p‹t_vœn
))

1309  -
EINVAL
;

1311 i‡(
vÆ
->
vÆue
.
i
 < 0 || vÆ->vÆue.ò> 
©å
->
max
)

1312  -
EINVAL
;

1314 
îr
 = 
smi
->
›s
->
	`gë_vœn_4k
(smi, 
vÆ
->
p‹t_vœn
, &
vœn4k
);

1315 i‡(
îr
)

1316  
îr
;

1318  
	`πl8366_£t_vœn
(
smi
, 
vÆ
->
p‹t_vœn
,

1319 
vœn4k
.
membî
,

1320 
vœn4k
.
u¡ag
,

1321 
vÆ
->
vÆue
.
i
);

1322 
	}
}

1323 
EXPORT_SYMBOL_GPL
(
πl8366_sw_£t_vœn_fid
);

1325 
	$πl8366_sw_gë_vœn_íabÀ
(
swôch_dev
 *
dev
,

1326 c⁄° 
swôch_©å
 *
©å
,

1327 
swôch_vÆ
 *
vÆ
)

1329 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1331 i‡(
©å
->
ofs
 > 2)

1332  -
EINVAL
;

1334 i‡(
©å
->
ofs
 == 1)

1335 
vÆ
->
vÆue
.
i
 = 
smi
->
vœn_íabÀd
;

1337 
vÆ
->
vÆue
.
i
 = 
smi
->
vœn4k_íabÀd
;

1340 
	}
}

1341 
EXPORT_SYMBOL_GPL
(
πl8366_sw_gë_vœn_íabÀ
);

1343 
	$πl8366_sw_£t_vœn_íabÀ
(
swôch_dev
 *
dev
,

1344 c⁄° 
swôch_©å
 *
©å
,

1345 
swôch_vÆ
 *
vÆ
)

1347 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1348 
îr
;

1350 i‡(
©å
->
ofs
 > 2)

1351  -
EINVAL
;

1353 i‡(
©å
->
ofs
 == 1)

1354 
îr
 = 
	`πl8366_íabÀ_vœn
(
smi
, 
vÆ
->
vÆue
.
i
);

1356 
îr
 = 
	`πl8366_íabÀ_vœn4k
(
smi
, 
vÆ
->
vÆue
.
i
);

1358  
îr
;

1359 
	}
}

1360 
EXPORT_SYMBOL_GPL
(
πl8366_sw_£t_vœn_íabÀ
);

1362 
πl8366_smi
 *
	$πl8366_smi_Æloc
(
devi˚
 *
∑ª¡
)

1364 
πl8366_smi
 *
smi
;

1366 
	`BUG_ON
(!
∑ª¡
);

1368 
smi
 = 
	`kzÆloc
((*smi), 
GFP_KERNEL
);

1369 i‡(!
smi
) {

1370 
	`dev_îr
(
∑ª¡
, "no memory forÖrivate data\n");

1371  
NULL
;

1374 
smi
->
∑ª¡
 =Öarent;

1375  
smi
;

1376 
	}
}

1377 
EXPORT_SYMBOL_GPL
(
πl8366_smi_Æloc
);

1379 
	$__πl8366_smi_öô
(
πl8366_smi
 *
smi
, c⁄° *
«me
)

1381 
îr
;

1383 i‡(!
smi
->
ext_mbus
) {

1384 
îr
 = 
	`gpio_ªque°
(
smi
->
gpio_sda
, 
«me
);

1385 i‡(
îr
) {

1386 
	`¥ötk
(
KERN_ERR
 "rtl8366_smi: gpio_request failed for %u,Érr=%d\n",

1387 
smi
->
gpio_sda
, 
îr
);

1388 
îr_out
;

1391 
îr
 = 
	`gpio_ªque°
(
smi
->
gpio_sck
, 
«me
);

1392 i‡(
îr
) {

1393 
	`¥ötk
(
KERN_ERR
 "rtl8366_smi: gpio_request failed for %u,Érr=%d\n",

1394 
smi
->
gpio_sck
, 
îr
);

1395 
îr_‰ì_sda
;

1399 
	`•ö_lock_öô
(&
smi
->
lock
);

1402 i‡(
smi
->
hw_ª£t
) {

1403 
smi
->
	`hw_ª£t
(smi, 
Ál£
);

1404 
	`m¶ìp
(
RTL8366_SMI_HW_START_DELAY
);

1409 
îr_‰ì_sda
:

1410 
	`gpio_‰ì
(
smi
->
gpio_sda
);

1411 
îr_out
:

1412  
îr
;

1413 
	}
}

1415 
	$__πl8366_smi_˛ónup
(
πl8366_smi
 *
smi
)

1417 i‡(
smi
->
hw_ª£t
)

1418 
smi
->
	`hw_ª£t
(smi, 
åue
);

1420 i‡(!
smi
->
ext_mbus
) {

1421 
	`gpio_‰ì
(
smi
->
gpio_sck
);

1422 
	`gpio_‰ì
(
smi
->
gpio_sda
);

1424 
	}
}

1426 
πl8366_ty≥
 
	$πl8366_smi_dëe˘
(
πl8366_∂©f‹m_d©a
 *
pd©a
)

1428 
πl8366_smi
 
smi
;

1429 
πl8366_ty≥
 
ty≥
 = 
RTL8366_TYPE_UNKNOWN
;

1430 
u32
 
ªg
 = 0;

1432 
	`mem£t
(&
smi
, 0, (smi));

1433 
smi
.
gpio_sda
 = 
pd©a
->gpio_sda;

1434 
smi
.
gpio_sck
 = 
pd©a
->gpio_sck;

1435 
smi
.
˛k_dñay
 = 10;

1436 
smi
.
cmd_ªad
 = 0xa9;

1437 
smi
.
cmd_wrôe
 = 0xa8;

1439 i‡(
	`__πl8366_smi_öô
(&
smi
, "rtl8366"))

1440 
out
;

1442 i‡(
	`πl8366_smi_ªad_ªg
(&
smi
, 0x5c, &
ªg
))

1443 
˛ónup
;

1445 
ªg
) {

1447 
	`¥ötk
("Foundán RTL8366S switch\n");

1448 
ty≥
 = 
RTL8366_TYPE_S
;

1451 
	`¥ötk
("Foundán RTL8366RB switch\n");

1452 
ty≥
 = 
RTL8366_TYPE_RB
;

1455 
	`¥ötk
("Foundá¿Unknow¿RTL8366 swôch (id=0x%04x)\n", 
ªg
);

1459 
˛ónup
:

1460 
	`__πl8366_smi_˛ónup
(&
smi
);

1461 
out
:

1462  
ty≥
;

1463 
	}
}

1465 
	$πl8366_smi_öô
(
πl8366_smi
 *
smi
)

1467 
îr
;

1469 i‡(!
smi
->
›s
)

1470  -
EINVAL
;

1472 
îr
 = 
	`__πl8366_smi_öô
(
smi
, 
	`dev_«me
(smi->
∑ª¡
));

1473 i‡(
îr
)

1474 
îr_out
;

1476 i‡(!
smi
->
ext_mbus
)

1477 
	`dev_öfo
(
smi
->
∑ª¡
, "using GPIOÖins %u (SDA)ánd %u (SCK)\n",

1478 
smi
->
gpio_sda
, smi->
gpio_sck
);

1480 
	`dev_öfo
(
smi
->
∑ª¡
, "usög MDIO bu†'%s'\n", smi->
ext_mbus
->
«me
);

1482 
îr
 = 
smi
->
›s
->
	`dëe˘
(smi);

1483 i‡(
îr
) {

1484 
	`dev_îr
(
smi
->
∑ª¡
, "chù dëe˘i⁄ faûed,Éº=%d\n", 
îr
);

1485 
îr_‰ì_sck
;

1488 
îr
 = 
	`πl8366_ª£t
(
smi
);

1489 i‡(
îr
)

1490 
îr_‰ì_sck
;

1492 
îr
 = 
smi
->
›s
->
	`£tup
(smi);

1493 i‡(
îr
) {

1494 
	`dev_îr
(
smi
->
∑ª¡
, "chù sëu∞Áûed,Éº=%d\n", 
îr
);

1495 
îr_‰ì_sck
;

1498 
îr
 = 
	`πl8366_öô_vœn
(
smi
);

1499 i‡(
îr
) {

1500 
	`dev_îr
(
smi
->
∑ª¡
, "VLAN initialization failed,Érr=%d\n",

1501 
îr
);

1502 
îr_‰ì_sck
;

1505 
îr
 = 
	`πl8366_íabÀ_Æl_p‹ts
(
smi
, 1);

1506 i‡(
îr
)

1507 
îr_‰ì_sck
;

1509 
îr
 = 
	`πl8366_smi_mii_öô
(
smi
);

1510 i‡(
îr
)

1511 
îr_‰ì_sck
;

1513 
	`πl8366_debugfs_öô
(
smi
);

1517 
îr_‰ì_sck
:

1518 
	`__πl8366_smi_˛ónup
(
smi
);

1519 
îr_out
:

1520  
îr
;

1521 
	}
}

1522 
EXPORT_SYMBOL_GPL
(
πl8366_smi_öô
);

1524 
	$πl8366_smi_˛ónup
(
πl8366_smi
 *
smi
)

1526 
	`πl8366_debugfs_ªmove
(
smi
);

1527 
	`πl8366_smi_mii_˛ónup
(
smi
);

1528 
	`__πl8366_smi_˛ónup
(
smi
);

1529 
	}
}

1530 
EXPORT_SYMBOL_GPL
(
πl8366_smi_˛ónup
);

1532 #ifde‡
CONFIG_OF


1533 
	$πl8366_smi_ª£t
(
πl8366_smi
 *
smi
, 
boﬁ
 
a˘ive
)

1535 i‡(
a˘ive
)

1536 
	`ª£t_c⁄åﬁ_as£π
(
smi
->
ª£t
);

1538 
	`ª£t_c⁄åﬁ_dós£π
(
smi
->
ª£t
);

1539 
	}
}

1541 
	$πl8366_smi_¥obe_of
(
∂©f‹m_devi˚
 *
pdev
, 
πl8366_smi
 *
smi
)

1543 
sck
 = 
	`of_gë_«med_gpio
(
pdev
->
dev
.
of_node
, "gpio-sck", 0);

1544 
sda
 = 
	`of_gë_«med_gpio
(
pdev
->
dev
.
of_node
, "gpio-sda", 0);

1545 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

1546 
devi˚_node
 *
mdio_node
;

1548 
mdio_node
 = 
	`of_∑r£_ph™dÀ
(
≈
, "mii-bus", 0);

1549 i‡(!
mdio_node
) {

1550 
	`dev_îr
(&
pdev
->
dev
, "cannot find mdioÇodeÖhandle");

1551 
åy_gpio
;

1554 
smi
->
ext_mbus
 = 
	`of_mdio_föd_bus
(
mdio_node
);

1555 i‡(!
smi
->
ext_mbus
) {

1556 
	`dev_öfo
(&
pdev
->
dev
,

1558 
åy_gpio
;

1563 
åy_gpio
:

1564 i‡(!
	`gpio_is_vÆid
(
sck
Ë|| !gpio_is_vÆid(
sda
)) {

1565 i‡(!
mdio_node
) {

1566 
	`dev_îr
(&
pdev
->
dev
, "gpios missing in devictree\n");

1567  -
EINVAL
;

1569  -
EPROBE_DEFER
;

1573 
smi
->
gpio_sda
 = 
sda
;

1574 
smi
->
gpio_sck
 = 
sck
;

1575 
smi
->
ª£t
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
pdev
->
dev
, "switch");

1576 i‡(!
	`IS_ERR
(
smi
->
ª£t
))

1577 
smi
->
hw_ª£t
 = 
πl8366_smi_ª£t
;

1580 
	}
}

1582 
ölöe
 
	$πl8366_smi_¥obe_of
(
∂©f‹m_devi˚
 *
pdev
, 
πl8366_smi
 *
smi
)

1584  -
ENODEV
;

1585 
	}
}

1588 
	$πl8366_smi_¥obe_∂©
(
∂©f‹m_devi˚
 *
pdev
, 
πl8366_smi
 *
smi
)

1590 
πl8366_∂©f‹m_d©a
 *
pd©a
 = 
pdev
->
dev
.
∂©f‹m_d©a
;

1592 i‡(!
pdev
->
dev
.
∂©f‹m_d©a
) {

1593 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data specified\n");

1594  -
EINVAL
;

1597 
smi
->
gpio_sda
 = 
pd©a
->gpio_sda;

1598 
smi
->
gpio_sck
 = 
pd©a
->gpio_sck;

1599 
smi
->
hw_ª£t
 = 
pd©a
->hw_reset;

1602 
	}
}

1605 
πl8366_smi
 *
	$πl8366_smi_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1607 
πl8366_smi
 *
smi
;

1608 
îr
;

1610 
smi
 = 
	`πl8366_smi_Æloc
(&
pdev
->
dev
);

1611 i‡(!
smi
)

1612  
NULL
;

1614 i‡(
pdev
->
dev
.
of_node
)

1615 
îr
 = 
	`πl8366_smi_¥obe_of
(
pdev
, 
smi
);

1617 
îr
 = 
	`πl8366_smi_¥obe_∂©
(
pdev
, 
smi
);

1619 i‡(
îr
)

1620 
‰ì_smi
;

1622  
smi
;

1624 
‰ì_smi
:

1625 
	`k‰ì
(
smi
);

1626  
	`ERR_PTR
(
îr
);

1627 
	}
}

1628 
EXPORT_SYMBOL_GPL
(
πl8366_smi_¥obe
);

1630 
MODULE_DESCRIPTION
("Realtek RTL8366 SMI interface driver");

1631 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1632 
MODULE_LICENSE
("GPL v2");

	@linux/generic/files/drivers/net/phy/rtl8366_smi.h

11 #i‚de‡
_RTL8366_SMI_H


12 
	#_RTL8366_SMI_H


	)

14 
	~<löux/phy.h
>

15 
	~<löux/swôch.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/ª£t.h
>

19 
	gπl8366_smi_›s
;

20 
	gπl8366_vœn_›s
;

21 
	gmii_bus
;

22 
	gdíåy
;

23 
	göode
;

24 
	gfûe
;

26 
	sπl8366_mib_cou¡î
 {

27 
	mba£
;

28 
	moff£t
;

29 
	mÀngth
;

30 c⁄° *
	m«me
;

33 
	sπl8366_smi
 {

34 
devi˚
 *
	m∑ª¡
;

35 
	mgpio_sda
;

36 
	mgpio_sck
;

37 (*
	mhw_ª£t
)(
πl8366_smi
 *
	msmi
, 
boﬁ
 
	ma˘ive
);

38 
	m˛k_dñay
;

39 
u8
 
	mcmd_ªad
;

40 
u8
 
	mcmd_wrôe
;

41 
•ölock_t
 
	mlock
;

42 
mii_bus
 *
	mmii_bus
;

43 
	mmii_úq
[
PHY_MAX_ADDR
];

44 
swôch_dev
 
	msw_dev
;

46 
	m˝u_p‹t
;

47 
	mnum_p‹ts
;

48 
	mnum_vœn_mc
;

49 
	mnum_mib_cou¡îs
;

50 
πl8366_mib_cou¡î
 *
	mmib_cou¡îs
;

52 
πl8366_smi_›s
 *
	m›s
;

54 
	mvœn_íabÀd
;

55 
	mvœn4k_íabÀd
;

57 
	mbuf
[4096];

59 
ª£t_c⁄åﬁ
 *
	mª£t
;

61 #ifde‡
CONFIG_RTL8366_SMI_DEBUG_FS


62 
díåy
 *
	mdebugfs_roŸ
;

63 
u16
 
	mdbg_ªg
;

64 
u8
 
	mdbg_vœn_4k_∑ge
;

66 
mii_bus
 *
	mext_mbus
;

69 
	sπl8366_vœn_mc
 {

70 
u16
 
	mvid
;

71 
u16
 
	mu¡ag
;

72 
u16
 
	mmembî
;

73 
u8
 
	mfid
;

74 
u8
 
	m¥i‹ôy
;

77 
	sπl8366_vœn_4k
 {

78 
u16
 
	mvid
;

79 
u16
 
	mu¡ag
;

80 
u16
 
	mmembî
;

81 
u8
 
	mfid
;

84 
	sπl8366_smi_›s
 {

85 (*
	mdëe˘
)(
πl8366_smi
 *
	msmi
);

86 (*
	mª£t_chù
)(
πl8366_smi
 *
	msmi
);

87 (*
	m£tup
)(
πl8366_smi
 *
	msmi
);

89 (*
	mmii_ªad
)(
mii_bus
 *
	mbus
, 
	maddr
, 
	mªg
);

90 (*
	mmii_wrôe
)(
mii_bus
 *
	mbus
, 
	maddr
, 
	mªg
, 
u16
 
	mvÆ
);

92 (*
	mgë_vœn_mc
)(
πl8366_smi
 *
	msmi
, 
u32
 
	mödex
,

93 
πl8366_vœn_mc
 *
	mvœnmc
);

94 (*
	m£t_vœn_mc
)(
πl8366_smi
 *
	msmi
, 
u32
 
	mödex
,

95 c⁄° 
πl8366_vœn_mc
 *
	mvœnmc
);

96 (*
	mgë_vœn_4k
)(
πl8366_smi
 *
	msmi
, 
u32
 
	mvid
,

97 
πl8366_vœn_4k
 *
	mvœn4k
);

98 (*
	m£t_vœn_4k
)(
πl8366_smi
 *
	msmi
,

99 c⁄° 
πl8366_vœn_4k
 *
	mvœn4k
);

100 (*
	mgë_mc_ödex
)(
πl8366_smi
 *
	msmi
, 
	mp‹t
, *
	mvÆ
);

101 (*
	m£t_mc_ödex
)(
πl8366_smi
 *
	msmi
, 
	mp‹t
, 
	mödex
);

102 (*
	mgë_mib_cou¡î
)(
πl8366_smi
 *
	msmi
, 
	mcou¡î
,

103 
	mp‹t
, *
	mvÆ
);

104 (*
	mis_vœn_vÆid
)(
πl8366_smi
 *
	msmi
, 
	mvœn
);

105 (*
	míabÀ_vœn
)(
πl8366_smi
 *
	msmi
, 
	míabÀ
);

106 (*
	míabÀ_vœn4k
)(
πl8366_smi
 *
	msmi
, 
	míabÀ
);

107 (*
	míabÀ_p‹t
)(
πl8366_smi
 *
	msmi
, 
	mp‹t
, 
	míabÀ
);

110 
πl8366_smi
 *
πl8366_smi_Æloc
(
devi˚
 *
∑ª¡
);

111 
πl8366_smi_öô
(
πl8366_smi
 *
smi
);

112 
πl8366_smi_˛ónup
(
πl8366_smi
 *
smi
);

113 
πl8366_smi_wrôe_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
d©a
);

114 
πl8366_smi_wrôe_ªg_nﬂck
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
d©a
);

115 
πl8366_smi_ªad_ªg
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 *
d©a
);

116 
πl8366_smi_rmwr
(
πl8366_smi
 *
smi
, 
u32
 
addr
, u32 
mask
, u32 
d©a
);

118 
πl8366_ª£t_vœn
(
πl8366_smi
 *
smi
);

119 
πl8366_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
);

120 
πl8366_íabÀ_Æl_p‹ts
(
πl8366_smi
 *
smi
, 
íabÀ
);

122 #ifde‡
CONFIG_RTL8366_SMI_DEBUG_FS


123 
πl8366_debugfs_›í
(
öode
 *öode, 
fûe
 *file);

126 
ölöe
 
πl8366_smi
 *
	$sw_to_πl8366_smi
(
swôch_dev
 *
sw
)

128  
	`c⁄èöî_of
(
sw
, 
πl8366_smi
, 
sw_dev
);

129 
	}
}

131 
πl8366_sw_ª£t_swôch
(
swôch_dev
 *
dev
);

132 
πl8366_sw_gë_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
);

133 
πl8366_sw_£t_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
);

134 
πl8366_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

135 c⁄° 
swôch_©å
 *
©å
,

136 
swôch_vÆ
 *
vÆ
);

137 
πl8366_sw_gë_vœn_öfo
(
swôch_dev
 *
dev
,

138 c⁄° 
swôch_©å
 *
©å
,

139 
swôch_vÆ
 *
vÆ
);

140 
πl8366_sw_gë_vœn_fid
(
swôch_dev
 *
dev
,

141 c⁄° 
swôch_©å
 *
©å
,

142 
swôch_vÆ
 *
vÆ
);

143 
πl8366_sw_£t_vœn_fid
(
swôch_dev
 *
dev
,

144 c⁄° 
swôch_©å
 *
©å
,

145 
swôch_vÆ
 *
vÆ
);

146 
πl8366_sw_gë_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
);

147 
πl8366_sw_£t_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
);

148 
πl8366_sw_gë_vœn_íabÀ
(
swôch_dev
 *
dev
,

149 c⁄° 
swôch_©å
 *
©å
,

150 
swôch_vÆ
 *
vÆ
);

151 
πl8366_sw_£t_vœn_íabÀ
(
swôch_dev
 *
dev
,

152 c⁄° 
swôch_©å
 *
©å
,

153 
swôch_vÆ
 *
vÆ
);

154 
πl8366_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

155 
swôch_p‹t_°©s
 *
°©s
,

156 
txb_id
, 
rxb_id
);

158 
πl8366_smi
* 
πl8366_smi_¥obe
(
∂©f‹m_devi˚
 *
pdev
);

	@linux/generic/files/drivers/net/phy/rtl8366rb.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/devi˚.h
>

18 
	~<löux/of.h
>

19 
	~<löux/of_∂©f‹m.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/πl8366.h
>

24 
	~"πl8366_smi.h
"

26 
	#RTL8366RB_DRIVER_DESC
 "Ró…ek RTL8366RBÉthî√àswôch drivî"

	)

27 
	#RTL8366RB_DRIVER_VER
 "0.2.4"

	)

29 
	#RTL8366RB_PHY_NO_MAX
 4

	)

30 
	#RTL8366RB_PHY_PAGE_MAX
 7

	)

31 
	#RTL8366RB_PHY_ADDR_MAX
 31

	)

34 
	#RTL8366RB_SGCR
 0x0000

	)

35 
	#RTL8366RB_SGCR_EN_BC_STORM_CTRL
 
	`BIT
(0)

	)

36 
	#RTL8366RB_SGCR_MAX_LENGTH
(
_x
Ë(_x << 4)

	)

37 
	#RTL8366RB_SGCR_MAX_LENGTH_MASK
 
	`RTL8366RB_SGCR_MAX_LENGTH
(0x3)

	)

38 
	#RTL8366RB_SGCR_MAX_LENGTH_1522
 
	`RTL8366RB_SGCR_MAX_LENGTH
(0x0)

	)

39 
	#RTL8366RB_SGCR_MAX_LENGTH_1536
 
	`RTL8366RB_SGCR_MAX_LENGTH
(0x1)

	)

40 
	#RTL8366RB_SGCR_MAX_LENGTH_1552
 
	`RTL8366RB_SGCR_MAX_LENGTH
(0x2)

	)

41 
	#RTL8366RB_SGCR_MAX_LENGTH_9216
 
	`RTL8366RB_SGCR_MAX_LENGTH
(0x3)

	)

42 
	#RTL8366RB_SGCR_EN_VLAN
 
	`BIT
(13)

	)

43 
	#RTL8366RB_SGCR_EN_VLAN_4KTB
 
	`BIT
(14)

	)

46 
	#RTL8366RB_PECR
 0x0001

	)

49 
	#RTL8366RB_PMCR
 0x0007

	)

50 
	#RTL8366RB_PMCR_SOURCE_PORT
(
_x
Ë(_x)

	)

51 
	#RTL8366RB_PMCR_SOURCE_PORT_MASK
 0x000f

	)

52 
	#RTL8366RB_PMCR_MONITOR_PORT
(
_x
Ë((_xË<< 4)

	)

53 
	#RTL8366RB_PMCR_MONITOR_PORT_MASK
 0x00f0

	)

54 
	#RTL8366RB_PMCR_MIRROR_RX
 
	`BIT
(8)

	)

55 
	#RTL8366RB_PMCR_MIRROR_TX
 
	`BIT
(9)

	)

56 
	#RTL8366RB_PMCR_MIRROR_SPC
 
	`BIT
(10)

	)

57 
	#RTL8366RB_PMCR_MIRROR_ISO
 
	`BIT
(11)

	)

60 
	#RTL8366RB_SSCR0
 0x0002

	)

61 
	#RTL8366RB_SSCR1
 0x0003

	)

62 
	#RTL8366RB_SSCR2
 0x0004

	)

63 
	#RTL8366RB_SSCR2_DROP_UNKNOWN_DA
 
	`BIT
(0)

	)

65 
	#RTL8366RB_RESET_CTRL_REG
 0x0100

	)

66 
	#RTL8366RB_CHIP_CTRL_RESET_HW
 1

	)

67 
	#RTL8366RB_CHIP_CTRL_RESET_SW
 (1 << 1)

	)

69 
	#RTL8366RB_CHIP_VERSION_CTRL_REG
 0x050A

	)

70 
	#RTL8366RB_CHIP_VERSION_MASK
 0xf

	)

71 
	#RTL8366RB_CHIP_ID_REG
 0x0509

	)

72 
	#RTL8366RB_CHIP_ID_8366
 0x5937

	)

75 
	#RTL8366RB_PHY_ACCESS_CTRL_REG
 0x8000

	)

76 
	#RTL8366RB_PHY_ACCESS_DATA_REG
 0x8002

	)

78 
	#RTL8366RB_PHY_CTRL_READ
 1

	)

79 
	#RTL8366RB_PHY_CTRL_WRITE
 0

	)

81 
	#RTL8366RB_PHY_REG_MASK
 0x1f

	)

82 
	#RTL8366RB_PHY_PAGE_OFFSET
 5

	)

83 
	#RTL8366RB_PHY_PAGE_MASK
 (0x‡<< 5)

	)

84 
	#RTL8366RB_PHY_NO_OFFSET
 9

	)

85 
	#RTL8366RB_PHY_NO_MASK
 (0x1‡<< 9)

	)

87 
	#RTL8366RB_VLAN_INGRESS_CTRL2_REG
 0x037f

	)

90 
	#RTL8366RB_LED_BLINKRATE_REG
 0x0430

	)

91 
	#RTL8366RB_LED_BLINKRATE_BIT
 0

	)

92 
	#RTL8366RB_LED_BLINKRATE_MASK
 0x0007

	)

94 
	#RTL8366RB_LED_CTRL_REG
 0x0431

	)

95 
	#RTL8366RB_LED_0_1_CTRL_REG
 0x0432

	)

96 
	#RTL8366RB_LED_2_3_CTRL_REG
 0x0433

	)

98 
	#RTL8366RB_MIB_COUNT
 33

	)

99 
	#RTL8366RB_GLOBAL_MIB_COUNT
 1

	)

100 
	#RTL8366RB_MIB_COUNTER_PORT_OFFSET
 0x0050

	)

101 
	#RTL8366RB_MIB_COUNTER_BASE
 0x1000

	)

102 
	#RTL8366RB_MIB_CTRL_REG
 0x13F0

	)

103 
	#RTL8366RB_MIB_CTRL_USER_MASK
 0x0FFC

	)

104 
	#RTL8366RB_MIB_CTRL_BUSY_MASK
 
	`BIT
(0)

	)

105 
	#RTL8366RB_MIB_CTRL_RESET_MASK
 
	`BIT
(1)

	)

106 
	#RTL8366RB_MIB_CTRL_PORT_RESET
(
_p
Ë
	`BIT
(2 + (_p))

	)

107 
	#RTL8366RB_MIB_CTRL_GLOBAL_RESET
 
	`BIT
(11)

	)

109 
	#RTL8366RB_PORT_VLAN_CTRL_BASE
 0x0063

	)

110 
	#RTL8366RB_PORT_VLAN_CTRL_REG
(
_p
) \

111 (
RTL8366RB_PORT_VLAN_CTRL_BASE
 + (
_p
Ë/ 4)

	)

112 
	#RTL8366RB_PORT_VLAN_CTRL_MASK
 0xf

	)

113 
	#RTL8366RB_PORT_VLAN_CTRL_SHIFT
(
_p
Ë(4 * ((_pË% 4))

	)

116 
	#RTL8366RB_VLAN_TABLE_READ_BASE
 0x018C

	)

117 
	#RTL8366RB_VLAN_TABLE_WRITE_BASE
 0x0185

	)

120 
	#RTL8366RB_TABLE_ACCESS_CTRL_REG
 0x0180

	)

121 
	#RTL8366RB_TABLE_VLAN_READ_CTRL
 0x0E01

	)

122 
	#RTL8366RB_TABLE_VLAN_WRITE_CTRL
 0x0F01

	)

124 
	#RTL8366RB_VLAN_MC_BASE
(
_x
Ë(0x0020 + (_xË* 3)

	)

127 
	#RTL8366RB_PORT_LINK_STATUS_BASE
 0x0014

	)

128 
	#RTL8366RB_PORT_STATUS_SPEED_MASK
 0x0003

	)

129 
	#RTL8366RB_PORT_STATUS_DUPLEX_MASK
 0x0004

	)

130 
	#RTL8366RB_PORT_STATUS_LINK_MASK
 0x0010

	)

131 
	#RTL8366RB_PORT_STATUS_TXPAUSE_MASK
 0x0020

	)

132 
	#RTL8366RB_PORT_STATUS_RXPAUSE_MASK
 0x0040

	)

133 
	#RTL8366RB_PORT_STATUS_AN_MASK
 0x0080

	)

136 
	#RTL8366RB_PORT_NUM_CPU
 5

	)

137 
	#RTL8366RB_NUM_PORTS
 6

	)

138 
	#RTL8366RB_NUM_VLANS
 16

	)

139 
	#RTL8366RB_NUM_LEDGROUPS
 4

	)

140 
	#RTL8366RB_NUM_VIDS
 4096

	)

141 
	#RTL8366RB_PRIORITYMAX
 7

	)

142 
	#RTL8366RB_FIDMAX
 7

	)

145 
	#RTL8366RB_PORT_1
 (1 << 0Ë

	)

146 
	#RTL8366RB_PORT_2
 (1 << 1Ë

	)

147 
	#RTL8366RB_PORT_3
 (1 << 2Ë

	)

148 
	#RTL8366RB_PORT_4
 (1 << 3Ë

	)

149 
	#RTL8366RB_PORT_5
 (1 << 4Ë

	)

151 
	#RTL8366RB_PORT_CPU
 (1 << 5Ë

	)

153 
	#RTL8366RB_PORT_ALL
 (
RTL8366RB_PORT_1
 | \

154 
RTL8366RB_PORT_2
 | \

155 
RTL8366RB_PORT_3
 | \

156 
RTL8366RB_PORT_4
 | \

157 
RTL8366RB_PORT_5
 | \

158 
RTL8366RB_PORT_CPU
)

	)

160 
	#RTL8366RB_PORT_ALL_BUT_CPU
 (
RTL8366RB_PORT_1
 | \

161 
RTL8366RB_PORT_2
 | \

162 
RTL8366RB_PORT_3
 | \

163 
RTL8366RB_PORT_4
 | \

164 
RTL8366RB_PORT_5
)

	)

166 
	#RTL8366RB_PORT_ALL_EXTERNAL
 (
RTL8366RB_PORT_1
 | \

167 
RTL8366RB_PORT_2
 | \

168 
RTL8366RB_PORT_3
 | \

169 
RTL8366RB_PORT_4
)

	)

171 
	#RTL8366RB_PORT_ALL_INTERNAL
 
RTL8366RB_PORT_CPU


	)

173 
	#RTL8366RB_VLAN_VID_MASK
 0xfff

	)

174 
	#RTL8366RB_VLAN_PRIORITY_SHIFT
 12

	)

175 
	#RTL8366RB_VLAN_PRIORITY_MASK
 0x7

	)

176 
	#RTL8366RB_VLAN_UNTAG_SHIFT
 8

	)

177 
	#RTL8366RB_VLAN_UNTAG_MASK
 0xff

	)

178 
	#RTL8366RB_VLAN_MEMBER_MASK
 0xff

	)

179 
	#RTL8366RB_VLAN_FID_MASK
 0x7

	)

183 
	#RTL8366RB_IB_BASE
 0x0200

	)

184 
	#RTL8366RB_IB_REG
(
≤um
Ë(
RTL8366RB_IB_BASE
 +Önum)

	)

185 
	#RTL8366RB_IB_BDTH_MASK
 0x3fff

	)

186 
	#RTL8366RB_IB_PREIFG_OFFSET
 14

	)

187 
	#RTL8366RB_IB_PREIFG_MASK
 (1 << 
RTL8366RB_IB_PREIFG_OFFSET
)

	)

190 
	#RTL8366RB_EB_BASE
 0x02d1

	)

191 
	#RTL8366RB_EB_REG
(
≤um
Ë(
RTL8366RB_EB_BASE
 +Önum)

	)

192 
	#RTL8366RB_EB_BDTH_MASK
 0x3fff

	)

193 
	#RTL8366RB_EB_PREIFG_REG
 0x02f8

	)

194 
	#RTL8366RB_EB_PREIFG_OFFSET
 9

	)

195 
	#RTL8366RB_EB_PREIFG_MASK
 (1 << 
RTL8366RB_EB_PREIFG_OFFSET
)

	)

197 
	#RTL8366RB_BDTH_SW_MAX
 1048512

	)

198 
	#RTL8366RB_BDTH_UNIT
 64

	)

199 
	#RTL8366RB_BDTH_REG_DEFAULT
 16383

	)

202 
	#RTL8366RB_QOS_BIT
 15

	)

203 
	#RTL8366RB_QOS_MASK
 (1 << 
RTL8366RB_QOS_BIT
)

	)

205 
	#RTL8366RB_QOS_DEFAULT_PREIFG
 1

	)

208 
	#RTL8366RB_MIB_RXB_ID
 0

	)

209 
	#RTL8366RB_MIB_TXB_ID
 20

	)

211 
πl8366_mib_cou¡î
 
	gπl8366rb_mib_cou¡îs
[] = {

247 
	#REG_WR
(
_smi
, 
_ªg
, 
_vÆ
) \

249 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

250 i‡(
îr
) \

251  
îr
; \

252 } 0)

	)

254 
	#REG_RMW
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
) \

256 
îr
 = 
	`πl8366_smi_rmwr
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
); \

257 i‡(
îr
) \

258  
îr
; \

259 } 0)

	)

261 
	$πl8366rb_ª£t_chù
(
πl8366_smi
 *
smi
)

263 
timeout
 = 10;

264 
u32
 
d©a
;

266 
	`πl8366_smi_wrôe_ªg_nﬂck
(
smi
, 
RTL8366RB_RESET_CTRL_REG
,

267 
RTL8366RB_CHIP_CTRL_RESET_HW
);

269 
	`m¶ìp
(1);

270 i‡(
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_RESET_CTRL_REG
, &
d©a
))

271  -
EIO
;

273 i‡(!(
d©a
 & 
RTL8366RB_CHIP_CTRL_RESET_HW
))

275 } --
timeout
);

277 i‡(!
timeout
) {

278 
	`¥ötk
("Timeout waiting forÅhe switchÅoÑeset\n");

279  -
EIO
;

283 
	}
}

285 
	$πl8366rb_£tup
(
πl8366_smi
 *
smi
)

287 
îr
;

288 #ifde‡
CONFIG_OF


289 
i
;

290 
devi˚_node
 *
≈
;

291 
num_öôvÆs
;

292 c⁄° 
__be32
 *
∑ddr
;

294 
≈
 = 
smi
->
∑ª¡
->
of_node
;

296 
∑ddr
 = 
	`of_gë_¥›îty
(
≈
, "ªÆãk,öôvÆs", &
num_öôvÆs
);

297 i‡(
∑ddr
) {

298 
	`dev_öfo
(
smi
->
∑ª¡
, "applying initvals from DTS\n");

300 i‡(
num_öôvÆs
 < (2 * (*
∑ddr
)))

301  -
EINVAL
;

303 
num_öôvÆs
 /(*
∑ddr
);

305 
i
 = 0; i < 
num_öôvÆs
 - 1; i += 2) {

306 
u32
 
ªg
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
);

307 
u32
 
vÆ
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
 + 1);

309 
	`REG_WR
(
smi
, 
ªg
, 
vÆ
);

315 
	`REG_RMW
(
smi
, 
RTL8366RB_SGCR
, 
RTL8366RB_SGCR_MAX_LENGTH_MASK
,

316 
RTL8366RB_SGCR_MAX_LENGTH_1536
);

319 
	`REG_WR
(
smi
, 
RTL8366RB_SSCR0
, 0);

322 
	`REG_WR
(
smi
, 
RTL8366RB_SSCR1
, 0);

328 
	`REG_WR
(
smi
, 
RTL8366RB_VLAN_INGRESS_CTRL2_REG
, 
RTL8366RB_PORT_ALL
);

331 
	`REG_RMW
(
smi
, 
RTL8366RB_SSCR2
, 
RTL8366RB_SSCR2_DROP_UNKNOWN_DA
, 0);

334 
	}
}

336 
	$πl8366rb_ªad_phy_ªg
(
πl8366_smi
 *
smi
,

337 
u32
 
phy_no
, u32 
∑ge
, u32 
addr
, u32 *
d©a
)

339 
u32
 
ªg
;

340 
ªt
;

342 i‡(
phy_no
 > 
RTL8366RB_PHY_NO_MAX
)

343  -
EINVAL
;

345 i‡(
∑ge
 > 
RTL8366RB_PHY_PAGE_MAX
)

346  -
EINVAL
;

348 i‡(
addr
 > 
RTL8366RB_PHY_ADDR_MAX
)

349  -
EINVAL
;

351 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366RB_PHY_ACCESS_CTRL_REG
,

352 
RTL8366RB_PHY_CTRL_READ
);

353 i‡(
ªt
)

354  
ªt
;

356 
ªg
 = 0x8000 | (1 << (
phy_no
 + 
RTL8366RB_PHY_NO_OFFSET
)) |

357 ((
∑ge
 << 
RTL8366RB_PHY_PAGE_OFFSET
Ë& 
RTL8366RB_PHY_PAGE_MASK
) |

358 (
addr
 & 
RTL8366RB_PHY_REG_MASK
);

360 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
ªg
, 0);

361 i‡(
ªt
)

362  
ªt
;

364 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PHY_ACCESS_DATA_REG
, 
d©a
);

365 i‡(
ªt
)

366  
ªt
;

369 
	}
}

371 
	$πl8366rb_wrôe_phy_ªg
(
πl8366_smi
 *
smi
,

372 
u32
 
phy_no
, u32 
∑ge
, u32 
addr
, u32 
d©a
)

374 
u32
 
ªg
;

375 
ªt
;

377 i‡(
phy_no
 > 
RTL8366RB_PHY_NO_MAX
)

378  -
EINVAL
;

380 i‡(
∑ge
 > 
RTL8366RB_PHY_PAGE_MAX
)

381  -
EINVAL
;

383 i‡(
addr
 > 
RTL8366RB_PHY_ADDR_MAX
)

384  -
EINVAL
;

386 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366RB_PHY_ACCESS_CTRL_REG
,

387 
RTL8366RB_PHY_CTRL_WRITE
);

388 i‡(
ªt
)

389  
ªt
;

391 
ªg
 = 0x8000 | (1 << (
phy_no
 + 
RTL8366RB_PHY_NO_OFFSET
)) |

392 ((
∑ge
 << 
RTL8366RB_PHY_PAGE_OFFSET
Ë& 
RTL8366RB_PHY_PAGE_MASK
) |

393 (
addr
 & 
RTL8366RB_PHY_REG_MASK
);

395 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
ªg
, 
d©a
);

396 i‡(
ªt
)

397  
ªt
;

400 
	}
}

402 
	$πl8366rb_gë_mib_cou¡î
(
πl8366_smi
 *
smi
, 
cou¡î
,

403 
p‹t
, *
vÆ
)

405 
i
;

406 
îr
;

407 
u32
 
addr
, 
d©a
;

408 
u64
 
mibvÆue
;

410 i‡(
p‹t
 > 
RTL8366RB_NUM_PORTS
 || 
cou¡î
 >
RTL8366RB_MIB_COUNT
)

411  -
EINVAL
;

413 
addr
 = 
RTL8366RB_MIB_COUNTER_BASE
 +

414 
RTL8366RB_MIB_COUNTER_PORT_OFFSET
 * (
p‹t
) +

415 
πl8366rb_mib_cou¡îs
[
cou¡î
].
off£t
;

421 
d©a
 = 0;

422 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
addr
, 
d©a
);

423 i‡(
îr
)

424  
îr
;

427 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_MIB_CTRL_REG
, &
d©a
);

428 i‡(
îr
)

429  
îr
;

431 i‡(
d©a
 & 
RTL8366RB_MIB_CTRL_BUSY_MASK
)

432  -
EBUSY
;

434 i‡(
d©a
 & 
RTL8366RB_MIB_CTRL_RESET_MASK
)

435  -
EIO
;

437 
mibvÆue
 = 0;

438 
i
 = 
πl8366rb_mib_cou¡îs
[
cou¡î
].
Àngth
; i > 0; i--) {

439 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
addr
 + (
i
 - 1), &
d©a
);

440 i‡(
îr
)

441  
îr
;

443 
mibvÆue
 = (mibvÆuê<< 16Ë| (
d©a
 & 0xFFFF);

446 *
vÆ
 = 
mibvÆue
;

448 
	}
}

450 
	$πl8366rb_gë_vœn_4k
(
πl8366_smi
 *
smi
, 
u32
 
vid
,

451 
πl8366_vœn_4k
 *
vœn4k
)

453 
u32
 
d©a
[3];

454 
îr
;

455 
i
;

457 
	`mem£t
(
vœn4k
, '\0', (
πl8366_vœn_4k
));

459 i‡(
vid
 >
RTL8366RB_NUM_VIDS
)

460  -
EINVAL
;

463 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366RB_VLAN_TABLE_WRITE_BASE
,

464 
vid
 & 
RTL8366RB_VLAN_VID_MASK
);

465 i‡(
îr
)

466  
îr
;

469 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366RB_TABLE_ACCESS_CTRL_REG
,

470 
RTL8366RB_TABLE_VLAN_READ_CTRL
);

471 i‡(
îr
)

472  
îr
;

474 
i
 = 0; i < 3; i++) {

475 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
,

476 
RTL8366RB_VLAN_TABLE_READ_BASE
 + 
i
,

477 &
d©a
[
i
]);

478 i‡(
îr
)

479  
îr
;

482 
vœn4k
->
vid
 = vid;

483 
vœn4k
->
u¡ag
 = (
d©a
[1] >> 
RTL8366RB_VLAN_UNTAG_SHIFT
) &

484 
RTL8366RB_VLAN_UNTAG_MASK
;

485 
vœn4k
->
membî
 = 
d©a
[1] & 
RTL8366RB_VLAN_MEMBER_MASK
;

486 
vœn4k
->
fid
 = 
d©a
[2] & 
RTL8366RB_VLAN_FID_MASK
;

489 
	}
}

491 
	$πl8366rb_£t_vœn_4k
(
πl8366_smi
 *
smi
,

492 c⁄° 
πl8366_vœn_4k
 *
vœn4k
)

494 
u32
 
d©a
[3];

495 
îr
;

496 
i
;

498 i‡(
vœn4k
->
vid
 >
RTL8366RB_NUM_VIDS
 ||

499 
vœn4k
->
membî
 > 
RTL8366RB_VLAN_MEMBER_MASK
 ||

500 
vœn4k
->
u¡ag
 > 
RTL8366RB_VLAN_UNTAG_MASK
 ||

501 
vœn4k
->
fid
 > 
RTL8366RB_FIDMAX
)

502  -
EINVAL
;

504 
d©a
[0] = 
vœn4k
->
vid
 & 
RTL8366RB_VLAN_VID_MASK
;

505 
d©a
[1] = (
vœn4k
->
membî
 & 
RTL8366RB_VLAN_MEMBER_MASK
) |

506 ((
vœn4k
->
u¡ag
 & 
RTL8366RB_VLAN_UNTAG_MASK
) <<

507 
RTL8366RB_VLAN_UNTAG_SHIFT
);

508 
d©a
[2] = 
vœn4k
->
fid
 & 
RTL8366RB_VLAN_FID_MASK
;

510 
i
 = 0; i < 3; i++) {

511 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
,

512 
RTL8366RB_VLAN_TABLE_WRITE_BASE
 + 
i
,

513 
d©a
[
i
]);

514 i‡(
îr
)

515  
îr
;

519 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366RB_TABLE_ACCESS_CTRL_REG
,

520 
RTL8366RB_TABLE_VLAN_WRITE_CTRL
);

522  
îr
;

523 
	}
}

525 
	$πl8366rb_gë_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

526 
πl8366_vœn_mc
 *
vœnmc
)

528 
u32
 
d©a
[3];

529 
îr
;

530 
i
;

532 
	`mem£t
(
vœnmc
, '\0', (
πl8366_vœn_mc
));

534 i‡(
ödex
 >
RTL8366RB_NUM_VLANS
)

535  -
EINVAL
;

537 
i
 = 0; i < 3; i++) {

538 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
,

539 
	`RTL8366RB_VLAN_MC_BASE
(
ödex
Ë+ 
i
,

540 &
d©a
[
i
]);

541 i‡(
îr
)

542  
îr
;

545 
vœnmc
->
vid
 = 
d©a
[0] & 
RTL8366RB_VLAN_VID_MASK
;

546 
vœnmc
->
¥i‹ôy
 = (
d©a
[0] >> 
RTL8366RB_VLAN_PRIORITY_SHIFT
) &

547 
RTL8366RB_VLAN_PRIORITY_MASK
;

548 
vœnmc
->
u¡ag
 = (
d©a
[1] >> 
RTL8366RB_VLAN_UNTAG_SHIFT
) &

549 
RTL8366RB_VLAN_UNTAG_MASK
;

550 
vœnmc
->
membî
 = 
d©a
[1] & 
RTL8366RB_VLAN_MEMBER_MASK
;

551 
vœnmc
->
fid
 = 
d©a
[2] & 
RTL8366RB_VLAN_FID_MASK
;

554 
	}
}

556 
	$πl8366rb_£t_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

557 c⁄° 
πl8366_vœn_mc
 *
vœnmc
)

559 
u32
 
d©a
[3];

560 
îr
;

561 
i
;

563 i‡(
ödex
 >
RTL8366RB_NUM_VLANS
 ||

564 
vœnmc
->
vid
 >
RTL8366RB_NUM_VIDS
 ||

565 
vœnmc
->
¥i‹ôy
 > 
RTL8366RB_PRIORITYMAX
 ||

566 
vœnmc
->
membî
 > 
RTL8366RB_VLAN_MEMBER_MASK
 ||

567 
vœnmc
->
u¡ag
 > 
RTL8366RB_VLAN_UNTAG_MASK
 ||

568 
vœnmc
->
fid
 > 
RTL8366RB_FIDMAX
)

569  -
EINVAL
;

571 
d©a
[0] = (
vœnmc
->
vid
 & 
RTL8366RB_VLAN_VID_MASK
) |

572 ((
vœnmc
->
¥i‹ôy
 & 
RTL8366RB_VLAN_PRIORITY_MASK
) <<

573 
RTL8366RB_VLAN_PRIORITY_SHIFT
);

574 
d©a
[1] = (
vœnmc
->
membî
 & 
RTL8366RB_VLAN_MEMBER_MASK
) |

575 ((
vœnmc
->
u¡ag
 & 
RTL8366RB_VLAN_UNTAG_MASK
) <<

576 
RTL8366RB_VLAN_UNTAG_SHIFT
);

577 
d©a
[2] = 
vœnmc
->
fid
 & 
RTL8366RB_VLAN_FID_MASK
;

579 
i
 = 0; i < 3; i++) {

580 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
,

581 
	`RTL8366RB_VLAN_MC_BASE
(
ödex
Ë+ 
i
,

582 
d©a
[
i
]);

583 i‡(
îr
)

584  
îr
;

588 
	}
}

590 
	$πl8366rb_gë_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, *
vÆ
)

592 
u32
 
d©a
;

593 
îr
;

595 i‡(
p‹t
 >
RTL8366RB_NUM_PORTS
)

596  -
EINVAL
;

598 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8366RB_PORT_VLAN_CTRL_REG
(
p‹t
),

599 &
d©a
);

600 i‡(
îr
)

601  
îr
;

603 *
vÆ
 = (
d©a
 >> 
	`RTL8366RB_PORT_VLAN_CTRL_SHIFT
(
p‹t
)) &

604 
RTL8366RB_PORT_VLAN_CTRL_MASK
;

608 
	}
}

610 
	$πl8366rb_£t_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, 
ödex
)

612 i‡(
p‹t
 >
RTL8366RB_NUM_PORTS
 || 
ödex
 >
RTL8366RB_NUM_VLANS
)

613  -
EINVAL
;

615  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8366RB_PORT_VLAN_CTRL_REG
(
p‹t
),

616 
RTL8366RB_PORT_VLAN_CTRL_MASK
 <<

617 
	`RTL8366RB_PORT_VLAN_CTRL_SHIFT
(
p‹t
),

618 (
ödex
 & 
RTL8366RB_PORT_VLAN_CTRL_MASK
) <<

619 
	`RTL8366RB_PORT_VLAN_CTRL_SHIFT
(
p‹t
));

620 
	}
}

622 
	$πl8366rb_is_vœn_vÆid
(
πl8366_smi
 *
smi
, 
vœn
)

624 
max
 = 
RTL8366RB_NUM_VLANS
;

626 i‡(
smi
->
vœn4k_íabÀd
)

627 
max
 = 
RTL8366RB_NUM_VIDS
 - 1;

629 i‡(
vœn
 =0 || vœ¿>
max
)

633 
	}
}

635 
	$πl8366rb_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
)

637  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_SGCR
, 
RTL8366RB_SGCR_EN_VLAN
,

638 (
íabÀ
Ë? 
RTL8366RB_SGCR_EN_VLAN
 : 0);

639 
	}
}

641 
	$πl8366rb_íabÀ_vœn4k
(
πl8366_smi
 *
smi
, 
íabÀ
)

643  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_SGCR
,

644 
RTL8366RB_SGCR_EN_VLAN_4KTB
,

645 (
íabÀ
Ë? 
RTL8366RB_SGCR_EN_VLAN_4KTB
 : 0);

646 
	}
}

648 
	$πl8366rb_íabÀ_p‹t
(
πl8366_smi
 *
smi
, 
p‹t
, 
íabÀ
)

650  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PECR
, (1 << 
p‹t
),

651 (
íabÀ
Ë? 0 : (1 << 
p‹t
));

652 
	}
}

654 
	$πl8366rb_sw_ª£t_mibs
(
swôch_dev
 *
dev
,

655 c⁄° 
swôch_©å
 *
©å
,

656 
swôch_vÆ
 *
vÆ
)

658 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

660  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_MIB_CTRL_REG
, 0,

661 
RTL8366RB_MIB_CTRL_GLOBAL_RESET
);

662 
	}
}

664 
	$πl8366rb_sw_gë_blökøã
(
swôch_dev
 *
dev
,

665 c⁄° 
swôch_©å
 *
©å
,

666 
swôch_vÆ
 *
vÆ
)

668 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

669 
u32
 
d©a
;

671 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_LED_BLINKRATE_REG
, &
d©a
);

673 
vÆ
->
vÆue
.
i
 = (
d©a
 & (
RTL8366RB_LED_BLINKRATE_MASK
));

676 
	}
}

678 
	$πl8366rb_sw_£t_blökøã
(
swôch_dev
 *
dev
,

679 c⁄° 
swôch_©å
 *
©å
,

680 
swôch_vÆ
 *
vÆ
)

682 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

684 i‡(
vÆ
->
vÆue
.
i
 >= 6)

685  -
EINVAL
;

687  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_LED_BLINKRATE_REG
,

688 
RTL8366RB_LED_BLINKRATE_MASK
,

689 
vÆ
->
vÆue
.
i
);

690 
	}
}

692 
	$πl8366rb_sw_gë_À¨nög_íabÀ
(
swôch_dev
 *
dev
,

693 c⁄° 
swôch_©å
 *
©å
,

694 
swôch_vÆ
 *
vÆ
)

696 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

697 
u32
 
d©a
;

699 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_SSCR0
, &
d©a
);

700 
vÆ
->
vÆue
.
i
 = !
d©a
;

703 
	}
}

706 
	$πl8366rb_sw_£t_À¨nög_íabÀ
(
swôch_dev
 *
dev
,

707 c⁄° 
swôch_©å
 *
©å
,

708 
swôch_vÆ
 *
vÆ
)

710 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

711 
u32
 
p‹tmask
 = 0;

712 
îr
 = 0;

714 i‡(!
vÆ
->
vÆue
.
i
)

715 
p‹tmask
 = 
RTL8366RB_PORT_ALL
;

718 
	`REG_WR
(
smi
, 
RTL8366RB_SSCR0
, 
p‹tmask
);

721 
	`REG_WR
(
smi
, 
RTL8366RB_SSCR1
, 
p‹tmask
);

724 
	}
}

726 
	$πl8366rb_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
,

727 
p‹t
,

728 
swôch_p‹t_lök
 *
lök
)

730 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

731 
u32
 
d©a
 = 0;

732 
u32
 
•ìd
;

734 i‡(
p‹t
 >
RTL8366RB_NUM_PORTS
)

735  -
EINVAL
;

737 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PORT_LINK_STATUS_BASE
 + (
p‹t
 / 2),

738 &
d©a
);

740 i‡(
p‹t
 % 2)

741 
d©a
 = data >> 8;

743 
lök
->lök = !!(
d©a
 & 
RTL8366RB_PORT_STATUS_LINK_MASK
);

744 i‡(!
lök
->link)

747 
lök
->
du∂ex
 = !!(
d©a
 & 
RTL8366RB_PORT_STATUS_DUPLEX_MASK
);

748 
lök
->
rx_Êow
 = !!(
d©a
 & 
RTL8366RB_PORT_STATUS_RXPAUSE_MASK
);

749 
lök
->
tx_Êow
 = !!(
d©a
 & 
RTL8366RB_PORT_STATUS_TXPAUSE_MASK
);

750 
lök
->
™eg
 = !!(
d©a
 & 
RTL8366RB_PORT_STATUS_AN_MASK
);

752 
•ìd
 = (
d©a
 & 
RTL8366RB_PORT_STATUS_SPEED_MASK
);

753 
•ìd
) {

755 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

758 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

761 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

764 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

769 
	}
}

771 
	$πl8366rb_sw_£t_p‹t_Àd
(
swôch_dev
 *
dev
,

772 c⁄° 
swôch_©å
 *
©å
,

773 
swôch_vÆ
 *
vÆ
)

775 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

776 
u32
 
d©a
;

777 
u32
 
mask
;

778 
u32
 
ªg
;

780 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

781  -
EINVAL
;

783 i‡(
vÆ
->
p‹t_vœn
 =
RTL8366RB_PORT_NUM_CPU
) {

784 
ªg
 = 
RTL8366RB_LED_BLINKRATE_REG
;

785 
mask
 = 0xF << 4;

786 
d©a
 = 
vÆ
->
vÆue
.
i
 << 4;

788 
ªg
 = 
RTL8366RB_LED_CTRL_REG
;

789 
mask
 = 0xF << (
vÆ
->
p‹t_vœn
 * 4),

790 
d©a
 = 
vÆ
->
vÆue
.
i
 << (vÆ->
p‹t_vœn
 * 4);

793  
	`πl8366_smi_rmwr
(
smi
, 
ªg
, 
mask
, 
d©a
);

794 
	}
}

796 
	$πl8366rb_sw_gë_p‹t_Àd
(
swôch_dev
 *
dev
,

797 c⁄° 
swôch_©å
 *
©å
,

798 
swôch_vÆ
 *
vÆ
)

800 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

801 
u32
 
d©a
 = 0;

803 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_LEDGROUPS
)

804  -
EINVAL
;

806 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_LED_CTRL_REG
, &
d©a
);

807 
vÆ
->
vÆue
.
i
 = (
d©a
 >> (vÆ->
p‹t_vœn
 * 4)) & 0x000F;

810 
	}
}

812 
	$πl8366rb_sw_£t_p‹t_dißbÀ
(
swôch_dev
 *
dev
,

813 c⁄° 
swôch_©å
 *
©å
,

814 
swôch_vÆ
 *
vÆ
)

816 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

817 
u32
 
mask
, 
d©a
;

819 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

820  -
EINVAL
;

822 
mask
 = 1 << 
vÆ
->
p‹t_vœn
 ;

823 i‡(
vÆ
->
vÆue
.
i
)

824 
d©a
 = 
mask
;

826 
d©a
 = 0;

828  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PECR
, 
mask
, 
d©a
);

829 
	}
}

831 
	$πl8366rb_sw_gë_p‹t_dißbÀ
(
swôch_dev
 *
dev
,

832 c⁄° 
swôch_©å
 *
©å
,

833 
swôch_vÆ
 *
vÆ
)

835 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

836 
u32
 
d©a
;

838 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

839  -
EINVAL
;

841 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PECR
, &
d©a
);

842 i‡(
d©a
 & (1 << 
vÆ
->
p‹t_vœn
))

843 
vÆ
->
vÆue
.
i
 = 1;

845 
vÆ
->
vÆue
.
i
 = 0;

848 
	}
}

850 
	$πl8366rb_sw_£t_p‹t_øã_ö
(
swôch_dev
 *
dev
,

851 c⁄° 
swôch_©å
 *
©å
,

852 
swôch_vÆ
 *
vÆ
)

854 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

856 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

857  -
EINVAL
;

859 i‡(
vÆ
->
vÆue
.
i
 > 0 && vÆ->vÆue.ò< 
RTL8366RB_BDTH_SW_MAX
)

860 
vÆ
->
vÆue
.
i
 = (vÆ->vÆue.ò- 1Ë/ 
RTL8366RB_BDTH_UNIT
;

862 
vÆ
->
vÆue
.
i
 = 
RTL8366RB_BDTH_REG_DEFAULT
;

864  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8366RB_IB_REG
(
vÆ
->
p‹t_vœn
),

865 
RTL8366RB_IB_BDTH_MASK
 | 
RTL8366RB_IB_PREIFG_MASK
,

866 
vÆ
->
vÆue
.
i
 |

867 (
RTL8366RB_QOS_DEFAULT_PREIFG
 << 
RTL8366RB_IB_PREIFG_OFFSET
));

869 
	}
}

871 
	$πl8366rb_sw_gë_p‹t_øã_ö
(
swôch_dev
 *
dev
,

872 c⁄° 
swôch_©å
 *
©å
,

873 
swôch_vÆ
 *
vÆ
)

875 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

876 
u32
 
d©a
;

878 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

879  -
EINVAL
;

881 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8366RB_IB_REG
(
vÆ
->
p‹t_vœn
), &
d©a
);

882 
d©a
 &
RTL8366RB_IB_BDTH_MASK
;

883 i‡(
d©a
 < 
RTL8366RB_IB_BDTH_MASK
)

884 
d©a
 += 1;

886 
vÆ
->
vÆue
.
i
 = ()
d©a
 * 
RTL8366RB_BDTH_UNIT
;

889 
	}
}

891 
	$πl8366rb_sw_£t_p‹t_øã_out
(
swôch_dev
 *
dev
,

892 c⁄° 
swôch_©å
 *
©å
,

893 
swôch_vÆ
 *
vÆ
)

895 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

897 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

898  -
EINVAL
;

900 
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_EB_PREIFG_REG
,

901 
RTL8366RB_EB_PREIFG_MASK
,

902 (
RTL8366RB_QOS_DEFAULT_PREIFG
 << 
RTL8366RB_EB_PREIFG_OFFSET
));

904 i‡(
vÆ
->
vÆue
.
i
 > 0 && vÆ->vÆue.ò< 
RTL8366RB_BDTH_SW_MAX
)

905 
vÆ
->
vÆue
.
i
 = (vÆ->vÆue.ò- 1Ë/ 
RTL8366RB_BDTH_UNIT
;

907 
vÆ
->
vÆue
.
i
 = 
RTL8366RB_BDTH_REG_DEFAULT
;

909  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8366RB_EB_REG
(
vÆ
->
p‹t_vœn
),

910 
RTL8366RB_EB_BDTH_MASK
, 
vÆ
->
vÆue
.
i
 );

912 
	}
}

914 
	$πl8366rb_sw_gë_p‹t_øã_out
(
swôch_dev
 *
dev
,

915 c⁄° 
swôch_©å
 *
©å
,

916 
swôch_vÆ
 *
vÆ
)

918 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

919 
u32
 
d©a
;

921 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

922  -
EINVAL
;

924 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8366RB_EB_REG
(
vÆ
->
p‹t_vœn
), &
d©a
);

925 
d©a
 &
RTL8366RB_EB_BDTH_MASK
;

926 i‡(
d©a
 < 
RTL8366RB_EB_BDTH_MASK
)

927 
d©a
 += 1;

929 
vÆ
->
vÆue
.
i
 = ()
d©a
 * 
RTL8366RB_BDTH_UNIT
;

932 
	}
}

934 
	$πl8366rb_sw_£t_qos_íabÀ
(
swôch_dev
 *
dev
,

935 c⁄° 
swôch_©å
 *
©å
,

936 
swôch_vÆ
 *
vÆ
)

938 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

939 
u32
 
d©a
;

941 i‡(
vÆ
->
vÆue
.
i
)

942 
d©a
 = 
RTL8366RB_QOS_MASK
;

944 
d©a
 = 0;

946  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_SGCR
, 
RTL8366RB_QOS_MASK
, 
d©a
);

947 
	}
}

949 
	$πl8366rb_sw_gë_qos_íabÀ
(
swôch_dev
 *
dev
,

950 c⁄° 
swôch_©å
 *
©å
,

951 
swôch_vÆ
 *
vÆ
)

953 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

954 
u32
 
d©a
;

956 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_SGCR
, &
d©a
);

957 i‡(
d©a
 & 
RTL8366RB_QOS_MASK
)

958 
vÆ
->
vÆue
.
i
 = 1;

960 
vÆ
->
vÆue
.
i
 = 0;

963 
	}
}

965 
	$πl8366rb_sw_£t_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

966 c⁄° 
swôch_©å
 *
©å
,

967 
swôch_vÆ
 *
vÆ
)

969 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

970 
u32
 
d©a
;

972 i‡(
vÆ
->
vÆue
.
i
)

973 
d©a
 = 
RTL8366RB_PMCR_MIRROR_RX
;

975 
d©a
 = 0;

977  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_MIRROR_RX
, 
d©a
);

978 
	}
}

980 
	$πl8366rb_sw_gë_múr‹_rx_íabÀ
(
swôch_dev
 *
dev
,

981 c⁄° 
swôch_©å
 *
©å
,

982 
swôch_vÆ
 *
vÆ
)

984 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

985 
u32
 
d©a
;

987 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

988 i‡(
d©a
 & 
RTL8366RB_PMCR_MIRROR_RX
)

989 
vÆ
->
vÆue
.
i
 = 1;

991 
vÆ
->
vÆue
.
i
 = 0;

994 
	}
}

996 
	$πl8366rb_sw_£t_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

997 c⁄° 
swôch_©å
 *
©å
,

998 
swôch_vÆ
 *
vÆ
)

1000 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1001 
u32
 
d©a
;

1003 i‡(
vÆ
->
vÆue
.
i
)

1004 
d©a
 = 
RTL8366RB_PMCR_MIRROR_TX
;

1006 
d©a
 = 0;

1008  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_MIRROR_TX
, 
d©a
);

1009 
	}
}

1011 
	$πl8366rb_sw_gë_múr‹_tx_íabÀ
(
swôch_dev
 *
dev
,

1012 c⁄° 
swôch_©å
 *
©å
,

1013 
swôch_vÆ
 *
vÆ
)

1015 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1016 
u32
 
d©a
;

1018 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

1019 i‡(
d©a
 & 
RTL8366RB_PMCR_MIRROR_TX
)

1020 
vÆ
->
vÆue
.
i
 = 1;

1022 
vÆ
->
vÆue
.
i
 = 0;

1025 
	}
}

1027 
	$πl8366rb_sw_£t_m⁄ô‹_isﬁ©i⁄_íabÀ
(
swôch_dev
 *
dev
,

1028 c⁄° 
swôch_©å
 *
©å
,

1029 
swôch_vÆ
 *
vÆ
)

1031 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1032 
u32
 
d©a
;

1034 i‡(
vÆ
->
vÆue
.
i
)

1035 
d©a
 = 
RTL8366RB_PMCR_MIRROR_ISO
;

1037 
d©a
 = 0;

1039  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_MIRROR_ISO
, 
d©a
);

1040 
	}
}

1042 
	$πl8366rb_sw_gë_m⁄ô‹_isﬁ©i⁄_íabÀ
(
swôch_dev
 *
dev
,

1043 c⁄° 
swôch_©å
 *
©å
,

1044 
swôch_vÆ
 *
vÆ
)

1046 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1047 
u32
 
d©a
;

1049 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

1050 i‡(
d©a
 & 
RTL8366RB_PMCR_MIRROR_ISO
)

1051 
vÆ
->
vÆue
.
i
 = 1;

1053 
vÆ
->
vÆue
.
i
 = 0;

1056 
	}
}

1058 
	$πl8366rb_sw_£t_múr‹_∑u£_‰ames_íabÀ
(
swôch_dev
 *
dev
,

1059 c⁄° 
swôch_©å
 *
©å
,

1060 
swôch_vÆ
 *
vÆ
)

1062 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1063 
u32
 
d©a
;

1065 i‡(
vÆ
->
vÆue
.
i
)

1066 
d©a
 = 
RTL8366RB_PMCR_MIRROR_SPC
;

1068 
d©a
 = 0;

1070  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_MIRROR_SPC
, 
d©a
);

1071 
	}
}

1073 
	$πl8366rb_sw_gë_múr‹_∑u£_‰ames_íabÀ
(
swôch_dev
 *
dev
,

1074 c⁄° 
swôch_©å
 *
©å
,

1075 
swôch_vÆ
 *
vÆ
)

1077 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1078 
u32
 
d©a
;

1080 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

1081 i‡(
d©a
 & 
RTL8366RB_PMCR_MIRROR_SPC
)

1082 
vÆ
->
vÆue
.
i
 = 1;

1084 
vÆ
->
vÆue
.
i
 = 0;

1087 
	}
}

1089 
	$πl8366rb_sw_£t_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1090 c⁄° 
swôch_©å
 *
©å
,

1091 
swôch_vÆ
 *
vÆ
)

1093 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1094 
u32
 
d©a
;

1096 
d©a
 = 
	`RTL8366RB_PMCR_MONITOR_PORT
(
vÆ
->
vÆue
.
i
);

1098  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_MONITOR_PORT_MASK
, 
d©a
);

1099 
	}
}

1101 
	$πl8366rb_sw_gë_múr‹_m⁄ô‹_p‹t
(
swôch_dev
 *
dev
,

1102 c⁄° 
swôch_©å
 *
©å
,

1103 
swôch_vÆ
 *
vÆ
)

1105 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1106 
u32
 
d©a
;

1108 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

1109 
vÆ
->
vÆue
.
i
 = (
d©a
 & 
RTL8366RB_PMCR_MONITOR_PORT_MASK
) >> 4;

1112 
	}
}

1114 
	$πl8366rb_sw_£t_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

1115 c⁄° 
swôch_©å
 *
©å
,

1116 
swôch_vÆ
 *
vÆ
)

1118 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1119 
u32
 
d©a
;

1121 
d©a
 = 
	`RTL8366RB_PMCR_SOURCE_PORT
(
vÆ
->
vÆue
.
i
);

1123  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_PMCR
, 
RTL8366RB_PMCR_SOURCE_PORT_MASK
, 
d©a
);

1124 
	}
}

1126 
	$πl8366rb_sw_gë_múr‹_sour˚_p‹t
(
swôch_dev
 *
dev
,

1127 c⁄° 
swôch_©å
 *
©å
,

1128 
swôch_vÆ
 *
vÆ
)

1130 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1131 
u32
 
d©a
;

1133 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_PMCR
, &
d©a
);

1134 
vÆ
->
vÆue
.
i
 = 
d©a
 & 
RTL8366RB_PMCR_SOURCE_PORT_MASK
;

1137 
	}
}

1139 
	$πl8366rb_sw_ª£t_p‹t_mibs
(
swôch_dev
 *
dev
,

1140 c⁄° 
swôch_©å
 *
©å
,

1141 
swôch_vÆ
 *
vÆ
)

1143 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1145 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366RB_NUM_PORTS
)

1146  -
EINVAL
;

1148  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366RB_MIB_CTRL_REG
, 0,

1149 
	`RTL8366RB_MIB_CTRL_PORT_RESET
(
vÆ
->
p‹t_vœn
));

1150 
	}
}

1152 
	$πl8366rb_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1153 
swôch_p‹t_°©s
 *
°©s
)

1155  (
	`πl8366_sw_gë_p‹t_°©s
(
dev
, 
p‹t
, 
°©s
,

1156 
RTL8366RB_MIB_TXB_ID
, 
RTL8366RB_MIB_RXB_ID
));

1157 
	}
}

1159 
swôch_©å
 
	gπl8366rb_globÆs
[] = {

1161 .
ty≥
 = 
SWITCH_TYPE_INT
,

1162 .
	g«me
 = "enable_learning",

1163 .
	gdes¸ùti⁄
 = "EnableÜearning,Énableáging",

1164 .
	g£t
 = 
πl8366rb_sw_£t_À¨nög_íabÀ
,

1165 .
	ggë
 = 
πl8366rb_sw_gë_À¨nög_íabÀ
,

1166 .
	gmax
 = 1

1168 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1169 .
	g«me
 = "enable_vlan",

1170 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1171 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1172 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1173 .
	gmax
 = 1,

1174 .
	gofs
 = 1

1176 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1177 .
	g«me
 = "enable_vlan4k",

1178 .
	gdes¸ùti⁄
 = "Enable VLAN 4K mode",

1179 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1180 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1181 .
	gmax
 = 1,

1182 .
	gofs
 = 2

1184 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1185 .
	g«me
 = "reset_mibs",

1186 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1187 .
	g£t
 = 
πl8366rb_sw_ª£t_mibs
,

1189 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1190 .
	g«me
 = "blinkrate",

1191 .
	gdes¸ùti⁄
 = "Get/Set LED blinkingÑate (0 = 43ms, 1 = 84ms,"

1193 .
	g£t
 = 
πl8366rb_sw_£t_blökøã
,

1194 .
	ggë
 = 
πl8366rb_sw_gë_blökøã
,

1195 .
	gmax
 = 5

1197 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1198 .
	g«me
 = "enable_qos",

1199 .
	gdes¸ùti⁄
 = "Enable QOS",

1200 .
	g£t
 = 
πl8366rb_sw_£t_qos_íabÀ
,

1201 .
	ggë
 = 
πl8366rb_sw_gë_qos_íabÀ
,

1202 .
	gmax
 = 1

1204 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1205 .
	g«me
 = "enable_mirror_rx",

1206 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖackets",

1207 .
	g£t
 = 
πl8366rb_sw_£t_múr‹_rx_íabÀ
,

1208 .
	ggë
 = 
πl8366rb_sw_gë_múr‹_rx_íabÀ
,

1209 .
	gmax
 = 1

1211 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1212 .
	g«me
 = "enable_mirror_tx",

1213 .
	gdes¸ùti⁄
 = "Enable mirroring of TXÖackets",

1214 .
	g£t
 = 
πl8366rb_sw_£t_múr‹_tx_íabÀ
,

1215 .
	ggë
 = 
πl8366rb_sw_gë_múr‹_tx_íabÀ
,

1216 .
	gmax
 = 1

1218 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1219 .
	g«me
 = "enable_monitor_isolation",

1220 .
	gdes¸ùti⁄
 = "Enable isolation of monitorÖort (TXÖackets will be dropped)",

1221 .
	g£t
 = 
πl8366rb_sw_£t_m⁄ô‹_isﬁ©i⁄_íabÀ
,

1222 .
	ggë
 = 
πl8366rb_sw_gë_m⁄ô‹_isﬁ©i⁄_íabÀ
,

1223 .
	gmax
 = 1

1225 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1226 .
	g«me
 = "enable_mirror_pause_frames",

1227 .
	gdes¸ùti⁄
 = "Enable mirroring of RXÖause frames",

1228 .
	g£t
 = 
πl8366rb_sw_£t_múr‹_∑u£_‰ames_íabÀ
,

1229 .
	ggë
 = 
πl8366rb_sw_gë_múr‹_∑u£_‰ames_íabÀ
,

1230 .
	gmax
 = 1

1232 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1233 .
	g«me
 = "mirror_monitor_port",

1234 .
	gdes¸ùti⁄
 = "Mirror monitorÖort",

1235 .
	g£t
 = 
πl8366rb_sw_£t_múr‹_m⁄ô‹_p‹t
,

1236 .
	ggë
 = 
πl8366rb_sw_gë_múr‹_m⁄ô‹_p‹t
,

1237 .
	gmax
 = 5

1239 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1240 .
	g«me
 = "mirror_source_port",

1241 .
	gdes¸ùti⁄
 = "Mirror sourceÖort",

1242 .
	g£t
 = 
πl8366rb_sw_£t_múr‹_sour˚_p‹t
,

1243 .
	ggë
 = 
πl8366rb_sw_gë_múr‹_sour˚_p‹t
,

1244 .
	gmax
 = 5

1248 
swôch_©å
 
	gπl8366rb_p‹t
[] = {

1250 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1251 .
	g«me
 = "reset_mib",

1252 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1253 .
	g£t
 = 
πl8366rb_sw_ª£t_p‹t_mibs
,

1255 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1256 .
	g«me
 = "mib",

1257 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

1258 .
	gmax
 = 33,

1259 .
	g£t
 = 
NULL
,

1260 .
	ggë
 = 
πl8366_sw_gë_p‹t_mib
,

1262 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1263 .
	g«me
 = "led",

1264 .
	gdes¸ùti⁄
 = "Get/SetÖort group (0 - 3)Üed mode (0 - 15)",

1265 .
	gmax
 = 15,

1266 .
	g£t
 = 
πl8366rb_sw_£t_p‹t_Àd
,

1267 .
	ggë
 = 
πl8366rb_sw_gë_p‹t_Àd
,

1269 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1270 .
	g«me
 = "disable",

1271 .
	gdes¸ùti⁄
 = "Get/SetÖort state (enabled or disabled)",

1272 .
	gmax
 = 1,

1273 .
	g£t
 = 
πl8366rb_sw_£t_p‹t_dißbÀ
,

1274 .
	ggë
 = 
πl8366rb_sw_gë_p‹t_dißbÀ
,

1276 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1277 .
	g«me
 = "rate_in",

1278 .
	gdes¸ùti⁄
 = "Get/SetÖort ingress (incoming) bandwidthÜimit in kbps",

1279 .
	gmax
 = 
RTL8366RB_BDTH_SW_MAX
,

1280 .
	g£t
 = 
πl8366rb_sw_£t_p‹t_øã_ö
,

1281 .
	ggë
 = 
πl8366rb_sw_gë_p‹t_øã_ö
,

1283 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1284 .
	g«me
 = "rate_out",

1285 .
	gdes¸ùti⁄
 = "Get/SetÖortÉgress (outgoing) bandwidthÜimit in kbps",

1286 .
	gmax
 = 
RTL8366RB_BDTH_SW_MAX
,

1287 .
	g£t
 = 
πl8366rb_sw_£t_p‹t_øã_out
,

1288 .
	ggë
 = 
πl8366rb_sw_gë_p‹t_øã_out
,

1292 
swôch_©å
 
	gπl8366rb_vœn
[] = {

1294 .
ty≥
 = 
SWITCH_TYPE_STRING
,

1295 .
	g«me
 = "info",

1296 .
	gdes¸ùti⁄
 = "Get vlan information",

1297 .
	gmax
 = 1,

1298 .
	g£t
 = 
NULL
,

1299 .
	ggë
 = 
πl8366_sw_gë_vœn_öfo
,

1301 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1302 .
	g«me
 = "fid",

1303 .
	gdes¸ùti⁄
 = "Get/Set vlan FID",

1304 .
	gmax
 = 
RTL8366RB_FIDMAX
,

1305 .
	g£t
 = 
πl8366_sw_£t_vœn_fid
,

1306 .
	ggë
 = 
πl8366_sw_gë_vœn_fid
,

1310 c⁄° 
swôch_dev_›s
 
	gπl8366_›s
 = {

1311 .
©å_globÆ
 = {

1312 .
©å
 = 
πl8366rb_globÆs
,

1313 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366rb_globÆs
),

1315 .
	g©å_p‹t
 = {

1316 .
©å
 = 
πl8366rb_p‹t
,

1317 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366rb_p‹t
),

1319 .
	g©å_vœn
 = {

1320 .
©å
 = 
πl8366rb_vœn
,

1321 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366rb_vœn
),

1324 .
	ggë_vœn_p‹ts
 = 
πl8366_sw_gë_vœn_p‹ts
,

1325 .
	g£t_vœn_p‹ts
 = 
πl8366_sw_£t_vœn_p‹ts
,

1326 .
	ggë_p‹t_pvid
 = 
πl8366_sw_gë_p‹t_pvid
,

1327 .
	g£t_p‹t_pvid
 = 
πl8366_sw_£t_p‹t_pvid
,

1328 .
	gª£t_swôch
 = 
πl8366_sw_ª£t_swôch
,

1329 .
	ggë_p‹t_lök
 = 
πl8366rb_sw_gë_p‹t_lök
,

1330 .
	ggë_p‹t_°©s
 = 
πl8366rb_sw_gë_p‹t_°©s
,

1333 
	$πl8366rb_swôch_öô
(
πl8366_smi
 *
smi
)

1335 
swôch_dev
 *
dev
 = &
smi
->
sw_dev
;

1336 
îr
;

1338 
dev
->
«me
 = "RTL8366RB";

1339 
dev
->
˝u_p‹t
 = 
RTL8366RB_PORT_NUM_CPU
;

1340 
dev
->
p‹ts
 = 
RTL8366RB_NUM_PORTS
;

1341 
dev
->
vœns
 = 
RTL8366RB_NUM_VIDS
;

1342 
dev
->
›s
 = &
πl8366_›s
;

1343 
dev
->
Æüs
 = 
	`dev_«me
(
smi
->
∑ª¡
);

1345 
îr
 = 
	`ªgi°î_swôch
(
dev
, 
NULL
);

1346 i‡(
îr
)

1347 
	`dev_îr
(
smi
->
∑ª¡
, "switchÑegistration failed\n");

1349  
îr
;

1350 
	}
}

1352 
	$πl8366rb_swôch_˛ónup
(
πl8366_smi
 *
smi
)

1354 
	`uƒegi°î_swôch
(&
smi
->
sw_dev
);

1355 
	}
}

1357 
	$πl8366rb_mii_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

1359 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1360 
u32
 
vÆ
 = 0;

1361 
îr
;

1363 
îr
 = 
	`πl8366rb_ªad_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, &
vÆ
);

1364 i‡(
îr
)

1367  
vÆ
;

1368 
	}
}

1370 
	$πl8366rb_mii_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

1372 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1373 
u32
 
t
;

1374 
îr
;

1376 
îr
 = 
	`πl8366rb_wrôe_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, 
vÆ
);

1378 (Ë
	`πl8366rb_ªad_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, &
t
);

1380  
îr
;

1381 
	}
}

1383 
	$πl8366rb_dëe˘
(
πl8366_smi
 *
smi
)

1385 
u32
 
chù_id
 = 0;

1386 
u32
 
chù_vî
 = 0;

1387 
ªt
;

1389 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_CHIP_ID_REG
, &
chù_id
);

1390 i‡(
ªt
) {

1391 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chip id\n");

1392  
ªt
;

1395 
chù_id
) {

1396 
RTL8366RB_CHIP_ID_8366
:

1399 
	`dev_îr
(
smi
->
∑ª¡
, "unknow¿chù id (%04x)\n", 
chù_id
);

1400  -
ENODEV
;

1403 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366RB_CHIP_VERSION_CTRL_REG
,

1404 &
chù_vî
);

1405 i‡(
ªt
) {

1406 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chip version\n");

1407  
ªt
;

1410 
	`dev_öfo
(
smi
->
∑ª¡
, "RTL%04x ver. %u chip found\n",

1411 
chù_id
, 
chù_vî
 & 
RTL8366RB_CHIP_VERSION_MASK
);

1414 
	}
}

1416 
πl8366_smi_›s
 
	gπl8366rb_smi_›s
 = {

1417 .
dëe˘
 = 
πl8366rb_dëe˘
,

1418 .
	gª£t_chù
 = 
πl8366rb_ª£t_chù
,

1419 .
	g£tup
 = 
πl8366rb_£tup
,

1421 .
	gmii_ªad
 = 
πl8366rb_mii_ªad
,

1422 .
	gmii_wrôe
 = 
πl8366rb_mii_wrôe
,

1424 .
	ggë_vœn_mc
 = 
πl8366rb_gë_vœn_mc
,

1425 .
	g£t_vœn_mc
 = 
πl8366rb_£t_vœn_mc
,

1426 .
	ggë_vœn_4k
 = 
πl8366rb_gë_vœn_4k
,

1427 .
	g£t_vœn_4k
 = 
πl8366rb_£t_vœn_4k
,

1428 .
	ggë_mc_ödex
 = 
πl8366rb_gë_mc_ödex
,

1429 .
	g£t_mc_ödex
 = 
πl8366rb_£t_mc_ödex
,

1430 .
	ggë_mib_cou¡î
 = 
πl8366rb_gë_mib_cou¡î
,

1431 .
	gis_vœn_vÆid
 = 
πl8366rb_is_vœn_vÆid
,

1432 .
	gíabÀ_vœn
 = 
πl8366rb_íabÀ_vœn
,

1433 .
	gíabÀ_vœn4k
 = 
πl8366rb_íabÀ_vœn4k
,

1434 .
	gíabÀ_p‹t
 = 
πl8366rb_íabÀ_p‹t
,

1437 
	$πl8366rb_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1439 
πl8366_smi_vîsi⁄_¥öãd
;

1440 
πl8366_smi
 *
smi
;

1441 
îr
;

1443 i‡(!
πl8366_smi_vîsi⁄_¥öãd
++)

1444 
	`¥ötk
(
KERN_NOTICE
 
RTL8366RB_DRIVER_DESC


1445 " vîsi⁄ " 
RTL8366RB_DRIVER_VER
"\n");

1447 
smi
 = 
	`πl8366_smi_¥obe
(
pdev
);

1448 i‡(
	`IS_ERR
(
smi
))

1449  
	`PTR_ERR
(
smi
);

1451 
smi
->
˛k_dñay
 = 10;

1452 
smi
->
cmd_ªad
 = 0xa9;

1453 
smi
->
cmd_wrôe
 = 0xa8;

1454 
smi
->
›s
 = &
πl8366rb_smi_›s
;

1455 
smi
->
˝u_p‹t
 = 
RTL8366RB_PORT_NUM_CPU
;

1456 
smi
->
num_p‹ts
 = 
RTL8366RB_NUM_PORTS
;

1457 
smi
->
num_vœn_mc
 = 
RTL8366RB_NUM_VLANS
;

1458 
smi
->
mib_cou¡îs
 = 
πl8366rb_mib_cou¡îs
;

1459 
smi
->
num_mib_cou¡îs
 = 
	`ARRAY_SIZE
(
πl8366rb_mib_cou¡îs
);

1461 
îr
 = 
	`πl8366_smi_öô
(
smi
);

1462 i‡(
îr
)

1463 
îr_‰ì_smi
;

1465 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
smi
);

1467 
îr
 = 
	`πl8366rb_swôch_öô
(
smi
);

1468 i‡(
îr
)

1469 
îr_˛ór_drvd©a
;

1473 
îr_˛ór_drvd©a
:

1474 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1475 
	`πl8366_smi_˛ónup
(
smi
);

1476 
îr_‰ì_smi
:

1477 
	`k‰ì
(
smi
);

1478  
îr
;

1479 
	}
}

1481 
	$πl8366rb_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1483 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1485 i‡(
smi
) {

1486 
	`πl8366rb_swôch_˛ónup
(
smi
);

1487 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1488 
	`πl8366_smi_˛ónup
(
smi
);

1489 
	`k‰ì
(
smi
);

1493 
	}
}

1495 #ifde‡
CONFIG_OF


1496 c⁄° 
of_devi˚_id
 
	gπl8366rb_m©ch
[] = {

1497 { .
com∑tibÀ
 = "realtek,rtl8366rb" },

1500 
MODULE_DEVICE_TABLE
(
of
, 
πl8366rb_m©ch
);

1503 
∂©f‹m_drivî
 
	gπl8366rb_drivî
 = {

1504 .
drivî
 = {

1505 .
«me
 = 
RTL8366RB_DRIVER_NAME
,

1506 .
	gow√r
 = 
THIS_MODULE
,

1507 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
πl8366rb_m©ch
),

1509 .
	g¥obe
 = 
πl8366rb_¥obe
,

1510 .
	gªmove
 = 
πl8366rb_ªmove
,

1513 
__öô
 
	$πl8366rb_moduÀ_öô
()

1515  
	`∂©f‹m_drivî_ªgi°î
(&
πl8366rb_drivî
);

1516 
	}
}

1517 
moduÀ_öô
(
πl8366rb_moduÀ_öô
);

1519 
__exô
 
	$πl8366rb_moduÀ_exô
()

1521 
	`∂©f‹m_drivî_uƒegi°î
(&
πl8366rb_drivî
);

1522 
	}
}

1523 
moduÀ_exô
(
πl8366rb_moduÀ_exô
);

1525 
MODULE_DESCRIPTION
(
RTL8366RB_DRIVER_DESC
);

1526 
MODULE_VERSION
(
RTL8366RB_DRIVER_VER
);

1527 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1528 
MODULE_AUTHOR
("Antti Sepp√§l√§ <a.seppala@gmail.com>");

1529 
MODULE_AUTHOR
("Roman Yeryomin <roman@advem.lv>");

1530 
MODULE_AUTHOR
("Colin Leitner <colin.leitner@googlemail.com>");

1531 
MODULE_LICENSE
("GPL v2");

1532 
MODULE_ALIAS
("∂©f‹m:" 
RTL8366RB_DRIVER_NAME
);

	@linux/generic/files/drivers/net/phy/rtl8366s.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/devi˚.h
>

16 
	~<löux/of.h
>

17 
	~<löux/of_∂©f‹m.h
>

18 
	~<löux/dñay.h
>

19 
	~<löux/skbuff.h
>

20 
	~<löux/πl8366.h
>

22 
	~"πl8366_smi.h
"

24 
	#RTL8366S_DRIVER_DESC
 "Ró…ek RTL8366SÉthî√àswôch drivî"

	)

25 
	#RTL8366S_DRIVER_VER
 "0.2.2"

	)

27 
	#RTL8366S_PHY_NO_MAX
 4

	)

28 
	#RTL8366S_PHY_PAGE_MAX
 7

	)

29 
	#RTL8366S_PHY_ADDR_MAX
 31

	)

32 
	#RTL8366S_SGCR
 0x0000

	)

33 
	#RTL8366S_SGCR_EN_BC_STORM_CTRL
 
	`BIT
(0)

	)

34 
	#RTL8366S_SGCR_MAX_LENGTH
(
_x
Ë(_x << 4)

	)

35 
	#RTL8366S_SGCR_MAX_LENGTH_MASK
 
	`RTL8366S_SGCR_MAX_LENGTH
(0x3)

	)

36 
	#RTL8366S_SGCR_MAX_LENGTH_1522
 
	`RTL8366S_SGCR_MAX_LENGTH
(0x0)

	)

37 
	#RTL8366S_SGCR_MAX_LENGTH_1536
 
	`RTL8366S_SGCR_MAX_LENGTH
(0x1)

	)

38 
	#RTL8366S_SGCR_MAX_LENGTH_1552
 
	`RTL8366S_SGCR_MAX_LENGTH
(0x2)

	)

39 
	#RTL8366S_SGCR_MAX_LENGTH_16000
 
	`RTL8366S_SGCR_MAX_LENGTH
(0x3)

	)

40 
	#RTL8366S_SGCR_EN_VLAN
 
	`BIT
(13)

	)

43 
	#RTL8366S_PECR
 0x0001

	)

46 
	#RTL8366S_GREEN_ETHERNET_CTRL_REG
 0x000a

	)

47 
	#RTL8366S_GREEN_ETHERNET_CTRL_MASK
 0x0018

	)

48 
	#RTL8366S_GREEN_ETHERNET_TX_BIT
 (1 << 3)

	)

49 
	#RTL8366S_GREEN_ETHERNET_RX_BIT
 (1 << 4)

	)

52 
	#RTL8366S_SSCR0
 0x0002

	)

53 
	#RTL8366S_SSCR1
 0x0003

	)

54 
	#RTL8366S_SSCR2
 0x0004

	)

55 
	#RTL8366S_SSCR2_DROP_UNKNOWN_DA
 
	`BIT
(0)

	)

57 
	#RTL8366S_RESET_CTRL_REG
 0x0100

	)

58 
	#RTL8366S_CHIP_CTRL_RESET_HW
 1

	)

59 
	#RTL8366S_CHIP_CTRL_RESET_SW
 (1 << 1)

	)

61 
	#RTL8366S_CHIP_VERSION_CTRL_REG
 0x0104

	)

62 
	#RTL8366S_CHIP_VERSION_MASK
 0xf

	)

63 
	#RTL8366S_CHIP_ID_REG
 0x0105

	)

64 
	#RTL8366S_CHIP_ID_8366
 0x8366

	)

67 
	#RTL8366S_PHY_ACCESS_CTRL_REG
 0x8028

	)

68 
	#RTL8366S_PHY_ACCESS_DATA_REG
 0x8029

	)

70 
	#RTL8366S_PHY_CTRL_READ
 1

	)

71 
	#RTL8366S_PHY_CTRL_WRITE
 0

	)

73 
	#RTL8366S_PHY_REG_MASK
 0x1f

	)

74 
	#RTL8366S_PHY_PAGE_OFFSET
 5

	)

75 
	#RTL8366S_PHY_PAGE_MASK
 (0x7 << 5)

	)

76 
	#RTL8366S_PHY_NO_OFFSET
 9

	)

77 
	#RTL8366S_PHY_NO_MASK
 (0x1‡<< 9)

	)

80 
	#RTL8366S_PHY_POWER_SAVING_CTRL_REG
 12

	)

81 
	#RTL8366S_PHY_POWER_SAVING_MASK
 0x1000

	)

84 
	#RTL8366S_LED_BLINKRATE_REG
 0x0420

	)

85 
	#RTL8366S_LED_BLINKRATE_BIT
 0

	)

86 
	#RTL8366S_LED_BLINKRATE_MASK
 0x0007

	)

88 
	#RTL8366S_LED_CTRL_REG
 0x0421

	)

89 
	#RTL8366S_LED_0_1_CTRL_REG
 0x0422

	)

90 
	#RTL8366S_LED_2_3_CTRL_REG
 0x0423

	)

92 
	#RTL8366S_MIB_COUNT
 33

	)

93 
	#RTL8366S_GLOBAL_MIB_COUNT
 1

	)

94 
	#RTL8366S_MIB_COUNTER_PORT_OFFSET
 0x0040

	)

95 
	#RTL8366S_MIB_COUNTER_BASE
 0x1000

	)

96 
	#RTL8366S_MIB_COUNTER_PORT_OFFSET2
 0x0008

	)

97 
	#RTL8366S_MIB_COUNTER_BASE2
 0x1180

	)

98 
	#RTL8366S_MIB_CTRL_REG
 0x11F0

	)

99 
	#RTL8366S_MIB_CTRL_USER_MASK
 0x01FF

	)

100 
	#RTL8366S_MIB_CTRL_BUSY_MASK
 0x0001

	)

101 
	#RTL8366S_MIB_CTRL_RESET_MASK
 0x0002

	)

103 
	#RTL8366S_MIB_CTRL_GLOBAL_RESET_MASK
 0x0004

	)

104 
	#RTL8366S_MIB_CTRL_PORT_RESET_BIT
 0x0003

	)

105 
	#RTL8366S_MIB_CTRL_PORT_RESET_MASK
 0x01FC

	)

108 
	#RTL8366S_PORT_VLAN_CTRL_BASE
 0x0058

	)

109 
	#RTL8366S_PORT_VLAN_CTRL_REG
(
_p
) \

110 (
RTL8366S_PORT_VLAN_CTRL_BASE
 + (
_p
Ë/ 4)

	)

111 
	#RTL8366S_PORT_VLAN_CTRL_MASK
 0xf

	)

112 
	#RTL8366S_PORT_VLAN_CTRL_SHIFT
(
_p
Ë(4 * ((_pË% 4))

	)

115 
	#RTL8366S_VLAN_TABLE_READ_BASE
 0x018B

	)

116 
	#RTL8366S_VLAN_TABLE_WRITE_BASE
 0x0185

	)

118 
	#RTL8366S_VLAN_TB_CTRL_REG
 0x010F

	)

120 
	#RTL8366S_TABLE_ACCESS_CTRL_REG
 0x0180

	)

121 
	#RTL8366S_TABLE_VLAN_READ_CTRL
 0x0E01

	)

122 
	#RTL8366S_TABLE_VLAN_WRITE_CTRL
 0x0F01

	)

124 
	#RTL8366S_VLAN_MC_BASE
(
_x
Ë(0x0016 + (_xË* 2)

	)

126 
	#RTL8366S_VLAN_MEMBERINGRESS_REG
 0x0379

	)

128 
	#RTL8366S_PORT_LINK_STATUS_BASE
 0x0060

	)

129 
	#RTL8366S_PORT_STATUS_SPEED_MASK
 0x0003

	)

130 
	#RTL8366S_PORT_STATUS_DUPLEX_MASK
 0x0004

	)

131 
	#RTL8366S_PORT_STATUS_LINK_MASK
 0x0010

	)

132 
	#RTL8366S_PORT_STATUS_TXPAUSE_MASK
 0x0020

	)

133 
	#RTL8366S_PORT_STATUS_RXPAUSE_MASK
 0x0040

	)

134 
	#RTL8366S_PORT_STATUS_AN_MASK
 0x0080

	)

137 
	#RTL8366S_PORT_NUM_CPU
 5

	)

138 
	#RTL8366S_NUM_PORTS
 6

	)

139 
	#RTL8366S_NUM_VLANS
 16

	)

140 
	#RTL8366S_NUM_LEDGROUPS
 4

	)

141 
	#RTL8366S_NUM_VIDS
 4096

	)

142 
	#RTL8366S_PRIORITYMAX
 7

	)

143 
	#RTL8366S_FIDMAX
 7

	)

146 
	#RTL8366S_PORT_1
 (1 << 0Ë

	)

147 
	#RTL8366S_PORT_2
 (1 << 1Ë

	)

148 
	#RTL8366S_PORT_3
 (1 << 2Ë

	)

149 
	#RTL8366S_PORT_4
 (1 << 3Ë

	)

151 
	#RTL8366S_PORT_UNKNOWN
 (1 << 4Ë

	)

152 
	#RTL8366S_PORT_CPU
 (1 << 5Ë

	)

154 
	#RTL8366S_PORT_ALL
 (
RTL8366S_PORT_1
 | \

155 
RTL8366S_PORT_2
 | \

156 
RTL8366S_PORT_3
 | \

157 
RTL8366S_PORT_4
 | \

158 
RTL8366S_PORT_UNKNOWN
 | \

159 
RTL8366S_PORT_CPU
)

	)

161 
	#RTL8366S_PORT_ALL_BUT_CPU
 (
RTL8366S_PORT_1
 | \

162 
RTL8366S_PORT_2
 | \

163 
RTL8366S_PORT_3
 | \

164 
RTL8366S_PORT_4
 | \

165 
RTL8366S_PORT_UNKNOWN
)

	)

167 
	#RTL8366S_PORT_ALL_EXTERNAL
 (
RTL8366S_PORT_1
 | \

168 
RTL8366S_PORT_2
 | \

169 
RTL8366S_PORT_3
 | \

170 
RTL8366S_PORT_4
)

	)

172 
	#RTL8366S_PORT_ALL_INTERNAL
 (
RTL8366S_PORT_UNKNOWN
 | \

173 
RTL8366S_PORT_CPU
)

	)

175 
	#RTL8366S_VLAN_VID_MASK
 0xfff

	)

176 
	#RTL8366S_VLAN_PRIORITY_SHIFT
 12

	)

177 
	#RTL8366S_VLAN_PRIORITY_MASK
 0x7

	)

178 
	#RTL8366S_VLAN_MEMBER_MASK
 0x3f

	)

179 
	#RTL8366S_VLAN_UNTAG_SHIFT
 6

	)

180 
	#RTL8366S_VLAN_UNTAG_MASK
 0x3f

	)

181 
	#RTL8366S_VLAN_FID_SHIFT
 12

	)

182 
	#RTL8366S_VLAN_FID_MASK
 0x7

	)

184 
	#RTL8366S_MIB_RXB_ID
 0

	)

185 
	#RTL8366S_MIB_TXB_ID
 20

	)

187 
πl8366_mib_cou¡î
 
	gπl8366s_mib_cou¡îs
[] = {

228 
	#REG_WR
(
_smi
, 
_ªg
, 
_vÆ
) \

230 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

231 i‡(
îr
) \

232  
îr
; \

233 } 0)

	)

235 
	#REG_RMW
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
) \

237 
îr
 = 
	`πl8366_smi_rmwr
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
); \

238 i‡(
îr
) \

239  
îr
; \

240 } 0)

	)

242 
	$πl8366s_ª£t_chù
(
πl8366_smi
 *
smi
)

244 
timeout
 = 10;

245 
u32
 
d©a
;

247 
	`πl8366_smi_wrôe_ªg_nﬂck
(
smi
, 
RTL8366S_RESET_CTRL_REG
,

248 
RTL8366S_CHIP_CTRL_RESET_HW
);

250 
	`m¶ìp
(1);

251 i‡(
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_RESET_CTRL_REG
, &
d©a
))

252  -
EIO
;

254 i‡(!(
d©a
 & 
RTL8366S_CHIP_CTRL_RESET_HW
))

256 } --
timeout
);

258 i‡(!
timeout
) {

259 
	`¥ötk
("Timeout waiting forÅhe switchÅoÑeset\n");

260  -
EIO
;

264 
	}
}

266 
	$πl8366s_ªad_phy_ªg
(
πl8366_smi
 *
smi
,

267 
u32
 
phy_no
, u32 
∑ge
, u32 
addr
, u32 *
d©a
)

269 
u32
 
ªg
;

270 
ªt
;

272 i‡(
phy_no
 > 
RTL8366S_PHY_NO_MAX
)

273  -
EINVAL
;

275 i‡(
∑ge
 > 
RTL8366S_PHY_PAGE_MAX
)

276  -
EINVAL
;

278 i‡(
addr
 > 
RTL8366S_PHY_ADDR_MAX
)

279  -
EINVAL
;

281 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366S_PHY_ACCESS_CTRL_REG
,

282 
RTL8366S_PHY_CTRL_READ
);

283 i‡(
ªt
)

284  
ªt
;

286 
ªg
 = 0x8000 | (1 << (
phy_no
 + 
RTL8366S_PHY_NO_OFFSET
)) |

287 ((
∑ge
 << 
RTL8366S_PHY_PAGE_OFFSET
Ë& 
RTL8366S_PHY_PAGE_MASK
) |

288 (
addr
 & 
RTL8366S_PHY_REG_MASK
);

290 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
ªg
, 0);

291 i‡(
ªt
)

292  
ªt
;

294 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_PHY_ACCESS_DATA_REG
, 
d©a
);

295 i‡(
ªt
)

296  
ªt
;

299 
	}
}

301 
	$πl8366s_wrôe_phy_ªg
(
πl8366_smi
 *
smi
,

302 
u32
 
phy_no
, u32 
∑ge
, u32 
addr
, u32 
d©a
)

304 
u32
 
ªg
;

305 
ªt
;

307 i‡(
phy_no
 > 
RTL8366S_PHY_NO_MAX
)

308  -
EINVAL
;

310 i‡(
∑ge
 > 
RTL8366S_PHY_PAGE_MAX
)

311  -
EINVAL
;

313 i‡(
addr
 > 
RTL8366S_PHY_ADDR_MAX
)

314  -
EINVAL
;

316 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366S_PHY_ACCESS_CTRL_REG
,

317 
RTL8366S_PHY_CTRL_WRITE
);

318 i‡(
ªt
)

319  
ªt
;

321 
ªg
 = 0x8000 | (1 << (
phy_no
 + 
RTL8366S_PHY_NO_OFFSET
)) |

322 ((
∑ge
 << 
RTL8366S_PHY_PAGE_OFFSET
Ë& 
RTL8366S_PHY_PAGE_MASK
) |

323 (
addr
 & 
RTL8366S_PHY_REG_MASK
);

325 
ªt
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
ªg
, 
d©a
);

326 i‡(
ªt
)

327  
ªt
;

330 
	}
}

332 
	$πl8366s_£t_gªí_p‹t
(
πl8366_smi
 *
smi
, 
p‹t
, 
íabÀ
)

334 
îr
;

335 
u32
 
phyD©a
;

337 i‡(
p‹t
 >
RTL8366S_NUM_PORTS
)

338  -
EINVAL
;

340 
îr
 = 
	`πl8366s_ªad_phy_ªg
(
smi
, 
p‹t
, 0, 
RTL8366S_PHY_POWER_SAVING_CTRL_REG
, &
phyD©a
);

341 i‡(
îr
)

342  
îr
;

344 i‡(
íabÀ
)

345 
phyD©a
 |
RTL8366S_PHY_POWER_SAVING_MASK
;

347 
phyD©a
 &~
RTL8366S_PHY_POWER_SAVING_MASK
;

349 
îr
 = 
	`πl8366s_wrôe_phy_ªg
(
smi
, 
p‹t
, 0, 
RTL8366S_PHY_POWER_SAVING_CTRL_REG
, 
phyD©a
);

350 i‡(
îr
)

351  
îr
;

354 
	}
}

356 
	$πl8366s_£t_gªí
(
πl8366_smi
 *
smi
, 
íabÀ
)

358 
îr
;

359 
i
;

360 
u32
 
d©a
 = 0;

362 i‡(!
íabÀ
) {

363 
i
 = 0; i <
RTL8366S_PHY_NO_MAX
; i++) {

364 
	`πl8366s_£t_gªí_p‹t
(
smi
, 
i
, 0);

368 i‡(
íabÀ
)

369 
d©a
 = (
RTL8366S_GREEN_ETHERNET_TX_BIT
 | 
RTL8366S_GREEN_ETHERNET_RX_BIT
);

371 
	`REG_RMW
(
smi
, 
RTL8366S_GREEN_ETHERNET_CTRL_REG
, 
RTL8366S_GREEN_ETHERNET_CTRL_MASK
, 
d©a
);

374 
	}
}

376 
	$πl8366s_£tup
(
πl8366_smi
 *
smi
)

378 
πl8366_∂©f‹m_d©a
 *
pd©a
;

379 
îr
;

380 
i
;

381 #ifde‡
CONFIG_OF


382 
devi˚_node
 *
≈
;

383 
num_öôvÆs
;

384 c⁄° 
__be32
 *
∑ddr
;

387 
pd©a
 = 
smi
->
∑ª¡
->
∂©f‹m_d©a
;

388 i‡(
pd©a
 &&Öd©a->
num_öôvÆs
 &&Öd©a->
öôvÆs
) {

389 
	`dev_öfo
(
smi
->
∑ª¡
, "applying initvals\n");

390 
i
 = 0; i < 
pd©a
->
num_öôvÆs
; i++)

391 
	`REG_WR
(
smi
, 
pd©a
->
öôvÆs
[
i
].
ªg
,

392 
pd©a
->
öôvÆs
[
i
].
vÆ
);

395 #ifde‡
CONFIG_OF


396 
≈
 = 
smi
->
∑ª¡
->
of_node
;

398 
∑ddr
 = 
	`of_gë_¥›îty
(
≈
, "ªÆãk,öôvÆs", &
num_öôvÆs
);

399 i‡(
∑ddr
) {

400 
	`dev_öfo
(
smi
->
∑ª¡
, "applying initvals from DTS\n");

402 i‡(
num_öôvÆs
 < (2 * (*
∑ddr
)))

403  -
EINVAL
;

405 
num_öôvÆs
 /(*
∑ddr
);

407 
i
 = 0; i < 
num_öôvÆs
 - 1; i += 2) {

408 
u32
 
ªg
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
);

409 
u32
 
vÆ
 = 
	`be32_to_˝up
(
∑ddr
 + 
i
 + 1);

411 
	`REG_WR
(
smi
, 
ªg
, 
vÆ
);

415 i‡(
	`of_¥›îty_ªad_boﬁ
(
≈
, "realtek,green-ethernet-features")) {

416 
	`dev_öfo
(
smi
->
∑ª¡
, "activating Green Ethernet features\n");

418 
îr
 = 
	`πl8366s_£t_gªí
(
smi
, 1);

419 i‡(
îr
)

420  
îr
;

422 
i
 = 0; i <
RTL8366S_PHY_NO_MAX
; i++) {

423 
îr
 = 
	`πl8366s_£t_gªí_p‹t
(
smi
, 
i
, 1);

424 i‡(
îr
)

425  
îr
;

431 
	`REG_RMW
(
smi
, 
RTL8366S_SGCR
, 
RTL8366S_SGCR_MAX_LENGTH_MASK
,

432 
RTL8366S_SGCR_MAX_LENGTH_1536
);

435 
	`REG_WR
(
smi
, 
RTL8366S_SSCR0
, 0);

438 
	`REG_WR
(
smi
, 
RTL8366S_SSCR1
, 0);

444 
	`REG_WR
(
smi
, 
RTL8366S_VLAN_MEMBERINGRESS_REG
, 
RTL8366S_PORT_ALL
);

447 
	`REG_RMW
(
smi
, 
RTL8366S_SSCR2
, 
RTL8366S_SSCR2_DROP_UNKNOWN_DA
, 0);

450 
	}
}

452 
	$πl8366_gë_mib_cou¡î
(
πl8366_smi
 *
smi
, 
cou¡î
,

453 
p‹t
, *
vÆ
)

455 
i
;

456 
îr
;

457 
u32
 
addr
, 
d©a
;

458 
u64
 
mibvÆue
;

460 i‡(
p‹t
 > 
RTL8366S_NUM_PORTS
 || 
cou¡î
 >
RTL8366S_MIB_COUNT
)

461  -
EINVAL
;

463 
πl8366s_mib_cou¡îs
[
cou¡î
].
ba£
) {

465 
addr
 = 
RTL8366S_MIB_COUNTER_BASE
 +

466 
RTL8366S_MIB_COUNTER_PORT_OFFSET
 * 
p‹t
;

470 
addr
 = 
RTL8366S_MIB_COUNTER_BASE2
 +

471 
RTL8366S_MIB_COUNTER_PORT_OFFSET2
 * 
p‹t
;

475  -
EINVAL
;

478 
addr
 +
πl8366s_mib_cou¡îs
[
cou¡î
].
off£t
;

484 
d©a
 = 0;

485 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
addr
, 
d©a
);

486 i‡(
îr
)

487  
îr
;

490 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_MIB_CTRL_REG
, &
d©a
);

491 i‡(
îr
)

492  
îr
;

494 i‡(
d©a
 & 
RTL8366S_MIB_CTRL_BUSY_MASK
)

495  -
EBUSY
;

497 i‡(
d©a
 & 
RTL8366S_MIB_CTRL_RESET_MASK
)

498  -
EIO
;

500 
mibvÆue
 = 0;

501 
i
 = 
πl8366s_mib_cou¡îs
[
cou¡î
].
Àngth
; i > 0; i--) {

502 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
addr
 + (
i
 - 1), &
d©a
);

503 i‡(
îr
)

504  
îr
;

506 
mibvÆue
 = (mibvÆuê<< 16Ë| (
d©a
 & 0xFFFF);

509 *
vÆ
 = 
mibvÆue
;

511 
	}
}

513 
	$πl8366s_gë_vœn_4k
(
πl8366_smi
 *
smi
, 
u32
 
vid
,

514 
πl8366_vœn_4k
 *
vœn4k
)

516 
u32
 
d©a
[2];

517 
îr
;

518 
i
;

520 
	`mem£t
(
vœn4k
, '\0', (
πl8366_vœn_4k
));

522 i‡(
vid
 >
RTL8366S_NUM_VIDS
)

523  -
EINVAL
;

526 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366S_VLAN_TABLE_WRITE_BASE
,

527 
vid
 & 
RTL8366S_VLAN_VID_MASK
);

528 i‡(
îr
)

529  
îr
;

532 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366S_TABLE_ACCESS_CTRL_REG
,

533 
RTL8366S_TABLE_VLAN_READ_CTRL
);

534 i‡(
îr
)

535  
îr
;

537 
i
 = 0; i < 2; i++) {

538 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
,

539 
RTL8366S_VLAN_TABLE_READ_BASE
 + 
i
,

540 &
d©a
[
i
]);

541 i‡(
îr
)

542  
îr
;

545 
vœn4k
->
vid
 = vid;

546 
vœn4k
->
u¡ag
 = (
d©a
[1] >> 
RTL8366S_VLAN_UNTAG_SHIFT
) &

547 
RTL8366S_VLAN_UNTAG_MASK
;

548 
vœn4k
->
membî
 = 
d©a
[1] & 
RTL8366S_VLAN_MEMBER_MASK
;

549 
vœn4k
->
fid
 = (
d©a
[1] >> 
RTL8366S_VLAN_FID_SHIFT
) &

550 
RTL8366S_VLAN_FID_MASK
;

553 
	}
}

555 
	$πl8366s_£t_vœn_4k
(
πl8366_smi
 *
smi
,

556 c⁄° 
πl8366_vœn_4k
 *
vœn4k
)

558 
u32
 
d©a
[2];

559 
îr
;

560 
i
;

562 i‡(
vœn4k
->
vid
 >
RTL8366S_NUM_VIDS
 ||

563 
vœn4k
->
membî
 > 
RTL8366S_VLAN_MEMBER_MASK
 ||

564 
vœn4k
->
u¡ag
 > 
RTL8366S_VLAN_UNTAG_MASK
 ||

565 
vœn4k
->
fid
 > 
RTL8366S_FIDMAX
)

566  -
EINVAL
;

568 
d©a
[0] = 
vœn4k
->
vid
 & 
RTL8366S_VLAN_VID_MASK
;

569 
d©a
[1] = (
vœn4k
->
membî
 & 
RTL8366S_VLAN_MEMBER_MASK
) |

570 ((
vœn4k
->
u¡ag
 & 
RTL8366S_VLAN_UNTAG_MASK
) <<

571 
RTL8366S_VLAN_UNTAG_SHIFT
) |

572 ((
vœn4k
->
fid
 & 
RTL8366S_VLAN_FID_MASK
) <<

573 
RTL8366S_VLAN_FID_SHIFT
);

575 
i
 = 0; i < 2; i++) {

576 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
,

577 
RTL8366S_VLAN_TABLE_WRITE_BASE
 + 
i
,

578 
d©a
[
i
]);

579 i‡(
îr
)

580  
îr
;

584 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8366S_TABLE_ACCESS_CTRL_REG
,

585 
RTL8366S_TABLE_VLAN_WRITE_CTRL
);

587  
îr
;

588 
	}
}

590 
	$πl8366s_gë_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

591 
πl8366_vœn_mc
 *
vœnmc
)

593 
u32
 
d©a
[2];

594 
îr
;

595 
i
;

597 
	`mem£t
(
vœnmc
, '\0', (
πl8366_vœn_mc
));

599 i‡(
ödex
 >
RTL8366S_NUM_VLANS
)

600  -
EINVAL
;

602 
i
 = 0; i < 2; i++) {

603 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
,

604 
	`RTL8366S_VLAN_MC_BASE
(
ödex
Ë+ 
i
,

605 &
d©a
[
i
]);

606 i‡(
îr
)

607  
îr
;

610 
vœnmc
->
vid
 = 
d©a
[0] & 
RTL8366S_VLAN_VID_MASK
;

611 
vœnmc
->
¥i‹ôy
 = (
d©a
[0] >> 
RTL8366S_VLAN_PRIORITY_SHIFT
) &

612 
RTL8366S_VLAN_PRIORITY_MASK
;

613 
vœnmc
->
u¡ag
 = (
d©a
[1] >> 
RTL8366S_VLAN_UNTAG_SHIFT
) &

614 
RTL8366S_VLAN_UNTAG_MASK
;

615 
vœnmc
->
membî
 = 
d©a
[1] & 
RTL8366S_VLAN_MEMBER_MASK
;

616 
vœnmc
->
fid
 = (
d©a
[1] >> 
RTL8366S_VLAN_FID_SHIFT
) &

617 
RTL8366S_VLAN_FID_MASK
;

620 
	}
}

622 
	$πl8366s_£t_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

623 c⁄° 
πl8366_vœn_mc
 *
vœnmc
)

625 
u32
 
d©a
[2];

626 
îr
;

627 
i
;

629 i‡(
ödex
 >
RTL8366S_NUM_VLANS
 ||

630 
vœnmc
->
vid
 >
RTL8366S_NUM_VIDS
 ||

631 
vœnmc
->
¥i‹ôy
 > 
RTL8366S_PRIORITYMAX
 ||

632 
vœnmc
->
membî
 > 
RTL8366S_VLAN_MEMBER_MASK
 ||

633 
vœnmc
->
u¡ag
 > 
RTL8366S_VLAN_UNTAG_MASK
 ||

634 
vœnmc
->
fid
 > 
RTL8366S_FIDMAX
)

635  -
EINVAL
;

637 
d©a
[0] = (
vœnmc
->
vid
 & 
RTL8366S_VLAN_VID_MASK
) |

638 ((
vœnmc
->
¥i‹ôy
 & 
RTL8366S_VLAN_PRIORITY_MASK
) <<

639 
RTL8366S_VLAN_PRIORITY_SHIFT
);

640 
d©a
[1] = (
vœnmc
->
membî
 & 
RTL8366S_VLAN_MEMBER_MASK
) |

641 ((
vœnmc
->
u¡ag
 & 
RTL8366S_VLAN_UNTAG_MASK
) <<

642 
RTL8366S_VLAN_UNTAG_SHIFT
) |

643 ((
vœnmc
->
fid
 & 
RTL8366S_VLAN_FID_MASK
) <<

644 
RTL8366S_VLAN_FID_SHIFT
);

646 
i
 = 0; i < 2; i++) {

647 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
smi
,

648 
	`RTL8366S_VLAN_MC_BASE
(
ödex
Ë+ 
i
,

649 
d©a
[
i
]);

650 i‡(
îr
)

651  
îr
;

655 
	}
}

657 
	$πl8366s_gë_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, *
vÆ
)

659 
u32
 
d©a
;

660 
îr
;

662 i‡(
p‹t
 >
RTL8366S_NUM_PORTS
)

663  -
EINVAL
;

665 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8366S_PORT_VLAN_CTRL_REG
(
p‹t
),

666 &
d©a
);

667 i‡(
îr
)

668  
îr
;

670 *
vÆ
 = (
d©a
 >> 
	`RTL8366S_PORT_VLAN_CTRL_SHIFT
(
p‹t
)) &

671 
RTL8366S_PORT_VLAN_CTRL_MASK
;

674 
	}
}

676 
	$πl8366s_£t_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, 
ödex
)

678 i‡(
p‹t
 >
RTL8366S_NUM_PORTS
 || 
ödex
 >
RTL8366S_NUM_VLANS
)

679  -
EINVAL
;

681  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8366S_PORT_VLAN_CTRL_REG
(
p‹t
),

682 
RTL8366S_PORT_VLAN_CTRL_MASK
 <<

683 
	`RTL8366S_PORT_VLAN_CTRL_SHIFT
(
p‹t
),

684 (
ödex
 & 
RTL8366S_PORT_VLAN_CTRL_MASK
) <<

685 
	`RTL8366S_PORT_VLAN_CTRL_SHIFT
(
p‹t
));

686 
	}
}

688 
	$πl8366s_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
)

690  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_SGCR
, 
RTL8366S_SGCR_EN_VLAN
,

691 (
íabÀ
Ë? 
RTL8366S_SGCR_EN_VLAN
 : 0);

692 
	}
}

694 
	$πl8366s_íabÀ_vœn4k
(
πl8366_smi
 *
smi
, 
íabÀ
)

696  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_VLAN_TB_CTRL_REG
,

697 1, (
íabÀ
) ? 1 : 0);

698 
	}
}

700 
	$πl8366s_is_vœn_vÆid
(
πl8366_smi
 *
smi
, 
vœn
)

702 
max
 = 
RTL8366S_NUM_VLANS
;

704 i‡(
smi
->
vœn4k_íabÀd
)

705 
max
 = 
RTL8366S_NUM_VIDS
 - 1;

707 i‡(
vœn
 =0 || vœ¿>
max
)

711 
	}
}

713 
	$πl8366s_íabÀ_p‹t
(
πl8366_smi
 *
smi
, 
p‹t
, 
íabÀ
)

715  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_PECR
, (1 << 
p‹t
),

716 (
íabÀ
Ë? 0 : (1 << 
p‹t
));

717 
	}
}

719 
	$πl8366s_sw_ª£t_mibs
(
swôch_dev
 *
dev
,

720 c⁄° 
swôch_©å
 *
©å
,

721 
swôch_vÆ
 *
vÆ
)

723 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

725  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_MIB_CTRL_REG
, 0, (1 << 2));

726 
	}
}

728 
	$πl8366s_sw_gë_blökøã
(
swôch_dev
 *
dev
,

729 c⁄° 
swôch_©å
 *
©å
,

730 
swôch_vÆ
 *
vÆ
)

732 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

733 
u32
 
d©a
;

735 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_LED_BLINKRATE_REG
, &
d©a
);

737 
vÆ
->
vÆue
.
i
 = (
d©a
 & (
RTL8366S_LED_BLINKRATE_MASK
));

740 
	}
}

742 
	$πl8366s_sw_£t_blökøã
(
swôch_dev
 *
dev
,

743 c⁄° 
swôch_©å
 *
©å
,

744 
swôch_vÆ
 *
vÆ
)

746 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

748 i‡(
vÆ
->
vÆue
.
i
 >= 6)

749  -
EINVAL
;

751  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_LED_BLINKRATE_REG
,

752 
RTL8366S_LED_BLINKRATE_MASK
,

753 
vÆ
->
vÆue
.
i
);

754 
	}
}

756 
	$πl8366s_sw_gë_max_Àngth
(
swôch_dev
 *
dev
,

757 c⁄° 
swôch_©å
 *
©å
,

758 
swôch_vÆ
 *
vÆ
)

760 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

761 
u32
 
d©a
;

763 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_SGCR
, &
d©a
);

765 
vÆ
->
vÆue
.
i
 = ((
d©a
 & (
RTL8366S_SGCR_MAX_LENGTH_MASK
)) >> 4);

768 
	}
}

770 
	$πl8366s_sw_£t_max_Àngth
(
swôch_dev
 *
dev
,

771 c⁄° 
swôch_©å
 *
©å
,

772 
swôch_vÆ
 *
vÆ
)

774 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

775 
Àngth_code
;

777 
vÆ
->
vÆue
.
i
) {

779 
Àngth_code
 = 
RTL8366S_SGCR_MAX_LENGTH_1522
;

782 
Àngth_code
 = 
RTL8366S_SGCR_MAX_LENGTH_1536
;

785 
Àngth_code
 = 
RTL8366S_SGCR_MAX_LENGTH_1552
;

788 
Àngth_code
 = 
RTL8366S_SGCR_MAX_LENGTH_16000
;

791  -
EINVAL
;

794  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_SGCR
,

795 
RTL8366S_SGCR_MAX_LENGTH_MASK
,

796 
Àngth_code
);

797 
	}
}

799 
	$πl8366s_sw_gë_À¨nög_íabÀ
(
swôch_dev
 *
dev
,

800 c⁄° 
swôch_©å
 *
©å
,

801 
swôch_vÆ
 *
vÆ
)

803 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

804 
u32
 
d©a
;

806 
	`πl8366_smi_ªad_ªg
(
smi
,
RTL8366S_SSCR0
, &
d©a
);

807 
vÆ
->
vÆue
.
i
 = !
d©a
;

810 
	}
}

813 
	$πl8366s_sw_£t_À¨nög_íabÀ
(
swôch_dev
 *
dev
,

814 c⁄° 
swôch_©å
 *
©å
,

815 
swôch_vÆ
 *
vÆ
)

817 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

818 
u32
 
p‹tmask
 = 0;

819 
îr
 = 0;

821 i‡(!
vÆ
->
vÆue
.
i
)

822 
p‹tmask
 = 
RTL8366S_PORT_ALL
;

825 
	`REG_WR
(
smi
, 
RTL8366S_SSCR0
, 
p‹tmask
);

828 
	`REG_WR
(
smi
, 
RTL8366S_SSCR1
, 
p‹tmask
);

831 
	}
}

833 
	$πl8366s_sw_gë_gªí
(
swôch_dev
 *
dev
,

834 c⁄° 
swôch_©å
 *
©å
,

835 
swôch_vÆ
 *
vÆ
)

837 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

838 
u32
 
d©a
;

839 
îr
;

841 
îr
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_GREEN_ETHERNET_CTRL_REG
, &
d©a
);

842 i‡(
îr
)

843  
îr
;

845 
vÆ
->
vÆue
.
i
 = ((
d©a
 & (
RTL8366S_GREEN_ETHERNET_TX_BIT
 | 
RTL8366S_GREEN_ETHERNET_RX_BIT
)) != 0) ? 1 : 0;

848 
	}
}

850 
	$πl8366s_sw_£t_gªí
(
swôch_dev
 *
dev
,

851 c⁄° 
swôch_©å
 *
©å
,

852 
swôch_vÆ
 *
vÆ
)

854 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

856  
	`πl8366s_£t_gªí
(
smi
, 
vÆ
->
vÆue
.
i
);

857 
	}
}

859 
	$πl8366s_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
,

860 
p‹t
,

861 
swôch_p‹t_lök
 *
lök
)

863 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

864 
u32
 
d©a
 = 0;

865 
u32
 
•ìd
;

867 i‡(
p‹t
 >
RTL8366S_NUM_PORTS
)

868  -
EINVAL
;

870 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_PORT_LINK_STATUS_BASE
 + (
p‹t
 / 2),

871 &
d©a
);

873 i‡(
p‹t
 % 2)

874 
d©a
 = data >> 8;

876 
lök
->lök = !!(
d©a
 & 
RTL8366S_PORT_STATUS_LINK_MASK
);

877 i‡(!
lök
->link)

880 
lök
->
du∂ex
 = !!(
d©a
 & 
RTL8366S_PORT_STATUS_DUPLEX_MASK
);

881 
lök
->
rx_Êow
 = !!(
d©a
 & 
RTL8366S_PORT_STATUS_RXPAUSE_MASK
);

882 
lök
->
tx_Êow
 = !!(
d©a
 & 
RTL8366S_PORT_STATUS_TXPAUSE_MASK
);

883 
lök
->
™eg
 = !!(
d©a
 & 
RTL8366S_PORT_STATUS_AN_MASK
);

885 
•ìd
 = (
d©a
 & 
RTL8366S_PORT_STATUS_SPEED_MASK
);

886 
•ìd
) {

888 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

891 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

894 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

897 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

902 
	}
}

904 
	$πl8366s_sw_£t_p‹t_Àd
(
swôch_dev
 *
dev
,

905 c⁄° 
swôch_©å
 *
©å
,

906 
swôch_vÆ
 *
vÆ
)

908 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

909 
u32
 
d©a
;

910 
u32
 
mask
;

911 
u32
 
ªg
;

913 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366S_NUM_PORTS
 ||

914 (1 << 
vÆ
->
p‹t_vœn
Ë=
RTL8366S_PORT_UNKNOWN
)

915  -
EINVAL
;

917 i‡(
vÆ
->
p‹t_vœn
 =
RTL8366S_PORT_NUM_CPU
) {

918 
ªg
 = 
RTL8366S_LED_BLINKRATE_REG
;

919 
mask
 = 0xF << 4;

920 
d©a
 = 
vÆ
->
vÆue
.
i
 << 4;

922 
ªg
 = 
RTL8366S_LED_CTRL_REG
;

923 
mask
 = 0xF << (
vÆ
->
p‹t_vœn
 * 4),

924 
d©a
 = 
vÆ
->
vÆue
.
i
 << (vÆ->
p‹t_vœn
 * 4);

927  
	`πl8366_smi_rmwr
(
smi
, 
ªg
, 
mask
, 
d©a
);

928 
	}
}

930 
	$πl8366s_sw_gë_p‹t_Àd
(
swôch_dev
 *
dev
,

931 c⁄° 
swôch_©å
 *
©å
,

932 
swôch_vÆ
 *
vÆ
)

934 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

935 
u32
 
d©a
 = 0;

937 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366S_NUM_LEDGROUPS
)

938  -
EINVAL
;

940 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_LED_CTRL_REG
, &
d©a
);

941 
vÆ
->
vÆue
.
i
 = (
d©a
 >> (vÆ->
p‹t_vœn
 * 4)) & 0x000F;

944 
	}
}

946 
	$πl8366s_sw_gë_gªí_p‹t
(
swôch_dev
 *
dev
,

947 c⁄° 
swôch_©å
 *
©å
,

948 
swôch_vÆ
 *
vÆ
)

950 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

951 
îr
;

952 
u32
 
phyD©a
;

954 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366S_NUM_PORTS
)

955  -
EINVAL
;

957 
îr
 = 
	`πl8366s_ªad_phy_ªg
(
smi
, 
vÆ
->
p‹t_vœn
, 0, 
RTL8366S_PHY_POWER_SAVING_CTRL_REG
, &
phyD©a
);

958 i‡(
îr
)

959  
îr
;

961 
vÆ
->
vÆue
.
i
 = ((
phyD©a
 & 
RTL8366S_PHY_POWER_SAVING_MASK
) != 0) ? 1 : 0;

964 
	}
}

966 
	$πl8366s_sw_£t_gªí_p‹t
(
swôch_dev
 *
dev
,

967 c⁄° 
swôch_©å
 *
©å
,

968 
swôch_vÆ
 *
vÆ
)

970 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

971  
	`πl8366s_£t_gªí_p‹t
(
smi
, 
vÆ
->
p‹t_vœn
, vÆ->
vÆue
.
i
);

972 
	}
}

974 
	$πl8366s_sw_ª£t_p‹t_mibs
(
swôch_dev
 *
dev
,

975 c⁄° 
swôch_©å
 *
©å
,

976 
swôch_vÆ
 *
vÆ
)

978 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

980 i‡(
vÆ
->
p‹t_vœn
 >
RTL8366S_NUM_PORTS
)

981  -
EINVAL
;

984  
	`πl8366_smi_rmwr
(
smi
, 
RTL8366S_MIB_CTRL_REG
,

985 0, (1 << (
vÆ
->
p‹t_vœn
 + 3)));

986 
	}
}

988 
	$πl8366s_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

989 
swôch_p‹t_°©s
 *
°©s
)

991  (
	`πl8366_sw_gë_p‹t_°©s
(
dev
, 
p‹t
, 
°©s
,

992 
RTL8366S_MIB_TXB_ID
, 
RTL8366S_MIB_RXB_ID
));

993 
	}
}

995 
swôch_©å
 
	gπl8366s_globÆs
[] = {

997 .
ty≥
 = 
SWITCH_TYPE_INT
,

998 .
	g«me
 = "enable_learning",

999 .
	gdes¸ùti⁄
 = "EnableÜearning,Énableáging",

1000 .
	g£t
 = 
πl8366s_sw_£t_À¨nög_íabÀ
,

1001 .
	ggë
 = 
πl8366s_sw_gë_À¨nög_íabÀ
,

1002 .
	gmax
 = 1,

1004 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1005 .
	g«me
 = "enable_vlan",

1006 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1007 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1008 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1009 .
	gmax
 = 1,

1010 .
	gofs
 = 1

1012 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1013 .
	g«me
 = "enable_vlan4k",

1014 .
	gdes¸ùti⁄
 = "Enable VLAN 4K mode",

1015 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1016 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1017 .
	gmax
 = 1,

1018 .
	gofs
 = 2

1020 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1021 .
	g«me
 = "reset_mibs",

1022 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1023 .
	g£t
 = 
πl8366s_sw_ª£t_mibs
,

1025 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1026 .
	g«me
 = "blinkrate",

1027 .
	gdes¸ùti⁄
 = "Get/Set LED blinkingÑate (0 = 43ms, 1 = 84ms,"

1029 .
	g£t
 = 
πl8366s_sw_£t_blökøã
,

1030 .
	ggë
 = 
πl8366s_sw_gë_blökøã
,

1031 .
	gmax
 = 5

1033 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1034 .
	g«me
 = "max_length",

1035 .
	gdes¸ùti⁄
 = "Get/SetÅhe maximumÜength of validÖackets"

1037 .
	g£t
 = 
πl8366s_sw_£t_max_Àngth
,

1038 .
	ggë
 = 
πl8366s_sw_gë_max_Àngth
,

1039 .
	gmax
 = 3,

1041 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1042 .
	g«me
 = "green_mode",

1043 .
	gdes¸ùti⁄
 = "Get/SetÅheÑouter green feature",

1044 .
	g£t
 = 
πl8366s_sw_£t_gªí
,

1045 .
	ggë
 = 
πl8366s_sw_gë_gªí
,

1046 .
	gmax
 = 1,

1050 
swôch_©å
 
	gπl8366s_p‹t
[] = {

1052 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1053 .
	g«me
 = "reset_mib",

1054 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1055 .
	g£t
 = 
πl8366s_sw_ª£t_p‹t_mibs
,

1057 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1058 .
	g«me
 = "mib",

1059 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

1060 .
	gmax
 = 33,

1061 .
	g£t
 = 
NULL
,

1062 .
	ggë
 = 
πl8366_sw_gë_p‹t_mib
,

1064 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1065 .
	g«me
 = "led",

1066 .
	gdes¸ùti⁄
 = "Get/SetÖort group (0 - 3)Üed mode (0 - 15)",

1067 .
	gmax
 = 15,

1068 .
	g£t
 = 
πl8366s_sw_£t_p‹t_Àd
,

1069 .
	ggë
 = 
πl8366s_sw_gë_p‹t_Àd
,

1071 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1072 .
	g«me
 = "green_port",

1073 .
	gdes¸ùti⁄
 = "Get/SetÖort green feature (0 - 1)",

1074 .
	gmax
 = 1,

1075 .
	g£t
 = 
πl8366s_sw_£t_gªí_p‹t
,

1076 .
	ggë
 = 
πl8366s_sw_gë_gªí_p‹t
,

1080 
swôch_©å
 
	gπl8366s_vœn
[] = {

1082 .
ty≥
 = 
SWITCH_TYPE_STRING
,

1083 .
	g«me
 = "info",

1084 .
	gdes¸ùti⁄
 = "Get vlan information",

1085 .
	gmax
 = 1,

1086 .
	g£t
 = 
NULL
,

1087 .
	ggë
 = 
πl8366_sw_gë_vœn_öfo
,

1089 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1090 .
	g«me
 = "fid",

1091 .
	gdes¸ùti⁄
 = "Get/Set vlan FID",

1092 .
	gmax
 = 
RTL8366S_FIDMAX
,

1093 .
	g£t
 = 
πl8366_sw_£t_vœn_fid
,

1094 .
	ggë
 = 
πl8366_sw_gë_vœn_fid
,

1098 c⁄° 
swôch_dev_›s
 
	gπl8366_›s
 = {

1099 .
©å_globÆ
 = {

1100 .
©å
 = 
πl8366s_globÆs
,

1101 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366s_globÆs
),

1103 .
	g©å_p‹t
 = {

1104 .
©å
 = 
πl8366s_p‹t
,

1105 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366s_p‹t
),

1107 .
	g©å_vœn
 = {

1108 .
©å
 = 
πl8366s_vœn
,

1109 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8366s_vœn
),

1112 .
	ggë_vœn_p‹ts
 = 
πl8366_sw_gë_vœn_p‹ts
,

1113 .
	g£t_vœn_p‹ts
 = 
πl8366_sw_£t_vœn_p‹ts
,

1114 .
	ggë_p‹t_pvid
 = 
πl8366_sw_gë_p‹t_pvid
,

1115 .
	g£t_p‹t_pvid
 = 
πl8366_sw_£t_p‹t_pvid
,

1116 .
	gª£t_swôch
 = 
πl8366_sw_ª£t_swôch
,

1117 .
	ggë_p‹t_lök
 = 
πl8366s_sw_gë_p‹t_lök
,

1118 .
	ggë_p‹t_°©s
 = 
πl8366s_sw_gë_p‹t_°©s
,

1121 
	$πl8366s_swôch_öô
(
πl8366_smi
 *
smi
)

1123 
swôch_dev
 *
dev
 = &
smi
->
sw_dev
;

1124 
îr
;

1126 
dev
->
«me
 = "RTL8366S";

1127 
dev
->
˝u_p‹t
 = 
RTL8366S_PORT_NUM_CPU
;

1128 
dev
->
p‹ts
 = 
RTL8366S_NUM_PORTS
;

1129 
dev
->
vœns
 = 
RTL8366S_NUM_VIDS
;

1130 
dev
->
›s
 = &
πl8366_›s
;

1131 
dev
->
Æüs
 = 
	`dev_«me
(
smi
->
∑ª¡
);

1133 
îr
 = 
	`ªgi°î_swôch
(
dev
, 
NULL
);

1134 i‡(
îr
)

1135 
	`dev_îr
(
smi
->
∑ª¡
, "switchÑegistration failed\n");

1137  
îr
;

1138 
	}
}

1140 
	$πl8366s_swôch_˛ónup
(
πl8366_smi
 *
smi
)

1142 
	`uƒegi°î_swôch
(&
smi
->
sw_dev
);

1143 
	}
}

1145 
	$πl8366s_mii_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

1147 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1148 
u32
 
vÆ
 = 0;

1149 
îr
;

1151 
îr
 = 
	`πl8366s_ªad_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, &
vÆ
);

1152 i‡(
îr
)

1155  
vÆ
;

1156 
	}
}

1158 
	$πl8366s_mii_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

1160 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1161 
u32
 
t
;

1162 
îr
;

1164 
îr
 = 
	`πl8366s_wrôe_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, 
vÆ
);

1166 (Ë
	`πl8366s_ªad_phy_ªg
(
smi
, 
addr
, 0, 
ªg
, &
t
);

1168  
îr
;

1169 
	}
}

1171 
	$πl8366s_dëe˘
(
πl8366_smi
 *
smi
)

1173 
u32
 
chù_id
 = 0;

1174 
u32
 
chù_vî
 = 0;

1175 
ªt
;

1177 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_CHIP_ID_REG
, &
chù_id
);

1178 i‡(
ªt
) {

1179 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chip id\n");

1180  
ªt
;

1183 
chù_id
) {

1184 
RTL8366S_CHIP_ID_8366
:

1187 
	`dev_îr
(
smi
->
∑ª¡
, "unknow¿chù id (%04x)\n", 
chù_id
);

1188  -
ENODEV
;

1191 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8366S_CHIP_VERSION_CTRL_REG
,

1192 &
chù_vî
);

1193 i‡(
ªt
) {

1194 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chip version\n");

1195  
ªt
;

1198 
	`dev_öfo
(
smi
->
∑ª¡
, "RTL%04x ver. %u chip found\n",

1199 
chù_id
, 
chù_vî
 & 
RTL8366S_CHIP_VERSION_MASK
);

1202 
	}
}

1204 
πl8366_smi_›s
 
	gπl8366s_smi_›s
 = {

1205 .
dëe˘
 = 
πl8366s_dëe˘
,

1206 .
	gª£t_chù
 = 
πl8366s_ª£t_chù
,

1207 .
	g£tup
 = 
πl8366s_£tup
,

1209 .
	gmii_ªad
 = 
πl8366s_mii_ªad
,

1210 .
	gmii_wrôe
 = 
πl8366s_mii_wrôe
,

1212 .
	ggë_vœn_mc
 = 
πl8366s_gë_vœn_mc
,

1213 .
	g£t_vœn_mc
 = 
πl8366s_£t_vœn_mc
,

1214 .
	ggë_vœn_4k
 = 
πl8366s_gë_vœn_4k
,

1215 .
	g£t_vœn_4k
 = 
πl8366s_£t_vœn_4k
,

1216 .
	ggë_mc_ödex
 = 
πl8366s_gë_mc_ödex
,

1217 .
	g£t_mc_ödex
 = 
πl8366s_£t_mc_ödex
,

1218 .
	ggë_mib_cou¡î
 = 
πl8366_gë_mib_cou¡î
,

1219 .
	gis_vœn_vÆid
 = 
πl8366s_is_vœn_vÆid
,

1220 .
	gíabÀ_vœn
 = 
πl8366s_íabÀ_vœn
,

1221 .
	gíabÀ_vœn4k
 = 
πl8366s_íabÀ_vœn4k
,

1222 .
	gíabÀ_p‹t
 = 
πl8366s_íabÀ_p‹t
,

1225 
	$πl8366s_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1227 
πl8366_smi_vîsi⁄_¥öãd
;

1228 
πl8366_smi
 *
smi
;

1229 
îr
;

1231 i‡(!
πl8366_smi_vîsi⁄_¥öãd
++)

1232 
	`¥ötk
(
KERN_NOTICE
 
RTL8366S_DRIVER_DESC


1233 " vîsi⁄ " 
RTL8366S_DRIVER_VER
"\n");

1235 
smi
 = 
	`πl8366_smi_¥obe
(
pdev
);

1236 i‡(
	`IS_ERR
(
smi
))

1237  
	`PTR_ERR
(
smi
);

1239 
smi
->
˛k_dñay
 = 10;

1240 
smi
->
cmd_ªad
 = 0xa9;

1241 
smi
->
cmd_wrôe
 = 0xa8;

1242 
smi
->
›s
 = &
πl8366s_smi_›s
;

1243 
smi
->
˝u_p‹t
 = 
RTL8366S_PORT_NUM_CPU
;

1244 
smi
->
num_p‹ts
 = 
RTL8366S_NUM_PORTS
;

1245 
smi
->
num_vœn_mc
 = 
RTL8366S_NUM_VLANS
;

1246 
smi
->
mib_cou¡îs
 = 
πl8366s_mib_cou¡îs
;

1247 
smi
->
num_mib_cou¡îs
 = 
	`ARRAY_SIZE
(
πl8366s_mib_cou¡îs
);

1249 
îr
 = 
	`πl8366_smi_öô
(
smi
);

1250 i‡(
îr
)

1251 
îr_‰ì_smi
;

1253 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
smi
);

1255 
îr
 = 
	`πl8366s_swôch_öô
(
smi
);

1256 i‡(
îr
)

1257 
îr_˛ór_drvd©a
;

1261 
îr_˛ór_drvd©a
:

1262 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1263 
	`πl8366_smi_˛ónup
(
smi
);

1264 
îr_‰ì_smi
:

1265 
	`k‰ì
(
smi
);

1266  
îr
;

1267 
	}
}

1269 
	$πl8366s_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1271 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1273 i‡(
smi
) {

1274 
	`πl8366s_swôch_˛ónup
(
smi
);

1275 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1276 
	`πl8366_smi_˛ónup
(
smi
);

1277 
	`k‰ì
(
smi
);

1281 
	}
}

1283 #ifde‡
CONFIG_OF


1284 c⁄° 
of_devi˚_id
 
	gπl8366s_m©ch
[] = {

1285 { .
com∑tibÀ
 = "realtek,rtl8366s" },

1288 
MODULE_DEVICE_TABLE
(
of
, 
πl8366s_m©ch
);

1291 
∂©f‹m_drivî
 
	gπl8366s_drivî
 = {

1292 .
drivî
 = {

1293 .
«me
 = 
RTL8366S_DRIVER_NAME
,

1294 .
	gow√r
 = 
THIS_MODULE
,

1295 #ifde‡
CONFIG_OF


1296 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
πl8366s_m©ch
),

1299 .
	g¥obe
 = 
πl8366s_¥obe
,

1300 .
	gªmove
 = 
πl8366s_ªmove
,

1303 
__öô
 
	$πl8366s_moduÀ_öô
()

1305  
	`∂©f‹m_drivî_ªgi°î
(&
πl8366s_drivî
);

1306 
	}
}

1307 
moduÀ_öô
(
πl8366s_moduÀ_öô
);

1309 
__exô
 
	$πl8366s_moduÀ_exô
()

1311 
	`∂©f‹m_drivî_uƒegi°î
(&
πl8366s_drivî
);

1312 
	}
}

1313 
moduÀ_exô
(
πl8366s_moduÀ_exô
);

1315 
MODULE_DESCRIPTION
(
RTL8366S_DRIVER_DESC
);

1316 
MODULE_VERSION
(
RTL8366S_DRIVER_VER
);

1317 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1318 
MODULE_AUTHOR
("Antti Sepp√§l√§ <a.seppala@gmail.com>");

1319 
MODULE_LICENSE
("GPL v2");

1320 
MODULE_ALIAS
("∂©f‹m:" 
RTL8366S_DRIVER_NAME
);

	@linux/generic/files/drivers/net/phy/rtl8367.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/devi˚.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_∂©f‹m.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/skbuff.h
>

19 
	~<löux/πl8367.h
>

21 
	~"πl8366_smi.h
"

23 
	#RTL8367_RESET_DELAY
 1000

	)

25 
	#RTL8367_PHY_ADDR_MAX
 8

	)

26 
	#RTL8367_PHY_REG_MAX
 31

	)

28 
	#RTL8367_VID_MASK
 0xffff

	)

29 
	#RTL8367_FID_MASK
 0xfff

	)

30 
	#RTL8367_UNTAG_MASK
 0xffff

	)

31 
	#RTL8367_MEMBER_MASK
 0xffff

	)

33 
	#RTL8367_PORT_CFG_REG
(
_p
Ë(0x000ê+ 0x20 * (_p))

	)

34 
	#RTL8367_PORT_CFG_EGRESS_MODE_SHIFT
 4

	)

35 
	#RTL8367_PORT_CFG_EGRESS_MODE_MASK
 0x3

	)

36 
	#RTL8367_PORT_CFG_EGRESS_MODE_ORIGINAL
 0

	)

37 
	#RTL8367_PORT_CFG_EGRESS_MODE_KEEP
 1

	)

38 
	#RTL8367_PORT_CFG_EGRESS_MODE_PRI
 2

	)

39 
	#RTL8367_PORT_CFG_EGRESS_MODE_REAL
 3

	)

41 
	#RTL8367_BYPASS_LINE_RATE_REG
 0x03f7

	)

43 
	#RTL8367_TA_CTRL_REG
 0x0500

	)

44 
	#RTL8367_TA_CTRL_STATUS
 
	`BIT
(12)

	)

45 
	#RTL8367_TA_CTRL_METHOD
 
	`BIT
(5)

	)

46 
	#RTL8367_TA_CTRL_CMD_SHIFT
 4

	)

47 
	#RTL8367_TA_CTRL_CMD_READ
 0

	)

48 
	#RTL8367_TA_CTRL_CMD_WRITE
 1

	)

49 
	#RTL8367_TA_CTRL_TABLE_SHIFT
 0

	)

50 
	#RTL8367_TA_CTRL_TABLE_ACLRULE
 1

	)

51 
	#RTL8367_TA_CTRL_TABLE_ACLACT
 2

	)

52 
	#RTL8367_TA_CTRL_TABLE_CVLAN
 3

	)

53 
	#RTL8367_TA_CTRL_TABLE_L2
 4

	)

54 
	#RTL8367_TA_CTRL_CVLAN_READ
 \

55 ((
RTL8367_TA_CTRL_CMD_READ
 << 
RTL8367_TA_CTRL_CMD_SHIFT
) | \

56 
RTL8367_TA_CTRL_TABLE_CVLAN
)

	)

57 
	#RTL8367_TA_CTRL_CVLAN_WRITE
 \

58 ((
RTL8367_TA_CTRL_CMD_WRITE
 << 
RTL8367_TA_CTRL_CMD_SHIFT
) | \

59 
RTL8367_TA_CTRL_TABLE_CVLAN
)

	)

61 
	#RTL8367_TA_ADDR_REG
 0x0501

	)

62 
	#RTL8367_TA_ADDR_MASK
 0x3fff

	)

64 
	#RTL8367_TA_DATA_REG
(
_x
Ë(0x0503 + (_x))

	)

65 
	#RTL8367_TA_VLAN_DATA_SIZE
 4

	)

66 
	#RTL8367_TA_VLAN_VID_MASK
 
RTL8367_VID_MASK


	)

67 
	#RTL8367_TA_VLAN_MEMBER_SHIFT
 0

	)

68 
	#RTL8367_TA_VLAN_MEMBER_MASK
 
RTL8367_MEMBER_MASK


	)

69 
	#RTL8367_TA_VLAN_FID_SHIFT
 0

	)

70 
	#RTL8367_TA_VLAN_FID_MASK
 
RTL8367_FID_MASK


	)

71 
	#RTL8367_TA_VLAN_UNTAG1_SHIFT
 14

	)

72 
	#RTL8367_TA_VLAN_UNTAG1_MASK
 0x3

	)

73 
	#RTL8367_TA_VLAN_UNTAG2_SHIFT
 0

	)

74 
	#RTL8367_TA_VLAN_UNTAG2_MASK
 0x3fff

	)

76 
	#RTL8367_VLAN_PVID_CTRL_REG
(
_p
Ë(0x0700 + (_pË/ 2)

	)

77 
	#RTL8367_VLAN_PVID_CTRL_MASK
 0x1f

	)

78 
	#RTL8367_VLAN_PVID_CTRL_SHIFT
(
_p
Ë(8 * ((_pË% 2))

	)

80 
	#RTL8367_VLAN_MC_BASE
(
_x
Ë(0x0728 + (_xË* 4)

	)

81 
	#RTL8367_VLAN_MC_DATA_SIZE
 4

	)

82 
	#RTL8367_VLAN_MC_MEMBER_SHIFT
 0

	)

83 
	#RTL8367_VLAN_MC_MEMBER_MASK
 
RTL8367_MEMBER_MASK


	)

84 
	#RTL8367_VLAN_MC_FID_SHIFT
 0

	)

85 
	#RTL8367_VLAN_MC_FID_MASK
 
RTL8367_FID_MASK


	)

86 
	#RTL8367_VLAN_MC_EVID_SHIFT
 0

	)

87 
	#RTL8367_VLAN_MC_EVID_MASK
 
RTL8367_VID_MASK


	)

89 
	#RTL8367_VLAN_CTRL_REG
 0x07a8

	)

90 
	#RTL8367_VLAN_CTRL_ENABLE
 
	`BIT
(0)

	)

92 
	#RTL8367_VLAN_INGRESS_REG
 0x07a9

	)

94 
	#RTL8367_PORT_ISOLATION_REG
(
_p
Ë(0x08a2 + (_p))

	)

96 
	#RTL8367_MIB_COUNTER_REG
(
_x
Ë(0x1000 + (_x))

	)

98 
	#RTL8367_MIB_ADDRESS_REG
 0x1004

	)

100 
	#RTL8367_MIB_CTRL_REG
(
_x
Ë(0x1005 + (_x))

	)

101 
	#RTL8367_MIB_CTRL_GLOBAL_RESET_MASK
 
	`BIT
(11)

	)

102 
	#RTL8367_MIB_CTRL_QM_RESET_MASK
 
	`BIT
(10)

	)

103 
	#RTL8367_MIB_CTRL_PORT_RESET_MASK
(
_p
Ë
	`BIT
(2 + (_p))

	)

104 
	#RTL8367_MIB_CTRL_RESET_MASK
 
	`BIT
(1)

	)

105 
	#RTL8367_MIB_CTRL_BUSY_MASK
 
	`BIT
(0)

	)

107 
	#RTL8367_MIB_COUNT
 36

	)

108 
	#RTL8367_MIB_COUNTER_PORT_OFFSET
 0x0050

	)

110 
	#RTL8367_SWC0_REG
 0x1200

	)

111 
	#RTL8367_SWC0_MAX_LENGTH_SHIFT
 13

	)

112 
	#RTL8367_SWC0_MAX_LENGTH
(
_x
Ë((_xË<< 13)

	)

113 
	#RTL8367_SWC0_MAX_LENGTH_MASK
 
	`RTL8367_SWC0_MAX_LENGTH
(0x3)

	)

114 
	#RTL8367_SWC0_MAX_LENGTH_1522
 
	`RTL8367_SWC0_MAX_LENGTH
(0)

	)

115 
	#RTL8367_SWC0_MAX_LENGTH_1536
 
	`RTL8367_SWC0_MAX_LENGTH
(1)

	)

116 
	#RTL8367_SWC0_MAX_LENGTH_1552
 
	`RTL8367_SWC0_MAX_LENGTH
(2)

	)

117 
	#RTL8367_SWC0_MAX_LENGTH_16000
 
	`RTL8367_SWC0_MAX_LENGTH
(3)

	)

119 
	#RTL8367_CHIP_NUMBER_REG
 0x1300

	)

121 
	#RTL8367_CHIP_VER_REG
 0x1301

	)

122 
	#RTL8367_CHIP_VER_RLVID_SHIFT
 12

	)

123 
	#RTL8367_CHIP_VER_RLVID_MASK
 0xf

	)

124 
	#RTL8367_CHIP_VER_MCID_SHIFT
 8

	)

125 
	#RTL8367_CHIP_VER_MCID_MASK
 0xf

	)

126 
	#RTL8367_CHIP_VER_BOID_SHIFT
 4

	)

127 
	#RTL8367_CHIP_VER_BOID_MASK
 0xf

	)

129 
	#RTL8367_CHIP_MODE_REG
 0x1302

	)

130 
	#RTL8367_CHIP_MODE_MASK
 0x7

	)

132 
	#RTL8367_CHIP_DEBUG0_REG
 0x1303

	)

133 
	#RTL8367_CHIP_DEBUG0_DUMMY0
(
_x
Ë
	`BIT
(8 + (_x))

	)

135 
	#RTL8367_CHIP_DEBUG1_REG
 0x1304

	)

137 
	#RTL8367_DIS_REG
 0x1305

	)

138 
	#RTL8367_DIS_SKIP_MII_RXER
(
_x
Ë
	`BIT
(12 + (_x))

	)

139 
	#RTL8367_DIS_RGMII_SHIFT
(
_x
Ë(4 * (_x))

	)

140 
	#RTL8367_DIS_RGMII_MASK
 0x7

	)

142 
	#RTL8367_EXT_RGMXF_REG
(
_x
Ë(0x1306 + (_x))

	)

143 
	#RTL8367_EXT_RGMXF_DUMMY0_SHIFT
 5

	)

144 
	#RTL8367_EXT_RGMXF_DUMMY0_MASK
 0x7ff

	)

145 
	#RTL8367_EXT_RGMXF_TXDELAY_SHIFT
 3

	)

146 
	#RTL8367_EXT_RGMXF_TXDELAY_MASK
 1

	)

147 
	#RTL8367_EXT_RGMXF_RXDELAY_MASK
 0x7

	)

149 
	#RTL8367_DI_FORCE_REG
(
_x
Ë(0x1310 + (_x))

	)

150 
	#RTL8367_DI_FORCE_MODE
 
	`BIT
(12)

	)

151 
	#RTL8367_DI_FORCE_NWAY
 
	`BIT
(7)

	)

152 
	#RTL8367_DI_FORCE_TXPAUSE
 
	`BIT
(6)

	)

153 
	#RTL8367_DI_FORCE_RXPAUSE
 
	`BIT
(5)

	)

154 
	#RTL8367_DI_FORCE_LINK
 
	`BIT
(4)

	)

155 
	#RTL8367_DI_FORCE_DUPLEX
 
	`BIT
(2)

	)

156 
	#RTL8367_DI_FORCE_SPEED_MASK
 3

	)

157 
	#RTL8367_DI_FORCE_SPEED_10
 0

	)

158 
	#RTL8367_DI_FORCE_SPEED_100
 1

	)

159 
	#RTL8367_DI_FORCE_SPEED_1000
 2

	)

161 
	#RTL8367_MAC_FORCE_REG
(
_x
Ë(0x1312 + (_x))

	)

163 
	#RTL8367_CHIP_RESET_REG
 0x1322

	)

164 
	#RTL8367_CHIP_RESET_SW
 
	`BIT
(1)

	)

165 
	#RTL8367_CHIP_RESET_HW
 
	`BIT
(0)

	)

167 
	#RTL8367_PORT_STATUS_REG
(
_p
Ë(0x1352 + (_p))

	)

168 
	#RTL8367_PORT_STATUS_NWAY
 
	`BIT
(7)

	)

169 
	#RTL8367_PORT_STATUS_TXPAUSE
 
	`BIT
(6)

	)

170 
	#RTL8367_PORT_STATUS_RXPAUSE
 
	`BIT
(5)

	)

171 
	#RTL8367_PORT_STATUS_LINK
 
	`BIT
(4)

	)

172 
	#RTL8367_PORT_STATUS_DUPLEX
 
	`BIT
(2)

	)

173 
	#RTL8367_PORT_STATUS_SPEED_MASK
 0x0003

	)

174 
	#RTL8367_PORT_STATUS_SPEED_10
 0

	)

175 
	#RTL8367_PORT_STATUS_SPEED_100
 1

	)

176 
	#RTL8367_PORT_STATUS_SPEED_1000
 2

	)

178 
	#RTL8367_RTL_NO_REG
 0x13c0

	)

179 
	#RTL8367_RTL_NO_8367R
 0x3670

	)

180 
	#RTL8367_RTL_NO_8367M
 0x3671

	)

182 
	#RTL8367_RTL_VER_REG
 0x13c1

	)

183 
	#RTL8367_RTL_VER_MASK
 0xf

	)

185 
	#RTL8367_RTL_MAGIC_ID_REG
 0x13c2

	)

186 
	#RTL8367_RTL_MAGIC_ID_VAL
 0x0249

	)

188 
	#RTL8367_LED_SYS_CONFIG_REG
 0x1b00

	)

189 
	#RTL8367_LED_MODE_REG
 0x1b02

	)

190 
	#RTL8367_LED_MODE_RATE_M
 0x7

	)

191 
	#RTL8367_LED_MODE_RATE_S
 1

	)

193 
	#RTL8367_LED_CONFIG_REG
 0x1b03

	)

194 
	#RTL8367_LED_CONFIG_DATA_S
 12

	)

195 
	#RTL8367_LED_CONFIG_DATA_M
 0x3

	)

196 
	#RTL8367_LED_CONFIG_SEL
 
	`BIT
(14)

	)

197 
	#RTL8367_LED_CONFIG_LED_CFG_M
 0xf

	)

199 
	#RTL8367_PARA_LED_IO_EN1_REG
 0x1b24

	)

200 
	#RTL8367_PARA_LED_IO_EN2_REG
 0x1b25

	)

201 
	#RTL8367_PARA_LED_IO_EN_PMASK
 0xff

	)

203 
	#RTL8367_IA_CTRL_REG
 0x1f00

	)

204 
	#RTL8367_IA_CTRL_RW
(
_x
Ë((_xË<< 1)

	)

205 
	#RTL8367_IA_CTRL_RW_READ
 
	`RTL8367_IA_CTRL_RW
(0)

	)

206 
	#RTL8367_IA_CTRL_RW_WRITE
 
	`RTL8367_IA_CTRL_RW
(1)

	)

207 
	#RTL8367_IA_CTRL_CMD_MASK
 
	`BIT
(0)

	)

209 
	#RTL8367_IA_STATUS_REG
 0x1f01

	)

210 
	#RTL8367_IA_STATUS_PHY_BUSY
 
	`BIT
(2)

	)

211 
	#RTL8367_IA_STATUS_SDS_BUSY
 
	`BIT
(1)

	)

212 
	#RTL8367_IA_STATUS_MDX_BUSY
 
	`BIT
(0)

	)

214 
	#RTL8367_IA_ADDRESS_REG
 0x1f02

	)

216 
	#RTL8367_IA_WRITE_DATA_REG
 0x1f03

	)

217 
	#RTL8367_IA_READ_DATA_REG
 0x1f04

	)

219 
	#RTL8367_INTERNAL_PHY_REG
(
_a
, 
_r
Ë(0x2000 + 32 * (_aË+ (_r))

	)

221 
	#RTL8367_CPU_PORT_NUM
 9

	)

222 
	#RTL8367_NUM_PORTS
 10

	)

223 
	#RTL8367_NUM_VLANS
 32

	)

224 
	#RTL8367_NUM_LEDGROUPS
 4

	)

225 
	#RTL8367_NUM_VIDS
 4096

	)

226 
	#RTL8367_PRIORITYMAX
 7

	)

227 
	#RTL8367_FIDMAX
 7

	)

229 
	#RTL8367_PORT_0
 
	`BIT
(0)

	)

230 
	#RTL8367_PORT_1
 
	`BIT
(1)

	)

231 
	#RTL8367_PORT_2
 
	`BIT
(2)

	)

232 
	#RTL8367_PORT_3
 
	`BIT
(3)

	)

233 
	#RTL8367_PORT_4
 
	`BIT
(4)

	)

234 
	#RTL8367_PORT_5
 
	`BIT
(5)

	)

235 
	#RTL8367_PORT_6
 
	`BIT
(6)

	)

236 
	#RTL8367_PORT_7
 
	`BIT
(7)

	)

237 
	#RTL8367_PORT_E1
 
	`BIT
(8Ë

	)

238 
	#RTL8367_PORT_E0
 
	`BIT
(9Ë

	)

240 
	#RTL8367_PORTS_ALL
 \

241 (
RTL8367_PORT_0
 | 
RTL8367_PORT_1
 | 
RTL8367_PORT_2
 | \

242 
RTL8367_PORT_3
 | 
RTL8367_PORT_4
 | 
RTL8367_PORT_5
 | \

243 
RTL8367_PORT_6
 | 
RTL8367_PORT_7
 | 
RTL8367_PORT_E1
 | \

244 
RTL8367_PORT_E0
)

	)

246 
	#RTL8367_PORTS_ALL_BUT_CPU
 \

247 (
RTL8367_PORT_0
 | 
RTL8367_PORT_1
 | 
RTL8367_PORT_2
 | \

248 
RTL8367_PORT_3
 | 
RTL8367_PORT_4
 | 
RTL8367_PORT_5
 | \

249 
RTL8367_PORT_6
 | 
RTL8367_PORT_7
 | 
RTL8367_PORT_E1
)

	)

251 
	sπl8367_öôvÆ
 {

252 
u16
 
	mªg
;

253 
u16
 
	mvÆ
;

256 
	#RTL8367_MIB_RXB_ID
 0

	)

257 
	#RTL8367_MIB_TXB_ID
 20

	)

259 
πl8366_mib_cou¡î
 
	gπl8367_mib_cou¡îs
[] = {

301 
	#REG_RD
(
_smi
, 
_ªg
, 
_vÆ
) \

303 
îr
 = 
	`πl8366_smi_ªad_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

304 i‡(
îr
) \

305  
îr
; \

306 } 0)

	)

308 
	#REG_WR
(
_smi
, 
_ªg
, 
_vÆ
) \

310 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

311 i‡(
îr
) \

312  
îr
; \

313 } 0)

	)

315 
	#REG_RMW
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
) \

317 
îr
 = 
	`πl8366_smi_rmwr
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
); \

318 i‡(
îr
) \

319  
îr
; \

320 } 0)

	)

322 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_0_0
[] = {

365 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_0_1
[] = {

408 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_1_0
[] = {

467 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_1_1
[] = {

519 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_2_0
[] = {

573 c⁄° 
πl8367_öôvÆ
 
	gπl8367_öôvÆs_2_1
[] = {

620 
	$πl8367_wrôe_öôvÆs
(
πl8366_smi
 *
smi
,

621 c⁄° 
πl8367_öôvÆ
 *
öôvÆs
,

622 
cou¡
)

624 
îr
;

625 
i
;

627 
i
 = 0; i < 
cou¡
; i++)

628 
	`REG_WR
(
smi
, 
öôvÆs
[
i
].
ªg
, inôvÆs[i].
vÆ
);

631 
	}
}

633 
	$πl8367_ªad_phy_ªg
(
πl8366_smi
 *
smi
,

634 
u32
 
phy_addr
, u32 
phy_ªg
, u32 *
vÆ
)

636 
timeout
;

637 
u32
 
d©a
;

638 
îr
;

640 i‡(
phy_addr
 > 
RTL8367_PHY_ADDR_MAX
)

641  -
EINVAL
;

643 i‡(
phy_ªg
 > 
RTL8367_PHY_REG_MAX
)

644  -
EINVAL
;

646 
	`REG_RD
(
smi
, 
RTL8367_IA_STATUS_REG
, &
d©a
);

647 i‡(
d©a
 & 
RTL8367_IA_STATUS_PHY_BUSY
)

648  -
ETIMEDOUT
;

651 
	`REG_WR
(
smi
, 
RTL8367_IA_ADDRESS_REG
,

652 
	`RTL8367_INTERNAL_PHY_REG
(
phy_addr
, 
phy_ªg
));

655 
	`REG_WR
(
smi
, 
RTL8367_IA_CTRL_REG
,

656 
RTL8367_IA_CTRL_CMD_MASK
 | 
RTL8367_IA_CTRL_RW_READ
);

658 
timeout
 = 5;

660 
	`REG_RD
(
smi
, 
RTL8367_IA_STATUS_REG
, &
d©a
);

661 i‡((
d©a
 & 
RTL8367_IA_STATUS_PHY_BUSY
) == 0)

664 i‡(
timeout
--) {

665 
	`dev_îr
(
smi
->
∑ª¡
, "phyÑeadÅimed out\n");

666  -
ETIMEDOUT
;

669 
	`udñay
(1);

673 
	`REG_RD
(
smi
, 
RTL8367_IA_READ_DATA_REG
, 
vÆ
);

675 
	`dev_dbg
(
smi
->
∑ª¡
, "phy_read:áddr:%02x,Ñeg:%02x, val:%04x\n",

676 
phy_addr
, 
phy_ªg
, *
vÆ
);

678 
	}
}

680 
	$πl8367_wrôe_phy_ªg
(
πl8366_smi
 *
smi
,

681 
u32
 
phy_addr
, u32 
phy_ªg
, u32 
vÆ
)

683 
timeout
;

684 
u32
 
d©a
;

685 
îr
;

687 
	`dev_dbg
(
smi
->
∑ª¡
, "phy_write:áddr:%02x,Ñeg:%02x, val:%04x\n",

688 
phy_addr
, 
phy_ªg
, 
vÆ
);

690 i‡(
phy_addr
 > 
RTL8367_PHY_ADDR_MAX
)

691  -
EINVAL
;

693 i‡(
phy_ªg
 > 
RTL8367_PHY_REG_MAX
)

694  -
EINVAL
;

696 
	`REG_RD
(
smi
, 
RTL8367_IA_STATUS_REG
, &
d©a
);

697 i‡(
d©a
 & 
RTL8367_IA_STATUS_PHY_BUSY
)

698  -
ETIMEDOUT
;

701 
	`REG_WR
(
smi
, 
RTL8367_IA_WRITE_DATA_REG
, 
vÆ
);

704 
	`REG_WR
(
smi
, 
RTL8367_IA_ADDRESS_REG
,

705 
	`RTL8367_INTERNAL_PHY_REG
(
phy_addr
, 
phy_ªg
));

708 
	`REG_WR
(
smi
, 
RTL8367_IA_CTRL_REG
,

709 
RTL8367_IA_CTRL_CMD_MASK
 | 
RTL8367_IA_CTRL_RW_WRITE
);

711 
timeout
 = 5;

713 
	`REG_RD
(
smi
, 
RTL8367_IA_STATUS_REG
, &
d©a
);

714 i‡((
d©a
 & 
RTL8367_IA_STATUS_PHY_BUSY
) == 0)

717 i‡(
timeout
--) {

718 
	`dev_îr
(
smi
->
∑ª¡
, "phy writeÅimed out\n");

719  -
ETIMEDOUT
;

722 
	`udñay
(1);

726 
	}
}

728 
	$πl8367_öô_ªgs0
(
πl8366_smi
 *
smi
, 
mode
)

730 c⁄° 
πl8367_öôvÆ
 *
öôvÆs
;

731 
cou¡
;

732 
îr
;

734 
mode
) {

736 
öôvÆs
 = 
πl8367_öôvÆs_0_0
;

737 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_0_0
);

742 
öôvÆs
 = 
πl8367_öôvÆs_0_1
;

743 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_0_1
);

747 
	`dev_îr
(
smi
->
∑ª¡
, "%s: unknow modê%u\n", 
__func__
, 
mode
);

748  -
ENODEV
;

751 
îr
 = 
	`πl8367_wrôe_öôvÆs
(
smi
, 
öôvÆs
, 
cou¡
);

752 i‡(
îr
)

753  
îr
;

758 
	}
}

760 
	$πl8367_öô_ªgs1
(
πl8366_smi
 *
smi
, 
mode
)

762 c⁄° 
πl8367_öôvÆ
 *
öôvÆs
;

763 
cou¡
;

765 
mode
) {

767 
öôvÆs
 = 
πl8367_öôvÆs_1_0
;

768 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_1_0
);

773 
öôvÆs
 = 
πl8367_öôvÆs_1_1
;

774 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_1_1
);

778 
	`dev_îr
(
smi
->
∑ª¡
, "%s: unknow modê%u\n", 
__func__
, 
mode
);

779  -
ENODEV
;

782  
	`πl8367_wrôe_öôvÆs
(
smi
, 
öôvÆs
, 
cou¡
);

783 
	}
}

785 
	$πl8367_öô_ªgs2
(
πl8366_smi
 *
smi
, 
mode
)

787 c⁄° 
πl8367_öôvÆ
 *
öôvÆs
;

788 
cou¡
;

790 
mode
) {

792 
öôvÆs
 = 
πl8367_öôvÆs_2_0
;

793 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_2_0
);

798 
öôvÆs
 = 
πl8367_öôvÆs_2_1
;

799 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367_öôvÆs_2_1
);

803 
	`dev_îr
(
smi
->
∑ª¡
, "%s: unknow modê%u\n", 
__func__
, 
mode
);

804  -
ENODEV
;

807  
	`πl8367_wrôe_öôvÆs
(
smi
, 
öôvÆs
, 
cou¡
);

808 
	}
}

810 
	$πl8367_öô_ªgs
(
πl8366_smi
 *
smi
)

812 
u32
 
d©a
;

813 
u32
 
ævid
;

814 
u32
 
mode
;

815 
îr
;

817 
	`REG_WR
(
smi
, 
RTL8367_RTL_MAGIC_ID_REG
, 
RTL8367_RTL_MAGIC_ID_VAL
);

819 
	`REG_RD
(
smi
, 
RTL8367_CHIP_VER_REG
, &
d©a
);

820 
ævid
 = (
d©a
 >> 
RTL8367_CHIP_VER_RLVID_SHIFT
) &

821 
RTL8367_CHIP_VER_RLVID_MASK
;

823 
	`REG_RD
(
smi
, 
RTL8367_CHIP_MODE_REG
, &
d©a
);

824 
mode
 = 
d©a
 & 
RTL8367_CHIP_MODE_MASK
;

826 
ævid
) {

828 
îr
 = 
	`πl8367_öô_ªgs0
(
smi
, 
mode
);

832 
îr
 = 
	`πl8367_wrôe_phy_ªg
(
smi
, 0, 31, 5);

833 i‡(
îr
)

836 
îr
 = 
	`πl8367_wrôe_phy_ªg
(
smi
, 0, 5, 0x3ffe);

837 i‡(
îr
)

840 
îr
 = 
	`πl8367_ªad_phy_ªg
(
smi
, 0, 6, &
d©a
);

841 i‡(
îr
)

844 i‡(
d©a
 == 0x94eb) {

845 
îr
 = 
	`πl8367_öô_ªgs1
(
smi
, 
mode
);

846 } i‡(
d©a
 == 0x2104) {

847 
îr
 = 
	`πl8367_öô_ªgs2
(
smi
, 
mode
);

849 
	`dev_îr
(
smi
->
∑ª¡
, "unknowÖhy d©®%04x\n", 
d©a
);

850  -
ENODEV
;

856 
	`dev_îr
(
smi
->
∑ª¡
, "unknowÑlvid %u\n", 
ævid
);

857 
îr
 = -
ENODEV
;

861  
îr
;

862 
	}
}

864 
	$πl8367_ª£t_chù
(
πl8366_smi
 *
smi
)

866 
timeout
 = 10;

867 
îr
;

868 
u32
 
d©a
;

870 
	`REG_WR
(
smi
, 
RTL8367_CHIP_RESET_REG
, 
RTL8367_CHIP_RESET_HW
);

871 
	`m¶ìp
(
RTL8367_RESET_DELAY
);

874 
	`REG_RD
(
smi
, 
RTL8367_CHIP_RESET_REG
, &
d©a
);

875 i‡(!(
d©a
 & 
RTL8367_CHIP_RESET_HW
))

878 
	`m¶ìp
(1);

879 } --
timeout
);

881 i‡(!
timeout
) {

882 
	`dev_îr
(
smi
->
∑ª¡
, "chipÑesetÅimed out\n");

883  -
ETIMEDOUT
;

887 
	}
}

889 
	$πl8367_extif_£t_mode
(
πl8366_smi
 *
smi
, 
id
,

890 
πl8367_extif_mode
 
mode
)

892 
îr
;

895 
mode
) {

896 
RTL8367_EXTIF_MODE_RGMII
:

897 
RTL8367_EXTIF_MODE_RGMII_33V
:

898 
	`REG_WR
(
smi
, 
RTL8367_CHIP_DEBUG0_REG
, 0x0367);

899 
	`REG_WR
(
smi
, 
RTL8367_CHIP_DEBUG1_REG
, 0x7777);

902 
RTL8367_EXTIF_MODE_TMII_MAC
:

903 
RTL8367_EXTIF_MODE_TMII_PHY
:

904 
	`REG_RMW
(
smi
, 
RTL8367_BYPASS_LINE_RATE_REG
,

905 
	`BIT
((
id
 + 1) % 2), BIT((id + 1) % 2));

908 
RTL8367_EXTIF_MODE_GMII
:

909 
	`REG_RMW
(
smi
, 
RTL8367_CHIP_DEBUG0_REG
,

910 
	`RTL8367_CHIP_DEBUG0_DUMMY0
(
id
),

911 
	`RTL8367_CHIP_DEBUG0_DUMMY0
(
id
));

912 
	`REG_RMW
(
smi
, 
	`RTL8367_EXT_RGMXF_REG
(
id
), 
	`BIT
(6), BIT(6));

915 
RTL8367_EXTIF_MODE_MII_MAC
:

916 
RTL8367_EXTIF_MODE_MII_PHY
:

917 
RTL8367_EXTIF_MODE_DISABLED
:

918 
	`REG_RMW
(
smi
, 
RTL8367_BYPASS_LINE_RATE_REG
,

919 
	`BIT
((
id
 + 1) % 2), 0);

920 
	`REG_RMW
(
smi
, 
	`RTL8367_EXT_RGMXF_REG
(
id
), 
	`BIT
(6), 0);

924 
	`dev_îr
(
smi
->
∑ª¡
,

925 "övÆid modêf‹Éxã∫Æ i¡îÁ˚ %d\n", 
id
);

926  -
EINVAL
;

929 
	`REG_RMW
(
smi
, 
RTL8367_DIS_REG
,

930 
RTL8367_DIS_RGMII_MASK
 << 
	`RTL8367_DIS_RGMII_SHIFT
(
id
),

931 
mode
 << 
	`RTL8367_DIS_RGMII_SHIFT
(
id
));

934 
	}
}

936 
	$πl8367_extif_£t_f‹˚
(
πl8366_smi
 *
smi
, 
id
,

937 
πl8367_p‹t_abûôy
 *
∑
)

939 
u32
 
mask
;

940 
u32
 
vÆ
;

941 
îr
;

943 
mask
 = (
RTL8367_DI_FORCE_MODE
 |

944 
RTL8367_DI_FORCE_NWAY
 |

945 
RTL8367_DI_FORCE_TXPAUSE
 |

946 
RTL8367_DI_FORCE_RXPAUSE
 |

947 
RTL8367_DI_FORCE_LINK
 |

948 
RTL8367_DI_FORCE_DUPLEX
 |

949 
RTL8367_DI_FORCE_SPEED_MASK
);

951 
vÆ
 = 
∑
->
•ìd
;

952 
vÆ
 |
∑
->
f‹˚_mode
 ? 
RTL8367_DI_FORCE_MODE
 : 0;

953 
vÆ
 |
∑
->
nway
 ? 
RTL8367_DI_FORCE_NWAY
 : 0;

954 
vÆ
 |
∑
->
tx∑u£
 ? 
RTL8367_DI_FORCE_TXPAUSE
 : 0;

955 
vÆ
 |
∑
->
rx∑u£
 ? 
RTL8367_DI_FORCE_RXPAUSE
 : 0;

956 
vÆ
 |
∑
->
lök
 ? 
RTL8367_DI_FORCE_LINK
 : 0;

957 
vÆ
 |
∑
->
du∂ex
 ? 
RTL8367_DI_FORCE_DUPLEX
 : 0;

959 
	`REG_RMW
(
smi
, 
	`RTL8367_DI_FORCE_REG
(
id
), 
mask
, 
vÆ
);

962 
	}
}

964 
	$πl8367_extif_£t_rgmii_dñay
(
πl8366_smi
 *
smi
, 
id
,

965 
txdñay
, 
rxdñay
)

967 
u32
 
mask
;

968 
u32
 
vÆ
;

969 
îr
;

971 
mask
 = (
RTL8367_EXT_RGMXF_RXDELAY_MASK
 |

972 (
RTL8367_EXT_RGMXF_TXDELAY_MASK
 <<

973 
RTL8367_EXT_RGMXF_TXDELAY_SHIFT
));

975 
vÆ
 = 
rxdñay
;

976 
vÆ
 |
txdñay
 << 
RTL8367_EXT_RGMXF_TXDELAY_SHIFT
;

978 
	`REG_RMW
(
smi
, 
	`RTL8367_EXT_RGMXF_REG
(
id
), 
mask
, 
vÆ
);

981 
	}
}

983 
	$πl8367_extif_öô
(
πl8366_smi
 *
smi
, 
id
,

984 
πl8367_extif_c⁄fig
 *
cfg
)

986 
πl8367_extif_mode
 
mode
;

987 
îr
;

989 
mode
 = (
cfg
Ë? cfg->modê: 
RTL8367_EXTIF_MODE_DISABLED
;

991 
îr
 = 
	`πl8367_extif_£t_mode
(
smi
, 
id
, 
mode
);

992 i‡(
îr
)

993  
îr
;

995 i‡(
mode
 !
RTL8367_EXTIF_MODE_DISABLED
) {

996 
îr
 = 
	`πl8367_extif_£t_f‹˚
(
smi
, 
id
, &
cfg
->
abûôy
);

997 i‡(
îr
)

998  
îr
;

1000 
îr
 = 
	`πl8367_extif_£t_rgmii_dñay
(
smi
, 
id
, 
cfg
->
txdñay
,

1001 
cfg
->
rxdñay
);

1002 i‡(
îr
)

1003  
îr
;

1007 
	}
}

1009 
	$πl8367_Àd_group_£t_p‹ts
(
πl8366_smi
 *
smi
,

1010 
group
, 
u16
 
p‹t_mask
)

1012 
u32
 
ªg
;

1013 
u32
 
s
;

1014 
îr
;

1016 
p‹t_mask
 &
RTL8367_PARA_LED_IO_EN_PMASK
;

1017 
s
 = (
group
 % 2) * 8;

1018 
ªg
 = 
RTL8367_PARA_LED_IO_EN1_REG
 + (
group
 / 2);

1020 
	`REG_RMW
(
smi
, 
ªg
, (
RTL8367_PARA_LED_IO_EN_PMASK
 << 
s
), 
p‹t_mask
 << s);

1023 
	}
}

1025 
	$πl8367_Àd_group_£t_mode
(
πl8366_smi
 *
smi
,

1026 
mode
)

1028 
u16
 
mask
;

1029 
u16
 
£t
;

1030 
îr
;

1032 
mode
 &
RTL8367_LED_CONFIG_DATA_M
;

1034 
mask
 = (
RTL8367_LED_CONFIG_DATA_M
 << 
RTL8367_LED_CONFIG_DATA_S
) |

1035 
RTL8367_LED_CONFIG_SEL
;

1036 
£t
 = (
mode
 << 
RTL8367_LED_CONFIG_DATA_S
Ë| 
RTL8367_LED_CONFIG_SEL
;

1038 
	`REG_RMW
(
smi
, 
RTL8367_LED_CONFIG_REG
, 
mask
, 
£t
);

1041 
	}
}

1043 
	$πl8367_Àd_group_£t_c⁄fig
(
πl8366_smi
 *
smi
,

1044 
Àd
, 
cfg
)

1046 
u16
 
mask
;

1047 
u16
 
£t
;

1048 
îr
;

1050 
mask
 = (
RTL8367_LED_CONFIG_LED_CFG_M
 << (
Àd
 * 4)) |

1051 
RTL8367_LED_CONFIG_SEL
;

1052 
£t
 = (
cfg
 & 
RTL8367_LED_CONFIG_LED_CFG_M
Ë<< (
Àd
 * 4);

1054 
	`REG_RMW
(
smi
, 
RTL8367_LED_CONFIG_REG
, 
mask
, 
£t
);

1056 
	}
}

1058 
	$πl8367_Àd_›_£À˘_∑øŒñ
(
πl8366_smi
 *
smi
)

1060 
îr
;

1062 
	`REG_WR
(
smi
, 
RTL8367_LED_SYS_CONFIG_REG
, 0x1472);

1064 
	}
}

1066 
	$πl8367_Àd_blökøã_£t
(
πl8366_smi
 *
smi
, 
øã
)

1068 
u16
 
mask
;

1069 
u16
 
£t
;

1070 
îr
;

1072 
mask
 = 
RTL8367_LED_MODE_RATE_M
 << 
RTL8367_LED_MODE_RATE_S
;

1073 
£t
 = (
øã
 & 
RTL8367_LED_MODE_RATE_M
Ë<< 
RTL8367_LED_MODE_RATE_S
;

1074 
	`REG_RMW
(
smi
, 
RTL8367_LED_MODE_REG
, 
mask
, 
£t
);

1077 
	}
}

1079 #ifde‡
CONFIG_OF


1080 
	$πl8367_extif_öô_of
(
πl8366_smi
 *
smi
, 
id
,

1081 c⁄° *
«me
)

1083 
πl8367_extif_c⁄fig
 *
cfg
;

1084 c⁄° 
__be32
 *
¥›
;

1085 
size
;

1086 
îr
;

1088 
¥›
 = 
	`of_gë_¥›îty
(
smi
->
∑ª¡
->
of_node
, 
«me
, &
size
);

1089 i‡(!
¥›
)

1090  
	`πl8367_extif_öô
(
smi
, 
id
, 
NULL
);

1092 i‡(
size
 !(9 * (*
¥›
))) {

1093 
	`dev_îr
(
smi
->
∑ª¡
, "%†¥›îty i†övÆid\n", 
«me
);

1094  -
EINVAL
;

1097 
cfg
 = 
	`kzÆloc
((
πl8367_extif_c⁄fig
), 
GFP_KERNEL
);

1098 i‡(!
cfg
)

1099  -
ENOMEM
;

1101 
cfg
->
txdñay
 = 
	`be32_to_˝up
(
¥›
++);

1102 
cfg
->
rxdñay
 = 
	`be32_to_˝up
(
¥›
++);

1103 
cfg
->
mode
 = 
	`be32_to_˝up
(
¥›
++);

1104 
cfg
->
abûôy
.
f‹˚_mode
 = 
	`be32_to_˝up
(
¥›
++);

1105 
cfg
->
abûôy
.
tx∑u£
 = 
	`be32_to_˝up
(
¥›
++);

1106 
cfg
->
abûôy
.
rx∑u£
 = 
	`be32_to_˝up
(
¥›
++);

1107 
cfg
->
abûôy
.
lök
 = 
	`be32_to_˝up
(
¥›
++);

1108 
cfg
->
abûôy
.
du∂ex
 = 
	`be32_to_˝up
(
¥›
++);

1109 
cfg
->
abûôy
.
•ìd
 = 
	`be32_to_˝up
(
¥›
++);

1111 
îr
 = 
	`πl8367_extif_öô
(
smi
, 
id
, 
cfg
);

1112 
	`k‰ì
(
cfg
);

1114  
îr
;

1115 
	}
}

1117 
	$πl8367_extif_öô_of
(
πl8366_smi
 *
smi
, 
id
,

1118 c⁄° *
«me
)

1120  -
EINVAL
;

1121 
	}
}

1124 
	$πl8367_£tup
(
πl8366_smi
 *
smi
)

1126 
πl8367_∂©f‹m_d©a
 *
pd©a
;

1127 
îr
;

1128 
i
;

1130 
pd©a
 = 
smi
->
∑ª¡
->
∂©f‹m_d©a
;

1132 
îr
 = 
	`πl8367_öô_ªgs
(
smi
);

1133 i‡(
îr
)

1134  
îr
;

1137 i‡(
smi
->
∑ª¡
->
of_node
) {

1138 
îr
 = 
	`πl8367_extif_öô_of
(
smi
, 0, "realtek,extif0");

1139 i‡(
îr
)

1140  
îr
;

1142 
îr
 = 
	`πl8367_extif_öô_of
(
smi
, 1, "realtek,extif1");

1143 i‡(
îr
)

1144  
îr
;

1146 
îr
 = 
	`πl8367_extif_öô
(
smi
, 0, 
pd©a
->
extif0_cfg
);

1147 i‡(
îr
)

1148  
îr
;

1150 
îr
 = 
	`πl8367_extif_öô
(
smi
, 1, 
pd©a
->
extif1_cfg
);

1151 i‡(
îr
)

1152  
îr
;

1156 
	`REG_RMW
(
smi
, 
RTL8367_SWC0_REG
, 
RTL8367_SWC0_MAX_LENGTH_MASK
,

1157 
RTL8367_SWC0_MAX_LENGTH_1536
);

1163 
	`REG_WR
(
smi
, 
RTL8367_VLAN_INGRESS_REG
, 
RTL8367_PORTS_ALL
);

1168 
i
 = 0; i < 
RTL8367_NUM_PORTS
; i++)

1169 
	`REG_RMW
(
smi
,

1170 
	`RTL8367_PORT_CFG_REG
(
i
),

1171 
RTL8367_PORT_CFG_EGRESS_MODE_MASK
 <<

1172 
RTL8367_PORT_CFG_EGRESS_MODE_SHIFT
,

1173 
RTL8367_PORT_CFG_EGRESS_MODE_ORIGINAL
 <<

1174 
RTL8367_PORT_CFG_EGRESS_MODE_SHIFT
);

1177 
îr
 = 
	`πl8367_Àd_group_£t_p‹ts
(
smi
, 0, 
RTL8367_PORTS_ALL
);

1178 i‡(
îr
)

1179  
îr
;

1181 
îr
 = 
	`πl8367_Àd_group_£t_mode
(
smi
, 0);

1182 i‡(
îr
)

1183  
îr
;

1185 
îr
 = 
	`πl8367_Àd_›_£À˘_∑øŒñ
(
smi
);

1186 i‡(
îr
)

1187  
îr
;

1189 
îr
 = 
	`πl8367_Àd_blökøã_£t
(
smi
, 1);

1190 i‡(
îr
)

1191  
îr
;

1193 
îr
 = 
	`πl8367_Àd_group_£t_c⁄fig
(
smi
, 0, 2);

1194 i‡(
îr
)

1195  
îr
;

1198 
	}
}

1200 
	$πl8367_gë_mib_cou¡î
(
πl8366_smi
 *
smi
, 
cou¡î
,

1201 
p‹t
, *
vÆ
)

1203 
πl8366_mib_cou¡î
 *
mib
;

1204 
off£t
;

1205 
i
;

1206 
îr
;

1207 
u32
 
addr
, 
d©a
;

1208 
u64
 
mibvÆue
;

1210 i‡(
p‹t
 > 
RTL8367_NUM_PORTS
 || 
cou¡î
 >
RTL8367_MIB_COUNT
)

1211  -
EINVAL
;

1213 
mib
 = &
πl8367_mib_cou¡îs
[
cou¡î
];

1214 
addr
 = 
RTL8367_MIB_COUNTER_PORT_OFFSET
 * 
p‹t
 + 
mib
->
off£t
;

1220 
	`REG_WR
(
smi
, 
RTL8367_MIB_ADDRESS_REG
, 
addr
 >> 2);

1223 
	`REG_RD
(
smi
, 
	`RTL8367_MIB_CTRL_REG
(0), &
d©a
);

1225 i‡(
d©a
 & 
RTL8367_MIB_CTRL_BUSY_MASK
)

1226  -
EBUSY
;

1228 i‡(
d©a
 & 
RTL8367_MIB_CTRL_RESET_MASK
)

1229  -
EIO
;

1231 i‡(
mib
->
Àngth
 == 4)

1232 
off£t
 = 3;

1234 
off£t
 = (
mib
->offset + 1) % 4;

1236 
mibvÆue
 = 0;

1237 
i
 = 0; i < 
mib
->
Àngth
; i++) {

1238 
	`REG_RD
(
smi
, 
	`RTL8367_MIB_COUNTER_REG
(
off£t
 - 
i
), &
d©a
);

1239 
mibvÆue
 = (mibvÆuê<< 16Ë| (
d©a
 & 0xFFFF);

1242 *
vÆ
 = 
mibvÆue
;

1244 
	}
}

1246 
	$πl8367_gë_vœn_4k
(
πl8366_smi
 *
smi
, 
u32
 
vid
,

1247 
πl8366_vœn_4k
 *
vœn4k
)

1249 
u32
 
d©a
[
RTL8367_TA_VLAN_DATA_SIZE
];

1250 
îr
;

1251 
i
;

1253 
	`mem£t
(
vœn4k
, '\0', (
πl8366_vœn_4k
));

1255 i‡(
vid
 >
RTL8367_NUM_VIDS
)

1256  -
EINVAL
;

1259 
	`REG_WR
(
smi
, 
RTL8367_TA_ADDR_REG
, 
vid
);

1262 
	`REG_WR
(
smi
, 
RTL8367_TA_CTRL_REG
, 
RTL8367_TA_CTRL_CVLAN_READ
);

1264 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1265 
	`REG_RD
(
smi
, 
	`RTL8367_TA_DATA_REG
(
i
), &
d©a
[i]);

1267 
vœn4k
->
vid
 = vid;

1268 
vœn4k
->
membî
 = (
d©a
[0] >> 
RTL8367_TA_VLAN_MEMBER_SHIFT
) &

1269 
RTL8367_TA_VLAN_MEMBER_MASK
;

1270 
vœn4k
->
fid
 = (
d©a
[1] >> 
RTL8367_TA_VLAN_FID_SHIFT
) &

1271 
RTL8367_TA_VLAN_FID_MASK
;

1272 
vœn4k
->
u¡ag
 = (
d©a
[2] >> 
RTL8367_TA_VLAN_UNTAG1_SHIFT
) &

1273 
RTL8367_TA_VLAN_UNTAG1_MASK
;

1274 
vœn4k
->
u¡ag
 |((
d©a
[3] >> 
RTL8367_TA_VLAN_UNTAG2_SHIFT
) &

1275 
RTL8367_TA_VLAN_UNTAG2_MASK
) << 2;

1278 
	}
}

1280 
	$πl8367_£t_vœn_4k
(
πl8366_smi
 *
smi
,

1281 c⁄° 
πl8366_vœn_4k
 *
vœn4k
)

1283 
u32
 
d©a
[
RTL8367_TA_VLAN_DATA_SIZE
];

1284 
îr
;

1285 
i
;

1287 i‡(
vœn4k
->
vid
 >
RTL8367_NUM_VIDS
 ||

1288 
vœn4k
->
membî
 > 
RTL8367_TA_VLAN_MEMBER_MASK
 ||

1289 
vœn4k
->
u¡ag
 > 
RTL8367_UNTAG_MASK
 ||

1290 
vœn4k
->
fid
 > 
RTL8367_FIDMAX
)

1291  -
EINVAL
;

1293 
d©a
[0] = (
vœn4k
->
membî
 & 
RTL8367_TA_VLAN_MEMBER_MASK
) <<

1294 
RTL8367_TA_VLAN_MEMBER_SHIFT
;

1295 
d©a
[1] = (
vœn4k
->
fid
 & 
RTL8367_TA_VLAN_FID_MASK
) <<

1296 
RTL8367_TA_VLAN_FID_SHIFT
;

1297 
d©a
[2] = (
vœn4k
->
u¡ag
 & 
RTL8367_TA_VLAN_UNTAG1_MASK
) <<

1298 
RTL8367_TA_VLAN_UNTAG1_SHIFT
;

1299 
d©a
[3] = ((
vœn4k
->
u¡ag
 >> 2Ë& 
RTL8367_TA_VLAN_UNTAG2_MASK
) <<

1300 
RTL8367_TA_VLAN_UNTAG2_SHIFT
;

1302 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1303 
	`REG_WR
(
smi
, 
	`RTL8367_TA_DATA_REG
(
i
), 
d©a
[i]);

1306 
	`REG_WR
(
smi
, 
RTL8367_TA_ADDR_REG
,

1307 
vœn4k
->
vid
 & 
RTL8367_TA_VLAN_VID_MASK
);

1310 
	`REG_WR
(
smi
, 
RTL8367_TA_CTRL_REG
, 
RTL8367_TA_CTRL_CVLAN_WRITE
);

1313 
	}
}

1315 
	$πl8367_gë_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

1316 
πl8366_vœn_mc
 *
vœnmc
)

1318 
u32
 
d©a
[
RTL8367_VLAN_MC_DATA_SIZE
];

1319 
îr
;

1320 
i
;

1322 
	`mem£t
(
vœnmc
, '\0', (
πl8366_vœn_mc
));

1324 i‡(
ödex
 >
RTL8367_NUM_VLANS
)

1325  -
EINVAL
;

1327 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1328 
	`REG_RD
(
smi
, 
	`RTL8367_VLAN_MC_BASE
(
ödex
Ë+ 
i
, &
d©a
[i]);

1330 
vœnmc
->
membî
 = (
d©a
[0] >> 
RTL8367_VLAN_MC_MEMBER_SHIFT
) &

1331 
RTL8367_VLAN_MC_MEMBER_MASK
;

1332 
vœnmc
->
fid
 = (
d©a
[1] >> 
RTL8367_VLAN_MC_FID_SHIFT
) &

1333 
RTL8367_VLAN_MC_FID_MASK
;

1334 
vœnmc
->
vid
 = (
d©a
[3] >> 
RTL8367_VLAN_MC_EVID_SHIFT
) &

1335 
RTL8367_VLAN_MC_EVID_MASK
;

1338 
	}
}

1340 
	$πl8367_£t_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

1341 c⁄° 
πl8366_vœn_mc
 *
vœnmc
)

1343 
u32
 
d©a
[
RTL8367_VLAN_MC_DATA_SIZE
];

1344 
îr
;

1345 
i
;

1347 i‡(
ödex
 >
RTL8367_NUM_VLANS
 ||

1348 
vœnmc
->
vid
 >
RTL8367_NUM_VIDS
 ||

1349 
vœnmc
->
¥i‹ôy
 > 
RTL8367_PRIORITYMAX
 ||

1350 
vœnmc
->
membî
 > 
RTL8367_VLAN_MC_MEMBER_MASK
 ||

1351 
vœnmc
->
u¡ag
 > 
RTL8367_UNTAG_MASK
 ||

1352 
vœnmc
->
fid
 > 
RTL8367_FIDMAX
)

1353  -
EINVAL
;

1355 
d©a
[0] = (
vœnmc
->
membî
 & 
RTL8367_VLAN_MC_MEMBER_MASK
) <<

1356 
RTL8367_VLAN_MC_MEMBER_SHIFT
;

1357 
d©a
[1] = (
vœnmc
->
fid
 & 
RTL8367_VLAN_MC_FID_MASK
) <<

1358 
RTL8367_VLAN_MC_FID_SHIFT
;

1359 
d©a
[2] = 0;

1360 
d©a
[3] = (
vœnmc
->
vid
 & 
RTL8367_VLAN_MC_EVID_MASK
) <<

1361 
RTL8367_VLAN_MC_EVID_SHIFT
;

1363 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1364 
	`REG_WR
(
smi
, 
	`RTL8367_VLAN_MC_BASE
(
ödex
Ë+ 
i
, 
d©a
[i]);

1367 
	}
}

1369 
	$πl8367_gë_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, *
vÆ
)

1371 
u32
 
d©a
;

1372 
îr
;

1374 i‡(
p‹t
 >
RTL8367_NUM_PORTS
)

1375  -
EINVAL
;

1377 
	`REG_RD
(
smi
, 
	`RTL8367_VLAN_PVID_CTRL_REG
(
p‹t
), &
d©a
);

1379 *
vÆ
 = (
d©a
 >> 
	`RTL8367_VLAN_PVID_CTRL_SHIFT
(
p‹t
)) &

1380 
RTL8367_VLAN_PVID_CTRL_MASK
;

1383 
	}
}

1385 
	$πl8367_£t_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, 
ödex
)

1387 i‡(
p‹t
 >
RTL8367_NUM_PORTS
 || 
ödex
 >
RTL8367_NUM_VLANS
)

1388  -
EINVAL
;

1390  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367_VLAN_PVID_CTRL_REG
(
p‹t
),

1391 
RTL8367_VLAN_PVID_CTRL_MASK
 <<

1392 
	`RTL8367_VLAN_PVID_CTRL_SHIFT
(
p‹t
),

1393 (
ödex
 & 
RTL8367_VLAN_PVID_CTRL_MASK
) <<

1394 
	`RTL8367_VLAN_PVID_CTRL_SHIFT
(
p‹t
));

1395 
	}
}

1397 
	$πl8367_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
)

1399  
	`πl8366_smi_rmwr
(
smi
, 
RTL8367_VLAN_CTRL_REG
,

1400 
RTL8367_VLAN_CTRL_ENABLE
,

1401 (
íabÀ
Ë? 
RTL8367_VLAN_CTRL_ENABLE
 : 0);

1402 
	}
}

1404 
	$πl8367_íabÀ_vœn4k
(
πl8366_smi
 *
smi
, 
íabÀ
)

1407 
	}
}

1409 
	$πl8367_is_vœn_vÆid
(
πl8366_smi
 *
smi
, 
vœn
)

1411 
max
 = 
RTL8367_NUM_VLANS
;

1413 i‡(
smi
->
vœn4k_íabÀd
)

1414 
max
 = 
RTL8367_NUM_VIDS
 - 1;

1416 i‡(
vœn
 =0 || vœ¿>
max
)

1420 
	}
}

1422 
	$πl8367_íabÀ_p‹t
(
πl8366_smi
 *
smi
, 
p‹t
, 
íabÀ
)

1424 
îr
;

1426 
	`REG_WR
(
smi
, 
	`RTL8367_PORT_ISOLATION_REG
(
p‹t
),

1427 (
íabÀ
Ë? 
RTL8367_PORTS_ALL
 : 0);

1430 
	}
}

1432 
	$πl8367_sw_ª£t_mibs
(
swôch_dev
 *
dev
,

1433 c⁄° 
swôch_©å
 *
©å
,

1434 
swôch_vÆ
 *
vÆ
)

1436 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1438  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367_MIB_CTRL_REG
(0), 0,

1439 
RTL8367_MIB_CTRL_GLOBAL_RESET_MASK
);

1440 
	}
}

1442 
	$πl8367_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
,

1443 
p‹t
,

1444 
swôch_p‹t_lök
 *
lök
)

1446 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1447 
u32
 
d©a
 = 0;

1448 
u32
 
•ìd
;

1450 i‡(
p‹t
 >
RTL8367_NUM_PORTS
)

1451  -
EINVAL
;

1453 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8367_PORT_STATUS_REG
(
p‹t
), &
d©a
);

1455 
lök
->lök = !!(
d©a
 & 
RTL8367_PORT_STATUS_LINK
);

1456 i‡(!
lök
->link)

1459 
lök
->
du∂ex
 = !!(
d©a
 & 
RTL8367_PORT_STATUS_DUPLEX
);

1460 
lök
->
rx_Êow
 = !!(
d©a
 & 
RTL8367_PORT_STATUS_RXPAUSE
);

1461 
lök
->
tx_Êow
 = !!(
d©a
 & 
RTL8367_PORT_STATUS_TXPAUSE
);

1462 
lök
->
™eg
 = !!(
d©a
 & 
RTL8367_PORT_STATUS_NWAY
);

1464 
•ìd
 = (
d©a
 & 
RTL8367_PORT_STATUS_SPEED_MASK
);

1465 
•ìd
) {

1467 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

1470 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

1473 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

1476 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

1481 
	}
}

1483 
	$πl8367_sw_gë_max_Àngth
(
swôch_dev
 *
dev
,

1484 c⁄° 
swôch_©å
 *
©å
,

1485 
swôch_vÆ
 *
vÆ
)

1487 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1488 
u32
 
d©a
;

1490 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367_SWC0_REG
, &
d©a
);

1491 
vÆ
->
vÆue
.
i
 = (
d©a
 & 
RTL8367_SWC0_MAX_LENGTH_MASK
) >>

1492 
RTL8367_SWC0_MAX_LENGTH_SHIFT
;

1495 
	}
}

1497 
	$πl8367_sw_£t_max_Àngth
(
swôch_dev
 *
dev
,

1498 c⁄° 
swôch_©å
 *
©å
,

1499 
swôch_vÆ
 *
vÆ
)

1501 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1502 
u32
 
max_Àn
;

1504 
vÆ
->
vÆue
.
i
) {

1506 
max_Àn
 = 
RTL8367_SWC0_MAX_LENGTH_1522
;

1509 
max_Àn
 = 
RTL8367_SWC0_MAX_LENGTH_1536
;

1512 
max_Àn
 = 
RTL8367_SWC0_MAX_LENGTH_1552
;

1515 
max_Àn
 = 
RTL8367_SWC0_MAX_LENGTH_16000
;

1518  -
EINVAL
;

1521  
	`πl8366_smi_rmwr
(
smi
, 
RTL8367_SWC0_REG
,

1522 
RTL8367_SWC0_MAX_LENGTH_MASK
, 
max_Àn
);

1523 
	}
}

1526 
	$πl8367_sw_ª£t_p‹t_mibs
(
swôch_dev
 *
dev
,

1527 c⁄° 
swôch_©å
 *
©å
,

1528 
swôch_vÆ
 *
vÆ
)

1530 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1531 
p‹t
;

1533 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1534 i‡(
p‹t
 >
RTL8367_NUM_PORTS
)

1535  -
EINVAL
;

1537  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367_MIB_CTRL_REG
(
p‹t
 / 8), 0,

1538 
	`RTL8367_MIB_CTRL_PORT_RESET_MASK
(
p‹t
 % 8));

1539 
	}
}

1541 
	$πl8367_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1542 
swôch_p‹t_°©s
 *
°©s
)

1544  (
	`πl8366_sw_gë_p‹t_°©s
(
dev
, 
p‹t
, 
°©s
,

1545 
RTL8367_MIB_TXB_ID
, 
RTL8367_MIB_RXB_ID
));

1546 
	}
}

1548 
swôch_©å
 
	gπl8367_globÆs
[] = {

1550 .
ty≥
 = 
SWITCH_TYPE_INT
,

1551 .
	g«me
 = "enable_vlan",

1552 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1553 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1554 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1555 .
	gmax
 = 1,

1556 .
	gofs
 = 1

1558 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1559 .
	g«me
 = "enable_vlan4k",

1560 .
	gdes¸ùti⁄
 = "Enable VLAN 4K mode",

1561 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1562 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1563 .
	gmax
 = 1,

1564 .
	gofs
 = 2

1566 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1567 .
	g«me
 = "reset_mibs",

1568 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1569 .
	g£t
 = 
πl8367_sw_ª£t_mibs
,

1571 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1572 .
	g«me
 = "max_length",

1573 .
	gdes¸ùti⁄
 = "Get/SetÅhe maximumÜength of validÖackets"

1575 .
	g£t
 = 
πl8367_sw_£t_max_Àngth
,

1576 .
	ggë
 = 
πl8367_sw_gë_max_Àngth
,

1577 .
	gmax
 = 3,

1581 
swôch_©å
 
	gπl8367_p‹t
[] = {

1583 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1584 .
	g«me
 = "reset_mib",

1585 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1586 .
	g£t
 = 
πl8367_sw_ª£t_p‹t_mibs
,

1588 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1589 .
	g«me
 = "mib",

1590 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

1591 .
	gmax
 = 33,

1592 .
	g£t
 = 
NULL
,

1593 .
	ggë
 = 
πl8366_sw_gë_p‹t_mib
,

1597 
swôch_©å
 
	gπl8367_vœn
[] = {

1599 .
ty≥
 = 
SWITCH_TYPE_STRING
,

1600 .
	g«me
 = "info",

1601 .
	gdes¸ùti⁄
 = "Get vlan information",

1602 .
	gmax
 = 1,

1603 .
	g£t
 = 
NULL
,

1604 .
	ggë
 = 
πl8366_sw_gë_vœn_öfo
,

1606 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1607 .
	g«me
 = "fid",

1608 .
	gdes¸ùti⁄
 = "Get/Set vlan FID",

1609 .
	gmax
 = 
RTL8367_FIDMAX
,

1610 .
	g£t
 = 
πl8366_sw_£t_vœn_fid
,

1611 .
	ggë
 = 
πl8366_sw_gë_vœn_fid
,

1615 c⁄° 
swôch_dev_›s
 
	gπl8367_sw_›s
 = {

1616 .
©å_globÆ
 = {

1617 .
©å
 = 
πl8367_globÆs
,

1618 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367_globÆs
),

1620 .
	g©å_p‹t
 = {

1621 .
©å
 = 
πl8367_p‹t
,

1622 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367_p‹t
),

1624 .
	g©å_vœn
 = {

1625 .
©å
 = 
πl8367_vœn
,

1626 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367_vœn
),

1629 .
	ggë_vœn_p‹ts
 = 
πl8366_sw_gë_vœn_p‹ts
,

1630 .
	g£t_vœn_p‹ts
 = 
πl8366_sw_£t_vœn_p‹ts
,

1631 .
	ggë_p‹t_pvid
 = 
πl8366_sw_gë_p‹t_pvid
,

1632 .
	g£t_p‹t_pvid
 = 
πl8366_sw_£t_p‹t_pvid
,

1633 .
	gª£t_swôch
 = 
πl8366_sw_ª£t_swôch
,

1634 .
	ggë_p‹t_lök
 = 
πl8367_sw_gë_p‹t_lök
,

1635 .
	ggë_p‹t_°©s
 = 
πl8367_sw_gë_p‹t_°©s
,

1638 
	$πl8367_swôch_öô
(
πl8366_smi
 *
smi
)

1640 
swôch_dev
 *
dev
 = &
smi
->
sw_dev
;

1641 
îr
;

1643 
dev
->
«me
 = "RTL8367";

1644 
dev
->
˝u_p‹t
 = 
RTL8367_CPU_PORT_NUM
;

1645 
dev
->
p‹ts
 = 
RTL8367_NUM_PORTS
;

1646 
dev
->
vœns
 = 
RTL8367_NUM_VIDS
;

1647 
dev
->
›s
 = &
πl8367_sw_›s
;

1648 
dev
->
Æüs
 = 
	`dev_«me
(
smi
->
∑ª¡
);

1650 
îr
 = 
	`ªgi°î_swôch
(
dev
, 
NULL
);

1651 i‡(
îr
)

1652 
	`dev_îr
(
smi
->
∑ª¡
, "switchÑegistration failed\n");

1654  
îr
;

1655 
	}
}

1657 
	$πl8367_swôch_˛ónup
(
πl8366_smi
 *
smi
)

1659 
	`uƒegi°î_swôch
(&
smi
->
sw_dev
);

1660 
	}
}

1662 
	$πl8367_mii_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

1664 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1665 
u32
 
vÆ
 = 0;

1666 
îr
;

1668 
îr
 = 
	`πl8367_ªad_phy_ªg
(
smi
, 
addr
, 
ªg
, &
vÆ
);

1669 i‡(
îr
)

1672  
vÆ
;

1673 
	}
}

1675 
	$πl8367_mii_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

1677 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1678 
u32
 
t
;

1679 
îr
;

1681 
îr
 = 
	`πl8367_wrôe_phy_ªg
(
smi
, 
addr
, 
ªg
, 
vÆ
);

1682 i‡(
îr
)

1683  
îr
;

1686 (Ë
	`πl8367_ªad_phy_ªg
(
smi
, 
addr
, 
ªg
, &
t
);

1688  
îr
;

1689 
	}
}

1691 
	$πl8367_dëe˘
(
πl8366_smi
 *
smi
)

1693 
u32
 
πl_no
 = 0;

1694 
u32
 
πl_vî
 = 0;

1695 *
chù_«me
;

1696 
ªt
;

1698 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367_RTL_NO_REG
, &
πl_no
);

1699 i‡(
ªt
) {

1700 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chipÇumber\n");

1701  
ªt
;

1704 
πl_no
) {

1705 
RTL8367_RTL_NO_8367R
:

1706 
chù_«me
 = "8367R";

1708 
RTL8367_RTL_NO_8367M
:

1709 
chù_«me
 = "8367M";

1712 
	`dev_îr
(
smi
->
∑ª¡
, "unknow¿chùÇumbî (%04x)\n", 
πl_no
);

1713  -
ENODEV
;

1716 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367_RTL_VER_REG
, &
πl_vî
);

1717 i‡(
ªt
) {

1718 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead chip version\n");

1719  
ªt
;

1722 
	`dev_öfo
(
smi
->
∑ª¡
, "RTL%s ver. %u chip found\n",

1723 
chù_«me
, 
πl_vî
 & 
RTL8367_RTL_VER_MASK
);

1726 
	}
}

1728 
πl8366_smi_›s
 
	gπl8367_smi_›s
 = {

1729 .
dëe˘
 = 
πl8367_dëe˘
,

1730 .
	gª£t_chù
 = 
πl8367_ª£t_chù
,

1731 .
	g£tup
 = 
πl8367_£tup
,

1733 .
	gmii_ªad
 = 
πl8367_mii_ªad
,

1734 .
	gmii_wrôe
 = 
πl8367_mii_wrôe
,

1736 .
	ggë_vœn_mc
 = 
πl8367_gë_vœn_mc
,

1737 .
	g£t_vœn_mc
 = 
πl8367_£t_vœn_mc
,

1738 .
	ggë_vœn_4k
 = 
πl8367_gë_vœn_4k
,

1739 .
	g£t_vœn_4k
 = 
πl8367_£t_vœn_4k
,

1740 .
	ggë_mc_ödex
 = 
πl8367_gë_mc_ödex
,

1741 .
	g£t_mc_ödex
 = 
πl8367_£t_mc_ödex
,

1742 .
	ggë_mib_cou¡î
 = 
πl8367_gë_mib_cou¡î
,

1743 .
	gis_vœn_vÆid
 = 
πl8367_is_vœn_vÆid
,

1744 .
	gíabÀ_vœn
 = 
πl8367_íabÀ_vœn
,

1745 .
	gíabÀ_vœn4k
 = 
πl8367_íabÀ_vœn4k
,

1746 .
	gíabÀ_p‹t
 = 
πl8367_íabÀ_p‹t
,

1749 
	$πl8367_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1751 
πl8366_smi
 *
smi
;

1752 
îr
;

1754 
smi
 = 
	`πl8366_smi_¥obe
(
pdev
);

1755 i‡(
	`IS_ERR
(
smi
))

1756  
	`PTR_ERR
(
smi
);

1758 
smi
->
˛k_dñay
 = 1500;

1759 
smi
->
cmd_ªad
 = 0xb9;

1760 
smi
->
cmd_wrôe
 = 0xb8;

1761 
smi
->
›s
 = &
πl8367_smi_›s
;

1762 
smi
->
˝u_p‹t
 = 
RTL8367_CPU_PORT_NUM
;

1763 
smi
->
num_p‹ts
 = 
RTL8367_NUM_PORTS
;

1764 
smi
->
num_vœn_mc
 = 
RTL8367_NUM_VLANS
;

1765 
smi
->
mib_cou¡îs
 = 
πl8367_mib_cou¡îs
;

1766 
smi
->
num_mib_cou¡îs
 = 
	`ARRAY_SIZE
(
πl8367_mib_cou¡îs
);

1768 
îr
 = 
	`πl8366_smi_öô
(
smi
);

1769 i‡(
îr
)

1770 
îr_‰ì_smi
;

1772 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
smi
);

1774 
îr
 = 
	`πl8367_swôch_öô
(
smi
);

1775 i‡(
îr
)

1776 
îr_˛ór_drvd©a
;

1780 
îr_˛ór_drvd©a
:

1781 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1782 
	`πl8366_smi_˛ónup
(
smi
);

1783 
îr_‰ì_smi
:

1784 
	`k‰ì
(
smi
);

1785  
îr
;

1786 
	}
}

1788 
	$πl8367_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1790 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1792 i‡(
smi
) {

1793 
	`πl8367_swôch_˛ónup
(
smi
);

1794 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1795 
	`πl8366_smi_˛ónup
(
smi
);

1796 
	`k‰ì
(
smi
);

1800 
	}
}

1802 
	$πl8367_shutdown
(
∂©f‹m_devi˚
 *
pdev
)

1804 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1806 i‡(
smi
)

1807 
	`πl8367_ª£t_chù
(
smi
);

1808 
	}
}

1810 #ifde‡
CONFIG_OF


1811 c⁄° 
of_devi˚_id
 
	gπl8367_m©ch
[] = {

1812 { .
com∑tibÀ
 = "realtek,rtl8367" },

1815 
MODULE_DEVICE_TABLE
(
of
, 
πl8367_m©ch
);

1818 
∂©f‹m_drivî
 
	gπl8367_drivî
 = {

1819 .
drivî
 = {

1820 .
«me
 = 
RTL8367_DRIVER_NAME
,

1821 .
	gow√r
 = 
THIS_MODULE
,

1822 #ifde‡
CONFIG_OF


1823 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
πl8367_m©ch
),

1826 .
	g¥obe
 = 
πl8367_¥obe
,

1827 .
	gªmove
 = 
πl8367_ªmove
,

1828 .
	gshutdown
 = 
πl8367_shutdown
,

1831 
__öô
 
	$πl8367_moduÀ_öô
()

1833  
	`∂©f‹m_drivî_ªgi°î
(&
πl8367_drivî
);

1834 
	}
}

1835 
moduÀ_öô
(
πl8367_moduÀ_öô
);

1837 
__exô
 
	$πl8367_moduÀ_exô
()

1839 
	`∂©f‹m_drivî_uƒegi°î
(&
πl8367_drivî
);

1840 
	}
}

1841 
moduÀ_exô
(
πl8367_moduÀ_exô
);

1843 
MODULE_DESCRIPTION
("Realtek RTL8367Éthernet switch driver");

1844 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1845 
MODULE_LICENSE
("GPL v2");

1846 
MODULE_ALIAS
("∂©f‹m:" 
RTL8367_DRIVER_NAME
);

	@linux/generic/files/drivers/net/phy/rtl8367b.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/devi˚.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_∂©f‹m.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/skbuff.h
>

19 
	~<löux/πl8367.h
>

21 
	~"πl8366_smi.h
"

23 
	#RTL8367B_RESET_DELAY
 1000

	)

25 
	#RTL8367B_PHY_ADDR_MAX
 8

	)

26 
	#RTL8367B_PHY_REG_MAX
 31

	)

28 
	#RTL8367B_VID_MASK
 0x3fff

	)

29 
	#RTL8367B_FID_MASK
 0xf

	)

30 
	#RTL8367B_UNTAG_MASK
 0xff

	)

31 
	#RTL8367B_MEMBER_MASK
 0xff

	)

33 
	#RTL8367B_PORT_MISC_CFG_REG
(
_p
Ë(0x000ê+ 0x20 * (_p))

	)

34 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_SHIFT
 4

	)

35 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_MASK
 0x3

	)

36 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_ORIGINAL
 0

	)

37 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_KEEP
 1

	)

38 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_PRI
 2

	)

39 
	#RTL8367B_PORT_MISC_CFG_EGRESS_MODE_REAL
 3

	)

41 
	#RTL8367B_BYPASS_LINE_RATE_REG
 0x03f7

	)

43 
	#RTL8367B_TA_CTRL_REG
 0x0500

	)

44 
	#RTL8367B_TA_CTRL_SPA_SHIFT
 8

	)

45 
	#RTL8367B_TA_CTRL_SPA_MASK
 0x7

	)

46 
	#RTL8367B_TA_CTRL_METHOD
 
	`BIT
(4)

	)

47 
	#RTL8367B_TA_CTRL_CMD_SHIFT
 3

	)

48 
	#RTL8367B_TA_CTRL_CMD_READ
 0

	)

49 
	#RTL8367B_TA_CTRL_CMD_WRITE
 1

	)

50 
	#RTL8367B_TA_CTRL_TABLE_SHIFT
 0

	)

51 
	#RTL8367B_TA_CTRL_TABLE_ACLRULE
 1

	)

52 
	#RTL8367B_TA_CTRL_TABLE_ACLACT
 2

	)

53 
	#RTL8367B_TA_CTRL_TABLE_CVLAN
 3

	)

54 
	#RTL8367B_TA_CTRL_TABLE_L2
 4

	)

55 
	#RTL8367B_TA_CTRL_CVLAN_READ
 \

56 ((
RTL8367B_TA_CTRL_CMD_READ
 << 
RTL8367B_TA_CTRL_CMD_SHIFT
) | \

57 
RTL8367B_TA_CTRL_TABLE_CVLAN
)

	)

58 
	#RTL8367B_TA_CTRL_CVLAN_WRITE
 \

59 ((
RTL8367B_TA_CTRL_CMD_WRITE
 << 
RTL8367B_TA_CTRL_CMD_SHIFT
) | \

60 
RTL8367B_TA_CTRL_TABLE_CVLAN
)

	)

62 
	#RTL8367B_TA_ADDR_REG
 0x0501

	)

63 
	#RTL8367B_TA_ADDR_MASK
 0x3fff

	)

65 
	#RTL8367B_TA_LUT_REG
 0x0502

	)

67 
	#RTL8367B_TA_WRDATA_REG
(
_x
Ë(0x0510 + (_x))

	)

68 
	#RTL8367B_TA_VLAN_NUM_WORDS
 2

	)

69 
	#RTL8367B_TA_VLAN_VID_MASK
 
RTL8367B_VID_MASK


	)

70 
	#RTL8367B_TA_VLAN0_MEMBER_SHIFT
 0

	)

71 
	#RTL8367B_TA_VLAN0_MEMBER_MASK
 
RTL8367B_MEMBER_MASK


	)

72 
	#RTL8367B_TA_VLAN0_UNTAG_SHIFT
 8

	)

73 
	#RTL8367B_TA_VLAN0_UNTAG_MASK
 
RTL8367B_MEMBER_MASK


	)

74 
	#RTL8367B_TA_VLAN1_FID_SHIFT
 0

	)

75 
	#RTL8367B_TA_VLAN1_FID_MASK
 
RTL8367B_FID_MASK


	)

77 
	#RTL8367B_TA_RDDATA_REG
(
_x
Ë(0x0520 + (_x))

	)

79 
	#RTL8367B_VLAN_PVID_CTRL_REG
(
_p
Ë(0x0700 + (_pË/ 2Ë

	)

80 
	#RTL8367B_VLAN_PVID_CTRL_MASK
 0x1‡

	)

81 
	#RTL8367B_VLAN_PVID_CTRL_SHIFT
(
_p
Ë(8 * ((_pË% 2)Ë

	)

83 
	#RTL8367B_VLAN_MC_BASE
(
_x
Ë(0x0728 + (_xË* 4Ë

	)

84 
	#RTL8367B_VLAN_MC_NUM_WORDS
 4

	)

85 
	#RTL8367B_VLAN_MC0_MEMBER_SHIFT
 0

	)

86 
	#RTL8367B_VLAN_MC0_MEMBER_MASK
 
RTL8367B_MEMBER_MASK


	)

87 
	#RTL8367B_VLAN_MC1_FID_SHIFT
 0

	)

88 
	#RTL8367B_VLAN_MC1_FID_MASK
 
RTL8367B_FID_MASK


	)

89 
	#RTL8367B_VLAN_MC3_EVID_SHIFT
 0

	)

90 
	#RTL8367B_VLAN_MC3_EVID_MASK
 
RTL8367B_VID_MASK


	)

92 
	#RTL8367B_VLAN_CTRL_REG
 0x07a8

	)

93 
	#RTL8367B_VLAN_CTRL_ENABLE
 
	`BIT
(0)

	)

95 
	#RTL8367B_VLAN_INGRESS_REG
 0x07a9

	)

97 
	#RTL8367B_PORT_ISOLATION_REG
(
_p
Ë(0x08a2 + (_p)Ë

	)

99 
	#RTL8367B_MIB_COUNTER_REG
(
_x
Ë(0x1000 + (_x)Ë

	)

100 
	#RTL8367B_MIB_COUNTER_PORT_OFFSET
 0x007¯

	)

102 
	#RTL8367B_MIB_ADDRESS_REG
 0x1004

	)

104 
	#RTL8367B_MIB_CTRL0_REG
(
_x
Ë(0x1005 + (_x)Ë

	)

105 
	#RTL8367B_MIB_CTRL0_GLOBAL_RESET_MASK
 
	`BIT
(11Ë

	)

106 
	#RTL8367B_MIB_CTRL0_QM_RESET_MASK
 
	`BIT
(10Ë

	)

107 
	#RTL8367B_MIB_CTRL0_PORT_RESET_MASK
(
_p
Ë
	`BIT
(2 + (_p)Ë

	)

108 
	#RTL8367B_MIB_CTRL0_RESET_MASK
 
	`BIT
(1Ë

	)

109 
	#RTL8367B_MIB_CTRL0_BUSY_MASK
 
	`BIT
(0Ë

	)

111 
	#RTL8367B_SWC0_REG
 0x1200

	)

112 
	#RTL8367B_SWC0_MAX_LENGTH_SHIFT
 13

	)

113 
	#RTL8367B_SWC0_MAX_LENGTH
(
_x
Ë((_xË<< 13Ë

	)

114 
	#RTL8367B_SWC0_MAX_LENGTH_MASK
 
	`RTL8367B_SWC0_MAX_LENGTH
(0x3)

	)

115 
	#RTL8367B_SWC0_MAX_LENGTH_1522
 
	`RTL8367B_SWC0_MAX_LENGTH
(0)

	)

116 
	#RTL8367B_SWC0_MAX_LENGTH_1536
 
	`RTL8367B_SWC0_MAX_LENGTH
(1)

	)

117 
	#RTL8367B_SWC0_MAX_LENGTH_1552
 
	`RTL8367B_SWC0_MAX_LENGTH
(2)

	)

118 
	#RTL8367B_SWC0_MAX_LENGTH_16000
 
	`RTL8367B_SWC0_MAX_LENGTH
(3)

	)

120 
	#RTL8367B_CHIP_NUMBER_REG
 0x1300

	)

122 
	#RTL8367B_CHIP_VER_REG
 0x1301

	)

123 
	#RTL8367B_CHIP_VER_RLVID_SHIFT
 12

	)

124 
	#RTL8367B_CHIP_VER_RLVID_MASK
 0xf

	)

125 
	#RTL8367B_CHIP_VER_MCID_SHIFT
 8

	)

126 
	#RTL8367B_CHIP_VER_MCID_MASK
 0xf

	)

127 
	#RTL8367B_CHIP_VER_BOID_SHIFT
 4

	)

128 
	#RTL8367B_CHIP_VER_BOID_MASK
 0xf

	)

129 
	#RTL8367B_CHIP_VER_AFE_SHIFT
 0

	)

130 
	#RTL8367B_CHIP_VER_AFE_MASK
 0x1

	)

132 
	#RTL8367B_CHIP_MODE_REG
 0x1302

	)

133 
	#RTL8367B_CHIP_MODE_MASK
 0x7

	)

135 
	#RTL8367B_CHIP_DEBUG0_REG
 0x1303

	)

136 
	#RTL8367B_CHIP_DEBUG0_DUMMY0
(
_x
Ë
	`BIT
(8 + (_x))

	)

138 
	#RTL8367B_CHIP_DEBUG1_REG
 0x1304

	)

140 
	#RTL8367B_DIS_REG
 0x1305

	)

141 
	#RTL8367B_DIS_SKIP_MII_RXER
(
_x
Ë
	`BIT
(12 + (_x))

	)

142 
	#RTL8367B_DIS_RGMII_SHIFT
(
_x
Ë(4 * (_x))

	)

143 
	#RTL8367B_DIS_RGMII_MASK
 0x7

	)

145 
	#RTL8367B_EXT_RGMXF_REG
(
_x
Ë(0x1306 + (_x))

	)

146 
	#RTL8367B_EXT_RGMXF_DUMMY0_SHIFT
 5

	)

147 
	#RTL8367B_EXT_RGMXF_DUMMY0_MASK
 0x7ff

	)

148 
	#RTL8367B_EXT_RGMXF_TXDELAY_SHIFT
 3

	)

149 
	#RTL8367B_EXT_RGMXF_TXDELAY_MASK
 1

	)

150 
	#RTL8367B_EXT_RGMXF_RXDELAY_MASK
 0x7

	)

152 
	#RTL8367B_DI_FORCE_REG
(
_x
Ë(0x1310 + (_x))

	)

153 
	#RTL8367B_DI_FORCE_MODE
 
	`BIT
(12)

	)

154 
	#RTL8367B_DI_FORCE_NWAY
 
	`BIT
(7)

	)

155 
	#RTL8367B_DI_FORCE_TXPAUSE
 
	`BIT
(6)

	)

156 
	#RTL8367B_DI_FORCE_RXPAUSE
 
	`BIT
(5)

	)

157 
	#RTL8367B_DI_FORCE_LINK
 
	`BIT
(4)

	)

158 
	#RTL8367B_DI_FORCE_DUPLEX
 
	`BIT
(2)

	)

159 
	#RTL8367B_DI_FORCE_SPEED_MASK
 3

	)

160 
	#RTL8367B_DI_FORCE_SPEED_10
 0

	)

161 
	#RTL8367B_DI_FORCE_SPEED_100
 1

	)

162 
	#RTL8367B_DI_FORCE_SPEED_1000
 2

	)

164 
	#RTL8367B_MAC_FORCE_REG
(
_x
Ë(0x1312 + (_x))

	)

166 
	#RTL8367B_CHIP_RESET_REG
 0x1322

	)

167 
	#RTL8367B_CHIP_RESET_SW
 
	`BIT
(1Ë

	)

168 
	#RTL8367B_CHIP_RESET_HW
 
	`BIT
(0Ë

	)

170 
	#RTL8367B_PORT_STATUS_REG
(
_p
Ë(0x1352 + (_p)Ë

	)

171 
	#RTL8367B_PORT_STATUS_EN_1000_SPI
 
	`BIT
(11Ë

	)

172 
	#RTL8367B_PORT_STATUS_EN_100_SPI
 
	`BIT
(10)

	)

173 
	#RTL8367B_PORT_STATUS_NWAY_FAULT
 
	`BIT
(9)

	)

174 
	#RTL8367B_PORT_STATUS_LINK_MASTER
 
	`BIT
(8)

	)

175 
	#RTL8367B_PORT_STATUS_NWAY
 
	`BIT
(7)

	)

176 
	#RTL8367B_PORT_STATUS_TXPAUSE
 
	`BIT
(6)

	)

177 
	#RTL8367B_PORT_STATUS_RXPAUSE
 
	`BIT
(5)

	)

178 
	#RTL8367B_PORT_STATUS_LINK
 
	`BIT
(4)

	)

179 
	#RTL8367B_PORT_STATUS_DUPLEX
 
	`BIT
(2)

	)

180 
	#RTL8367B_PORT_STATUS_SPEED_MASK
 0x0003

	)

181 
	#RTL8367B_PORT_STATUS_SPEED_10
 0

	)

182 
	#RTL8367B_PORT_STATUS_SPEED_100
 1

	)

183 
	#RTL8367B_PORT_STATUS_SPEED_1000
 2

	)

185 
	#RTL8367B_RTL_MAGIC_ID_REG
 0x13c2

	)

186 
	#RTL8367B_RTL_MAGIC_ID_VAL
 0x0249

	)

188 
	#RTL8367B_IA_CTRL_REG
 0x1f00

	)

189 
	#RTL8367B_IA_CTRL_RW
(
_x
Ë((_xË<< 1)

	)

190 
	#RTL8367B_IA_CTRL_RW_READ
 
	`RTL8367B_IA_CTRL_RW
(0)

	)

191 
	#RTL8367B_IA_CTRL_RW_WRITE
 
	`RTL8367B_IA_CTRL_RW
(1)

	)

192 
	#RTL8367B_IA_CTRL_CMD_MASK
 
	`BIT
(0)

	)

194 
	#RTL8367B_IA_STATUS_REG
 0x1f01

	)

195 
	#RTL8367B_IA_STATUS_PHY_BUSY
 
	`BIT
(2)

	)

196 
	#RTL8367B_IA_STATUS_SDS_BUSY
 
	`BIT
(1)

	)

197 
	#RTL8367B_IA_STATUS_MDX_BUSY
 
	`BIT
(0)

	)

199 
	#RTL8367B_IA_ADDRESS_REG
 0x1f02

	)

200 
	#RTL8367B_IA_WRITE_DATA_REG
 0x1f03

	)

201 
	#RTL8367B_IA_READ_DATA_REG
 0x1f04

	)

203 
	#RTL8367B_INTERNAL_PHY_REG
(
_a
, 
_r
Ë(0x2000 + 32 * (_aË+ (_r))

	)

205 
	#RTL8367B_NUM_MIB_COUNTERS
 58

	)

207 
	#RTL8367B_CPU_PORT_NUM
 5

	)

208 
	#RTL8367B_NUM_PORTS
 8

	)

209 
	#RTL8367B_NUM_VLANS
 32

	)

210 
	#RTL8367B_NUM_VIDS
 4096

	)

211 
	#RTL8367B_PRIORITYMAX
 7

	)

212 
	#RTL8367B_FIDMAX
 7

	)

214 
	#RTL8367B_PORT_0
 
	`BIT
(0)

	)

215 
	#RTL8367B_PORT_1
 
	`BIT
(1)

	)

216 
	#RTL8367B_PORT_2
 
	`BIT
(2)

	)

217 
	#RTL8367B_PORT_3
 
	`BIT
(3)

	)

218 
	#RTL8367B_PORT_4
 
	`BIT
(4)

	)

219 
	#RTL8367B_PORT_E0
 
	`BIT
(5Ë

	)

220 
	#RTL8367B_PORT_E1
 
	`BIT
(6Ë

	)

221 
	#RTL8367B_PORT_E2
 
	`BIT
(7Ë

	)

223 
	#RTL8367B_PORTS_ALL
 \

224 (
RTL8367B_PORT_0
 | 
RTL8367B_PORT_1
 | 
RTL8367B_PORT_2
 | \

225 
RTL8367B_PORT_3
 | 
RTL8367B_PORT_4
 | 
RTL8367B_PORT_E0
 | \

226 
RTL8367B_PORT_E1
 | 
RTL8367B_PORT_E2
)

	)

228 
	#RTL8367B_PORTS_ALL_BUT_CPU
 \

229 (
RTL8367B_PORT_0
 | 
RTL8367B_PORT_1
 | 
RTL8367B_PORT_2
 | \

230 
RTL8367B_PORT_3
 | 
RTL8367B_PORT_4
 | 
RTL8367B_PORT_E1
 | \

231 
RTL8367B_PORT_E2
)

	)

233 
	sπl8367b_öôvÆ
 {

234 
u16
 
	mªg
;

235 
u16
 
	mvÆ
;

238 
	#RTL8367B_MIB_RXB_ID
 0

	)

239 
	#RTL8367B_MIB_TXB_ID
 28

	)

241 
πl8366_mib_cou¡î


242 
	gπl8367b_mib_cou¡îs
[
RTL8367B_NUM_MIB_COUNTERS
] = {

305 
	#REG_RD
(
_smi
, 
_ªg
, 
_vÆ
) \

307 
îr
 = 
	`πl8366_smi_ªad_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

308 i‡(
îr
) \

309  
îr
; \

310 } 0)

	)

312 
	#REG_WR
(
_smi
, 
_ªg
, 
_vÆ
) \

314 
îr
 = 
	`πl8366_smi_wrôe_ªg
(
_smi
, 
_ªg
, 
_vÆ
); \

315 i‡(
îr
) \

316  
îr
; \

317 } 0)

	)

319 
	#REG_RMW
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
) \

321 
îr
 = 
	`πl8366_smi_rmwr
(
_smi
, 
_ªg
, 
_mask
, 
_vÆ
); \

322 i‡(
îr
) \

323  
îr
; \

324 } 0)

	)

326 c⁄° 
πl8367b_öôvÆ
 
	gπl8367r_vb_öôvÆs_0
[] = {

539 c⁄° 
πl8367b_öôvÆ
 
	gπl8367r_vb_öôvÆs_1
[] = {

580 
	$πl8367b_wrôe_öôvÆs
(
πl8366_smi
 *
smi
,

581 c⁄° 
πl8367b_öôvÆ
 *
öôvÆs
,

582 
cou¡
)

584 
îr
;

585 
i
;

587 
i
 = 0; i < 
cou¡
; i++)

588 
	`REG_WR
(
smi
, 
öôvÆs
[
i
].
ªg
, inôvÆs[i].
vÆ
);

591 
	}
}

593 
	$πl8367b_ªad_phy_ªg
(
πl8366_smi
 *
smi
,

594 
u32
 
phy_addr
, u32 
phy_ªg
, u32 *
vÆ
)

596 
timeout
;

597 
u32
 
d©a
;

598 
îr
;

600 i‡(
phy_addr
 > 
RTL8367B_PHY_ADDR_MAX
)

601  -
EINVAL
;

603 i‡(
phy_ªg
 > 
RTL8367B_PHY_REG_MAX
)

604  -
EINVAL
;

606 
	`REG_RD
(
smi
, 
RTL8367B_IA_STATUS_REG
, &
d©a
);

607 i‡(
d©a
 & 
RTL8367B_IA_STATUS_PHY_BUSY
)

608  -
ETIMEDOUT
;

611 
	`REG_WR
(
smi
, 
RTL8367B_IA_ADDRESS_REG
,

612 
	`RTL8367B_INTERNAL_PHY_REG
(
phy_addr
, 
phy_ªg
));

615 
	`REG_WR
(
smi
, 
RTL8367B_IA_CTRL_REG
,

616 
RTL8367B_IA_CTRL_CMD_MASK
 | 
RTL8367B_IA_CTRL_RW_READ
);

618 
timeout
 = 5;

620 
	`REG_RD
(
smi
, 
RTL8367B_IA_STATUS_REG
, &
d©a
);

621 i‡((
d©a
 & 
RTL8367B_IA_STATUS_PHY_BUSY
) == 0)

624 i‡(
timeout
--) {

625 
	`dev_îr
(
smi
->
∑ª¡
, "phyÑeadÅimed out\n");

626  -
ETIMEDOUT
;

629 
	`udñay
(1);

633 
	`REG_RD
(
smi
, 
RTL8367B_IA_READ_DATA_REG
, 
vÆ
);

635 
	`dev_dbg
(
smi
->
∑ª¡
, "phy_read:áddr:%02x,Ñeg:%02x, val:%04x\n",

636 
phy_addr
, 
phy_ªg
, *
vÆ
);

638 
	}
}

640 
	$πl8367b_wrôe_phy_ªg
(
πl8366_smi
 *
smi
,

641 
u32
 
phy_addr
, u32 
phy_ªg
, u32 
vÆ
)

643 
timeout
;

644 
u32
 
d©a
;

645 
îr
;

647 
	`dev_dbg
(
smi
->
∑ª¡
, "phy_write:áddr:%02x,Ñeg:%02x, val:%04x\n",

648 
phy_addr
, 
phy_ªg
, 
vÆ
);

650 i‡(
phy_addr
 > 
RTL8367B_PHY_ADDR_MAX
)

651  -
EINVAL
;

653 i‡(
phy_ªg
 > 
RTL8367B_PHY_REG_MAX
)

654  -
EINVAL
;

656 
	`REG_RD
(
smi
, 
RTL8367B_IA_STATUS_REG
, &
d©a
);

657 i‡(
d©a
 & 
RTL8367B_IA_STATUS_PHY_BUSY
)

658  -
ETIMEDOUT
;

661 
	`REG_WR
(
smi
, 
RTL8367B_IA_WRITE_DATA_REG
, 
vÆ
);

664 
	`REG_WR
(
smi
, 
RTL8367B_IA_ADDRESS_REG
,

665 
	`RTL8367B_INTERNAL_PHY_REG
(
phy_addr
, 
phy_ªg
));

668 
	`REG_WR
(
smi
, 
RTL8367B_IA_CTRL_REG
,

669 
RTL8367B_IA_CTRL_CMD_MASK
 | 
RTL8367B_IA_CTRL_RW_WRITE
);

671 
timeout
 = 5;

673 
	`REG_RD
(
smi
, 
RTL8367B_IA_STATUS_REG
, &
d©a
);

674 i‡((
d©a
 & 
RTL8367B_IA_STATUS_PHY_BUSY
) == 0)

677 i‡(
timeout
--) {

678 
	`dev_îr
(
smi
->
∑ª¡
, "phy writeÅimed out\n");

679  -
ETIMEDOUT
;

682 
	`udñay
(1);

686 
	}
}

688 
	$πl8367b_öô_ªgs
(
πl8366_smi
 *
smi
)

690 c⁄° 
πl8367b_öôvÆ
 *
öôvÆs
;

691 
u32
 
chù_vî
;

692 
u32
 
ævid
;

693 
cou¡
;

694 
îr
;

696 
	`REG_WR
(
smi
, 
RTL8367B_RTL_MAGIC_ID_REG
, 
RTL8367B_RTL_MAGIC_ID_VAL
);

697 
	`REG_RD
(
smi
, 
RTL8367B_CHIP_VER_REG
, &
chù_vî
);

699 
ævid
 = (
chù_vî
 >> 
RTL8367B_CHIP_VER_RLVID_SHIFT
) &

700 
RTL8367B_CHIP_VER_RLVID_MASK
;

702 
ævid
) {

704 
öôvÆs
 = 
πl8367r_vb_öôvÆs_0
;

705 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367r_vb_öôvÆs_0
);

709 
öôvÆs
 = 
πl8367r_vb_öôvÆs_1
;

710 
cou¡
 = 
	`ARRAY_SIZE
(
πl8367r_vb_öôvÆs_1
);

714 
	`dev_îr
(
smi
->
∑ª¡
, "unknowÑlvid %u\n", 
ævid
);

715  -
ENODEV
;

720  
	`πl8367b_wrôe_öôvÆs
(
smi
, 
öôvÆs
, 
cou¡
);

721 
	}
}

723 
	$πl8367b_ª£t_chù
(
πl8366_smi
 *
smi
)

725 
timeout
 = 10;

726 
îr
;

727 
u32
 
d©a
;

729 
	`REG_WR
(
smi
, 
RTL8367B_CHIP_RESET_REG
, 
RTL8367B_CHIP_RESET_HW
);

730 
	`m¶ìp
(
RTL8367B_RESET_DELAY
);

733 
	`REG_RD
(
smi
, 
RTL8367B_CHIP_RESET_REG
, &
d©a
);

734 i‡(!(
d©a
 & 
RTL8367B_CHIP_RESET_HW
))

737 
	`m¶ìp
(1);

738 } --
timeout
);

740 i‡(!
timeout
) {

741 
	`dev_îr
(
smi
->
∑ª¡
, "chipÑesetÅimed out\n");

742  -
ETIMEDOUT
;

746 
	}
}

748 
	$πl8367b_extif_£t_mode
(
πl8366_smi
 *
smi
, 
id
,

749 
πl8367_extif_mode
 
mode
)

751 
îr
;

754 
mode
) {

755 
RTL8367_EXTIF_MODE_RGMII
:

756 
RTL8367_EXTIF_MODE_RGMII_33V
:

757 
	`REG_WR
(
smi
, 
RTL8367B_CHIP_DEBUG0_REG
, 0x0367);

758 
	`REG_WR
(
smi
, 
RTL8367B_CHIP_DEBUG1_REG
, 0x7777);

761 
RTL8367_EXTIF_MODE_TMII_MAC
:

762 
RTL8367_EXTIF_MODE_TMII_PHY
:

763 
	`REG_RMW
(
smi
, 
RTL8367B_BYPASS_LINE_RATE_REG
,

764 
	`BIT
((
id
 + 1) % 2), BIT((id + 1) % 2));

767 
RTL8367_EXTIF_MODE_GMII
:

768 
	`REG_RMW
(
smi
, 
RTL8367B_CHIP_DEBUG0_REG
,

769 
	`RTL8367B_CHIP_DEBUG0_DUMMY0
(
id
),

770 
	`RTL8367B_CHIP_DEBUG0_DUMMY0
(
id
));

771 
	`REG_RMW
(
smi
, 
	`RTL8367B_EXT_RGMXF_REG
(
id
), 
	`BIT
(6), BIT(6));

774 
RTL8367_EXTIF_MODE_MII_MAC
:

775 
RTL8367_EXTIF_MODE_MII_PHY
:

776 
RTL8367_EXTIF_MODE_DISABLED
:

777 
	`REG_RMW
(
smi
, 
RTL8367B_BYPASS_LINE_RATE_REG
,

778 
	`BIT
((
id
 + 1) % 2), 0);

779 
	`REG_RMW
(
smi
, 
	`RTL8367B_EXT_RGMXF_REG
(
id
), 
	`BIT
(6), 0);

783 
	`dev_îr
(
smi
->
∑ª¡
,

784 "övÆid modêf‹Éxã∫Æ i¡îÁ˚ %d\n", 
id
);

785  -
EINVAL
;

788 
	`REG_RMW
(
smi
, 
RTL8367B_DIS_REG
,

789 
RTL8367B_DIS_RGMII_MASK
 << 
	`RTL8367B_DIS_RGMII_SHIFT
(
id
),

790 
mode
 << 
	`RTL8367B_DIS_RGMII_SHIFT
(
id
));

793 
	}
}

795 
	$πl8367b_extif_£t_f‹˚
(
πl8366_smi
 *
smi
, 
id
,

796 
πl8367_p‹t_abûôy
 *
∑
)

798 
u32
 
mask
;

799 
u32
 
vÆ
;

800 
îr
;

802 
mask
 = (
RTL8367B_DI_FORCE_MODE
 |

803 
RTL8367B_DI_FORCE_NWAY
 |

804 
RTL8367B_DI_FORCE_TXPAUSE
 |

805 
RTL8367B_DI_FORCE_RXPAUSE
 |

806 
RTL8367B_DI_FORCE_LINK
 |

807 
RTL8367B_DI_FORCE_DUPLEX
 |

808 
RTL8367B_DI_FORCE_SPEED_MASK
);

810 
vÆ
 = 
∑
->
•ìd
;

811 
vÆ
 |
∑
->
f‹˚_mode
 ? 
RTL8367B_DI_FORCE_MODE
 : 0;

812 
vÆ
 |
∑
->
nway
 ? 
RTL8367B_DI_FORCE_NWAY
 : 0;

813 
vÆ
 |
∑
->
tx∑u£
 ? 
RTL8367B_DI_FORCE_TXPAUSE
 : 0;

814 
vÆ
 |
∑
->
rx∑u£
 ? 
RTL8367B_DI_FORCE_RXPAUSE
 : 0;

815 
vÆ
 |
∑
->
lök
 ? 
RTL8367B_DI_FORCE_LINK
 : 0;

816 
vÆ
 |
∑
->
du∂ex
 ? 
RTL8367B_DI_FORCE_DUPLEX
 : 0;

818 
	`REG_RMW
(
smi
, 
	`RTL8367B_DI_FORCE_REG
(
id
), 
mask
, 
vÆ
);

821 
	}
}

823 
	$πl8367b_extif_£t_rgmii_dñay
(
πl8366_smi
 *
smi
, 
id
,

824 
txdñay
, 
rxdñay
)

826 
u32
 
mask
;

827 
u32
 
vÆ
;

828 
îr
;

830 
mask
 = (
RTL8367B_EXT_RGMXF_RXDELAY_MASK
 |

831 (
RTL8367B_EXT_RGMXF_TXDELAY_MASK
 <<

832 
RTL8367B_EXT_RGMXF_TXDELAY_SHIFT
));

834 
vÆ
 = 
rxdñay
;

835 
vÆ
 |
txdñay
 << 
RTL8367B_EXT_RGMXF_TXDELAY_SHIFT
;

837 
	`REG_RMW
(
smi
, 
	`RTL8367B_EXT_RGMXF_REG
(
id
), 
mask
, 
vÆ
);

840 
	}
}

842 
	$πl8367b_extif_öô
(
πl8366_smi
 *
smi
, 
id
,

843 
πl8367_extif_c⁄fig
 *
cfg
)

845 
πl8367_extif_mode
 
mode
;

846 
îr
;

848 
mode
 = (
cfg
Ë? cfg->modê: 
RTL8367_EXTIF_MODE_DISABLED
;

850 
îr
 = 
	`πl8367b_extif_£t_mode
(
smi
, 
id
, 
mode
);

851 i‡(
îr
)

852  
îr
;

854 i‡(
mode
 !
RTL8367_EXTIF_MODE_DISABLED
) {

855 
îr
 = 
	`πl8367b_extif_£t_f‹˚
(
smi
, 
id
, &
cfg
->
abûôy
);

856 i‡(
îr
)

857  
îr
;

859 
îr
 = 
	`πl8367b_extif_£t_rgmii_dñay
(
smi
, 
id
, 
cfg
->
txdñay
,

860 
cfg
->
rxdñay
);

861 i‡(
îr
)

862  
îr
;

866 
	}
}

868 #ifde‡
CONFIG_OF


869 
	$πl8367b_extif_öô_of
(
πl8366_smi
 *
smi
, 
id
,

870 c⁄° *
«me
)

872 
πl8367_extif_c⁄fig
 *
cfg
;

873 c⁄° 
__be32
 *
¥›
;

874 
size
;

875 
îr
;

877 
¥›
 = 
	`of_gë_¥›îty
(
smi
->
∑ª¡
->
of_node
, 
«me
, &
size
);

878 i‡(!
¥›
)

879  
	`πl8367b_extif_öô
(
smi
, 
id
, 
NULL
);

881 i‡(
size
 !(9 * (*
¥›
))) {

882 
	`dev_îr
(
smi
->
∑ª¡
, "%†¥›îty i†övÆid\n", 
«me
);

883  -
EINVAL
;

886 
cfg
 = 
	`kzÆloc
((
πl8367_extif_c⁄fig
), 
GFP_KERNEL
);

887 i‡(!
cfg
)

888  -
ENOMEM
;

890 
cfg
->
txdñay
 = 
	`be32_to_˝up
(
¥›
++);

891 
cfg
->
rxdñay
 = 
	`be32_to_˝up
(
¥›
++);

892 
cfg
->
mode
 = 
	`be32_to_˝up
(
¥›
++);

893 
cfg
->
abûôy
.
f‹˚_mode
 = 
	`be32_to_˝up
(
¥›
++);

894 
cfg
->
abûôy
.
tx∑u£
 = 
	`be32_to_˝up
(
¥›
++);

895 
cfg
->
abûôy
.
rx∑u£
 = 
	`be32_to_˝up
(
¥›
++);

896 
cfg
->
abûôy
.
lök
 = 
	`be32_to_˝up
(
¥›
++);

897 
cfg
->
abûôy
.
du∂ex
 = 
	`be32_to_˝up
(
¥›
++);

898 
cfg
->
abûôy
.
•ìd
 = 
	`be32_to_˝up
(
¥›
++);

900 
îr
 = 
	`πl8367b_extif_öô
(
smi
, 
id
, 
cfg
);

901 
	`k‰ì
(
cfg
);

903  
îr
;

904 
	}
}

906 
	$πl8367b_extif_öô_of
(
πl8366_smi
 *
smi
, 
id
,

907 c⁄° *
«me
)

909  -
EINVAL
;

910 
	}
}

913 
	$πl8367b_£tup
(
πl8366_smi
 *
smi
)

915 
πl8367_∂©f‹m_d©a
 *
pd©a
;

916 
îr
;

917 
i
;

919 
pd©a
 = 
smi
->
∑ª¡
->
∂©f‹m_d©a
;

921 
îr
 = 
	`πl8367b_öô_ªgs
(
smi
);

922 i‡(
îr
)

923  
îr
;

926 i‡(
smi
->
∑ª¡
->
of_node
) {

927 
îr
 = 
	`πl8367b_extif_öô_of
(
smi
, 0, "realtek,extif0");

928 i‡(
îr
)

929  
îr
;

931 
îr
 = 
	`πl8367b_extif_öô_of
(
smi
, 1, "realtek,extif1");

932 i‡(
îr
)

933  
îr
;

935 
îr
 = 
	`πl8367b_extif_öô
(
smi
, 0, 
pd©a
->
extif0_cfg
);

936 i‡(
îr
)

937  
îr
;

939 
îr
 = 
	`πl8367b_extif_öô
(
smi
, 1, 
pd©a
->
extif1_cfg
);

940 i‡(
îr
)

941  
îr
;

945 
	`REG_RMW
(
smi
, 
RTL8367B_SWC0_REG
, 
RTL8367B_SWC0_MAX_LENGTH_MASK
,

946 
RTL8367B_SWC0_MAX_LENGTH_1536
);

952 
	`REG_WR
(
smi
, 
RTL8367B_VLAN_INGRESS_REG
, 
RTL8367B_PORTS_ALL
);

957 
i
 = 0; i < 
RTL8367B_NUM_PORTS
; i++)

958 
	`REG_RMW
(
smi
,

959 
	`RTL8367B_PORT_MISC_CFG_REG
(
i
),

960 
RTL8367B_PORT_MISC_CFG_EGRESS_MODE_MASK
 <<

961 
RTL8367B_PORT_MISC_CFG_EGRESS_MODE_SHIFT
,

962 
RTL8367B_PORT_MISC_CFG_EGRESS_MODE_ORIGINAL
 <<

963 
RTL8367B_PORT_MISC_CFG_EGRESS_MODE_SHIFT
);

966 
	}
}

968 
	$πl8367b_gë_mib_cou¡î
(
πl8366_smi
 *
smi
, 
cou¡î
,

969 
p‹t
, *
vÆ
)

971 
πl8366_mib_cou¡î
 *
mib
;

972 
off£t
;

973 
i
;

974 
îr
;

975 
u32
 
addr
, 
d©a
;

976 
u64
 
mibvÆue
;

978 i‡(
p‹t
 > 
RTL8367B_NUM_PORTS
 ||

979 
cou¡î
 >
RTL8367B_NUM_MIB_COUNTERS
)

980  -
EINVAL
;

982 
mib
 = &
πl8367b_mib_cou¡îs
[
cou¡î
];

983 
addr
 = 
RTL8367B_MIB_COUNTER_PORT_OFFSET
 * 
p‹t
 + 
mib
->
off£t
;

989 
	`REG_WR
(
smi
, 
RTL8367B_MIB_ADDRESS_REG
, 
addr
 >> 2);

992 
	`REG_RD
(
smi
, 
	`RTL8367B_MIB_CTRL0_REG
(0), &
d©a
);

994 i‡(
d©a
 & 
RTL8367B_MIB_CTRL0_BUSY_MASK
)

995  -
EBUSY
;

997 i‡(
d©a
 & 
RTL8367B_MIB_CTRL0_RESET_MASK
)

998  -
EIO
;

1000 i‡(
mib
->
Àngth
 == 4)

1001 
off£t
 = 3;

1003 
off£t
 = (
mib
->offset + 1) % 4;

1005 
mibvÆue
 = 0;

1006 
i
 = 0; i < 
mib
->
Àngth
; i++) {

1007 
	`REG_RD
(
smi
, 
	`RTL8367B_MIB_COUNTER_REG
(
off£t
 - 
i
), &
d©a
);

1008 
mibvÆue
 = (mibvÆuê<< 16Ë| (
d©a
 & 0xFFFF);

1011 *
vÆ
 = 
mibvÆue
;

1013 
	}
}

1015 
	$πl8367b_gë_vœn_4k
(
πl8366_smi
 *
smi
, 
u32
 
vid
,

1016 
πl8366_vœn_4k
 *
vœn4k
)

1018 
u32
 
d©a
[
RTL8367B_TA_VLAN_NUM_WORDS
];

1019 
îr
;

1020 
i
;

1022 
	`mem£t
(
vœn4k
, '\0', (
πl8366_vœn_4k
));

1024 i‡(
vid
 >
RTL8367B_NUM_VIDS
)

1025  -
EINVAL
;

1028 
	`REG_WR
(
smi
, 
RTL8367B_TA_ADDR_REG
, 
vid
);

1031 
	`REG_WR
(
smi
, 
RTL8367B_TA_CTRL_REG
, 
RTL8367B_TA_CTRL_CVLAN_READ
);

1033 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1034 
	`REG_RD
(
smi
, 
	`RTL8367B_TA_RDDATA_REG
(
i
), &
d©a
[i]);

1036 
vœn4k
->
vid
 = vid;

1037 
vœn4k
->
membî
 = (
d©a
[0] >> 
RTL8367B_TA_VLAN0_MEMBER_SHIFT
) &

1038 
RTL8367B_TA_VLAN0_MEMBER_MASK
;

1039 
vœn4k
->
u¡ag
 = (
d©a
[0] >> 
RTL8367B_TA_VLAN0_UNTAG_SHIFT
) &

1040 
RTL8367B_TA_VLAN0_UNTAG_MASK
;

1041 
vœn4k
->
fid
 = (
d©a
[1] >> 
RTL8367B_TA_VLAN1_FID_SHIFT
) &

1042 
RTL8367B_TA_VLAN1_FID_MASK
;

1045 
	}
}

1047 
	$πl8367b_£t_vœn_4k
(
πl8366_smi
 *
smi
,

1048 c⁄° 
πl8366_vœn_4k
 *
vœn4k
)

1050 
u32
 
d©a
[
RTL8367B_TA_VLAN_NUM_WORDS
];

1051 
îr
;

1052 
i
;

1054 i‡(
vœn4k
->
vid
 >
RTL8367B_NUM_VIDS
 ||

1055 
vœn4k
->
membî
 > 
RTL8367B_TA_VLAN0_MEMBER_MASK
 ||

1056 
vœn4k
->
u¡ag
 > 
RTL8367B_UNTAG_MASK
 ||

1057 
vœn4k
->
fid
 > 
RTL8367B_FIDMAX
)

1058  -
EINVAL
;

1060 
	`mem£t
(
d©a
, 0, (data));

1062 
d©a
[0] = (
vœn4k
->
membî
 & 
RTL8367B_TA_VLAN0_MEMBER_MASK
) <<

1063 
RTL8367B_TA_VLAN0_MEMBER_SHIFT
;

1064 
d©a
[0] |(
vœn4k
->
u¡ag
 & 
RTL8367B_TA_VLAN0_UNTAG_MASK
) <<

1065 
RTL8367B_TA_VLAN0_UNTAG_SHIFT
;

1066 
d©a
[1] = (
vœn4k
->
fid
 & 
RTL8367B_TA_VLAN1_FID_MASK
) <<

1067 
RTL8367B_TA_VLAN1_FID_SHIFT
;

1069 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1070 
	`REG_WR
(
smi
, 
	`RTL8367B_TA_WRDATA_REG
(
i
), 
d©a
[i]);

1073 
	`REG_WR
(
smi
, 
RTL8367B_TA_ADDR_REG
,

1074 
vœn4k
->
vid
 & 
RTL8367B_TA_VLAN_VID_MASK
);

1077 
	`REG_WR
(
smi
, 
RTL8367B_TA_CTRL_REG
, 
RTL8367B_TA_CTRL_CVLAN_WRITE
);

1080 
	}
}

1082 
	$πl8367b_gë_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

1083 
πl8366_vœn_mc
 *
vœnmc
)

1085 
u32
 
d©a
[
RTL8367B_VLAN_MC_NUM_WORDS
];

1086 
îr
;

1087 
i
;

1089 
	`mem£t
(
vœnmc
, '\0', (
πl8366_vœn_mc
));

1091 i‡(
ödex
 >
RTL8367B_NUM_VLANS
)

1092  -
EINVAL
;

1094 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1095 
	`REG_RD
(
smi
, 
	`RTL8367B_VLAN_MC_BASE
(
ödex
Ë+ 
i
, &
d©a
[i]);

1097 
vœnmc
->
membî
 = (
d©a
[0] >> 
RTL8367B_VLAN_MC0_MEMBER_SHIFT
) &

1098 
RTL8367B_VLAN_MC0_MEMBER_MASK
;

1099 
vœnmc
->
fid
 = (
d©a
[1] >> 
RTL8367B_VLAN_MC1_FID_SHIFT
) &

1100 
RTL8367B_VLAN_MC1_FID_MASK
;

1101 
vœnmc
->
vid
 = (
d©a
[3] >> 
RTL8367B_VLAN_MC3_EVID_SHIFT
) &

1102 
RTL8367B_VLAN_MC3_EVID_MASK
;

1105 
	}
}

1107 
	$πl8367b_£t_vœn_mc
(
πl8366_smi
 *
smi
, 
u32
 
ödex
,

1108 c⁄° 
πl8366_vœn_mc
 *
vœnmc
)

1110 
u32
 
d©a
[
RTL8367B_VLAN_MC_NUM_WORDS
];

1111 
îr
;

1112 
i
;

1114 i‡(
ödex
 >
RTL8367B_NUM_VLANS
 ||

1115 
vœnmc
->
vid
 >
RTL8367B_NUM_VIDS
 ||

1116 
vœnmc
->
¥i‹ôy
 > 
RTL8367B_PRIORITYMAX
 ||

1117 
vœnmc
->
membî
 > 
RTL8367B_VLAN_MC0_MEMBER_MASK
 ||

1118 
vœnmc
->
u¡ag
 > 
RTL8367B_UNTAG_MASK
 ||

1119 
vœnmc
->
fid
 > 
RTL8367B_FIDMAX
)

1120  -
EINVAL
;

1122 
d©a
[0] = (
vœnmc
->
membî
 & 
RTL8367B_VLAN_MC0_MEMBER_MASK
) <<

1123 
RTL8367B_VLAN_MC0_MEMBER_SHIFT
;

1124 
d©a
[1] = (
vœnmc
->
fid
 & 
RTL8367B_VLAN_MC1_FID_MASK
) <<

1125 
RTL8367B_VLAN_MC1_FID_SHIFT
;

1126 
d©a
[2] = 0;

1127 
d©a
[3] = (
vœnmc
->
vid
 & 
RTL8367B_VLAN_MC3_EVID_MASK
) <<

1128 
RTL8367B_VLAN_MC3_EVID_SHIFT
;

1130 
i
 = 0; i < 
	`ARRAY_SIZE
(
d©a
); i++)

1131 
	`REG_WR
(
smi
, 
	`RTL8367B_VLAN_MC_BASE
(
ödex
Ë+ 
i
, 
d©a
[i]);

1134 
	}
}

1136 
	$πl8367b_gë_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, *
vÆ
)

1138 
u32
 
d©a
;

1139 
îr
;

1141 i‡(
p‹t
 >
RTL8367B_NUM_PORTS
)

1142  -
EINVAL
;

1144 
	`REG_RD
(
smi
, 
	`RTL8367B_VLAN_PVID_CTRL_REG
(
p‹t
), &
d©a
);

1146 *
vÆ
 = (
d©a
 >> 
	`RTL8367B_VLAN_PVID_CTRL_SHIFT
(
p‹t
)) &

1147 
RTL8367B_VLAN_PVID_CTRL_MASK
;

1150 
	}
}

1152 
	$πl8367b_£t_mc_ödex
(
πl8366_smi
 *
smi
, 
p‹t
, 
ödex
)

1154 i‡(
p‹t
 >
RTL8367B_NUM_PORTS
 || 
ödex
 >
RTL8367B_NUM_VLANS
)

1155  -
EINVAL
;

1157  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367B_VLAN_PVID_CTRL_REG
(
p‹t
),

1158 
RTL8367B_VLAN_PVID_CTRL_MASK
 <<

1159 
	`RTL8367B_VLAN_PVID_CTRL_SHIFT
(
p‹t
),

1160 (
ödex
 & 
RTL8367B_VLAN_PVID_CTRL_MASK
) <<

1161 
	`RTL8367B_VLAN_PVID_CTRL_SHIFT
(
p‹t
));

1162 
	}
}

1164 
	$πl8367b_íabÀ_vœn
(
πl8366_smi
 *
smi
, 
íabÀ
)

1166  
	`πl8366_smi_rmwr
(
smi
, 
RTL8367B_VLAN_CTRL_REG
,

1167 
RTL8367B_VLAN_CTRL_ENABLE
,

1168 (
íabÀ
Ë? 
RTL8367B_VLAN_CTRL_ENABLE
 : 0);

1169 
	}
}

1171 
	$πl8367b_íabÀ_vœn4k
(
πl8366_smi
 *
smi
, 
íabÀ
)

1174 
	}
}

1176 
	$πl8367b_is_vœn_vÆid
(
πl8366_smi
 *
smi
, 
vœn
)

1178 
max
 = 
RTL8367B_NUM_VLANS
;

1180 i‡(
smi
->
vœn4k_íabÀd
)

1181 
max
 = 
RTL8367B_NUM_VIDS
 - 1;

1183 i‡(
vœn
 =0 || vœ¿>
max
)

1187 
	}
}

1189 
	$πl8367b_íabÀ_p‹t
(
πl8366_smi
 *
smi
, 
p‹t
, 
íabÀ
)

1191 
îr
;

1193 
	`REG_WR
(
smi
, 
	`RTL8367B_PORT_ISOLATION_REG
(
p‹t
),

1194 (
íabÀ
Ë? 
RTL8367B_PORTS_ALL
 : 0);

1197 
	}
}

1199 
	$πl8367b_sw_ª£t_mibs
(
swôch_dev
 *
dev
,

1200 c⁄° 
swôch_©å
 *
©å
,

1201 
swôch_vÆ
 *
vÆ
)

1203 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1205  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367B_MIB_CTRL0_REG
(0), 0,

1206 
RTL8367B_MIB_CTRL0_GLOBAL_RESET_MASK
);

1207 
	}
}

1209 
	$πl8367b_sw_gë_p‹t_lök
(
swôch_dev
 *
dev
,

1210 
p‹t
,

1211 
swôch_p‹t_lök
 *
lök
)

1213 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1214 
u32
 
d©a
 = 0;

1215 
u32
 
•ìd
;

1217 i‡(
p‹t
 >
RTL8367B_NUM_PORTS
)

1218  -
EINVAL
;

1220 
	`πl8366_smi_ªad_ªg
(
smi
, 
	`RTL8367B_PORT_STATUS_REG
(
p‹t
), &
d©a
);

1222 
lök
->lök = !!(
d©a
 & 
RTL8367B_PORT_STATUS_LINK
);

1223 i‡(!
lök
->link)

1226 
lök
->
du∂ex
 = !!(
d©a
 & 
RTL8367B_PORT_STATUS_DUPLEX
);

1227 
lök
->
rx_Êow
 = !!(
d©a
 & 
RTL8367B_PORT_STATUS_RXPAUSE
);

1228 
lök
->
tx_Êow
 = !!(
d©a
 & 
RTL8367B_PORT_STATUS_TXPAUSE
);

1229 
lök
->
™eg
 = !!(
d©a
 & 
RTL8367B_PORT_STATUS_NWAY
);

1231 
•ìd
 = (
d©a
 & 
RTL8367B_PORT_STATUS_SPEED_MASK
);

1232 
•ìd
) {

1234 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

1237 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

1240 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

1243 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

1248 
	}
}

1250 
	$πl8367b_sw_gë_max_Àngth
(
swôch_dev
 *
dev
,

1251 c⁄° 
swôch_©å
 *
©å
,

1252 
swôch_vÆ
 *
vÆ
)

1254 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1255 
u32
 
d©a
;

1257 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367B_SWC0_REG
, &
d©a
);

1258 
vÆ
->
vÆue
.
i
 = (
d©a
 & 
RTL8367B_SWC0_MAX_LENGTH_MASK
) >>

1259 
RTL8367B_SWC0_MAX_LENGTH_SHIFT
;

1262 
	}
}

1264 
	$πl8367b_sw_£t_max_Àngth
(
swôch_dev
 *
dev
,

1265 c⁄° 
swôch_©å
 *
©å
,

1266 
swôch_vÆ
 *
vÆ
)

1268 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1269 
u32
 
max_Àn
;

1271 
vÆ
->
vÆue
.
i
) {

1273 
max_Àn
 = 
RTL8367B_SWC0_MAX_LENGTH_1522
;

1276 
max_Àn
 = 
RTL8367B_SWC0_MAX_LENGTH_1536
;

1279 
max_Àn
 = 
RTL8367B_SWC0_MAX_LENGTH_1552
;

1282 
max_Àn
 = 
RTL8367B_SWC0_MAX_LENGTH_16000
;

1285  -
EINVAL
;

1288  
	`πl8366_smi_rmwr
(
smi
, 
RTL8367B_SWC0_REG
,

1289 
RTL8367B_SWC0_MAX_LENGTH_MASK
, 
max_Àn
);

1290 
	}
}

1293 
	$πl8367b_sw_ª£t_p‹t_mibs
(
swôch_dev
 *
dev
,

1294 c⁄° 
swôch_©å
 *
©å
,

1295 
swôch_vÆ
 *
vÆ
)

1297 
πl8366_smi
 *
smi
 = 
	`sw_to_πl8366_smi
(
dev
);

1298 
p‹t
;

1300 
p‹t
 = 
vÆ
->
p‹t_vœn
;

1301 i‡(
p‹t
 >
RTL8367B_NUM_PORTS
)

1302  -
EINVAL
;

1304  
	`πl8366_smi_rmwr
(
smi
, 
	`RTL8367B_MIB_CTRL0_REG
(
p‹t
 / 8), 0,

1305 
	`RTL8367B_MIB_CTRL0_PORT_RESET_MASK
(
p‹t
 % 8));

1306 
	}
}

1308 
	$πl8367b_sw_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

1309 
swôch_p‹t_°©s
 *
°©s
)

1311  (
	`πl8366_sw_gë_p‹t_°©s
(
dev
, 
p‹t
, 
°©s
,

1312 
RTL8367B_MIB_TXB_ID
, 
RTL8367B_MIB_RXB_ID
));

1313 
	}
}

1315 
swôch_©å
 
	gπl8367b_globÆs
[] = {

1317 .
ty≥
 = 
SWITCH_TYPE_INT
,

1318 .
	g«me
 = "enable_vlan",

1319 .
	gdes¸ùti⁄
 = "Enable VLAN mode",

1320 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1321 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1322 .
	gmax
 = 1,

1323 .
	gofs
 = 1

1325 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1326 .
	g«me
 = "enable_vlan4k",

1327 .
	gdes¸ùti⁄
 = "Enable VLAN 4K mode",

1328 .
	g£t
 = 
πl8366_sw_£t_vœn_íabÀ
,

1329 .
	ggë
 = 
πl8366_sw_gë_vœn_íabÀ
,

1330 .
	gmax
 = 1,

1331 .
	gofs
 = 2

1333 .
	gty≥
 = 
SWITCH_TYPE_NOVAL
,

1334 .
	g«me
 = "reset_mibs",

1335 .
	gdes¸ùti⁄
 = "Resetáll MIB counters",

1336 .
	g£t
 = 
πl8367b_sw_ª£t_mibs
,

1338 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1339 .
	g«me
 = "max_length",

1340 .
	gdes¸ùti⁄
 = "Get/SetÅhe maximumÜength of validÖackets"

1342 .
	g£t
 = 
πl8367b_sw_£t_max_Àngth
,

1343 .
	ggë
 = 
πl8367b_sw_gë_max_Àngth
,

1344 .
	gmax
 = 3,

1348 
swôch_©å
 
	gπl8367b_p‹t
[] = {

1350 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

1351 .
	g«me
 = "reset_mib",

1352 .
	gdes¸ùti⁄
 = "Reset singleÖort MIB counters",

1353 .
	g£t
 = 
πl8367b_sw_ª£t_p‹t_mibs
,

1355 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

1356 .
	g«me
 = "mib",

1357 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

1358 .
	gmax
 = 33,

1359 .
	g£t
 = 
NULL
,

1360 .
	ggë
 = 
πl8366_sw_gë_p‹t_mib
,

1364 
swôch_©å
 
	gπl8367b_vœn
[] = {

1366 .
ty≥
 = 
SWITCH_TYPE_STRING
,

1367 .
	g«me
 = "info",

1368 .
	gdes¸ùti⁄
 = "Get vlan information",

1369 .
	gmax
 = 1,

1370 .
	g£t
 = 
NULL
,

1371 .
	ggë
 = 
πl8366_sw_gë_vœn_öfo
,

1375 c⁄° 
swôch_dev_›s
 
	gπl8367b_sw_›s
 = {

1376 .
©å_globÆ
 = {

1377 .
©å
 = 
πl8367b_globÆs
,

1378 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367b_globÆs
),

1380 .
	g©å_p‹t
 = {

1381 .
©å
 = 
πl8367b_p‹t
,

1382 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367b_p‹t
),

1384 .
	g©å_vœn
 = {

1385 .
©å
 = 
πl8367b_vœn
,

1386 .
	gn_©å
 = 
ARRAY_SIZE
(
πl8367b_vœn
),

1389 .
	ggë_vœn_p‹ts
 = 
πl8366_sw_gë_vœn_p‹ts
,

1390 .
	g£t_vœn_p‹ts
 = 
πl8366_sw_£t_vœn_p‹ts
,

1391 .
	ggë_p‹t_pvid
 = 
πl8366_sw_gë_p‹t_pvid
,

1392 .
	g£t_p‹t_pvid
 = 
πl8366_sw_£t_p‹t_pvid
,

1393 .
	gª£t_swôch
 = 
πl8366_sw_ª£t_swôch
,

1394 .
	ggë_p‹t_lök
 = 
πl8367b_sw_gë_p‹t_lök
,

1395 .
	ggë_p‹t_°©s
 = 
πl8367b_sw_gë_p‹t_°©s
,

1398 
	$πl8367b_swôch_öô
(
πl8366_smi
 *
smi
)

1400 
swôch_dev
 *
dev
 = &
smi
->
sw_dev
;

1401 
îr
;

1403 
dev
->
«me
 = "RTL8367B";

1404 
dev
->
˝u_p‹t
 = 
smi
->cpu_port;

1405 
dev
->
p‹ts
 = 
RTL8367B_NUM_PORTS
;

1406 
dev
->
vœns
 = 
RTL8367B_NUM_VIDS
;

1407 
dev
->
›s
 = &
πl8367b_sw_›s
;

1408 
dev
->
Æüs
 = 
	`dev_«me
(
smi
->
∑ª¡
);

1410 
îr
 = 
	`ªgi°î_swôch
(
dev
, 
NULL
);

1411 i‡(
îr
)

1412 
	`dev_îr
(
smi
->
∑ª¡
, "switchÑegistration failed\n");

1414  
îr
;

1415 
	}
}

1417 
	$πl8367b_swôch_˛ónup
(
πl8366_smi
 *
smi
)

1419 
	`uƒegi°î_swôch
(&
smi
->
sw_dev
);

1420 
	}
}

1422 
	$πl8367b_mii_ªad
(
mii_bus
 *
bus
, 
addr
, 
ªg
)

1424 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1425 
u32
 
vÆ
 = 0;

1426 
îr
;

1428 
îr
 = 
	`πl8367b_ªad_phy_ªg
(
smi
, 
addr
, 
ªg
, &
vÆ
);

1429 i‡(
îr
)

1432  
vÆ
;

1433 
	}
}

1435 
	$πl8367b_mii_wrôe
(
mii_bus
 *
bus
, 
addr
, 
ªg
, 
u16
 
vÆ
)

1437 
πl8366_smi
 *
smi
 = 
bus
->
¥iv
;

1438 
u32
 
t
;

1439 
îr
;

1441 
îr
 = 
	`πl8367b_wrôe_phy_ªg
(
smi
, 
addr
, 
ªg
, 
vÆ
);

1442 i‡(
îr
)

1443  
îr
;

1446 (Ë
	`πl8367b_ªad_phy_ªg
(
smi
, 
addr
, 
ªg
, &
t
);

1448  
îr
;

1449 
	}
}

1451 
	$πl8367b_dëe˘
(
πl8366_smi
 *
smi
)

1453 c⁄° *
chù_«me
;

1454 
u32
 
chù_num
;

1455 
u32
 
chù_vî
;

1456 
u32
 
chù_mode
;

1457 
ªt
;

1460 
	`πl8366_smi_wrôe_ªg
(
smi
, 
RTL8367B_RTL_MAGIC_ID_REG
,

1461 
RTL8367B_RTL_MAGIC_ID_VAL
);

1463 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367B_CHIP_NUMBER_REG
, &
chù_num
);

1464 i‡(
ªt
) {

1465 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead %sÑegister\n",

1467  
ªt
;

1470 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367B_CHIP_VER_REG
, &
chù_vî
);

1471 i‡(
ªt
) {

1472 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead %sÑegister\n",

1474  
ªt
;

1477 
ªt
 = 
	`πl8366_smi_ªad_ªg
(
smi
, 
RTL8367B_CHIP_MODE_REG
, &
chù_mode
);

1478 i‡(
ªt
) {

1479 
	`dev_îr
(
smi
->
∑ª¡
, "unableÅoÑead %sÑegister\n",

1481  
ªt
;

1484 
chù_vî
) {

1486 
chù_«me
 = "8367RB";

1489 
chù_«me
 = "8367R-VB";

1492 
	`dev_îr
(
smi
->
∑ª¡
,

1494 
chù_num
, 
chù_vî
, 
chù_mode
);

1495  -
ENODEV
;

1498 
	`dev_öfo
(
smi
->
∑ª¡
, "RTL%†chù found\n", 
chù_«me
);

1501 
	}
}

1503 
πl8366_smi_›s
 
	gπl8367b_smi_›s
 = {

1504 .
dëe˘
 = 
πl8367b_dëe˘
,

1505 .
	gª£t_chù
 = 
πl8367b_ª£t_chù
,

1506 .
	g£tup
 = 
πl8367b_£tup
,

1508 .
	gmii_ªad
 = 
πl8367b_mii_ªad
,

1509 .
	gmii_wrôe
 = 
πl8367b_mii_wrôe
,

1511 .
	ggë_vœn_mc
 = 
πl8367b_gë_vœn_mc
,

1512 .
	g£t_vœn_mc
 = 
πl8367b_£t_vœn_mc
,

1513 .
	ggë_vœn_4k
 = 
πl8367b_gë_vœn_4k
,

1514 .
	g£t_vœn_4k
 = 
πl8367b_£t_vœn_4k
,

1515 .
	ggë_mc_ödex
 = 
πl8367b_gë_mc_ödex
,

1516 .
	g£t_mc_ödex
 = 
πl8367b_£t_mc_ödex
,

1517 .
	ggë_mib_cou¡î
 = 
πl8367b_gë_mib_cou¡î
,

1518 .
	gis_vœn_vÆid
 = 
πl8367b_is_vœn_vÆid
,

1519 .
	gíabÀ_vœn
 = 
πl8367b_íabÀ_vœn
,

1520 .
	gíabÀ_vœn4k
 = 
πl8367b_íabÀ_vœn4k
,

1521 .
	gíabÀ_p‹t
 = 
πl8367b_íabÀ_p‹t
,

1524 
	$πl8367b_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1526 
πl8366_smi
 *
smi
;

1527 
îr
;

1529 
smi
 = 
	`πl8366_smi_¥obe
(
pdev
);

1530 i‡(
	`IS_ERR
(
smi
))

1531  
	`PTR_ERR
(
smi
);

1533 
smi
->
˛k_dñay
 = 1500;

1534 
smi
->
cmd_ªad
 = 0xb9;

1535 
smi
->
cmd_wrôe
 = 0xb8;

1536 
smi
->
›s
 = &
πl8367b_smi_›s
;

1537 
smi
->
num_p‹ts
 = 
RTL8367B_NUM_PORTS
;

1538 i‡(
	`of_¥›îty_ªad_u32
(
pdev
->
dev
.
of_node
, "˝u_p‹t", &
smi
->
˝u_p‹t
)

1539 || 
smi
->
˝u_p‹t
 >smi->
num_p‹ts
)

1540 
smi
->
˝u_p‹t
 = 
RTL8367B_CPU_PORT_NUM
;

1541 
smi
->
num_vœn_mc
 = 
RTL8367B_NUM_VLANS
;

1542 
smi
->
mib_cou¡îs
 = 
πl8367b_mib_cou¡îs
;

1543 
smi
->
num_mib_cou¡îs
 = 
	`ARRAY_SIZE
(
πl8367b_mib_cou¡îs
);

1545 
îr
 = 
	`πl8366_smi_öô
(
smi
);

1546 i‡(
îr
)

1547 
îr_‰ì_smi
;

1549 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
smi
);

1551 
îr
 = 
	`πl8367b_swôch_öô
(
smi
);

1552 i‡(
îr
)

1553 
îr_˛ór_drvd©a
;

1557 
îr_˛ór_drvd©a
:

1558 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1559 
	`πl8366_smi_˛ónup
(
smi
);

1560 
îr_‰ì_smi
:

1561 
	`k‰ì
(
smi
);

1562  
îr
;

1563 
	}
}

1565 
	$πl8367b_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1567 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1569 i‡(
smi
) {

1570 
	`πl8367b_swôch_˛ónup
(
smi
);

1571 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1572 
	`πl8366_smi_˛ónup
(
smi
);

1573 
	`k‰ì
(
smi
);

1577 
	}
}

1579 
	$πl8367b_shutdown
(
∂©f‹m_devi˚
 *
pdev
)

1581 
πl8366_smi
 *
smi
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1583 i‡(
smi
)

1584 
	`πl8367b_ª£t_chù
(
smi
);

1585 
	}
}

1587 #ifde‡
CONFIG_OF


1588 c⁄° 
of_devi˚_id
 
	gπl8367b_m©ch
[] = {

1589 { .
com∑tibÀ
 = "realtek,rtl8367b" },

1592 
MODULE_DEVICE_TABLE
(
of
, 
πl8367b_m©ch
);

1595 
∂©f‹m_drivî
 
	gπl8367b_drivî
 = {

1596 .
drivî
 = {

1597 .
«me
 = 
RTL8367B_DRIVER_NAME
,

1598 .
	gow√r
 = 
THIS_MODULE
,

1599 #ifde‡
CONFIG_OF


1600 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
πl8367b_m©ch
),

1603 .
	g¥obe
 = 
πl8367b_¥obe
,

1604 .
	gªmove
 = 
πl8367b_ªmove
,

1605 .
	gshutdown
 = 
πl8367b_shutdown
,

1608 
moduÀ_∂©f‹m_drivî
(
πl8367b_drivî
);

1610 
MODULE_DESCRIPTION
("Realtek RTL8367BÉthernet switch driver");

1611 
MODULE_AUTHOR
("Gabor Juhos <juhosg@openwrt.org>");

1612 
MODULE_LICENSE
("GPL v2");

1613 
MODULE_ALIAS
("∂©f‹m:" 
RTL8367B_DRIVER_NAME
);

	@linux/generic/files/drivers/net/phy/swconfig.c

17 
	~<löux/ty≥s.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/li°.h
>

21 
	~<löux/if.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<löux/ˇ∑bûôy.h
>

24 
	~<löux/skbuff.h
>

25 
	~<löux/swôch.h
>

26 
	~<löux/of.h
>

27 
	~<löux/vîsi⁄.h
>

28 
	~<u≠i/löux/mii.h
>

30 
	#SWCONFIG_DEVNAME
 "swôch%d"

	)

32 
	~"swc⁄fig_Àds.c
"

34 
MODULE_AUTHOR
("Felix Fietkau <nbd@nbd.name>");

35 
MODULE_LICENSE
("GPL");

37 
	gswdev_id
;

38 
li°_hód
 
	gswdevs
;

39 
DEFINE_MUTEX
(
swdevs_lock
);

40 
	gswc⁄fig_ˇŒback
;

42 
	sswc⁄fig_ˇŒback
 {

43 
sk_buff
 *
	mmsg
;

44 
gílmsghdr
 *
	mhdr
;

45 
gíl_öfo
 *
	möfo
;

46 
	mcmd
;

49 (*
	mfûl
)(
swc⁄fig_ˇŒback
 *
	mcb
, *
	m¨g
);

52 (*
	m˛o£
)(
swc⁄fig_ˇŒback
 *
	mcb
, *
	m¨g
);

54 
∆©å
 *
	m√°
[4];

55 
	m¨gs
[4];

61 
	$swc⁄fig_gë_vœn_p‹ts
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

62 
swôch_vÆ
 *
vÆ
)

64 
ªt
;

65 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
)

66  -
EINVAL
;

68 i‡(!
dev
->
›s
->
gë_vœn_p‹ts
)

69  -
EOPNOTSUPP
;

71 
ªt
 = 
dev
->
›s
->
	`gë_vœn_p‹ts
(dev, 
vÆ
);

72  
ªt
;

73 
	}
}

76 
	$swc⁄fig_£t_vœn_p‹ts
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

77 
swôch_vÆ
 *
vÆ
)

79 
swôch_p‹t
 *
p‹ts
 = 
vÆ
->
vÆue
.ports;

80 c⁄° 
swôch_dev_›s
 *
›s
 = 
dev
->ops;

81 
i
;

83 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
)

84  -
EINVAL
;

87 i‡(
vÆ
->
Àn
 > 
dev
->
p‹ts
)

88  -
EINVAL
;

90 i‡(!
›s
->
£t_vœn_p‹ts
)

91  -
EOPNOTSUPP
;

93 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

94 i‡(
p‹ts
[
i
].
id
 >
dev
->ports)

95  -
EINVAL
;

97 i‡(
›s
->
£t_p‹t_pvid
 &&

98 !(
p‹ts
[
i
].
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)))

99 
›s
->
	`£t_p‹t_pvid
(
dev
, 
p‹ts
[
i
].
id
, 
vÆ
->
p‹t_vœn
);

102  
›s
->
	`£t_vœn_p‹ts
(
dev
, 
vÆ
);

103 
	}
}

106 
	$swc⁄fig_£t_pvid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

107 
swôch_vÆ
 *
vÆ
)

109 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
p‹ts
)

110  -
EINVAL
;

112 i‡(!
dev
->
›s
->
£t_p‹t_pvid
)

113  -
EOPNOTSUPP
;

115  
dev
->
›s
->
	`£t_p‹t_pvid
(dev, 
vÆ
->
p‹t_vœn
, vÆ->
vÆue
.
i
);

116 
	}
}

119 
	$swc⁄fig_gë_pvid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

120 
swôch_vÆ
 *
vÆ
)

122 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
p‹ts
)

123  -
EINVAL
;

125 i‡(!
dev
->
›s
->
gë_p‹t_pvid
)

126  -
EOPNOTSUPP
;

128  
dev
->
›s
->
	`gë_p‹t_pvid
(dev, 
vÆ
->
p‹t_vœn
, &vÆ->
vÆue
.
i
);

129 
	}
}

132 
	$swc⁄fig_£t_lök
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

133 
swôch_vÆ
 *
vÆ
)

135 i‡(!
dev
->
›s
->
£t_p‹t_lök
)

136  -
EOPNOTSUPP
;

138  
dev
->
›s
->
	`£t_p‹t_lök
(dev, 
vÆ
->
p‹t_vœn
, vÆ->
vÆue
.
lök
);

139 
	}
}

142 
	$swc⁄fig_gë_lök
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

143 
swôch_vÆ
 *
vÆ
)

145 
swôch_p‹t_lök
 *
lök
 = 
vÆ
->
vÆue
.link;

147 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
p‹ts
)

148  -
EINVAL
;

150 i‡(!
dev
->
›s
->
gë_p‹t_lök
)

151  -
EOPNOTSUPP
;

153 
	`mem£t
(
lök
, 0, (*link));

154  
dev
->
›s
->
	`gë_p‹t_lök
(dev, 
vÆ
->
p‹t_vœn
, 
lök
);

155 
	}
}

158 
	$swc⁄fig_≠∂y_c⁄fig
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

159 
swôch_vÆ
 *
vÆ
)

162 i‡(!
dev
->
›s
->
≠∂y_c⁄fig
)

165  
dev
->
›s
->
	`≠∂y_c⁄fig
(dev);

166 
	}
}

169 
	$swc⁄fig_ª£t_swôch
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

170 
swôch_vÆ
 *
vÆ
)

173 i‡(!
dev
->
›s
->
ª£t_swôch
)

176  
dev
->
›s
->
	`ª£t_swôch
(dev);

177 
	}
}

179 
	eglobÆ_deÁu…s
 {

180 
	mGLOBAL_APPLY
,

181 
	mGLOBAL_RESET
,

184 
	evœn_deÁu…s
 {

185 
	mVLAN_PORTS
,

188 
	ep‹t_deÁu…s
 {

189 
	mPORT_PVID
,

190 
	mPORT_LINK
,

193 
swôch_©å
 
	gdeÁu…_globÆ
[] = {

194 [
GLOBAL_APPLY
] = {

195 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

196 .
	g«me
 = "apply",

197 .
	gdes¸ùti⁄
 = "Activate changes inÅhe hardware",

198 .
	g£t
 = 
swc⁄fig_≠∂y_c⁄fig
,

200 [
GLOBAL_RESET
] = {

201 .
ty≥
 = 
SWITCH_TYPE_NOVAL
,

202 .
	g«me
 = "reset",

203 .
	gdes¸ùti⁄
 = "ResetÅhe switch",

204 .
	g£t
 = 
swc⁄fig_ª£t_swôch
,

208 
swôch_©å
 
	gdeÁu…_p‹t
[] = {

209 [
PORT_PVID
] = {

210 .
ty≥
 = 
SWITCH_TYPE_INT
,

211 .
	g«me
 = "pvid",

212 .
	gdes¸ùti⁄
 = "Primary VLAN ID",

213 .
	g£t
 = 
swc⁄fig_£t_pvid
,

214 .
	ggë
 = 
swc⁄fig_gë_pvid
,

216 [
PORT_LINK
] = {

217 .
ty≥
 = 
SWITCH_TYPE_LINK
,

218 .
	g«me
 = "link",

219 .
	gdes¸ùti⁄
 = "GetÖortÜink information",

220 .
	g£t
 = 
swc⁄fig_£t_lök
,

221 .
	ggë
 = 
swc⁄fig_gë_lök
,

225 
swôch_©å
 
	gdeÁu…_vœn
[] = {

226 [
VLAN_PORTS
] = {

227 .
ty≥
 = 
SWITCH_TYPE_PORTS
,

228 .
	g«me
 = "ports",

229 .
	gdes¸ùti⁄
 = "VLANÖort mapping",

230 .
	g£t
 = 
swc⁄fig_£t_vœn_p‹ts
,

231 .
	ggë
 = 
swc⁄fig_gë_vœn_p‹ts
,

235 c⁄° 
swôch_©å
 *

236 
	$swc⁄fig_föd_©å_by_«me
(c⁄° 
swôch_©åli°
 *
Æi°
,

237 c⁄° *
«me
)

239 
i
;

241 
i
 = 0; i < 
Æi°
->
n_©å
; i++)

242 i‡(
	`°rcmp
(
«me
, 
Æi°
->
©å
[
i
].name) == 0)

243  &
Æi°
->
©å
[
i
];

245  
NULL
;

246 
	}
}

248 
	$swc⁄fig_deÁu…s_öô
(
swôch_dev
 *
dev
)

250 c⁄° 
swôch_dev_›s
 *
›s
 = 
dev
->ops;

252 
dev
->
def_globÆ
 = 0;

253 
dev
->
def_vœn
 = 0;

254 
dev
->
def_p‹t
 = 0;

256 i‡(
›s
->
gë_vœn_p‹ts
 || ops->
£t_vœn_p‹ts
)

257 
	`£t_bô
(
VLAN_PORTS
, &
dev
->
def_vœn
);

259 i‡(
›s
->
gë_p‹t_pvid
 || ops->
£t_p‹t_pvid
)

260 
	`£t_bô
(
PORT_PVID
, &
dev
->
def_p‹t
);

262 i‡(
›s
->
gë_p‹t_lök
 &&

263 !
	`swc⁄fig_föd_©å_by_«me
(&
›s
->
©å_p‹t
, "link"))

264 
	`£t_bô
(
PORT_LINK
, &
dev
->
def_p‹t
);

267 
	`£t_bô
(
GLOBAL_APPLY
, &
dev
->
def_globÆ
);

268 
	`£t_bô
(
GLOBAL_RESET
, &
dev
->
def_globÆ
);

269 
	}
}

272 
gíl_Ámûy
 
	gswôch_Ám
;

274 c⁄° 
∆a_pﬁicy
 
	gswôch_pﬁicy
[
SWITCH_ATTR_MAX
+1] = {

275 [
SWITCH_ATTR_ID
] = { .
ty≥
 = 
NLA_U32
 },

276 [
SWITCH_ATTR_OP_ID
] = { .
ty≥
 = 
NLA_U32
 },

277 [
SWITCH_ATTR_OP_PORT
] = { .
ty≥
 = 
NLA_U32
 },

278 [
SWITCH_ATTR_OP_VLAN
] = { .
ty≥
 = 
NLA_U32
 },

279 [
SWITCH_ATTR_OP_VALUE_INT
] = { .
ty≥
 = 
NLA_U32
 },

280 [
SWITCH_ATTR_OP_VALUE_STR
] = { .
ty≥
 = 
NLA_NUL_STRING
 },

281 [
SWITCH_ATTR_OP_VALUE_PORTS
] = { .
ty≥
 = 
NLA_NESTED
 },

282 [
SWITCH_ATTR_TYPE
] = { .
ty≥
 = 
NLA_U32
 },

285 c⁄° 
∆a_pﬁicy
 
	gp‹t_pﬁicy
[
SWITCH_PORT_ATTR_MAX
+1] = {

286 [
SWITCH_PORT_ID
] = { .
ty≥
 = 
NLA_U32
 },

287 [
SWITCH_PORT_FLAG_TAGGED
] = { .
ty≥
 = 
NLA_FLAG
 },

290 
∆a_pﬁicy
 
	glök_pﬁicy
[
SWITCH_LINK_ATTR_MAX
] = {

291 [
SWITCH_LINK_FLAG_DUPLEX
] = { .
ty≥
 = 
NLA_FLAG
 },

292 [
SWITCH_LINK_FLAG_ANEG
] = { .
ty≥
 = 
NLA_FLAG
 },

293 [
SWITCH_LINK_SPEED
] = { .
ty≥
 = 
NLA_U32
 },

296 
ölöe
 

297 
	$swc⁄fig_lock
()

299 
	`muãx_lock
(&
swdevs_lock
);

300 
	}
}

302 
ölöe
 

303 
	$swc⁄fig_u∆ock
()

305 
	`muãx_u∆ock
(&
swdevs_lock
);

306 
	}
}

308 
swôch_dev
 *

309 
	$swc⁄fig_gë_dev
(
gíl_öfo
 *
öfo
)

311 
swôch_dev
 *
dev
 = 
NULL
;

312 
swôch_dev
 *
p
;

313 
id
;

315 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_ID
])

316 
d⁄e
;

318 
id
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
SWITCH_ATTR_ID
]);

319 
	`swc⁄fig_lock
();

320 
	`li°_f‹_óch_íåy
(
p
, &
swdevs
, 
dev_li°
) {

321 i‡(
id
 !
p
->id)

324 
dev
 = 
p
;

327 i‡(
dev
)

328 
	`muãx_lock
(&
dev
->
sw_muãx
);

330 
	`¥_debug
("devi˚ %dÇŸ found\n", 
id
);

331 
	`swc⁄fig_u∆ock
();

332 
d⁄e
:

333  
dev
;

334 
	}
}

336 
ölöe
 

337 
	$swc⁄fig_put_dev
(
swôch_dev
 *
dev
)

339 
	`muãx_u∆ock
(&
dev
->
sw_muãx
);

340 
	}
}

343 
	$swc⁄fig_dump_©å
(
swc⁄fig_ˇŒback
 *
cb
, *
¨g
)

345 
swôch_©å
 *
›
 = 
¨g
;

346 
gíl_öfo
 *
öfo
 = 
cb
->info;

347 
sk_buff
 *
msg
 = 
cb
->msg;

348 
id
 = 
cb
->
¨gs
[0];

349 *
hdr
;

351 
hdr
 = 
	`gílmsg_put
(
msg
, 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, &
swôch_Ám
,

352 
NLM_F_MULTI
, 
SWITCH_CMD_NEW_ATTR
);

353 i‡(
	`IS_ERR
(
hdr
))

356 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_OP_ID
, 
id
))

357 
∆a_put_Áûuª
;

358 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_OP_TYPE
, 
›
->
ty≥
))

359 
∆a_put_Áûuª
;

360 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_OP_NAME
, 
›
->
«me
))

361 
∆a_put_Áûuª
;

362 i‡(
›
->
des¸ùti⁄
)

363 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_OP_DESCRIPTION
,

364 
›
->
des¸ùti⁄
))

365 
∆a_put_Áûuª
;

367 
	`gílmsg_íd
(
msg
, 
hdr
);

368  
msg
->
Àn
;

369 
∆a_put_Áûuª
:

370 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

371  -
EMSGSIZE
;

372 
	}
}

376 
	$swc⁄fig_£nd_mu…ù¨t
(
swc⁄fig_ˇŒback
 *
cb
, *
¨g
)

378 
gíl_öfo
 *
öfo
 = 
cb
->info;

379 
ª°¨t
 = 0;

380 
îr
;

383 i‡(!
cb
->
msg
) {

384 
cb
->
msg
 = 
	`∆msg_√w
(
NLMSG_GOODSIZE
, 
GFP_KERNEL
);

385 i‡(
cb
->
msg
 =
NULL
)

386 
îr‹
;

389 i‡(!(
cb
->
	`fûl
(cb, 
¨g
) < 0))

393 i‡(
ª°¨t
)

394 
îr‹
;

397 
ª°¨t
 = 1;

398 i‡(
cb
->
˛o£
) {

399 i‡(
cb
->
	`˛o£
(cb, 
¨g
) < 0)

400 
îr‹
;

402 
îr
 = 
	`gílmsg_ª∂y
(
cb
->
msg
, 
öfo
);

403 
cb
->
msg
 = 
NULL
;

404 i‡(
îr
 < 0)

405 
îr‹
;

407 } 
ª°¨t
);

411 
îr‹
:

412 i‡(
cb
->
msg
)

413 
	`∆msg_‰ì
(
cb
->
msg
);

415 
	}
}

418 
	$swc⁄fig_li°_©ås
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

420 
gílmsghdr
 *
hdr
 = 
	`∆msg_d©a
(
öfo
->
∆hdr
);

421 c⁄° 
swôch_©åli°
 *
Æi°
;

422 
swôch_dev
 *
dev
;

423 
swc⁄fig_ˇŒback
 
cb
;

424 
îr
 = -
EINVAL
;

425 
i
;

428 
swôch_©å
 *
def_li°
;

429 *
def_a˘ive
;

430 
n_def
;

432 
dev
 = 
	`swc⁄fig_gë_dev
(
öfo
);

433 i‡(!
dev
)

434  -
EINVAL
;

436 
hdr
->
cmd
) {

437 
SWITCH_CMD_LIST_GLOBAL
:

438 
Æi°
 = &
dev
->
›s
->
©å_globÆ
;

439 
def_li°
 = 
deÁu…_globÆ
;

440 
def_a˘ive
 = &
dev
->
def_globÆ
;

441 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_globÆ
);

443 
SWITCH_CMD_LIST_VLAN
:

444 
Æi°
 = &
dev
->
›s
->
©å_vœn
;

445 
def_li°
 = 
deÁu…_vœn
;

446 
def_a˘ive
 = &
dev
->
def_vœn
;

447 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_vœn
);

449 
SWITCH_CMD_LIST_PORT
:

450 
Æi°
 = &
dev
->
›s
->
©å_p‹t
;

451 
def_li°
 = 
deÁu…_p‹t
;

452 
def_a˘ive
 = &
dev
->
def_p‹t
;

453 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_p‹t
);

456 
	`WARN_ON
(1);

457 
out
;

460 
	`mem£t
(&
cb
, 0, (cb));

461 
cb
.
öfo
 = info;

462 
cb
.
fûl
 = 
swc⁄fig_dump_©å
;

463 
i
 = 0; i < 
Æi°
->
n_©å
; i++) {

464 i‡(
Æi°
->
©å
[
i
].
dißbÀd
)

466 
cb
.
¨gs
[0] = 
i
;

467 
îr
 = 
	`swc⁄fig_£nd_mu…ù¨t
(&
cb
, (*Ë&
Æi°
->
©å
[
i
]);

468 i‡(
îr
 < 0)

469 
îr‹
;

473 
i
 = 0; i < 
n_def
; i++) {

474 i‡(!
	`ã°_bô
(
i
, 
def_a˘ive
))

476 
cb
.
¨gs
[0] = 
SWITCH_ATTR_DEFAULTS_OFFSET
 + 
i
;

477 
îr
 = 
	`swc⁄fig_£nd_mu…ù¨t
(&
cb
, (*Ë&
def_li°
[
i
]);

478 i‡(
îr
 < 0)

479 
îr‹
;

481 
	`swc⁄fig_put_dev
(
dev
);

483 i‡(!
cb
.
msg
)

486  
	`gílmsg_ª∂y
(
cb
.
msg
, 
öfo
);

488 
îr‹
:

489 i‡(
cb
.
msg
)

490 
	`∆msg_‰ì
(
cb
.
msg
);

491 
out
:

492 
	`swc⁄fig_put_dev
(
dev
);

493  
îr
;

494 
	}
}

496 c⁄° 
swôch_©å
 *

497 
	$swc⁄fig_lookup_©å
(
swôch_dev
 *
dev
, 
gíl_öfo
 *
öfo
,

498 
swôch_vÆ
 *
vÆ
)

500 
gílmsghdr
 *
hdr
 = 
	`∆msg_d©a
(
öfo
->
∆hdr
);

501 c⁄° 
swôch_©åli°
 *
Æi°
;

502 c⁄° 
swôch_©å
 *
©å
 = 
NULL
;

503 
©å_id
;

506 
swôch_©å
 *
def_li°
;

507 *
def_a˘ive
;

508 
n_def
;

510 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_OP_ID
])

511 
d⁄e
;

513 
hdr
->
cmd
) {

514 
SWITCH_CMD_SET_GLOBAL
:

515 
SWITCH_CMD_GET_GLOBAL
:

516 
Æi°
 = &
dev
->
›s
->
©å_globÆ
;

517 
def_li°
 = 
deÁu…_globÆ
;

518 
def_a˘ive
 = &
dev
->
def_globÆ
;

519 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_globÆ
);

521 
SWITCH_CMD_SET_VLAN
:

522 
SWITCH_CMD_GET_VLAN
:

523 
Æi°
 = &
dev
->
›s
->
©å_vœn
;

524 
def_li°
 = 
deÁu…_vœn
;

525 
def_a˘ive
 = &
dev
->
def_vœn
;

526 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_vœn
);

527 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_OP_VLAN
])

528 
d⁄e
;

529 
vÆ
->
p‹t_vœn
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
SWITCH_ATTR_OP_VLAN
]);

530 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
vœns
)

531 
d⁄e
;

533 
SWITCH_CMD_SET_PORT
:

534 
SWITCH_CMD_GET_PORT
:

535 
Æi°
 = &
dev
->
›s
->
©å_p‹t
;

536 
def_li°
 = 
deÁu…_p‹t
;

537 
def_a˘ive
 = &
dev
->
def_p‹t
;

538 
n_def
 = 
	`ARRAY_SIZE
(
deÁu…_p‹t
);

539 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_OP_PORT
])

540 
d⁄e
;

541 
vÆ
->
p‹t_vœn
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
SWITCH_ATTR_OP_PORT
]);

542 i‡(
vÆ
->
p‹t_vœn
 >
dev
->
p‹ts
)

543 
d⁄e
;

546 
	`WARN_ON
(1);

547 
d⁄e
;

550 i‡(!
Æi°
)

551 
d⁄e
;

553 
©å_id
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
SWITCH_ATTR_OP_ID
]);

554 i‡(
©å_id
 >
SWITCH_ATTR_DEFAULTS_OFFSET
) {

555 
©å_id
 -
SWITCH_ATTR_DEFAULTS_OFFSET
;

556 i‡(
©å_id
 >
n_def
)

557 
d⁄e
;

558 i‡(!
	`ã°_bô
(
©å_id
, 
def_a˘ive
))

559 
d⁄e
;

560 
©å
 = &
def_li°
[
©å_id
];

562 i‡(
©å_id
 >
Æi°
->
n_©å
)

563 
d⁄e
;

564 
©å
 = &
Æi°
->©å[
©å_id
];

567 i‡(
©å
->
dißbÀd
)

568 
©å
 = 
NULL
;

570 
d⁄e
:

571 i‡(!
©å
)

572 
	`¥_debug
("attributeÜookup failed\n");

573 
vÆ
->
©å
 =áttr;

574  
©å
;

575 
	}
}

578 
	$swc⁄fig_∑r£_p‹ts
(
sk_buff
 *
msg
, 
∆©å
 *
hód
,

579 
swôch_vÆ
 *
vÆ
, 
max
)

581 
∆©å
 *
∆a
;

582 
ªm
;

584 
vÆ
->
Àn
 = 0;

585 
	`∆a_f‹_óch_√°ed
(
∆a
, 
hód
, 
ªm
) {

586 
∆©å
 *
tb
[
SWITCH_PORT_ATTR_MAX
+1];

587 
swôch_p‹t
 *
p‹t
;

589 i‡(
vÆ
->
Àn
 >
max
)

590  -
EINVAL
;

592 
p‹t
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
];

594 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,12,0)

595 i‡(
	`∆a_∑r£_√°ed
(
tb
, 
SWITCH_PORT_ATTR_MAX
, 
∆a
,

596 
p‹t_pﬁicy
))

598 i‡(
	`∆a_∑r£_√°ed
(
tb
, 
SWITCH_PORT_ATTR_MAX
, 
∆a
,

599 
p‹t_pﬁicy
, 
NULL
))

601  -
EINVAL
;

603 i‡(!
tb
[
SWITCH_PORT_ID
])

604  -
EINVAL
;

606 
p‹t
->
id
 = 
	`∆a_gë_u32
(
tb
[
SWITCH_PORT_ID
]);

607 i‡(
tb
[
SWITCH_PORT_FLAG_TAGGED
])

608 
p‹t
->
Êags
 |(1 << 
SWITCH_PORT_FLAG_TAGGED
);

609 
vÆ
->
Àn
++;

613 
	}
}

616 
	$swc⁄fig_∑r£_lök
(
sk_buff
 *
msg
, 
∆©å
 *
∆a
,

617 
swôch_p‹t_lök
 *
lök
)

619 
∆©å
 *
tb
[
SWITCH_LINK_ATTR_MAX
 + 1];

621 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,12,0)

622 i‡(
	`∆a_∑r£_√°ed
(
tb
, 
SWITCH_LINK_ATTR_MAX
, 
∆a
, 
lök_pﬁicy
))

624 i‡(
	`∆a_∑r£_√°ed
(
tb
, 
SWITCH_LINK_ATTR_MAX
, 
∆a
, 
lök_pﬁicy
, 
NULL
))

626  -
EINVAL
;

628 
lök
->
du∂ex
 = !!
tb
[
SWITCH_LINK_FLAG_DUPLEX
];

629 
lök
->
™eg
 = !!
tb
[
SWITCH_LINK_FLAG_ANEG
];

630 
lök
->
•ìd
 = 
	`∆a_gë_u32
(
tb
[
SWITCH_LINK_SPEED
]);

633 
	}
}

636 
	$swc⁄fig_£t_©å
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

638 c⁄° 
swôch_©å
 *
©å
;

639 
swôch_dev
 *
dev
;

640 
swôch_vÆ
 
vÆ
;

641 
îr
 = -
EINVAL
;

643 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

644  -
EPERM
;

646 
dev
 = 
	`swc⁄fig_gë_dev
(
öfo
);

647 i‡(!
dev
)

648  -
EINVAL
;

650 
	`mem£t
(&
vÆ
, 0, (val));

651 
©å
 = 
	`swc⁄fig_lookup_©å
(
dev
, 
öfo
, &
vÆ
);

652 i‡(!
©å
 || !©å->
£t
)

653 
îr‹
;

655 
vÆ
.
©å
 =áttr;

656 
©å
->
ty≥
) {

657 
SWITCH_TYPE_NOVAL
:

659 
SWITCH_TYPE_INT
:

660 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_INT
])

661 
îr‹
;

662 
vÆ
.
vÆue
.
i
 =

663 
	`∆a_gë_u32
(
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_INT
]);

665 
SWITCH_TYPE_STRING
:

666 i‡(!
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_STR
])

667 
îr‹
;

668 
vÆ
.
vÆue
.
s
 =

669 
	`∆a_d©a
(
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_STR
]);

671 
SWITCH_TYPE_PORTS
:

672 
vÆ
.
vÆue
.
p‹ts
 = 
dev
->
p‹tbuf
;

673 
	`mem£t
(
dev
->
p‹tbuf
, 0,

674 (
swôch_p‹t
Ë* 
dev
->
p‹ts
);

677 i‡(
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_PORTS
]) {

678 
îr
 = 
	`swc⁄fig_∑r£_p‹ts
(
skb
,

679 
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_PORTS
],

680 &
vÆ
, 
dev
->
p‹ts
);

681 i‡(
îr
 < 0)

682 
îr‹
;

684 
vÆ
.
Àn
 = 0;

685 
îr
 = 0;

688 
SWITCH_TYPE_LINK
:

689 
vÆ
.
vÆue
.
lök
 = &
dev
->
lökbuf
;

690 
	`mem£t
(&
dev
->
lökbuf
, 0, (
swôch_p‹t_lök
));

692 i‡(
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_LINK
]) {

693 
îr
 = 
	`swc⁄fig_∑r£_lök
(
skb
,

694 
öfo
->
©ås
[
SWITCH_ATTR_OP_VALUE_LINK
],

695 
vÆ
.
vÆue
.
lök
);

696 i‡(
îr
 < 0)

697 
îr‹
;

699 
vÆ
.
Àn
 = 0;

700 
îr
 = 0;

704 
îr‹
;

707 
îr
 = 
©å
->
	`£t
(
dev
,áâr, &
vÆ
);

708 
îr‹
:

709 
	`swc⁄fig_put_dev
(
dev
);

710  
îr
;

711 
	}
}

714 
	$swc⁄fig_˛o£_p‹éi°
(
swc⁄fig_ˇŒback
 *
cb
, *
¨g
)

716 i‡(
cb
->
√°
[0])

717 
	`∆a_√°_íd
(
cb
->
msg
, cb->
√°
[0]);

719 
	}
}

722 
	$swc⁄fig_£nd_p‹t
(
swc⁄fig_ˇŒback
 *
cb
, *
¨g
)

724 c⁄° 
swôch_p‹t
 *
p‹t
 = 
¨g
;

725 
∆©å
 *
p
 = 
NULL
;

727 i‡(!
cb
->
√°
[0]) {

728 
cb
->
√°
[0] = 
	`∆a_√°_°¨t
(cb->
msg
, cb->
cmd
);

729 i‡(!
cb
->
√°
[0])

733 
p
 = 
	`∆a_√°_°¨t
(
cb
->
msg
, 
SWITCH_ATTR_PORT
);

734 i‡(!
p
)

735 
îr‹
;

737 i‡(
	`∆a_put_u32
(
cb
->
msg
, 
SWITCH_PORT_ID
, 
p‹t
->
id
))

738 
∆a_put_Áûuª
;

739 i‡(
p‹t
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
)) {

740 i‡(
	`∆a_put_Êag
(
cb
->
msg
, 
SWITCH_PORT_FLAG_TAGGED
))

741 
∆a_put_Áûuª
;

744 
	`∆a_√°_íd
(
cb
->
msg
, 
p
);

747 
∆a_put_Áûuª
:

748 
	`∆a_√°_ˇn˚l
(
cb
->
msg
, 
p
);

749 
îr‹
:

750 
	`∆a_√°_ˇn˚l
(
cb
->
msg
, cb->
√°
[0]);

752 
	}
}

755 
	$swc⁄fig_£nd_p‹ts
(
sk_buff
 **
msg
, 
gíl_öfo
 *
öfo
, 
©å
,

756 c⁄° 
swôch_vÆ
 *
vÆ
)

758 
swc⁄fig_ˇŒback
 
cb
;

759 
îr
 = 0;

760 
i
;

762 i‡(!
vÆ
->
vÆue
.
p‹ts
)

763  -
EINVAL
;

765 
	`mem£t
(&
cb
, 0, (cb));

766 
cb
.
cmd
 = 
©å
;

767 
cb
.
msg
 = *msg;

768 
cb
.
öfo
 = info;

769 
cb
.
fûl
 = 
swc⁄fig_£nd_p‹t
;

770 
cb
.
˛o£
 = 
swc⁄fig_˛o£_p‹éi°
;

772 
cb
.
√°
[0] = 
	`∆a_√°_°¨t
(cb.
msg
, cb.
cmd
);

773 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

774 
îr
 = 
	`swc⁄fig_£nd_mu…ù¨t
(&
cb
, &
vÆ
->
vÆue
.
p‹ts
[
i
]);

775 i‡(
îr
)

776 
d⁄e
;

778 
îr
 = 
vÆ
->
Àn
;

779 
	`swc⁄fig_˛o£_p‹éi°
(&
cb
, 
NULL
);

780 *
msg
 = 
cb
.msg;

782 
d⁄e
:

783  
îr
;

784 
	}
}

787 
	$swc⁄fig_£nd_lök
(
sk_buff
 *
msg
, 
gíl_öfo
 *
öfo
, 
©å
,

788 c⁄° 
swôch_p‹t_lök
 *
lök
)

790 
∆©å
 *
p
 = 
NULL
;

791 
îr
 = 0;

793 
p
 = 
	`∆a_√°_°¨t
(
msg
, 
©å
);

794 i‡(
lök
->link) {

795 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_LINK
))

796 
∆a_put_Áûuª
;

798 i‡(
lök
->
du∂ex
) {

799 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_DUPLEX
))

800 
∆a_put_Áûuª
;

802 i‡(
lök
->
™eg
) {

803 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_ANEG
))

804 
∆a_put_Áûuª
;

806 i‡(
lök
->
tx_Êow
) {

807 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_TX_FLOW
))

808 
∆a_put_Áûuª
;

810 i‡(
lök
->
rx_Êow
) {

811 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_RX_FLOW
))

812 
∆a_put_Áûuª
;

814 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_LINK_SPEED
, 
lök
->
•ìd
))

815 
∆a_put_Áûuª
;

816 i‡(
lök
->
ìe
 & 
ADVERTISED_100ba£T_FuŒ
) {

817 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_EEE_100BASET
))

818 
∆a_put_Áûuª
;

820 i‡(
lök
->
ìe
 & 
ADVERTISED_1000ba£T_FuŒ
) {

821 i‡(
	`∆a_put_Êag
(
msg
, 
SWITCH_LINK_FLAG_EEE_1000BASET
))

822 
∆a_put_Áûuª
;

824 
	`∆a_√°_íd
(
msg
, 
p
);

826  
îr
;

828 
∆a_put_Áûuª
:

829 
	`∆a_√°_ˇn˚l
(
msg
, 
p
);

831 
	}
}

834 
	$swc⁄fig_gë_©å
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

836 
gílmsghdr
 *
hdr
 = 
	`∆msg_d©a
(
öfo
->
∆hdr
);

837 c⁄° 
swôch_©å
 *
©å
;

838 
swôch_dev
 *
dev
;

839 
sk_buff
 *
msg
 = 
NULL
;

840 
swôch_vÆ
 
vÆ
;

841 
îr
 = -
EINVAL
;

842 
cmd
 = 
hdr
->cmd;

844 
dev
 = 
	`swc⁄fig_gë_dev
(
öfo
);

845 i‡(!
dev
)

846  -
EINVAL
;

848 
	`mem£t
(&
vÆ
, 0, (val));

849 
©å
 = 
	`swc⁄fig_lookup_©å
(
dev
, 
öfo
, &
vÆ
);

850 i‡(!
©å
 || !©å->
gë
)

851 
îr‹
;

853 i‡(
©å
->
ty≥
 =
SWITCH_TYPE_PORTS
) {

854 
vÆ
.
vÆue
.
p‹ts
 = 
dev
->
p‹tbuf
;

855 
	`mem£t
(
dev
->
p‹tbuf
, 0,

856 (
swôch_p‹t
Ë* 
dev
->
p‹ts
);

857 } i‡(
©å
->
ty≥
 =
SWITCH_TYPE_LINK
) {

858 
vÆ
.
vÆue
.
lök
 = &
dev
->
lökbuf
;

859 
	`mem£t
(&
dev
->
lökbuf
, 0, (
swôch_p‹t_lök
));

862 
îr
 = 
©å
->
	`gë
(
dev
,áâr, &
vÆ
);

863 i‡(
îr
)

864 
îr‹
;

866 
msg
 = 
	`∆msg_√w
(
NLMSG_GOODSIZE
, 
GFP_KERNEL
);

867 i‡(!
msg
)

868 
îr‹
;

870 
hdr
 = 
	`gílmsg_put
(
msg
, 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, &
swôch_Ám
,

871 0, 
cmd
);

872 i‡(
	`IS_ERR
(
hdr
))

873 
∆a_put_Áûuª
;

875 
©å
->
ty≥
) {

876 
SWITCH_TYPE_INT
:

877 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_OP_VALUE_INT
, 
vÆ
.
vÆue
.
i
))

878 
∆a_put_Áûuª
;

880 
SWITCH_TYPE_STRING
:

881 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_OP_VALUE_STR
, 
vÆ
.
vÆue
.
s
))

882 
∆a_put_Áûuª
;

884 
SWITCH_TYPE_PORTS
:

885 
îr
 = 
	`swc⁄fig_£nd_p‹ts
(&
msg
, 
öfo
,

886 
SWITCH_ATTR_OP_VALUE_PORTS
, &
vÆ
);

887 i‡(
îr
 < 0)

888 
∆a_put_Áûuª
;

890 
SWITCH_TYPE_LINK
:

891 
îr
 = 
	`swc⁄fig_£nd_lök
(
msg
, 
öfo
,

892 
SWITCH_ATTR_OP_VALUE_LINK
, 
vÆ
.
vÆue
.
lök
);

893 i‡(
îr
 < 0)

894 
∆a_put_Áûuª
;

897 
	`¥_debug
("invalidÅype ináttribute\n");

898 
îr
 = -
EINVAL
;

899 
∆a_put_Áûuª
;

901 
	`gílmsg_íd
(
msg
, 
hdr
);

902 
îr
 = 
msg
->
Àn
;

903 i‡(
îr
 < 0)

904 
∆a_put_Áûuª
;

906 
	`swc⁄fig_put_dev
(
dev
);

907  
	`gílmsg_ª∂y
(
msg
, 
öfo
);

909 
∆a_put_Áûuª
:

910 i‡(
msg
)

911 
	`∆msg_‰ì
(
msg
);

912 
îr‹
:

913 
	`swc⁄fig_put_dev
(
dev
);

914 i‡(!
îr
)

915 
îr
 = -
ENOMEM
;

916  
îr
;

917 
	}
}

920 
	$swc⁄fig_£nd_swôch
(
sk_buff
 *
msg
, 
u32
 
pid
, u32 
£q
, 
Êags
,

921 c⁄° 
swôch_dev
 *
dev
)

923 
∆©å
 *
p
 = 
NULL
, *
m
 = NULL;

924 *
hdr
;

925 
i
;

927 
hdr
 = 
	`gílmsg_put
(
msg
, 
pid
, 
£q
, &
swôch_Ám
, 
Êags
,

928 
SWITCH_CMD_NEW_ATTR
);

929 i‡(
	`IS_ERR
(
hdr
))

932 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_ID
, 
dev
->
id
))

933 
∆a_put_Áûuª
;

934 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_DEV_NAME
, 
dev
->
dev«me
))

935 
∆a_put_Áûuª
;

936 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_ALIAS
, 
dev
->
Æüs
))

937 
∆a_put_Áûuª
;

938 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_ATTR_NAME
, 
dev
->
«me
))

939 
∆a_put_Áûuª
;

940 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_VLANS
, 
dev
->
vœns
))

941 
∆a_put_Áûuª
;

942 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_PORTS
, 
dev
->
p‹ts
))

943 
∆a_put_Áûuª
;

944 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_ATTR_CPU_PORT
, 
dev
->
˝u_p‹t
))

945 
∆a_put_Áûuª
;

947 
m
 = 
	`∆a_√°_°¨t
(
msg
, 
SWITCH_ATTR_PORTMAP
);

948 i‡(!
m
)

949 
∆a_put_Áûuª
;

950 
i
 = 0; i < 
dev
->
p‹ts
; i++) {

951 
p
 = 
	`∆a_√°_°¨t
(
msg
, 
SWITCH_ATTR_PORTS
);

952 i‡(!
p
)

954 i‡(
dev
->
p‹tm≠
[
i
].
s
) {

955 i‡(
	`∆a_put_°rög
(
msg
, 
SWITCH_PORTMAP_SEGMENT
,

956 
dev
->
p‹tm≠
[
i
].
s
))

957 
∆a_put_Áûuª
;

958 i‡(
	`∆a_put_u32
(
msg
, 
SWITCH_PORTMAP_VIRT
,

959 
dev
->
p‹tm≠
[
i
].
vút
))

960 
∆a_put_Áûuª
;

962 
	`∆a_√°_íd
(
msg
, 
p
);

964 
	`∆a_√°_íd
(
msg
, 
m
);

965 
	`gílmsg_íd
(
msg
, 
hdr
);

966  
msg
->
Àn
;

967 
∆a_put_Áûuª
:

968 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

969  -
EMSGSIZE
;

970 
	}
}

972 
	$swc⁄fig_dump_swôches
(
sk_buff
 *
skb
,

973 
√éök_ˇŒback
 *
cb
)

975 
swôch_dev
 *
dev
;

976 
°¨t
 = 
cb
->
¨gs
[0];

977 
idx
 = 0;

979 
	`swc⁄fig_lock
();

980 
	`li°_f‹_óch_íåy
(
dev
, &
swdevs
, 
dev_li°
) {

981 i‡(++
idx
 <
°¨t
)

983 i‡(
	`swc⁄fig_£nd_swôch
(
skb
, 
	`NETLINK_CB
(
cb
->skb).
p‹tid
,

984 
cb
->
∆h
->
∆msg_£q
, 
NLM_F_MULTI
,

985 
dev
) < 0)

988 
	`swc⁄fig_u∆ock
();

989 
cb
->
¨gs
[0] = 
idx
;

991  
skb
->
Àn
;

992 
	}
}

995 
	$swc⁄fig_d⁄e
(
√éök_ˇŒback
 *
cb
)

998 
	}
}

1000 
gíl_›s
 
	gswc⁄fig_›s
[] = {

1002 .
cmd
 = 
SWITCH_CMD_LIST_GLOBAL
,

1003 .
	gdoô
 = 
swc⁄fig_li°_©ås
,

1004 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1007 .
	gcmd
 = 
SWITCH_CMD_LIST_VLAN
,

1008 .
	gdoô
 = 
swc⁄fig_li°_©ås
,

1009 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1012 .
	gcmd
 = 
SWITCH_CMD_LIST_PORT
,

1013 .
	gdoô
 = 
swc⁄fig_li°_©ås
,

1014 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1017 .
	gcmd
 = 
SWITCH_CMD_GET_GLOBAL
,

1018 .
	gdoô
 = 
swc⁄fig_gë_©å
,

1019 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1022 .
	gcmd
 = 
SWITCH_CMD_GET_VLAN
,

1023 .
	gdoô
 = 
swc⁄fig_gë_©å
,

1024 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1027 .
	gcmd
 = 
SWITCH_CMD_GET_PORT
,

1028 .
	gdoô
 = 
swc⁄fig_gë_©å
,

1029 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1032 .
	gcmd
 = 
SWITCH_CMD_SET_GLOBAL
,

1033 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1034 .
	gdoô
 = 
swc⁄fig_£t_©å
,

1035 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1038 .
	gcmd
 = 
SWITCH_CMD_SET_VLAN
,

1039 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1040 .
	gdoô
 = 
swc⁄fig_£t_©å
,

1041 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1044 .
	gcmd
 = 
SWITCH_CMD_SET_PORT
,

1045 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1046 .
	gdoô
 = 
swc⁄fig_£t_©å
,

1047 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1050 .
	gcmd
 = 
SWITCH_CMD_GET_SWITCH
,

1051 .
	gdumpô
 = 
swc⁄fig_dump_swôches
,

1052 .
	gpﬁicy
 = 
swôch_pﬁicy
,

1053 .
	gd⁄e
 = 
swc⁄fig_d⁄e
,

1057 
gíl_Ámûy
 
	gswôch_Ám
 = {

1058 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,10,0)

1059 .
id
 = 
GENL_ID_GENERATE
,

1061 .
	g«me
 = "switch",

1062 .
	ghdrsize
 = 0,

1063 .
	gvîsi⁄
 = 1,

1064 .
	gmax©å
 = 
SWITCH_ATTR_MAX
,

1065 .
	gmoduÀ
 = 
THIS_MODULE
,

1066 .
	g›s
 = 
swc⁄fig_›s
,

1067 .
	gn_›s
 = 
ARRAY_SIZE
(
swc⁄fig_›s
),

1070 #ifde‡
CONFIG_OF


1072 
	$of_swôch_lﬂd_p‹tm≠
(
swôch_dev
 *
dev
)

1074 
devi˚_node
 *
p‹t
;

1076 i‡(!
dev
->
of_node
)

1079 
	`f‹_óch_chûd_of_node
(
dev
->
of_node
, 
p‹t
) {

1080 c⁄° 
__be32
 *
¥›
;

1081 c⁄° *
£gmít
;

1082 
size
, 
phys
;

1084 i‡(!
	`of_devi˚_is_com∑tibÀ
(
p‹t
, "swconfig,port"))

1087 i‡(
	`of_¥›îty_ªad_°rög
(
p‹t
, "swc⁄fig,£gmít", &
£gmít
))

1090 
¥›
 = 
	`of_gë_¥›îty
(
p‹t
, "swc⁄fig,p‹tm≠", &
size
);

1091 i‡(!
¥›
)

1094 i‡(
size
 !(2 * (*
¥›
))) {

1095 
	`¥_îr
("%s: failedÅoÖarseÖort mapping\n",

1096 
p‹t
->
«me
);

1100 
phys
 = 
	`be32_to_˝up
(
¥›
++);

1101 i‡((
phys
 < 0Ë| (phy†>
dev
->
p‹ts
)) {

1102 
	`¥_îr
("%s:ÖhysicalÖort index out ofÑange\n",

1103 
p‹t
->
«me
);

1107 
dev
->
p‹tm≠
[
phys
].
s
 = 
	`k°rdup
(
£gmít
, 
GFP_KERNEL
);

1108 
dev
->
p‹tm≠
[
phys
].
vút
 = 
	`be32_to_˝up
(
¥›
);

1109 
	`¥_debug
("FoundÖort: %s,Öhysical: %d, virtual: %d\n",

1110 
£gmít
, 
phys
, 
dev
->
p‹tm≠
[phys].
vút
);

1112 
	}
}

1116 
	$ªgi°î_swôch
(
swôch_dev
 *
dev
, 
√t_devi˚
 *
√tdev
)

1118 
swôch_dev
 *
sdev
;

1119 c⁄° 
max_swôches
 = 8 * ();

1120 
ö_u£
 = 0;

1121 
îr
;

1122 
i
;

1124 
	`INIT_LIST_HEAD
(&
dev
->
dev_li°
);

1125 i‡(
√tdev
) {

1126 
dev
->
√tdev
 =Çetdev;

1127 i‡(!
dev
->
Æüs
)

1128 
dev
->
Æüs
 = 
√tdev
->
«me
;

1130 
	`BUG_ON
(!
dev
->
Æüs
);

1133 i‡(
swdev_id
 =
INT_MAX
) {

1134  -
ENOMEM
;

1137 i‡(
dev
->
p‹ts
 > 0) {

1138 
dev
->
p‹tbuf
 = 
	`kzÆloc
((
swôch_p‹t
) *

1139 
dev
->
p‹ts
, 
GFP_KERNEL
);

1140 i‡(!
dev
->
p‹tbuf
)

1141  -
ENOMEM
;

1142 
dev
->
p‹tm≠
 = 
	`kzÆloc
((
swôch_p‹tm≠
) *

1143 
dev
->
p‹ts
, 
GFP_KERNEL
);

1144 i‡(!
dev
->
p‹tm≠
) {

1145 
	`k‰ì
(
dev
->
p‹tbuf
);

1146  -
ENOMEM
;

1149 
	`swc⁄fig_deÁu…s_öô
(
dev
);

1150 
	`muãx_öô
(&
dev
->
sw_muãx
);

1151 
	`swc⁄fig_lock
();

1152 
dev
->
id
 = ++
swdev_id
;

1154 
	`li°_f‹_óch_íåy
(
sdev
, &
swdevs
, 
dev_li°
) {

1155 i‡(!
	`ssˇnf
(
sdev
->
dev«me
, 
SWCONFIG_DEVNAME
, &
i
))

1157 i‡(
i
 < 0 || i > 
max_swôches
)

1160 
	`£t_bô
(
i
, &
ö_u£
);

1162 
i
 = 
	`föd_fú°_zîo_bô
(&
ö_u£
, 
max_swôches
);

1164 i‡(
i
 =
max_swôches
) {

1165 
	`swc⁄fig_u∆ock
();

1166  -
ENFILE
;

1169 #ifde‡
CONFIG_OF


1170 i‡(
dev
->
p‹ts
)

1171 
	`of_swôch_lﬂd_p‹tm≠
(
dev
);

1175 
	`¢¥ötf
(
dev
->
dev«me
, 
IFNAMSIZ
, 
SWCONFIG_DEVNAME
, 
i
);

1177 
	`li°_add_èû
(&
dev
->
dev_li°
, &
swdevs
);

1178 
	`swc⁄fig_u∆ock
();

1180 
îr
 = 
	`swc⁄fig_¸óã_Àd_åiggî
(
dev
);

1181 i‡(
îr
)

1182  
îr
;

1185 
	}
}

1186 
EXPORT_SYMBOL_GPL
(
ªgi°î_swôch
);

1189 
	$uƒegi°î_swôch
(
swôch_dev
 *
dev
)

1191 
	`swc⁄fig_de°roy_Àd_åiggî
(
dev
);

1192 
	`k‰ì
(
dev
->
p‹tbuf
);

1193 
	`muãx_lock
(&
dev
->
sw_muãx
);

1194 
	`swc⁄fig_lock
();

1195 
	`li°_dñ
(&
dev
->
dev_li°
);

1196 
	`swc⁄fig_u∆ock
();

1197 
	`muãx_u∆ock
(&
dev
->
sw_muãx
);

1198 
	}
}

1199 
EXPORT_SYMBOL_GPL
(
uƒegi°î_swôch
);

1202 
	$swôch_gíîic_£t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

1203 
swôch_p‹t_lök
 *
lök
)

1205 i‡(
	`WARN_ON
(!
dev
->
›s
->
phy_wrôe16
))

1206  -
ENOTSUPP
;

1209 i‡(
lök
->
™eg
) {

1210 
dev
->
›s
->
	`phy_wrôe16
(dev, 
p‹t
, 
MII_BMCR
, 0x0000);

1211 
dev
->
›s
->
	`phy_wrôe16
(dev, 
p‹t
, 
MII_BMCR
, 
BMCR_ANENABLE
 | 
BMCR_ANRESTART
);

1213 
u16
 
bm¸
 = 0;

1215 i‡(
lök
->
du∂ex
)

1216 
bm¸
 |
BMCR_FULLDPLX
;

1218 
lök
->
•ìd
) {

1219 
SWITCH_PORT_SPEED_10
:

1221 
SWITCH_PORT_SPEED_100
:

1222 
bm¸
 |
BMCR_SPEED100
;

1224 
SWITCH_PORT_SPEED_1000
:

1225 
bm¸
 |
BMCR_SPEED1000
;

1228  -
ENOTSUPP
;

1231 
dev
->
›s
->
	`phy_wrôe16
(dev, 
p‹t
, 
MII_BMCR
, 
bm¸
);

1235 
	}
}

1237 
__öô


1238 
	$swc⁄fig_öô
()

1240 
	`INIT_LIST_HEAD
(&
swdevs
);

1242 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,10,0)

1243  
	`gíl_ªgi°î_Ámûy_wôh_›s
(&
swôch_Ám
, 
swc⁄fig_›s
);

1245  
	`gíl_ªgi°î_Ámûy
(&
swôch_Ám
);

1247 
	}
}

1249 
__exô


1250 
	$swc⁄fig_exô
()

1252 
	`gíl_uƒegi°î_Ámûy
(&
swôch_Ám
);

1253 
	}
}

1255 
moduÀ_öô
(
swc⁄fig_öô
);

1256 
moduÀ_exô
(
swc⁄fig_exô
);

	@linux/generic/files/drivers/net/phy/swconfig_leds.c

13 #ifde‡
CONFIG_SWCONFIG_LEDS


15 
	~<löux/Àds.h
>

16 
	~<löux/˘y≥.h
>

17 
	~<löux/devi˚.h
>

18 
	~<löux/w‹kqueue.h
>

20 
	#SWCONFIG_LED_TIMER_INTERVAL
 (
HZ
 / 10)

	)

21 
	#SWCONFIG_LED_NUM_PORTS
 32

	)

23 
	#SWCONFIG_LED_PORT_SPEED_NA
 0x01

	)

24 
	#SWCONFIG_LED_PORT_SPEED_10
 0x02

	)

25 
	#SWCONFIG_LED_PORT_SPEED_100
 0x04

	)

26 
	#SWCONFIG_LED_PORT_SPEED_1000
 0x08

	)

27 
	#SWCONFIG_LED_PORT_SPEED_ALL
 (
SWCONFIG_LED_PORT_SPEED_NA
 | \

28 
SWCONFIG_LED_PORT_SPEED_10
 | \

29 
SWCONFIG_LED_PORT_SPEED_100
 | \

30 
SWCONFIG_LED_PORT_SPEED_1000
)

	)

32 
	#SWCONFIG_LED_MODE_LINK
 0x01

	)

33 
	#SWCONFIG_LED_MODE_TX
 0x02

	)

34 
	#SWCONFIG_LED_MODE_RX
 0x04

	)

35 
	#SWCONFIG_LED_MODE_TXRX
 (
SWCONFIG_LED_MODE_TX
 | \

36 
SWCONFIG_LED_MODE_RX
)

	)

37 
	#SWCONFIG_LED_MODE_ALL
 (
SWCONFIG_LED_MODE_LINK
 | \

38 
SWCONFIG_LED_MODE_TX
 | \

39 
SWCONFIG_LED_MODE_RX
)

	)

41 
	sswôch_Àd_åiggî
 {

42 
Àd_åiggî
 
	måig
;

43 
swôch_dev
 *
	mswdev
;

45 
dñayed_w‹k
 
	msw_Àd_w‹k
;

46 
u32
 
	mp‹t_mask
;

47 
u32
 
	mp‹t_lök
;

48 
	mp‹t_tx_åaffic
[
SWCONFIG_LED_NUM_PORTS
];

49 
	mp‹t_rx_åaffic
[
SWCONFIG_LED_NUM_PORTS
];

50 
u8
 
	mlök_•ìd
[
SWCONFIG_LED_NUM_PORTS
];

53 
	sswc⁄fig_åig_d©a
 {

54 
Àd_˛assdev
 *
	mÀd_cdev
;

55 
swôch_dev
 *
	mswdev
;

57 
rwlock_t
 
	mlock
;

58 
u32
 
	mp‹t_mask
;

60 
boﬁ
 
	m¥ev_lök
;

61 
	m¥ev_åaffic
;

62 
Àd_brighäess
 
	m¥ev_brighäess
;

63 
u8
 
	mmode
;

64 
u8
 
	m•ìd_mask
;

68 
	$swc⁄fig_åig_£t_brighäess
(
swc⁄fig_åig_d©a
 *
åig_d©a
,

69 
Àd_brighäess
 
brighäess
)

71 
	`Àd_£t_brighäess
(
åig_d©a
->
Àd_cdev
, 
brighäess
);

72 
åig_d©a
->
¥ev_brighäess
 = 
brighäess
;

73 
	}
}

76 
	$swc⁄fig_åig_upd©e_p‹t_mask
(
Àd_åiggî
 *
åiggî
)

78 
li°_hód
 *
íåy
;

79 
swôch_Àd_åiggî
 *
sw_åig
;

80 
u32
 
p‹t_mask
;

82 i‡(!
åiggî
)

85 
sw_åig
 = (*Ë
åiggî
;

87 
p‹t_mask
 = 0;

88 
	`ªad_lock
(&
åiggî
->
Àddev_li°_lock
);

89 
	`li°_f‹_óch
(
íåy
, &
åiggî
->
Àd_cdevs
) {

90 
Àd_˛assdev
 *
Àd_cdev
;

91 
swc⁄fig_åig_d©a
 *
åig_d©a
;

93 
Àd_cdev
 = 
	`li°_íåy
(
íåy
, 
Àd_˛assdev
, 
åig_li°
);

94 
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

95 i‡(
åig_d©a
) {

96 
	`ªad_lock
(&
åig_d©a
->
lock
);

97 
p‹t_mask
 |
åig_d©a
->port_mask;

98 
	`ªad_u∆ock
(&
åig_d©a
->
lock
);

101 
	`ªad_u∆ock
(&
åiggî
->
Àddev_li°_lock
);

103 
sw_åig
->
p‹t_mask
 =Öort_mask;

105 i‡(
p‹t_mask
)

106 
	`scheduÀ_dñayed_w‹k
(&
sw_åig
->
sw_Àd_w‹k
,

107 
SWCONFIG_LED_TIMER_INTERVAL
);

109 
	`ˇn˚l_dñayed_w‹k_sync
(&
sw_åig
->
sw_Àd_w‹k
);

110 
	}
}

112 
ssize_t


113 
	$swc⁄fig_åig_p‹t_mask_°‹e
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

114 c⁄° *
buf
, 
size_t
 
size
)

116 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

117 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

118 
p‹t_mask
;

119 
ªt
;

120 
boﬁ
 
ch™ged
;

122 
ªt
 = 
	`k°πoul
(
buf
, 0, &
p‹t_mask
);

123 i‡(
ªt
)

124  
ªt
;

126 
	`wrôe_lock
(&
åig_d©a
->
lock
);

127 
ch™ged
 = (
åig_d©a
->
p‹t_mask
 !=Öort_mask);

128 
åig_d©a
->
p‹t_mask
 =Öort_mask;

129 
	`wrôe_u∆ock
(&
åig_d©a
->
lock
);

131 i‡(
ch™ged
) {

132 i‡(
p‹t_mask
 == 0)

133 
	`swc⁄fig_åig_£t_brighäess
(
åig_d©a
, 
LED_OFF
);

135 
	`swc⁄fig_åig_upd©e_p‹t_mask
(
Àd_cdev
->
åiggî
);

138  
size
;

139 
	}
}

141 
ssize_t


142 
	$swc⁄fig_åig_p‹t_mask_show
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

143 *
buf
)

145 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

146 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

147 
u32
 
p‹t_mask
;

149 
	`ªad_lock
(&
åig_d©a
->
lock
);

150 
p‹t_mask
 = 
åig_d©a
->port_mask;

151 
	`ªad_u∆ock
(&
åig_d©a
->
lock
);

153 
	`•rötf
(
buf
, "%#x\n", 
p‹t_mask
);

155  
	`°æí
(
buf
) + 1;

156 
	}
}

158 
DEVICE_ATTR
(
p‹t_mask
, 0644, 
swc⁄fig_åig_p‹t_mask_show
,

159 
swc⁄fig_åig_p‹t_mask_°‹e
);

162 
ssize_t
 
	$swc⁄fig_åig_•ìd_mask_show
(
devi˚
 *
dev
,

163 
devi˚_©åibuã
 *
©å
,

164 *
buf
)

166 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

167 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

168 
u8
 
•ìd_mask
;

170 
	`ªad_lock
(&
åig_d©a
->
lock
);

171 
•ìd_mask
 = 
åig_d©a
->speed_mask;

172 
	`ªad_u∆ock
(&
åig_d©a
->
lock
);

174 
	`•rötf
(
buf
, "%#x\n", 
•ìd_mask
);

176  
	`°æí
(
buf
) + 1;

177 
	}
}

180 
ssize_t
 
	$swc⁄fig_åig_•ìd_mask_°‹e
(
devi˚
 *
dev
,

181 
devi˚_©åibuã
 *
©å
,

182 c⁄° *
buf
, 
size_t
 
size
)

184 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

185 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

186 
u8
 
•ìd_mask
;

187 
ªt
;

189 
ªt
 = 
	`k°πou8
(
buf
, 0, &
•ìd_mask
);

190 i‡(
ªt
)

191  
ªt
;

193 
	`wrôe_lock
(&
åig_d©a
->
lock
);

194 
åig_d©a
->
•ìd_mask
 = s≥ed_mask & 
SWCONFIG_LED_PORT_SPEED_ALL
;

195 
	`wrôe_u∆ock
(&
åig_d©a
->
lock
);

197  
size
;

198 
	}
}

201 
DEVICE_ATTR
(
•ìd_mask
, 0644, 
swc⁄fig_åig_•ìd_mask_show
,

202 
swc⁄fig_åig_•ìd_mask_°‹e
);

204 
ssize_t
 
	$swc⁄fig_åig_mode_show
(
devi˚
 *
dev
,

205 
devi˚_©åibuã
 *
©å
, *
buf
)

207 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

208 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

209 
u8
 
mode
;

211 
	`ªad_lock
(&
åig_d©a
->
lock
);

212 
mode
 = 
åig_d©a
->mode;

213 
	`ªad_u∆ock
(&
åig_d©a
->
lock
);

215 i‡(
mode
 == 0) {

216 
	`°r˝y
(
buf
, "none\n");

218 i‡(
mode
 & 
SWCONFIG_LED_MODE_LINK
)

219 
	`°rˇt
(
buf
, "link ");

220 i‡(
mode
 & 
SWCONFIG_LED_MODE_TX
)

221 
	`°rˇt
(
buf
, "tx ");

222 i‡(
mode
 & 
SWCONFIG_LED_MODE_RX
)

223 
	`°rˇt
(
buf
, "rx ");

224 
	`°rˇt
(
buf
, "\n");

227  
	`°æí
(
buf
)+1;

228 
	}
}

230 
ssize_t
 
	$swc⁄fig_åig_mode_°‹e
(
devi˚
 *
dev
,

231 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
size
)

233 
Àd_˛assdev
 *
Àd_cdev
 = 
	`dev_gë_drvd©a
(
dev
);

234 
swc⁄fig_åig_d©a
 *
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

235 
c›ybuf
[128];

236 
√w_mode
 = -1;

237 *
p
, *
tokí
;

240 
	`°∫˝y
(
c›ybuf
, 
buf
, (copybuf));

241 
c›ybuf
[(copybuf) - 1] = 0;

242 
p
 = 
c›ybuf
;

244 (
tokí
 = 
	`°r£p
(&
p
, " \t\n")Ë!
NULL
) {

245 i‡(!*
tokí
)

248 i‡(
√w_mode
 < 0)

249 
√w_mode
 = 0;

251 i‡(!
	`°rcmp
(
tokí
, "none"))

252 
√w_mode
 = 0;

253 i‡(!
	`°rcmp
(
tokí
, "tx"))

254 
√w_mode
 |
SWCONFIG_LED_MODE_TX
;

255 i‡(!
	`°rcmp
(
tokí
, "rx"))

256 
√w_mode
 |
SWCONFIG_LED_MODE_RX
;

257 i‡(!
	`°rcmp
(
tokí
, "link"))

258 
√w_mode
 |
SWCONFIG_LED_MODE_LINK
;

260  -
EINVAL
;

263 i‡(
√w_mode
 < 0)

264  -
EINVAL
;

266 
	`wrôe_lock
(&
åig_d©a
->
lock
);

267 
åig_d©a
->
mode
 = (
u8
)
√w_mode
;

268 
	`wrôe_u∆ock
(&
åig_d©a
->
lock
);

270  
size
;

271 
	}
}

274 
DEVICE_ATTR
(
mode
, 0644, 
swc⁄fig_åig_mode_show
,

275 
swc⁄fig_åig_mode_°‹e
);

278 
	$swc⁄fig_åig_a˘iv©e
(
Àd_˛assdev
 *
Àd_cdev
)

280 
swôch_Àd_åiggî
 *
sw_åig
;

281 
swc⁄fig_åig_d©a
 *
åig_d©a
;

282 
îr
;

284 
åig_d©a
 = 
	`kzÆloc
((
swc⁄fig_åig_d©a
), 
GFP_KERNEL
);

285 i‡(!
åig_d©a
)

286  -
ENOMEM
;

288 
sw_åig
 = (*Ë
Àd_cdev
->
åiggî
;

290 
	`rwlock_öô
(&
åig_d©a
->
lock
);

291 
åig_d©a
->
Àd_cdev
 =Üed_cdev;

292 
åig_d©a
->
swdev
 = 
sw_åig
->swdev;

293 
åig_d©a
->
•ìd_mask
 = 
SWCONFIG_LED_PORT_SPEED_ALL
;

294 
åig_d©a
->
mode
 = 
SWCONFIG_LED_MODE_ALL
;

295 
Àd_cdev
->
åiggî_d©a
 = 
åig_d©a
;

297 
îr
 = 
	`devi˚_¸óã_fûe
(
Àd_cdev
->
dev
, &
dev_©å_p‹t_mask
);

298 i‡(
îr
)

299 
îr_‰ì
;

301 
îr
 = 
	`devi˚_¸óã_fûe
(
Àd_cdev
->
dev
, &
dev_©å_•ìd_mask
);

302 i‡(
îr
)

303 
îr_dev_‰ì
;

305 
îr
 = 
	`devi˚_¸óã_fûe
(
Àd_cdev
->
dev
, &
dev_©å_mode
);

306 i‡(
îr
)

307 
îr_mode_‰ì
;

311 
îr_mode_‰ì
:

312 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_•ìd_mask
);

314 
îr_dev_‰ì
:

315 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_p‹t_mask
);

317 
îr_‰ì
:

318 
Àd_cdev
->
åiggî_d©a
 = 
NULL
;

319 
	`k‰ì
(
åig_d©a
);

321  
îr
;

322 
	}
}

324 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,19,0)

326 
	$swc⁄fig_åig_a˘iv©e_void
(
Àd_˛assdev
 *
Àd_cdev
)

328 
	`swc⁄fig_åig_a˘iv©e
(
Àd_cdev
);

329 
	}
}

333 
	$swc⁄fig_åig_dó˘iv©e
(
Àd_˛assdev
 *
Àd_cdev
)

335 
swc⁄fig_åig_d©a
 *
åig_d©a
;

337 
	`swc⁄fig_åig_upd©e_p‹t_mask
(
Àd_cdev
->
åiggî
);

339 
åig_d©a
 = (*Ë
Àd_cdev
->
åiggî_d©a
;

340 i‡(
åig_d©a
) {

341 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_p‹t_mask
);

342 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_•ìd_mask
);

343 
	`devi˚_ªmove_fûe
(
Àd_cdev
->
dev
, &
dev_©å_mode
);

344 
	`k‰ì
(
åig_d©a
);

346 
	}
}

355 
	$swc⁄fig_åig_Àd_evít
(
swôch_Àd_åiggî
 *
sw_åig
,

356 
Àd_˛assdev
 *
Àd_cdev
)

358 
swc⁄fig_åig_d©a
 *
åig_d©a
;

359 
u32
 
p‹t_mask
;

360 
boﬁ
 
lök
;

361 
u8
 
•ìd_mask
, 
mode
;

362 
Àd_brighäess
 
Àd_ba£
, 
Àd_blök
;

364 
åig_d©a
 = 
Àd_cdev
->
åiggî_d©a
;

365 i‡(!
åig_d©a
)

368 
	`ªad_lock
(&
åig_d©a
->
lock
);

369 
p‹t_mask
 = 
åig_d©a
->port_mask;

370 
•ìd_mask
 = 
åig_d©a
->speed_mask;

371 
mode
 = 
åig_d©a
->mode;

372 
	`ªad_u∆ock
(&
åig_d©a
->
lock
);

374 
lök
 = !!(
sw_åig
->
p‹t_lök
 & 
p‹t_mask
);

375 i‡(!
lök
) {

376 i‡(
åig_d©a
->
¥ev_brighäess
 !
LED_OFF
)

377 
	`swc⁄fig_åig_£t_brighäess
(
åig_d©a
, 
LED_OFF
);

380 
åaffic
;

381 
•ìdok
;

382 
i
;

384 
Àd_ba£
 = 
LED_FULL
;

385 
Àd_blök
 = 
LED_OFF
;

386 
åaffic
 = 0;

387 
•ìdok
 = 0;

388 
i
 = 0; i < 
SWCONFIG_LED_NUM_PORTS
; i++) {

389 i‡(
p‹t_mask
 & (1 << 
i
)) {

390 i‡(
sw_åig
->
lök_•ìd
[
i
] & 
•ìd_mask
) {

391 
åaffic
 +((
mode
 & 
SWCONFIG_LED_MODE_TX
) ?

392 
sw_åig
->
p‹t_tx_åaffic
[
i
] : 0) +

393 ((
mode
 & 
SWCONFIG_LED_MODE_RX
) ?

394 
sw_åig
->
p‹t_rx_åaffic
[
i
] : 0);

395 
•ìdok
 = 1;

400 i‡(
•ìdok
) {

402 i‡(!(
mode
 & 
SWCONFIG_LED_MODE_LINK
)) {

403 
Àd_ba£
 = 
LED_OFF
;

404 
Àd_blök
 = 
LED_FULL
;

407 i‡(
åig_d©a
->
¥ev_brighäess
 !
Àd_ba£
)

408 
	`swc⁄fig_åig_£t_brighäess
(
åig_d©a
,

409 
Àd_ba£
);

410 i‡(
åaffic
 !
åig_d©a
->
¥ev_åaffic
)

411 
	`swc⁄fig_åig_£t_brighäess
(
åig_d©a
,

412 
Àd_blök
);

413 } i‡(
åig_d©a
->
¥ev_brighäess
 !
LED_OFF
)

414 
	`swc⁄fig_åig_£t_brighäess
(
åig_d©a
, 
LED_OFF
);

416 
åig_d©a
->
¥ev_åaffic
 = 
åaffic
;

419 
åig_d©a
->
¥ev_lök
 = 
lök
;

420 
	}
}

423 
	$swc⁄fig_åig_upd©e_Àds
(
swôch_Àd_åiggî
 *
sw_åig
)

425 
li°_hód
 *
íåy
;

426 
Àd_åiggî
 *
åiggî
;

428 
åiggî
 = &
sw_åig
->
åig
;

429 
	`ªad_lock
(&
åiggî
->
Àddev_li°_lock
);

430 
	`li°_f‹_óch
(
íåy
, &
åiggî
->
Àd_cdevs
) {

431 
Àd_˛assdev
 *
Àd_cdev
;

433 
Àd_cdev
 = 
	`li°_íåy
(
íåy
, 
Àd_˛assdev
, 
åig_li°
);

434 
	`swc⁄fig_åig_Àd_evít
(
sw_åig
, 
Àd_cdev
);

436 
	`ªad_u∆ock
(&
åiggî
->
Àddev_li°_lock
);

437 
	}
}

440 
	$swc⁄fig_Àd_w‹k_func
(
w‹k_°ru˘
 *
w‹k
)

442 
swôch_Àd_åiggî
 *
sw_åig
;

443 
swôch_dev
 *
swdev
;

444 
u32
 
p‹t_mask
;

445 
u32
 
lök
;

446 
i
;

448 
sw_åig
 = 
	`c⁄èöî_of
(
w‹k
, 
swôch_Àd_åiggî
,

449 
sw_Àd_w‹k
.
w‹k
);

451 
p‹t_mask
 = 
sw_åig
->port_mask;

452 
swdev
 = 
sw_åig
->swdev;

454 
lök
 = 0;

455 
i
 = 0; i < 
SWCONFIG_LED_NUM_PORTS
; i++) {

456 
u32
 
p‹t_bô
;

458 
sw_åig
->
lök_•ìd
[
i
] = 0;

460 
p‹t_bô
 = 
	`BIT
(
i
);

461 i‡((
p‹t_mask
 & 
p‹t_bô
) == 0)

464 i‡(
swdev
->
›s
->
gë_p‹t_lök
) {

465 
swôch_p‹t_lök
 
p‹t_lök
;

467 
	`mem£t
(&
p‹t_lök
, '\0', (port_link));

468 
swdev
->
›s
->
	`gë_p‹t_lök
(swdev, 
i
, &
p‹t_lök
);

470 i‡(
p‹t_lök
.
lök
) {

471 
lök
 |
p‹t_bô
;

472 
p‹t_lök
.
•ìd
) {

473 
SWITCH_PORT_SPEED_UNKNOWN
:

474 
sw_åig
->
lök_•ìd
[
i
] =

475 
SWCONFIG_LED_PORT_SPEED_NA
;

477 
SWITCH_PORT_SPEED_10
:

478 
sw_åig
->
lök_•ìd
[
i
] =

479 
SWCONFIG_LED_PORT_SPEED_10
;

481 
SWITCH_PORT_SPEED_100
:

482 
sw_åig
->
lök_•ìd
[
i
] =

483 
SWCONFIG_LED_PORT_SPEED_100
;

485 
SWITCH_PORT_SPEED_1000
:

486 
sw_åig
->
lök_•ìd
[
i
] =

487 
SWCONFIG_LED_PORT_SPEED_1000
;

493 i‡(
swdev
->
›s
->
gë_p‹t_°©s
) {

494 
swôch_p‹t_°©s
 
p‹t_°©s
;

496 
	`mem£t
(&
p‹t_°©s
, '\0', (port_stats));

497 
swdev
->
›s
->
	`gë_p‹t_°©s
(swdev, 
i
, &
p‹t_°©s
);

498 
sw_åig
->
p‹t_tx_åaffic
[
i
] = 
p‹t_°©s
.
tx_byãs
;

499 
sw_åig
->
p‹t_rx_åaffic
[
i
] = 
p‹t_°©s
.
rx_byãs
;

503 
sw_åig
->
p‹t_lök
 = 
lök
;

505 
	`swc⁄fig_åig_upd©e_Àds
(
sw_åig
);

507 
	`scheduÀ_dñayed_w‹k
(&
sw_åig
->
sw_Àd_w‹k
,

508 
SWCONFIG_LED_TIMER_INTERVAL
);

509 
	}
}

512 
	$swc⁄fig_¸óã_Àd_åiggî
(
swôch_dev
 *
swdev
)

514 
swôch_Àd_åiggî
 *
sw_åig
;

515 
îr
;

517 i‡(!
swdev
->
›s
->
gë_p‹t_lök
)

520 
sw_åig
 = 
	`kzÆloc
((
swôch_Àd_åiggî
), 
GFP_KERNEL
);

521 i‡(!
sw_åig
)

522  -
ENOMEM
;

524 
sw_åig
->
swdev
 = swdev;

525 
sw_åig
->
åig
.
«me
 = 
swdev
->
dev«me
;

526 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4,19,0)

527 
sw_åig
->
åig
.
a˘iv©e
 = 
swc⁄fig_åig_a˘iv©e_void
;

529 
sw_åig
->
åig
.
a˘iv©e
 = 
swc⁄fig_åig_a˘iv©e
;

531 
sw_åig
->
åig
.
dó˘iv©e
 = 
swc⁄fig_åig_dó˘iv©e
;

533 
	`INIT_DELAYED_WORK
(&
sw_åig
->
sw_Àd_w‹k
, 
swc⁄fig_Àd_w‹k_func
);

535 
îr
 = 
	`Àd_åiggî_ªgi°î
(&
sw_åig
->
åig
);

536 i‡(
îr
)

537 
îr_‰ì
;

539 
swdev
->
Àd_åiggî
 = 
sw_åig
;

543 
îr_‰ì
:

544 
	`k‰ì
(
sw_åig
);

545  
îr
;

546 
	}
}

549 
	$swc⁄fig_de°roy_Àd_åiggî
(
swôch_dev
 *
swdev
)

551 
swôch_Àd_åiggî
 *
sw_åig
;

553 
sw_åig
 = 
swdev
->
Àd_åiggî
;

554 i‡(
sw_åig
) {

555 
	`ˇn˚l_dñayed_w‹k_sync
(&
sw_åig
->
sw_Àd_w‹k
);

556 
	`Àd_åiggî_uƒegi°î
(&
sw_åig
->
åig
);

557 
	`k‰ì
(
sw_åig
);

559 
	}
}

562 
ölöe
 

563 
	$swc⁄fig_¸óã_Àd_åiggî
(
swôch_dev
 *
swdev
Ë{  0; 
	}
}

565 
ölöe
 

566 
	$swc⁄fig_de°roy_Àd_åiggî
(
swôch_dev
 *
swdev
Ë{ 
	}
}

	@linux/generic/files/include/linux/ar8216_platform.h

17 #i‚de‡
AR8216_PLATFORM_H


18 
	#AR8216_PLATFORM_H


	)

20 
	e¨8327_∑d_mode
 {

21 
	mAR8327_PAD_NC
 = 0,

22 
	mAR8327_PAD_MAC2MAC_MII
,

23 
	mAR8327_PAD_MAC2MAC_GMII
,

24 
	mAR8327_PAD_MAC_SGMII
,

25 
	mAR8327_PAD_MAC2PHY_MII
,

26 
	mAR8327_PAD_MAC2PHY_GMII
,

27 
	mAR8327_PAD_MAC_RGMII
,

28 
	mAR8327_PAD_PHY_GMII
,

29 
	mAR8327_PAD_PHY_RGMII
,

30 
	mAR8327_PAD_PHY_MII
,

33 
	e¨8327_˛k_dñay_£l
 {

34 
	mAR8327_CLK_DELAY_SEL0
 = 0,

35 
	mAR8327_CLK_DELAY_SEL1
,

36 
	mAR8327_CLK_DELAY_SEL2
,

37 
	mAR8327_CLK_DELAY_SEL3
,

40 
	s¨8327_∑d_cfg
 {

41 
¨8327_∑d_mode
 
	mmode
;

42 
boﬁ
 
	mrx˛k_£l
;

43 
boﬁ
 
	mtx˛k_£l
;

44 
boﬁ
 
	mpùe_rx˛k_£l
;

45 
boﬁ
 
	mtx˛k_dñay_í
;

46 
boﬁ
 
	mrx˛k_dñay_í
;

47 
boﬁ
 
	msgmii_dñay_í
;

48 
¨8327_˛k_dñay_£l
 
	mtx˛k_dñay_£l
;

49 
¨8327_˛k_dñay_£l
 
	mrx˛k_dñay_£l
;

50 
boﬁ
 
	mmac06_exch™ge_dis
;

53 
	e¨8327_p‹t_•ìd
 {

54 
	mAR8327_PORT_SPEED_10
 = 0,

55 
	mAR8327_PORT_SPEED_100
,

56 
	mAR8327_PORT_SPEED_1000
,

59 
	s¨8327_p‹t_cfg
 {

60 
	mf‹˚_lök
:1;

61 
¨8327_p‹t_•ìd
 
	m•ìd
;

62 
	mtx∑u£
:1;

63 
	mrx∑u£
:1;

64 
	mdu∂ex
:1;

67 
	s¨8327_sgmii_cfg
 {

68 
u32
 
	msgmii_˘æ
;

69 
boﬁ
 
	m£rdes_´n
;

72 
	s¨8327_Àd_cfg
 {

73 
u32
 
	mÀd_˘æ0
;

74 
u32
 
	mÀd_˘æ1
;

75 
u32
 
	mÀd_˘æ2
;

76 
u32
 
	mÀd_˘æ3
;

77 
boﬁ
 
	m›í_døö
;

80 
	e¨8327_Àd_num
 {

81 
	mAR8327_LED_PHY0_0
 = 0,

82 
	mAR8327_LED_PHY0_1
,

83 
	mAR8327_LED_PHY0_2
,

84 
	mAR8327_LED_PHY1_0
,

85 
	mAR8327_LED_PHY1_1
,

86 
	mAR8327_LED_PHY1_2
,

87 
	mAR8327_LED_PHY2_0
,

88 
	mAR8327_LED_PHY2_1
,

89 
	mAR8327_LED_PHY2_2
,

90 
	mAR8327_LED_PHY3_0
,

91 
	mAR8327_LED_PHY3_1
,

92 
	mAR8327_LED_PHY3_2
,

93 
	mAR8327_LED_PHY4_0
,

94 
	mAR8327_LED_PHY4_1
,

95 
	mAR8327_LED_PHY4_2
,

98 
	e¨8327_Àd_mode
 {

99 
	mAR8327_LED_MODE_HW
 = 0,

100 
	mAR8327_LED_MODE_SW
,

103 
	s¨8327_Àd_öfo
 {

104 c⁄° *
	m«me
;

105 c⁄° *
	mdeÁu…_åiggî
;

106 
boﬁ
 
	ma˘ive_low
;

107 
¨8327_Àd_num
 
	mÀd_num
;

108 
¨8327_Àd_mode
 
	mmode
;

111 
	#AR8327_LED_INFO
(
_Àd
, 
_mode
, 
_«me
) { \

112 .
«me
 = (
_«me
), \

113 .
Àd_num
 = 
AR8327_LED_
 ## 
_Àd
, \

114 .
mode
 = 
AR8327_LED_MODE_
 ## 
_mode
 \

115 }

	)

117 
	s¨8327_∂©f‹m_d©a
 {

118 
¨8327_∑d_cfg
 *
	m∑d0_cfg
;

119 
¨8327_∑d_cfg
 *
	m∑d5_cfg
;

120 
¨8327_∑d_cfg
 *
	m∑d6_cfg
;

121 
¨8327_sgmii_cfg
 *
	msgmii_cfg
;

122 
¨8327_p‹t_cfg
 
	mp‹t0_cfg
;

123 
¨8327_p‹t_cfg
 
	mp‹t6_cfg
;

124 
¨8327_Àd_cfg
 *
	mÀd_cfg
;

126 (*
	mgë_p‹t_lök
)(
	mp‹t
);

128 
	mnum_Àds
;

129 c⁄° 
¨8327_Àd_öfo
 *
	mÀds
;

	@linux/generic/files/include/linux/ath5k_platform.h

20 #i‚de‡
_LINUX_ATH5K_PLATFORM_H


21 
	#_LINUX_ATH5K_PLATFORM_H


	)

23 
	#ATH5K_PLAT_EEP_MAX_WORDS
 2048

	)

25 
	s©h5k_∂©f‹m_d©a
 {

26 
u16
 *
	mì¥om_d©a
;

27 
u8
 *
	mmaˇddr
;

	@linux/generic/files/include/linux/ath9k_platform.h

19 #i‚de‡
_LINUX_ATH9K_PLATFORM_H


20 
	#_LINUX_ATH9K_PLATFORM_H


	)

22 
	#ATH9K_PLAT_EEP_MAX_WORDS
 2048

	)

24 
	s©h9k_∂©f‹m_d©a
 {

25 c⁄° *
	mì¥om_«me
;

27 
u16
 
	mì¥om_d©a
[
ATH9K_PLAT_EEP_MAX_WORDS
];

28 
u8
 *
	mmaˇddr
;

30 
	mÀd_pö
;

31 
u32
 
	mgpio_mask
;

32 
u32
 
	mgpio_vÆ
;

34 
u32
 
	mbt_a˘ive_pö
;

35 
u32
 
	mbt_¥i‹ôy_pö
;

36 
u32
 
	mwœn_a˘ive_pö
;

38 
boﬁ
 
	mídün_check
;

39 
boﬁ
 
	mis_˛k_25mhz
;

40 
boﬁ
 
	mtx_gaö_bufÁlo
;

41 
boﬁ
 
	mdißbÀ_2ghz
;

42 
boﬁ
 
	mdißbÀ_5ghz
;

43 
boﬁ
 
	mÀd_a˘ive_high
;

45 (*
	mgë_mac_ªvisi⁄
)();

46 (*
	mexã∫Æ_ª£t
)();

48 
boﬁ
 
	mu£_ì¥om
;

50 
	mnum_Àds
;

51 c⁄° 
gpio_Àd
 *
	mÀds
;

53 
	mnum_bäs
;

54 c⁄° 
gpio_keys_buâ⁄
 *
	mbäs
;

55 
	mbä_pﬁl_öãrvÆ
;

57 
boﬁ
 
	mub¡_h§
;

	@linux/generic/files/include/linux/myloader.h

12 #i‚de‡
_MYLOADER_H_


13 
	#_MYLOADER_H_


	)

16 
	#MYLO_MAGIC_SYS_PARAMS
 0x20021107

	)

17 
	#MYLO_MAGIC_PARTITIONS
 0x20021103

	)

18 
	#MYLO_MAGIC_BOARD_PARAMS
 0x20021103

	)

21 
	#VENID_COMPEX
 0x11F6

	)

24 
	#DEVID_COMPEX_NP27G
 0x0078

	)

25 
	#DEVID_COMPEX_NP28G
 0x044C

	)

26 
	#DEVID_COMPEX_NP28GHS
 0x044E

	)

27 
	#DEVID_COMPEX_WP54Gv1C
 0x0514

	)

28 
	#DEVID_COMPEX_WP54G
 0x0515

	)

29 
	#DEVID_COMPEX_WP54AG
 0x0546

	)

30 
	#DEVID_COMPEX_WPP54AG
 0x0550

	)

31 
	#DEVID_COMPEX_WPP54G
 0x0555

	)

34 
	#DEVID_COMPEX_NP25G
 0x05E6

	)

35 
	#DEVID_COMPEX_WPE53G
 0x05DC

	)

38 
	#DEVID_COMPEX_WP543
 0x0640

	)

39 
	#DEVID_COMPEX_WPE72
 0x0672

	)

42 
	#DEVID_COMPEX_WP18
 0x047E

	)

43 
	#DEVID_COMPEX_NP18A
 0x0489

	)

46 
	#DEVID_COMPEX_NP26G8M
 0x03E8

	)

47 
	#DEVID_COMPEX_NP26G16M
 0x03E9

	)

49 
	smylo_∑πôi⁄
 {

50 
uöt16_t
 
	mÊags
;

51 
uöt16_t
 
	mty≥
;

52 
uöt32_t
 
	maddr
;

54 
uöt32_t
 
	msize
;

55 
uöt32_t
 
	m∑øm
;

59 
	#PARTITION_FLAG_ACTIVE
 0x8000

	)

61 
	#PARTITION_FLAG_ISRAM
 0x2000

	)

62 
	#PARTIIION_FLAG_RAMLOAD
 0x1000

	)

63 
	#PARTITION_FLAG_PRELOAD
 0x0800

	)

65 
	#PARTITION_FLAG_LZMA
 0x0100

	)

66 
	#PARTITION_FLAG_HAVEHDR
 0x0002

	)

68 
	#PARTITION_TYPE_FREE
 0

	)

69 
	#PARTITION_TYPE_USED
 1

	)

71 
	#MYLO_MAX_PARTITIONS
 8

	)

74 
	smylo_∑πôi⁄_èbÀ
 {

75 
uöt32_t
 
	mmagic
;

76 
uöt32_t
 
	mªs0
;

77 
uöt32_t
 
	mªs1
;

78 
uöt32_t
 
	mªs2
;

79 
mylo_∑πôi⁄
 
	m∑πôi⁄s
[
MYLO_MAX_PARTITIONS
];

82 
	smylo_∑πôi⁄_hódî
 {

83 
uöt32_t
 
	mÀn
;

84 
uöt32_t
 
	m¸c
;

87 
	smylo_sy°em_∑øms
 {

88 
uöt32_t
 
	mmagic
;

89 
uöt32_t
 
	mªs0
;

90 
uöt32_t
 
	mªs1
;

91 
uöt32_t
 
	mmylo_vî
;

92 
uöt16_t
 
	mvid
;

93 
uöt16_t
 
	mdid
;

94 
uöt16_t
 
	msvid
;

95 
uöt16_t
 
	msdid
;

96 
uöt32_t
 
	mªv
;

97 
uöt32_t
 
	mfwhi
;

98 
uöt32_t
 
	mfwlo
;

99 
uöt32_t
 
	mt·p_addr
;

100 
uöt32_t
 
	m¥og_°¨t
;

101 
uöt32_t
 
	mÊash_size
;

102 
uöt32_t
 
	mdøm_size
;

105 
	smylo_ëh_addr
 {

106 
uöt8_t
 
	mmac
[6];

107 
uöt8_t
 
	mcsum
[2];

110 
	#MYLO_ETHADDR_COUNT
 8

	)

113 
	smylo_bﬂrd_∑øms
 {

114 
uöt32_t
 
	mmagic
;

115 
uöt32_t
 
	mªs0
;

116 
uöt32_t
 
	mªs1
;

117 
uöt32_t
 
	mªs2
;

118 
mylo_ëh_addr
 
	maddr
[
MYLO_ETHADDR_COUNT
];

	@linux/generic/files/include/linux/platform_data/adm6996-gpio.h

11 #i‚de‡
__PLATFORM_ADM6996_GPIO_H


12 
	#__PLATFORM_ADM6996_GPIO_H


	)

14 
	~<löux/kî√l.h
>

16 
	eadm6996_modñ
 {

17 
	mADM6996FC
 = 1,

18 
	mADM6996M
 = 2,

19 
	mADM6996L
 = 3,

22 
	sadm6996_gpio_∂©f‹m_d©a
 {

23 
u8
 
	mìcs
;

24 
u8
 
	mìsk
;

25 
u8
 
	mìdi
;

26 
adm6996_modñ
 
	mmodñ
;

	@linux/generic/files/include/linux/routerboot.h

12 #i‚de‡
_ROUTERBOOT_H


13 
	#_ROUTERBOOT_H


	)

15 
	#RB_MAC_SIZE
 6

	)

20 
	#RB_MAGIC_HARD
 0x64726148

	)

21 
	#RB_MAGIC_SOFT
 0x74666F53

	)

22 
	#RB_MAGIC_DAWN
 0x6E776144

	)

24 
	#RB_ID_TERMINATOR
 0

	)

29 
	#RB_ID_HARD_01
 1

	)

30 
	#RB_ID_HARD_02
 2

	)

31 
	#RB_ID_FLASH_INFO
 3

	)

32 
	#RB_ID_MAC_ADDRESS_PACK
 4

	)

33 
	#RB_ID_BOARD_NAME
 5

	)

34 
	#RB_ID_BIOS_VERSION
 6

	)

35 
	#RB_ID_HARD_07
 7

	)

36 
	#RB_ID_SDRAM_TIMINGS
 8

	)

37 
	#RB_ID_DEVICE_TIMINGS
 9

	)

38 
	#RB_ID_SOFTWARE_ID
 10

	)

39 
	#RB_ID_SERIAL_NUMBER
 11

	)

40 
	#RB_ID_HARD_12
 12

	)

41 
	#RB_ID_MEMORY_SIZE
 13

	)

42 
	#RB_ID_MAC_ADDRESS_COUNT
 14

	)

43 
	#RB_ID_HW_OPTIONS
 21

	)

44 
	#RB_ID_WLAN_DATA
 22

	)

49 
	#RB_ID_UART_SPEED
 1

	)

50 
	#RB_ID_BOOT_DELAY
 2

	)

51 
	#RB_ID_BOOT_DEVICE
 3

	)

52 
	#RB_ID_BOOT_KEY
 4

	)

53 
	#RB_ID_CPU_MODE
 5

	)

54 
	#RB_ID_FW_VERSION
 6

	)

55 
	#RB_ID_SOFT_07
 7

	)

56 
	#RB_ID_SOFT_08
 8

	)

57 
	#RB_ID_BOOT_PROTOCOL
 9

	)

58 
	#RB_ID_SOFT_10
 10

	)

59 
	#RB_ID_SOFT_11
 11

	)

64 
	#RB_UART_SPEED_115200
 0

	)

65 
	#RB_UART_SPEED_57600
 1

	)

66 
	#RB_UART_SPEED_38400
 2

	)

67 
	#RB_UART_SPEED_19200
 3

	)

68 
	#RB_UART_SPEED_9600
 4

	)

69 
	#RB_UART_SPEED_4800
 5

	)

70 
	#RB_UART_SPEED_2400
 6

	)

71 
	#RB_UART_SPEED_1200
 7

	)

76 
	#RB_BOOT_DELAY_0SEC
 0

	)

77 
	#RB_BOOT_DELAY_1SEC
 1

	)

78 
	#RB_BOOT_DELAY_2SEC
 2

	)

83 
	#RB_BOOT_DEVICE_ETHER
 0

	)

84 
	#RB_BOOT_DEVICE_NANDETH
 1

	)

85 
	#RB_BOOT_DEVICE_ETHONCE
 2

	)

86 
	#RB_BOOT_DEVICE_NANDONLY
 3

	)

91 
	#RB_BOOT_KEY_ANY
 0

	)

92 
	#RB_BOOT_KEY_DEL
 1

	)

97 
	#RB_CPU_MODE_POWERSAVE
 0

	)

98 
	#RB_CPU_MODE_REGULAR
 1

	)

103 
	#RB_BOOT_PROTOCOL_BOOTP
 0

	)

104 
	#RB_BOOT_PROTOCOL_DHCP
 1

	)

	@linux/generic/files/include/linux/rt2x00_platform.h

12 #i‚de‡
_RT2X00_PLATFORM_H


13 
	#_RT2X00_PLATFORM_H


	)

15 
	sπ2x00_∂©f‹m_d©a
 {

16 *
	mì¥om_fûe_«me
;

17 c⁄° 
u8
 *
	mmac_addªss
;

19 
	mdißbÀ_2ghz
;

20 
	mdißbÀ_5ghz
;

	@linux/generic/files/include/linux/rtl8366.h

11 #i‚de‡
_RTL8366_H


12 
	#_RTL8366_H


	)

14 
	#RTL8366_DRIVER_NAME
 "πl8366"

	)

15 
	#RTL8366S_DRIVER_NAME
 "πl8366s"

	)

16 
	#RTL8366RB_DRIVER_NAME
 "πl8366rb"

	)

18 
	gπl8366_smi
;

20 
	eπl8366_ty≥
 {

21 
	mRTL8366_TYPE_UNKNOWN
,

22 
	mRTL8366_TYPE_S
,

23 
	mRTL8366_TYPE_RB
,

26 
	sπl8366_öôvÆ
 {

27 
	mªg
;

28 
u16
 
	mvÆ
;

31 
	sπl8366_∂©f‹m_d©a
 {

32 
	mgpio_sda
;

33 
	mgpio_sck
;

34 (*
	mhw_ª£t
)(
πl8366_smi
 *
	msmi
, 
boﬁ
 
	ma˘ive
);

36 
	mnum_öôvÆs
;

37 
πl8366_öôvÆ
 *
	möôvÆs
;

40 
πl8366_ty≥
 
πl8366_smi_dëe˘
(
πl8366_∂©f‹m_d©a
 *
pd©a
);

	@linux/generic/files/include/linux/rtl8367.h

11 #i‚de‡
_RTL8367_H


12 
	#_RTL8367_H


	)

14 
	#RTL8367_DRIVER_NAME
 "πl8367"

	)

15 
	#RTL8367B_DRIVER_NAME
 "πl8367b"

	)

17 
	eπl8367_p‹t_•ìd
 {

18 
	mRTL8367_PORT_SPEED_10
 = 0,

19 
	mRTL8367_PORT_SPEED_100
,

20 
	mRTL8367_PORT_SPEED_1000
,

23 
	sπl8367_p‹t_abûôy
 {

24 
	mf‹˚_mode
;

25 
	mnway
;

26 
	mtx∑u£
;

27 
	mrx∑u£
;

28 
	mlök
;

29 
	mdu∂ex
;

30 
πl8367_p‹t_•ìd
 
	m•ìd
;

33 
	eπl8367_extif_mode
 {

34 
	mRTL8367_EXTIF_MODE_DISABLED
 = 0,

35 
	mRTL8367_EXTIF_MODE_RGMII
,

36 
	mRTL8367_EXTIF_MODE_MII_MAC
,

37 
	mRTL8367_EXTIF_MODE_MII_PHY
,

38 
	mRTL8367_EXTIF_MODE_TMII_MAC
,

39 
	mRTL8367_EXTIF_MODE_TMII_PHY
,

40 
	mRTL8367_EXTIF_MODE_GMII
,

41 
	mRTL8367_EXTIF_MODE_RGMII_33V
,

44 
	sπl8367_extif_c⁄fig
 {

45 
	mtxdñay
;

46 
	mrxdñay
;

47 
πl8367_extif_mode
 
	mmode
;

48 
πl8367_p‹t_abûôy
 
	mabûôy
;

51 
	sπl8367_∂©f‹m_d©a
 {

52 
	mgpio_sda
;

53 
	mgpio_sck
;

54 (*
	mhw_ª£t
)(
boﬁ
 
	ma˘ive
);

56 
πl8367_extif_c⁄fig
 *
	mextif0_cfg
;

57 
πl8367_extif_c⁄fig
 *
	mextif1_cfg
;

	@linux/generic/files/include/linux/switch.h

16 #i‚de‡
_LINUX_SWITCH_H


17 
	#_LINUX_SWITCH_H


	)

19 
	~<√t/gíëlök.h
>

20 
	~<u≠i/löux/swôch.h
>

22 
	gswôch_dev
;

23 
	gswôch_›
;

24 
	gswôch_vÆ
;

25 
	gswôch_©å
;

26 
	gswôch_©åli°
;

27 
	gswôch_Àd_åiggî
;

29 
ªgi°î_swôch
(
swôch_dev
 *
dev
, 
√t_devi˚
 *
√tdev
);

30 
uƒegi°î_swôch
(
swôch_dev
 *
dev
);

38 
	sswôch_©åli°
 {

39 
	mn_©å
;

40 c⁄° 
swôch_©å
 *
	m©å
;

43 
	eswôch_p‹t_•ìd
 {

44 
	mSWITCH_PORT_SPEED_UNKNOWN
 = 0,

45 
	mSWITCH_PORT_SPEED_10
 = 10,

46 
	mSWITCH_PORT_SPEED_100
 = 100,

47 
	mSWITCH_PORT_SPEED_1000
 = 1000,

50 
	sswôch_p‹t_lök
 {

51 
boﬁ
 
	mlök
;

52 
boﬁ
 
	mdu∂ex
;

53 
boﬁ
 
	m™eg
;

54 
boﬁ
 
	mtx_Êow
;

55 
boﬁ
 
	mrx_Êow
;

56 
swôch_p‹t_•ìd
 
	m•ìd
;

58 
u32
 
	mìe
;

61 
	sswôch_p‹t_°©s
 {

62 
	mtx_byãs
;

63 
	mrx_byãs
;

84 
	sswôch_dev_›s
 {

85 
swôch_©åli°
 
	m©å_globÆ
, 
	m©å_p‹t
, 
	m©å_vœn
;

87 (*
	mgë_vœn_p‹ts
)(
swôch_dev
 *
	mdev
, 
swôch_vÆ
 *
	mvÆ
);

88 (*
	m£t_vœn_p‹ts
)(
swôch_dev
 *
	mdev
, 
swôch_vÆ
 *
	mvÆ
);

90 (*
	mgë_p‹t_pvid
)(
swôch_dev
 *
	mdev
, 
	mp‹t
, *
	mvÆ
);

91 (*
	m£t_p‹t_pvid
)(
swôch_dev
 *
	mdev
, 
	mp‹t
, 
	mvÆ
);

93 (*
	m≠∂y_c⁄fig
)(
swôch_dev
 *
	mdev
);

94 (*
	mª£t_swôch
)(
swôch_dev
 *
	mdev
);

96 (*
	mgë_p‹t_lök
)(
swôch_dev
 *
	mdev
, 
	mp‹t
,

97 
swôch_p‹t_lök
 *
	mlök
);

98 (*
	m£t_p‹t_lök
)(
swôch_dev
 *
	mdev
, 
	mp‹t
,

99 
swôch_p‹t_lök
 *
	mlök
);

100 (*
	mgë_p‹t_°©s
)(
swôch_dev
 *
	mdev
, 
	mp‹t
,

101 
swôch_p‹t_°©s
 *
	m°©s
);

103 (*
	mphy_ªad16
)(
swôch_dev
 *
	mdev
, 
	maddr
, 
u8
 
	mªg
, 
u16
 *
	mvÆue
);

104 (*
	mphy_wrôe16
)(
swôch_dev
 *
	mdev
, 
	maddr
, 
u8
 
	mªg
, 
u16
 
	mvÆue
);

107 
	sswôch_dev
 {

108 
devi˚_node
 *
	mof_node
;

109 c⁄° 
swôch_dev_›s
 *
	m›s
;

111 
	mdev«me
[
IFNAMSIZ
];

113 c⁄° *
	m«me
;

115 c⁄° *
	mÆüs
;

116 
√t_devi˚
 *
	m√tdev
;

118 
	mp‹ts
;

119 
	mvœns
;

120 
	m˝u_p‹t
;

123 
	mid
;

124 
li°_hód
 
	mdev_li°
;

125 
	mdef_globÆ
, 
	mdef_p‹t
, 
	mdef_vœn
;

127 
muãx
 
	msw_muãx
;

128 
swôch_p‹t
 *
	mp‹tbuf
;

129 
swôch_p‹tm≠
 *
	mp‹tm≠
;

130 
swôch_p‹t_lök
 
	mlökbuf
;

132 
	mbuf
[128];

134 #ifde‡
CONFIG_SWCONFIG_LEDS


135 
swôch_Àd_åiggî
 *
	mÀd_åiggî
;

139 
	sswôch_p‹t
 {

140 
u32
 
	mid
;

141 
u32
 
	mÊags
;

144 
	sswôch_p‹tm≠
 {

145 
u32
 
	mvút
;

146 c⁄° *
	ms
;

149 
	sswôch_vÆ
 {

150 c⁄° 
swôch_©å
 *
	m©å
;

151 
	mp‹t_vœn
;

152 
	mÀn
;

154 c⁄° *
	ms
;

155 
u32
 
	mi
;

156 
swôch_p‹t
 *
	mp‹ts
;

157 
swôch_p‹t_lök
 *
	mlök
;

158 } 
	mvÆue
;

161 
	sswôch_©å
 {

162 
	mdißbÀd
;

163 
	mty≥
;

164 c⁄° *
	m«me
;

165 c⁄° *
	mdes¸ùti⁄
;

167 (*
	m£t
)(
swôch_dev
 *
	mdev
, c⁄° 
swôch_©å
 *
	m©å
, 
swôch_vÆ
 *
	mvÆ
);

168 (*
	mgë
)(
swôch_dev
 *
	mdev
, c⁄° 
swôch_©å
 *
	m©å
, 
swôch_vÆ
 *
	mvÆ
);

171 
	mid
;

172 
	mofs
;

173 
	mmax
;

176 
swôch_gíîic_£t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

177 
swôch_p‹t_lök
 *
lök
);

	@linux/generic/files/include/uapi/linux/switch.h

17 #i‚de‡
_UAPI_LINUX_SWITCH_H


18 
	#_UAPI_LINUX_SWITCH_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<löux/√tdevi˚.h
>

22 
	~<löux/√éök.h
>

23 
	~<löux/gíëlök.h
>

24 #i‚de‡
__KERNEL__


25 
	~<√éök/√éök.h
>

26 
	~<√éök/gíl/gíl.h
>

27 
	~<√éök/gíl/˘æ.h
>

32 
	mSWITCH_ATTR_UNSPEC
,

34 
	mSWITCH_ATTR_TYPE
,

36 
	mSWITCH_ATTR_ID
,

37 
	mSWITCH_ATTR_DEV_NAME
,

38 
	mSWITCH_ATTR_ALIAS
,

39 
	mSWITCH_ATTR_NAME
,

40 
	mSWITCH_ATTR_VLANS
,

41 
	mSWITCH_ATTR_PORTS
,

42 
	mSWITCH_ATTR_PORTMAP
,

43 
	mSWITCH_ATTR_CPU_PORT
,

45 
	mSWITCH_ATTR_OP_ID
,

46 
	mSWITCH_ATTR_OP_TYPE
,

47 
	mSWITCH_ATTR_OP_NAME
,

48 
	mSWITCH_ATTR_OP_PORT
,

49 
	mSWITCH_ATTR_OP_VLAN
,

50 
	mSWITCH_ATTR_OP_VALUE_INT
,

51 
	mSWITCH_ATTR_OP_VALUE_STR
,

52 
	mSWITCH_ATTR_OP_VALUE_PORTS
,

53 
	mSWITCH_ATTR_OP_VALUE_LINK
,

54 
	mSWITCH_ATTR_OP_DESCRIPTION
,

56 
	mSWITCH_ATTR_PORT
,

57 
	mSWITCH_ATTR_MAX


62 
	mSWITCH_PORTMAP_PORTS
,

63 
	mSWITCH_PORTMAP_SEGMENT
,

64 
	mSWITCH_PORTMAP_VIRT
,

65 
	mSWITCH_PORTMAP_MAX


70 
	mSWITCH_CMD_UNSPEC
,

71 
	mSWITCH_CMD_GET_SWITCH
,

72 
	mSWITCH_CMD_NEW_ATTR
,

73 
	mSWITCH_CMD_LIST_GLOBAL
,

74 
	mSWITCH_CMD_GET_GLOBAL
,

75 
	mSWITCH_CMD_SET_GLOBAL
,

76 
	mSWITCH_CMD_LIST_PORT
,

77 
	mSWITCH_CMD_GET_PORT
,

78 
	mSWITCH_CMD_SET_PORT
,

79 
	mSWITCH_CMD_LIST_VLAN
,

80 
	mSWITCH_CMD_GET_VLAN
,

81 
	mSWITCH_CMD_SET_VLAN


85 
	eswôch_vÆ_ty≥
 {

86 
	mSWITCH_TYPE_UNSPEC
,

87 
	mSWITCH_TYPE_INT
,

88 
	mSWITCH_TYPE_STRING
,

89 
	mSWITCH_TYPE_PORTS
,

90 
	mSWITCH_TYPE_LINK
,

91 
	mSWITCH_TYPE_NOVAL
,

96 
	mSWITCH_PORT_UNSPEC
,

97 
	mSWITCH_PORT_ID
,

98 
	mSWITCH_PORT_FLAG_TAGGED
,

99 
	mSWITCH_PORT_ATTR_MAX


104 
	mSWITCH_LINK_UNSPEC
,

105 
	mSWITCH_LINK_FLAG_LINK
,

106 
	mSWITCH_LINK_FLAG_DUPLEX
,

107 
	mSWITCH_LINK_FLAG_ANEG
,

108 
	mSWITCH_LINK_FLAG_TX_FLOW
,

109 
	mSWITCH_LINK_FLAG_RX_FLOW
,

110 
	mSWITCH_LINK_SPEED
,

111 
	mSWITCH_LINK_FLAG_EEE_100BASET
,

112 
	mSWITCH_LINK_FLAG_EEE_1000BASET
,

113 
	mSWITCH_LINK_ATTR_MAX
,

116 
	#SWITCH_ATTR_DEFAULTS_OFFSET
 0x1000

	)

	@linux/generic/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 #i‚de‡
Byã


25 
	#Byã
 

	)

28 
	#kNumT›Bôs
 24

	)

29 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

31 
	#kNumBôModñTŸÆBôs
 11

	)

32 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

33 
	#kNumMoveBôs
 5

	)

35 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

37 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

38 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

40 #ifde‡
_LZMA_IN_CB


42 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

43 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

44 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

46 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

50 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

52 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

56 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

58 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

59 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

60 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

62 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

63 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

64 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

66 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

68 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

69 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

70 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

71 
ªs
 -(1 << 
numLevñs
); }

	)

74 
	#kNumPosBôsMax
 4

	)

75 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

77 
	#kLíNumLowBôs
 3

	)

78 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

79 
	#kLíNumMidBôs
 3

	)

80 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

81 
	#kLíNumHighBôs
 8

	)

82 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

84 
	#LíChoi˚
 0

	)

85 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

86 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

87 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

88 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

89 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

92 
	#kNumSèãs
 12

	)

93 
	#kNumLôSèãs
 7

	)

95 
	#kSèπPosModñIndex
 4

	)

96 
	#kEndPosModñIndex
 14

	)

97 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

99 
	#kNumPosSlŸBôs
 6

	)

100 
	#kNumLíToPosSèãs
 4

	)

102 
	#kNumAlignBôs
 4

	)

103 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

105 
	#kM©chMöLí
 2

	)

107 
	#IsM©ch
 0

	)

108 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

109 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

110 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

111 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

112 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

113 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

114 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

115 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

116 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

117 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

118 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

120 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


121 
	gSt›CompûögDueBUG


125 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

127 
¥›0
;

128 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

129  
LZMA_RESULT_DATA_ERROR
;

130 
¥›0
 = 
¥›sD©a
[0];

131 i‡(
¥›0
 >= (9 * 5 * 5))

132  
LZMA_RESULT_DATA_ERROR
;

134 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

135 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

136 
¥›sRes
->
lc
 = 
¥›0
;

145 #ifde‡
_LZMA_OUT_READ


147 
i
;

148 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

149 
i
 = 0; i < 4; i++)

150 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

151 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

152 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

155  
LZMA_RESULT_OK
;

156 
	}
}

159 
	#kLzmaSåómWasFöishedId
 (-1)

	)

161 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

162 #ifde‡
_LZMA_IN_CB


163 
ILzmaInCÆlback
 *
InCÆlback
,

165 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

167 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

169 
CProb
 *
	gp
 = 
vs
->
Probs
;

170 
SizeT
 
	gnowPos
 = 0;

171 
Byã
 
	g¥eviousByã
 = 0;

172 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

173 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

174 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

176 #ifde‡
_LZMA_OUT_READ


178 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

179 
UI¡32
 
	gCode
 = 
vs
->
Code
;

180 #ifde‡
_LZMA_IN_CB


181 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

182 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

184 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

185 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

187 
	g°©e
 = 
vs
->
Sèã
;

188 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

189 
	gÀn
 = 
vs
->
RemaöLí
;

190 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

191 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

193 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

194 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

195 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

197 
Byã
 
	gãmpDi˘i⁄¨y
[4];

199 #i‚de‡
_LZMA_IN_CB


200 *
	göSizePro˚s£d
 = 0;

202 *
	goutSizePro˚s£d
 = 0;

203 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

204  
LZMA_RESULT_OK
;

206 i‡(
	gdi˘i⁄¨ySize
 == 0)

208 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

209 
	gdi˘i⁄¨ySize
 = 1;

210 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

213 i‡(
	gÀn
 =
kLzmaNìdInôId
)

216 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

217 
UI¡32
 
	gi
;

218 
	gi
 = 0; i < 
	gnumProbs
; i++)

219 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

220 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

221 
	g°©e
 = 0;

222 
	gglobÆPos
 = 0;

223 
	gdi°™˚Limô
 = 0;

224 
	gdi˘i⁄¨yPos
 = 0;

225 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

226 #ifde‡
_LZMA_IN_CB


227 
	gRC_INIT
;

229 
RC_INIT
(
öSåóm
, 
öSize
);

232 
	gÀn
 = 0;

234 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

236 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

237 i‡(
	gpos
 >
di˘i⁄¨ySize
)

238 
pos
 +
di˘i⁄¨ySize
;

239 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

240 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

241 
di˘i⁄¨yPos
 = 0;

242 
	gÀn
--;

244 i‡(
	gdi˘i⁄¨yPos
 == 0)

245 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

247 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

251 
	g°©e
 = 0;

252 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

253 
	gÀn
 = 0;

254 c⁄° 
Byã
 *
	gBuf„r
;

255 c⁄° 
Byã
 *
	gBuf„rLim
;

256 
UI¡32
 
	gR™ge
;

257 
UI¡32
 
	gCode
;

259 #i‚de‡
_LZMA_IN_CB


260 *
	göSizePro˚s£d
 = 0;

262 *
	goutSizePro˚s£d
 = 0;

265 
UI¡32
 
	gi
;

266 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

267 
	gi
 = 0; i < 
	gnumProbs
; i++)

268 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

271 #ifde‡
_LZMA_IN_CB


272 
	gRC_INIT
;

274 
RC_INIT
(
öSåóm
, 
öSize
);

279 
	gnowPos
 < 
	goutSize
)

281 
CProb
 *
	g¥ob
;

282 
UI¡32
 
	gbound
;

283 
	gposSèã
 = ()(

284 (
nowPos


285 #ifde‡
_LZMA_OUT_READ


286 + 
globÆPos


289 & 
posSèãMask
);

291 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

292 
IfBô0
(
¥ob
)

294 
	gsymbﬁ
 = 1;

295 
Upd©eBô0
(
¥ob
)

296 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

298 (
nowPos


299 #ifde‡
_LZMA_OUT_READ


300 + 
globÆPos


303 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

305 i‡(
	g°©e
 >
kNumLôSèãs
)

307 
m©chByã
;

308 #ifde‡
_LZMA_OUT_READ


309 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

310 i‡(
	gpos
 >
di˘i⁄¨ySize
)

311 
pos
 +
di˘i⁄¨ySize
;

312 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

314 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

318 
	gbô
;

319 
CProb
 *
	g¥obLô
;

320 
	gm©chByã
 <<= 1;

321 
	gbô
 = (
m©chByã
 & 0x100);

322 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

323 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

325 
	gsymbﬁ
 < 0x100);

327 
	gsymbﬁ
 < 0x100)

329 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

330 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

332 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

334 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

335 #ifde‡
_LZMA_OUT_READ


336 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

337 
	gdi°™˚Limô
++;

339 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

340 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

341 
di˘i⁄¨yPos
 = 0;

343 i‡(
	g°©e
 < 4) state = 0;

344 i‡(
	g°©e
 < 10) state -= 3;

345 
	g°©e
 -= 6;

349 
Upd©eBô1
(
¥ob
);

350 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

351 
IfBô0
(
¥ob
)

353 
Upd©eBô0
(
¥ob
);

354 
	gªp3
 = 
ªp2
;

355 
	gªp2
 = 
ªp1
;

356 
	gªp1
 = 
ªp0
;

357 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

358 
	g¥ob
 = 
p
 + 
LíCodî
;

362 
Upd©eBô1
(
¥ob
);

363 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

364 
IfBô0
(
¥ob
)

366 
Upd©eBô0
(
¥ob
);

367 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

368 
IfBô0
(
¥ob
)

370 #ifde‡
_LZMA_OUT_READ


371 
UI¡32
 
	gpos
;

373 
Upd©eBô0
(
¥ob
);

375 #ifde‡
_LZMA_OUT_READ


376 i‡(
	gdi°™˚Limô
 == 0)

378 i‡(
nowPos
 == 0)

380  
LZMA_RESULT_DATA_ERROR
;

382 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

383 #ifde‡
_LZMA_OUT_READ


384 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

385 i‡(
	gpos
 >
di˘i⁄¨ySize
)

386 
pos
 +
di˘i⁄¨ySize
;

387 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

388 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

389 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

390 
di˘i⁄¨yPos
 = 0;

392 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

394 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

395 #ifde‡
_LZMA_OUT_READ


396 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

397 
	gdi°™˚Limô
++;

404 
Upd©eBô1
(
¥ob
);

409 
UI¡32
 
	gdi°™˚
;

410 
Upd©eBô1
(
¥ob
);

411 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

412 
IfBô0
(
¥ob
)

414 
Upd©eBô0
(
¥ob
);

415 
	gdi°™˚
 = 
ªp1
;

419 
Upd©eBô1
(
¥ob
);

420 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

421 
IfBô0
(
¥ob
)

423 
Upd©eBô0
(
¥ob
);

424 
	gdi°™˚
 = 
ªp2
;

428 
Upd©eBô1
(
¥ob
);

429 
	gdi°™˚
 = 
ªp3
;

430 
	gªp3
 = 
ªp2
;

432 
	gªp2
 = 
ªp1
;

434 
	gªp1
 = 
ªp0
;

435 
	gªp0
 = 
di°™˚
;

437 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

438 
	g¥ob
 = 
p
 + 
RïLíCodî
;

441 
	gnumBôs
, 
	goff£t
;

442 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

443 
IfBô0
(
¥obLí
)

445 
Upd©eBô0
(
¥obLí
);

446 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

447 
	goff£t
 = 0;

448 
	gnumBôs
 = 
kLíNumLowBôs
;

452 
Upd©eBô1
(
¥obLí
);

453 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

454 
IfBô0
(
¥obLí
)

456 
Upd©eBô0
(
¥obLí
);

457 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

458 
	goff£t
 = 
kLíNumLowSymbﬁs
;

459 
	gnumBôs
 = 
kLíNumMidBôs
;

463 
Upd©eBô1
(
¥obLí
);

464 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

465 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

466 
	gnumBôs
 = 
kLíNumHighBôs
;

469 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

470 
	gÀn
 +
off£t
;

473 i‡(
	g°©e
 < 4)

475 
	gposSlŸ
;

476 
	g°©e
 +
kNumLôSèãs
;

477 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

478 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

479 
kNumPosSlŸBôs
);

480 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

481 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

483 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

484 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

485 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

487 
	gªp0
 <<
numDúe˘Bôs
;

488 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

492 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

495 
RC_NORMALIZE


496 
	gR™ge
 >>= 1;

497 
	gªp0
 <<= 1;

498 i‡(
	gCode
 >
R™ge
)

500 
Code
 -
R™ge
;

501 
	gªp0
 |= 1;

504 --
	gnumDúe˘Bôs
 != 0);

505 
	g¥ob
 = 
p
 + 
Align
;

506 
	gªp0
 <<
kNumAlignBôs
;

507 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

510 
	gi
 = 1;

511 
	gmi
 = 1;

514 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

515 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

516 
	gi
 <<= 1;

518 --
	gnumDúe˘Bôs
 != 0);

522 
	gªp0
 = 
posSlŸ
;

523 i‡(++
	gªp0
 =(
UI¡32
)(0))

526 
Àn
 = 
kLzmaSåómWasFöishedId
;

531 
	gÀn
 +
kM©chMöLí
;

532 #ifde‡
_LZMA_OUT_READ


533 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

535 i‡(
	gªp0
 > 
	gnowPos
)

537  
	gLZMA_RESULT_DATA_ERROR
;

539 #ifde‡
_LZMA_OUT_READ


540 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

541 
	gdi°™˚Limô
 +
Àn
;

543 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

548 #ifde‡
_LZMA_OUT_READ


549 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

550 i‡(
	gpos
 >
di˘i⁄¨ySize
)

551 
pos
 +
di˘i⁄¨ySize
;

552 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

553 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

554 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

555 
di˘i⁄¨yPos
 = 0;

557 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

559 
	gÀn
--;

560 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

562 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

565 
	gRC_NORMALIZE
;

567 #ifde‡
_LZMA_OUT_READ


568 
	gvs
->
	gR™ge
 = 
R™ge
;

569 
	gvs
->
	gCode
 = 
Code
;

570 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

571 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

572 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

573 
	gvs
->
	gRïs
[0] = 
ªp0
;

574 
	gvs
->
	gRïs
[1] = 
ªp1
;

575 
	gvs
->
	gRïs
[2] = 
ªp2
;

576 
	gvs
->
	gRïs
[3] = 
ªp3
;

577 
	gvs
->
	gSèã
 = 
°©e
;

578 
	gvs
->
	gRemaöLí
 = 
Àn
;

579 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

582 #ifde‡
_LZMA_IN_CB


583 
	gvs
->
	gBuf„r
 = 
Buf„r
;

584 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

586 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

588 *
	goutSizePro˚s£d
 = 
nowPos
;

589  
	gLZMA_RESULT_OK
;

	@linux/generic/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

41 #i‚de‡
UI¡32


42 #ifde‡
_LZMA_UINT32_IS_ULONG


43 
	#UI¡32
 

	)

45 
	#UI¡32
 

	)

49 #i‚de‡
SizeT


50 #ifde‡
_LZMA_SYSTEM_SIZE_T


51 
	~<°ddef.h
>

52 
	#SizeT
 
size_t


	)

54 
	#SizeT
 
UI¡32


	)

58 #ifde‡
_LZMA_PROB32


59 
	#CProb
 
UI¡32


	)

61 
	#CProb
 

	)

64 
	#LZMA_RESULT_OK
 0

	)

65 
	#LZMA_RESULT_DATA_ERROR
 1

	)

67 #ifde‡
_LZMA_IN_CB


68 
	s_ILzmaInCÆlback


70 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

71 } 
	tILzmaInCÆlback
;

74 
	#LZMA_BASE_SIZE
 1846

	)

75 
	#LZMA_LIT_SIZE
 768

	)

77 
	#LZMA_PROPERTIES_SIZE
 5

	)

79 
	s_CLzmaPr›îtõs


81 
	mlc
;

82 
	mÕ
;

83 
	mpb
;

84 #ifde‡
_LZMA_OUT_READ


85 
UI¡32
 
	mDi˘i⁄¨ySize
;

87 }
	tCLzmaPr›îtõs
;

89 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

91 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

93 
	#kLzmaNìdInôId
 (-2)

	)

95 
	s_CLzmaDecodîSèã


97 
CLzmaPr›îtõs
 
	mPr›îtõs
;

98 
CProb
 *
	mProbs
;

100 #ifde‡
_LZMA_IN_CB


101 c⁄° *
	mBuf„r
;

102 c⁄° *
	mBuf„rLim
;

105 #ifde‡
_LZMA_OUT_READ


106 *
	mDi˘i⁄¨y
;

107 
UI¡32
 
	mR™ge
;

108 
UI¡32
 
	mCode
;

109 
UI¡32
 
	mDi˘i⁄¨yPos
;

110 
UI¡32
 
	mGlobÆPos
;

111 
UI¡32
 
	mDi°™˚Limô
;

112 
UI¡32
 
	mRïs
[4];

113 
	mSèã
;

114 
	mRemaöLí
;

115 
	mTempDi˘i⁄¨y
[4];

117 } 
	tCLzmaDecodîSèã
;

119 #ifde‡
_LZMA_OUT_READ


120 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

123 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

124 #ifde‡
_LZMA_IN_CB


125 
ILzmaInCÆlback
 *
öCÆlback
,

127 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

129 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/generic/image/lzma-loader/src/decompress.c

37 
	~"LzmaDecode.h
"

39 
	#KSEG0
 0x80000000

	)

40 
	#KSEG1
 0xa0000000

	)

42 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

44 
	#Index_InvÆid©e_I
 0x00

	)

45 
	#Index_Wrôeback_Inv_D
 0x01

	)

47 
	#ˇche_uƒﬁl
(
ba£
,
›
) \

48 
__asm__
 
	`__vﬁ©ûe__
( \

55 : "r" (
ba£
), \

56 "i" (
›
));

	)

59 
__ölöe__
 
	$bœ°_iˇche
(
size
, 
lsize
)

61 
°¨t
 = 
KSEG0
;

62 
íd
 = (
°¨t
 + 
size
);

64 
°¨t
 < 
íd
) {

65 
	`ˇche_uƒﬁl
(
°¨t
,
Index_InvÆid©e_I
);

66 
°¨t
 +
lsize
;

68 
	}
}

70 
__ölöe__
 
	$bœ°_dˇche
(
size
, 
lsize
)

72 
°¨t
 = 
KSEG0
;

73 
íd
 = (
°¨t
 + 
size
);

75 
°¨t
 < 
íd
) {

76 
	`ˇche_uƒﬁl
(
°¨t
,
Index_Wrôeback_Inv_D
);

77 
°¨t
 +
lsize
;

79 
	}
}

81 *
	gd©a
;

83 
	$ªad_byã
(*
obje˘
, **
buf„r
, 
UI¡32
 *
buf„rSize
)

85 *
buf„rSize
 = 1;

86 *
buf„r
 = 
d©a
;

87 ++
d©a
;

88  
LZMA_RESULT_OK
;

89 
	}
}

91 
__ölöe__
 
	$gë_byã
()

93 *
buf„r
;

94 
UI¡32
 
Áke
;

96  
	`ªad_byã
(0, &
buf„r
, &
Áke
), *buffer;

97 
	}
}

102 *
	gbuf„r
 = (*)(
RAMSTART
 + 
RAMSIZE
 - 0x00020000);

103 
lzma_°¨t
[];

104 
lzma_íd
[];

107 
	$íåy
(
iˇche_size
, 
iˇche_lsize
,

108 
dˇche_size
, 
dˇche_lsize
)

110 
i
;

111 
osize
;

112 vﬁ©ûê
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
;

115 
__asm__
 
	`__vﬁ©ûe__
 ("‹ò%0, $12, 0":"Ù"(
¨g0
));

116 
__asm__
 
	`__vﬁ©ûe__
 ("‹ò%0, $13, 0":"Ù"(
¨g1
));

117 
__asm__
 
	`__vﬁ©ûe__
 ("‹ò%0, $14, 0":"Ù"(
¨g2
));

118 
__asm__
 
	`__vﬁ©ûe__
 ("‹ò%0, $15, 0":"Ù"(
¨g3
));

120 
ILzmaInCÆlback
 
ˇŒback
;

121 
CLzmaDecodîSèã
 
vs
;

122 
ˇŒback
.
Ród
 = 
ªad_byã
;

124 
d©a
 = 
lzma_°¨t
;

127 
i
 = 
	`gë_byã
();

128 
vs
.
Pr›îtõs
.
lc
 = 
i
 % 9, i = i / 9;

129 
vs
.
Pr›îtõs
.
Õ
 = 
i
 % 5, vs.Pr›îtõs.
pb
 = i / 5;

131 
vs
.
Probs
 = (
CProb
 *)
buf„r
;

134 
i
 = 0; i < 4; i++)

135 
	`gë_byã
();

138 
osize
 = (()
	`gë_byã
()) +

139 (()
	`gë_byã
() << 8) +

140 (()
	`gë_byã
() << 16) +

141 (()
	`gë_byã
() << 24);

144 
i
 = 0; i < 4; i++)

145 
	`gë_byã
();

148 i‡((
i
 = 
	`LzmaDecode
(&
vs
, &
ˇŒback
,

149 (*)
KERNEL_ENTRY
, 
osize
, &osize)Ë=
LZMA_RESULT_OK
)

151 
	`bœ°_dˇche
(
dˇche_size
, 
dˇche_lsize
);

152 
	`bœ°_iˇche
(
iˇche_size
, 
iˇche_lsize
);

155 (((*)(
a0
, 
a1
, 
a2
, 
a3
)Ë
KERNEL_ENTRY
)(
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
);

157 
	}
}

	@linux/generic/image/lzma-loader/src/print.c

12 
	~"¥öt.h
"

15 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

16 
	#Ctod
(
x
Ë–(xË- '0')

	)

19 
PrötCh¨
(*, , , );

20 
PrötSåög
(*, *, , );

21 
PrötNum
(*, , , , , , , );

24 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

30 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

31 * 
¨g
,

32 *
fmt
,

33 
va_li°
 
≠
)

36 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

37 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

38 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

40 (*
ouçut
)(
¨g
, 
s
, 
l
); \

42 }

	)

44 
buf
[
LP_MAX_BUF
];

46 
c
;

47 *
s
;

48 
num
;

50 
l⁄gFœg
;

51 
√gFœg
;

52 
width
;

53 
¥ec
;

54 
œdju°
;

55 
∑dc
;

57 
Àngth
;

62 *
fmtSèπ
 = 
fmt
;

63  (*
fmt
 != '\0') && (*fmt != '%')) {

64 
fmt
 ++;

68 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

71 i‡(*
fmt
 == '\0') ;

75 
fmt
 ++;

78 i‡(*
fmt
 == 'l') {

79 
l⁄gFœg
 = 1;

80 
fmt
 ++;

82 
l⁄gFœg
 = 0;

86 
width
 = 0;

87 
¥ec
 = -1;

88 
œdju°
 = 0;

89 
∑dc
 = ' ';

91 i‡(*
fmt
 == '-') {

92 
œdju°
 = 1;

93 
fmt
 ++;

96 i‡(*
fmt
 == '0') {

97 
∑dc
 = '0';

98 
fmt
++;

101 i‡(
	`IsDigô
(*
fmt
)) {

102 
	`IsDigô
(*
fmt
)) {

103 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

107 i‡(*
fmt
 == '.') {

108 
fmt
 ++;

109 i‡(
	`IsDigô
(*
fmt
)) {

110 
¥ec
 = 0;

111 
	`IsDigô
(*
fmt
)) {

112 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

119 
√gFœg
 = 0;

120 *
fmt
) {

122 i‡(
l⁄gFœg
) {

123 
num
 = 
	`va_¨g
(
≠
, );

125 
num
 = 
	`va_¨g
(
≠
, );

127 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

128 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

133 i‡(
l⁄gFœg
) {

134 
num
 = 
	`va_¨g
(
≠
, );

136 
num
 = 
	`va_¨g
(
≠
, );

138 i‡(
num
 < 0) {

139 
num
 = -Çum;

140 
√gFœg
 = 1;

142 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

143 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

148 i‡(
l⁄gFœg
) {

149 
num
 = 
	`va_¨g
(
≠
, );

151 
num
 = 
	`va_¨g
(
≠
, );

153 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

154 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

159 i‡(
l⁄gFœg
) {

160 
num
 = 
	`va_¨g
(
≠
, );

162 
num
 = 
	`va_¨g
(
≠
, );

164 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

165 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

169 i‡(
l⁄gFœg
) {

170 
num
 = 
	`va_¨g
(
≠
, );

172 
num
 = 
	`va_¨g
(
≠
, );

174 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

175 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

179 i‡(
l⁄gFœg
) {

180 
num
 = 
	`va_¨g
(
≠
, );

182 
num
 = 
	`va_¨g
(
≠
, );

184 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

185 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

189 
c
 = ()
	`va_¨g
(
≠
, );

190 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

191 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

195 
s
 = (*)
	`va_¨g
(
≠
, *);

196 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

197 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

201 
fmt
 --;

206 
	`OUTPUT
(
¨g
, 
fmt
, 1);

209 
fmt
 ++;

213 
	`OUTPUT
(
¨g
, "\0", 1);

214 
	}
}

219 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

221 
i
;

223 i‡(
Àngth
 < 1)Üength = 1;

224 i‡(
œdju°
) {

225 *
buf
 = 
c
;

226 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

228 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

229 
buf
[
Àngth
 - 1] = 
c
;

231  
Àngth
;

232 
	}
}

235 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

237 
i
;

238 
Àn
=0;

239 * 
s1
 = 
s
;

240 *
s1
++Ë
Àn
++;

241 i‡(
Àngth
 < 
Àn
)Üength =Üen;

243 i‡(
œdju°
) {

244 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

245 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

247 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

248 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

250  
Àngth
;

251 
	}
}

254 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

255 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

267 
a˘uÆLígth
 =0;

268 *
p
 = 
buf
;

269 
i
;

272 
tmp
 = 
u
 %
ba£
;

273 i‡(
tmp
 <= 9) {

274 *
p
++ = '0' + 
tmp
;

275 } i‡(
upˇ£
) {

276 *
p
++ = 'A' + 
tmp
 - 10;

278 *
p
++ = 'a' + 
tmp
 - 10;

280 
u
 /
ba£
;

281 } 
u
 != 0);

283 i‡(
√gFœg
) {

284 *
p
++ = '-';

288 
a˘uÆLígth
 = 
p
 - 
buf
;

289 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

292 i‡(
œdju°
) {

293 
∑dc
 = ' ';

295 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

296 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

297 
buf
[
Àngth
 -1] = '-';

299 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

305 
begö
 = 0;

306 
íd
;

307 i‡(
œdju°
) {

308 
íd
 = 
a˘uÆLígth
 - 1;

310 
íd
 = 
Àngth
 -1;

313 
íd
 > 
begö
) {

314 
tmp
 = 
buf
[
begö
];

315 
buf
[
begö
] = buf[
íd
];

316 
buf
[
íd
] = 
tmp
;

317 
begö
 ++;

318 
íd
 --;

323  
Àngth
;

324 
	}
}

	@linux/generic/image/lzma-loader/src/print.h

12 #i‚de‡
_¥öt_h_


13 
	#_¥öt_h_


	)

15 
	~<°d¨g.h
>

18 
	#LP_MAX_BUF
 80

	)

31 
Õ_Pröt
((*
ouçut
)(*, *, ),

32 * 
¨g
,

33 *
fmt
,

34 
va_li°
 
≠
);

	@linux/generic/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

13 
	~"¥öt.h
"

14 
	~"u¨t16550.h
"

16 
	$myouçut
(*
¨g
, *
s
, 
l
)

18 
i
;

21 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

23 
i
=0; i< 
l
; i++) {

24 
	`U¨t16550Put
(
s
[
i
]);

25 i‡(
s
[
i
] ='\n'Ë
	`U¨t16550Put
('\r');

27 
	}
}

29 
	$¥ötf
(*
fmt
, ...)

31 
va_li°
 
≠
;

32 
	`va_°¨t
(
≠
, 
fmt
);

33 
	`Õ_Pröt
(
myouçut
, 0, 
fmt
, 
≠
);

34 
	`va_íd
(
≠
);

35 
	}
}

	@linux/generic/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/generic/image/lzma-loader/src/uart16550.c

13 
	~"u¨t16550.h
"

17 
	#BASE
 0xb8058000

	)

18 
	#MAX_BAUD
 1152000

	)

19 
	#REG_OFFSET
 4

	)

24 
	#OFS_RCV_BUFFER
 (0*
REG_OFFSET
)

	)

25 
	#OFS_TRANS_HOLD
 (0*
REG_OFFSET
)

	)

26 
	#OFS_SEND_BUFFER
 (0*
REG_OFFSET
)

	)

27 
	#OFS_INTR_ENABLE
 (1*
REG_OFFSET
)

	)

28 
	#OFS_INTR_ID
 (2*
REG_OFFSET
)

	)

29 
	#OFS_DATA_FORMAT
 (3*
REG_OFFSET
)

	)

30 
	#OFS_LINE_CONTROL
 (3*
REG_OFFSET
)

	)

31 
	#OFS_MODEM_CONTROL
 (4*
REG_OFFSET
)

	)

32 
	#OFS_RS232_OUTPUT
 (4*
REG_OFFSET
)

	)

33 
	#OFS_LINE_STATUS
 (5*
REG_OFFSET
)

	)

34 
	#OFS_MODEM_STATUS
 (6*
REG_OFFSET
)

	)

35 
	#OFS_RS232_INPUT
 (6*
REG_OFFSET
)

	)

36 
	#OFS_SCRATCH_PAD
 (7*
REG_OFFSET
)

	)

38 
	#OFS_DIVISOR_LSB
 (0*
REG_OFFSET
)

	)

39 
	#OFS_DIVISOR_MSB
 (1*
REG_OFFSET
)

	)

43 
	#UART16550_READ
(
y
Ë(*((vﬁ©ûê
uöt32
*)(
BASE
 + y)))

	)

44 
	#UART16550_WRITE
(
y
, 
z
Ë((*((vﬁ©ûê
uöt32
*)(
BASE
 + y))Ëz)

	)

46 
	#DEBUG_LED
 (*(*)0xb7ffffc0)

	)

47 
	#OuçutLED
(
x
Ë(
DEBUG_LED
 = x)

	)

49 
	$U¨t16550Inô
(
uöt32
 
baud
, 
uöt8
 
d©a
, uöt8 
∑rôy
, uöt8 
°›
)

52 
	`UART16550_WRITE
(
OFS_INTR_ENABLE
, 0);

56 
uöt32
 
divis‹
;

59 
	`UART16550_WRITE
(
OFS_LINE_CONTROL
, 0x80);

62 
divis‹
 = 
MAX_BAUD
 / 
baud
;

63 
	`UART16550_WRITE
(
OFS_DIVISOR_LSB
, 
divis‹
 & 0xff);

64 
	`UART16550_WRITE
(
OFS_DIVISOR_MSB
, (
divis‹
 & 0xff00)>>8);

67 
	`UART16550_WRITE
(
OFS_LINE_CONTROL
, 0x0);

71 
	`UART16550_WRITE
(
OFS_DATA_FORMAT
, 
d©a
 | 
∑rôy
 | 
°›
);

72 
	}
}

74 
uöt8
 
	$U¨t16550GëPﬁl
()

76 (
	`UART16550_READ
(
OFS_LINE_STATUS
) & 0x1) == 0);

77  
	`UART16550_READ
(
OFS_RCV_BUFFER
);

78 
	}
}

81 
	$U¨t16550Put
(
uöt8
 
byã
)

83 (
	`UART16550_READ
(
OFS_LINE_STATUS
) &0x20) == 0);

84 
	`UART16550_WRITE
(
OFS_SEND_BUFFER
, 
byã
);

85 
	}
}

	@linux/generic/image/lzma-loader/src/uart16550.h

12 #i‚de‡
_u¨t16550_h_


13 
	#_u¨t16550_h_


	)

15 
	tuöt8
;

16 
	tuöt32
;

18 
	#UART16550_BAUD_2400
 2400

	)

19 
	#UART16550_BAUD_4800
 4800

	)

20 
	#UART16550_BAUD_9600
 9600

	)

21 
	#UART16550_BAUD_19200
 19200

	)

22 
	#UART16550_BAUD_38400
 38400

	)

23 
	#UART16550_BAUD_57600
 57600

	)

24 
	#UART16550_BAUD_115200
 115200

	)

26 
	#UART16550_PARITY_NONE
 0

	)

27 
	#UART16550_PARITY_ODD
 0x08

	)

28 
	#UART16550_PARITY_EVEN
 0x18

	)

29 
	#UART16550_PARITY_MARK
 0x28

	)

30 
	#UART16550_PARITY_SPACE
 0x38

	)

32 
	#UART16550_DATA_5BIT
 0x0

	)

33 
	#UART16550_DATA_6BIT
 0x1

	)

34 
	#UART16550_DATA_7BIT
 0x2

	)

35 
	#UART16550_DATA_8BIT
 0x3

	)

37 
	#UART16550_STOP_1BIT
 0x0

	)

38 
	#UART16550_STOP_2BIT
 0x4

	)

40 
U¨t16550Inô
(
uöt32
 
baud
, 
uöt8
 
d©a
, uöt8 
∑rôy
, uöt8 
°›
);

43 
uöt8
 
U¨t16550GëPﬁl
();

45 
U¨t16550Put
(
uöt8
 
byã
);

	@linux/generic/image/relocate/cacheops.h

11 #i‚def 
__ASM_CACHEOPS_H


12 
	#__ASM_CACHEOPS_H


	)

17 
	#Index_InvÆid©e_I
 0x00

	)

18 
	#Index_Wrôeback_Inv_D
 0x01

	)

19 
	#Index_Lﬂd_Tag_I
 0x04

	)

20 
	#Index_Lﬂd_Tag_D
 0x05

	)

21 
	#Index_St‹e_Tag_I
 0x08

	)

22 
	#Index_St‹e_Tag_D
 0x09

	)

23 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

24 
	#Hô_InvÆid©e_I
 0x00

	)

26 
	#Hô_InvÆid©e_I
 0x10

	)

28 
	#Hô_InvÆid©e_D
 0x11

	)

29 
	#Hô_Wrôeback_Inv_D
 0x15

	)

34 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

35 
	#Fûl
 0x14

	)

36 
	#Hô_Wrôeback_I
 0x18

	)

37 
	#Hô_Wrôeback_D
 0x19

	)

42 
	#Index_InvÆid©e_SI
 0x02

	)

43 
	#Index_Wrôeback_Inv_SD
 0x03

	)

44 
	#Index_Lﬂd_Tag_SI
 0x06

	)

45 
	#Index_Lﬂd_Tag_SD
 0x07

	)

46 
	#Index_St‹e_Tag_SI
 0x0A

	)

47 
	#Index_St‹e_Tag_SD
 0x0B

	)

48 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

49 
	#Hô_InvÆid©e_SI
 0x12

	)

50 
	#Hô_InvÆid©e_SD
 0x13

	)

51 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

52 
	#Hô_Wrôeback_SD
 0x1b

	)

53 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

54 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

59 
	#R5K_Page_InvÆid©e_S
 0x17

	)

64 
	#Page_InvÆid©e_T
 0x16

	)

72 
	#Index_Wrôeback_Inv_S
 0x03

	)

73 
	#Index_Lﬂd_Tag_S
 0x07

	)

74 
	#Index_St‹e_Tag_S
 0x0B

	)

75 
	#Hô_InvÆid©e_S
 0x13

	)

76 
	#Cache_B¨rõr
 0x14

	)

77 
	#Hô_Wrôeback_Inv_S
 0x17

	)

78 
	#Index_Lﬂd_D©a_I
 0x18

	)

79 
	#Index_Lﬂd_D©a_D
 0x19

	)

80 
	#Index_Lﬂd_D©a_S
 0x1b

	)

81 
	#Index_St‹e_D©a_I
 0x1c

	)

82 
	#Index_St‹e_D©a_D
 0x1d

	)

83 
	#Index_St‹e_D©a_S
 0x1f

	)

	@linux/generic/image/relocate/cp0regdef.h

7 #i‚de‡
_˝0ªgdef_h_


8 
	#_˝0ªgdef_h_


	)

10 
	#CP0_INDEX
 
$0


	)

11 
	#CP0_RANDOM
 
$1


	)

12 
	#CP0_ENTRYLO0
 
$2


	)

13 
	#CP0_ENTRYLO1
 
$3


	)

14 
	#CP0_CONTEXT
 
$4


	)

15 
	#CP0_PAGEMASK
 
$5


	)

16 
	#CP0_WIRED
 
$6


	)

17 
	#CP0_BADVADDR
 
$8


	)

18 
	#CP0_COUNT
 
$9


	)

19 
	#CP0_ENTRYHI
 
$10


	)

20 
	#CP0_COMPARE
 
$11


	)

21 
	#CP0_STATUS
 
$12


	)

22 
	#CP0_CAUSE
 
$13


	)

23 
	#CP0_EPC
 
$14


	)

24 
	#CP0_PRID
 
$15


	)

25 
	#CP0_CONFIG
 
$16


	)

26 
	#CP0_LLADDR
 
$17


	)

27 
	#CP0_WATCHLO
 
$18


	)

28 
	#CP0_WATCHHI
 
$19


	)

29 
	#CP0_XCONTEXT
 
$20


	)

30 
	#CP0_FRAMEMASK
 
$21


	)

31 
	#CP0_DIAGNOSTIC
 
$22


	)

32 
	#CP0_PERFORMANCE
 
$25


	)

33 
	#CP0_ECC
 
$26


	)

34 
	#CP0_CACHEERR
 
$27


	)

35 
	#CP0_TAGLO
 
$28


	)

36 
	#CP0_TAGHI
 
$29


	)

37 
	#CP0_ERROREPC
 
$30


	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/board-mcs8140-dt.c

8 
	~<löux/ty≥s.h
>

9 
	~<löux/öô.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/gpio.h
>

12 
	~<löux/úqdomaö.h
>

13 
	~<löux/of_∂©f‹m.h
>

15 
	~"comm⁄.h
"

17 
	~<asm/£tup.h
>

18 
	~<asm/úq.h
>

19 
	~<asm/mach/¨ch.h
>

20 
	~<asm/mach/m≠.h
>

21 
	~<asm/mach/úq.h
>

23 
__öô
 
	$mcs814x_dt_devi˚_öô
()

25 
	`of_∂©f‹m_p›uœã
(
NULL
, 
of_deÁu…_bus_m©ch_èbÀ
, NULL, NULL);

26 
	`mcs814x_öô_machöe
();

27 
	}
}

29 c⁄° *
	gmcs8140_dt_bﬂrd_com∑t
[] 
	g__öôd©a
 = {

31 
NULL
,

34 
DT_MACHINE_START
(
mcs8140_dt
, "Moschip MCS8140 board")

36 .
	gm≠_io
 = 
mcs814x_m≠_io
,

37 .
	göô_óæy
 = 
mcs814x_˛k_öô
,

38 .
	göô_úq
 = 
mcs814x_of_úq_öô
,

39 .
	göô_time
 = 
mcs814x_timî_öô
,

40 .
	göô_machöe
 = 
mcs814x_dt_devi˚_öô
,

41 .
	gª°¨t
 = 
mcs814x_ª°¨t
,

42 .
	gdt_com∑t
 = 
mcs8140_dt_bﬂrd_com∑t
,

43 .
	gh™dÀ_úq
 = 
mcs814x_h™dÀ_úq
,

44 
	gMACHINE_END


	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/clock.c

8 
	~<löux/kî√l.h
>

9 
	~<löux/öô.h
>

10 
	~<löux/exp‹t.h
>

11 
	~<löux/•ölock.h
>

12 
	~<löux/îr.h
>

13 
	~<löux/io.h
>

14 
	~<löux/˛kdev.h
>

15 
	~<löux/˛k.h
>

17 
	~<mach/mcs814x.h
>

19 
	~"comm⁄.h
"

21 
	#KHZ
 1000

	)

22 
	#MHZ
 (
KHZ
 * KHZ)

	)

24 
	s˛k_›s
 {

25 (*
	mgë_øã
)(
˛k
 *
	m˛k
);

26 (*
	m£t_øã
)(
˛k
 *
	m˛k
, 
	møã
);

27 
	m˛k
 *(*
	mgë_∑ª¡
)(
˛k
 *clk);

28 (*
	míabÀ
)(
˛k
 *
	m˛k
, enable);

31 
	s˛k
 {

32 
˛k
 *
	m∑ª¡
;

33 
	møã
;

34 
	mdividî
;

35 
u32
 
	mu£cou¡
;

36 
˛k_›s
 *
	m›s
;

37 
u32
 
	míabÀ_ªg
;

38 
u32
 
	míabÀ_mask
;

41 
	$˛k_divide_∑ª¡
(
˛k
 *clk)

43 i‡(
˛k
->
∑ª¡
 && clk->
dividî
)

44  
	`˛k_gë_øã
(
˛k
->
∑ª¡
Ë/ clk->
dividî
;

47 
	}
}

49 
	$˛k_loˇl_⁄off_íabÀ
(
˛k
 *˛k, 
íabÀ
)

51 
u32
 
tmp
;

54 i‡(!
˛k
->
íabÀ_ªg
)

57 
tmp
 = 
	`ªadl_ªœxed
(
mcs814x_sysdbg_ba£
 + 
˛k
->
íabÀ_ªg
);

58 i‡(!
íabÀ
)

59 
tmp
 &~
˛k
->
íabÀ_mask
;

61 
tmp
 |
˛k
->
íabÀ_mask
;

63 
	`wrôñ_ªœxed
(
tmp
, 
mcs814x_sysdbg_ba£
 + 
˛k
->
íabÀ_ªg
);

66 
	}
}

68 
˛k_›s
 
	gdeÁu…_˛k_›s
 = {

69 .
gë_øã
 = 
˛k_divide_∑ª¡
,

70 .
	gíabÀ
 = 
˛k_loˇl_⁄off_íabÀ
,

73 
DEFINE_SPINLOCK
(
˛ocks_lock
);

75 c⁄° 
	g˝u_‰eq_èbÀ
[] = {

94 
˛k
 
	g˛k_˝u
;

97 
˛k
 
	g˛k_sys
 = {

98 .
øã
 = 50 * 
MHZ
,

101 
˛k
 
	g˛k_sdøm
;

103 
˛k
 
	g˛k_timî0
 = {

104 .
∑ª¡
 = &
˛k_sdøm
,

105 .
	gdividî
 = 2,

106 .
	g›s
 = &
deÁu…_˛k_›s
,

109 
˛k
 
	g˛k_timî1_2
 = {

110 .
∑ª¡
 = &
˛k_sys
,

114 
˛k
 
	g˛k_wdt
 = {

115 .
∑ª¡
 = &
˛k_sys
,

116 .
	gdividî
 = 128,

117 .
	g›s
 = &
deÁu…_˛k_›s
,

120 
˛k
 
	g˛k_emac
 = {

121 .
›s
 = &
deÁu…_˛k_›s
,

122 .
	gíabÀ_ªg
 = 
SYSDBG_SYSCTL
,

123 .
	gíabÀ_mask
 = 
SYSCTL_EMAC
,

126 
˛k
 
	g˛k_ïhy
 = {

127 .
›s
 = &
deÁu…_˛k_›s
,

128 .
	gíabÀ_ªg
 = 
SYSDBG_PLL_CTL
,

129 .
	gíabÀ_mask
 = ~
SYSCTL_EPHY
,

132 
˛k
 
	g˛k_cùhî
 = {

133 .
›s
 = &
deÁu…_˛k_›s
,

134 .
	gíabÀ_ªg
 = 
SYSDBG_SYSCTL
,

135 .
	gíabÀ_mask
 = 
SYSCTL_CIPHER
,

138 
	#CLK
(
_dev
, 
_c⁄
, 
_˛k
) \

139 { .
dev_id
 = (
_dev
), .
c⁄_id
 = (
_c⁄
), .
˛k
 = (
_˛k
Ë},

	)

141 
˛k_lookup
 
	gmcs814x_chù_˛ks
[] = {

142 
CLK
("˝u", 
NULL
, &
˛k_˝u
)

143 
CLK
("sys", 
NULL
, &
˛k_sys
)

144 
CLK
("sdøm", 
NULL
, &
˛k_sdøm
)

146 
CLK
("timî0", 
NULL
, &
˛k_timî0
)

148 
CLK
("timî1", 
NULL
, &
˛k_timî1_2
)

150 
CLK
("timî2", 
NULL
, &
˛k_timî1_2
)

151 
CLK
(
NULL
, "wdt", &
˛k_wdt
)

152 
CLK
(
NULL
, "emac", &
˛k_emac
)

153 
CLK
(
NULL
, "ïhy", &
˛k_ïhy
)

154 
CLK
(
NULL
, "cùhî", &
˛k_cùhî
)

157 
	$loˇl_˛k_dißbÀ
(
˛k
 *clk)

159 
	`WARN_ON
(!
˛k
->
u£cou¡
);

161 i‡(
˛k
->
u£cou¡
 > 0) {

162 
˛k
->
u£cou¡
--;

164 i‡((
˛k
->
u£cou¡
 =0Ë&& (˛k->
›s
->
íabÀ
))

165 
˛k
->
›s
->
	`íabÀ
(clk, 0);

167 i‡(
˛k
->
∑ª¡
)

168 
	`loˇl_˛k_dißbÀ
(
˛k
->
∑ª¡
);

170 
	}
}

172 
	$loˇl_˛k_íabÀ
(
˛k
 *clk)

174 
ªt
 = 0;

176 i‡(
˛k
->
∑ª¡
)

177 
ªt
 = 
	`loˇl_˛k_íabÀ
(
˛k
->
∑ª¡
);

179 i‡(
ªt
)

180  
ªt
;

182 i‡((
˛k
->
u£cou¡
 =0Ë&& (˛k->
›s
->
íabÀ
))

183 
ªt
 = 
˛k
->
›s
->
	`íabÀ
(clk, 1);

185 i‡(!
ªt
)

186 
˛k
->
u£cou¡
++;

187 i‡(
˛k
->
∑ª¡
 && clk->∑ª¡->
›s
->
íabÀ
)

188 
	`loˇl_˛k_dißbÀ
(
˛k
->
∑ª¡
);

190  
ªt
;

191 
	}
}

193 
	$˛k_íabÀ
(
˛k
 *clk)

195 
ªt
;

196 
Êags
;

198 
	`•ö_lock_úqßve
(&
˛ocks_lock
, 
Êags
);

199 
ªt
 = 
	`loˇl_˛k_íabÀ
(
˛k
);

200 
	`•ö_u∆ock_úqª°‹e
(&
˛ocks_lock
, 
Êags
);

202  
ªt
;

203 
	}
}

204 
EXPORT_SYMBOL
(
˛k_íabÀ
);

206 
	$˛k_dißbÀ
(
˛k
 *clk)

208 
Êags
;

210 
	`•ö_lock_úqßve
(&
˛ocks_lock
, 
Êags
);

211 
	`loˇl_˛k_dißbÀ
(
˛k
);

212 
	`•ö_u∆ock_úqª°‹e
(&
˛ocks_lock
, 
Êags
);

213 
	}
}

214 
EXPORT_SYMBOL
(
˛k_dißbÀ
);

216 
	$˛k_gë_øã
(
˛k
 *clk)

218 i‡(
	`u∆ikñy
(
	`IS_ERR_OR_NULL
(
˛k
)))

221 i‡(
˛k
->
øã
)

222  
˛k
->
øã
;

224 i‡(
˛k
->
›s
 && clk->›s->
gë_øã
)

225  
˛k
->
›s
->
	`gë_øã
(clk);

227  
	`˛k_gë_øã
(
˛k
->
∑ª¡
);

228 
	}
}

229 
EXPORT_SYMBOL
(
˛k_gë_øã
);

231 
˛k
 *
	$˛k_gë_∑ª¡
(
˛k
 *clk)

233 
Êags
;

235 i‡(
	`u∆ikñy
(
	`IS_ERR_OR_NULL
(
˛k
)))

236  
NULL
;

238 i‡(!
˛k
->
›s
 || !˛k->›s->
gë_∑ª¡
)

239  
˛k
->
∑ª¡
;

241 
	`•ö_lock_úqßve
(&
˛ocks_lock
, 
Êags
);

242 
˛k
->
∑ª¡
 = clk->
›s
->
	`gë_∑ª¡
(clk);

243 
	`•ö_u∆ock_úqª°‹e
(&
˛ocks_lock
, 
Êags
);

245  
˛k
->
∑ª¡
;

246 
	}
}

247 
EXPORT_SYMBOL
(
˛k_gë_∑ª¡
);

249 
__öô
 
	$mcs814x_˛k_öô
()

251 
u32
 
bs1
;

252 
u8
 
˝u_‰eq
;

254 
	`˛kdev_add_èbÀ
(
mcs814x_chù_˛ks
, 
	`ARRAY_SIZE
(mcs814x_chip_clks));

257 
bs1
 = 
	`ªadl_ªœxed
(
mcs814x_sysdbg_ba£
 + 
SYSDBG_BS1
);

258 
˝u_‰eq
 = (
bs1
 >> 
CPU_FREQ_SHIFT
Ë& 
CPU_FREQ_MASK
;

260 
	`¥_öfo
("CPU fªquícy: %lu (kHz)\n", 
˝u_‰eq_èbÀ
[
˝u_‰eq
]);

261 
˛k_˝u
.
øã
 = 
˝u_‰eq
 * 
KHZ
;

264 i‡(
bs1
 & 
SDRAM_FREQ_BIT
)

265 
˛k_sdøm
.
øã
 = 100 * 
MHZ
;

267 
˛k_sdøm
.
øã
 = 133 * 
MHZ
;

269 
	`¥_öfo
("SDRAM fªquícy: %lu (MHz)\n", 
˛k_sdøm
.
øã
 / 
MHZ
);

270 
	}
}

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/common.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/io.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/of.h
>

16 
	~<löux/of_addªss.h
>

17 
	~<löux/ªboŸ.h
>

19 
	~<asm/£tup.h
>

20 
	~<asm/mach-ty≥s.h
>

21 
	~<asm/mach/¨ch.h
>

22 
	~<mach/mcs814x.h
>

23 
	~<mach/˝u.h
>

24 
	~<asm/pgèbÀ.h
>

25 
	~<asm/mach/m≠.h
>

27 
__iomem
 *
	gmcs814x_sysdbg_ba£
;

29 
m≠_desc
 
	gmcs814x_io_desc
[] 
	g__öôd©a
 = {

31 .
vútuÆ
 = 
MCS814X_IO_BASE
,

32 .
	gp‚
 = 
__phys_to_p‚
(
MCS814X_IO_START
),

33 .
	gÀngth
 = 
MCS814X_IO_SIZE
,

34 .
	gty≥
 = 
MT_DEVICE


38 
	s˝u_mode
 {

39 c⁄° *
	m«me
;

40 
	mgpio_°¨t
;

41 
	mgpio_íd
;

44 c⁄° 
˝u_mode
 
	g˝u_modes
[] = {

46 .
«me
 = "I2S",

47 .
	ggpio_°¨t
 = 4,

48 .
	ggpio_íd
 = 8,

51 .
	g«me
 = "UART",

52 .
	ggpio_°¨t
 = 4,

53 .
	ggpio_íd
 = 9,

56 .
	g«me
 = "External MII",

57 .
	ggpio_°¨t
 = 0,

58 .
	ggpio_íd
 = 16,

61 .
	g«me
 = "Normal",

62 .
	ggpio_°¨t
 = -1,

63 .
	ggpio_íd
 = -1,

67 
	$mcs814x_ëh_h¨dw¨e_fûãr_£t
(
u8
 
vÆue
)

69 
u32
 
ªg
;

71 
ªg
 = 
	`ªadl_ªœxed
(
MCS814X_VIRT_BASE
 + 
MCS814X_DBGLED
);

72 i‡(
vÆue
)

73 
ªg
 |= 0x80;

75 
ªg
 &= ~0x80;

76 
	`wrôñ_ªœxed
(
ªg
, 
MCS814X_VIRT_BASE
 + 
MCS814X_DBGLED
);

77 
	}
}

79 
	$mcs814x_ëh_Àd_cfg_£t
(
u8
 
cfg
)

81 
u32
 
ªg
;

83 
ªg
 = 
	`ªadl_ªœxed
(
mcs814x_sysdbg_ba£
 + 
SYSDBG_BS2
);

84 
ªg
 &~
LED_CFG_MASK
;

85 
ªg
 |
cfg
;

86 
	`wrôñ_ªœxed
(
ªg
, 
mcs814x_sysdbg_ba£
 + 
SYSDBG_BS2
);

87 
	}
}

89 
	$mcs814x_ëh_buf„r_shi·ög_£t
(
u8
 
vÆue
)

91 
u8
 
ªg
;

93 
ªg
 = 
	`ªadb_ªœxed
(
mcs814x_sysdbg_ba£
 + 
SYSDBG_SYSCTL_MAC
);

94 i‡(
vÆue
)

95 
ªg
 |
BUF_SHIFT_BIT
;

97 
ªg
 &~
BUF_SHIFT_BIT
;

98 
	`wrôeb_ªœxed
(
ªg
, 
mcs814x_sysdbg_ba£
 + 
SYSDBG_SYSCTL_MAC
);

99 
	}
}

101 
of_devi˚_id
 
	gmcs814x_ëh_ids
[] 
	g__öôd©a
 = {

102 { .
com∑tibÀ
 = "moschip,nuport-mac", },

108 
	$mcs814x_ëh_öô
()

110 
devi˚_node
 *
≈
;

111 c⁄° *
öt•ec
;

113 
≈
 = 
	`of_föd_m©chög_node
(
NULL
, 
mcs814x_ëh_ids
);

114 i‡(!
≈
)

118 
	`mcs814x_ëh_h¨dw¨e_fûãr_£t
(1);

120 
öt•ec
 = 
	`of_gë_¥›îty
(
≈
, "nup‹t-mac,buf„r-shi·ög", 
NULL
);

121 i‡(!
öt•ec
)

122 
	`mcs814x_ëh_buf„r_shi·ög_£t
(0);

124 
	`mcs814x_ëh_buf„r_shi·ög_£t
(1);

126 
öt•ec
 = 
	`of_gë_¥›îty
(
≈
, "nup‹t-mac,lök-a˘ivôy", 
NULL
);

127 i‡(
öt•ec
)

128 
	`mcs814x_ëh_Àd_cfg_£t
(
	`be32_to_˝up
(
öt•ec
));

130 
	`of_node_put
(
≈
);

131 
	}
}

133 
__öô
 
	$mcs814x_öô_machöe
()

135 
u32
 
bs2
, 
˝u_mode
;

136 
gpio
;

138 
bs2
 = 
	`ªadl_ªœxed
(
mcs814x_sysdbg_ba£
 + 
SYSDBG_BS2
);

139 
˝u_mode
 = (
bs2
 >> 
CPU_MODE_SHIFT
Ë& 
CPU_MODE_MASK
;

141 
	`¥_öfo
("CPU mode: %s\n", 
˝u_modes
[
˝u_mode
].
«me
);

144 
gpio
 = 
˝u_modes
[
˝u_mode
].
gpio_°¨t
;

145 
gpio
 =
˝u_modes
[
˝u_mode
].
gpio_íd
; gpio++) {

146 i‡(
gpio
 != -1)

147 
	`gpio_ªque°
(
gpio
, 
˝u_modes
[
˝u_mode
].
«me
);

150 
	`mcs814x_ëh_öô
();

151 
	}
}

153 
__öô
 
	$mcs814x_m≠_io
()

155 
	`iŸabÀ_öô
(
mcs814x_io_desc
, 
	`ARRAY_SIZE
(mcs814x_io_desc));

157 
mcs814x_sysdbg_ba£
 = 
	`i‹em≠
(
MCS814X_IO_START
 + 
MCS814X_SYSDBG
,

158 
MCS814X_SYSDBG_SIZE
);

159 i‡(!
mcs814x_sysdbg_ba£
)

160 
	`∑nic
("unableÅoÑemap sysdbg base");

161 
	}
}

163 
	$mcs814x_ª°¨t
(
ªboŸ_mode
 
mode
, c⁄° *
cmd
)

165 
	`wrôñ_ªœxed
(~(1 << 31), 
mcs814x_sysdbg_ba£
);

166 
	}
}

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/common.h

1 #i‚de‡
__ARCH_MCS814X_COMMON_H


2 
	#__ARCH_MCS814X_COMMON_H


	)

4 
	~<löux/ªboŸ.h
>

5 
	~<asm/mach/time.h
>

7 
mcs814x_m≠_io
();

8 
mcs814x_˛k_öô
();

9 
mcs814x_of_úq_öô
();

10 
mcs814x_öô_machöe
();

11 
mcs814x_h™dÀ_úq
(
±_ªgs
 *
ªgs
);

12 
mcs814x_ª°¨t
(
ªboŸ_mode
 
mode
, c⁄° *
cmd
);

13 
mcs814x_timî_öô
();

14 
__iomem
 *
mcs814x_sysdbg_ba£
;

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/cpu.h

1 #i‚de‡
__ASM_ARCH_CPU_H__


2 
	#__ASM_ARCH_CPU_H__


	)

4 
	~<asm/˝uty≥.h
>

6 
	#MCS8140_ID
 0x41069260

	)

7 
	#MCS814X_MASK
 0xff0ffff0

	)

9 #ifde‡
CONFIG_MCS8140


11 
	#soc_is_mcs8140
(Ë((
	`ªad_˝uid_id
(Ë& 
MCS814X_MASK
Ë=
MCS8140_ID
)

	)

13 
	#soc_is_mcs8140
(Ë(0)

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/gpio.h

1 #i‚de‡
__ASM_ARCH_GPIO_H


2 
	#__ASM_ARCH_GPIO_H


	)

5 
	~<asm-gíîic/gpio.h
>

7 
	#gpio_gë_vÆue
 
__gpio_gë_vÆue


	)

8 
	#gpio_£t_vÆue
 
__gpio_£t_vÆue


	)

9 
	#gpio_ˇn¶ìp
 
__gpio_ˇn¶ìp


	)

11 
ölöe
 
	$gpio_to_úq
(
gpio
)

13  -
EINVAL
;

14 
	}
}

16 
ölöe
 
	$úq_to_gpio
(
úq
)

18  -
EINVAL
;

19 
	}
}

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/hardware.h

10 #i‚de‡
__ASM_ARCH_HARDWARE_H


11 
	#__ASM_ARCH_HARDWARE_H


	)

13 
	~"mcs814x.h
"

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/io.h

11 #i‚de‡
__ASM_ARM_ARCH_IO_H


12 
	#__ASM_ARM_ARCH_IO_H


	)

14 
	#IO_SPACE_LIMIT
 0xffffffff

	)

19 
	#__øw_ªadsb
(
p
, 
d
, 
l
Ëdÿ{ *(*)0 = 0; } 0)

	)

20 
	#__øw_ªad¶
(
p
, 
d
, 
l
Ëdÿ{ *(*)0 = 0; } 0)

	)

21 
	#__øw_wrôesb
(
p
, 
d
, 
l
Ëdÿ{ *(*)0 = 0; } 0)

	)

22 
	#__øw_wrôe¶
(
p
, 
d
, 
l
Ëdÿ{ *(*)0 = 0; } 0)

	)

24 
	#__io
(
a
Ë
	`__ty≥ß„_io
◊)

	)

25 
	#__mem_pci
(
a
Ë◊)

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/irqs.h

10 #i‚de‡
__ASM_ARCH_IRQS_H


11 
	#__ASM_ARCH_IRQS_H


	)

13 
	#FIQ_START
 0

	)

15 
	#NR_IRQS
 32

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/mcs814x.h

10 #i‚de‡
__ASM_ARCH_MCS814X_H


11 
	#__ASM_ARCH_MCS814X_H


	)

13 
	#MCS814X_IO_BASE
 0xF0000000

	)

14 
	#MCS814X_IO_START
 0x40000000

	)

15 
	#MCS814X_IO_SIZE
 0x00100000

	)

18 
	#MCS814X_IRQ_ICR
 0x00

	)

19 
	#MCS814X_IRQ_ISR
 0x04

	)

20 
	#MCS814X_IRQ_MASK
 0x20

	)

21 
	#MCS814X_IRQ_STS0
 0x40

	)

23 
	#MCS814X_PHYS_BASE
 0x40000000

	)

24 
	#MCS814X_VIRT_BASE
 
MCS814X_IO_BASE


	)

26 
	#MCS814X_UART
 0x000DC000

	)

27 
	#MCS814X_DBGLED
 0x000EC000

	)

28 
	#MCS814X_SYSDBG
 0x000F8000

	)

29 
	#MCS814X_SYSDBG_SIZE
 0x50

	)

32 
	#SYSDBG_BS1
 0x00

	)

33 
	#CPU_FREQ_SHIFT
 27

	)

34 
	#CPU_FREQ_MASK
 0x0F

	)

35 
	#SDRAM_FREQ_BIT
 (1 << 22)

	)

37 
	#SYSDBG_BS2
 0x04

	)

38 
	#LED_CFG_MASK
 0x03

	)

39 
	#CPU_MODE_SHIFT
 23

	)

40 
	#CPU_MODE_MASK
 0x03

	)

42 
	#SYSDBG_SYSCTL_MAC
 0x1d

	)

43 
	#BUF_SHIFT_BIT
 (1 << 0)

	)

45 
	#SYSDBG_SYSCTL
 0x08

	)

46 
	#SYSCTL_EMAC
 (1 << 0)

	)

47 
	#SYSCTL_EPHY
 (1 << 0Ë

	)

48 
	#SYSCTL_CIPHER
 (1 << 16)

	)

50 
	#SYSDBG_PLL_CTL
 0x3C

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/param.h

10 #i‚de‡
__ASM_ARCH_PARAM_H


11 
	#__ASM_ARCH_PARAM_H


	)

13 
	#HZ
 100

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/system.h

11 #i‚de‡
__ASM_ARCH_SYSTEM_H


12 
	#__ASM_ARCH_SYSTEM_H


	)

14 
ölöe
 
	$¨ch_idÀ
()

16 
	`˝u_do_idÀ
();

17 
	}
}

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/timex.h

10 #i‚de‡
__ASM_ARCH_TIMEX_H


11 
	#__ASM_ARCH_TIMEX_H


	)

16 
	#CLOCK_TICK_RATE
 100

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/uncompress.h

9 #i‚de‡
__ASM_ARCH_UNCOMPRESS_H


10 
	#__ASM_ARCH_UNCOMPRESS_H


	)

12 
	~<löux/£rül_ªg.h
>

13 
	~<asm/io.h
>

14 
	~<mach/mcs814x.h
>

15 
	~<mach/˝u.h
>

17 
	#UART_SHIFT
 (2)

	)

20 
__iomem
 *
	gu¨t_ba£
;

22 
ölöe
 
	$putc
(
c
)

24 !(
	`__øw_ªadb
(
u¨t_ba£
 + (
UART_LSR
 << 
UART_SHIFT
)Ë& 
UART_LSR_TEMT
));

25 
	`__øw_wrôeb
(
c
, 
u¨t_ba£
 + (
UART_TX
 << 
UART_SHIFT
));

26 
	}
}

28 
ölöe
 
	$Êush
()

30 
	}
}

32 
ölöe
 
	$¨ch_decomp_£tup
()

34 i‡(
	`soc_is_mcs8140
())

35 
u¨t_ba£
 = (
__iomem
 *)(
MCS814X_PHYS_BASE
 +
MCS814X_UART
);

36 
	}
}

38 
	#¨ch_decomp_wdog
()

	)

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/irq.c

8 
	~<löux/öô.h
>

9 
	~<löux/úq.h
>

10 
	~<löux/io.h
>

11 
	~<löux/of.h
>

12 
	~<löux/of_addªss.h
>

13 
	~<löux/úqdomaö.h
>

15 
	~<asm/ex˚±i⁄.h
>

16 
	~<asm/mach/úq.h
>

17 
	~<mach/mcs814x.h
>

19 
__iomem
 *
	gmcs814x_ötc_ba£
;

20 
úq_domaö
 *
	gdomaö
;

22 
__öô
 
	$mcs814x_Æloc_gc
(
__iomem
 *
ba£
, 
úq_°¨t
,

23 
num
)

25 
úq_chù_gíîic
 *
gc
;

26 
úq_chù_ty≥
 *
˘
;

28 i‡(
	`úq_Æloc_domaö_gíîic_chùs
(
domaö
, 
num
, 1, "mcs814x-ötc", 
h™dÀ_Àvñ_úq
,

29 
IRQ_GC_INIT_MASK_CACHE
, 
IRQ_NOREQUEST
, 0))

30 
	`∑nic
("unableÅoállocate domain generic irq chip");

32 
gc
 = 
	`úq_gë_domaö_gíîic_chù
(
domaö
, 
úq_°¨t
);

33 i‡(!
gc
)

34 
	`∑nic
("unableÅo get generic irq chip");

36 
gc
->
ªg_ba£
 = 
ba£
;

37 
˘
 = 
gc
->
chù_ty≥s
;

38 
˘
->
chù
.
úq_ack
 = 
úq_gc_unmask_íabÀ_ªg
;

39 
˘
->
chù
.
úq_mask
 = 
úq_gc_mask_˛r_bô
;

40 
˘
->
chù
.
úq_unmask
 = 
úq_gc_mask_£t_bô
;

41 
˘
->
ªgs
.
mask
 = 
MCS814X_IRQ_MASK
;

42 
˘
->
ªgs
.
íabÀ
 = 
MCS814X_IRQ_ICR
;

45 
	`wrôñ_ªœxed
(0xffffffff, 
ba£
 + 
MCS814X_IRQ_ICR
);

46 
	}
}

48 
asmlökage
 
__ex˚±i⁄_úq_íåy
 
	$mcs814x_h™dÀ_úq
(
±_ªgs
 *
ªgs
)

50 
u32
 
°©us
, 
úq
;

54 
°©us
 = 
	`__øw_ªadl
(
mcs814x_ötc_ba£
 + 
MCS814X_IRQ_STS0
);

55 i‡(!
°©us
)

58 
úq
 = 
	`ffs
(
°©us
) - 1;

59 
°©us
 |(1 << 
úq
);

61 
	`__øw_wrôñ
(
°©us
, 
mcs814x_ötc_ba£
 + 
MCS814X_IRQ_STS0
);

63 
	`h™dÀ_domaö_úq
(
domaö
, 
úq
, 
ªgs
);

66 
	}
}

68 c⁄° 
of_devi˚_id
 
	gmcs814x_ötc_ids
[] = {

69 { .
com∑tibÀ
 = "moschip,mcs814x-intc" },

73 
__öô
 
	$mcs814x_of_úq_öô
()

75 
devi˚_node
 *
≈
;

77 
≈
 = 
	`of_föd_m©chög_node
(
NULL
, 
mcs814x_ötc_ids
);

78 i‡(!
≈
)

79 
	`∑nic
("unableÅo find compatible intcÇode in dtb\n");

81 
mcs814x_ötc_ba£
 = 
	`of_iom≠
(
≈
, 0);

82 i‡(!
mcs814x_ötc_ba£
)

83 
	`∑nic
("unableÅo map intc cpuÑegisters\n");

85 
domaö
 = 
	`úq_domaö_add_löór
(
≈
, 32, &
úq_gíîic_chù_›s
, 
NULL
);

86 i‡(!
domaö
)

87 
	`∑nic
("unableÅoádd irq domain\n");

88 
	`úq_£t_deÁu…_ho°
(
domaö
);

90 
	`of_node_put
(
≈
);

92 
	`mcs814x_Æloc_gc
(
mcs814x_ötc_ba£
, 0, 32);

93 
	}
}

	@linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/timer.c

8 
	~<löux/kî√l.h
>

9 
	~<löux/öãºu±.h
>

10 
	~<löux/time.h
>

11 
	~<löux/timex.h
>

12 
	~<löux/úq.h
>

13 
	~<löux/îr.h
>

14 
	~<löux/˛k.h
>

15 
	~<löux/io.h
>

16 
	~<löux/of.h
>

17 
	~<löux/of_addªss.h
>

18 
	~<löux/of_úq.h
>

20 
	~<asm/mach/time.h
>

21 
	~<mach/mcs814x.h
>

24 
	#TIMER_VAL
 0x00

	)

25 
	#TIMER_CTL
 0x04

	)

26 
	#TIMER_CTL_EN
 0x01

	)

27 
	#TIMER_CTL_DBG
 0x02

	)

29 
u32
 
	gœ°_ªlﬂd
;

30 
u32
 
	gtimî_c‹ª˘
;

31 
u32
 
	g˛ock_øã
;

32 
u32
 
	gtimî_ªlﬂd_vÆue
;

33 
__iomem
 *
	gmcs814x_timî_ba£
;

35 
ölöe
 
u32
 
	$ticks2u£cs
(
u32
 
x
)

37  
x
 / (
˛ock_øã
 / 1000000);

38 
	}
}

44 
u32
 
	$mcs814x_gëtimeoff£t
()

46 
u32
 
ticks
 = 
	`ªadl_ªœxed
(
mcs814x_timî_ba£
 + 
TIMER_VAL
);

48 i‡(
ticks
 < 
œ°_ªlﬂd
)

49  
	`ticks2u£cs
(
ticks
 + (
u32
)(0xfffffff‡- 
œ°_ªlﬂd
));

51  
	`ticks2u£cs
(
ticks
 - 
œ°_ªlﬂd
);

52 
	}
}

55 
úqªtu∫_t
 
	$mcs814x_timî_öãºu±
(
úq
, *
dev_id
)

57 
u32
 
cou¡
 = 
	`ªadl_ªœxed
(
mcs814x_timî_ba£
 + 
TIMER_VAL
);

60 
œ°_ªlﬂd
 = 
cou¡
 + 
timî_c‹ª˘
 + 
timî_ªlﬂd_vÆue
;

62 i‡(
œ°_ªlﬂd
 < 
timî_ªlﬂd_vÆue
) {

63 
œ°_ªlﬂd
 = 
timî_ªlﬂd_vÆue
;

65 i‡(
timî_c‹ª˘
 == 0)

66 
timî_c‹ª˘
 = 
	`ªadl_ªœxed
(
mcs814x_timî_ba£
 + 
TIMER_VAL
Ë- 
cou¡
;

68 
	`wrôñ_ªœxed
(
œ°_ªlﬂd
, 
mcs814x_timî_ba£
 + 
TIMER_VAL
);

70 
	`timî_tick
();

72  
IRQ_HANDLED
;

73 
	}
}

75 
of_devi˚_id
 
	gmcs814x_timî_ids
[] = {

76 { .
com∑tibÀ
 = "moschip,mcs814x-timer" },

80 
__öô
 
	$mcs814x_of_timî_öô
()

82 
devi˚_node
 *
≈
;

83 
úq
;

85 
≈
 = 
	`of_föd_m©chög_node
(
NULL
, 
mcs814x_timî_ids
);

86 i‡(!
≈
)

87 
	`∑nic
("unableÅo find compatibleÅimerÇode in dtb");

89 
mcs814x_timî_ba£
 = 
	`of_iom≠
(
≈
, 0);

90 i‡(!
mcs814x_timî_ba£
)

91 
	`∑nic
("unableÅoÑemapÅimer cpuÑegisters");

93 
úq
 = 
	`úq_of_∑r£_™d_m≠
(
≈
, 0);

94 i‡(!
úq
)

95 
	`∑nic
("no interruptsÖroperty/mapping failed forÅimer");

97  
úq
;

98 
	}
}

100 
__öô
 
	$mcs814x_timî_öô
()

102 
˛k
 *clk;

103 
úq
;

105 
¨ch_gëtimeoff£t
 = 
mcs814x_gëtimeoff£t
;

107 
˛k
 = 
	`˛k_gë_sys
("timî0", 
NULL
);

108 i‡(
	`IS_ERR_OR_NULL
(
˛k
))

109 
	`∑nic
("unableÅo getÅimer0 clock");

111 
˛ock_øã
 = 
	`˛k_gë_øã
(
˛k
);

113 
úq
 = 
	`mcs814x_of_timî_öô
();

115 
	`¥_öfo
("Timî fªquícy: %d (kHz)\n", 
˛ock_øã
 / 1000);

117 
timî_ªlﬂd_vÆue
 = 0xfffffff‡- (
˛ock_øã
 / 
HZ
);

120 
	`wrôñ_ªœxed
(~
TIMER_CTL_EN
, 
mcs814x_timî_ba£
 + 
TIMER_CTL
);

121 
	`wrôñ_ªœxed
(
timî_ªlﬂd_vÆue
, 
mcs814x_timî_ba£
 + 
TIMER_VAL
);

122 
œ°_ªlﬂd
 = 
timî_ªlﬂd_vÆue
;

124 i‡(
	`ªque°_úq
(
úq
, 
mcs814x_timî_öãºu±
,

125 
IRQF_DISABLED
 | 
IRQF_TIMER
 | 
IRQF_IRQPOLL
,

126 "mcs814x-timî", 
NULL
))

127 
	`∑nic
("u«bÀÅÿªque°Åimî0 irq %d", 
úq
);

130 
	`wrôñ_ªœxed
(
TIMER_CTL_EN
 | 
TIMER_CTL_DBG
,

131 
mcs814x_timî_ba£
 + 
TIMER_CTL
);

132 
	}
}

	@linux/mcs814x/files-3.18/drivers/char/hw_random/mcs814x-rng.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/hw_øndom.h
>

17 
	~<löux/io.h
>

18 
	~<löux/of.h
>

20 
	#STAT
 0x00

	)

21 
	#RND
 0x04

	)

23 
	smcs814x_∫g_¥iv
 {

24 
__iomem
 *
	mªgs
;

27 
	$mcs814x_∫g_d©a_ªad
(
hw∫g
 *
∫g
, 
u32
 *
buf„r
)

29 
mcs814x_∫g_¥iv
 *
¥iv
 = (mcs814x_∫g_¥iv *)
∫g
->priv;

31 *
buf„r
 = 
	`ªadl_ªœxed
(
¥iv
->
ªgs
 + 
RND
);

34 
	}
}

36 
	$mcs814x_∫g_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

38 
ªsour˚
 *
ªs
;

39 
mcs814x_∫g_¥iv
 *
¥iv
;

40 
hw∫g
 *
∫g
;

41 
ªt
;

43 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

44 i‡(!
ªs
)

45  -
ENODEV
;

47 
¥iv
 = 
	`kzÆloc
((*¥iv), 
GFP_KERNEL
);

48 i‡(!
¥iv
) {

49 
ªt
 = -
ENOMEM
;

50 
out
;

53 
∫g
 = 
	`kzÆloc
((*∫g), 
GFP_KERNEL
);

54 i‡(!
∫g
) {

55 
ªt
 = -
ENOMEM
;

56 
out_¥iv
;

59 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
∫g
);

60 
∫g
->
¥iv
 = ()priv;

61 
∫g
->
«me
 = 
pdev
->name;

62 
∫g
->
d©a_ªad
 = 
mcs814x_∫g_d©a_ªad
;

64 
¥iv
->
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

65 i‡(!
¥iv
->
ªgs
) {

66 
ªt
 = -
ENOMEM
;

67 
out_∫g
;

70 
ªt
 = 
	`hw∫g_ªgi°î
(
∫g
);

71 i‡(
ªt
) {

72 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegister hwrng driver\n");

73 
out
;

76 
	`dev_öfo
(&
pdev
->
dev
, "registered\n");

78  
ªt
;

80 
out_∫g
:

81 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

82 
	`k‰ì
(
∫g
);

83 
out_¥iv
:

84 
	`k‰ì
(
¥iv
);

85 
out
:

86  
ªt
;

87 
	}
}

89 
	$mcs814x_∫g_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

91 
hw∫g
 *
∫g
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

92 
mcs814x_∫g_¥iv
 *
¥iv
 = (mcs814x_∫g_¥iv *)
∫g
->priv;

94 
	`hw∫g_uƒegi°î
(
∫g
);

95 
	`k‰ì
(
¥iv
);

96 
	`k‰ì
(
∫g
);

97 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

100 
	}
}

102 c⁄° 
of_devi˚_id
 
	gmcs814x_∫g_ids
[] = {

103 { .
com∑tibÀ
 = "moschip,mcs814x-rng", },

107 
∂©f‹m_drivî
 
	gmcs814x_∫g_drivî
 = {

108 .
drivî
 = {

109 .
«me
 = "mcs814x-rng",

110 .
	gow√r
 = 
THIS_MODULE
,

111 .
	gof_m©ch_èbÀ
 = 
mcs814x_∫g_ids
,

113 .
	g¥obe
 = 
mcs814x_∫g_¥obe
,

114 .
	gªmove
 = 
mcs814x_∫g_ªmove
,

117 
moduÀ_∂©f‹m_drivî
(
mcs814x_∫g_drivî
);

119 
MODULE_AUTHOR
("Florian Fainelli <florian@openwrt.org>");

120 
MODULE_DESCRIPTION
("H/W Random Number Generator (RNG) for Moschip MCS814x");

121 
MODULE_LICENSE
("GPL");

	@linux/mcs814x/files-3.18/drivers/gpio/gpio-mcs814x.c

9 
	~<löux/öô.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/gpio.h
>

15 
	~<löux/io.h
>

16 
	~<löux/of.h
>

17 
	~<löux/of_addªss.h
>

19 
	smcs814x_gpio_chù
 {

20 
__iomem
 *
	mªgs
;

21 
gpio_chù
 
	mchù
;

24 
	#GPIO_PIN
 0x00

	)

25 
	#GPIO_DIR
 0x04

	)

27 
	#to_mcs814x_gpio_chù
(
x
Ë
	`c⁄èöî_of
(x, 
mcs814x_gpio_chù
, 
chù
)

	)

29 
	$mcs814x_gpio_gë
(
gpio_chù
 *
chù
, 
off£t
)

31 
mcs814x_gpio_chù
 *
mcs814x
 = 
	`to_mcs814x_gpio_chù
(
chù
);

33  
	`ªadl_ªœxed
(
mcs814x
->
ªgs
 + 
GPIO_PIN
Ë& (1 << 
off£t
);

34 
	}
}

36 
	$mcs814x_gpio_£t
(
gpio_chù
 *
chù
,

37 
off£t
, 
vÆue
)

39 
mcs814x_gpio_chù
 *
mcs814x
 = 
	`to_mcs814x_gpio_chù
(
chù
);

40 
u32
 
mask
;

42 
mask
 = 
	`ªadl_ªœxed
(
mcs814x
->
ªgs
 + 
GPIO_PIN
);

43 i‡(
vÆue
)

44 
mask
 |(1 << 
off£t
);

46 
mask
 &~(1 << 
off£t
);

47 
	`wrôñ_ªœxed
(
mask
, 
mcs814x
->
ªgs
 + 
GPIO_PIN
);

48 
	}
}

50 
	$mcs814x_gpio_dúe˘i⁄_ouçut
(
gpio_chù
 *
chù
,

51 
off£t
, 
vÆue
)

53 
mcs814x_gpio_chù
 *
mcs814x
 = 
	`to_mcs814x_gpio_chù
(
chù
);

54 
u32
 
mask
;

56 
mask
 = 
	`ªadl_ªœxed
(
mcs814x
->
ªgs
 + 
GPIO_DIR
);

57 
mask
 &~(1 << 
off£t
);

58 
	`wrôñ_ªœxed
(
mask
, 
mcs814x
->
ªgs
 + 
GPIO_DIR
);

61 
	}
}

63 
	$mcs814x_gpio_dúe˘i⁄_öput
(
gpio_chù
 *
chù
,

64 
off£t
)

66 
mcs814x_gpio_chù
 *
mcs814x
 = 
	`to_mcs814x_gpio_chù
(
chù
);

67 
u32
 
mask
;

69 
mask
 = 
	`ªadl_ªœxed
(
mcs814x
->
ªgs
 + 
GPIO_DIR
);

70 
mask
 |(1 << 
off£t
);

71 
	`wrôñ_ªœxed
(
mask
, 
mcs814x
->
ªgs
 + 
GPIO_DIR
);

74 
	}
}

76 
	$mcs814x_gpio_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

78 
ªsour˚
 *
ªs
;

79 
mcs814x_gpio_chù
 *
mcs814x_chù
;

80 
ªt
;

81 c⁄° *
num_gpios
;

83 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

84 i‡(!
ªs
)

85  -
ENODEV
;

87 
num_gpios
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
, "num-gpios", 
NULL
);

88 i‡(!
num_gpios
)

89 
	`dev_îr
(&
pdev
->
dev
, "FIXME:ÇoÇum-gpiosÖroperty\n");

91 
mcs814x_chù
 = 
	`kzÆloc
((*mcs814x_chù), 
GFP_KERNEL
);

92 i‡(!
mcs814x_chù
)

93  -
ENOMEM
;

95 
mcs814x_chù
->
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

96 i‡(!
mcs814x_chù
->
ªgs
) {

97 
ªt
 = -
ENOMEM
;

98 
out
;

101 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
mcs814x_chù
);

103 #ifde‡
CONFIG_OF_GPIO


104 
mcs814x_chù
->
chù
.
of_node
 = 
pdev
->
dev
.of_node;

107 
mcs814x_chù
->
chù
.
œbñ
 = 
pdev
->
«me
;

108 
mcs814x_chù
->
chù
.
gë
 = 
mcs814x_gpio_gë
;

109 
mcs814x_chù
->
chù
.
£t
 = 
mcs814x_gpio_£t
;

110 
mcs814x_chù
->
chù
.
dúe˘i⁄_öput
 = 
mcs814x_gpio_dúe˘i⁄_öput
;

111 
mcs814x_chù
->
chù
.
dúe˘i⁄_ouçut
 = 
mcs814x_gpio_dúe˘i⁄_ouçut
;

112 
mcs814x_chù
->
chù
.
ngpio
 = 
	`be32_to_˝up
(
num_gpios
);

114 
mcs814x_chù
->
chù
.
ba£
 = -1;

116 
ªt
 = 
	`gpiochù_add
(&
mcs814x_chù
->
chù
);

117 i‡(
ªt
) {

118 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegister gpiochip\n");

119 
out
;

124 
out
:

125 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

126 
	`k‰ì
(
mcs814x_chù
);

127  
ªt
;

128 
	}
}

130 
of_devi˚_id
 
	gmcs814x_gpio_ids
[] = {

131 { .
com∑tibÀ
 = "moschip,mcs814x-gpio" },

135 
∂©f‹m_drivî
 
	gmcs814x_gpio_drivî
 = {

136 .
drivî
 = {

137 .
«me
 = "mcs814x-gpio",

138 .
	gow√r
 = 
THIS_MODULE
,

139 .
	gof_m©ch_èbÀ
 = 
mcs814x_gpio_ids
,

141 .
	g¥obe
 = 
mcs814x_gpio_¥obe
,

144 
__öô
 
	$mcs814x_gpio_öô
()

146  
	`∂©f‹m_drivî_ªgi°î
(&
mcs814x_gpio_drivî
);

147 
	}
}

148 
po°c‹e_öôˇŒ
(
mcs814x_gpio_öô
);

	@linux/mcs814x/files-3.18/drivers/net/ethernet/mcs8140/nuport_mac.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/√tdevi˚.h
>

14 
	~<löux/ëhîdevi˚.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/ëhtoﬁ.h
>

17 
	~<löux/mii.h
>

18 
	~<löux/io.h
>

19 
	~<löux/öãºu±.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/of.h
>

22 
	~<löux/of_mdio.h
>

23 
	~<löux/of_√t.h
>

24 
	~<löux/úq.h
>

25 
	~<löux/îr.h
>

26 
	~<löux/phy.h
>

27 
	~<löux/˛k.h
>

28 
	~<löux/dma-m≠pög.h
>

30 
	~<asm/u«lig√d.h
>

31 
	~<asm/sizes.h
>

34 
	#MAC_BASE_ADDR
 ((
¥iv
->
mac_ba£
))

	)

36 
	#CTRL_REG
 (
MAC_BASE_ADDR
)

	)

37 
	#MII_BUSY
 (1 << 0)

	)

38 
	#MII_WRITE
 (1 << 1)

	)

39 
	#RX_ENABLE
 (1 << 2)

	)

40 
	#TX_ENABLE
 (1 << 3)

	)

41 
	#DEFER_CHECK
 (1 << 5)

	)

42 
	#STRIP_PAD
 (1 << 8)

	)

43 
	#DRTRY_DISABLE
 (1 << 10)

	)

44 
	#FULL_DUPLEX
 (1 << 20)

	)

45 
	#HBD_DISABLE
 (1 << 28)

	)

46 
	#MAC_ADDR_HIGH_REG
 (
MAC_BASE_ADDR
 + 0x04)

	)

47 
	#MAC_ADDR_LOW_REG
 (
MAC_BASE_ADDR
 + 0x08)

	)

48 
	#MII_ADDR_REG
 (
MAC_BASE_ADDR
 + 0x14)

	)

49 
	#MII_ADDR_SHIFT
 (11)

	)

50 
	#MII_REG_SHIFT
 (6)

	)

51 
	#MII_DATA_REG
 (
MAC_BASE_ADDR
 + 0x18)

	)

53 
	#LINK_INT_CSR
 (
MAC_BASE_ADDR
 + 0xD0)

	)

54 
	#LINK_INT_EN
 (1 << 0)

	)

55 
	#LINK_PHY_ADDR_SHIFT
 (1)

	)

56 
	#LINK_PHY_REG_SHIFT
 (6)

	)

57 
	#LINK_BIT_UP_SHIFT
 (11)

	)

58 
	#LINK_UP
 (1 << 16)

	)

59 
	#LINK_INT_POLL_TIME
 (
MAC_BASE_ADDR
 + 0xD4)

	)

60 
	#LINK_POLL_MASK
 ((1 << 20Ë- 1)

	)

62 
	#DMA_CHAN_WIDTH
 32

	)

63 
	#DMA_RX_CHAN
 0

	)

64 
	#DMA_TX_CHAN
 2

	)

67 
	#RX_DMA_BASE
 ((
¥iv
->
dma_ba£
) + \

68 (
DMA_CHAN_WIDTH
 * 
DMA_RX_CHAN
))

	)

69 
	#RX_BUFFER_ADDR
 (
RX_DMA_BASE
 + 0x00)

	)

70 
	#RX_MAX_BYTES
 (
RX_DMA_BASE
 + 0x04)

	)

71 
	#RX_ACT_BYTES
 (
RX_DMA_BASE
 + 0x08)

	)

72 
	#RX_START_DMA
 (
RX_DMA_BASE
 + 0x0C)

	)

73 
	#RX_DMA_ENABLE
 (1 << 0)

	)

74 
	#RX_DMA_RESET
 (1 << 1)

	)

75 
	#RX_DMA_STATUS_FIFO
 (1 << 12)

	)

76 
	#RX_DMA_ENH
 (
RX_DMA_BASE
 + 0x14)

	)

77 
	#RX_DMA_INT_ENABLE
 (1 << 1)

	)

80 
	#TX_DMA_BASE
 ((
¥iv
->
dma_ba£
) + \

81 (
DMA_CHAN_WIDTH
 * 
DMA_TX_CHAN
))

	)

82 
	#TX_BUFFER_ADDR
 (
TX_DMA_BASE
 + 0x00)

	)

83 
	#TX_PKT_BYTES
 (
TX_DMA_BASE
 + 0x04)

	)

84 
	#TX_BYTES_SENT
 (
TX_DMA_BASE
 + 0x08)

	)

85 
	#TX_START_DMA
 (
TX_DMA_BASE
 + 0x0C)

	)

86 
	#TX_DMA_ENABLE
 (1 << 0)

	)

87 
	#TX_DMA_START_FRAME
 (1 << 2)

	)

88 
	#TX_DMA_END_FRAME
 (1 << 3)

	)

89 
	#TX_DMA_PAD_DISABLE
 (1 << 8)

	)

90 
	#TX_DMA_CRC_DISABLE
 (1 << 9)

	)

91 
	#TX_DMA_FIFO_FULL
 (1 << 16)

	)

92 
	#TX_DMA_FIFO_EMPTY
 (1 << 17)

	)

93 
	#TX_DMA_STATUS_AVAIL
 (1 << 18)

	)

94 
	#TX_DMA_RESET
 (1 << 24)

	)

95 
	#TX_DMA_STATUS
 (
TX_DMA_BASE
 + 0x10)

	)

96 
	#TX_DMA_ENH
 (
TX_DMA_BASE
 + 0x14)

	)

97 
	#TX_DMA_ENH_ENABLE
 (1 << 0)

	)

98 
	#TX_DMA_INT_FIFO
 (1 << 1)

	)

100 
	#RX_ALLOC_SIZE
 
SZ_2K


	)

101 
	#MAX_ETH_FRAME_SIZE
 1536

	)

102 
	#RX_SKB_TAILROOM
 128

	)

103 
	#RX_SKB_HEADROOM
 (
RX_ALLOC_SIZE
 - \

104 (
MAX_ETH_FRAME_SIZE
 + 
RX_SKB_TAILROOM
Ë+ 0)

	)

107 
	#ERROR_FILTER_MASK
 ((1<<14) | (1<<15) | (1<<16) | (1<<17) | (0<<18) | \

111 (1<<26Ë| (0<<31))

	)

112 
	#TX_RING_SIZE
 30

	)

113 
	#RX_RING_SIZE
 30

	)

115 
ölöe
 
u32
 
	$nup‹t_mac_ªadl
(
__iomem
 *
ªg
)

117  
	`ªadl_ªœxed
(
ªg
);

118 
	}
}

120 
ölöe
 
u8
 
	$nup‹t_mac_ªadb
(
__iomem
 *
ªg
)

122  
	`ªadb_ªœxed
(
ªg
);

123 
	}
}

125 
ölöe
 
	$nup‹t_mac_wrôñ
(
u32
 
vÆue
, 
__iomem
 *
ªg
)

127 
	`wrôñ_ªœxed
(
vÆue
, 
ªg
);

128 
	}
}

130 
ölöe
 
	$nup‹t_mac_wrôeb
(
u8
 
vÆue
, 
__iomem
 *
ªg
)

132 
	`wrôñ_ªœxed
(
vÆue
, 
ªg
);

133 
	}
}

136 
	snup‹t_mac_¥iv
 {

137 
•ölock_t
 
	mlock
;

139 
__iomem
 *
	mmac_ba£
;

140 
__iomem
 *
	mdma_ba£
;

142 
	mrx_úq
;

143 
	mtx_úq
;

144 
	mlök_úq
;

145 
˛k
 *
	memac_˛k
;

146 
˛k
 *
	mïhy_˛k
;

149 
sk_buff
 *
	mtx_skb
[
TX_RING_SIZE
];

150 
dma_addr_t
 
	mtx_addr
;

151 
	mvÆid_txskb
[
TX_RING_SIZE
];

152 
	mcur_tx
;

153 
	mdma_tx
;

154 
	mtx_fuŒ
;

157 
sk_buff
 *
	mrx_skb
[
RX_RING_SIZE
];

158 
dma_addr_t
 
	mrx_addr
;

159 
	múq_rxskb
[
RX_RING_SIZE
];

160 
	mpkt_Àn
[
RX_RING_SIZE
];

161 
	mcur_rx
;

162 
	mdma_rx
;

163 
	mrx_fuŒ
;

165 
	mfú°_pkt
;

168 
«pi_°ru˘
 
	m«pi
;

169 
√t_devi˚
 *
	mdev
;

170 
∂©f‹m_devi˚
 *
	mpdev
;

171 
mii_bus
 *
	mmii_bus
;

172 
phy_devi˚
 *
	mphydev
;

173 
devi˚_node
 *
	mphy_node
;

174 
phy_öãrÁ˚_t
 
	mphy_öãrÁ˚
;

175 
	mﬁd_lök
;

176 
	mﬁd_du∂ex
;

177 
u32
 
	mmsg_Àvñ
;

178 
	mbuf„r_shi·ög_Àn
;

181 
ölöe
 
	$nup‹t_mac_mii_busy_waô
(
nup‹t_mac_¥iv
 *
¥iv
)

183 
cuº
;

184 
föish
 = 
jiffõs
 + 3 * 
HZ
;

187 
cuº
 = 
jiffõs
;

188 i‡(!(
	`nup‹t_mac_ªadl
(
MII_ADDR_REG
Ë& 
MII_BUSY
))

190 
	`˝u_ªœx
();

191 } !
	`time_a·î_eq
(
cuº
, 
föish
));

193  -
EBUSY
;

194 
	}
}

197 
	$nup‹t_mac_mii_ªad
(
mii_bus
 *
bus
,

198 
mii_id
, 
ªgnum
)

200 
√t_devi˚
 *
dev
 = 
bus
->
¥iv
;

201 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

202 
ªt
;

203 
u32
 
vÆ
 = 0;

205 
ªt
 = 
	`nup‹t_mac_mii_busy_waô
(
¥iv
);

206 i‡(
ªt
)

207  
ªt
;

209 
vÆ
 |(
mii_id
 << 
MII_ADDR_SHIFT
Ë| (
ªgnum
 << 
MII_REG_SHIFT
Ë| 
MII_BUSY
;

210 
	`nup‹t_mac_wrôñ
(
vÆ
, 
MII_ADDR_REG
);

211 
ªt
 = 
	`nup‹t_mac_mii_busy_waô
(
¥iv
);

212 i‡(
ªt
)

213  
ªt
;

215  
	`nup‹t_mac_ªadl
(
MII_DATA_REG
);

216 
	}
}

218 
	$nup‹t_mac_mii_wrôe
(
mii_bus
 *
bus
, 
mii_id
,

219 
ªgnum
, 
u16
 
vÆue
)

221 
√t_devi˚
 *
dev
 = 
bus
->
¥iv
;

222 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

223 
ªt
;

224 
u32
 
vÆ
 = 0;

226 
ªt
 = 
	`nup‹t_mac_mii_busy_waô
(
¥iv
);

227 i‡(
ªt
)

228  
ªt
;

230 
vÆ
 |(
mii_id
 << 
MII_ADDR_SHIFT
Ë| (
ªgnum
 << 
MII_REG_SHIFT
);

231 
vÆ
 |
MII_BUSY
 | 
MII_WRITE
;

232 
	`nup‹t_mac_wrôñ
(
vÆue
, 
MII_DATA_REG
);

233 
	`nup‹t_mac_wrôñ
(
vÆ
, 
MII_ADDR_REG
);

235  
	`nup‹t_mac_mii_busy_waô
(
¥iv
);

236 
	}
}

238 
	$nup‹t_mac_mii_ª£t
(
mii_bus
 *
bus
)

241 
	}
}

243 
	$nup‹t_mac_°¨t_tx_dma
(
nup‹t_mac_¥iv
 *
¥iv
,

244 
sk_buff
 *
skb
)

246 
u32
 
ªg
;

247 
timeout
 = 2048;

249 
timeout
--) {

250 
ªg
 = 
	`nup‹t_mac_ªadl
(
TX_START_DMA
);

251 i‡(!(
ªg
 & 
TX_DMA_ENABLE
)) {

252 
	`√tdev_dbg
(
¥iv
->
dev
, "dmaÑeady\n");

255 
	`˝u_ªœx
();

258 i‡(!
timeout
)

259  -
EBUSY
;

261 
¥iv
->
tx_addr
 = 
	`dma_m≠_sögÀ
(&¥iv->
pdev
->
dev
, 
skb
->
d©a
,

262 
skb
->
Àn
, 
DMA_TO_DEVICE
);

263 i‡(
	`dma_m≠pög_îr‹
(&
¥iv
->
pdev
->
dev
,Öriv->
tx_addr
))

264  -
ENOMEM
;

267 
	`nup‹t_mac_wrôñ
(
TX_DMA_ENH_ENABLE
, 
TX_DMA_ENH
);

268 
	`nup‹t_mac_wrôñ
(
¥iv
->
tx_addr
, 
TX_BUFFER_ADDR
);

269 
	`nup‹t_mac_wrôñ
((
skb
->
Àn
Ë- 1, 
TX_PKT_BYTES
);

270 
	`wmb
();

271 
ªg
 = 
TX_DMA_ENABLE
 | 
TX_DMA_START_FRAME
 | 
TX_DMA_END_FRAME
;

272 
	`nup‹t_mac_wrôñ
(
ªg
, 
TX_START_DMA
);

275 
	}
}

277 
	$nup‹t_mac_ª£t_tx_dma
(
nup‹t_mac_¥iv
 *
¥iv
)

279 
u32
 
ªg
;

281 
ªg
 = 
	`nup‹t_mac_ªadl
(
TX_START_DMA
);

282 
ªg
 |
TX_DMA_RESET
;

283 
	`nup‹t_mac_wrôñ
(
ªg
, 
TX_START_DMA
);

284 
	}
}

286 
	$nup‹t_mac_°¨t_rx_dma
(
nup‹t_mac_¥iv
 *
¥iv
,

287 
sk_buff
 *
skb
)

289 
u32
 
ªg
;

290 
timeout
 = 2048;

292 
timeout
--) {

293 
ªg
 = 
	`nup‹t_mac_ªadl
(
RX_START_DMA
);

294 i‡(!(
ªg
 & 
RX_DMA_ENABLE
)) {

295 
	`√tdev_dbg
(
¥iv
->
dev
, "dmaÑeady\n");

298 
	`˝u_ªœx
();

301 i‡(!
timeout
)

302  -
EBUSY
;

304 
¥iv
->
rx_addr
 = 
	`dma_m≠_sögÀ
(&¥iv->
pdev
->
dev
, 
skb
->
d©a
,

305 
RX_ALLOC_SIZE
, 
DMA_FROM_DEVICE
);

306 i‡(
	`dma_m≠pög_îr‹
(&
¥iv
->
pdev
->
dev
,Öriv->
rx_addr
))

307  -
ENOMEM
;

309 
	`nup‹t_mac_wrôñ
(
¥iv
->
rx_addr
, 
RX_BUFFER_ADDR
);

310 
	`wmb
();

311 
	`nup‹t_mac_wrôñ
(
RX_DMA_ENABLE
, 
RX_START_DMA
);

314 
	}
}

316 
	$nup‹t_mac_ª£t_rx_dma
(
nup‹t_mac_¥iv
 *
¥iv
)

318 
u32
 
ªg
;

320 
ªg
 = 
	`nup‹t_mac_ªadl
(
RX_START_DMA
);

321 
ªg
 |
RX_DMA_RESET
;

322 
	`nup‹t_mac_wrôñ
(
ªg
, 
RX_START_DMA
);

323 
	}
}

326 
	$nup‹t_mac_dißbÀ_rx_dma
(
nup‹t_mac_¥iv
 *
¥iv
)

328 
u32
 
ªg
;

330 
ªg
 = 
	`nup‹t_mac_ªadl
(
RX_DMA_ENH
);

331 
ªg
 &~
RX_DMA_INT_ENABLE
;

332 
	`nup‹t_mac_wrôñ
(
ªg
, 
RX_DMA_ENH
);

333 
	}
}

335 
	$nup‹t_mac_íabÀ_rx_dma
(
nup‹t_mac_¥iv
 *
¥iv
)

337 
u32
 
ªg
;

339 
ªg
 = 
	`nup‹t_mac_ªadl
(
RX_DMA_ENH
);

340 
ªg
 |
RX_DMA_INT_ENABLE
;

341 
	`nup‹t_mac_wrôñ
(
ªg
, 
RX_DMA_ENH
);

342 
	}
}

345 
	$nup‹t_mac_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

347 
Êags
;

348 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

349 
ªt
;

351 i‡(
	`√tif_queue_°›≥d
(
dev
)) {

352 
	`√tdev_w¨n
(
dev
, "netif queue was stopped,Ñestarting\n");

353 
	`√tif_°¨t_queue
(
dev
);

356 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

357 i‡(
¥iv
->
fú°_pkt
) {

358 
ªt
 = 
	`nup‹t_mac_°¨t_tx_dma
(
¥iv
, 
skb
);

359 i‡(
ªt
) {

360 
	`√tif_°›_queue
(
dev
);

361 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

362 
	`√tdev_îr
(
dev
, "transmitÖath busy\n");

363  
NETDEV_TX_BUSY
;

365 
¥iv
->
fú°_pkt
 = 0;

368 
¥iv
->
tx_skb
[¥iv->
cur_tx
] = 
skb
;

369 
dev
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

370 
dev
->
°©s
.
tx_∑ckës
++;

371 
¥iv
->
vÆid_txskb
[¥iv->
cur_tx
] = 1;

372 
¥iv
->
cur_tx
++;

373 
dev
->
å™s_°¨t
 = 
jiffõs
;

375 i‡(
¥iv
->
cur_tx
 >
TX_RING_SIZE
)

376 
¥iv
->
cur_tx
 = 0;

378 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

380 i‡(
¥iv
->
vÆid_txskb
[¥iv->
cur_tx
]) {

381 
¥iv
->
tx_fuŒ
 = 1;

382 
	`√tdev_îr
(
dev
, "stopping queue\n");

383 
	`√tif_°›_queue
(
dev
);

386  
NETDEV_TX_OK
;

387 
	}
}

389 
	$nup‹t_mac_adju°_lök
(
√t_devi˚
 *
dev
)

391 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

392 
phy_devi˚
 *
phydev
 = 
¥iv
->phydev;

393 
°©us_ch™ged
 = 0;

394 
u32
 
ªg
;

396 
	`BUG_ON
(!
phydev
);

398 i‡(
¥iv
->
ﬁd_lök
 !
phydev
->
lök
) {

399 
°©us_ch™ged
 = 1;

400 
¥iv
->
ﬁd_lök
 = 
phydev
->
lök
;

403 i‡(
phydev
->
lök
 && (
¥iv
->
ﬁd_du∂ex
 !phydev->
du∂ex
)) {

404 
ªg
 = 
	`nup‹t_mac_ªadl
(
CTRL_REG
);

405 i‡(
phydev
->
du∂ex
 =
DUPLEX_FULL
)

406 
ªg
 |
DUPLEX_FULL
;

408 
ªg
 &~
DUPLEX_FULL
;

409 
	`nup‹t_mac_wrôñ
(
ªg
, 
CTRL_REG
);

411 
°©us_ch™ged
 = 1;

412 
¥iv
->
ﬁd_du∂ex
 = 
phydev
->
du∂ex
;

415 i‡(!
°©us_ch™ged
)

418 
	`¥_öfo
("%s:Üök %s", 
dev
->
«me
, 
phydev
->
lök
 ?

420 i‡(
phydev
->
lök
) {

421 
	`¥_c⁄t
(" - %d/%s", 
phydev
->
•ìd
,

422 
phydev
->
du∂ex
 =
DUPLEX_FULL
 ? "full" : "half");

424 
	`¥_c⁄t
("\n");

425 
	}
}

427 
úqªtu∫_t
 
	$nup‹t_mac_lök_öãºu±
(
úq
, *
dev_id
)

429 
√t_devi˚
 *
dev
 = 
dev_id
;

430 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

431 
u32
 
ªg
;

432 
u8
 
phy_addr
;

433 
Êags
;

434 
úqªtu∫_t
 
ªt
 = 
IRQ_HANDLED
;

436 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

437 
ªg
 = 
	`nup‹t_mac_ªadl
(
LINK_INT_CSR
);

438 
phy_addr
 = (
ªg
 >> 
LINK_PHY_ADDR_SHIFT
Ë& (
PHY_MAX_ADDR
 - 1);

440 i‡(
phy_addr
 !
¥iv
->
phydev
->
addr
) {

441 
	`√tdev_îr
(
dev
, "•uriou†PHY irq (phy: %d)\n", 
phy_addr
);

442 
ªt
 = 
IRQ_NONE
;

443 
out
;

446 
¥iv
->
phydev
->
lök
 = (
ªg
 & 
LINK_UP
);

447 
	`nup‹t_mac_adju°_lök
(
dev
);

449 
out
:

450 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

451  
ªt
;

452 
	}
}

454 
úqªtu∫_t
 
	$nup‹t_mac_tx_öãºu±
(
úq
, *
dev_id
)

456 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

457 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

458 
sk_buff
 *
skb
;

459 
Êags
;

460 
ªt
;

461 
u32
 
ªg
;

463 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

465 
ªg
 = 
	`nup‹t_mac_ªadl
(
TX_START_DMA
);

466 i‡(
ªg
 & 
TX_DMA_STATUS_AVAIL
) {

467 
	`nup‹t_mac_wrôñ
(
ªg
, 
TX_START_DMA
);

468 
ªg
 = 
	`nup‹t_mac_ªadl
(
TX_DMA_STATUS
);

470 i‡(
ªg
 & 1)

471 
dev
->
°©s
.
tx_îr‹s
++;

473 
	`√tdev_dbg
(
dev
, "nÿ°©u†w‹d: %08x\n", 
ªg
);

475 
skb
 = 
¥iv
->
tx_skb
[¥iv->
dma_tx
];

476 
¥iv
->
tx_skb
[¥iv->
dma_tx
] = 
NULL
;

477 
¥iv
->
vÆid_txskb
[¥iv->
dma_tx
] = 0;

478 
	`dma_unm≠_sögÀ
(&
¥iv
->
pdev
->
dev
,Öriv->
rx_addr
, 
skb
->
Àn
,

479 
DMA_TO_DEVICE
);

480 
	`dev_k‰ì_skb_úq
(
skb
);

482 
¥iv
->
dma_tx
++;

483 i‡(
¥iv
->
dma_tx
 >
TX_RING_SIZE
)

484 
¥iv
->
dma_tx
 = 0;

486 i‡(!
¥iv
->
vÆid_txskb
[¥iv->
dma_tx
])

487 
¥iv
->
fú°_pkt
 = 1;

489 
ªt
 = 
	`nup‹t_mac_°¨t_tx_dma
(
¥iv
,Öriv->
tx_skb
[¥iv->
dma_tx
]);

490 i‡(
ªt
)

491 
	`√tdev_îr
(
dev
, "failedÅoÑestart TX dma\n");

494 i‡(
¥iv
->
tx_fuŒ
) {

495 
	`√tdev_dbg
(
dev
, "restartingÅransmit queue\n");

496 
	`√tif_wake_queue
(
dev
);

497 
¥iv
->
tx_fuŒ
 = 0;

500 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

502  
IRQ_HANDLED
;

503 
	}
}

505 
	$nup‹t_mac_has_w‹k
(
nup‹t_mac_¥iv
 *
¥iv
)

507 
i
;

509 
i
 = 0; i < 
RX_RING_SIZE
; i++)

510 i‡(
¥iv
->
rx_skb
[
i
])

514 
	}
}

516 
úqªtu∫_t
 
	$nup‹t_mac_rx_öãºu±
(
úq
, *
dev_id
)

518 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

519 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

520 
Êags
;

521 
ªt
;

523 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

524 i‡(!
¥iv
->
rx_fuŒ
) {

525 
¥iv
->
pkt_Àn
[¥iv->
dma_rx
] = 
	`nup‹t_mac_ªadl
(
RX_ACT_BYTES
) - 4;

526 
¥iv
->
úq_rxskb
[¥iv->
dma_rx
] = 0;

527 
¥iv
->
dma_rx
++;

529 i‡(
¥iv
->
dma_rx
 >
RX_RING_SIZE
)

530 
¥iv
->
dma_rx
 = 0;

532 
¥iv
->
rx_fuŒ
 = 0;

534 i‡(
¥iv
->
úq_rxskb
[¥iv->
dma_rx
] == 1) {

535 
ªt
 = 
	`nup‹t_mac_°¨t_rx_dma
(
¥iv
,Öriv->
rx_skb
[¥iv->
dma_rx
]);

536 i‡(
ªt
)

537 
	`√tdev_îr
(
dev
, "failedÅo startÑx dma\n");

539 
¥iv
->
rx_fuŒ
 = 1;

540 
	`√tdev_dbg
(
dev
, "RXÑing full\n");

543 i‡(
	`likñy
(
	`nup‹t_mac_has_w‹k
(
¥iv
))) {

545 
	`nup‹t_mac_dißbÀ_rx_dma
(
¥iv
);

546 
	`«pi_scheduÀ
(&
¥iv
->
«pi
);

548 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

550  
IRQ_HANDLED
;

551 
	}
}

554 
	$nup‹t_mac_rx
(
√t_devi˚
 *
dev
, 
limô
)

556 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

557 
sk_buff
 *
skb
;

558 
Àn
, 
°©us
;

559 
cou¡
 = 0;

561 
cou¡
 < 
limô
 && !
¥iv
->
úq_rxskb
[¥iv->
cur_rx
]) {

562 
skb
 = 
¥iv
->
rx_skb
[¥iv->
cur_rx
];

563 
Àn
 = 
¥iv
->
pkt_Àn
[¥iv->
cur_rx
];

566 
Àn
 =Üí - 
¥iv
->
buf„r_shi·ög_Àn
;

567 
skb
->
d©a
 = skb->d©®+ 
¥iv
->
buf„r_shi·ög_Àn
;

570 
°©us
 = 
	`gë_u«lig√d
((
u32
 *Ë(
skb
->
d©a
 + 
Àn
));

572 
	`dma_unm≠_sögÀ
(&
¥iv
->
pdev
->
dev
,Öriv->
rx_addr
, 
skb
->
Àn
,

573 
DMA_FROM_DEVICE
);

576 i‡(!(
°©us
 & (1 << 30))) {

577 
	`dev_k‰ì_skb_úq
(
skb
);

578 
exô
;

582 i‡(
°©us
 & (1 << 31)) {

583 
dev
->
°©s
.
rx_mis£d_îr‹s
++;

584 
	`dev_k‰ì_skb_úq
(
skb
);

585 
exô
;

589 i‡((!(
°©us
 & (1 << 18))Ë|| (°©u†& 
ERROR_FILTER_MASK
))

590 
dev
->
°©s
.
rx_îr‹s
++;

592 i‡(
Àn
 > 
MAX_ETH_FRAME_SIZE
) {

593 
	`dev_k‰ì_skb_úq
(
skb
);

594 
exô
;

596 
	`skb_put
(
skb
, 
Àn
);

598 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

599 
dev
->
°©s
.
rx_∑ckës
++;

601 i‡(
°©us
 & (1 << 29))

602 
skb
->
pkt_ty≥
 = 
PACKET_OTHERHOST
;

603 i‡(
°©us
 & (1 << 27))

604 
skb
->
pkt_ty≥
 = 
PACKET_MULTICAST
;

605 i‡(
°©us
 & (1 << 28))

606 
skb
->
pkt_ty≥
 = 
PACKET_BROADCAST
;

608 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

611 
°©us
 = 
	`√tif_ª˚ive_skb
(
skb
);

612 i‡(
°©us
 !
NET_RX_DROP
)

613 
dev
->
°©s
.
rx_byãs
 +
Àn
 - 4;

615 
dev
->
°©s
.
rx_dr›≥d
++;

617 
dev
->
œ°_rx
 = 
jiffõs
;

619 
exô
:

620 
skb
 = 
	`√tdev_Æloc_skb
(
dev
, 
RX_ALLOC_SIZE
);

621 i‡(!
skb
)

622 
out
;

624 
	`skb_ª£rve
(
skb
, 
RX_SKB_HEADROOM
);

625 
¥iv
->
rx_skb
[¥iv->
cur_rx
] = 
skb
;

626 
¥iv
->
úq_rxskb
[¥iv->
cur_rx
] = 1;

627 
¥iv
->
cur_rx
++;

629 i‡(
¥iv
->
cur_rx
 >
RX_RING_SIZE
)

630 
¥iv
->
cur_rx
 = 0;

631 
cou¡
++;

633 
out
:

634  
cou¡
;

635 
	}
}

637 
	$nup‹t_mac_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

639 
nup‹t_mac_¥iv
 *
¥iv
 =

640 
	`c⁄èöî_of
(
«pi
, 
nup‹t_mac_¥iv
,Çapi);

641 
√t_devi˚
 *
dev
 = 
¥iv
->dev;

642 
w‹k_d⁄e
;

644 
w‹k_d⁄e
 = 
	`nup‹t_mac_rx
(
dev
, 
budgë
);

646 i‡(
w‹k_d⁄e
 < 
budgë
) {

647 
	`«pi_com∂ëe
(
«pi
);

648 
	`nup‹t_mac_íabÀ_rx_dma
(
¥iv
);

651  
w‹k_d⁄e
;

652 
	}
}

654 
	$nup‹t_mac_öô_tx_rög
(
nup‹t_mac_¥iv
 *
¥iv
)

656 
i
;

658 
¥iv
->
cur_tx
 =Öriv->
dma_tx
 =Öriv->
tx_fuŒ
 = 0;

659 
i
 = 0; i < 
TX_RING_SIZE
; i++) {

660 
¥iv
->
tx_skb
[
i
] = 
NULL
;

661 
¥iv
->
vÆid_txskb
[
i
] = 0;

663 
¥iv
->
fú°_pkt
 = 1;

664 
	}
}

666 
	$nup‹t_mac_öô_rx_rög
(
√t_devi˚
 *
dev
)

668 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

669 
sk_buff
 *
skb
;

670 
i
;

672 
¥iv
->
cur_rx
 =Öriv->
dma_rx
 =Öriv->
rx_fuŒ
 = 0;

674 
i
 = 0; i < 
RX_RING_SIZE
; i++) {

675 
skb
 = 
	`√tdev_Æloc_skb
(
dev
, 
RX_ALLOC_SIZE
);

676 i‡(!
skb
)

677  -
ENOMEM
;

678 
	`skb_ª£rve
(
skb
, 
RX_SKB_HEADROOM
);

679 
¥iv
->
rx_skb
[
i
] = 
skb
;

680 
¥iv
->
úq_rxskb
[
i
] = 1;

684 
	}
}

686 
	$nup‹t_mac_‰ì_rx_rög
(
nup‹t_mac_¥iv
 *
¥iv
)

688 
i
;

690 
i
 = 0; i < 
RX_RING_SIZE
; i++) {

691 i‡(!
¥iv
->
rx_skb
[
i
])

694 
	`dev_k‰ì_skb
(
¥iv
->
rx_skb
[
i
]);

695 
¥iv
->
rx_skb
[
i
] = 
NULL
;

698 i‡(
¥iv
->
rx_addr
)

699 
	`dma_unm≠_sögÀ
(&
¥iv
->
pdev
->
dev
,Öriv->
rx_addr
, 
RX_ALLOC_SIZE
,

700 
DMA_TO_DEVICE
);

701 
	}
}

703 
	$nup‹t_mac_ªad_mac_addªss
(
√t_devi˚
 *
dev
)

705 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

706 
i
;

708 
i
 = 0; i < 4; i++)

709 
dev
->
dev_addr
[
i
] = 
	`nup‹t_mac_ªadb
(
MAC_ADDR_LOW_REG
 + i);

710 
dev
->
dev_addr
[4] = 
	`nup‹t_mac_ªadb
(
MAC_ADDR_HIGH_REG
);

711 
dev
->
dev_addr
[5] = 
	`nup‹t_mac_ªadb
(
MAC_ADDR_HIGH_REG
 + 1);

713 i‡(!
	`is_vÆid_ëhî_addr
(
dev
->
dev_addr
)) {

714 
	`dev_öfo
(&
¥iv
->
pdev
->
dev
, "usingÑandomáddress\n");

715 
	`øndom_ëhî_addr
(
dev
->
dev_addr
);

717 
	}
}

719 
	$nup‹t_mac_ch™ge_mac_addªss
(
√t_devi˚
 *
dev
, *
mac_addr
)

721 
sockaddr
 *
addr
 = 
mac_addr
;

722 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

723 *
ãmp
 = (*)
dev
->
dev_addr
;

724 
u32
 
high
, 
low
;

726 i‡(
	`√tif_ru¬ög
(
dev
))

727  -
EBUSY
;

729 
	`mem˝y
(
dev
->
dev_addr
, 
addr
->
ß_d©a
, 
ETH_ALEN
);

731 
	`•ö_lock_úq
(&
¥iv
->
lock
);

733 
	`nup‹t_mac_wrôñ
(*
ãmp
, 
MAC_ADDR_LOW_REG
);

734 
ãmp
 = (*)(
dev
->
dev_addr
 + 4);

735 
	`nup‹t_mac_wrôñ
(*
ãmp
, 
MAC_ADDR_HIGH_REG
);

737 
low
 = 
	`nup‹t_mac_ªadl
(
MAC_ADDR_LOW_REG
);

738 
high
 = 
	`nup‹t_mac_ªadl
(
MAC_ADDR_HIGH_REG
);

740 
	`•ö_u∆ock_úq
(&
¥iv
->
lock
);

743 
	}
}

745 
	$nup‹t_mac_›í
(
√t_devi˚
 *
dev
)

747 
ªt
;

748 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

749 
Êags
;

750 
u32
 
ªg
 = 0;

752 
ªt
 = 
	`˛k_íabÀ
(
¥iv
->
emac_˛k
);

753 i‡(
ªt
) {

754 
	`√tdev_îr
(
dev
, "failedÅoÉnable EMAC clock\n");

755  
ªt
;

759 
ªg
 |
RX_ENABLE
 | 
TX_ENABLE
;

760 
ªg
 |
DEFER_CHECK
 | 
STRIP_PAD
 | 
DRTRY_DISABLE
;

761 
ªg
 |
FULL_DUPLEX
 | 
HBD_DISABLE
;

762 
	`nup‹t_mac_wrôñ
(
ªg
, 
CTRL_REG
);

765 
	`nup‹t_mac_ch™ge_mac_addªss
(
dev
, dev->
dev_addr
);

767 
ªt
 = 
	`ªque°_úq
(
¥iv
->
lök_úq
, &
nup‹t_mac_lök_öãºu±
,

768 0, 
dev
->
«me
, dev);

769 i‡(
ªt
) {

770 
	`√tdev_îr
(
dev
, "unableÅoÑequestÜink interrupt\n");

771 
out_emac_˛k
;

774 
ªt
 = 
	`ªque°_úq
(
¥iv
->
tx_úq
, &
nup‹t_mac_tx_öãºu±
,

775 0, 
dev
->
«me
, dev);

776 i‡(
ªt
) {

777 
	`√tdev_îr
(
dev
, "unableÅoÑequestÑx interrupt\n");

778 
out_lök_úq
;

782 
ªg
 = 
LINK_INT_EN
 | (
¥iv
->
phydev
->
addr
 << 
LINK_PHY_ADDR_SHIFT
);

784 
ªg
 |(1 << 
LINK_PHY_REG_SHIFT
);

786 
ªg
 |(2 << 
LINK_BIT_UP_SHIFT
);

788 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

789 
	`nup‹t_mac_wrôñ
(
ªg
, 
LINK_INT_CSR
);

790 
	`nup‹t_mac_wrôñ
(
LINK_POLL_MASK
, 
LINK_INT_POLL_TIME
);

791 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

793 
	`phy_°¨t
(
¥iv
->
phydev
);

795 
ªt
 = 
	`ªque°_úq
(
¥iv
->
rx_úq
, &
nup‹t_mac_rx_öãºu±
,

796 0, 
dev
->
«me
, dev);

797 i‡(
ªt
) {

798 
	`√tdev_îr
(
dev
, "unableÅoÑequestÅx interrupt\n");

799 
out_tx_úq
;

802 
	`√tif_°¨t_queue
(
dev
);

804 
	`nup‹t_mac_öô_tx_rög
(
¥iv
);

806 
ªt
 = 
	`nup‹t_mac_öô_rx_rög
(
dev
);

807 i‡(
ªt
) {

808 
	`√tdev_îr
(
dev
, "rxÑing init failed\n");

809 
out_rx_skb
;

812 
	`nup‹t_mac_ª£t_tx_dma
(
¥iv
);

813 
	`nup‹t_mac_ª£t_rx_dma
(
¥iv
);

816 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

817 
ªt
 = 
	`nup‹t_mac_°¨t_rx_dma
(
¥iv
,Öriv->
rx_skb
[0]);

818 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

820 
	`«pi_íabÀ
(&
¥iv
->
«pi
);

822  
ªt
;

824 
out_rx_skb
:

825 
	`nup‹t_mac_‰ì_rx_rög
(
¥iv
);

826 
	`‰ì_úq
(
¥iv
->
rx_úq
, 
dev
);

827 
out_tx_úq
:

828 
	`‰ì_úq
(
¥iv
->
tx_úq
, 
dev
);

829 
out_lök_úq
:

830 
	`‰ì_úq
(
¥iv
->
lök_úq
, 
dev
);

831 
out_emac_˛k
:

832 
	`˛k_dißbÀ
(
¥iv
->
emac_˛k
);

833  
ªt
;

834 
	}
}

836 
	$nup‹t_mac_˛o£
(
√t_devi˚
 *
dev
)

838 
u32
 
ªg
;

839 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

841 
	`•ö_lock_úq
(&
¥iv
->
lock
);

842 
ªg
 = 
	`nup‹t_mac_ªadl
(
CTRL_REG
);

843 
ªg
 &~(
RX_ENABLE
 | 
TX_ENABLE
);

844 
	`nup‹t_mac_wrôñ
(
ªg
, 
CTRL_REG
);

846 
	`«pi_dißbÀ
(&
¥iv
->
«pi
);

847 
	`√tif_°›_queue
(
dev
);

849 
	`‰ì_úq
(
¥iv
->
lök_úq
, 
dev
);

851 
	`nup‹t_mac_wrôñ
(0, 
LINK_INT_CSR
);

852 
	`nup‹t_mac_wrôñ
(0, 
LINK_INT_POLL_TIME
);

853 
	`phy_°›
(
¥iv
->
phydev
);

855 
	`‰ì_úq
(
¥iv
->
tx_úq
, 
dev
);

856 
	`‰ì_úq
(
¥iv
->
rx_úq
, 
dev
);

857 
	`•ö_u∆ock_úq
(&
¥iv
->
lock
);

859 
	`nup‹t_mac_‰ì_rx_rög
(
¥iv
);

861 
	`˛k_dißbÀ
(
¥iv
->
emac_˛k
);

864 
	}
}

866 
	$nup‹t_mac_tx_timeout
(
√t_devi˚
 *
dev
)

868 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

869 
i
;

871 
	`√tdev_w¨n
(
dev
, "transmitÅimeout,áttemptingÑecovery\n");

873 
	`√tdev_öfo
(
dev
, "TX DMAÑegs\n");

874 
i
 = 0; i < 
DMA_CHAN_WIDTH
; i += 4)

875 
	`√tdev_öfo
(
dev
, "[%02x]: 0x%08x\n", 
i
, 
	`nup‹t_mac_ªadl
(
TX_DMA_BASE
 + i));

876 
	`√tdev_öfo
(
dev
, "RX DMAÑegs\n");

877 
i
 = 0; i < 
DMA_CHAN_WIDTH
; i += 4)

878 
	`√tdev_öfo
(
dev
, "[%02x]: 0x%08x\n", 
i
, 
	`nup‹t_mac_ªadl
(
RX_DMA_BASE
 + i));

880 
	`nup‹t_mac_öô_tx_rög
(
¥iv
);

881 
	`nup‹t_mac_ª£t_tx_dma
(
¥iv
);

883 
	`√tif_wake_queue
(
dev
);

884 
	}
}

886 
	$nup‹t_mac_mii_¥obe
(
√t_devi˚
 *
dev
)

888 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

889 
phy_devi˚
 *
phydev
 = 
NULL
;

890 
ªt
;

892 
ªt
 = 
	`˛k_íabÀ
(
¥iv
->
ïhy_˛k
);

893 i‡(
ªt
) {

894 
	`√tdev_îr
(
dev
, "unableÅoÉnableÉPHY clk\n");

895  
ªt
;

898 
phydev
 = 
	`phy_föd_fú°
(
¥iv
->
mii_bus
);

899 i‡(!
phydev
) {

900 
	`√tdev_îr
(
dev
, "no PHYs found\n");

901 
ªt
 = -
ENODEV
;

902 
out
;

905 
phydev
 = 
	`of_phy_c⁄√˘
(
dev
, 
¥iv
->
phy_node
,

906 
nup‹t_mac_adju°_lök
, 0,

907 
¥iv
->
phy_öãrÁ˚
);

908 i‡(
	`IS_ERR
(
phydev
)) {

909 
	`√tdev_îr
(
dev
, "couldÇotáttach PHY\n");

910 
ªt
 = 
	`PTR_ERR
(
phydev
);

911 
out
;

914 
phydev
->
suµ‹ãd
 &
PHY_BASIC_FEATURES
;

915 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
;

916 
¥iv
->
phydev
 =Öhydev;

917 
¥iv
->
ﬁd_lök
 = 1;

918 
¥iv
->
ﬁd_du∂ex
 = 
DUPLEX_FULL
;

920 
	`dev_öfo
(&
¥iv
->
pdev
->
dev
, "attached PHY driver [%s] "

922 
phydev
->
drv
->
«me
,Öhydev->
addr
);

926 
out
:

928 
	`˛k_dißbÀ
(
¥iv
->
ïhy_˛k
);

930  
ªt
;

931 
	}
}

933 
	$nup‹t_mac_ëhtoﬁ_drvöfo
(
√t_devi˚
 *
dev
,

934 
ëhtoﬁ_drvöfo
 *
öfo
)

936 
	`°∫˝y
(
öfo
->
drivî
, "nuport-mac", (info->driver));

937 
	`°∫˝y
(
öfo
->
vîsi⁄
, "0.1", (info->version));

938 
	`°∫˝y
(
öfo
->
fw_vîsi⁄
, "N/A", (info->fw_version));

939 
	`°∫˝y
(
öfo
->
bus_öfo
, "internal", (info->bus_info));

940 
öfo
->
n_°©s
 = 0;

941 
öfo
->
ã°öfo_Àn
 = 0;

942 
öfo
->
ªgdump_Àn
 = 0;

943 
öfo
->
ìdump_Àn
 = 0;

944 
	}
}

946 
	$nup‹t_mac_ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
,

947 
ëhtoﬁ_cmd
 *
cmd
)

949 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

951 i‡(
¥iv
->
phydev
)

952  
	`phy_ëhtoﬁ_g£t
(
¥iv
->
phydev
, 
cmd
);

954  -
EINVAL
;

955 
	}
}

957 
	$nup‹t_mac_ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
,

958 
ëhtoﬁ_cmd
 *
cmd
)

960 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

962 i‡(
¥iv
->
phydev
)

963  
	`phy_ëhtoﬁ_s£t
(
¥iv
->
phydev
, 
cmd
);

965  -
EINVAL
;

966 
	}
}

968 
	$nup‹t_mac_£t_msgÀvñ
(
√t_devi˚
 *
dev
, 
u32
 
msg_Àvñ
)

970 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

972 
¥iv
->
msg_Àvñ
 = msg_level;

973 
	}
}

975 
u32
 
	$nup‹t_mac_gë_msgÀvñ
(
√t_devi˚
 *
dev
)

977 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

979  
¥iv
->
msg_Àvñ
;

980 
	}
}

982 c⁄° 
ëhtoﬁ_›s
 
	gnup‹t_mac_ëhtoﬁ_›s
 = {

983 .
gë_drvöfo
 = 
nup‹t_mac_ëhtoﬁ_drvöfo
,

984 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

985 .
	ggë_£âögs
 = 
nup‹t_mac_ëhtoﬁ_gë_£âögs
,

986 .
	g£t_£âögs
 = 
nup‹t_mac_ëhtoﬁ_£t_£âögs
,

987 .
	g£t_msgÀvñ
 = 
nup‹t_mac_£t_msgÀvñ
,

988 .
	ggë_msgÀvñ
 = 
nup‹t_mac_gë_msgÀvñ
,

991 c⁄° 
√t_devi˚_›s
 
	gnup‹t_mac_›s
 = {

992 .
ndo_›í
 = 
nup‹t_mac_›í
,

993 .
	gndo_°›
 = 
nup‹t_mac_˛o£
,

994 .
	gndo_°¨t_xmô
 = 
nup‹t_mac_°¨t_xmô
,

995 .
	gndo_ch™ge_mtu
 = 
ëh_ch™ge_mtu
,

996 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

997 .
	gndo_£t_mac_addªss
 = 
nup‹t_mac_ch™ge_mac_addªss
,

998 .
	gndo_tx_timeout
 = 
nup‹t_mac_tx_timeout
,

1001 
__öô
 
	$nup‹t_mac_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1003 
√t_devi˚
 *
dev
;

1004 
nup‹t_mac_¥iv
 *
¥iv
 = 
NULL
;

1005 
ªsour˚
 *
ªgs
, *
dma
;

1006 
ªt
 = 0;

1007 
rx_úq
, 
tx_úq
, 
lök_úq
;

1008 
i
;

1009 c⁄° *
öt•ec
;

1011 
dev
 = 
	`Æloc_ëhîdev
((
nup‹t_mac_¥iv
));

1012 i‡(!
dev
) {

1013 
	`dev_îr
(&
pdev
->
dev
, "no memory forÇet_device\n");

1014  -
ENOMEM
;

1017 
ªgs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1018 
dma
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

1019 i‡(!
ªgs
 || !
dma
) {

1020 
	`dev_îr
(&
pdev
->
dev
, "failedÅo getÑegsÑesources\n");

1021 
ªt
 = -
ENODEV
;

1022 
out
;

1025 
rx_úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

1026 
tx_úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 1);

1027 
lök_úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 2);

1028 i‡(
rx_úq
 < 0 || 
tx_úq
 < 0 || 
lök_úq
 < 0) {

1029 
ªt
 = -
ENODEV
;

1030 
out
;

1033 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
dev
);

1034 
	`SET_NETDEV_DEV
(
dev
, &
pdev
->dev);

1035 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1036 
¥iv
->
pdev
 =Ödev;

1037 
¥iv
->
dev
 = dev;

1038 
	`•ö_lock_öô
(&
¥iv
->
lock
);

1040 
öt•ec
 = 
	`of_gë_¥›îty
(
pdev
->
dev
.
of_node
,

1041 "nup‹t-mac,buf„r-shi·ög", 
NULL
);

1042 i‡(!
öt•ec
)

1043 
¥iv
->
buf„r_shi·ög_Àn
 = 0;

1045 
¥iv
->
buf„r_shi·ög_Àn
 = 2;

1047 
¥iv
->
mac_ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªgs
);

1048 i‡(!
¥iv
->
mac_ba£
) {

1049 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemapÑegs\n");

1050 
ªt
 = -
ENOMEM
;

1051 
out_∂©f‹m
;

1054 
¥iv
->
dma_ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
dma
);

1055 i‡(!
¥iv
->
dma_ba£
) {

1056 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑemap dma-regs\n");

1057 
ªt
 = -
ENOMEM
;

1058 
out_∂©f‹m
;

1061 
¥iv
->
emac_˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "emac");

1062 i‡(
	`IS_ERR_OR_NULL
(
¥iv
->
emac_˛k
)) {

1063 
	`dev_îr
(&
pdev
->
dev
, "failedÅo getÉmac clk\n");

1064 
ªt
 = 
	`PTR_ERR
(
¥iv
->
emac_˛k
);

1065 
out_∂©f‹m
;

1068 
¥iv
->
ïhy_˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "ephy");

1069 i‡(
	`IS_ERR_OR_NULL
(
¥iv
->
ïhy_˛k
)) {

1070 
	`dev_îr
(&
pdev
->
dev
, "failedÅo getÉphy clk\n");

1071 
ªt
 = 
	`PTR_ERR
(
¥iv
->
ïhy_˛k
);

1072 
out_∂©f‹m
;

1075 
¥iv
->
lök_úq
 =Üink_irq;

1076 
¥iv
->
rx_úq
 =Ñx_irq;

1077 
¥iv
->
tx_úq
 =Åx_irq;

1078 
¥iv
->
msg_Àvñ
 = 
NETIF_MSG_DRV
 | 
NETIF_MSG_PROBE
 | 
NETIF_MSG_LINK
;

1079 
dev
->
√tdev_›s
 = &
nup‹t_mac_›s
;

1080 
dev
->
ëhtoﬁ_›s
 = &
nup‹t_mac_ëhtoﬁ_›s
;

1081 
dev
->
w©chdog_timeo
 = 
HZ
;

1082 
dev
->
Êags
 = 
IFF_BROADCAST
;

1083 
dev
->
tx_queue_Àn
 = 
TX_RING_SIZE
 / 2;

1085 
	`√tif_«pi_add
(
dev
, &
¥iv
->
«pi
, 
nup‹t_mac_pﬁl
, 64);

1087 
¥iv
->
phy_node
 = 
	`of_∑r£_ph™dÀ
(
pdev
->
dev
.
of_node
, "phy", 0);

1088 i‡(!
¥iv
->
phy_node
) {

1089 
	`dev_îr
(&
pdev
->
dev
, "noássociated PHY\n");

1090 
ªt
 = -
ENODEV
;

1091 
out
;

1094 
¥iv
->
phy_öãrÁ˚
 = 
	`of_gë_phy_mode
(
pdev
->
dev
.
of_node
);

1095 i‡(
¥iv
->
phy_öãrÁ˚
 < 0) {

1096 
	`dev_îr
(&
pdev
->
dev
, "invalid PHY mode\n");

1097 
ªt
 = -
EINVAL
;

1098 
out
;

1101 
¥iv
->
mii_bus
 = 
	`mdiobus_Æloc
();

1102 i‡(!
¥iv
->
mii_bus
) {

1103 
	`dev_îr
(&
pdev
->
dev
, "mii busállocation failed\n");

1104 
out
;

1107 
¥iv
->
mii_bus
->¥iv = 
dev
;

1108 
¥iv
->
mii_bus
->
ªad
 = 
nup‹t_mac_mii_ªad
;

1109 
¥iv
->
mii_bus
->
wrôe
 = 
nup‹t_mac_mii_wrôe
;

1110 
¥iv
->
mii_bus
->
ª£t
 = 
nup‹t_mac_mii_ª£t
;

1111 
¥iv
->
mii_bus
->
«me
 = "nuport-mac-mii";

1112 
¥iv
->
mii_bus
->
phy_mask
 = (1 << 0);

1113 
	`¢¥ötf
(
¥iv
->
mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s", 
pdev
->
«me
);

1114 
¥iv
->
mii_bus
->
úq
 = 
	`kzÆloc
(
PHY_MAX_ADDR
 * (), 
GFP_KERNEL
);

1115 i‡(!
¥iv
->
mii_bus
->
úq
) {

1116 
	`dev_îr
(&
pdev
->
dev
, "failedÅoállocate mii_bus irqs\n");

1117 
ªt
 = -
ENOMEM
;

1118 
out_mdio
;

1122 
i
 = 0; i < 
PHY_MAX_ADDR
; i++)

1123 
¥iv
->
mii_bus
->
úq
[
i
] = 
PHY_IGNORE_INTERRUPT
;

1125 
ªt
 = 
	`of_mdiobus_ªgi°î
(
¥iv
->
mii_bus
, 
pdev
->
dev
.
of_node
);

1126 i‡(
ªt
) {

1127 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegister mii_bus\n");

1128 
out_mdio_úq
;

1131 
ªt
 = 
	`nup‹t_mac_mii_¥obe
(
dev
);

1132 i‡(
ªt
) {

1133 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÖrobe MII bus\n");

1134 
out_mdio_uƒegi°î
;

1137 
ªt
 = 
	`ªgi°î_√tdev
(
dev
);

1138 i‡(
ªt
) {

1139 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑegisterÇet_device\n");

1140 
out_mdio_¥obe
;

1144 
	`nup‹t_mac_ªad_mac_addªss
(
dev
);

1146 
	`dev_öfo
(&
pdev
->
dev
, "ªgi°îed (MAC: %pM)\n", dev->
dev_addr
);

1148  
ªt
;

1150 
out_mdio_¥obe
:

1151 
	`phy_disc⁄√˘
(
¥iv
->
phydev
);

1152 
out_mdio_uƒegi°î
:

1153 
	`mdiobus_uƒegi°î
(
¥iv
->
mii_bus
);

1154 
out_mdio_úq
:

1155 
	`k‰ì
(
¥iv
->
mii_bus
->
úq
);

1156 
out_mdio
:

1157 
	`mdiobus_‰ì
(
¥iv
->
mii_bus
);

1158 
out_∂©f‹m
:

1159 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1160 
out
:

1161 
	`˛k_put
(
¥iv
->
ïhy_˛k
);

1162 
	`˛k_put
(
¥iv
->
emac_˛k
);

1163 
	`‰ì_√tdev
(
dev
);

1164 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1165  
ªt
;

1166 
	}
}

1168 
	$nup‹t_mac_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1170 
√t_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1171 
nup‹t_mac_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1173 
	`uƒegi°î_√tdev
(
dev
);

1174 
	`phy_disc⁄√˘
(
¥iv
->
phydev
);

1175 
	`mdiobus_uƒegi°î
(
¥iv
->
mii_bus
);

1176 
	`k‰ì
(
¥iv
->
mii_bus
->
úq
);

1177 
	`mdiobus_‰ì
(
¥iv
->
mii_bus
);

1178 
	`˛k_put
(
¥iv
->
ïhy_˛k
);

1179 
	`˛k_put
(
¥iv
->
emac_˛k
);

1180 
	`‰ì_√tdev
(
dev
);

1182 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1185 
	}
}

1187 
of_devi˚_id
 
	gnup‹t_ëh_ids
[] 
	g__öôd©a
 = {

1188 {.
com∑tibÀ
 = "moschip,nuport-mac",},

1192 
∂©f‹m_drivî
 
	gnup‹t_ëh_drivî
 = {

1193 .
drivî
 = {

1194 .
«me
 = "nuport-mac",

1195 .
	gow√r
 = 
THIS_MODULE
,

1196 .
	gof_m©ch_èbÀ
 = 
nup‹t_ëh_ids
,

1198 .
	g¥obe
 = 
nup‹t_mac_¥obe
,

1199 .
	gªmove
 = 
nup‹t_mac_ªmove
,

1202 
moduÀ_∂©f‹m_drivî
(
nup‹t_ëh_drivî
);

1204 
MODULE_AUTHOR
("Moschip Semiconductors Ltd.");

1205 
MODULE_DESCRIPTION
("Moschip MCS8140 Ethernet MAC driver");

1206 
MODULE_LICENSE
("GPL");

	@linux/mcs814x/files-3.18/drivers/net/phy/mcs814x.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/°rög.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/uni°d.h
>

16 
	~<löux/öãºu±.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/dñay.h
>

19 
	~<löux/√tdevi˚.h
>

20 
	~<löux/ëhîdevi˚.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/mm.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/mii.h
>

26 
	~<löux/ëhtoﬁ.h
>

27 
	~<löux/phy.h
>

29 
MODULE_DESCRIPTION
("Moschip MCS814x PHY driver");

30 
MODULE_AUTHOR
("Florian Fainelli <florian@openwrt.org>");

31 
MODULE_LICENSE
("GPL");

34 
phy_drivî
 
	gmcs8140_drivî
 = {

35 .
phy_id
 = 0,

36 .
	g«me
 = "Moschip MCS8140",

37 .
	gphy_id_mask
 = 0x02,

38 .
	g„©uªs
 = 
PHY_BASIC_FEATURES
,

39 .
	gc⁄fig_™eg
 = &
gíphy_c⁄fig_™eg
,

40 .
	gªad_°©us
 = &
gíphy_ªad_°©us
,

41 .
	gsu•íd
 = 
gíphy_su•íd
,

42 .
	gªsume
 = 
gíphy_ªsume
,

43 .
	gdrivî
 = { .
ow√r
 = 
THIS_MODULE
,},

46 
__öô
 
	$mcs814x_phy_öô
()

48  
	`phy_drivî_ªgi°î
(&
mcs8140_drivî
);

49 
	}
}

51 
__exô
 
	$mcs814x_phy_exô
()

53 
	`phy_drivî_uƒegi°î
(&
mcs8140_drivî
);

54 
	}
}

56 
moduÀ_öô
(
mcs814x_phy_öô
);

57 
moduÀ_exô
(
mcs814x_phy_exô
);

59 
mdio_devi˚_id
 
__maybe_unu£d
 
	gmcs814x_phy_tbl
[] = {

64 
MODULE_DEVICE_TABLE
(
mdio
, 
mcs814x_phy_tbl
);

	@linux/mcs814x/files-3.18/drivers/usb/host/ehci-mcs814x.c

12 
	~<löux/∂©f‹m_devi˚.h
>

13 
	~<löux/of.h
>

15 
	#MCS814X_EHCI_CAPS_OFFSET
 0x68

	)

17 
	$mcs814x_ehci_öô
(
usb_hcd
 *
hcd
)

19 
ehci_hcd
 *
ehci
 = 
	`hcd_to_ehci
(
hcd
);

20 
ªtvÆ
 = 0;

22 
ehci
->
ˇps
 = 
hcd
->
ªgs
 + 
MCS814X_EHCI_CAPS_OFFSET
;

23 
ehci
->
ªgs
 = 
hcd
->regs

24 + 
	`HC_LENGTH
(
ehci
, 
	`ehci_ªadl
”hci, &ehci->
ˇps
->
hc_ˇpba£
));

25 
ehci
->
hcs_∑øms
 = 
	`ehci_ªadl
”hci, &ehci->
ˇps
->hcs_params);

26 
	`ehci_ª£t
(
ehci
);

28 
ªtvÆ
 = 
	`ehci_öô
(
hcd
);

29 i‡(
ªtvÆ
) {

30 
	`¥_îr
("ehci_init failed\n");

31  
ªtvÆ
;

34  
ªtvÆ
;

35 
	}
}

37 c⁄° 
hc_drivî
 
	gmcs814x_ehci_hc_drivî
 = {

38 .
des¸ùti⁄
 = 
hcd_«me
,

39 .
	g¥odu˘_desc
 = "MCS814X EHCI Host Controller",

40 .
	ghcd_¥iv_size
 = (
ehci_hcd
),

41 .
	gúq
 = 
ehci_úq
,

42 .
	gÊags
 = 
HCD_MEMORY
 | 
HCD_USB2
,

43 .
	gª£t
 = 
mcs814x_ehci_öô
,

44 .
	g°¨t
 = 
ehci_run
,

45 .
	g°›
 = 
ehci_°›
,

46 .
	gshutdown
 = 
ehci_shutdown
,

47 .
	gurb_íqueue
 = 
ehci_urb_íqueue
,

48 .
	gurb_dequeue
 = 
ehci_urb_dequeue
,

49 .
	gídpoöt_dißbÀ
 = 
ehci_ídpoöt_dißbÀ
,

50 .
	ggë_‰ame_numbî
 = 
ehci_gë_‰ame
,

51 .
	ghub_°©us_d©a
 = 
ehci_hub_°©us_d©a
,

52 .
	ghub_c⁄åﬁ
 = 
ehci_hub_c⁄åﬁ
,

53 #i‡
deföed
(
CONFIG_PM
)

54 .
	gbus_su•íd
 = 
ehci_bus_su•íd
,

55 .
	gbus_ªsume
 = 
ehci_bus_ªsume
,

57 .
	gªlöquish_p‹t
 = 
ehci_ªlöquish_p‹t
,

58 .
	gp‹t_h™ded_ovî
 = 
ehci_p‹t_h™ded_ovî
,

60 .
	g˛ór_â_buf„r_com∂ëe
 = 
ehci_˛ór_â_buf„r_com∂ëe
,

63 
	$mcs814x_ehci_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

65 
usb_hcd
 *
hcd
;

66 c⁄° 
hc_drivî
 *
drivî
 = &
mcs814x_ehci_hc_drivî
;

67 
ªsour˚
 *
ªs
;

68 
úq
;

69 
ªtvÆ
;

71 i‡(
	`usb_dißbÀd
())

72  -
ENODEV
;

74 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

75 i‡(!
ªs
) {

76 
	`dev_îr
(&
pdev
->
dev
,

78 
	`dev_«me
(&
pdev
->
dev
));

79  -
ENODEV
;

81 
úq
 = 
ªs
->
°¨t
;

83 
pdev
->
dev
.
cohîít_dma_mask
 = 
	`DMA_BIT_MASK
(32);

84 
pdev
->
dev
.
dma_mask
 = &pdev->dev.
cohîít_dma_mask
;

86 
hcd
 = 
	`usb_¸óã_hcd
(
drivî
, &
pdev
->
dev
, 
	`dev_«me
(&pdev->dev));

87 i‡(!
hcd
) {

88 
ªtvÆ
 = -
ENOMEM
;

89 
Áû_¸óã_hcd
;

92 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

93 i‡(!
ªs
) {

94 
	`dev_îr
(&
pdev
->
dev
,

96 
	`dev_«me
(&
pdev
->
dev
));

97 
ªtvÆ
 = -
ENODEV
;

98 
Áû_ªque°_ªsour˚
;

100 
hcd
->
r§c_°¨t
 = 
ªs
->
°¨t
;

101 
hcd
->
r§c_Àn
 = 
	`ªsour˚_size
(
ªs
);

103 i‡(!
	`ªque°_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
,

104 
drivî
->
des¸ùti⁄
)) {

105 
	`dev_dbg
(&
pdev
->
dev
, "controllerálready in use\n");

106 
ªtvÆ
 = -
EBUSY
;

107 
Áû_ªque°_ªsour˚
;

110 
hcd
->
ªgs
 = 
	`i‹em≠_noˇche
(hcd->
r§c_°¨t
, hcd->
r§c_Àn
);

111 i‡(
hcd
->
ªgs
 =
NULL
) {

112 
	`dev_dbg
(&
pdev
->
dev
, "error mapping memory\n");

113 
ªtvÆ
 = -
EFAULT
;

114 
Áû_i‹em≠
;

117 
ªtvÆ
 = 
	`usb_add_hcd
(
hcd
, 
úq
, 
IRQF_SHARED
);

118 i‡(
ªtvÆ
)

119 
Áû_add_hcd
;

121 
	`dev_öfo
(&
pdev
->
dev
, "added MCS814X EHCI driver\n");

123  
ªtvÆ
;

125 
Áû_add_hcd
:

126 
	`iounm≠
(
hcd
->
ªgs
);

127 
Áû_i‹em≠
:

128 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

129 
Áû_ªque°_ªsour˚
:

130 
	`usb_put_hcd
(
hcd
);

131 
Áû_¸óã_hcd
:

132 
	`dev_îr
(&
pdev
->
dev
, "öô %†Áû, %d\n", 
	`dev_«me
(&pdev->dev), 
ªtvÆ
);

133  
ªtvÆ
;

134 
	}
}

136 
	$mcs814x_ehci_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

138 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

140 
	`usb_ªmove_hcd
(
hcd
);

141 
	`iounm≠
(
hcd
->
ªgs
);

142 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

143 
	`usb_put_hcd
(
hcd
);

146 
	}
}

148 
MODULE_ALIAS
("platform:mcs814x-ehci");

150 c⁄° 
of_devi˚_id
 
	gmcs814x_ehci_id
[] = {

151 { .
com∑tibÀ
 = "moschip,mcs814x-ehci" },

152 { .
	gcom∑tibÀ
 = "usb-ehci" },

156 
∂©f‹m_drivî
 
	gmcs814x_ehci_drivî
 = {

157 .
¥obe
 = 
mcs814x_ehci_¥obe
,

158 .
	gªmove
 = 
mcs814x_ehci_ªmove
,

159 .
	gdrivî
 = {

160 .
«me
 = "mcs814x-ehci",

161 .
	gof_m©ch_èbÀ
 = 
mcs814x_ehci_id
,

	@linux/mcs814x/files-3.18/drivers/usb/host/ohci-mcs814x.c

26 
	~<löux/devi˚.h
>

27 
	~<löux/sig«l.h
>

28 
	~<löux/∂©f‹m_devi˚.h
>

29 
	~<löux/of.h
>

31 
	$usb_hcd_mcs814x_¥obe
(c⁄° 
hc_drivî
 *
drivî
,

32 
∂©f‹m_devi˚
 *
pdev
)

34 
ªtvÆ
;

35 
usb_hcd
 *
hcd
;

37 i‡(
pdev
->
ªsour˚
[1].
Êags
 !
IORESOURCE_IRQ
) {

38 
	`¥_debug
("resource[1] isÇot IORESOURCE_IRQ");

39  -
ENOMEM
;

42 
pdev
->
dev
.
cohîít_dma_mask
 = 
	`DMA_BIT_MASK
(32);

43 
pdev
->
dev
.
dma_mask
 = &pdev->dev.
cohîít_dma_mask
;

45 
hcd
 = 
	`usb_¸óã_hcd
(
drivî
, &
pdev
->
dev
, "mcs814x");

46 i‡(
hcd
 =
NULL
)

47  -
ENOMEM
;

49 
hcd
->
r§c_°¨t
 = 
pdev
->
ªsour˚
[0].
°¨t
;

50 
hcd
->
r§c_Àn
 = 
pdev
->
ªsour˚
[0].
íd
 -Ödev->ªsour˚[0].
°¨t
 + 1;

51 i‡(!
	`ªque°_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
, 
hcd_«me
)) {

52 
	`usb_put_hcd
(
hcd
);

53 
ªtvÆ
 = -
EBUSY
;

54 
îr1
;

57 
hcd
->
ªgs
 = 
	`i‹em≠
(hcd->
r§c_°¨t
, hcd->
r§c_Àn
);

58 i‡(
hcd
->
ªgs
 =
NULL
) {

59 
	`¥_debug
("ioremap failed");

60 
ªtvÆ
 = -
ENOMEM
;

61 
îr2
;

64 
	`ohci_hcd_öô
(
	`hcd_to_ohci
(
hcd
));

66 
ªtvÆ
 = 
	`usb_add_hcd
(
hcd
, 
pdev
->
ªsour˚
[1].
°¨t
, 
IRQF_DISABLED
);

67 i‡(
ªtvÆ
 == 0)

68  
ªtvÆ
;

70 
	`iounm≠
(
hcd
->
ªgs
);

71 
îr2
:

72 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

73 
îr1
:

74 
	`usb_put_hcd
(
hcd
);

76  
ªtvÆ
;

77 
	}
}

79 
	$usb_hcd_mcs814x_ªmove
(
usb_hcd
 *
hcd
,

80 
∂©f‹m_devi˚
 *
pdev
)

82 
	`usb_ªmove_hcd
(
hcd
);

83 
	`iounm≠
(
hcd
->
ªgs
);

84 
	`ªÀa£_mem_ªgi⁄
(
hcd
->
r§c_°¨t
, hcd->
r§c_Àn
);

85 
	`usb_put_hcd
(
hcd
);

86 
	}
}

88 
	$ohci_mcs814x_°¨t
(
usb_hcd
 *
hcd
)

90 
ohci_hcd
 *
ohci
 = 
	`hcd_to_ohci
(
hcd
);

91 
ªt
;

93 
ªt
 = 
	`ohci_öô
(
ohci
);

94 i‡(
ªt
 < 0)

95  
ªt
;

97 
ªt
 = 
	`ohci_run
(
ohci
);

98 i‡(
ªt
 < 0) {

99 
	`ohci_îr
(
ohci
, "ˇn'à°¨à%s", 
hcd
->
£lf
.
bus_«me
);

100 
	`ohci_°›
(
hcd
);

101  
ªt
;

105 
	}
}

107 
hc_drivî
 
	gohci_mcs814x_hc_drivî
 = {

108 .
des¸ùti⁄
 = 
hcd_«me
,

109 .
	g¥odu˘_desc
 = "MCS814X OHCI",

110 .
	ghcd_¥iv_size
 = (
ohci_hcd
),

111 .
	gúq
 = 
ohci_úq
,

112 .
	gÊags
 = 
HCD_USB11
 | 
HCD_MEMORY
,

113 .
	g°¨t
 = 
ohci_mcs814x_°¨t
,

114 .
	g°›
 = 
ohci_°›
,

115 .
	gshutdown
 = 
ohci_shutdown
,

116 .
	gurb_íqueue
 = 
ohci_urb_íqueue
,

117 .
	gurb_dequeue
 = 
ohci_urb_dequeue
,

118 .
	gídpoöt_dißbÀ
 = 
ohci_ídpoöt_dißbÀ
,

119 .
	ggë_‰ame_numbî
 = 
ohci_gë_‰ame
,

120 .
	ghub_°©us_d©a
 = 
ohci_hub_°©us_d©a
,

121 .
	ghub_c⁄åﬁ
 = 
ohci_hub_c⁄åﬁ
,

122 #ifde‡
CONFIG_PM


123 .
	gbus_su•íd
 = 
ohci_bus_su•íd
,

124 .
	gbus_ªsume
 = 
ohci_bus_ªsume
,

126 .
	g°¨t_p‹t_ª£t
 = 
ohci_°¨t_p‹t_ª£t
,

129 
usb_dißbÀd
();

131 
	$ohci_hcd_mcs814x_drv_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

133 
ªt
;

135 
ªt
 = -
ENODEV
;

136 i‡(!
	`usb_dißbÀd
())

137 
ªt
 = 
	`usb_hcd_mcs814x_¥obe
(&
ohci_mcs814x_hc_drivî
, 
pdev
);

139  
ªt
;

140 
	}
}

142 
	$ohci_hcd_mcs814x_drv_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

144 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

146 
	`usb_hcd_mcs814x_ªmove
(
hcd
, 
pdev
);

149 
	}
}

151 #ifde‡
CONFIG_PM


152 
	$ohci_hcd_mcs814x_drv_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

154 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

155 
ohci_hcd
 *
ohci
 = 
	`hcd_to_ohci
(
hcd
);

157 i‡(
	`time_bef‹e
(
jiffõs
, 
ohci
->
√xt_°©ech™ge
))

158 
	`m¶ìp
(5);

159 
ohci
->
√xt_°©ech™ge
 = 
jiffõs
;

161 
hcd
->
°©e
 = 
HC_STATE_SUSPENDED
;

164 
	}
}

166 
	$ohci_hcd_mcs814x_drv_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

168 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

169 
ohci_hcd
 *
ohci
 = 
	`hcd_to_ohci
(
hcd
);

170 
°©us
;

172 i‡(
	`time_bef‹e
(
jiffõs
, 
ohci
->
√xt_°©ech™ge
))

173 
	`m¶ìp
(5);

174 
ohci
->
√xt_°©ech™ge
 = 
jiffõs
;

176 
	`ohci_föish_c⁄åﬁÀr_ªsume
(
hcd
);

178 
	}
}

181 c⁄° 
of_devi˚_id
 
	gmcs814x_ohci_id
[] = {

182 { .
com∑tibÀ
 = "moschip,mcs814x-ohci" },

183 { .
	gcom∑tibÀ
 = "ohci-le" },

187 
∂©f‹m_drivî
 
	gohci_hcd_mcs814x_drivî
 = {

188 .
¥obe
 = 
ohci_hcd_mcs814x_drv_¥obe
,

189 .
	gªmove
 = 
ohci_hcd_mcs814x_drv_ªmove
,

190 .
	gshutdown
 = 
usb_hcd_∂©f‹m_shutdown
,

191 #ifde‡
CONFIG_PM


192 .
	gsu•íd
 = 
ohci_hcd_mcs814x_drv_su•íd
,

193 .
	gªsume
 = 
ohci_hcd_mcs814x_drv_ªsume
,

195 .
	gdrivî
 = {

196 .
«me
 = "mcs814x-ohci",

197 .
	gow√r
 = 
THIS_MODULE
,

198 .
	gof_m©ch_èbÀ
 = 
mcs814x_ohci_id
,

202 
MODULE_ALIAS
("platform:mcs814x-ohci");

	@linux/mcs814x/files-3.18/drivers/watchdog/mcs814x_wdt.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/∂©f‹m_devi˚.h
>

25 
	~<löux/miscdevi˚.h
>

26 
	~<löux/w©chdog.h
>

27 
	~<löux/io.h
>

28 
	~<löux/îr.h
>

29 
	~<löux/˛k.h
>

30 
	~<löux/of.h
>

32 
	#WDT_COUNT
 0x00

	)

33 
	#WDT_CTRL
 0x04

	)

34 
	#WDT_CTRL_EN
 0x1

	)

37 
	#WDT_MAX_VALUE
 (0xffffffff)

	)

39 
	smcs814x_wdt
 {

40 
__iomem
 *
	mªgs
;

41 
•ölock_t
 
	mlock
;

42 
w©chdog_devi˚
 
	mwdt_dev
;

43 
˛k
 *
	m˛k
;

46 
	$mcs814x_wdt_°¨t
(
w©chdog_devi˚
 *
dev
)

48 
mcs814x_wdt
 *
wdt
 = 
	`w©chdog_gë_drvd©a
(
dev
);

49 
u32
 
ªg
;

51 
	`•ö_lock
(&
wdt
->
lock
);

52 
ªg
 = 
	`ªadl_ªœxed
(
wdt
->
ªgs
 + 
WDT_CTRL
);

53 
ªg
 |
WDT_CTRL_EN
;

54 
	`wrôñ_ªœxed
(
ªg
, 
wdt
->
ªgs
 + 
WDT_CTRL
);

55 
	`•ö_u∆ock
(&
wdt
->
lock
);

58 
	}
}

60 
	$mcs814x_wdt_°›
(
w©chdog_devi˚
 *
dev
)

62 
mcs814x_wdt
 *
wdt
 = 
	`w©chdog_gë_drvd©a
(
dev
);

63 
u32
 
ªg
;

65 
	`•ö_lock
(&
wdt
->
lock
);

66 
ªg
 = 
	`ªadl_ªœxed
(
wdt
->
ªgs
 + 
WDT_CTRL
);

67 
ªg
 &~
WDT_CTRL_EN
;

68 
	`wrôñ_ªœxed
(
ªg
, 
wdt
->
ªgs
 + 
WDT_CTRL
);

69 
	`•ö_u∆ock
(&
wdt
->
lock
);

72 
	}
}

74 
	$mcs814x_wdt_£t_timeout
(
w©chdog_devi˚
 *
dev
,

75 
√w_timeout
)

77 
mcs814x_wdt
 *
wdt
 = 
	`w©chdog_gë_drvd©a
(
dev
);

79 
	`•ö_lock
(&
wdt
->
lock
);

83 
	`wrôñ_ªœxed
(
WDT_MAX_VALUE
 - (
√w_timeout
 * 
	`˛k_gë_øã
(
wdt
->
˛k
)),

84 
wdt
->
ªgs
 + 
WDT_COUNT
);

85 
	`•ö_u∆ock
(&
wdt
->
lock
);

88 
	}
}

90 
	$mcs814x_wdt_pög
(
w©chdog_devi˚
 *
dev
)

93 
	`mcs814x_wdt_°›
(
dev
);

94 
	`mcs814x_wdt_£t_timeout
(
dev
, dev->
timeout
);

95 
	`mcs814x_wdt_°¨t
(
dev
);

98 
	}
}

100 c⁄° 
w©chdog_öfo
 
	gmcs814x_wdt_idít
 = {

101 .
›ti⁄s
 = 
WDIOF_CARDRESET
 | 
WDIOF_SETTIMEOUT
 |

102 
WDIOF_MAGICCLOSE
 | 
WDIOF_KEEPALIVEPING
,

103 .
	gidítôy
 = "MCS814x Watchdog",

106 
w©chdog_›s
 
	gmcs814x_wdt_›s
 = {

107 .
ow√r
 = 
THIS_MODULE
,

108 .
	g°¨t
 = 
mcs814x_wdt_°¨t
,

109 .
	g°›
 = 
mcs814x_wdt_°›
,

110 .
	g£t_timeout
 = 
mcs814x_wdt_£t_timeout
,

111 .
	gpög
 = 
mcs814x_wdt_pög
,

114 
	$mcs814x_wdt_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

116 
ªsour˚
 *
ªs
;

117 
mcs814x_wdt
 *
wdt
;

118 
ªt
;

119 
˛k
 *clk;

121 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

122 i‡(!
ªs
)

123  -
ENODEV
;

125 
˛k
 = 
	`˛k_gë
(
NULL
, "wdt");

126 i‡(
	`IS_ERR_OR_NULL
(
˛k
)) {

127 
	`dev_îr
(&
pdev
->
dev
, "failedÅo get watchdog clock\n");

128  
	`PTR_ERR
(
˛k
);

131 
wdt
 = 
	`kzÆloc
((*wdt), 
GFP_KERNEL
);

132 i‡(!
wdt
) {

133 
ªt
 = -
ENOMEM
;

134 
out_˛k
;

137 
	`•ö_lock_öô
(&
wdt
->
lock
);

138 
wdt
->
˛k
 = clk;

139 
wdt
->
wdt_dev
.
öfo
 = &
mcs814x_wdt_idít
;

140 
wdt
->
wdt_dev
.
›s
 = &
mcs814x_wdt_›s
;

141 
wdt
->
wdt_dev
.
mö_timeout
 = 1;

143 
wdt
->
wdt_dev
.
max_timeout
 = (
WDT_MAX_VALUE
 / 
	`˛k_gë_øã
(
˛k
));

145 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
wdt
);

148 
wdt
->
ªgs
 = 
	`devm_i‹em≠
(&
pdev
->
dev
, 
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

149 i‡(!
wdt
->
ªgs
) {

150 
ªt
 = -
ENOMEM
;

151 
out
;

154 
	`w©chdog_£t_drvd©a
(&
wdt
->
wdt_dev
, wdt);

156 
ªt
 = 
	`w©chdog_ªgi°î_devi˚
(&
wdt
->
wdt_dev
);

157 i‡(
ªt
) {

158 
	`dev_îr
(&
pdev
->
dev
, "ˇ¬ŸÑegi°î w©chdog: %d\n", 
ªt
);

159 
out
;

162 
	`dev_öfo
(&
pdev
->
dev
, "registered\n");

165 
out
:

166 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

167 
	`k‰ì
(
wdt
);

168 
out_˛k
:

169 
	`˛k_put
(
˛k
);

170  
ªt
;

171 
	}
}

173 
	$mcs814x_wdt_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

175 
mcs814x_wdt
 *
wdt
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

177 
	`˛k_put
(
wdt
->
˛k
);

178 
	`w©chdog_uƒegi°î_devi˚
(&
wdt
->
wdt_dev
);

179 
	`w©chdog_£t_drvd©a
(&
wdt
->
wdt_dev
, 
NULL
);

180 
	`k‰ì
(
wdt
);

181 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

184 
	}
}

186 c⁄° 
of_devi˚_id
 
	gmcs814x_wdt_ids
[] = {

187 { .
com∑tibÀ
 = "moschip,mcs814x-wdt", },

191 
∂©f‹m_drivî
 
	gmcs814x_wdt_drivî
 = {

192 .
drivî
 = {

193 .
«me
 = "mcs814x-wdt",

194 .
	gow√r
 = 
THIS_MODULE
,

195 .
	gof_m©ch_èbÀ
 = 
mcs814x_wdt_ids
,

197 .
	g¥obe
 = 
mcs814x_wdt_¥obe
,

198 .
	gªmove
 = 
mcs814x_wdt_ªmove
,

201 
moduÀ_∂©f‹m_drivî
(
mcs814x_wdt_drivî
);

203 
MODULE_AUTHOR
("Florian Fainelli <florian@openwrt.org>");

204 
MODULE_DESCRIPTION
("Moschip MCS814x Watchdog driver");

205 
MODULE_LICENSE
("GPL");

206 
MODULE_ALIAS_MISCDEV
(
WATCHDOG_MINOR
);

207 
MODULE_ALIAS
("platform:mcs814x-wdt");

	@linux/mpc85xx/files/arch/powerpc/boot/cuboot-tl-wdr4900-v1.c

22 
	~"›s.h
"

23 
	~"ty≥s.h
"

24 
	~"io.h
"

25 
	~"°dio.h
"

26 
	~<libfdt.h
>

28 
BSS_STACK
(4*1024);

30 
	gbus_‰eq
;

31 
	göt_‰eq
;

32 
u64
 
	gmem_size
;

33 
	gíëaddr
[6];

35 
	$¥o˚ss_boŸ_dtb
(*
boŸ_dtb
)

37 c⁄° 
u32
 *
«
, *
ns
, *
ªg
, *
vÆ32
;

38 c⁄° *
∑th
;

39 
u64
 
memsize64
;

40 
node
, 
size
, 
i
;

43 i‡(
	`fdt_check_hódî
(
boŸ_dtb
) != 0)

44 
	`Áèl
("Invalid deviceÅree blob\n");

47 
node
 = 
	`fdt_∑th_off£t
(
boŸ_dtb
, "/");

48 i‡(
node
 < 0)

49 
	`Áèl
("Cannot findÑootÇode\n");

50 
«
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "#addªss-˚Œs", &
size
);

51 i‡(!
«
 || (
size
 != 4))

52 
	`Áèl
("Cannot find #address-cellsÖroperty");

54 
ns
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "#size-˚Œs", &
size
);

55 i‡(!
ns
 || (
size
 != 4))

56 
	`Áèl
("Cannot find #size-cellsÖroperty");

59 
node
 = 
	`fdt_node_off£t_by_¥›_vÆue
(
boŸ_dtb
, -1, "device_type",

61 i‡(
node
 < 0)

62 
	`Áèl
("Cannot find memoryÇode\n");

63 
ªg
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "ªg", &
size
);

64 i‡(
size
 < (*
«
+*
ns
Ë* (
u32
))

65 
	`Áèl
("cannot get memoryÑange\n");

68 
i
 = 0; i < *
«
; i++)

69 i‡(*
ªg
++ != 0)

70 
	`Áèl
("MemoryÑange isÇot basedátáddress 0\n");

73 
memsize64
 = 0;

74 
i
 = 0; i < *
ns
; i++)

75 
memsize64
 = (memsize64 << 32Ë| *
ªg
++;

76 i‡((*Ë=4 && 
memsize64
 >= 0x100000000ULL)

77 
memsize64
 = 0xffffffff;

79 
mem_size
 = 
memsize64
;

82 
node
 = 
	`fdt_node_off£t_by_¥›_vÆue
(
boŸ_dtb
, -1, "device_type",

84 i‡(!
node
)

85 
	`Áèl
("Cannot find cpuÇode\n");

87 
vÆ32
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "˛ock-‰equícy", &
size
);

88 i‡(!
vÆ32
 || (
size
 != 4))

89 
	`Áèl
("Cannot get clock frequency");

91 
öt_‰eq
 = *
vÆ32
;

93 
vÆ32
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "bus-‰equícy", &
size
);

94 i‡(!
vÆ32
 || (
size
 != 4))

95 
	`Áèl
("Cannot get bus frequency");

97 
bus_‰eq
 = *
vÆ32
;

99 
∑th
 = 
	`fdt_gë_Æüs
(
boŸ_dtb
, "ethernet0");

100 i‡(
∑th
) {

101 c⁄° *
p
;

103 
node
 = 
	`fdt_∑th_off£t
(
boŸ_dtb
, 
∑th
);

104 i‡(
node
 < 0)

105 
	`Áèl
("Cannot findÉthernet0Çode");

107 
p
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "mac-addªss", &
size
);

108 i‡(!
p
 || (
size
 < 6)) {

109 
	`¥ötf
("no mac-addressÖroperty, findingÜocal\n\r");

110 
p
 = 
	`fdt_gë¥›
(
boŸ_dtb
, 
node
, "loˇl-mac-addªss", &
size
);

113 i‡(!
p
 || (
size
 < 6))

114 
	`Áèl
("cannot get MACáddres");

116 
	`mem˝y
(
íëaddr
, 
p
, (enetaddr));

118 
	}
}

120 
	$∂©f‹m_fixups
()

122 *
soc
, *
mpic
;

124 
	`dt_fixup_mem‹y
(0, 
mem_size
);

126 
	`dt_fixup_mac_addªss_by_Æüs
("ëhî√t0", 
íëaddr
);

127 
	`dt_fixup_˝u_˛ocks
(
öt_‰eq
, 
bus_‰eq
 / 8, bus_freq);

133 
soc
 = 
	`föd_node_by_devty≥
(
NULL
, "soc");

134 i‡(
soc
) {

135 *
£rül
 = 
NULL
;

137 
	`£çr›
(
soc
, "bus-‰equícy", &
bus_‰eq
, (bus_freq));

139 (
£rül
 = 
	`föd_node_by_devty≥
(serial, "serial"))) {

140 i‡(
	`gë_∑ª¡
(
£rül
Ë!
soc
)

143 
	`£çr›
(
£rül
, "˛ock-‰equícy", &
bus_‰eq
,

144 (
bus_‰eq
));

148 
mpic
 = 
	`föd_node_by_com∑tibÀ
(
NULL
, "fsl,mpic");

149 i‡(
mpic
)

150 
	`£çr›
(
mpic
, "˛ock-‰equícy", &
bus_‰eq
, (bus_freq));

151 
	}
}

153 
	$∂©f‹m_öô
(
r3
, 
r4
, 
r5
,

154 
r6
, 
r7
)

156 
mem_size
 = 64 * 1024 * 1024;

158 
	`sim∂e_Æloc_öô
(
_íd
, 
mem_size
 - (
u32
)_end - 1024*1024, 32, 64);

160 
	`fdt_öô
(
_dtb_°¨t
);

161 
	`£rül_c⁄sﬁe_öô
();

163 
	`¥ötf
("\n\r-- TL-WDR4900 v1 boot wrapper --\n\r");

165 
	`¥o˚ss_boŸ_dtb
((*Ë
r3
);

167 
∂©f‹m_›s
.
fixups
 = 
∂©f‹m_fixups
;

168 
	}
}

	@linux/mpc85xx/files/arch/powerpc/platforms/85xx/hiveap-330.c

17 
	~<löux/°ddef.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/dñay.h
>

20 
	~<löux/öãºu±.h
>

21 
	~<löux/of_∂©f‹m.h
>

23 
	~<asm/time.h
>

24 
	~<asm/machdï.h
>

25 
	~<asm/pci-bridge.h
>

26 
	~<mm/mmu_de˛.h
>

27 
	~<asm/¥om.h
>

28 
	~<asm/udbg.h
>

29 
	~<asm/mpic.h
>

31 
	~<sysdev/f¶_soc.h
>

32 
	~<sysdev/f¶_pci.h
>

33 
	~"smp.h
"

35 
	~"mpc85xx.h
"

37 
__öô
 
	$hivóp_330_pic_öô
()

39 
mpic
 *mpic;

41 
mpic
 = 
	`mpic_Æloc
(
NULL
, 0,

42 
MPIC_BIG_ENDIAN
 |

43 
MPIC_SINGLE_DEST_CPU
,

46 
	`BUG_ON
(
mpic
 =
NULL
);

47 
	`mpic_öô
(
mpic
);

48 
	}
}

53 
__öô
 
	$hivóp_330_£tup_¨ch
()

55 i‡(
µc_md
.
¥ogªss
)

56 
µc_md
.
	`¥ogªss
("hiveap_330_setup_arch()", 0);

58 
	`mpc85xx_smp_öô
();

60 
	`f¶_pci_assign_¥im¨y
();

62 
	`¥ötk
(
KERN_INFO
 "HiveAP-330 board from Aerohive\n");

63 
	}
}

65 
machöe_¨ch_öôˇŒ
(
hivóp_330
, 
mpc85xx_comm⁄_publish_devi˚s
);

70 
__öô
 
	$hivóp_330_¥obe
()

72 i‡(
	`of_machöe_is_com∑tibÀ
("aerohive,hiveap-330"))

75 
	}
}

77 
	$deföe_machöe
(
hivóp_330
) {

78 .
«me
 = "P1020 RDB",

79 .
¥obe
 = 
hivóp_330_¥obe
,

80 .
£tup_¨ch
 = 
hivóp_330_£tup_¨ch
,

81 .
öô_IRQ
 = 
hivóp_330_pic_öô
,

82 #ifde‡
CONFIG_PCI


83 .
pcibios_fixup_bus
 = 
f¶_pcibios_fixup_bus
,

84 .
pcibios_fixup_phb
 = 
f¶_pcibios_fixup_phb
,

86 .
gë_úq
 = 
mpic_gë_úq
,

87 .
ˇlibøã_de¸
 = 
gíîic_ˇlibøã_de¸
,

88 .
¥ogªss
 = 
udbg_¥ogªss
,

89 
	}
};

	@linux/mpc85xx/files/arch/powerpc/platforms/85xx/panda.c

19 
	~<löux/°ddef.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/dñay.h
>

22 
	~<löux/öãºu±.h
>

23 
	~<löux/of_∂©f‹m.h
>

25 
	~<asm/time.h
>

26 
	~<asm/machdï.h
>

27 
	~<asm/pci-bridge.h
>

28 
	~<mm/mmu_de˛.h
>

29 
	~<asm/¥om.h
>

30 
	~<asm/udbg.h
>

31 
	~<asm/mpic.h
>

33 
	~<sysdev/f¶_soc.h
>

34 
	~<sysdev/f¶_pci.h
>

35 
	~"smp.h
"

37 
	~"mpc85xx.h
"

39 
__öô
 
	$∑nda_pic_öô
()

41 
mpic
 *mpic;

43 
mpic
 = 
	`mpic_Æloc
(
NULL
, 0,

44 
MPIC_BIG_ENDIAN
 |

45 
MPIC_SINGLE_DEST_CPU
,

48 
	`BUG_ON
(
mpic
 =
NULL
);

49 
	`mpic_öô
(
mpic
);

50 
	}
}

55 
__öô
 
	$∑nda_£tup_¨ch
()

57 i‡(
µc_md
.
¥ogªss
)

58 
µc_md
.
	`¥ogªss
("panda_setup_arch()", 0);

60 
	`mpc85xx_smp_öô
();

62 
	`f¶_pci_assign_¥im¨y
();

64 
	`¥_öfo
("Panda board from OCEDO\n");

65 
	}
}

67 
machöe_¨ch_öôˇŒ
(
∑nda
, 
mpc85xx_comm⁄_publish_devi˚s
);

72 
__öô
 
	$∑nda_¥obe
()

74 i‡(
	`of_machöe_is_com∑tibÀ
("ocedo,panda"))

77 
	}
}

79 
	$deföe_machöe
(
∑nda
) {

80 .
«me
 = "P1020 RDB",

81 .
¥obe
 = 
∑nda_¥obe
,

82 .
£tup_¨ch
 = 
∑nda_£tup_¨ch
,

83 .
öô_IRQ
 = 
∑nda_pic_öô
,

84 #ifde‡
CONFIG_PCI


85 .
pcibios_fixup_bus
 = 
f¶_pcibios_fixup_bus
,

86 .
pcibios_fixup_phb
 = 
f¶_pcibios_fixup_phb
,

88 .
gë_úq
 = 
mpic_gë_úq
,

89 .
ˇlibøã_de¸
 = 
gíîic_ˇlibøã_de¸
,

90 .
¥ogªss
 = 
udbg_¥ogªss
,

91 
	}
};

	@linux/mpc85xx/files/arch/powerpc/platforms/85xx/red15w_rev1.c

19 
	~<löux/°ddef.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/dñay.h
>

22 
	~<löux/öãºu±.h
>

23 
	~<löux/of_∂©f‹m.h
>

25 
	~<asm/time.h
>

26 
	~<asm/machdï.h
>

27 
	~<asm/pci-bridge.h
>

28 
	~<mm/mmu_de˛.h
>

29 
	~<asm/¥om.h
>

30 
	~<asm/udbg.h
>

31 
	~<asm/mpic.h
>

33 
	~<sysdev/f¶_soc.h
>

34 
	~<sysdev/f¶_pci.h
>

36 
	~"mpc85xx.h
"

38 
__öô
 
	$ªd_15w_ªv1_pic_öô
()

40 
mpic
 *mpic;

42 
mpic
 = 
	`mpic_Æloc
(
NULL
, 0,

43 
MPIC_BIG_ENDIAN
 | 
MPIC_SINGLE_DEST_CPU
,

46 
	`BUG_ON
(
mpic
 =
NULL
);

47 
	`mpic_öô
(
mpic
);

48 
	}
}

53 
__öô
 
	$ªd_15w_ªv1_£tup_¨ch
()

55 i‡(
µc_md
.
¥ogªss
)

56 
µc_md
.
	`¥ogªss
("red_15w_rev1_setup_arch()", 0);

58 
	`f¶_pci_assign_¥im¨y
();

60 
	`¥_öfo
("RED 15w Rev.1 from Sophos\n");

61 
	}
}

63 
machöe_¨ch_öôˇŒ
(
ªd_15w_ªv1
, 
mpc85xx_comm⁄_publish_devi˚s
);

68 
__öô
 
	$ªd_15w_ªv1_¥obe
()

70 i‡(
	`of_machöe_is_com∑tibÀ
("sophos,red-15w-rev1"))

73 
	}
}

75 
	$deföe_machöe
(
ªd_15w_ªv1
) {

76 .
«me
 = "P1010 RDB",

77 .
¥obe
 = 
ªd_15w_ªv1_¥obe
,

78 .
£tup_¨ch
 = 
ªd_15w_ªv1_£tup_¨ch
,

79 .
öô_IRQ
 = 
ªd_15w_ªv1_pic_öô
,

80 #ifde‡
CONFIG_PCI


81 .
pcibios_fixup_bus
 = 
f¶_pcibios_fixup_bus
,

82 .
pcibios_fixup_phb
 = 
f¶_pcibios_fixup_phb
,

84 .
gë_úq
 = 
mpic_gë_úq
,

85 .
ˇlibøã_de¸
 = 
gíîic_ˇlibøã_de¸
,

86 .
¥ogªss
 = 
udbg_¥ogªss
,

87 
	}
};

	@linux/mpc85xx/files/arch/powerpc/platforms/85xx/tl_wdr4900_v1.c

17 
	~<löux/°ddef.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/pci.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/öãºu±.h
>

22 
	~<löux/of_∂©f‹m.h
>

23 
	~<löux/©h9k_∂©f‹m.h
>

24 
	~<löux/Àds.h
>

26 
	~<asm/time.h
>

27 
	~<asm/machdï.h
>

28 
	~<asm/pci-bridge.h
>

29 
	~<mm/mmu_de˛.h
>

30 
	~<asm/¥om.h
>

31 
	~<asm/udbg.h
>

32 
	~<asm/mpic.h
>

34 
	~<sysdev/f¶_soc.h
>

35 
	~<sysdev/f¶_pci.h
>

37 
	~"mpc85xx.h
"

39 
__öô
 
	$é_wdr4900_v1_pic_öô
()

41 
mpic
 *mpi¯
	`mpic_Æloc
(
NULL
, 0, 
MPIC_BIG_ENDIAN
 |

42 
MPIC_SINGLE_DEST_CPU
,

45 
	`BUG_ON
(
mpic
 =
NULL
);

47 
	`mpic_öô
(
mpic
);

48 
	}
}

50 #ifde‡
CONFIG_PCI


51 
gpio_Àd
 
	gé_wdr4900_v1_wmac_Àds_gpio
[] = {

53 .
«me
 = "tp-link:blue:wps",

54 .
	ggpio
 = 1,

55 .
	ga˘ive_low
 = 1,

59 
©h9k_∂©f‹m_d©a
 
	gé_wdr4900_v1_wmac0_d©a
 = {

60 .
Àd_pö
 = 0,

61 .
	gì¥om_«me
 = "pci_wmac0.eeprom",

62 .
	gÀds
 = 
é_wdr4900_v1_wmac_Àds_gpio
,

63 .
	gnum_Àds
 = 
ARRAY_SIZE
(
é_wdr4900_v1_wmac_Àds_gpio
),

66 
©h9k_∂©f‹m_d©a
 
	gé_wdr4900_v1_wmac1_d©a
 = {

67 .
Àd_pö
 = 0,

68 .
	gì¥om_«me
 = "pci_wmac1.eeprom",

71 
	$é_wdr4900_v1_pci_wmac_fixup
(
pci_dev
 *
dev
)

73 i‡(!
	`machöe_is
(
é_wdr4900_v1
))

76 i‡(
dev
->
bus
->
numbî
 == 1 &&

77 
	`PCI_SLOT
(
dev
->
dev‚
) == 0) {

78 
dev
->dev.
∂©f‹m_d©a
 = &
é_wdr4900_v1_wmac0_d©a
;

82 i‡(
dev
->
bus
->
numbî
 == 3 &&

83 
	`PCI_SLOT
(
dev
->
dev‚
) == 0 &&

84 
dev
->
devi˚
 == 0xabcd) {

85 
dev
->dev.
∂©f‹m_d©a
 = &
é_wdr4900_v1_wmac1_d©a
;

93 
dev
->
devi˚
 = 0x30;

94 
dev
->
˛ass
 = 0x028000;

96 
	`¥_öfo
("pcò%s: AR9381 fixu∞≠∂õd\n", 
	`pci_«me
(
dev
));

98 
	}
}

100 
DECLARE_PCI_FIXUP_EARLY
(
PCI_VENDOR_ID_ATHEROS
, 
PCI_ANY_ID
,

101 
é_wdr4900_v1_pci_wmac_fixup
);

107 
__öô
 
	$é_wdr4900_v1_£tup_¨ch
()

109 i‡(
µc_md
.
¥ogªss
)

110 
µc_md
.
	`¥ogªss
("tl_wdr4900_v1_setup_arch()", 0);

112 
	`f¶_pci_assign_¥im¨y
();

114 
	`¥ötk
(
KERN_INFO
 "TL-WDR4900 v1 board from TP-Link\n");

115 
	}
}

117 
machöe_¨ch_öôˇŒ
(
é_wdr4900_v1
, 
mpc85xx_comm⁄_publish_devi˚s
);

118 
machöe_¨ch_öôˇŒ
(
é_wdr4900_v1
, 
swiŸlb_£tup_bus_nŸifõr
);

123 
__öô
 
	$é_wdr4900_v1_¥obe
()

125 
roŸ
 = 
	`of_gë_Ê©_dt_roŸ
();

127 i‡(
	`of_Ê©_dt_is_com∑tibÀ
(
roŸ
, "tplink,tl-wdr4900-v1"))

131 
	}
}

133 
	$deföe_machöe
(
é_wdr4900_v1
) {

134 .
«me
 = "Freescale P1014",

135 .
¥obe
 = 
é_wdr4900_v1_¥obe
,

136 .
£tup_¨ch
 = 
é_wdr4900_v1_£tup_¨ch
,

137 .
öô_IRQ
 = 
é_wdr4900_v1_pic_öô
,

138 #ifde‡
CONFIG_PCI


139 .
pcibios_fixup_bus
 = 
f¶_pcibios_fixup_bus
,

141 .
gë_úq
 = 
mpic_gë_úq
,

142 .
ˇlibøã_de¸
 = 
gíîic_ˇlibøã_de¸
,

143 .
¥ogªss
 = 
udbg_¥ogªss
,

144 
	}
};

	@linux/oxnas/files/arch/arm/include/debug/uncompress-ox820.h

8 #i‚de‡
__ASM_ARCH_UNCOMPRESS_H


9 
	#__ASM_ARCH_UNCOMPRESS_H


	)

11 
	#OXNAS_UART1_BASE
 0x44200000

	)

13 
ölöe
 
	$putc
(
c
)

15 vﬁ©ûê*
u¨t
 =

16 (vﬁ©ûê*)
OXNAS_UART1_BASE
;

18 !(
u¨t
[5] & 0x20)) {

19 
	`b¨rõr
();

21 
u¨t
[0] = 
c
;

22 
	}
}

24 
ölöe
 
	$Êush
()

26 
	}
}

28 
	#¨ch_decomp_£tup
()

	)

30 
	#¨ch_decomp_wdog
()

	)

	@linux/oxnas/files/drivers/ata/sata_oxnas.c

20 
	~<löux/©a.h
>

21 
	~<löux/lib©a.h
>

22 
	~<löux/of_∂©f‹m.h
>

23 
	~<löux/dñay.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/•ölock.h
>

27 
	~<löux/of_addªss.h
>

28 
	~<löux/of_úq.h
>

29 
	~<löux/˛k.h
>

30 
	~<löux/ª£t.h
>

32 
	~<löux/io.h
>

33 
	~<löux/sizes.h
>

35 
ölöe
 
	$ox«s_ªgi°î_˛ór_mask
(
__iomem
 *
p
, 
mask
)

37 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

39 
vÆ
 &~
mask
;

40 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

41 
	}
}

43 
ölöe
 
	$ox«s_ªgi°î_£t_mask
(
__iomem
 *
p
, 
mask
)

45 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

47 
vÆ
 |
mask
;

48 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

49 
	}
}

51 
ölöe
 
	$ox«s_ªgi°î_vÆue_mask
(
__iomem
 *
p
,

52 
mask
, 
√w_vÆue
)

55 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

57 
vÆ
 &~
mask
;

58 
vÆ
 |
√w_vÆue
;

59 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

60 
	}
}

63 
	ssgdma_ªque°
 {

64 vﬁ©ûê
u32
 
	mquÆifõr
;

65 vﬁ©ûê
u32
 
	mc⁄åﬁ
;

66 
dma_addr_t
 
	m§c_∑
;

67 
dma_addr_t
 
	md°_∑
;

68 } 
__∑cked
 
__Æig√d
(4);

73 
	mSATA_OXNAS_MAX_PRD
 = 254,

74 
	mSATA_OXNAS_DMA_SIZE
 = 
SATA_OXNAS_MAX_PRD
 *

75 (
©a_bmdma_¥d
) +

76 (
sgdma_ªque°
),

77 
	mSATA_OXNAS_MAX_PORTS
 = 2,

79 
	mSATA_OXNAS_CORE_VERSION
 = 0x1f3,

80 
	mSATA_OXNAS_IRQ_FLAG
 = 
IRQF_SHARED
,

81 
	mSATA_OXNAS_HOST_FLAGS
 = (
ATA_FLAG_SATA
 | 
ATA_FLAG_PIO_DMA
 |

82 
ATA_FLAG_NO_ATAPI
 ),

83 
	mSATA_OXNAS_QUEUE_DEPTH
 = 32,

85 
	mSATA_OXNAS_DMA_BOUNDARY
 = 0xFFFFFFFF,

94 
	mORB1
 = 0x00,

95 
	mORB2
 = 0x04,

96 
	mORB3
 = 0x08,

97 
	mORB4
 = 0x0C,

98 
	mORB5
 = 0x10,

99 
	mMASTER_STATUS
 = 0x10,

100 
	mFIS_CTRL
 = 0x18,

101 
	mFIS_DATA
 = 0x1C,

102 
	mINT_STATUS
 = 0x30,

103 
	mINT_CLEAR
 = 0x30,

104 
	mINT_ENABLE
 = 0x34,

105 
	mINT_DISABLE
 = 0x38,

106 
	mVERSION
 = 0x3C,

107 
	mSATA_CONTROL
 = 0x5C,

108 
	mSATA_COMMAND
 = 0x60,

109 
	mHID_FEATURES
 = 0x64,

110 
	mPORT_CONTROL
 = 0x68,

111 
	mDRIVE_CONTROL
 = 0x6C,

114 
	mLINK_DATA
 = 0x70,

115 
	mLINK_RD_ADDR
 = 0x74,

116 
	mLINK_WR_ADDR
 = 0x78,

117 
	mLINK_CONTROL
 = 0x7C,

119 
	mWIN1LO
 = 0x80,

120 
	mWIN1HI
 = 0x84,

121 
	mWIN2LO
 = 0x88,

122 
	mWIN2HI
 = 0x8C,

123 
	mWIN0_CONTROL
 = 0x90,

132 
	mSATA_OPCODE_MASK
 = 0x00000007,

133 
	mCMD_WRITE_TO_ORB_REGS_NO_COMMAND
 = 0x4,

134 
	mCMD_WRITE_TO_ORB_REGS
 = 0x2,

135 
	mCMD_SYNC_ESCAPE
 = 0x7,

136 
	mCMD_CORE_BUSY
 = (1 << 7),

137 
	mCMD_DRIVE_SELECT_SHIFT
 = 12,

138 
	mCMD_DRIVE_SELECT_MASK
 = (0x‡<< 
CMD_DRIVE_SELECT_SHIFT
),

141 
	mINT_END_OF_CMD
 = 1 << 0,

142 
	mINT_LINK_SERROR
 = 1 << 1,

143 
	mINT_ERROR
 = 1 << 2,

144 
	mINT_LINK_IRQ
 = 1 << 3,

145 
	mINT_REG_ACCESS_ERR
 = 1 << 7,

146 
	mINT_BIST_FIS
 = 1 << 11,

147 
	mINT_MASKABLE
 = 
INT_END_OF_CMD
 |

148 
INT_LINK_SERROR
 |

149 
INT_ERROR
 |

150 
INT_LINK_IRQ
 |

151 
INT_REG_ACCESS_ERR
 |

152 
INT_BIST_FIS
,

153 
	mINT_WANT
 = 
INT_END_OF_CMD
 |

154 
INT_LINK_SERROR
 |

155 
INT_REG_ACCESS_ERR
 |

156 
INT_ERROR
,

157 
	mINT_ERRORS
 = 
INT_LINK_SERROR
 |

158 
INT_REG_ACCESS_ERR
 |

159 
INT_ERROR
,

162 
	mRAW_END_OF_CMD
 = 
INT_END_OF_CMD
 << 16,

163 
	mRAW_LINK_SERROR
 = 
INT_LINK_SERROR
 << 16,

164 
	mRAW_ERROR
 = 
INT_ERROR
 << 16,

165 
	mRAW_LINK_IRQ
 = 
INT_LINK_IRQ
 << 16,

166 
	mRAW_REG_ACCESS_ERR
 = 
INT_REG_ACCESS_ERR
 << 16,

167 
	mRAW_BIST_FIS
 = 
INT_BIST_FIS
 << 16,

168 
	mRAW_WANT
 = 
INT_WANT
 << 16,

169 
	mRAW_ERRORS
 = 
INT_ERRORS
 << 16,

175 
	mDR_CON_48
 = 2,

176 
	mDR_CON_28
 = 0,

178 
	mSATA_CTL_ERR_MASK
 = 0x00000016,

184 
	mSGDMA_CONTROL
 = 0x0,

185 
	mSGDMA_STATUS
 = 0x4,

186 
	mSGDMA_REQUESTPTR
 = 0x8,

187 
	mSGDMA_RESETS
 = 0xC,

188 
	mSGDMA_CORESIZE
 = 0x10,

193 
	mDMA_CONTROL
 = 0x0,

194 
	mDMA_CORESIZE
 = 0x20,

196 
	mDMA_CONTROL_RESET
 = (1 << 12),

202 
	mSGDMA_REQCTL0OUT
 = 0x0497c03d,

204 
	mSGDMA_REQCTL0IN
 = 0x0493a3c1,

205 
	mSGDMA_REQCTL1OUT
 = 0x0497c07d,

206 
	mSGDMA_REQCTL1IN
 = 0x0497a3c5,

207 
	mSGDMA_CONTROL_NOGO
 = 0x3e,

208 
	mSGDMA_CONTROL_GO
 = 
SGDMA_CONTROL_NOGO
 | 1,

209 
	mSGDMA_ERRORMASK
 = 0x3f,

210 
	mSGDMA_BUSY
 = 0x80,

212 
	mSGDMA_RESETS_CTRL
 = 1 << 0,

213 
	mSGDMA_RESETS_ARBT
 = 1 << 1,

214 
	mSGDMA_RESETS_AHB
 = 1 << 2,

215 
	mSGDMA_RESETS_ALL
 = 
SGDMA_RESETS_CTRL
 |

216 
SGDMA_RESETS_ARBT
 |

217 
SGDMA_RESETS_AHB
,

220 
	mSGDMA_REQQUAL
 = 0x00220001,

226 
	mDM_DBG1
 = 0x000,

227 
	mRAID_SET
 = 0x004,

228 
	mDM_DBG2
 = 0x008,

229 
	mDATACOUNT_PORT0
 = 0x010,

230 
	mDATACOUNT_PORT1
 = 0x014,

231 
	mCORE_INT_STATUS
 = 0x030,

232 
	mCORE_INT_CLEAR
 = 0x030,

233 
	mCORE_INT_ENABLE
 = 0x034,

234 
	mCORE_INT_DISABLE
 = 0x038,

235 
	mCORE_REBUILD_ENABLE
 = 0x050,

236 
	mCORE_FAILED_PORT_R
 = 0x054,

237 
	mDEVICE_CONTROL
 = 0x068,

238 
	mEXCESS
 = 0x06C,

239 
	mRAID_SIZE_LOW
 = 0x070,

240 
	mRAID_SIZE_HIGH
 = 0x074,

241 
	mPORT_ERROR_MASK
 = 0x078,

242 
	mIDLE_STATUS
 = 0x07C,

243 
	mRAID_CONTROL
 = 0x090,

244 
	mDATA_PLANE_CTRL
 = 0x0AC,

245 
	mCORE_DATAPLANE_STAT
 = 0x0b8,

246 
	mPROC_PC
 = 0x100,

247 
	mCONFIG_IN
 = 0x3d8,

248 
	mPROC_START
 = 0x3f0,

249 
	mPROC_RESET
 = 0x3f4,

250 
	mUCODE_STORE
 = 0x1000,

251 
	mRAID_WP_BOT_LOW
 = 0x1FF0,

252 
	mRAID_WP_BOT_HIGH
 = 0x1FF4,

253 
	mRAID_WP_TOP_LOW
 = 0x1FF8,

254 
	mRAID_WP_TOP_HIGH
 = 0x1FFC,

255 
	mDATA_MUX_RAM0
 = 0x8000,

256 
	mDATA_MUX_RAM1
 = 0xA000,

257 
	mPORT_SIZE
 = 0x10000,

262 
	mCORE_PORT0_DATA_DIR_BIT
 = 20,

263 
	mCORE_PORT1_DATA_DIR_BIT
 = 21,

264 
	mCORE_PORT0_DATA_DIR
 = 1 << 
CORE_PORT0_DATA_DIR_BIT
,

265 
	mCORE_PORT1_DATA_DIR
 = 1 << 
CORE_PORT1_DATA_DIR_BIT
,

268 
	mSCTL_CLR_ERR
 = 0x00003016,

269 
	mRAID_CLR_ERR
 = 0x0000011e,

272 
	mNORMAL_INTS_WANTED
 = 0x00000303,

275 
	mCOREINT_HOST
 = 0x00000001,

276 
	mCOREINT_END
 = 0x00000100,

277 
	mCORERAW_HOST
 = 
COREINT_HOST
 << 16,

278 
	mCORERAW_END
 = 
COREINT_END
 << 16,

281 
	mRAID_INTS_WANTED
 = 0x00008300,

284 
	mIDLE_CORES
 = (1 << 18) | (1 << 19),

289 
	mDPC_ERROR_MASK
 = 0x00000300,

290 
	mDPC_ERROR_MASK_BIT
 = 0x00000100,

292 
	mDPC_JBOD_UCODE
 = 1 << 0,

293 
	mDPC_FIS_SWCH
 = 1 << 1,

296 
	mDEVICE_CONTROL_DMABT
 = 1 << 4,

297 
	mDEVICE_CONTROL_ABORT
 = 1 << 2,

298 
	mDEVICE_CONTROL_PAD
 = 1 << 3,

299 
	mDEVICE_CONTROL_PADPAT
 = 1 << 16,

300 
	mDEVICE_CONTROL_PRTRST
 = 1 << 8,

301 
	mDEVICE_CONTROL_RAMRST
 = 1 << 12,

302 
	mDEVICE_CONTROL_ATA_ERR_OVERRIDE
 = 1 << 28,

305 
	mOXNASSATA_NOTRAID
 = 0,

306 
	mOXNASSATA_RAID0
 = 1,

307 
	mOXNASSATA_RAID1
 = 2,

309 
	mRAID_TWODISKS
 = 3,

310 
	mUNKNOWN_MODE
 = ~0,

312 
	mCONFIG_IN_RESUME
 = 2,

317 
	mPHY_STAT
 = 0x00,

318 
	mPHY_DATA
 = 0x04,

322 
	mSTAT_READ_VALID
 = (1 << 21),

323 
	mSTAT_CR_ACK
 = (1 << 20),

324 
	mSTAT_CR_READ
 = (1 << 19),

325 
	mSTAT_CR_WRITE
 = (1 << 18),

326 
	mSTAT_CAP_DATA
 = (1 << 17),

327 
	mSTAT_CAP_ADDR
 = (1 << 16),

329 
	mSTAT_ACK_ANY
 = 
STAT_CR_ACK
 |

330 
STAT_CR_READ
 |

331 
STAT_CR_WRITE
 |

332 
STAT_CAP_DATA
 |

333 
STAT_CAP_ADDR
,

335 
	mCR_READ_ENABLE
 = (1 << 16),

336 
	mCR_WRITE_ENABLE
 = (1 << 17),

337 
	mCR_CAP_DATA
 = (1 << 18),

342 
	mSERROR_IRQ_MASK
 = 5,

346 
	mOXNAS_SATA_SOFTRESET
 = 1,

347 
	mOXNAS_SATA_REINIT
 = 2,

351 
	mOXNAS_SATA_UCODE_RAID0
,

352 
	mOXNAS_SATA_UCODE_RAID1
,

353 
	mOXNAS_SATA_UCODE_JBOD
,

354 
	mOXNAS_SATA_UCODE_NONE
,

358 
	mSATA_UNLOCKED
,

359 
	mSATA_WRITER
,

360 
	mSATA_READER
,

361 
	mSATA_REBUILD
,

362 
	mSATA_HWRAID
,

363 
	mSATA_SCSI_STACK


366 
	$úqªtu∫_t
 (*
	tox«s_ßè_i§_ˇŒback_t
)(, , );

368 
	sßè_ox«s_ho°_¥iv
 {

369 
__iomem
 *
p‹t_ba£
;

370 
__iomem
 *
dma˘l_ba£
;

371 
__iomem
 *
sgdma_ba£
;

372 
__iomem
 *
c‹e_ba£
;

373 
__iomem
 *
phy_ba£
;

374 
dma_addr_t
 
dma_ba£
;

375 
__iomem
 *
dma_ba£_va
;

376 
size_t
 
dma_size
;

377 
úq
;

378 
n_p‹ts
;

379 
cuºít_ucode
;

380 
u32
 
p‹t_‰ozí
;

381 
u32
 
p‹t_ö_eh
;

382 
˛k
 *clk;

383 
ª£t_c⁄åﬁ
 *
r°_ßè
;

384 
ª£t_c⁄åﬁ
 *
r°_lök
;

385 
ª£t_c⁄åﬁ
 *
r°_phy
;

386 
•ölock_t
 
phy_lock
;

387 
•ölock_t
 
c‹e_lock
;

388 
c‹e_locked
;

389 
ªíå™t_p‹t_no
;

390 
hw_lock_cou¡
;

391 
dúe˘_lock_cou¡
;

392 *
lockî_uid
;

393 
cuºít_lockî_ty≥
;

394 
scsi_n⁄blockög_©ãm±s
;

395 
ox«s_ßè_i§_ˇŒback_t
 
i§_ˇŒback
;

396 *
i§_¨g
;

397 
waô_queue_hód_t
 
Á°_waô_queue
;

398 
waô_queue_hód_t
 
scsi_waô_queue
;

402 
	sßè_ox«s_p‹t_¥iv
 {

403 
__iomem
 *
p‹t_ba£
;

404 
__iomem
 *
dma˘l_ba£
;

405 
__iomem
 *
sgdma_ba£
;

406 
__iomem
 *
c‹e_ba£
;

407 
sgdma_ªque°
 *sgdma_request;

408 
dma_addr_t
 
sgdma_ªque°_∑
;

411 
u8
 
	`ßè_ox«s_check_°©us
(
©a_p‹t
 *
≠
);

412 
	`ßè_ox«s_˛ónup
(
©a_ho°
 *
ah
);

413 
	`ßè_ox«s_tf_lﬂd
(
©a_p‹t
 *
≠
,

414 c⁄° 
©a_èskfûe
 *
tf
);

415 
	`ßè_ox«s_úq_⁄
(
©a_p‹t
 *
≠
);

416 
	`ßè_ox«s_po°_ª£t_öô
(
©a_p‹t
 *
≠
);

418 
	`ßè_ox«s_acquúe_hw
(
©a_p‹t
 *
≠
, 
may_¶ìp
,

419 
timeout_jiffõs
);

420 
	`ßè_ox«s_ªÀa£_hw
(
©a_p‹t
 *
≠
);

422 c⁄° *
HW_LOCKER_UID
 = (*)0xdeadbeef;

427 
	$waô_¸_ack
(
__iomem
 *
phy_ba£
)

429 (
	`i‹ód32
(
phy_ba£
 + 
PHY_STAT
) >> 16) & 0x1f)

431 
	}
}

433 
u16
 
	$ªad_¸
(
__iomem
 *
phy_ba£
, 
u16
 
addªss
)

435 
	`iowrôe32
((
u32
)
addªss
, 
phy_ba£
 + 
PHY_STAT
);

436 
	`waô_¸_ack
(
phy_ba£
);

437 
	`iowrôe32
(
CR_READ_ENABLE
, 
phy_ba£
 + 
PHY_DATA
);

438 
	`waô_¸_ack
(
phy_ba£
);

439  (
u16
)
	`i‹ód32
(
phy_ba£
 + 
PHY_STAT
);

440 
	}
}

442 
	$wrôe_¸
(
__iomem
 *
phy_ba£
, 
u16
 
d©a
, u16 
addªss
)

444 
	`iowrôe32
((
u32
)
addªss
, 
phy_ba£
 + 
PHY_STAT
);

445 
	`waô_¸_ack
(
phy_ba£
);

446 
	`iowrôe32
((
d©a
 | 
CR_CAP_DATA
), 
phy_ba£
 + 
PHY_DATA
);

447 
	`waô_¸_ack
(
phy_ba£
);

448 
	`iowrôe32
(
CR_WRITE_ENABLE
, 
phy_ba£
 + 
PHY_DATA
);

449 
	`waô_¸_ack
(
phy_ba£
);

450 
	}
}

452 
	#PH_GAIN
 2

	)

453 
	#FR_GAIN
 3

	)

454 
	#PH_GAIN_OFFSET
 6

	)

455 
	#FR_GAIN_OFFSET
 8

	)

456 
	#PH_GAIN_MASK
 (0x3 << 
PH_GAIN_OFFSET
)

	)

457 
	#FR_GAIN_MASK
 (0x3 << 
FR_GAIN_OFFSET
)

	)

458 
	#USE_INT_SETTING
 (1<<5)

	)

460 
	$w‹k¨ound5458
(
©a_ho°
 *
ah
)

462 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

463 
__iomem
 *
phy_ba£
 = 
hd
->phy_base;

464 
u16
 
rx_c⁄åﬁ
;

465 
i
;

467 
i
 = 0; i < 2; i++) {

468 
rx_c⁄åﬁ
 = 
	`ªad_¸
(
phy_ba£
, 0x201d + (
i
 << 8));

469 
rx_c⁄åﬁ
 &~(
PH_GAIN_MASK
 | 
FR_GAIN_MASK
);

470 
rx_c⁄åﬁ
 |
PH_GAIN
 << 
PH_GAIN_OFFSET
;

471 
rx_c⁄åﬁ
 |(
FR_GAIN
 << 
FR_GAIN_OFFSET
Ë| 
USE_INT_SETTING
;

472 
	`wrôe_¸
(
phy_ba£
, 
rx_c⁄åﬁ
, 0x201d+(
i
<<8));

474 
	}
}

481 
	$ßè_ox«s_lök_wrôe
(
©a_p‹t
 *
≠
, 
lök_ªg
, 
u32
 
vÆ
)

483 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

484 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

485 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

486 
u32
 
∑tõn˚
;

487 
Êags
;

489 
	`DPRINTK
("P%d [0x%02x]->0x%08x\n", 
≠
->
p‹t_no
, 
lök_ªg
, 
vÆ
);

491 
	`•ö_lock_úqßve
(&
hd
->
phy_lock
, 
Êags
);

492 
	`iowrôe32
(
vÆ
, 
p‹t_ba£
 + 
LINK_DATA
);

496 
	`iowrôe32
(
lök_ªg
 , 
p‹t_ba£
 + 
LINK_WR_ADDR
);

497 
	`i‹ód32
(
p‹t_ba£
 + 
LINK_WR_ADDR
);

499 
∑tõn˚
 = 0x100000;Öatience > 0; --patience) {

500 i‡(
	`i‹ód32
(
p‹t_ba£
 + 
LINK_CONTROL
) & 0x00000001)

503 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
phy_lock
, 
Êags
);

504 
	}
}

506 
	$ßè_ox«s_s¸_wrôe_p‹t
(
©a_p‹t
 *
≠
, 
sc_ªg
,

507 
u32
 
vÆ
)

509 
	`ßè_ox«s_lök_wrôe
(
≠
, 0x20 + (
sc_ªg
 * 4), 
vÆ
);

511 
	}
}

513 
	$ßè_ox«s_s¸_wrôe
(
©a_lök
 *
lök
, 
sc_ªg
,

514 
u32
 
vÆ
)

516  
	`ßè_ox«s_s¸_wrôe_p‹t
(
lök
->
≠
, 
sc_ªg
, 
vÆ
);

517 
	}
}

519 
u32
 
	$ßè_ox«s_lök_ªad
(
©a_p‹t
 *
≠
, 
lök_ªg
)

521 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

522 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

523 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

524 
u32
 
ªsu…
;

525 
u32
 
∑tõn˚
;

526 
Êags
;

528 
	`•ö_lock_úqßve
(&
hd
->
phy_lock
, 
Êags
);

531 
	`iowrôe32
(
lök_ªg
, 
p‹t_ba£
 + 
LINK_RD_ADDR
);

532 
	`i‹ód32
(
p‹t_ba£
 + 
LINK_RD_ADDR
);

534 
∑tõn˚
 = 0x100000;Öatience > 0; --patience) {

535 i‡(
	`i‹ód32
(
p‹t_ba£
 + 
LINK_CONTROL
) & 0x00000001)

538 i‡(
∑tõn˚
 == 0)

539 
	`DPRINTK
("lökÑódÅimed ouàf‹Ö‹à%d\n", 
≠
->
p‹t_no
);

541 
ªsu…
 = 
	`i‹ód32
(
p‹t_ba£
 + 
LINK_DATA
);

542 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
phy_lock
, 
Êags
);

544  
ªsu…
;

545 
	}
}

547 
	$ßè_ox«s_s¸_ªad_p‹t
(
©a_p‹t
 *
≠
, 
sc_ªg
,

548 
u32
 *
vÆ
)

550 *
vÆ
 = 
	`ßè_ox«s_lök_ªad
(
≠
, 0x20 + (
sc_ªg
*4));

552 
	}
}

554 
	$ßè_ox«s_s¸_ªad
(
©a_lök
 *
lök
,

555 
sc_ªg
, 
u32
 *
vÆ
)

557  
	`ßè_ox«s_s¸_ªad_p‹t
(
lök
->
≠
, 
sc_ªg
, 
vÆ
);

558 
	}
}

567 
	$ßè_ox«s_úq_˛ór
(
©a_p‹t
 *
≠
)

569 
ßè_ox«s_p‹t_¥iv
 *
p‹t_¥iv
 = 
≠
->
¥iv©e_d©a
;

572 
	`iowrôe32
(~0, 
p‹t_¥iv
->
p‹t_ba£
 + 
INT_CLEAR
);

573 
	`iowrôe32
(
COREINT_END
, 
p‹t_¥iv
->
c‹e_ba£
 + 
CORE_INT_CLEAR
);

574 
	}
}

584 
	$ßè_ox«s_qc_issue
(
©a_queued_cmd
 *
qc
)

586 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
qc
->
≠
->
¥iv©e_d©a
;

587 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
qc
->
≠
->
ho°
->
¥iv©e_d©a
;

589 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

590 
__iomem
 *
c‹e_ba£
 = 
pd
->core_base;

591 
p‹t_no
 = 
qc
->
≠
->port_no;

592 
no_mi¸ocode
 = (
hd
->
cuºít_ucode
 =
UNKNOWN_MODE
);

593 
u32
 
ªg
;

596 i‡(
	`i‹ód32
(
p‹t_ba£
 + 
SATA_COMMAND
Ë& 
CMD_CORE_BUSY
) {

597 
cou¡
 = 0;

599 
	`DPRINTK
("core busy forá command onÖort %d\n",

600 
qc
->
≠
->
p‹t_no
);

602 
	`mdñay
(1);

603 i‡(++
cou¡
 > 100) {

604 
	`DPRINTK
("core busy forá command onÖort %d\n",

605 
qc
->
≠
->
p‹t_no
);

607 
	`ßè_ox«s_˛ónup
(
qc
->
≠
->
ho°
);

609 } 
	`i‹ód32
(
p‹t_ba£
 + 
SATA_COMMAND
Ë& 
CMD_CORE_BUSY
);

614 
ªg
 = 
	`i‹ód32
(
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

615 i‡(
no_mi¸ocode
)

616 
ªg
 |(
DPC_ERROR_MASK_BIT
 | (DPC_ERROR_MASK_BIT << 1));

617 
ªg
 &~(
DPC_ERROR_MASK_BIT
 << 
p‹t_no
);

618 
	`iowrôe32
(
ªg
, 
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

621 
	`iowrôe32
(~0, 
p‹t_ba£
 + 
INT_DISABLE
);

624 
	`iowrôe32
(~0, 
c‹e_ba£
 + 
CORE_INT_DISABLE
);

625 
	`wmb
();

628 
	`ßè_ox«s_tf_lﬂd
(
qc
->
≠
, &qc->
tf
);

631 i‡(
	`©a_is_dma
(
qc
->
tf
.
¥Ÿocﬁ
Ë|| 
	`©a_is_pio
(qc->tf.protocol)) {

633 
	`iowrôe32
(
SGDMA_CONTROL_GO
, 
pd
->
sgdma_ba£
 + 
SGDMA_CONTROL
);

634 
	`wmb
();

638 
	`iowrôe32
(
INT_WANT
, 
p‹t_ba£
 + 
INT_ENABLE
);

639 
	`iowrôe32
(
COREINT_END
, 
c‹e_ba£
 + 
CORE_INT_ENABLE
);

640 
	`wmb
();

643 
ªg
 = 
	`i‹ód32
(
p‹t_ba£
 + 
SATA_COMMAND
);

644 
ªg
 &~
SATA_OPCODE_MASK
;

645 
ªg
 |
CMD_WRITE_TO_ORB_REGS
;

646 
	`iowrôe32
(
ªg
 , 
p‹t_ba£
 + 
SATA_COMMAND
);

647 
	`wmb
();

650 
	}
}

656 
	$ßè_ox«s_checkf‹hŸ∂ug
(
©a_p‹t
 *
≠
)

658 
	`DPRINTK
("ENTER\n");

660 
	`©a_ehi_hŸ∂ugged
(&
≠
->
lök
.
eh_öfo
);

661 
	`©a_p‹t_‰ìze
(
≠
);

662 
	}
}

674 
	$__acquúe_ßè_c‹e
(

675 
©a_ho°
 *
ah
,

676 
p‹t_no
,

677 
ox«s_ßè_i§_ˇŒback_t
 
ˇŒback
,

678 *
¨g
,

679 
may_¶ìp
,

680 
timeout_jiffõs
,

681 
hw_ac˚ss
,

682 *
uid
,

683 
lockî_ty≥
)

685 
íd
 = 
jiffõs
 + 
timeout_jiffõs
;

686 
acquúed
 = 0;

687 
Êags
;

688 
timed_out
 = 0;

689 
ßè_ox«s_ho°_¥iv
 *
hd
;

691 
	`DEFINE_WAIT
(
waô
);

693 i‡(!
ah
)

694  
acquúed
;

696 
hd
 = 
ah
->
¥iv©e_d©a
;

698 
	`•ö_lock_úqßve
(&
hd
->
c‹e_lock
, 
Êags
);

700 
	`DPRINTK
("Entered uid %p,Öort %d, h/w count %d, d count %d, "

703 
uid
, 
p‹t_no
, 
hd
->
hw_lock_cou¡
, hd->
dúe˘_lock_cou¡
,

704 
ˇŒback
, 
hw_ac˚ss
, 
hd
->
c‹e_locked
, hd->
ªíå™t_p‹t_no
,

705 
hd
->
i§_ˇŒback
);

707 !
timed_out
) {

708 i‡(
hd
->
c‹e_locked
 ||

709 (!
hw_ac˚ss
 && 
hd
->
scsi_n⁄blockög_©ãm±s
)) {

714 i‡(
hw_ac˚ss
 && (
p‹t_no
 =
hd
->
ªíå™t_p‹t_no
)) {

715 
	`BUG_ON
(!
hd
->
hw_lock_cou¡
);

716 ++(
hd
->
hw_lock_cou¡
);

718 
	`DPRINTK
("Allow SCSI/SATAÑe-entrantáccessÅo "

719 "uid %∞p‹à%d\n", 
uid
, 
p‹t_no
);

720 
acquúed
 = 1;

722 } i‡(!
hw_ac˚ss
) {

723 i‡((
lockî_ty≥
 =
SATA_READER
) &&

724 (
hd
->
cuºít_lockî_ty≥
 =
SATA_READER
)) {

725 
	`WARN
(1,

730 
uid
, 
hd
->
lockî_uid
, 
p‹t_no
,

731 
hd
->
hw_lock_cou¡
,

732 
hd
->
dúe˘_lock_cou¡
,

733 
hw_ac˚ss
);

734 
check_uid
;

737 i‡((
lockî_ty≥
 !
SATA_READER
) &&

738 (
lockî_ty≥
 !
SATA_WRITER
)) {

739 
waô_f‹_lock
;

742 
check_uid
:

743 
	`WARN
(
uid
 =
hd
->
lockî_uid
, "AttemptÅoÜock "

748 "hw_ac˚s†%d\n", 
lockî_ty≥
, 
uid
,

749 
hd
->
cuºít_lockî_ty≥
,

750 
hd
->
lockî_uid
, 
p‹t_no
,

751 
hd
->
hw_lock_cou¡
,

752 
hd
->
dúe˘_lock_cou¡
, 
hw_ac˚ss
);

755 
	`WARN
(
hd
->
hw_lock_cou¡
 || hd->
dúe˘_lock_cou¡
,

758 "d cou¡ %d, hw_ac˚s†%d\n", 
uid
,

759 
hd
->
lockî_uid
, 
p‹t_no
, hd->
hw_lock_cou¡
,

760 
hd
->
dúe˘_lock_cou¡
, 
hw_ac˚ss
);

762 
	`BUG_ON
(
hd
->
cuºít_lockî_ty≥
 !
SATA_UNLOCKED
);

764 
	`WARN
(
hd
->
lockî_uid
, "AttemptÅoÜock uid %p when "

767 
uid
, 
hd
->
lockî_uid
, 
p‹t_no
, hd->
hw_lock_cou¡
,

768 
hd
->
dúe˘_lock_cou¡
, 
hw_ac˚ss
);

770 i‡(!
hw_ac˚ss
) {

775 
	`BUG_ON
(!
ˇŒback
);

777 
	`BUG_ON
(
hd
->
ªíå™t_p‹t_no
 != -1);

779 
hd
->
i§_ˇŒback
 = 
ˇŒback
;

780 
hd
->
i§_¨g
 = 
¨g
;

781 ++(
hd
->
dúe˘_lock_cou¡
);

783 
hd
->
cuºít_lockî_ty≥
 = 
lockî_ty≥
;

789 
	`BUG_ON
(
ˇŒback
);

791 
	`BUG_ON
(
¨g
);

794 
	`BUG_ON
(
hd
->
i§_ˇŒback
);

795 
	`BUG_ON
(
hd
->
i§_¨g
);

797 ++(
hd
->
hw_lock_cou¡
);

798 
hd
->
ªíå™t_p‹t_no
 = 
p‹t_no
;

800 
hd
->
cuºít_lockî_ty≥
 = 
SATA_SCSI_STACK
;

803 
hd
->
c‹e_locked
 = 1;

804 
hd
->
lockî_uid
 = 
uid
;

805 
acquúed
 = 1;

809 
waô_f‹_lock
:

810 i‡(!
may_¶ìp
) {

811 
	`DPRINTK
("Denying for uid %pÜocker_type %d, "

813 "ˇ¬Ÿ sÀï\n", 
uid
, 
lockî_ty≥
, 
hw_ac˚ss
, 
p‹t_no
,

814 
hd
->
cuºít_lockî_ty≥
);

816 i‡(
hw_ac˚ss
)

817 ++(
hd
->
scsi_n⁄blockög_©ãm±s
);

826 
	`¥ï¨e_to_waô
(
hw_ac˚ss
 ? &
hd
->
scsi_waô_queue
 :

827 &
hd
->
Á°_waô_queue
,

828 &
waô
, 
TASK_UNINTERRUPTIBLE
);

829 i‡(!
hd
->
c‹e_locked
 &&

830 !(!
hw_ac˚ss
 && 
hd
->
scsi_n⁄blockög_©ãm±s
)) {

836 
	`smp_rmb
();

839 i‡(
	`time_a·î
(
jiffõs
, 
íd
)) {

840 
	`¥ötk
(
KERN_WARNING
 "__acquire_sata_core() "

845 "i§_ˇŒback %p, i§_¨g %p\n", 
uid
,

846 
p‹t_no
, 
hd
->
lockî_uid
,

847 
hd
->
hw_lock_cou¡
,

848 
hd
->
dúe˘_lock_cou¡
, 
ˇŒback
,

849 
hw_ac˚ss
, 
hd
->
c‹e_locked
,

850 
hd
->
ªíå™t_p‹t_no
, hd->
i§_ˇŒback
,

851 
hd
->
i§_¨g
);

852 
timed_out
 = 1;

855 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
c‹e_lock
, 
Êags
);

856 i‡(!
	`scheduÀ_timeout
(4*
HZ
)) {

857 
	`¥ötk
(
KERN_INFO
 "__acquire_sata_core() uid %p, "

860 
uid
, 
hd
->
lockî_uid
);

862 
	`•ö_lock_úqßve
(&
hd
->
c‹e_lock
, 
Êags
);

864 
	`föish_waô
(
hw_ac˚ss
 ? &
hd
->
scsi_waô_queue
 :

865 &
hd
->
Á°_waô_queue
, &
waô
);

868 i‡(
hw_ac˚ss
 && 
acquúed
) {

869 i‡(
hd
->
scsi_n⁄blockög_©ãm±s
)

870 
hd
->
scsi_n⁄blockög_©ãm±s
 = 0;

879 i‡(!
	`li°_em±y
(&
hd
->
scsi_waô_queue
.
hód
))

880 
	`wake_up
(&
hd
->
scsi_waô_queue
);

883 
	`DPRINTK
("Leaving uid %p withácquired = %d,Öort %d, callback %p\n",

884 
uid
, 
acquúed
, 
p‹t_no
, 
ˇŒback
);

886 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
c‹e_lock
, 
Êags
);

888  
acquúed
;

889 
	}
}

891 
	$ßè_c‹e_has_Á°_waôîs
(
©a_ho°
 *
ah
)

893 
has_waôîs
;

894 
Êags
;

895 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

897 
	`•ö_lock_úqßve
(&
hd
->
c‹e_lock
, 
Êags
);

898 
has_waôîs
 = !
	`li°_em±y
(&
hd
->
Á°_waô_queue
.
hód
);

899 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
c‹e_lock
, 
Êags
);

901  
has_waôîs
;

902 
	}
}

903 
EXPORT_SYMBOL
(
ßè_c‹e_has_Á°_waôîs
);

905 
	$ßè_c‹e_has_scsi_waôîs
(
©a_ho°
 *
ah
)

907 
has_waôîs
;

908 
Êags
;

909 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

911 
	`•ö_lock_úqßve
(&
hd
->
c‹e_lock
, 
Êags
);

912 
has_waôîs
 = 
hd
->
scsi_n⁄blockög_©ãm±s
 ||

913 !
	`li°_em±y
(&
hd
->
scsi_waô_queue
.
hód
);

914 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
c‹e_lock
, 
Êags
);

916  
has_waôîs
;

917 
	}
}

918 
EXPORT_SYMBOL
(
ßè_c‹e_has_scsi_waôîs
);

926 
	$ßè_ox«s_acquúe_hw
(

927 
©a_p‹t
 *
≠
,

928 
may_¶ìp
,

929 
timeout_jiffõs
)

931  
	`__acquúe_ßè_c‹e
(
≠
->
ho°
,áp->
p‹t_no
, 
NULL
, 0, 
may_¶ìp
,

932 
timeout_jiffõs
, 1, (*)
HW_LOCKER_UID
,

933 
SATA_SCSI_STACK
);

934 
	}
}

939 
	$ßè_ox«s_ªÀa£_hw
(
©a_p‹t
 *
≠
)

941 
Êags
;

942 
ªÀa£d
 = 0;

943 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

945 
	`•ö_lock_úqßve
(&
hd
->
c‹e_lock
, 
Êags
);

947 
	`DPRINTK
("EnteredÖort_no = %d, h/w count %d, d count %d, "

949 
≠
->
p‹t_no
, 
hd
->
hw_lock_cou¡
, hd->
dúe˘_lock_cou¡
,

950 
hd
->
c‹e_locked
, hd->
ªíå™t_p‹t_no
, hd->
i§_ˇŒback
);

952 i‡(!
hd
->
c‹e_locked
) {

954 
	`¥ötk
(
KERN_WARNING
 "Nobody holds SATAÜock,Öort_no %d\n",

955 
≠
->
p‹t_no
);

956 
ªÀa£d
 = 1;

957 } i‡(!
hd
->
hw_lock_cou¡
) {

959 
	`¥ötk
(
KERN_WARNING
 "SCSI/SATA doesÇot hold SATAÜock, "

960 "p‹t_nÿ%d\n", 
≠
->
p‹t_no
);

963 
	`BUG_ON
(
hd
->
ªíå™t_p‹t_no
 == -1);

964 
	`BUG_ON
(
≠
->
p‹t_no
 !
hd
->
ªíå™t_p‹t_no
);

965 
	`BUG_ON
(
hd
->
dúe˘_lock_cou¡
);

966 
	`BUG_ON
(
hd
->
cuºít_lockî_ty≥
 !
SATA_SCSI_STACK
);

968 
	`WARN
(!
hd
->
lockî_uid
 || (hd->lockî_uid !
HW_LOCKER_UID
),

971 "i§_ˇŒback %p\n", 
hd
->
lockî_uid
, hd->
hw_lock_cou¡
,

972 
hd
->
dúe˘_lock_cou¡
, hd->
ªíå™t_p‹t_no
,

973 
hd
->
c‹e_locked
, hd->
i§_ˇŒback
);

975 i‡(--(
hd
->
hw_lock_cou¡
)) {

976 
	`DPRINTK
("Stû»√°edÖ‹t_nÿ%d\n", 
≠
->
p‹t_no
);

978 
	`DPRINTK
("Rñó£Ö‹t_nÿ%d\n", 
≠
->
p‹t_no
);

979 
hd
->
ªíå™t_p‹t_no
 = -1;

980 
hd
->
i§_ˇŒback
 = 
NULL
;

981 
hd
->
cuºít_lockî_ty≥
 = 
SATA_UNLOCKED
;

982 
hd
->
lockî_uid
 = 0;

983 
hd
->
c‹e_locked
 = 0;

984 
ªÀa£d
 = 1;

985 
	`wake_up
(!
	`li°_em±y
(&
hd
->
scsi_waô_queue
.
hód
) ?

986 &
hd
->
scsi_waô_queue
 :

987 &
hd
->
Á°_waô_queue
);

991 
	`DPRINTK
("Lóvög,Ö‹t_nÿ%d, cou¡ %d\n", 
≠
->
p‹t_no
,

992 
hd
->
hw_lock_cou¡
);

994 
	`•ö_u∆ock_úqª°‹e
(&
hd
->
c‹e_lock
, 
Êags
);

1000 
	}
}

1002 
ölöe
 
	$ßè_ox«s_is_ho°_‰ozí
(
©a_ho°
 *
ah
)

1004 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

1006 
	`smp_rmb
();

1007  
hd
->
p‹t_ö_eh
 || hd->
p‹t_‰ozí
;

1008 
	}
}

1011 
ölöe
 
u32
 
	$ßè_ox«s_ho°p‹tbusy
(
©a_p‹t
 *
≠
)

1013 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1015  (
	`i‹ód32
(
hd
->
p‹t_ba£
 + 
SATA_COMMAND
Ë& 
CMD_CORE_BUSY
) ||

1016 (
hd
->
n_p‹ts
 > 1 &&

1017 (
	`i‹ód32
(
hd
->
p‹t_ba£
 + 
PORT_SIZE
 + 
SATA_COMMAND
) &

1018 
CMD_CORE_BUSY
));

1019 
	}
}

1021 
ölöe
 
u32
 
	$ßè_ox«s_ho°dmabusy
(
©a_p‹t
 *
≠
)

1023 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1025  
	`i‹ód32
(
pd
->
sgdma_ba£
 + 
SGDMA_STATUS
Ë& 
SGDMA_BUSY
;

1026 
	}
}

1032 
	$ßè_ox«s_ª£t_c‹e
(
©a_ho°
 *
ah
)

1034 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
ah
->
¥iv©e_d©a
;

1035 
n
;

1037 
	`DPRINTK
("ENTER\n");

1038 
	`˛k_¥ï¨e_íabÀ
(
ho°_¥iv
->
˛k
);

1040 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_ßè
);

1041 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_lök
);

1042 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_phy
);

1044 
	`udñay
(50);

1047 
	`ª£t_c⁄åﬁ_dós£π
(
ho°_¥iv
->
r°_phy
);

1048 
	`udñay
(50);

1050 
	`ª£t_c⁄åﬁ_dós£π
(
ho°_¥iv
->
r°_ßè
);

1051 
	`ª£t_c⁄åﬁ_dós£π
(
ho°_¥iv
->
r°_lök
);

1052 
	`udñay
(50);

1054 
	`w‹k¨ound5458
(
ah
);

1056 
	`ßè_ox«s_lök_wrôe
(
ah
->
p‹ts
[0], 0x60, 0x2988);

1058 
n
 = 0;Ç < 
ho°_¥iv
->
n_p‹ts
;Ç++) {

1060 
	`ßè_ox«s_lök_wrôe
(
ah
->
p‹ts
[
n
], 0x70, 0x55629);

1062 
	`udñay
(50);

1063 
	}
}

1073 
	$ßè_ox«s_dev_c⁄fig
(
©a_devi˚
 *
pdev
)

1075 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
pdev
->
lök
->
≠
->
¥iv©e_d©a
;

1076 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

1077 
u32
 
ªg
;

1079 
	`DPRINTK
("ENTER\n");

1081 
ªg
 = 
	`i‹ód32
(
p‹t_ba£
 + 
DRIVE_CONTROL
);

1082 
ªg
 &= ~3;

1083 
ªg
 |(
pdev
->
Êags
 & 
ATA_DFLAG_LBA48
Ë? 
DR_CON_48
 : 
DR_CON_28
;

1084 
	`iowrôe32
(
ªg
, 
p‹t_ba£
 + 
DRIVE_CONTROL
);

1087 i‡(
pdev
->
Êags
 & 
ATA_DFLAG_LBA48
) {

1088 
ªg
 = 
	`i‹ód32
(
p‹t_ba£
 + 
PORT_CONTROL
);

1089 
ªg
 |= 2;

1090 
	`iowrôe32
(
ªg
, 
p‹t_ba£
 + 
PORT_CONTROL
);

1092 
	}
}

1098 
	$ßè_ox«s_tf_lﬂd
(
©a_p‹t
 *
≠
,

1099 c⁄° 
©a_èskfûe
 *
tf
)

1101 
u32
 
cou¡
 = 0;

1102 
u32
 
Orb1
 = 0;

1103 
u32
 
Orb2
 = 0;

1104 
u32
 
Orb3
 = 0;

1105 
u32
 
Orb4
 = 0;

1106 
u32
 
Comm™d_Reg
;

1108 
ßè_ox«s_p‹t_¥iv
 *
p‹t_¥iv
 = 
≠
->
¥iv©e_d©a
;

1109 
__iomem
 *
p‹t_ba£
 = 
p‹t_¥iv
->port_base;

1110 
is_addr
 = 
tf
->
Êags
 & 
ATA_TFLAG_ISADDR
;

1114 
Comm™d_Reg
 = 
	`i‹ód32
(
p‹t_ba£
 + 
SATA_COMMAND
);

1115 i‡(!(
Comm™d_Reg
 & 
CMD_CORE_BUSY
))

1117 
cou¡
++;

1118 
	`udñay
(50);

1119 } 
cou¡
 < 200);

1123 i‡(
tf
->
˘l
 & 
ATA_NIEN
) {

1125 
u32
 
mask
 = (
COREINT_END
 << 
≠
->
p‹t_no
);

1127 
	`iowrôe32
(
mask
, 
p‹t_¥iv
->
c‹e_ba£
 + 
CORE_INT_DISABLE
);

1128 
	`ßè_ox«s_úq_˛ór
(
≠
);

1130 
	`ßè_ox«s_úq_⁄
(
≠
);

1133 
Orb2
 |(
tf
->
comm™d
) << 24;

1136 i‡(
is_addr
) {

1138 
Orb1
 |(
tf
->
devi˚
 & 
ATA_LBA
) << 24;

1140 i‡(
tf
->
Êags
 & 
ATA_TFLAG_LBA48
) {

1141 
Orb1
 |
ATA_LBA
 << 24;

1142 
Orb2
 |(
tf
->
hob_n£˘
) << 8;

1143 
Orb3
 |(
tf
->
hob_lbÆ
) << 24;

1144 
Orb4
 |(
tf
->
hob_lbam
) << 0;

1145 
Orb4
 |(
tf
->
hob_lbah
) << 8;

1146 
Orb4
 |(
tf
->
hob_„©uª
) << 16;

1148 
Orb3
 |(
tf
->
devi˚
 & 0xf) << 24;

1152 
Orb2
 |(
tf
->
n£˘
) << 0;

1153 
Orb2
 |(
tf
->
„©uª
) << 16;

1154 
Orb3
 |(
tf
->
lbÆ
) << 0;

1155 
Orb3
 |(
tf
->
lbam
) << 8;

1156 
Orb3
 |(
tf
->
lbah
) << 16;

1157 
Orb4
 |(
tf
->
˘l
) << 24;

1160 i‡(
tf
->
Êags
 & 
ATA_TFLAG_DEVICE
)

1161 
Orb1
 |(
tf
->
devi˚
) << 24;

1163 
≠
->
œ°_˘l
 = 
tf
->
˘l
;

1166 
	`iowrôe32
(
Orb1
, 
p‹t_ba£
 + 
ORB1
);

1167 
	`iowrôe32
(
Orb2
, 
p‹t_ba£
 + 
ORB2
);

1168 
	`iowrôe32
(
Orb3
, 
p‹t_ba£
 + 
ORB3
);

1169 
	`iowrôe32
(
Orb4
, 
p‹t_ba£
 + 
ORB4
);

1170 
	}
}

1173 
	$ßè_ox«s_£t_mode
(
©a_ho°
 *
ah
, 
u32
 
mode
, u32 
f‹˚
)

1175 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
ah
->
¥iv©e_d©a
;

1176 
__iomem
 *
c‹e_ba£
 = 
ho°_¥iv
->core_base;

1178 *
§c
;

1179 
__iomem
 *
d°
;

1180 
¥ogmi¸ocode
 = 0;

1181 
ch™gï¨amëîs
 = 0;

1183 
u32
 
¥evious_mode
;

1188 c⁄° 
jbod
[] = {

1227 c⁄° 
øid
[] = {

1296 
	`DPRINTK
("ENTER: mode:%d, f‹˚:%d\n", 
mode
, 
f‹˚
);

1298 i‡(
f‹˚
)

1299 
¥evious_mode
 = 
UNKNOWN_MODE
;

1301 
¥evious_mode
 = 
ho°_¥iv
->
cuºít_ucode
;

1303 i‡(
mode
 =
¥evious_mode
)

1306 
ho°_¥iv
->
cuºít_ucode
 = 
mode
;

1309 
¥evious_mode
) {

1310 
OXNASSATA_RAID1
:

1311 
mode
) {

1312 
OXNASSATA_RAID0
:

1313 
ch™gï¨amëîs
 = 1;

1315 
OXNASSATA_NOTRAID
:

1316 
ch™gï¨amëîs
 = 1;

1317 
¥ogmi¸ocode
 = 1;

1321 
OXNASSATA_RAID0
:

1322 
mode
) {

1323 
OXNASSATA_RAID1
:

1324 
ch™gï¨amëîs
 = 1;

1326 
OXNASSATA_NOTRAID
:

1327 
ch™gï¨amëîs
 = 1;

1328 
¥ogmi¸ocode
 = 1;

1332 
OXNASSATA_NOTRAID
:

1333 
mode
) {

1334 
OXNASSATA_RAID0
:

1335 
OXNASSATA_RAID1
:

1336 
ch™gï¨amëîs
 = 1;

1337 
¥ogmi¸ocode
 = 1;

1341 
UNKNOWN_MODE
:

1342 
ch™gï¨amëîs
 = 1;

1343 
¥ogmi¸ocode
 = 1;

1348 i‡(
¥ogmi¸ocode
) {

1350 
	`iowrôe32
(1, 
c‹e_ba£
 + 
PROC_RESET
);

1351 
	`wmb
();

1354 
mode
) {

1355 
OXNASSATA_RAID1
:

1356 
OXNASSATA_RAID0
:

1357 
	`VPRINTK
("Loading RAID micro-code\n");

1358 
§c
 = (*)&
øid
[1];

1360 
OXNASSATA_NOTRAID
:

1361 
	`VPRINTK
("Loading JBOD micro-code\n");

1362 
§c
 = (*)&
jbod
[1];

1365 
	`BUG
();

1370 
d°
 = 
c‹e_ba£
 + 
UCODE_STORE
;

1371 *
§c
 != ~0) {

1372 
	`iowrôe32
(*
§c
, 
d°
);

1373 
§c
++;

1374 
d°
 +(*
§c
);

1376 
	`wmb
();

1379 i‡(
ch™gï¨amëîs
) {

1380 
u32
 
ªg
;

1382 
mode
) {

1383 
OXNASSATA_RAID1
:

1385 
ªg
 = 
	`i‹ód32
(
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1386 
ªg
 |
DPC_JBOD_UCODE
;

1387 
ªg
 &~
DPC_FIS_SWCH
;

1388 
	`iowrôe32
(
ªg
, 
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1389 
	`wmb
();

1392 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_WP_BOT_LOW
);

1393 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_WP_BOT_HIGH
);

1394 
	`iowrôe32
(0xffffffff, 
c‹e_ba£
 + 
RAID_WP_TOP_LOW
);

1395 
	`iowrôe32
(0x7fffffff, 
c‹e_ba£
 + 
RAID_WP_TOP_HIGH
);

1396 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_SIZE_LOW
);

1397 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_SIZE_HIGH
);

1398 
	`wmb
();

1400 
OXNASSATA_RAID0
:

1402 
ªg
 = 
	`i‹ód32
(
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1403 
ªg
 |
DPC_JBOD_UCODE
;

1404 
ªg
 &~
DPC_FIS_SWCH
;

1405 
	`iowrôe32
(
ªg
, 
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1406 
	`wmb
();

1409 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_WP_BOT_LOW
);

1410 
	`iowrôe32
(0, 
c‹e_ba£
 + 
RAID_WP_BOT_HIGH
);

1411 
	`iowrôe32
(0xffffffff, 
c‹e_ba£
 + 
RAID_WP_TOP_LOW
);

1412 
	`iowrôe32
(0x7fffffff, 
c‹e_ba£
 + 
RAID_WP_TOP_HIGH
);

1413 
	`iowrôe32
(0xffffffff, 
c‹e_ba£
 + 
RAID_SIZE_LOW
);

1414 
	`iowrôe32
(0x7fffffff, 
c‹e_ba£
 + 
RAID_SIZE_HIGH
);

1415 
	`wmb
();

1417 
OXNASSATA_NOTRAID
:

1419 
ªg
 = 
	`i‹ód32
(
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1420 
ªg
 &~
DPC_JBOD_UCODE
;

1421 
ªg
 &~
DPC_FIS_SWCH
;

1422 
	`iowrôe32
(
ªg
, 
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1423 
	`wmb
();

1426 
	`iowrôe32
(1, 
c‹e_ba£
 + 
PROC_START
);

1429 
ªg
 = 
	`i‹ód32
(
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1430 
ªg
 |
DPC_JBOD_UCODE
;

1431 
ªg
 &~
DPC_FIS_SWCH
;

1432 
	`iowrôe32
(
ªg
, 
c‹e_ba£
 + 
DATA_PLANE_CTRL
);

1433 
	`wmb
();

1437 
	}
}

1442 
ölöe
 
	$ßè_ox«s_£nd_sync_esˇ≥
(
©a_p‹t
 *
≠
)

1444 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1445 
u32
 
ªg
;

1449 i‡((
	`ßè_ox«s_lök_ªad
(
≠
, 0x20) & 3) == 3) {

1450 
ªg
 = 
	`i‹ód32
(
pd
->
p‹t_ba£
 + 
SATA_COMMAND
);

1451 
ªg
 &~
SATA_OPCODE_MASK
;

1452 
ªg
 |
CMD_SYNC_ESCAPE
;

1453 
	`iowrôe32
(
ªg
, 
pd
->
p‹t_ba£
 + 
SATA_COMMAND
);

1455 
	}
}

1458 
ölöe
 
	$ßè_ox«s_˛ór_CS_îr‹
(
©a_p‹t
 *
≠
)

1460 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1461 
u32
 *
ba£
 = 
pd
->
p‹t_ba£
;

1462 
u32
 
ªg
;

1464 
ªg
 = 
	`i‹ód32
(
ba£
 + 
SATA_CONTROL
);

1465 
ªg
 &
SATA_CTL_ERR_MASK
;

1466 
	`iowrôe32
(
ªg
, 
ba£
 + 
SATA_CONTROL
);

1467 
	}
}

1469 
ölöe
 
	$ßè_ox«s_ª£t_sgdma
(
©a_p‹t
 *
≠
)

1471 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1473 
	`iowrôe32
(
SGDMA_RESETS_CTRL
, 
pd
->
sgdma_ba£
 + 
SGDMA_RESETS
);

1474 
	}
}

1476 
ölöe
 
	$ßè_ox«s_ª£t_dma
(
©a_p‹t
 *
≠
, 
as£π
)

1478 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1479 
u32
 
ªg
;

1481 
ªg
 = 
	`i‹ód32
(
pd
->
dma˘l_ba£
 + 
DMA_CONTROL
);

1482 i‡(
as£π
)

1483 
ªg
 |
DMA_CONTROL_RESET
;

1485 
ªg
 &~
DMA_CONTROL_RESET
;

1487 
	`iowrôe32
(
ªg
, 
pd
->
dma˘l_ba£
 + 
DMA_CONTROL
);

1488 
	}
};

1494 
ölöe
 
	$ßè_ox«s_˛ór_ªg_ac˚ss_îr‹
(
©a_p‹t
 *
≠
)

1496 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1497 
u32
 *
ba£
 = 
pd
->
p‹t_ba£
;

1498 
u32
 
ªg
;

1500 
ªg
 = 
	`i‹ód32
(
ba£
 + 
INT_STATUS
);

1502 
	`DPRINTK
("ENTER\n");

1503 i‡(
ªg
 & 
INT_REG_ACCESS_ERR
) {

1504 
	`DPRINTK
("clearingÑegisteráccessÉrror onÖort %d\n",

1505 
≠
->
p‹t_no
);

1506 
	`iowrôe32
(
INT_REG_ACCESS_ERR
, 
ba£
 + 
INT_STATUS
);

1508 
ªg
 = 
	`i‹ód32
(
ba£
 + 
INT_STATUS
);

1509 i‡(
ªg
 & 
INT_REG_ACCESS_ERR
)

1510 
	`DPRINTK
("registeráccessÉrror didn't clear\n");

1511 
	}
}

1513 
ölöe
 
	$ßè_ox«s_˛ór_s˘l_îr‹
(
©a_p‹t
 *
≠
)

1515 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1516 
u32
 *
ba£
 = 
pd
->
p‹t_ba£
;

1517 
u32
 
ªg
;

1519 
ªg
 = 
	`i‹ód32
(
ba£
 + 
SATA_CONTROL
);

1520 
ªg
 |
SCTL_CLR_ERR
;

1521 
	`iowrôe32
(
ªg
, 
ba£
 + 
SATA_CONTROL
);

1522 
	}
}

1524 
ölöe
 
	$ßè_ox«s_˛ór_øid_îr‹
(
©a_ho°
 *
ah
)

1527 
	}
};

1533 
	$ßè_ox«s_˛ónup
(
©a_ho°
 *
ah
)

1535 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

1536 
a˘i⁄s_ªquúed
 = 0;

1537 
n
;

1539 
	`¥ötk
(
KERN_INFO
 "sata_oxnas:Ñesetting SATA core\n");

1541 
	`mdñay
(5);

1542 
	`ßè_ox«s_ª£t_c‹e
(
ah
);

1543 
	`mdñay
(5);

1544 
a˘i⁄s_ªquúed
 |
OXNAS_SATA_REINIT
;

1548 
n
 = 0;Ç < 
hd
->
n_p‹ts
;Ç++)

1549 
	`ßè_ox«s_po°_ª£t_öô
(
ah
->
p‹ts
[
n
]);

1552  
a˘i⁄s_ªquúed
;

1553 
	}
}

1562 
	$ßè_ox«s_qc_√w
(
©a_p‹t
 *
≠
)

1564 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1566 
	`DPRINTK
("p‹à%d\n", 
≠
->
p‹t_no
);

1567 
	`smp_rmb
();

1568 i‡(
hd
->
p‹t_‰ozí
 || hd->
p‹t_ö_eh
)

1571  !
	`ßè_ox«s_acquúe_hw
(
≠
, 0, 0);

1572 
	}
}

1577 
	$ßè_ox«s_qc_‰ì
(
©a_queued_cmd
 *
qc
)

1579 
	`DPRINTK
("\n");

1580 
	`ßè_ox«s_ªÀa£_hw
(
qc
->
≠
);

1581 
	}
}

1583 
	$ßè_ox«s_‰ìze
(
©a_p‹t
 *
≠
)

1585 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1587 
	`DPRINTK
("\n");

1588 
hd
->
p‹t_‰ozí
 |
	`BIT
(
≠
->
p‹t_no
);

1589 
	`smp_wmb
();

1590 
	}
}

1592 
	$ßè_ox«s_thaw
(
©a_p‹t
 *
≠
)

1594 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1596 
	`DPRINTK
("\n");

1597 
hd
->
p‹t_‰ozí
 &~
	`BIT
(
≠
->
p‹t_no
);

1598 
	`smp_wmb
();

1599 
	}
}

1601 
	$ßè_ox«s_‰ìze_ho°
(
©a_p‹t
 *
≠
)

1603 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1605 
	`DPRINTK
("ENTER\n");

1606 
hd
->
p‹t_ö_eh
 |
	`BIT
(
≠
->
p‹t_no
);

1607 
	`smp_wmb
();

1608 
	}
}

1610 
	$ßè_ox«s_thaw_ho°
(
©a_p‹t
 *
≠
)

1612 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1614 
	`DPRINTK
("ENTER\n");

1615 
hd
->
p‹t_ö_eh
 &~
	`BIT
(
≠
->
p‹t_no
);

1616 
	`smp_wmb
();

1617 
	}
}

1619 
	$ßè_ox«s_po°_öã∫Æ_cmd
(
©a_queued_cmd
 *
qc
)

1621 
	`DPRINTK
("ENTER\n");

1623 i‡(
qc
->
Êags
 & 
ATA_QCFLAG_FAILED
)

1624 
	`ßè_ox«s_˛ónup
(
qc
->
≠
->
ho°
);

1625 
	}
}

1633 
	$ßè_ox«s_úq_⁄
(
©a_p‹t
 *
≠
)

1635 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1636 
u32
 
mask
 = (
COREINT_END
 << 
≠
->
p‹t_no
);

1639 
	`iowrôe32
(~0, 
pd
->
p‹t_ba£
 + 
INT_CLEAR
);

1640 
	`iowrôe32
(
mask
, 
pd
->
c‹e_ba£
 + 
CORE_INT_STATUS
);

1641 
	`wmb
();

1644 
	`iowrôe32
(
INT_WANT
, 
pd
->
p‹t_ba£
 + 
INT_ENABLE
);

1645 
	`iowrôe32
(
mask
, 
pd
->
c‹e_ba£
 + 
CORE_INT_ENABLE
);

1646 
	}
}

1650 
	$ßè_ox«s_check_lök
(
©a_p‹t
 *
≠
)

1652 
ªg
;

1654 
	`ßè_ox«s_s¸_ªad_p‹t
(
≠
, 
SCR_STATUS
, &
ªg
);

1656  
ªg
 & 0x1;

1657 
	}
}

1671 
	$ßè_ox«s_po°ª£t
(
©a_lök
 *
lök
, *
˛as£s
)

1673 
©a_p‹t
 *
≠
 = 
lök
->ap;

1674 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1676 
dev
;

1678 
	`DPRINTK
("ENTER\n");

1679 
	`©a_°d_po°ª£t
(
lök
, 
˛as£s
);

1682 
	`ßè_ox«s_lök_wrôe
(
≠
->
ho°
->
p‹ts
[0], 0x0c, 0x30003);

1683 i‡(
hd
->
n_p‹ts
 > 1)

1684 
	`ßè_ox«s_lök_wrôe
(
≠
->
ho°
->
p‹ts
[1], 0x0c, 0x30003);

1687 i‡(
˛as£s
[0] =
ATA_DEV_NONE
 && classes[1] == ATA_DEV_NONE) {

1688 
	`DPRINTK
("EXIT,Ço device\n");

1693 
dev
 = 0; dev < 
ATA_MAX_DEVICES
; ++dev) {

1694 i‡(
≠
->
lök
.
devi˚
[
dev
].
˛ass
 =
ATA_DEV_ATA
)

1695 
	`ßè_ox«s_dev_c⁄fig
(&(
≠
->
lök
.
devi˚
[
dev
]));

1698 
	`DPRINTK
("EXIT\n");

1699 
	}
}

1707 
	$ßè_ox«s_tf_ªad
(
©a_p‹t
 *
≠
, 
©a_èskfûe
 *
tf
)

1709 
ßè_ox«s_p‹t_¥iv
 *
p‹t_¥iv
 = 
≠
->
¥iv©e_d©a
;

1710 
__iomem
 *
p‹t_ba£
 = 
p‹t_¥iv
->port_base;

1712 
u32
 
Orb1
 = 
	`i‹ód32
(
p‹t_ba£
 + 
ORB1
);

1713 
u32
 
Orb2
 = 
	`i‹ód32
(
p‹t_ba£
 + 
ORB2
);

1714 
u32
 
Orb3
 = 
	`i‹ód32
(
p‹t_ba£
 + 
ORB3
);

1715 
u32
 
Orb4
 = 
	`i‹ód32
(
p‹t_ba£
 + 
ORB4
);

1718 
tf
->
devi˚
 = (
Orb1
 >> 24);

1719 
tf
->
n£˘
 = (
Orb2
 >> 0);

1720 
tf
->
„©uª
 = (
Orb2
 >> 16);

1721 
tf
->
comm™d
 = 
	`ßè_ox«s_check_°©us
(
≠
);

1724 i‡(
tf
->
Êags
 & 
ATA_TFLAG_LBA48
) {

1725 
tf
->
hob_n£˘
 = (
Orb2
 >> 8);

1726 
tf
->
lbÆ
 = (
Orb3
 >> 0);

1727 
tf
->
lbam
 = (
Orb3
 >> 8);

1728 
tf
->
lbah
 = (
Orb3
 >> 16);

1729 
tf
->
hob_lbÆ
 = (
Orb3
 >> 24);

1730 
tf
->
hob_lbam
 = (
Orb4
 >> 0);

1731 
tf
->
hob_lbah
 = (
Orb4
 >> 8);

1735 
tf
->
lbÆ
 = (
Orb3
 >> 0);

1736 
tf
->
lbam
 = (
Orb3
 >> 8);

1737 
tf
->
lbah
 = (
Orb3
 >> 16);

1739 
	}
}

1744 
boﬁ
 
	$ßè_ox«s_qc_fûl_πf
(
©a_queued_cmd
 *
qc
)

1748 
	`ßè_ox«s_tf_ªad
(
qc
->
≠
, &qc->
ªsu…_tf
);

1749  
åue
;

1750 
	}
}

1757 
u8
 
	$ßè_ox«s_check_°©us
(
©a_p‹t
 *
≠
)

1759 
u32
 
Reg
;

1760 
u8
 
°©us
;

1761 
ßè_ox«s_p‹t_¥iv
 *
p‹t_¥iv
 = 
≠
->
¥iv©e_d©a
;

1762 
__iomem
 *
p‹t_ba£
 = 
p‹t_¥iv
->port_base;

1765 
°©us
 = 
	`i‹ód32
(
p‹t_ba£
 + 
ORB2
) >> 24;

1769 
	`ßè_ox«s_s¸_ªad_p‹t
(
≠
, 
SCR_STATUS
, &
Reg
);

1771 i‡(!(
Reg
 & 0x1)) {

1772 
°©us
 |
ATA_DF
;

1773 
°©us
 |
ATA_ERR
;

1776  
°©us
;

1777 
	}
}

1779 
ölöe
 
	$ßè_ox«s_ª£t_ucode
(
©a_ho°
 *
ah
, 
f‹˚
,

1780 
no_mi¸ocode
)

1782 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

1784 
	`DPRINTK
("ENTER\n");

1785 i‡(
no_mi¸ocode
) {

1786 
u32
 
ªg
;

1788 
	`ßè_ox«s_£t_mode
(
ah
, 
UNKNOWN_MODE
, 
f‹˚
);

1789 
ªg
 = 
	`i‹ód32
(
hd
->
c‹e_ba£
 + 
DEVICE_CONTROL
);

1790 
ªg
 |
DEVICE_CONTROL_ATA_ERR_OVERRIDE
;

1791 
	`iowrôe32
(
ªg
, 
hd
->
c‹e_ba£
 + 
DEVICE_CONTROL
);

1794 
	`ßè_ox«s_£t_mode
(
ah
, 
OXNASSATA_NOTRAID
, 
f‹˚
);

1797 
	`iowrôe32
(0x0, 
hd
->
c‹e_ba£
 + 
PORT_ERROR_MASK
);

1799 
	}
}

1805 
	$ßè_ox«s_qc_¥ï
(
©a_queued_cmd
 *
qc
)

1807 
ßè_ox«s_p‹t_¥iv
 *
pd
;

1808 
p‹t_no
 = 
qc
->
≠
->port_no;

1811 i‡(!
	`ßè_ox«s_check_lök
(
qc
->
≠
)) {

1812 
	`©a_p‹t_îr
(
qc
->
≠
,

1814 
p‹t_no
);

1815 
qc
->
îr_mask
 |
AC_ERR_ATA_BUS
;

1816 
	`©a_qc_com∂ëe
(
qc
);

1819 
	`ßè_ox«s_ª£t_ucode
(
qc
->
≠
->
ho°
, 0, 0);

1822 i‡(
	`©a_is_dma
(
qc
->
tf
.
¥Ÿocﬁ
Ë|| 
	`©a_is_pio
(qc->tf.protocol)) {

1825 
	`©a_bmdma_qc_¥ï
(
qc
);

1828 
pd
 = 
qc
->
≠
->
¥iv©e_d©a
;

1830 
	`iowrôe32
(
pd
->
sgdma_ªque°_∑
,

1831 
pd
->
sgdma_ba£
 + 
SGDMA_REQUESTPTR
);

1834 i‡(
p‹t_no
 == 0) {

1835 
pd
->
sgdma_ªque°
->
c⁄åﬁ
 =

1836 (
qc
->
dma_dú
 =
DMA_FROM_DEVICE
) ?

1837 
SGDMA_REQCTL0IN
 : 
SGDMA_REQCTL0OUT
;

1839 
pd
->
sgdma_ªque°
->
c⁄åﬁ
 =

1840 (
qc
->
dma_dú
 =
DMA_FROM_DEVICE
) ?

1841 
SGDMA_REQCTL1IN
 : 
SGDMA_REQCTL1OUT
;

1843 
pd
->
sgdma_ªque°
->
quÆifõr
 = 
SGDMA_REQQUAL
;

1844 
pd
->
sgdma_ªque°
->
§c_∑
 = 
qc
->
≠
->
bmdma_¥d_dma
;

1845 
pd
->
sgdma_ªque°
->
d°_∑
 = 
qc
->
≠
->
bmdma_¥d_dma
;

1846 
	`smp_wmb
();

1849 
	`iowrôe32
(
SGDMA_CONTROL_NOGO
, 
pd
->
sgdma_ba£
 + 
SGDMA_CONTROL
);

1851 
	}
}

1853 
	$ßè_ox«s_p‹t_°¨t
(
©a_p‹t
 *
≠
)

1855 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1856 
devi˚
 *
dev
 = 
≠
->
ho°
->dev;

1857 
ßè_ox«s_p‹t_¥iv
 *
µ
;

1858 *
mem
;

1859 
dma_addr_t
 
mem_dma
;

1861 
	`DPRINTK
("ENTER\n");

1863 
µ
 = 
	`kzÆloc
((*µ), 
GFP_KERNEL
);

1864 i‡(!
µ
)

1865  -
ENOMEM
;

1867 
µ
->
p‹t_ba£
 = 
ho°_¥iv
->port_base +

1868 (
≠
->
p‹t_no
 ? 
PORT_SIZE
 : 0);

1869 
µ
->
dma˘l_ba£
 = 
ho°_¥iv
->dmactl_base +

1870 (
≠
->
p‹t_no
 ? 
DMA_CORESIZE
 : 0);

1871 
µ
->
sgdma_ba£
 = 
ho°_¥iv
->sgdma_base +

1872 (
≠
->
p‹t_no
 ? 
SGDMA_CORESIZE
 : 0);

1873 
µ
->
c‹e_ba£
 = 
ho°_¥iv
->core_base;

1876 i‡(
ho°_¥iv
->
dma_size
 >
SATA_OXNAS_DMA_SIZE
 * ho°_¥iv->
n_p‹ts
) {

1877 
	`DPRINTK
("usingÖreallocated DMA\n");

1878 
mem_dma
 = 
ho°_¥iv
->
dma_ba£
 +

1879 (
≠
->
p‹t_no
 ? 
SATA_OXNAS_DMA_SIZE
 : 0);

1880 
mem
 = 
	`i‹em≠
(
mem_dma
, 
SATA_OXNAS_DMA_SIZE
);

1882 
mem
 = 
	`dma_Æloc_cohîít
(
dev
, 
SATA_OXNAS_DMA_SIZE
, &
mem_dma
,

1883 
GFP_KERNEL
);

1885 i‡(!
mem
)

1886 
îr_ªt
;

1888 
µ
->
sgdma_ªque°_∑
 = 
mem_dma
;

1889 
µ
->
sgdma_ªque°
 = 
mem
;

1891 
≠
->
bmdma_¥d_dma
 = 
mem_dma
 + (
sgdma_ªque°
);

1892 
≠
->
bmdma_¥d
 = 
mem
 + (
sgdma_ªque°
);

1894 
≠
->
¥iv©e_d©a
 = 
µ
;

1896 
	`ßè_ox«s_po°_ª£t_öô
(
≠
);

1900 
îr_ªt
:

1901 
	`k‰ì
(
µ
);

1902  -
ENOMEM
;

1904 
	}
}

1906 
	$ßè_ox«s_p‹t_°›
(
©a_p‹t
 *
≠
)

1908 
devi˚
 *
dev
 = 
≠
->
ho°
->dev;

1909 
ßè_ox«s_p‹t_¥iv
 *
µ
 = 
≠
->
¥iv©e_d©a
;

1910 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
≠
->
ho°
->
¥iv©e_d©a
;

1912 
	`DPRINTK
("ENTER\n");

1913 
≠
->
¥iv©e_d©a
 = 
NULL
;

1914 i‡(
ho°_¥iv
->
dma_size
) {

1915 
	`iounm≠
(
µ
->
sgdma_ªque°
);

1917 
	`dma_‰ì_cohîít
(
dev
, 
SATA_OXNAS_DMA_SIZE
,

1918 
µ
->
sgdma_ªque°
,Öp->
sgdma_ªque°_∑
);

1921 
	`k‰ì
(
µ
);

1922 
	}
}

1925 
	$ßè_ox«s_po°_ª£t_öô
(
©a_p‹t
 *
≠
)

1927 
uöt
 
dev
;

1930 
	`ßè_ox«s_ª£t_ucode
(
≠
->
ho°
, !≠->
p‹t_no
, 0);

1933 
	`ßè_ox«s_lök_wrôe
(
≠
, 0x0C, 0x30003);

1936 
	`ßè_ox«s_s¸_wrôe_p‹t
(
≠
, 
SCR_ERROR
, ~0);

1937 
	`ßè_ox«s_s¸_wrôe_p‹t
(
≠
, 
SERROR_IRQ_MASK
, 0x03feffff);

1938 
	`ßè_ox«s_s¸_wrôe_p‹t
(
≠
, 
SCR_ACTIVE
, ~0 & ~(1 << 26) & ~(1 << 16));

1941 
	`ßè_ox«s_úq_⁄
(
≠
);

1944 
dev
 = 0; dev < 
ATA_MAX_DEVICES
; ++dev) {

1945 i‡(
≠
->
lök
.
devi˚
[
dev
].
˛ass
 =
ATA_DEV_ATA
) {

1946 
	`ßè_°d_h¨dª£t
(&
≠
->
lök
, 
NULL
, 
jiffõs
 + 
HZ
);

1947 
	`ßè_ox«s_dev_c⁄fig
(&(
≠
->
lök
.
devi˚
[
dev
]));

1952 
	`ßè_ox«s_s¸_wrôe_p‹t
(
≠
, 
SCR_ERROR
, ~0);

1953 
	`VPRINTK
("done\n");

1954 
	}
}

1962 
	$ßè_ox«s_ho°_°›
(
©a_ho°
 *
ho°_£t
)

1964 
	`DPRINTK
("\n");

1965 
	}
}

1968 
	#ERROR_HW_ACQUIRE_TIMEOUT_JIFFIES
 (10 * 
HZ
)

	)

1969 
	$ßè_ox«s_îr‹_h™dÀr
(
©a_p‹t
 *
≠
)

1971 
	`DPRINTK
("E¡îÖ‹t_nÿ%d\n", 
≠
->
p‹t_no
);

1972 
	`ßè_ox«s_‰ìze_ho°
(
≠
);

1975 
	`ßè_ox«s_˛ónup
(
≠
->
ho°
);

1977 
	`©a_°d_îr‹_h™dÀr
(
≠
);

1979 
	`ßè_ox«s_thaw_ho°
(
≠
);

1980 
	}
}

1982 
	$ßè_ox«s_so·ª£t
(
©a_lök
 *
lök
, *
˛ass
,

1983 
dódlöe
)

1985 
©a_p‹t
 *
≠
 = 
lök
->ap;

1986 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

1987 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

1988 
rc
;

1990 
©a_èskfûe
 
tf
;

1991 
u32
 
Comm™d_Reg
;

1993 
	`DPRINTK
("ENTER\n");

1995 
p‹t_ba£
 = 
pd
->port_base;

1997 i‡(
	`©a_lök_ofÊöe
(
lök
)) {

1998 
	`DPRINTK
("PHYÑeportsÇo device\n");

1999 *
˛ass
 = 
ATA_DEV_NONE
;

2000 
out
;

2004 
	`iowrôe32
(0, 
p‹t_ba£
 + 
ORB1
);

2005 
	`iowrôe32
(0, 
p‹t_ba£
 + 
ORB2
);

2006 
	`iowrôe32
(0, 
p‹t_ba£
 + 
ORB3
);

2007 
	`iowrôe32
((
≠
->
˘l
Ë<< 24, 
p‹t_ba£
 + 
ORB4
);

2010 
Comm™d_Reg
 = 
	`i‹ód32
(
p‹t_ba£
 + 
SATA_COMMAND
);

2011 
Comm™d_Reg
 &~
SATA_OPCODE_MASK
;

2012 
Comm™d_Reg
 |
CMD_WRITE_TO_ORB_REGS_NO_COMMAND
;

2013 
	`iowrôe32
(
Comm™d_Reg
, 
p‹t_ba£
 + 
SATA_COMMAND
);

2014 
	`udñay
(20);

2017 
	`iowrôe32
((
≠
->
˘l
 | 
ATA_SRST
Ë<< 24, 
p‹t_ba£
 + 
ORB4
);

2020 
Comm™d_Reg
 &~
SATA_OPCODE_MASK
;

2021 
Comm™d_Reg
 |
CMD_WRITE_TO_ORB_REGS_NO_COMMAND
;

2022 
	`iowrôe32
(
Comm™d_Reg
, 
p‹t_ba£
 + 
SATA_COMMAND
);

2023 
	`udñay
(20);

2026 
	`iowrôe32
((
≠
->
˘l
Ë<< 24, 
p‹t_ba£
 + 
ORB4
);

2029 
Comm™d_Reg
 &~
SATA_OPCODE_MASK
;

2030 
Comm™d_Reg
 |
CMD_WRITE_TO_ORB_REGS_NO_COMMAND
;

2031 
	`iowrôe32
(
Comm™d_Reg
, 
p‹t_ba£
 + 
SATA_COMMAND
);

2033 
	`m¶ìp
(150);

2035 
rc
 = 
	`©a_sff_waô_ªady
(
lök
, 
dódlöe
);

2038 i‡(
rc
 && (r¯!-
ENODEV
 || 
	`ßè_s¸_vÆid
(
lök
))) {

2039 
	`©a_lök_¥ötk
(
lök
, 
KERN_ERR
, "SRST faûed (î∫o=%d)\n", 
rc
);

2040  
rc
;

2044 
	`ßè_ox«s_tf_ªad
(
≠
, &
tf
);

2045 *
˛ass
 = 
	`©a_dev_˛assify
(&
tf
);

2047 i‡(*
˛ass
 =
ATA_DEV_UNKNOWN
)

2048 *
˛ass
 = 
ATA_DEV_NONE
;

2050 
out
:

2051 
	`DPRINTK
("EXIT, cœss=%u\n", *
˛ass
);

2053 
	}
}

2056 
	$ßè_ox«s_öô_c⁄åﬁÀr
(
©a_ho°
 *
ho°
)

2059 
	}
}

2072 
	$ßè_ox«s_bug_6320_dëe˘
(
©a_p‹t
 *
≠
)

2074 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

2075 
__iomem
 *
c‹e_ba£
 = 
pd
->core_base;

2076 
is_ªad
;

2077 
quads_å™s„ºed
;

2078 
ªmaödî
;

2079 
£˘‹_quads_ªmaöög
;

2080 
bug_¥e£¡
 = 0;

2083 
is_ªad
 = !(
	`i‹ód32
(
c‹e_ba£
 + 
DM_DBG1
Ë& (
≠
->
p‹t_no
 ?

2084 
	`BIT
(
CORE_PORT1_DATA_DIR_BIT
) :

2085 
	`BIT
(
CORE_PORT0_DATA_DIR_BIT
)));

2089 
quads_å™s„ºed
 =

2090 
	`i‹ód32
(
c‹e_ba£
 + (
≠
->
p‹t_no
 ?

2091 
DATACOUNT_PORT1
 : 
DATACOUNT_PORT0
));

2093 
ªmaödî
 = 
quads_å™s„ºed
 & 0x7f;

2094 
£˘‹_quads_ªmaöög
 = 
ªmaödî
 ? (0x80 -Ñemainder) : 0;

2096 i‡(
is_ªad
 && (
£˘‹_quads_ªmaöög
 == 2)) {

2097 
bug_¥e£¡
 = 1;

2098 } i‡(
£˘‹_quads_ªmaöög
) {

2099 i‡(
is_ªad
) {

2100 
	`©a_p‹t_w¨n
(
≠
, "SATAÑead fixup cannot deal with "

2102 
£˘‹_quads_ªmaöög
);

2104 
	`©a_p‹t_w¨n
(
≠
, "SATA write fixup of %d quads "

2106 
£˘‹_quads_ªmaöög
);

2110  
bug_¥e£¡
;

2111 
	}
}

2114 
	$ßè_ox«s_p‹t_úq
(
©a_p‹t
 *
≠
, 
f‹˚_îr‹
)

2116 
©a_queued_cmd
 *
qc
;

2117 
ßè_ox«s_p‹t_¥iv
 *
pd
 = 
≠
->
¥iv©e_d©a
;

2118 
__iomem
 *
p‹t_ba£
 = 
pd
->port_base;

2120 
u32
 
öt_°©us
;

2121 
Êags
 = 0;

2123 
	`DPRINTK
("ENTERÖ‹à%d irq°©u†%x\n", 
≠
->
p‹t_no
,

2124 
	`i‹ód32
(
p‹t_ba£
 + 
INT_STATUS
));

2126 i‡(
≠
->
qc_a˘ive
 & (1 << 
ATA_TAG_INTERNAL
)) {

2127 
qc
 = 
	`©a_qc_‰om_èg
(
≠
, 
ATA_TAG_INTERNAL
);

2128 
	`DPRINTK
("completingÇon-ncq cmd\n");

2130 i‡(
qc
)

2131 
	`©a_qc_com∂ëe
(
qc
);

2136 
qc
 = 
	`©a_qc_‰om_èg
(
≠
,áp->
lök
.
a˘ive_èg
);

2140 
öt_°©us
 = 
	`i‹ód32
(
p‹t_ba£
 + 
INT_STATUS
);

2145 i‡(
	`likñy
(
qc
)) {

2147 
qc
->
îr_mask
 = 
	`ac_îr_mask
(
	`ßè_ox«s_check_°©us
(
≠
));

2148 i‡(
f‹˚_îr‹
) {

2150 
qc
->
îr_mask
 |
AC_ERR_ATA_BUS
;

2151 
	`DPRINTK
(" ####forceÉrror####\n");

2154 
	`loˇl_úq_ßve
(
Êags
);

2155 
	`ßè_ox«s_úq_˛ór
(
≠
);

2156 
	`loˇl_úq_ª°‹e
(
Êags
);

2157 
	`©a_qc_com∂ëe
(
qc
);

2159 
	`VPRINTK
("Ignoring interrupt, can't findÅhe commandÅag="

2160 "%d %08x\n", 
≠
->
lök
.
a˘ive_èg
,áp->
qc_a˘ive
);

2164 i‡(
	`u∆ikñy
(
öt_°©us
 & 
INT_LINK_SERROR
)) {

2165 
u32
 
£º‹
;

2167 
	`ßè_ox«s_s¸_ªad_p‹t
(
≠
, 
SCR_ERROR
, &
£º‹
);

2168 i‡(
£º‹
 & (
SERR_DEV_XCHG
 | 
SERR_PHYRDY_CHG
)) {

2169 
	`©a_ehi_hŸ∂ugged
(&
≠
->
lök
.
eh_öfo
);

2170 
	`©a_p‹t_‰ìze
(
≠
);

2173 
	}
}

2179 
úqªtu∫_t
 
	$ßè_ox«s_öãºu±
(
úq
, *
dev_ö°™˚
)

2181 
©a_ho°
 *
ah
 = 
dev_ö°™˚
;

2182 
ßè_ox«s_ho°_¥iv
 *
hd
 = 
ah
->
¥iv©e_d©a
;

2183 
__iomem
 *
c‹e_ba£
 = 
hd
->core_base;

2185 
u32
 
öt_°©us
;

2186 
úqªtu∫_t
 
ªt
 = 
IRQ_NONE
;

2187 
u32
 
p‹t_no
;

2188 
u32
 
mask
;

2189 
bug_¥e£¡
;

2192 (
öt_°©us
 = (
	`i‹ód32
(
c‹e_ba£
 + 
CORE_INT_STATUS
)) &

2193 (
COREINT_END
 | (COREINT_END << 1)))) {

2196 
	`iowrôe32
(
öt_°©us
, 
c‹e_ba£
 + 
CORE_INT_CLEAR
);

2202 
p‹t_no
 = 0;Ö‹t_nÿ< 
hd
->
n_p‹ts
; ++port_no) {

2205 
mask
 = (
COREINT_END
 << 
p‹t_no
);

2206 i‡(!(
öt_°©us
 & 
mask
))

2210 
	`iowrôe32
(
mask
, 
c‹e_ba£
 + 
CORE_INT_CLEAR
);

2212 
bug_¥e£¡
 = (
hd
->
cuºít_ucode
 =
UNKNOWN_MODE
) &&

2213 
	`ßè_ox«s_bug_6320_dëe˘
(
ah
->
p‹ts
[
p‹t_no
]);

2215 
	`ßè_ox«s_p‹t_úq
(
ah
->
p‹ts
[
p‹t_no
],

2216 
bug_¥e£¡
);

2217 
ªt
 = 
IRQ_HANDLED
;

2221  
ªt
;

2222 
	}
}

2227 
scsi_ho°_ãm∂©e
 
	gßè_ox«s_sht
 = {

2228 
ATA_NCQ_SHT
("sata_oxnas"),

2229 .
ˇn_queue
 = 
SATA_OXNAS_QUEUE_DEPTH
,

2230 .
	gsg_èbÀsize
 = 
SATA_OXNAS_MAX_PRD
,

2231 .
	gdma_bound¨y
 = 
ATA_DMA_BOUNDARY
,

2232 .
	gunchecked_iß_dma
 = 0,

2236 
©a_p‹t_›î©i⁄s
 
	gßè_ox«s_›s
 = {

2237 .
öhîôs
 = &
ßè_p‹t_›s
,

2238 .
	gqc_¥ï
 = 
ßè_ox«s_qc_¥ï
,

2239 .
	gqc_issue
 = 
ßè_ox«s_qc_issue
,

2240 .
	gqc_fûl_πf
 = 
ßè_ox«s_qc_fûl_πf
,

2241 .
	gqc_√w
 = 
ßè_ox«s_qc_√w
,

2242 .
	gqc_‰ì
 = 
ßè_ox«s_qc_‰ì
,

2244 .
	gs¸_ªad
 = 
ßè_ox«s_s¸_ªad
,

2245 .
	gs¸_wrôe
 = 
ßè_ox«s_s¸_wrôe
,

2247 .
	g‰ìze
 = 
ßè_ox«s_‰ìze
,

2248 .
	gthaw
 = 
ßè_ox«s_thaw
,

2249 .
	gso·ª£t
 = 
ßè_ox«s_so·ª£t
,

2251 .
	gpo°ª£t
 = 
ßè_ox«s_po°ª£t
,

2252 .
	gîr‹_h™dÀr
 = 
ßè_ox«s_îr‹_h™dÀr
,

2253 .
	gpo°_öã∫Æ_cmd
 = 
ßè_ox«s_po°_öã∫Æ_cmd
,

2255 .
	gp‹t_°¨t
 = 
ßè_ox«s_p‹t_°¨t
,

2256 .
	gp‹t_°›
 = 
ßè_ox«s_p‹t_°›
,

2258 .
	gho°_°›
 = 
ßè_ox«s_ho°_°›
,

2261 .
	gsff_check_°©us
 = 
ßè_ox«s_check_°©us
,

2262 .
	gacquúe_hw
 = 
ßè_ox«s_acquúe_hw
,

2265 c⁄° 
©a_p‹t_öfo
 
	gßè_ox«s_p‹t_öfo
 = {

2266 .
Êags
 = 
SATA_OXNAS_HOST_FLAGS
,

2267 .
	gpio_mask
 = 
ATA_PIO4
,

2268 .
	gudma_mask
 = 
ATA_UDMA6
,

2269 .
	gp‹t_›s
 = &
ßè_ox«s_›s
,

2272 
	$ßè_ox«s_¥obe
(
∂©f‹m_devi˚
 *
ofdev
)

2274 
ªtvÆ
 = -
ENXIO
;

2275 
n_p‹ts
 = 0;

2276 
__iomem
 *
p‹t_ba£
 = 
NULL
;

2277 
__iomem
 *
dma˘l_ba£
 = 
NULL
;

2278 
__iomem
 *
sgdma_ba£
 = 
NULL
;

2279 
__iomem
 *
c‹e_ba£
 = 
NULL
;

2280 
__iomem
 *
phy_ba£
 = 
NULL
;

2281 
ª£t_c⁄åﬁ
 *
r°c
;

2283 
ªsour˚
 
ªs
 = {};

2284 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
NULL
;

2285 
úq
 = 0;

2286 
©a_ho°
 *
ho°
 = 
NULL
;

2287 
˛k
 *˛k = 
NULL
;

2289 c⁄° 
©a_p‹t_öfo
 *
µi
[] = { &
ßè_ox«s_p‹t_öfo
, 
NULL
 };

2291 
	`of_¥›îty_ªad_u32
(
ofdev
->
dev
.
of_node
, "ƒ-p‹ts", &
n_p‹ts
);

2292 i‡(
n_p‹ts
 < 1 ||Ç_p‹t†> 
SATA_OXNAS_MAX_PORTS
)

2293 
îr‹_exô_wôh_˛ónup
;

2295 
p‹t_ba£
 = 
	`of_iom≠
(
ofdev
->
dev
.
of_node
, 0);

2296 i‡(!
p‹t_ba£
)

2297 
îr‹_exô_wôh_˛ónup
;

2299 
dma˘l_ba£
 = 
	`of_iom≠
(
ofdev
->
dev
.
of_node
, 1);

2300 i‡(!
dma˘l_ba£
)

2301 
îr‹_exô_wôh_˛ónup
;

2303 
sgdma_ba£
 = 
	`of_iom≠
(
ofdev
->
dev
.
of_node
, 2);

2304 i‡(!
sgdma_ba£
)

2305 
îr‹_exô_wôh_˛ónup
;

2307 
c‹e_ba£
 = 
	`of_iom≠
(
ofdev
->
dev
.
of_node
, 3);

2308 i‡(!
c‹e_ba£
)

2309 
îr‹_exô_wôh_˛ónup
;

2311 
phy_ba£
 = 
	`of_iom≠
(
ofdev
->
dev
.
of_node
, 4);

2312 i‡(!
phy_ba£
)

2313 
îr‹_exô_wôh_˛ónup
;

2315 
ho°_¥iv
 = 
	`devm_kzÆloc
(&
ofdev
->
dev
,

2316 (
ßè_ox«s_ho°_¥iv
),

2317 
GFP_KERNEL
);

2318 i‡(!
ho°_¥iv
)

2319 
îr‹_exô_wôh_˛ónup
;

2321 
ho°_¥iv
->
p‹t_ba£
 =Öort_base;

2322 
ho°_¥iv
->
dma˘l_ba£
 = dmactl_base;

2323 
ho°_¥iv
->
sgdma_ba£
 = sgdma_base;

2324 
ho°_¥iv
->
c‹e_ba£
 = core_base;

2325 
ho°_¥iv
->
phy_ba£
 =Öhy_base;

2326 
ho°_¥iv
->
n_p‹ts
 =Ç_ports;

2327 
ho°_¥iv
->
cuºít_ucode
 = 
UNKNOWN_MODE
;

2329 i‡(!
	`of_addªss_to_ªsour˚
(
ofdev
->
dev
.
of_node
, 5, &
ªs
)) {

2330 
ho°_¥iv
->
dma_ba£
 = 
ªs
.
°¨t
;

2331 
ho°_¥iv
->
dma_size
 = 
	`ªsour˚_size
(&
ªs
);

2334 
úq
 = 
	`úq_of_∑r£_™d_m≠
(
ofdev
->
dev
.
of_node
, 0);

2335 i‡(!
úq
) {

2336 
	`dev_îr
(&
ofdev
->
dev
, "invalid irq fromÖlatform\n");

2337 
îr‹_exô_wôh_˛ónup
;

2339 
ho°_¥iv
->
úq
 = irq;

2341 
˛k
 = 
	`of_˛k_gë
(
ofdev
->
dev
.
of_node
, 0);

2342 i‡(
	`IS_ERR
(
˛k
)) {

2343 
ªtvÆ
 = 
	`PTR_ERR
(
˛k
);

2344 
˛k
 = 
NULL
;

2345 
îr‹_exô_wôh_˛ónup
;

2347 
ho°_¥iv
->
˛k
 = clk;

2349 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "sata");

2350 i‡(
	`IS_ERR
(
r°c
)) {

2351 
ªtvÆ
 = 
	`PTR_ERR
(
r°c
);

2352 
îr‹_exô_wôh_˛ónup
;

2354 
ho°_¥iv
->
r°_ßè
 = 
r°c
;

2356 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "link");

2357 i‡(
	`IS_ERR
(
r°c
)) {

2358 
ªtvÆ
 = 
	`PTR_ERR
(
r°c
);

2359 
îr‹_exô_wôh_˛ónup
;

2361 
ho°_¥iv
->
r°_lök
 = 
r°c
;

2363 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "phy");

2364 i‡(
	`IS_ERR
(
r°c
)) {

2365 
ªtvÆ
 = 
	`PTR_ERR
(
r°c
);

2366 
îr‹_exô_wôh_˛ónup
;

2368 
ho°_¥iv
->
r°_phy
 = 
r°c
;

2371 
ho°
 = 
	`©a_ho°_Æloc_pöfo
(&
ofdev
->
dev
, 
µi
, 
n_p‹ts
);

2373 i‡(!
ho°
) {

2374 
ªtvÆ
 = -
ENOMEM
;

2375 
îr‹_exô_wôh_˛ónup
;

2377 
ho°
->
¥iv©e_d©a
 = 
ho°_¥iv
;

2378 
ho°
->
iom≠
 = 
p‹t_ba£
;

2381 
	`öô_waôqueue_hód
(&
ho°_¥iv
->
Á°_waô_queue
);

2382 
	`öô_waôqueue_hód
(&
ho°_¥iv
->
scsi_waô_queue
);

2383 
	`•ö_lock_öô
(&
ho°_¥iv
->
phy_lock
);

2384 
	`•ö_lock_öô
(&
ho°_¥iv
->
c‹e_lock
);

2385 
ho°_¥iv
->
c‹e_locked
 = 0;

2386 
ho°_¥iv
->
ªíå™t_p‹t_no
 = -1;

2387 
ho°_¥iv
->
hw_lock_cou¡
 = 0;

2388 
ho°_¥iv
->
dúe˘_lock_cou¡
 = 0;

2389 
ho°_¥iv
->
lockî_uid
 = 0;

2390 
ho°_¥iv
->
cuºít_lockî_ty≥
 = 
SATA_UNLOCKED
;

2391 
ho°_¥iv
->
i§_¨g
 = 
NULL
;

2392 
ho°_¥iv
->
i§_ˇŒback
 = 
NULL
;

2395 
ªtvÆ
 = 
	`ßè_ox«s_öô_c⁄åﬁÀr
(
ho°
);

2396 i‡(
ªtvÆ
)

2397 
îr‹_exô_wôh_˛ónup
;

2404 
	`©a_ho°_a˘iv©e
(
ho°
, 
úq
, 
ßè_ox«s_öãºu±
, 
SATA_OXNAS_IRQ_FLAG
,

2405 &
ßè_ox«s_sht
);

2409 
îr‹_exô_wôh_˛ónup
:

2410 i‡(
úq
)

2411 
	`úq_di•o£_m≠pög
(
ho°_¥iv
->
úq
);

2412 i‡(
˛k
)

2413 
	`˛k_put
(
˛k
);

2414 i‡(
ho°
)

2415 
	`©a_ho°_dëach
(
ho°
);

2416 i‡(
p‹t_ba£
)

2417 
	`iounm≠
(
p‹t_ba£
);

2418 i‡(
sgdma_ba£
)

2419 
	`iounm≠
(
sgdma_ba£
);

2420 i‡(
c‹e_ba£
)

2421 
	`iounm≠
(
c‹e_ba£
);

2422 i‡(
phy_ba£
)

2423 
	`iounm≠
(
phy_ba£
);

2424  
ªtvÆ
;

2425 
	}
}

2428 
	$ßè_ox«s_ªmove
(
∂©f‹m_devi˚
 *
ofdev
)

2430 
©a_ho°
 *
ho°
 = 
	`dev_gë_drvd©a
(&
ofdev
->
dev
);

2431 
ßè_ox«s_ho°_¥iv
 *
ho°_¥iv
 = 
ho°
->
¥iv©e_d©a
;

2433 
	`©a_ho°_dëach
(
ho°
);

2435 
	`úq_di•o£_m≠pög
(
ho°_¥iv
->
úq
);

2436 
	`iounm≠
(
ho°_¥iv
->
p‹t_ba£
);

2437 
	`iounm≠
(
ho°_¥iv
->
sgdma_ba£
);

2438 
	`iounm≠
(
ho°_¥iv
->
c‹e_ba£
);

2441 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_ßè
);

2442 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_lök
);

2443 
	`ª£t_c⁄åﬁ_as£π
(
ho°_¥iv
->
r°_phy
);

2446 
	`˛k_dißbÀ_u≈ª∑ª
(
ho°_¥iv
->
˛k
);

2447 
	`˛k_put
(
ho°_¥iv
->
˛k
);

2450 
	}
}

2452 #ifde‡
CONFIG_PM


2453 
	$ßè_ox«s_su•íd
(
∂©f‹m_devi˚
 *
›
, 
pm_mesßge_t
 
°©e
)

2455 
©a_ho°
 *
ho°
 = 
	`dev_gë_drvd©a
(&
›
->
dev
);

2457  
	`©a_ho°_su•íd
(
ho°
, 
°©e
);

2458 
	}
}

2460 
	$ßè_ox«s_ªsume
(
∂©f‹m_devi˚
 *
›
)

2462 
©a_ho°
 *
ho°
 = 
	`dev_gë_drvd©a
(&
›
->
dev
);

2463 
ªt
;

2465 
ªt
 = 
	`ßè_ox«s_öô_c⁄åﬁÀr
(
ho°
);

2466 i‡(
ªt
) {

2467 
	`dev_îr
(&
›
->
dev
, "Error initializing hardware\n");

2468  
ªt
;

2470 
	`©a_ho°_ªsume
(
ho°
);

2472 
	}
}

2477 
of_devi˚_id
 
	gox«s_ßè_m©ch
[] = {

2479 .
com∑tibÀ
 = "plxtech,nas782x-sata",

2484 
MODULE_DEVICE_TABLE
(
of
, 
ox«s_ßè_m©ch
);

2486 
∂©f‹m_drivî
 
	gox«s_ßè_drivî
 = {

2487 .
drivî
 = {

2488 .
«me
 = "oxnas-sata",

2489 .
	gow√r
 = 
THIS_MODULE
,

2490 .
	gof_m©ch_èbÀ
 = 
ox«s_ßè_m©ch
,

2492 .
	g¥obe
 = 
ßè_ox«s_¥obe
,

2493 .
	gªmove
 = 
ßè_ox«s_ªmove
,

2494 #ifde‡
CONFIG_PM


2495 .
	gsu•íd
 = 
ßè_ox«s_su•íd
,

2496 .
	gªsume
 = 
ßè_ox«s_ªsume
,

2500 
moduÀ_∂©f‹m_drivî
(
ox«s_ßè_drivî
);

2502 
MODULE_LICENSE
("GPL");

2503 
MODULE_VERSION
("1.0");

2504 
MODULE_AUTHOR
("Oxford Semiconductor Ltd.");

2505 
MODULE_DESCRIPTION
("low-level driver for Oxford 934 SATA core");

	@linux/oxnas/files/drivers/pci/host/pcie-oxnas.c

9 
	~<löux/kî√l.h
>

10 
	~<löux/pci.h
>

11 
	~<löux/˛k.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/mbus.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/∂©f‹m_devi˚.h
>

16 
	~<löux/of_addªss.h
>

17 
	~<löux/of_pci.h
>

18 
	~<löux/of_úq.h
>

19 
	~<löux/of_∂©f‹m.h
>

20 
	~<löux/of_gpio.h
>

21 
	~<löux/gpio.h
>

22 
	~<löux/dñay.h
>

23 
	~<löux/˛k.h
>

24 
	~<löux/ª£t.h
>

25 
	~<löux/io.h
>

26 
	~<löux/sizes.h
>

28 
	#OXNAS_UART1_BASE
 0x44200000

	)

29 
	#OXNAS_UART1_SIZE
 
SZ_32


	)

30 
	#OXNAS_UART1_BASE_VA
 0xF0000000

	)

32 
	#OXNAS_UART2_BASE
 0x44300000

	)

33 
	#OXNAS_UART2_SIZE
 
SZ_32


	)

35 
	#OXNAS_PERCPU_BASE
 0x47000000

	)

36 
	#OXNAS_PERCPU_SIZE
 
SZ_8K


	)

37 
	#OXNAS_PERCPU_BASE_VA
 0xF0002000

	)

39 
	#OXNAS_SYSCRTL_BASE
 0x44E00000

	)

40 
	#OXNAS_SYSCRTL_SIZE
 
SZ_4K


	)

41 
	#OXNAS_SYSCRTL_BASE_VA
 0xF0004000

	)

43 
	#OXNAS_SECCRTL_BASE
 0x44F00000

	)

44 
	#OXNAS_SECCRTL_SIZE
 
SZ_4K


	)

45 
	#OXNAS_SECCRTL_BASE_VA
 0xF0005000

	)

47 
	#OXNAS_RPSA_BASE
 0x44400000

	)

48 
	#OXNAS_RPSA_SIZE
 
SZ_4K


	)

49 
	#OXNAS_RPSA_BASE_VA
 0xF0006000

	)

51 
	#OXNAS_RPSC_BASE
 0x44500000

	)

52 
	#OXNAS_RPSC_SIZE
 
SZ_4K


	)

53 
	#OXNAS_RPSC_BASE_VA
 0xF0007000

	)

61 
	#OXNAS_SCU_BASE_VA
 
OXNAS_PERCPU_BASE_VA


	)

62 
	#OXNAS_GICN_BASE_VA
(
n
Ë(
OXNAS_PERCPU_BASE_VA
 + 0x200 +Ç*0x100)

	)

64 
	#HOLDINGPEN_CPU
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xc8)

	)

65 
	#HOLDINGPEN_LOCATION
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xc4)

	)

70 
	#SYS_CTRL_PCI_STAT
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x20)

	)

71 
	#SYSCTRL_CLK_STAT
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x24)

	)

72 
	#SYS_CTRL_CLK_SET_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x2C)

	)

73 
	#SYS_CTRL_CLK_CLR_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x30)

	)

74 
	#SYS_CTRL_RST_SET_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x34)

	)

75 
	#SYS_CTRL_RST_CLR_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x38)

	)

77 
	#SYS_CTRL_PLLSYS_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x48)

	)

78 
	#SYS_CTRL_CLK_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x64)

	)

79 
	#SYS_CTRL_PLLSYS_KEY_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x6C)

	)

80 
	#SYS_CTRL_GMAC_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x78)

	)

81 
	#SYS_CTRL_GMAC_DELAY_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x100)

	)

84 
	#SYS_CTRL_SCRATCHWORD0
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xc4)

	)

85 
	#SYS_CTRL_SCRATCHWORD1
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xc8)

	)

86 
	#SYS_CTRL_SCRATCHWORD2
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xcc)

	)

87 
	#SYS_CTRL_SCRATCHWORD3
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xd0)

	)

89 
	#SYS_CTRL_PLLA_CTRL0
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x1F0)

	)

90 
	#SYS_CTRL_PLLA_CTRL1
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x1F4)

	)

91 
	#SYS_CTRL_PLLA_CTRL2
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x1F8)

	)

92 
	#SYS_CTRL_PLLA_CTRL3
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x1FC)

	)

94 
	#SYS_CTRL_USBHSMPH_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x40)

	)

95 
	#SYS_CTRL_USBHSMPH_STAT
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x44)

	)

96 
	#SYS_CTRL_REF300_DIV
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xF8)

	)

97 
	#SYS_CTRL_USBHSPHY_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x84)

	)

98 
	#SYS_CTRL_USB_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x90)

	)

101 
	#SYS_CTRL_HCSL_CTRL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x114)

	)

104 
	#SYS_CTRL_SECONDARY_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x14)

	)

105 
	#SYS_CTRL_TERTIARY_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x8c)

	)

106 
	#SYS_CTRL_QUATERNARY_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x94)

	)

107 
	#SYS_CTRL_DEBUG_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0x9c)

	)

108 
	#SYS_CTRL_ALTERNATIVE_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xa4)

	)

109 
	#SYS_CTRL_PULLUP_SEL
 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 0xac)

	)

112 
	#SEC_CTRL_SECONDARY_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x14)

	)

113 
	#SEC_CTRL_TERTIARY_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x8c)

	)

114 
	#SEC_CTRL_QUATERNARY_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x94)

	)

115 
	#SEC_CTRL_DEBUG_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x9c)

	)

116 
	#SEC_CTRL_ALTERNATIVE_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0xa4)

	)

117 
	#SEC_CTRL_PULLUP_SEL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0xac)

	)

119 
	#SEC_CTRL_COPRO_CTRL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x68)

	)

120 
	#SEC_CTRL_SECURE_CTRL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x98)

	)

121 
	#SEC_CTRL_LEON_DEBUG
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0xF0)

	)

122 
	#SEC_CTRL_PLLB_DIV_CTRL
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0xF8)

	)

123 
	#SEC_CTRL_PLLB_CTRL0
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x1F0)

	)

124 
	#SEC_CTRL_PLLB_CTRL1
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x1F4)

	)

125 
	#SEC_CTRL_PLLB_CTRL8
 
	`IOMEM
(
OXNAS_SECCRTL_BASE_VA
 + 0x1F4)

	)

127 
	#RPSA_IRQ_SOFT
 
	`IOMEM
(
OXNAS_RPSA_BASE_VA
 + 0x10)

	)

128 
	#RPSA_FIQ_ENABLE
 
	`IOMEM
(
OXNAS_RPSA_BASE_VA
 + 0x108)

	)

129 
	#RPSA_FIQ_DISABLE
 
	`IOMEM
(
OXNAS_RPSA_BASE_VA
 + 0x10C)

	)

130 
	#RPSA_FIQ_IRQ_TO_FIQ
 
	`IOMEM
(
OXNAS_RPSA_BASE_VA
 + 0x1FC)

	)

132 
	#RPSC_IRQ_SOFT
 
	`IOMEM
(
OXNAS_RPSC_BASE_VA
 + 0x10)

	)

133 
	#RPSC_FIQ_ENABLE
 
	`IOMEM
(
OXNAS_RPSC_BASE_VA
 + 0x108)

	)

134 
	#RPSC_FIQ_DISABLE
 
	`IOMEM
(
OXNAS_RPSC_BASE_VA
 + 0x10C)

	)

135 
	#RPSC_FIQ_IRQ_TO_FIQ
 
	`IOMEM
(
OXNAS_RPSC_BASE_VA
 + 0x1FC)

	)

137 
	#RPSA_TIMER2_VAL
 
	`IOMEM
(
OXNAS_RPSA_BASE_VA
 + 0x224)

	)

139 
	#REF300_DIV_INT_SHIFT
 8

	)

140 
	#REF300_DIV_FRAC_SHIFT
 0

	)

141 
	#REF300_DIV_INT
(
vÆ
Ë((vÆË<< 
REF300_DIV_INT_SHIFT
)

	)

142 
	#REF300_DIV_FRAC
(
vÆ
Ë((vÆË<< 
REF300_DIV_FRAC_SHIFT
)

	)

144 
	#USBHSPHY_SUSPENDM_MANUAL_ENABLE
 16

	)

145 
	#USBHSPHY_SUSPENDM_MANUAL_STATE
 15

	)

146 
	#USBHSPHY_ATE_ESET
 14

	)

147 
	#USBHSPHY_TEST_DIN
 6

	)

148 
	#USBHSPHY_TEST_ADD
 2

	)

149 
	#USBHSPHY_TEST_DOUT_SEL
 1

	)

150 
	#USBHSPHY_TEST_CLK
 0

	)

152 
	#USB_CTRL_USBAPHY_CKSEL_SHIFT
 5

	)

153 
	#USB_CLK_XTAL0_XTAL1
 (0 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

154 
	#USB_CLK_XTAL0
 (1 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

155 
	#USB_CLK_INTERNAL
 (2 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

157 
	#USBAMUX_DEVICE
 
	`BIT
(4)

	)

159 
	#USBPHY_REFCLKDIV_SHIFT
 2

	)

160 
	#USB_PHY_REF_12MHZ
 (0 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

161 
	#USB_PHY_REF_24MHZ
 (1 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

162 
	#USB_PHY_REF_48MHZ
 (2 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

164 
	#USB_CTRL_USB_CKO_SEL_BIT
 0

	)

166 
	#USB_INT_CLK_XTAL
 0

	)

167 
	#USB_INT_CLK_REF300
 2

	)

168 
	#USB_INT_CLK_PLLB
 3

	)

170 
	#SYS_CTRL_GMAC_CKEN_RX_IN
 14

	)

171 
	#SYS_CTRL_GMAC_CKEN_RXN_OUT
 13

	)

172 
	#SYS_CTRL_GMAC_CKEN_RX_OUT
 12

	)

173 
	#SYS_CTRL_GMAC_CKEN_TX_IN
 10

	)

174 
	#SYS_CTRL_GMAC_CKEN_TXN_OUT
 9

	)

175 
	#SYS_CTRL_GMAC_CKEN_TX_OUT
 8

	)

176 
	#SYS_CTRL_GMAC_RX_SOURCE
 7

	)

177 
	#SYS_CTRL_GMAC_TX_SOURCE
 6

	)

178 
	#SYS_CTRL_GMAC_LOW_TX_SOURCE
 4

	)

179 
	#SYS_CTRL_GMAC_AUTO_TX_SOURCE
 3

	)

180 
	#SYS_CTRL_GMAC_RGMII
 2

	)

181 
	#SYS_CTRL_GMAC_SIMPLE_MUX
 1

	)

182 
	#SYS_CTRL_GMAC_CKEN_GTX
 0

	)

183 
	#SYS_CTRL_GMAC_TX_VARDELAY_SHIFT
 0

	)

184 
	#SYS_CTRL_GMAC_TXN_VARDELAY_SHIFT
 8

	)

185 
	#SYS_CTRL_GMAC_RX_VARDELAY_SHIFT
 16

	)

186 
	#SYS_CTRL_GMAC_RXN_VARDELAY_SHIFT
 24

	)

187 
	#SYS_CTRL_GMAC_TX_VARDELAY
(
d
Ë((d)<<
SYS_CTRL_GMAC_TX_VARDELAY_SHIFT
)

	)

188 
	#SYS_CTRL_GMAC_TXN_VARDELAY
(
d
Ë((d)<<
SYS_CTRL_GMAC_TXN_VARDELAY_SHIFT
)

	)

189 
	#SYS_CTRL_GMAC_RX_VARDELAY
(
d
Ë((d)<<
SYS_CTRL_GMAC_RX_VARDELAY_SHIFT
)

	)

190 
	#SYS_CTRL_GMAC_RXN_VARDELAY
(
d
Ë((d)<<
SYS_CTRL_GMAC_RXN_VARDELAY_SHIFT
)

	)

192 
	#PLLB_BYPASS
 1

	)

193 
	#PLLB_ENSAT
 3

	)

194 
	#PLLB_OUTDIV
 4

	)

195 
	#PLLB_REFDIV
 8

	)

196 
	#PLLB_DIV_INT_SHIFT
 8

	)

197 
	#PLLB_DIV_FRAC_SHIFT
 0

	)

198 
	#PLLB_DIV_INT
(
vÆ
Ë((vÆË<< 
PLLB_DIV_INT_SHIFT
)

	)

199 
	#PLLB_DIV_FRAC
(
vÆ
Ë((vÆË<< 
PLLB_DIV_FRAC_SHIFT
)

	)

201 
	#SYS_CTRL_CKCTRL_PCI_DIV_BIT
 0

	)

202 
	#SYS_CTRL_CKCTRL_SLOW_BIT
 8

	)

204 
	#SYS_CTRL_UART2_DEQ_EN
 0

	)

205 
	#SYS_CTRL_UART3_DEQ_EN
 1

	)

206 
	#SYS_CTRL_UART3_IQ_EN
 2

	)

207 
	#SYS_CTRL_UART4_IQ_EN
 3

	)

208 
	#SYS_CTRL_UART4_NOT_PCI_MODE
 4

	)

210 
	#SYS_CTRL_PCI_CTRL1_PCI_STATIC_RQ_BIT
 11

	)

212 
	#PLLA_REFDIV_MASK
 0x3F

	)

213 
	#PLLA_REFDIV_SHIFT
 8

	)

214 
	#PLLA_OUTDIV_MASK
 0x7

	)

215 
	#PLLA_OUTDIV_SHIFT
 4

	)

218 
	#SYS_CTRL_CLK_COPRO
 0

	)

219 
	#SYS_CTRL_CLK_DMA
 1

	)

220 
	#SYS_CTRL_CLK_CIPHER
 2

	)

221 
	#SYS_CTRL_CLK_SD
 3

	)

222 
	#SYS_CTRL_CLK_SATA
 4

	)

223 
	#SYS_CTRL_CLK_I2S
 5

	)

224 
	#SYS_CTRL_CLK_USBHS
 6

	)

225 
	#SYS_CTRL_CLK_MACA
 7

	)

226 
	#SYS_CTRL_CLK_MAC
 
SYS_CTRL_CLK_MACA


	)

227 
	#SYS_CTRL_CLK_PCIEA
 8

	)

228 
	#SYS_CTRL_CLK_STATIC
 9

	)

229 
	#SYS_CTRL_CLK_MACB
 10

	)

230 
	#SYS_CTRL_CLK_PCIEB
 11

	)

231 
	#SYS_CTRL_CLK_REF600
 12

	)

232 
	#SYS_CTRL_CLK_USBDEV
 13

	)

233 
	#SYS_CTRL_CLK_DDR
 14

	)

234 
	#SYS_CTRL_CLK_DDRPHY
 15

	)

235 
	#SYS_CTRL_CLK_DDRCK
 16

	)

239 
	#SYS_CTRL_RST_SCU
 0

	)

240 
	#SYS_CTRL_RST_COPRO
 1

	)

241 
	#SYS_CTRL_RST_ARM0
 2

	)

242 
	#SYS_CTRL_RST_ARM1
 3

	)

243 
	#SYS_CTRL_RST_USBHS
 4

	)

244 
	#SYS_CTRL_RST_USBHSPHYA
 5

	)

245 
	#SYS_CTRL_RST_MACA
 6

	)

246 
	#SYS_CTRL_RST_MAC
 
SYS_CTRL_RST_MACA


	)

247 
	#SYS_CTRL_RST_PCIEA
 7

	)

248 
	#SYS_CTRL_RST_SGDMA
 8

	)

249 
	#SYS_CTRL_RST_CIPHER
 9

	)

250 
	#SYS_CTRL_RST_DDR
 10

	)

251 
	#SYS_CTRL_RST_SATA
 11

	)

252 
	#SYS_CTRL_RST_SATA_LINK
 12

	)

253 
	#SYS_CTRL_RST_SATA_PHY
 13

	)

254 
	#SYS_CTRL_RST_PCIEPHY
 14

	)

255 
	#SYS_CTRL_RST_STATIC
 15

	)

256 
	#SYS_CTRL_RST_GPIO
 16

	)

257 
	#SYS_CTRL_RST_UART1
 17

	)

258 
	#SYS_CTRL_RST_UART2
 18

	)

259 
	#SYS_CTRL_RST_MISC
 19

	)

260 
	#SYS_CTRL_RST_I2S
 20

	)

261 
	#SYS_CTRL_RST_SD
 21

	)

262 
	#SYS_CTRL_RST_MACB
 22

	)

263 
	#SYS_CTRL_RST_PCIEB
 23

	)

264 
	#SYS_CTRL_RST_VIDEO
 24

	)

265 
	#SYS_CTRL_RST_DDR_PHY
 25

	)

266 
	#SYS_CTRL_RST_USBHSPHYB
 26

	)

267 
	#SYS_CTRL_RST_USBDEV
 27

	)

268 
	#SYS_CTRL_RST_ARMDBG
 29

	)

269 
	#SYS_CTRL_RST_PLLA
 30

	)

270 
	#SYS_CTRL_RST_PLLB
 31

	)

272 
ölöe
 
	$ox«s_ªgi°î_˛ór_mask
(
__iomem
 *
p
, 
mask
)

274 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

276 
vÆ
 &~
mask
;

277 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

278 
	}
}

280 
ölöe
 
	$ox«s_ªgi°î_£t_mask
(
__iomem
 *
p
, 
mask
)

282 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

284 
vÆ
 |
mask
;

285 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

286 
	}
}

288 
ölöe
 
	$ox«s_ªgi°î_vÆue_mask
(
__iomem
 *
p
,

289 
mask
, 
√w_vÆue
)

292 
u32
 
vÆ
 = 
	`ªadl_ªœxed
(
p
);

294 
vÆ
 &~
mask
;

295 
vÆ
 |
√w_vÆue
;

296 
	`wrôñ_ªœxed
(
vÆ
, 
p
);

297 
	}
}

299 
	#VERSION_ID_MAGIC
 0x082510b5

	)

300 
	#LINK_UP_TIMEOUT_SECONDS
 1

	)

301 
	#NUM_CONTROLLERS
 1

	)

304 
	mPCIE_DEVICE_TYPE_MASK
 = 0x0F,

305 
	mPCIE_DEVICE_TYPE_ENDPOINT
 = 0,

306 
	mPCIE_DEVICE_TYPE_LEGACY_ENDPOINT
 = 1,

307 
	mPCIE_DEVICE_TYPE_ROOT
 = 4,

309 
	mPCIE_LTSSM
 = 
BIT
(4),

310 
	mPCIE_READY_ENTR_L23
 = 
BIT
(9),

311 
	mPCIE_LINK_UP
 = 
BIT
(11),

312 
	mPCIE_OBTRANS
 = 
BIT
(12),

316 
	mHCSL_BIAS_ON
 = 
BIT
(0),

317 
	mHCSL_PCIE_EN
 = 
BIT
(1),

318 
	mHCSL_PCIEA_EN
 = 
BIT
(2),

319 
	mHCSL_PCIEB_EN
 = 
BIT
(3),

324 
	mPHY_ADDR
 = 0,

325 
	mPHY_DATA
 = 4,

327 
	mREAD_EN
 = 
BIT
(16),

328 
	mWRITE_EN
 = 
BIT
(17),

329 
	mCAP_DATA
 = 
BIT
(18),

334 
	mPCI_CONFIG_VERSION_DEVICEID
 = 0,

335 
	mPCI_CONFIG_COMMAND_STATUS
 = 4,

340 
	mIB_ADDR_XLATE_ENABLE
 = 0xFC,

343 
	mENABLE_IN_ADDR_TRANS
 = 
BIT
(0),

348 
	mPCIE_POM0_MEM_ADDR
 = 0,

349 
	mPCIE_POM1_MEM_ADDR
 = 4,

350 
	mPCIE_IN0_MEM_ADDR
 = 8,

351 
	mPCIE_IN1_MEM_ADDR
 = 12,

352 
	mPCIE_IN_IO_ADDR
 = 16,

353 
	mPCIE_IN_CFG0_ADDR
 = 20,

354 
	mPCIE_IN_CFG1_ADDR
 = 24,

355 
	mPCIE_IN_MSG_ADDR
 = 28,

356 
	mPCIE_IN0_MEM_LIMIT
 = 32,

357 
	mPCIE_IN1_MEM_LIMIT
 = 36,

358 
	mPCIE_IN_IO_LIMIT
 = 40,

359 
	mPCIE_IN_CFG0_LIMIT
 = 44,

360 
	mPCIE_IN_CFG1_LIMIT
 = 48,

361 
	mPCIE_IN_MSG_LIMIT
 = 52,

362 
	mPCIE_AHB_SLAVE_CTRL
 = 56,

364 
	mPCIE_SLAVE_BE_SHIFT
 = 22,

367 
	#ADDR_VAL
(
vÆ
Ë((vÆË& 0xFFFF)

	)

368 
	#DATA_VAL
(
vÆ
Ë((vÆË& 0xFFFF)

	)

370 
	#PCIE_SLAVE_BE
(
vÆ
Ë((vÆË<< 
PCIE_SLAVE_BE_SHIFT
)

	)

371 
	#PCIE_SLAVE_BE_MASK
 
	`PCIE_SLAVE_BE
(0xF)

	)

373 
	sox«s_pcõ_sh¨ed
 {

375 
	mªfcou¡
;

379 
	sox«s_pcõ
 {

380 
__iomem
 *
	mcfgba£
;

381 
__iomem
 *
	mba£
;

382 
__iomem
 *
	möbound
;

383 
__iomem
 *
	moutbound
;

384 
__iomem
 *
	mpcõ_˘æ
;

386 
	mha¶ök
;

387 
∂©f‹m_devi˚
 *
	mpdev
;

388 
ªsour˚
 
	mio
;

389 
ªsour˚
 
	mcfg
;

390 
ªsour˚
 
	m¥e_mem
;

391 
ªsour˚
 
	mn⁄_mem
;

392 
ªsour˚
 
	mbu¢
;

393 
	mˇrd_ª£t
;

394 
	mhc¶_í
;

395 
˛k
 *
	m˛k
;

396 
˛k
 *
	mbus˛k
;

397 *
	m¥iv©e_d©a
[1];

398 
•ölock_t
 
	mlock
;

401 
ox«s_pcõ_sh¨ed
 
	gpcõ_sh¨ed
 = {

402 .
ªfcou¡
 = 0,

405 
ölöe
 
ox«s_pcõ
 *
	$sys_to_pcõ
(
pci_sys_d©a
 *
sys
)

407  
sys
->
¥iv©e_d©a
;

408 
	}
}

411 
ölöe
 
	$£t_out_œ√s
(
ox«s_pcõ
 *
pcõ
, 
œ√s
)

413 
	`ox«s_ªgi°î_vÆue_mask
(
pcõ
->
outbound
 + 
PCIE_AHB_SLAVE_CTRL
,

414 
PCIE_SLAVE_BE_MASK
, 
	`PCIE_SLAVE_BE
(
œ√s
));

415 
	`wmb
();

416 
	}
}

418 
	$ox«s_pcõ_lök_up
(
ox«s_pcõ
 *
pcõ
)

420 
íd
;

423 
íd
 = 
jiffõs
 + (
LINK_UP_TIMEOUT_SECONDS
 * 
HZ
);

424 !
	`time_a·î
(
jiffõs
, 
íd
)) {

425 i‡(
	`ªadl
(
pcõ
->
pcõ_˘æ
Ë& 
PCIE_LINK_UP
)

429 
	}
}

431 
__öô
 
	$ox«s_pcõ_£tup_hw
(
ox«s_pcõ
 *
pcõ
)

438 
	`ox«s_ªgi°î_˛ór_mask
(
pcõ
->
öbound
 + 
IB_ADDR_XLATE_ENABLE
,

439 
ENABLE_IN_ADDR_TRANS
);

440 
	`wmb
();

467 
	`wrôñ_ªœxed
(
pcõ
->
n⁄_mem
.
°¨t
,Öcõ->
outbound
 + 
PCIE_IN0_MEM_ADDR
);

468 
	`wrôñ_ªœxed
(
pcõ
->
n⁄_mem
.
íd
,Öcõ->
outbound
 + 
PCIE_IN0_MEM_LIMIT
);

469 
	`wrôñ_ªœxed
(
pcõ
->
n⁄_mem
.
°¨t
,Öcõ->
outbound
 + 
PCIE_POM0_MEM_ADDR
);

472 
	`wrôñ_ªœxed
(
pcõ
->
¥e_mem
.
°¨t
,Öcõ->
outbound
 + 
PCIE_IN1_MEM_ADDR
);

473 
	`wrôñ_ªœxed
(
pcõ
->
¥e_mem
.
íd
,Öcõ->
outbound
 + 
PCIE_IN1_MEM_LIMIT
);

474 
	`wrôñ_ªœxed
(
pcõ
->
¥e_mem
.
°¨t
,Öcõ->
outbound
 + 
PCIE_POM1_MEM_ADDR
);

477 
	`wrôñ_ªœxed
(
pcõ
->
io
.
°¨t
,Öcõ->
outbound
 + 
PCIE_IN_IO_ADDR
);

478 
	`wrôñ_ªœxed
(
pcõ
->
io
.
íd
,Öcõ->
outbound
 + 
PCIE_IN_IO_LIMIT
);

481 
	`wrôñ_ªœxed
(
pcõ
->
cfg
.
°¨t
,Öcõ->
outbound
 + 
PCIE_IN_CFG0_ADDR
);

482 
	`wrôñ_ªœxed
(
pcõ
->
cfg
.
íd
,Öcõ->
outbound
 + 
PCIE_IN_CFG0_LIMIT
);

483 
	`wmb
();

486 
	`ox«s_ªgi°î_£t_mask
(
pcõ
->
pcõ_˘æ
, 
PCIE_OBTRANS
);

487 
	`wmb
();

495 
	`wrôñ_ªœxed
(7, 
pcõ
->
ba£
 + 
PCI_CONFIG_COMMAND_STATUS
);

497 
	`wmb
();

498 
	}
}

500 
	$ox«s_pcõ_cfg_to_off£t
(

501 
pci_sys_d©a
 *
sys
,

502 
bus_numbî
,

503 
dev‚
,

504 
whîe
)

506 
fun˘i⁄
 = 
	`PCI_FUNC
(
dev‚
);

507 
¶Ÿ
 = 
	`PCI_SLOT
(
dev‚
);

508 
bus_numbî_off£t
;

510 
bus_numbî_off£t
 = 
bus_numbî
 - 
sys
->
bu¢r
;

523  (
bus_numbî_off£t
 << 20Ë| (
¶Ÿ
 << 15Ë| (
fun˘i⁄
 << 12) |

524 (
whîe
 & ~3);

525 
	}
}

528 
	$ox«s_pcõ_wr_c⁄f
(
pci_bus
 *
bus
, 
u32
 
dev‚
,

529 
whîe
, 
size
, 
u32
 
vÆ
)

531 
Êags
;

532 
ox«s_pcõ
 *
pcõ
 = 
	`sys_to_pcõ
(
bus
->
sysd©a
);

533 
off£t
;

534 
u32
 
vÆue
;

535 
u32
 
œ√s
;

538 i‡(
	`PCI_SLOT
(
dev‚
) > 0)

539  
PCIBIOS_DEVICE_NOT_FOUND
;

541 i‡(!
pcõ
->
ha¶ök
)

542  
PCIBIOS_DEVICE_NOT_FOUND
;

544 
off£t
 = 
	`ox«s_pcõ_cfg_to_off£t
(
bus
->
sysd©a
, bus->
numbî
, 
dev‚
,

545 
whîe
);

547 
vÆue
 = 
vÆ
 << (8 * (
whîe
 & 3));

548 
œ√s
 = (0x‡>> (4-
size
)Ë<< (
whîe
 & 3);

554 
	`•ö_lock_úqßve
(&
pcõ
->
lock
, 
Êags
);

555 
	`£t_out_œ√s
(
pcõ
, 
œ√s
);

556 
	`wrôñ_ªœxed
(
vÆue
, 
pcõ
->
cfgba£
 + 
off£t
);

557 
	`£t_out_œ√s
(
pcõ
, 0xf);

558 
	`•ö_u∆ock_úqª°‹e
(&
pcõ
->
lock
, 
Êags
);

560  
PCIBIOS_SUCCESSFUL
;

561 
	}
}

564 
	$ox«s_pcõ_rd_c⁄f
(
pci_bus
 *
bus
, 
u32
 
dev‚
, 
whîe
,

565 
size
, 
u32
 *
vÆ
)

567 
ox«s_pcõ
 *
pcõ
 = 
	`sys_to_pcõ
(
bus
->
sysd©a
);

568 
off£t
;

569 
u32
 
vÆue
;

570 
u32
 
À·_byãs
, 
right_byãs
;

573 i‡(
	`PCI_SLOT
(
dev‚
) > 0) {

574 *
vÆ
 = 0xffffffff;

575  
PCIBIOS_DEVICE_NOT_FOUND
;

578 i‡(!
pcõ
->
ha¶ök
) {

579 *
vÆ
 = 0xffffffff;

580  
PCIBIOS_DEVICE_NOT_FOUND
;

583 
off£t
 = 
	`ox«s_pcõ_cfg_to_off£t
(
bus
->
sysd©a
, bus->
numbî
, 
dev‚
,

584 
whîe
);

585 
vÆue
 = 
	`ªadl_ªœxed
(
pcõ
->
cfgba£
 + 
off£t
);

586 
À·_byãs
 = 
whîe
 & 3;

587 
right_byãs
 = 4 - 
À·_byãs
 - 
size
;

588 
vÆue
 <<
right_byãs
 * 8;

589 
vÆue
 >>(
À·_byãs
 + 
right_byãs
) * 8;

590 *
vÆ
 = 
vÆue
;

592  
PCIBIOS_SUCCESSFUL
;

593 
	}
}

595 
pci_›s
 
	gox«s_pcõ_›s
 = {

596 .
ªad
 = 
ox«s_pcõ_rd_c⁄f
,

597 .
	gwrôe
 = 
ox«s_pcõ_wr_c⁄f
,

600 
__öô
 
	$ox«s_pcõ_£tup
(
ƒ
, 
pci_sys_d©a
 *
sys
)

602 
ox«s_pcõ
 *
pcõ
 = 
	`sys_to_pcõ
(
sys
);

604 
	`pci_add_ªsour˚_off£t
(&
sys
->
ªsour˚s
, &
pcõ
->
n⁄_mem
, sys->
mem_off£t
);

605 
	`pci_add_ªsour˚_off£t
(&
sys
->
ªsour˚s
, &
pcõ
->
¥e_mem
, sys->
mem_off£t
);

606 
	`pci_add_ªsour˚_off£t
(&
sys
->
ªsour˚s
, &
pcõ
->
io
, sys->
io_off£t
);

607 
	`pci_add_ªsour˚
(&
sys
->
ªsour˚s
, &
pcõ
->
bu¢
);

608 i‡(
sys
->
bu¢r
 == 0) {

609 
sys
->
bu¢r
 = 
pcõ
->
bu¢
.
°¨t
;

612 
pcõ
->
cfgba£
 = 
	`devm_i‹em≠
(&pcõ->
pdev
->
dev
,Öcõ->
cfg
.
°¨t
,

613 
	`ªsour˚_size
(&
pcõ
->
cfg
));

614 i‡(!
pcõ
->
cfgba£
)

615  -
ENOMEM
;

617 
	`ox«s_pcõ_£tup_hw
(
pcõ
);

620 
	}
}

622 
__öô
 
	$ox«s_pcõ_íabÀ
(
devi˚
 *
dev
, 
ox«s_pcõ
 *
pcõ
)

624 
hw_pci
 
hw
;

625 
i
;

627 
	`mem£t
(&
hw
, 0, (hw));

628 
i
 = 0; i < 
NUM_CONTROLLERS
; i++)

629 
pcõ
->
¥iv©e_d©a
[
i
] =Öcie;

631 
hw
.
ƒ_c⁄åﬁÀrs
 = 
NUM_CONTROLLERS
;

633 
hw
.
¥iv©e_d©a
 = 
pcõ
->private_data;

634 
hw
.
£tup
 = 
ox«s_pcõ_£tup
;

635 
hw
.
m≠_úq
 = 
of_úq_∑r£_™d_m≠_pci
;

636 
hw
.
›s
 = &
ox«s_pcõ_›s
;

639 
	`pci_comm⁄_öô_dev
(
dev
, &
hw
);

640 
	}
}

642 
	$ox«s_pcõ_öô_sh¨ed_hw
(
∂©f‹m_devi˚
 *
pdev
,

643 
__iomem
 *
phyba£
)

645 
ª£t_c⁄åﬁ
 *
r°c
;

646 
ªt
;

649 
	`wrôñ
(
HCSL_BIAS_ON
|
HCSL_PCIE_EN
, 
SYS_CTRL_HCSL_CTRL
);

652 
r°c
 = 
	`ª£t_c⁄åﬁ_gë
(&
pdev
->
dev
, "phy");

653 i‡(
	`IS_ERR
(
r°c
)) {

654 
ªt
 = 
	`PTR_ERR
(
r°c
);

656 
ªt
 = 
	`ª£t_c⁄åﬁ_ª£t
(
r°c
);

657 
	`ª£t_c⁄åﬁ_put
(
r°c
);

660 i‡(
ªt
) {

661 
	`dev_îr
(&
pdev
->
dev
, "phyÑe£àÁûed %d\n", 
ªt
);

667 
	`wrôñ
(
	`ADDR_VAL
(0x0014), 
phyba£
 + 
PHY_ADDR
);

668 
	`wrôñ
(
	`DATA_VAL
(0x˚10Ë| 
CAP_DATA
, 
phyba£
 + 
PHY_DATA
);

669 
	`wrôñ
(
	`DATA_VAL
(0x˚10Ë| 
WRITE_EN
, 
phyba£
 + 
PHY_DATA
);

671 
	`wrôñ
(
	`ADDR_VAL
(0x2004), 
phyba£
 + 
PHY_ADDR
);

672 
	`wrôñ
(
	`DATA_VAL
(0x82c7Ë| 
CAP_DATA
, 
phyba£
 + 
PHY_DATA
);

673 
	`wrôñ
(
	`DATA_VAL
(0x82c7Ë| 
WRITE_EN
, 
phyba£
 + 
PHY_DATA
);

674 
	}
}

676 
	$ox«s_pcõ_sh¨ed_öô
(
∂©f‹m_devi˚
 *
pdev
)

678 i‡(++
pcõ_sh¨ed
.
ªfcou¡
 == 1) {

680 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

681 
__iomem
 *
phy
 = 
	`of_iom≠
(
≈
, 2);

682 i‡(!
phy
) {

683 --
pcõ_sh¨ed
.
ªfcou¡
;

684  -
ENOMEM
;

686 
	`ox«s_pcõ_öô_sh¨ed_hw
(
pdev
, 
phy
);

687 
	`iounm≠
(
phy
);

692 
	}
}

696 
	$ox«s_pcõ_sh¨ed_deöô
(
∂©f‹m_devi˚
 *
pdev
)

698 i‡(--
pcõ_sh¨ed
.
ªfcou¡
 == 0) {

701 
	}
}

704 
__öô


705 
	$ox«s_pcõ_m≠_ªgi°îs
(
∂©f‹m_devi˚
 *
pdev
,

706 
devi˚_node
 *
≈
,

707 
ox«s_pcõ
 *
pcõ
)

709 
ªsour˚
 
ªgs
;

710 
ªt
 = 0;

711 
u32
 
outbound_˘æ_off£t
;

712 
u32
 
pcõ_˘æ_off£t
;

715 
ªt
 = 
	`of_addªss_to_ªsour˚
(
≈
, 0, &
ªgs
);

716 i‡(
ªt
)

717  -
EINVAL
;

718 
pcõ
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, &
ªgs
);

719 i‡(!
pcõ
->
ba£
)

720  -
ENOMEM
;

722 
ªt
 = 
	`of_addªss_to_ªsour˚
(
≈
, 1, &
ªgs
);

723 i‡(
ªt
)

724  -
EINVAL
;

725 
pcõ
->
öbound
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, &
ªgs
);

726 i‡(!
pcõ
->
öbound
)

727  -
ENOMEM
;

730 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "plxtech,pcie-outbound-offset",

731 &
outbound_˘æ_off£t
))

732  -
EINVAL
;

734 
pcõ
->
outbound
 = 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 
outbound_˘æ_off£t
);

736 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "plxtech,pcie-ctrl-offset",

737 &
pcõ_˘æ_off£t
))

738  -
EINVAL
;

739 
pcõ
->
pcõ_˘æ
 = 
	`IOMEM
(
OXNAS_SYSCRTL_BASE_VA
 + 
pcõ_˘æ_off£t
);

742 
	}
}

744 
__öô
 
	$ox«s_pcõ_öô_ªs
(
∂©f‹m_devi˚
 *
pdev
,

745 
ox«s_pcõ
 *
pcõ
,

746 
devi˚_node
 *
≈
)

748 
of_pci_ønge
 
ønge
;

749 
of_pci_ønge_∑r£r
 
∑r£r
;

750 
ªt
;

752 i‡(
	`of_pci_ønge_∑r£r_öô
(&
∑r£r
, 
≈
))

753  -
EINVAL
;

756 
	`f‹_óch_of_pci_ønge
(&
∑r£r
, &
ønge
) {

758 
ª°y≥
 = 
ønge
.
Êags
 & 
IORESOURCE_TYPE_BITS
;

759 i‡(
ª°y≥
 =
IORESOURCE_IO
) {

760 
	`of_pci_ønge_to_ªsour˚
(&
ønge
, 
≈
, &
pcõ
->
io
);

761 
pcõ
->
io
.
«me
 = "I/O";

763 i‡(
ª°y≥
 =
IORESOURCE_MEM
) {

764 i‡(
ønge
.
Êags
 & 
IORESOURCE_PREFETCH
) {

765 
	`of_pci_ønge_to_ªsour˚
(&
ønge
, 
≈
, &
pcõ
->
¥e_mem
);

766 
pcõ
->
¥e_mem
.
«me
 = "PRE MEM";

768 
	`of_pci_ønge_to_ªsour˚
(&
ønge
, 
≈
, &
pcõ
->
n⁄_mem
);

769 
pcõ
->
n⁄_mem
.
«me
 = "NON MEM";

773 i‡(
ª°y≥
 == 0)

774 
	`of_pci_ønge_to_ªsour˚
(&
ønge
, 
≈
, &
pcõ
->
cfg
);

778 
ªt
 = 
	`of_pci_∑r£_bus_ønge
(
≈
, &
pcõ
->
bu¢
);

780 i‡(
ªt
) {

781 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÖarse bus-rangeÖroperty: %d\n",

782 
ªt
);

783  
ªt
;

786 
pcõ
->
ˇrd_ª£t
 = 
	`of_gë_gpio
(
≈
, 0);

787 i‡(
pcõ
->
ˇrd_ª£t
 < 0)

788 
	`dev_öfo
(&
pdev
->
dev
, "cardÑeset gpioÖinÇotÉxists\n");

790 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "∂xãch,pcõ-hc¶-bô", &
pcõ
->
hc¶_í
))

791  -
EINVAL
;

793 
pcõ
->
˛k
 = 
	`of_˛k_gë_by_«me
(
≈
, "pcie");

794 i‡(
	`IS_ERR
(
pcõ
->
˛k
)) {

795  
	`PTR_ERR
(
pcõ
->
˛k
);

798 
pcõ
->
bus˛k
 = 
	`of_˛k_gë_by_«me
(
≈
, "busclk");

799 i‡(
	`IS_ERR
(
pcõ
->
bus˛k
)) {

800 
	`˛k_put
(
pcõ
->
˛k
);

801  
	`PTR_ERR
(
pcõ
->
bus˛k
);

805 
	}
}

807 
	$ox«s_pcõ_öô_hw
(
∂©f‹m_devi˚
 *
pdev
,

808 
ox«s_pcõ
 *
pcõ
)

810 
u32
 
vîsi⁄_id
;

811 
ªt
;

813 
	`˛k_¥ï¨e_íabÀ
(
pcõ
->
bus˛k
);

816 i‡(
pcõ
->
ˇrd_ª£t
 >= 0 &&

817 !
	`gpio_dúe˘i⁄_ouçut
(
pcõ
->
ˇrd_ª£t
, 0)) {

818 
	`wmb
();

819 
	`mdñay
(10);

821 
	`gpio_dúe˘i⁄_öput
(
pcõ
->
ˇrd_ª£t
);

822 
	`wmb
();

823 
	`mdñay
(100);

826 
	`ox«s_ªgi°î_£t_mask
(
SYS_CTRL_HCSL_CTRL
, 
	`BIT
(
pcõ
->
hc¶_í
));

829 
ªt
 = 
	`devi˚_ª£t
(&
pdev
->
dev
);

830 i‡(
ªt
) {

831 
	`dev_îr
(&
pdev
->
dev
, "c‹êª£àÁûed %d\n", 
ªt
);

836 
	`˛k_¥ï¨e_íabÀ
(
pcõ
->
˛k
);

838 
vîsi⁄_id
 = 
	`ªadl_ªœxed
(
pcõ
->
ba£
 + 
PCI_CONFIG_VERSION_DEVICEID
);

839 
	`dev_öfo
(&
pdev
->
dev
, "PCIêvîsi⁄/devi˚ID 0x%x\n", 
vîsi⁄_id
);

841 i‡(
vîsi⁄_id
 !
VERSION_ID_MAGIC
) {

842 
	`dev_öfo
(&
pdev
->
dev
, "PCIe controllerÇot found\n");

843 
pcõ
->
ha¶ök
 = 0;

848 
	`ox«s_ªgi°î_£t_mask
(
pcõ
->
pcõ_˘æ
, 
PCIE_READY_ENTR_L23
);

851 
	`ox«s_ªgi°î_vÆue_mask
(
pcõ
->
pcõ_˘æ
, 
PCIE_DEVICE_TYPE_MASK
,

852 
PCIE_DEVICE_TYPE_ROOT
);

853 
	`wmb
();

856 
	`ox«s_ªgi°î_£t_mask
(
pcõ
->
pcõ_˘æ
, 
PCIE_LTSSM
);

857 
	`wmb
();

858 
	}
}

860 
__öô
 
	$ox«s_pcõ_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

862 
ox«s_pcõ
 *
pcõ
;

863 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

864 
ªt
;

866 
pcõ
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
ox«s_pcõ
),

867 
GFP_KERNEL
);

868 i‡(!
pcõ
)

869  -
ENOMEM
;

871 
pcõ
->
pdev
 =Ödev;

872 
pcõ
->
ha¶ök
 = 1;

873 
	`•ö_lock_öô
(&
pcõ
->
lock
);

875 
ªt
 = 
	`ox«s_pcõ_öô_ªs
(
pdev
, 
pcõ
, 
≈
);

876 i‡(
ªt
)

877  
ªt
;

878 i‡(
pcõ
->
ˇrd_ª£t
 >= 0) {

879 
ªt
 = 
	`gpio_ªque°_⁄e
(
pcõ
->
ˇrd_ª£t
, 
GPIOF_DIR_IN
,

880 
	`dev_«me
(&
pdev
->
dev
));

881 i‡(
ªt
) {

882 
	`dev_îr
(&
pdev
->
dev
, "cannotÑequest gpioÖin %d\n",

883 
pcõ
->
ˇrd_ª£t
);

884  
ªt
;

888 
ªt
 = 
	`ox«s_pcõ_m≠_ªgi°îs
(
pdev
, 
≈
, 
pcõ
);

889 i‡(
ªt
) {

890 
	`dev_îr
(&
pdev
->
dev
, "cannot mapÑegisters\n");

891 
îr_‰ì_gpio
;

894 
ªt
 = 
	`ox«s_pcõ_sh¨ed_öô
(
pdev
);

895 i‡(
ªt
)

896 
îr_‰ì_gpio
;

899 
	`ox«s_pcõ_öô_hw
(
pdev
, 
pcõ
);

901 i‡(
pcõ
->
ha¶ök
 && 
	`ox«s_pcõ_lök_up
(pcie)) {

902 
pcõ
->
ha¶ök
 = 1;

903 
	`dev_öfo
(&
pdev
->
dev
, "link up\n");

905 
pcõ
->
ha¶ök
 = 0;

906 
	`dev_öfo
(&
pdev
->
dev
, "link down\n");

910 
	`ox«s_pcõ_íabÀ
(&
pdev
->
dev
, 
pcõ
);

914 
îr_‰ì_gpio
:

915 i‡(
pcõ
->
ˇrd_ª£t
)

916 
	`gpio_‰ì
(
pcõ
->
ˇrd_ª£t
);

918  
ªt
;

919 
	}
}

921 c⁄° 
of_devi˚_id
 
	gox«s_pcõ_of_m©ch_èbÀ
[] = {

922 { .
com∑tibÀ
 = "plxtech,nas782x-pcie", },

925 
MODULE_DEVICE_TABLE
(
of
, 
ox«s_pcõ_of_m©ch_èbÀ
);

927 
∂©f‹m_drivî
 
	gox«s_pcõ_drivî
 = {

928 .
drivî
 = {

929 .
ow√r
 = 
THIS_MODULE
,

930 .
	g«me
 = "oxnas-pcie",

931 .
	gof_m©ch_èbÀ
 =

932 
of_m©ch_±r
(
ox«s_pcõ_of_m©ch_èbÀ
),

936 
__öô
 
	$ox«s_pcõ_öô
()

938  
	`∂©f‹m_drivî_¥obe
(&
ox«s_pcõ_drivî
,

939 
ox«s_pcõ_¥obe
);

940 
	}
}

942 
subsys_öôˇŒ
(
ox«s_pcõ_öô
);

944 
MODULE_AUTHOR
("Ma Haijun <mahaijuns@gmail.com>");

945 
MODULE_DESCRIPTION
("NAS782x PCIe driver");

946 
MODULE_LICENSE
("GPLv2");

	@linux/oxnas/files/drivers/usb/host/ehci-oxnas.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/∂©f‹m_devi˚.h
>

14 
	~<löux/of.h
>

15 
	~<löux/of_addªss.h
>

16 
	~<löux/of_úq.h
>

17 
	~<löux/mfd/sysc⁄.h
>

18 
	~<löux/usb.h
>

19 
	~<löux/usb/hcd.h
>

20 
	~<löux/dma-m≠pög.h
>

21 
	~<löux/˛k.h
>

22 
	~<löux/ªgm≠.h
>

23 
	~<löux/ª£t.h
>

25 
	#USBHSMPH_CTRL_REGOFFSET
 0x40

	)

26 
	#USBHSMPH_STAT_REGOFFSET
 0x44

	)

27 
	#REF300_DIV_REGOFFSET
 0xF8

	)

28 
	#USBHSPHY_CTRL_REGOFFSET
 0x84

	)

29 
	#USB_CTRL_REGOFFSET
 0x90

	)

30 
	#PLLB_DIV_CTRL_REGOFFSET
 0x1000F8

	)

31 
	#USBHSPHY_SUSPENDM_MANUAL_ENABLE
 16

	)

32 
	#USBHSPHY_SUSPENDM_MANUAL_STATE
 15

	)

33 
	#USBHSPHY_ATE_ESET
 14

	)

34 
	#USBHSPHY_TEST_DIN
 6

	)

35 
	#USBHSPHY_TEST_ADD
 2

	)

36 
	#USBHSPHY_TEST_DOUT_SEL
 1

	)

37 
	#USBHSPHY_TEST_CLK
 0

	)

39 
	#USB_CTRL_USBAPHY_CKSEL_SHIFT
 5

	)

40 
	#USB_CLK_XTAL0_XTAL1
 (0 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

41 
	#USB_CLK_XTAL0
 (1 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

42 
	#USB_CLK_INTERNAL
 (2 << 
USB_CTRL_USBAPHY_CKSEL_SHIFT
)

	)

44 
	#USBAMUX_DEVICE
 
	`BIT
(4)

	)

46 
	#USBPHY_REFCLKDIV_SHIFT
 2

	)

47 
	#USB_PHY_REF_12MHZ
 (0 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

48 
	#USB_PHY_REF_24MHZ
 (1 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

49 
	#USB_PHY_REF_48MHZ
 (2 << 
USBPHY_REFCLKDIV_SHIFT
)

	)

51 
	#USB_CTRL_USB_CKO_SEL_BIT
 0

	)

53 
	#USB_INT_CLK_XTAL
 0

	)

54 
	#USB_INT_CLK_REF300
 2

	)

55 
	#USB_INT_CLK_PLLB
 3

	)

57 
	#REF300_DIV_INT_SHIFT
 8

	)

58 
	#REF300_DIV_FRAC_SHIFT
 0

	)

59 
	#REF300_DIV_INT
(
vÆ
Ë((vÆË<< 
REF300_DIV_INT_SHIFT
)

	)

60 
	#REF300_DIV_FRAC
(
vÆ
Ë((vÆË<< 
REF300_DIV_FRAC_SHIFT
)

	)

62 
	#PLLB_BYPASS
 1

	)

63 
	#PLLB_ENSAT
 3

	)

64 
	#PLLB_OUTDIV
 4

	)

65 
	#PLLB_REFDIV
 8

	)

66 
	#PLLB_DIV_INT_SHIFT
 8

	)

67 
	#PLLB_DIV_FRAC_SHIFT
 0

	)

68 
	#PLLB_DIV_INT
(
vÆ
Ë((vÆË<< 
PLLB_DIV_INT_SHIFT
)

	)

69 
	#PLLB_DIV_FRAC
(
vÆ
Ë((vÆË<< 
PLLB_DIV_FRAC_SHIFT
)

	)

71 
	~"ehci.h
"

73 
	sox«s_hcd
 {

74 
˛k
 *
	m˛k
;

75 
˛k
 *
	mªf§c
;

76 
˛k
 *
	mphyªf
;

77 
	mu£_∂lb
;

78 
	mu£_phya
;

79 
ª£t_c⁄åﬁ
 *
	mr°_ho°
;

80 
ª£t_c⁄åﬁ
 *
	mr°_phya
;

81 
ª£t_c⁄åﬁ
 *
	mr°_phyb
;

82 
ªgm≠
 *
	msysc⁄
;

85 
	#DRIVER_DESC
 "Ox«†On-Chù EHCI Ho° C⁄åﬁÀr"

	)

87 
hc_drivî
 
__ªad_mo°ly
 
	gox«s_hc_drivî
;

89 
	$°¨t_ox«s_usb_ehci
(
ox«s_hcd
 *
ox«s
)

91 i‡(
ox«s
->
u£_∂lb
) {

93 
	`˛k_¥ï¨e_íabÀ
(
ox«s
->
ªf§c
);

95 
	`˛k_¥ï¨e_íabÀ
(
ox«s
->
phyªf
);

97 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
PLLB_DIV_CTRL_REGOFFSET
, 0xffff, 
	`PLLB_DIV_INT
(50Ë| 
	`PLLB_DIV_FRAC
(0));

100 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
REF300_DIV_REGOFFSET
, 0xffff, 
	`REF300_DIV_INT
(25Ë| 
	`REF300_DIV_FRAC
(0));

104 
	`ª£t_c⁄åﬁ_ª£t
(
ox«s
->
r°_ho°
);

105 
	`ª£t_c⁄åﬁ_ª£t
(
ox«s
->
r°_phya
);

106 
	`ª£t_c⁄åﬁ_ª£t
(
ox«s
->
r°_phyb
);

110 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USBHSPHY_CTRL_REGOFFSET
, 0xffff,

111 (2UL << 
USBHSPHY_TEST_ADD
) |

112 (0xe0UL << 
USBHSPHY_TEST_DIN
));

114 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USBHSPHY_CTRL_REGOFFSET
, 0xffff,

115 (1UL << 
USBHSPHY_TEST_CLK
) |

116 (2UL << 
USBHSPHY_TEST_ADD
) |

117 (0xe0UL << 
USBHSPHY_TEST_DIN
));

119 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USBHSPHY_CTRL_REGOFFSET
, 0xffff,

120 (0xfUL << 
USBHSPHY_TEST_ADD
) |

121 (0xØUL << 
USBHSPHY_TEST_DIN
));

123 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USBHSPHY_CTRL_REGOFFSET
, 0xffff,

124 (1UL << 
USBHSPHY_TEST_CLK
) |

125 (0xfUL << 
USBHSPHY_TEST_ADD
) |

126 (0xØUL << 
USBHSPHY_TEST_DIN
));

128 i‡(
ox«s
->
u£_∂lb
)

129 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USB_CTRL_REGOFFSET
, 0xffff,

130 
USB_CLK_INTERNAL
 | 
USB_INT_CLK_PLLB
);

132 
	`ªgm≠_wrôe_bôs
(
ox«s
->
sysc⁄
, 
USB_CTRL_REGOFFSET
, 0xffff,

133 
USB_CLK_INTERNAL
 | 
USB_INT_CLK_REF300
);

135 i‡(
ox«s
->
u£_phya
) {

137 
	`ªgm≠_upd©e_bôs
(
ox«s
->
sysc⁄
, 
USB_CTRL_REGOFFSET
, 
USBAMUX_DEVICE
, 0);

141 
	`˛k_¥ï¨e_íabÀ
(
ox«s
->
˛k
);

142 
	}
}

144 
	$°›_ox«s_usb_ehci
(
ox«s_hcd
 *
ox«s
)

146 
	`ª£t_c⁄åﬁ_as£π
(
ox«s
->
r°_ho°
);

147 
	`ª£t_c⁄åﬁ_as£π
(
ox«s
->
r°_phya
);

148 
	`ª£t_c⁄åﬁ_as£π
(
ox«s
->
r°_phyb
);

150 i‡(
ox«s
->
u£_∂lb
) {

151 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
phyªf
);

152 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
ªf§c
);

154 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
˛k
);

155 
	}
}

157 
	$ehci_ox«s_ª£t
(
usb_hcd
 *
hcd
)

159 
	#txâfûl_tunög
 
ª£rved2
[0]

	)

161 
ehci_hcd
 *
ehci
;

162 
u32
 
tmp
;

163 
ªtvÆ
 = 
	`ehci_£tup
(
hcd
);

164 i‡(
ªtvÆ
)

165  
ªtvÆ
;

167 
ehci
 = 
	`hcd_to_ehci
(
hcd
);

168 
tmp
 = 
	`ehci_ªadl
(
ehci
, &ehci->
ªgs
->
txfûl_tunög
);

169 
tmp
 &= ~0x00ff0000;

170 
tmp
 |= 0x003f0000;

171 
tmp
 |= 0x16;

172 
	`ehci_wrôñ
(
ehci
, 
tmp
, &ehci->
ªgs
->
txfûl_tunög
);

174 
tmp
 = 
	`ehci_ªadl
(
ehci
, &ehci->
ªgs
->
txâfûl_tunög
);

175 
tmp
 |= 0x2;

176 
	`ehci_wrôñ
(
ehci
, 
tmp
, &ehci->
ªgs
->
txâfûl_tunög
);

178  
ªtvÆ
;

179 
	}
}

181 
	$ehci_ox«s_drv_¥obe
(
∂©f‹m_devi˚
 *
ofdev
)

183 
devi˚_node
 *
≈
 = 
ofdev
->
dev
.
of_node
;

184 
usb_hcd
 *
hcd
;

185 
ehci_hcd
 *
ehci
;

186 
ªsour˚
 
ªs
;

187 
ox«s_hcd
 *
ox«s
;

188 
úq
, 
îr
;

189 
ª£t_c⁄åﬁ
 *
r°c
;

191 i‡(
	`usb_dißbÀd
())

192  -
ENODEV
;

194 i‡(!
ofdev
->
dev
.
dma_mask
)

195 
ofdev
->
dev
.
dma_mask
 = &ofdev->dev.
cohîít_dma_mask
;

196 i‡(!
ofdev
->
dev
.
cohîít_dma_mask
)

197 
ofdev
->
dev
.
cohîít_dma_mask
 = 
	`DMA_BIT_MASK
(32);

199 
hcd
 = 
	`usb_¸óã_hcd
(&
ox«s_hc_drivî
, &
ofdev
->
dev
,

200 
	`dev_«me
(&
ofdev
->
dev
));

201 i‡(!
hcd
)

202  -
ENOMEM
;

204 
îr
 = 
	`of_addªss_to_ªsour˚
(
≈
, 0, &
ªs
);

205 i‡(
îr
)

206 
îr_ªs
;

208 
hcd
->
r§c_°¨t
 = 
ªs
.
°¨t
;

209 
hcd
->
r§c_Àn
 = 
	`ªsour˚_size
(&
ªs
);

211 
hcd
->
ªgs
 = 
	`devm_i‹em≠_ªsour˚
(&
ofdev
->
dev
, &
ªs
);

212 i‡(
	`IS_ERR
(
hcd
->
ªgs
)) {

213 
	`dev_îr
(&
ofdev
->
dev
, "devm_ioremap_resource failed\n");

214 
îr
 = 
	`PTR_ERR
(
hcd
->
ªgs
);

215 
îr_i‹em≠
;

218 
ox«s
 = (
ox«s_hcd
 *)
	`hcd_to_ehci
(
hcd
)->
¥iv
;

220 
ox«s
->
u£_∂lb
 = 
	`of_¥›îty_ªad_boﬁ
(
≈
, "oxsemi,ehci_use_pllb");

221 
ox«s
->
u£_phya
 = 
	`of_¥›îty_ªad_boﬁ
(
≈
, "oxsemi,ehci_use_phya");

223 
ox«s
->
sysc⁄
 = 
	`sysc⁄_ªgm≠_lookup_by_ph™dÀ
(
≈
, "oxsemi,sys-ctrl");

224 i‡(
	`IS_ERR
(
ox«s
->
sysc⁄
)) {

225 
îr
 = 
	`PTR_ERR
(
ox«s
->
sysc⁄
);

226 
îr_sysc⁄
;

229 
ox«s
->
˛k
 = 
	`of_˛k_gë_by_«me
(
≈
, "usb");

230 i‡(
	`IS_ERR
(
ox«s
->
˛k
)) {

231 
îr
 = 
	`PTR_ERR
(
ox«s
->
˛k
);

232 
îr_˛k
;

235 i‡(
ox«s
->
u£_∂lb
) {

236 
ox«s
->
ªf§c
 = 
	`of_˛k_gë_by_«me
(
≈
, "refsrc");

237 i‡(
	`IS_ERR
(
ox«s
->
ªf§c
)) {

238 
îr
 = 
	`PTR_ERR
(
ox«s
->
ªf§c
);

239 
îr_ªf§c
;

241 
ox«s
->
phyªf
 = 
	`of_˛k_gë_by_«me
(
≈
, "phyref");

242 i‡(
	`IS_ERR
(
ox«s
->
ªf§c
)) {

243 
îr
 = 
	`PTR_ERR
(
ox«s
->
ªf§c
);

244 
îr_phyªf
;

248 
ox«s
->
ªf§c
 = 
NULL
;

249 
ox«s
->
phyªf
 = 
NULL
;

252 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "host");

253 i‡(
	`IS_ERR
(
r°c
)) {

254 
îr
 = 
	`PTR_ERR
(
r°c
);

255 
îr_r°
;

257 
ox«s
->
r°_ho°
 = 
r°c
;

259 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "phya");

260 i‡(
	`IS_ERR
(
r°c
)) {

261 
îr
 = 
	`PTR_ERR
(
r°c
);

262 
îr_r°
;

264 
ox«s
->
r°_phya
 = 
r°c
;

266 
r°c
 = 
	`devm_ª£t_c⁄åﬁ_gë
(&
ofdev
->
dev
, "phyb");

267 i‡(
	`IS_ERR
(
r°c
)) {

268 
îr
 = 
	`PTR_ERR
(
r°c
);

269 
îr_r°
;

271 
ox«s
->
r°_phyb
 = 
r°c
;

273 
úq
 = 
	`úq_of_∑r£_™d_m≠
(
≈
, 0);

274 i‡(!
úq
) {

275 
	`dev_îr
(&
ofdev
->
dev
, "irq_of_parse_and_map failed\n");

276 
îr
 = -
EBUSY
;

277 
îr_úq
;

280 
hcd
->
has_â
 = 1;

281 
ehci
 = 
	`hcd_to_ehci
(
hcd
);

282 
ehci
->
ˇps
 = 
hcd
->
ªgs
;

284 
	`°¨t_ox«s_usb_ehci
(
ox«s
);

286 
îr
 = 
	`usb_add_hcd
(
hcd
, 
úq
, 
IRQF_SHARED
);

287 i‡(
îr
)

288 
îr_hcd
;

292 
îr_hcd
:

293 
	`°›_ox«s_usb_ehci
(
ox«s
);

294 
îr_úq
:

295 
îr_r°
:

296 i‡(
ox«s
->
phyªf
)

297 
	`˛k_put
(
ox«s
->
phyªf
);

298 
îr_phyªf
:

299 i‡(
ox«s
->
ªf§c
)

300 
	`˛k_put
(
ox«s
->
ªf§c
);

301 
îr_ªf§c
:

302 
	`˛k_put
(
ox«s
->
˛k
);

303 
îr_sysc⁄
:

304 
îr_˛k
:

305 
îr_i‹em≠
:

306 
îr_ªs
:

307 
	`usb_put_hcd
(
hcd
);

309  
îr
;

310 
	}
}

312 
	$ehci_ox«s_drv_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

314 
usb_hcd
 *
hcd
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

315 
ox«s_hcd
 *
ox«s
 = (ox«s_hcd *)
	`hcd_to_ehci
(
hcd
)->
¥iv
;

317 
	`usb_ªmove_hcd
(
hcd
);

318 i‡(
ox«s
->
u£_∂lb
) {

319 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
phyªf
);

320 
	`˛k_put
(
ox«s
->
phyªf
);

321 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
ªf§c
);

322 
	`˛k_put
(
ox«s
->
ªf§c
);

324 
	`˛k_dißbÀ_u≈ª∑ª
(
ox«s
->
˛k
);

325 
	`usb_put_hcd
(
hcd
);

328 
	}
}

330 c⁄° 
of_devi˚_id
 
	gox«s_ehci_dt_ids
[] = {

331 { .
com∑tibÀ
 = "plxtech,nas782x-ehci" },

335 
MODULE_DEVICE_TABLE
(
of
, 
ox«s_ehci_dt_ids
);

337 
∂©f‹m_drivî
 
	gehci_ox«s_drivî
 = {

338 .
¥obe
 = 
ehci_ox«s_drv_¥obe
,

339 .
	gªmove
 = 
ehci_ox«s_drv_ªmove
,

340 .
	gshutdown
 = 
usb_hcd_∂©f‹m_shutdown
,

341 .
	gdrivî
.
	g«me
 = "oxnas-ehci",

342 .
	gdrivî
.
	gof_m©ch_èbÀ
 = 
ox«s_ehci_dt_ids
,

345 c⁄° 
ehci_drivî_ovîrides
 
ox«s_ovîrides
 
	g__öôc⁄°
 = {

346 .
ª£t
 = 
ehci_ox«s_ª£t
,

347 .
	gexåa_¥iv_size
 = (
ox«s_hcd
),

350 
__öô
 
	$ehci_ox«s_öô
()

352 i‡(
	`usb_dißbÀd
())

353  -
ENODEV
;

355 
	`ehci_öô_drivî
(&
ox«s_hc_drivî
, &
ox«s_ovîrides
);

356  
	`∂©f‹m_drivî_ªgi°î
(&
ehci_ox«s_drivî
);

357 
	}
}

358 
moduÀ_öô
(
ehci_ox«s_öô
);

360 
__exô
 
	$ehci_ox«s_˛ónup
()

362 
	`∂©f‹m_drivî_uƒegi°î
(&
ehci_ox«s_drivî
);

363 
	}
}

364 
moduÀ_exô
(
ehci_ox«s_˛ónup
);

366 
MODULE_DESCRIPTION
(
DRIVER_DESC
);

367 
MODULE_ALIAS
("platform:oxnas-ehci");

368 
MODULE_LICENSE
("GPL");

	@linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/board.h

36 #i‚de‡
__ARCH_ARM_MACH_BOARD_H


37 
	#__ARCH_ARM_MACH_BOARD_H


	)

39 
	#MSDC_CD_PIN_EN
 (1 << 0Ë

	)

40 
	#MSDC_WP_PIN_EN
 (1 << 1Ë

	)

41 
	#MSDC_RST_PIN_EN
 (1 << 2Ë

	)

42 
	#MSDC_REMOVABLE
 (1 << 5Ë

	)

44 
	#MSDC_SMPL_RISING
 (0)

	)

45 
	#MSDC_SMPL_FALLING
 (1)

	)

47 
	#MSDC_CMD_PIN
 (0)

	)

48 
	#MSDC_DAT_PIN
 (1)

	)

49 
	#MSDC_CD_PIN
 (2)

	)

50 
	#MSDC_WP_PIN
 (3)

	)

51 
	#MSDC_RST_PIN
 (4)

	)

53 
	smsdc_hw
 {

54 
	m˛k_§c
;

55 
	mÊags
;

58 (*
	mc⁄fig_gpio_pö
)(
	mty≥
, 
	mpuŒ
);

61 
msdc_hw
 
msdc0_hw
;

	@linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/dbg.c

36 
	~<löux/vîsi⁄.h
>

37 
	~<löux/kî√l.h
>

38 
	~<löux/sched.h
>

39 
	~<löux/kthªad.h
>

40 
	~<löux/dñay.h
>

41 
	~<löux/moduÀ.h
>

42 
	~<löux/öô.h
>

43 
	~<löux/¥oc_fs.h
>

44 
	~<löux/°rög.h
>

45 
	~<löux/uac˚ss.h
>

47 
	~"dbg.h
"

48 
	~"mt6575_sd.h
"

49 
	~<löux/£q_fûe.h
>

51 
	gcmd_buf
[256];

54 
	gsd_debug_z⁄e
[4] = {

61 #i‡
deföed
(
MT6575_SD_DEBUG
)

63 
	#TICKS_ONE_MS
 (13000)

	)

64 
u32
 
	gg±_íabÀ
;

65 
u32
 
	gsdio_¥o_íabÀ
;

66 
u32
 
	gsdio_¥o_time
;

67 
sdio_¥ofûe
 
	gsdio_≥rfom™˚
 = {0};

70 
	$msdc_öô_g±
()

72 
GPT_CONFIG
 
c⁄fig
;

74 
c⁄fig
.
num
 = 
GPT6
;

75 
c⁄fig
.
mode
 = 
GPT_FREE_RUN
;

76 
c⁄fig
.
˛kSrc
 = 
GPT_CLK_SRC_SYS
;

77 
c⁄fig
.
˛kDiv
 = 
GPT_CLK_DIV_1
;

79 i‡(
	`GPT_C⁄fig
(
c⁄fig
Ë=
FALSE
)

82 
	`GPT_Sèπ
(
GPT6
);

83 
	}
}

86 
u32
 
	$msdc_time_ˇlc
(
u32
 
ﬁd_L32
, u32 
ﬁd_H32
, u32 
√w_L32
, u32 
√w_H32
)

88 
u32
 
ªt
 = 0;

90 i‡(
√w_H32
 =
ﬁd_H32
) {

91 
ªt
 = 
√w_L32
 - 
ﬁd_L32
;

92 } i‡(
√w_H32
 =(
ﬁd_H32
 + 1)) {

93 i‡(
√w_L32
 > 
ﬁd_L32
)

94 
	`¥ötk
("msd¯ﬁd_L<0x%x>Çew_L<0x%x>\n", 
ﬁd_L32
, 
√w_L32
);

95 
ªt
 = (0xfffffff‡- 
ﬁd_L32
);

96 
ªt
 +
√w_L32
;

98 
	`¥ötk
("msd¯ﬁd_H<0x%x>Çew_H<0x%x>\n", 
ﬁd_H32
, 
√w_H32
);

101  
ªt
;

102 
	}
}

104 
	$msdc_sdio_¥ofûe
(
sdio_¥ofûe
 *
ªsu…
)

106 
cmd_¥ofûe
 *
cmd
;

107 
u32
 
i
;

109 
	`¥ötk
("sdio ===Öerformance dump ===\n");

110 
	`¥ötk
("sdio ===ÅotalÉxecuteÅick<%d>Åime<%dms> Tx<%dB> Rx<%dB>\n",

111 
ªsu…
->
tŸÆ_tc
,Ñesu…->tŸÆ_t¯/ 
TICKS_ONE_MS
,

112 
ªsu…
->
tŸÆ_tx_byãs
,Ñesu…->
tŸÆ_rx_byãs
);

115 
cmd
 = &
ªsu…
->
cmd52_rx
;

116 
	`¥ötk
("sdiÿ==CMD52 Rx <%d>time†tick<%d> Max<%d> Mö<%d> Avî<%d>\n", 
cmd
->
cou¡
, cmd->
tŸ_tc
,

117 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
);

118 
cmd
 = &
ªsu…
->
cmd52_tx
;

119 
	`¥ötk
("sdiÿ==CMD52 Tx <%d>time†tick<%d> Max<%d> Mö<%d> Avî<%d>\n", 
cmd
->
cou¡
, cmd->
tŸ_tc
,

120 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
);

123 
i
 = 0; i < 512; i++) {

124 
cmd
 = &
ªsu…
->
cmd53_rx_byã
[
i
];

125 i‡(
cmd
->
cou¡
) {

126 
	`¥ötk
("sdio<%6d><%3dB>_Rx_<%9d><%9d><%6d><%6d>_<%9dB><%2dM>\n", 
cmd
->
cou¡
, 
i
, cmd->
tŸ_tc
,

127 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
,

128 
cmd
->
tŸ_byãs
, (cmd->tŸ_byã†/ 10Ë* 13 / (cmd->
tŸ_tc
 / 10));

131 
i
 = 0; i < 100; i++) {

132 
cmd
 = &
ªsu…
->
cmd53_rx_blk
[
i
];

133 i‡(
cmd
->
cou¡
) {

134 
	`¥ötk
("sdio<%6d><%3d>B_Rx_<%9d><%9d><%6d><%6d>_<%9dB><%2dM>\n", 
cmd
->
cou¡
, 
i
, cmd->
tŸ_tc
,

135 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
,

136 
cmd
->
tŸ_byãs
, (cmd->tŸ_byã†/ 10Ë* 13 / (cmd->
tŸ_tc
 / 10));

141 
i
 = 0; i < 512; i++) {

142 
cmd
 = &
ªsu…
->
cmd53_tx_byã
[
i
];

143 i‡(
cmd
->
cou¡
) {

144 
	`¥ötk
("sdio<%6d><%3dB>_Tx_<%9d><%9d><%6d><%6d>_<%9dB><%2dM>\n", 
cmd
->
cou¡
, 
i
, cmd->
tŸ_tc
,

145 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
,

146 
cmd
->
tŸ_byãs
, (cmd->tŸ_byã†/ 10Ë* 13 / (cmd->
tŸ_tc
 / 10));

149 
i
 = 0; i < 100; i++) {

150 
cmd
 = &
ªsu…
->
cmd53_tx_blk
[
i
];

151 i‡(
cmd
->
cou¡
) {

152 
	`¥ötk
("sdio<%6d><%3d>B_Tx_<%9d><%9d><%6d><%6d>_<%9dB><%2dM>\n", 
cmd
->
cou¡
, 
i
, cmd->
tŸ_tc
,

153 
cmd
->
max_tc
, cmd->
mö_tc
, cmd->
tŸ_tc
 / cmd->
cou¡
,

154 
cmd
->
tŸ_byãs
, (cmd->tŸ_byã†/ 10Ë* 13 / (cmd->
tŸ_tc
 / 10));

158 
	`¥ötk
("sdio ===Öerformance dump done ===\n");

159 
	}
}

162 
	$msdc_≥rf‹m™˚
(
u32
 
›code
, u32 
sizes
, u32 
bRx
, u32 
ticks
)

164 
sdio_¥ofûe
 *
ªsu…
 = &
sdio_≥rfom™˚
;

165 
cmd_¥ofûe
 *
cmd
;

166 
u32
 
block
;

168 i‡(
sdio_¥o_íabÀ
 == 0)

171 i‡(
›code
 == 52) {

172 
cmd
 = 
bRx
 ? &
ªsu…
->
cmd52_rx
 : &ªsu…->
cmd52_tx
;

173 } i‡(
›code
 == 53) {

174 i‡(
sizes
 < 512) {

175 
cmd
 = 
bRx
 ? &
ªsu…
->
cmd53_rx_byã
[
sizes
] : &ªsu…->
cmd53_tx_byã
[sizes];

177 
block
 = 
sizes
 / 512;

178 i‡(
block
 >= 99) {

179 
	`¥ötk
("cmd53Érror blocks\n");

183 
cmd
 = 
bRx
 ? &
ªsu…
->
cmd53_rx_blk
[
block
] : &ªsu…->
cmd53_tx_blk
[block];

190 i‡(
ticks
 > 
cmd
->
max_tc
)

191 
cmd
->
max_tc
 = 
ticks
;

192 i‡(
cmd
->
mö_tc
 =0 || 
ticks
 < cmd->min_tc)

193 
cmd
->
mö_tc
 = 
ticks
;

194 
cmd
->
tŸ_tc
 +
ticks
;

195 
cmd
->
tŸ_byãs
 +
sizes
;

196 
cmd
->
cou¡
++;

198 i‡(
bRx
)

199 
ªsu…
->
tŸÆ_rx_byãs
 +
sizes
;

201 
ªsu…
->
tŸÆ_tx_byãs
 +
sizes
;

202 
ªsu…
->
tŸÆ_tc
 +
ticks
;

205 i‡(
ªsu…
->
tŸÆ_tc
 >
sdio_¥o_time
 * 
TICKS_ONE_MS
 * 1000) {

206 
	`msdc_sdio_¥ofûe
(
ªsu…
);

207 
	`mem£t
(
ªsu…
, 0, (
sdio_¥ofûe
));

209 
	}
}

212 
	$msdc_debug_¥oc_ªad
(
£q_fûe
 *
s
, *
p
)

214 
	`£q_puts
(
s
, "\n=========================================\n");

215 
	`£q_puts
(
s
, "Index<0> + Id + Zone\n");

216 
	`£q_puts
(
s
, "-> PWR<9> WRN<8> | FIO<7> OPS<6> FUN<5> CFG<4> | INT<3> RSP<2> CMD<1> DMA<0>\n");

217 
	`£q_puts
(
s
, "->Écho 0 3 0x3ff >msdc_bebug -> host[3] debug zone setÅo 0x3ff\n");

218 
	`£q_¥ötf
(
s
, "-> MSDC[0] Z⁄e: 0x%.8x\n", 
sd_debug_z⁄e
[0]);

219 
	`£q_¥ötf
(
s
, "-> MSDC[1] Z⁄e: 0x%.8x\n", 
sd_debug_z⁄e
[1]);

220 
	`£q_¥ötf
(
s
, "-> MSDC[2] Z⁄e: 0x%.8x\n", 
sd_debug_z⁄e
[2]);

221 
	`£q_¥ötf
(
s
, "-> MSDC[3] Z⁄e: 0x%.8x\n", 
sd_debug_z⁄e
[3]);

223 
	`£q_puts
(
s
, "Index<3> + SDIO_PROFILE + TIME\n");

224 
	`£q_puts
(
s
, "->Écho 3 1 0x1E >msdc_bebug ->Énable sdio_profile, 30s\n");

225 
	`£q_¥ötf
(
s
, "-> SDIO_PROFILE<%d> TIME<%ds>\n", 
sdio_¥o_íabÀ
, 
sdio_¥o_time
);

226 
	`£q_puts
(
s
, "=========================================\n\n");

229 
	}
}

231 
ssize_t
 
	$msdc_debug_¥oc_wrôe
(
fûe
 *file,

232 c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
d©a
)

234 
ªt
;

236 
cmd
, 
p1
, 
p2
;

237 
id
, 
z⁄e
;

238 
mode
, 
size
;

240 i‡(
cou¡
 == 0)

242 i‡(
cou¡
 > 255)

243 
cou¡
 = 255;

245 i‡(
	`c›y_‰om_u£r
(
cmd_buf
, 
buf
, 
cou¡
))

246  -
EFAULT
;

248 
cmd_buf
[
cou¡
] = '\0';

249 
	`¥ötk
("msd¯Wrôê%s\n", 
cmd_buf
);

251 
	`ssˇnf
(
cmd_buf
, "%x %x %x", &
cmd
, &
p1
, &
p2
);

253 i‡(
cmd
 =
SD_TOOL_ZONE
) {

254 
id
 = 
p1
;

255 
z⁄e
 = 
p2
;

256 
z⁄e
 &= 0x3ff;

257 
	`¥ötk
("msd¯ho°_id<%d> z⁄e<0x%.8x>\n", 
id
, 
z⁄e
);

258 i‡(
id
 >= 0 && id <= 3) {

259 
sd_debug_z⁄e
[
id
] = 
z⁄e
;

260 } i‡(
id
 == 4) {

261 
sd_debug_z⁄e
[0] = sd_debug_z⁄e[1] = 
z⁄e
;

262 
sd_debug_z⁄e
[2] = sd_debug_z⁄e[3] = 
z⁄e
;

264 
	`¥ötk
("msdc host_idÉrror when set debug zone\n");

266 } i‡(
cmd
 =
SD_TOOL_SDIO_PROFILE
) {

267 i‡(
p1
 == 1) {

268 i‡(
g±_íabÀ
 == 0) {

270 
g±_íabÀ
 = 1;

272 
sdio_¥o_íabÀ
 = 1;

273 i‡(
p2
 == 0)

274 
p2
 = 1;

275 i‡(
p2
 >= 30)

276 
p2
 = 30;

277 
sdio_¥o_time
 = 
p2
;

278 } i‡(
p1
 == 0) {

280 
sdio_¥o_íabÀ
 = 0;

284  
cou¡
;

285 
	}
}

287 
	$msdc_debug_show
(
öode
 *öode, 
fûe
 *file)

289  
	`sögÀ_›í
(
fûe
, 
msdc_debug_¥oc_ªad
, 
NULL
);

290 
	}
}

292 c⁄° 
fûe_›î©i⁄s
 
	gmsdc_debug_f›s
 = {

293 .
ow√r
 = 
THIS_MODULE
,

294 .
	g›í
 = 
msdc_debug_show
,

295 .
	gªad
 = 
£q_ªad
,

296 .
	gwrôe
 = 
msdc_debug_¥oc_wrôe
,

297 .
	gŒ£ek
 = 
£q_l£ek
,

298 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

301 
	$msdc_debug_¥oc_öô
()

303 
	`¥oc_¸óã
("msdc_debug", 0660, 
NULL
, &
msdc_debug_f›s
);

304 
	}
}

305 
EXPORT_SYMBOL_GPL
(
msdc_debug_¥oc_öô
);

	@linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/dbg.h

35 #i‚de‡
__MT_MSDC_DEUBG__


36 
	#__MT_MSDC_DEUBG__


	)

39 
u32
 
sdio_¥o_íabÀ
;

41 
	scmd_¥ofûe
 {

42 
u32
 
	mmax_tc
;

43 
u32
 
	mmö_tc
;

44 
u32
 
	mtŸ_tc
;

45 
u32
 
	mtŸ_byãs
;

46 
u32
 
	mcou¡
;

50 
	ssdio_¥ofûe
 {

51 
u32
 
	mtŸÆ_tc
;

52 
u32
 
	mtŸÆ_tx_byãs
;

53 
u32
 
	mtŸÆ_rx_byãs
;

56 
cmd_¥ofûe
 
	mcmd52_tx
;

57 
cmd_¥ofûe
 
	mcmd52_rx
;

60 
cmd_¥ofûe
 
	mcmd53_tx_byã
[512];

61 
cmd_¥ofûe
 
	mcmd53_rx_byã
[512];

64 
cmd_¥ofûe
 
	mcmd53_tx_blk
[100];

65 
cmd_¥ofûe
 
	mcmd53_rx_blk
[100];

69 
	emsdc_dbg
 {

70 
	mSD_TOOL_ZONE
 = 0,

71 
	mSD_TOOL_DMA_SIZE
 = 1,

72 
	mSD_TOOL_PM_ENABLE
 = 2,

73 
	mSD_TOOL_SDIO_PROFILE
 = 3,

76 
	emsdc_mode
 {

77 
	mMODE_PIO
 = 0,

78 
	mMODE_DMA
 = 1,

79 
	mMODE_SIZE_DEP
 = 2,

83 
	#DBG_EVT_NONE
 (0Ë

	)

84 
	#DBG_EVT_DMA
 (1 << 0Ë

	)

85 
	#DBG_EVT_CMD
 (1 << 1Ë

	)

86 
	#DBG_EVT_RSP
 (1 << 2Ë

	)

87 
	#DBG_EVT_INT
 (1 << 3Ë

	)

88 
	#DBG_EVT_CFG
 (1 << 4Ë

	)

89 
	#DBG_EVT_FUC
 (1 << 5Ë

	)

90 
	#DBG_EVT_OPS
 (1 << 6Ë

	)

91 
	#DBG_EVT_FIO
 (1 << 7Ë

	)

92 
	#DBG_EVT_WRN
 (1 << 8Ë

	)

93 
	#DBG_EVT_PWR
 (1 << 9Ë

	)

94 
	#DBG_EVT_ALL
 (0xffffffff)

	)

96 
	#DBG_EVT_MASK
 (
DBG_EVT_ALL
)

	)

98 
sd_debug_z⁄e
[4];

99 
	#TAG
 "msdc"

	)

101 
	#BUG_ON
(
x
) \

103 i‡(
x
) { \

104 
	`¥ötk
("[BUG] %†LINE:%d FILE:%s\n", #x, 
__LINE__
, 
__FILE__
); \

108 } 0)

	)

111 
	#N_MSG
(
evt
, 
fmt
, 
¨gs
...)

	)

121 
	#ERR_MSG
(
fmt
, 
¨gs
...) \

123 
	`¥ötk
(
KERN_ERR
 
TAG
"%d -> "
fmt
" <- %s() : L<%d> PID<%s><0x%x>\n", \

124 
ho°
->
id
, ##
¨gs
, 
__FUNCTION__
, 
__LINE__
, 
cuºít
->
comm
, cuºít->
pid
); \

125 } 0);

	)

129 
	#INIT_MSG
(
fmt
, 
¨gs
...)

	)

130 
	#IRQ_MSG
(
fmt
, 
¨gs
...)

	)

132 
	#INIT_MSG
(
fmt
, 
¨gs
...) \

134 
	`¥ötk
(
KERN_ERR
 
TAG
"%d -> "
fmt
" <- %s() : L<%d> PID<%s><0x%x>\n", \

135 
ho°
->
id
, ##
¨gs
, 
__FUNCTION__
, 
__LINE__
, 
cuºít
->
comm
, cuºít->
pid
); \

136 } 0);

	)

139 
	#IRQ_MSG
(
fmt
, 
¨gs
...) \

141 
	`¥ötk
(
KERN_ERR
 
TAG
"%d -> "
fmt
" <- %s() : L<%d>\n", \

142 
ho°
->
id
, ##
¨gs
, 
__FUNCTION__
, 
__LINE__
); \

143 } 0);

	)

146 
msdc_debug_¥oc_öô
();

149 
msdc_öô_g±
();

150 
GPT_GëCou¡î64
(
UINT32
 *
˙tL32
, UINT32 *
˙tH32
);

152 
u32
 
msdc_time_ˇlc
(u32 
ﬁd_L32
, u32 
ﬁd_H32
, u32 
√w_L32
, u32 
√w_H32
);

153 
msdc_≥rf‹m™˚
(
u32
 
›code
, u32 
sizes
, u32 
bRx
, u32 
ticks
);

	@linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/mt6575_sd.h

36 #i‚de‡
MT6575_SD_H


37 
	#MT6575_SD_H


	)

39 
	~<löux/bô›s.h
>

40 
	~<löux/mmc/ho°.h
>

47 
	#REG_ADDR
(
x
Ë(
ba£
 + 
OFFSET_
##x)

	)

52 
	#MSDC_FIFO_SZ
 (128)

	)

53 
	#MSDC_FIFO_THD
 (64)

54 
	#MSDC_NUM
 (4)

	)

56 
	#MSDC_MS
 (0)

	)

57 
	#MSDC_SDMMC
 (1)

	)

59 
	#MSDC_MODE_UNKNOWN
 (0)

	)

60 
	#MSDC_MODE_PIO
 (1)

	)

61 
	#MSDC_MODE_DMA_BASIC
 (2)

	)

62 
	#MSDC_MODE_DMA_DESC
 (3)

	)

63 
	#MSDC_MODE_DMA_ENHANCED
 (4)

	)

64 
	#MSDC_MODE_MMC_STREAM
 (5)

	)

66 
	#MSDC_BUS_1BITS
 (0)

	)

67 
	#MSDC_BUS_4BITS
 (1)

	)

68 
	#MSDC_BUS_8BITS
 (2)

	)

70 
	#MSDC_BRUST_8B
 (3)

	)

71 
	#MSDC_BRUST_16B
 (4)

	)

72 
	#MSDC_BRUST_32B
 (5)

	)

73 
	#MSDC_BRUST_64B
 (6)

	)

75 
	#MSDC_PIN_PULL_NONE
 (0)

	)

76 
	#MSDC_PIN_PULL_DOWN
 (1)

	)

77 
	#MSDC_PIN_PULL_UP
 (2)

	)

78 
	#MSDC_PIN_KEEP
 (3)

	)

80 
	#MSDC_MAX_SCLK
 (48000000Ë

	)

81 
	#MSDC_MIN_SCLK
 (260000)

	)

83 
	#MSDC_AUTOCMD12
 (0x0001)

	)

84 
	#MSDC_AUTOCMD23
 (0x0002)

	)

85 
	#MSDC_AUTOCMD19
 (0x0003)

	)

87 
	#MSDC_EMMC_BOOTMODE0
 (0Ë

	)

88 
	#MSDC_EMMC_BOOTMODE1
 (1Ë

	)

91 
	mRESP_NONE
 = 0,

92 
	mRESP_R1
,

93 
	mRESP_R2
,

94 
	mRESP_R3
,

95 
	mRESP_R4
,

96 
	mRESP_R5
,

97 
	mRESP_R6
,

98 
	mRESP_R7
,

99 
	mRESP_R1B


105 
	#OFFSET_MSDC_CFG
 (0x0)

	)

106 
	#OFFSET_MSDC_IOCON
 (0x04)

	)

107 
	#OFFSET_MSDC_PS
 (0x08)

	)

108 
	#OFFSET_MSDC_INT
 (0x0c)

	)

109 
	#OFFSET_MSDC_INTEN
 (0x10)

	)

110 
	#OFFSET_MSDC_FIFOCS
 (0x14)

	)

111 
	#OFFSET_MSDC_TXDATA
 (0x18)

	)

112 
	#OFFSET_MSDC_RXDATA
 (0x1c)

	)

113 
	#OFFSET_SDC_CFG
 (0x30)

	)

114 
	#OFFSET_SDC_CMD
 (0x34)

	)

115 
	#OFFSET_SDC_ARG
 (0x38)

	)

116 
	#OFFSET_SDC_STS
 (0x3c)

	)

117 
	#OFFSET_SDC_RESP0
 (0x40)

	)

118 
	#OFFSET_SDC_RESP1
 (0x44)

	)

119 
	#OFFSET_SDC_RESP2
 (0x48)

	)

120 
	#OFFSET_SDC_RESP3
 (0x4c)

	)

121 
	#OFFSET_SDC_BLK_NUM
 (0x50)

	)

122 
	#OFFSET_SDC_CSTS
 (0x58)

	)

123 
	#OFFSET_SDC_CSTS_EN
 (0x5c)

	)

124 
	#OFFSET_SDC_DCRC_STS
 (0x60)

	)

125 
	#OFFSET_EMMC_CFG0
 (0x70)

	)

126 
	#OFFSET_EMMC_CFG1
 (0x74)

	)

127 
	#OFFSET_EMMC_STS
 (0x78)

	)

128 
	#OFFSET_EMMC_IOCON
 (0x7c)

	)

129 
	#OFFSET_SDC_ACMD_RESP
 (0x80)

	)

130 
	#OFFSET_SDC_ACMD19_TRG
 (0x84)

	)

131 
	#OFFSET_SDC_ACMD19_STS
 (0x88)

	)

132 
	#OFFSET_MSDC_DMA_SA
 (0x90)

	)

133 
	#OFFSET_MSDC_DMA_CA
 (0x94)

	)

134 
	#OFFSET_MSDC_DMA_CTRL
 (0x98)

	)

135 
	#OFFSET_MSDC_DMA_CFG
 (0x9c)

	)

136 
	#OFFSET_MSDC_DBG_SEL
 (0xa0)

	)

137 
	#OFFSET_MSDC_DBG_OUT
 (0xa4)

	)

138 
	#OFFSET_MSDC_PATCH_BIT
 (0xb0)

	)

139 
	#OFFSET_MSDC_PATCH_BIT1
 (0xb4)

	)

140 
	#OFFSET_MSDC_PAD_CTL0
 (0xe0)

	)

141 
	#OFFSET_MSDC_PAD_CTL1
 (0xe4)

	)

142 
	#OFFSET_MSDC_PAD_CTL2
 (0xe8)

	)

143 
	#OFFSET_MSDC_PAD_TUNE
 (0xec)

	)

144 
	#OFFSET_MSDC_DAT_RDDLY0
 (0xf0)

	)

145 
	#OFFSET_MSDC_DAT_RDDLY1
 (0xf4)

	)

146 
	#OFFSET_MSDC_HW_DBG
 (0xf8)

	)

147 
	#OFFSET_MSDC_VERSION
 (0x100)

	)

148 
	#OFFSET_MSDC_ECO_VER
 (0x104)

	)

155 
	#MSDC_CFG
 
	`REG_ADDR
(
MSDC_CFG
)

	)

156 
	#MSDC_IOCON
 
	`REG_ADDR
(
MSDC_IOCON
)

	)

157 
	#MSDC_PS
 
	`REG_ADDR
(
MSDC_PS
)

	)

158 
	#MSDC_INT
 
	`REG_ADDR
(
MSDC_INT
)

	)

159 
	#MSDC_INTEN
 
	`REG_ADDR
(
MSDC_INTEN
)

	)

160 
	#MSDC_FIFOCS
 
	`REG_ADDR
(
MSDC_FIFOCS
)

	)

161 
	#MSDC_TXDATA
 
	`REG_ADDR
(
MSDC_TXDATA
)

	)

162 
	#MSDC_RXDATA
 
	`REG_ADDR
(
MSDC_RXDATA
)

	)

163 
	#MSDC_PATCH_BIT0
 
	`REG_ADDR
(
MSDC_PATCH_BIT
)

	)

166 
	#SDC_CFG
 
	`REG_ADDR
(
SDC_CFG
)

	)

167 
	#SDC_CMD
 
	`REG_ADDR
(
SDC_CMD
)

	)

168 
	#SDC_ARG
 
	`REG_ADDR
(
SDC_ARG
)

	)

169 
	#SDC_STS
 
	`REG_ADDR
(
SDC_STS
)

	)

170 
	#SDC_RESP0
 
	`REG_ADDR
(
SDC_RESP0
)

	)

171 
	#SDC_RESP1
 
	`REG_ADDR
(
SDC_RESP1
)

	)

172 
	#SDC_RESP2
 
	`REG_ADDR
(
SDC_RESP2
)

	)

173 
	#SDC_RESP3
 
	`REG_ADDR
(
SDC_RESP3
)

	)

174 
	#SDC_BLK_NUM
 
	`REG_ADDR
(
SDC_BLK_NUM
)

	)

175 
	#SDC_CSTS
 
	`REG_ADDR
(
SDC_CSTS
)

	)

176 
	#SDC_CSTS_EN
 
	`REG_ADDR
(
SDC_CSTS_EN
)

	)

177 
	#SDC_DCRC_STS
 
	`REG_ADDR
(
SDC_DCRC_STS
)

	)

180 
	#EMMC_CFG0
 
	`REG_ADDR
(
EMMC_CFG0
)

	)

181 
	#EMMC_CFG1
 
	`REG_ADDR
(
EMMC_CFG1
)

	)

182 
	#EMMC_STS
 
	`REG_ADDR
(
EMMC_STS
)

	)

183 
	#EMMC_IOCON
 
	`REG_ADDR
(
EMMC_IOCON
)

	)

186 
	#SDC_ACMD_RESP
 
	`REG_ADDR
(
SDC_ACMD_RESP
)

	)

187 
	#SDC_ACMD19_TRG
 
	`REG_ADDR
(
SDC_ACMD19_TRG
)

	)

188 
	#SDC_ACMD19_STS
 
	`REG_ADDR
(
SDC_ACMD19_STS
)

	)

191 
	#MSDC_DMA_SA
 
	`REG_ADDR
(
MSDC_DMA_SA
)

	)

192 
	#MSDC_DMA_CA
 
	`REG_ADDR
(
MSDC_DMA_CA
)

	)

193 
	#MSDC_DMA_CTRL
 
	`REG_ADDR
(
MSDC_DMA_CTRL
)

	)

194 
	#MSDC_DMA_CFG
 
	`REG_ADDR
(
MSDC_DMA_CFG
)

	)

197 
	#MSDC_PAD_CTL0
 
	`REG_ADDR
(
MSDC_PAD_CTL0
)

	)

198 
	#MSDC_PAD_CTL1
 
	`REG_ADDR
(
MSDC_PAD_CTL1
)

	)

199 
	#MSDC_PAD_CTL2
 
	`REG_ADDR
(
MSDC_PAD_CTL2
)

	)

202 
	#MSDC_DAT_RDDLY0
 
	`REG_ADDR
(
MSDC_DAT_RDDLY0
)

	)

203 
	#MSDC_DAT_RDDLY1
 
	`REG_ADDR
(
MSDC_DAT_RDDLY1
)

	)

206 
	#MSDC_DBG_SEL
 
	`REG_ADDR
(
MSDC_DBG_SEL
)

	)

207 
	#MSDC_DBG_OUT
 
	`REG_ADDR
(
MSDC_DBG_OUT
)

	)

210 
	#MSDC_PATCH_BIT
 
	`REG_ADDR
(
MSDC_PATCH_BIT
)

	)

211 
	#MSDC_PATCH_BIT1
 
	`REG_ADDR
(
MSDC_PATCH_BIT1
)

	)

212 
	#MSDC_PAD_TUNE
 
	`REG_ADDR
(
MSDC_PAD_TUNE
)

	)

213 
	#MSDC_HW_DBG
 
	`REG_ADDR
(
MSDC_HW_DBG
)

	)

214 
	#MSDC_VERSION
 
	`REG_ADDR
(
MSDC_VERSION
)

	)

215 
	#MSDC_ECO_VER
 
	`REG_ADDR
(
MSDC_ECO_VER
Ë

	)

222 
	#MSDC_CFG_MODE
 (0x1 << 0Ë

	)

223 
	#MSDC_CFG_CKPDN
 (0x1 << 1Ë

	)

224 
	#MSDC_CFG_RST
 (0x1 << 2Ë

	)

225 
	#MSDC_CFG_PIO
 (0x1 << 3Ë

	)

226 
	#MSDC_CFG_CKDRVEN
 (0x1 << 4Ë

	)

227 
	#MSDC_CFG_BV18SDT
 (0x1 << 5Ë

	)

228 
	#MSDC_CFG_BV18PSS
 (0x1 << 6Ë

	)

229 
	#MSDC_CFG_CKSTB
 (0x1 << 7Ë

	)

230 
	#MSDC_CFG_CKDIV
 (0xf‡<< 8Ë

	)

231 
	#MSDC_CFG_CKMOD
 (0x3 << 16Ë

	)

234 
	#MSDC_IOCON_SDR104CKS
 (0x1 << 0Ë

	)

235 
	#MSDC_IOCON_RSPL
 (0x1 << 1Ë

	)

236 
	#MSDC_IOCON_DSPL
 (0x1 << 2Ë

	)

237 
	#MSDC_IOCON_DDLSEL
 (0x1 << 3Ë

	)

238 
	#MSDC_IOCON_DDR50CKD
 (0x1 << 4Ë

	)

239 
	#MSDC_IOCON_DSPLSEL
 (0x1 << 5Ë

	)

240 
	#MSDC_IOCON_D0SPL
 (0x1 << 16Ë

	)

241 
	#MSDC_IOCON_D1SPL
 (0x1 << 17Ë

	)

242 
	#MSDC_IOCON_D2SPL
 (0x1 << 18Ë

	)

243 
	#MSDC_IOCON_D3SPL
 (0x1 << 19Ë

	)

244 
	#MSDC_IOCON_D4SPL
 (0x1 << 20Ë

	)

245 
	#MSDC_IOCON_D5SPL
 (0x1 << 21Ë

	)

246 
	#MSDC_IOCON_D6SPL
 (0x1 << 22Ë

	)

247 
	#MSDC_IOCON_D7SPL
 (0x1 << 23Ë

	)

248 
	#MSDC_IOCON_RISCSZ
 (0x3 << 24Ë

	)

251 
	#MSDC_PS_CDEN
 (0x1 << 0Ë

	)

252 
	#MSDC_PS_CDSTS
 (0x1 << 1Ë

	)

253 
	#MSDC_PS_CDDEBOUNCE
 (0x‡<< 12Ë

	)

254 
	#MSDC_PS_DAT
 (0xf‡<< 16Ë

	)

255 
	#MSDC_PS_CMD
 (0x1 << 24Ë

	)

256 
	#MSDC_PS_WP
 (0x1UL << 31Ë

	)

259 
	#MSDC_INT_MMCIRQ
 (0x1 << 0Ë

	)

260 
	#MSDC_INT_CDSC
 (0x1 << 1Ë

	)

261 
	#MSDC_INT_ACMDRDY
 (0x1 << 3Ë

	)

262 
	#MSDC_INT_ACMDTMO
 (0x1 << 4Ë

	)

263 
	#MSDC_INT_ACMDCRCERR
 (0x1 << 5Ë

	)

264 
	#MSDC_INT_DMAQ_EMPTY
 (0x1 << 6Ë

	)

265 
	#MSDC_INT_SDIOIRQ
 (0x1 << 7Ë

	)

266 
	#MSDC_INT_CMDRDY
 (0x1 << 8Ë

	)

267 
	#MSDC_INT_CMDTMO
 (0x1 << 9Ë

	)

268 
	#MSDC_INT_RSPCRCERR
 (0x1 << 10Ë

	)

269 
	#MSDC_INT_CSTA
 (0x1 << 11Ë

	)

270 
	#MSDC_INT_XFER_COMPL
 (0x1 << 12Ë

	)

271 
	#MSDC_INT_DXFER_DONE
 (0x1 << 13Ë

	)

272 
	#MSDC_INT_DATTMO
 (0x1 << 14Ë

	)

273 
	#MSDC_INT_DATCRCERR
 (0x1 << 15Ë

	)

274 
	#MSDC_INT_ACMD19_DONE
 (0x1 << 16Ë

	)

277 
	#MSDC_INTEN_MMCIRQ
 (0x1 << 0Ë

	)

278 
	#MSDC_INTEN_CDSC
 (0x1 << 1Ë

	)

279 
	#MSDC_INTEN_ACMDRDY
 (0x1 << 3Ë

	)

280 
	#MSDC_INTEN_ACMDTMO
 (0x1 << 4Ë

	)

281 
	#MSDC_INTEN_ACMDCRCERR
 (0x1 << 5Ë

	)

282 
	#MSDC_INTEN_DMAQ_EMPTY
 (0x1 << 6Ë

	)

283 
	#MSDC_INTEN_SDIOIRQ
 (0x1 << 7Ë

	)

284 
	#MSDC_INTEN_CMDRDY
 (0x1 << 8Ë

	)

285 
	#MSDC_INTEN_CMDTMO
 (0x1 << 9Ë

	)

286 
	#MSDC_INTEN_RSPCRCERR
 (0x1 << 10Ë

	)

287 
	#MSDC_INTEN_CSTA
 (0x1 << 11Ë

	)

288 
	#MSDC_INTEN_XFER_COMPL
 (0x1 << 12Ë

	)

289 
	#MSDC_INTEN_DXFER_DONE
 (0x1 << 13Ë

	)

290 
	#MSDC_INTEN_DATTMO
 (0x1 << 14Ë

	)

291 
	#MSDC_INTEN_DATCRCERR
 (0x1 << 15Ë

	)

292 
	#MSDC_INTEN_ACMD19_DONE
 (0x1 << 16Ë

	)

295 
	#MSDC_FIFOCS_RXCNT
 (0xf‡<< 0Ë

	)

296 
	#MSDC_FIFOCS_TXCNT
 (0xf‡<< 16Ë

	)

297 
	#MSDC_FIFOCS_CLR
 (0x1UL << 31Ë

	)

300 
	#SDC_CFG_SDIOINTWKUP
 (0x1 << 0Ë

	)

301 
	#SDC_CFG_INSWKUP
 (0x1 << 1Ë

	)

302 
	#SDC_CFG_BUSWIDTH
 (0x3 << 16Ë

	)

303 
	#SDC_CFG_SDIO
 (0x1 << 19Ë

	)

304 
	#SDC_CFG_SDIOIDE
 (0x1 << 20Ë

	)

305 
	#SDC_CFG_INTATGAP
 (0x1 << 21Ë

	)

306 
	#SDC_CFG_DTOC
 (0xffUL << 24Ë

	)

309 
	#SDC_CMD_OPC
 (0x3‡<< 0Ë

	)

310 
	#SDC_CMD_BRK
 (0x1 << 6Ë

	)

311 
	#SDC_CMD_RSPTYP
 (0x7 << 7Ë

	)

312 
	#SDC_CMD_DTYP
 (0x3 << 11Ë

	)

313 
	#SDC_CMD_DTYP
 (0x3 << 11Ë

	)

314 
	#SDC_CMD_RW
 (0x1 << 13Ë

	)

315 
	#SDC_CMD_STOP
 (0x1 << 14Ë

	)

316 
	#SDC_CMD_GOIRQ
 (0x1 << 15Ë

	)

317 
	#SDC_CMD_BLKLEN
 (0xff‡<< 16Ë

	)

318 
	#SDC_CMD_AUTOCMD
 (0x3 << 28Ë

	)

319 
	#SDC_CMD_VOLSWTH
 (0x1 << 30Ë

	)

322 
	#SDC_STS_SDCBUSY
 (0x1 << 0Ë

	)

323 
	#SDC_STS_CMDBUSY
 (0x1 << 1Ë

	)

324 
	#SDC_STS_SWR_COMPL
 (0x1 << 31Ë

	)

327 
	#SDC_DCRC_STS_NEG
 (0x‡<< 8Ë

	)

328 
	#SDC_DCRC_STS_POS
 (0xf‡<< 0Ë

	)

331 
	#EMMC_CFG0_BOOTSTART
 (0x1 << 0Ë

	)

332 
	#EMMC_CFG0_BOOTSTOP
 (0x1 << 1Ë

	)

333 
	#EMMC_CFG0_BOOTMODE
 (0x1 << 2Ë

	)

334 
	#EMMC_CFG0_BOOTACKDIS
 (0x1 << 3Ë

	)

335 
	#EMMC_CFG0_BOOTWDLY
 (0x7 << 12Ë

	)

336 
	#EMMC_CFG0_BOOTSUPP
 (0x1 << 15Ë

	)

339 
	#EMMC_CFG1_BOOTDATTMC
 (0xffff‡<< 0Ë

	)

340 
	#EMMC_CFG1_BOOTACKTMC
 (0xfffUL << 20Ë

	)

343 
	#EMMC_STS_BOOTCRCERR
 (0x1 << 0Ë

	)

344 
	#EMMC_STS_BOOTACKERR
 (0x1 << 1Ë

	)

345 
	#EMMC_STS_BOOTDATTMO
 (0x1 << 2Ë

	)

346 
	#EMMC_STS_BOOTACKTMO
 (0x1 << 3Ë

	)

347 
	#EMMC_STS_BOOTUPSTATE
 (0x1 << 4Ë

	)

348 
	#EMMC_STS_BOOTACKRCV
 (0x1 << 5Ë

	)

349 
	#EMMC_STS_BOOTDATRCV
 (0x1 << 6Ë

	)

352 
	#EMMC_IOCON_BOOTRST
 (0x1 << 0Ë

	)

355 
	#SDC_ACMD19_TRG_TUNESEL
 (0x‡<< 0Ë

	)

358 
	#MSDC_DMA_CTRL_START
 (0x1 << 0Ë

	)

359 
	#MSDC_DMA_CTRL_STOP
 (0x1 << 1Ë

	)

360 
	#MSDC_DMA_CTRL_RESUME
 (0x1 << 2Ë

	)

361 
	#MSDC_DMA_CTRL_MODE
 (0x1 << 8Ë

	)

362 
	#MSDC_DMA_CTRL_LASTBUF
 (0x1 << 10Ë

	)

363 
	#MSDC_DMA_CTRL_BRUSTSZ
 (0x7 << 12Ë

	)

364 
	#MSDC_DMA_CTRL_XFERSZ
 (0xffffUL << 16)

	)

367 
	#MSDC_DMA_CFG_STS
 (0x1 << 0Ë

	)

368 
	#MSDC_DMA_CFG_DECSEN
 (0x1 << 1Ë

	)

369 
	#MSDC_DMA_CFG_BDCSERR
 (0x1 << 4Ë

	)

370 
	#MSDC_DMA_CFG_GPDCSERR
 (0x1 << 5Ë

	)

373 
	#MSDC_PATCH_BIT_WFLSMODE
 (0x1 << 0Ë

	)

374 
	#MSDC_PATCH_BIT_ODDSUPP
 (0x1 << 1Ë

	)

375 
	#MSDC_PATCH_BIT_CKGEN_CK
 (0x1 << 6Ë

	)

376 
	#MSDC_PATCH_BIT_IODSSEL
 (0x1 << 16Ë

	)

377 
	#MSDC_PATCH_BIT_IOINTSEL
 (0x1 << 17Ë

	)

378 
	#MSDC_PATCH_BIT_BUSYDLY
 (0x‡<< 18Ë

	)

379 
	#MSDC_PATCH_BIT_WDOD
 (0x‡<< 22Ë

	)

380 
	#MSDC_PATCH_BIT_IDRTSEL
 (0x1 << 26Ë

	)

381 
	#MSDC_PATCH_BIT_CMDFSEL
 (0x1 << 27Ë

	)

382 
	#MSDC_PATCH_BIT_INTDLSEL
 (0x1 << 28Ë

	)

383 
	#MSDC_PATCH_BIT_SPCPUSH
 (0x1 << 29Ë

	)

384 
	#MSDC_PATCH_BIT_DECRCTMO
 (0x1 << 30Ë

	)

387 
	#MSDC_PATCH_BIT1_WRDAT_CRCS
 (0x7 << 3)

	)

388 
	#MSDC_PATCH_BIT1_CMD_RSP
 (0x7 << 0)

	)

391 
	#MSDC_PAD_CTL0_CLKDRVN
 (0x7 << 0Ë

	)

392 
	#MSDC_PAD_CTL0_CLKDRVP
 (0x7 << 4Ë

	)

393 
	#MSDC_PAD_CTL0_CLKSR
 (0x1 << 8Ë

	)

394 
	#MSDC_PAD_CTL0_CLKPD
 (0x1 << 16Ë

	)

395 
	#MSDC_PAD_CTL0_CLKPU
 (0x1 << 17Ë

	)

396 
	#MSDC_PAD_CTL0_CLKSMT
 (0x1 << 18Ë

	)

397 
	#MSDC_PAD_CTL0_CLKIES
 (0x1 << 19Ë

	)

398 
	#MSDC_PAD_CTL0_CLKTDSEL
 (0x‡<< 20Ë

	)

399 
	#MSDC_PAD_CTL0_CLKRDSEL
 (0xffUL << 24Ë

	)

402 
	#MSDC_PAD_CTL1_CMDDRVN
 (0x7 << 0Ë

	)

403 
	#MSDC_PAD_CTL1_CMDDRVP
 (0x7 << 4Ë

	)

404 
	#MSDC_PAD_CTL1_CMDSR
 (0x1 << 8Ë

	)

405 
	#MSDC_PAD_CTL1_CMDPD
 (0x1 << 16Ë

	)

406 
	#MSDC_PAD_CTL1_CMDPU
 (0x1 << 17Ë

	)

407 
	#MSDC_PAD_CTL1_CMDSMT
 (0x1 << 18Ë

	)

408 
	#MSDC_PAD_CTL1_CMDIES
 (0x1 << 19Ë

	)

409 
	#MSDC_PAD_CTL1_CMDTDSEL
 (0x‡<< 20Ë

	)

410 
	#MSDC_PAD_CTL1_CMDRDSEL
 (0xffUL << 24Ë

	)

413 
	#MSDC_PAD_CTL2_DATDRVN
 (0x7 << 0Ë

	)

414 
	#MSDC_PAD_CTL2_DATDRVP
 (0x7 << 4Ë

	)

415 
	#MSDC_PAD_CTL2_DATSR
 (0x1 << 8Ë

	)

416 
	#MSDC_PAD_CTL2_DATPD
 (0x1 << 16Ë

	)

417 
	#MSDC_PAD_CTL2_DATPU
 (0x1 << 17Ë

	)

418 
	#MSDC_PAD_CTL2_DATIES
 (0x1 << 19Ë

	)

419 
	#MSDC_PAD_CTL2_DATSMT
 (0x1 << 18Ë

	)

420 
	#MSDC_PAD_CTL2_DATTDSEL
 (0x‡<< 20Ë

	)

421 
	#MSDC_PAD_CTL2_DATRDSEL
 (0xffUL << 24Ë

	)

424 
	#MSDC_PAD_TUNE_DATWRDLY
 (0x1F << 0Ë

	)

425 
	#MSDC_PAD_TUNE_DATRRDLY
 (0x1F << 8Ë

	)

426 
	#MSDC_PAD_TUNE_CMDRDLY
 (0x1F << 16Ë

	)

427 
	#MSDC_PAD_TUNE_CMDRRDLY
 (0x1FUL << 22Ë

	)

428 
	#MSDC_PAD_TUNE_CLKTXDLY
 (0x1FUL << 27Ë

	)

431 
	#MSDC_DAT_RDDLY0_D0
 (0x1F << 0Ë

	)

432 
	#MSDC_DAT_RDDLY0_D1
 (0x1F << 8Ë

	)

433 
	#MSDC_DAT_RDDLY0_D2
 (0x1F << 16Ë

	)

434 
	#MSDC_DAT_RDDLY0_D3
 (0x1F << 24Ë

	)

436 
	#MSDC_DAT_RDDLY1_D4
 (0x1F << 0Ë

	)

437 
	#MSDC_DAT_RDDLY1_D5
 (0x1F << 8Ë

	)

438 
	#MSDC_DAT_RDDLY1_D6
 (0x1F << 16Ë

	)

439 
	#MSDC_DAT_RDDLY1_D7
 (0x1F << 24Ë

	)

441 
	#MSDC_CKGEN_MSDC_DLY_SEL
 (0x1F << 10)

	)

442 
	#MSDC_INT_DAT_LATCH_CK_SEL
 (0x7 << 7)

	)

443 
	#MSDC_CKGEN_MSDC_CK_SEL
 (0x1 << 6)

	)

444 
	#CARD_READY_FOR_DATA
 (1 << 8)

	)

445 
	#CARD_CURRENT_STATE
(
x
Ë((x & 0x00001E00Ë>> 9)

	)

450 
	sgpd
 {

451 
u32
 
	mhwo
:1;

452 
u32
 
	mbdp
:1;

453 
u32
 
	mrsv0
:6;

454 
u32
 
	mchksum
:8;

455 
u32
 
	möå
:1;

456 
u32
 
	mrsv1
:15;

457 *
	m√xt
;

458 *
	m±r
;

459 
u32
 
	mbuÊí
:16;

460 
u32
 
	mexéí
:8;

461 
u32
 
	mrsv2
:8;

462 
u32
 
	m¨g
;

463 
u32
 
	mblknum
;

464 
u32
 
	mcmd
;

467 
	sbd
 {

468 
u32
 
	meﬁ
:1;

469 
u32
 
	mrsv0
:7;

470 
u32
 
	mchksum
:8;

471 
u32
 
	mrsv1
:1;

472 
u32
 
	mblk∑d
:1;

473 
u32
 
	mdw∑d
:1;

474 
u32
 
	mrsv2
:13;

475 *
	m√xt
;

476 *
	m±r
;

477 
u32
 
	mbuÊí
:16;

478 
u32
 
	mrsv3
:16;

485 
	smsdc_cfg_ªg
 {

486 
u32
 
	mmsdc
:1;

487 
u32
 
	mckpwn
:1;

488 
u32
 
	mr°
:1;

489 
u32
 
	mpio
:1;

490 
u32
 
	mckdrví
:1;

491 
u32
 
	m°¨t18v
:1;

492 
u32
 
	m∑ss18v
:1;

493 
u32
 
	mck°b
:1;

494 
u32
 
	mckdiv
:8;

495 
u32
 
	mckmod
:2;

496 
u32
 
	m∑d
:14;

499 
	smsdc_ioc⁄_ªg
 {

500 
u32
 
	msdr104ck£l
:1;

501 
u32
 
	mrsm∂
:1;

502 
u32
 
	mdsm∂
:1;

503 
u32
 
	mddly£l
:1;

504 
u32
 
	mddr50ckd
:1;

505 
u32
 
	md•l£l
:1;

506 
u32
 
	m∑d1
:10;

507 
u32
 
	md0•l
:1;

508 
u32
 
	md1•l
:1;

509 
u32
 
	md2•l
:1;

510 
u32
 
	md3•l
:1;

511 
u32
 
	md4•l
:1;

512 
u32
 
	md5•l
:1;

513 
u32
 
	md6•l
:1;

514 
u32
 
	md7•l
:1;

515 
u32
 
	mriscsz
:1;

516 
u32
 
	m∑d2
:7;

519 
	smsdc_ps_ªg
 {

520 
u32
 
	mcdí
:1;

521 
u32
 
	mcd°s
:1;

522 
u32
 
	m∑d1
:10;

523 
u32
 
	mcddeboun˚
:4;

524 
u32
 
	md©
:8;

525 
u32
 
	mcmd
:1;

526 
u32
 
	m∑d2
:6;

527 
u32
 
	mwp
:1;

530 
	smsdc_öt_ªg
 {

531 
u32
 
	mmmcúq
:1;

532 
u32
 
	mcdsc
:1;

533 
u32
 
	m∑d1
:1;

534 
u32
 
	m©ocmdrdy
:1;

535 
u32
 
	m©ocmdtmo
:1;

536 
u32
 
	m©ocmd¸c
:1;

537 
u32
 
	mdmaqem±y
:1;

538 
u32
 
	msdioúq
:1;

539 
u32
 
	mcmdrdy
:1;

540 
u32
 
	mcmdtmo
:1;

541 
u32
 
	mr•¸c
:1;

542 
u32
 
	mc°a
:1;

543 
u32
 
	mx„rcomp
:1;

544 
u32
 
	mdx„rd⁄e
:1;

545 
u32
 
	md©tmo
:1;

546 
u32
 
	md©¸c
:1;

547 
u32
 
	m©ocmd19d⁄e
:1;

548 
u32
 
	m∑d2
:15;

551 
	smsdc_öãn_ªg
 {

552 
u32
 
	mmmcúq
:1;

553 
u32
 
	mcdsc
:1;

554 
u32
 
	m∑d1
:1;

555 
u32
 
	m©ocmdrdy
:1;

556 
u32
 
	m©ocmdtmo
:1;

557 
u32
 
	m©ocmd¸c
:1;

558 
u32
 
	mdmaqem±y
:1;

559 
u32
 
	msdioúq
:1;

560 
u32
 
	mcmdrdy
:1;

561 
u32
 
	mcmdtmo
:1;

562 
u32
 
	mr•¸c
:1;

563 
u32
 
	mc°a
:1;

564 
u32
 
	mx„rcomp
:1;

565 
u32
 
	mdx„rd⁄e
:1;

566 
u32
 
	md©tmo
:1;

567 
u32
 
	md©¸c
:1;

568 
u32
 
	m©ocmd19d⁄e
:1;

569 
u32
 
	m∑d2
:15;

572 
	smsdc_fifocs_ªg
 {

573 
u32
 
	mrx˙t
:8;

574 
u32
 
	m∑d1
:8;

575 
u32
 
	mtx˙t
:8;

576 
u32
 
	m∑d2
:7;

577 
u32
 
	m˛r
:1;

580 
	smsdc_txd©_ªg
 {

581 
u32
 
	mvÆ
;

584 
	smsdc_rxd©_ªg
 {

585 
u32
 
	mvÆ
;

588 
	ssdc_cfg_ªg
 {

589 
u32
 
	msdiowkup
:1;

590 
u32
 
	möswkup
:1;

591 
u32
 
	m∑d1
:14;

592 
u32
 
	mbuswidth
:2;

593 
u32
 
	m∑d2
:1;

594 
u32
 
	msdio
:1;

595 
u32
 
	msdioide
:1;

596 
u32
 
	mötblkg≠
:1;

597 
u32
 
	m∑d4
:2;

598 
u32
 
	mdtoc
:8;

601 
	ssdc_cmd_ªg
 {

602 
u32
 
	mcmd
:6;

603 
u32
 
	mbrk
:1;

604 
u32
 
	mr•typ
:3;

605 
u32
 
	m∑d1
:1;

606 
u32
 
	mdty≥
:2;

607 
u32
 
	mrw
:1;

608 
u32
 
	m°›
:1;

609 
u32
 
	mgoúq
:1;

610 
u32
 
	mblkÀn
:12;

611 
u32
 
	m©ocmd
:2;

612 
u32
 
	mvﬁswth
:1;

613 
u32
 
	m∑d2
:1;

616 
	ssdc_¨g_ªg
 {

617 
u32
 
	m¨g
;

620 
	ssdc_°s_ªg
 {

621 
u32
 
	msdcbusy
:1;

622 
u32
 
	mcmdbusy
:1;

623 
u32
 
	m∑d
:29;

624 
u32
 
	mswrcm∂
:1;

627 
	ssdc_ª•0_ªg
 {

628 
u32
 
	mvÆ
;

631 
	ssdc_ª•1_ªg
 {

632 
u32
 
	mvÆ
;

635 
	ssdc_ª•2_ªg
 {

636 
u32
 
	mvÆ
;

639 
	ssdc_ª•3_ªg
 {

640 
u32
 
	mvÆ
;

643 
	ssdc_blknum_ªg
 {

644 
u32
 
	mnum
;

647 
	ssdc_c°s_ªg
 {

648 
u32
 
	m°s
;

651 
	ssdc_c°£n_ªg
 {

652 
u32
 
	m°s
;

655 
	ssdc_d©¸c°s_ªg
 {

656 
u32
 
	md©¸c°s
:8;

657 
u32
 
	mddr¸c°s
:4;

658 
u32
 
	m∑d
:20;

661 
	semmc_cfg0_ªg
 {

662 
u32
 
	mboŸ°¨t
:1;

663 
u32
 
	mboŸ°›
:1;

664 
u32
 
	mboŸmode
:1;

665 
u32
 
	m∑d1
:9;

666 
u32
 
	mboŸwaidly
:3;

667 
u32
 
	mboŸsuµ
:1;

668 
u32
 
	m∑d2
:16;

671 
	semmc_cfg1_ªg
 {

672 
u32
 
	mboŸ¸˘mc
:16;

673 
u32
 
	m∑d
:4;

674 
u32
 
	mboŸacktmc
:12;

677 
	semmc_°s_ªg
 {

678 
u32
 
	mboŸ¸˚º
:1;

679 
u32
 
	mboŸackîr
:1;

680 
u32
 
	mboŸd©tmo
:1;

681 
u32
 
	mboŸacktmo
:1;

682 
u32
 
	mboŸup°©e
:1;

683 
u32
 
	mboŸackrcv
:1;

684 
u32
 
	mboŸd©rcv
:1;

685 
u32
 
	m∑d
:25;

688 
	semmc_ioc⁄_ªg
 {

689 
u32
 
	mboŸr°
:1;

690 
u32
 
	m∑d
:31;

693 
	smsdc_acmd_ª•_ªg
 {

694 
u32
 
	mvÆ
;

697 
	smsdc_acmd19_åg_ªg
 {

698 
u32
 
	mtu√£l
:4;

699 
u32
 
	m∑d
:28;

702 
	smsdc_acmd19_°s_ªg
 {

703 
u32
 
	mvÆ
;

706 
	smsdc_dma_ß_ªg
 {

707 
u32
 
	maddr
;

710 
	smsdc_dma_ˇ_ªg
 {

711 
u32
 
	maddr
;

714 
	smsdc_dma_˘æ_ªg
 {

715 
u32
 
	m°¨t
:1;

716 
u32
 
	m°›
:1;

717 
u32
 
	mªsume
:1;

718 
u32
 
	m∑d1
:5;

719 
u32
 
	mmode
:1;

720 
u32
 
	m∑d2
:1;

721 
u32
 
	mœ°buf
:1;

722 
u32
 
	m∑d3
:1;

723 
u32
 
	mbru°sz
:3;

724 
u32
 
	m∑d4
:1;

725 
u32
 
	mx„rsz
:16;

728 
	smsdc_dma_cfg_ªg
 {

729 
u32
 
	m°©us
:1;

730 
u32
 
	mdec£n
:1;

731 
u32
 
	m∑d1
:2;

732 
u32
 
	mbdc£n
:1;

733 
u32
 
	mgpdc£n
:1;

734 
u32
 
	m∑d2
:26;

737 
	smsdc_dbg_£l_ªg
 {

738 
u32
 
	m£l
:16;

739 
u32
 
	m∑d2
:16;

742 
	smsdc_dbg_out_ªg
 {

743 
u32
 
	mvÆ
;

746 
	smsdc_∑d_˘l0_ªg
 {

747 
u32
 
	m˛kdrvn
:3;

748 
u32
 
	mrsv0
:1;

749 
u32
 
	m˛kdrvp
:3;

750 
u32
 
	mrsv1
:1;

751 
u32
 
	m˛k§
:1;

752 
u32
 
	mrsv2
:7;

753 
u32
 
	m˛kpd
:1;

754 
u32
 
	m˛kpu
:1;

755 
u32
 
	m˛ksmt
:1;

756 
u32
 
	m˛kõs
:1;

757 
u32
 
	m˛ktd£l
:4;

758 
u32
 
	m˛krd£l
:8;

761 
	smsdc_∑d_˘l1_ªg
 {

762 
u32
 
	mcmddrvn
:3;

763 
u32
 
	mrsv0
:1;

764 
u32
 
	mcmddrvp
:3;

765 
u32
 
	mrsv1
:1;

766 
u32
 
	mcmd§
:1;

767 
u32
 
	mrsv2
:7;

768 
u32
 
	mcmdpd
:1;

769 
u32
 
	mcmdpu
:1;

770 
u32
 
	mcmdsmt
:1;

771 
u32
 
	mcmdõs
:1;

772 
u32
 
	mcmdtd£l
:4;

773 
u32
 
	mcmdrd£l
:8;

776 
	smsdc_∑d_˘l2_ªg
 {

777 
u32
 
	md©drvn
:3;

778 
u32
 
	mrsv0
:1;

779 
u32
 
	md©drvp
:3;

780 
u32
 
	mrsv1
:1;

781 
u32
 
	md©§
:1;

782 
u32
 
	mrsv2
:7;

783 
u32
 
	md©pd
:1;

784 
u32
 
	md©pu
:1;

785 
u32
 
	md©smt
:1;

786 
u32
 
	md©õs
:1;

787 
u32
 
	md©td£l
:4;

788 
u32
 
	md©rd£l
:8;

791 
	smsdc_∑d_tu√_ªg
 {

792 
u32
 
	mwºxdly
:3;

793 
u32
 
	m∑d1
:5;

794 
u32
 
	mrdrxdly
:8;

795 
u32
 
	m∑d2
:16;

798 
	smsdc_d©_rddly0
 {

799 
u32
 
	md©0
:5;

800 
u32
 
	mrsv0
:3;

801 
u32
 
	md©1
:5;

802 
u32
 
	mrsv1
:3;

803 
u32
 
	md©2
:5;

804 
u32
 
	mrsv2
:3;

805 
u32
 
	md©3
:5;

806 
u32
 
	mrsv3
:3;

809 
	smsdc_d©_rddly1
 {

810 
u32
 
	md©4
:5;

811 
u32
 
	mrsv4
:3;

812 
u32
 
	md©5
:5;

813 
u32
 
	mrsv5
:3;

814 
u32
 
	md©6
:5;

815 
u32
 
	mrsv6
:3;

816 
u32
 
	md©7
:5;

817 
u32
 
	mrsv7
:3;

820 
	smsdc_hw_dbg_ªg
 {

821 
u32
 
	mdbg0£l
:8;

822 
u32
 
	mdbg1£l
:6;

823 
u32
 
	m∑d1
:2;

824 
u32
 
	mdbg2£l
:6;

825 
u32
 
	m∑d2
:2;

826 
u32
 
	mdbg3£l
:6;

827 
u32
 
	m∑d3
:2;

830 
	smsdc_vîsi⁄_ªg
 {

831 
u32
 
	mvÆ
;

834 
	smsdc_eco_vî_ªg
 {

835 
u32
 
	mvÆ
;

838 
	smsdc_ªgs
 {

839 
msdc_cfg_ªg
 
	mmsdc_cfg
;

840 
msdc_ioc⁄_ªg
 
	mmsdc_ioc⁄
;

841 
msdc_ps_ªg
 
	mmsdc_ps
;

842 
msdc_öt_ªg
 
	mmsdc_öt
;

843 
msdc_öãn_ªg
 
	mmsdc_öãn
;

844 
msdc_fifocs_ªg
 
	mmsdc_fifocs
;

845 
msdc_txd©_ªg
 
	mmsdc_txd©
;

846 
msdc_rxd©_ªg
 
	mmsdc_rxd©
;

847 
u32
 
	mrsv1
[4];

848 
sdc_cfg_ªg
 
	msdc_cfg
;

849 
sdc_cmd_ªg
 
	msdc_cmd
;

850 
sdc_¨g_ªg
 
	msdc_¨g
;

851 
sdc_°s_ªg
 
	msdc_°s
;

852 
sdc_ª•0_ªg
 
	msdc_ª•0
;

853 
sdc_ª•1_ªg
 
	msdc_ª•1
;

854 
sdc_ª•2_ªg
 
	msdc_ª•2
;

855 
sdc_ª•3_ªg
 
	msdc_ª•3
;

856 
sdc_blknum_ªg
 
	msdc_blknum
;

857 
u32
 
	mrsv2
[1];

858 
sdc_c°s_ªg
 
	msdc_c°s
;

859 
sdc_c°£n_ªg
 
	msdc_c°£n
;

860 
sdc_d©¸c°s_ªg
 
	msdc_d¸c°a
;

861 
u32
 
	mrsv3
[3];

862 
emmc_cfg0_ªg
 
	memmc_cfg0
;

863 
emmc_cfg1_ªg
 
	memmc_cfg1
;

864 
emmc_°s_ªg
 
	memmc_°s
;

865 
emmc_ioc⁄_ªg
 
	memmc_ioc⁄
;

866 
msdc_acmd_ª•_ªg
 
	macmd_ª•
;

867 
msdc_acmd19_åg_ªg
 
	macmd19_åg
;

868 
msdc_acmd19_°s_ªg
 
	macmd19_°s
;

869 
u32
 
	mrsv4
[1];

870 
msdc_dma_ß_ªg
 
	mdma_ß
;

871 
msdc_dma_ˇ_ªg
 
	mdma_ˇ
;

872 
msdc_dma_˘æ_ªg
 
	mdma_˘æ
;

873 
msdc_dma_cfg_ªg
 
	mdma_cfg
;

874 
msdc_dbg_£l_ªg
 
	mdbg_£l
;

875 
msdc_dbg_out_ªg
 
	mdbg_out
;

876 
u32
 
	mrsv5
[2];

877 
u32
 
	m∑tch0
;

878 
u32
 
	m∑tch1
;

879 
u32
 
	mrsv6
[10];

880 
msdc_∑d_˘l0_ªg
 
	m∑d_˘l0
;

881 
msdc_∑d_˘l1_ªg
 
	m∑d_˘l1
;

882 
msdc_∑d_˘l2_ªg
 
	m∑d_˘l2
;

883 
msdc_∑d_tu√_ªg
 
	m∑d_tu√
;

884 
msdc_d©_rddly0
 
	md©_rddly0
;

885 
msdc_d©_rddly1
 
	md©_rddly1
;

886 
msdc_hw_dbg_ªg
 
	mhw_dbg
;

887 
u32
 
	mrsv7
[1];

888 
msdc_vîsi⁄_ªg
 
	mvîsi⁄
;

889 
msdc_eco_vî_ªg
 
	meco_vî
;

892 
	smsdc_dma
 {

893 
u32
 
	msgÀn
;

894 
sˇâîli°
 *
	msg
;

895 
u8
 
	mmode
;

897 
gpd
 *
	mgpd
;

898 
bd
 *
	mbd
;

899 
dma_addr_t
 
	mgpd_addr
;

900 
dma_addr_t
 
	mbd_addr
;

903 
	smsdc_ho°
 {

904 
msdc_hw
 *
	mhw
;

906 
mmc_ho°
 *
	mmmc
;

907 
mmc_comm™d
 *
	mcmd
;

908 
mmc_d©a
 *
	md©a
;

909 
mmc_ªque°
 *
	mmrq
;

910 
	mcmd_r•
;

912 
	mîr‹
;

913 
•ölock_t
 
	mlock
;

914 
£m≠h‹e
 
	m£m
;

916 
u32
 
	mblksz
;

917 
__iomem
 *
	mba£
;

918 
	mid
;

919 
	mpwr_ªf
;

921 
u32
 
	mx„r_size
;

923 
msdc_dma
 
	mdma
;

924 
u32
 
	mdma_x„r_size
;

926 
u32
 
	mtimeout_ns
;

927 
u32
 
	mtimeout_˛ks
;

929 
	múq
;

931 
dñayed_w‹k
 
	mˇrd_dñayw‹k
;

933 
com∂ëi⁄
 
	mcmd_d⁄e
;

934 
com∂ëi⁄
 
	mx„r_d⁄e
;

935 
pm_mesßge
 
	mpm_°©e
;

937 
u32
 
	mm˛k
;

938 
u32
 
	mh˛k
;

939 
u32
 
	ms˛k
;

940 
u8
 
	mc‹e_˛k⁄
;

941 
u8
 
	mˇrd_˛k⁄
;

942 
u8
 
	mc‹e_powî
;

943 
u8
 
	mpowî_mode
;

944 
u8
 
	mˇrd_ö£πed
;

945 
u8
 
	msu•íd
;

946 
u8
 
	m≠p_cmd
;

947 
u32
 
	m≠p_cmd_¨g
;

950 
	#sdr_ªad8
(
ªg
Ë
	`ªadb
‘eg)

	)

951 
	#sdr_ªad32
(
ªg
Ë
	`ªadl
‘eg)

	)

952 
	#sdr_wrôe8
(
ªg
, 
vÆ
Ë
	`wrôeb
(vÆ,Ñeg)

	)

953 
	#sdr_wrôe32
(
ªg
, 
vÆ
Ë
	`wrôñ
(vÆ,Ñeg)

	)

955 
ölöe
 
	$sdr_£t_bôs
(
__iomem
 *
ªg
, 
u32
 
bs
)

957 
u32
 
vÆ
 = 
	`ªadl
(
ªg
);

959 
vÆ
 |
bs
;

960 
	`wrôñ
(
vÆ
, 
ªg
);

961 
	}
}

963 
ölöe
 
	$sdr_˛r_bôs
(
__iomem
 *
ªg
, 
u32
 
bs
)

965 
u32
 
vÆ
 = 
	`ªadl
(
ªg
);

967 
vÆ
 &~
bs
;

968 
	`wrôñ
(
vÆ
, 
ªg
);

969 
	}
}

971 
ölöe
 
	$sdr_£t_fõld
(
__iomem
 *
ªg
, 
u32
 
fõld
, u32 
vÆ
)

973 
tv
 = 
	`ªadl
(
ªg
);

975 
tv
 &~
fõld
;

976 
tv
 |((
vÆ
Ë<< (
	`ffs
(()
fõld
) - 1));

977 
	`wrôñ
(
tv
, 
ªg
);

978 
	}
}

980 
ölöe
 
	$sdr_gë_fõld
(
__iomem
 *
ªg
, 
u32
 
fõld
, u32 *
vÆ
)

982 
tv
 = 
	`ªadl
(
ªg
);

983 *
vÆ
 = ((
tv
 & 
fõld
Ë>> (
	`ffs
(()field) - 1));

984 
	}
}

	@linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/sd.c

36 
	~<löux/moduÀ.h
>

37 
	~<löux/dñay.h
>

38 
	~<löux/dma-m≠pög.h
>

39 
	~<löux/•ölock.h
>

40 
	~<löux/∂©f‹m_devi˚.h
>

41 
	~<löux/öãºu±.h
>

43 
	~<löux/mmc/ho°.h
>

44 
	~<löux/mmc/mmc.h
>

45 
	~<löux/mmc/sd.h
>

46 
	~<löux/mmc/sdio.h
>

48 
	~<asm/mach-ølök/ølök_ªgs.h
>

50 
	~"bﬂrd.h
"

51 
	~"dbg.h
"

52 
	~"mt6575_sd.h
"

55 #ifde‡
CONFIG_SOC_MT7621


56 
	#RALINK_SYSCTL_BASE
 0xbe000000

	)

57 
	#RALINK_MSDC_BASE
 0xbe130000

	)

59 
	#RALINK_SYSCTL_BASE
 0xb0000000

	)

60 
	#RALINK_MSDC_BASE
 0xb0130000

	)

62 
	#IRQ_SDC
 22

	)

64 
	#DRV_NAME
 "mtk-sd"

	)

66 #i‡
deföed
(
CONFIG_SOC_MT7620
)

67 
	#HOST_MAX_MCLK
 (48000000Ë

	)

68 #ñi‡
deföed
(
CONFIG_SOC_MT7621
)

69 
	#HOST_MAX_MCLK
 (50000000Ë

	)

71 
	#HOST_MIN_MCLK
 (260000)

	)

73 
	#HOST_MAX_BLKSZ
 (2048)

	)

75 
	#MSDC_OCR_AVAIL
 (
MMC_VDD_28_29
 | 
MMC_VDD_29_30
 | 
MMC_VDD_30_31
 | 
MMC_VDD_31_32
 | 
MMC_VDD_32_33
)

	)

77 
	#GPIO_PULL_DOWN
 (0)

	)

78 
	#GPIO_PULL_UP
 (1)

	)

81 
	#MSDC_CLKSRC_REG
 (0xf100000C)

	)

82 
	#PDN_REG
 (0xF1000010)

	)

85 
	#DEFAULT_DEBOUNCE
 (8Ë

	)

86 
	#DEFAULT_DTOC
 (40Ë

	)

88 
	#CMD_TIMEOUT
 (
HZ
 / 10Ë

	)

89 
	#DAT_TIMEOUT
 (
HZ
 / 2 * 5Ë

	)

91 
	#MAX_DMA_CNT
 (64 * 1024 - 512Ë

	)

93 
	#MAX_GPD_NUM
 (1 + 1Ë

	)

94 
	#MAX_BD_NUM
 (1024)

	)

95 
	#MAX_BD_PER_GPD
 (
MAX_BD_NUM
)

	)

97 
	#MAX_HW_SGMTS
 (
MAX_BD_NUM
)

	)

98 
	#MAX_PHY_SGMTS
 (
MAX_BD_NUM
)

	)

99 
	#MAX_SGMT_SZ
 (
MAX_DMA_CNT
)

	)

100 
	#MAX_REQ_SZ
 (
MAX_SGMT_SZ
 * 8)

	)

102 
	gcd_a˘ive_low
 = 1;

105 
	#PERI_MSDC0_PDN
 (15)

	)

112 
	gg_˛k_g©e
 = 0;

113 
	#msdc_g©e_˛ock
(
id
) \

115 
g_˛k_g©e
 &~(1 << ((
id
Ë+ 
PERI_MSDC0_PDN
)); \

116 } 0)

	)

118 
	#msdc_ung©e_˛ock
(
id
) \

120 
g_˛k_g©e
 |1 << ((
id
Ë+ 
PERI_MSDC0_PDN
); \

121 } 0)

	)

124 
	$msdc_˛k_°©us
(*
°©us
)

126 *
°©us
 = 
g_˛k_g©e
;

127 
	}
}

131 
msdc_hw
 
	gmsdc0_hw
 = {

132 .
˛k_§c
 = 0,

133 .
	gÊags
 = 
MSDC_CD_PIN_EN
 | 
MSDC_REMOVABLE
,

139 
	gmsdc_r•
[] = {

151 
	#msdc_txfifo˙t
(Ë((
	`sdr_ªad32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_TXCNT
Ë>> 16)

	)

152 
	#msdc_rxfifo˙t
(Ë((
	`sdr_ªad32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_RXCNT
Ë>> 0)

	)

153 
	#msdc_fifo_wrôe32
(
v
Ë
	`sdr_wrôe32
(
MSDC_TXDATA
, (v))

	)

154 
	#msdc_fifo_wrôe8
(
v
Ë
	`sdr_wrôe8
(
MSDC_TXDATA
, (v))

	)

155 
	#msdc_fifo_ªad32
(Ë
	`sdr_ªad32
(
MSDC_RXDATA
)

	)

156 
	#msdc_fifo_ªad8
(Ë
	`sdr_ªad8
(
MSDC_RXDATA
)

	)

158 
	#msdc_dma_⁄
(Ë
	`sdr_˛r_bôs
(
MSDC_CFG
, 
MSDC_CFG_PIO
)

	)

160 
	#msdc_ªåy
(
ex¥
, 
ªåy
, 
˙t
) \

162 
backup
 = 
˙t
; \

163 
ªåy
) { \

164 i‡(!(
ex¥
)) \

166 i‡(
˙t
-- == 0) { \

167 
ªåy
--; 
	`mdñay
(1); 
˙t
 = 
backup
; \

170 
	`WARN_ON
(
ªåy
 == 0); \

171 } 0)

	)

173 
	$msdc_ª£t_hw
(
msdc_ho°
 *
ho°
)

175 
__iomem
 *
ba£
 = 
ho°
->base;

177 
	`sdr_£t_bôs
(
MSDC_CFG
, 
MSDC_CFG_RST
);

178 
	`sdr_ªad32
(
MSDC_CFG
Ë& 
MSDC_CFG_RST
)

179 
	`˝u_ªœx
();

180 
	}
}

182 
	#msdc_˛r_öt
() \

184 vﬁ©ûê
u32
 
vÆ
 = 
	`sdr_ªad32
(
MSDC_INT
); \

185 
	`sdr_wrôe32
(
MSDC_INT
, 
vÆ
); \

186 } 0)

	)

188 
	#msdc_˛r_fifo
() \

190 
ªåy
 = 3, 
˙t
 = 1000; \

191 
	`sdr_£t_bôs
(
MSDC_FIFOCS
, 
MSDC_FIFOCS_CLR
); \

192 
	`msdc_ªåy
(
	`sdr_ªad32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_CLR
, 
ªåy
, 
˙t
); \

193 } 0)

	)

195 
	#msdc_úq_ßve
(
vÆ
) \

197 
vÆ
 = 
	`sdr_ªad32
(
MSDC_INTEN
); \

198 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
vÆ
); \

199 } 0)

	)

201 
	#msdc_úq_ª°‹e
(
vÆ
) \

203 
	`sdr_£t_bôs
(
MSDC_INTEN
, 
vÆ
); \

204 } 0)

	)

207 #i‡
deföed
(
CONFIG_SOC_MT7620
)

208 
u32
 
	gh˛ks
[] = {48000000};

209 #ñi‡
deföed
(
CONFIG_SOC_MT7621
)

210 
u32
 
	gh˛ks
[] = {50000000};

217 
	#msdc_vc‹e_⁄
(
ho°
) \

219 
	`INIT_MSG
("[+]VMCÑef. cou¡<%d>", ++
ho°
->
pwr_ªf
); \

220 ()
	`hwPowîOn
(
MT65XX_POWER_LDO_VMC
, 
VOL_3300
, "SD"); \

221 } 0)

	)

222 
	#msdc_vc‹e_off
(
ho°
) \

224 
	`INIT_MSG
("[-]VMCÑef. cou¡<%d>", --
ho°
->
pwr_ªf
); \

225 ()
	`hwPowîDown
(
MT65XX_POWER_LDO_VMC
, "SD"); \

226 } 0)

	)

232 
	#msdc_vdd_⁄
(
ho°
) \

234 ()
	`hwPowîOn
(
MT65XX_POWER_LDO_VMCH
, 
VOL_3300
, "SD"); \

235 } 0)

	)

236 
	#msdc_vdd_off
(
ho°
) \

238 ()
	`hwPowîDown
(
MT65XX_POWER_LDO_VMCH
, "SD"); \

239 } 0)

	)

241 
	#sdc_is_busy
(Ë(
	`sdr_ªad32
(
SDC_STS
Ë& 
SDC_STS_SDCBUSY
)

	)

242 
	#sdc_is_cmd_busy
(Ë(
	`sdr_ªad32
(
SDC_STS
Ë& 
SDC_STS_CMDBUSY
)

	)

244 
	#sdc_£nd_cmd
(
cmd
, 
¨g
) \

246 
	`sdr_wrôe32
(
SDC_ARG
, (
¨g
)); \

247 
	`sdr_wrôe32
(
SDC_CMD
, (
cmd
)); \

248 } 0)

	)

252 
	#is_ˇrd_¥e£¡
(
h
Ë(((
msdc_ho°
 *)(h))->
ˇrd_ö£πed
)

	)

255 #i‚de‡
__ASSEMBLY__


256 
	#PHYSADDR
(
a
Ë((()◊)Ë& 0x1fffffff)

	)

258 
	#PHYSADDR
(
a
Ë(◊Ë& 0x1fffffff)

	)

261 
msdc_do_comm™d
(
msdc_ho°
 *
ho°
,

262 
mmc_comm™d
 *
cmd
,

263 
tu√
,

264 
timeout
);

266 
msdc_tu√_cmdr•
(
msdc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
);

268 #ifde‡
MT6575_SD_DEBUG


269 
	$msdc_dump_ˇrd_°©us
(
msdc_ho°
 *
ho°
, 
u32
 
°©us
)

273 *
°©e
[] = {

292 i‡(
°©us
 & 
R1_OUT_OF_RANGE
)

293 
	`N_MSG
(
RSP
, "[CARD_STATUS] Out of Range");

294 i‡(
°©us
 & 
R1_ADDRESS_ERROR
)

295 
	`N_MSG
(
RSP
, "[CARD_STATUS] Address Error");

296 i‡(
°©us
 & 
R1_BLOCK_LEN_ERROR
)

297 
	`N_MSG
(
RSP
, "[CARD_STATUS] Block Len Error");

298 i‡(
°©us
 & 
R1_ERASE_SEQ_ERROR
)

299 
	`N_MSG
(
RSP
, "[CARD_STATUS] Erase Seq Error");

300 i‡(
°©us
 & 
R1_ERASE_PARAM
)

301 
	`N_MSG
(
RSP
, "[CARD_STATUS] Erase Param");

302 i‡(
°©us
 & 
R1_WP_VIOLATION
)

303 
	`N_MSG
(
RSP
, "[CARD_STATUS] WP Violation");

304 i‡(
°©us
 & 
R1_CARD_IS_LOCKED
)

305 
	`N_MSG
(
RSP
, "[CARD_STATUS] Card is Locked");

306 i‡(
°©us
 & 
R1_LOCK_UNLOCK_FAILED
)

307 
	`N_MSG
(
RSP
, "[CARD_STATUS] Lock/Unlock Failed");

308 i‡(
°©us
 & 
R1_COM_CRC_ERROR
)

309 
	`N_MSG
(
RSP
, "[CARD_STATUS] Command CRC Error");

310 i‡(
°©us
 & 
R1_ILLEGAL_COMMAND
)

311 
	`N_MSG
(
RSP
, "[CARD_STATUS] Illegal Command");

312 i‡(
°©us
 & 
R1_CARD_ECC_FAILED
)

313 
	`N_MSG
(
RSP
, "[CARD_STATUS] Card ECC Failed");

314 i‡(
°©us
 & 
R1_CC_ERROR
)

315 
	`N_MSG
(
RSP
, "[CARD_STATUS] CC Error");

316 i‡(
°©us
 & 
R1_ERROR
)

317 
	`N_MSG
(
RSP
, "[CARD_STATUS] Error");

318 i‡(
°©us
 & 
R1_UNDERRUN
)

319 
	`N_MSG
(
RSP
, "[CARD_STATUS] Underrun");

320 i‡(
°©us
 & 
R1_OVERRUN
)

321 
	`N_MSG
(
RSP
, "[CARD_STATUS] Overrun");

322 i‡(
°©us
 & 
R1_CID_CSD_OVERWRITE
)

323 
	`N_MSG
(
RSP
, "[CARD_STATUS] CID/CSD Overwrite");

324 i‡(
°©us
 & 
R1_WP_ERASE_SKIP
)

325 
	`N_MSG
(
RSP
, "[CARD_STATUS] WP Eraser Skip");

326 i‡(
°©us
 & 
R1_CARD_ECC_DISABLED
)

327 
	`N_MSG
(
RSP
, "[CARD_STATUS] Card ECC Disabled");

328 i‡(
°©us
 & 
R1_ERASE_RESET
)

329 
	`N_MSG
(
RSP
, "[CARD_STATUS] Erase Reset");

330 i‡(
°©us
 & 
R1_READY_FOR_DATA
)

331 
	`N_MSG
(
RSP
, "[CARD_STATUS] Ready for Data");

332 i‡(
°©us
 & 
R1_SWITCH_ERROR
)

333 
	`N_MSG
(
RSP
, "[CARD_STATUS] SwitchÉrror");

334 i‡(
°©us
 & 
R1_APP_CMD
)

335 
	`N_MSG
(
RSP
, "[CARD_STATUS] App Command");

337 
	`N_MSG
(
RSP
, "[CARD_STATUS] '%s' Sèã", 
°©e
[
	`R1_CURRENT_STATE
(
°©us
)]);

338 
	}
}

340 
	$msdc_dump_o¸_ªg
(
msdc_ho°
 *
ho°
, 
u32
 
ª•
)

342 i‡(
ª•
 & (1 << 7))

343 
	`N_MSG
(
RSP
, "[OCR] Low Voltage Range");

344 i‡(
ª•
 & (1 << 15))

345 
	`N_MSG
(
RSP
, "[OCR] 2.7-2.8 volt");

346 i‡(
ª•
 & (1 << 16))

347 
	`N_MSG
(
RSP
, "[OCR] 2.8-2.9 volt");

348 i‡(
ª•
 & (1 << 17))

349 
	`N_MSG
(
RSP
, "[OCR] 2.9-3.0 volt");

350 i‡(
ª•
 & (1 << 18))

351 
	`N_MSG
(
RSP
, "[OCR] 3.0-3.1 volt");

352 i‡(
ª•
 & (1 << 19))

353 
	`N_MSG
(
RSP
, "[OCR] 3.1-3.2 volt");

354 i‡(
ª•
 & (1 << 20))

355 
	`N_MSG
(
RSP
, "[OCR] 3.2-3.3 volt");

356 i‡(
ª•
 & (1 << 21))

357 
	`N_MSG
(
RSP
, "[OCR] 3.3-3.4 volt");

358 i‡(
ª•
 & (1 << 22))

359 
	`N_MSG
(
RSP
, "[OCR] 3.4-3.5 volt");

360 i‡(
ª•
 & (1 << 23))

361 
	`N_MSG
(
RSP
, "[OCR] 3.5-3.6 volt");

362 i‡(
ª•
 & (1 << 24))

363 
	`N_MSG
(
RSP
, "[OCR] SwitchingÅo 1.8V Accepted (S18A)");

364 i‡(
ª•
 & (1 << 30))

365 
	`N_MSG
(
RSP
, "[OCR] Card Capacity Status (CCS)");

366 i‡(
ª•
 & (1 << 31))

367 
	`N_MSG
(
RSP
, "[OCR] Card Power Up Status (Idle)");

369 
	`N_MSG
(
RSP
, "[OCR] Card Power Up Status (Busy)");

370 
	}
}

372 
	$msdc_dump_rˇ_ª•
(
msdc_ho°
 *
ho°
, 
u32
 
ª•
)

374 
u32
 
°©us
 = (((
ª•
 >> 15) & 0x1) << 23) |

375 (((
ª•
 >> 14) & 0x1) << 22) |

376 (((
ª•
 >> 13) & 0x1) << 19) |

377 (
ª•
 & 0x1fff);

379 
	`N_MSG
(
RSP
, "[RCA] 0x%.4x", 
ª•
 >> 16);

380 
	`msdc_dump_ˇrd_°©us
(
ho°
, 
°©us
);

381 
	}
}

383 
	$msdc_dump_io_ª•
(
msdc_ho°
 *
ho°
, 
u32
 
ª•
)

385 
u32
 
Êags
 = (
ª•
 >> 8) & 0xFF;

387 *
°©e
[] = {"DIS", "CMD", "TRN", "RFU"};

389 i‡(
Êags
 & (1 << 7))

390 
	`N_MSG
(
RSP
, "[IO] COM_CRC_ERR");

391 i‡(
Êags
 & (1 << 6))

392 
	`N_MSG
(
RSP
, "[IO] Illgal command");

393 i‡(
Êags
 & (1 << 3))

394 
	`N_MSG
(
RSP
, "[IO] Error");

395 i‡(
Êags
 & (1 << 2))

396 
	`N_MSG
(
RSP
, "[IO] RFU");

397 i‡(
Êags
 & (1 << 1))

398 
	`N_MSG
(
RSP
, "[IO] FunctionÇumberÉrror");

399 i‡(
Êags
 & (1 << 0))

400 
	`N_MSG
(
RSP
, "[IO] Out ofÑange");

402 
	`N_MSG
(
RSP
, "[IO] Sèã: %s, D©a:0x%x", 
°©e
[(
ª•
 >> 12) & 0x3],Ñesp & 0xFF);

403 
	}
}

406 
	$msdc_£t_timeout
(
msdc_ho°
 *
ho°
, 
u32
 
ns
, u32 
˛ks
)

408 
__iomem
 *
ba£
 = 
ho°
->base;

409 
u32
 
timeout
, 
˛k_ns
;

411 
ho°
->
timeout_ns
 = 
ns
;

412 
ho°
->
timeout_˛ks
 = 
˛ks
;

414 
˛k_ns
 = 1000000000UL / 
ho°
->
s˛k
;

415 
timeout
 = 
ns
 / 
˛k_ns
 + 
˛ks
;

416 
timeout
 =Åimeout >> 16;

417 
timeout
 =Åimeout > 1 ?Åimeout - 1 : 0;

418 
timeout
 =Åimeout > 255 ? 255 :Åimeout;

420 
	`sdr_£t_fõld
(
SDC_CFG
, 
SDC_CFG_DTOC
, 
timeout
);

422 
	`N_MSG
(
OPS
, "SetÑead dataÅimeout: %dns %dclks -> %d x 65536 cycles",

423 
ns
, 
˛ks
, 
timeout
 + 1);

424 
	}
}

426 
	$msdc_èskÀt_ˇrd
(
w‹k_°ru˘
 *
w‹k
)

428 
msdc_ho°
 *
ho°
 = (msdc_ho° *)
	`c⁄èöî_of
(
w‹k
,

429 
msdc_ho°
, 
ˇrd_dñayw‹k
.
w‹k
);

430 
__iomem
 *
ba£
 = 
ho°
->base;

431 
u32
 
ö£πed
;

432 
u32
 
°©us
 = 0;

435 
	`•ö_lock
(&
ho°
->
lock
);

437 
°©us
 = 
	`sdr_ªad32
(
MSDC_PS
);

438 i‡(
cd_a˘ive_low
)

439 
ö£πed
 = (
°©us
 & 
MSDC_PS_CDSTS
) ? 0 : 1;

441 
ö£πed
 = (
°©us
 & 
MSDC_PS_CDSTS
) ? 1 : 0;

444 
ch™ge
 = 
ho°
->
ˇrd_ö£πed
 ^ 
ö£πed
;

445 
ho°
->
ˇrd_ö£πed
 = 
ö£πed
;

447 i‡(
ch™ge
 && !
ho°
->
su•íd
) {

448 i‡(
ö£πed
)

449 
ho°
->
mmc
->
f_max
 = 
HOST_MAX_MCLK
;

450 
	`mmc_dëe˘_ch™ge
(
ho°
->
mmc
, 
	`m£cs_to_jiffõs
(20));

453 
ho°
->
ˇrd_ö£πed
 = 
ö£πed
;

455 i‡(!
ho°
->
su•íd
) {

456 
ho°
->
mmc
->
f_max
 = 
HOST_MAX_MCLK
;

457 
	`mmc_dëe˘_ch™ge
(
ho°
->
mmc
, 
	`m£cs_to_jiffõs
(20));

460 
	`IRQ_MSG
("ˇrd found<%s>", 
ö£πed
 ? "inserted" : "removed");

463 
	`•ö_u∆ock
(&
ho°
->
lock
);

464 
	}
}

468 
u8
 
	g˛k_§c_bô
[4] = {

472 
	$msdc_£À˘_˛k§c
(
msdc_ho°
 *
ho°
, 
˛k§c
)

474 
u32
 
vÆ
;

475 
__iomem
 *
ba£
 = 
ho°
->base;

477 
	`BUG_ON
(
˛k§c
 > 3);

478 
	`INIT_MSG
("£à˛ock sour˚Åÿ<%d>", 
˛k§c
);

480 
vÆ
 = 
	`sdr_ªad32
(
MSDC_CLKSRC_REG
);

481 i‡(
	`sdr_ªad32
(
MSDC_ECO_VER
) >= 4) {

482 
vÆ
 &~(0x3 << 
˛k_§c_bô
[
ho°
->
id
]);

483 
vÆ
 |
˛k§c
 << 
˛k_§c_bô
[
ho°
->
id
];

485 
vÆ
 &~0x3; vÆ |
˛k§c
;

487 
	`sdr_wrôe32
(
MSDC_CLKSRC_REG
, 
vÆ
);

489 
ho°
->
h˛k
 = 
h˛ks
[
˛k§c
];

490 
ho°
->
hw
->
˛k_§c
 = 
˛k§c
;

491 
	}
}

494 
	$msdc_£t_m˛k
(
msdc_ho°
 *
ho°
, 
ddr
, 
hz
)

497 
__iomem
 *
ba£
 = 
ho°
->base;

498 
u32
 
mode
;

499 
u32
 
Êags
;

500 
u32
 
div
;

501 
u32
 
s˛k
;

502 
u32
 
h˛k
 = 
ho°
->hclk;

505 i‡(!
hz
) {

507 
	`msdc_ª£t_hw
(
ho°
);

511 
	`msdc_úq_ßve
(
Êags
);

513 i‡(
ddr
) {

514 
mode
 = 0x2;

515 i‡(
hz
 >(
h˛k
 >> 2)) {

516 
div
 = 1;

517 
s˛k
 = 
h˛k
 >> 2;

519 
div
 = (
h˛k
 + ((
hz
 << 2) - 1)) / (hz << 2);

520 
s˛k
 = (
h˛k
 >> 2Ë/ 
div
;

522 } i‡(
hz
 >
h˛k
) {

523 
mode
 = 0x1;

524 
div
 = 0;

525 
s˛k
 = 
h˛k
;

527 
mode
 = 0x0;

528 i‡(
hz
 >(
h˛k
 >> 1)) {

529 
div
 = 0;

530 
s˛k
 = 
h˛k
 >> 1;

532 
div
 = (
h˛k
 + ((
hz
 << 2) - 1)) / (hz << 2);

533 
s˛k
 = (
h˛k
 >> 2Ë/ 
div
;

538 
	`sdr_£t_fõld
(
MSDC_CFG
, 
MSDC_CFG_CKMOD
, 
mode
);

539 
	`sdr_£t_fõld
(
MSDC_CFG
, 
MSDC_CFG_CKDIV
, 
div
);

542 !(
	`sdr_ªad32
(
MSDC_CFG
Ë& 
MSDC_CFG_CKSTB
))

543 
	`˝u_ªœx
();

545 
ho°
->
s˛k
 = sclk;

546 
ho°
->
m˛k
 = 
hz
;

547 
	`msdc_£t_timeout
(
ho°
, ho°->
timeout_ns
, ho°->
timeout_˛ks
);

549 
	`INIT_MSG
("================");

550 
	`INIT_MSG
("!!! Së<%dKHz> Sour˚<%dKHz> -> s˛k<%dKHz>", 
hz
 / 1000, 
h˛k
 / 1000, 
s˛k
 / 1000);

551 
	`INIT_MSG
("================");

553 
	`msdc_úq_ª°‹e
(
Êags
);

554 
	}
}

557 
	$msdc_ab‹t_d©a
(
msdc_ho°
 *
ho°
)

559 
__iomem
 *
ba£
 = 
ho°
->base;

560 
mmc_comm™d
 *
°›
 = 
ho°
->
mrq
->stop;

562 
	`ERR_MSG
("NeedÅo Abort.");

564 
	`msdc_ª£t_hw
(
ho°
);

565 
	`msdc_˛r_fifo
();

566 
	`msdc_˛r_öt
();

570 i‡(
°›
) {

571 
	`ERR_MSG
("°› whíáb‹àCMD<%d>", 
°›
->
›code
);

572 ()
	`msdc_do_comm™d
(
ho°
, 
°›
, 0, 
CMD_TIMEOUT
);

578 
	}
}

581 
	$msdc_pö_c⁄fig
(
msdc_ho°
 *
ho°
, 
mode
)

583 
msdc_hw
 *
hw
 = 
ho°
->hw;

584 
__iomem
 *
ba£
 = 
ho°
->base;

585 
puŒ
 = (
mode
 =
MSDC_PIN_PULL_UP
Ë? 
GPIO_PULL_UP
 : 
GPIO_PULL_DOWN
;

588 i‡(
hw
->
Êags
 & 
MSDC_WP_PIN_EN
) {

589 i‡(
hw
->
c⁄fig_gpio_pö
)

590 
hw
->
	`c⁄fig_gpio_pö
(
MSDC_WP_PIN
, 
puŒ
);

593 
mode
) {

594 
MSDC_PIN_PULL_UP
:

597 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 1);

598 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 0);

599 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 1);

600 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 0);

602 
MSDC_PIN_PULL_DOWN
:

605 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 0);

606 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 1);

607 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 0);

608 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 1);

610 
MSDC_PIN_PULL_NONE
:

614 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 0);

615 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 0);

616 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 0);

617 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 0);

621 
	`N_MSG
(
CFG
, "Pins mode(%d), down(%d), up(%d)",

622 
mode
, 
MSDC_PIN_PULL_DOWN
, 
MSDC_PIN_PULL_UP
);

623 
	}
}

625 
	$msdc_pö_ª£t
(
msdc_ho°
 *
ho°
, 
mode
)

627 
msdc_hw
 *
hw
 = (msdc_hw *)
ho°
->hw;

628 
__iomem
 *
ba£
 = 
ho°
->base;

629 
puŒ
 = (
mode
 =
MSDC_PIN_PULL_UP
Ë? 
GPIO_PULL_UP
 : 
GPIO_PULL_DOWN
;

632 i‡(
hw
->
Êags
 & 
MSDC_RST_PIN_EN
) {

633 i‡(
hw
->
c⁄fig_gpio_pö
)

634 
hw
->
	`c⁄fig_gpio_pö
(
MSDC_RST_PIN
, 
puŒ
);

636 i‡(
mode
 =
MSDC_PIN_PULL_UP
)

637 
	`sdr_˛r_bôs
(
EMMC_IOCON
, 
EMMC_IOCON_BOOTRST
);

639 
	`sdr_£t_bôs
(
EMMC_IOCON
, 
EMMC_IOCON_BOOTRST
);

641 
	}
}

643 
	$msdc_c‹e_powî
(
msdc_ho°
 *
ho°
, 
⁄
)

645 
	`N_MSG
(
CFG
, "Turn %s %sÖower (copower: %d -> %d)",

646 
⁄
 ? "⁄" : "off", "c‹e", 
ho°
->
c‹e_powî
, on);

648 i‡(
⁄
 && 
ho°
->
c‹e_powî
 == 0) {

649 
	`msdc_vc‹e_⁄
(
ho°
);

650 
ho°
->
c‹e_powî
 = 1;

651 
	`m¶ìp
(1);

652 } i‡(!
⁄
 && 
ho°
->
c‹e_powî
 == 1) {

653 
	`msdc_vc‹e_off
(
ho°
);

654 
ho°
->
c‹e_powî
 = 0;

655 
	`m¶ìp
(1);

657 
	}
}

659 
	$msdc_ho°_powî
(
msdc_ho°
 *
ho°
, 
⁄
)

661 
	`N_MSG
(
CFG
, "Tu∫ %†%†powî ", 
⁄
 ? "on" : "off", "host");

663 i‡(
⁄
) {

665 
	`msdc_pö_ª£t
(
ho°
, 
MSDC_PIN_PULL_UP
);

667 
	`msdc_pö_ª£t
(
ho°
, 
MSDC_PIN_PULL_DOWN
);

670 
	}
}

672 
	$msdc_ˇrd_powî
(
msdc_ho°
 *
ho°
, 
⁄
)

674 
	`N_MSG
(
CFG
, "Tu∫ %†%†powî ", 
⁄
 ? "on" : "off", "card");

676 i‡(
⁄
) {

677 
	`msdc_pö_c⁄fig
(
ho°
, 
MSDC_PIN_PULL_UP
);

679 
	`m¶ìp
(1);

682 
	`msdc_pö_c⁄fig
(
ho°
, 
MSDC_PIN_PULL_DOWN
);

683 
	`m¶ìp
(1);

685 
	}
}

687 
	$msdc_£t_powî_mode
(
msdc_ho°
 *
ho°
, 
u8
 
mode
)

689 
	`N_MSG
(
CFG
, "SëÖowî mode(%d)", 
mode
);

691 i‡(
ho°
->
powî_mode
 =
MMC_POWER_OFF
 && 
mode
 != MMC_POWER_OFF) {

692 
	`msdc_ho°_powî
(
ho°
, 1);

693 
	`msdc_ˇrd_powî
(
ho°
, 1);

694 } i‡(
ho°
->
powî_mode
 !
MMC_POWER_OFF
 && 
mode
 == MMC_POWER_OFF) {

695 
	`msdc_ˇrd_powî
(
ho°
, 0);

696 
	`msdc_ho°_powî
(
ho°
, 0);

698 
ho°
->
powî_mode
 = 
mode
;

699 
	}
}

702 #ifde‡
CONFIG_PM


707 
	$msdc_pm
(
pm_mesßge_t
 
°©e
, *
d©a
)

709 
msdc_ho°
 *
ho°
 = (msdc_ho° *)
d©a
;

710 
evt
 = 
°©e
.
evít
;

712 i‡(
evt
 =
PM_EVENT_USER_RESUME
 ||Évà=
PM_EVENT_USER_SUSPEND
) {

713 
	`INIT_MSG
("USR_%s: suspend<%d>Öower<%d>",

714 
evt
 =
PM_EVENT_USER_RESUME
 ? "EVENT_USER_RESUME" : "EVENT_USER_SUSPEND",

715 
ho°
->
su•íd
, ho°->
powî_mode
);

718 i‡(
evt
 =
PM_EVENT_SUSPEND
 ||Évà=
PM_EVENT_USER_SUSPEND
) {

719 i‡(
ho°
->
su•íd
)

723 i‡(
evt
 =
PM_EVENT_SUSPEND
 && 
ho°
->
powî_mode
 =
MMC_POWER_OFF
)

726 
ho°
->
su•íd
 = 1;

727 
ho°
->
pm_°©e
 = 
°©e
;

729 } i‡(
evt
 =
PM_EVENT_RESUME
 ||Évà=
PM_EVENT_USER_RESUME
) {

730 i‡(!
ho°
->
su•íd
) {

736 i‡(
evt
 =
PM_EVENT_RESUME
 && 
ho°
->
pm_°©e
.
evít
 =
PM_EVENT_USER_SUSPEND
) {

737 
	`ERR_MSG
("PM Resume when in USR Suspend");

741 
ho°
->
su•íd
 = 0;

742 
ho°
->
pm_°©e
 = 
°©e
;

745 
	}
}

751 
	$msdc_comm™d_°¨t
(
msdc_ho°
 *
ho°
,

752 
mmc_comm™d
 *
cmd
,

753 
tu√
,

754 
timeout
)

756 
__iomem
 *
ba£
 = 
ho°
->base;

757 
u32
 
›code
 = 
cmd
->opcode;

758 
u32
 
øwcmd
;

759 
u32
 
wöts
 = 
MSDC_INT_CMDRDY
 | 
MSDC_INT_RSPCRCERR
 | 
MSDC_INT_CMDTMO
 |

760 
MSDC_INT_ACMDRDY
 | 
MSDC_INT_ACMDCRCERR
 | 
MSDC_INT_ACMDTMO
 |

761 
MSDC_INT_ACMD19_DONE
;

763 
u32
 
ª•
;

764 
tmo
;

769 i‡(
›code
 =
MMC_SEND_OP_COND
 || opcodê=
SD_APP_OP_COND
) {

770 
ª•
 = 
RESP_R3
;

771 } i‡(
›code
 =
MMC_SET_RELATIVE_ADDR
) {

772 
ª•
 = (
	`mmc_cmd_ty≥
(
cmd
Ë=
MMC_CMD_BCR
Ë? 
RESP_R6
 : 
RESP_R1
;

773 } i‡(
›code
 =
MMC_FAST_IO
) {

774 
ª•
 = 
RESP_R4
;

775 } i‡(
›code
 =
MMC_GO_IRQ_STATE
) {

776 
ª•
 = 
RESP_R5
;

777 } i‡(
›code
 =
MMC_SELECT_CARD
) {

778 
ª•
 = (
cmd
->
¨g
 !0Ë? 
RESP_R1B
 : 
RESP_NONE
;

779 } i‡(
›code
 =
SD_IO_RW_DIRECT
 || opcodê=
SD_IO_RW_EXTENDED
) {

780 
ª•
 = 
RESP_R1
;

781 } i‡(
›code
 =
SD_SEND_IF_COND
 && (
	`mmc_cmd_ty≥
(
cmd
Ë=
MMC_CMD_BCR
)) {

782 
ª•
 = 
RESP_R1
;

784 
	`mmc_ª•_ty≥
(
cmd
)) {

785 
MMC_RSP_R1
:

786 
ª•
 = 
RESP_R1
;

788 
MMC_RSP_R1B
:

789 
ª•
 = 
RESP_R1B
;

791 
MMC_RSP_R2
:

792 
ª•
 = 
RESP_R2
;

794 
MMC_RSP_R3
:

795 
ª•
 = 
RESP_R3
;

797 
MMC_RSP_NONE
:

799 
ª•
 = 
RESP_NONE
;

804 
cmd
->
îr‹
 = 0;

809 
øwcmd
 = 
›code
 | 
msdc_r•
[
ª•
] << 7 | 
ho°
->
blksz
 << 16;

811 i‡(
›code
 =
MMC_READ_MULTIPLE_BLOCK
) {

812 
øwcmd
 |= (2 << 11);

813 } i‡(
›code
 =
MMC_READ_SINGLE_BLOCK
) {

814 
øwcmd
 |= (1 << 11);

815 } i‡(
›code
 =
MMC_WRITE_MULTIPLE_BLOCK
) {

816 
øwcmd
 |= ((2 << 11) | (1 << 13));

817 } i‡(
›code
 =
MMC_WRITE_BLOCK
) {

818 
øwcmd
 |= ((1 << 11) | (1 << 13));

819 } i‡(
›code
 =
SD_IO_RW_EXTENDED
) {

820 i‡(
cmd
->
d©a
->
Êags
 & 
MMC_DATA_WRITE
)

821 
øwcmd
 |= (1 << 13);

822 i‡(
cmd
->
d©a
->
blocks
 > 1)

823 
øwcmd
 |= (2 << 11);

825 
øwcmd
 |= (1 << 11);

826 } i‡(
›code
 =
SD_IO_RW_DIRECT
 && 
cmd
->
Êags
 == ()-1) {

827 
øwcmd
 |= (1 << 14);

828 } i‡((
›code
 =
SD_APP_SEND_SCR
) ||

829 (
›code
 =
SD_APP_SEND_NUM_WR_BLKS
) ||

830 (
›code
 =
SD_SWITCH
 && (
	`mmc_cmd_ty≥
(
cmd
Ë=
MMC_CMD_ADTC
)) ||

831 (
›code
 =
SD_APP_SD_STATUS
 && (
	`mmc_cmd_ty≥
(
cmd
Ë=
MMC_CMD_ADTC
)) ||

832 (
›code
 =
MMC_SEND_EXT_CSD
 && (
	`mmc_cmd_ty≥
(
cmd
Ë=
MMC_CMD_ADTC
))) {

833 
øwcmd
 |= (1 << 11);

834 } i‡(
›code
 =
MMC_STOP_TRANSMISSION
) {

835 
øwcmd
 |= (1 << 14);

836 
øwcmd
 &= ~(0x0FFF << 16);

839 
	`N_MSG
(
CMD
, "CMD<%d><0x%.8x> Arg<0x%.8x>", 
›code
, 
øwcmd
, 
cmd
->
¨g
);

841 
tmo
 = 
jiffõs
 + 
timeout
;

843 i‡(
›code
 =
MMC_SEND_STATUS
) {

845 i‡(!
	`sdc_is_cmd_busy
())

848 i‡(
	`time_a·î
(
jiffõs
, 
tmo
)) {

849 
	`ERR_MSG
("XXX cmd_busyÅimeout: bef‹êCMD<%d>", 
›code
);

850 
cmd
->
îr‹
 = -
ETIMEDOUT
;

851 
	`msdc_ª£t_hw
(
ho°
);

852 
íd
;

857 i‡(!
	`sdc_is_busy
())

859 i‡(
	`time_a·î
(
jiffõs
, 
tmo
)) {

860 
	`ERR_MSG
("XXX sdc_busyÅimeout: bef‹êCMD<%d>", 
›code
);

861 
cmd
->
îr‹
 = -
ETIMEDOUT
;

862 
	`msdc_ª£t_hw
(
ho°
);

863 
íd
;

869 
ho°
->
cmd
 = cmd;

870 
ho°
->
cmd_r•
 = 
ª•
;

872 
	`öô_com∂ëi⁄
(&
ho°
->
cmd_d⁄e
);

874 
	`sdr_£t_bôs
(
MSDC_INTEN
, 
wöts
);

875 
	`sdc_£nd_cmd
(
øwcmd
, 
cmd
->
¨g
);

877 
íd
:

878  
cmd
->
îr‹
;

879 
	}
}

881 
	$msdc_comm™d_ª•
(
msdc_ho°
 *
ho°
,

882 
mmc_comm™d
 *
cmd
,

883 
tu√
,

884 
timeout
)

885 
	`__mu°_hﬁd
(&
ho°
->
lock
)

887 
__iomem
 *
ba£
 = 
ho°
->base;

888 
u32
 
›code
 = 
cmd
->opcode;

890 
u32
 
ª•
;

891 
u32
 
wöts
 = 
MSDC_INT_CMDRDY
 | 
MSDC_INT_RSPCRCERR
 | 
MSDC_INT_CMDTMO
 |

892 
MSDC_INT_ACMDRDY
 | 
MSDC_INT_ACMDCRCERR
 | 
MSDC_INT_ACMDTMO
 |

893 
MSDC_INT_ACMD19_DONE
;

895 
ª•
 = 
ho°
->
cmd_r•
;

897 
	`BUG_ON
(
	`ö_öãºu±
());

901 
	`•ö_u∆ock
(&
ho°
->
lock
);

902 i‡(!
	`waô_f‹_com∂ëi⁄_timeout
(&
ho°
->
cmd_d⁄e
, 10 * 
timeout
)) {

903 
	`ERR_MSG
("XXX CMD<%d> waô_f‹_com∂ëi⁄ÅimeouàARG<0x%.8x>", 
›code
, 
cmd
->
¨g
);

904 
cmd
->
îr‹
 = -
ETIMEDOUT
;

905 
	`msdc_ª£t_hw
(
ho°
);

907 
	`•ö_lock
(&
ho°
->
lock
);

909 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
wöts
);

910 
ho°
->
cmd
 = 
NULL
;

913 #ifde‡
MT6575_SD_DEBUG


914 
ª•
) {

915 
RESP_NONE
:

916 
	`N_MSG
(
RSP
, "CMD_RSP(%d): %d RSP(%d)", 
›code
, 
cmd
->
îr‹
, 
ª•
);

918 
RESP_R2
:

919 
	`N_MSG
(
RSP
, "CMD_RSP(%d): %d RSP(%d)= %.8x %.8x %.8x %.8x",

920 
›code
, 
cmd
->
îr‹
, 
ª•
, cmd->resp[0], cmd->resp[1],

921 
cmd
->
ª•
[2], cmd->resp[3]);

924 
	`N_MSG
(
RSP
, "CMD_RSP(%d): %d RSP(%d)= 0x%.8x",

925 
›code
, 
cmd
->
îr‹
, 
ª•
, cmd->resp[0]);

926 i‡(
cmd
->
îr‹
 == 0) {

927 
ª•
) {

928 
RESP_R1
:

929 
RESP_R1B
:

930 
	`msdc_dump_ˇrd_°©us
(
ho°
, 
cmd
->
ª•
[0]);

932 
RESP_R3
:

933 
	`msdc_dump_o¸_ªg
(
ho°
, 
cmd
->
ª•
[0]);

935 
RESP_R5
:

936 
	`msdc_dump_io_ª•
(
ho°
, 
cmd
->
ª•
[0]);

938 
RESP_R6
:

939 
	`msdc_dump_rˇ_ª•
(
ho°
, 
cmd
->
ª•
[0]);

949 i‡(!
tu√
)

950  
cmd
->
îr‹
;

953 i‡(
ho°
->
hw
->
Êags
 & 
MSDC_REMOVABLE
 && 
cmd
->
îr‹
 =-
EIO
) {

954 i‡(
	`sdr_ªad32
(
SDC_CMD
) & 0x1800) {

955 
	`msdc_ab‹t_d©a
(
ho°
);

958 
	`msdc_ª£t_hw
(
ho°
);

959 
	`msdc_˛r_fifo
();

960 
	`msdc_˛r_öt
();

962 
cmd
->
îr‹
 = 
	`msdc_tu√_cmdr•
(
ho°
, cmd);

971  
cmd
->
îr‹
;

972 
	}
}

974 
	$msdc_do_comm™d
(
msdc_ho°
 *
ho°
,

975 
mmc_comm™d
 *
cmd
,

976 
tu√
,

977 
timeout
)

979 i‡(
	`msdc_comm™d_°¨t
(
ho°
, 
cmd
, 
tu√
, 
timeout
))

980 
íd
;

982 i‡(
	`msdc_comm™d_ª•
(
ho°
, 
cmd
, 
tu√
, 
timeout
))

983 
íd
;

985 
íd
:

987 
	`N_MSG
(
CMD
, "Ñëu∫<%d>Ñe•<0x%.8x>", 
cmd
->
îr‹
, cmd->
ª•
[0]);

988  
cmd
->
îr‹
;

989 
	}
}

993 
	$msdc_dma_ªsume
(
msdc_ho°
 *
ho°
)

995 
__iomem
 *
ba£
 = 
ho°
->base;

997 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_RESUME
, 1);

999 
	`N_MSG
(
DMA
, "DMAÑesume");

1000 
	}
}

1003 
	$msdc_dma_°¨t
(
msdc_ho°
 *
ho°
)

1005 
__iomem
 *
ba£
 = 
ho°
->base;

1006 
u32
 
wöts
 = 
MSDC_INTEN_XFER_COMPL
 | 
MSDC_INTEN_DATTMO
 | 
MSDC_INTEN_DATCRCERR
;

1008 
	`sdr_£t_bôs
(
MSDC_INTEN
, 
wöts
);

1010 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_START
, 1);

1012 
	`N_MSG
(
DMA
, "DMA start");

1013 
	}
}

1015 
	$msdc_dma_°›
(
msdc_ho°
 *
ho°
)

1017 
__iomem
 *
ba£
 = 
ho°
->base;

1019 
u32
 
wöts
 = 
MSDC_INTEN_XFER_COMPL
 | 
MSDC_INTEN_DATTMO
 | 
MSDC_INTEN_DATCRCERR
;

1021 
	`N_MSG
(
DMA
, "DMA sètus: 0x%.8x", 
	`sdr_ªad32
(
MSDC_DMA_CFG
));

1024 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_STOP
, 1);

1025 
	`sdr_ªad32
(
MSDC_DMA_CFG
Ë& 
MSDC_DMA_CFG_STS
)

1029 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
wöts
);

1031 
	`N_MSG
(
DMA
, "DMA stop");

1032 
	}
}

1035 
u8
 
	$msdc_dma_ˇlcs
(
u8
 *
buf
, 
u32
 
Àn
)

1037 
u32
 
i
, 
sum
 = 0;

1039 
i
 = 0; i < 
Àn
; i++)

1040 
sum
 +
buf
[
i
];

1041  0xFF - (
u8
)
sum
;

1042 
	}
}

1045 
	$msdc_dma_c⁄fig
(
msdc_ho°
 *
ho°
, 
msdc_dma
 *
dma
)

1047 
__iomem
 *
ba£
 = 
ho°
->base;

1049 
u32
 
j
, 
num
;

1050 
sˇâîli°
 *
sg
;

1051 
gpd
 *gpd;

1052 
bd
 *bd;

1054 
dma
->
mode
) {

1055 
MSDC_MODE_DMA_BASIC
:

1056 
	`BUG_ON
(
ho°
->
x„r_size
 > 65535);

1057 
	`BUG_ON
(
dma
->
sgÀn
 != 1);

1058 
	`sdr_wrôe32
(
MSDC_DMA_SA
, 
	`PHYSADDR
(
	`sg_dma_addªss
(
sg
)));

1059 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_LASTBUF
, 1);

1061 i‡(
ølök_soc
 =
MT762X_SOC_MT7620A
)

1062 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_XFERSZ
, 
	`sg_dma_Àn
(
sg
));

1065 
	`sdr_wrôe32
((
__iomem
 *)(
RALINK_MSDC_BASE
 + 0xa8), 
	`sg_dma_Àn
(
sg
));

1067 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
,

1068 
MSDC_BRUST_64B
);

1069 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 0);

1071 
MSDC_MODE_DMA_DESC
:

1074 
num
 = (
dma
->
sgÀn
 + 
MAX_BD_PER_GPD
 - 1) / MAX_BD_PER_GPD;

1075 
	`BUG_ON
(
num
 != 1);

1077 
gpd
 = 
dma
->gpd;

1078 
bd
 = 
dma
->bd;

1082 
gpd
->
hwo
 = 1;

1083 
gpd
->
bdp
 = 1;

1084 
gpd
->
chksum
 = 0;

1085 
gpd
->
chksum
 = 
	`msdc_dma_ˇlcs
((
u8
 *)gpd, 16);

1088 
	`f‹_óch_sg
(
dma
->
sg
, sg, dma->
sgÀn
, 
j
) {

1089 
bd
[
j
].
blk∑d
 = 0;

1090 
bd
[
j
].
dw∑d
 = 0;

1091 
bd
[
j
].
±r
 = (*)
	`sg_dma_addªss
(
sg
);

1092 
bd
[
j
].
buÊí
 = 
	`sg_dma_Àn
(
sg
);

1094 i‡(
j
 =
dma
->
sgÀn
 - 1)

1095 
bd
[
j
].
eﬁ
 = 1;

1097 
bd
[
j
].
eﬁ
 = 0;

1099 
bd
[
j
].
chksum
 = 0;

1100 
bd
[
j
].
chksum
 = 
	`msdc_dma_ˇlcs
((
u8
 *)(&bd[j]), 16);

1103 
	`sdr_£t_fõld
(
MSDC_DMA_CFG
, 
MSDC_DMA_CFG_DECSEN
, 1);

1104 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
,

1105 
MSDC_BRUST_64B
);

1106 
	`sdr_£t_fõld
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 1);

1108 
	`sdr_wrôe32
(
MSDC_DMA_SA
, 
	`PHYSADDR
((
u32
)
dma
->
gpd_addr
));

1115 
	`N_MSG
(
DMA
, "DMA_CTRL = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_CTRL
));

1116 
	`N_MSG
(
DMA
, "DMA_CFG = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_CFG
));

1117 
	`N_MSG
(
DMA
, "DMA_SA = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_SA
));

1119 
	}
}

1121 
	$msdc_dma_£tup
(
msdc_ho°
 *
ho°
, 
msdc_dma
 *
dma
,

1122 
sˇâîli°
 *
sg
, 
sgÀn
)

1124 
	`BUG_ON
(
sgÀn
 > 
MAX_BD_NUM
);

1126 
dma
->
sg
 = sg;

1127 
dma
->
sgÀn
 = sglen;

1129 
dma
->
mode
 = 
MSDC_MODE_DMA_DESC
;

1131 
	`N_MSG
(
DMA
, "DMA mode<%d> sgÀn<%d> x„rsz<%d>", 
dma
->
mode
, dma->
sgÀn
,

1132 
ho°
->
x„r_size
);

1134 
	`msdc_dma_c⁄fig
(
ho°
, 
dma
);

1135 
	}
}

1137 
	$msdc_do_ªque°
(
mmc_ho°
 *
mmc
, 
mmc_ªque°
 *
mrq
)

1138 
	`__mu°_hﬁd
(&
ho°
->
lock
)

1140 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1141 
mmc_comm™d
 *
cmd
;

1142 
mmc_d©a
 *
d©a
;

1143 
__iomem
 *
ba£
 = 
ho°
->base;

1145 
ªad
 = 1, 
£nd_ty≥
 = 0;

1147 
	#SND_DAT
 0

	)

1148 
	#SND_CMD
 1

	)

1150 
	`BUG_ON
(
mmc
 =
NULL
);

1151 
	`BUG_ON
(
mrq
 =
NULL
);

1153 
ho°
->
îr‹
 = 0;

1155 
cmd
 = 
mrq
->cmd;

1156 
d©a
 = 
mrq
->
cmd
->data;

1160 
	`N_MSG
(
OPS
, "enable clock!");

1161 
	`msdc_ung©e_˛ock
(
ho°
->
id
);

1165 i‡(!
d©a
) {

1166 
£nd_ty≥
 = 
SND_CMD
;

1167 i‡(
	`msdc_do_comm™d
(
ho°
, 
cmd
, 1, 
CMD_TIMEOUT
) != 0)

1168 
d⁄e
;

1170 
	`BUG_ON
(
d©a
->
blksz
 > 
HOST_MAX_BLKSZ
);

1171 
£nd_ty≥
 = 
SND_DAT
;

1173 
d©a
->
îr‹
 = 0;

1174 
ªad
 = 
d©a
->
Êags
 & 
MMC_DATA_READ
 ? 1 : 0;

1175 
ho°
->
d©a
 = data;

1176 
ho°
->
x„r_size
 = 
d©a
->
blocks
 * d©a->
blksz
;

1177 
ho°
->
blksz
 = 
d©a
->blksz;

1179 i‡(
ªad
) {

1180 i‡((
ho°
->
timeout_ns
 !
d©a
->timeout_ns) ||

1181 (
ho°
->
timeout_˛ks
 !
d©a
->timeout_clks)) {

1182 
	`msdc_£t_timeout
(
ho°
, 
d©a
->
timeout_ns
, d©a->
timeout_˛ks
);

1186 
	`sdr_wrôe32
(
SDC_BLK_NUM
, 
d©a
->
blocks
);

1189 
	`msdc_dma_⁄
();

1190 
	`öô_com∂ëi⁄
(&
ho°
->
x„r_d⁄e
);

1193 i‡(
	`msdc_comm™d_°¨t
(
ho°
, 
cmd
, 1, 
CMD_TIMEOUT
) != 0)

1194 
d⁄e
;

1196 
d©a
->
sg_cou¡
 = 
	`dma_m≠_sg
(
	`mmc_dev
(
mmc
), d©a->
sg
,

1197 
d©a
->
sg_Àn
,

1198 
	`mmc_gë_dma_dú
(
d©a
));

1199 
	`msdc_dma_£tup
(
ho°
, &ho°->
dma
, 
d©a
->
sg
,

1200 
d©a
->
sg_cou¡
);

1203 i‡(
	`msdc_comm™d_ª•
(
ho°
, 
cmd
, 1, 
CMD_TIMEOUT
) != 0)

1204 
d⁄e
;

1209 
	`msdc_dma_°¨t
(
ho°
);

1211 
	`•ö_u∆ock
(&
ho°
->
lock
);

1212 i‡(!
	`waô_f‹_com∂ëi⁄_timeout
(&
ho°
->
x„r_d⁄e
, 
DAT_TIMEOUT
)) {

1213 
	`ERR_MSG
("XXX CMD<%d> waô x„r_d⁄e<%d>Åimeout!!", 
cmd
->
›code
, 
d©a
->
blocks
 * d©a->
blksz
);

1214 
	`ERR_MSG
(" DMA_SA = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_SA
));

1215 
	`ERR_MSG
(" DMA_CA = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_CA
));

1216 
	`ERR_MSG
(" DMA_CTRL = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_CTRL
));

1217 
	`ERR_MSG
(" DMA_CFG = 0x%x", 
	`sdr_ªad32
(
MSDC_DMA_CFG
));

1218 
d©a
->
îr‹
 = -
ETIMEDOUT
;

1220 
	`msdc_ª£t_hw
(
ho°
);

1221 
	`msdc_˛r_fifo
();

1222 
	`msdc_˛r_öt
();

1224 
	`•ö_lock
(&
ho°
->
lock
);

1225 
	`msdc_dma_°›
(
ho°
);

1228 i‡(
d©a
->
°›
) {

1229 i‡(
	`msdc_do_comm™d
(
ho°
, 
d©a
->
°›
, 0, 
CMD_TIMEOUT
) != 0)

1230 
d⁄e
;

1234 
d⁄e
:

1235 i‡(
d©a
 !
NULL
) {

1236 
ho°
->
d©a
 = 
NULL
;

1237 
	`dma_unm≠_sg
(
	`mmc_dev
(
mmc
), 
d©a
->
sg
, d©a->
sg_Àn
,

1238 
	`mmc_gë_dma_dú
(
d©a
));

1239 
ho°
->
blksz
 = 0;

1242 i‡(
ho°
->
hw
->
Êags
 & 
MSDC_REMOVABLE
 && 
d©a
->
îr‹
) {

1243 
	`msdc_ab‹t_d©a
(
ho°
);

1248 
	`N_MSG
(
OPS
, "CMD<%d> d©a<%†%s> blksz<%d> block<%d>Éº‹<%d>", 
cmd
->
›code
, (
dma
 ? "dma" : "pio"),

1249 (
ªad
 ? "ªad " : "wrôe"), 
d©a
->
blksz
, d©a->
blocks
, d©a->
îr‹
);

1255 i‡(
£nd_ty≥
 =
SND_CMD
) {

1256 i‡(
cmd
->
›code
 =
MMC_SEND_STATUS
) {

1257 i‡((
cmd
->
ª•
[0] & 
CARD_READY_FOR_DATA
Ë|| (
	`CARD_CURRENT_STATE
(cmd->resp[0]) != 7)) {

1258 
	`N_MSG
(
OPS
, "disable clock, CMD13 IDLE");

1259 
	`msdc_g©e_˛ock
(
ho°
->
id
);

1262 
	`N_MSG
(
OPS
, "dißbÀ clock, CMD<%d>", 
cmd
->
›code
);

1263 
	`msdc_g©e_˛ock
(
ho°
->
id
);

1266 i‡(
ªad
) {

1267 
	`N_MSG
(
OPS
, "dißbÀ clock!!! Ród CMD<%d>", 
cmd
->
›code
);

1268 
	`msdc_g©e_˛ock
(
ho°
->
id
);

1273 
	`msdc_g©e_˛ock
(
ho°
->
id
);

1277 i‡(
mrq
->
cmd
->
îr‹
)

1278 
ho°
->
îr‹
 = 0x001;

1279 i‡(
mrq
->
d©a
 && mrq->d©a->
îr‹
)

1280 
ho°
->
îr‹
 |= 0x010;

1281 i‡(
mrq
->
°›
 && mrq->°›->
îr‹
)

1282 
ho°
->
îr‹
 |= 0x100;

1286  
ho°
->
îr‹
;

1287 
	}
}

1289 
	$msdc_≠p_cmd
(
mmc_ho°
 *
mmc
, 
msdc_ho°
 *
ho°
)

1291 
mmc_comm™d
 
cmd
;

1292 
mmc_ªque°
 
mrq
;

1293 
u32
 
îr
;

1295 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

1296 
cmd
.
›code
 = 
MMC_APP_CMD
;

1298 
cmd
.
¨g
 = 
mmc
->
ˇrd
->
rˇ
 << 16;

1300 
cmd
.
¨g
 = 
ho°
->
≠p_cmd_¨g
;

1302 
cmd
.
Êags
 = 
MMC_RSP_SPI_R1
 | 
MMC_RSP_R1
 | 
MMC_CMD_AC
;

1304 
	`mem£t
(&
mrq
, 0, (
mmc_ªque°
));

1305 
mrq
.
cmd
 = &cmd; cmd.mrq = &mrq;

1306 
cmd
.
d©a
 = 
NULL
;

1308 
îr
 = 
	`msdc_do_comm™d
(
ho°
, &
cmd
, 0, 
CMD_TIMEOUT
);

1309  
îr
;

1310 
	}
}

1312 
	$msdc_tu√_cmdr•
(
msdc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

1314 
ªsu…
 = -1;

1315 
__iomem
 *
ba£
 = 
ho°
->base;

1316 
u32
 
rsm∂
, 
cur_rsm∂
, 
‹ig_rsm∂
;

1317 
u32
 
ºdly
, 
cur_ºdly
 = 0xffffffff, 
‹ig_ºdly
;

1318 
u32
 
skù
 = 1;

1326 
	`sdr_gë_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, &
‹ig_rsm∂
);

1327 
	`sdr_gë_fõld
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, &
‹ig_ºdly
);

1329 
ºdly
 = 0;

1331 
rsm∂
 = 0;Ñsmpl < 2;Ñsmpl++) {

1333 
cur_rsm∂
 = (
‹ig_rsm∂
 + 
rsm∂
) % 2;

1334 i‡(
skù
 == 1) {

1335 
skù
 = 0;

1338 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
cur_rsm∂
);

1340 i‡(
ho°
->
≠p_cmd
) {

1341 
ªsu…
 = 
	`msdc_≠p_cmd
(
ho°
->
mmc
, host);

1342 i‡(
ªsu…
) {

1343 
	`ERR_MSG
("TUNE_CMDápp_cmd<%d> failed: RESP_RXDLY<%d>,R_SMPL<%d>",

1344 
ho°
->
mrq
->
cmd
->
›code
, 
cur_ºdly
, 
cur_rsm∂
);

1348 
ªsu…
 = 
	`msdc_do_comm™d
(
ho°
, 
cmd
, 0, 
CMD_TIMEOUT
);

1349 
	`ERR_MSG
("TUNE_CMD<%d> %†PAD_CMD_RESP_RXDLY[26:22]<%d> R_SMPL[1]<%d>", 
cmd
->
›code
,

1350 (
ªsu…
 =0Ë? "PASS" : "FAIL", 
cur_ºdly
, 
cur_rsm∂
);

1352 i‡(
ªsu…
 == 0)

1354 i‡(
ªsu…
 !-
EIO
) {

1355 
	`ERR_MSG
("TUNE_CMD<%d> Eº‹<%d>ÇŸ -EIO", 
cmd
->
›code
, 
ªsu…
);

1356  
ªsu…
;

1360 i‡(
	`sdr_ªad32
(
SDC_CMD
) & 0x1800) {

1361 
	`msdc_ab‹t_d©a
(
ho°
);

1366 
cur_ºdly
 = (
‹ig_ºdly
 + 
ºdly
 + 1) % 32;

1367 
	`sdr_£t_fõld
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
cur_ºdly
);

1368 } ++
ºdly
 < 32);

1370  
ªsu…
;

1371 
	}
}

1374 
	$msdc_tu√_bªad
(
mmc_ho°
 *
mmc
, 
mmc_ªque°
 *
mrq
)

1376 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1377 
__iomem
 *
ba£
 = 
ho°
->base;

1378 
u32
 
ddr
 = 0;

1379 
u32
 
d¸c
 = 0;

1380 
u32
 
rxdly
, 
cur_rxdly0
, 
cur_rxdly1
;

1381 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

1382 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
;

1383 
u32
 
cur_d©4
, 
cur_d©5
, 
cur_d©6
, 
cur_d©7
;

1384 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
;

1385 
u32
 
‹ig_d©4
, 
‹ig_d©5
, 
‹ig_d©6
, 
‹ig_d©7
;

1386 
ªsu…
 = -1;

1387 
u32
 
skù
 = 1;

1389 
	`sdr_gë_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, &
‹ig_dsm∂
);

1392 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

1394 
rxdly
 = 0;

1396 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

1397 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

1398 i‡(
skù
 == 1) {

1399 
skù
 = 0;

1402 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

1404 i‡(
ho°
->
≠p_cmd
) {

1405 
ªsu…
 = 
	`msdc_≠p_cmd
(
ho°
->
mmc
, host);

1406 i‡(
ªsu…
) {

1407 
	`ERR_MSG
("TUNE_BREADáµ_cmd<%d> faûed", 
ho°
->
mrq
->
cmd
->
›code
);

1411 
ªsu…
 = 
	`msdc_do_ªque°
(
mmc
, 
mrq
);

1413 
	`sdr_gë_fõld
(
SDC_DCRC_STS
,

1414 
SDC_DCRC_STS_POS
 | 
SDC_DCRC_STS_NEG
,

1415 &
d¸c
);

1416 i‡(!
ddr
)

1417 
d¸c
 &~
SDC_DCRC_STS_NEG
;

1418 
	`ERR_MSG
("TUNE_BREAD<%s> dcrc<0x%x> DATRDDLY0/1<0x%x><0x%x> dsmpl<0x%x>",

1419 (
ªsu…
 =0 && 
d¸c
 == 0) ? "PASS" : "FAIL", dcrc,

1420 
	`sdr_ªad32
(
MSDC_DAT_RDDLY0
), sdr_ªad32(
MSDC_DAT_RDDLY1
), 
cur_dsm∂
);

1423 i‡(
ªsu…
 =0 && 
d¸c
 == 0) {

1424 
d⁄e
;

1427 i‡(
mrq
->
d©a
->
îr‹
 != 0 &&

1428 
mrq
->
d©a
->
îr‹
 !-
EIO
) {

1429 
	`ERR_MSG
("TUNE_READ:Ñesult<0x%x> cmd_error<%d> data_error<%d>",

1430 
ªsu…
, 
mrq
->
cmd
->
îr‹
, mrq->
d©a
->error);

1431 
d⁄e
;

1436 
cur_rxdly0
 = 
	`sdr_ªad32
(
MSDC_DAT_RDDLY0
);

1437 
cur_rxdly1
 = 
	`sdr_ªad32
(
MSDC_DAT_RDDLY1
);

1440 i‡(
	`sdr_ªad32
(
MSDC_ECO_VER
) >= 4) {

1441 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

1442 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

1443 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

1444 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

1445 
‹ig_d©4
 = (
cur_rxdly1
 >> 24) & 0x1F;

1446 
‹ig_d©5
 = (
cur_rxdly1
 >> 16) & 0x1F;

1447 
‹ig_d©6
 = (
cur_rxdly1
 >> 8) & 0x1F;

1448 
‹ig_d©7
 = (
cur_rxdly1
 >> 0) & 0x1F;

1450 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

1451 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

1452 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

1453 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

1454 
‹ig_d©4
 = (
cur_rxdly1
 >> 0) & 0x1F;

1455 
‹ig_d©5
 = (
cur_rxdly1
 >> 8) & 0x1F;

1456 
‹ig_d©6
 = (
cur_rxdly1
 >> 16) & 0x1F;

1457 
‹ig_d©7
 = (
cur_rxdly1
 >> 24) & 0x1F;

1460 i‡(
ddr
) {

1461 
cur_d©0
 = (
d¸c
 & (1 << 0Ë|| d¸¯& (1 << 8)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

1462 
cur_d©1
 = (
d¸c
 & (1 << 1Ë|| d¸¯& (1 << 9)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

1463 
cur_d©2
 = (
d¸c
 & (1 << 2Ë|| d¸¯& (1 << 10)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

1464 
cur_d©3
 = (
d¸c
 & (1 << 3Ë|| d¸¯& (1 << 11)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

1466 
cur_d©0
 = (
d¸c
 & (1 << 0)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

1467 
cur_d©1
 = (
d¸c
 & (1 << 1)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

1468 
cur_d©2
 = (
d¸c
 & (1 << 2)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

1469 
cur_d©3
 = (
d¸c
 & (1 << 3)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

1471 
cur_d©4
 = (
d¸c
 & (1 << 4)Ë? ((
‹ig_d©4
 + 1) % 32) : orig_dat4;

1472 
cur_d©5
 = (
d¸c
 & (1 << 5)Ë? ((
‹ig_d©5
 + 1) % 32) : orig_dat5;

1473 
cur_d©6
 = (
d¸c
 & (1 << 6)Ë? ((
‹ig_d©6
 + 1) % 32) : orig_dat6;

1474 
cur_d©7
 = (
d¸c
 & (1 << 7)Ë? ((
‹ig_d©7
 + 1) % 32) : orig_dat7;

1476 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16Ë| (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

1477 
cur_rxdly1
 = (
cur_d©4
 << 24Ë| (
cur_d©5
 << 16Ë| (
cur_d©6
 << 8Ë| (
cur_d©7
 << 0);

1479 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

1480 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY1
, 
cur_rxdly1
);

1482 } ++
rxdly
 < 32);

1484 
d⁄e
:

1485  
ªsu…
;

1486 
	}
}

1488 
	$msdc_tu√_bwrôe
(
mmc_ho°
 *
mmc
, 
mmc_ªque°
 *
mrq
)

1490 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1491 
__iomem
 *
ba£
 = 
ho°
->base;

1493 
u32
 
wºdly
, 
cur_wºdly
 = 0xffffffff, 
‹ig_wºdly
;

1494 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

1495 
u32
 
rxdly
, 
cur_rxdly0
;

1496 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
;

1497 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
;

1498 
ªsu…
 = -1;

1499 
u32
 
skù
 = 1;

1503 
	`sdr_gë_fõld
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, &
‹ig_wºdly
);

1504 
	`sdr_gë_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, &
‹ig_dsm∂
);

1507 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

1508 
cur_rxdly0
 = 
	`sdr_ªad32
(
MSDC_DAT_RDDLY0
);

1511 i‡(
	`sdr_ªad32
(
MSDC_ECO_VER
) >= 4) {

1512 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

1513 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

1514 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

1515 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

1517 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

1518 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

1519 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

1520 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

1523 
rxdly
 = 0;

1525 
wºdly
 = 0;

1527 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

1528 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

1529 i‡(
skù
 == 1) {

1530 
skù
 = 0;

1533 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

1535 i‡(
ho°
->
≠p_cmd
) {

1536 
ªsu…
 = 
	`msdc_≠p_cmd
(
ho°
->
mmc
, host);

1537 i‡(
ªsu…
) {

1538 
	`ERR_MSG
("TUNE_BWRITEáµ_cmd<%d> faûed", 
ho°
->
mrq
->
cmd
->
›code
);

1542 
ªsu…
 = 
	`msdc_do_ªque°
(
mmc
, 
mrq
);

1544 
	`ERR_MSG
("TUNE_BWRITE<%s> DSPL<%d> DATWRDLY<%d> MSDC_DAT_RDDLY0<0x%x>",

1545 
ªsu…
 == 0 ? "PASS" : "FAIL",

1546 
cur_dsm∂
, 
cur_wºdly
, 
cur_rxdly0
);

1548 i‡(
ªsu…
 == 0) {

1549 
d⁄e
;

1552 i‡(
mrq
->
d©a
->
îr‹
 !-
EIO
) {

1553 
	`ERR_MSG
("TUNE_READ:Ñesult<0x%x> cmd_error<%d> data_error<%d>",

1554 
ªsu…
, 
mrq
->
cmd
->
îr‹
, mrq->
d©a
->error);

1555 
d⁄e
;

1559 
cur_wºdly
 = (
‹ig_wºdly
 + 
wºdly
 + 1) % 32;

1560 
	`sdr_£t_fõld
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
cur_wºdly
);

1561 } ++
wºdly
 < 32);

1563 
cur_d©0
 = (
‹ig_d©0
 + 
rxdly
) % 32;

1564 
cur_d©1
 = 
‹ig_d©1
;

1565 
cur_d©2
 = 
‹ig_d©2
;

1566 
cur_d©3
 = 
‹ig_d©3
;

1568 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16Ë| (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

1569 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

1570 } ++
rxdly
 < 32);

1572 
d⁄e
:

1573  
ªsu…
;

1574 
	}
}

1576 
	$msdc_gë_ˇrd_°©us
(
mmc_ho°
 *
mmc
, 
msdc_ho°
 *
ho°
, 
u32
 *
°©us
)

1578 
mmc_comm™d
 
cmd
;

1579 
mmc_ªque°
 
mrq
;

1580 
u32
 
îr
;

1582 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

1583 
cmd
.
›code
 = 
MMC_SEND_STATUS
;

1584 i‡(
mmc
->
ˇrd
) {

1585 
cmd
.
¨g
 = 
mmc
->
ˇrd
->
rˇ
 << 16;

1587 
	`ERR_MSG
("cmd13 mmc card isÇull");

1588 
cmd
.
¨g
 = 
ho°
->
≠p_cmd_¨g
;

1590 
cmd
.
Êags
 = 
MMC_RSP_SPI_R2
 | 
MMC_RSP_R1
 | 
MMC_CMD_AC
;

1592 
	`mem£t
(&
mrq
, 0, (
mmc_ªque°
));

1593 
mrq
.
cmd
 = &cmd; cmd.mrq = &mrq;

1594 
cmd
.
d©a
 = 
NULL
;

1596 
îr
 = 
	`msdc_do_comm™d
(
ho°
, &
cmd
, 1, 
CMD_TIMEOUT
);

1598 i‡(
°©us
)

1599 *
°©us
 = 
cmd
.
ª•
[0];

1601  
îr
;

1602 
	}
}

1604 
	$msdc_check_busy
(
mmc_ho°
 *
mmc
, 
msdc_ho°
 *
ho°
)

1606 
u32
 
îr
 = 0;

1607 
u32
 
°©us
 = 0;

1610 
îr
 = 
	`msdc_gë_ˇrd_°©us
(
mmc
, 
ho°
, &
°©us
);

1611 i‡(
îr
)

1612  
îr
;

1614 
	`ERR_MSG
("cmd<13>Ñe•<0x%x>", 
°©us
);

1615 } 
	`R1_CURRENT_STATE
(
°©us
) == 7);

1617  
îr
;

1618 
	}
}

1621 
	$msdc_tu√_ªque°
(
mmc_ho°
 *
mmc
, 
mmc_ªque°
 *
mrq
)

1623 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1624 
mmc_comm™d
 *
cmd
;

1625 
mmc_d©a
 *
d©a
;

1627 
ªt
 = 0, 
ªad
;

1629 
cmd
 = 
mrq
->cmd;

1630 
d©a
 = 
mrq
->
cmd
->data;

1632 
ªad
 = 
d©a
->
Êags
 & 
MMC_DATA_READ
 ? 1 : 0;

1634 i‡(
ªad
) {

1635 i‡(
d©a
->
îr‹
 =-
EIO
)

1636 
ªt
 = 
	`msdc_tu√_bªad
(
mmc
, 
mrq
);

1638 
ªt
 = 
	`msdc_check_busy
(
mmc
, 
ho°
);

1639 i‡(
ªt
) {

1640 
	`ERR_MSG
("XXX cmd13 waitÖrogram done failed");

1641  
ªt
;

1645 
ªt
 = 
	`msdc_tu√_bwrôe
(
mmc
, 
mrq
);

1648  
ªt
;

1649 
	}
}

1652 
	$msdc_›s_ªque°
(
mmc_ho°
 *
mmc
, 
mmc_ªque°
 *
mrq
)

1654 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1658 
u32
 
ﬁd_H32
, 
ﬁd_L32
, 
√w_H32
, 
√w_L32
;

1659 
u32
 
ticks
 = 0, 
›code
 = 0, 
sizes
 = 0, 
bRx
 = 0;

1662 
	`WARN_ON
(
ho°
->
mrq
);

1665 
	`•ö_lock
(&
ho°
->
lock
);

1667 i‡(
sdio_¥o_íabÀ
) {

1668 i‡(
mrq
->
cmd
->
›code
 == 52 || mrq->cmd->opcode == 53)

1669 
	`GPT_GëCou¡î64
(&
ﬁd_L32
, &
ﬁd_H32
);

1673 
ho°
->
mrq
 = mrq;

1675 i‡(
	`msdc_do_ªque°
(
mmc
, 
mrq
)) {

1676 i‡(
ho°
->
hw
->
Êags
 & 
MSDC_REMOVABLE
 && 
ølök_soc
 =
MT762X_SOC_MT7621AT
 && 
mrq
->
d©a
 && mrq->d©a->
îr‹
)

1677 
	`msdc_tu√_ªque°
(
mmc
, 
mrq
);

1681 i‡(
mrq
->
cmd
->
›code
 =
MMC_APP_CMD
) {

1682 
ho°
->
≠p_cmd
 = 1;

1683 
ho°
->
≠p_cmd_¨g
 = 
mrq
->
cmd
->
¨g
;

1685 
ho°
->
≠p_cmd
 = 0;

1689 
ho°
->
mrq
 = 
NULL
;

1693 i‡(
sdio_¥o_íabÀ
) {

1694 i‡(
mrq
->
cmd
->
›code
 == 52 || mrq->cmd->opcode == 53) {

1695 
	`GPT_GëCou¡î64
(&
√w_L32
, &
√w_H32
);

1696 
ticks
 = 
	`msdc_time_ˇlc
(
ﬁd_L32
, 
ﬁd_H32
, 
√w_L32
, 
√w_H32
);

1698 
›code
 = 
mrq
->
cmd
->opcode;

1699 i‡(
mrq
->
cmd
->
d©a
) {

1700 
sizes
 = 
mrq
->
cmd
->
d©a
->
blocks
 * mrq->cmd->d©a->
blksz
;

1701 
bRx
 = 
mrq
->
cmd
->
d©a
->
Êags
 & 
MMC_DATA_READ
 ? 1 : 0;

1703 
bRx
 = 
mrq
->
cmd
->
¨g
 & 0x80000000 ? 1 : 0;

1706 i‡(!
mrq
->
cmd
->
îr‹
)

1707 
	`msdc_≥rf‹m™˚
(
›code
, 
sizes
, 
bRx
, 
ticks
);

1711 
	`•ö_u∆ock
(&
ho°
->
lock
);

1713 
	`mmc_ªque°_d⁄e
(
mmc
, 
mrq
);

1716 
	}
}

1719 
	$msdc_£t_buswidth
(
msdc_ho°
 *
ho°
, 
u32
 
width
)

1721 
__iomem
 *
ba£
 = 
ho°
->base;

1722 
u32
 
vÆ
 = 
	`sdr_ªad32
(
SDC_CFG
);

1724 
vÆ
 &~
SDC_CFG_BUSWIDTH
;

1726 
width
) {

1728 
MMC_BUS_WIDTH_1
:

1729 
width
 = 1;

1730 
vÆ
 |(
MSDC_BUS_1BITS
 << 16);

1732 
MMC_BUS_WIDTH_4
:

1733 
vÆ
 |(
MSDC_BUS_4BITS
 << 16);

1735 
MMC_BUS_WIDTH_8
:

1736 
vÆ
 |(
MSDC_BUS_8BITS
 << 16);

1740 
	`sdr_wrôe32
(
SDC_CFG
, 
vÆ
);

1742 
	`N_MSG
(
CFG
, "Bu†Width = %d", 
width
);

1743 
	}
}

1746 
	$msdc_›s_£t_ios
(
mmc_ho°
 *
mmc
, 
mmc_ios
 *
ios
)

1748 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1749 
__iomem
 *
ba£
 = 
ho°
->base;

1750 
u32
 
ddr
 = 0;

1752 #ifde‡
MT6575_SD_DEBUG


1753 *
vdd
[] = {

1759 *
powî_mode
[] = {

1762 *
bus_mode
[] = {

1765 *
timög
[] = {

1769 
	`¥ötk
("SET_IOS: CLK(%dkHz), BUS(%s), BW(%u), PWR(%s), VDD(%s), TIMING(%s)",

1770 
ios
->
˛ock
 / 1000, 
bus_mode
[ios->bus_mode],

1771 (
ios
->
bus_width
 =
MMC_BUS_WIDTH_4
) ? 4 : 1,

1772 
powî_mode
[
ios
->powî_mode], 
vdd
[ios->vdd], 
timög
[ios->timing]);

1775 
	`msdc_£t_buswidth
(
ho°
, 
ios
->
bus_width
);

1778 
ios
->
powî_mode
) {

1779 
MMC_POWER_OFF
:

1780 
MMC_POWER_UP
:

1783 
MMC_POWER_ON
:

1784 
ho°
->
powî_mode
 = 
MMC_POWER_ON
;

1791 i‡(
ho°
->
m˛k
 !
ios
->
˛ock
) {

1792 i‡(
ios
->
˛ock
 > 25000000) {

1794 
	`INIT_MSG
("SD d©®œtchÉdge<%d>", 
MSDC_SMPL_FALLING
);

1795 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
,

1796 
MSDC_SMPL_FALLING
);

1797 
	`sdr_£t_fõld
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
,

1798 
MSDC_SMPL_FALLING
);

1801 
	`sdr_wrôe32
(
MSDC_IOCON
, 0x00000000);

1803 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY0
, 0x10101010);

1804 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY1
, 0x00000000);

1806 
	`sdr_wrôe32
(
MSDC_PAD_TUNE
, 0x84101010);

1808 
	`msdc_£t_m˛k
(
ho°
, 
ddr
, 
ios
->
˛ock
);

1810 
	}
}

1813 
	$msdc_›s_gë_ro
(
mmc_ho°
 *
mmc
)

1815 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1816 
__iomem
 *
ba£
 = 
ho°
->base;

1817 
Êags
;

1818 
ro
 = 0;

1820 i‡(
ho°
->
hw
->
Êags
 & 
MSDC_WP_PIN_EN
) {

1821 
	`•ö_lock_úqßve
(&
ho°
->
lock
, 
Êags
);

1822 
ro
 = (
	`sdr_ªad32
(
MSDC_PS
) >> 31);

1823 
	`•ö_u∆ock_úqª°‹e
(&
ho°
->
lock
, 
Êags
);

1825  
ro
;

1826 
	}
}

1829 
	$msdc_›s_gë_cd
(
mmc_ho°
 *
mmc
)

1831 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

1832 
__iomem
 *
ba£
 = 
ho°
->base;

1833 
Êags
;

1834 
¥e£¡
 = 1;

1837 i‡(!(
ho°
->
hw
->
Êags
 & 
MSDC_REMOVABLE
)) {

1840 
ho°
->
ˇrd_ö£πed
 = 1;

1843 
ho°
->
ˇrd_ö£πed
 = (ho°->
pm_°©e
.
evít
 =
PM_EVENT_USER_RESUME
) ? 1 : 0;

1844 
	`INIT_MSG
("sdiÿ›s_gë_cd<%d>", 
ho°
->
ˇrd_ö£πed
);

1845  
ho°
->
ˇrd_ö£πed
;

1850 i‡(
ho°
->
hw
->
Êags
 & 
MSDC_CD_PIN_EN
) {

1851 
	`•ö_lock_úqßve
(&
ho°
->
lock
, 
Êags
);

1853 
¥e£¡
 = 
ho°
->
ˇrd_ö£πed
;

1856 i‡(
cd_a˘ive_low
)

1857 
¥e£¡
 = (
	`sdr_ªad32
(
MSDC_PS
Ë& 
MSDC_PS_CDSTS
) ? 0 : 1;

1859 
¥e£¡
 = (
	`sdr_ªad32
(
MSDC_PS
Ë& 
MSDC_PS_CDSTS
) ? 1 : 0;

1860 
ho°
->
ˇrd_ö£πed
 = 
¥e£¡
;

1862 
	`•ö_u∆ock_úqª°‹e
(&
ho°
->
lock
, 
Êags
);

1864 
¥e£¡
 = 0;

1867 
	`INIT_MSG
("›s_gë_cdÑëu∫<%d>", 
¥e£¡
);

1868  
¥e£¡
;

1869 
	}
}

1871 
mmc_ho°_›s
 
	gmt_msdc_›s
 = {

1872 .
ªque°
 = 
msdc_›s_ªque°
,

1873 .
	g£t_ios
 = 
msdc_›s_£t_ios
,

1874 .
	ggë_ro
 = 
msdc_›s_gë_ro
,

1875 .
	ggë_cd
 = 
msdc_›s_gë_cd
,

1881 
úqªtu∫_t
 
	$msdc_úq
(
úq
, *
dev_id
)

1883 
msdc_ho°
 *
ho°
 = (msdc_ho° *)
dev_id
;

1884 
mmc_d©a
 *
d©a
 = 
ho°
->data;

1885 
mmc_comm™d
 *
cmd
 = 
ho°
->cmd;

1886 
__iomem
 *
ba£
 = 
ho°
->base;

1888 
u32
 
cmd°s
 = 
MSDC_INT_RSPCRCERR
 | 
MSDC_INT_CMDTMO
 | 
MSDC_INT_CMDRDY
 |

1889 
MSDC_INT_ACMDCRCERR
 | 
MSDC_INT_ACMDTMO
 | 
MSDC_INT_ACMDRDY
 |

1890 
MSDC_INT_ACMD19_DONE
;

1891 
u32
 
d©°s
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
;

1893 
u32
 
öt°s
 = 
	`sdr_ªad32
(
MSDC_INT
);

1894 
u32
 
öãn
 = 
	`sdr_ªad32
(
MSDC_INTEN
); i¡í &
öt°s
;

1896 
	`sdr_wrôe32
(
MSDC_INT
, 
öt°s
);

1900 i‡(
öt°s
 & 
MSDC_INT_CDSC
) {

1901 i‡(
ho°
->
mmc
->
ˇps
 & 
MMC_CAP_NEEDS_POLL
)

1902  
IRQ_HANDLED
;

1903 
	`IRQ_MSG
("MSDC_INT_CDSC irq<0x%.8x>", 
öt°s
);

1904 
	`scheduÀ_dñayed_w‹k
(&
ho°
->
ˇrd_dñayw‹k
, 
HZ
);

1909 i‡(
öt°s
 & 
MSDC_INT_SDIOIRQ
) {

1910 
	`IRQ_MSG
("XXX MSDC_INT_SDIOIRQ");

1915 i‡(
d©a
 !
NULL
) {

1916 i‡(
öãn
 & 
MSDC_INT_XFER_COMPL
) {

1917 
d©a
->
byãs_x„ªd
 = 
ho°
->
x„r_size
;

1918 
	`com∂ëe
(&
ho°
->
x„r_d⁄e
);

1921 i‡(
öt°s
 & 
d©°s
) {

1923 
	`msdc_ª£t_hw
(
ho°
);

1924 
	`msdc_˛r_fifo
();

1925 
	`msdc_˛r_öt
();

1927 i‡(
öt°s
 & 
MSDC_INT_DATTMO
) {

1928 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_DATTMO", 
ho°
->
mrq
->
cmd
->
›code
);

1929 
d©a
->
îr‹
 = -
ETIMEDOUT
;

1930 } i‡(
öt°s
 & 
MSDC_INT_DATCRCERR
) {

1931 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_DATCRCERR, SDC_DCRC_STS<0x%x>", 
ho°
->
mrq
->
cmd
->
›code
, 
	`sdr_ªad32
(
SDC_DCRC_STS
));

1932 
d©a
->
îr‹
 = -
EIO
;

1936 
	`com∂ëe
(&
ho°
->
x„r_d⁄e
);

1941 i‡((
cmd
 !
NULL
Ë&& (
öt°s
 & 
cmd°s
)) {

1942 i‡((
öt°s
 & 
MSDC_INT_CMDRDY
Ë|| (öt°†& 
MSDC_INT_ACMDRDY
) ||

1943 (
öt°s
 & 
MSDC_INT_ACMD19_DONE
)) {

1944 
u32
 *
r•
 = &
cmd
->
ª•
[0];

1946 
ho°
->
cmd_r•
) {

1947 
RESP_NONE
:

1949 
RESP_R2
:

1950 *
r•
++ = 
	`sdr_ªad32
(
SDC_RESP3
); *r•++ = sdr_ªad32(
SDC_RESP2
);

1951 *
r•
++ = 
	`sdr_ªad32
(
SDC_RESP1
); *r•++ = sdr_ªad32(
SDC_RESP0
);

1954 i‡((
öt°s
 & 
MSDC_INT_ACMDRDY
Ë|| (öt°†& 
MSDC_INT_ACMD19_DONE
))

1955 *
r•
 = 
	`sdr_ªad32
(
SDC_ACMD_RESP
);

1957 *
r•
 = 
	`sdr_ªad32
(
SDC_RESP0
);

1960 } i‡((
öt°s
 & 
MSDC_INT_RSPCRCERR
Ë|| (öt°†& 
MSDC_INT_ACMDCRCERR
)) {

1961 i‡(
öt°s
 & 
MSDC_INT_ACMDCRCERR
)

1962 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_ACMDCRCERR", 
cmd
->
›code
);

1964 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_RSPCRCERR", 
cmd
->
›code
);

1965 
cmd
->
îr‹
 = -
EIO
;

1966 } i‡((
öt°s
 & 
MSDC_INT_CMDTMO
Ë|| (öt°†& 
MSDC_INT_ACMDTMO
)) {

1967 i‡(
öt°s
 & 
MSDC_INT_ACMDTMO
)

1968 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_ACMDTMO", 
cmd
->
›code
);

1970 
	`IRQ_MSG
("XXX CMD<%d> MSDC_INT_CMDTMO", 
cmd
->
›code
);

1971 
cmd
->
îr‹
 = -
ETIMEDOUT
;

1972 
	`msdc_ª£t_hw
(
ho°
);

1973 
	`msdc_˛r_fifo
();

1974 
	`msdc_˛r_öt
();

1976 
	`com∂ëe
(&
ho°
->
cmd_d⁄e
);

1980 i‡(
öt°s
 & 
MSDC_INT_MMCIRQ
)

1981 
	`¥ötk
(
KERN_INFO
 "msdc[%d] MMCIRQ: SDC_CSTS=0x%.8x\r\n", 
ho°
->
id
, 
	`sdr_ªad32
(
SDC_CSTS
));

1983 #ifde‡
MT6575_SD_DEBUG


1986 
	`N_MSG
(
INT
, "IRQ_EVT(0x%x): MMCIRQ(%d) CDSC(%d), ACRDY(%d), ACTMO(%d), ACCRE(%d) AC19DN(%d)",

1987 
öt°s
,

1988 
öt_ªg
->
mmcúq
,

1989 
öt_ªg
->
cdsc
,

1990 
öt_ªg
->
©ocmdrdy
,

1991 
öt_ªg
->
©ocmdtmo
,

1992 
öt_ªg
->
©ocmd¸c
,

1993 
öt_ªg
->
©ocmd19d⁄e
);

1994 
	`N_MSG
(
INT
, "IRQ_EVT(0x%x): SDIO(%d) CMDRDY(%d), CMDTMO(%d), RSPCRC(%d), CSTA(%d)",

1995 
öt°s
,

1996 
öt_ªg
->
sdioúq
,

1997 
öt_ªg
->
cmdrdy
,

1998 
öt_ªg
->
cmdtmo
,

1999 
öt_ªg
->
r•¸c
,

2000 
öt_ªg
->
c°a
);

2001 
	`N_MSG
(
INT
, "IRQ_EVT(0x%x): XFCMP(%d) DXDONE(%d), DATTMO(%d), DATCRC(%d), DMAEMP(%d)",

2002 
öt°s
,

2003 
öt_ªg
->
x„rcomp
,

2004 
öt_ªg
->
dx„rd⁄e
,

2005 
öt_ªg
->
d©tmo
,

2006 
öt_ªg
->
d©¸c
,

2007 
öt_ªg
->
dmaqem±y
);

2011  
IRQ_HANDLED
;

2012 
	}
}

2018 
	$msdc_íabÀ_cd_úq
(
msdc_ho°
 *
ho°
, 
íabÀ
)

2020 
msdc_hw
 *
hw
 = 
ho°
->hw;

2021 
__iomem
 *
ba£
 = 
ho°
->base;

2024 i‡((
hw
->
Êags
 & 
MSDC_CD_PIN_EN
) == 0) {

2030 
	`sdr_˛r_bôs
(
MSDC_PS
, 
MSDC_PS_CDEN
);

2031 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
MSDC_INTEN_CDSC
);

2032 
	`sdr_˛r_bôs
(
SDC_CFG
, 
SDC_CFG_INSWKUP
);

2036 
	`N_MSG
(
CFG
, "CD IRQ E™abÀ(%d)", 
íabÀ
);

2038 i‡(
íabÀ
) {

2045 i‡(
hw
->
c⁄fig_gpio_pö
)

2046 
hw
->
	`c⁄fig_gpio_pö
(
MSDC_CD_PIN
, 
GPIO_PULL_UP
);

2048 
	`sdr_£t_fõld
(
MSDC_PS
, 
MSDC_PS_CDDEBOUNCE
, 
DEFAULT_DEBOUNCE
);

2049 
	`sdr_£t_bôs
(
MSDC_PS
, 
MSDC_PS_CDEN
);

2050 
	`sdr_£t_bôs
(
MSDC_INTEN
, 
MSDC_INTEN_CDSC
);

2051 
	`sdr_£t_bôs
(
SDC_CFG
, 
SDC_CFG_INSWKUP
);

2053 i‡(
hw
->
c⁄fig_gpio_pö
)

2054 
hw
->
	`c⁄fig_gpio_pö
(
MSDC_CD_PIN
, 
GPIO_PULL_DOWN
);

2056 
	`sdr_˛r_bôs
(
SDC_CFG
, 
SDC_CFG_INSWKUP
);

2057 
	`sdr_˛r_bôs
(
MSDC_PS
, 
MSDC_PS_CDEN
);

2058 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
MSDC_INTEN_CDSC
);

2065 
	}
}

2068 
	$msdc_öô_hw
(
msdc_ho°
 *
ho°
)

2070 
__iomem
 *
ba£
 = 
ho°
->base;

2074 
	`msdc_vc‹e_⁄
(
ho°
);

2075 
	`msdc_pö_ª£t
(
ho°
, 
MSDC_PIN_PULL_UP
);

2076 
	`msdc_£À˘_˛k§c
(
ho°
, 
hw
->
˛k_§c
);

2077 
	`íabÀ_˛ock
(
PERI_MSDC0_PDN
 + 
ho°
->
id
, "SD");

2078 
	`msdc_vdd_⁄
(
ho°
);

2081 
	`sdr_£t_fõld
(
MSDC_CFG
, 
MSDC_CFG_MODE
, 
MSDC_SDMMC
);

2084 
	`msdc_ª£t_hw
(
ho°
);

2085 
	`msdc_˛r_fifo
();

2088 
	`sdr_˛r_bôs
(
MSDC_PS
, 
MSDC_PS_CDEN
);

2091 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
	`sdr_ªad32
(MSDC_INTEN));

2092 
	`sdr_wrôe32
(
MSDC_INT
, 
	`sdr_ªad32
(MSDC_INT));

2096 
	`sdr_wrôe32
(
MSDC_PAD_CTL0
, 0x00090000);

2097 
	`sdr_wrôe32
(
MSDC_PAD_CTL1
, 0x000A0000);

2098 
	`sdr_wrôe32
(
MSDC_PAD_CTL2
, 0x000A0000);

2100 
	`sdr_wrôe32
(
MSDC_PAD_TUNE
, 0x84101010);

2102 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY0
, 0x10101010);

2103 
	`sdr_wrôe32
(
MSDC_DAT_RDDLY1
, 0x00000000);

2104 
	`sdr_wrôe32
(
MSDC_IOCON
, 0x00000000);

2106 
	`sdr_wrôe32
(
MSDC_PATCH_BIT0
, 0x003C000F);

2109 i‡(
	`sdr_ªad32
(
MSDC_ECO_VER
) >= 4) {

2110 i‡(
ho°
->
id
 == 1) {

2111 
	`sdr_£t_fõld
(
MSDC_PATCH_BIT1
, 
MSDC_PATCH_BIT1_WRDAT_CRCS
, 1);

2112 
	`sdr_£t_fõld
(
MSDC_PATCH_BIT1
, 
MSDC_PATCH_BIT1_CMD_RSP
, 1);

2115 
	`sdr_£t_bôs
(
MSDC_PATCH_BIT0
, 
MSDC_PATCH_BIT_CKGEN_CK
);

2124 
	`sdr_£t_bôs
(
SDC_CFG
, 
SDC_CFG_SDIO
);

2127 
	`sdr_˛r_bôs
(
SDC_CFG
, 
SDC_CFG_SDIOIDE
);

2130 
	`sdr_£t_bôs
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKSMT
);

2131 
	`sdr_£t_bôs
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDSMT
);

2132 
	`sdr_£t_bôs
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATSMT
);

2136 
	`sdr_£t_fõld
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVN
, 4);

2137 
	`sdr_£t_fõld
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVP
, 4);

2138 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVN
, 4);

2139 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVP
, 4);

2140 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVN
, 4);

2141 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVP
, 4);

2143 
	`sdr_£t_fõld
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVN
, 0);

2144 
	`sdr_£t_fõld
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVP
, 0);

2145 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVN
, 0);

2146 
	`sdr_£t_fõld
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVP
, 0);

2147 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVN
, 0);

2148 
	`sdr_£t_fõld
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVP
, 0);

2154 
	`sdr_£t_fõld
(
MSDC_PATCH_BIT0
, 1 << 30, 1);

2157 
	`sdr_£t_fõld
(
SDC_CFG
, 
SDC_CFG_DTOC
, 
DEFAULT_DTOC
);

2159 
	`msdc_£t_buswidth
(
ho°
, 
MMC_BUS_WIDTH_1
);

2161 
	`N_MSG
(
FUC
, "init hardware done!");

2162 
	}
}

2165 
	$msdc_deöô_hw
(
msdc_ho°
 *
ho°
)

2167 
__iomem
 *
ba£
 = 
ho°
->base;

2170 
	`sdr_˛r_bôs
(
MSDC_INTEN
, 
	`sdr_ªad32
(MSDC_INTEN));

2171 
	`sdr_wrôe32
(
MSDC_INT
, 
	`sdr_ªad32
(MSDC_INT));

2174 
	`msdc_íabÀ_cd_úq
(
ho°
, 0);

2176 
	}
}

2179 
	$msdc_öô_gpd_bd
(
msdc_ho°
 *
ho°
, 
msdc_dma
 *
dma
)

2181 
gpd
 *gpd = 
dma
->gpd;

2182 
bd
 *bd = 
dma
->bd;

2183 
i
;

2189 
	`mem£t
(
gpd
, 0, (gpd) * 2);

2191 
gpd
->
bdp
 = 1;

2192 
gpd
->
±r
 = (*)
dma
->
bd_addr
;

2193 
gpd
->
√xt
 = (*)((
u32
)
dma
->
gpd_addr
 + (gpd));

2195 
	`mem£t
(
bd
, 0, (bdË* 
MAX_BD_NUM
);

2196 
i
 = 0; i < (
MAX_BD_NUM
 - 1); i++)

2197 
bd
[
i
].
√xt
 = (*)(
dma
->
bd_addr
 + (*bd) * (i + 1));

2198 
	}
}

2200 
	$msdc_drv_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

2202 
ªsour˚
 *
ªs
;

2203 
__iomem
 *
ba£
;

2204 
mmc_ho°
 *
mmc
;

2205 
msdc_ho°
 *
ho°
;

2206 
msdc_hw
 *
hw
;

2207 
ªt
;

2208 
u32
 
ªg
;

2211 i‡(
ølök_soc
 =
MT762X_SOC_MT7688
 ||

2212 
ølök_soc
 =
MT762X_SOC_MT7628AN
) {

2214 
ªg
 = 
	`sdr_ªad32
((
__iomem
 *)(
RALINK_SYSCTL_BASE
 + 0x3c));

2215 
ªg
 |= 0x1e << 16;

2216 
	`sdr_wrôe32
((
__iomem
 *)(
RALINK_SYSCTL_BASE
 + 0x3c), 
ªg
);

2219 
hw
 = &
msdc0_hw
;

2221 i‡(
	`of_¥›îty_ªad_boﬁ
(
pdev
->
dev
.
of_node
, "mtk,wp-en"))

2222 
msdc0_hw
.
Êags
 |
MSDC_WP_PIN_EN
;

2225 
mmc
 = 
	`mmc_Æloc_ho°
((
msdc_ho°
), &
pdev
->
dev
);

2226 i‡(!
mmc
)

2227  -
ENOMEM
;

2229 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

2230 
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

2231 i‡(
	`IS_ERR
(
ba£
)) {

2232 
ªt
 = 
	`PTR_ERR
(
ba£
);

2233 
ho°_‰ì
;

2237 
mmc
->
›s
 = &
mt_msdc_›s
;

2238 
mmc
->
f_mö
 = 
HOST_MIN_MCLK
;

2239 
mmc
->
f_max
 = 
HOST_MAX_MCLK
;

2240 
mmc
->
o¸_avaû
 = 
MSDC_OCR_AVAIL
;

2242 
mmc
->
ˇps
 = 
MMC_CAP_MMC_HIGHSPEED
 | 
MMC_CAP_SD_HIGHSPEED
;

2245 
mmc
->
ˇps
 |
MMC_CAP_4_BIT_DATA
;

2247 
cd_a˘ive_low
 = !
	`of_¥›îty_ªad_boﬁ
(
pdev
->
dev
.
of_node
, "mediatek,cd-high");

2249 i‡(
	`of_¥›îty_ªad_boﬁ
(
pdev
->
dev
.
of_node
, "mediatek,cd-poll"))

2250 
mmc
->
ˇps
 |
MMC_CAP_NEEDS_POLL
;

2253 
mmc
->
max_£gs
 = 
MAX_HW_SGMTS
;

2255 
mmc
->
max_£g_size
 = 
MAX_SGMT_SZ
;

2256 
mmc
->
max_blk_size
 = 
HOST_MAX_BLKSZ
;

2257 
mmc
->
max_ªq_size
 = 
MAX_REQ_SZ
;

2258 
mmc
->
max_blk_cou¡
 = mmc->
max_ªq_size
;

2260 
ho°
 = 
	`mmc_¥iv
(
mmc
);

2261 
ho°
->
hw
 = hw;

2262 
ho°
->
mmc
 = mmc;

2263 
ho°
->
id
 = 
pdev
->id;

2264 i‡(
ho°
->
id
 < 0 || host->id >= 4)

2265 
ho°
->
id
 = 0;

2266 
ho°
->
îr‹
 = 0;

2268 
ho°
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

2269 i‡(
ho°
->
úq
 < 0) {

2270 
ªt
 = -
EINVAL
;

2271 
ho°_‰ì
;

2274 
ho°
->
ba£
 = base;

2275 
ho°
->
m˛k
 = 0;

2276 
ho°
->
h˛k
 = 
h˛ks
[
hw
->
˛k_§c
];

2277 
ho°
->
s˛k
 = 0;

2278 
ho°
->
pm_°©e
 = 
PMSG_RESUME
;

2279 
ho°
->
su•íd
 = 0;

2280 
ho°
->
c‹e_˛k⁄
 = 0;

2281 
ho°
->
ˇrd_˛k⁄
 = 0;

2282 
ho°
->
c‹e_powî
 = 0;

2283 
ho°
->
powî_mode
 = 
MMC_POWER_OFF
;

2285 
ho°
->
timeout_ns
 = 0;

2286 
ho°
->
timeout_˛ks
 = 
DEFAULT_DTOC
 * 65536;

2288 
ho°
->
mrq
 = 
NULL
;

2291 
	`mmc_dev
(
mmc
)->
dma_mask
 = 
NULL
;

2294 
ho°
->
dma
.
gpd
 = 
	`dma_Æloc_cohîít
(&
pdev
->
dev
,

2295 
MAX_GPD_NUM
 * (
gpd
),

2296 &
ho°
->
dma
.
gpd_addr
, 
GFP_KERNEL
);

2297 
ho°
->
dma
.
bd
 = 
	`dma_Æloc_cohîít
(&
pdev
->
dev
,

2298 
MAX_BD_NUM
 * (
bd
),

2299 &
ho°
->
dma
.
bd_addr
, 
GFP_KERNEL
);

2300 i‡(!
ho°
->
dma
.
gpd
 || !ho°->dma.
bd
) {

2301 
ªt
 = -
ENOMEM
;

2302 
ªÀa£_mem
;

2304 
	`msdc_öô_gpd_bd
(
ho°
, &ho°->
dma
);

2306 
	`INIT_DELAYED_WORK
(&
ho°
->
ˇrd_dñayw‹k
, 
msdc_èskÀt_ˇrd
);

2307 
	`•ö_lock_öô
(&
ho°
->
lock
);

2308 
	`msdc_öô_hw
(
ho°
);

2317 
ªt
 = 
	`devm_ªque°_úq
(&
pdev
->
dev
, 
ho°
->
úq
, 
msdc_úq
, 0,Ödev->
«me
,

2318 
ho°
);

2319 i‡(
ªt
)

2320 
ªÀa£
;

2322 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
mmc
);

2324 
ªt
 = 
	`mmc_add_ho°
(
mmc
);

2325 i‡(
ªt
)

2326 
ªÀa£
;

2329 i‡(
hw
->
Êags
 & 
MSDC_CD_PIN_EN
) {

2330 
	`msdc_íabÀ_cd_úq
(
ho°
, 1);

2332 
	`msdc_íabÀ_cd_úq
(
ho°
, 0);

2337 
ªÀa£
:

2338 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

2339 
	`msdc_deöô_hw
(
ho°
);

2340 
	`ˇn˚l_dñayed_w‹k_sync
(&
ho°
->
ˇrd_dñayw‹k
);

2342 
ªÀa£_mem
:

2343 i‡(
ho°
->
dma
.
gpd
)

2344 
	`dma_‰ì_cohîít
(&
pdev
->
dev
, 
MAX_GPD_NUM
 * (
gpd
),

2345 
ho°
->
dma
.
gpd
, ho°->dma.
gpd_addr
);

2346 i‡(
ho°
->
dma
.
bd
)

2347 
	`dma_‰ì_cohîít
(&
pdev
->
dev
, 
MAX_BD_NUM
 * (
bd
),

2348 
ho°
->
dma
.
bd
, ho°->dma.
bd_addr
);

2349 
ho°_‰ì
:

2350 
	`mmc_‰ì_ho°
(
mmc
);

2352  
ªt
;

2353 
	}
}

2356 
	$msdc_drv_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

2358 
mmc_ho°
 *
mmc
;

2359 
msdc_ho°
 *
ho°
;

2361 
mmc
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

2362 
	`BUG_ON
(!
mmc
);

2364 
ho°
 = 
	`mmc_¥iv
(
mmc
);

2365 
	`BUG_ON
(!
ho°
);

2367 
	`ERR_MSG
("removed !!!");

2369 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

2370 
	`mmc_ªmove_ho°
(
ho°
->
mmc
);

2371 
	`msdc_deöô_hw
(
ho°
);

2373 
	`ˇn˚l_dñayed_w‹k_sync
(&
ho°
->
ˇrd_dñayw‹k
);

2375 
	`dma_‰ì_cohîít
(&
pdev
->
dev
, 
MAX_GPD_NUM
 * (
gpd
),

2376 
ho°
->
dma
.
gpd
, ho°->dma.
gpd_addr
);

2377 
	`dma_‰ì_cohîít
(&
pdev
->
dev
, 
MAX_BD_NUM
 * (
bd
),

2378 
ho°
->
dma
.
bd
, ho°->dma.
bd_addr
);

2380 
	`mmc_‰ì_ho°
(
ho°
->
mmc
);

2383 
	}
}

2386 #ifde‡
CONFIG_PM


2388 
	$msdc_drv_pm
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

2390 
mmc_ho°
 *
mmc
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

2391 i‡(
mmc
) {

2392 
msdc_ho°
 *
ho°
 = 
	`mmc_¥iv
(
mmc
);

2393 
	`msdc_pm
(
°©e
, (*)
ho°
);

2395 
	}
}

2397 
	$msdc_drv_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

2399 i‡(
°©e
.
evít
 =
PM_EVENT_SUSPEND
)

2400 
	`msdc_drv_pm
(
pdev
, 
°©e
);

2402 
	}
}

2404 
	$msdc_drv_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

2406 
pm_mesßge
 
°©e
;

2408 
°©e
.
evít
 = 
PM_EVENT_RESUME
;

2409 
	`msdc_drv_pm
(
pdev
, 
°©e
);

2411 
	}
}

2414 c⁄° 
of_devi˚_id
 
	gmt7620_sdhci_m©ch
[] = {

2415 { .
com∑tibÀ
 = "ralink,mt7620-sdhci" },

2418 
MODULE_DEVICE_TABLE
(
of
, 
mt7620_sdhci_m©ch
);

2420 
∂©f‹m_drivî
 
	gmt_msdc_drivî
 = {

2421 .
¥obe
 = 
msdc_drv_¥obe
,

2422 .
	gªmove
 = 
msdc_drv_ªmove
,

2423 #ifde‡
CONFIG_PM


2424 .
	gsu•íd
 = 
msdc_drv_su•íd
,

2425 .
	gªsume
 = 
msdc_drv_ªsume
,

2427 .
	gdrivî
 = {

2428 .
«me
 = 
DRV_NAME
,

2429 .
	gof_m©ch_èbÀ
 = 
mt7620_sdhci_m©ch
,

2436 
__öô
 
	$mt_msdc_öô
()

2438 
ªt
;

2440 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
mt_msdc_drivî
);

2441 i‡(
ªt
) {

2442 
	`¥ötk
(
KERN_ERR
 
DRV_NAME
 ": Can'tÑegister driver");

2443  
ªt
;

2446 #i‡
	`deföed
(
MT6575_SD_DEBUG
)

2447 
	`msdc_debug_¥oc_öô
();

2450 
	}
}

2452 
__exô
 
	$mt_msdc_exô
()

2454 
	`∂©f‹m_drivî_uƒegi°î
(&
mt_msdc_drivî
);

2455 
	}
}

2457 
moduÀ_öô
(
mt_msdc_öô
);

2458 
moduÀ_exô
(
mt_msdc_exô
);

2459 
MODULE_LICENSE
("GPL");

2460 
MODULE_DESCRIPTION
("MediaTek MT6575 SD/MMC Card Driver");

2461 
MODULE_AUTHOR
("Infinity Chen <infinity.chen@mediatek.com>");

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/esw_rt3050.c

16 
	~<löux/moduÀ.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<asm/mach-ølök/ølök_ªgs.h
>

20 
	~<löux/of_úq.h
>

22 
	~<löux/swôch.h
>

24 
	~"mtk_ëh_soc.h
"

32 
	#RT305X_ESW_REG_ISR
 0x00

	)

33 
	#RT305X_ESW_REG_IMR
 0x04

	)

34 
	#RT305X_ESW_REG_FCT0
 0x08

	)

35 
	#RT305X_ESW_REG_PFC1
 0x14

	)

36 
	#RT305X_ESW_REG_ATS
 0x24

	)

37 
	#RT305X_ESW_REG_ATS0
 0x28

	)

38 
	#RT305X_ESW_REG_ATS1
 0x2c

	)

39 
	#RT305X_ESW_REG_ATS2
 0x30

	)

40 
	#RT305X_ESW_REG_PVIDC
(
_n
Ë(0x40 + 4 * (_n))

	)

41 
	#RT305X_ESW_REG_VLANI
(
_n
Ë(0x50 + 4 * (_n))

	)

42 
	#RT305X_ESW_REG_VMSC
(
_n
Ë(0x70 + 4 * (_n))

	)

43 
	#RT305X_ESW_REG_POA
 0x80

	)

44 
	#RT305X_ESW_REG_FPA
 0x84

	)

45 
	#RT305X_ESW_REG_SOCPC
 0x8c

	)

46 
	#RT305X_ESW_REG_POC0
 0x90

	)

47 
	#RT305X_ESW_REG_POC1
 0x94

	)

48 
	#RT305X_ESW_REG_POC2
 0x98

	)

49 
	#RT305X_ESW_REG_SGC
 0x9c

	)

50 
	#RT305X_ESW_REG_STRT
 0xa0

	)

51 
	#RT305X_ESW_REG_PCR0
 0xc0

	)

52 
	#RT305X_ESW_REG_PCR1
 0xc4

	)

53 
	#RT305X_ESW_REG_FPA2
 0xc8

	)

54 
	#RT305X_ESW_REG_FCT2
 0xcc

	)

55 
	#RT305X_ESW_REG_SGC2
 0xe4

	)

56 
	#RT305X_ESW_REG_P0LED
 0xa4

	)

57 
	#RT305X_ESW_REG_P1LED
 0xa8

	)

58 
	#RT305X_ESW_REG_P2LED
 0xac

	)

59 
	#RT305X_ESW_REG_P3LED
 0xb0

	)

60 
	#RT305X_ESW_REG_P4LED
 0xb4

	)

61 
	#RT305X_ESW_REG_PXPC
(
_x
Ë(0xe8 + (4 * _x))

	)

62 
	#RT305X_ESW_REG_P1PC
 0xec

	)

63 
	#RT305X_ESW_REG_P2PC
 0xf0

	)

64 
	#RT305X_ESW_REG_P3PC
 0xf4

	)

65 
	#RT305X_ESW_REG_P4PC
 0xf8

	)

66 
	#RT305X_ESW_REG_P5PC
 0xfc

	)

68 
	#RT305X_ESW_LED_LINK
 0

	)

69 
	#RT305X_ESW_LED_100M
 1

	)

70 
	#RT305X_ESW_LED_DUPLEX
 2

	)

71 
	#RT305X_ESW_LED_ACTIVITY
 3

	)

72 
	#RT305X_ESW_LED_COLLISION
 4

	)

73 
	#RT305X_ESW_LED_LINKACT
 5

	)

74 
	#RT305X_ESW_LED_DUPLCOLL
 6

	)

75 
	#RT305X_ESW_LED_10MACT
 7

	)

76 
	#RT305X_ESW_LED_100MACT
 8

	)

78 
	#RT305X_ESW_LED_BLINK
 10

	)

79 
	#RT305X_ESW_LED_ON
 12

	)

81 
	#RT305X_ESW_LINK_S
 25

	)

82 
	#RT305X_ESW_DUPLEX_S
 9

	)

83 
	#RT305X_ESW_SPD_S
 0

	)

85 
	#RT305X_ESW_PCR0_WT_NWAY_DATA_S
 16

	)

86 
	#RT305X_ESW_PCR0_WT_PHY_CMD
 
	`BIT
(13)

	)

87 
	#RT305X_ESW_PCR0_CPU_PHY_REG_S
 8

	)

89 
	#RT305X_ESW_PCR1_WT_DONE
 
	`BIT
(0)

	)

91 
	#RT305X_ESW_ATS_TIMEOUT
 (5 * 
HZ
)

	)

92 
	#RT305X_ESW_PHY_TIMEOUT
 (5 * 
HZ
)

	)

94 
	#RT305X_ESW_PVIDC_PVID_M
 0xfff

	)

95 
	#RT305X_ESW_PVIDC_PVID_S
 12

	)

97 
	#RT305X_ESW_VLANI_VID_M
 0xfff

	)

98 
	#RT305X_ESW_VLANI_VID_S
 12

	)

100 
	#RT305X_ESW_VMSC_MSC_M
 0xff

	)

101 
	#RT305X_ESW_VMSC_MSC_S
 8

	)

103 
	#RT305X_ESW_SOCPC_DISUN2CPU_S
 0

	)

104 
	#RT305X_ESW_SOCPC_DISMC2CPU_S
 8

	)

105 
	#RT305X_ESW_SOCPC_DISBC2CPU_S
 16

	)

106 
	#RT305X_ESW_SOCPC_CRC_PADDING
 
	`BIT
(25)

	)

108 
	#RT305X_ESW_POC0_EN_BP_S
 0

	)

109 
	#RT305X_ESW_POC0_EN_FC_S
 8

	)

110 
	#RT305X_ESW_POC0_DIS_RMC2CPU_S
 16

	)

111 
	#RT305X_ESW_POC0_DIS_PORT_M
 0x7f

	)

112 
	#RT305X_ESW_POC0_DIS_PORT_S
 23

	)

114 
	#RT305X_ESW_POC2_UNTAG_EN_M
 0xff

	)

115 
	#RT305X_ESW_POC2_UNTAG_EN_S
 0

	)

116 
	#RT305X_ESW_POC2_ENAGING_S
 8

	)

117 
	#RT305X_ESW_POC2_DIS_UC_PAUSE_S
 16

	)

119 
	#RT305X_ESW_SGC2_DOUBLE_TAG_M
 0x7f

	)

120 
	#RT305X_ESW_SGC2_DOUBLE_TAG_S
 0

	)

121 
	#RT305X_ESW_SGC2_LAN_PMAP_M
 0x3f

	)

122 
	#RT305X_ESW_SGC2_LAN_PMAP_S
 24

	)

124 
	#RT305X_ESW_PFC1_EN_VLAN_M
 0xff

	)

125 
	#RT305X_ESW_PFC1_EN_VLAN_S
 16

	)

126 
	#RT305X_ESW_PFC1_EN_TOS_S
 24

	)

128 
	#RT305X_ESW_VLAN_NONE
 0xfff

	)

130 
	#RT305X_ESW_GSC_BC_STROM_MASK
 0x3

	)

131 
	#RT305X_ESW_GSC_BC_STROM_SHIFT
 4

	)

133 
	#RT305X_ESW_GSC_LED_FREQ_MASK
 0x3

	)

134 
	#RT305X_ESW_GSC_LED_FREQ_SHIFT
 23

	)

136 
	#RT305X_ESW_POA_LINK_MASK
 0x1f

	)

137 
	#RT305X_ESW_POA_LINK_SHIFT
 25

	)

139 
	#RT305X_ESW_PORT_ST_CHG
 
	`BIT
(26)

	)

140 
	#RT305X_ESW_PORT0
 0

	)

141 
	#RT305X_ESW_PORT1
 1

	)

142 
	#RT305X_ESW_PORT2
 2

	)

143 
	#RT305X_ESW_PORT3
 3

	)

144 
	#RT305X_ESW_PORT4
 4

	)

145 
	#RT305X_ESW_PORT5
 5

	)

146 
	#RT305X_ESW_PORT6
 6

	)

148 
	#RT305X_ESW_PORTS_NONE
 0

	)

150 
	#RT305X_ESW_PMAP_LLLLLL
 0x3f

	)

151 
	#RT305X_ESW_PMAP_LLLLWL
 0x2f

	)

152 
	#RT305X_ESW_PMAP_WLLLLL
 0x3e

	)

154 
	#RT305X_ESW_PORTS_INTERNAL
 \

155 (
	`BIT
(
RT305X_ESW_PORT0
Ë| BIT(
RT305X_ESW_PORT1
) | \

156 
	`BIT
(
RT305X_ESW_PORT2
Ë| BIT(
RT305X_ESW_PORT3
) | \

157 
	`BIT
(
RT305X_ESW_PORT4
))

	)

159 
	#RT305X_ESW_PORTS_NOCPU
 \

160 (
RT305X_ESW_PORTS_INTERNAL
 | 
	`BIT
(
RT305X_ESW_PORT5
))

	)

162 
	#RT305X_ESW_PORTS_CPU
 
	`BIT
(
RT305X_ESW_PORT6
)

	)

164 
	#RT305X_ESW_PORTS_ALL
 \

165 (
RT305X_ESW_PORTS_NOCPU
 | 
RT305X_ESW_PORTS_CPU
)

	)

167 
	#RT305X_ESW_NUM_VLANS
 16

	)

168 
	#RT305X_ESW_NUM_VIDS
 4096

	)

169 
	#RT305X_ESW_NUM_PORTS
 7

	)

170 
	#RT305X_ESW_NUM_LANWAN
 6

	)

171 
	#RT305X_ESW_NUM_LEDS
 5

	)

173 
	#RT5350_ESW_REG_PXTPC
(
_x
Ë(0x150 + (4 * _x))

	)

174 
	#RT5350_EWS_REG_LED_POLARITY
 0x168

	)

175 
	#RT5350_RESET_EPHY
 
	`BIT
(24)

	)

179 
	mRT305X_ESW_ATTR_ENABLE_VLAN
,

180 
	mRT305X_ESW_ATTR_ALT_VLAN_DISABLE
,

181 
	mRT305X_ESW_ATTR_BC_STATUS
,

182 
	mRT305X_ESW_ATTR_LED_FREQ
,

184 
	mRT305X_ESW_ATTR_PORT_DISABLE
,

185 
	mRT305X_ESW_ATTR_PORT_DOUBLETAG
,

186 
	mRT305X_ESW_ATTR_PORT_UNTAG
,

187 
	mRT305X_ESW_ATTR_PORT_LED
,

188 
	mRT305X_ESW_ATTR_PORT_LAN
,

189 
	mRT305X_ESW_ATTR_PORT_RECV_BAD
,

190 
	mRT305X_ESW_ATTR_PORT_RECV_GOOD
,

191 
	mRT5350_ESW_ATTR_PORT_TR_BAD
,

192 
	mRT5350_ESW_ATTR_PORT_TR_GOOD
,

195 
	sesw_p‹t
 {

196 
boﬁ
 
	mdißbÀ
;

197 
boﬁ
 
	mdoubÀèg
;

198 
boﬁ
 
	mu¡ag
;

199 
u8
 
	mÀd
;

200 
u16
 
	mpvid
;

203 
	sesw_vœn
 {

204 
u8
 
	mp‹ts
;

205 
u16
 
	mvid
;

209 
	mRT305X_ESW_VLAN_CONFIG_NONE
 = 0,

210 
	mRT305X_ESW_VLAN_CONFIG_LLLLW
,

211 
	mRT305X_ESW_VLAN_CONFIG_WLLLL
,

214 
	sπ305x_esw
 {

215 
devi˚
 *
	mdev
;

216 
__iomem
 *
	mba£
;

217 
	múq
;

220 
•ölock_t
 
	mªg_rw_lock
;

222 
	mp‹t_m≠
;

223 
	mp‹t_dißbÀ
;

224 
	mªg_öôvÆ_f˘2
;

225 
	mªg_öôvÆ_Âa2
;

226 
	mªg_Àd_pﬁ¨ôy
;

228 
swôch_dev
 
	mswdev
;

229 
boﬁ
 
	mglobÆ_vœn_íabÀ
;

230 
boﬁ
 
	mÆt_vœn_dißbÀ
;

231 
	mbc_°‹m_¥Ÿe˘
;

232 
	mÀd_‰equícy
;

233 
esw_vœn
 
	mvœns
[
RT305X_ESW_NUM_VLANS
];

234 
esw_p‹t
 
	mp‹ts
[
RT305X_ESW_NUM_PORTS
];

238 
ölöe
 
	$esw_w32
(
π305x_esw
 *
esw
, 
u32
 
vÆ
, 
ªg
)

240 
	`__øw_wrôñ
(
vÆ
, 
esw
->
ba£
 + 
ªg
);

241 
	}
}

243 
ölöe
 
u32
 
	$esw_r32
(
π305x_esw
 *
esw
, 
ªg
)

245  
	`__øw_ªadl
(
esw
->
ba£
 + 
ªg
);

246 
	}
}

248 
ölöe
 
	$esw_rmw_øw
(
π305x_esw
 *
esw
, 
ªg
,

249 
mask
, 
vÆ
)

251 
t
;

253 
t
 = 
	`__øw_ªadl
(
esw
->
ba£
 + 
ªg
Ë& ~
mask
;

254 
	`__øw_wrôñ
(
t
 | 
vÆ
, 
esw
->
ba£
 + 
ªg
);

255 
	}
}

257 
	$esw_rmw
(
π305x_esw
 *
esw
, 
ªg
,

258 
mask
, 
vÆ
)

260 
Êags
;

262 
	`•ö_lock_úqßve
(&
esw
->
ªg_rw_lock
, 
Êags
);

263 
	`esw_rmw_øw
(
esw
, 
ªg
, 
mask
, 
vÆ
);

264 
	`•ö_u∆ock_úqª°‹e
(&
esw
->
ªg_rw_lock
, 
Êags
);

265 
	}
}

267 
u32
 
	$π305x_mii_wrôe
(
π305x_esw
 *
esw
, 
u32
 
phy_addr
,

268 
u32
 
phy_ªgi°î
, u32 
wrôe_d©a
)

270 
t_°¨t
 = 
jiffõs
;

271 
ªt
 = 0;

274 i‡(!(
	`esw_r32
(
esw
, 
RT305X_ESW_REG_PCR1
) &

275 
RT305X_ESW_PCR1_WT_DONE
))

277 i‡(
	`time_a·î
(
jiffõs
, 
t_°¨t
 + 
RT305X_ESW_PHY_TIMEOUT
)) {

278 
ªt
 = 1;

279 
out
;

283 
wrôe_d©a
 &= 0xffff;

284 
	`esw_w32
(
esw
, (
wrôe_d©a
 << 
RT305X_ESW_PCR0_WT_NWAY_DATA_S
) |

285 (
phy_ªgi°î
 << 
RT305X_ESW_PCR0_CPU_PHY_REG_S
) |

286 (
phy_addr
Ë| 
RT305X_ESW_PCR0_WT_PHY_CMD
,

287 
RT305X_ESW_REG_PCR0
);

289 
t_°¨t
 = 
jiffõs
;

291 i‡(
	`esw_r32
(
esw
, 
RT305X_ESW_REG_PCR1
) &

292 
RT305X_ESW_PCR1_WT_DONE
)

295 i‡(
	`time_a·î
(
jiffõs
, 
t_°¨t
 + 
RT305X_ESW_PHY_TIMEOUT
)) {

296 
ªt
 = 1;

300 
out
:

301 i‡(
ªt
)

302 
	`dev_îr
(
esw
->
dev
, "ramips_eth: MDIOÅimeout\n");

303  
ªt
;

304 
	}
}

306 
	$esw_gë_vœn_id
(
π305x_esw
 *
esw
, 
vœn
)

308 
s
;

309 
vÆ
;

311 
s
 = 
RT305X_ESW_VLANI_VID_S
 * (
vœn
 % 2);

312 
vÆ
 = 
	`esw_r32
(
esw
, 
	`RT305X_ESW_REG_VLANI
(
vœn
 / 2));

313 
vÆ
 = (vÆ >> 
s
Ë& 
RT305X_ESW_VLANI_VID_M
;

315  
vÆ
;

316 
	}
}

318 
	$esw_£t_vœn_id
(
π305x_esw
 *
esw
, 
vœn
, 
vid
)

320 
s
;

322 
s
 = 
RT305X_ESW_VLANI_VID_S
 * (
vœn
 % 2);

323 
	`esw_rmw
(
esw
,

324 
	`RT305X_ESW_REG_VLANI
(
vœn
 / 2),

325 
RT305X_ESW_VLANI_VID_M
 << 
s
,

326 (
vid
 & 
RT305X_ESW_VLANI_VID_M
Ë<< 
s
);

327 
	}
}

329 
	$esw_gë_pvid
(
π305x_esw
 *
esw
, 
p‹t
)

331 
s
, 
vÆ
;

333 
s
 = 
RT305X_ESW_PVIDC_PVID_S
 * (
p‹t
 % 2);

334 
vÆ
 = 
	`esw_r32
(
esw
, 
	`RT305X_ESW_REG_PVIDC
(
p‹t
 / 2));

335  (
vÆ
 >> 
s
Ë& 
RT305X_ESW_PVIDC_PVID_M
;

336 
	}
}

338 
	$esw_£t_pvid
(
π305x_esw
 *
esw
, 
p‹t
, 
pvid
)

340 
s
;

342 
s
 = 
RT305X_ESW_PVIDC_PVID_S
 * (
p‹t
 % 2);

343 
	`esw_rmw
(
esw
,

344 
	`RT305X_ESW_REG_PVIDC
(
p‹t
 / 2),

345 
RT305X_ESW_PVIDC_PVID_M
 << 
s
,

346 (
pvid
 & 
RT305X_ESW_PVIDC_PVID_M
Ë<< 
s
);

347 
	}
}

349 
	$esw_gë_vmsc
(
π305x_esw
 *
esw
, 
vœn
)

351 
s
, 
vÆ
;

353 
s
 = 
RT305X_ESW_VMSC_MSC_S
 * (
vœn
 % 4);

354 
vÆ
 = 
	`esw_r32
(
esw
, 
	`RT305X_ESW_REG_VMSC
(
vœn
 / 4));

355 
vÆ
 = (vÆ >> 
s
Ë& 
RT305X_ESW_VMSC_MSC_M
;

357  
vÆ
;

358 
	}
}

360 
	$esw_£t_vmsc
(
π305x_esw
 *
esw
, 
vœn
, 
msc
)

362 
s
;

364 
s
 = 
RT305X_ESW_VMSC_MSC_S
 * (
vœn
 % 4);

365 
	`esw_rmw
(
esw
,

366 
	`RT305X_ESW_REG_VMSC
(
vœn
 / 4),

367 
RT305X_ESW_VMSC_MSC_M
 << 
s
,

368 (
msc
 & 
RT305X_ESW_VMSC_MSC_M
Ë<< 
s
);

369 
	}
}

371 
	$esw_gë_p‹t_dißbÀ
(
π305x_esw
 *
esw
)

373 
ªg
;

375 
ªg
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_POC0
);

376  (
ªg
 >> 
RT305X_ESW_POC0_DIS_PORT_S
) &

377 
RT305X_ESW_POC0_DIS_PORT_M
;

378 
	}
}

380 
	$esw_£t_p‹t_dißbÀ
(
π305x_esw
 *
esw
, 
dißbÀ_mask
)

382 
ﬁd_mask
;

383 
íabÀ_mask
;

384 
ch™ged
;

385 
i
;

387 
ﬁd_mask
 = 
	`esw_gë_p‹t_dißbÀ
(
esw
);

388 
ch™ged
 = 
ﬁd_mask
 ^ 
dißbÀ_mask
;

389 
íabÀ_mask
 = 
ﬁd_mask
 & 
dißbÀ_mask
;

392 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_POC0
,

393 (
RT305X_ESW_POC0_DIS_PORT_M
 <<

394 
RT305X_ESW_POC0_DIS_PORT_S
),

395 
íabÀ_mask
 << 
RT305X_ESW_POC0_DIS_PORT_S
);

397 
i
 = 0; i < 
RT305X_ESW_NUM_LEDS
; i++) {

398 i‡(!(
ch™ged
 & (1 << 
i
)))

400 i‡(
dißbÀ_mask
 & (1 << 
i
)) {

402 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
,

403 
BMCR_PDOWN
);

406 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
,

407 
BMCR_FULLDPLX
 |

408 
BMCR_ANENABLE
 |

409 
BMCR_ANRESTART
 |

410 
BMCR_SPEED100
);

415 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_POC0
,

416 (
RT305X_ESW_POC0_DIS_PORT_M
 <<

417 
RT305X_ESW_POC0_DIS_PORT_S
),

418 
dißbÀ_mask
 << 
RT305X_ESW_POC0_DIS_PORT_S
);

419 
	}
}

421 
	$esw_£t_gsc
(
π305x_esw
 *
esw
)

423 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_SGC
,

424 
RT305X_ESW_GSC_BC_STROM_MASK
 << 
RT305X_ESW_GSC_BC_STROM_SHIFT
,

425 
esw
->
bc_°‹m_¥Ÿe˘
 << 
RT305X_ESW_GSC_BC_STROM_SHIFT
);

426 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_SGC
,

427 
RT305X_ESW_GSC_LED_FREQ_MASK
 << 
RT305X_ESW_GSC_LED_FREQ_SHIFT
,

428 
esw
->
Àd_‰equícy
 << 
RT305X_ESW_GSC_LED_FREQ_SHIFT
);

429 
	}
}

431 
esw_≠∂y_c⁄fig
(
swôch_dev
 *
dev
);

433 
	$esw_hw_öô
(
π305x_esw
 *
esw
)

435 
i
;

436 
u8
 
p‹t_dißbÀ
 = 0;

437 
u8
 
p‹t_m≠
 = 
RT305X_ESW_PMAP_LLLLLL
;

440 
	`esw_w32
(
esw
, 0xC8A07850, 
RT305X_ESW_REG_FCT0
);

441 
	`esw_w32
(
esw
, 0x00000000, 
RT305X_ESW_REG_SGC2
);

443 
	`esw_w32
(
esw
, 0x00005555 |

444 (
RT305X_ESW_PORTS_ALL
 << 
RT305X_ESW_PFC1_EN_VLAN_S
),

445 
RT305X_ESW_REG_PFC1
);

448 
	`esw_w32
(
esw
, ((
RT305X_ESW_PORTS_ALL
 << 
RT305X_ESW_POC0_EN_BP_S
) |

449 (
RT305X_ESW_PORTS_ALL
 << 
RT305X_ESW_POC0_EN_FC_S
)),

450 
RT305X_ESW_REG_POC0
);

453 
	`esw_w32
(
esw
, ((
RT305X_ESW_PORTS_ALL
 << 
RT305X_ESW_POC2_ENAGING_S
) |

454 (
RT305X_ESW_PORTS_NOCPU
 << 
RT305X_ESW_POC2_UNTAG_EN_S
)),

455 
RT305X_ESW_REG_POC2
);

457 i‡(
esw
->
ªg_öôvÆ_f˘2
)

458 
	`esw_w32
(
esw
,Ésw->
ªg_öôvÆ_f˘2
, 
RT305X_ESW_REG_FCT2
);

460 
	`esw_w32
(
esw
, 0x0002500c, 
RT305X_ESW_REG_FCT2
);

468 
	`esw_w32
(
esw
, 0x0008a301, 
RT305X_ESW_REG_SGC
);

471 
	`esw_w32
(
esw
,

472 (
RT305X_ESW_SOCPC_CRC_PADDING
 |

473 (
RT305X_ESW_PORTS_CPU
 << 
RT305X_ESW_SOCPC_DISUN2CPU_S
) |

474 (
RT305X_ESW_PORTS_CPU
 << 
RT305X_ESW_SOCPC_DISMC2CPU_S
) |

475 (
RT305X_ESW_PORTS_CPU
 << 
RT305X_ESW_SOCPC_DISBC2CPU_S
)),

476 
RT305X_ESW_REG_SOCPC
);

483 i‡(
esw
->
ªg_öôvÆ_Âa2
)

484 
	`esw_w32
(
esw
,Ésw->
ªg_öôvÆ_Âa2
, 
RT305X_ESW_REG_FPA2
);

486 
	`esw_w32
(
esw
, 0x3f502b28, 
RT305X_ESW_REG_FPA2
);

487 
	`esw_w32
(
esw
, 0x00000000, 
RT305X_ESW_REG_FPA
);

490 
	`esw_w32
(
esw
, 0x00000005, 
RT305X_ESW_REG_P0LED
);

491 
	`esw_w32
(
esw
, 0x00000005, 
RT305X_ESW_REG_P1LED
);

492 
	`esw_w32
(
esw
, 0x00000005, 
RT305X_ESW_REG_P2LED
);

493 
	`esw_w32
(
esw
, 0x00000005, 
RT305X_ESW_REG_P3LED
);

494 
	`esw_w32
(
esw
, 0x00000005, 
RT305X_ESW_REG_P4LED
);

497 
p‹t_dißbÀ
 = 
esw
->port_disable;

502 
p‹t_dißbÀ
 |
	`esw_gë_p‹t_dißbÀ
(
esw
);

504 
i
 = 0; i < 6; i++)

505 
esw
->
p‹ts
[
i
].
dißbÀ
 = (
p‹t_dißbÀ
 & (1 << i)) != 0;

507 i‡(
ølök_soc
 =
RT305X_SOC_RT3352
) {

509 
	`„_ª£t
(
RT5350_RESET_EPHY
);

511 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

512 
i
 = 0; i < 5; i++) {

513 i‡(
esw
->
p‹ts
[
i
].
dißbÀ
) {

514 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
, 
BMCR_PDOWN
);

516 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
,

517 
BMCR_FULLDPLX
 |

518 
BMCR_ANENABLE
 |

519 
BMCR_SPEED100
);

522 
	`π305x_mii_wrôe
(
esw
, 
i
, 26, 0x1601);

524 
	`π305x_mii_wrôe
(
esw
, 
i
, 29, 0x7016);

526 
	`π305x_mii_wrôe
(
esw
, 
i
, 30, 0x0038);

530 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x0);

532 
	`π305x_mii_wrôe
(
esw
, 0, 1, 0x4a40);

534 
	`π305x_mii_wrôe
(
esw
, 0, 2, 0x6254);

536 
	`π305x_mii_wrôe
(
esw
, 0, 3, 0xa17f);

537 
	`π305x_mii_wrôe
(
esw
, 0, 12, 0x7eaa);

539 
	`π305x_mii_wrôe
(
esw
, 0, 14, 0x65);

541 
	`π305x_mii_wrôe
(
esw
, 0, 16, 0x0684);

543 
	`π305x_mii_wrôe
(
esw
, 0, 17, 0x0fe0);

545 
	`π305x_mii_wrôe
(
esw
, 0, 18, 0x40ba);

549 
	`π305x_mii_wrôe
(
esw
, 0, 22, 0x253f);

551 
	`π305x_mii_wrôe
(
esw
, 0, 27, 0x2fda);

553 
	`π305x_mii_wrôe
(
esw
, 0, 28, 0xc410);

555 
	`π305x_mii_wrôe
(
esw
, 0, 29, 0x598b);

557 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

558 } i‡(
ølök_soc
 =
RT305X_SOC_RT5350
) {

560 
	`„_ª£t
(
RT5350_RESET_EPHY
);

563 
	`esw_w32
(
esw
,Ésw->
ªg_Àd_pﬁ¨ôy
 & 0x1F,

564 
RT5350_EWS_REG_LED_POLARITY
);

567 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

568 
i
 = 0; i < 5; i++) {

569 i‡(
esw
->
p‹ts
[
i
].
dißbÀ
) {

570 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
, 
BMCR_PDOWN
);

572 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
,

573 
BMCR_FULLDPLX
 |

574 
BMCR_ANENABLE
 |

575 
BMCR_SPEED100
);

578 
	`π305x_mii_wrôe
(
esw
, 
i
, 26, 0x1601);

580 
	`π305x_mii_wrôe
(
esw
, 
i
, 29, 0x7015);

582 
	`π305x_mii_wrôe
(
esw
, 
i
, 30, 0x0038);

586 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x0);

588 
	`π305x_mii_wrôe
(
esw
, 0, 1, 0x4a40);

590 
	`π305x_mii_wrôe
(
esw
, 0, 2, 0x6254);

592 
	`π305x_mii_wrôe
(
esw
, 0, 3, 0xa17f);

593 
	`π305x_mii_wrôe
(
esw
, 0, 12, 0x7eaa);

595 
	`π305x_mii_wrôe
(
esw
, 0, 14, 0x65);

597 
	`π305x_mii_wrôe
(
esw
, 0, 16, 0x0684);

599 
	`π305x_mii_wrôe
(
esw
, 0, 17, 0x0fe0);

601 
	`π305x_mii_wrôe
(
esw
, 0, 18, 0x40ba);

605 
	`π305x_mii_wrôe
(
esw
, 0, 22, 0x253f);

607 
	`π305x_mii_wrôe
(
esw
, 0, 27, 0x2fda);

609 
	`π305x_mii_wrôe
(
esw
, 0, 28, 0xc410);

611 
	`π305x_mii_wrôe
(
esw
, 0, 29, 0x598b);

613 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

614 } i‡(
ølök_soc
 =
MT762X_SOC_MT7628AN
 ||ÑÆök_so¯=
MT762X_SOC_MT7688
) {

615 
i
;

618 
	`„_ª£t
(
RT5350_RESET_EPHY
);

620 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x2000);

621 
	`π305x_mii_wrôe
(
esw
, 0, 26, 0x0020);

623 
i
 = 0; i < 5; i++) {

624 
	`π305x_mii_wrôe
(
esw
, 
i
, 31, 0x8000);

625 
	`π305x_mii_wrôe
(
esw
, 
i
, 0, 0x3100);

626 
	`π305x_mii_wrôe
(
esw
, 
i
, 30, 0xa000);

627 
	`π305x_mii_wrôe
(
esw
, 
i
, 31, 0xa000);

628 
	`π305x_mii_wrôe
(
esw
, 
i
, 16, 0x0606);

629 
	`π305x_mii_wrôe
(
esw
, 
i
, 23, 0x0f0e);

630 
	`π305x_mii_wrôe
(
esw
, 
i
, 24, 0x1610);

631 
	`π305x_mii_wrôe
(
esw
, 
i
, 30, 0x1f15);

632 
	`π305x_mii_wrôe
(
esw
, 
i
, 28, 0x6111);

633 
	`π305x_mii_wrôe
(
esw
, 
i
, 31, 0x2000);

634 
	`π305x_mii_wrôe
(
esw
, 
i
, 26, 0x0000);

638 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x5000);

639 
	`π305x_mii_wrôe
(
esw
, 0, 19, 0x004a);

640 
	`π305x_mii_wrôe
(
esw
, 0, 20, 0x015a);

641 
	`π305x_mii_wrôe
(
esw
, 0, 21, 0x00ee);

642 
	`π305x_mii_wrôe
(
esw
, 0, 22, 0x0033);

643 
	`π305x_mii_wrôe
(
esw
, 0, 23, 0x020a);

644 
	`π305x_mii_wrôe
(
esw
, 0, 24, 0x0000);

645 
	`π305x_mii_wrôe
(
esw
, 0, 25, 0x024a);

646 
	`π305x_mii_wrôe
(
esw
, 0, 26, 0x035a);

647 
	`π305x_mii_wrôe
(
esw
, 0, 27, 0x02ee);

648 
	`π305x_mii_wrôe
(
esw
, 0, 28, 0x0233);

649 
	`π305x_mii_wrôe
(
esw
, 0, 29, 0x000a);

650 
	`π305x_mii_wrôe
(
esw
, 0, 30, 0x0000);

652 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

653 
i
 = 0; i < 5; i++) {

654 i‡(
esw
->
p‹ts
[
i
].
dißbÀ
) {

655 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
, 
BMCR_PDOWN
);

657 
	`π305x_mii_wrôe
(
esw
, 
i
, 
MII_BMCR
,

658 
BMCR_FULLDPLX
 |

659 
BMCR_ANENABLE
 |

660 
BMCR_SPEED100
);

663 
	`π305x_mii_wrôe
(
esw
, 
i
, 26, 0x1601);

665 
	`π305x_mii_wrôe
(
esw
, 
i
, 29, 0x7058);

667 
	`π305x_mii_wrôe
(
esw
, 
i
, 30, 0x0018);

672 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x0);

674 
	`π305x_mii_wrôe
(
esw
, 0, 22, 0x052f);

676 
	`π305x_mii_wrôe
(
esw
, 0, 17, 0x0fe0);

678 
	`π305x_mii_wrôe
(
esw
, 0, 18, 0x40ba);

680 
	`π305x_mii_wrôe
(
esw
, 0, 14, 0x65);

682 
	`π305x_mii_wrôe
(
esw
, 0, 31, 0x8000);

685 i‡(
esw
->
p‹t_m≠
)

686 
p‹t_m≠
 = 
esw
->port_map;

688 
p‹t_m≠
 = 
RT305X_ESW_PMAP_LLLLLL
;

695 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_SGC2
,

696 
RT305X_ESW_SGC2_LAN_PMAP_M
 << 
RT305X_ESW_SGC2_LAN_PMAP_S
,

697 
p‹t_m≠
 << 
RT305X_ESW_SGC2_LAN_PMAP_S
);

700 
i
 = 0; i < 
RT305X_ESW_NUM_LEDS
; i++)

701 
esw
->
p‹ts
[
i
].
Àd
 = 0x05;

704 
	`esw_≠∂y_c⁄fig
(&
esw
->
swdev
);

707 
	`esw_w32
(
esw
, ~
RT305X_ESW_PORT_ST_CHG
, 
RT305X_ESW_REG_IMR
);

708 
	}
}

710 
úqªtu∫_t
 
	$esw_öãºu±
(
úq
, *
_esw
)

712 
π305x_esw
 *
esw
 = (π305x_esw *)
_esw
;

713 
u32
 
°©us
;

715 
°©us
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_ISR
);

716 i‡(
°©us
 & 
RT305X_ESW_PORT_ST_CHG
) {

717 
u32
 
lök
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_POA
);

719 
lök
 >>
RT305X_ESW_POA_LINK_SHIFT
;

720 
lök
 &
RT305X_ESW_POA_LINK_MASK
;

721 
	`dev_öfo
(
esw
->
dev
, "lök ch™ged 0x%02X\n", 
lök
);

723 
	`esw_w32
(
esw
, 
°©us
, 
RT305X_ESW_REG_ISR
);

725  
IRQ_HANDLED
;

726 
	}
}

728 
	$esw_≠∂y_c⁄fig
(
swôch_dev
 *
dev
)

730 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

731 
i
;

732 
u8
 
dißbÀ
 = 0;

733 
u8
 
doubÀèg
 = 0;

734 
u8
 
í_vœn
 = 0;

735 
u8
 
u¡ag
 = 0;

737 
i
 = 0; i < 
RT305X_ESW_NUM_VLANS
; i++) {

738 
u32
 
vid
, 
vmsc
;

739 i‡(
esw
->
globÆ_vœn_íabÀ
) {

740 
vid
 = 
esw
->
vœns
[
i
].vid;

741 
vmsc
 = 
esw
->
vœns
[
i
].
p‹ts
;

743 
vid
 = 
RT305X_ESW_VLAN_NONE
;

744 
vmsc
 = 
RT305X_ESW_PORTS_NONE
;

746 
	`esw_£t_vœn_id
(
esw
, 
i
, 
vid
);

747 
	`esw_£t_vmsc
(
esw
, 
i
, 
vmsc
);

750 
i
 = 0; i < 
RT305X_ESW_NUM_PORTS
; i++) {

751 
u32
 
pvid
;

752 
dißbÀ
 |
esw
->
p‹ts
[
i
].disable << i;

753 i‡(
esw
->
globÆ_vœn_íabÀ
) {

754 
doubÀèg
 |
esw
->
p‹ts
[
i
].doubletag << i;

755 
í_vœn
 |1 << 
i
;

756 
u¡ag
 |
esw
->
p‹ts
[
i
].untag << i;

757 
pvid
 = 
esw
->
p‹ts
[
i
].pvid;

759 
x
 = 
esw
->
Æt_vœn_dißbÀ
 ? 0 : 1;

760 
doubÀèg
 |
x
 << 
i
;

761 
í_vœn
 |
x
 << 
i
;

762 
u¡ag
 |
x
 << 
i
;

763 
pvid
 = 0;

765 
	`esw_£t_pvid
(
esw
, 
i
, 
pvid
);

766 i‡(
i
 < 
RT305X_ESW_NUM_LEDS
)

767 
	`esw_w32
(
esw
,Ésw->
p‹ts
[
i
].
Àd
,

768 
RT305X_ESW_REG_P0LED
 + 4*
i
);

771 
	`esw_£t_gsc
(
esw
);

772 
	`esw_£t_p‹t_dißbÀ
(
esw
, 
dißbÀ
);

773 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_SGC2
,

774 (
RT305X_ESW_SGC2_DOUBLE_TAG_M
 <<

775 
RT305X_ESW_SGC2_DOUBLE_TAG_S
),

776 
doubÀèg
 << 
RT305X_ESW_SGC2_DOUBLE_TAG_S
);

777 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_PFC1
,

778 
RT305X_ESW_PFC1_EN_VLAN_M
 << 
RT305X_ESW_PFC1_EN_VLAN_S
,

779 
í_vœn
 << 
RT305X_ESW_PFC1_EN_VLAN_S
);

780 
	`esw_rmw
(
esw
, 
RT305X_ESW_REG_POC2
,

781 
RT305X_ESW_POC2_UNTAG_EN_M
 << 
RT305X_ESW_POC2_UNTAG_EN_S
,

782 
u¡ag
 << 
RT305X_ESW_POC2_UNTAG_EN_S
);

784 i‡(!
esw
->
globÆ_vœn_íabÀ
) {

790 
	`esw_£t_vœn_id
(
esw
, 0, 0);

791 
	`esw_£t_vmsc
(
esw
, 0, 
RT305X_ESW_PORTS_ALL
);

795 
	}
}

797 
	$esw_ª£t_swôch
(
swôch_dev
 *
dev
)

799 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

801 
esw
->
globÆ_vœn_íabÀ
 = 0;

802 
	`mem£t
(
esw
->
p‹ts
, 0, (esw->ports));

803 
	`mem£t
(
esw
->
vœns
, 0, (esw->vlans));

804 
	`esw_hw_öô
(
esw
);

807 
	}
}

809 
	$esw_gë_vœn_íabÀ
(
swôch_dev
 *
dev
,

810 c⁄° 
swôch_©å
 *
©å
,

811 
swôch_vÆ
 *
vÆ
)

813 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

815 
vÆ
->
vÆue
.
i
 = 
esw
->
globÆ_vœn_íabÀ
;

818 
	}
}

820 
	$esw_£t_vœn_íabÀ
(
swôch_dev
 *
dev
,

821 c⁄° 
swôch_©å
 *
©å
,

822 
swôch_vÆ
 *
vÆ
)

824 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

826 
esw
->
globÆ_vœn_íabÀ
 = 
vÆ
->
vÆue
.
i
 != 0;

829 
	}
}

831 
	$esw_gë_Æt_vœn_dißbÀ
(
swôch_dev
 *
dev
,

832 c⁄° 
swôch_©å
 *
©å
,

833 
swôch_vÆ
 *
vÆ
)

835 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

837 
vÆ
->
vÆue
.
i
 = 
esw
->
Æt_vœn_dißbÀ
;

840 
	}
}

842 
	$esw_£t_Æt_vœn_dißbÀ
(
swôch_dev
 *
dev
,

843 c⁄° 
swôch_©å
 *
©å
,

844 
swôch_vÆ
 *
vÆ
)

846 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

848 
esw
->
Æt_vœn_dißbÀ
 = 
vÆ
->
vÆue
.
i
 != 0;

851 
	}
}

854 
	$π305x_esw_£t_bc_°©us
(
swôch_dev
 *
dev
,

855 c⁄° 
swôch_©å
 *
©å
,

856 
swôch_vÆ
 *
vÆ
)

858 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

860 
esw
->
bc_°‹m_¥Ÿe˘
 = 
vÆ
->
vÆue
.
i
 & 
RT305X_ESW_GSC_BC_STROM_MASK
;

863 
	}
}

866 
	$π305x_esw_gë_bc_°©us
(
swôch_dev
 *
dev
,

867 c⁄° 
swôch_©å
 *
©å
,

868 
swôch_vÆ
 *
vÆ
)

870 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

872 
vÆ
->
vÆue
.
i
 = 
esw
->
bc_°‹m_¥Ÿe˘
;

875 
	}
}

878 
	$π305x_esw_£t_Àd_‰eq
(
swôch_dev
 *
dev
,

879 c⁄° 
swôch_©å
 *
©å
,

880 
swôch_vÆ
 *
vÆ
)

882 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

884 
esw
->
Àd_‰equícy
 = 
vÆ
->
vÆue
.
i
 & 
RT305X_ESW_GSC_LED_FREQ_MASK
;

887 
	}
}

890 
	$π305x_esw_gë_Àd_‰eq
(
swôch_dev
 *
dev
,

891 c⁄° 
swôch_©å
 *
©å
,

892 
swôch_vÆ
 *
vÆ
)

894 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

896 
vÆ
->
vÆue
.
i
 = 
esw
->
Àd_‰equícy
;

899 
	}
}

901 
	$esw_gë_p‹t_lök
(
swôch_dev
 *
dev
,

902 
p‹t
,

903 
swôch_p‹t_lök
 *
lök
)

905 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

906 
u32
 
•ìd
, 
pﬂ
;

908 i‡(
p‹t
 < 0 ||Ö‹à>
RT305X_ESW_NUM_PORTS
)

909  -
EINVAL
;

911 
pﬂ
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_POA
Ë>> 
p‹t
;

913 
lök
->lök = (
pﬂ
 >> 
RT305X_ESW_LINK_S
) & 1;

914 
lök
->
du∂ex
 = (
pﬂ
 >> 
RT305X_ESW_DUPLEX_S
) & 1;

915 i‡(
p‹t
 < 
RT305X_ESW_NUM_LEDS
) {

916 
•ìd
 = (
pﬂ
 >> 
RT305X_ESW_SPD_S
) & 1;

918 i‡(
p‹t
 =
RT305X_ESW_NUM_PORTS
 - 1)

919 
pﬂ
 >>= 1;

920 
•ìd
 = (
pﬂ
 >> 
RT305X_ESW_SPD_S
) & 3;

922 
•ìd
) {

924 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

927 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

931 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

934 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

939 
	}
}

941 
	$esw_gë_p‹t_boﬁ
(
swôch_dev
 *
dev
,

942 c⁄° 
swôch_©å
 *
©å
,

943 
swôch_vÆ
 *
vÆ
)

945 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

946 
idx
 = 
vÆ
->
p‹t_vœn
;

947 
u32
 
x
, 
ªg
, 
shi·
;

949 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_PORTS
)

950  -
EINVAL
;

952 
©å
->
id
) {

953 
RT305X_ESW_ATTR_PORT_DISABLE
:

954 
ªg
 = 
RT305X_ESW_REG_POC0
;

955 
shi·
 = 
RT305X_ESW_POC0_DIS_PORT_S
;

957 
RT305X_ESW_ATTR_PORT_DOUBLETAG
:

958 
ªg
 = 
RT305X_ESW_REG_SGC2
;

959 
shi·
 = 
RT305X_ESW_SGC2_DOUBLE_TAG_S
;

961 
RT305X_ESW_ATTR_PORT_UNTAG
:

962 
ªg
 = 
RT305X_ESW_REG_POC2
;

963 
shi·
 = 
RT305X_ESW_POC2_UNTAG_EN_S
;

965 
RT305X_ESW_ATTR_PORT_LAN
:

966 
ªg
 = 
RT305X_ESW_REG_SGC2
;

967 
shi·
 = 
RT305X_ESW_SGC2_LAN_PMAP_S
;

968 i‡(
idx
 >
RT305X_ESW_NUM_LANWAN
)

969  -
EINVAL
;

972  -
EINVAL
;

975 
x
 = 
	`esw_r32
(
esw
, 
ªg
);

976 
vÆ
->
vÆue
.
i
 = (
x
 >> (
idx
 + 
shi·
)) & 1;

979 
	}
}

981 
	$esw_£t_p‹t_boﬁ
(
swôch_dev
 *
dev
,

982 c⁄° 
swôch_©å
 *
©å
,

983 
swôch_vÆ
 *
vÆ
)

985 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

986 
idx
 = 
vÆ
->
p‹t_vœn
;

988 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_PORTS
 ||

989 
vÆ
->
vÆue
.
i
 < 0 || val->value.i > 1)

990  -
EINVAL
;

992 
©å
->
id
) {

993 
RT305X_ESW_ATTR_PORT_DISABLE
:

994 
esw
->
p‹ts
[
idx
].
dißbÀ
 = 
vÆ
->
vÆue
.
i
;

996 
RT305X_ESW_ATTR_PORT_DOUBLETAG
:

997 
esw
->
p‹ts
[
idx
].
doubÀèg
 = 
vÆ
->
vÆue
.
i
;

999 
RT305X_ESW_ATTR_PORT_UNTAG
:

1000 
esw
->
p‹ts
[
idx
].
u¡ag
 = 
vÆ
->
vÆue
.
i
;

1003  -
EINVAL
;

1007 
	}
}

1009 
	$esw_gë_p‹t_ªcv_badgood
(
swôch_dev
 *
dev
,

1010 c⁄° 
swôch_©å
 *
©å
,

1011 
swôch_vÆ
 *
vÆ
)

1013 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1014 
idx
 = 
vÆ
->
p‹t_vœn
;

1015 
shi·
 = 
©å
->
id
 =
RT305X_ESW_ATTR_PORT_RECV_GOOD
 ? 0 : 16;

1016 
u32
 
ªg
;

1018 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_LANWAN
)

1019  -
EINVAL
;

1020 
ªg
 = 
	`esw_r32
(
esw
, 
	`RT305X_ESW_REG_PXPC
(
idx
));

1021 
vÆ
->
vÆue
.
i
 = (
ªg
 >> 
shi·
) & 0xffff;

1024 
	}
}

1027 
	$esw_gë_p‹t_å_badgood
(
swôch_dev
 *
dev
,

1028 c⁄° 
swôch_©å
 *
©å
,

1029 
swôch_vÆ
 *
vÆ
)

1031 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1033 
idx
 = 
vÆ
->
p‹t_vœn
;

1034 
shi·
 = 
©å
->
id
 =
RT5350_ESW_ATTR_PORT_TR_GOOD
 ? 0 : 16;

1035 
u32
 
ªg
;

1037 i‡((
ølök_soc
 !
RT305X_SOC_RT5350
Ë&& (ølök_so¯!
MT762X_SOC_MT7628AN
Ë&& (ølök_so¯!
MT762X_SOC_MT7688
))

1038  -
EINVAL
;

1040 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_LANWAN
)

1041  -
EINVAL
;

1043 
ªg
 = 
	`esw_r32
(
esw
, 
	`RT5350_ESW_REG_PXTPC
(
idx
));

1044 
vÆ
->
vÆue
.
i
 = (
ªg
 >> 
shi·
) & 0xffff;

1047 
	}
}

1049 
	$esw_gë_p‹t_Àd
(
swôch_dev
 *
dev
,

1050 c⁄° 
swôch_©å
 *
©å
,

1051 
swôch_vÆ
 *
vÆ
)

1053 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1054 
idx
 = 
vÆ
->
p‹t_vœn
;

1056 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_PORTS
 ||

1057 
idx
 >
RT305X_ESW_NUM_LEDS
)

1058  -
EINVAL
;

1060 
vÆ
->
vÆue
.
i
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_P0LED
 + 4*
idx
);

1063 
	}
}

1065 
	$esw_£t_p‹t_Àd
(
swôch_dev
 *
dev
,

1066 c⁄° 
swôch_©å
 *
©å
,

1067 
swôch_vÆ
 *
vÆ
)

1069 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1070 
idx
 = 
vÆ
->
p‹t_vœn
;

1072 i‡(
idx
 < 0 || idx >
RT305X_ESW_NUM_LEDS
)

1073  -
EINVAL
;

1075 
esw
->
p‹ts
[
idx
].
Àd
 = 
vÆ
->
vÆue
.
i
;

1078 
	}
}

1080 
	$esw_gë_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

1082 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1084 i‡(
p‹t
 >
RT305X_ESW_NUM_PORTS
)

1085  -
EINVAL
;

1087 *
vÆ
 = 
	`esw_gë_pvid
(
esw
, 
p‹t
);

1090 
	}
}

1092 
	$esw_£t_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
vÆ
)

1094 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1096 i‡(
p‹t
 >
RT305X_ESW_NUM_PORTS
)

1097  -
EINVAL
;

1099 
esw
->
p‹ts
[
p‹t
].
pvid
 = 
vÆ
;

1102 
	}
}

1104 
	$esw_gë_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1106 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1107 
u32
 
vmsc
, 
poc2
;

1108 
vœn_idx
 = -1;

1109 
i
;

1111 
vÆ
->
Àn
 = 0;

1113 i‡(
vÆ
->
p‹t_vœn
 < 0 || vÆ->p‹t_vœ¿>
RT305X_ESW_NUM_VIDS
)

1114  -
EINVAL
;

1117 
i
 = 0; i < 
RT305X_ESW_NUM_VLANS
; i++) {

1118 i‡(
	`esw_gë_vœn_id
(
esw
, 
i
Ë=
vÆ
->
p‹t_vœn
 &&

1119 
	`esw_gë_vmsc
(
esw
, 
i
Ë!
RT305X_ESW_PORTS_NONE
) {

1120 
vœn_idx
 = 
i
;

1125 i‡(
vœn_idx
 == -1)

1126  -
EINVAL
;

1128 
vmsc
 = 
	`esw_gë_vmsc
(
esw
, 
vœn_idx
);

1129 
poc2
 = 
	`esw_r32
(
esw
, 
RT305X_ESW_REG_POC2
);

1131 
i
 = 0; i < 
RT305X_ESW_NUM_PORTS
; i++) {

1132 
swôch_p‹t
 *
p
;

1133 
p‹t_mask
 = 1 << 
i
;

1135 i‡(!(
vmsc
 & 
p‹t_mask
))

1138 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

1139 
p
->
id
 = 
i
;

1140 i‡(
poc2
 & (
p‹t_mask
 << 
RT305X_ESW_POC2_UNTAG_EN_S
))

1141 
p
->
Êags
 = 0;

1143 
p
->
Êags
 = 1 << 
SWITCH_PORT_FLAG_TAGGED
;

1147 
	}
}

1149 
	$esw_£t_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

1151 
π305x_esw
 *
esw
 = 
	`c⁄èöî_of
(
dev
, π305x_esw, 
swdev
);

1152 
p‹ts
;

1153 
vœn_idx
 = -1;

1154 
i
;

1156 i‡(
vÆ
->
p‹t_vœn
 < 0 || vÆ->p‹t_vœ¿>
RT305X_ESW_NUM_VIDS
 ||

1157 
vÆ
->
Àn
 > 
RT305X_ESW_NUM_PORTS
)

1158  -
EINVAL
;

1161 
i
 = 0; i < 
RT305X_ESW_NUM_VLANS
; i++) {

1162 i‡(
esw
->
vœns
[
i
].
vid
 =
vÆ
->
p‹t_vœn
 &&

1163 
esw
->
vœns
[
i
].
p‹ts
 !
RT305X_ESW_PORTS_NONE
) {

1164 
vœn_idx
 = 
i
;

1170 
i
 = 0; 
vœn_idx
 =-1 && i < 
RT305X_ESW_NUM_VLANS
; i++) {

1171 i‡(
esw
->
vœns
[
i
].
p‹ts
 =
RT305X_ESW_PORTS_NONE
)

1172 
vœn_idx
 = 
i
;

1176 i‡(
vœn_idx
 == -1)

1177  -
EINVAL
;

1179 
p‹ts
 = 
RT305X_ESW_PORTS_NONE
;

1180 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

1181 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

1182 
p‹t_mask
 = 1 << 
p
->
id
;

1183 
boﬁ
 
u¡agged
 = !(
p
->
Êags
 & (1 << 
SWITCH_PORT_FLAG_TAGGED
));

1185 i‡(
p
->
id
 >
RT305X_ESW_NUM_PORTS
)

1186  -
EINVAL
;

1188 
p‹ts
 |
p‹t_mask
;

1189 
esw
->
p‹ts
[
p
->
id
].
u¡ag
 = 
u¡agged
;

1191 
esw
->
vœns
[
vœn_idx
].
p‹ts
 =Öorts;

1192 i‡(
p‹ts
 =
RT305X_ESW_PORTS_NONE
)

1193 
esw
->
vœns
[
vœn_idx
].
vid
 = 
RT305X_ESW_VLAN_NONE
;

1195 
esw
->
vœns
[
vœn_idx
].
vid
 = 
vÆ
->
p‹t_vœn
;

1198 
	}
}

1200 c⁄° 
swôch_©å
 
	gesw_globÆ
[] = {

1202 .
ty≥
 = 
SWITCH_TYPE_INT
,

1203 .
	g«me
 = "enable_vlan",

1204 .
	gdes¸ùti⁄
 = "VLAN mode (1:enabled)",

1205 .
	gmax
 = 1,

1206 .
	gid
 = 
RT305X_ESW_ATTR_ENABLE_VLAN
,

1207 .
	ggë
 = 
esw_gë_vœn_íabÀ
,

1208 .
	g£t
 = 
esw_£t_vœn_íabÀ
,

1211 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1212 .
	g«me
 = "alternate_vlan_disable",

1213 .
	gdes¸ùti⁄
 = "UseÉn_vlan instead of doubletagÅo disable"

1215 .
	gmax
 = 1,

1216 .
	gid
 = 
RT305X_ESW_ATTR_ALT_VLAN_DISABLE
,

1217 .
	ggë
 = 
esw_gë_Æt_vœn_dißbÀ
,

1218 .
	g£t
 = 
esw_£t_Æt_vœn_dißbÀ
,

1221 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1222 .
	g«me
 = "bc_storm_protect",

1223 .
	gdes¸ùti⁄
 = "Global broadcast stormÖrotection (0:Disable, 1:64 blocks, 2:96 blocks, 3:128 blocks)",

1224 .
	gmax
 = 3,

1225 .
	gid
 = 
RT305X_ESW_ATTR_BC_STATUS
,

1226 .
	ggë
 = 
π305x_esw_gë_bc_°©us
,

1227 .
	g£t
 = 
π305x_esw_£t_bc_°©us
,

1230 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1231 .
	g«me
 = "led_frequency",

1232 .
	gdes¸ùti⁄
 = "LED Flash frequency (0:30mS, 1:60mS, 2:240mS, 3:480mS)",

1233 .
	gmax
 = 3,

1234 .
	gid
 = 
RT305X_ESW_ATTR_LED_FREQ
,

1235 .
	ggë
 = 
π305x_esw_gë_Àd_‰eq
,

1236 .
	g£t
 = 
π305x_esw_£t_Àd_‰eq
,

1240 c⁄° 
swôch_©å
 
	gesw_p‹t
[] = {

1242 .
ty≥
 = 
SWITCH_TYPE_INT
,

1243 .
	g«me
 = "disable",

1244 .
	gdes¸ùti⁄
 = "Port state (1:disabled)",

1245 .
	gmax
 = 1,

1246 .
	gid
 = 
RT305X_ESW_ATTR_PORT_DISABLE
,

1247 .
	ggë
 = 
esw_gë_p‹t_boﬁ
,

1248 .
	g£t
 = 
esw_£t_p‹t_boﬁ
,

1251 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1252 .
	g«me
 = "doubletag",

1253 .
	gdes¸ùti⁄
 = "DoubleÅagging for incoming vlanÖackets "

1255 .
	gmax
 = 1,

1256 .
	gid
 = 
RT305X_ESW_ATTR_PORT_DOUBLETAG
,

1257 .
	ggë
 = 
esw_gë_p‹t_boﬁ
,

1258 .
	g£t
 = 
esw_£t_p‹t_boﬁ
,

1261 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1262 .
	g«me
 = "untag",

1263 .
	gdes¸ùti⁄
 = "Untag (1:strip outgoing vlanÅag)",

1264 .
	gmax
 = 1,

1265 .
	gid
 = 
RT305X_ESW_ATTR_PORT_UNTAG
,

1266 .
	ggë
 = 
esw_gë_p‹t_boﬁ
,

1267 .
	g£t
 = 
esw_£t_p‹t_boﬁ
,

1270 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1271 .
	g«me
 = "led",

1272 .
	gdes¸ùti⁄
 = "LED mode (0:link, 1:100m, 2:duplex, 3:activity,"

1275 .
	gmax
 = 15,

1276 .
	gid
 = 
RT305X_ESW_ATTR_PORT_LED
,

1277 .
	ggë
 = 
esw_gë_p‹t_Àd
,

1278 .
	g£t
 = 
esw_£t_p‹t_Àd
,

1281 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1282 .
	g«me
 = "lan",

1283 .
	gdes¸ùti⁄
 = "HWÖort group (0:wan, 1:lan)",

1284 .
	gmax
 = 1,

1285 .
	gid
 = 
RT305X_ESW_ATTR_PORT_LAN
,

1286 .
	ggë
 = 
esw_gë_p‹t_boﬁ
,

1289 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1290 .
	g«me
 = "recv_bad",

1291 .
	gdes¸ùti⁄
 = "Receive badÖacket counter",

1292 .
	gid
 = 
RT305X_ESW_ATTR_PORT_RECV_BAD
,

1293 .
	ggë
 = 
esw_gë_p‹t_ªcv_badgood
,

1296 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1297 .
	g«me
 = "recv_good",

1298 .
	gdes¸ùti⁄
 = "Receive goodÖacket counter",

1299 .
	gid
 = 
RT305X_ESW_ATTR_PORT_RECV_GOOD
,

1300 .
	ggë
 = 
esw_gë_p‹t_ªcv_badgood
,

1303 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1304 .
	g«me
 = "tr_bad",

1306 .
	gdes¸ùti⁄
 = "Transmit badÖacket counter.Ñt5350 only",

1307 .
	gid
 = 
RT5350_ESW_ATTR_PORT_TR_BAD
,

1308 .
	ggë
 = 
esw_gë_p‹t_å_badgood
,

1311 .
	gty≥
 = 
SWITCH_TYPE_INT
,

1312 .
	g«me
 = "tr_good",

1314 .
	gdes¸ùti⁄
 = "Transmit goodÖacket counter.Ñt5350 only",

1315 .
	gid
 = 
RT5350_ESW_ATTR_PORT_TR_GOOD
,

1316 .
	ggë
 = 
esw_gë_p‹t_å_badgood
,

1320 c⁄° 
swôch_©å
 
	gesw_vœn
[] = {

1323 c⁄° 
swôch_dev_›s
 
	gesw_›s
 = {

1324 .
©å_globÆ
 = {

1325 .
©å
 = 
esw_globÆ
,

1326 .
	gn_©å
 = 
ARRAY_SIZE
(
esw_globÆ
),

1328 .
	g©å_p‹t
 = {

1329 .
©å
 = 
esw_p‹t
,

1330 .
	gn_©å
 = 
ARRAY_SIZE
(
esw_p‹t
),

1332 .
	g©å_vœn
 = {

1333 .
©å
 = 
esw_vœn
,

1334 .
	gn_©å
 = 
ARRAY_SIZE
(
esw_vœn
),

1336 .
	ggë_vœn_p‹ts
 = 
esw_gë_vœn_p‹ts
,

1337 .
	g£t_vœn_p‹ts
 = 
esw_£t_vœn_p‹ts
,

1338 .
	ggë_p‹t_pvid
 = 
esw_gë_p‹t_pvid
,

1339 .
	g£t_p‹t_pvid
 = 
esw_£t_p‹t_pvid
,

1340 .
	ggë_p‹t_lök
 = 
esw_gë_p‹t_lök
,

1341 .
	g≠∂y_c⁄fig
 = 
esw_≠∂y_c⁄fig
,

1342 .
	gª£t_swôch
 = 
esw_ª£t_swôch
,

1345 
	$esw_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1347 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1348 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

1349 c⁄° 
__be32
 *
p‹t_m≠
, *
p‹t_dißbÀ
, *
ªg_öô
;

1350 
swôch_dev
 *
swdev
;

1351 
π305x_esw
 *
esw
;

1352 
ªt
;

1354 
esw
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*esw), 
GFP_KERNEL
);

1355 i‡(!
esw
)

1356  -
ENOMEM
;

1358 
esw
->
dev
 = &
pdev
->dev;

1359 
esw
->
úq
 = 
	`úq_of_∑r£_™d_m≠
(
≈
, 0);

1360 
esw
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

1361 i‡(
	`IS_ERR
(
esw
->
ba£
))

1362  
	`PTR_ERR
(
esw
->
ba£
);

1364 
p‹t_m≠
 = 
	`of_gë_¥›îty
(
≈
, "medüãk,p‹tm≠", 
NULL
);

1365 i‡(
p‹t_m≠
)

1366 
esw
->
p‹t_m≠
 = 
	`be32_to_˝u
(*port_map);

1368 
p‹t_dißbÀ
 = 
	`of_gë_¥›îty
(
≈
, "medüãk,p‹tdißbÀ", 
NULL
);

1369 i‡(
p‹t_dißbÀ
)

1370 
esw
->
p‹t_dißbÀ
 = 
	`be32_to_˝u
(*port_disable);

1372 
ªg_öô
 = 
	`of_gë_¥›îty
(
≈
, "ølök,f˘2", 
NULL
);

1373 i‡(
ªg_öô
)

1374 
esw
->
ªg_öôvÆ_f˘2
 = 
	`be32_to_˝u
(*
ªg_öô
);

1376 
ªg_öô
 = 
	`of_gë_¥›îty
(
≈
, "ølök,Âa2", 
NULL
);

1377 i‡(
ªg_öô
)

1378 
esw
->
ªg_öôvÆ_Âa2
 = 
	`be32_to_˝u
(*
ªg_öô
);

1380 
ªg_öô
 = 
	`of_gë_¥›îty
(
≈
, "medüãk,Àd_pﬁ¨ôy", 
NULL
);

1381 i‡(
ªg_öô
)

1382 
esw
->
ªg_Àd_pﬁ¨ôy
 = 
	`be32_to_˝u
(*
ªg_öô
);

1384 
swdev
 = &
esw
->swdev;

1385 
swdev
->
of_node
 = 
pdev
->
dev
.of_node;

1386 
swdev
->
«me
 = "rt305x-esw";

1387 
swdev
->
Æüs
 = "rt305x";

1388 
swdev
->
˝u_p‹t
 = 
RT305X_ESW_PORT6
;

1389 
swdev
->
p‹ts
 = 
RT305X_ESW_NUM_PORTS
;

1390 
swdev
->
vœns
 = 
RT305X_ESW_NUM_VIDS
;

1391 
swdev
->
›s
 = &
esw_›s
;

1393 
ªt
 = 
	`ªgi°î_swôch
(
swdev
, 
NULL
);

1394 i‡(
ªt
 < 0) {

1395 
	`dev_îr
(&
pdev
->
dev
, "register_switch failed\n");

1396  
ªt
;

1399 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
esw
);

1401 
	`•ö_lock_öô
(&
esw
->
ªg_rw_lock
);

1403 
	`esw_hw_öô
(
esw
);

1405 
ªg_öô
 = 
	`of_gë_¥›îty
(
≈
, "ølök,rgmii", 
NULL
);

1406 i‡(
ªg_öô
 && 
	`be32_to_˝u
(*reg_init) == 1) {

1411 
	`dev_îr
(&
pdev
->
dev
, "RGMII mode,ÇotÉxporting switch device.\n");

1412 
	`uƒegi°î_swôch
(&
esw
->
swdev
);

1413 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1414  -
ENODEV
;

1417 
ªt
 = 
	`devm_ªque°_úq
(&
pdev
->
dev
, 
esw
->
úq
, 
esw_öãºu±
, 0, "esw",

1418 
esw
);

1420 i‡(!
ªt
) {

1421 
	`esw_w32
(
esw
, 
RT305X_ESW_PORT_ST_CHG
, 
RT305X_ESW_REG_ISR
);

1422 
	`esw_w32
(
esw
, ~
RT305X_ESW_PORT_ST_CHG
, 
RT305X_ESW_REG_IMR
);

1425  
ªt
;

1426 
	}
}

1428 
	$esw_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1430 
π305x_esw
 *
esw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1432 i‡(
esw
) {

1433 
	`esw_w32
(
esw
, ~0, 
RT305X_ESW_REG_IMR
);

1434 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1438 
	}
}

1440 c⁄° 
of_devi˚_id
 
	gølök_esw_m©ch
[] = {

1441 { .
com∑tibÀ
 = "ralink,rt3050-esw" },

1444 
MODULE_DEVICE_TABLE
(
of
, 
ølök_esw_m©ch
);

1446 
∂©f‹m_drivî
 
	gesw_drivî
 = {

1447 .
¥obe
 = 
esw_¥obe
,

1448 .
	gªmove
 = 
esw_ªmove
,

1449 .
	gdrivî
 = {

1450 .
«me
 = "rt3050-esw",

1451 .
	gow√r
 = 
THIS_MODULE
,

1452 .
	gof_m©ch_èbÀ
 = 
ølök_esw_m©ch
,

1456 
moduÀ_∂©f‹m_drivî
(
esw_drivî
);

1458 
MODULE_LICENSE
("GPL");

1459 
MODULE_AUTHOR
("John Crispin <blogic@openwrt.org>");

1460 
MODULE_DESCRIPTION
("Switch driver for RT305X SoC");

1461 
MODULE_VERSION
(
MTK_FE_DRV_VERSION
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/esw_rt3050.h

15 #i‚de‡
_RALINK_ESW_RT3052_H__


16 
	#_RALINK_ESW_RT3052_H__


	)

18 #ifde‡
CONFIG_NET_MEDIATEK_ESW_RT3052


20 
__öô
 
mtk_swôch_öô
();

21 
mtk_swôch_exô
();

25 
ölöe
 
__öô
 
	$mtk_swôch_öô
(Ë{  0; 
	}
}

26 
ölöe
 
	$mtk_swôch_exô
(Ë{ 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/ethtool.c

15 
	~"mtk_ëh_soc.h
"

17 c⁄° 
	g„_gdma_°r
[][
ETH_GSTRING_LEN
] = {

18 
	#_FE
(
x
...Ë#x,

	)

19 
FE_STAT_REG_DECLARE


20 #unde‡
_FE


23 
	$„_gë_lök_k£âögs
(
√t_devi˚
 *
ndev
,

24 
ëhtoﬁ_lök_k£âögs
 *
cmd
)

26 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
ndev
);

28 i‡(!
¥iv
->
phy_dev
)

29  -
ENODEV
;

31 i‡(
¥iv
->
phy_Êags
 =
FE_PHY_FLAG_ATTACH
) {

32 i‡(
	`phy_ªad_°©us
(
¥iv
->
phy_dev
))

33  -
ENODEV
;

36 
	`phy_ëhtoﬁ_k£âögs_gë
(
ndev
->
phydev
, 
cmd
);

39 
	}
}

41 
	$„_£t_lök_k£âögs
(
√t_devi˚
 *
ndev
,

42 c⁄° 
ëhtoﬁ_lök_k£âögs
 *
cmd
)

44 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
ndev
);

46 i‡(!
¥iv
->
phy_dev
)

47 
out_s£t
;

49 i‡(
cmd
->
ba£
.
phy_addªss
 !
¥iv
->
phy_dev
->
mdio
.
addr
) {

50 i‡(
¥iv
->
phy
->
phy_node
[
cmd
->
ba£
.
phy_addªss
]) {

51 
¥iv
->
phy_dev
 =Öriv->
phy
->phy[
cmd
->
ba£
.
phy_addªss
];

52 
¥iv
->
phy_Êags
 = 
FE_PHY_FLAG_PORT
;

53 } i‡(
¥iv
->
mii_bus
 && 
	`mdiobus_gë_phy
’riv->mii_bus, 
cmd
->
ba£
.
phy_addªss
)) {

54 
¥iv
->
phy_dev
 = 
	`mdiobus_gë_phy
’riv->
mii_bus
, 
cmd
->
ba£
.
phy_addªss
);

55 
¥iv
->
phy_Êags
 = 
FE_PHY_FLAG_ATTACH
;

57 
out_s£t
;

61  
	`phy_ëhtoﬁ_k£âögs_£t
(
ndev
->
phydev
, 
cmd
);

63 
out_s£t
:

64  -
ENODEV
;

65 
	}
}

67 
	$„_gë_drvöfo
(
√t_devi˚
 *
dev
,

68 
ëhtoﬁ_drvöfo
 *
öfo
)

70 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

71 
„_soc_d©a
 *
soc
 = 
¥iv
->soc;

73 
	`°æ˝y
(
öfo
->
drivî
, 
¥iv
->
dev
->drivî->
«me
, (info->driver));

74 
	`°æ˝y
(
öfo
->
vîsi⁄
, 
MTK_FE_DRV_VERSION
, (info->version));

75 
	`°æ˝y
(
öfo
->
bus_öfo
, 
	`dev_«me
(
¥iv
->
dev
), (info->bus_info));

77 i‡(
soc
->
ªg_èbÀ
[
FE_REG_FE_COUNTER_BASE
])

78 
öfo
->
n_°©s
 = 
	`ARRAY_SIZE
(
„_gdma_°r
);

79 
	}
}

81 
u32
 
	$„_gë_msgÀvñ
(
√t_devi˚
 *
dev
)

83 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

85  
¥iv
->
msg_íabÀ
;

86 
	}
}

88 
	$„_£t_msgÀvñ
(
√t_devi˚
 *
dev
, 
u32
 
vÆue
)

90 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

92 
¥iv
->
msg_íabÀ
 = 
vÆue
;

93 
	}
}

95 
	$„_nway_ª£t
(
√t_devi˚
 *
dev
)

97 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

99 i‡(!
¥iv
->
phy_dev
)

100 
out_nway_ª£t
;

102  
	`gíphy_ª°¨t_™eg
(
¥iv
->
phy_dev
);

104 
out_nway_ª£t
:

105  -
EOPNOTSUPP
;

106 
	}
}

108 
u32
 
	$„_gë_lök
(
√t_devi˚
 *
dev
)

110 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

111 
îr
;

113 i‡(!
¥iv
->
phy_dev
)

114 
out_gë_lök
;

116 i‡(
¥iv
->
phy_Êags
 =
FE_PHY_FLAG_ATTACH
) {

117 
îr
 = 
	`gíphy_upd©e_lök
(
¥iv
->
phy_dev
);

118 i‡(
îr
)

119 
out_gë_lök
;

122  
¥iv
->
phy_dev
->
lök
;

124 
out_gë_lök
:

125  
	`ëhtoﬁ_›_gë_lök
(
dev
);

126 
	}
}

128 
	$„_£t_rög∑øm
(
√t_devi˚
 *
dev
,

129 
ëhtoﬁ_rög∑øm
 *
rög
)

131 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

133 i‡((
rög
->
tx_≥ndög
 < 2) ||

134 (
rög
->
rx_≥ndög
 < 2) ||

135 (
rög
->
rx_≥ndög
 > 
MAX_DMA_DESC
) ||

136 (
rög
->
tx_≥ndög
 > 
MAX_DMA_DESC
))

137  -
EINVAL
;

139 
dev
->
√tdev_›s
->
	`ndo_°›
(dev);

141 
¥iv
->
tx_rög
.
tx_rög_size
 = 
	`BIT
(
	`Ês
(
rög
->
tx_≥ndög
) - 1);

142 
¥iv
->
rx_rög
.
rx_rög_size
 = 
	`BIT
(
	`Ês
(
rög
->
rx_≥ndög
) - 1);

144 
dev
->
√tdev_›s
->
	`ndo_›í
(dev);

147 
	}
}

149 
	$„_gë_rög∑øm
(
√t_devi˚
 *
dev
,

150 
ëhtoﬁ_rög∑øm
 *
rög
)

152 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

154 
rög
->
rx_max_≥ndög
 = 
MAX_DMA_DESC
;

155 
rög
->
tx_max_≥ndög
 = 
MAX_DMA_DESC
;

156 
rög
->
rx_≥ndög
 = 
¥iv
->
rx_rög
.
rx_rög_size
;

157 
rög
->
tx_≥ndög
 = 
¥iv
->
tx_rög
.
tx_rög_size
;

158 
	}
}

160 
	$„_gë_°rögs
(
√t_devi˚
 *
dev
, 
u32
 
°rög£t
, 
u8
 *
d©a
)

162 
°rög£t
) {

163 
ETH_SS_STATS
:

164 
	`mem˝y
(
d©a
, *
„_gdma_°r
, (fe_gdma_str));

167 
	}
}

169 
	$„_gë_s£t_cou¡
(
√t_devi˚
 *
dev
, 
s£t
)

171 
s£t
) {

172 
ETH_SS_STATS
:

173  
	`ARRAY_SIZE
(
„_gdma_°r
);

175  -
EOPNOTSUPP
;

177 
	}
}

179 
	$„_gë_ëhtoﬁ_°©s
(
√t_devi˚
 *
dev
,

180 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

182 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

183 
„_hw_°©s
 *
hw°©s
 = 
¥iv
->
hw_°©s
;

184 
u64
 *
d©a_§c
, *
d©a_d°
;

185 
°¨t
;

186 
i
;

188 i‡(
	`√tif_ru¬ög
(
dev
Ë&& 
	`√tif_devi˚_¥e£¡
(dev)) {

189 i‡(
	`•ö_åylock
(&
hw°©s
->
°©s_lock
)) {

190 
	`„_°©s_upd©e
(
¥iv
);

191 
	`•ö_u∆ock
(&
hw°©s
->
°©s_lock
);

196 
d©a_§c
 = &
hw°©s
->
tx_byãs
;

197 
d©a_d°
 = 
d©a
;

198 
°¨t
 = 
	`u64_°©s_„tch_begö_úq
(&
hw°©s
->
syn˝
);

200 
i
 = 0; i < 
	`ARRAY_SIZE
(
„_gdma_°r
); i++)

201 *
d©a_d°
++ = *
d©a_§c
++;

203 } 
	`u64_°©s_„tch_ªåy_úq
(&
hw°©s
->
syn˝
, 
°¨t
));

204 
	}
}

206 
ëhtoﬁ_›s
 
	g„_ëhtoﬁ_›s
 = {

207 .
gë_lök_k£âögs
 = 
„_gë_lök_k£âögs
,

208 .
	g£t_lök_k£âögs
 = 
„_£t_lök_k£âögs
,

209 .
	ggë_drvöfo
 = 
„_gë_drvöfo
,

210 .
	ggë_msgÀvñ
 = 
„_gë_msgÀvñ
,

211 .
	g£t_msgÀvñ
 = 
„_£t_msgÀvñ
,

212 .
	gnway_ª£t
 = 
„_nway_ª£t
,

213 .
	ggë_lök
 = 
„_gë_lök
,

214 .
	g£t_rög∑øm
 = 
„_£t_rög∑øm
,

215 .
	ggë_rög∑øm
 = 
„_gë_rög∑øm
,

218 
	$„_£t_ëhtoﬁ_›s
(
√t_devi˚
 *
√tdev
)

220 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

221 
„_soc_d©a
 *
soc
 = 
¥iv
->soc;

223 i‡(
soc
->
ªg_èbÀ
[
FE_REG_FE_COUNTER_BASE
]) {

224 
„_ëhtoﬁ_›s
.
gë_°rögs
 = 
„_gë_°rögs
;

225 
„_ëhtoﬁ_›s
.
gë_s£t_cou¡
 = 
„_gë_s£t_cou¡
;

226 
„_ëhtoﬁ_›s
.
gë_ëhtoﬁ_°©s
 = 
„_gë_ëhtoﬁ_°©s
;

229 
√tdev
->
ëhtoﬁ_›s
 = &
„_ëhtoﬁ_›s
;

230 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/ethtool.h

15 #i‚de‡
FE_ETHTOOL_H


16 
	#FE_ETHTOOL_H


	)

18 
	~<löux/ëhtoﬁ.h
>

20 
„_£t_ëhtoﬁ_›s
(
√t_devi˚
 *
√tdev
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7620.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/of_devi˚.h
>

20 
	~<löux/of_úq.h
>

22 
	~<ølök_ªgs.h
>

24 
	~"mtk_ëh_soc.h
"

25 
	~"gsw_mt7620.h
"

27 
	$mtk_swôch_w32
(
mt7620_gsw
 *
gsw
, 
u32
 
vÆ
, 
ªg
)

29 
	`iowrôe32
(
vÆ
, 
gsw
->
ba£
 + 
ªg
);

30 
	}
}

32 
u32
 
	$mtk_swôch_r32
(
mt7620_gsw
 *
gsw
, 
ªg
)

34  
	`i‹ód32
(
gsw
->
ba£
 + 
ªg
);

35 
	}
}

37 
úqªtu∫_t
 
	$gsw_öãºu±_mt7620
(
úq
, *
_¥iv
)

39 
„_¥iv
 *
¥iv
 = („_¥iv *)
_¥iv
;

40 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

41 
u32
 
°©us
;

42 
i
, 
max
 = (
gsw
->
p‹t4
 =
PORT4_EPHY
) ? (4) : (3);

44 
°©us
 = 
	`mtk_swôch_r32
(
gsw
, 
GSW_REG_ISR
);

45 i‡(
°©us
 & 
PORT_IRQ_ST_CHG
)

46 
i
 = 0; i <
max
; i++) {

47 
u32
 
°©us
 = 
	`mtk_swôch_r32
(
gsw
, 
	`GSW_REG_PORT_STATUS
(
i
));

48 
lök
 = 
°©us
 & 0x1;

50 i‡(
lök
 !
¥iv
->lök[
i
])

51 
	`mt7620_¥öt_lök_°©e
(
¥iv
, 
i
, 
lök
,

52 (
°©us
 >> 2) & 3,

53 (
°©us
 & 0x2));

55 
¥iv
->
lök
[
i
] =Üink;

57 
	`mt7620_h™dÀ_ˇºõr
(
¥iv
);

58 
	`mtk_swôch_w32
(
gsw
, 
°©us
, 
GSW_REG_ISR
);

60  
IRQ_HANDLED
;

61 
	}
}

63 
	$mt7620_mdio_mode
(
devi˚_node
 *
ëh_node
)

65 
devi˚_node
 *
phy_node
, *
mdiobus_node
;

66 c⁄° 
__be32
 *
id
;

67 
ªt
 = 0;

69 
mdiobus_node
 = 
	`of_gë_chûd_by_«me
(
ëh_node
, "mdio-bus");

71 i‡(
mdiobus_node
) {

72 i‡(
	`of_¥›îty_ªad_boﬁ
(
mdiobus_node
, "mediatek,mdio-mode"))

73 
ªt
 = 1;

75 
	`f‹_óch_chûd_of_node
(
mdiobus_node
, 
phy_node
) {

76 
id
 = 
	`of_gë_¥›îty
(
phy_node
, "ªg", 
NULL
);

77 i‡(
id
 && (
	`be32_to_˝u
(*id) == 0x1f))

78 
ªt
 = 1;

81 
	`of_node_put
(
mdiobus_node
);

84  
ªt
;

85 
	}
}

87 
	$mt7620_hw_öô
(
mt7620_gsw
 *
gsw
, 
mdio_mode
)

89 
u32
 
i
;

90 
u32
 
vÆ
;

91 
u32
 
is_BGA
 = (
	`π_sysc_r32
(0x0c) >> 16) & 1;

93 
	`π_sysc_w32
(
	`π_sysc_r32
(
SYSC_REG_CFG1
Ë| 
	`BIT
(8), SYSC_REG_CFG1);

94 
	`mtk_swôch_w32
(
gsw
, 
	`mtk_swôch_r32
(gsw, 
GSW_REG_CKGCR
) & ~(0x3 << 4), GSW_REG_CKGCR);

97 
	`mtk_swôch_w32
(
gsw
, 
	`mtk_swôch_r32
(gsw, 
GSW_REG_MIB_CNT_EN
) | (1 << 1), GSW_REG_MIB_CNT_EN);

99 i‡(
mdio_mode
) {

100 
u32
 
vÆ
;

103 
	`mtk_swôch_w32
(
gsw
, 
	`mtk_swôch_r32
(gsw, 
GSW_REG_GPC1
) |

105 
GSW_REG_GPC1
);

108 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7830);

109 
vÆ
 &~
	`BIT
(0);

110 
vÆ
 |
	`BIT
(1);

111 
	`mt7530_mdio_w32
(
gsw
, 0x7830, 
vÆ
);

113 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7a40);

114 
vÆ
 &~
	`BIT
(30);

115 
	`mt7530_mdio_w32
(
gsw
, 0x7a40, 
vÆ
);

117 
	`mt7530_mdio_w32
(
gsw
, 0x7a78, 0x855);

120 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0x4000);

122 
	`_mt7620_mii_wrôe
(
gsw
, 1, 17, 0x7444);

123 i‡(
is_BGA
)

124 
	`_mt7620_mii_wrôe
(
gsw
, 1, 19, 0x0114);

126 
	`_mt7620_mii_wrôe
(
gsw
, 1, 19, 0x0117);

128 
	`_mt7620_mii_wrôe
(
gsw
, 1, 22, 0x10cf);

129 
	`_mt7620_mii_wrôe
(
gsw
, 1, 25, 0x6212);

130 
	`_mt7620_mii_wrôe
(
gsw
, 1, 26, 0x0777);

131 
	`_mt7620_mii_wrôe
(
gsw
, 1, 29, 0x4000);

132 
	`_mt7620_mii_wrôe
(
gsw
, 1, 28, 0xc077);

133 
	`_mt7620_mii_wrôe
(
gsw
, 1, 24, 0x0000);

136 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0x3000);

137 
	`_mt7620_mii_wrôe
(
gsw
, 1, 17, 0x4838);

140 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0x2000);

141 i‡(
is_BGA
) {

142 
	`_mt7620_mii_wrôe
(
gsw
, 1, 21, 0x0515);

143 
	`_mt7620_mii_wrôe
(
gsw
, 1, 22, 0x0053);

144 
	`_mt7620_mii_wrôe
(
gsw
, 1, 23, 0x00bf);

145 
	`_mt7620_mii_wrôe
(
gsw
, 1, 24, 0x0aaf);

146 
	`_mt7620_mii_wrôe
(
gsw
, 1, 25, 0x0fad);

147 
	`_mt7620_mii_wrôe
(
gsw
, 1, 26, 0x0fc1);

149 
	`_mt7620_mii_wrôe
(
gsw
, 1, 21, 0x0517);

150 
	`_mt7620_mii_wrôe
(
gsw
, 1, 22, 0x0fd2);

151 
	`_mt7620_mii_wrôe
(
gsw
, 1, 23, 0x00bf);

152 
	`_mt7620_mii_wrôe
(
gsw
, 1, 24, 0x0aab);

153 
	`_mt7620_mii_wrôe
(
gsw
, 1, 25, 0x00ae);

154 
	`_mt7620_mii_wrôe
(
gsw
, 1, 26, 0x0fff);

157 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0x1000);

158 
	`_mt7620_mii_wrôe
(
gsw
, 1, 17, 0xe7f8);

161 
i
 = 0; i <= 4; i++) {

162 
vÆ
 = 
	`_mt7620_mii_ªad
(
gsw
, 
i
, 0);

163 
vÆ
 &~
	`BIT
(11);

164 
	`_mt7620_mii_wrôe
(
gsw
, 
i
, 0, 
vÆ
);

169 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0x8000);

170 
	`_mt7620_mii_wrôe
(
gsw
, 0, 30, 0xa000);

171 
	`_mt7620_mii_wrôe
(
gsw
, 1, 30, 0xa000);

172 
	`_mt7620_mii_wrôe
(
gsw
, 2, 30, 0xa000);

173 
	`_mt7620_mii_wrôe
(
gsw
, 3, 30, 0xa000);

175 
	`_mt7620_mii_wrôe
(
gsw
, 0, 4, 0x05e1);

176 
	`_mt7620_mii_wrôe
(
gsw
, 1, 4, 0x05e1);

177 
	`_mt7620_mii_wrôe
(
gsw
, 2, 4, 0x05e1);

178 
	`_mt7620_mii_wrôe
(
gsw
, 3, 4, 0x05e1);

181 
	`_mt7620_mii_wrôe
(
gsw
, 1, 31, 0xa000);

182 
	`_mt7620_mii_wrôe
(
gsw
, 0, 16, 0x1111);

183 
	`_mt7620_mii_wrôe
(
gsw
, 1, 16, 0x1010);

184 
	`_mt7620_mii_wrôe
(
gsw
, 2, 16, 0x1515);

185 
	`_mt7620_mii_wrôe
(
gsw
, 3, 16, 0x0f0f);

188 
	`mtk_swôch_w32
(
gsw
, 0x5e33b, 
	`GSW_REG_PORT_PMCR
(6));

191 
	`mtk_swôch_w32
(
gsw
, 0x7f7f7fe0, 0x0010);

194 i‡(
gsw
->
p‹t4
 =
PORT4_EPHY
) {

195 
u32
 
vÆ
 = 
	`π_sysc_r32
(
SYSC_REG_CFG1
);

197 
vÆ
 |= 3 << 14;

198 
	`π_sysc_w32
(
vÆ
, 
SYSC_REG_CFG1
);

199 
	`_mt7620_mii_wrôe
(
gsw
, 4, 30, 0xa000);

200 
	`_mt7620_mii_wrôe
(
gsw
, 4, 4, 0x05e1);

201 
	`_mt7620_mii_wrôe
(
gsw
, 4, 16, 0x1313);

202 
	`¥_öfo
("gsw: settingÖort4ÅoÉphy mode\n");

203 } i‡(!
mdio_mode
) {

204 
u32
 
vÆ
 = 
	`π_sysc_r32
(
SYSC_REG_CFG1
);

206 
vÆ
 &= ~(3 << 14);

207 
	`π_sysc_w32
(
vÆ
, 
SYSC_REG_CFG1
);

208 
	`¥_öfo
("gsw: settingÖort4Åo gmac mode\n");

210 
	}
}

212 c⁄° 
of_devi˚_id
 
	gmedüãk_gsw_m©ch
[] = {

213 { .
com∑tibÀ
 = "mediatek,mt7620-gsw" },

216 
MODULE_DEVICE_TABLE
(
of
, 
medüãk_gsw_m©ch
);

218 
	$mtk_gsw_öô
(
„_¥iv
 *
¥iv
)

220 
devi˚_node
 *
≈
 = 
¥iv
->
swôch_≈
;

221 
∂©f‹m_devi˚
 *
pdev
 = 
	`of_föd_devi˚_by_node
(
≈
);

222 
mt7620_gsw
 *
gsw
;

224 i‡(!
pdev
)

225  -
ENODEV
;

227 i‡(!
	`of_devi˚_is_com∑tibÀ
(
≈
, 
medüãk_gsw_m©ch
->
com∑tibÀ
))

228  -
EINVAL
;

230 
gsw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

231 
¥iv
->
soc
->
sw¥iv
 = 
gsw
;

233 
	`mt7620_hw_öô
(
gsw
, 
	`mt7620_mdio_mode
(
¥iv
->
dev
->
of_node
));

235 i‡(
gsw
->
úq
) {

236 
	`ªque°_úq
(
gsw
->
úq
, 
gsw_öãºu±_mt7620
, 0,

237 "gsw", 
¥iv
);

238 
	`mtk_swôch_w32
(
gsw
, ~
PORT_IRQ_ST_CHG
, 
GSW_REG_IMR
);

242 
	}
}

244 
	$mt7620_gsw_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

246 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

247 c⁄° *
p‹t4
 = 
NULL
;

248 
mt7620_gsw
 *
gsw
;

249 
devi˚_node
 *
≈
 = 
pdev
->
dev
.
of_node
;

251 
gsw
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
mt7620_gsw
), 
GFP_KERNEL
);

252 i‡(!
gsw
)

253  -
ENOMEM
;

255 
gsw
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

256 i‡(
	`IS_ERR
(
gsw
->
ba£
))

257  
	`PTR_ERR
(
gsw
->
ba£
);

259 
gsw
->
dev
 = &
pdev
->dev;

261 
	`of_¥›îty_ªad_°rög
(
≈
, "medüãk,p‹t4", &
p‹t4
);

262 i‡(
p‹t4
 && !
	`°rcmp
(port4, "ephy"))

263 
gsw
->
p‹t4
 = 
PORT4_EPHY
;

264 i‡(
p‹t4
 && !
	`°rcmp
(port4, "gmac"))

265 
gsw
->
p‹t4
 = 
PORT4_EXT
;

267 
gsw
->
p‹t4
 = 
PORT4_EPHY
;

269 
gsw
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

271 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
gsw
);

274 
	}
}

276 
	$mt7620_gsw_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

278 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

281 
	}
}

283 
∂©f‹m_drivî
 
	ggsw_drivî
 = {

284 .
¥obe
 = 
mt7620_gsw_¥obe
,

285 .
	gªmove
 = 
mt7620_gsw_ªmove
,

286 .
	gdrivî
 = {

287 .
«me
 = "mt7620-gsw",

288 .
	gow√r
 = 
THIS_MODULE
,

289 .
	gof_m©ch_èbÀ
 = 
medüãk_gsw_m©ch
,

293 
moduÀ_∂©f‹m_drivî
(
gsw_drivî
);

295 
MODULE_LICENSE
("GPL");

296 
MODULE_AUTHOR
("John Crispin <blogic@openwrt.org>");

297 
MODULE_DESCRIPTION
("GBit switch driver for Mediatek MT7620 SoC");

298 
MODULE_VERSION
(
MTK_FE_DRV_VERSION
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7620.h

15 #i‚de‡
_RALINK_GSW_MT7620_H__


16 
	#_RALINK_GSW_MT7620_H__


	)

18 
	#GSW_REG_PHY_TIMEOUT
 (5 * 
HZ
)

	)

20 #ifde‡
CONFIG_SOC_MT7621


21 
	#MT7620A_GSW_REG_PIAC
 0x0004

	)

23 
	#MT7620A_GSW_REG_PIAC
 0x7004

	)

26 
	#GSW_NUM_VLANS
 16

	)

27 
	#GSW_NUM_VIDS
 4096

	)

28 
	#GSW_NUM_PORTS
 7

	)

29 
	#GSW_PORT6
 6

	)

31 
	#GSW_MDIO_ACCESS
 
	`BIT
(31)

	)

32 
	#GSW_MDIO_READ
 
	`BIT
(19)

	)

33 
	#GSW_MDIO_WRITE
 
	`BIT
(18)

	)

34 
	#GSW_MDIO_START
 
	`BIT
(16)

	)

35 
	#GSW_MDIO_ADDR_SHIFT
 20

	)

36 
	#GSW_MDIO_REG_SHIFT
 25

	)

38 
	#GSW_REG_MIB_CNT_EN
 0x4000

	)

40 
	#GSW_REG_PORT_PMCR
(
x
Ë(0x3000 + (x * 0x100))

	)

41 
	#GSW_REG_PORT_STATUS
(
x
Ë(0x3008 + (x * 0x100))

	)

42 
	#GSW_REG_SMACCR0
 0x3fE4

	)

43 
	#GSW_REG_SMACCR1
 0x3fE8

	)

44 
	#GSW_REG_CKGCR
 0x3ff0

	)

46 
	#GSW_REG_IMR
 0x7008

	)

47 
	#GSW_REG_ISR
 0x700c

	)

48 
	#GSW_REG_GPC1
 0x7014

	)

50 
	#GSW_REG_MAC_P0_MCR
 0x100

	)

51 
	#GSW_REG_MAC_P1_MCR
 0x200

	)

54 
	#GSW_REG_GMACCR
 0x30E0

	)

56 
	#SYSC_REG_CHIP_REV_ID
 0x0c

	)

57 
	#SYSC_REG_CFG1
 0x14

	)

58 
	#RST_CTRL_MCM
 
	`BIT
(2)

	)

59 
	#SYSC_PAD_RGMII2_MDIO
 0x58

	)

60 
	#SYSC_GPIO_MODE
 0x60

	)

62 
	#PORT_IRQ_ST_CHG
 0x7f

	)

64 #ifde‡
CONFIG_SOC_MT7621


65 
	#ESW_PHY_POLLING
 0x0000

	)

67 
	#ESW_PHY_POLLING
 0x7000

	)

70 
	#PMCR_IPG
 
	`BIT
(18)

	)

71 
	#PMCR_MAC_MODE
 
	`BIT
(16)

	)

72 
	#PMCR_FORCE
 
	`BIT
(15)

	)

73 
	#PMCR_TX_EN
 
	`BIT
(14)

	)

74 
	#PMCR_RX_EN
 
	`BIT
(13)

	)

75 
	#PMCR_BACKOFF
 
	`BIT
(9)

	)

76 
	#PMCR_BACKPRES
 
	`BIT
(8)

	)

77 
	#PMCR_RX_FC
 
	`BIT
(5)

	)

78 
	#PMCR_TX_FC
 
	`BIT
(4)

	)

79 
	#PMCR_SPEED
(
_x
Ë(_x << 2)

	)

80 
	#PMCR_DUPLEX
 
	`BIT
(1)

	)

81 
	#PMCR_LINK
 
	`BIT
(0)

	)

83 
	#PHY_AN_EN
 
	`BIT
(31)

	)

84 
	#PHY_PRE_EN
 
	`BIT
(30)

	)

85 
	#PMY_MDC_CONF
(
_x
Ë((_x & 0x3fË<< 24)

	)

90 
	mGSW_ATTR_ENABLE_VLAN
,

92 
	mGSW_ATTR_PORT_UNTAG
,

96 
	mPORT4_EPHY
 = 0,

97 
	mPORT4_EXT
,

100 
	smt7620_gsw
 {

101 
devi˚
 *
	mdev
;

102 
__iomem
 *
	mba£
;

103 
	múq
;

104 
	mp‹t4
;

105 
	maut›ﬁl
;

108 
mtk_swôch_w32
(
mt7620_gsw
 *
gsw
, 
u32
 
vÆ
, 
ªg
);

109 
u32
 
mtk_swôch_r32
(
mt7620_gsw
 *
gsw
, 
ªg
);

110 
mtk_gsw_öô
(
„_¥iv
 *
¥iv
);

112 
mt7620_mdio_wrôe
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
, 
u16
 
vÆ
);

113 
mt7620_mdio_ªad
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
);

114 
mt7620_mdio_lök_adju°
(
„_¥iv
 *
¥iv
, 
p‹t
);

115 
mt7620_has_ˇºõr
(
„_¥iv
 *
¥iv
);

116 
mt7620_¥öt_lök_°©e
(
„_¥iv
 *
¥iv
, 
p‹t
, 
lök
,

117 
•ìd
, 
du∂ex
);

119 
mt7530_mdio_w32
(
mt7620_gsw
 *
gsw
, 
u32
 
ªg
, u32 
vÆ
);

120 
u32
 
mt7530_mdio_r32
(
mt7620_gsw
 *
gsw
, u32 
ªg
);

122 
u32
 
_mt7620_mii_wrôe
(
mt7620_gsw
 *
gsw
, u32 
phy_addr
,

123 
u32
 
phy_ªgi°î
, u32 
wrôe_d©a
);

124 
u32
 
_mt7620_mii_ªad
(
mt7620_gsw
 *
gsw
, 
phy_addr
, 
phy_ªg
);

125 
mt7620_h™dÀ_ˇºõr
(
„_¥iv
 *
¥iv
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7621.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/∂©f‹m_devi˚.h
>

19 
	~<löux/of_devi˚.h
>

20 
	~<löux/of_úq.h
>

22 
	~<ølök_ªgs.h
>

24 
	~"mtk_ëh_soc.h
"

25 
	~"gsw_mt7620.h
"

27 
	$mtk_swôch_w32
(
mt7620_gsw
 *
gsw
, 
u32
 
vÆ
, 
ªg
)

29 
	`iowrôe32
(
vÆ
, 
gsw
->
ba£
 + 
ªg
);

30 
	}
}

32 
u32
 
	$mtk_swôch_r32
(
mt7620_gsw
 *
gsw
, 
ªg
)

34  
	`i‹ód32
(
gsw
->
ba£
 + 
ªg
);

35 
	}
}

37 
úqªtu∫_t
 
	$gsw_öãºu±_mt7621
(
úq
, *
_¥iv
)

39 
„_¥iv
 *
¥iv
 = („_¥iv *)
_¥iv
;

40 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

41 
u32
 
ªg
, 
i
;

43 
ªg
 = 
	`mt7530_mdio_r32
(
gsw
, 0x700c);

44 
	`mt7530_mdio_w32
(
gsw
, 0x700c, 
ªg
);

46 
i
 = 0; i < 5; i++)

47 i‡(
ªg
 & 
	`BIT
(
i
)) {

48 
lök
;

50 
lök
 = 
	`mt7530_mdio_r32
(
gsw
,

51 0x3008 + (
i
 * 0x100)) & 0x1;

53 i‡(
lök
 !
¥iv
->lök[
i
]) {

54 
¥iv
->
lök
[
i
] =Üink;

55 i‡(
lök
)

56 
	`√tdev_öfo
(
¥iv
->
√tdev
,

57 "p‹à%dÜök up\n", 
i
);

59 
	`√tdev_öfo
(
¥iv
->
√tdev
,

60 "p‹à%dÜök down\n", 
i
);

64 
	`mt7620_h™dÀ_ˇºõr
(
¥iv
);

66  
IRQ_HANDLED
;

67 
	}
}

69 
	$mt7621_hw_öô
(
mt7620_gsw
 *
gsw
, 
devi˚_node
 *
≈
)

71 
u32
 
i
;

72 
u32
 
vÆ
;

75 
	`„_ª£t
(
RST_CTRL_MCM
);

76 
	`mdñay
(10);

79 
	`π_sysc_m32
(3 << 4, 0, 
SYSC_PAD_RGMII2_MDIO
);

82 
	`π_sysc_m32
(
	`BIT
(14), 0, 
SYSC_GPIO_MODE
);

85 
	`π_sysc_m32
(3 << 12, 0, 
SYSC_REG_CFG1
);

88 
	`π_sysc_m32
(3 << 12, 0, 
SYSC_GPIO_MODE
);

91 
i
 = 0; i <= 4; i++) {

92 
vÆ
 = 
	`_mt7620_mii_ªad
(
gsw
, 
i
, 0x0);

93 
vÆ
 |
	`BIT
(11);

94 
	`_mt7620_mii_wrôe
(
gsw
, 
i
, 0x0, 
vÆ
);

98 
	`mt7530_mdio_w32
(
gsw
, 0x7000, 0x3);

99 
	`u¶ìp_ønge
(10, 20);

101 i‡((
	`π_sysc_r32
(
SYSC_REG_CHIP_REV_ID
) & 0xFFFF) == 0x0101) {

103 
	`mtk_swôch_w32
(
gsw
, 0x2305e30b, 
GSW_REG_MAC_P0_MCR
);

104 
	`mt7530_mdio_w32
(
gsw
, 0x3600, 0x5e30b);

107 
	`mtk_swôch_w32
(
gsw
, 0x2305e33b, 
GSW_REG_MAC_P0_MCR
);

108 
	`mt7530_mdio_w32
(
gsw
, 0x3600, 0x5e33b);

112 
	`mtk_swôch_w32
(
gsw
, 0x8000, 
GSW_REG_MAC_P1_MCR
);

115 
	`mt7530_mdio_w32
(
gsw
, 
GSW_REG_GMACCR
, 0x3F0B);

118 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7804);

119 
vÆ
 &~
	`BIT
(8);

120 
vÆ
 |
	`BIT
(6) | BIT(13) | BIT(16);

121 
	`mt7530_mdio_w32
(
gsw
, 0x7804, 
vÆ
);

123 
vÆ
 = 
	`π_sysc_r32
(0x10);

124 
vÆ
 = (val >> 6) & 0x7;

125 i‡(
vÆ
 >= 6) {

127 } i‡(
vÆ
 >= 3) {

131 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x1f);

132 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x410);

133 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x401f);

134 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x0);

137 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x1f);

138 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x40d);

139 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x401f);

140 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x2020);

143 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x1f);

144 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x40e);

145 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x401f);

146 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x119);

149 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x1f);

150 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x40d);

151 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x401f);

152 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x2820);

154 
	`u¶ìp_ønge
(20, 40);

157 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x1f);

158 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x410);

159 
	`_mt7620_mii_wrôe
(
gsw
, 0, 13, 0x401f);

165 
	`_mt7620_mii_wrôe
(
gsw
, 0, 14, 0x1);

168 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7830);

169 
vÆ
 &~
	`BIT
(0);

170 
vÆ
 |
	`BIT
(1);

171 
	`mt7530_mdio_w32
(
gsw
, 0x7830, 
vÆ
);

172 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7a40);

173 
vÆ
 &~
	`BIT
(30);

174 
	`mt7530_mdio_w32
(
gsw
, 0x7a40, 
vÆ
);

175 
	`mt7530_mdio_w32
(
gsw
, 0x7a78, 0x855);

178 
	`mt7530_mdio_w32
(
gsw
, 0x7b00, 0x102);

179 
	`mt7530_mdio_w32
(
gsw
, 0x7b04, 0x14);

182 
	`mt7530_mdio_w32
(
gsw
, 0x7a54, 0x44);

183 
	`mt7530_mdio_w32
(
gsw
, 0x7a5c, 0x44);

184 
	`mt7530_mdio_w32
(
gsw
, 0x7a64, 0x44);

185 
	`mt7530_mdio_w32
(
gsw
, 0x7a6c, 0x44);

186 
	`mt7530_mdio_w32
(
gsw
, 0x7a74, 0x44);

187 
	`mt7530_mdio_w32
(
gsw
, 0x7a7c, 0x44);

190 
i
 = 0; i <= 4; i++) {

191 
vÆ
 = 
	`_mt7620_mii_ªad
(
gsw
, 
i
, 0);

192 
vÆ
 &~
	`BIT
(11);

193 
	`_mt7620_mii_wrôe
(
gsw
, 
i
, 0, 
vÆ
);

197 
	`mt7530_mdio_w32
(
gsw
, 0x7008, 0x1f);

198 
vÆ
 = 
	`mt7530_mdio_r32
(
gsw
, 0x7808);

199 
vÆ
 |= 3 << 16;

200 
	`mt7530_mdio_w32
(
gsw
, 0x7808, 
vÆ
);

201 
	}
}

203 c⁄° 
of_devi˚_id
 
	gmedüãk_gsw_m©ch
[] = {

204 { .
com∑tibÀ
 = "mediatek,mt7621-gsw" },

207 
MODULE_DEVICE_TABLE
(
of
, 
medüãk_gsw_m©ch
);

209 
	$mtk_gsw_öô
(
„_¥iv
 *
¥iv
)

211 
devi˚_node
 *
≈
 = 
¥iv
->
swôch_≈
;

212 
∂©f‹m_devi˚
 *
pdev
 = 
	`of_föd_devi˚_by_node
(
≈
);

213 
mt7620_gsw
 *
gsw
;

215 i‡(!
pdev
)

216  -
ENODEV
;

218 i‡(!
	`of_devi˚_is_com∑tibÀ
(
≈
, 
medüãk_gsw_m©ch
->
com∑tibÀ
))

219  -
EINVAL
;

221 
gsw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

222 
¥iv
->
soc
->
sw¥iv
 = 
gsw
;

224 i‡(
gsw
->
úq
) {

225 
	`ªque°_úq
(
gsw
->
úq
, 
gsw_öãºu±_mt7621
, 0,

226 "gsw", 
¥iv
);

227 
	`dißbÀ_úq
(
gsw
->
úq
);

230 
	`mt7621_hw_öô
(
gsw
, 
≈
);

232 i‡(
gsw
->
úq
)

233 
	`íabÀ_úq
(
gsw
->
úq
);

236 
	}
}

238 
	$mt7621_gsw_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

240 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

241 
mt7620_gsw
 *
gsw
;

243 
gsw
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
mt7620_gsw
), 
GFP_KERNEL
);

244 i‡(!
gsw
)

245  -
ENOMEM
;

247 
gsw
->
ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

248 i‡(
	`IS_ERR
(
gsw
->
ba£
))

249  
	`PTR_ERR
(
gsw
->
ba£
);

251 
gsw
->
dev
 = &
pdev
->dev;

252 
gsw
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

254 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
gsw
);

257 
	}
}

259 
	$mt7621_gsw_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

261 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

264 
	}
}

266 
∂©f‹m_drivî
 
	ggsw_drivî
 = {

267 .
¥obe
 = 
mt7621_gsw_¥obe
,

268 .
	gªmove
 = 
mt7621_gsw_ªmove
,

269 .
	gdrivî
 = {

270 .
«me
 = "mt7621-gsw",

271 .
	gow√r
 = 
THIS_MODULE
,

272 .
	gof_m©ch_èbÀ
 = 
medüãk_gsw_m©ch
,

276 
moduÀ_∂©f‹m_drivî
(
gsw_drivî
);

278 
MODULE_LICENSE
("GPL");

279 
MODULE_AUTHOR
("John Crispin <blogic@openwrt.org>");

280 
MODULE_DESCRIPTION
("GBit switch driver for Mediatek MT7621 SoC");

281 
MODULE_VERSION
(
MTK_FE_DRV_VERSION
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/phy.h
>

13 
	~<löux/of_√t.h
>

14 
	~<löux/of_mdio.h
>

16 
	~"mtk_ëh_soc.h
"

17 
	~"mdio.h
"

19 
	$„_mdio_ª£t
(
mii_bus
 *
bus
)

23 
	}
}

25 
	$„_phy_lök_adju°
(
√t_devi˚
 *
dev
)

27 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

28 
Êags
;

29 
i
;

31 
	`•ö_lock_úqßve
(&
¥iv
->
phy
->
lock
, 
Êags
);

32 
i
 = 0; i < 8; i++) {

33 i‡(
¥iv
->
phy
->
phy_node
[
i
]) {

34 
phy_devi˚
 *
phydev
 = 
¥iv
->
phy
->phy[
i
];

35 
°©us_ch™ge
 = 0;

37 i‡(
phydev
->
lök
)

38 i‡(
¥iv
->
phy
->
du∂ex
[
i
] !
phydev
->duplex ||

39 
¥iv
->
phy
->
•ìd
[
i
] !
phydev
->speed)

40 
°©us_ch™ge
 = 1;

42 i‡(
phydev
->
lök
 !
¥iv
->lök[
i
])

43 
°©us_ch™ge
 = 1;

45 
phydev
->
•ìd
) {

46 
SPEED_1000
:

47 
SPEED_100
:

48 
SPEED_10
:

49 
¥iv
->
lök
[
i
] = 
phydev
->link;

50 
¥iv
->
phy
->
du∂ex
[
i
] = 
phydev
->duplex;

51 
¥iv
->
phy
->
•ìd
[
i
] = 
phydev
->speed;

53 i‡(
°©us_ch™ge
 &&

54 
¥iv
->
soc
->
mdio_adju°_lök
)

55 
¥iv
->
soc
->
	`mdio_adju°_lök
’riv, 
i
);

60 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
phy
->
lock
, 
Êags
);

61 
	}
}

63 
	$„_c⁄√˘_phy_node
(
„_¥iv
 *
¥iv
, 
devi˚_node
 *
phy_node
)

65 c⁄° 
__be32
 *
_p‹t
 = 
NULL
;

66 
phy_devi˚
 *
phydev
;

67 
phy_mode
, 
p‹t
;

69 
_p‹t
 = 
	`of_gë_¥›îty
(
phy_node
, "ªg", 
NULL
);

71 i‡(!
_p‹t
 || (
	`be32_to_˝u
(*_port) >= 0x20)) {

72 
	`¥_îr
("%s: invÆidÖ‹àid\n", 
phy_node
->
«me
);

73  -
EINVAL
;

75 
p‹t
 = 
	`be32_to_˝u
(*
_p‹t
);

76 
phy_mode
 = 
	`of_gë_phy_mode
(
phy_node
);

77 i‡(
phy_mode
 < 0) {

78 
	`dev_îr
(
¥iv
->
dev
, "öc‹ª˘Öhy-modê%d\n", 
phy_mode
);

79 
¥iv
->
phy
->
phy_node
[
p‹t
] = 
NULL
;

80  -
EINVAL
;

83 
phydev
 = 
	`of_phy_c⁄√˘
(
¥iv
->
√tdev
, 
phy_node
, 
„_phy_lök_adju°
,

84 0, 
phy_mode
);

85 i‡(!
phydev
) {

86 
	`dev_îr
(
¥iv
->
dev
, "couldÇot connectÅo PHY\n");

87 
¥iv
->
phy
->
phy_node
[
p‹t
] = 
NULL
;

88  -
ENODEV
;

91 
phydev
->
suµ‹ãd
 &
PHY_GBIT_FEATURES
;

92 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
;

93 
phydev
->
no_auto_ˇºõr_off
 = 1;

95 
	`dev_öfo
(
¥iv
->
dev
,

97 
p‹t
, 
	`dev_«me
(&
phydev
->
mdio
.
dev
),Öhydev->
phy_id
,

98 
phydev
->
drv
->
«me
);

100 
¥iv
->
phy
->phy[
p‹t
] = 
phydev
;

101 
¥iv
->
lök
[
p‹t
] = 0;

104 
	}
}

106 
	$phy_öô
(
„_¥iv
 *
¥iv
, 
phy_devi˚
 *
phy
)

108 
	`phy_©èch
(
¥iv
->
√tdev
, 
	`dev_«me
(&
phy
->
mdio
.
dev
), 
PHY_INTERFACE_MODE_MII
);

110 
phy
->
aut⁄eg
 = 
AUTONEG_ENABLE
;

111 
phy
->
•ìd
 = 0;

112 
phy
->
du∂ex
 = 0;

113 
phy
->
suµ‹ãd
 &
	`IS_ENABLED
(
CONFIG_NET_MEDIATEK_MDIO_MT7620
) ?

114 
PHY_GBIT_FEATURES
 : 
PHY_BASIC_FEATURES
;

115 
phy
->
advîtisög
 =Öhy->
suµ‹ãd
 | 
ADVERTISED_Aut⁄eg
;

117 
	`phy_°¨t_™eg
(
phy
);

118 
	}
}

120 
	$„_phy_c⁄√˘
(
„_¥iv
 *
¥iv
)

122 
i
;

124 
i
 = 0; i < 8; i++) {

125 i‡(
¥iv
->
phy
->
phy_node
[
i
]) {

126 i‡(!
¥iv
->
phy_dev
) {

127 
¥iv
->
phy_dev
 =Öriv->
phy
->phy[
i
];

128 
¥iv
->
phy_Êags
 = 
FE_PHY_FLAG_PORT
;

130 } i‡(
¥iv
->
mii_bus
 && 
	`mdiobus_gë_phy
’riv->mii_bus, 
i
)) {

131 
	`phy_öô
(
¥iv
, 
	`mdiobus_gë_phy
’riv->
mii_bus
, 
i
));

132 i‡(!
¥iv
->
phy_dev
) {

133 
¥iv
->
phy_dev
 = 
	`mdiobus_gë_phy
’riv->
mii_bus
, 
i
);

134 
¥iv
->
phy_Êags
 = 
FE_PHY_FLAG_ATTACH
;

140 
	}
}

142 
	$„_phy_disc⁄√˘
(
„_¥iv
 *
¥iv
)

144 
Êags
;

145 
i
;

147 
i
 = 0; i < 8; i++)

148 i‡(
¥iv
->
phy
->
phy_fixed
[
i
]) {

149 
	`•ö_lock_úqßve
(&
¥iv
->
phy
->
lock
, 
Êags
);

150 
¥iv
->
lök
[
i
] = 0;

151 i‡(
¥iv
->
soc
->
mdio_adju°_lök
)

152 
¥iv
->
soc
->
	`mdio_adju°_lök
’riv, 
i
);

153 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
phy
->
lock
, 
Êags
);

154 } i‡(
¥iv
->
phy
->phy[
i
]) {

155 
	`phy_disc⁄√˘
(
¥iv
->
phy
->phy[
i
]);

156 } i‡(
¥iv
->
mii_bus
 && 
	`mdiobus_gë_phy
’riv->mii_bus, 
i
)) {

157 
	`phy_dëach
(
	`mdiobus_gë_phy
(
¥iv
->
mii_bus
, 
i
));

159 
	}
}

161 
	$„_phy_°¨t
(
„_¥iv
 *
¥iv
)

163 
Êags
;

164 
i
;

166 
i
 = 0; i < 8; i++) {

167 i‡(
¥iv
->
phy
->
phy_fixed
[
i
]) {

168 
	`•ö_lock_úqßve
(&
¥iv
->
phy
->
lock
, 
Êags
);

169 
¥iv
->
lök
[
i
] = 1;

170 i‡(
¥iv
->
soc
->
mdio_adju°_lök
)

171 
¥iv
->
soc
->
	`mdio_adju°_lök
’riv, 
i
);

172 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
phy
->
lock
, 
Êags
);

173 } i‡(
¥iv
->
phy
->phy[
i
]) {

174 
	`phy_°¨t
(
¥iv
->
phy
->phy[
i
]);

177 
	}
}

179 
	$„_phy_°›
(
„_¥iv
 *
¥iv
)

181 
Êags
;

182 
i
;

184 
i
 = 0; i < 8; i++)

185 i‡(
¥iv
->
phy
->
phy_fixed
[
i
]) {

186 
	`•ö_lock_úqßve
(&
¥iv
->
phy
->
lock
, 
Êags
);

187 
¥iv
->
lök
[
i
] = 0;

188 i‡(
¥iv
->
soc
->
mdio_adju°_lök
)

189 
¥iv
->
soc
->
	`mdio_adju°_lök
’riv, 
i
);

190 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
phy
->
lock
, 
Êags
);

191 } i‡(
¥iv
->
phy
->phy[
i
]) {

192 
	`phy_°›
(
¥iv
->
phy
->phy[
i
]);

194 
	}
}

196 
„_phy
 
	gphy_ølök
 = {

197 .
c⁄√˘
 = 
„_phy_c⁄√˘
,

198 .
	gdisc⁄√˘
 = 
„_phy_disc⁄√˘
,

199 .
	g°¨t
 = 
„_phy_°¨t
,

200 .
	g°›
 = 
„_phy_°›
,

203 
	$„_mdio_öô
(
„_¥iv
 *
¥iv
)

205 
devi˚_node
 *
mii_≈
;

206 
îr
;

208 i‡(!
¥iv
->
soc
->
mdio_ªad
 || !¥iv->soc->
mdio_wrôe
)

211 
	`•ö_lock_öô
(&
phy_ølök
.
lock
);

212 
¥iv
->
phy
 = &
phy_ølök
;

214 
mii_≈
 = 
	`of_gë_chûd_by_«me
(
¥iv
->
dev
->
of_node
, "mdio-bus");

215 i‡(!
mii_≈
) {

216 
	`dev_îr
(
¥iv
->
dev
, "no %s childÇode found", "mdio-bus");

217  -
ENODEV
;

220 i‡(!
	`of_devi˚_is_avaûabÀ
(
mii_≈
)) {

221 
îr
 = 0;

222 
îr_put_node
;

225 
¥iv
->
mii_bus
 = 
	`mdiobus_Æloc
();

226 i‡(!
¥iv
->
mii_bus
) {

227 
îr
 = -
ENOMEM
;

228 
îr_put_node
;

231 
¥iv
->
mii_bus
->
«me
 = "mdio";

232 
¥iv
->
mii_bus
->
ªad
 =Öriv->
soc
->
mdio_ªad
;

233 
¥iv
->
mii_bus
->
wrôe
 =Öriv->
soc
->
mdio_wrôe
;

234 
¥iv
->
mii_bus
->
ª£t
 = 
„_mdio_ª£t
;

235 
¥iv
->
mii_bus
->priv =Öriv;

236 
¥iv
->
mii_bus
->
∑ª¡
 =Öriv->
dev
;

238 
	`¢¥ötf
(
¥iv
->
mii_bus
->
id
, 
MII_BUS_ID_SIZE
, "%s", 
mii_≈
->
«me
);

239 
îr
 = 
	`of_mdiobus_ªgi°î
(
¥iv
->
mii_bus
, 
mii_≈
);

240 i‡(
îr
)

241 
îr_‰ì_bus
;

245 
îr_‰ì_bus
:

246 
	`k‰ì
(
¥iv
->
mii_bus
);

247 
îr_put_node
:

248 
	`of_node_put
(
mii_≈
);

249 
¥iv
->
mii_bus
 = 
NULL
;

250  
îr
;

251 
	}
}

253 
	$„_mdio_˛ónup
(
„_¥iv
 *
¥iv
)

255 i‡(!
¥iv
->
mii_bus
)

258 
	`mdiobus_uƒegi°î
(
¥iv
->
mii_bus
);

259 
	`of_node_put
(
¥iv
->
mii_bus
->
dev
.
of_node
);

260 
	`k‰ì
(
¥iv
->
mii_bus
);

261 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio.h

15 #i‚de‡
_RALINK_MDIO_H__


16 
	#_RALINK_MDIO_H__


	)

18 #ifde‡
CONFIG_NET_MEDIATEK_MDIO


19 
„_mdio_öô
(
„_¥iv
 *
¥iv
);

20 
„_mdio_˛ónup
(
„_¥iv
 *
¥iv
);

21 
„_c⁄√˘_phy_node
(
„_¥iv
 *
¥iv
,

22 
devi˚_node
 *
phy_node
);

24 
ölöe
 
	$„_mdio_öô
(
„_¥iv
 *
¥iv
Ë{  0; 
	}
}

25 
ölöe
 
	$„_mdio_˛ónup
(
„_¥iv
 *
¥iv
Ë{
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_mt7620.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

19 
	~"mtk_ëh_soc.h
"

20 
	~"gsw_mt7620.h
"

21 
	~"mdio.h
"

23 
	$mt7620_mii_busy_waô
(
mt7620_gsw
 *
gsw
)

25 
t_°¨t
 = 
jiffõs
;

28 i‡(!(
	`mtk_swôch_r32
(
gsw
, 
MT7620A_GSW_REG_PIAC
Ë& 
GSW_MDIO_ACCESS
))

30 i‡(
	`time_a·î
(
jiffõs
, 
t_°¨t
 + 
GSW_REG_PHY_TIMEOUT
))

34 
	`dev_îr
(
gsw
->
dev
, "mdio: MDIOÅimeout\n");

36 
	}
}

38 
u32
 
	$_mt7620_mii_wrôe
(
mt7620_gsw
 *
gsw
, 
u32
 
phy_addr
,

39 
u32
 
phy_ªgi°î
, u32 
wrôe_d©a
)

41 i‡(
	`mt7620_mii_busy_waô
(
gsw
))

44 
wrôe_d©a
 &= 0xffff;

46 
	`mtk_swôch_w32
(
gsw
, 
GSW_MDIO_ACCESS
 | 
GSW_MDIO_START
 | 
GSW_MDIO_WRITE
 |

47 (
phy_ªgi°î
 << 
GSW_MDIO_REG_SHIFT
) |

48 (
phy_addr
 << 
GSW_MDIO_ADDR_SHIFT
Ë| 
wrôe_d©a
,

49 
MT7620A_GSW_REG_PIAC
);

51 i‡(
	`mt7620_mii_busy_waô
(
gsw
))

55 
	}
}

57 
u32
 
	$_mt7620_mii_ªad
(
mt7620_gsw
 *
gsw
, 
phy_addr
, 
phy_ªg
)

59 
u32
 
d
;

61 i‡(
	`mt7620_mii_busy_waô
(
gsw
))

64 
	`mtk_swôch_w32
(
gsw
, 
GSW_MDIO_ACCESS
 | 
GSW_MDIO_START
 | 
GSW_MDIO_READ
 |

65 (
phy_ªg
 << 
GSW_MDIO_REG_SHIFT
) |

66 (
phy_addr
 << 
GSW_MDIO_ADDR_SHIFT
),

67 
MT7620A_GSW_REG_PIAC
);

69 i‡(
	`mt7620_mii_busy_waô
(
gsw
))

72 
d
 = 
	`mtk_swôch_r32
(
gsw
, 
MT7620A_GSW_REG_PIAC
) & 0xffff;

74  
d
;

75 
	}
}

77 
	$mt7620_mdio_wrôe
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
, 
u16
 
vÆ
)

79 
„_¥iv
 *
¥iv
 = 
bus
->priv;

80 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

82  
	`_mt7620_mii_wrôe
(
gsw
, 
phy_addr
, 
phy_ªg
, 
vÆ
);

83 
	}
}

85 
	$mt7620_mdio_ªad
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
)

87 
„_¥iv
 *
¥iv
 = 
bus
->priv;

88 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

90  
	`_mt7620_mii_ªad
(
gsw
, 
phy_addr
, 
phy_ªg
);

91 
	}
}

93 
	$mt7530_mdio_w32
(
mt7620_gsw
 *
gsw
, 
u32
 
ªg
, u32 
vÆ
)

95 
	`_mt7620_mii_wrôe
(
gsw
, 0x1f, 0x1f, (
ªg
 >> 6) & 0x3ff);

96 
	`_mt7620_mii_wrôe
(
gsw
, 0x1f, (
ªg
 >> 2Ë& 0xf, 
vÆ
 & 0xffff);

97 
	`_mt7620_mii_wrôe
(
gsw
, 0x1f, 0x10, 
vÆ
 >> 16);

98 
	}
}

100 
u32
 
	$mt7530_mdio_r32
(
mt7620_gsw
 *
gsw
, 
u32
 
ªg
)

102 
u16
 
high
, 
low
;

104 
	`_mt7620_mii_wrôe
(
gsw
, 0x1f, 0x1f, (
ªg
 >> 6) & 0x3ff);

105 
low
 = 
	`_mt7620_mii_ªad
(
gsw
, 0x1f, (
ªg
 >> 2) & 0xf);

106 
high
 = 
	`_mt7620_mii_ªad
(
gsw
, 0x1f, 0x10);

108  (
high
 << 16Ë| (
low
 & 0xffff);

109 
	}
}

111 *
	$„_•ìd_°r
(
•ìd
)

113 
•ìd
) {

115 
SPEED_1000
:

118 
SPEED_100
:

121 
SPEED_10
:

126 
	}
}

128 
	$mt7620_has_ˇºõr
(
„_¥iv
 *
¥iv
)

130 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

131 
i
;

133 
i
 = 0; i < 
GSW_PORT6
; i++)

134 i‡(
	`mtk_swôch_r32
(
gsw
, 
	`GSW_REG_PORT_STATUS
(
i
)) & 0x1)

137 
	}
}

140 
	$mt7620_h™dÀ_ˇºõr
(
„_¥iv
 *
¥iv
)

142 i‡(!
¥iv
->
phy
)

145 i‡(
	`mt7620_has_ˇºõr
(
¥iv
))

146 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
);

148 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
);

149 
	}
}

151 
	$mt7620_¥öt_lök_°©e
(
„_¥iv
 *
¥iv
, 
p‹t
, 
lök
,

152 
•ìd
, 
du∂ex
)

154 i‡(
lök
)

155 
	`√tdev_öfo
(
¥iv
->
√tdev
, "port %dÜink up (%sMbps/%s duplex)\n",

156 
p‹t
, 
	`„_•ìd_°r
(
•ìd
),

157 (
du∂ex
) ? "Full" : "Half");

159 
	`√tdev_öfo
(
¥iv
->
√tdev
, "p‹à%dÜök down\n", 
p‹t
);

160 
	}
}

162 
	$mt7620_mdio_lök_adju°
(
„_¥iv
 *
¥iv
, 
p‹t
)

164 
	`mt7620_¥öt_lök_°©e
(
¥iv
, 
p‹t
,Öriv->
lök
[port],

165 
¥iv
->
phy
->
•ìd
[
p‹t
],

166 (
¥iv
->
phy
->
du∂ex
[
p‹t
] =
DUPLEX_FULL
));

167 
	`mt7620_h™dÀ_ˇºõr
(
¥iv
);

168 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_rt2880.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/of_√t.h
>

19 
	~<löux/of_mdio.h
>

21 
	~"mtk_ëh_soc.h
"

22 
	~"mdio_π2880.h
"

23 
	~"mdio.h
"

25 
	#FE_MDIO_RETRY
 1000

	)

27 *
	$π2880_•ìd_°r
(
„_¥iv
 *
¥iv
)

29 
¥iv
->
phy
->
•ìd
[0]) {

30 
SPEED_1000
:

32 
SPEED_100
:

34 
SPEED_10
:

39 
	}
}

41 
	$π2880_mdio_lök_adju°
(
„_¥iv
 *
¥iv
, 
p‹t
)

43 
u32
 
mdio_cfg
;

45 i‡(!
¥iv
->
lök
[0]) {

46 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
);

47 
	`√tdev_öfo
(
¥iv
->
√tdev
, "link down\n");

51 
mdio_cfg
 = 
FE_MDIO_CFG_TX_CLK_SKEW_200
 |

52 
FE_MDIO_CFG_RX_CLK_SKEW_200
 |

53 
FE_MDIO_CFG_GP1_FRC_EN
;

55 i‡(
¥iv
->
phy
->
du∂ex
[0] =
DUPLEX_FULL
)

56 
mdio_cfg
 |
FE_MDIO_CFG_GP1_DUPLEX
;

58 i‡(
¥iv
->
phy
->
tx_fc
[0])

59 
mdio_cfg
 |
FE_MDIO_CFG_GP1_FC_TX
;

61 i‡(
¥iv
->
phy
->
rx_fc
[0])

62 
mdio_cfg
 |
FE_MDIO_CFG_GP1_FC_RX
;

64 
¥iv
->
phy
->
•ìd
[0]) {

65 
SPEED_10
:

66 
mdio_cfg
 |
FE_MDIO_CFG_GP1_SPEED_10
;

68 
SPEED_100
:

69 
mdio_cfg
 |
FE_MDIO_CFG_GP1_SPEED_100
;

71 
SPEED_1000
:

72 
mdio_cfg
 |
FE_MDIO_CFG_GP1_SPEED_1000
;

75 
	`BUG
();

78 
	`„_w32
(
mdio_cfg
, 
FE_MDIO_CFG
);

80 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
);

81 
	`√tdev_öfo
(
¥iv
->
√tdev
, "link up (%sMbps/%s duplex)\n",

82 
	`π2880_•ìd_°r
(
¥iv
),

83 (
¥iv
->
phy
->
du∂ex
[0] =
DUPLEX_FULL
) ? "Full" : "Half");

84 
	}
}

86 
	$π2880_mdio_waô_ªady
(
„_¥iv
 *
¥iv
)

88 
ªåõs
;

90 
ªåõs
 = 
FE_MDIO_RETRY
;

92 
u32
 
t
;

94 
t
 = 
	`„_r32
(
FE_MDIO_ACCESS
);

95 i‡((
t
 & 
	`BIT
(31)) == 0)

98 i‡(
ªåõs
-- == 0)

101 
	`udñay
(1);

104 
	`dev_îr
(
¥iv
->
dev
, "MDIO operationÅimed out\n");

105  -
ETIMEDOUT
;

106 
	}
}

108 
	$π2880_mdio_ªad
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
)

110 
„_¥iv
 *
¥iv
 = 
bus
->priv;

111 
îr
;

112 
u32
 
t
;

114 
îr
 = 
	`π2880_mdio_waô_ªady
(
¥iv
);

115 i‡(
îr
)

118 
t
 = (
phy_addr
 << 24Ë| (
phy_ªg
 << 16);

119 
	`„_w32
(
t
, 
FE_MDIO_ACCESS
);

120 
t
 |
	`BIT
(31);

121 
	`„_w32
(
t
, 
FE_MDIO_ACCESS
);

123 
îr
 = 
	`π2880_mdio_waô_ªady
(
¥iv
);

124 i‡(
îr
)

127 
	`¥_debug
("%s:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
__func__
,

128 
phy_addr
, 
phy_ªg
, 
	`„_r32
(
FE_MDIO_ACCESS
) & 0xffff);

130  
	`„_r32
(
FE_MDIO_ACCESS
) & 0xffff;

131 
	}
}

133 
	$π2880_mdio_wrôe
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
, 
u16
 
vÆ
)

135 
„_¥iv
 *
¥iv
 = 
bus
->priv;

136 
îr
;

137 
u32
 
t
;

139 
	`¥_debug
("%s:áddr=%04x,Ñeg=%04x, vÆue=%04x\n", 
__func__
,

140 
phy_addr
, 
phy_ªg
, 
	`„_r32
(
FE_MDIO_ACCESS
) & 0xffff);

142 
îr
 = 
	`π2880_mdio_waô_ªady
(
¥iv
);

143 i‡(
îr
)

144  
îr
;

146 
t
 = (1 << 30Ë| (
phy_addr
 << 24Ë| (
phy_ªg
 << 16Ë| 
vÆ
;

147 
	`„_w32
(
t
, 
FE_MDIO_ACCESS
);

148 
t
 |
	`BIT
(31);

149 
	`„_w32
(
t
, 
FE_MDIO_ACCESS
);

151  
	`π2880_mdio_waô_ªady
(
¥iv
);

152 
	}
}

154 
	$π2880_p‹t_öô
(
„_¥iv
 *
¥iv
, 
devi˚_node
 *
≈
)

156 c⁄° 
__be32
 *
id
 = 
	`of_gë_¥›îty
(
≈
, "ªg", 
NULL
);

157 c⁄° 
__be32
 *
lök
;

158 
size
;

159 
phy_mode
;

161 i‡(!
id
 || (
	`be32_to_˝u
(*id) != 0)) {

162 
	`¥_îr
("%s: invÆidÖ‹àid\n", 
≈
->
«me
);

166 
¥iv
->
phy
->
phy_fixed
[0] = 
	`of_gë_¥›îty
(
≈
,

167 "medüãk,fixed-lök", &
size
);

168 i‡(
¥iv
->
phy
->
phy_fixed
[0] &&

169 (
size
 !(4 * (*
¥iv
->
phy
->
phy_fixed
[0])))) {

170 
	`¥_îr
("%s: invÆid fixedÜökÖr›îty\n", 
≈
->
«me
);

171 
¥iv
->
phy
->
phy_fixed
[0] = 
NULL
;

175 
phy_mode
 = 
	`of_gë_phy_mode
(
≈
);

176 
phy_mode
) {

177 
PHY_INTERFACE_MODE_RGMII
:

179 
PHY_INTERFACE_MODE_MII
:

181 
PHY_INTERFACE_MODE_RMII
:

184 i‡(!
¥iv
->
phy
->
phy_fixed
[0])

185 
	`dev_îr
(
¥iv
->
dev
, "port %d - invalidÖhy mode\n",

186 
¥iv
->
phy
->
•ìd
[0]);

190 
¥iv
->
phy
->
phy_node
[0] = 
	`of_∑r£_ph™dÀ
(
≈
, "phy-handle", 0);

191 i‡(!
¥iv
->
phy
->
phy_node
[0] && !¥iv->phy->
phy_fixed
[0])

194 i‡(
¥iv
->
phy
->
phy_fixed
[0]) {

195 
lök
 = 
¥iv
->
phy
->
phy_fixed
[0];

196 
¥iv
->
phy
->
•ìd
[0] = 
	`be32_to_˝up
(
lök
++);

197 
¥iv
->
phy
->
du∂ex
[0] = 
	`be32_to_˝up
(
lök
++);

198 
¥iv
->
phy
->
tx_fc
[0] = 
	`be32_to_˝up
(
lök
++);

199 
¥iv
->
phy
->
rx_fc
[0] = 
	`be32_to_˝up
(
lök
++);

201 
¥iv
->
lök
[0] = 1;

202 
¥iv
->
phy
->
•ìd
[0]) {

203 
SPEED_10
:

205 
SPEED_100
:

207 
SPEED_1000
:

210 
	`dev_îr
(
¥iv
->
dev
, "invalidÜink speed: %d\n",

211 
¥iv
->
phy
->
•ìd
[0]);

212 
¥iv
->
phy
->
phy_fixed
[0] = 0;

215 
	`dev_öfo
(
¥iv
->
dev
, "using fixedÜinkÖarameters\n");

216 
	`π2880_mdio_lök_adju°
(
¥iv
, 0);

220 i‡(
¥iv
->
phy
->
phy_node
[0] && 
	`mdiobus_gë_phy
’riv->
mii_bus
, 0))

221 
	`„_c⁄√˘_phy_node
(
¥iv
,Öriv->
phy
->
phy_node
[0]);

222 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_rt2880.h

15 #i‚de‡
_RALINK_MDIO_RT2880_H__


16 
	#_RALINK_MDIO_RT2880_H__


	)

18 
π2880_mdio_lök_adju°
(
„_¥iv
 *
¥iv
, 
p‹t
);

19 
π2880_mdio_ªad
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
);

20 
π2880_mdio_wrôe
(
mii_bus
 *
bus
, 
phy_addr
, 
phy_ªg
, 
u16
 
vÆ
);

21 
π2880_p‹t_öô
(
„_¥iv
 *
¥iv
, 
devi˚_node
 *
≈
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mt7530.c

16 
	~<löux/if.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/öô.h
>

19 
	~<löux/li°.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/√éök.h
>

24 
	~<löux/bô›s.h
>

25 
	~<√t/gíëlök.h
>

26 
	~<löux/swôch.h
>

27 
	~<löux/dñay.h
>

28 
	~<löux/phy.h
>

29 
	~<löux/√tdevi˚.h
>

30 
	~<löux/ëhîdevi˚.h
>

31 
	~<löux/lockdï.h
>

32 
	~<löux/w‹kqueue.h
>

33 
	~<löux/of_devi˚.h
>

35 
	~"mt7530.h
"

37 
	#MT7530_CPU_PORT
 6

	)

38 
	#MT7530_NUM_PORTS
 8

	)

39 #ifde‡
CONFIG_SOC_MT7621


40 
	#MT7530_NUM_VLANS
 4095

	)

42 
	#MT7530_NUM_VLANS
 16

	)

44 
	#MT7530_MAX_VID
 4095

	)

45 
	#MT7530_MIN_VID
 0

	)

47 
	#MT7530_PORT_MIB_TXB_ID
 2

	)

48 
	#MT7530_PORT_MIB_RXB_ID
 6

	)

50 
	#MT7621_PORT_MIB_TXB_ID
 18

	)

51 
	#MT7621_PORT_MIB_RXB_ID
 37

	)

54 
	#REG_ESW_VLAN_VTCR
 0x90

	)

55 
	#REG_ESW_VLAN_VAWD1
 0x94

	)

56 
	#REG_ESW_VLAN_VAWD2
 0x98

	)

57 
	#REG_ESW_VLAN_VTIM
(
x
Ë(0x100 + 4 * ((xË/ 2))

	)

59 
	#REG_ESW_VLAN_VAWD1_IVL_MAC
 
	`BIT
(30)

	)

60 
	#REG_ESW_VLAN_VAWD1_VTAG_EN
 
	`BIT
(28)

	)

61 
	#REG_ESW_VLAN_VAWD1_VALID
 
	`BIT
(0)

	)

65 
	mETAG_CTRL_UNTAG
 = 0,

66 
	mETAG_CTRL_TAG
 = 2,

67 
	mETAG_CTRL_SWAP
 = 1,

68 
	mETAG_CTRL_STACK
 = 3,

71 
	#REG_ESW_PORT_PCR
(
x
Ë(0x2004 | ((xË<< 8))

	)

72 
	#REG_ESW_PORT_PVC
(
x
Ë(0x2010 | ((xË<< 8))

	)

73 
	#REG_ESW_PORT_PPBV1
(
x
Ë(0x2014 | ((xË<< 8))

	)

75 
	#REG_HWTRAP
 0x7804

	)

77 
	#MIB_DESC
(
_s
 , 
_o
, 
_n
) \

79 .
size
 = (
_s
), \

80 .
off£t
 = (
_o
), \

81 .
«me
 = (
_n
), \

82 }

	)

84 
	smt7xxx_mib_desc
 {

85 
	msize
;

86 
	moff£t
;

87 c⁄° *
	m«me
;

90 c⁄° 
mt7xxx_mib_desc
 
	gmt7620_mibs
[] = {

91 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_AC_BCNT0
, "PPE_AC_BCNT0"),

92 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_AC_PCNT0
, "PPE_AC_PCNT0"),

93 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_AC_BCNT63
, "PPE_AC_BCNT63"),

94 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_AC_PCNT63
, "PPE_AC_PCNT63"),

95 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_MTR_CNT0
, "PPE_MTR_CNT0"),

96 
MIB_DESC
(1, 
MT7620_MIB_STATS_PPE_MTR_CNT63
, "PPE_MTR_CNT63"),

97 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_TX_GBCNT
, "GDM1_TX_GBCNT"),

98 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_TX_GPCNT
, "GDM1_TX_GPCNT"),

99 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_TX_SKIPCNT
, "GDM1_TX_SKIPCNT"),

100 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_TX_COLCNT
, "GDM1_TX_COLCNT"),

101 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_GBCNT1
, "GDM1_RX_GBCNT1"),

102 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_GPCNT1
, "GDM1_RX_GPCNT1"),

103 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_OERCNT
, "GDM1_RX_OERCNT"),

104 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_FERCNT
, "GDM1_RX_FERCNT"),

105 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_SERCNT
, "GDM1_RX_SERCNT"),

106 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_LERCNT
, "GDM1_RX_LERCNT"),

107 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_CERCNT
, "GDM1_RX_CERCNT"),

108 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM1_RX_FCCNT
, "GDM1_RX_FCCNT"),

109 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_TX_GBCNT
, "GDM2_TX_GBCNT"),

110 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_TX_GPCNT
, "GDM2_TX_GPCNT"),

111 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_TX_SKIPCNT
, "GDM2_TX_SKIPCNT"),

112 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_TX_COLCNT
, "GDM2_TX_COLCNT"),

113 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_GBCNT
, "GDM2_RX_GBCNT"),

114 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_GPCNT
, "GDM2_RX_GPCNT"),

115 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_OERCNT
, "GDM2_RX_OERCNT"),

116 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_FERCNT
, "GDM2_RX_FERCNT"),

117 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_SERCNT
, "GDM2_RX_SERCNT"),

118 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_LERCNT
, "GDM2_RX_LERCNT"),

119 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_CERCNT
, "GDM2_RX_CERCNT"),

120 
MIB_DESC
(1, 
MT7620_MIB_STATS_GDM2_RX_FCCNT
, "GDM2_RX_FCCNT")

123 c⁄° 
mt7xxx_mib_desc
 
	gmt7620_p‹t_mibs
[] = {

124 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_TGPCN
, "TxGPC"),

125 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_TBOCN
, "TxBOC"),

126 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_TGOCN
, "TxGOC"),

127 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_TEPCN
, "TxEPC"),

128 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_RGPCN
, "RxGPC"),

129 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_RBOCN
, "RxBOC"),

130 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_RGOCN
, "RxGOC"),

131 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_REPC1N
, "RxEPC1"),

132 
MIB_DESC
(1, 
MT7620_MIB_STATS_PORT_REPC2N
, "RxEPC2")

135 c⁄° 
mt7xxx_mib_desc
 
	gmt7621_mibs
[] = {

136 
MIB_DESC
(1, 
MT7621_STATS_TDPC
, "TxDrop"),

137 
MIB_DESC
(1, 
MT7621_STATS_TCRC
, "TxCRC"),

138 
MIB_DESC
(1, 
MT7621_STATS_TUPC
, "TxUni"),

139 
MIB_DESC
(1, 
MT7621_STATS_TMPC
, "TxMulti"),

140 
MIB_DESC
(1, 
MT7621_STATS_TBPC
, "TxBroad"),

141 
MIB_DESC
(1, 
MT7621_STATS_TCEC
, "TxCollision"),

142 
MIB_DESC
(1, 
MT7621_STATS_TSCEC
, "TxSingleCol"),

143 
MIB_DESC
(1, 
MT7621_STATS_TMCEC
, "TxMultiCol"),

144 
MIB_DESC
(1, 
MT7621_STATS_TDEC
, "TxDefer"),

145 
MIB_DESC
(1, 
MT7621_STATS_TLCEC
, "TxLateCol"),

146 
MIB_DESC
(1, 
MT7621_STATS_TXCEC
, "TxExcCol"),

147 
MIB_DESC
(1, 
MT7621_STATS_TPPC
, "TxPause"),

148 
MIB_DESC
(1, 
MT7621_STATS_TL64PC
, "Tx64Byte"),

149 
MIB_DESC
(1, 
MT7621_STATS_TL65PC
, "Tx65Byte"),

150 
MIB_DESC
(1, 
MT7621_STATS_TL128PC
, "Tx128Byte"),

151 
MIB_DESC
(1, 
MT7621_STATS_TL256PC
, "Tx256Byte"),

152 
MIB_DESC
(1, 
MT7621_STATS_TL512PC
, "Tx512Byte"),

153 
MIB_DESC
(1, 
MT7621_STATS_TL1024PC
, "Tx1024Byte"),

154 
MIB_DESC
(2, 
MT7621_STATS_TOC
, "TxByte"),

155 
MIB_DESC
(1, 
MT7621_STATS_RDPC
, "RxDrop"),

156 
MIB_DESC
(1, 
MT7621_STATS_RFPC
, "RxFiltered"),

157 
MIB_DESC
(1, 
MT7621_STATS_RUPC
, "RxUni"),

158 
MIB_DESC
(1, 
MT7621_STATS_RMPC
, "RxMulti"),

159 
MIB_DESC
(1, 
MT7621_STATS_RBPC
, "RxBroad"),

160 
MIB_DESC
(1, 
MT7621_STATS_RAEPC
, "RxAlignErr"),

161 
MIB_DESC
(1, 
MT7621_STATS_RCEPC
, "RxCRC"),

162 
MIB_DESC
(1, 
MT7621_STATS_RUSPC
, "RxUnderSize"),

163 
MIB_DESC
(1, 
MT7621_STATS_RFEPC
, "RxFragment"),

164 
MIB_DESC
(1, 
MT7621_STATS_ROSPC
, "RxOverSize"),

165 
MIB_DESC
(1, 
MT7621_STATS_RJEPC
, "RxJabber"),

166 
MIB_DESC
(1, 
MT7621_STATS_RPPC
, "RxPause"),

167 
MIB_DESC
(1, 
MT7621_STATS_RL64PC
, "Rx64Byte"),

168 
MIB_DESC
(1, 
MT7621_STATS_RL65PC
, "Rx65Byte"),

169 
MIB_DESC
(1, 
MT7621_STATS_RL128PC
, "Rx128Byte"),

170 
MIB_DESC
(1, 
MT7621_STATS_RL256PC
, "Rx256Byte"),

171 
MIB_DESC
(1, 
MT7621_STATS_RL512PC
, "Rx512Byte"),

172 
MIB_DESC
(1, 
MT7621_STATS_RL1024PC
, "Rx1024Byte"),

173 
MIB_DESC
(2, 
MT7621_STATS_ROC
, "RxByte"),

174 
MIB_DESC
(1, 
MT7621_STATS_RDPC_CTRL
, "RxCtrlDrop"),

175 
MIB_DESC
(1, 
MT7621_STATS_RDPC_ING
, "RxIngDrop"),

176 
MIB_DESC
(1, 
MT7621_STATS_RDPC_ARL
, "RxARLDrop")

181 
	mMT7530_ATTR_ENABLE_VLAN
,

184 
	smt7530_p‹t_íåy
 {

185 
u16
 
	mpvid
;

188 
	smt7530_vœn_íåy
 {

189 
u16
 
	mvid
;

190 
u8
 
	mmembî
;

191 
u8
 
	mëags
;

194 
	smt7530_¥iv
 {

195 
__iomem
 *
	mba£
;

196 
mii_bus
 *
	mbus
;

197 
swôch_dev
 
	mswdev
;

199 
boﬁ
 
	mglobÆ_vœn_íabÀ
;

200 
mt7530_vœn_íåy
 
	mvœn_íåõs
[
MT7530_NUM_VLANS
];

201 
mt7530_p‹t_íåy
 
	mp‹t_íåõs
[
MT7530_NUM_PORTS
];

204 
	smt7530_m≠pög
 {

205 *
	m«me
;

206 
u16
 
	mpvids
[
MT7530_NUM_PORTS
];

207 
u8
 
	mmembîs
[
MT7530_NUM_VLANS
];

208 
u8
 
	mëags
[
MT7530_NUM_VLANS
];

209 
u16
 
	mvids
[
MT7530_NUM_VLANS
];

210 } 
	gmt7530_deÁu…s
[] = {

212 .
«me
 = "llllw",

213 .
	gpvids
 = { 1, 1, 1, 1, 2, 1, 1 },

214 .
	gmembîs
 = { 0, 0x6f, 0x50 },

215 .
	gëags
 = { 0, 0x40, 0x40 },

216 .
	gvids
 = { 0, 1, 2 },

218 .
	g«me
 = "wllll",

219 .
	gpvids
 = { 2, 1, 1, 1, 1, 1, 1 },

220 .
	gmembîs
 = { 0, 0x7e, 0x41 },

221 .
	gëags
 = { 0, 0x40, 0x40 },

222 .
	gvids
 = { 0, 1, 2 },

224 .
	g«me
 = "lwlll",

225 .
	gpvids
 = { 1, 2, 1, 1, 1, 1, 1 },

226 .
	gmembîs
 = { 0, 0x7d, 0x42 },

227 .
	gëags
 = { 0, 0x40, 0x40 },

228 .
	gvids
 = { 0, 1, 2 },

232 
mt7530_m≠pög
*

233 
	$mt7530_föd_m≠pög
(
devi˚_node
 *
≈
)

235 c⁄° *
m≠
;

236 
i
;

238 i‡(
	`of_¥›îty_ªad_°rög
(
≈
, "medüãk,p‹tm≠", &
m≠
))

239  
NULL
;

241 
i
 = 0; i < 
	`ARRAY_SIZE
(
mt7530_deÁu…s
); i++)

242 i‡(!
	`°rcmp
(
m≠
, 
mt7530_deÁu…s
[
i
].
«me
))

243  &
mt7530_deÁu…s
[
i
];

245  
NULL
;

246 
	}
}

249 
	$mt7530_≠∂y_m≠pög
(
mt7530_¥iv
 *
mt7530
, 
mt7530_m≠pög
 *
m≠
)

251 
i
 = 0;

253 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++)

254 
mt7530
->
p‹t_íåõs
[
i
].
pvid
 = 
m≠
->
pvids
[i];

256 
i
 = 0; i < 
MT7530_NUM_VLANS
; i++) {

257 
mt7530
->
vœn_íåõs
[
i
].
membî
 = 
m≠
->
membîs
[i];

258 
mt7530
->
vœn_íåõs
[
i
].
ëags
 = 
m≠
->etags[i];

259 
mt7530
->
vœn_íåõs
[
i
].
vid
 = 
m≠
->
vids
[i];

261 
	}
}

264 
	$mt7530_ª£t_swôch
(
swôch_dev
 *
dev
)

266 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

267 
i
;

269 
	`mem£t
(
¥iv
->
p‹t_íåõs
, 0, (priv->port_entries));

270 
	`mem£t
(
¥iv
->
vœn_íåõs
, 0, (priv->vlan_entries));

275 
i
 = 0; i < 
MT7530_NUM_VLANS
; i++) {

276 
¥iv
->
vœn_íåõs
[
i
].
vid
 = i;

280 
	}
}

283 
	$mt7530_gë_vœn_íabÀ
(
swôch_dev
 *
dev
,

284 c⁄° 
swôch_©å
 *
©å
,

285 
swôch_vÆ
 *
vÆ
)

287 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

289 
vÆ
->
vÆue
.
i
 = 
¥iv
->
globÆ_vœn_íabÀ
;

292 
	}
}

295 
	$mt7530_£t_vœn_íabÀ
(
swôch_dev
 *
dev
,

296 c⁄° 
swôch_©å
 *
©å
,

297 
swôch_vÆ
 *
vÆ
)

299 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

301 
¥iv
->
globÆ_vœn_íabÀ
 = 
vÆ
->
vÆue
.
i
 != 0;

304 
	}
}

306 
u32


307 
	$mt7530_r32
(
mt7530_¥iv
 *
¥iv
, 
u32
 
ªg
)

309 
u32
 
vÆ
;

310 i‡(
¥iv
->
bus
) {

311 
u16
 
high
, 
low
;

313 
	`mdiobus_wrôe
(
¥iv
->
bus
, 0x1f, 0x1f, (
ªg
 >> 6) & 0x3ff);

314 
low
 = 
	`mdiobus_ªad
(
¥iv
->
bus
, 0x1f, (
ªg
 >> 2) & 0xf);

315 
high
 = 
	`mdiobus_ªad
(
¥iv
->
bus
, 0x1f, 0x10);

317  (
high
 << 16Ë| (
low
 & 0xffff);

320 
vÆ
 = 
	`i‹ód32
(
¥iv
->
ba£
 + 
ªg
);

321 
	`¥_debug
("MT7530 MDIO Ród [%04x]=%08x\n", 
ªg
, 
vÆ
);

323  
vÆ
;

324 
	}
}

327 
	$mt7530_w32
(
mt7530_¥iv
 *
¥iv
, 
u32
 
ªg
, u32 
vÆ
)

329 i‡(
¥iv
->
bus
) {

330 
	`mdiobus_wrôe
(
¥iv
->
bus
, 0x1f, 0x1f, (
ªg
 >> 6) & 0x3ff);

331 
	`mdiobus_wrôe
(
¥iv
->
bus
, 0x1f, (
ªg
 >> 2Ë& 0xf, 
vÆ
 & 0xffff);

332 
	`mdiobus_wrôe
(
¥iv
->
bus
, 0x1f, 0x10, 
vÆ
 >> 16);

336 
	`¥_debug
("MT7530 MDIO Wrôe[%04x]=%08x\n", 
ªg
, 
vÆ
);

337 
	`iowrôe32
(
vÆ
, 
¥iv
->
ba£
 + 
ªg
);

338 
	}
}

341 
	$mt7530_vt¸
(
mt7530_¥iv
 *
¥iv
, 
u32
 
cmd
, u32 
vÆ
)

343 
i
;

345 
	`mt7530_w32
(
¥iv
, 
REG_ESW_VLAN_VTCR
, 
	`BIT
(31Ë| (
cmd
 << 12Ë| 
vÆ
);

347 
i
 = 0; i < 20; i++) {

348 
u32
 
vÆ
 = 
	`mt7530_r32
(
¥iv
, 
REG_ESW_VLAN_VTCR
);

350 i‡((
vÆ
 & 
	`BIT
(31)) == 0)

353 
	`udñay
(1000);

355 i‡(
i
 == 20)

356 
	`¥ötk
("mt7530: vtcrÅimeout\n");

357 
	}
}

360 
	$mt7530_gë_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, *
vÆ
)

362 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

364 i‡(
p‹t
 >
MT7530_NUM_PORTS
)

365  -
EINVAL
;

367 *
vÆ
 = 
	`mt7530_r32
(
¥iv
, 
	`REG_ESW_PORT_PPBV1
(
p‹t
));

368 *
vÆ
 &= 0xfff;

371 
	}
}

374 
	$mt7530_£t_p‹t_pvid
(
swôch_dev
 *
dev
, 
p‹t
, 
pvid
)

376 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

378 i‡(
p‹t
 >
MT7530_NUM_PORTS
)

379  -
EINVAL
;

381 i‡(
pvid
 < 
MT7530_MIN_VID
 ||Övid > 
MT7530_MAX_VID
)

382  -
EINVAL
;

384 
¥iv
->
p‹t_íåõs
[
p‹t
].
pvid
 =Övid;

387 
	}
}

390 
	$mt7530_gë_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

392 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

393 
u32
 
membî
;

394 
u32
 
ëags
;

395 
i
;

397 
vÆ
->
Àn
 = 0;

399 i‡(
vÆ
->
p‹t_vœn
 < 0 || vÆ->p‹t_vœ¿>
MT7530_NUM_VLANS
)

400  -
EINVAL
;

402 
	`mt7530_vt¸
(
¥iv
, 0, 
vÆ
->
p‹t_vœn
);

404 
membî
 = 
	`mt7530_r32
(
¥iv
, 
REG_ESW_VLAN_VAWD1
);

405 
membî
 >>= 16;

406 
membî
 &= 0xff;

408 
ëags
 = 
	`mt7530_r32
(
¥iv
, 
REG_ESW_VLAN_VAWD2
);

410 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++) {

411 
swôch_p‹t
 *
p
;

412 
ëag
;

414 i‡(!(
membî
 & 
	`BIT
(
i
)))

417 
p
 = &
vÆ
->
vÆue
.
p‹ts
[vÆ->
Àn
++];

418 
p
->
id
 = 
i
;

420 
ëag
 = (
ëags
 >> (
i
 * 2)) & 0x3;

422 i‡(
ëag
 =
ETAG_CTRL_TAG
)

423 
p
->
Êags
 |
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
);

424 i‡(
ëag
 !
ETAG_CTRL_UNTAG
)

425 
	`¥ötk
("vlanÉgressÅag controlÇeither untagÇorÅag.\n");

429 
	}
}

432 
	$mt7530_£t_vœn_p‹ts
(
swôch_dev
 *
dev
, 
swôch_vÆ
 *
vÆ
)

434 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

435 
u8
 
membî
 = 0;

436 
u8
 
ëags
 = 0;

437 
i
;

439 i‡(
vÆ
->
p‹t_vœn
 < 0 || vÆ->p‹t_vœ¿>
MT7530_NUM_VLANS
 ||

440 
vÆ
->
Àn
 > 
MT7530_NUM_PORTS
)

441  -
EINVAL
;

443 
i
 = 0; i < 
vÆ
->
Àn
; i++) {

444 
swôch_p‹t
 *
p
 = &
vÆ
->
vÆue
.
p‹ts
[
i
];

446 i‡(
p
->
id
 >
MT7530_NUM_PORTS
)

447  -
EINVAL
;

449 
membî
 |
	`BIT
(
p
->
id
);

451 i‡(
p
->
Êags
 & 
	`BIT
(
SWITCH_PORT_FLAG_TAGGED
))

452 
ëags
 |
	`BIT
(
p
->
id
);

454 
¥iv
->
vœn_íåõs
[
vÆ
->
p‹t_vœn
].
membî
 = member;

455 
¥iv
->
vœn_íåõs
[
vÆ
->
p‹t_vœn
].
ëags
 =Étags;

458 
	}
}

461 
	$mt7530_£t_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

462 
swôch_vÆ
 *
vÆ
)

464 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

465 
vœn
;

466 
u16
 
vid
;

468 
vœn
 = 
vÆ
->
p‹t_vœn
;

469 
vid
 = (
u16
)
vÆ
->
vÆue
.
i
;

471 i‡(
vœn
 < 0 || vœ¿>
MT7530_NUM_VLANS
)

472  -
EINVAL
;

474 i‡(
vid
 < 
MT7530_MIN_VID
 || vid > 
MT7530_MAX_VID
)

475  -
EINVAL
;

477 
¥iv
->
vœn_íåõs
[
vœn
].
vid
 = vid;

479 
	}
}

482 
	$mt7621_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

483 
swôch_vÆ
 *
vÆ
)

485 
vÆ
->
vÆue
.
i
 = vÆ->
p‹t_vœn
;

487 
	}
}

490 
	$mt7530_gë_vid
(
swôch_dev
 *
dev
, c⁄° 
swôch_©å
 *
©å
,

491 
swôch_vÆ
 *
vÆ
)

493 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

494 
u32
 
vid
;

495 
vœn
;

497 
vœn
 = 
vÆ
->
p‹t_vœn
;

499 
vid
 = 
	`mt7530_r32
(
¥iv
, 
	`REG_ESW_VLAN_VTIM
(
vœn
));

500 i‡(
vœn
 & 1)

501 
vid
 = vid >> 12;

502 
vid
 &= 0xfff;

504 
vÆ
->
vÆue
.
i
 = 
vid
;

506 
	}
}

509 
	$mt7530_wrôe_vœn_íåy
(
mt7530_¥iv
 *
¥iv
, 
vœn
, 
u16
 
vid
,

510 
u8
 
p‹ts
, u8 
ëags
)

512 
p‹t
;

513 
u32
 
vÆ
;

515 #i‚de‡
CONFIG_SOC_MT7621


517 
vÆ
 = 
	`mt7530_r32
(
¥iv
, 
	`REG_ESW_VLAN_VTIM
(
vœn
));

518 i‡(
vœn
 % 2 == 0) {

519 
vÆ
 &= 0xfff000;

520 
vÆ
 |
vid
;

522 
vÆ
 &= 0xfff;

523 
vÆ
 |(
vid
 << 12);

525 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_VLAN_VTIM
(
vœn
), 
vÆ
);

529 i‡(
p‹ts
)

530 
	`mt7530_w32
(
¥iv
, 
REG_ESW_VLAN_VAWD1
, 
REG_ESW_VLAN_VAWD1_IVL_MAC
 |

531 
REG_ESW_VLAN_VAWD1_VTAG_EN
 | (
p‹ts
 << 16) |

532 
REG_ESW_VLAN_VAWD1_VALID
);

534 
	`mt7530_w32
(
¥iv
, 
REG_ESW_VLAN_VAWD1
, 0);

537 
vÆ
 = 0;

538 
p‹t
 = 0;Ö‹à< 
MT7530_NUM_PORTS
;Öort++) {

539 i‡(
ëags
 & 
	`BIT
(
p‹t
))

540 
vÆ
 |
ETAG_CTRL_TAG
 << (
p‹t
 * 2);

542 
vÆ
 |
ETAG_CTRL_UNTAG
 << (
p‹t
 * 2);

544 
	`mt7530_w32
(
¥iv
, 
REG_ESW_VLAN_VAWD2
, 
vÆ
);

547 #ifde‡
CONFIG_SOC_MT7621


548 
	`mt7530_vt¸
(
¥iv
, 1, 
vid
);

550 
	`mt7530_vt¸
(
¥iv
, 1, 
vœn
);

552 
	}
}

555 
	$mt7530_≠∂y_c⁄fig
(
swôch_dev
 *
dev
)

557 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

558 
i
, 
j
;

559 
u8
 
èg_p‹ts
;

560 
u8
 
u¡ag_p‹ts
;

562 i‡(!
¥iv
->
globÆ_vœn_íabÀ
) {

563 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++)

564 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PCR
(
i
), 0x00400000);

566 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PCR
(
MT7530_CPU_PORT
), 0x00ff0000);

568 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++)

569 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PVC
(
i
), 0x810000c0);

575 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++)

576 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PCR
(
i
), 0x00ff0003);

579 
èg_p‹ts
 = 0;

580 
u¡ag_p‹ts
 = 0;

582 
i
 = 0; i < 
MT7530_NUM_VLANS
; i++) {

583 
u8
 
membî
 = 
¥iv
->
vœn_íåõs
[
i
].member;

584 
u8
 
ëags
 = 
¥iv
->
vœn_íåõs
[
i
].etags;

586 i‡(!
membî
)

589 
j
 = 0; j < 
MT7530_NUM_PORTS
; j++) {

590 i‡(!(
membî
 & 
	`BIT
(
j
)))

593 i‡(
ëags
 & 
	`BIT
(
j
))

594 
èg_p‹ts
 |1u << 
j
;

596 
u¡ag_p‹ts
 |1u << 
j
;

601 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++) {

602 
u32
 
pvc_mode
 = 0x81000000;

604 i‡(
u¡ag_p‹ts
 & 
	`BIT
(
i
Ë&& !(
èg_p‹ts
 & BIT(i)))

605 
pvc_mode
 = 0x810000c0;

607 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PVC
(
i
), 
pvc_mode
);

611 
i
 = 0; i < 
MT7530_NUM_VLANS
; i++)

612 
	`mt7530_wrôe_vœn_íåy
(
¥iv
, 
i
, i, 0, 0);

616 
i
 = 0; i < 
MT7530_NUM_VLANS
; i++) {

617 
u16
 
vid
 = 
¥iv
->
vœn_íåõs
[
i
].vid;

618 
u8
 
membî
 = 
¥iv
->
vœn_íåõs
[
i
].member;

619 
u8
 
ëags
 = 
¥iv
->
vœn_íåõs
[
i
].etags;

621 i‡(
membî
)

622 
	`mt7530_wrôe_vœn_íåy
(
¥iv
, 
i
, 
vid
, 
membî
, 
ëags
);

626 
i
 = 0; i < 
MT7530_NUM_PORTS
; i++) {

627 
vœn
 = 
¥iv
->
p‹t_íåõs
[
i
].
pvid
;

628 
u16
 
pvid
 = 0;

629 
u32
 
vÆ
;

631 i‡(
vœn
 < 
MT7530_NUM_VLANS
 && 
¥iv
->
vœn_íåõs
[vœn].
membî
)

632 
pvid
 = 
¥iv
->
vœn_íåõs
[
vœn
].
vid
;

634 
vÆ
 = 
	`mt7530_r32
(
¥iv
, 
	`REG_ESW_PORT_PPBV1
(
i
));

635 
vÆ
 &= ~0xfff;

636 
vÆ
 |
pvid
;

637 
	`mt7530_w32
(
¥iv
, 
	`REG_ESW_PORT_PPBV1
(
i
), 
vÆ
);

641 
	}
}

644 
	$mt7530_gë_p‹t_lök
(
swôch_dev
 *
dev
, 
p‹t
,

645 
swôch_p‹t_lök
 *
lök
)

647 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

648 
u32
 
•ìd
, 
pm§
;

650 i‡(
p‹t
 < 0 ||Ö‹à>
MT7530_NUM_PORTS
)

651  -
EINVAL
;

653 
pm§
 = 
	`mt7530_r32
(
¥iv
, 0x3008 + (0x100 * 
p‹t
));

655 
lök
->lök = 
pm§
 & 1;

656 
lök
->
du∂ex
 = (
pm§
 >> 1) & 1;

657 
•ìd
 = (
pm§
 >> 2) & 3;

659 
•ìd
) {

661 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_10
;

664 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_100
;

668 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_1000
;

671 
lök
->
•ìd
 = 
SWITCH_PORT_SPEED_UNKNOWN
;

676 
	}
}

678 
u64
 
	$gë_mib_cou¡î
(
mt7530_¥iv
 *
¥iv
, 
i
, 
p‹t
)

680 
p‹t_ba£
;

681 
u64
 
lo
;

683 
p‹t_ba£
 = 
MT7621_MIB_COUNTER_BASE
 +

684 
MT7621_MIB_COUNTER_PORT_OFFSET
 * 
p‹t
;

686 
lo
 = 
	`mt7530_r32
(
¥iv
, 
p‹t_ba£
 + 
mt7621_mibs
[
i
].
off£t
);

687 i‡(
mt7621_mibs
[
i
].
size
 == 2) {

688 
u64
 
hi
;

690 
hi
 = 
	`mt7530_r32
(
¥iv
, 
p‹t_ba£
 + 
mt7621_mibs
[
i
].
off£t
 + 4);

691 
lo
 |
hi
 << 32;

694  
lo
;

695 
	}
}

697 
	$mt7621_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

698 c⁄° 
swôch_©å
 *
©å
,

699 
swôch_vÆ
 *
vÆ
)

701 
buf
[4096];

702 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

703 
i
, 
Àn
 = 0;

705 i‡(
vÆ
->
p‹t_vœn
 >
MT7530_NUM_PORTS
)

706  -
EINVAL
;

708 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen,

709 "P‹à%d MIB cou¡îs\n", 
vÆ
->
p‹t_vœn
);

711 
i
 = 0; i < 
	`ARRAY_SIZE
(
mt7621_mibs
); ++i) {

712 
u64
 
cou¡î
;

713 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen,

714 "%-11s: ", 
mt7621_mibs
[
i
].
«me
);

715 
cou¡î
 = 
	`gë_mib_cou¡î
(
¥iv
, 
i
, 
vÆ
->
p‹t_vœn
);

716 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "%llu\n",

717 
cou¡î
);

720 
vÆ
->
vÆue
.
s
 = 
buf
;

721 
vÆ
->
Àn
 =Üen;

723 
	}
}

725 
u64
 
	$gë_mib_cou¡î_7620
(
mt7530_¥iv
 *
¥iv
, 
i
)

727  
	`mt7530_r32
(
¥iv
, 
MT7620_MIB_COUNTER_BASE
 + 
mt7620_mibs
[
i
].
off£t
);

728 
	}
}

730 
u64
 
	$gë_mib_cou¡î_p‹t_7620
(
mt7530_¥iv
 *
¥iv
, 
i
, 
p‹t
)

732  
	`mt7530_r32
(
¥iv
,

733 
MT7620_MIB_COUNTER_BASE_PORT
 +

734 (
MT7620_MIB_COUNTER_PORT_OFFSET
 * 
p‹t
) +

735 
mt7620_p‹t_mibs
[
i
].
off£t
);

736 
	}
}

738 
	$mt7530_sw_gë_mib
(
swôch_dev
 *
dev
,

739 c⁄° 
swôch_©å
 *
©å
,

740 
swôch_vÆ
 *
vÆ
)

742 
buf
[4096];

743 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

744 
i
, 
Àn
 = 0;

746 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "Switch MIB counters\n");

748 
i
 = 0; i < 
	`ARRAY_SIZE
(
mt7620_mibs
); ++i) {

749 
u64
 
cou¡î
;

750 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen,

751 "%-11s: ", 
mt7620_mibs
[
i
].
«me
);

752 
cou¡î
 = 
	`gë_mib_cou¡î_7620
(
¥iv
, 
i
);

753 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "%llu\n",

754 
cou¡î
);

757 
vÆ
->
vÆue
.
s
 = 
buf
;

758 
vÆ
->
Àn
 =Üen;

760 
	}
}

762 
	$mt7530_sw_gë_p‹t_mib
(
swôch_dev
 *
dev
,

763 c⁄° 
swôch_©å
 *
©å
,

764 
swôch_vÆ
 *
vÆ
)

766 
buf
[4096];

767 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

768 
i
, 
Àn
 = 0;

770 i‡(
vÆ
->
p‹t_vœn
 >
MT7530_NUM_PORTS
)

771  -
EINVAL
;

773 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen,

774 "P‹à%d MIB cou¡îs\n", 
vÆ
->
p‹t_vœn
);

776 
i
 = 0; i < 
	`ARRAY_SIZE
(
mt7620_p‹t_mibs
); ++i) {

777 
u64
 
cou¡î
;

778 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen,

779 "%-11s: ", 
mt7620_p‹t_mibs
[
i
].
«me
);

780 
cou¡î
 = 
	`gë_mib_cou¡î_p‹t_7620
(
¥iv
, 
i
, 
vÆ
->
p‹t_vœn
);

781 
Àn
 +
	`¢¥ötf
(
buf
 +Üen, (buf) -Üen, "%llu\n",

782 
cou¡î
);

785 
vÆ
->
vÆue
.
s
 = 
buf
;

786 
vÆ
->
Àn
 =Üen;

788 
	}
}

790 
	$mt7530_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

791 
swôch_p‹t_°©s
 *
°©s
)

793 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

795 i‡(
p‹t
 < 0 ||Ö‹à>
MT7530_NUM_PORTS
)

796  -
EINVAL
;

798 
°©s
->
tx_byãs
 = 
	`gë_mib_cou¡î_p‹t_7620
(
¥iv
, 
MT7530_PORT_MIB_TXB_ID
, 
p‹t
);

799 
°©s
->
rx_byãs
 = 
	`gë_mib_cou¡î_p‹t_7620
(
¥iv
, 
MT7530_PORT_MIB_RXB_ID
, 
p‹t
);

802 
	}
}

804 
	$mt7621_gë_p‹t_°©s
(
swôch_dev
 *
dev
, 
p‹t
,

805 
swôch_p‹t_°©s
 *
°©s
)

807 
mt7530_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
dev
, mt7530_¥iv, 
swdev
);

809 i‡(
p‹t
 < 0 ||Ö‹à>
MT7530_NUM_PORTS
)

810  -
EINVAL
;

812 
°©s
->
tx_byãs
 = 
	`gë_mib_cou¡î
(
¥iv
, 
MT7621_PORT_MIB_TXB_ID
, 
p‹t
);

813 
°©s
->
rx_byãs
 = 
	`gë_mib_cou¡î
(
¥iv
, 
MT7621_PORT_MIB_RXB_ID
, 
p‹t
);

816 
	}
}

818 c⁄° 
swôch_©å
 
	gmt7530_globÆ
[] = {

820 .
ty≥
 = 
SWITCH_TYPE_INT
,

821 .
	g«me
 = "enable_vlan",

822 .
	gdes¸ùti⁄
 = "VLAN mode (1:enabled)",

823 .
	gmax
 = 1,

824 .
	gid
 = 
MT7530_ATTR_ENABLE_VLAN
,

825 .
	ggë
 = 
mt7530_gë_vœn_íabÀ
,

826 .
	g£t
 = 
mt7530_£t_vœn_íabÀ
,

828 .
	gty≥
 = 
SWITCH_TYPE_STRING
,

829 .
	g«me
 = "mib",

830 .
	gdes¸ùti⁄
 = "Get MIB counters for switch",

831 .
	ggë
 = 
mt7530_sw_gë_mib
,

832 .
	g£t
 = 
NULL
,

836 c⁄° 
swôch_©å
 
	gmt7621_p‹t
[] = {

838 .
ty≥
 = 
SWITCH_TYPE_STRING
,

839 .
	g«me
 = "mib",

840 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

841 .
	ggë
 = 
mt7621_sw_gë_p‹t_mib
,

842 .
	g£t
 = 
NULL
,

846 c⁄° 
swôch_©å
 
	gmt7621_vœn
[] = {

848 .
ty≥
 = 
SWITCH_TYPE_INT
,

849 .
	g«me
 = "vid",

850 .
	gdes¸ùti⁄
 = "VLAN ID (0-4094)",

851 .
	g£t
 = 
mt7530_£t_vid
,

852 .
	ggë
 = 
mt7621_gë_vid
,

853 .
	gmax
 = 4094,

857 c⁄° 
swôch_©å
 
	gmt7530_p‹t
[] = {

859 .
ty≥
 = 
SWITCH_TYPE_STRING
,

860 .
	g«me
 = "mib",

861 .
	gdes¸ùti⁄
 = "Get MIB counters forÖort",

862 .
	ggë
 = 
mt7530_sw_gë_p‹t_mib
,

863 .
	g£t
 = 
NULL
,

867 c⁄° 
swôch_©å
 
	gmt7530_vœn
[] = {

869 .
ty≥
 = 
SWITCH_TYPE_INT
,

870 .
	g«me
 = "vid",

871 .
	gdes¸ùti⁄
 = "VLAN ID (0-4094)",

872 .
	g£t
 = 
mt7530_£t_vid
,

873 .
	ggë
 = 
mt7530_gë_vid
,

874 .
	gmax
 = 4094,

878 c⁄° 
swôch_dev_›s
 
	gmt7621_›s
 = {

879 .
©å_globÆ
 = {

880 .
©å
 = 
mt7530_globÆ
,

881 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7530_globÆ
),

883 .
	g©å_p‹t
 = {

884 .
©å
 = 
mt7621_p‹t
,

885 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7621_p‹t
),

887 .
	g©å_vœn
 = {

888 .
©å
 = 
mt7621_vœn
,

889 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7621_vœn
),

891 .
	ggë_vœn_p‹ts
 = 
mt7530_gë_vœn_p‹ts
,

892 .
	g£t_vœn_p‹ts
 = 
mt7530_£t_vœn_p‹ts
,

893 .
	ggë_p‹t_pvid
 = 
mt7530_gë_p‹t_pvid
,

894 .
	g£t_p‹t_pvid
 = 
mt7530_£t_p‹t_pvid
,

895 .
	ggë_p‹t_lök
 = 
mt7530_gë_p‹t_lök
,

896 .
	ggë_p‹t_°©s
 = 
mt7621_gë_p‹t_°©s
,

897 .
	g≠∂y_c⁄fig
 = 
mt7530_≠∂y_c⁄fig
,

898 .
	gª£t_swôch
 = 
mt7530_ª£t_swôch
,

901 c⁄° 
swôch_dev_›s
 
	gmt7530_›s
 = {

902 .
©å_globÆ
 = {

903 .
©å
 = 
mt7530_globÆ
,

904 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7530_globÆ
),

906 .
	g©å_p‹t
 = {

907 .
©å
 = 
mt7530_p‹t
,

908 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7530_p‹t
),

910 .
	g©å_vœn
 = {

911 .
©å
 = 
mt7530_vœn
,

912 .
	gn_©å
 = 
ARRAY_SIZE
(
mt7530_vœn
),

914 .
	ggë_vœn_p‹ts
 = 
mt7530_gë_vœn_p‹ts
,

915 .
	g£t_vœn_p‹ts
 = 
mt7530_£t_vœn_p‹ts
,

916 .
	ggë_p‹t_pvid
 = 
mt7530_gë_p‹t_pvid
,

917 .
	g£t_p‹t_pvid
 = 
mt7530_£t_p‹t_pvid
,

918 .
	ggë_p‹t_lök
 = 
mt7530_gë_p‹t_lök
,

919 .
	ggë_p‹t_°©s
 = 
mt7530_gë_p‹t_°©s
,

920 .
	g≠∂y_c⁄fig
 = 
mt7530_≠∂y_c⁄fig
,

921 .
	gª£t_swôch
 = 
mt7530_ª£t_swôch
,

925 
	$mt7530_¥obe
(
devi˚
 *
dev
, 
__iomem
 *
ba£
, 
mii_bus
 *
bus
, 
vœn
)

927 
swôch_dev
 *
swdev
;

928 
mt7530_¥iv
 *
mt7530
;

929 
mt7530_m≠pög
 *
m≠
;

930 
ªt
;

932 
mt7530
 = 
	`devm_kzÆloc
(
dev
, (
mt7530_¥iv
), 
GFP_KERNEL
);

933 i‡(!
mt7530
)

934  -
ENOMEM
;

936 
mt7530
->
ba£
 = base;

937 
mt7530
->
bus
 = bus;

938 
mt7530
->
globÆ_vœn_íabÀ
 = 
vœn
;

940 
swdev
 = &
mt7530
->swdev;

941 i‡(
bus
) {

942 
swdev
->
Æüs
 = "mt7530";

943 
swdev
->
«me
 = "mt7530";

944 } i‡(
	`IS_ENABLED
(
CONFIG_SOC_MT7621
)) {

945 
swdev
->
Æüs
 = "mt7621";

946 
swdev
->
«me
 = "mt7621";

948 
swdev
->
Æüs
 = "mt7620";

949 
swdev
->
«me
 = "mt7620";

951 
swdev
->
˝u_p‹t
 = 
MT7530_CPU_PORT
;

952 
swdev
->
p‹ts
 = 
MT7530_NUM_PORTS
;

953 
swdev
->
vœns
 = 
MT7530_NUM_VLANS
;

954 i‡(
	`IS_ENABLED
(
CONFIG_SOC_MT7621
))

955 
swdev
->
›s
 = &
mt7621_›s
;

957 
swdev
->
›s
 = &
mt7530_›s
;

959 
ªt
 = 
	`ªgi°î_swôch
(
swdev
, 
NULL
);

960 i‡(
ªt
) {

961 
	`dev_îr
(
dev
, "failedÅoÑegister mt7530\n");

962  
ªt
;

966 
m≠
 = 
	`mt7530_föd_m≠pög
(
dev
->
of_node
);

967 i‡(
m≠
)

968 
	`mt7530_≠∂y_m≠pög
(
mt7530
, 
m≠
);

969 
	`mt7530_≠∂y_c⁄fig
(
swdev
);

972 i‡(!
	`IS_ENABLED
(
CONFIG_SOC_MT7621
Ë&& 
bus
 && 
	`mt7530_r32
(
mt7530
, 
REG_HWTRAP
) != 0x1117edf) {

973 
	`dev_öfo
(
dev
, "fixing up MHWTRAPÑegister - bootloaderÖrobablyÖlayed with it\n");

974 
	`mt7530_w32
(
mt7530
, 
REG_HWTRAP
, 0x1117edf);

976 
	`dev_öfo
(
dev
, "lﬂded %†drivî\n", 
swdev
->
«me
);

979 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mt7530.h

16 #i‚de‡
_MT7530_H__


17 
	#_MT7530_H__


	)

19 
	#MT7620_MIB_COUNTER_BASE_PORT
 0x4000

	)

20 
	#MT7620_MIB_COUNTER_PORT_OFFSET
 0x100

	)

21 
	#MT7620_MIB_COUNTER_BASE
 0x1010

	)

24 
	#MT7620_MIB_STATS_PPE_AC_BCNT0
 0x000

	)

27 
	#MT7620_MIB_STATS_PPE_AC_PCNT0
 0x004

	)

30 
	#MT7620_MIB_STATS_PPE_AC_BCNT63
 0x1F8

	)

33 
	#MT7620_MIB_STATS_PPE_AC_PCNT63
 0x1FC

	)

36 
	#MT7620_MIB_STATS_PPE_MTR_CNT0
 0x200

	)

39 
	#MT7620_MIB_STATS_PPE_MTR_CNT63
 0x2FC

	)

42 
	#MT7620_MIB_STATS_GDM1_TX_GBCNT
 0x300

	)

45 
	#MT7620_MIB_STATS_GDM1_TX_GPCNT
 0x304

	)

48 
	#MT7620_MIB_STATS_GDM1_TX_SKIPCNT
 0x308

	)

51 
	#MT7620_MIB_STATS_GDM1_TX_COLCNT
 0x30C

	)

54 
	#MT7620_MIB_STATS_GDM1_RX_GBCNT1
 0x320

	)

57 
	#MT7620_MIB_STATS_GDM1_RX_GPCNT1
 0x324

	)

60 
	#MT7620_MIB_STATS_GDM1_RX_OERCNT
 0x328

	)

63 
	#MT7620_MIB_STATS_GDM1_RX_FERCNT
 0x32C

	)

66 
	#MT7620_MIB_STATS_GDM1_RX_SERCNT
 0x330

	)

69 
	#MT7620_MIB_STATS_GDM1_RX_LERCNT
 0x334

	)

72 
	#MT7620_MIB_STATS_GDM1_RX_CERCNT
 0x338

	)

75 
	#MT7620_MIB_STATS_GDM1_RX_FCCNT
 0x33C

	)

78 
	#MT7620_MIB_STATS_GDM2_TX_GBCNT
 0x340

	)

81 
	#MT7620_MIB_STATS_GDM2_TX_GPCNT
 0x344

	)

84 
	#MT7620_MIB_STATS_GDM2_TX_SKIPCNT
 0x348

	)

87 
	#MT7620_MIB_STATS_GDM2_TX_COLCNT
 0x34C

	)

90 
	#MT7620_MIB_STATS_GDM2_RX_GBCNT
 0x360

	)

93 
	#MT7620_MIB_STATS_GDM2_RX_GPCNT
 0x364

	)

96 
	#MT7620_MIB_STATS_GDM2_RX_OERCNT
 0x368

	)

99 
	#MT7620_MIB_STATS_GDM2_RX_FERCNT
 0x36C

	)

102 
	#MT7620_MIB_STATS_GDM2_RX_SERCNT
 0x370

	)

105 
	#MT7620_MIB_STATS_GDM2_RX_LERCNT
 0x374

	)

108 
	#MT7620_MIB_STATS_GDM2_RX_CERCNT
 0x378

	)

111 
	#MT7620_MIB_STATS_GDM2_RX_FCCNT
 0x37C

	)

114 
	#MT7620_MIB_STATS_PORT_TGPCN
 0x10

	)

117 
	#MT7620_MIB_STATS_PORT_TBOCN
 0x14

	)

120 
	#MT7620_MIB_STATS_PORT_TGOCN
 0x18

	)

123 
	#MT7620_MIB_STATS_PORT_TEPCN
 0x1C

	)

126 
	#MT7620_MIB_STATS_PORT_RGPCN
 0x20

	)

129 
	#MT7620_MIB_STATS_PORT_RBOCN
 0x24

	)

132 
	#MT7620_MIB_STATS_PORT_RGOCN
 0x28

	)

135 
	#MT7620_MIB_STATS_PORT_REPC1N
 0x2C

	)

138 
	#MT7620_MIB_STATS_PORT_REPC2N
 0x30

	)

140 
	#MT7621_MIB_COUNTER_BASE
 0x4000

	)

141 
	#MT7621_MIB_COUNTER_PORT_OFFSET
 0x100

	)

142 
	#MT7621_STATS_TDPC
 0x00

	)

143 
	#MT7621_STATS_TCRC
 0x04

	)

144 
	#MT7621_STATS_TUPC
 0x08

	)

145 
	#MT7621_STATS_TMPC
 0x0C

	)

146 
	#MT7621_STATS_TBPC
 0x10

	)

147 
	#MT7621_STATS_TCEC
 0x14

	)

148 
	#MT7621_STATS_TSCEC
 0x18

	)

149 
	#MT7621_STATS_TMCEC
 0x1C

	)

150 
	#MT7621_STATS_TDEC
 0x20

	)

151 
	#MT7621_STATS_TLCEC
 0x24

	)

152 
	#MT7621_STATS_TXCEC
 0x28

	)

153 
	#MT7621_STATS_TPPC
 0x2C

	)

154 
	#MT7621_STATS_TL64PC
 0x30

	)

155 
	#MT7621_STATS_TL65PC
 0x34

	)

156 
	#MT7621_STATS_TL128PC
 0x38

	)

157 
	#MT7621_STATS_TL256PC
 0x3C

	)

158 
	#MT7621_STATS_TL512PC
 0x40

	)

159 
	#MT7621_STATS_TL1024PC
 0x44

	)

160 
	#MT7621_STATS_TOC
 0x48

	)

161 
	#MT7621_STATS_RDPC
 0x60

	)

162 
	#MT7621_STATS_RFPC
 0x64

	)

163 
	#MT7621_STATS_RUPC
 0x68

	)

164 
	#MT7621_STATS_RMPC
 0x6C

	)

165 
	#MT7621_STATS_RBPC
 0x70

	)

166 
	#MT7621_STATS_RAEPC
 0x74

	)

167 
	#MT7621_STATS_RCEPC
 0x78

	)

168 
	#MT7621_STATS_RUSPC
 0x7C

	)

169 
	#MT7621_STATS_RFEPC
 0x80

	)

170 
	#MT7621_STATS_ROSPC
 0x84

	)

171 
	#MT7621_STATS_RJEPC
 0x88

	)

172 
	#MT7621_STATS_RPPC
 0x8C

	)

173 
	#MT7621_STATS_RL64PC
 0x90

	)

174 
	#MT7621_STATS_RL65PC
 0x94

	)

175 
	#MT7621_STATS_RL128PC
 0x98

	)

176 
	#MT7621_STATS_RL256PC
 0x9C

	)

177 
	#MT7621_STATS_RL512PC
 0xA0

	)

178 
	#MT7621_STATS_RL1024PC
 0xA4

	)

179 
	#MT7621_STATS_ROC
 0xA8

	)

180 
	#MT7621_STATS_RDPC_CTRL
 0xB0

	)

181 
	#MT7621_STATS_RDPC_ING
 0xB4

	)

182 
	#MT7621_STATS_RDPC_ARL
 0xB8

	)

184 
mt7530_¥obe
(
devi˚
 *
dev
, 
__iomem
 *
ba£
, 
mii_bus
 *
bus
, 
vœn
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_debugfs.c

14 
	~"mtk_ofÊﬂd.h
"

16 c⁄° *
	gmtk_f€_íåy_°©e_°r
[] = {

23 c⁄° *
	gmtk_f€_∑ckë_ty≥_°r
[] = {

33 
	#IPV4_HNAPT
 0

	)

34 
	#IPV4_HNAT
 1

	)

35 
	#IS_IPV4_HNAPT
(
x
Ë(((x)->
bfib1
.
pkt_ty≥
 =
IPV4_HNAPT
Ë? 1: 0)

	)

36 
mtk_ëh
 *
	g_ëh
;

37 
	#es
(
íåy
Ë(
mtk_f€_íåy_°©e_°r
[íåy->
bfib1
.
°©e
])

	)

39 
	#ei
(
íåy
, 
íd
Ë(
MTK_PPE_ENTRY_CNT
 - ()”nd -É¡ry))

	)

40 
	#±
(
íåy
Ë(
mtk_f€_∑ckë_ty≥_°r
[íåy->
ùv4_h«±
.
bfib1
.
pkt_ty≥
])

	)

42 
	$mtk_µe_debugfs_f€_show
(
£q_fûe
 *
m
, *
¥iv©e
)

44 
mtk_ëh
 *
ëh
 = 
_ëh
;

45 
mtk_f€_íåy
 *
íåy
, *
íd
;

46 
i
 = 0;

48 
íåy
 = 
ëh
->
f€_èbÀ
;

49 
íd
 = 
ëh
->
f€_èbÀ
 + 
MTK_PPE_ENTRY_CNT
;

51 
íåy
 < 
íd
) {

52 i‡(
	`IS_IPV4_HNAPT
(
íåy
)) {

53 
__be32
 
ßddr
 = 
	`ht⁄l
(
íåy
->
ùv4_h«±
.
sù
);

54 
__be32
 
daddr
 = 
	`ht⁄l
(
íåy
->
ùv4_h«±
.
dù
);

55 
__be32
 
nßddr
 = 
	`ht⁄l
(
íåy
->
ùv4_h«±
.
√w_sù
);

56 
__be32
 
ndaddr
 = 
	`ht⁄l
(
íåy
->
ùv4_h«±
.
√w_dù
);

57 
h_de°
[
ETH_ALEN
];

58 
h_sour˚
[
ETH_ALEN
];

60 *((
u32
*Ë
h_sour˚
Ë
	`swab32
(
íåy
->
ùv4_h«±
.
smac_hi
);

61 *((
u16
*Ë&
h_sour˚
[4]Ë
	`swab16
(
íåy
->
ùv4_h«±
.
smac_lo
);

62 *((
u32
*Ë
h_de°
Ë
	`swab32
(
íåy
->
ùv4_h«±
.
dmac_hi
);

63 *((
u16
*Ë&
h_de°
[4]Ë
	`swab16
(
íåy
->
ùv4_h«±
.
dmac_lo
);

64 
	`£q_¥ötf
(
m
,

69 
i
,

70 
	`ei
(
íåy
, 
íd
), 
	`es
”¡ry), 
	`±
(entry),

71 &
ßddr
, 
íåy
->
ùv4_h«±
.
•‹t
,

72 &
daddr
, 
íåy
->
ùv4_h«±
.
dp‹t
,

73 &
nßddr
, 
íåy
->
ùv4_h«±
.
√w_•‹t
,

74 &
ndaddr
, 
íåy
->
ùv4_h«±
.
√w_dp‹t
, 
h_sour˚
,

75 
h_de°
, 
	`¡ohs
(
íåy
->
ùv4_h«±
.
ëy≥
),

76 
íåy
->
ùv4_h«±
.
öfo_blk1
,

77 
íåy
->
ùv4_h«±
.
öfo_blk2
,

78 
íåy
->
ùv4_h«±
.
vœn1
,

79 
íåy
->
ùv4_h«±
.
vœn2
);

81 
	`£q_¥ötf
(
m
, "0x%05x state=%s\n",

82 
	`ei
(
íåy
, 
íd
), 
	`es
(entry));

83 
íåy
++;

84 
i
++;

88 
	}
}

90 
	$mtk_µe_debugfs_f€_›í
(
öode
 *öode, 
fûe
 *file)

92  
	`sögÀ_›í
(
fûe
, 
mtk_µe_debugfs_f€_show
, fûe->
¥iv©e_d©a
);

93 
	}
}

95 c⁄° 
fûe_›î©i⁄s
 
	gmtk_µe_debugfs_f€_f›s
 = {

96 .
›í
 = 
mtk_µe_debugfs_f€_›í
,

97 .
	gªad
 = 
£q_ªad
,

98 .
	gŒ£ek
 = 
£q_l£ek
,

99 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

102 
	$mtk_µe_debugfs_öô
(
mtk_ëh
 *
ëh
)

104 
díåy
 *
roŸ
;

106 
_ëh
 = 
ëh
;

108 
roŸ
 = 
	`debugfs_¸óã_dú
("mtk_µe", 
NULL
);

109 i‡(!
roŸ
)

110  -
ENOMEM
;

112 
	`debugfs_¸óã_fûe
("Æl_íåy", 
S_IRUGO
, 
roŸ
, 
ëh
, &
mtk_µe_debugfs_f€_f›s
);

115 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_eth_soc.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/dma-m≠pög.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/skbuff.h
>

21 
	~<löux/ëhîdevi˚.h
>

22 
	~<löux/ëhtoﬁ.h
>

23 
	~<löux/∂©f‹m_devi˚.h
>

24 
	~<löux/of_devi˚.h
>

25 
	~<löux/˛k.h
>

26 
	~<löux/of_√t.h
>

27 
	~<löux/of_mdio.h
>

28 
	~<löux/if_vœn.h
>

29 
	~<löux/ª£t.h
>

30 
	~<löux/t˝.h
>

31 
	~<löux/io.h
>

32 
	~<löux/bug.h
>

33 
	~<löux/√tfûãr.h
>

34 
	~<√t/√tfûãr/nf_Êow_èbÀ.h
>

36 
	~<asm/mach-ølök/ølök_ªgs.h
>

38 
	~"mtk_ëh_soc.h
"

39 
	~"mdio.h
"

40 
	~"ëhtoﬁ.h
"

42 
	#MAX_RX_LENGTH
 1536

	)

43 
	#FE_RX_ETH_HLEN
 (
VLAN_ETH_HLEN
 + 
VLAN_HLEN
 + 
ETH_FCS_LEN
)

	)

44 
	#FE_RX_HLEN
 (
NET_SKB_PAD
 + 
FE_RX_ETH_HLEN
 + 
NET_IP_ALIGN
)

	)

45 
	#DMA_DUMMY_DESC
 0xffffffff

	)

46 
	#FE_DEFAULT_MSG_ENABLE
 \

47 (
NETIF_MSG_DRV
 | \

48 
NETIF_MSG_PROBE
 | \

49 
NETIF_MSG_LINK
 | \

50 
NETIF_MSG_TIMER
 | \

51 
NETIF_MSG_IFDOWN
 | \

52 
NETIF_MSG_IFUP
 | \

53 
NETIF_MSG_RX_ERR
 | \

54 
NETIF_MSG_TX_ERR
)

	)

56 
	#TX_DMA_DESP2_DEF
 (
TX_DMA_LS0
 | 
TX_DMA_DONE
)

	)

57 
	#TX_DMA_DESP4_DEF
 (
	`TX_DMA_QN
(3Ë| 
	`TX_DMA_PN
(1))

	)

58 
	#NEXT_TX_DESP_IDX
(
X
Ë(((XË+ 1Ë& (
rög
->
tx_rög_size
 - 1))

	)

59 
	#NEXT_RX_DESP_IDX
(
X
Ë(((XË+ 1Ë& (
rög
->
rx_rög_size
 - 1))

	)

61 
	#SYSC_REG_RSTCTRL
 0x34

	)

63 
	g„_msg_Àvñ
 = -1;

64 
moduÀ_∑øm_«med
(
msg_Àvñ
, 
„_msg_Àvñ
, , 0);

65 
MODULE_PARM_DESC
(
msg_Àvñ
, "MessageÜevel (-1=defaults,0=none,...,16=all)");

67 c⁄° 
u16
 
	g„_ªg_èbÀ_deÁu…
[
FE_REG_COUNT
] = {

68 [
FE_REG_PDMA_GLO_CFG
] = 
FE_PDMA_GLO_CFG
,

69 [
FE_REG_PDMA_RST_CFG
] = 
FE_PDMA_RST_CFG
,

70 [
FE_REG_DLY_INT_CFG
] = 
FE_DLY_INT_CFG
,

71 [
FE_REG_TX_BASE_PTR0
] = 
FE_TX_BASE_PTR0
,

72 [
FE_REG_TX_MAX_CNT0
] = 
FE_TX_MAX_CNT0
,

73 [
FE_REG_TX_CTX_IDX0
] = 
FE_TX_CTX_IDX0
,

74 [
FE_REG_TX_DTX_IDX0
] = 
FE_TX_DTX_IDX0
,

75 [
FE_REG_RX_BASE_PTR0
] = 
FE_RX_BASE_PTR0
,

76 [
FE_REG_RX_MAX_CNT0
] = 
FE_RX_MAX_CNT0
,

77 [
FE_REG_RX_CALC_IDX0
] = 
FE_RX_CALC_IDX0
,

78 [
FE_REG_RX_DRX_IDX0
] = 
FE_RX_DRX_IDX0
,

79 [
FE_REG_FE_INT_ENABLE
] = 
FE_FE_INT_ENABLE
,

80 [
FE_REG_FE_INT_STATUS
] = 
FE_FE_INT_STATUS
,

81 [
FE_REG_FE_DMA_VID_BASE
] = 
FE_DMA_VID0
,

82 [
FE_REG_FE_COUNTER_BASE
] = 
FE_GDMA1_TX_GBCNT
,

83 [
FE_REG_FE_RST_GL
] = 
FE_FE_RST_GL
,

86 c⁄° 
u16
 *
	g„_ªg_èbÀ
 = 
„_ªg_èbÀ_deÁu…
;

88 
	s„_w‹k_t
 {

89 
	mbôƒ
;

90 (*
	ma˘i⁄
)(
	m„_¥iv
 *);

93 
__iomem
 *
	g„_ba£
;

95 
	$„_w32
(
u32
 
vÆ
, 
ªg
)

97 
	`__øw_wrôñ
(
vÆ
, 
„_ba£
 + 
ªg
);

98 
	}
}

100 
u32
 
	$„_r32
(
ªg
)

102  
	`__øw_ªadl
(
„_ba£
 + 
ªg
);

103 
	}
}

105 
	$„_ªg_w32
(
u32
 
vÆ
, 
„_ªg
 
ªg
)

107 
	`„_w32
(
vÆ
, 
„_ªg_èbÀ
[
ªg
]);

108 
	}
}

110 
u32
 
	$„_ªg_r32
(
„_ªg
 
ªg
)

112  
	`„_r32
(
„_ªg_èbÀ
[
ªg
]);

113 
	}
}

115 
	$„_m32
(
„_¥iv
 *
ëh
, 
u32
 
˛ór
, u32 
£t
, 
ªg
)

117 
u32
 
vÆ
;

119 
	`•ö_lock
(&
ëh
->
∑ge_lock
);

120 
vÆ
 = 
	`__øw_ªadl
(
„_ba£
 + 
ªg
);

121 
vÆ
 &~
˛ór
;

122 
vÆ
 |
£t
;

123 
	`__øw_wrôñ
(
vÆ
, 
„_ba£
 + 
ªg
);

124 
	`•ö_u∆ock
(&
ëh
->
∑ge_lock
);

125 
	}
}

127 
	$„_ª£t
(
u32
 
ª£t_bôs
)

129 
u32
 
t
;

131 
t
 = 
	`π_sysc_r32
(
SYSC_REG_RSTCTRL
);

132 
t
 |
ª£t_bôs
;

133 
	`π_sysc_w32
(
t
, 
SYSC_REG_RSTCTRL
);

134 
	`u¶ìp_ønge
(10, 20);

136 
t
 &~
ª£t_bôs
;

137 
	`π_sysc_w32
(
t
, 
SYSC_REG_RSTCTRL
);

138 
	`u¶ìp_ønge
(10, 20);

139 
	}
}

141 
ölöe
 
	$„_öt_dißbÀ
(
u32
 
mask
)

143 
	`„_ªg_w32
(
	`„_ªg_r32
(
FE_REG_FE_INT_ENABLE
Ë& ~
mask
,

144 
FE_REG_FE_INT_ENABLE
);

146 
	`„_ªg_r32
(
FE_REG_FE_INT_ENABLE
);

147 
	}
}

149 
ölöe
 
	$„_öt_íabÀ
(
u32
 
mask
)

151 
	`„_ªg_w32
(
	`„_ªg_r32
(
FE_REG_FE_INT_ENABLE
Ë| 
mask
,

152 
FE_REG_FE_INT_ENABLE
);

154 
	`„_ªg_r32
(
FE_REG_FE_INT_ENABLE
);

155 
	}
}

157 
ölöe
 
	$„_hw_£t_maˇddr
(
„_¥iv
 *
¥iv
, *
mac
)

159 
Êags
;

161 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

162 
	`„_w32
((
mac
[0] << 8Ë| mac[1], 
FE_GDMA1_MAC_ADRH
);

163 
	`„_w32
((
mac
[2] << 24) | (mac[3] << 16) | (mac[4] << 8) | mac[5],

164 
FE_GDMA1_MAC_ADRL
);

165 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

166 
	}
}

168 
	$„_£t_mac_addªss
(
√t_devi˚
 *
dev
, *
p
)

170 
ªt
 = 
	`ëh_mac_addr
(
dev
, 
p
);

172 i‡(!
ªt
) {

173 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

175 i‡(
¥iv
->
soc
->
£t_mac
)

176 
¥iv
->
soc
->
	`£t_mac
’riv, 
dev
->
dev_addr
);

178 
	`„_hw_£t_maˇddr
(
¥iv
, 
p
);

181  
ªt
;

182 
	}
}

184 
ölöe
 
	$„_max_‰ag_size
(
mtu
)

187 i‡(
mtu
 + 
FE_RX_ETH_HLEN
 < 
MAX_RX_LENGTH
)

188 
mtu
 = 
MAX_RX_LENGTH
 - 
FE_RX_ETH_HLEN
;

190  
	`SKB_DATA_ALIGN
(
FE_RX_HLEN
 + 
mtu
) +

191 
	`SKB_DATA_ALIGN
((
skb_sh¨ed_öfo
));

192 
	}
}

194 
ölöe
 
	$„_max_buf_size
(
‰ag_size
)

196 
buf_size
 = 
‰ag_size
 - 
NET_SKB_PAD
 - 
NET_IP_ALIGN
 -

197 
	`SKB_DATA_ALIGN
((
skb_sh¨ed_öfo
));

199 
	`BUG_ON
(
buf_size
 < 
MAX_RX_LENGTH
);

200  
buf_size
;

201 
	}
}

203 
ölöe
 
	$„_gë_rxd
(
„_rx_dma
 *
rxd
, „_rx_dm®*
dma_rxd
)

205 
rxd
->
rxd1
 = 
dma_rxd
->rxd1;

206 
rxd
->
rxd2
 = 
dma_rxd
->rxd2;

207 
rxd
->
rxd3
 = 
dma_rxd
->rxd3;

208 
rxd
->
rxd4
 = 
dma_rxd
->rxd4;

209 
	}
}

211 
ölöe
 
	$„_£t_txd
(
„_tx_dma
 *
txd
, „_tx_dm®*
dma_txd
)

213 
dma_txd
->
txd1
 = 
txd
->txd1;

214 
dma_txd
->
txd3
 = 
txd
->txd3;

215 
dma_txd
->
txd4
 = 
txd
->txd4;

217 
dma_txd
->
txd2
 = 
txd
->txd2;

218 
	}
}

220 
	$„_˛ón_rx
(
„_¥iv
 *
¥iv
)

222 
„_rx_rög
 *
rög
 = &
¥iv
->
rx_rög
;

223 
∑ge
 *page;

224 
i
;

226 i‡(
rög
->
rx_d©a
) {

227 
i
 = 0; i < 
rög
->
rx_rög_size
; i++)

228 i‡(
rög
->
rx_d©a
[
i
]) {

229 i‡(
rög
->
rx_dma
 &&Ñög->rx_dma[
i
].
rxd1
)

230 
	`dma_unm≠_sögÀ
(&
¥iv
->
√tdev
->
dev
,

231 
rög
->
rx_dma
[
i
].
rxd1
,

232 
rög
->
rx_buf_size
,

233 
DMA_FROM_DEVICE
);

234 
	`skb_‰ì_‰ag
(
rög
->
rx_d©a
[
i
]);

237 
	`k‰ì
(
rög
->
rx_d©a
);

238 
rög
->
rx_d©a
 = 
NULL
;

241 i‡(
rög
->
rx_dma
) {

242 
	`dma_‰ì_cohîít
(&
¥iv
->
√tdev
->
dev
,

243 
rög
->
rx_rög_size
 * (*rög->
rx_dma
),

244 
rög
->
rx_dma
,

245 
rög
->
rx_phys
);

246 
rög
->
rx_dma
 = 
NULL
;

249 i‡(!
rög
->
‰ag_ˇche
.
va
)

252 
∑ge
 = 
	`vút_to_∑ge
(
rög
->
‰ag_ˇche
.
va
);

253 
	`__∑ge_‰ag_ˇche_døö
(
∑ge
, 
rög
->
‰ag_ˇche
.
∑ge˙t_büs
);

254 
	`mem£t
(&
rög
->
‰ag_ˇche
, 0, (ring->frag_cache));

255 
	}
}

257 
	$„_Æloc_rx
(
„_¥iv
 *
¥iv
)

259 
√t_devi˚
 *
√tdev
 = 
¥iv
->netdev;

260 
„_rx_rög
 *
rög
 = &
¥iv
->
rx_rög
;

261 
i
, 
∑d
;

263 
rög
->
rx_d©a
 = 
	`kˇŒoc
‘ög->
rx_rög_size
, (*ring->rx_data),

264 
GFP_KERNEL
);

265 i‡(!
rög
->
rx_d©a
)

266 
no_rx_mem
;

268 
i
 = 0; i < 
rög
->
rx_rög_size
; i++) {

269 
rög
->
rx_d©a
[
i
] = 
	`∑ge_‰ag_Æloc
(&rög->
‰ag_ˇche
,

270 
rög
->
‰ag_size
,

271 
GFP_KERNEL
);

272 i‡(!
rög
->
rx_d©a
[
i
])

273 
no_rx_mem
;

276 
rög
->
rx_dma
 = 
	`dma_Æloc_cohîít
(&
√tdev
->
dev
,

277 
rög
->
rx_rög_size
 * (*rög->
rx_dma
),

278 &
rög
->
rx_phys
,

279 
GFP_ATOMIC
 | 
__GFP_ZERO
);

280 i‡(!
rög
->
rx_dma
)

281 
no_rx_mem
;

283 i‡(
¥iv
->
Êags
 & 
FE_FLAG_RX_2B_OFFSET
)

284 
∑d
 = 0;

286 
∑d
 = 
NET_IP_ALIGN
;

287 
i
 = 0; i < 
rög
->
rx_rög_size
; i++) {

288 
dma_addr_t
 
dma_addr
 = 
	`dma_m≠_sögÀ
(&
√tdev
->
dev
,

289 
rög
->
rx_d©a
[
i
] + 
NET_SKB_PAD
 + 
∑d
,

290 
rög
->
rx_buf_size
,

291 
DMA_FROM_DEVICE
);

292 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(&
√tdev
->
dev
, 
dma_addr
)))

293 
no_rx_mem
;

294 
rög
->
rx_dma
[
i
].
rxd1
 = ()
dma_addr
;

296 i‡(
¥iv
->
Êags
 & 
FE_FLAG_RX_SG_DMA
)

297 
rög
->
rx_dma
[
i
].
rxd2
 = 
	`RX_DMA_PLEN0
‘ög->
rx_buf_size
);

299 
rög
->
rx_dma
[
i
].
rxd2
 = 
RX_DMA_LSO
;

301 
rög
->
rx_ˇlc_idx
 =Ñög->
rx_rög_size
 - 1;

305 
	`wmb
();

307 
	`„_ªg_w32
(
rög
->
rx_phys
, 
FE_REG_RX_BASE_PTR0
);

308 
	`„_ªg_w32
(
rög
->
rx_rög_size
, 
FE_REG_RX_MAX_CNT0
);

309 
	`„_ªg_w32
(
rög
->
rx_ˇlc_idx
, 
FE_REG_RX_CALC_IDX0
);

310 
	`„_ªg_w32
(
FE_PST_DRX_IDX0
, 
FE_REG_PDMA_RST_CFG
);

314 
no_rx_mem
:

315  -
ENOMEM
;

316 
	}
}

318 
	$„_txd_unm≠
(
devi˚
 *
dev
, 
„_tx_buf
 *
tx_buf
)

320 i‡(
	`dma_unm≠_Àn
(
tx_buf
, 
dma_Àn0
))

321 
	`dma_unm≠_∑ge
(
dev
,

322 
	`dma_unm≠_addr
(
tx_buf
, 
dma_addr0
),

323 
	`dma_unm≠_Àn
(
tx_buf
, 
dma_Àn0
),

324 
DMA_TO_DEVICE
);

326 i‡(
	`dma_unm≠_Àn
(
tx_buf
, 
dma_Àn1
))

327 
	`dma_unm≠_∑ge
(
dev
,

328 
	`dma_unm≠_addr
(
tx_buf
, 
dma_addr1
),

329 
	`dma_unm≠_Àn
(
tx_buf
, 
dma_Àn1
),

330 
DMA_TO_DEVICE
);

332 
	`dma_unm≠_Àn_£t
(
tx_buf
, 
dma_addr0
, 0);

333 
	`dma_unm≠_Àn_£t
(
tx_buf
, 
dma_addr1
, 0);

334 i‡(
tx_buf
->
skb
 && (tx_buf->skb !(
sk_buff
 *)
DMA_DUMMY_DESC
))

335 
	`dev_k‰ì_skb_™y
(
tx_buf
->
skb
);

336 
tx_buf
->
skb
 = 
NULL
;

337 
	}
}

339 
	$„_˛ón_tx
(
„_¥iv
 *
¥iv
)

341 
i
;

342 
devi˚
 *
dev
 = &
¥iv
->
√tdev
->dev;

343 
„_tx_rög
 *
rög
 = &
¥iv
->
tx_rög
;

345 i‡(
rög
->
tx_buf
) {

346 
i
 = 0; i < 
rög
->
tx_rög_size
; i++)

347 
	`„_txd_unm≠
(
dev
, &
rög
->
tx_buf
[
i
]);

348 
	`k‰ì
(
rög
->
tx_buf
);

349 
rög
->
tx_buf
 = 
NULL
;

352 i‡(
rög
->
tx_dma
) {

353 
	`dma_‰ì_cohîít
(
dev
,

354 
rög
->
tx_rög_size
 * (*rög->
tx_dma
),

355 
rög
->
tx_dma
,

356 
rög
->
tx_phys
);

357 
rög
->
tx_dma
 = 
NULL
;

360 
	`√tdev_ª£t_queue
(
¥iv
->
√tdev
);

361 
	}
}

363 
	$„_Æloc_tx
(
„_¥iv
 *
¥iv
)

365 
i
;

366 
„_tx_rög
 *
rög
 = &
¥iv
->
tx_rög
;

368 
rög
->
tx_‰ì_idx
 = 0;

369 
rög
->
tx_√xt_idx
 = 0;

370 
rög
->
tx_thªsh
 = 
	`max
((Ïög->
tx_rög_size
 >> 2,

371 
MAX_SKB_FRAGS
);

373 
rög
->
tx_buf
 = 
	`kˇŒoc
‘ög->
tx_rög_size
, (*ring->tx_buf),

374 
GFP_KERNEL
);

375 i‡(!
rög
->
tx_buf
)

376 
no_tx_mem
;

378 
rög
->
tx_dma
 = 
	`dma_Æloc_cohîít
(&
¥iv
->
√tdev
->
dev
,

379 
rög
->
tx_rög_size
 * (*rög->
tx_dma
),

380 &
rög
->
tx_phys
,

381 
GFP_ATOMIC
 | 
__GFP_ZERO
);

382 i‡(!
rög
->
tx_dma
)

383 
no_tx_mem
;

385 
i
 = 0; i < 
rög
->
tx_rög_size
; i++) {

386 i‡(
¥iv
->
soc
->
tx_dma
)

387 
¥iv
->
soc
->
	`tx_dma
(&
rög
->
tx_dma
[
i
]);

388 
rög
->
tx_dma
[
i
].
txd2
 = 
TX_DMA_DESP2_DEF
;

393 
	`wmb
();

395 
	`„_ªg_w32
(
rög
->
tx_phys
, 
FE_REG_TX_BASE_PTR0
);

396 
	`„_ªg_w32
(
rög
->
tx_rög_size
, 
FE_REG_TX_MAX_CNT0
);

397 
	`„_ªg_w32
(0, 
FE_REG_TX_CTX_IDX0
);

398 
	`„_ªg_w32
(
FE_PST_DTX_IDX0
, 
FE_REG_PDMA_RST_CFG
);

402 
no_tx_mem
:

403  -
ENOMEM
;

404 
	}
}

406 
	$„_öô_dma
(
„_¥iv
 *
¥iv
)

408 
îr
;

410 
îr
 = 
	`„_Æloc_tx
(
¥iv
);

411 i‡(
îr
)

412  
îr
;

414 
îr
 = 
	`„_Æloc_rx
(
¥iv
);

415 i‡(
îr
)

416  
îr
;

419 
	}
}

421 
	$„_‰ì_dma
(
„_¥iv
 *
¥iv
)

423 
	`„_˛ón_tx
(
¥iv
);

424 
	`„_˛ón_rx
(
¥iv
);

425 
	}
}

427 
	$„_°©s_upd©e
(
„_¥iv
 *
¥iv
)

429 
„_hw_°©s
 *
hw°©s
 = 
¥iv
->
hw_°©s
;

430 
ba£
 = 
„_ªg_èbÀ
[
FE_REG_FE_COUNTER_BASE
];

431 
u64
 
°©s
;

433 
	`u64_°©s_upd©e_begö
(&
hw°©s
->
syn˝
);

435 i‡(
	`IS_ENABLED
(
CONFIG_SOC_MT7621
)) {

436 
hw°©s
->
rx_byãs
 +
	`„_r32
(
ba£
);

437 
°©s
 = 
	`„_r32
(
ba£
 + 0x04);

438 i‡(
°©s
)

439 
hw°©s
->
rx_byãs
 +(
°©s
 << 32);

440 
hw°©s
->
rx_∑ckës
 +
	`„_r32
(
ba£
 + 0x08);

441 
hw°©s
->
rx_ovîÊow
 +
	`„_r32
(
ba£
 + 0x10);

442 
hw°©s
->
rx_fcs_îr‹s
 +
	`„_r32
(
ba£
 + 0x14);

443 
hw°©s
->
rx_sh‹t_îr‹s
 +
	`„_r32
(
ba£
 + 0x18);

444 
hw°©s
->
rx_l⁄g_îr‹s
 +
	`„_r32
(
ba£
 + 0x1c);

445 
hw°©s
->
rx_checksum_îr‹s
 +
	`„_r32
(
ba£
 + 0x20);

446 
hw°©s
->
rx_Êow_c⁄åﬁ_∑ckës
 +
	`„_r32
(
ba£
 + 0x24);

447 
hw°©s
->
tx_skù
 +
	`„_r32
(
ba£
 + 0x28);

448 
hw°©s
->
tx_cﬁlisi⁄s
 +
	`„_r32
(
ba£
 + 0x2c);

449 
hw°©s
->
tx_byãs
 +
	`„_r32
(
ba£
 + 0x30);

450 
°©s
 = 
	`„_r32
(
ba£
 + 0x34);

451 i‡(
°©s
)

452 
hw°©s
->
tx_byãs
 +(
°©s
 << 32);

453 
hw°©s
->
tx_∑ckës
 +
	`„_r32
(
ba£
 + 0x38);

455 
hw°©s
->
tx_byãs
 +
	`„_r32
(
ba£
);

456 
hw°©s
->
tx_∑ckës
 +
	`„_r32
(
ba£
 + 0x04);

457 
hw°©s
->
tx_skù
 +
	`„_r32
(
ba£
 + 0x08);

458 
hw°©s
->
tx_cﬁlisi⁄s
 +
	`„_r32
(
ba£
 + 0x0c);

459 
hw°©s
->
rx_byãs
 +
	`„_r32
(
ba£
 + 0x20);

460 
hw°©s
->
rx_∑ckës
 +
	`„_r32
(
ba£
 + 0x24);

461 
hw°©s
->
rx_ovîÊow
 +
	`„_r32
(
ba£
 + 0x28);

462 
hw°©s
->
rx_fcs_îr‹s
 +
	`„_r32
(
ba£
 + 0x2c);

463 
hw°©s
->
rx_sh‹t_îr‹s
 +
	`„_r32
(
ba£
 + 0x30);

464 
hw°©s
->
rx_l⁄g_îr‹s
 +
	`„_r32
(
ba£
 + 0x34);

465 
hw°©s
->
rx_checksum_îr‹s
 +
	`„_r32
(
ba£
 + 0x38);

466 
hw°©s
->
rx_Êow_c⁄åﬁ_∑ckës
 +
	`„_r32
(
ba£
 + 0x3c);

469 
	`u64_°©s_upd©e_íd
(&
hw°©s
->
syn˝
);

470 
	}
}

472 
	$„_gë_°©s64
(
√t_devi˚
 *
dev
,

473 
π∆_lök_°©s64
 *
°‹age
)

475 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

476 
„_hw_°©s
 *
hw°©s
 = 
¥iv
->
hw_°©s
;

477 
ba£
 = 
„_ªg_èbÀ
[
FE_REG_FE_COUNTER_BASE
];

478 
°¨t
;

480 i‡(!
ba£
) {

481 
	`√tdev_°©s_to_°©s64
(
°‹age
, &
dev
->
°©s
);

485 i‡(
	`√tif_ru¬ög
(
dev
Ë&& 
	`√tif_devi˚_¥e£¡
(dev)) {

486 i‡(
	`•ö_åylock_bh
(&
hw°©s
->
°©s_lock
)) {

487 
	`„_°©s_upd©e
(
¥iv
);

488 
	`•ö_u∆ock_bh
(&
hw°©s
->
°©s_lock
);

493 
°¨t
 = 
	`u64_°©s_„tch_begö_úq
(&
hw°©s
->
syn˝
);

494 
°‹age
->
rx_∑ckës
 = 
hw°©s
->rx_packets;

495 
°‹age
->
tx_∑ckës
 = 
hw°©s
->tx_packets;

496 
°‹age
->
rx_byãs
 = 
hw°©s
->rx_bytes;

497 
°‹age
->
tx_byãs
 = 
hw°©s
->tx_bytes;

498 
°‹age
->
cﬁlisi⁄s
 = 
hw°©s
->
tx_cﬁlisi⁄s
;

499 
°‹age
->
rx_Àngth_îr‹s
 = 
hw°©s
->
rx_sh‹t_îr‹s
 +

500 
hw°©s
->
rx_l⁄g_îr‹s
;

501 
°‹age
->
rx_ovî_îr‹s
 = 
hw°©s
->
rx_ovîÊow
;

502 
°‹age
->
rx_¸c_îr‹s
 = 
hw°©s
->
rx_fcs_îr‹s
;

503 
°‹age
->
rx_îr‹s
 = 
hw°©s
->
rx_checksum_îr‹s
;

504 
°‹age
->
tx_ab‹ãd_îr‹s
 = 
hw°©s
->
tx_skù
;

505 } 
	`u64_°©s_„tch_ªåy_úq
(&
hw°©s
->
syn˝
, 
°¨t
));

507 
°‹age
->
tx_îr‹s
 = 
¥iv
->
√tdev
->
°©s
.tx_errors;

508 
°‹age
->
rx_dr›≥d
 = 
¥iv
->
√tdev
->
°©s
.rx_dropped;

509 
°‹age
->
tx_dr›≥d
 = 
¥iv
->
√tdev
->
°©s
.tx_dropped;

510 
	}
}

512 
	$„_vœn_rx_add_vid
(
√t_devi˚
 *
dev
,

513 
__be16
 
¥Ÿo
, 
u16
 
vid
)

515 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

516 
u32
 
idx
 = (
vid
 & 0xf);

517 
u32
 
vœn_cfg
;

519 i‡(!((
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
]) &&

520 (
dev
->
„©uªs
 & 
NETIF_F_HW_VLAN_CTAG_TX
)))

523 i‡(
	`ã°_bô
(
idx
, &
¥iv
->
vœn_m≠
)) {

524 
	`√tdev_w¨n
(
dev
, "disableÅx vlan offload\n");

525 
dev
->
w™ãd_„©uªs
 &~
NETIF_F_HW_VLAN_CTAG_TX
;

526 
	`√tdev_upd©e_„©uªs
(
dev
);

528 
vœn_cfg
 = 
	`„_r32
(
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
] +

529 ((
idx
 >> 1) << 2));

530 i‡(
idx
 & 0x1) {

531 
vœn_cfg
 &= 0xffff;

532 
vœn_cfg
 |(
vid
 << 16);

534 
vœn_cfg
 &= 0xffff0000;

535 
vœn_cfg
 |
vid
;

537 
	`„_w32
(
vœn_cfg
, 
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
] +

538 ((
idx
 >> 1) << 2));

539 
	`£t_bô
(
idx
, &
¥iv
->
vœn_m≠
);

543 
	}
}

545 
	$„_vœn_rx_kûl_vid
(
√t_devi˚
 *
dev
,

546 
__be16
 
¥Ÿo
, 
u16
 
vid
)

548 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

549 
u32
 
idx
 = (
vid
 & 0xf);

551 i‡(!((
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
]) &&

552 (
dev
->
„©uªs
 & 
NETIF_F_HW_VLAN_CTAG_TX
)))

555 
	`˛ór_bô
(
idx
, &
¥iv
->
vœn_m≠
);

558 
	}
}

560 
ölöe
 
u32
 
	$„_em±y_txd
(
„_tx_rög
 *
rög
)

562 
	`b¨rõr
();

563  (
u32
)(
rög
->
tx_rög_size
 -

564 ((
rög
->
tx_√xt_idx
 -Ñög->
tx_‰ì_idx
) &

565 (
rög
->
tx_rög_size
 - 1)));

566 
	}
}

568 
	s„_m≠_°©e
 {

569 
devi˚
 *
	mdev
;

570 
„_tx_dma
 
	mtxd
;

571 
u32
 
	mdef_txd4
;

572 
	mrög_idx
;

573 
	mi
;

576 
	$„_tx_dma_wrôe_desc
(
„_tx_rög
 *
rög
, 
„_m≠_°©e
 *
°
)

578 
	`„_£t_txd
(&
°
->
txd
, &
rög
->
tx_dma
[°->
rög_idx
]);

579 
	`mem£t
(&
°
->
txd
, 0, (st->txd));

580 
°
->
txd
.
txd4
 = st->
def_txd4
;

581 
°
->
rög_idx
 = 
	`NEXT_TX_DESP_IDX
(st->ring_idx);

582 
	}
}

584 
	$__„_tx_dma_m≠_∑ge
(
„_tx_rög
 *
rög
, 
„_m≠_°©e
 *
°
,

585 
∑ge
 *∑ge, 
size_t
 
off£t
, size_à
size
)

587 
devi˚
 *
dev
 = 
°
->dev;

588 
„_tx_buf
 *
tx_buf
;

589 
dma_addr_t
 
m≠≥d_addr
;

591 
m≠≥d_addr
 = 
	`dma_m≠_∑ge
(
dev
, 
∑ge
, 
off£t
, 
size
, 
DMA_TO_DEVICE
);

592 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
dev
, 
m≠≥d_addr
)))

593  -
EIO
;

595 i‡(
°
->
i
 && !(st->i & 1))

596 
	`„_tx_dma_wrôe_desc
(
rög
, 
°
);

598 
tx_buf
 = &
rög
->tx_buf[
°
->
rög_idx
];

599 i‡(
°
->
i
 & 1) {

600 
°
->
txd
.
txd3
 = 
m≠≥d_addr
;

601 
°
->
txd
.
txd2
 |
	`TX_DMA_PLEN1
(
size
);

602 
	`dma_unm≠_addr_£t
(
tx_buf
, 
dma_addr1
, 
m≠≥d_addr
);

603 
	`dma_unm≠_Àn_£t
(
tx_buf
, 
dma_Àn1
, 
size
);

605 
tx_buf
->
skb
 = (
sk_buff
 *)
DMA_DUMMY_DESC
;

606 
°
->
txd
.
txd1
 = 
m≠≥d_addr
;

607 
°
->
txd
.
txd2
 = 
	`TX_DMA_PLEN0
(
size
);

608 
	`dma_unm≠_addr_£t
(
tx_buf
, 
dma_addr0
, 
m≠≥d_addr
);

609 
	`dma_unm≠_Àn_£t
(
tx_buf
, 
dma_Àn0
, 
size
);

611 
°
->
i
++;

614 
	}
}

616 
	$„_tx_dma_m≠_∑ge
(
„_tx_rög
 *
rög
, 
„_m≠_°©e
 *
°
,

617 
∑ge
 *∑ge, 
size_t
 
off£t
, size_à
size
)

619 
cur_size
;

620 
ªt
;

622 
size
 > 0) {

623 
cur_size
 = 
	`mö_t
(
size_t
, 
size
, 
TX_DMA_BUF_LEN
);

625 
ªt
 = 
	`__„_tx_dma_m≠_∑ge
(
rög
, 
°
, 
∑ge
, 
off£t
, 
cur_size
);

626 i‡(
ªt
)

627  
ªt
;

629 
size
 -
cur_size
;

630 
off£t
 +
cur_size
;

634 
	}
}

636 
	$„_tx_dma_m≠_skb
(
„_tx_rög
 *
rög
, 
„_m≠_°©e
 *
°
,

637 
sk_buff
 *
skb
)

639 
∑ge
 *∑gê
	`vút_to_∑ge
(
skb
->
d©a
);

640 
size_t
 
off£t
 = 
	`off£t_ö_∑ge
(
skb
->
d©a
);

641 
size_t
 
size
 = 
	`skb_hódÀn
(
skb
);

643  
	`„_tx_dma_m≠_∑ge
(
rög
, 
°
, 
∑ge
, 
off£t
, 
size
);

644 
	}
}

646 
ölöe
 
sk_buff
 *

647 
	$„_√xt_‰ag
(
sk_buff
 *
hód
, sk_buf‡*
skb
)

649 i‡(
skb
 !
hód
)

650  
skb
->
√xt
;

652 i‡(
	`skb_has_‰ag_li°
(
skb
))

653  
	`skb_shöfo
(
skb
)->
‰ag_li°
;

655  
NULL
;

656 
	}
}

659 
	$„_tx_m≠_dma
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

660 
tx_num
, 
„_tx_rög
 *
rög
)

662 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

663 
„_m≠_°©e
 
°
 = {

664 .
dev
 = &dev->dev,

665 .
rög_idx
 = 
rög
->
tx_√xt_idx
,

667 
sk_buff
 *
hód
 = 
skb
;

668 
„_tx_buf
 *
tx_buf
;

669 
ƒ_‰ags
;

670 
i
, 
j
;

673 i‡(
¥iv
->
soc
->
tx_dma
)

674 
¥iv
->
soc
->
	`tx_dma
(&
°
.
txd
);

676 
°
.
txd
.
txd4
 = 
TX_DMA_DESP4_DEF
;

677 
°
.
def_txd4
 = st.
txd
.
txd4
;

680 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
)

681 
°
.
txd
.
txd4
 |
TX_DMA_CHKSUM
;

684 i‡(
	`skb_vœn_èg_¥e£¡
(
skb
)) {

685 
u16
 
èg
 = 
	`skb_vœn_èg_gë
(
skb
);

687 i‡(
	`IS_ENABLED
(
CONFIG_SOC_MT7621
))

688 
°
.
txd
.
txd4
 |
TX_DMA_INS_VLAN_MT7621
 | 
èg
;

690 
°
.
txd
.
txd4
 |
TX_DMA_INS_VLAN
 |

691 ((
èg
 >> 
VLAN_PRIO_SHIFT
) << 4) |

692 (
èg
 & 0xF);

696 i‡(
	`skb_is_gso
(
skb
)) {

697 i‡(
	`skb_cow_hód
(
skb
, 0)) {

698 
	`√tif_w¨n
(
¥iv
, 
tx_îr
, 
dev
,

700 
îr_out
;

702 i‡(
	`skb_shöfo
(
skb
)->
gso_ty≥
 &

703 (
SKB_GSO_TCPV4
 | 
SKB_GSO_TCPV6
)) {

704 
°
.
txd
.
txd4
 |
TX_DMA_TSO
;

705 
	`t˝_hdr
(
skb
)->
check
 = 
	`ht⁄s
(
	`skb_shöfo
(skb)->
gso_size
);

709 
√xt_‰ag
:

710 i‡(
	`skb_hódÀn
(
skb
Ë&& 
	`„_tx_dma_m≠_skb
(
rög
, &
°
, skb))

711 
îr_dma
;

714 
ƒ_‰ags
 = 
	`skb_shöfo
(
skb
)->nr_frags;

715 
i
 = 0; i < 
ƒ_‰ags
; i++) {

716 
skb_‰ag_°ru˘
 *
‰ag
;

718 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
i
];

719 i‡(
	`„_tx_dma_m≠_∑ge
(
rög
, &
°
, 
	`skb_‰ag_∑ge
(
‰ag
),

720 
‰ag
->
∑ge_off£t
, 
	`skb_‰ag_size
(frag)))

721 
îr_dma
;

724 
skb
 = 
	`„_√xt_‰ag
(
hód
, skb);

725 i‡(
skb
)

726 
√xt_‰ag
;

729 i‡(
°
.
i
 & 0x1)

730 
°
.
txd
.
txd2
 |
TX_DMA_LS0
;

732 
°
.
txd
.
txd2
 |
TX_DMA_LS1
;

735 
tx_buf
 = &
rög
->tx_buf[
°
.
rög_idx
];

736 
tx_buf
->
skb
 = 
hód
;

738 
	`√tdev_£¡_queue
(
dev
, 
hód
->
Àn
);

739 
	`skb_tx_time°amp
(
hód
);

741 
	`„_tx_dma_wrôe_desc
(
rög
, &
°
);

742 
rög
->
tx_√xt_idx
 = 
°
.
rög_idx
;

747 
	`wmb
();

748 i‡(
	`u∆ikñy
(
	`„_em±y_txd
(
rög
Ë<rög->
tx_thªsh
)) {

749 
	`√tif_°›_queue
(
dev
);

750 
	`smp_mb
();

751 i‡(
	`u∆ikñy
(
	`„_em±y_txd
(
rög
Ë>Ñög->
tx_thªsh
))

752 
	`√tif_wake_queue
(
dev
);

755 i‡(
	`√tif_xmô_°›≥d
(
	`√tdev_gë_tx_queue
(
dev
, 0)Ë|| !
hód
->
xmô_m‹e
)

756 
	`„_ªg_w32
(
rög
->
tx_√xt_idx
, 
FE_REG_TX_CTX_IDX0
);

760 
îr_dma
:

761 
j
 = 
rög
->
tx_√xt_idx
;

762 
i
 = 0; i < 
tx_num
; i++) {

764 
	`„_txd_unm≠
(&
dev
->dev, &
rög
->
tx_buf
[
j
]);

765 
rög
->
tx_dma
[
j
].
txd2
 = 
TX_DMA_DESP2_DEF
;

767 
j
 = 
	`NEXT_TX_DESP_IDX
(j);

772 
	`wmb
();

774 
îr_out
:

776 
	}
}

778 
ölöe
 
	$„_skb_∑dto
(
sk_buff
 *
skb
, 
„_¥iv
 *
¥iv
)

780 
Àn
;

781 
ªt
;

783 
ªt
 = 0;

784 i‡(
	`u∆ikñy
(
skb
->
Àn
 < 
VLAN_ETH_ZLEN
)) {

785 i‡((
¥iv
->
Êags
 & 
FE_FLAG_PADDING_64B
) &&

786 !(
¥iv
->
Êags
 & 
FE_FLAG_PADDING_BUG
))

787  
ªt
;

789 i‡(
	`skb_vœn_èg_¥e£¡
(
skb
))

790 
Àn
 = 
ETH_ZLEN
;

791 i‡(
skb
->
¥Ÿocﬁ
 =
	`˝u_to_be16
(
ETH_P_8021Q
))

792 
Àn
 = 
VLAN_ETH_ZLEN
;

793 i‡(!(
¥iv
->
Êags
 & 
FE_FLAG_PADDING_64B
))

794 
Àn
 = 
ETH_ZLEN
;

796  
ªt
;

798 i‡(
skb
->
Àn
 <Üen) {

799 
ªt
 = 
	`skb_∑d
(
skb
, 
Àn
 - skb->len);

800 i‡(
ªt
 < 0)

801  
ªt
;

802 
skb
->
Àn
 =Üen;

803 
	`skb_£t_èû_poöãr
(
skb
, 
Àn
);

807  
ªt
;

808 
	}
}

810 
ölöe
 
	$„_ˇl_txd_ªq
(
sk_buff
 *
skb
)

812 
sk_buff
 *
hód
 = 
skb
;

813 
i
, 
n‰ags
 = 0;

814 
skb_‰ag_°ru˘
 *
‰ag
;

816 
√xt_‰ag
:

817 
n‰ags
++;

818 i‡(
	`skb_is_gso
(
skb
)) {

819 
i
 = 0; i < 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
; i++) {

820 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
i
];

821 
n‰ags
 +
	`DIV_ROUND_UP
(
‰ag
->
size
, 
TX_DMA_BUF_LEN
);

824 
n‰ags
 +
	`skb_shöfo
(
skb
)->
ƒ_‰ags
;

827 
skb
 = 
	`„_√xt_‰ag
(
hód
, skb);

828 i‡(
skb
)

829 
√xt_‰ag
;

831  
	`DIV_ROUND_UP
(
n‰ags
, 2);

832 
	}
}

834 
	$„_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

836 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

837 
„_tx_rög
 *
rög
 = &
¥iv
->
tx_rög
;

838 
√t_devi˚_°©s
 *
°©s
 = &
dev
->stats;

839 
tx_num
;

840 
Àn
 = 
skb
->len;

842 i‡(
	`„_skb_∑dto
(
skb
, 
¥iv
)) {

843 
	`√tif_w¨n
(
¥iv
, 
tx_îr
, 
dev
, "txÖadding failed!\n");

844  
NETDEV_TX_OK
;

847 
tx_num
 = 
	`„_ˇl_txd_ªq
(
skb
);

848 i‡(
	`u∆ikñy
(
	`„_em±y_txd
(
rög
Ë<
tx_num
)) {

849 
	`√tif_°›_queue
(
dev
);

850 
	`√tif_îr
(
¥iv
, 
tx_queued
, 
dev
,

852  
NETDEV_TX_BUSY
;

855 i‡(
	`„_tx_m≠_dma
(
skb
, 
dev
, 
tx_num
, 
rög
) < 0) {

856 
°©s
->
tx_dr›≥d
++;

858 
°©s
->
tx_∑ckës
++;

859 
°©s
->
tx_byãs
 +
Àn
;

862  
NETDEV_TX_OK
;

863 
	}
}

865 
	$„_pﬁl_rx
(
«pi_°ru˘
 *
«pi
, 
budgë
,

866 
„_¥iv
 *
¥iv
, 
u32
 
rx_öå
)

868 
√t_devi˚
 *
√tdev
 = 
¥iv
->netdev;

869 
√t_devi˚_°©s
 *
°©s
 = &
√tdev
->stats;

870 
„_soc_d©a
 *
soc
 = 
¥iv
->soc;

871 
„_rx_rög
 *
rög
 = &
¥iv
->
rx_rög
;

872 
idx
 = 
rög
->
rx_ˇlc_idx
;

873 
u32
 
checksum_bô
;

874 
sk_buff
 *
skb
;

875 
u8
 *
d©a
, *
√w_d©a
;

876 
„_rx_dma
 *
rxd
, 
åxd
;

877 
d⁄e
 = 0, 
∑d
;

879 i‡(
√tdev
->
„©uªs
 & 
NETIF_F_RXCSUM
)

880 
checksum_bô
 = 
soc
->checksum_bit;

882 
checksum_bô
 = 0;

884 i‡(
¥iv
->
Êags
 & 
FE_FLAG_RX_2B_OFFSET
)

885 
∑d
 = 0;

887 
∑d
 = 
NET_IP_ALIGN
;

889 
d⁄e
 < 
budgë
) {

890 
pkéí
;

891 
dma_addr_t
 
dma_addr
;

893 
idx
 = 
	`NEXT_RX_DESP_IDX
(idx);

894 
rxd
 = &
rög
->
rx_dma
[
idx
];

895 
d©a
 = 
rög
->
rx_d©a
[
idx
];

897 
	`„_gë_rxd
(&
åxd
, 
rxd
);

898 i‡(!(
åxd
.
rxd2
 & 
RX_DMA_DONE
))

902 
√w_d©a
 = 
	`∑ge_‰ag_Æloc
(&
rög
->
‰ag_ˇche
,Ñög->
‰ag_size
,

903 
GFP_ATOMIC
);

904 i‡(
	`u∆ikñy
(!
√w_d©a
)) {

905 
°©s
->
rx_dr›≥d
++;

906 
ªÀa£_desc
;

908 
dma_addr
 = 
	`dma_m≠_sögÀ
(&
√tdev
->
dev
,

909 
√w_d©a
 + 
NET_SKB_PAD
 + 
∑d
,

910 
rög
->
rx_buf_size
,

911 
DMA_FROM_DEVICE
);

912 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(&
√tdev
->
dev
, 
dma_addr
))) {

913 
	`skb_‰ì_‰ag
(
√w_d©a
);

914 
ªÀa£_desc
;

918 
skb
 = 
	`buûd_skb
(
d©a
, 
rög
->
‰ag_size
);

919 i‡(
	`u∆ikñy
(!
skb
)) {

920 
	`skb_‰ì_‰ag
(
√w_d©a
);

921 
ªÀa£_desc
;

923 
	`skb_ª£rve
(
skb
, 
NET_SKB_PAD
 + 
NET_IP_ALIGN
);

925 
	`dma_unm≠_sögÀ
(&
√tdev
->
dev
, 
åxd
.
rxd1
,

926 
rög
->
rx_buf_size
, 
DMA_FROM_DEVICE
);

927 
pkéí
 = 
	`RX_DMA_GET_PLEN0
(
åxd
.
rxd2
);

928 
skb
->
dev
 = 
√tdev
;

929 
	`skb_put
(
skb
, 
pkéí
);

930 i‡(
åxd
.
rxd4
 & 
checksum_bô
)

931 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

933 
	`skb_checksum_n⁄e_as£π
(
skb
);

934 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
√tdev
);

936 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


937 i‡(
	`mtk_ofÊﬂd_check_rx
(
¥iv
, 
skb
, 
åxd
.
rxd4
) == 0) {

939 
°©s
->
rx_∑ckës
++;

940 
°©s
->
rx_byãs
 +
pkéí
;

942 
	`«pi_gro_ª˚ive
(
«pi
, 
skb
);

943 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


945 
	`dev_k‰ì_skb
(
skb
);

948 
rög
->
rx_d©a
[
idx
] = 
√w_d©a
;

949 
rxd
->
rxd1
 = ()
dma_addr
;

951 
ªÀa£_desc
:

952 i‡(
¥iv
->
Êags
 & 
FE_FLAG_RX_SG_DMA
)

953 
rxd
->
rxd2
 = 
	`RX_DMA_PLEN0
(
rög
->
rx_buf_size
);

955 
rxd
->
rxd2
 = 
RX_DMA_LSO
;

957 
rög
->
rx_ˇlc_idx
 = 
idx
;

961 
	`wmb
();

962 
	`„_ªg_w32
(
rög
->
rx_ˇlc_idx
, 
FE_REG_RX_CALC_IDX0
);

963 
d⁄e
++;

966 i‡(
d⁄e
 < 
budgë
)

967 
	`„_ªg_w32
(
rx_öå
, 
FE_REG_FE_INT_STATUS
);

969  
d⁄e
;

970 
	}
}

972 
	$„_pﬁl_tx
(
„_¥iv
 *
¥iv
, 
budgë
, 
u32
 
tx_öå
,

973 *
tx_agaö
)

975 
√t_devi˚
 *
√tdev
 = 
¥iv
->netdev;

976 
devi˚
 *
dev
 = &
√tdev
->dev;

977 
byãs_com∂
 = 0;

978 
sk_buff
 *
skb
;

979 
„_tx_buf
 *
tx_buf
;

980 
d⁄e
 = 0;

981 
u32
 
idx
, 
hwidx
;

982 
„_tx_rög
 *
rög
 = &
¥iv
->
tx_rög
;

984 
idx
 = 
rög
->
tx_‰ì_idx
;

985 
hwidx
 = 
	`„_ªg_r32
(
FE_REG_TX_DTX_IDX0
);

987 (
idx
 !
hwidx
Ë&& 
budgë
) {

988 
tx_buf
 = &
rög
->tx_buf[
idx
];

989 
skb
 = 
tx_buf
->skb;

991 i‡(!
skb
)

994 i‡(
skb
 !(
sk_buff
 *)
DMA_DUMMY_DESC
) {

995 
byãs_com∂
 +
skb
->
Àn
;

996 
d⁄e
++;

997 
budgë
--;

999 
	`„_txd_unm≠
(
dev
, 
tx_buf
);

1000 
idx
 = 
	`NEXT_TX_DESP_IDX
(idx);

1002 
rög
->
tx_‰ì_idx
 = 
idx
;

1004 i‡(
idx
 =
hwidx
) {

1006 
hwidx
 = 
	`„_ªg_r32
(
FE_REG_TX_DTX_IDX0
);

1007 i‡(
idx
 =
hwidx
)

1008 
	`„_ªg_w32
(
tx_öå
, 
FE_REG_FE_INT_STATUS
);

1010 *
tx_agaö
 = 1;

1012 *
tx_agaö
 = 1;

1015 i‡(
d⁄e
) {

1016 
	`√tdev_com∂ëed_queue
(
√tdev
, 
d⁄e
, 
byãs_com∂
);

1017 
	`smp_mb
();

1018 i‡(
	`u∆ikñy
(
	`√tif_queue_°›≥d
(
√tdev
) &&

1019 (
	`„_em±y_txd
(
rög
Ë>Ñög->
tx_thªsh
)))

1020 
	`√tif_wake_queue
(
√tdev
);

1023  
d⁄e
;

1024 
	}
}

1026 
	$„_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

1028 
„_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
«pi
, „_¥iv, 
rx_«pi
);

1029 
„_hw_°©s
 *
hw°©
 = 
¥iv
->
hw_°©s
;

1030 
tx_d⁄e
, 
rx_d⁄e
, 
tx_agaö
;

1031 
u32
 
°©us
, 
„_°©us
, 
°©us_ªg
, 
mask
;

1032 
u32
 
tx_öå
, 
rx_öå
, 
°©us_öå
;

1034 
°©us
 = 
	`„_ªg_r32
(
FE_REG_FE_INT_STATUS
);

1035 
„_°©us
 = 
°©us
;

1036 
tx_öå
 = 
¥iv
->
soc
->
tx_öt
;

1037 
rx_öå
 = 
¥iv
->
soc
->
rx_öt
;

1038 
°©us_öå
 = 
¥iv
->
soc
->
°©us_öt
;

1039 
tx_d⁄e
 = 0;

1040 
rx_d⁄e
 = 0;

1041 
tx_agaö
 = 0;

1043 i‡(
„_ªg_èbÀ
[
FE_REG_FE_INT_STATUS2
]) {

1044 
„_°©us
 = 
	`„_ªg_r32
(
FE_REG_FE_INT_STATUS2
);

1045 
°©us_ªg
 = 
FE_REG_FE_INT_STATUS2
;

1047 
°©us_ªg
 = 
FE_REG_FE_INT_STATUS
;

1050 i‡(
°©us
 & 
tx_öå
)

1051 
tx_d⁄e
 = 
	`„_pﬁl_tx
(
¥iv
, 
budgë
, 
tx_öå
, &
tx_agaö
);

1053 i‡(
°©us
 & 
rx_öå
)

1054 
rx_d⁄e
 = 
	`„_pﬁl_rx
(
«pi
, 
budgë
, 
¥iv
, 
rx_öå
);

1056 i‡(
	`u∆ikñy
(
„_°©us
 & 
°©us_öå
)) {

1057 i‡(
hw°©
 && 
	`•ö_åylock
(&hw°©->
°©s_lock
)) {

1058 
	`„_°©s_upd©e
(
¥iv
);

1059 
	`•ö_u∆ock
(&
hw°©
->
°©s_lock
);

1061 
	`„_ªg_w32
(
°©us_öå
, 
°©us_ªg
);

1064 i‡(
	`u∆ikñy
(
	`√tif_msg_öå
(
¥iv
))) {

1065 
mask
 = 
	`„_ªg_r32
(
FE_REG_FE_INT_ENABLE
);

1066 
	`√tdev_öfo
(
¥iv
->
√tdev
,

1068 
tx_d⁄e
, 
rx_d⁄e
, 
°©us
, 
mask
);

1071 i‡(!
tx_agaö
 && (
rx_d⁄e
 < 
budgë
)) {

1072 
°©us
 = 
	`„_ªg_r32
(
FE_REG_FE_INT_STATUS
);

1073 i‡(
°©us
 & (
tx_öå
 | 
rx_öå
)) {

1075 
rx_d⁄e
 = 
budgë
;

1076 
pﬁl_agaö
;

1079 
	`«pi_com∂ëe_d⁄e
(
«pi
, 
rx_d⁄e
);

1080 
	`„_öt_íabÀ
(
tx_öå
 | 
rx_öå
);

1082 
rx_d⁄e
 = 
budgë
;

1085 
pﬁl_agaö
:

1086  
rx_d⁄e
;

1087 
	}
}

1089 
	$„_tx_timeout
(
√t_devi˚
 *
dev
)

1091 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1092 
„_tx_rög
 *
rög
 = &
¥iv
->
tx_rög
;

1094 
¥iv
->
√tdev
->
°©s
.
tx_îr‹s
++;

1095 
	`√tif_îr
(
¥iv
, 
tx_îr
, 
dev
,

1097 
	`√tif_öfo
(
¥iv
, 
drv
, 
dev
, "dma_cfg:%08x\n",

1098 
	`„_ªg_r32
(
FE_REG_PDMA_GLO_CFG
));

1099 
	`√tif_öfo
(
¥iv
, 
drv
, 
dev
, "tx_ring=%d, "

1101 0, 
	`„_ªg_r32
(
FE_REG_TX_BASE_PTR0
),

1102 
	`„_ªg_r32
(
FE_REG_TX_MAX_CNT0
),

1103 
	`„_ªg_r32
(
FE_REG_TX_CTX_IDX0
),

1104 
	`„_ªg_r32
(
FE_REG_TX_DTX_IDX0
),

1105 
rög
->
tx_‰ì_idx
,

1106 
rög
->
tx_√xt_idx
);

1107 
	`√tif_öfo
(
¥iv
, 
drv
, 
dev
,

1109 0, 
	`„_ªg_r32
(
FE_REG_RX_BASE_PTR0
),

1110 
	`„_ªg_r32
(
FE_REG_RX_MAX_CNT0
),

1111 
	`„_ªg_r32
(
FE_REG_RX_CALC_IDX0
),

1112 
	`„_ªg_r32
(
FE_REG_RX_DRX_IDX0
));

1114 i‡(!
	`ã°_™d_£t_bô
(
FE_FLAG_RESET_PENDING
, 
¥iv
->
≥ndög_Êags
))

1115 
	`scheduÀ_w‹k
(&
¥iv
->
≥ndög_w‹k
);

1116 
	}
}

1118 
úqªtu∫_t
 
	$„_h™dÀ_úq
(
úq
, *
dev
)

1120 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1121 
u32
 
°©us
, 
öt_mask
;

1123 
°©us
 = 
	`„_ªg_r32
(
FE_REG_FE_INT_STATUS
);

1125 i‡(
	`u∆ikñy
(!
°©us
))

1126  
IRQ_NONE
;

1128 
öt_mask
 = (
¥iv
->
soc
->
rx_öt
 |Öriv->soc->
tx_öt
);

1129 i‡(
	`likñy
(
°©us
 & 
öt_mask
)) {

1130 i‡(
	`likñy
(
	`«pi_scheduÀ_¥ï
(&
¥iv
->
rx_«pi
))) {

1131 
	`„_öt_dißbÀ
(
öt_mask
);

1132 
	`__«pi_scheduÀ
(&
¥iv
->
rx_«pi
);

1135 
	`„_ªg_w32
(
°©us
, 
FE_REG_FE_INT_STATUS
);

1138  
IRQ_HANDLED
;

1139 
	}
}

1141 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1142 
	$„_pﬁl_c⁄åﬁÀr
(
√t_devi˚
 *
dev
)

1144 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1145 
u32
 
öt_mask
 = 
¥iv
->
soc
->
tx_öt
 |Öriv->soc->
rx_öt
;

1147 
	`„_öt_dißbÀ
(
öt_mask
);

1148 
	`„_h™dÀ_úq
(
dev
->
úq
, dev);

1149 
	`„_öt_íabÀ
(
öt_mask
);

1150 
	}
}

1153 
	$„_£t_˛ock_cy˛e
(
„_¥iv
 *
¥iv
)

1155 
sys˛k
 = 
¥iv
->sysclk;

1157 
sys˛k
 /
FE_US_CYC_CNT_DIVISOR
;

1158 
sys˛k
 <<
FE_US_CYC_CNT_SHIFT
;

1160 
	`„_w32
((
	`„_r32
(
FE_FE_GLO_CFG
) &

1161 ~(
FE_US_CYC_CNT_MASK
 << 
FE_US_CYC_CNT_SHIFT
)) |

1162 
sys˛k
,

1163 
FE_FE_GLO_CFG
);

1165 
	}
}

1167 
	$„_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

1169 
u32
 
fwd_cfg
;

1171 
fwd_cfg
 = 
	`„_r32
(
FE_GDMA1_FWD_CFG
);

1174 i‡(
¥iv
->
Êags
 & 
FE_FLAG_JUMBO_FRAME
)

1175 
fwd_cfg
 &~
FE_GDM1_JMB_EN
;

1178 
fwd_cfg
 &= ~0xffff;

1180 
	`„_w32
(
fwd_cfg
, 
FE_GDMA1_FWD_CFG
);

1181 
	}
}

1183 
	$„_rxcsum_c⁄fig
(
boﬁ
 
íabÀ
)

1185 i‡(
íabÀ
)

1186 
	`„_w32
(
	`„_r32
(
FE_GDMA1_FWD_CFG
Ë| (
FE_GDM1_ICS_EN
 |

1187 
FE_GDM1_TCS_EN
 | 
FE_GDM1_UCS_EN
),

1188 
FE_GDMA1_FWD_CFG
);

1190 
	`„_w32
(
	`„_r32
(
FE_GDMA1_FWD_CFG
Ë& ~(
FE_GDM1_ICS_EN
 |

1191 
FE_GDM1_TCS_EN
 | 
FE_GDM1_UCS_EN
),

1192 
FE_GDMA1_FWD_CFG
);

1193 
	}
}

1195 
	$„_txcsum_c⁄fig
(
boﬁ
 
íabÀ
)

1197 i‡(
íabÀ
)

1198 
	`„_w32
(
	`„_r32
(
FE_CDMA_CSG_CFG
Ë| (
FE_ICS_GEN_EN
 |

1199 
FE_TCS_GEN_EN
 | 
FE_UCS_GEN_EN
),

1200 
FE_CDMA_CSG_CFG
);

1202 
	`„_w32
(
	`„_r32
(
FE_CDMA_CSG_CFG
Ë& ~(
FE_ICS_GEN_EN
 |

1203 
FE_TCS_GEN_EN
 | 
FE_UCS_GEN_EN
),

1204 
FE_CDMA_CSG_CFG
);

1205 
	}
}

1207 
	$„_csum_c⁄fig
(
„_¥iv
 *
¥iv
)

1209 
√t_devi˚
 *
dev
 = 
	`¥iv_√tdev
(
¥iv
);

1211 
	`„_txcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_IP_CSUM
));

1212 
	`„_rxcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_RXCSUM
));

1213 
	}
}

1215 
	$„_hw_öô
(
√t_devi˚
 *
dev
)

1217 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1218 
i
, 
îr
;

1220 
îr
 = 
	`devm_ªque°_úq
(
¥iv
->
dev
, dev->
úq
, 
„_h™dÀ_úq
, 0,

1221 
	`dev_«me
(
¥iv
->
dev
), dev);

1222 i‡(
îr
)

1223  
îr
;

1225 i‡(
¥iv
->
soc
->
£t_mac
)

1226 
¥iv
->
soc
->
	`£t_mac
’riv, 
dev
->
dev_addr
);

1228 
	`„_hw_£t_maˇddr
(
¥iv
, 
dev
->
dev_addr
);

1231 
	`„_ªg_w32
(0, 
FE_REG_DLY_INT_CFG
);

1233 
	`„_öt_dißbÀ
(
¥iv
->
soc
->
tx_öt
 |Öriv->soc->
rx_öt
);

1236 i‡(
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
])

1237 
i
 = 0; i < 16; i += 2)

1238 
	`„_w32
(((
i
 + 1) << 16) + i,

1239 
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
] +

1240 (
i
 * 2));

1242 i‡(
¥iv
->
soc
->
	`fwd_c⁄fig
(priv))

1243 
	`√tdev_îr
(
dev
, "unableÅo get clock\n");

1245 i‡(
„_ªg_èbÀ
[
FE_REG_FE_RST_GL
]) {

1246 
	`„_ªg_w32
(1, 
FE_REG_FE_RST_GL
);

1247 
	`„_ªg_w32
(0, 
FE_REG_FE_RST_GL
);

1251 
	}
}

1253 
	$„_›í
(
√t_devi˚
 *
dev
)

1255 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1256 
Êags
;

1257 
u32
 
vÆ
;

1258 
îr
;

1260 
îr
 = 
	`„_öô_dma
(
¥iv
);

1261 i‡(
îr
) {

1262 
	`„_‰ì_dma
(
¥iv
);

1263  
îr
;

1266 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

1268 
vÆ
 = 
FE_TX_WB_DDONE
 | 
FE_RX_DMA_EN
 | 
FE_TX_DMA_EN
;

1269 i‡(
¥iv
->
Êags
 & 
FE_FLAG_RX_2B_OFFSET
)

1270 
vÆ
 |
FE_RX_2B_OFFSET
;

1271 
vÆ
 |
¥iv
->
soc
->
pdma_glo_cfg
;

1272 
	`„_ªg_w32
(
vÆ
, 
FE_REG_PDMA_GLO_CFG
);

1274 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

1276 i‡(
¥iv
->
phy
)

1277 
¥iv
->
phy
->
	`°¨t
(priv);

1279 i‡(
¥iv
->
soc
->
has_ˇºõr
 &&Öriv->soc->
	`has_ˇºõr
(priv))

1280 
	`√tif_ˇºõr_⁄
(
dev
);

1282 
	`«pi_íabÀ
(&
¥iv
->
rx_«pi
);

1283 
	`„_öt_íabÀ
(
¥iv
->
soc
->
tx_öt
 |Öriv->soc->
rx_öt
);

1284 
	`√tif_°¨t_queue
(
dev
);

1285 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


1286 
	`mtk_µe_¥obe
(
¥iv
);

1290 
	}
}

1292 
	$„_°›
(
√t_devi˚
 *
dev
)

1294 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1295 
Êags
;

1296 
i
;

1298 
	`√tif_tx_dißbÀ
(
dev
);

1299 
	`„_öt_dißbÀ
(
¥iv
->
soc
->
tx_öt
 |Öriv->soc->
rx_öt
);

1300 
	`«pi_dißbÀ
(&
¥iv
->
rx_«pi
);

1302 i‡(
¥iv
->
phy
)

1303 
¥iv
->
phy
->
	`°›
(priv);

1305 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

1307 
	`„_ªg_w32
(
	`„_ªg_r32
(
FE_REG_PDMA_GLO_CFG
) &

1308 ~(
FE_TX_WB_DDONE
 | 
FE_RX_DMA_EN
 | 
FE_TX_DMA_EN
),

1309 
FE_REG_PDMA_GLO_CFG
);

1310 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

1313 
i
 = 0; i < 10; i++) {

1314 i‡(
	`„_ªg_r32
(
FE_REG_PDMA_GLO_CFG
) &

1315 (
FE_TX_DMA_BUSY
 | 
FE_RX_DMA_BUSY
)) {

1316 
	`m¶ìp
(20);

1322 
	`„_‰ì_dma
(
¥iv
);

1324 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


1325 
	`mtk_µe_ªmove
(
¥iv
);

1329 
	}
}

1331 
__öô
 
	$„_öô
(
√t_devi˚
 *
dev
)

1333 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1334 
devi˚_node
 *
p‹t
;

1335 c⁄° *
mac_addr
;

1336 
îr
;

1338 
¥iv
->
soc
->
	`ª£t_„
();

1340 i‡(
¥iv
->
soc
->
swôch_öô
)

1341 i‡(
¥iv
->
soc
->
	`swôch_öô
(priv)) {

1342 
	`√tdev_îr
(
dev
, "failedÅo initialize switch core\n");

1343  -
ENODEV
;

1346 
mac_addr
 = 
	`of_gë_mac_addªss
(
¥iv
->
dev
->
of_node
);

1347 i‡(
mac_addr
)

1348 
	`ëhî_addr_c›y
(
dev
->
dev_addr
, 
mac_addr
);

1351 i‡(!
	`is_vÆid_ëhî_addr
(
dev
->
dev_addr
)) {

1352 
	`øndom_ëhî_addr
(
dev
->
dev_addr
);

1353 
	`dev_îr
(
¥iv
->
dev
, "generatedÑandom MACáddress %pM\n",

1354 
dev
->
dev_addr
);

1357 
îr
 = 
	`„_mdio_öô
(
¥iv
);

1358 i‡(
îr
)

1359  
îr
;

1361 i‡(
¥iv
->
soc
->
p‹t_öô
)

1362 
	`f‹_óch_chûd_of_node
(
¥iv
->
dev
->
of_node
, 
p‹t
)

1363 i‡(
	`of_devi˚_is_com∑tibÀ
(
p‹t
, "mediatek,eth-port") &&

1364 
	`of_devi˚_is_avaûabÀ
(
p‹t
))

1365 
¥iv
->
soc
->
	`p‹t_öô
’riv, 
p‹t
);

1367 i‡(
¥iv
->
phy
) {

1368 
îr
 = 
¥iv
->
phy
->
	`c⁄√˘
(priv);

1369 i‡(
îr
)

1370 
îr_phy_disc⁄√˘
;

1373 
îr
 = 
	`„_hw_öô
(
dev
);

1374 i‡(
îr
)

1375 
îr_phy_disc⁄√˘
;

1377 i‡((
¥iv
->
Êags
 & 
FE_FLAG_HAS_SWITCH
Ë&&Öriv->
soc
->
swôch_c⁄fig
)

1378 
¥iv
->
soc
->
	`swôch_c⁄fig
(priv);

1382 
îr_phy_disc⁄√˘
:

1383 i‡(
¥iv
->
phy
)

1384 
¥iv
->
phy
->
	`disc⁄√˘
(priv);

1385 
	`„_mdio_˛ónup
(
¥iv
);

1387  
îr
;

1388 
	}
}

1390 
	$„_unöô
(
√t_devi˚
 *
dev
)

1392 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1394 i‡(
¥iv
->
phy
)

1395 
¥iv
->
phy
->
	`disc⁄√˘
(priv);

1396 
	`„_mdio_˛ónup
(
¥iv
);

1398 
	`„_ªg_w32
(0, 
FE_REG_FE_INT_ENABLE
);

1399 
	`‰ì_úq
(
dev
->
úq
, dev);

1400 
	}
}

1402 
	$„_do_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
i‰
, 
cmd
)

1404 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1406 i‡(!
¥iv
->
phy_dev
)

1407  -
ENODEV
;

1409 
cmd
) {

1410 
SIOCETHTOOL
:

1411  
	`phy_ëhtoﬁ_io˘l
(
¥iv
->
phy_dev
,

1412 (*Ë
i‰
->
i‰_d©a
);

1413 
SIOCGMIIPHY
:

1414 
SIOCGMIIREG
:

1415 
SIOCSMIIREG
:

1416  
	`phy_mii_io˘l
(
¥iv
->
phy_dev
, 
i‰
, 
cmd
);

1421  -
EOPNOTSUPP
;

1422 
	}
}

1424 
	$„_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

1426 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1427 
‰ag_size
, 
ﬁd_mtu
;

1428 
u32
 
fwd_cfg
;

1430 
ﬁd_mtu
 = 
dev
->
mtu
;

1431 
dev
->
mtu
 = 
√w_mtu
;

1433 i‡(!(
¥iv
->
Êags
 & 
FE_FLAG_JUMBO_FRAME
))

1437 i‡(
ﬁd_mtu
 <
ETH_DATA_LEN
 && 
√w_mtu
 <= ETH_DATA_LEN)

1439 i‡(
ﬁd_mtu
 > 
ETH_DATA_LEN
 && 
√w_mtu
 > ETH_DATA_LEN)

1442 i‡(
√w_mtu
 <
ETH_DATA_LEN
)

1443 
¥iv
->
rx_rög
.
‰ag_size
 = 
	`„_max_‰ag_size
(
ETH_DATA_LEN
);

1445 
¥iv
->
rx_rög
.
‰ag_size
 = 
PAGE_SIZE
;

1446 
¥iv
->
rx_rög
.
rx_buf_size
 = 
	`„_max_buf_size
’riv->rx_rög.
‰ag_size
);

1448 i‡(!
	`√tif_ru¬ög
(
dev
))

1451 
	`„_°›
(
dev
);

1452 i‡(!
	`IS_ENABLED
(
CONFIG_SOC_MT7621
)) {

1453 
fwd_cfg
 = 
	`„_r32
(
FE_GDMA1_FWD_CFG
);

1454 i‡(
√w_mtu
 <
ETH_DATA_LEN
) {

1455 
fwd_cfg
 &~
FE_GDM1_JMB_EN
;

1457 
‰ag_size
 = 
	`„_max_‰ag_size
(
√w_mtu
);

1458 
fwd_cfg
 &~(
FE_GDM1_JMB_LEN_MASK
 << 
FE_GDM1_JMB_LEN_SHIFT
);

1459 
fwd_cfg
 |(
	`DIV_ROUND_UP
(
‰ag_size
, 1024) <<

1460 
FE_GDM1_JMB_LEN_SHIFT
Ë| 
FE_GDM1_JMB_EN
;

1462 
	`„_w32
(
fwd_cfg
, 
FE_GDMA1_FWD_CFG
);

1465  
	`„_›í
(
dev
);

1466 
	}
}

1468 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


1470 
	$„_Êow_ofÊﬂd
(
Êow_ofÊﬂd_ty≥
 
ty≥
, 
Êow_ofÊﬂd
 *
Êow
,

1471 
Êow_ofÊﬂd_hw_∑th
 *
§c
,

1472 
Êow_ofÊﬂd_hw_∑th
 *
de°
)

1474 
„_¥iv
 *
¥iv
;

1476 i‡(
§c
->
dev
 !
de°
->dev)

1477  -
EINVAL
;

1479 
¥iv
 = 
	`√tdev_¥iv
(
§c
->
dev
);

1481  
	`mtk_Êow_ofÊﬂd
(
¥iv
, 
ty≥
, 
Êow
, 
§c
, 
de°
);

1482 
	}
}

1485 c⁄° 
√t_devi˚_›s
 
	g„_√tdev_›s
 = {

1486 .
ndo_öô
 = 
„_öô
,

1487 .
	gndo_unöô
 = 
„_unöô
,

1488 .
	gndo_›í
 = 
„_›í
,

1489 .
	gndo_°›
 = 
„_°›
,

1490 .
	gndo_°¨t_xmô
 = 
„_°¨t_xmô
,

1491 .
	gndo_£t_mac_addªss
 = 
„_£t_mac_addªss
,

1492 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1493 .
	gndo_do_io˘l
 = 
„_do_io˘l
,

1494 .
	gndo_ch™ge_mtu
 = 
„_ch™ge_mtu
,

1495 .
	gndo_tx_timeout
 = 
„_tx_timeout
,

1496 .
	gndo_gë_°©s64
 = 
„_gë_°©s64
,

1497 .
	gndo_vœn_rx_add_vid
 = 
„_vœn_rx_add_vid
,

1498 .
	gndo_vœn_rx_kûl_vid
 = 
„_vœn_rx_kûl_vid
,

1499 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1500 .
	gndo_pﬁl_c⁄åﬁÀr
 = 
„_pﬁl_c⁄åﬁÀr
,

1502 #ifde‡
CONFIG_NET_MEDIATEK_OFFLOAD


1503 .
	gndo_Êow_ofÊﬂd
 = 
„_Êow_ofÊﬂd
,

1507 
	$„_ª£t_≥ndög
(
„_¥iv
 *
¥iv
)

1509 
√t_devi˚
 *
dev
 = 
¥iv
->
√tdev
;

1510 
îr
;

1512 
	`π∆_lock
();

1513 
	`„_°›
(
dev
);

1515 
îr
 = 
	`„_›í
(
dev
);

1516 i‡(
îr
) {

1517 
	`√tif_Æît
(
¥iv
, 
ifup
, 
dev
,

1519 
	`dev_˛o£
(
dev
);

1521 
	`π∆_u∆ock
();

1522 
	}
}

1524 c⁄° 
„_w‹k_t
 
	g„_w‹k
[] = {

1525 {
FE_FLAG_RESET_PENDING
, 
„_ª£t_≥ndög
},

1528 
	$„_≥ndög_w‹k
(
w‹k_°ru˘
 *
w‹k
)

1530 
„_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, „_¥iv, 
≥ndög_w‹k
);

1531 
i
;

1532 
boﬁ
 
≥ndög
;

1534 
i
 = 0; i < 
	`ARRAY_SIZE
(
„_w‹k
); i++) {

1535 
≥ndög
 = 
	`ã°_™d_˛ór_bô
(
„_w‹k
[
i
].
bôƒ
,

1536 
¥iv
->
≥ndög_Êags
);

1537 i‡(
≥ndög
)

1538 
„_w‹k
[
i
].
	`a˘i⁄
(
¥iv
);

1540 
	}
}

1542 
	$„_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1544 
ªsour˚
 *
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

1545 c⁄° 
of_devi˚_id
 *
m©ch
;

1546 
„_soc_d©a
 *
soc
;

1547 
√t_devi˚
 *
√tdev
;

1548 
„_¥iv
 *
¥iv
;

1549 
˛k
 *
sys˛k
;

1550 
îr
, 
«pi_weight
;

1552 
	`devi˚_ª£t
(&
pdev
->
dev
);

1554 
m©ch
 = 
	`of_m©ch_devi˚
(
of_„_m©ch
, &
pdev
->
dev
);

1555 
soc
 = (
„_soc_d©a
 *)
m©ch
->
d©a
;

1557 i‡(
soc
->
ªg_èbÀ
)

1558 
„_ªg_èbÀ
 = 
soc
->
ªg_èbÀ
;

1560 
soc
->
ªg_èbÀ
 = 
„_ªg_èbÀ
;

1562 
„_ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
ªs
);

1563 i‡(
	`IS_ERR
(
„_ba£
)) {

1564 
îr
 = -
EADDRNOTAVAIL
;

1565 
îr_out
;

1568 
√tdev
 = 
	`Æloc_ëhîdev
((*
¥iv
));

1569 i‡(!
√tdev
) {

1570 
	`dev_îr
(&
pdev
->
dev
, "alloc_etherdev failed\n");

1571 
îr
 = -
ENOMEM
;

1572 
îr_iounm≠
;

1575 
	`SET_NETDEV_DEV
(
√tdev
, &
pdev
->
dev
);

1576 
√tdev
->
√tdev_›s
 = &
„_√tdev_›s
;

1577 
√tdev
->
ba£_addr
 = ()
„_ba£
;

1579 
√tdev
->
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

1580 i‡(
√tdev
->
úq
 < 0) {

1581 
	`dev_îr
(&
pdev
->
dev
, "no IRQÑesource found\n");

1582 
îr
 = -
ENXIO
;

1583 
îr_‰ì_dev
;

1586 i‡(
soc
->
öô_d©a
)

1587 
soc
->
	`öô_d©a
(soc, 
√tdev
);

1588 
√tdev
->
vœn_„©uªs
 =Çëdev->
hw_„©uªs
 & ~
NETIF_F_HW_VLAN_CTAG_TX
;

1589 
√tdev
->
„©uªs
 |√tdev->
hw_„©uªs
;

1591 i‡(
	`IS_ENABLED
(
CONFIG_SOC_MT7621
))

1592 
√tdev
->
max_mtu
 = 2048;

1595 i‡(
„_ªg_èbÀ
[
FE_REG_FE_DMA_VID_BASE
])

1596 
√tdev
->
„©uªs
 |
NETIF_F_HW_VLAN_CTAG_FILTER
;

1598 
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

1599 
	`•ö_lock_öô
(&
¥iv
->
∑ge_lock
);

1600 i‡(
„_ªg_èbÀ
[
FE_REG_FE_COUNTER_BASE
]) {

1601 
¥iv
->
hw_°©s
 = 
	`kzÆloc
((*¥iv->hw_°©s), 
GFP_KERNEL
);

1602 i‡(!
¥iv
->
hw_°©s
) {

1603 
îr
 = -
ENOMEM
;

1604 
îr_‰ì_dev
;

1606 
	`•ö_lock_öô
(&
¥iv
->
hw_°©s
->
°©s_lock
);

1609 
sys˛k
 = 
	`devm_˛k_gë
(&
pdev
->
dev
, 
NULL
);

1610 i‡(!
	`IS_ERR
(
sys˛k
)) {

1611 
¥iv
->
sys˛k
 = 
	`˛k_gë_øã
(sysclk);

1612 } i‡((
¥iv
->
Êags
 & 
FE_FLAG_CALIBRATE_CLK
)) {

1613 
	`dev_îr
(&
pdev
->
dev
, "this socÇeedsá clk for calibration\n");

1614 
îr
 = -
ENXIO
;

1615 
îr_‰ì_dev
;

1618 
¥iv
->
swôch_≈
 = 
	`of_∑r£_ph™dÀ
(
pdev
->
dev
.
of_node
, "mediatek,switch", 0);

1619 i‡((
¥iv
->
Êags
 & 
FE_FLAG_HAS_SWITCH
Ë&& !¥iv->
swôch_≈
) {

1620 
	`dev_îr
(&
pdev
->
dev
, "failedÅoÑead switchÖhandle\n");

1621 
îr
 = -
ENODEV
;

1622 
îr_‰ì_dev
;

1625 
¥iv
->
√tdev
 =Çetdev;

1626 
¥iv
->
dev
 = &
pdev
->dev;

1627 
¥iv
->
soc
 = soc;

1628 
¥iv
->
msg_íabÀ
 = 
	`√tif_msg_öô
(
„_msg_Àvñ
, 
FE_DEFAULT_MSG_ENABLE
);

1629 
¥iv
->
rx_rög
.
‰ag_size
 = 
	`„_max_‰ag_size
(
ETH_DATA_LEN
);

1630 
¥iv
->
rx_rög
.
rx_buf_size
 = 
	`„_max_buf_size
’riv->rx_rög.
‰ag_size
);

1631 
¥iv
->
tx_rög
.
tx_rög_size
 = 
NUM_DMA_DESC
;

1632 
¥iv
->
rx_rög
.
rx_rög_size
 = 
NUM_DMA_DESC
;

1633 
	`INIT_WORK
(&
¥iv
->
≥ndög_w‹k
, 
„_≥ndög_w‹k
);

1634 
	`u64_°©s_öô
(&
¥iv
->
hw_°©s
->
syn˝
);

1636 
«pi_weight
 = 16;

1637 i‡(
¥iv
->
Êags
 & 
FE_FLAG_NAPI_WEIGHT
) {

1638 
«pi_weight
 *= 4;

1639 
¥iv
->
tx_rög
.
tx_rög_size
 *= 4;

1640 
¥iv
->
rx_rög
.
rx_rög_size
 *= 4;

1642 
	`√tif_«pi_add
(
√tdev
, &
¥iv
->
rx_«pi
, 
„_pﬁl
, 
«pi_weight
);

1643 
	`„_£t_ëhtoﬁ_›s
(
√tdev
);

1645 
îr
 = 
	`ªgi°î_√tdev
(
√tdev
);

1646 i‡(
îr
) {

1647 
	`dev_îr
(&
pdev
->
dev
, "error bringing up device\n");

1648 
îr_‰ì_dev
;

1651 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
√tdev
);

1653 
	`√tif_öfo
(
¥iv
, 
¥obe
, 
√tdev
, "mediatek frameÉngineát 0x%08lx, irq %d\n",

1654 
√tdev
->
ba£_addr
,Çëdev->
úq
);

1658 
îr_‰ì_dev
:

1659 
	`‰ì_√tdev
(
√tdev
);

1660 
îr_iounm≠
:

1661 
	`devm_iounm≠
(&
pdev
->
dev
, 
„_ba£
);

1662 
îr_out
:

1663  
îr
;

1664 
	}
}

1666 
	$„_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1668 
√t_devi˚
 *
dev
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

1669 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

1671 
	`√tif_«pi_dñ
(&
¥iv
->
rx_«pi
);

1672 
	`k‰ì
(
¥iv
->
hw_°©s
);

1674 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
≥ndög_w‹k
);

1676 
	`uƒegi°î_√tdev
(
dev
);

1677 
	`‰ì_√tdev
(
dev
);

1678 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

1681 
	}
}

1683 
∂©f‹m_drivî
 
	g„_drivî
 = {

1684 .
¥obe
 = 
„_¥obe
,

1685 .
	gªmove
 = 
„_ªmove
,

1686 .
	gdrivî
 = {

1687 .
«me
 = "mtk_soc_eth",

1688 .
	gow√r
 = 
THIS_MODULE
,

1689 .
	gof_m©ch_èbÀ
 = 
of_„_m©ch
,

1693 
moduÀ_∂©f‹m_drivî
(
„_drivî
);

1695 
MODULE_LICENSE
("GPL");

1696 
MODULE_AUTHOR
("John Crispin <blogic@openwrt.org>");

1697 
MODULE_DESCRIPTION
("Ethernet driver for Ralink SoC");

1698 
MODULE_VERSION
(
MTK_FE_DRV_VERSION
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_eth_soc.h

15 #i‚de‡
FE_ETH_H


16 
	#FE_ETH_H


	)

18 
	~<löux/mii.h
>

19 
	~<löux/öãºu±.h
>

20 
	~<löux/√tdevi˚.h
>

21 
	~<löux/dma-m≠pög.h
>

22 
	~<löux/phy.h
>

23 
	~<löux/ëhtoﬁ.h
>

24 
	~<löux/vîsi⁄.h
>

26 
	e„_ªg
 {

27 
	mFE_REG_PDMA_GLO_CFG
 = 0,

28 
	mFE_REG_PDMA_RST_CFG
,

29 
	mFE_REG_DLY_INT_CFG
,

30 
	mFE_REG_TX_BASE_PTR0
,

31 
	mFE_REG_TX_MAX_CNT0
,

32 
	mFE_REG_TX_CTX_IDX0
,

33 
	mFE_REG_TX_DTX_IDX0
,

34 
	mFE_REG_RX_BASE_PTR0
,

35 
	mFE_REG_RX_MAX_CNT0
,

36 
	mFE_REG_RX_CALC_IDX0
,

37 
	mFE_REG_RX_DRX_IDX0
,

38 
	mFE_REG_FE_INT_ENABLE
,

39 
	mFE_REG_FE_INT_STATUS
,

40 
	mFE_REG_FE_DMA_VID_BASE
,

41 
	mFE_REG_FE_COUNTER_BASE
,

42 
	mFE_REG_FE_RST_GL
,

43 
	mFE_REG_FE_INT_STATUS2
,

44 
	mFE_REG_COUNT


47 
	e„_w‹k_Êag
 {

48 
	mFE_FLAG_RESET_PENDING
,

49 
	mFE_FLAG_MAX


52 
	#MTK_FE_DRV_VERSION
 "0.1.2"

	)

55 
	#NUM_DMA_DESC
 
	`BIT
(10)

	)

56 
	#MAX_DMA_DESC
 0xfff

	)

58 
	#FE_DELAY_EN_INT
 0x80

	)

59 
	#FE_DELAY_MAX_INT
 0x04

	)

60 
	#FE_DELAY_MAX_TOUT
 0x04

	)

61 
	#FE_DELAY_TIME
 20

	)

62 
	#FE_DELAY_CHAN
 (((
FE_DELAY_EN_INT
 | 
FE_DELAY_MAX_INT
) << 8) | \

63 
FE_DELAY_MAX_TOUT
)

	)

64 
	#FE_DELAY_INIT
 ((
FE_DELAY_CHAN
 << 16Ë| FE_DELAY_CHAN)

	)

65 
	#FE_PSE_FQFC_CFG_INIT
 0x80504000

	)

66 
	#FE_PSE_FQFC_CFG_256Q
 0xff908000

	)

69 
	#FE_CNT_PPE_AF
 
	`BIT
(31)

	)

70 
	#FE_CNT_GDM_AF
 
	`BIT
(29)

	)

71 
	#FE_PSE_P2_FC
 
	`BIT
(26)

	)

72 
	#FE_PSE_BUF_DROP
 
	`BIT
(24)

	)

73 
	#FE_GDM_OTHER_DROP
 
	`BIT
(23)

	)

74 
	#FE_PSE_P1_FC
 
	`BIT
(22)

	)

75 
	#FE_PSE_P0_FC
 
	`BIT
(21)

	)

76 
	#FE_PSE_FQ_EMPTY
 
	`BIT
(20)

	)

77 
	#FE_GE1_STA_CHG
 
	`BIT
(18)

	)

78 
	#FE_TX_COHERENT
 
	`BIT
(17)

	)

79 
	#FE_RX_COHERENT
 
	`BIT
(16)

	)

80 
	#FE_TX_DONE_INT3
 
	`BIT
(11)

	)

81 
	#FE_TX_DONE_INT2
 
	`BIT
(10)

	)

82 
	#FE_TX_DONE_INT1
 
	`BIT
(9)

	)

83 
	#FE_TX_DONE_INT0
 
	`BIT
(8)

	)

84 
	#FE_RX_DONE_INT0
 
	`BIT
(2)

	)

85 
	#FE_TX_DLY_INT
 
	`BIT
(1)

	)

86 
	#FE_RX_DLY_INT
 
	`BIT
(0)

	)

88 
	#FE_RX_DONE_INT
 
FE_RX_DONE_INT0


	)

89 
	#FE_TX_DONE_INT
 (
FE_TX_DONE_INT0
 | 
FE_TX_DONE_INT1
 | \

90 
FE_TX_DONE_INT2
 | 
FE_TX_DONE_INT3
)

	)

92 
	#RT5350_RX_DLY_INT
 
	`BIT
(30)

	)

93 
	#RT5350_TX_DLY_INT
 
	`BIT
(28)

	)

94 
	#RT5350_RX_DONE_INT1
 
	`BIT
(17)

	)

95 
	#RT5350_RX_DONE_INT0
 
	`BIT
(16)

	)

96 
	#RT5350_TX_DONE_INT3
 
	`BIT
(3)

	)

97 
	#RT5350_TX_DONE_INT2
 
	`BIT
(2)

	)

98 
	#RT5350_TX_DONE_INT1
 
	`BIT
(1)

	)

99 
	#RT5350_TX_DONE_INT0
 
	`BIT
(0)

	)

101 
	#RT5350_RX_DONE_INT
 (
RT5350_RX_DONE_INT0
 | 
RT5350_RX_DONE_INT1
)

	)

102 
	#RT5350_TX_DONE_INT
 (
RT5350_TX_DONE_INT0
 | 
RT5350_TX_DONE_INT1
 | \

103 
RT5350_TX_DONE_INT2
 | 
RT5350_TX_DONE_INT3
)

	)

106 
	#FE_FE_OFFSET
 0x0000

	)

107 
	#FE_GDMA_OFFSET
 0x0020

	)

108 
	#FE_PSE_OFFSET
 0x0040

	)

109 
	#FE_GDMA2_OFFSET
 0x0060

	)

110 
	#FE_CDMA_OFFSET
 0x0080

	)

111 
	#FE_DMA_VID0
 0x00a8

	)

112 
	#FE_PDMA_OFFSET
 0x0100

	)

113 
	#FE_PPE_OFFSET
 0x0200

	)

114 
	#FE_CMTABLE_OFFSET
 0x0400

	)

115 
	#FE_POLICYTABLE_OFFSET
 0x1000

	)

117 
	#RT5350_PDMA_OFFSET
 0x0800

	)

118 
	#RT5350_SDM_OFFSET
 0x0c00

	)

120 
	#FE_MDIO_ACCESS
 (
FE_FE_OFFSET
 + 0x00)

	)

121 
	#FE_MDIO_CFG
 (
FE_FE_OFFSET
 + 0x04)

	)

122 
	#FE_FE_GLO_CFG
 (
FE_FE_OFFSET
 + 0x08)

	)

123 
	#FE_FE_RST_GL
 (
FE_FE_OFFSET
 + 0x0C)

	)

124 
	#FE_FE_INT_STATUS
 (
FE_FE_OFFSET
 + 0x10)

	)

125 
	#FE_FE_INT_ENABLE
 (
FE_FE_OFFSET
 + 0x14)

	)

126 
	#FE_MDIO_CFG2
 (
FE_FE_OFFSET
 + 0x18)

	)

127 
	#FE_FOC_TS_T
 (
FE_FE_OFFSET
 + 0x1C)

	)

129 
	#FE_GDMA1_FWD_CFG
 (
FE_GDMA_OFFSET
 + 0x00)

	)

130 
	#FE_GDMA1_SCH_CFG
 (
FE_GDMA_OFFSET
 + 0x04)

	)

131 
	#FE_GDMA1_SHPR_CFG
 (
FE_GDMA_OFFSET
 + 0x08)

	)

132 
	#FE_GDMA1_MAC_ADRL
 (
FE_GDMA_OFFSET
 + 0x0C)

	)

133 
	#FE_GDMA1_MAC_ADRH
 (
FE_GDMA_OFFSET
 + 0x10)

	)

135 
	#FE_GDMA2_FWD_CFG
 (
FE_GDMA2_OFFSET
 + 0x00)

	)

136 
	#FE_GDMA2_SCH_CFG
 (
FE_GDMA2_OFFSET
 + 0x04)

	)

137 
	#FE_GDMA2_SHPR_CFG
 (
FE_GDMA2_OFFSET
 + 0x08)

	)

138 
	#FE_GDMA2_MAC_ADRL
 (
FE_GDMA2_OFFSET
 + 0x0C)

	)

139 
	#FE_GDMA2_MAC_ADRH
 (
FE_GDMA2_OFFSET
 + 0x10)

	)

141 
	#FE_PSE_FQ_CFG
 (
FE_PSE_OFFSET
 + 0x00)

	)

142 
	#FE_CDMA_FC_CFG
 (
FE_PSE_OFFSET
 + 0x04)

	)

143 
	#FE_GDMA1_FC_CFG
 (
FE_PSE_OFFSET
 + 0x08)

	)

144 
	#FE_GDMA2_FC_CFG
 (
FE_PSE_OFFSET
 + 0x0C)

	)

146 
	#FE_CDMA_CSG_CFG
 (
FE_CDMA_OFFSET
 + 0x00)

	)

147 
	#FE_CDMA_SCH_CFG
 (
FE_CDMA_OFFSET
 + 0x04)

	)

149 #ifde‡
CONFIG_SOC_MT7621


150 
	#MT7620A_GDMA_OFFSET
 0x0500

	)

152 
	#MT7620A_GDMA_OFFSET
 0x0600

	)

154 
	#MT7620A_GDMA1_FWD_CFG
 (
MT7620A_GDMA_OFFSET
 + 0x00)

	)

155 
	#MT7620A_FE_GDMA1_SCH_CFG
 (
MT7620A_GDMA_OFFSET
 + 0x04)

	)

156 
	#MT7620A_FE_GDMA1_SHPR_CFG
 (
MT7620A_GDMA_OFFSET
 + 0x08)

	)

157 
	#MT7620A_FE_GDMA1_MAC_ADRL
 (
MT7620A_GDMA_OFFSET
 + 0x0C)

	)

158 
	#MT7620A_FE_GDMA1_MAC_ADRH
 (
MT7620A_GDMA_OFFSET
 + 0x10)

	)

160 
	#RT5350_TX_BASE_PTR0
 (
RT5350_PDMA_OFFSET
 + 0x00)

	)

161 
	#RT5350_TX_MAX_CNT0
 (
RT5350_PDMA_OFFSET
 + 0x04)

	)

162 
	#RT5350_TX_CTX_IDX0
 (
RT5350_PDMA_OFFSET
 + 0x08)

	)

163 
	#RT5350_TX_DTX_IDX0
 (
RT5350_PDMA_OFFSET
 + 0x0C)

	)

164 
	#RT5350_TX_BASE_PTR1
 (
RT5350_PDMA_OFFSET
 + 0x10)

	)

165 
	#RT5350_TX_MAX_CNT1
 (
RT5350_PDMA_OFFSET
 + 0x14)

	)

166 
	#RT5350_TX_CTX_IDX1
 (
RT5350_PDMA_OFFSET
 + 0x18)

	)

167 
	#RT5350_TX_DTX_IDX1
 (
RT5350_PDMA_OFFSET
 + 0x1C)

	)

168 
	#RT5350_TX_BASE_PTR2
 (
RT5350_PDMA_OFFSET
 + 0x20)

	)

169 
	#RT5350_TX_MAX_CNT2
 (
RT5350_PDMA_OFFSET
 + 0x24)

	)

170 
	#RT5350_TX_CTX_IDX2
 (
RT5350_PDMA_OFFSET
 + 0x28)

	)

171 
	#RT5350_TX_DTX_IDX2
 (
RT5350_PDMA_OFFSET
 + 0x2C)

	)

172 
	#RT5350_TX_BASE_PTR3
 (
RT5350_PDMA_OFFSET
 + 0x30)

	)

173 
	#RT5350_TX_MAX_CNT3
 (
RT5350_PDMA_OFFSET
 + 0x34)

	)

174 
	#RT5350_TX_CTX_IDX3
 (
RT5350_PDMA_OFFSET
 + 0x38)

	)

175 
	#RT5350_TX_DTX_IDX3
 (
RT5350_PDMA_OFFSET
 + 0x3C)

	)

176 
	#RT5350_RX_BASE_PTR0
 (
RT5350_PDMA_OFFSET
 + 0x100)

	)

177 
	#RT5350_RX_MAX_CNT0
 (
RT5350_PDMA_OFFSET
 + 0x104)

	)

178 
	#RT5350_RX_CALC_IDX0
 (
RT5350_PDMA_OFFSET
 + 0x108)

	)

179 
	#RT5350_RX_DRX_IDX0
 (
RT5350_PDMA_OFFSET
 + 0x10C)

	)

180 
	#RT5350_RX_BASE_PTR1
 (
RT5350_PDMA_OFFSET
 + 0x110)

	)

181 
	#RT5350_RX_MAX_CNT1
 (
RT5350_PDMA_OFFSET
 + 0x114)

	)

182 
	#RT5350_RX_CALC_IDX1
 (
RT5350_PDMA_OFFSET
 + 0x118)

	)

183 
	#RT5350_RX_DRX_IDX1
 (
RT5350_PDMA_OFFSET
 + 0x11C)

	)

184 
	#RT5350_PDMA_GLO_CFG
 (
RT5350_PDMA_OFFSET
 + 0x204)

	)

185 
	#RT5350_PDMA_RST_CFG
 (
RT5350_PDMA_OFFSET
 + 0x208)

	)

186 
	#RT5350_DLY_INT_CFG
 (
RT5350_PDMA_OFFSET
 + 0x20c)

	)

187 
	#RT5350_FE_INT_STATUS
 (
RT5350_PDMA_OFFSET
 + 0x220)

	)

188 
	#RT5350_FE_INT_ENABLE
 (
RT5350_PDMA_OFFSET
 + 0x228)

	)

189 
	#RT5350_PDMA_SCH_CFG
 (
RT5350_PDMA_OFFSET
 + 0x280)

	)

191 
	#FE_PDMA_GLO_CFG
 (
FE_PDMA_OFFSET
 + 0x00)

	)

192 
	#FE_PDMA_RST_CFG
 (
FE_PDMA_OFFSET
 + 0x04)

	)

193 
	#FE_PDMA_SCH_CFG
 (
FE_PDMA_OFFSET
 + 0x08)

	)

194 
	#FE_DLY_INT_CFG
 (
FE_PDMA_OFFSET
 + 0x0C)

	)

195 
	#FE_TX_BASE_PTR0
 (
FE_PDMA_OFFSET
 + 0x10)

	)

196 
	#FE_TX_MAX_CNT0
 (
FE_PDMA_OFFSET
 + 0x14)

	)

197 
	#FE_TX_CTX_IDX0
 (
FE_PDMA_OFFSET
 + 0x18)

	)

198 
	#FE_TX_DTX_IDX0
 (
FE_PDMA_OFFSET
 + 0x1C)

	)

199 
	#FE_TX_BASE_PTR1
 (
FE_PDMA_OFFSET
 + 0x20)

	)

200 
	#FE_TX_MAX_CNT1
 (
FE_PDMA_OFFSET
 + 0x24)

	)

201 
	#FE_TX_CTX_IDX1
 (
FE_PDMA_OFFSET
 + 0x28)

	)

202 
	#FE_TX_DTX_IDX1
 (
FE_PDMA_OFFSET
 + 0x2C)

	)

203 
	#FE_RX_BASE_PTR0
 (
FE_PDMA_OFFSET
 + 0x30)

	)

204 
	#FE_RX_MAX_CNT0
 (
FE_PDMA_OFFSET
 + 0x34)

	)

205 
	#FE_RX_CALC_IDX0
 (
FE_PDMA_OFFSET
 + 0x38)

	)

206 
	#FE_RX_DRX_IDX0
 (
FE_PDMA_OFFSET
 + 0x3C)

	)

207 
	#FE_TX_BASE_PTR2
 (
FE_PDMA_OFFSET
 + 0x40)

	)

208 
	#FE_TX_MAX_CNT2
 (
FE_PDMA_OFFSET
 + 0x44)

	)

209 
	#FE_TX_CTX_IDX2
 (
FE_PDMA_OFFSET
 + 0x48)

	)

210 
	#FE_TX_DTX_IDX2
 (
FE_PDMA_OFFSET
 + 0x4C)

	)

211 
	#FE_TX_BASE_PTR3
 (
FE_PDMA_OFFSET
 + 0x50)

	)

212 
	#FE_TX_MAX_CNT3
 (
FE_PDMA_OFFSET
 + 0x54)

	)

213 
	#FE_TX_CTX_IDX3
 (
FE_PDMA_OFFSET
 + 0x58)

	)

214 
	#FE_TX_DTX_IDX3
 (
FE_PDMA_OFFSET
 + 0x5C)

	)

215 
	#FE_RX_BASE_PTR1
 (
FE_PDMA_OFFSET
 + 0x60)

	)

216 
	#FE_RX_MAX_CNT1
 (
FE_PDMA_OFFSET
 + 0x64)

	)

217 
	#FE_RX_CALC_IDX1
 (
FE_PDMA_OFFSET
 + 0x68)

	)

218 
	#FE_RX_DRX_IDX1
 (
FE_PDMA_OFFSET
 + 0x6C)

	)

221 
	#RT5350_SDM_CFG
 (
RT5350_SDM_OFFSET
 + 0x00)

	)

222 
	#RT5350_SDM_RRING
 (
RT5350_SDM_OFFSET
 + 0x04)

	)

223 
	#RT5350_SDM_TRING
 (
RT5350_SDM_OFFSET
 + 0x08)

	)

224 
	#RT5350_SDM_MAC_ADRL
 (
RT5350_SDM_OFFSET
 + 0x0C)

	)

225 
	#RT5350_SDM_MAC_ADRH
 (
RT5350_SDM_OFFSET
 + 0x10)

	)

226 
	#RT5350_SDM_TPCNT
 (
RT5350_SDM_OFFSET
 + 0x100)

	)

227 
	#RT5350_SDM_TBCNT
 (
RT5350_SDM_OFFSET
 + 0x104)

	)

228 
	#RT5350_SDM_RPCNT
 (
RT5350_SDM_OFFSET
 + 0x108)

	)

229 
	#RT5350_SDM_RBCNT
 (
RT5350_SDM_OFFSET
 + 0x10C)

	)

230 
	#RT5350_SDM_CS_ERR
 (
RT5350_SDM_OFFSET
 + 0x110)

	)

232 
	#RT5350_SDM_ICS_EN
 
	`BIT
(16)

	)

233 
	#RT5350_SDM_TCS_EN
 
	`BIT
(17)

	)

234 
	#RT5350_SDM_UCS_EN
 
	`BIT
(18)

	)

237 
	#FE_MDIO_CFG_AUTO_POLL_EN
 
	`BIT
(29)

	)

238 
	#FE_MDIO_CFG_GP1_BP_EN
 
	`BIT
(16)

	)

239 
	#FE_MDIO_CFG_GP1_FRC_EN
 
	`BIT
(15)

	)

240 
	#FE_MDIO_CFG_GP1_SPEED_10
 (0 << 13)

	)

241 
	#FE_MDIO_CFG_GP1_SPEED_100
 (1 << 13)

	)

242 
	#FE_MDIO_CFG_GP1_SPEED_1000
 (2 << 13)

	)

243 
	#FE_MDIO_CFG_GP1_DUPLEX
 
	`BIT
(12)

	)

244 
	#FE_MDIO_CFG_GP1_FC_TX
 
	`BIT
(11)

	)

245 
	#FE_MDIO_CFG_GP1_FC_RX
 
	`BIT
(10)

	)

246 
	#FE_MDIO_CFG_GP1_LNK_DWN
 
	`BIT
(9)

	)

247 
	#FE_MDIO_CFG_GP1_AN_FAIL
 
	`BIT
(8)

	)

248 
	#FE_MDIO_CFG_MDC_CLK_DIV_1
 (0 << 6)

	)

249 
	#FE_MDIO_CFG_MDC_CLK_DIV_2
 (1 << 6)

	)

250 
	#FE_MDIO_CFG_MDC_CLK_DIV_4
 (2 << 6)

	)

251 
	#FE_MDIO_CFG_MDC_CLK_DIV_8
 (3 << 6)

	)

252 
	#FE_MDIO_CFG_TURBO_MII_FREQ
 
	`BIT
(5)

	)

253 
	#FE_MDIO_CFG_TURBO_MII_MODE
 
	`BIT
(4)

	)

254 
	#FE_MDIO_CFG_RX_CLK_SKEW_0
 (0 << 2)

	)

255 
	#FE_MDIO_CFG_RX_CLK_SKEW_200
 (1 << 2)

	)

256 
	#FE_MDIO_CFG_RX_CLK_SKEW_400
 (2 << 2)

	)

257 
	#FE_MDIO_CFG_RX_CLK_SKEW_INV
 (3 << 2)

	)

258 
	#FE_MDIO_CFG_TX_CLK_SKEW_0
 0

	)

259 
	#FE_MDIO_CFG_TX_CLK_SKEW_200
 1

	)

260 
	#FE_MDIO_CFG_TX_CLK_SKEW_400
 2

	)

261 
	#FE_MDIO_CFG_TX_CLK_SKEW_INV
 3

	)

264 
	#FE_GDM1_JMB_LEN_MASK
 0xf

	)

265 
	#FE_GDM1_JMB_LEN_SHIFT
 28

	)

266 
	#FE_GDM1_ICS_EN
 
	`BIT
(22)

	)

267 
	#FE_GDM1_TCS_EN
 
	`BIT
(21)

	)

268 
	#FE_GDM1_UCS_EN
 
	`BIT
(20)

	)

269 
	#FE_GDM1_JMB_EN
 
	`BIT
(19)

	)

270 
	#FE_GDM1_STRPCRC
 
	`BIT
(16)

	)

271 
	#FE_GDM1_UFRC_P_CPU
 (0 << 12)

	)

272 
	#FE_GDM1_UFRC_P_GDMA1
 (1 << 12)

	)

273 
	#FE_GDM1_UFRC_P_PPE
 (6 << 12)

	)

276 
	#FE_ICS_GEN_EN
 
	`BIT
(2)

	)

277 
	#FE_UCS_GEN_EN
 
	`BIT
(1)

	)

278 
	#FE_TCS_GEN_EN
 
	`BIT
(0)

	)

281 
	#FE_PST_DRX_IDX0
 
	`BIT
(16)

	)

282 
	#FE_PST_DTX_IDX3
 
	`BIT
(3)

	)

283 
	#FE_PST_DTX_IDX2
 
	`BIT
(2)

	)

284 
	#FE_PST_DTX_IDX1
 
	`BIT
(1)

	)

285 
	#FE_PST_DTX_IDX0
 
	`BIT
(0)

	)

287 
	#FE_RX_2B_OFFSET
 
	`BIT
(31)

	)

288 
	#FE_TX_WB_DDONE
 
	`BIT
(6)

	)

289 
	#FE_RX_DMA_BUSY
 
	`BIT
(3)

	)

290 
	#FE_TX_DMA_BUSY
 
	`BIT
(1)

	)

291 
	#FE_RX_DMA_EN
 
	`BIT
(2)

	)

292 
	#FE_TX_DMA_EN
 
	`BIT
(0)

	)

294 
	#FE_PDMA_SIZE_4DWORDS
 (0 << 4)

	)

295 
	#FE_PDMA_SIZE_8DWORDS
 (1 << 4)

	)

296 
	#FE_PDMA_SIZE_16DWORDS
 (2 << 4)

	)

298 
	#FE_US_CYC_CNT_MASK
 0xff

	)

299 
	#FE_US_CYC_CNT_SHIFT
 0x8

	)

300 
	#FE_US_CYC_CNT_DIVISOR
 1000000

	)

303 
	#RX_DMA_DONE
 
	`BIT
(31)

	)

304 
	#RX_DMA_LSO
 
	`BIT
(30)

	)

305 
	#RX_DMA_PLEN0
(
_x
Ë(((_xË& 0x3fffË<< 16)

	)

306 
	#RX_DMA_GET_PLEN0
(
_x
Ë(((_xË>> 16Ë& 0x3fff)

	)

307 
	#RX_DMA_TAG
 
	`BIT
(15)

	)

309 
	#RX_DMA_TPID
(
_x
Ë(((_xË>> 16Ë& 0xffff)

	)

310 
	#RX_DMA_VID
(
_x
Ë((_xË& 0xffff)

	)

312 
	#RX_DMA_L4VALID
 
	`BIT
(30)

	)

314 
	s„_rx_dma
 {

315 
	mrxd1
;

316 
	mrxd2
;

317 
	mrxd3
;

318 
	mrxd4
;

319 } 
__∑cked
 
__Æig√d
(4);

321 
	#TX_DMA_BUF_LEN
 0x3fff

	)

322 
	#TX_DMA_PLEN0_MASK
 (
TX_DMA_BUF_LEN
 << 16)

	)

323 
	#TX_DMA_PLEN0
(
_x
Ë(((_xË& 
TX_DMA_BUF_LEN
Ë<< 16)

	)

324 
	#TX_DMA_PLEN1
(
_x
Ë((_xË& 
TX_DMA_BUF_LEN
)

	)

325 
	#TX_DMA_GET_PLEN0
(
_x
Ë(((_xË>> 16Ë& 
TX_DMA_BUF_LEN
)

	)

326 
	#TX_DMA_GET_PLEN1
(
_x
Ë((_xË& 
TX_DMA_BUF_LEN
)

	)

327 
	#TX_DMA_LS1
 
	`BIT
(14)

	)

328 
	#TX_DMA_LS0
 
	`BIT
(30)

	)

329 
	#TX_DMA_DONE
 
	`BIT
(31)

	)

331 
	#TX_DMA_INS_VLAN_MT7621
 
	`BIT
(16)

	)

332 
	#TX_DMA_INS_VLAN
 
	`BIT
(7)

	)

333 
	#TX_DMA_INS_PPPOE
 
	`BIT
(12)

	)

334 
	#TX_DMA_QN
(
_x
Ë((_xË<< 16)

	)

335 
	#TX_DMA_PN
(
_x
Ë((_xË<< 24)

	)

336 
	#TX_DMA_QN_MASK
 
	`TX_DMA_QN
(0x7)

	)

337 
	#TX_DMA_PN_MASK
 
	`TX_DMA_PN
(0x7)

	)

338 
	#TX_DMA_UDF
 
	`BIT
(20)

	)

339 
	#TX_DMA_CHKSUM
 (0x7 << 29)

	)

340 
	#TX_DMA_TSO
 
	`BIT
(28)

	)

343 
	#FE_PPE_AC_BCNT0
 (
FE_CMTABLE_OFFSET
 + 0x00)

	)

344 
	#FE_GDMA1_TX_GBCNT
 (
FE_CMTABLE_OFFSET
 + 0x300)

	)

345 
	#FE_GDMA2_TX_GBCNT
 (
FE_GDMA1_TX_GBCNT
 + 0x40)

	)

348 
	#FE_PHY_FLAG_PORT
 
	`BIT
(0)

	)

349 
	#FE_PHY_FLAG_ATTACH
 
	`BIT
(1)

	)

351 
	s„_tx_dma
 {

352 
	mtxd1
;

353 
	mtxd2
;

354 
	mtxd3
;

355 
	mtxd4
;

356 } 
__∑cked
 
__Æig√d
(4);

358 
	g„_¥iv
;

360 
	s„_phy
 {

362 
•ölock_t
 
	mlock
;

364 
phy_devi˚
 *
	mphy
[8];

365 
devi˚_node
 *
	mphy_node
[8];

366 c⁄° 
__be32
 *
	mphy_fixed
[8];

367 
	mdu∂ex
[8];

368 
	m•ìd
[8];

369 
	mtx_fc
[8];

370 
	mrx_fc
[8];

371 (*
	mc⁄√˘
)(
„_¥iv
 *
	m¥iv
);

372 (*
	mdisc⁄√˘
)(
„_¥iv
 *
	m¥iv
);

373 (*
	m°¨t
)(
„_¥iv
 *
	m¥iv
);

374 (*
	m°›
)(
„_¥iv
 *
	m¥iv
);

377 
	s„_soc_d©a
 {

378 c⁄° 
u16
 *
	mªg_èbÀ
;

380 (*
	möô_d©a
)(
„_soc_d©a
 *
	md©a
, 
√t_devi˚
 *
	m√tdev
);

381 (*
	mª£t_„
)();

382 (*
	m£t_mac
)(
„_¥iv
 *
	m¥iv
, *
	mmac
);

383 (*
	mfwd_c⁄fig
)(
„_¥iv
 *
	m¥iv
);

384 (*
	mtx_dma
)(
„_tx_dma
 *
	mtxd
);

385 (*
	mswôch_öô
)(
„_¥iv
 *
	m¥iv
);

386 (*
	mswôch_c⁄fig
)(
„_¥iv
 *
	m¥iv
);

387 (*
	mp‹t_öô
)(
„_¥iv
 *
	m¥iv
, 
devi˚_node
 *
	mp‹t
);

388 (*
	mhas_ˇºõr
)(
„_¥iv
 *
	m¥iv
);

389 (*
	mmdio_öô
)(
„_¥iv
 *
	m¥iv
);

390 (*
	mmdio_˛ónup
)(
„_¥iv
 *
	m¥iv
);

391 (*
	mmdio_wrôe
)(
mii_bus
 *
	mbus
, 
	mphy_addr
, 
	mphy_ªg
,

392 
u16
 
	mvÆ
);

393 (*
	mmdio_ªad
)(
mii_bus
 *
	mbus
, 
	mphy_addr
, 
	mphy_ªg
);

394 (*
	mmdio_adju°_lök
)(
„_¥iv
 *
	m¥iv
, 
	mp‹t
);

396 *
	msw¥iv
;

397 
u32
 
	mpdma_glo_cfg
;

398 
u32
 
	mrx_öt
;

399 
u32
 
	mtx_öt
;

400 
u32
 
	m°©us_öt
;

401 
u32
 
	mchecksum_bô
;

404 
	#FE_FLAG_PADDING_64B
 
	`BIT
(0)

	)

405 
	#FE_FLAG_PADDING_BUG
 
	`BIT
(1)

	)

406 
	#FE_FLAG_JUMBO_FRAME
 
	`BIT
(2)

	)

407 
	#FE_FLAG_RX_2B_OFFSET
 
	`BIT
(3)

	)

408 
	#FE_FLAG_RX_SG_DMA
 
	`BIT
(4)

	)

409 
	#FE_FLAG_RX_VLAN_CTAG
 
	`BIT
(5)

	)

410 
	#FE_FLAG_NAPI_WEIGHT
 
	`BIT
(6)

	)

411 
	#FE_FLAG_CALIBRATE_CLK
 
	`BIT
(7)

	)

412 
	#FE_FLAG_HAS_SWITCH
 
	`BIT
(8)

	)

414 
	#FE_STAT_REG_DECLARE
 \

415 
	`_FE
(
tx_byãs
) \

416 
	`_FE
(
tx_∑ckës
) \

417 
	`_FE
(
tx_skù
) \

418 
	`_FE
(
tx_cﬁlisi⁄s
) \

419 
	`_FE
(
rx_byãs
) \

420 
	`_FE
(
rx_∑ckës
) \

421 
	`_FE
(
rx_ovîÊow
) \

422 
	`_FE
(
rx_fcs_îr‹s
) \

423 
	`_FE
(
rx_sh‹t_îr‹s
) \

424 
	`_FE
(
rx_l⁄g_îr‹s
) \

425 
	`_FE
(
rx_checksum_îr‹s
) \

426 
	`_FE
(
rx_Êow_c⁄åﬁ_∑ckës
)

	)

428 
	s„_hw_°©s
 {

430 
•ölock_t
 
	m°©s_lock
;

432 
u64_°©s_sync
 
	msyn˝
;

433 
	#_FE
(
x
Ë
u64
 x;

	)

434 
	mFE_STAT_REG_DECLARE


435 #unde‡
_FE


438 
	s„_tx_buf
 {

439 
sk_buff
 *
	mskb
;

440 
DEFINE_DMA_UNMAP_ADDR
(
dma_addr0
);

441 
DEFINE_DMA_UNMAP_ADDR
(
dma_addr1
);

442 
u16
 
	mdma_Àn0
;

443 
u16
 
	mdma_Àn1
;

446 
	s„_tx_rög
 {

447 
„_tx_dma
 *
	mtx_dma
;

448 
„_tx_buf
 *
	mtx_buf
;

449 
dma_addr_t
 
	mtx_phys
;

450 
u16
 
	mtx_rög_size
;

451 
u16
 
	mtx_‰ì_idx
;

452 
u16
 
	mtx_√xt_idx
;

453 
u16
 
	mtx_thªsh
;

456 
	s„_rx_rög
 {

457 
∑ge_‰ag_ˇche
 
	m‰ag_ˇche
;

458 
„_rx_dma
 *
	mrx_dma
;

459 
u8
 **
	mrx_d©a
;

460 
dma_addr_t
 
	mrx_phys
;

461 
u16
 
	mrx_rög_size
;

462 
u16
 
	m‰ag_size
;

463 
u16
 
	mrx_buf_size
;

464 
u16
 
	mrx_ˇlc_idx
;

467 
	s„_¥iv
 {

469 
•ölock_t
 
	m∑ge_lock
;

471 
„_soc_d©a
 *
	msoc
;

472 
√t_devi˚
 *
	m√tdev
;

473 
devi˚_node
 *
	mswôch_≈
;

474 
u32
 
	mmsg_íabÀ
;

475 
u32
 
	mÊags
;

477 
devi˚
 *
	mdev
;

478 
	msys˛k
;

480 
„_rx_rög
 
	mrx_rög
;

481 
«pi_°ru˘
 
	mrx_«pi
;

483 
„_tx_rög
 
	mtx_rög
;

485 
„_phy
 *
	mphy
;

486 
mii_bus
 *
	mmii_bus
;

487 
phy_devi˚
 *
	mphy_dev
;

488 
u32
 
	mphy_Êags
;

490 
	mlök
[8];

492 
„_hw_°©s
 *
	mhw_°©s
;

493 
	mvœn_m≠
;

494 
w‹k_°ru˘
 
	m≥ndög_w‹k
;

495 
DECLARE_BITMAP
(
≥ndög_Êags
, 
FE_FLAG_MAX
);

497 
ª£t_c⁄åﬁ
 *
	mr°_µe
;

498 
mtk_f€_íåy
 *
	mf€_èbÀ
;

499 
dma_addr_t
 
	mf€_èbÀ_phys
;

500 
Êow_ofÊﬂd
 
__rcu
 **
	mf€_Êow_èbÀ
;

503 c⁄° 
of_devi˚_id
 
of_„_m©ch
[];

505 
„_w32
(
u32
 
vÆ
, 
ªg
);

506 
„_m32
(
„_¥iv
 *
¥iv
, 
u32
 
˛ór
, u32 
£t
, 
ªg
);

507 
u32
 
„_r32
(
ªg
);

509 
„_£t_˛ock_cy˛e
(
„_¥iv
 *
¥iv
);

510 
„_csum_c⁄fig
(
„_¥iv
 *
¥iv
);

511 
„_°©s_upd©e
(
„_¥iv
 *
¥iv
);

512 
„_fwd_c⁄fig
(
„_¥iv
 *
¥iv
);

513 
„_ªg_w32
(
u32
 
vÆ
, 
„_ªg
 
ªg
);

514 
u32
 
„_ªg_r32
(
„_ªg
 
ªg
);

516 
„_ª£t
(
u32
 
ª£t_bôs
);

518 
ölöe
 *
	$¥iv_√tdev
(
„_¥iv
 *
¥iv
)

520  (*)
¥iv
 - 
	`ALIGN
((
√t_devi˚
), 
NETDEV_ALIGN
);

521 
	}
}

523 
mtk_µe_¥obe
(
„_¥iv
 *
ëh
);

524 
mtk_µe_ªmove
(
„_¥iv
 *
ëh
);

525 
mtk_Êow_ofÊﬂd
(
„_¥iv
 *
ëh
,

526 
Êow_ofÊﬂd_ty≥
 
ty≥
,

527 
Êow_ofÊﬂd
 *
Êow
,

528 
Êow_ofÊﬂd_hw_∑th
 *
§c
,

529 
Êow_ofÊﬂd_hw_∑th
 *
de°
);

530 
mtk_ofÊﬂd_check_rx
(
„_¥iv
 *
ëh
, 
sk_buff
 *
skb
, 
u32
 
rxd4
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_offload.c

13 
	~"mtk_ofÊﬂd.h
"

15 
	#INVALID
 0

	)

16 
	#UNBIND
 1

	)

17 
	#BIND
 2

	)

18 
	#FIN
 3

	)

20 
	#IPV4_HNAPT
 0

	)

21 
	#IPV4_HNAT
 1

	)

23 
u32


24 
	$mtk_Êow_hash_v4
(
Êow_ofÊﬂd_tu∂e
 *
tu∂e
)

26 
u32
 
p‹ts
 = 
	`¡ohs
(
tu∂e
->
§c_p‹t
Ë<< 16 |Çtohs—u∂e->
d°_p‹t
);

27 
u32
 
§c
 = 
	`¡ohl
(
tu∂e
->
d°_v4
.
s_addr
);

28 
u32
 
d°
 = 
	`¡ohl
(
tu∂e
->
§c_v4
.
s_addr
);

29 
u32
 
hash
 = (
p‹ts
 & 
§c
Ë| ((~p‹tsË& 
d°
);

30 
u32
 
hash_23_0
 = 
hash
 & 0xffffff;

31 
u32
 
hash_31_24
 = 
hash
 & 0xff000000;

33 
hash
 = 
p‹ts
 ^ 
§c
 ^ 
d°
 ^ ((
hash_23_0
 << 8Ë| (
hash_31_24
 >> 24));

34 
hash
 = ((hash & 0xffff0000) >> 16 ) ^ (hash & 0xfffff);

35 
hash
 &= 0x7ff;

36 
hash
 *= 2;;

38  
hash
;

39 
	}
}

42 
	$mtk_f€_¥ï¨e_v4
(
mtk_f€_íåy
 *
íåy
,

43 
Êow_ofÊﬂd_tu∂e
 *
tu∂e
,

44 
Êow_ofÊﬂd_tu∂e
 *
de°_tu∂e
,

45 
Êow_ofÊﬂd_hw_∑th
 *
§c
,

46 
Êow_ofÊﬂd_hw_∑th
 *
de°
)

48 
is_mˇ°
 = !!
	`is_mu…iˇ°_ëhî_addr
(
de°
->
ëh_de°
);

50 i‡(
tu∂e
->
l4¥Ÿo
 =
IPPROTO_UDP
)

51 
íåy
->
ùv4_h«±
.
bfib1
.
udp
 = 1;

53 
íåy
->
ùv4_h«±
.
ëy≥
 = 
	`ht⁄s
(
ETH_P_IP
);

54 
íåy
->
ùv4_h«±
.
bfib1
.
pkt_ty≥
 = 
IPV4_HNAPT
;

55 
íåy
->
ùv4_h«±
.
iblk2
.
fqos
 = 0;

56 
íåy
->
ùv4_h«±
.
bfib1
.
âl
 = 1;

57 
íåy
->
ùv4_h«±
.
bfib1
.
ˇh
 = 1;

58 
íåy
->
ùv4_h«±
.
bfib1
.
ka
 = 1;

59 
íåy
->
ùv4_h«±
.
iblk2
.
mˇ°
 = 
is_mˇ°
;

60 
íåy
->
ùv4_h«±
.
iblk2
.
ds˝
 = 0;

61 
íåy
->
ùv4_h«±
.
iblk2
.
p‹t_mg
 = 0x3f;

62 
íåy
->
ùv4_h«±
.
iblk2
.
p‹t_ag
 = 0x1f;

63 #ifde‡
CONFIG_NET_MEDIATEK_HW_QOS


64 
íåy
->
ùv4_h«±
.
iblk2
.
qid
 = 1;

65 
íåy
->
ùv4_h«±
.
iblk2
.
fqos
 = 1;

67 #ifde‡
CONFIG_RALINK


68 
íåy
->
ùv4_h«±
.
iblk2
.
dp
 = 1;

69 i‡((
de°
->
Êags
 & 
FLOW_OFFLOAD_PATH_VLAN
Ë&& (de°->
vœn_id
 > 1))

70 
íåy
->
ùv4_h«±
.
iblk2
.
qid
 += 8;

72 
íåy
->
ùv4_h«±
.
iblk2
.
dp
 = (
de°
->
dev
->
«me
[3] - '0') + 1;

75 
íåy
->
ùv4_h«±
.
sù
 = 
	`¡ohl
(
tu∂e
->
§c_v4
.
s_addr
);

76 
íåy
->
ùv4_h«±
.
dù
 = 
	`¡ohl
(
tu∂e
->
d°_v4
.
s_addr
);

77 
íåy
->
ùv4_h«±
.
•‹t
 = 
	`¡ohs
(
tu∂e
->
§c_p‹t
);

78 
íåy
->
ùv4_h«±
.
dp‹t
 = 
	`¡ohs
(
tu∂e
->
d°_p‹t
);

80 
íåy
->
ùv4_h«±
.
√w_sù
 = 
	`¡ohl
(
de°_tu∂e
->
d°_v4
.
s_addr
);

81 
íåy
->
ùv4_h«±
.
√w_dù
 = 
	`¡ohl
(
de°_tu∂e
->
§c_v4
.
s_addr
);

82 
íåy
->
ùv4_h«±
.
√w_•‹t
 = 
	`¡ohs
(
de°_tu∂e
->
d°_p‹t
);

83 
íåy
->
ùv4_h«±
.
√w_dp‹t
 = 
	`¡ohs
(
de°_tu∂e
->
§c_p‹t
);

85 
íåy
->
bfib1
.
°©e
 = 
BIND
;

87 i‡(
de°
->
Êags
 & 
FLOW_OFFLOAD_PATH_PPPOE
) {

88 
íåy
->
bfib1
.
p¢
 = 1;

89 
íåy
->
ùv4_h«±
.
ëy≥
 = 
	`ht⁄s
(
ETH_P_PPP_SES
);

90 
íåy
->
ùv4_h«±
.
µp€_id
 = 
de°
->
µp€_sid
;

93 i‡(
de°
->
Êags
 & 
FLOW_OFFLOAD_PATH_VLAN
) {

94 
íåy
->
ùv4_h«±
.
vœn1
 = 
de°
->
vœn_id
;

95 
íåy
->
bfib1
.
vœn_œyî
 = 1;

97 
de°
->
vœn_¥Ÿo
) {

98 
	`ht⁄s
(
ETH_P_8021Q
):

99 
íåy
->
ùv4_h«±
.
bfib1
.
vpm
 = 1;

101 
	`ht⁄s
(
ETH_P_8021AD
):

102 
íåy
->
ùv4_h«±
.
bfib1
.
vpm
 = 2;

105  -
EINVAL
;

110 
	}
}

113 
	$mtk_f€_£t_mac
(
mtk_f€_íåy
 *
íåy
, 
u8
 *
smac
, u8 *
dmac
)

115 
íåy
->
ùv4_h«±
.
dmac_hi
 = 
	`swab32
(*((
u32
*Ë
dmac
));

116 
íåy
->
ùv4_h«±
.
dmac_lo
 = 
	`swab16
(*((
u16
*Ë&
dmac
[4]));

117 
íåy
->
ùv4_h«±
.
smac_hi
 = 
	`swab32
(*((
u32
*Ë
smac
));

118 
íåy
->
ùv4_h«±
.
smac_lo
 = 
	`swab16
(*((
u16
*Ë&
smac
[4]));

119 
	}
}

122 
	$mtk_check_íåy_avaûabÀ
(
mtk_ëh
 *
ëh
, 
u32
 
hash
)

124 
mtk_f€_íåy
 
íåy
 = ((mtk_f€_íåy *)
ëh
->
f€_èbÀ
)[
hash
];

126  (
íåy
.
bfib1
.
°©e
 =
BIND
)? 0:1;

127 
	}
}

130 
	$mtk_f€_wrôe
(
mtk_ëh
 *
ëh
, 
u32
 
hash
,

131 
mtk_f€_íåy
 *
íåy
)

133 
mtk_f€_íåy
 *
èbÀ
 = (mtk_f€_íåy *)
ëh
->
f€_èbÀ
;

135 
	`mem˝y
(&
èbÀ
[
hash
], 
íåy
, (*entry));

136 
	}
}

138 
	$mtk_Êow_ofÊﬂd
(
mtk_ëh
 *
ëh
,

139 
Êow_ofÊﬂd_ty≥
 
ty≥
,

140 
Êow_ofÊﬂd
 *
Êow
,

141 
Êow_ofÊﬂd_hw_∑th
 *
§c
,

142 
Êow_ofÊﬂd_hw_∑th
 *
de°
)

144 
Êow_ofÊﬂd_tu∂e
 *
Ÿu∂e
 = &
Êow
->
tu∂ehash
[
FLOW_OFFLOAD_DIR_ORIGINAL
].
tu∂e
;

145 
Êow_ofÊﬂd_tu∂e
 *
πu∂e
 = &
Êow
->
tu∂ehash
[
FLOW_OFFLOAD_DIR_REPLY
].
tu∂e
;

146 
u32
 
time_°amp
 = 
	`mtk_r32
(
ëh
, 0x0010) & (0x7fff);

147 
u32
 
ohash
, 
rhash
;

148 
mtk_f€_íåy
 
‹ig
 = {

149 .
bfib1
.
time_°amp
 =Åime_stamp,

150 .
bfib1
.
p¢
 = 0,

152 
mtk_f€_íåy
 
ª∂y
 = {

153 .
bfib1
.
time_°amp
 =Åime_stamp,

154 .
bfib1
.
p¢
 = 0,

157 i‡(
Ÿu∂e
->
l4¥Ÿo
 !
IPPROTO_TCP
 && otu∂e->l4¥Ÿÿ!
IPPROTO_UDP
)

158  -
EINVAL
;

160 i‡(
ty≥
 =
FLOW_OFFLOAD_DEL
) {

161 
Êow
 = 
NULL
;

162 
	`synchr⁄ize_rcu
();

166 
Ÿu∂e
->
l3¥Ÿo
) {

167 
AF_INET
:

168 i‡(
	`mtk_f€_¥ï¨e_v4
(&
‹ig
, 
Ÿu∂e
, 
πu∂e
, 
§c
, 
de°
) ||

169 
	`mtk_f€_¥ï¨e_v4
(&
ª∂y
, 
πu∂e
, 
Ÿu∂e
, 
de°
, 
§c
))

170  -
EINVAL
;

172 
ohash
 = 
	`mtk_Êow_hash_v4
(
Ÿu∂e
);

173 
rhash
 = 
	`mtk_Êow_hash_v4
(
πu∂e
);

176 
AF_INET6
:

177  -
EINVAL
;

180  -
EINVAL
;

184 i‡(!
	`mtk_check_íåy_avaûabÀ
(
ëh
, 
ohash
)){

185 i‡(!
	`mtk_check_íåy_avaûabÀ
(
ëh
, 
ohash
 + 1))

186  -
EINVAL
;

187 
ohash
 += 1;

189 i‡(!
	`mtk_check_íåy_avaûabÀ
(
ëh
, 
rhash
)){

190 i‡(!
	`mtk_check_íåy_avaûabÀ
(
ëh
, 
rhash
 + 1))

191  -
EINVAL
;

192 
rhash
 += 1;

195 
	`mtk_f€_£t_mac
(&
‹ig
, 
de°
->
ëh_§c
, de°->
ëh_de°
);

196 
	`mtk_f€_£t_mac
(&
ª∂y
, 
§c
->
ëh_§c
, src->
ëh_de°
);

197 
	`mtk_f€_wrôe
(
ëh
, 
ohash
, &
‹ig
);

198 
	`mtk_f€_wrôe
(
ëh
, 
rhash
, &
ª∂y
);

199 
	`rcu_assign_poöãr
(
ëh
->
f€_Êow_èbÀ
[
ohash
], 
Êow
);

200 
	`rcu_assign_poöãr
(
ëh
->
f€_Êow_èbÀ
[
rhash
], 
Êow
);

203 
	}
}

205 #ifde‡
CONFIG_NET_MEDIATEK_HW_QOS


207 
	#QDMA_TX_SCH_TX
 0x1a14

	)

209 
	$mtk_µe_scheduÀr
(
mtk_ëh
 *
ëh
, 
id
, 
u32
 
øã
)

211 
exp
 = 0, 
shi·
 = 0;

212 
u32
 
ªg
 = 
	`mtk_r32
(
ëh
, 
QDMA_TX_SCH_TX
);

213 
u32
 
vÆ
 = 0;

215 i‡(
øã
)

216 
vÆ
 = 
	`BIT
(11);

218 
øã
 > 127) {

219 
øã
 /= 10;

220 
exp
++;

223 
vÆ
 |(
øã
 & 0x7f) << 4;

224 
vÆ
 |
exp
 & 0xf;

225 i‡(
id
)

226 
shi·
 = 16;

227 
ªg
 &~(0xfff‡<< 
shi·
);

228 
ªg
 |
vÆ
 << 
shi·
;

229 
	`mtk_w32
(
ëh
, 
vÆ
, 
QDMA_TX_SCH_TX
);

230 
	}
}

232 
	#QTX_CFG
(
x
Ë(0x1800 + (x * 0x10))

	)

233 
	#QTX_SCH
(
x
Ë(0x1804 + (x * 0x10))

	)

235 
	$mtk_µe_queue
(
mtk_ëh
 *
ëh
, 
id
, 
sched
, 
weight
, 
ªsv
, 
u32
 
mö_øã
, u32 
max_øã
)

237 
max_exp
 = 0, 
mö_exp
 = 0;

238 
u32
 
ªg
;

240 i‡(
id
 >= 16)

243 
ªg
 = 
	`mtk_r32
(
ëh
, 
	`QTX_SCH
(
id
));

244 
ªg
 &= 0x70000000;

246 i‡(
sched
)

247 
ªg
 |
	`BIT
(31);

249 i‡(
mö_øã
)

250 
ªg
 |
	`BIT
(27);

252 i‡(
max_øã
)

253 
ªg
 |
	`BIT
(11);

255 
max_øã
 > 127) {

256 
max_øã
 /= 10;

257 
max_exp
++;

260 
mö_øã
 > 127) {

261 
mö_øã
 /= 10;

262 
mö_exp
++;

265 
ªg
 |(
mö_øã
 & 0x7f) << 20;

266 
ªg
 |(
mö_exp
 & 0xf) << 16;

267 
ªg
 |(
weight
 & 0xf) << 12;

268 
ªg
 |(
max_øã
 & 0x7f) << 4;

269 
ªg
 |
max_exp
 & 0xf;

270 
	`mtk_w32
(
ëh
, 
ªg
, 
	`QTX_SCH
(
id
));

272 
ªsv
 &= 0xff;

273 
ªg
 = 
	`mtk_r32
(
ëh
, 
	`QTX_CFG
(
id
));

274 
ªg
 &= 0xffff0000;

275 
ªg
 |(
ªsv
 << 8) |Ñesv;

276 
	`mtk_w32
(
ëh
, 
ªg
, 
	`QTX_CFG
(
id
));

277 
	}
}

280 
	$mtk_öô_f€_èbÀ
(
mtk_ëh
 *
ëh
)

282 i‡(
ëh
->
f€_èbÀ
)

285 
ëh
->
f€_Êow_èbÀ
 = 
	`devm_kˇŒoc
”th->
dev
, 
MTK_PPE_ENTRY_CNT
,

286 (*
ëh
->
f€_Êow_èbÀ
),

287 
GFP_KERNEL
);

288 i‡(!
ëh
->
f€_Êow_èbÀ
)

289  -
EINVAL
;

292 
ëh
->
f€_èbÀ
 = 
	`dmam_Æloc_cohîít
”th->
dev
, 
MTK_PPE_TBL_SZ
,

293 &
ëh
->
f€_èbÀ_phys
, 
GFP_KERNEL
);

294 i‡(!
ëh
->
f€_èbÀ
) {

295 
	`dev_îr
(
ëh
->
dev
, "failedÅoállocate foeÅable\n");

296 
	`k‰ì
(
ëh
->
f€_Êow_èbÀ
);

297  -
ENOMEM
;

302 
	}
}

304 
	$mtk_µe_°¨t
(
mtk_ëh
 *
ëh
)

306 
ªt
;

308 
ªt
 = 
	`mtk_öô_f€_èbÀ
(
ëh
);

309 i‡(
ªt
)

310  
ªt
;

313 
	`mtk_w32
(
ëh
,Éth->
f€_èbÀ_phys
, 
MTK_REG_PPE_TB_BASE
);

316 
	`mem£t
(
ëh
->
f€_èbÀ
, 0, 
MTK_PPE_TBL_SZ
);

319 
	`mtk_m32
(
ëh
,

320 
MTK_PPE_TB_CFG_HASH_MODE_MASK
 | 
MTK_PPE_TB_CFG_TBL_SZ_MASK
,

321 
MTK_PPE_TB_CFG_HASH_MODE1
 | 
MTK_PPE_TB_CFG_TBL_SZ_4K
,

322 
MTK_REG_PPE_TB_CFG
);

325 
	`mtk_w32
(
ëh
, 
MTK_PPE_HASH_SEED
, 
MTK_REG_PPE_HASH_SEED
);

328 
	`mtk_m32
(
ëh
, 
MTK_PPE_CAH_CTRL_X_MODE
 | 
MTK_PPE_TB_CFG_ENTRY_SZ_MASK
 |

329 
MTK_PPE_TB_CFG_SMA_MASK
,

330 
MTK_PPE_TB_CFG_ENTRY_SZ_64B
 | 
MTK_PPE_TB_CFG_SMA_FWD_CPU
,

331 
MTK_REG_PPE_TB_CFG
);

334 
	`mtk_w32
(
ëh
, 0xFFFFFFFF, 
MTK_REG_PPE_IP_PROT_CHK
);

337 
	`mtk_m32
(
ëh
, 0, 
MTK_PPE_CAH_CTRL_X_MODE
, 
MTK_REG_PPE_CAH_CTRL
);

338 
	`mtk_m32
(
ëh
, 
MTK_PPE_CAH_CTRL_X_MODE
, 
MTK_PPE_CAH_CTRL_EN
,

339 
MTK_REG_PPE_CAH_CTRL
);

342 
	`mtk_m32
(
ëh
, 0, 
MTK_PPE_FLOW_CFG_IPV4_NAT_FRAG_EN
 |

343 
MTK_PPE_FLOW_CFG_IPV4_NAPT_EN
 | 
MTK_PPE_FLOW_CFG_IPV4_NAT_EN
 |

344 
MTK_PPE_FLOW_CFG_IPV4_GREK_EN
,

345 
MTK_REG_PPE_FLOW_CFG
);

348 
	`mtk_m32
(
ëh
, 0,

349 
MTK_PPE_TB_CFG_UNBD_AGE
 | 
MTK_PPE_TB_CFG_NTU_AGE
 |

350 
MTK_PPE_TB_CFG_FIN_AGE
 | 
MTK_PPE_TB_CFG_UDP_AGE
 |

351 
MTK_PPE_TB_CFG_TCP_AGE
,

352 
MTK_REG_PPE_TB_CFG
);

354 
	`mtk_m32
(
ëh
, 
MTK_PPE_UNB_AGE_MNP_MASK
 | 
MTK_PPE_UNB_AGE_DLTA_MASK
,

355 
MTK_PPE_UNB_AGE_MNP
 | 
MTK_PPE_UNB_AGE_DLTA
,

356 
MTK_REG_PPE_UNB_AGE
);

357 
	`mtk_m32
(
ëh
, 
MTK_PPE_BND_AGE0_NTU_DLTA_MASK
 |

358 
MTK_PPE_BND_AGE0_UDP_DLTA_MASK
,

359 
MTK_PPE_BND_AGE0_NTU_DLTA
 | 
MTK_PPE_BND_AGE0_UDP_DLTA
,

360 
MTK_REG_PPE_BND_AGE0
);

361 
	`mtk_m32
(
ëh
, 
MTK_PPE_BND_AGE1_FIN_DLTA_MASK
 |

362 
MTK_PPE_BND_AGE1_TCP_DLTA_MASK
,

363 
MTK_PPE_BND_AGE1_FIN_DLTA
 | 
MTK_PPE_BND_AGE1_TCP_DLTA
,

364 
MTK_REG_PPE_BND_AGE1
);

367 
	`mtk_m32
(
ëh
, 
MTK_PPE_TB_CFG_KA_MASK
, 
MTK_PPE_TB_CFG_KA
,

368 
MTK_REG_PPE_TB_CFG
);

369 
	`mtk_w32
(
ëh
, 
MTK_PPE_KA_UDP
 | 
MTK_PPE_KA_TCP
 | 
MTK_PPE_KA_T
, 
MTK_REG_PPE_KA
);

372 
	`mtk_w32
(
ëh
, (0x3ff‡<< 16Ë| 0x3fff, 
MTK_REG_PPE_BIND_LMT_0
);

373 
	`mtk_w32
(
ëh
, 
MTK_PPE_NTU_KA
 | 0x3fff, 
MTK_REG_PPE_BIND_LMT_1
);

374 
	`mtk_m32
(
ëh
, 
MTK_PPE_BNDR_RATE_MASK
, 1, 
MTK_REG_PPE_BNDR
);

377 
	`mtk_m32
(
ëh
, 0, 
MTK_PPE_GLO_CFG_EN
, 
MTK_REG_PPE_GLO_CFG
);

379 #ifde‡
CONFIG_RALINK


381 
	`mtk_w32
(
ëh
, 0x0, 
MTK_REG_PPE_DFT_CPORT
);

384 
	`mtk_w32
(
ëh
, 0x55555555, 
MTK_REG_PPE_DFT_CPORT
);

388 
	`mtk_m32
(
ëh
, 0, 
MTK_PPE_GLO_CFG_TTL0_DROP
, 
MTK_REG_PPE_GLO_CFG
);

391 
	`mtk_m32
(
ëh
, 0xffff, 0x4444, 
	`MTK_GDMA_FWD_CFG
(0));

392 
	`mtk_m32
(
ëh
, 0xffff, 0x4444, 
	`MTK_GDMA_FWD_CFG
(1));

394 
	`dev_öfo
(
ëh
->
dev
, "PPE started\n");

396 #ifde‡
CONFIG_NET_MEDIATEK_HW_QOS


397 
	`mtk_µe_scheduÀr
(
ëh
, 0, 500000);

398 
	`mtk_µe_scheduÀr
(
ëh
, 1, 500000);

399 
	`mtk_µe_queue
(
ëh
, 0, 0, 7, 32, 250000, 0);

400 
	`mtk_µe_queue
(
ëh
, 1, 0, 7, 32, 250000, 0);

401 
	`mtk_µe_queue
(
ëh
, 8, 1, 7, 32, 250000, 0);

402 
	`mtk_µe_queue
(
ëh
, 9, 1, 7, 32, 250000, 0);

406 
	}
}

408 
	$mtk_µe_busy_waô
(
mtk_ëh
 *
ëh
)

410 
t_°¨t
 = 
jiffõs
;

411 
u32
 
r
 = 0;

414 
r
 = 
	`mtk_r32
(
ëh
, 
MTK_REG_PPE_GLO_CFG
);

415 i‡(!(
r
 & 
MTK_PPE_GLO_CFG_BUSY
))

417 i‡(
	`time_a·î
(
jiffõs
, 
t_°¨t
 + 
HZ
))

419 
	`u¶ìp_ønge
(10, 20);

422 
	`dev_îr
(
ëh
->
dev
, "ppe:Åable busyÅimeout -Ñesetting\n");

423 
	`ª£t_c⁄åﬁ_ª£t
(
ëh
->
r°_µe
);

425  -
ETIMEDOUT
;

426 
	}
}

428 
	$mtk_µe_°›
(
mtk_ëh
 *
ëh
)

430 
u32
 
r1
 = 0, 
r2
 = 0;

431 
i
;

434 
	`mtk_m32
(
ëh
, 0xffff, 0x7777, 
	`MTK_GDMA_FWD_CFG
(0));

435 
	`mtk_m32
(
ëh
, 0xffff, 0x7777, 
	`MTK_GDMA_FWD_CFG
(1));

437 i‡(
	`mtk_µe_busy_waô
(
ëh
))

438  -
ETIMEDOUT
;

441 
i
 = 0; i < 
MTK_PPE_ENTRY_CNT
; i++)

442 
ëh
->
f€_èbÀ
[
i
].
bfib1
.
°©e
 = 
FOE_STATE_INVALID
;

445 
	`mtk_m32
(
ëh
, 0, 
MTK_PPE_CAH_CTRL_X_MODE
, 
MTK_REG_PPE_CAH_CTRL
);

446 
	`mtk_m32
(
ëh
, 
MTK_PPE_CAH_CTRL_X_MODE
 | 
MTK_PPE_CAH_CTRL_EN
, 0,

447 
MTK_REG_PPE_CAH_CTRL
);

450 
	`mtk_m32
(
ëh
, 
MTK_PPE_GLO_CFG_EN
, 0, 
MTK_REG_PPE_GLO_CFG
);

453 
	`mtk_m32
(
ëh
,

454 
MTK_PPE_FLOW_CFG_IPV4_NAT_FRAG_EN
 |

455 
MTK_PPE_FLOW_CFG_IPV4_NAPT_EN
 | 
MTK_PPE_FLOW_CFG_IPV4_NAT_EN
 |

456 
MTK_PPE_FLOW_CFG_FUC_FOE
 | 
MTK_PPE_FLOW_CFG_FMC_FOE
,

457 0, 
MTK_REG_PPE_FLOW_CFG
);

460 
	`mtk_m32
(
ëh
, 0,

461 
MTK_PPE_TB_CFG_FIN_AGE
 | 
MTK_PPE_TB_CFG_UDP_AGE
 |

462 
MTK_PPE_TB_CFG_TCP_AGE
 | 
MTK_PPE_TB_CFG_UNBD_AGE
 |

463 
MTK_PPE_TB_CFG_NTU_AGE
, 
MTK_REG_PPE_TB_CFG
);

465 
r1
 = 
	`mtk_r32
(
ëh
, 0x100);

466 
r2
 = 
	`mtk_r32
(
ëh
, 0x10c);

468 
	`dev_öfo
(
ëh
->
dev
, "0x100 = 0x%x, 0x10¯0x%x\n", 
r1
, 
r2
);

470 i‡(((
r1
 & 0xff00) >> 0x8) >= (r1 & 0xff) ||

471 ((
r1
 & 0xff00Ë>> 0x8Ë>(
r2
 & 0xff)) {

472 
	`dev_öfo
(
ëh
->
dev
, "resetÖse\n");

473 
	`mtk_w32
(
ëh
, 0x1, 0x4);

477 
	`mtk_w32
(
ëh
, 0, 
MTK_REG_PPE_TB_BASE
);

479 i‡(
	`mtk_µe_busy_waô
(
ëh
))

480  -
ETIMEDOUT
;

483 #ifde‡
CONFIG_RALINK


484 
	`mtk_m32
(
ëh
, 0xffff, 0x0, 
	`MTK_GDMA_FWD_CFG
(0));

485 
	`mtk_m32
(
ëh
, 0xffff, 0x0, 
	`MTK_GDMA_FWD_CFG
(1));

487 
	`mtk_m32
(
ëh
, 0xffff, 0x5555, 
	`MTK_GDMA_FWD_CFG
(0));

488 
	`mtk_m32
(
ëh
, 0xffff, 0x5555, 
	`MTK_GDMA_FWD_CFG
(1));

491 
	}
}

493 
	$mtk_ofÊﬂd_kì∑live
(
„_¥iv
 *
ëh
, 
hash
)

495 
Êow_ofÊﬂd
 *
Êow
;

497 
	`rcu_ªad_lock
();

498 
Êow
 = 
	`rcu_dîe„ªn˚
(
ëh
->
f€_Êow_èbÀ
[
hash
]);

499 i‡(
Êow
)

500 
Êow
->
timeout
 = 
jiffõs
 + 30 * 
HZ
;

501 
	`rcu_ªad_u∆ock
();

502 
	}
}

504 
	$mtk_ofÊﬂd_check_rx
(
„_¥iv
 *
ëh
, 
sk_buff
 *
skb
, 
u32
 
rxd4
)

506 
hash
;

508 
	`FIELD_GET
(
MTK_RXD4_CPU_REASON
, 
rxd4
)) {

509 
MTK_CPU_REASON_KEEPALIVE_UC_OLD_HDR
:

510 
MTK_CPU_REASON_KEEPALIVE_MC_NEW_HDR
:

511 
MTK_CPU_REASON_KEEPALIVE_DUP_OLD_HDR
:

512 
hash
 = 
	`FIELD_GET
(
MTK_RXD4_FOE_ENTRY
, 
rxd4
);

513 
	`mtk_ofÊﬂd_kì∑live
(
ëh
, 
hash
);

515 
MTK_CPU_REASON_PACKET_SAMPLING
:

520 
	}
}

522 
	$mtk_µe_¥obe
(
mtk_ëh
 *
ëh
)

524 
îr
;

526 
îr
 = 
	`mtk_µe_°¨t
(
ëh
);

527 i‡(
îr
)

528  
îr
;

530 
îr
 = 
	`mtk_µe_debugfs_öô
(
ëh
);

531 i‡(
îr
)

532  
îr
;

535 
	}
}

537 
	$mtk_µe_ªmove
(
mtk_ëh
 *
ëh
)

539 
	`mtk_µe_°›
(
ëh
);

540 
	}
}

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_offload.h

14 
	~<löux/dma-m≠pög.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/if.h
>

17 
	~<löux/io.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/of_devi˚.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/ª£t.h
>

22 
	~<löux/√tfûãr.h
>

23 
	~<löux/√tdevi˚.h
>

24 
	~<√t/√tfûãr/nf_Êow_èbÀ.h
>

25 
	~<löux/debugfs.h
>

26 
	~<löux/ëhîdevi˚.h
>

27 
	~<löux/bôfõld.h
>

29 
	~"mtk_ëh_soc.h
"

31 #ifde‡
CONFIG_RALINK


33 
	#mtk_ëh
 
„_¥iv


	)

34 
	#MTK_GDMA_FWD_CFG
(
x
Ë(0x500 + (x * 0x1000))

	)

35 
	#mtk_m32
 
„_m32


	)

37 
ölöe
 
u32


38 
	$mtk_r32
(
mtk_ëh
 *
ëh
, 
u32
 
ªg
)

40  
	`„_r32
(
ªg
);

41 
	}
}

43 
ölöe
 

44 
	$mtk_w32
(
mtk_ëh
 *
ëh
, 
u32
 
vÆ
, u32 
ªg
)

46 
	`„_w32
(
vÆ
, 
ªg
);

47 
	}
}

50 
	#MTK_REG_PPE_GLO_CFG
 0xe00

	)

51 
	#MTK_PPE_GLO_CFG_BUSY
 
	`BIT
(31)

	)

52 
	#MTK_PPE_GLO_CFG_TTL0_DROP
 
	`BIT
(4)

	)

53 
	#MTK_PPE_GLO_CFG_EN
 
	`BIT
(0)

	)

55 
	#MTK_REG_PPE_FLOW_CFG
 0xe04

	)

56 
	#MTK_PPE_FLOW_CFG_IPV4_GREK_EN
 
	`BIT
(19)

	)

57 
	#MTK_PPE_FLOW_CFG_IPV4_NAT_FRAG_EN
 
	`BIT
(17)

	)

58 
	#MTK_PPE_FLOW_CFG_IPV4_NAPT_EN
 
	`BIT
(13)

	)

59 
	#MTK_PPE_FLOW_CFG_IPV4_NAT_EN
 
	`BIT
(12)

	)

60 
	#MTK_PPE_FLOW_CFG_FUC_FOE
 
	`BIT
(2)

	)

61 
	#MTK_PPE_FLOW_CFG_FMC_FOE
 
	`BIT
(1)

	)

63 
	#MTK_REG_PPE_IP_PROT_CHK
 0xe08

	)

65 
	#MTK_REG_PPE_TB_BASE
 0xe20

	)

67 
	#MTK_REG_PPE_BNDR
 0xe28

	)

68 
	#MTK_PPE_BNDR_RATE_MASK
 0xffff

	)

70 
	#MTK_REG_PPE_BIND_LMT_0
 0xe2C

	)

72 
	#MTK_REG_PPE_BIND_LMT_1
 0xe30

	)

73 
	#MTK_PPE_NTU_KA
 
	`BIT
(16)

	)

75 
	#MTK_REG_PPE_KA
 0xe34

	)

76 
	#MTK_PPE_KA_T
 
	`BIT
(0)

	)

77 
	#MTK_PPE_KA_TCP
 
	`BIT
(16)

	)

78 
	#MTK_PPE_KA_UDP
 
	`BIT
(24)

	)

80 
	#MTK_REG_PPE_UNB_AGE
 0xe38

	)

81 
	#MTK_PPE_UNB_AGE_MNP_MASK
 (0xfff‡<< 16)

	)

82 
	#MTK_PPE_UNB_AGE_MNP
 (1000 << 16)

	)

83 
	#MTK_PPE_UNB_AGE_DLTA_MASK
 0xff

	)

84 
	#MTK_PPE_UNB_AGE_DLTA
 3

	)

86 
	#MTK_REG_PPE_BND_AGE0
 0xe3c

	)

87 
	#MTK_PPE_BND_AGE0_NTU_DLTA_MASK
 (0xfff‡<< 16)

	)

88 
	#MTK_PPE_BND_AGE0_NTU_DLTA
 (5 << 16)

	)

89 
	#MTK_PPE_BND_AGE0_UDP_DLTA_MASK
 0xffff

	)

90 
	#MTK_PPE_BND_AGE0_UDP_DLTA
 5

	)

92 
	#MTK_REG_PPE_BND_AGE1
 0xe40

	)

93 
	#MTK_PPE_BND_AGE1_FIN_DLTA_MASK
 (0xfff‡<< 16)

	)

94 
	#MTK_PPE_BND_AGE1_FIN_DLTA
 (5 << 16)

	)

95 
	#MTK_PPE_BND_AGE1_TCP_DLTA_MASK
 0xffff

	)

96 
	#MTK_PPE_BND_AGE1_TCP_DLTA
 5

	)

98 
	#MTK_REG_PPE_DFT_CPORT
 0xe48

	)

100 
	#MTK_REG_PPE_TB_CFG
 0xe1c

	)

101 
	#MTK_PPE_TB_CFG_X_MODE_MASK
 (3 << 18)

	)

102 
	#MTK_PPE_TB_CFG_HASH_MODE1
 
	`BIT
(14)

	)

103 
	#MTK_PPE_TB_CFG_HASH_MODE_MASK
 (0x3 << 14)

	)

104 
	#MTK_PPE_TB_CFG_KA
 (3 << 12)

	)

105 
	#MTK_PPE_TB_CFG_KA_MASK
 (0x3 << 12)

	)

106 
	#MTK_PPE_TB_CFG_FIN_AGE
 
	`BIT
(11)

	)

107 
	#MTK_PPE_TB_CFG_UDP_AGE
 
	`BIT
(10)

	)

108 
	#MTK_PPE_TB_CFG_TCP_AGE
 
	`BIT
(9)

	)

109 
	#MTK_PPE_TB_CFG_UNBD_AGE
 
	`BIT
(8)

	)

110 
	#MTK_PPE_TB_CFG_NTU_AGE
 
	`BIT
(7)

	)

111 
	#MTK_PPE_TB_CFG_SMA_FWD_CPU
 (0x3 << 4)

	)

112 
	#MTK_PPE_TB_CFG_SMA_MASK
 (0x3 << 4)

	)

113 
	#MTK_PPE_TB_CFG_ENTRY_SZ_64B
 0

	)

114 
	#MTK_PPE_TB_CFG_ENTRY_SZ_MASK
 
	`BIT
(3)

	)

115 
	#MTK_PPE_TB_CFG_TBL_SZ_4K
 2

	)

116 
	#MTK_PPE_TB_CFG_TBL_SZ_MASK
 0x7

	)

118 
	#MTK_REG_PPE_HASH_SEED
 0xe44

	)

119 
	#MTK_PPE_HASH_SEED
 0x12345678

	)

122 
	#MTK_REG_PPE_CAH_CTRL
 0xf20

	)

123 
	#MTK_PPE_CAH_CTRL_X_MODE
 
	`BIT
(9)

	)

124 
	#MTK_PPE_CAH_CTRL_EN
 
	`BIT
(0)

	)

126 
	smtk_f€_unböd_öfo_blk
 {

127 
u32
 
	mtime_°amp
:8;

128 
u32
 
	mp˙t
:16;

129 
u32
 
	m¥eb
:1;

130 
u32
 
	mpkt_ty≥
:3;

131 
u32
 
	m°©e
:2;

132 
u32
 
	mudp
:1;

133 
u32
 
	m°a
:1;

134 } 
__©åibuã__
 ((
∑cked
));

136 
	smtk_f€_böd_öfo_blk
 {

137 
u32
 
	mtime_°amp
:15;

138 
u32
 
	mka
:1;

139 
u32
 
	mvœn_œyî
:3;

140 
u32
 
	mp¢
:1;

141 #ifde‡
CONFIG_RALINK


142 
u32
 
	mvpm
:2;

144 
u32
 
	mvpm
:1;

145 
u32
 
	mps
:1;

147 
u32
 
	mˇh
:1;

148 
u32
 
	mrmt
:1;

149 
u32
 
	mâl
:1;

150 
u32
 
	mpkt_ty≥
:3;

151 
u32
 
	m°©e
:2;

152 
u32
 
	mudp
:1;

153 
u32
 
	m°a
:1;

154 } 
__©åibuã__
 ((
∑cked
));

156 
	smtk_f€_öfo_blk2
 {

157 
u32
 
	mqid
:4;

158 
u32
 
	mfqos
:1;

159 
u32
 
	mdp
:3;

161 
u32
 
	mmˇ°
:1;

162 
u32
 
	mp˝l
:1;

163 
u32
 
	mmÀn
:1;

164 
u32
 
	mÆí
:1;

165 
u32
 
	mp‹t_mg
:6;

166 
u32
 
	mp‹t_ag
:6;

167 
u32
 
	mds˝
:8;

168 } 
__©åibuã__
 ((
∑cked
));

170 
	smtk_f€_ùv4_h«±
 {

172 
mtk_f€_böd_öfo_blk
 
	mbfib1
;

173 
mtk_f€_unböd_öfo_blk
 
	mudib1
;

174 
u32
 
	möfo_blk1
;

176 
u32
 
	msù
;

177 
u32
 
	mdù
;

178 
u16
 
	mdp‹t
;

179 
u16
 
	m•‹t
;

181 
mtk_f€_öfo_blk2
 
	miblk2
;

182 
u32
 
	möfo_blk2
;

184 
u32
 
	m√w_sù
;

185 
u32
 
	m√w_dù
;

186 
u16
 
	m√w_dp‹t
;

187 
u16
 
	m√w_•‹t
;

188 
u32
 
	mªsv1
;

189 
u32
 
	mªsv2
;

190 
u32
 
	mªsv3
:26;

191 
u32
 
	ma˘_dp
:6;

192 
u16
 
	mvœn1
;

193 
u16
 
	mëy≥
;

194 
u32
 
	mdmac_hi
;

195 
u16
 
	mvœn2
;

196 
u16
 
	mdmac_lo
;

197 
u32
 
	msmac_hi
;

198 
u16
 
	mµp€_id
;

199 
u16
 
	msmac_lo
;

200 } 
__©åibuã__
 ((
∑cked
));

202 
	smtk_f€_íåy
 {

204 
mtk_f€_unböd_öfo_blk
 
	mudib1
;

205 
mtk_f€_böd_öfo_blk
 
	mbfib1
;

206 
mtk_f€_ùv4_h«±
 
	mùv4_h«±
;

210 
	emtk_f€_íåy_°©e
 {

211 
	mFOE_STATE_INVALID
 = 0,

212 
	mFOE_STATE_UNBIND
 = 1,

213 
	mFOE_STATE_BIND
 = 2,

214 
	mFOE_STATE_FIN
 = 3

218 
	#MTK_RXD4_FOE_ENTRY
 
	`GENMASK
(13, 0)

	)

219 
	#MTK_RXD4_CPU_REASON
 
	`GENMASK
(18, 14)

	)

220 
	#MTK_RXD4_SRC_PORT
 
	`GENMASK
(21, 19)

	)

221 
	#MTK_RXD4_ALG
 
	`GENMASK
(31, 22)

	)

223 
	emtk_f€_˝u_ªas⁄
 {

224 
	mMTK_CPU_REASON_TTL_EXCEEDED
 = 0x02,

225 
	mMTK_CPU_REASON_OPTION_HEADER
 = 0x03,

226 
	mMTK_CPU_REASON_NO_FLOW
 = 0x07,

227 
	mMTK_CPU_REASON_IPV4_FRAG
 = 0x08,

228 
	mMTK_CPU_REASON_IPV4_DSLITE_FRAG
 = 0x09,

229 
	mMTK_CPU_REASON_IPV4_DSLITE_NO_TCP_UDP
 = 0x0a,

230 
	mMTK_CPU_REASON_IPV6_6RD_NO_TCP_UDP
 = 0x0b,

231 
	mMTK_CPU_REASON_TCP_FIN_SYN_RST
 = 0x0c,

232 
	mMTK_CPU_REASON_UN_HIT
 = 0x0d,

233 
	mMTK_CPU_REASON_HIT_UNBIND
 = 0x0e,

234 
	mMTK_CPU_REASON_HIT_UNBIND_RATE_REACHED
 = 0x0f,

235 
	mMTK_CPU_REASON_HIT_BIND_TCP_FIN
 = 0x10,

236 
	mMTK_CPU_REASON_HIT_TTL_1
 = 0x11,

237 
	mMTK_CPU_REASON_HIT_BIND_VLAN_VIOLATION
 = 0x12,

238 
	mMTK_CPU_REASON_KEEPALIVE_UC_OLD_HDR
 = 0x13,

239 
	mMTK_CPU_REASON_KEEPALIVE_MC_NEW_HDR
 = 0x14,

240 
	mMTK_CPU_REASON_KEEPALIVE_DUP_OLD_HDR
 = 0x15,

241 
	mMTK_CPU_REASON_HIT_BIND_FORCE_CPU
 = 0x16,

242 
	mMTK_CPU_REASON_TUNNEL_OPTION_HEADER
 = 0x17,

243 
	mMTK_CPU_REASON_MULTICAST_TO_CPU
 = 0x18,

244 
	mMTK_CPU_REASON_MULTICAST_TO_GMAC1_CPU
 = 0x19,

245 
	mMTK_CPU_REASON_HIT_PRE_BIND
 = 0x1a,

246 
	mMTK_CPU_REASON_PACKET_SAMPLING
 = 0x1b,

247 
	mMTK_CPU_REASON_EXCEED_MTU
 = 0x1c,

248 
	mMTK_CPU_REASON_PPE_BYPASS
 = 0x1e,

249 
	mMTK_CPU_REASON_INVALID
 = 0x1f,

254 
	#MTK_PPE_ENTRY_CNT
 0x1000

	)

255 
	#MTK_PPE_TBL_SZ
 \

256 (
MTK_PPE_ENTRY_CNT
 * (
mtk_f€_íåy
))

	)

258 
mtk_µe_debugfs_öô
(
mtk_ëh
 *
ëh
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_mt7620.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/if_vœn.h
>

18 
	~<löux/of_√t.h
>

20 
	~<asm/mach-ølök/ølök_ªgs.h
>

22 
	~<mt7620.h
>

23 
	~"mtk_ëh_soc.h
"

24 
	~"gsw_mt7620.h
"

25 
	~"mt7530.h
"

26 
	~"mdio.h
"

28 
	#MT7620A_CDMA_CSG_CFG
 0x400

	)

29 
	#MT7620_DMA_VID
 (
MT7620A_CDMA_CSG_CFG
 | 0x30)

	)

30 
	#MT7621_CDMP_IG_CTRL
 (
MT7620A_CDMA_CSG_CFG
 + 0x00)

	)

31 
	#MT7621_CDMP_EG_CTRL
 (
MT7620A_CDMA_CSG_CFG
 + 0x04)

	)

32 
	#MT7620A_RESET_FE
 
	`BIT
(21)

	)

33 
	#MT7621_RESET_FE
 
	`BIT
(6)

	)

34 
	#MT7620A_RESET_ESW
 
	`BIT
(23)

	)

35 
	#MT7620_L4_VALID
 
	`BIT
(23)

	)

36 
	#MT7621_L4_VALID
 
	`BIT
(24)

	)

38 
	#MT7620_TX_DMA_UDF
 
	`BIT
(15)

	)

39 
	#MT7621_TX_DMA_UDF
 
	`BIT
(19)

	)

40 
	#TX_DMA_FP_BMAP
 ((0xffË<< 19)

	)

42 
	#CDMA_ICS_EN
 
	`BIT
(2)

	)

43 
	#CDMA_UCS_EN
 
	`BIT
(1)

	)

44 
	#CDMA_TCS_EN
 
	`BIT
(0)

	)

46 
	#GDMA_ICS_EN
 
	`BIT
(22)

	)

47 
	#GDMA_TCS_EN
 
	`BIT
(21)

	)

48 
	#GDMA_UCS_EN
 
	`BIT
(20)

	)

51 
	#MT7620_REG_MIB_OFFSET
 0x1000

	)

52 
	#MT7620_PPE_AC_BCNT0
 (
MT7620_REG_MIB_OFFSET
 + 0x00)

	)

53 
	#MT7620_GDM1_TX_GBCNT
 (
MT7620_REG_MIB_OFFSET
 + 0x300)

	)

54 
	#MT7620_GDM2_TX_GBCNT
 (
MT7620_GDM1_TX_GBCNT
 + 0x40)

	)

56 
	#MT7621_REG_MIB_OFFSET
 0x2000

	)

57 
	#MT7621_PPE_AC_BCNT0
 (
MT7621_REG_MIB_OFFSET
 + 0x00)

	)

58 
	#MT7621_GDM1_TX_GBCNT
 (
MT7621_REG_MIB_OFFSET
 + 0x400)

	)

59 
	#MT7621_GDM2_TX_GBCNT
 (
MT7621_GDM1_TX_GBCNT
 + 0x40)

	)

61 
	#GSW_REG_GDMA1_MAC_ADRL
 0x508

	)

62 
	#GSW_REG_GDMA1_MAC_ADRH
 0x50C

	)

64 
	#MT7621_FE_RST_GL
 (
FE_FE_OFFSET
 + 0x04)

	)

65 
	#MT7620_FE_INT_STATUS2
 (
FE_FE_OFFSET
 + 0x08)

	)

70 
	#MT7620_FE_GDM1_AF
 
	`BIT
(13)

	)

71 
	#MT7621_FE_GDM1_AF
 
	`BIT
(28)

	)

72 
	#MT7621_FE_GDM2_AF
 
	`BIT
(29)

	)

74 c⁄° 
u16
 
	gmt7620_ªg_èbÀ
[
FE_REG_COUNT
] = {

75 [
FE_REG_PDMA_GLO_CFG
] = 
RT5350_PDMA_GLO_CFG
,

76 [
FE_REG_PDMA_RST_CFG
] = 
RT5350_PDMA_RST_CFG
,

77 [
FE_REG_DLY_INT_CFG
] = 
RT5350_DLY_INT_CFG
,

78 [
FE_REG_TX_BASE_PTR0
] = 
RT5350_TX_BASE_PTR0
,

79 [
FE_REG_TX_MAX_CNT0
] = 
RT5350_TX_MAX_CNT0
,

80 [
FE_REG_TX_CTX_IDX0
] = 
RT5350_TX_CTX_IDX0
,

81 [
FE_REG_TX_DTX_IDX0
] = 
RT5350_TX_DTX_IDX0
,

82 [
FE_REG_RX_BASE_PTR0
] = 
RT5350_RX_BASE_PTR0
,

83 [
FE_REG_RX_MAX_CNT0
] = 
RT5350_RX_MAX_CNT0
,

84 [
FE_REG_RX_CALC_IDX0
] = 
RT5350_RX_CALC_IDX0
,

85 [
FE_REG_RX_DRX_IDX0
] = 
RT5350_RX_DRX_IDX0
,

86 [
FE_REG_FE_INT_ENABLE
] = 
RT5350_FE_INT_ENABLE
,

87 [
FE_REG_FE_INT_STATUS
] = 
RT5350_FE_INT_STATUS
,

88 [
FE_REG_FE_DMA_VID_BASE
] = 
MT7620_DMA_VID
,

89 [
FE_REG_FE_COUNTER_BASE
] = 
MT7620_GDM1_TX_GBCNT
,

90 [
FE_REG_FE_RST_GL
] = 
MT7621_FE_RST_GL
,

91 [
FE_REG_FE_INT_STATUS2
] = 
MT7620_FE_INT_STATUS2
,

94 
	$mt7620_gsw_c⁄fig
(
„_¥iv
 *
¥iv
)

96 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *Ë
¥iv
->
soc
->
sw¥iv
;

99 i‡(
¥iv
->
mii_bus
 && 
	`mdiobus_gë_phy
(priv->mii_bus, 0x1f)) {

100 
	`mt7530_¥obe
(
¥iv
->
dev
, 
gsw
->
ba£
, 
NULL
, 0);

101 
	`mt7530_¥obe
(
¥iv
->
dev
, 
NULL
,Öriv->
mii_bus
, 1);

103 
	`mt7530_¥obe
(
¥iv
->
dev
, 
gsw
->
ba£
, 
NULL
, 1);

107 
	}
}

109 
	$mt7620_£t_mac
(
„_¥iv
 *
¥iv
, *
mac
)

111 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

112 
Êags
;

114 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

115 
	`mtk_swôch_w32
(
gsw
, (
mac
[0] << 8Ë| mac[1], 
GSW_REG_SMACCR1
);

116 
	`mtk_swôch_w32
(
gsw
, (
mac
[2] << 24) | (mac[3] << 16) | (mac[4] << 8) | mac[5],

117 
GSW_REG_SMACCR0
);

118 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

119 
	}
}

121 
	$mt7620_auto_pﬁl
(
mt7620_gsw
 *
gsw
)

123 
phy
;

124 
lsb
 = -1, 
msb
 = 0;

126 
	`f‹_óch_£t_bô
(
phy
, &
gsw
->
aut›ﬁl
, 32) {

127 i‡(
lsb
 < 0)

128 
lsb
 = 
phy
;

129 
msb
 = 
phy
;

132 i‡(
lsb
 =
msb
)

133 
lsb
--;

135 
	`mtk_swôch_w32
(
gsw
, 
PHY_AN_EN
 | 
PHY_PRE_EN
 | 
	`PMY_MDC_CONF
(5) |

136 (
msb
 << 8Ë| 
lsb
, 
ESW_PHY_POLLING
);

137 
	}
}

139 
	$mt7620_p‹t_öô
(
„_¥iv
 *
¥iv
, 
devi˚_node
 *
≈
)

141 
mt7620_gsw
 *
gsw
 = (mt7620_gsw *)
¥iv
->
soc
->
sw¥iv
;

142 c⁄° 
__be32
 *
_id
 = 
	`of_gë_¥›îty
(
≈
, "ªg", 
NULL
);

143 
phy_mode
, 
size
, 
id
;

144 
shi·
 = 12;

145 
u32
 
vÆ
, 
mask
 = 0;

146 
mö
 = (
gsw
->
p‹t4
 =
PORT4_EPHY
) ? (5) : (4);

148 i‡(!
_id
 || (
	`be32_to_˝u
(*_idË< 
mö
) || (be32_to_cpu(*_id) > 5)) {

149 i‡(
_id
)

150 
	`¥_îr
("%s: invÆidÖ‹àid %d\n", 
≈
->
«me
,

151 
	`be32_to_˝u
(*
_id
));

153 
	`¥_îr
("%s: invÆidÖ‹àid\n", 
≈
->
«me
);

157 
id
 = 
	`be32_to_˝u
(*
_id
);

159 i‡(
id
 == 4)

160 
shi·
 = 14;

162 
¥iv
->
phy
->
phy_fixed
[
id
] = 
	`of_gë_¥›îty
(
≈
, "mediatek,fixed-link",

163 &
size
);

164 i‡(
¥iv
->
phy
->
phy_fixed
[
id
] &&

165 (
size
 !(4 * (*
¥iv
->
phy
->
phy_fixed
[
id
])))) {

166 
	`¥_îr
("%s: invÆid fixedÜökÖr›îty\n", 
≈
->
«me
);

167 
¥iv
->
phy
->
phy_fixed
[
id
] = 
NULL
;

171 
phy_mode
 = 
	`of_gë_phy_mode
(
≈
);

172 
phy_mode
) {

173 
PHY_INTERFACE_MODE_RGMII
:

174 
mask
 = 0;

176 
PHY_INTERFACE_MODE_MII
:

177 
mask
 = 1;

179 
PHY_INTERFACE_MODE_RMII
:

180 
mask
 = 2;

183 
	`dev_îr
(
¥iv
->
dev
, "p‹à%d - invÆidÖhy mode\n", 
id
);

187 
¥iv
->
phy
->
phy_node
[
id
] = 
	`of_∑r£_ph™dÀ
(
≈
, "phy-handle", 0);

188 i‡(!
¥iv
->
phy
->
phy_node
[
id
] && !¥iv->phy->
phy_fixed
[id])

191 
vÆ
 = 
	`π_sysc_r32
(
SYSC_REG_CFG1
);

192 
vÆ
 &~(3 << 
shi·
);

193 
vÆ
 |
mask
 << 
shi·
;

194 
	`π_sysc_w32
(
vÆ
, 
SYSC_REG_CFG1
);

196 i‡(
¥iv
->
phy
->
phy_fixed
[
id
]) {

197 c⁄° 
__be32
 *
lök
 = 
¥iv
->
phy
->
phy_fixed
[
id
];

198 
tx_fc
, 
rx_fc
;

199 
u32
 
vÆ
 = 0;

201 
¥iv
->
phy
->
•ìd
[
id
] = 
	`be32_to_˝up
(
lök
++);

202 
tx_fc
 = 
	`be32_to_˝up
(
lök
++);

203 
rx_fc
 = 
	`be32_to_˝up
(
lök
++);

204 
¥iv
->
phy
->
du∂ex
[
id
] = 
	`be32_to_˝up
(
lök
++);

205 
¥iv
->
lök
[
id
] = 1;

207 
¥iv
->
phy
->
•ìd
[
id
]) {

208 
SPEED_10
:

209 
vÆ
 = 0;

211 
SPEED_100
:

212 
vÆ
 = 1;

214 
SPEED_1000
:

215 
vÆ
 = 2;

218 
	`dev_îr
(
¥iv
->
dev
, "invalidÜink speed: %d\n",

219 
¥iv
->
phy
->
•ìd
[
id
]);

220 
¥iv
->
phy
->
phy_fixed
[
id
] = 0;

223 
vÆ
 = 
	`PMCR_SPEED
(val);

224 
vÆ
 |
PMCR_LINK
 | 
PMCR_BACKPRES
 | 
PMCR_BACKOFF
 | 
PMCR_RX_EN
 |

225 
PMCR_TX_EN
 | 
PMCR_FORCE
 | 
PMCR_MAC_MODE
 | 
PMCR_IPG
;

226 i‡(
tx_fc
)

227 
vÆ
 |
PMCR_TX_FC
;

228 i‡(
rx_fc
)

229 
vÆ
 |
PMCR_RX_FC
;

230 i‡(
¥iv
->
phy
->
du∂ex
[
id
])

231 
vÆ
 |
PMCR_DUPLEX
;

232 
	`mtk_swôch_w32
(
gsw
, 
vÆ
, 
	`GSW_REG_PORT_PMCR
(
id
));

233 
	`dev_öfo
(
¥iv
->
dev
, "using fixedÜinkÖarameters\n");

237 i‡(
¥iv
->
phy
->
phy_node
[
id
] && 
	`mdiobus_gë_phy
’riv->
mii_bus
, id)) {

238 
u32
 
vÆ
 = 
PMCR_BACKPRES
 | 
PMCR_BACKOFF
 | 
PMCR_RX_EN
 |

239 
PMCR_TX_EN
 | 
PMCR_MAC_MODE
 | 
PMCR_IPG
;

241 
	`mtk_swôch_w32
(
gsw
, 
vÆ
, 
	`GSW_REG_PORT_PMCR
(
id
));

242 
	`„_c⁄√˘_phy_node
(
¥iv
,Öriv->
phy
->
phy_node
[
id
]);

243 
gsw
->
aut›ﬁl
 |
	`BIT
(
id
);

244 
	`mt7620_auto_pﬁl
(
gsw
);

247 
	}
}

249 
	$mt7620_„_ª£t
()

251 
	`„_ª£t
(
MT7620A_RESET_FE
 | 
MT7620A_RESET_ESW
);

252 
	}
}

254 
	$mt7620_rxcsum_c⁄fig
(
boﬁ
 
íabÀ
)

256 i‡(
íabÀ
)

257 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
Ë| (
GDMA_ICS_EN
 |

258 
GDMA_TCS_EN
 | 
GDMA_UCS_EN
),

259 
MT7620A_GDMA1_FWD_CFG
);

261 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
Ë& ~(
GDMA_ICS_EN
 |

262 
GDMA_TCS_EN
 | 
GDMA_UCS_EN
),

263 
MT7620A_GDMA1_FWD_CFG
);

264 
	}
}

266 
	$mt7620_txcsum_c⁄fig
(
boﬁ
 
íabÀ
)

268 i‡(
íabÀ
)

269 
	`„_w32
(
	`„_r32
(
MT7620A_CDMA_CSG_CFG
Ë| (
CDMA_ICS_EN
 |

270 
CDMA_UCS_EN
 | 
CDMA_TCS_EN
),

271 
MT7620A_CDMA_CSG_CFG
);

273 
	`„_w32
(
	`„_r32
(
MT7620A_CDMA_CSG_CFG
Ë& ~(
CDMA_ICS_EN
 |

274 
CDMA_UCS_EN
 | 
CDMA_TCS_EN
),

275 
MT7620A_CDMA_CSG_CFG
);

276 
	}
}

278 
	$mt7620_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

280 
√t_devi˚
 *
dev
 = 
	`¥iv_√tdev
(
¥iv
);

282 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
) & ~7, MT7620A_GDMA1_FWD_CFG);

284 
	`mt7620_txcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_IP_CSUM
));

285 
	`mt7620_rxcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_RXCSUM
));

288 
	}
}

290 
	$mt7620_tx_dma
(
„_tx_dma
 *
txd
)

292 
	}
}

294 
	$mt7620_öô_d©a
(
„_soc_d©a
 *
d©a
,

295 
√t_devi˚
 *
√tdev
)

297 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

299 
¥iv
->
Êags
 = 
FE_FLAG_PADDING_64B
 | 
FE_FLAG_RX_2B_OFFSET
 |

300 
FE_FLAG_RX_SG_DMA
 | 
FE_FLAG_HAS_SWITCH
;

302 
√tdev
->
hw_„©uªs
 = 
NETIF_F_IP_CSUM
 | 
NETIF_F_RXCSUM
 |

303 
NETIF_F_HW_VLAN_CTAG_TX
;

304 i‡(
	`mt7620_gë_eco
() >= 5)

305 
√tdev
->
hw_„©uªs
 |
NETIF_F_SG
 | 
NETIF_F_TSO
 | 
NETIF_F_TSO6
 |

306 
NETIF_F_IPV6_CSUM
;

307 
	}
}

309 
„_soc_d©a
 
	gmt7620_d©a
 = {

310 .
öô_d©a
 = 
mt7620_öô_d©a
,

311 .
	gª£t_„
 = 
mt7620_„_ª£t
,

312 .
	g£t_mac
 = 
mt7620_£t_mac
,

313 .
	gfwd_c⁄fig
 = 
mt7620_fwd_c⁄fig
,

314 .
	gtx_dma
 = 
mt7620_tx_dma
,

315 .
	gswôch_öô
 = 
mtk_gsw_öô
,

316 .
	gswôch_c⁄fig
 = 
mt7620_gsw_c⁄fig
,

317 .
	gp‹t_öô
 = 
mt7620_p‹t_öô
,

318 .
	gªg_èbÀ
 = 
mt7620_ªg_èbÀ
,

319 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_16DWORDS
,

320 .
	grx_öt
 = 
RT5350_RX_DONE_INT
,

321 .
	gtx_öt
 = 
RT5350_TX_DONE_INT
,

322 .
	g°©us_öt
 = 
MT7620_FE_GDM1_AF
,

323 .
	gchecksum_bô
 = 
MT7620_L4_VALID
,

324 .
	ghas_ˇºõr
 = 
mt7620_has_ˇºõr
,

325 .
	gmdio_ªad
 = 
mt7620_mdio_ªad
,

326 .
	gmdio_wrôe
 = 
mt7620_mdio_wrôe
,

327 .
	gmdio_adju°_lök
 = 
mt7620_mdio_lök_adju°
,

330 c⁄° 
of_devi˚_id
 
	gof_„_m©ch
[] = {

331 { .
com∑tibÀ
 = "medüãk,mt7620-ëh", .
	gd©a
 = &
mt7620_d©a
 },

335 
MODULE_DEVICE_TABLE
(
of
, 
of_„_m©ch
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_mt7621.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/∂©f‹m_devi˚.h
>

17 
	~<löux/if_vœn.h
>

18 
	~<löux/of_√t.h
>

20 
	~<asm/mach-ølök/ølök_ªgs.h
>

22 
	~"mtk_ëh_soc.h
"

23 
	~"gsw_mt7620.h
"

24 
	~"mt7530.h
"

25 
	~"mdio.h
"

27 
	#MT7620A_CDMA_CSG_CFG
 0x400

	)

28 
	#MT7621_CDMP_IG_CTRL
 (
MT7620A_CDMA_CSG_CFG
 + 0x00)

	)

29 
	#MT7621_CDMP_EG_CTRL
 (
MT7620A_CDMA_CSG_CFG
 + 0x04)

	)

30 
	#MT7621_RESET_FE
 
	`BIT
(6)

	)

31 
	#MT7621_L4_VALID
 
	`BIT
(24)

	)

33 
	#MT7621_TX_DMA_UDF
 
	`BIT
(19)

	)

34 
	#MT7621_TX_DMA_FPORT
 
	`BIT
(25)

	)

36 
	#CDMA_ICS_EN
 
	`BIT
(2)

	)

37 
	#CDMA_UCS_EN
 
	`BIT
(1)

	)

38 
	#CDMA_TCS_EN
 
	`BIT
(0)

	)

40 
	#GDMA_ICS_EN
 
	`BIT
(22)

	)

41 
	#GDMA_TCS_EN
 
	`BIT
(21)

	)

42 
	#GDMA_UCS_EN
 
	`BIT
(20)

	)

45 
	#MT7621_REG_MIB_OFFSET
 0x2000

	)

46 
	#MT7621_PPE_AC_BCNT0
 (
MT7621_REG_MIB_OFFSET
 + 0x00)

	)

47 
	#MT7621_GDM1_TX_GBCNT
 (
MT7621_REG_MIB_OFFSET
 + 0x400)

	)

48 
	#MT7621_GDM2_TX_GBCNT
 (
MT7621_GDM1_TX_GBCNT
 + 0x40)

	)

50 
	#GSW_REG_GDMA1_MAC_ADRL
 0x508

	)

51 
	#GSW_REG_GDMA1_MAC_ADRH
 0x50C

	)

53 
	#MT7621_FE_RST_GL
 (
FE_FE_OFFSET
 + 0x04)

	)

54 
	#MT7620_FE_INT_STATUS2
 (
FE_FE_OFFSET
 + 0x08)

	)

59 
	#MT7620_FE_GDM1_AF
 
	`BIT
(13)

	)

60 
	#MT7621_FE_GDM1_AF
 
	`BIT
(28)

	)

61 
	#MT7621_FE_GDM2_AF
 
	`BIT
(29)

	)

63 c⁄° 
u16
 
	gmt7621_ªg_èbÀ
[
FE_REG_COUNT
] = {

64 [
FE_REG_PDMA_GLO_CFG
] = 
RT5350_PDMA_GLO_CFG
,

65 [
FE_REG_PDMA_RST_CFG
] = 
RT5350_PDMA_RST_CFG
,

66 [
FE_REG_DLY_INT_CFG
] = 
RT5350_DLY_INT_CFG
,

67 [
FE_REG_TX_BASE_PTR0
] = 
RT5350_TX_BASE_PTR0
,

68 [
FE_REG_TX_MAX_CNT0
] = 
RT5350_TX_MAX_CNT0
,

69 [
FE_REG_TX_CTX_IDX0
] = 
RT5350_TX_CTX_IDX0
,

70 [
FE_REG_TX_DTX_IDX0
] = 
RT5350_TX_DTX_IDX0
,

71 [
FE_REG_RX_BASE_PTR0
] = 
RT5350_RX_BASE_PTR0
,

72 [
FE_REG_RX_MAX_CNT0
] = 
RT5350_RX_MAX_CNT0
,

73 [
FE_REG_RX_CALC_IDX0
] = 
RT5350_RX_CALC_IDX0
,

74 [
FE_REG_RX_DRX_IDX0
] = 
RT5350_RX_DRX_IDX0
,

75 [
FE_REG_FE_INT_ENABLE
] = 
RT5350_FE_INT_ENABLE
,

76 [
FE_REG_FE_INT_STATUS
] = 
RT5350_FE_INT_STATUS
,

77 [
FE_REG_FE_DMA_VID_BASE
] = 0,

78 [
FE_REG_FE_COUNTER_BASE
] = 
MT7621_GDM1_TX_GBCNT
,

79 [
FE_REG_FE_RST_GL
] = 
MT7621_FE_RST_GL
,

80 [
FE_REG_FE_INT_STATUS2
] = 
MT7620_FE_INT_STATUS2
,

83 
	$mt7621_gsw_c⁄fig
(
„_¥iv
 *
¥iv
)

85 i‡(
¥iv
->
mii_bus
 && 
	`mdiobus_gë_phy
(priv->mii_bus, 0x1f))

86 
	`mt7530_¥obe
(
¥iv
->
dev
, 
NULL
,Öriv->
mii_bus
, 1);

89 
	}
}

91 
	$mt7621_„_ª£t
()

93 
	`„_ª£t
(
MT7621_RESET_FE
);

94 
	}
}

96 
	$mt7621_rxcsum_c⁄fig
(
boﬁ
 
íabÀ
)

98 i‡(
íabÀ
)

99 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
Ë| (
GDMA_ICS_EN
 |

100 
GDMA_TCS_EN
 | 
GDMA_UCS_EN
),

101 
MT7620A_GDMA1_FWD_CFG
);

103 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
Ë& ~(
GDMA_ICS_EN
 |

104 
GDMA_TCS_EN
 | 
GDMA_UCS_EN
),

105 
MT7620A_GDMA1_FWD_CFG
);

106 
	}
}

108 
	$mt7621_rxvœn_c⁄fig
(
boﬁ
 
íabÀ
)

110 i‡(
íabÀ
)

111 
	`„_w32
(1, 
MT7621_CDMP_EG_CTRL
);

113 
	`„_w32
(0, 
MT7621_CDMP_EG_CTRL
);

114 
	}
}

116 
	$mt7621_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

118 
√t_devi˚
 *
dev
 = 
	`¥iv_√tdev
(
¥iv
);

120 
	`„_w32
(
	`„_r32
(
MT7620A_GDMA1_FWD_CFG
) & ~0xffff,

121 
MT7620A_GDMA1_FWD_CFG
);

124 
	`mt7621_rxcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_RXCSUM
));

125 
	`mt7621_rxvœn_c⁄fig
(
¥iv
->
Êags
 & 
FE_FLAG_RX_VLAN_CTAG
);

128 
	}
}

130 
	$mt7621_tx_dma
(
„_tx_dma
 *
txd
)

132 
txd
->
txd4
 = 
MT7621_TX_DMA_FPORT
;

133 
	}
}

135 
	$mt7621_öô_d©a
(
„_soc_d©a
 *
d©a
,

136 
√t_devi˚
 *
√tdev
)

138 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

140 
¥iv
->
Êags
 = 
FE_FLAG_PADDING_64B
 | 
FE_FLAG_RX_2B_OFFSET
 |

141 
FE_FLAG_RX_SG_DMA
 | 
FE_FLAG_NAPI_WEIGHT
 |

142 
FE_FLAG_HAS_SWITCH
 | 
FE_FLAG_JUMBO_FRAME
;

144 
√tdev
->
hw_„©uªs
 = 
NETIF_F_IP_CSUM
 | 
NETIF_F_RXCSUM
 |

145 
NETIF_F_HW_VLAN_CTAG_TX
 | 
NETIF_F_SG
 | 
NETIF_F_TSO
 |

146 
NETIF_F_TSO6
 | 
NETIF_F_IPV6_CSUM
 |

147 
NETIF_F_TSO_MANGLEID
;

148 
	}
}

150 
	$mt7621_£t_mac
(
„_¥iv
 *
¥iv
, *
mac
)

152 
Êags
;

154 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

155 
	`„_w32
((
mac
[0] << 8Ë| mac[1], 
GSW_REG_GDMA1_MAC_ADRH
);

156 
	`„_w32
((
mac
[2] << 24) | (mac[3] << 16) | (mac[4] << 8) | mac[5],

157 
GSW_REG_GDMA1_MAC_ADRL
);

158 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

159 
	}
}

161 
„_soc_d©a
 
	gmt7621_d©a
 = {

162 .
öô_d©a
 = 
mt7621_öô_d©a
,

163 .
	gª£t_„
 = 
mt7621_„_ª£t
,

164 .
	g£t_mac
 = 
mt7621_£t_mac
,

165 .
	gfwd_c⁄fig
 = 
mt7621_fwd_c⁄fig
,

166 .
	gtx_dma
 = 
mt7621_tx_dma
,

167 .
	gswôch_öô
 = 
mtk_gsw_öô
,

168 .
	gswôch_c⁄fig
 = 
mt7621_gsw_c⁄fig
,

169 .
	gªg_èbÀ
 = 
mt7621_ªg_èbÀ
,

170 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_16DWORDS
,

171 .
	grx_öt
 = 
RT5350_RX_DONE_INT
,

172 .
	gtx_öt
 = 
RT5350_TX_DONE_INT
,

173 .
	g°©us_öt
 = (
MT7621_FE_GDM1_AF
 | 
MT7621_FE_GDM2_AF
),

174 .
	gchecksum_bô
 = 
MT7621_L4_VALID
,

175 .
	ghas_ˇºõr
 = 
mt7620_has_ˇºõr
,

176 .
	gmdio_ªad
 = 
mt7620_mdio_ªad
,

177 .
	gmdio_wrôe
 = 
mt7620_mdio_wrôe
,

178 .
	gmdio_adju°_lök
 = 
mt7620_mdio_lök_adju°
,

181 c⁄° 
of_devi˚_id
 
	gof_„_m©ch
[] = {

182 { .
com∑tibÀ
 = "medüãk,mt7621-ëh", .
	gd©a
 = &
mt7621_d©a
 },

186 
MODULE_DEVICE_TABLE
(
of
, 
of_„_m©ch
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt2880.c

15 
	~<löux/moduÀ.h
>

17 
	~<asm/mach-ølök/ølök_ªgs.h
>

19 
	~"mtk_ëh_soc.h
"

20 
	~"mdio_π2880.h
"

22 
	#RT2880_RESET_FE
 
	`BIT
(18)

	)

24 
	$π2880_öô_d©a
(
„_soc_d©a
 *
d©a
,

25 
√t_devi˚
 *
√tdev
)

27 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

29 
¥iv
->
Êags
 = 
FE_FLAG_PADDING_64B
 | 
FE_FLAG_PADDING_BUG
 |

30 
FE_FLAG_JUMBO_FRAME
 | 
FE_FLAG_CALIBRATE_CLK
;

31 
√tdev
->
hw_„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_HW_VLAN_CTAG_TX
;

34 
	}
}

36 
	$π2880_„_ª£t
()

38 
	`„_ª£t
(
RT2880_RESET_FE
);

39 
	}
}

41 
	$π2880_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

43 
ªt
;

45 
ªt
 = 
	`„_£t_˛ock_cy˛e
(
¥iv
);

46 i‡(
ªt
)

47  
ªt
;

49 
	`„_fwd_c⁄fig
(
¥iv
);

50 
	`„_w32
(
FE_PSE_FQFC_CFG_INIT
, 
FE_PSE_FQ_CFG
);

51 
	`„_csum_c⁄fig
(
¥iv
);

53  
ªt
;

54 
	}
}

56 
„_soc_d©a
 
	gπ2880_d©a
 = {

57 .
öô_d©a
 = 
π2880_öô_d©a
,

58 .
	gª£t_„
 = 
π2880_„_ª£t
,

59 .
	gfwd_c⁄fig
 = 
π2880_fwd_c⁄fig
,

60 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_8DWORDS
,

61 .
	gchecksum_bô
 = 
RX_DMA_L4VALID
,

62 .
	grx_öt
 = 
FE_RX_DONE_INT
,

63 .
	gtx_öt
 = 
FE_TX_DONE_INT
,

64 .
	g°©us_öt
 = 
FE_CNT_GDM_AF
,

65 .
	gmdio_ªad
 = 
π2880_mdio_ªad
,

66 .
	gmdio_wrôe
 = 
π2880_mdio_wrôe
,

67 .
	gmdio_adju°_lök
 = 
π2880_mdio_lök_adju°
,

68 .
	gp‹t_öô
 = 
π2880_p‹t_öô
,

71 c⁄° 
of_devi˚_id
 
	gof_„_m©ch
[] = {

72 { .
com∑tibÀ
 = "ølök,π2880-ëh", .
	gd©a
 = &
π2880_d©a
 },

76 
MODULE_DEVICE_TABLE
(
of
, 
of_„_m©ch
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt3050.c

15 
	~<löux/moduÀ.h
>

17 
	~<asm/mach-ølök/ølök_ªgs.h
>

19 
	~"mtk_ëh_soc.h
"

20 
	~"mdio_π2880.h
"

22 
	#RT305X_RESET_FE
 
	`BIT
(21)

	)

23 
	#RT305X_RESET_ESW
 
	`BIT
(23)

	)

25 c⁄° 
u16
 
	gπ5350_ªg_èbÀ
[
FE_REG_COUNT
] = {

26 [
FE_REG_PDMA_GLO_CFG
] = 
RT5350_PDMA_GLO_CFG
,

27 [
FE_REG_PDMA_RST_CFG
] = 
RT5350_PDMA_RST_CFG
,

28 [
FE_REG_DLY_INT_CFG
] = 
RT5350_DLY_INT_CFG
,

29 [
FE_REG_TX_BASE_PTR0
] = 
RT5350_TX_BASE_PTR0
,

30 [
FE_REG_TX_MAX_CNT0
] = 
RT5350_TX_MAX_CNT0
,

31 [
FE_REG_TX_CTX_IDX0
] = 
RT5350_TX_CTX_IDX0
,

32 [
FE_REG_TX_DTX_IDX0
] = 
RT5350_TX_DTX_IDX0
,

33 [
FE_REG_RX_BASE_PTR0
] = 
RT5350_RX_BASE_PTR0
,

34 [
FE_REG_RX_MAX_CNT0
] = 
RT5350_RX_MAX_CNT0
,

35 [
FE_REG_RX_CALC_IDX0
] = 
RT5350_RX_CALC_IDX0
,

36 [
FE_REG_RX_DRX_IDX0
] = 
RT5350_RX_DRX_IDX0
,

37 [
FE_REG_FE_INT_ENABLE
] = 
RT5350_FE_INT_ENABLE
,

38 [
FE_REG_FE_INT_STATUS
] = 
RT5350_FE_INT_STATUS
,

39 [
FE_REG_FE_RST_GL
] = 0,

40 [
FE_REG_FE_DMA_VID_BASE
] = 0,

43 
	$π305x_öô_d©a
(
„_soc_d©a
 *
d©a
,

44 
√t_devi˚
 *
√tdev
)

46 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

48 
¥iv
->
Êags
 = 
FE_FLAG_PADDING_64B
 | 
FE_FLAG_PADDING_BUG
 |

49 
FE_FLAG_CALIBRATE_CLK
 | 
FE_FLAG_HAS_SWITCH
;

50 
√tdev
->
hw_„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_IP_CSUM
 |

51 
NETIF_F_RXCSUM
 | 
NETIF_F_HW_VLAN_CTAG_TX
;

52 
	}
}

54 
	$π3050_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

56 
ªt
;

58 i‡(
ølök_soc
 !
RT305X_SOC_RT3052
) {

59 
ªt
 = 
	`„_£t_˛ock_cy˛e
(
¥iv
);

60 i‡(
ªt
)

61  
ªt
;

64 
	`„_fwd_c⁄fig
(
¥iv
);

65 i‡(
ølök_soc
 !
RT305X_SOC_RT3352
)

66 
	`„_w32
(
FE_PSE_FQFC_CFG_INIT
, 
FE_PSE_FQ_CFG
);

67 
	`„_csum_c⁄fig
(
¥iv
);

70 
	}
}

72 
	$π305x_„_ª£t
()

74 
	`„_ª£t
(
RT305X_RESET_FE
);

75 
	}
}

77 
	$π5350_öô_d©a
(
„_soc_d©a
 *
d©a
,

78 
√t_devi˚
 *
√tdev
)

80 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

82 
¥iv
->
Êags
 = 
FE_FLAG_HAS_SWITCH
;

83 
√tdev
->
hw_„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_RXCSUM
;

84 
	}
}

86 
	$π5350_£t_mac
(
„_¥iv
 *
¥iv
, *
mac
)

88 
Êags
;

90 
	`•ö_lock_úqßve
(&
¥iv
->
∑ge_lock
, 
Êags
);

91 
	`„_w32
((
mac
[0] << 8Ë| mac[1], 
RT5350_SDM_MAC_ADRH
);

92 
	`„_w32
((
mac
[2] << 24) | (mac[3] << 16) | (mac[4] << 8) | mac[5],

93 
RT5350_SDM_MAC_ADRL
);

94 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
∑ge_lock
, 
Êags
);

95 
	}
}

97 
	$π5350_rxcsum_c⁄fig
(
boﬁ
 
íabÀ
)

99 i‡(
íabÀ
)

100 
	`„_w32
(
	`„_r32
(
RT5350_SDM_CFG
Ë| (
RT5350_SDM_ICS_EN
 |

101 
RT5350_SDM_TCS_EN
 | 
RT5350_SDM_UCS_EN
),

102 
RT5350_SDM_CFG
);

104 
	`„_w32
(
	`„_r32
(
RT5350_SDM_CFG
Ë& ~(
RT5350_SDM_ICS_EN
 |

105 
RT5350_SDM_TCS_EN
 | 
RT5350_SDM_UCS_EN
),

106 
RT5350_SDM_CFG
);

107 
	}
}

109 
	$π5350_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

111 
√t_devi˚
 *
dev
 = 
	`¥iv_√tdev
(
¥iv
);

113 
	`π5350_rxcsum_c⁄fig
((
dev
->
„©uªs
 & 
NETIF_F_RXCSUM
));

116 
	}
}

118 
	$π5350_tx_dma
(
„_tx_dma
 *
txd
)

120 
txd
->
txd4
 = 0;

121 
	}
}

123 
	$π5350_„_ª£t
()

125 
	`„_ª£t
(
RT305X_RESET_FE
 | 
RT305X_RESET_ESW
);

126 
	}
}

128 
„_soc_d©a
 
	gπ3050_d©a
 = {

129 .
öô_d©a
 = 
π305x_öô_d©a
,

130 .
	gª£t_„
 = 
π305x_„_ª£t
,

131 .
	gfwd_c⁄fig
 = 
π3050_fwd_c⁄fig
,

132 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_8DWORDS
,

133 .
	gchecksum_bô
 = 
RX_DMA_L4VALID
,

134 .
	grx_öt
 = 
FE_RX_DONE_INT
,

135 .
	gtx_öt
 = 
FE_TX_DONE_INT
,

136 .
	g°©us_öt
 = 
FE_CNT_GDM_AF
,

139 
„_soc_d©a
 
	gπ5350_d©a
 = {

140 .
öô_d©a
 = 
π5350_öô_d©a
,

141 .
	gªg_èbÀ
 = 
π5350_ªg_èbÀ
,

142 .
	gª£t_„
 = 
π5350_„_ª£t
,

143 .
	g£t_mac
 = 
π5350_£t_mac
,

144 .
	gfwd_c⁄fig
 = 
π5350_fwd_c⁄fig
,

145 .
	gtx_dma
 = 
π5350_tx_dma
,

146 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_8DWORDS
,

147 .
	gchecksum_bô
 = 
RX_DMA_L4VALID
,

148 .
	grx_öt
 = 
RT5350_RX_DONE_INT
,

149 .
	gtx_öt
 = 
RT5350_TX_DONE_INT
,

152 c⁄° 
of_devi˚_id
 
	gof_„_m©ch
[] = {

153 { .
com∑tibÀ
 = "ølök,π3050-ëh", .
	gd©a
 = &
π3050_d©a
 },

154 { .
	gcom∑tibÀ
 = "ølök,π5350-ëh", .
	gd©a
 = &
π5350_d©a
 },

158 
MODULE_DEVICE_TABLE
(
of
, 
of_„_m©ch
);

	@linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt3883.c

15 
	~<löux/moduÀ.h
>

17 
	~<asm/mach-ølök/ølök_ªgs.h
>

19 
	~"mtk_ëh_soc.h
"

20 
	~"mdio_π2880.h
"

22 
	#RT3883_RSTCTRL_FE
 
	`BIT
(21)

	)

24 
	$π3883_„_ª£t
()

26 
	`„_ª£t
(
RT3883_RSTCTRL_FE
);

27 
	}
}

29 
	$π3883_fwd_c⁄fig
(
„_¥iv
 *
¥iv
)

31 
ªt
;

33 
ªt
 = 
	`„_£t_˛ock_cy˛e
(
¥iv
);

34 i‡(
ªt
)

35  
ªt
;

37 
	`„_fwd_c⁄fig
(
¥iv
);

38 
	`„_w32
(
FE_PSE_FQFC_CFG_256Q
, 
FE_PSE_FQ_CFG
);

39 
	`„_csum_c⁄fig
(
¥iv
);

41  
ªt
;

42 
	}
}

44 
	$π3883_öô_d©a
(
„_soc_d©a
 *
d©a
,

45 
√t_devi˚
 *
√tdev
)

47 
„_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

49 
¥iv
->
Êags
 = 
FE_FLAG_PADDING_64B
 | 
FE_FLAG_PADDING_BUG
 |

50 
FE_FLAG_JUMBO_FRAME
 | 
FE_FLAG_CALIBRATE_CLK
;

51 
√tdev
->
hw_„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_IP_CSUM
 |

52 
NETIF_F_RXCSUM
 | 
NETIF_F_HW_VLAN_CTAG_TX
;

53 
	}
}

55 
„_soc_d©a
 
	gπ3883_d©a
 = {

56 .
öô_d©a
 = 
π3883_öô_d©a
,

57 .
	gª£t_„
 = 
π3883_„_ª£t
,

58 .
	gfwd_c⁄fig
 = 
π3883_fwd_c⁄fig
,

59 .
	gpdma_glo_cfg
 = 
FE_PDMA_SIZE_8DWORDS
,

60 .
	grx_öt
 = 
FE_RX_DONE_INT
,

61 .
	gtx_öt
 = 
FE_TX_DONE_INT
,

62 .
	g°©us_öt
 = 
FE_CNT_GDM_AF
,

63 .
	gchecksum_bô
 = 
RX_DMA_L4VALID
,

64 .
	gmdio_ªad
 = 
π2880_mdio_ªad
,

65 .
	gmdio_wrôe
 = 
π2880_mdio_wrôe
,

66 .
	gmdio_adju°_lök
 = 
π2880_mdio_lök_adju°
,

67 .
	gp‹t_öô
 = 
π2880_p‹t_öô
,

70 c⁄° 
of_devi˚_id
 
	gof_„_m©ch
[] = {

71 { .
com∑tibÀ
 = "ølök,π3883-ëh", .
	gd©a
 = &
π3883_d©a
 },

75 
MODULE_DEVICE_TABLE
(
of
, 
of_„_m©ch
);

	@linux/ramips/image/lzma-loader/src/LzmaDecode.c

22 
	~"LzmaDecode.h
"

24 
	#kNumT›Bôs
 24

	)

25 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

27 
	#kNumBôModñTŸÆBôs
 11

	)

28 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

29 
	#kNumMoveBôs
 5

	)

31 
	#RC_READ_BYTE
 (*
Buf„r
++)

	)

33 
	#RC_INIT2
 
Code
 = 0; 
R™ge
 = 0xFFFFFFFF; \

34 { 
i
; ò0; i < 5; i++Ë{ 
RC_TEST
; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }}

	)

36 #ifde‡
_LZMA_IN_CB


38 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
) \

39 { 
SizeT
 
size
; 
ªsu…
 = 
InCÆlback
->
	`Ród
(InCÆlback, &
Buf„r
, &size); i‡‘esu… !
LZMA_RESULT_OK
) Ñesult; \

40 
Buf„rLim
 = 
Buf„r
 + 
size
; i‡(sizê=0Ë 
LZMA_RESULT_DATA_ERROR
; }}

	)

42 
	#RC_INIT
 
Buf„r
 = 
Buf„rLim
 = 0; 
RC_INIT2


	)

46 
	#RC_TEST
 { i‡(
Buf„r
 =
Buf„rLim
Ë 
LZMA_RESULT_DATA_ERROR
; }

	)

48 
	#RC_INIT
(
buf„r
, 
buf„rSize
Ë
Buf„r
 = buf„r; 
Buf„rLim
 = buf„∏+ buf„rSize; 
RC_INIT2


	)

52 
	#RC_NORMALIZE
 i‡(
R™ge
 < 
kT›VÆue
Ë{ 
RC_TEST
; R™gê<<8; 
Code
 = (Codê<< 8Ë| 
RC_READ_BYTE
; }

	)

54 
	#IfBô0
(
p
Ë
RC_NORMALIZE
; 
bound
 = (
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *’); i‡(
Code
 < bound)

	)

55 
	#Upd©eBô0
(
p
Ë
R™ge
 = 
bound
; *’Ë+(
kBôModñTŸÆ
 - *’)Ë>> 
kNumMoveBôs
;

	)

56 
	#Upd©eBô1
(
p
Ë
R™ge
 -
bound
; 
Code
 -bound; *’Ë-(*’)Ë>> 
kNumMoveBôs
;

	)

58 
	#RC_GET_BIT2
(
p
, 
mi
, 
A0
, 
A1
Ë
	`IfBô0
(p) \

59 { 
	`Upd©eBô0
(
p
); 
mi
 <<1; 
A0
; } \

60 { 
	`Upd©eBô1
(
p
); 
mi
 = (mò+ miË+ 1; 
A1
; }

	)

62 
	#RC_GET_BIT
(
p
, 
mi
Ë
	`RC_GET_BIT2
’, mi, ; , ;)

	)

64 
	#R™geDecodîBôTªeDecode
(
¥obs
, 
numLevñs
, 
ªs
) \

65 { 
i
 = 
numLevñs
; 
ªs
 = 1; \

66 dÿ{ 
CProb
 *
p
 = 
¥obs
 + 
ªs
; 
	`RC_GET_BIT
’,ÑesË} --
i
 != 0); \

67 
ªs
 -(1 << 
numLevñs
); }

	)

70 
	#kNumPosBôsMax
 4

	)

71 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

73 
	#kLíNumLowBôs
 3

	)

74 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

75 
	#kLíNumMidBôs
 3

	)

76 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

77 
	#kLíNumHighBôs
 8

	)

78 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

80 
	#LíChoi˚
 0

	)

81 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

82 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

83 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

84 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

85 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

88 
	#kNumSèãs
 12

	)

89 
	#kNumLôSèãs
 7

	)

91 
	#kSèπPosModñIndex
 4

	)

92 
	#kEndPosModñIndex
 14

	)

93 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

95 
	#kNumPosSlŸBôs
 6

	)

96 
	#kNumLíToPosSèãs
 4

	)

98 
	#kNumAlignBôs
 4

	)

99 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

101 
	#kM©chMöLí
 2

	)

103 
	#IsM©ch
 0

	)

104 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

105 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

106 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

107 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

108 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

109 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

110 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

111 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

112 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

113 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

114 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

116 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


117 
	gSt›CompûögDueBUG


120 
	$LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
)

122 
¥›0
;

123 i‡(
size
 < 
LZMA_PROPERTIES_SIZE
)

124  
LZMA_RESULT_DATA_ERROR
;

125 
¥›0
 = 
¥›sD©a
[0];

126 i‡(
¥›0
 >= (9 * 5 * 5))

127  
LZMA_RESULT_DATA_ERROR
;

129 
¥›sRes
->
pb
 = 0; 
¥›0
 >= (9 * 5);ÖropsRes->pb++,Örop0 -= (9 * 5));

130 
¥›sRes
->
Õ
 = 0; 
¥›0
 >= 9;ÖropsRes->lp++,Örop0 -= 9);

131 
¥›sRes
->
lc
 = 
¥›0
;

140 #ifde‡
_LZMA_OUT_READ


142 
i
;

143 
¥›sRes
->
Di˘i⁄¨ySize
 = 0;

144 
i
 = 0; i < 4; i++)

145 
¥›sRes
->
Di˘i⁄¨ySize
 +(
UI¡32
)(
¥›sD©a
[1 + 
i
]) << (i * 8);

146 i‡(
¥›sRes
->
Di˘i⁄¨ySize
 == 0)

147 
¥›sRes
->
Di˘i⁄¨ySize
 = 1;

150  
LZMA_RESULT_OK
;

151 
	}
}

153 
	#kLzmaSåómWasFöishedId
 (-1)

	)

155 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

156 #ifde‡
_LZMA_IN_CB


157 
ILzmaInCÆlback
 *
InCÆlback
,

159 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

161 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
)

163 
CProb
 *
	gp
 = 
vs
->
Probs
;

164 
SizeT
 
	gnowPos
 = 0;

165 
Byã
 
	g¥eviousByã
 = 0;

166 
UI¡32
 
	gposSèãMask
 = (1 << (
vs
->
Pr›îtõs
.
pb
)) - 1;

167 
UI¡32
 
	glôîÆPosMask
 = (1 << (
vs
->
Pr›îtõs
.
Õ
)) - 1;

168 
	glc
 = 
vs
->
Pr›îtõs
.
lc
;

170 #ifde‡
_LZMA_OUT_READ


172 
UI¡32
 
	gR™ge
 = 
vs
->
R™ge
;

173 
UI¡32
 
	gCode
 = 
vs
->
Code
;

174 #ifde‡
_LZMA_IN_CB


175 c⁄° 
Byã
 *
	gBuf„r
 = 
vs
->
Buf„r
;

176 c⁄° 
Byã
 *
	gBuf„rLim
 = 
vs
->
Buf„rLim
;

178 c⁄° 
Byã
 *
	gBuf„r
 = 
öSåóm
;

179 c⁄° 
Byã
 *
	gBuf„rLim
 = 
öSåóm
 + 
öSize
;

181 
	g°©e
 = 
vs
->
Sèã
;

182 
UI¡32
 
	gªp0
 = 
vs
->
Rïs
[0], 
	gªp1
 = vs->Rïs[1], 
	gªp2
 = vs->Rïs[2], 
	gªp3
 = vs->Reps[3];

183 
	gÀn
 = 
vs
->
RemaöLí
;

184 
UI¡32
 
	gglobÆPos
 = 
vs
->
GlobÆPos
;

185 
UI¡32
 
	gdi°™˚Limô
 = 
vs
->
Di°™˚Limô
;

187 
Byã
 *
	gdi˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

188 
UI¡32
 
	gdi˘i⁄¨ySize
 = 
vs
->
Pr›îtõs
.
Di˘i⁄¨ySize
;

189 
UI¡32
 
	gdi˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

191 
Byã
 
	gãmpDi˘i⁄¨y
[4];

193 #i‚de‡
_LZMA_IN_CB


194 *
	göSizePro˚s£d
 = 0;

196 *
	goutSizePro˚s£d
 = 0;

197 i‡(
	gÀn
 =
kLzmaSåómWasFöishedId
)

198  
LZMA_RESULT_OK
;

200 i‡(
	gdi˘i⁄¨ySize
 == 0)

202 
di˘i⁄¨y
 = 
ãmpDi˘i⁄¨y
;

203 
	gdi˘i⁄¨ySize
 = 1;

204 
	gãmpDi˘i⁄¨y
[0] = 
vs
->
TempDi˘i⁄¨y
[0];

207 i‡(
	gÀn
 =
kLzmaNìdInôId
)

210 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

211 
UI¡32
 
	gi
;

212 
	gi
 = 0; i < 
	gnumProbs
; i++)

213 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

214 
	gªp0
 = 
ªp1
 = 
ªp2
 = 
ªp3
 = 1;

215 
	g°©e
 = 0;

216 
	gglobÆPos
 = 0;

217 
	gdi°™˚Limô
 = 0;

218 
	gdi˘i⁄¨yPos
 = 0;

219 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

220 #ifde‡
_LZMA_IN_CB


221 
	gRC_INIT
;

223 
RC_INIT
(
öSåóm
, 
öSize
);

226 
	gÀn
 = 0;

228 
	gÀn
 !0 && 
nowPos
 < 
outSize
)

230 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

231 i‡(
	gpos
 >
di˘i⁄¨ySize
)

232 
pos
 +
di˘i⁄¨ySize
;

233 
	goutSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

234 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

235 
di˘i⁄¨yPos
 = 0;

236 
	gÀn
--;

238 i‡(
	gdi˘i⁄¨yPos
 == 0)

239 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

241 
	g¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

245 
	g°©e
 = 0;

246 
UI¡32
 
	gªp0
 = 1, 
	gªp1
 = 1, 
	gªp2
 = 1, 
	gªp3
 = 1;

247 
	gÀn
 = 0;

248 c⁄° 
Byã
 *
	gBuf„r
;

249 c⁄° 
Byã
 *
	gBuf„rLim
;

250 
UI¡32
 
	gR™ge
;

251 
UI¡32
 
	gCode
;

253 #i‚de‡
_LZMA_IN_CB


254 *
	göSizePro˚s£d
 = 0;

256 *
	goutSizePro˚s£d
 = 0;

259 
UI¡32
 
	gi
;

260 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
vs
->
Pr›îtõs
.
Õ
));

261 
	gi
 = 0; i < 
	gnumProbs
; i++)

262 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

265 #ifde‡
_LZMA_IN_CB


266 
	gRC_INIT
;

268 
RC_INIT
(
öSåóm
, 
öSize
);

273 
	gnowPos
 < 
	goutSize
)

275 
CProb
 *
	g¥ob
;

276 
UI¡32
 
	gbound
;

277 
	gposSèã
 = ()(

278 (
nowPos


279 #ifde‡
_LZMA_OUT_READ


280 + 
globÆPos


283 & 
posSèãMask
);

285 
	g¥ob
 = 
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

286 
IfBô0
(
¥ob
)

288 
	gsymbﬁ
 = 1;

289 
Upd©eBô0
(
¥ob
)

290 
	g¥ob
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

292 (
nowPos


293 #ifde‡
_LZMA_OUT_READ


294 + 
globÆPos


297 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

299 i‡(
	g°©e
 >
kNumLôSèãs
)

301 
m©chByã
;

302 #ifde‡
_LZMA_OUT_READ


303 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

304 i‡(
	gpos
 >
di˘i⁄¨ySize
)

305 
pos
 +
di˘i⁄¨ySize
;

306 
	gm©chByã
 = 
di˘i⁄¨y
[
pos
];

308 
	gm©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

312 
	gbô
;

313 
CProb
 *
	g¥obLô
;

314 
	gm©chByã
 <<= 1;

315 
	gbô
 = (
m©chByã
 & 0x100);

316 
	g¥obLô
 = 
¥ob
 + 0x100 + 
bô
 + 
symbﬁ
;

317 
RC_GET_BIT2
(
¥obLô
, 
symbﬁ
, i‡(
bô
 != 0) , if (bit == 0) )

319 
	gsymbﬁ
 < 0x100);

321 
	gsymbﬁ
 < 0x100)

323 
CProb
 *
	g¥obLô
 = 
¥ob
 + 
symbﬁ
;

324 
RC_GET_BIT
(
¥obLô
, 
symbﬁ
)

326 
	g¥eviousByã
 = (
Byã
)
symbﬁ
;

328 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

329 #ifde‡
_LZMA_OUT_READ


330 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

331 
	gdi°™˚Limô
++;

333 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

334 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

335 
di˘i⁄¨yPos
 = 0;

337 i‡(
	g°©e
 < 4) state = 0;

338 i‡(
	g°©e
 < 10) state -= 3;

339 
	g°©e
 -= 6;

343 
Upd©eBô1
(
¥ob
);

344 
	g¥ob
 = 
p
 + 
IsRï
 + 
°©e
;

345 
IfBô0
(
¥ob
)

347 
Upd©eBô0
(
¥ob
);

348 
	gªp3
 = 
ªp2
;

349 
	gªp2
 = 
ªp1
;

350 
	gªp1
 = 
ªp0
;

351 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 0 : 3;

352 
	g¥ob
 = 
p
 + 
LíCodî
;

356 
Upd©eBô1
(
¥ob
);

357 
	g¥ob
 = 
p
 + 
IsRïG0
 + 
°©e
;

358 
IfBô0
(
¥ob
)

360 
Upd©eBô0
(
¥ob
);

361 
	g¥ob
 = 
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
;

362 
IfBô0
(
¥ob
)

364 #ifde‡
_LZMA_OUT_READ


365 
UI¡32
 
	gpos
;

367 
Upd©eBô0
(
¥ob
);

369 #ifde‡
_LZMA_OUT_READ


370 i‡(
	gdi°™˚Limô
 == 0)

372 i‡(
nowPos
 == 0)

374  
LZMA_RESULT_DATA_ERROR
;

376 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 9 : 11;

377 #ifde‡
_LZMA_OUT_READ


378 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

379 i‡(
	gpos
 >
di˘i⁄¨ySize
)

380 
pos
 +
di˘i⁄¨ySize
;

381 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

382 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

383 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

384 
di˘i⁄¨yPos
 = 0;

386 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

388 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

389 #ifde‡
_LZMA_OUT_READ


390 i‡(
	gdi°™˚Limô
 < 
	gdi˘i⁄¨ySize
)

391 
	gdi°™˚Limô
++;

398 
Upd©eBô1
(
¥ob
);

403 
UI¡32
 
	gdi°™˚
;

404 
Upd©eBô1
(
¥ob
);

405 
	g¥ob
 = 
p
 + 
IsRïG1
 + 
°©e
;

406 
IfBô0
(
¥ob
)

408 
Upd©eBô0
(
¥ob
);

409 
	gdi°™˚
 = 
ªp1
;

413 
Upd©eBô1
(
¥ob
);

414 
	g¥ob
 = 
p
 + 
IsRïG2
 + 
°©e
;

415 
IfBô0
(
¥ob
)

417 
Upd©eBô0
(
¥ob
);

418 
	gdi°™˚
 = 
ªp2
;

422 
Upd©eBô1
(
¥ob
);

423 
	gdi°™˚
 = 
ªp3
;

424 
	gªp3
 = 
ªp2
;

426 
	gªp2
 = 
ªp1
;

428 
	gªp1
 = 
ªp0
;

429 
	gªp0
 = 
di°™˚
;

431 
	g°©e
 = 
°©e
 < 
kNumLôSèãs
 ? 8 : 11;

432 
	g¥ob
 = 
p
 + 
RïLíCodî
;

435 
	gnumBôs
, 
	goff£t
;

436 
CProb
 *
	g¥obLí
 = 
¥ob
 + 
LíChoi˚
;

437 
IfBô0
(
¥obLí
)

439 
Upd©eBô0
(
¥obLí
);

440 
	g¥obLí
 = 
¥ob
 + 
LíLow
 + (
posSèã
 << 
kLíNumLowBôs
);

441 
	goff£t
 = 0;

442 
	gnumBôs
 = 
kLíNumLowBôs
;

446 
Upd©eBô1
(
¥obLí
);

447 
	g¥obLí
 = 
¥ob
 + 
LíChoi˚2
;

448 
IfBô0
(
¥obLí
)

450 
Upd©eBô0
(
¥obLí
);

451 
	g¥obLí
 = 
¥ob
 + 
LíMid
 + (
posSèã
 << 
kLíNumMidBôs
);

452 
	goff£t
 = 
kLíNumLowSymbﬁs
;

453 
	gnumBôs
 = 
kLíNumMidBôs
;

457 
Upd©eBô1
(
¥obLí
);

458 
	g¥obLí
 = 
¥ob
 + 
LíHigh
;

459 
	goff£t
 = 
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
;

460 
	gnumBôs
 = 
kLíNumHighBôs
;

463 
R™geDecodîBôTªeDecode
(
¥obLí
, 
numBôs
, 
Àn
);

464 
	gÀn
 +
off£t
;

467 i‡(
	g°©e
 < 4)

469 
	gposSlŸ
;

470 
	g°©e
 +
kNumLôSèãs
;

471 
	g¥ob
 = 
p
 + 
PosSlŸ
 +

472 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

473 
kNumPosSlŸBôs
);

474 
R™geDecodîBôTªeDecode
(
¥ob
, 
kNumPosSlŸBôs
, 
posSlŸ
);

475 i‡(
	gposSlŸ
 >
kSèπPosModñIndex
)

477 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

478 
	gªp0
 = (2 | ((
UI¡32
)
posSlŸ
 & 1));

479 i‡(
	gposSlŸ
 < 
	gkEndPosModñIndex
)

481 
	gªp0
 <<
numDúe˘Bôs
;

482 
	g¥ob
 = 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1;

486 
	gnumDúe˘Bôs
 -
kNumAlignBôs
;

489 
RC_NORMALIZE


490 
	gR™ge
 >>= 1;

491 
	gªp0
 <<= 1;

492 i‡(
	gCode
 >
R™ge
)

494 
Code
 -
R™ge
;

495 
	gªp0
 |= 1;

498 --
	gnumDúe˘Bôs
 != 0);

499 
	g¥ob
 = 
p
 + 
Align
;

500 
	gªp0
 <<
kNumAlignBôs
;

501 
	gnumDúe˘Bôs
 = 
kNumAlignBôs
;

504 
	gi
 = 1;

505 
	gmi
 = 1;

508 
CProb
 *
	g¥ob3
 = 
¥ob
 + 
mi
;

509 
RC_GET_BIT2
(
¥ob3
, 
mi
, ; , 
ªp0
 |
i
);

510 
	gi
 <<= 1;

512 --
	gnumDúe˘Bôs
 != 0);

516 
	gªp0
 = 
posSlŸ
;

517 i‡(++
	gªp0
 =(
UI¡32
)(0))

520 
Àn
 = 
kLzmaSåómWasFöishedId
;

525 
	gÀn
 +
kM©chMöLí
;

526 #ifde‡
_LZMA_OUT_READ


527 i‡(
	gªp0
 > 
	gdi°™˚Limô
)

529 i‡(
	gªp0
 > 
	gnowPos
)

531  
	gLZMA_RESULT_DATA_ERROR
;

533 #ifde‡
_LZMA_OUT_READ


534 i‡(
	gdi˘i⁄¨ySize
 - 
	gdi°™˚Limô
 > (
	gUI¡32
)
	gÀn
)

535 
	gdi°™˚Limô
 +
Àn
;

537 
	gdi°™˚Limô
 = 
di˘i⁄¨ySize
;

542 #ifde‡
_LZMA_OUT_READ


543 
UI¡32
 
	gpos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

544 i‡(
	gpos
 >
di˘i⁄¨ySize
)

545 
pos
 +
di˘i⁄¨ySize
;

546 
	g¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

547 
	gdi˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

548 i‡(++
	gdi˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

549 
di˘i⁄¨yPos
 = 0;

551 
	g¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

553 
	gÀn
--;

554 
	goutSåóm
[
nowPos
++] = 
¥eviousByã
;

556 
	gÀn
 !0 && 
nowPos
 < 
outSize
);

559 
	gRC_NORMALIZE
;

561 #ifde‡
_LZMA_OUT_READ


562 
	gvs
->
	gR™ge
 = 
R™ge
;

563 
	gvs
->
	gCode
 = 
Code
;

564 
	gvs
->
	gDi˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

565 
	gvs
->
	gGlobÆPos
 = 
globÆPos
 + (
UI¡32
)
nowPos
;

566 
	gvs
->
	gDi°™˚Limô
 = 
di°™˚Limô
;

567 
	gvs
->
	gRïs
[0] = 
ªp0
;

568 
	gvs
->
	gRïs
[1] = 
ªp1
;

569 
	gvs
->
	gRïs
[2] = 
ªp2
;

570 
	gvs
->
	gRïs
[3] = 
ªp3
;

571 
	gvs
->
	gSèã
 = 
°©e
;

572 
	gvs
->
	gRemaöLí
 = 
Àn
;

573 
	gvs
->
	gTempDi˘i⁄¨y
[0] = 
ãmpDi˘i⁄¨y
[0];

576 #ifde‡
_LZMA_IN_CB


577 
	gvs
->
	gBuf„r
 = 
Buf„r
;

578 
	gvs
->
	gBuf„rLim
 = 
Buf„rLim
;

580 *
	göSizePro˚s£d
 = (
SizeT
)(
Buf„r
 - 
öSåóm
);

582 *
	goutSizePro˚s£d
 = 
nowPos
;

583  
	gLZMA_RESULT_OK
;

	@linux/ramips/image/lzma-loader/src/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

25 
	~"LzmaTy≥s.h
"

40 #ifde‡
_LZMA_PROB32


41 
	#CProb
 
UI¡32


	)

43 
	#CProb
 
UI¡16


	)

46 
	#LZMA_RESULT_OK
 0

	)

47 
	#LZMA_RESULT_DATA_ERROR
 1

	)

49 #ifde‡
_LZMA_IN_CB


50 
	s_ILzmaInCÆlback


52 (*
	mRód
)(*
	mobje˘
, c⁄° **
	mbuf„r
, 
SizeT
 *
	mbuf„rSize
);

53 } 
	tILzmaInCÆlback
;

56 
	#LZMA_BASE_SIZE
 1846

	)

57 
	#LZMA_LIT_SIZE
 768

	)

59 
	#LZMA_PROPERTIES_SIZE
 5

	)

61 
	s_CLzmaPr›îtõs


63 
	mlc
;

64 
	mÕ
;

65 
	mpb
;

66 #ifde‡
_LZMA_OUT_READ


67 
UI¡32
 
	mDi˘i⁄¨ySize
;

69 }
	tCLzmaPr›îtõs
;

71 
LzmaDecodePr›îtõs
(
CLzmaPr›îtõs
 *
¥›sRes
, c⁄° *
¥›sD©a
, 
size
);

73 
	#LzmaGëNumProbs
(
Pr›îtõs
Ë(
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << ((Pr›îtõs)->
lc
 + (Pr›îtõs)->
Õ
)))

	)

75 
	#kLzmaNìdInôId
 (-2)

	)

77 
	s_CLzmaDecodîSèã


79 
CLzmaPr›îtõs
 
	mPr›îtõs
;

80 
CProb
 *
	mProbs
;

82 #ifde‡
_LZMA_IN_CB


83 c⁄° *
	mBuf„r
;

84 c⁄° *
	mBuf„rLim
;

87 #ifde‡
_LZMA_OUT_READ


88 *
	mDi˘i⁄¨y
;

89 
UI¡32
 
	mR™ge
;

90 
UI¡32
 
	mCode
;

91 
UI¡32
 
	mDi˘i⁄¨yPos
;

92 
UI¡32
 
	mGlobÆPos
;

93 
UI¡32
 
	mDi°™˚Limô
;

94 
UI¡32
 
	mRïs
[4];

95 
	mSèã
;

96 
	mRemaöLí
;

97 
	mTempDi˘i⁄¨y
[4];

99 } 
	tCLzmaDecodîSèã
;

101 #ifde‡
_LZMA_OUT_READ


102 
	#LzmaDecodîInô
(
vs
Ë{ (vs)->
RemaöLí
 = 
kLzmaNìdInôId
; }

	)

105 
LzmaDecode
(
CLzmaDecodîSèã
 *
vs
,

106 #ifde‡
_LZMA_IN_CB


107 
ILzmaInCÆlback
 *
öCÆlback
,

109 c⁄° *
öSåóm
, 
SizeT
 
öSize
, SizeT *
öSizePro˚s£d
,

111 *
outSåóm
, 
SizeT
 
outSize
, SizeT *
outSizePro˚s£d
);

	@linux/ramips/image/lzma-loader/src/LzmaTypes.h

10 #i‚de‡
__LZMATYPES_H


11 
	#__LZMATYPES_H


	)

13 #i‚de‡
_7ZIP_BYTE_DEFINED


14 
	#_7ZIP_BYTE_DEFINED


	)

15 
	tByã
;

18 #i‚de‡
_7ZIP_UINT16_DEFINED


19 
	#_7ZIP_UINT16_DEFINED


	)

20 
	tUI¡16
;

23 #i‚de‡
_7ZIP_UINT32_DEFINED


24 
	#_7ZIP_UINT32_DEFINED


	)

25 #ifde‡
_LZMA_UINT32_IS_ULONG


26 
	tUI¡32
;

28 
	tUI¡32
;

35 #i‚de‡
_7ZIP_SIZET_DEFINED


36 
	#_7ZIP_SIZET_DEFINED


	)

37 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


38 
UI¡32
 
	tSizeT
;

40 
	~<°ddef.h
>

41 
size_t
 
	tSizeT
;

	@linux/ramips/image/lzma-loader/src/board-mt7621.c

11 
	~<°ddef.h
>

12 
	~<°döt.h
>

13 
	~"c⁄fig.h
"

15 
	#READREG
(
r
Ë*(vﬁ©ûê
uöt32_t
 *)‘)

	)

16 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê
uöt32_t
 *)‘Ë
	)
v

18 
	#KSEG1ADDR
(
_x
Ë(((_xË& 0x1fffffffË| 0xa0000000)

	)

20 
	#UART_BASE
 0xBE000C00

	)

22 
	#UART_TBR_OFFSET
 0x00

	)

23 
	#UART_LSR_OFFSET
 0x14

	)

25 
	#UART_LSR_TEMT
 (1 << 6)

	)

27 
	#UART_READ
(
r
Ë
	`READREG
(
UART_BASE
 + (r))

	)

28 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART_BASE
 + (r), (v))

	)

30 
	$bﬂrd_putc
(
ch
)

32 ((
	`UART_READ
(
UART_LSR_OFFSET
)Ë& 
UART_LSR_TEMT
) == 0);

33 
	`UART_WRITE
(
UART_TBR_OFFSET
, 
ch
);

34 ((
	`UART_READ
(
UART_LSR_OFFSET
)Ë& 
UART_LSR_TEMT
) == 0);

35 
	}
}

37 
	$bﬂrd_öô
()

39 
	}
}

	@linux/ramips/image/lzma-loader/src/board-ralink.c

11 
	~<°ddef.h
>

12 
	~"c⁄fig.h
"

14 
	#READREG
(
r
Ë*(vﬁ©ûê*)‘)

	)

15 
	#WRITEREG
(
r
,
v
Ë*(vﬁ©ûê*)‘Ë
	)
v

17 
	#KSEG1ADDR
(
_x
Ë(((_xË& 0x1fffffffË| 0xa0000000)

	)

19 #ifde‡
CONFIG_SOC_RT288X


20 
	#UART_BASE
 0xb0300c00

	)

22 
	#UART_BASE
 0xb0000c00

	)

25 
	#UART_TX
 1

	)

26 
	#UART_LSR
 7

	)

28 
	#UART_LSR_THRE
 0x20

	)

30 
	#UART_READ
(
r
Ë
	`READREG
(
UART_BASE
 + 4 * (r))

	)

31 
	#UART_WRITE
(
r
,
v
Ë
	`WRITEREG
(
UART_BASE
 + 4 * (r), (v))

	)

33 
	$bﬂrd_putc
(
ch
)

35 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

36 
	`UART_WRITE
(
UART_TX
, 
ch
);

37 ((
	`UART_READ
(
UART_LSR
)Ë& 
UART_LSR_THRE
) == 0);

38 
	}
}

40 
	$bﬂrd_öô
()

42 
	}
}

	@linux/ramips/image/lzma-loader/src/cache.c

16 
	~"ˇche.h
"

17 
	~"ˇche›s.h
"

18 
	~"c⁄fig.h
"

20 
	#ˇche_›
(
›
,
addr
) \

21 
__asm__
 
	`__vﬁ©ûe__
( \

28 : "i" (
›
), "R" (*(*)(
addr
)))

	)

30 
	$Êush_ˇche
(
°¨t_addr
, 
size
)

32 
lsize
 = 
CONFIG_CACHELINE_SIZE
;

33 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

34 
´nd
 = (
°¨t_addr
 + 
size
 - 1Ë& ~(
lsize
 - 1);

37 
	`ˇche_›
(
Hô_Wrôeback_Inv_D
, 
addr
);

38 
	`ˇche_›
(
Hô_InvÆid©e_I
, 
addr
);

39 i‡(
addr
 =
´nd
)

41 
addr
 +
lsize
;

43 
	}
}

	@linux/ramips/image/lzma-loader/src/cache.h

12 #i‚de‡
__CACHE_H


13 
	#__CACHE_H


	)

15 
Êush_ˇche
(
°¨t_addr
, 
size
);

	@linux/ramips/image/lzma-loader/src/cacheops.h

11 #i‚def 
__ASM_CACHEOPS_H


12 
	#__ASM_CACHEOPS_H


	)

17 
	#Index_InvÆid©e_I
 0x00

	)

18 
	#Index_Wrôeback_Inv_D
 0x01

	)

19 
	#Index_Lﬂd_Tag_I
 0x04

	)

20 
	#Index_Lﬂd_Tag_D
 0x05

	)

21 
	#Index_St‹e_Tag_I
 0x08

	)

22 
	#Index_St‹e_Tag_D
 0x09

	)

23 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

24 
	#Hô_InvÆid©e_I
 0x00

	)

26 
	#Hô_InvÆid©e_I
 0x10

	)

28 
	#Hô_InvÆid©e_D
 0x11

	)

29 
	#Hô_Wrôeback_Inv_D
 0x15

	)

34 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

35 
	#Fûl
 0x14

	)

36 
	#Hô_Wrôeback_I
 0x18

	)

37 
	#Hô_Wrôeback_D
 0x19

	)

42 
	#Index_InvÆid©e_SI
 0x02

	)

43 
	#Index_Wrôeback_Inv_SD
 0x03

	)

44 
	#Index_Lﬂd_Tag_SI
 0x06

	)

45 
	#Index_Lﬂd_Tag_SD
 0x07

	)

46 
	#Index_St‹e_Tag_SI
 0x0A

	)

47 
	#Index_St‹e_Tag_SD
 0x0B

	)

48 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

49 
	#Hô_InvÆid©e_SI
 0x12

	)

50 
	#Hô_InvÆid©e_SD
 0x13

	)

51 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

52 
	#Hô_Wrôeback_SD
 0x1b

	)

53 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

54 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

59 
	#R5K_Page_InvÆid©e_S
 0x17

	)

64 
	#Page_InvÆid©e_T
 0x16

	)

72 
	#Index_Wrôeback_Inv_S
 0x03

	)

73 
	#Index_Lﬂd_Tag_S
 0x07

	)

74 
	#Index_St‹e_Tag_S
 0x0B

	)

75 
	#Hô_InvÆid©e_S
 0x13

	)

76 
	#Cache_B¨rõr
 0x14

	)

77 
	#Hô_Wrôeback_Inv_S
 0x17

	)

78 
	#Index_Lﬂd_D©a_I
 0x18

	)

79 
	#Index_Lﬂd_D©a_D
 0x19

	)

80 
	#Index_Lﬂd_D©a_S
 0x1b

	)

81 
	#Index_St‹e_D©a_I
 0x1c

	)

82 
	#Index_St‹e_D©a_D
 0x1d

	)

83 
	#Index_St‹e_D©a_S
 0x1f

	)

	@linux/ramips/image/lzma-loader/src/config.h

12 #i‚de‡
_CONFIG_H_


13 
	#_CONFIG_H_


	)

15 #i‚de‡
CONFIG_FLASH_OFFS


16 
	#CONFIG_FLASH_OFFS
 0

	)

19 #i‚de‡
CONFIG_FLASH_MAX


20 
	#CONFIG_FLASH_MAX
 0

	)

23 #i‚de‡
CONFIG_FLASH_STEP


24 
	#CONFIG_FLASH_STEP
 0x1000

	)

	@linux/ramips/image/lzma-loader/src/cp0regdef.h

7 #i‚de‡
_˝0ªgdef_h_


8 
	#_˝0ªgdef_h_


	)

10 
	#CP0_INDEX
 
$0


	)

11 
	#CP0_RANDOM
 
$1


	)

12 
	#CP0_ENTRYLO0
 
$2


	)

13 
	#CP0_ENTRYLO1
 
$3


	)

14 
	#CP0_CONTEXT
 
$4


	)

15 
	#CP0_PAGEMASK
 
$5


	)

16 
	#CP0_WIRED
 
$6


	)

17 
	#CP0_BADVADDR
 
$8


	)

18 
	#CP0_COUNT
 
$9


	)

19 
	#CP0_ENTRYHI
 
$10


	)

20 
	#CP0_COMPARE
 
$11


	)

21 
	#CP0_STATUS
 
$12


	)

22 
	#CP0_CAUSE
 
$13


	)

23 
	#CP0_EPC
 
$14


	)

24 
	#CP0_PRID
 
$15


	)

25 
	#CP0_CONFIG
 
$16


	)

26 
	#CP0_LLADDR
 
$17


	)

27 
	#CP0_WATCHLO
 
$18


	)

28 
	#CP0_WATCHHI
 
$19


	)

29 
	#CP0_XCONTEXT
 
$20


	)

30 
	#CP0_FRAMEMASK
 
$21


	)

31 
	#CP0_DIAGNOSTIC
 
$22


	)

32 
	#CP0_PERFORMANCE
 
$25


	)

33 
	#CP0_ECC
 
$26


	)

34 
	#CP0_CACHEERR
 
$27


	)

35 
	#CP0_TAGLO
 
$28


	)

36 
	#CP0_TAGHI
 
$29


	)

37 
	#CP0_ERROREPC
 
$30


	)

	@linux/ramips/image/lzma-loader/src/loader.c

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

26 
	~"c⁄fig.h
"

27 
	~"ˇche.h
"

28 
	~"¥ötf.h
"

29 
	~"LzmaDecode.h
"

31 
	#AR71XX_FLASH_START
 0x1f000000

	)

32 
	#AR71XX_FLASH_END
 0x1„00000

	)

34 
	#KSEG0
 0x80000000

	)

35 
	#KSEG1
 0xa0000000

	)

37 
	#KSEG1ADDR
(
a
Ë(((()◊)Ë& 0x1fffffffUË| 
KSEG1
)

	)

39 #unde‡
LZMA_DEBUG


41 #ifde‡
LZMA_DEBUG


42 
	#DBG
(
f
, 
a
...Ë
	`¥ötf
(f, ##á)

	)

44 
	#DBG
(
f
, 
a
...Ëdÿ{} 0)

	)

47 
	#IH_MAGIC_OKLI
 0x4f4b4c49

	)

49 
	#IH_NMLEN
 32

	)

51 
	simage_hódî
 {

52 
uöt32_t
 
	mih_magic
;

53 
uöt32_t
 
	mih_h¸c
;

54 
uöt32_t
 
	mih_time
;

55 
uöt32_t
 
	mih_size
;

56 
uöt32_t
 
	mih_lﬂd
;

57 
uöt32_t
 
	mih_ï
;

58 
uöt32_t
 
	mih_d¸c
;

59 
uöt8_t
 
	mih_os
;

60 
uöt8_t
 
	mih_¨ch
;

61 
uöt8_t
 
	mih_ty≥
;

62 
uöt8_t
 
	mih_comp
;

63 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

64 } 
	timage_hódî_t
;

67 
w‹k•a˚
[];

68 
bﬂrd_öô
();

70 
CLzmaDecodîSèã
 
	glzma_°©e
;

71 *
	glzma_d©a
;

72 
	glzma_d©asize
;

73 
	glzma_outsize
;

74 
	gkî√l_œ
;

76 #ifde‡
CONFIG_KERNEL_CMDLINE


77 
	#kî√l_¨gc
 2

	)

78 c⁄° 
	gkî√l_cmdlöe
[] = 
CONFIG_KERNEL_CMDLINE
;

79 c⁄° *
	gkî√l_¨gv
[] = {

80 
NULL
,

81 
kî√l_cmdlöe
,

82 
NULL
,

86 
	$hÆt
()

88 
	`¥ötf
("\nSystem halted!\n");

90 
	}
}

92 
__ölöe__
 
	$gë_be32
(*
buf
)

94 *
p
 = 
buf
;

96  (((Ë
p
[0] << 24) +

97 ((Ë
p
[1] << 16) +

98 ((Ë
p
[2] << 8) +

99 (Ë
p
[3]);

100 
	}
}

102 
__ölöe__
 
	$lzma_gë_byã
()

104 
c
;

106 
lzma_d©asize
--;

107 
c
 = *
lzma_d©a
++;

109  
c
;

110 
	}
}

112 
	$lzma_öô_¥›s
()

114 
¥›s
[
LZMA_PROPERTIES_SIZE
];

115 
ªs
;

116 
i
;

119 
i
 = 0; i < 
LZMA_PROPERTIES_SIZE
; i++)

120 
¥›s
[
i
] = 
	`lzma_gë_byã
();

123 
lzma_outsize
 = ((
SizeT
Ë
	`lzma_gë_byã
()) +

124 ((
SizeT
Ë
	`lzma_gë_byã
() << 8) +

125 ((
SizeT
Ë
	`lzma_gë_byã
() << 16) +

126 ((
SizeT
Ë
	`lzma_gë_byã
() << 24);

129 
i
 = 0; i < 4; i++)

130 
	`lzma_gë_byã
();

132 
ªs
 = 
	`LzmaDecodePr›îtõs
(&
lzma_°©e
.
Pr›îtõs
, 
¥›s
,

133 
LZMA_PROPERTIES_SIZE
);

134  
ªs
;

135 
	}
}

137 
	$lzma_decom¥ess
(*
outSåóm
)

139 
SizeT
 
ù
, 
›
;

140 
ªt
;

142 
lzma_°©e
.
Probs
 = (
CProb
 *Ë
w‹k•a˚
;

144 
ªt
 = 
	`LzmaDecode
(&
lzma_°©e
, 
lzma_d©a
, 
lzma_d©asize
, &
ù
, 
outSåóm
,

145 
lzma_outsize
, &
›
);

147 i‡(
ªt
 !
LZMA_RESULT_OK
) {

148 
i
;

150 
	`DBG
("LzmaDecodeÉrror %dát %08x, osize:%d ip:%d op:%d\n",

151 
ªt
, 
lzma_d©a
 + 
ù
, 
lzma_outsize
, ip, 
›
);

153 
i
 = 0; i < 16; i++)

154 
	`DBG
("%02x ", 
lzma_d©a
[
ù
 + 
i
]);

156 
	`DBG
("\n");

159  
ªt
;

160 
	}
}

162 #i‡(
LZMA_WRAPPER
)

163 
	$lzma_öô_d©a
()

165 
_lzma_d©a_°¨t
[];

166 
_lzma_d©a_íd
[];

168 
kî√l_œ
 = 
LOADADDR
;

169 
lzma_d©a
 = 
_lzma_d©a_°¨t
;

170 
lzma_d©asize
 = 
_lzma_d©a_íd
 - 
_lzma_d©a_°¨t
;

171 
	}
}

173 
	$lzma_öô_d©a
()

175 
image_hódî
 *
hdr
 = 
NULL
;

176 *
Êash_ba£
;

177 
Êash_ofs
;

178 
kî√l_ofs
;

179 
kî√l_size
;

181 
Êash_ba£
 = (*Ë
	`KSEG1ADDR
(
AR71XX_FLASH_START
);

183 
	`¥ötf
("Looking for OpenWrt image... ");

185 
Êash_ofs
 = 
CONFIG_FLASH_OFFS
;

186 
Êash_ofs
 <(
CONFIG_FLASH_OFFS
 + 
CONFIG_FLASH_MAX
);

187 
Êash_ofs
 +
CONFIG_FLASH_STEP
) {

188 
magic
;

189 *
p
;

191 
p
 = 
Êash_ba£
 + 
Êash_ofs
;

192 
magic
 = 
	`gë_be32
(
p
);

193 i‡(
magic
 =
IH_MAGIC_OKLI
) {

194 
hdr
 = (
image_hódî
 *Ë
p
;

199 i‡(
hdr
 =
NULL
) {

200 
	`¥ötf
("not found!\n");

201 
	`hÆt
();

204 
	`¥ötf
("foundáà0x%08x\n", 
Êash_ba£
 + 
Êash_ofs
);

206 
kî√l_ofs
 = (
image_hódî
);

207 
kî√l_size
 = 
	`gë_be32
(&
hdr
->
ih_size
);

208 
kî√l_œ
 = 
	`gë_be32
(&
hdr
->
ih_lﬂd
);

210 
lzma_d©a
 = 
Êash_ba£
 + 
Êash_ofs
 + 
kî√l_ofs
;

211 
lzma_d©asize
 = 
kî√l_size
;

212 
	}
}

215 
	$lﬂdî_maö
(
ªg_a0
, 
ªg_a1
,

216 
ªg_a2
, 
ªg_a3
)

218 (*
kî√l_íåy
) (, , ,

220 
ªs
;

222 
	`bﬂrd_öô
();

224 
	`¥ötf
("\n\nOpenWrt kernelÜoader for MIPS based SoC\n");

225 
	`¥ötf
("Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>\n");

227 
	`lzma_öô_d©a
();

229 
ªs
 = 
	`lzma_öô_¥›s
();

230 i‡(
ªs
 !
LZMA_RESULT_OK
) {

231 
	`¥ötf
("Incorrect LZMA streamÖroperties!\n");

232 
	`hÆt
();

235 
	`¥ötf
("Decompressing kernel... ");

237 
ªs
 = 
	`lzma_decom¥ess
((*Ë
kî√l_œ
);

238 i‡(
ªs
 !
LZMA_RESULT_OK
) {

239 
	`¥ötf
("failed, ");

240 
ªs
) {

241 
LZMA_RESULT_DATA_ERROR
:

242 
	`¥ötf
("dataÉrror!\n");

245 
	`¥ötf
("unknow¿îr‹ %d!\n", 
ªs
);

247 
	`hÆt
();

249 
	`¥ötf
("done!\n");

252 
	`Êush_ˇche
(
kî√l_œ
, 
lzma_outsize
);

254 
	`¥ötf
("Sèπög kî√»© %08x...\n\n", 
kî√l_œ
);

256 #ifde‡
CONFIG_KERNEL_CMDLINE


257 
ªg_a0
 = 
kî√l_¨gc
;

258 
ªg_a1
 = (Ë
kî√l_¨gv
;

259 
ªg_a2
 = 0;

260 
ªg_a3
 = 0;

263 
kî√l_íåy
 = (*Ë
kî√l_œ
;

264 
	`kî√l_íåy
(
ªg_a0
, 
ªg_a1
, 
ªg_a2
, 
ªg_a3
);

265 
	}
}

	@linux/ramips/image/lzma-loader/src/printf.c

12 
	~"¥ötf.h
"

14 
bﬂrd_putc
(
ch
);

17 
	#LP_MAX_BUF
 256

	)

20 
	#IsDigô
(
x
Ë–((xË>'0'Ë&& ((xË<'9'Ë)

	)

21 
	#Ctod
(
x
Ë–(xË- '0')

	)

24 
PrötCh¨
(*, , , );

25 
PrötSåög
(*, *, , );

26 
PrötNum
(*, , , , , , , );

29 c⁄° 
	gtheF©ÆMsg
[] = "fatalÉrror inÜp_Print!";

35 
	$Õ_Pröt
((*
ouçut
)(*, *, ),

36 * 
¨g
,

37 *
fmt
,

38 
va_li°
 
≠
)

41 
	#OUTPUT
(
¨g
, 
s
, 
l
) \

42 { i‡(((
l
Ë< 0Ë|| (÷Ë> 
LP_MAX_BUF
)) { \

43 (*
ouçut
)(
¨g
, (*)
theF©ÆMsg
, (theFatalMsg)-1); ;;); \

45 (*
ouçut
)(
¨g
, 
s
, 
l
); \

47 }

	)

49 
buf
[
LP_MAX_BUF
];

51 
c
;

52 *
s
;

53 
num
;

55 
l⁄gFœg
;

56 
√gFœg
;

57 
width
;

58 
¥ec
;

59 
œdju°
;

60 
∑dc
;

62 
Àngth
;

67 *
fmtSèπ
 = 
fmt
;

68  (*
fmt
 != '\0') && (*fmt != '%')) {

69 
fmt
 ++;

73 
	`OUTPUT
(
¨g
, 
fmtSèπ
, 
fmt
-fmtStart);

76 i‡(*
fmt
 == '\0') ;

80 
fmt
 ++;

83 i‡(*
fmt
 == 'l') {

84 
l⁄gFœg
 = 1;

85 
fmt
 ++;

87 
l⁄gFœg
 = 0;

91 
width
 = 0;

92 
¥ec
 = -1;

93 
œdju°
 = 0;

94 
∑dc
 = ' ';

96 i‡(*
fmt
 == '-') {

97 
œdju°
 = 1;

98 
fmt
 ++;

101 i‡(*
fmt
 == '0') {

102 
∑dc
 = '0';

103 
fmt
++;

106 i‡(
	`IsDigô
(*
fmt
)) {

107 
	`IsDigô
(*
fmt
)) {

108 
width
 = 10 * width + 
	`Ctod
(*
fmt
++);

112 i‡(*
fmt
 == '.') {

113 
fmt
 ++;

114 i‡(
	`IsDigô
(*
fmt
)) {

115 
¥ec
 = 0;

116 
	`IsDigô
(*
fmt
)) {

117 
¥ec
 =Öªc*10 + 
	`Ctod
(*
fmt
++);

124 
√gFœg
 = 0;

125 *
fmt
) {

127 i‡(
l⁄gFœg
) {

128 
num
 = 
	`va_¨g
(
≠
, );

130 
num
 = 
	`va_¨g
(
≠
, );

132 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 2, 0, 
width
, 
œdju°
, 
∑dc
, 0);

133 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

138 i‡(
l⁄gFœg
) {

139 
num
 = 
	`va_¨g
(
≠
, );

141 
num
 = 
	`va_¨g
(
≠
, );

143 i‡(
num
 < 0) {

144 
num
 = -Çum;

145 
√gFœg
 = 1;

147 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 
√gFœg
, 
width
, 
œdju°
, 
∑dc
, 0);

148 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

153 i‡(
l⁄gFœg
) {

154 
num
 = 
	`va_¨g
(
≠
, );

156 
num
 = 
	`va_¨g
(
≠
, );

158 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 8, 0, 
width
, 
œdju°
, 
∑dc
, 0);

159 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

164 i‡(
l⁄gFœg
) {

165 
num
 = 
	`va_¨g
(
≠
, );

167 
num
 = 
	`va_¨g
(
≠
, );

169 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 10, 0, 
width
, 
œdju°
, 
∑dc
, 0);

170 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

174 i‡(
l⁄gFœg
) {

175 
num
 = 
	`va_¨g
(
≠
, );

177 
num
 = 
	`va_¨g
(
≠
, );

179 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 0);

180 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

184 i‡(
l⁄gFœg
) {

185 
num
 = 
	`va_¨g
(
≠
, );

187 
num
 = 
	`va_¨g
(
≠
, );

189 
Àngth
 = 
	`PrötNum
(
buf
, 
num
, 16, 0, 
width
, 
œdju°
, 
∑dc
, 1);

190 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

194 
c
 = ()
	`va_¨g
(
≠
, );

195 
Àngth
 = 
	`PrötCh¨
(
buf
, 
c
, 
width
, 
œdju°
);

196 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

200 
s
 = (*)
	`va_¨g
(
≠
, *);

201 
Àngth
 = 
	`PrötSåög
(
buf
, 
s
, 
width
, 
œdju°
);

202 
	`OUTPUT
(
¨g
, 
buf
, 
Àngth
);

206 
fmt
 --;

211 
	`OUTPUT
(
¨g
, 
fmt
, 1);

214 
fmt
 ++;

218 
	`OUTPUT
(
¨g
, "\0", 1);

219 
	}
}

224 
	$PrötCh¨
(* 
buf
, 
c
, 
Àngth
, 
œdju°
)

226 
i
;

228 i‡(
Àngth
 < 1)Üength = 1;

229 i‡(
œdju°
) {

230 *
buf
 = 
c
;

231 
i
=1; i< 
Àngth
; i++Ë
buf
[i] = ' ';

233 
i
=0; i< 
Àngth
-1; i++Ë
buf
[i] = ' ';

234 
buf
[
Àngth
 - 1] = 
c
;

236  
Àngth
;

237 
	}
}

240 
	$PrötSåög
(* 
buf
, * 
s
, 
Àngth
, 
œdju°
)

242 
i
;

243 
Àn
=0;

244 * 
s1
 = 
s
;

245 *
s1
++Ë
Àn
++;

246 i‡(
Àngth
 < 
Àn
)Üength =Üen;

248 i‡(
œdju°
) {

249 
i
=0; i< 
Àn
; i++Ë
buf
[i] = 
s
[i];

250 
i
=
Àn
; i< 
Àngth
; i++Ë
buf
[i] = ' ';

252 
i
=0; i< 
Àngth
-
Àn
; i++Ë
buf
[i] = ' ';

253 
i
=
Àngth
-
Àn
; i <Üígth; i++Ë
buf
[i] = 
s
[i-length+len];

255  
Àngth
;

256 
	}
}

259 
	$PrötNum
(* 
buf
, 
u
, 
ba£
, 
√gFœg
,

260 
Àngth
, 
œdju°
, 
∑dc
, 
upˇ£
)

272 
a˘uÆLígth
 =0;

273 *
p
 = 
buf
;

274 
i
;

277 
tmp
 = 
u
 %
ba£
;

278 i‡(
tmp
 <= 9) {

279 *
p
++ = '0' + 
tmp
;

280 } i‡(
upˇ£
) {

281 *
p
++ = 'A' + 
tmp
 - 10;

283 *
p
++ = 'a' + 
tmp
 - 10;

285 
u
 /
ba£
;

286 } 
u
 != 0);

288 i‡(
√gFœg
) {

289 *
p
++ = '-';

293 
a˘uÆLígth
 = 
p
 - 
buf
;

294 i‡(
Àngth
 < 
a˘uÆLígth
)Üength =áctualLength;

297 i‡(
œdju°
) {

298 
∑dc
 = ' ';

300 i‡(
√gFœg
 && !
œdju°
 && (
∑dc
 == '0')) {

301 
i
 = 
a˘uÆLígth
-1; i< 
Àngth
-1; i++Ë
buf
[i] = 
∑dc
;

302 
buf
[
Àngth
 -1] = '-';

304 
i
 = 
a˘uÆLígth
; i< 
Àngth
; i++Ë
buf
[i] = 
∑dc
;

310 
begö
 = 0;

311 
íd
;

312 i‡(
œdju°
) {

313 
íd
 = 
a˘uÆLígth
 - 1;

315 
íd
 = 
Àngth
 -1;

318 
íd
 > 
begö
) {

319 
tmp
 = 
buf
[
begö
];

320 
buf
[
begö
] = buf[
íd
];

321 
buf
[
íd
] = 
tmp
;

322 
begö
 ++;

323 
íd
 --;

328  
Àngth
;

329 
	}
}

331 
	$¥ötf_ouçut
(*
¨g
, *
s
, 
l
)

333 
i
;

336 i‡((
l
==1Ë&& (
s
[0] == '\0')) ;

338 
i
=0; i< 
l
; i++) {

339 
	`bﬂrd_putc
(
s
[
i
]);

340 i‡(
s
[
i
] ='\n'Ë
	`bﬂrd_putc
('\r');

342 
	}
}

344 
	$¥ötf
(*
fmt
, ...)

346 
va_li°
 
≠
;

347 
	`va_°¨t
(
≠
, 
fmt
);

348 
	`Õ_Pröt
(
¥ötf_ouçut
, 0, 
fmt
, 
≠
);

349 
	`va_íd
(
≠
);

350 
	}
}

	@linux/ramips/image/lzma-loader/src/printf.h

12 #i‚de‡
_¥ötf_h_


13 
	#_¥ötf_h_


	)

15 
	~<°d¨g.h
>

16 
¥ötf
(*
fmt
, ...);

	@linux/samsung/files-4.14/drivers/mtd/nand/s5pxx_nand.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/dñay.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/°rög.h
>

15 
	~<löux/i›‹t.h
>

16 
	~<löux/of_∂©f‹m.h
>

17 
	~<löux/dñay.h
>

18 
	~<löux/îr.h
>

19 
	~<löux/˛k.h
>

20 
	~<löux/jiffõs.h
>

21 
	~<löux/sched.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/io.h
>

25 
	~<löux/mtd/mtd.h
>

26 
	~<löux/mtd/øw«nd.h
>

27 
	~<löux/mtd/«nd_ecc.h
>

28 
	~<löux/mtd/∑πôi⁄s.h
>

30 
	#S5P_NFCONF
 0x00

	)

31 
	#S5P_NFCONT
 0x04

	)

32 
	#S5P_NFCMD
 0x08

	)

33 
	#S5P_NFADDR
 0x0c

	)

34 
	#S5P_NFDATA
 0x10

	)

35 
	#S5P_NFMECCDATA0
 0x14

	)

36 
	#S5P_NFMECCDATA1
 0x18

	)

37 
	#S5P_NFSECCDATA
 0x1c

	)

38 
	#S5P_NFSBLK
 0x20

	)

39 
	#S5P_NFEBLK
 0x24

	)

40 
	#S5P_NFSTAT
 0x28

	)

41 
	#S5P_NFMECCERR0
 0x2c

	)

42 
	#S5P_NFMECCERR1
 0x30

	)

43 
	#S5P_NFMECC0
 0x34

	)

44 
	#S5P_NFMECC1
 0x38

	)

45 
	#S5P_NFSECC
 0x3c

	)

46 
	#S5P_NFMLCBITPT
 0x40

	)

47 
	#S5P_NF8ECCERR0
 0x44

	)

48 
	#S5P_NF8ECCERR1
 0x48

	)

49 
	#S5P_NF8ECCERR2
 0x4C

	)

50 
	#S5P_NFM8ECC0
 0x50

	)

51 
	#S5P_NFM8ECC1
 0x54

	)

52 
	#S5P_NFM8ECC2
 0x58

	)

53 
	#S5P_NFM8ECC3
 0x5C

	)

54 
	#S5P_NFMLC8BITPT0
 0x60

	)

55 
	#S5P_NFMLC8BITPT1
 0x64

	)

57 
	#S5P_NFECCCONF
 0x00

	)

58 
	#S5P_NFECCCONT
 0x20

	)

59 
	#S5P_NFECCSTAT
 0x30

	)

60 
	#S5P_NFECCSECSTAT
 0x40

	)

61 
	#S5P_NFECCPRGECC
 0x90

	)

62 
	#S5P_NFECCERL
 0xC0

	)

63 
	#S5P_NFECCERP
 0xF0

	)

65 
	#S5P_NFCONF_NANDBOOT
 (1 << 31)

	)

66 
	#S5P_NFCONF_ECCCLKCON
 (1 << 30)

	)

67 
	#S5P_NFCONF_ECC_MLC
 (1 << 24)

	)

68 
	#S5P_NFCONF_ECC_1BIT
 (0 << 23)

	)

69 
	#S5P_NFCONF_ECC_4BIT
 (2 << 23)

	)

70 
	#S5P_NFCONF_ECC_8BIT
 (1 << 23)

	)

71 
	#S5P_NFCONF_TACLS
(
x
Ë((xË<< 12)

	)

72 
	#S5P_NFCONF_TWRPH0
(
x
Ë((xË<< 8)

	)

73 
	#S5P_NFCONF_TWRPH1
(
x
Ë((xË<< 4)

	)

74 
	#S5P_NFCONF_MLC
 (1 << 3)

	)

75 
	#S5P_NFCONF_PAGESIZE
 (1 << 2)

	)

76 
	#S5P_NFCONF_ADDRCYCLE
 (1 << 1)

	)

77 
	#S5P_NFCONF_BUSWIDTH
 (1 << 0)

	)

79 
	#S5P_NFCONT_ECC_ENC
 (1 << 18)

	)

80 
	#S5P_NFCONT_LOCKTGHT
 (1 << 17)

	)

81 
	#S5P_NFCONT_LOCKSOFT
 (1 << 16)

	)

82 
	#S5P_NFCONT_MECCLOCK
 (1 << 7)

	)

83 
	#S5P_NFCONT_SECCLOCK
 (1 << 6)

	)

84 
	#S5P_NFCONT_INITMECC
 (1 << 5)

	)

85 
	#S5P_NFCONT_INITSECC
 (1 << 4)

	)

86 
	#S5P_NFCONT_nFCE1
 (1 << 2)

	)

87 
	#S5P_NFCONT_nFCE0
 (1 << 1)

	)

88 
	#S5P_NFCONT_MODE
 (1 << 0)

	)

90 
	#S5P_NFSTAT_READY
 (1 << 0)

	)

92 
	#S5P_NFECCCONT_MECCRESET
 (1 << 0)

	)

93 
	#S5P_NFECCCONT_MECCINIT
 (1 << 2)

	)

94 
	#S5P_NFECCCONT_ECCDIRWR
 (1 << 16)

	)

96 
	#S5P_NFECCSTAT_ECCBUSY
 (1 << 31)

	)

98 
	es5p_˝u_ty≥
 {

99 
	mTYPE_S5PV210
,

102 
	ss5p_«nd_ho°
 {

103 
«nd_chù
 
	m«nd_chù
;

104 
__iomem
 *
	mnf_ba£
;

105 
__iomem
 *
	mecc_ba£
;

106 
˛k
 *
	m˛k
[2];

107 
s5p_˝u_ty≥
 
	m˝u_ty≥
;

117 
	$s5pcxx_oobœyout_ecc
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

118 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

120 i‡(
£˘i⁄
)

121  -
ERANGE
;

123 
oobªgi⁄
->
off£t
 = 12;

124 
oobªgi⁄
->
Àngth
 = 52;

127 
	}
}

129 
	$s5pcxx_oobœyout_‰ì
(
mtd_öfo
 *
mtd
, 
£˘i⁄
,

130 
mtd_oob_ªgi⁄
 *
oobªgi⁄
)

132 i‡(
£˘i⁄
)

133  -
ERANGE
;

135 
oobªgi⁄
->
off£t
 = 2;

136 
oobªgi⁄
->
Àngth
 = 10;

139 
	}
}

141 c⁄° 
mtd_oobœyout_›s
 
	gs5pcxx_oobœyout_›s
 = {

142 .
ecc
 = 
s5pcxx_oobœyout_ecc
,

143 .
	g‰ì
 = 
s5pcxx_oobœyout_‰ì
,

146 
ölöe
 
	$rwl
(*
ªg
, 
uöt32_t
 
r°
, uöt32_à
£t
)

148 
uöt32_t
 
r
;

149 
r
 = 
	`ªadl
(
ªg
);

150 
r
 &~
r°
;

151 
r
 |
£t
;

152 
	`wrôñ
(
r
, 
ªg
);

153 
	}
}

158 
	$s5p_cmd_˘æ
(
mtd_öfo
 *
mtd
, 
d©
, 
˘æ
)

160 
«nd_chù
 *«nd_chù = 
mtd
->
¥iv
;

161 
s5p_«nd_ho°
 *
ho°
 = 
«nd_chù
->
¥iv
;

163 i‡(
d©
 =
NAND_CMD_NONE
)

166 i‡(
˘æ
 & 
NAND_CLE
)

167 
	`wrôeb
(
d©
, 
ho°
->
nf_ba£
 + 
S5P_NFCMD
);

169 
	`wrôeb
(
d©
, 
ho°
->
nf_ba£
 + 
S5P_NFADDR
);

170 
	}
}

175 
	$s5p_«nd_devi˚_ªady
(
mtd_öfo
 *
mtd
)

177 
«nd_chù
 *«nd_chù = 
mtd
->
¥iv
;

178 
s5p_«nd_ho°
 *
ho°
 = 
«nd_chù
->
¥iv
;

183  
	`ªadl
(
ho°
->
nf_ba£
 + 
S5P_NFSTAT
Ë& 
S5P_NFSTAT_READY
;

184 
	}
}

186 
	$s3_«nd_£À˘_chù
(
mtd_öfo
 *
mtd
, 
chù
)

188 
«nd_chù
 *«nd_chù = 
mtd
->
¥iv
;

189 
s5p_«nd_ho°
 *
ho°
 = 
«nd_chù
->
¥iv
;

190 
u32
 
vÆue
 = 
	`ªadl
(
ho°
->
nf_ba£
 + 
S5P_NFCONT
);

192 i‡(
chù
 == -1)

193 
vÆue
 |
S5P_NFCONT_nFCE0
;

195 
vÆue
 &~
S5P_NFCONT_nFCE0
;

197 
	`wrôñ
(
vÆue
, 
ho°
->
nf_ba£
 + 
S5P_NFCONT
);

198 
	}
}

200 
	$s5pcxx_«nd_íabÀ_hwecc
(
mtd_öfo
 *
mtd
, 
mode
)

202 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

203 
s5p_«nd_ho°
 *
ho°
 = 
chù
->
¥iv
;

205 
uöt32_t
 
ªg
;

208 
ªg
 = 3;

209 
ªg
 |(
chù
->
ecc
.
size
 - 1) << 16;

210 
	`wrôñ
(
ªg
, 
ho°
->
ecc_ba£
 + 
S5P_NFECCCONF
);

213 
	`rwl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCCONT
, 
S5P_NFECCCONT_ECCDIRWR
,

214 (
mode
 =
NAND_ECC_WRITE
Ë? 
S5P_NFECCCONT_ECCDIRWR
 : 0);

217 
	`rwl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCSTAT
, 0, (1 << 24) | (1 << 25));

220 
	`rwl
(
ho°
->
nf_ba£
 + 
S5P_NFCONT
, 
S5P_NFCONT_MECCLOCK
, 0);

223 
	`rwl
(
ho°
->
ecc_ba£
 +
S5P_NFECCCONT
, 0, 
S5P_NFECCCONT_MECCINIT
);

224 
	}
}

226 
	$ªadecc
(*
eccba£
, 
uöt8_t
 *
ecc_code
, 
ecc_Àn
)

228 
uöt32_t
 
i
, 
j
, 
ªg
;

230 
i
 = 0; i < 
ecc_Àn
; i += 4) {

231 
ªg
 = 
	`ªadl
(
eccba£
 + 
i
);

232 
j
 = 0; (j < 4Ë&& (
i
 + j < 
ecc_Àn
); ++j) {

233 
ecc_code
[
i
 + 
j
] = 
ªg
 & 0xFF;

234 
ªg
 >>= 8;

237 
	}
}

239 
	$s5pcxx_«nd_ˇlcuœã_ecc
(
mtd_öfo
 *
mtd
, c⁄° 
uöt8_t
 *
d©
, uöt8_à*
ecc_code
)

241 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

242 
s5p_«nd_ho°
 *
ho°
 = 
chù
->
¥iv
;

245 
	`rwl
(
ho°
->
nf_ba£
 + 
S5P_NFCONT
, 0, 
S5P_NFCONT_MECCLOCK
);

247 i‡(
ecc_code
) {

249 !(
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCSTAT
) & (1 << 25)));

250 
	`ªadecc
(
ho°
->
ecc_ba£
 + 
S5P_NFECCPRGECC
, 
ecc_code
, 
chù
->
ecc
.
byãs
);

253 !(
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCSTAT
) & (1 << 24)));

257 
	}
}

259 
	$s5pcxx_«nd_c‹ª˘_d©a
(
mtd_öfo
 *
mtd
, 
u8
 *
d©
,

260 
u8
 *
ªad_ecc
, u8 *
ˇlc_ecc
)

262 
ªt
 = 0;

263 
u32
 
îrNo
;

264 
u32
 
îl0
, 
îl1
, 
îl2
, 
îl3
, 
îp0
, 
îp1
;

265 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

266 
s5p_«nd_ho°
 *
ho°
 = 
chù
->
¥iv
;

269 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCSTAT
) & (1 << 31));

271 
îrNo
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCSECSTAT
) & 0x1F;

272 
îl0
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERL
);

273 
îl1
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERL
 + 0x04);

274 
îl2
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERL
 + 0x08);

275 
îl3
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERL
 + 0x0C);

277 
îp0
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERP
);

278 
îp1
 = 
	`ªadl
(
ho°
->
ecc_ba£
 + 
S5P_NFECCERP
 + 0x04);

280 
îrNo
) {

282 
d©
[(
îl3
 >> 16Ë& 0x3FF] ^(
îp1
 >> 24) & 0xFF;

284 
d©
[
îl3
 & 0x3FF] ^(
îp1
 >> 16) & 0xFF;

286 
d©
[(
îl2
 >> 16Ë& 0x3FF] ^(
îp1
 >> 8) & 0xFF;

288 
d©
[
îl2
 & 0x3FF] ^
îp1
 & 0xFF;

290 
d©
[(
îl1
 >> 16Ë& 0x3FF] ^(
îp0
 >> 24) & 0xFF;

292 
d©
[
îl1
 & 0x3FF] ^(
îp0
 >> 16) & 0xFF;

294 
d©
[(
îl0
 >> 16Ë& 0x3FF] ^(
îp0
 >> 8) & 0xFF;

296 
d©
[
îl0
 & 0x3FF] ^
îp0
 & 0xFF;

300 
ªt
 = -1;

301 
	`¥ötk
("ECC unc‹ª˘abÀÉº‹ dëe˘ed:%d\n", 
îrNo
);

305  
ªt
;

306 
	}
}

308 
	$s5pcxx_«nd_ªad_∑ge_hwecc
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
,

309 
uöt8_t
 *
buf
, 
oob_ªquúed
, 
∑ge
)

311 
mtd_oob_ªgi⁄
 
oobªgi⁄
 = { };

312 
i
, 
eccsize
 = 
chù
->
ecc
.
size
;

313 
eccbyãs
 = 
chù
->
ecc
.
byãs
;

314 
ecc°ïs
 = 
chù
->
ecc
.
°ïs
;

315 
uöt8_t
 *
oobecc
;

316 
cﬁ
, 
°©
;

319 
chù
->
ecc
.
	`ªad_oob
(
mtd
, chù, 
∑ge
);

320 
	`mtd_oobœyout_ecc
(
mtd
, 0, &
oobªgi⁄
);

321 
oobecc
 = 
chù
->
oob_poi
 + 
oobªgi⁄
.
off£t
;

323 
i
 = 0, 
cﬁ
 = 0; 
ecc°ïs
;Écc°ïs--, i +
eccbyãs
, 
buf
 +
eccsize
, col +=Éccsize) {

324 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_RNDOUT
, 
cﬁ
, -1);

325 
chù
->
ecc
.
	`hw˘l
(
mtd
, 
NAND_ECC_READ
);

326 
chù
->
	`ªad_buf
(
mtd
, 
buf
, 
eccsize
);

327 
chù
->
	`wrôe_buf
(
mtd
, 
oobecc
 + 
i
, 
eccbyãs
);

328 
chù
->
ecc
.
	`ˇlcuœã
(
mtd
, 
NULL
, NULL);

329 
°©
 = 
chù
->
ecc
.
	`c‹ª˘
(
mtd
, 
buf
, 
NULL
, NULL);

330 i‡(
°©
 < 0)

331 
mtd
->
ecc_°©s
.
Áûed
++;

333 
mtd
->
ecc_°©s
.
c‹ª˘ed
 +
°©
;

336 
	}
}

338 
	$s5p_«nd_öôhw_œãr
(
mtd_öfo
 *
mtd
)

340 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

341 
s5p_«nd_ho°
 *
ho°
 = 
chù
->
¥iv
;

342 
u32
 
vÆue
;

344 
vÆue
 = 
	`ªadl
(
ho°
->
nf_ba£
 + 
S5P_NFCONF
);

346 i‡(
	`«nd_is_¶c
(
chù
)) {

347 
vÆue
 &~
S5P_NFCONF_MLC
;

349 i‡(
mtd
->
wrôesize
 == 512) {

350 
vÆue
 |
S5P_NFCONF_PAGESIZE
;

353 
vÆue
 &~
S5P_NFCONF_PAGESIZE
;

356 
vÆue
 |
S5P_NFCONF_MLC
;

358 i‡(
mtd
->
wrôesize
 == 4096)

359 
vÆue
 &~
S5P_NFCONF_PAGESIZE
;

361 
vÆue
 |
S5P_NFCONF_PAGESIZE
;

363 
	}
}

365 
	$s5p_«nd_öôhw
(
s5p_«nd_ho°
 *
ho°
)

367 
u32
 
vÆue
;

370 
vÆue
 = 
	`ªadl
(
ho°
->
nf_ba£
 + 
S5P_NFCONT
);

371 
	`wrôñ
(
vÆue
 | 
S5P_NFCONT_MODE
, 
ho°
->
nf_ba£
 + 
S5P_NFCONT
);

372 
	}
}

374 
	$s5p_«nd_∑r£_dt
(
s5p_«nd_ho°
 *
ho°
, 
devi˚
 *
dev
)

376 
ho°
->
˝u_ty≥
 = (
s5p_˝u_ty≥
)
	`of_devi˚_gë_m©ch_d©a
(
dev
);

377 
	}
}

379 
	$s5p_«nd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

381 
ªt
;

382 
s5p_«nd_ho°
 *
ho°
;

383 
«nd_chù
 *nand_chip;

384 
mtd_öfo
 *
mtd
;

385 
ªsour˚
 *
mem
;

388 
ho°
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (
s5p_«nd_ho°
), 
GFP_KERNEL
);

389 i‡(!
ho°
)

390  -
ENOMEM
;

392 
mem
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

393 
ho°
->
nf_ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
mem
);

394 i‡(
	`IS_ERR
(
ho°
->
nf_ba£
))

395  
	`PTR_ERR
(
ho°
->
nf_ba£
);

397 
mem
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 1);

398 
ho°
->
ecc_ba£
 = 
	`devm_i‹em≠_ªsour˚
(&
pdev
->
dev
, 
mem
);

399 i‡(
	`IS_ERR
(
ho°
->
ecc_ba£
))

400  
	`PTR_ERR
(
ho°
->
ecc_ba£
);

402 
«nd_chù
 = &
ho°
->nand_chip;

403 
«nd_chù
->
¥iv
 = 
ho°
;

404 
	`«nd_£t_Êash_node
(
«nd_chù
, 
pdev
->
dev
.
of_node
);

406 
mtd
 = 
	`«nd_to_mtd
(
«nd_chù
);

407 
mtd
->
dev
.
∑ª¡
 = &
pdev
->dev;

408 
mtd
->
¥iv
 = 
«nd_chù
;

411 
	`wrôñ
((0x1 << 1Ë| (0x1 << 0), 
ho°
->
nf_ba£
 + 
S5P_NFCONT
);

414 
«nd_chù
->
IO_ADDR_R
 = 
ho°
->
nf_ba£
 + 
S5P_NFDATA
;

415 
«nd_chù
->
IO_ADDR_W
 = 
ho°
->
nf_ba£
 + 
S5P_NFDATA
;

417 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
ho°
);

420 
ho°
->
˛k
[0] = 
	`devm_˛k_gë
(&
pdev
->
dev
, "nandxl");

421 i‡(
	`IS_ERR
(
ho°
->
˛k
[0])) {

422 
	`dev_îr
(&
pdev
->
dev
, "cannot get clock ofÇandxl\n");

423  -
ENOENT
;

425 
	`˛k_¥ï¨e_íabÀ
(
ho°
->
˛k
[0]);

427 
ho°
->
˛k
[1] = 
	`devm_˛k_gë
(&
pdev
->
dev
, "nand");

428 i‡(
	`IS_ERR
(
ho°
->
˛k
[1])) {

429 
	`dev_îr
(&
pdev
->
dev
, "cannot get clock ofÇand\n");

430  -
ENOENT
;

432 
	`˛k_¥ï¨e_íabÀ
(
ho°
->
˛k
[1]);

434 
	`s5p_«nd_∑r£_dt
(
ho°
, &
pdev
->
dev
);

436 
«nd_chù
->
£À˘_chù
 = 
s3_«nd_£À˘_chù
;

437 
«nd_chù
->
cmd_˘æ
 = 
s5p_cmd_˘æ
;

438 
«nd_chù
->
dev_ªady
 = 
s5p_«nd_devi˚_ªady
;

440 
	`s5p_«nd_öôhw
(
ho°
);

442 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 1, 
NULL
);

443 i‡(
ªt
)

444  
ªt
;

446 i‡(
«nd_chù
->
ecc
.
mode
 =
NAND_ECC_HW
) {

447 
«nd_chù
->
ecc
.
c‹ª˘
 = 
s5pcxx_«nd_c‹ª˘_d©a
;

448 
«nd_chù
->
ecc
.
ˇlcuœã
 = 
s5pcxx_«nd_ˇlcuœã_ecc
;

449 
«nd_chù
->
ecc
.
hw˘l
 = 
s5pcxx_«nd_íabÀ_hwecc
;

450 
«nd_chù
->
ecc
.
ªad_∑ge
 = 
s5pcxx_«nd_ªad_∑ge_hwecc
;

452 
«nd_chù
->
ecc
.
size
 = 512;

453 
«nd_chù
->
ecc
.
byãs
 = 13;

455 
	`mtd_£t_oobœyout
(
	`«nd_to_mtd
(
«nd_chù
), &
s5pcxx_oobœyout_›s
);

458 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

459 i‡(
ªt
)

460  
ªt
;

463 
	`s5p_«nd_öôhw_œãr
(
mtd
);

465  
	`mtd_devi˚_∑r£_ªgi°î
(
mtd
, 
NULL
, NULL, NULL, 0);

466 
	}
}

468 
	$s5p_«nd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

470 
s5p_«nd_ho°
 *
ho°
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

471 
mtd_öfo
 *
mtd
 = 
	`«nd_to_mtd
(&
ho°
->
«nd_chù
);

473 
	`«nd_ªÀa£
(
mtd
);

474 
	`˛k_dißbÀ_u≈ª∑ª
(
ho°
->
˛k
[0]);

475 
	`˛k_dißbÀ_u≈ª∑ª
(
ho°
->
˛k
[1]);

478 
	}
}

480 c⁄° 
of_devi˚_id
 
	gs5p_«nd_m©ch
[] = {

481 { .
com∑tibÀ
 = "ßmsung,s5pv210-«nd", .
	gd©a
 = 
TYPE_S5PV210
 },

484 
MODULE_DEVICE_TABLE
(
of
, 
s5p_«nd_m©ch
);

486 
∂©f‹m_drivî
 
	gs5p_«nd_drivî
 = {

487 .
¥obe
 = 
s5p_«nd_¥obe
,

488 .
	gªmove
 = 
s5p_«nd_ªmove
,

489 .
	gdrivî
 = {

490 .
«me
 = "s5p-nand",

491 .
	gow√r
 = 
THIS_MODULE
,

492 .
	gof_m©ch_èbÀ
 = 
s5p_«nd_m©ch
,

495 
moduÀ_∂©f‹m_drivî
(
s5p_«nd_drivî
);

497 
MODULE_LICENSE
("GPL");

498 
MODULE_AUTHOR
("Jianhui Zhao <jianhuizhao329@gmail.com>");

499 
MODULE_DESCRIPTION
("S5Pxx MTD NAND driver");

	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

162 
	`__n⁄nuŒ
 ((1));

164 
	#›í
 
›í64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__USE_ATFILE


181 #i‚de‡
__USE_FILE_OFFSET64


182 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

183 
	`__n⁄nuŒ
 ((2));

185 #ifde‡
__REDIRECT


186 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

187 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

189 
	#›í©
 
›í©64


	)

192 #ifde‡
__USE_LARGEFILE64


193 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

208 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

210 
	#¸ót
 
¸ót64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

218 && !
deföed
 
__USE_POSIX
))

227 
	#F_ULOCK
 0

	)

228 
	#F_LOCK
 1

	)

229 
	#F_TLOCK
 2

	)

230 
	#F_TEST
 3

	)

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

238 
	#lockf
 
lockf64


	)

241 #ifde‡
__USE_LARGEFILE64


242 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

246 #ifde‡
__USE_XOPEN2K


249 #i‚de‡
__USE_FILE_OFFSET64


250 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

251 
__advi£
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

255 
__off64_t
 
__Àn
, 
__advi£
),

256 
posix_Ádvi£64
);

258 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

263 
__advi£
Ë
__THROW
;

271 #i‚de‡
__USE_FILE_OFFSET64


272 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

274 #ifde‡
__REDIRECT


275 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
),

277 
posix_ÁŒoˇã64
);

279 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

289 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

290 && 
deföed
 
__va_¨g_∑ck_Àn


291 
	~<bôs/f˙é2.h
>

294 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/capability.h

13 #i‚de‡
_LINUX_CAPABILITY_H


14 
	#_LINUX_CAPABILITY_H


	)

16 
	~<löux/ty≥s.h
>

29 
	#_LINUX_CAPABILITY_VERSION_1
 0x19980330

	)

30 
	#_LINUX_CAPABILITY_U32S_1
 1

	)

32 
	#_LINUX_CAPABILITY_VERSION_2
 0x20071026

	)

33 
	#_LINUX_CAPABILITY_U32S_2
 2

	)

35 
	#_LINUX_CAPABILITY_VERSION_3
 0x20080522

	)

36 
	#_LINUX_CAPABILITY_U32S_3
 2

	)

38 
	s__u£r_ˇp_hódî_°ru˘
 {

39 
__u32
 
	mvîsi⁄
;

40 
	mpid
;

41 } *
	tˇp_u£r_hódî_t
;

43 
	s__u£r_ˇp_d©a_°ru˘
 {

44 
__u32
 
	mef„˘ive
;

45 
__u32
 
	m≥rmôãd
;

46 
__u32
 
	möhîôabÀ
;

47 } *
	tˇp_u£r_d©a_t
;

50 
	#VFS_CAP_REVISION_MASK
 0xFF000000

	)

51 
	#VFS_CAP_REVISION_SHIFT
 24

	)

52 
	#VFS_CAP_FLAGS_MASK
 ~
VFS_CAP_REVISION_MASK


	)

53 
	#VFS_CAP_FLAGS_EFFECTIVE
 0x000001

	)

55 
	#VFS_CAP_REVISION_1
 0x01000000

	)

56 
	#VFS_CAP_U32_1
 1

	)

57 
	#XATTR_CAPS_SZ_1
 ((
__À32
)*(1 + 2*
VFS_CAP_U32_1
))

	)

59 
	#VFS_CAP_REVISION_2
 0x02000000

	)

60 
	#VFS_CAP_U32_2
 2

	)

61 
	#XATTR_CAPS_SZ_2
 ((
__À32
)*(1 + 2*
VFS_CAP_U32_2
))

	)

63 
	#XATTR_CAPS_SZ
 
XATTR_CAPS_SZ_2


	)

64 
	#VFS_CAP_U32
 
VFS_CAP_U32_2


	)

65 
	#VFS_CAP_REVISION
 
VFS_CAP_REVISION_2


	)

67 
	svfs_ˇp_d©a
 {

68 
__À32
 
	mmagic_ëc
;

70 
__À32
 
	m≥rmôãd
;

71 
__À32
 
	möhîôabÀ
;

72 } 
	md©a
[
VFS_CAP_U32
];

81 
	#_LINUX_CAPABILITY_VERSION
 
_LINUX_CAPABILITY_VERSION_1


	)

82 
	#_LINUX_CAPABILITY_U32S
 
_LINUX_CAPABILITY_U32S_1


	)

94 
	#CAP_CHOWN
 0

	)

100 
	#CAP_DAC_OVERRIDE
 1

	)

106 
	#CAP_DAC_READ_SEARCH
 2

	)

112 
	#CAP_FOWNER
 3

	)

121 
	#CAP_FSETID
 4

	)

127 
	#CAP_KILL
 5

	)

133 
	#CAP_SETGID
 6

	)

138 
	#CAP_SETUID
 7

	)

155 
	#CAP_SETPCAP
 8

	)

159 
	#CAP_LINUX_IMMUTABLE
 9

	)

164 
	#CAP_NET_BIND_SERVICE
 10

	)

168 
	#CAP_NET_BROADCAST
 11

	)

184 
	#CAP_NET_ADMIN
 12

	)

190 
	#CAP_NET_RAW
 13

	)

196 
	#CAP_IPC_LOCK
 14

	)

200 
	#CAP_IPC_OWNER
 15

	)

203 
	#CAP_SYS_MODULE
 16

	)

208 
	#CAP_SYS_RAWIO
 17

	)

212 
	#CAP_SYS_CHROOT
 18

	)

216 
	#CAP_SYS_PTRACE
 19

	)

220 
	#CAP_SYS_PACCT
 20

	)

259 
	#CAP_SYS_ADMIN
 21

	)

263 
	#CAP_SYS_BOOT
 22

	)

272 
	#CAP_SYS_NICE
 23

	)

286 
	#CAP_SYS_RESOURCE
 24

	)

292 
	#CAP_SYS_TIME
 25

	)

297 
	#CAP_SYS_TTY_CONFIG
 26

	)

301 
	#CAP_MKNOD
 27

	)

305 
	#CAP_LEASE
 28

	)

309 
	#CAP_AUDIT_WRITE
 29

	)

313 
	#CAP_AUDIT_CONTROL
 30

	)

315 
	#CAP_SETFCAP
 31

	)

323 
	#CAP_MAC_OVERRIDE
 32

	)

332 
	#CAP_MAC_ADMIN
 33

	)

336 
	#CAP_SYSLOG
 34

	)

340 
	#CAP_WAKE_ALARM
 35

	)

344 
	#CAP_BLOCK_SUSPEND
 36

	)

348 
	#CAP_AUDIT_READ
 37

	)

351 
	#CAP_LAST_CAP
 
CAP_AUDIT_READ


	)

353 
	#ˇp_vÆid
(
x
Ë((xË>0 && (xË<
CAP_LAST_CAP
)

	)

359 
	#CAP_TO_INDEX
(
x
Ë((xË>> 5Ë

	)

360 
	#CAP_TO_MASK
(
x
Ë(1 << ((xË& 31)Ë

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/if_ëhî.h
>

20 
	~<limôs.h
>

97 
	sëhtoﬁ_cmd
 {

98 
__u32
 
	mcmd
;

99 
__u32
 
	msuµ‹ãd
;

100 
__u32
 
	madvîtisög
;

101 
__u16
 
	m•ìd
;

102 
__u8
 
	mdu∂ex
;

103 
__u8
 
	mp‹t
;

104 
__u8
 
	mphy_addªss
;

105 
__u8
 
	må™s˚ivî
;

106 
__u8
 
	maut⁄eg
;

107 
__u8
 
	mmdio_suµ‹t
;

108 
__u32
 
	mmaxtxpkt
;

109 
__u32
 
	mmaxrxpkt
;

110 
__u16
 
	m•ìd_hi
;

111 
__u8
 
	mëh_ç_mdix
;

112 
__u8
 
	mëh_ç_mdix_˘æ
;

113 
__u32
 
	mÕ_advîtisög
;

114 
__u32
 
	mª£rved
[2];

117 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

118 
__u32
 
•ìd
)

120 
ï
->
•ìd
 = (
__u16
)(speed & 0xFFFF);

121 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

122 
	}
}

124 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(c⁄° 
ëhtoﬁ_cmd
 *
ï
)

126  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

127 
	}
}

134 
	#ETH_MDIO_SUPPORTS_C22
 1

	)

141 
	#ETH_MDIO_SUPPORTS_C45
 2

	)

143 
	#ETHTOOL_FWVERS_LEN
 32

	)

144 
	#ETHTOOL_BUSINFO_LEN
 32

	)

145 
	#ETHTOOL_EROMVERS_LEN
 32

	)

178 
	sëhtoﬁ_drvöfo
 {

179 
__u32
 
	mcmd
;

180 
	mdrivî
[32];

181 
	mvîsi⁄
[32];

182 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

183 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

184 
	mîom_vîsi⁄
[
ETHTOOL_EROMVERS_LEN
];

185 
	mª£rved2
[12];

186 
__u32
 
	mn_¥iv_Êags
;

187 
__u32
 
	mn_°©s
;

188 
__u32
 
	mã°öfo_Àn
;

189 
__u32
 
	mìdump_Àn
;

190 
__u32
 
	mªgdump_Àn
;

193 
	#SOPASS_MAX
 6

	)

204 
	sëhtoﬁ_wﬁöfo
 {

205 
__u32
 
	mcmd
;

206 
__u32
 
	msuµ‹ãd
;

207 
__u32
 
	mwﬁ›ts
;

208 
__u8
 
	ms›ass
[
SOPASS_MAX
];

212 
	sëhtoﬁ_vÆue
 {

213 
__u32
 
	mcmd
;

214 
__u32
 
	md©a
;

217 
	etu«bÀ_id
 {

218 
	mETHTOOL_ID_UNSPEC
,

219 
	mETHTOOL_RX_COPYBREAK
,

220 
	mETHTOOL_TX_COPYBREAK
,

225 
	m__ETHTOOL_TUNABLE_COUNT
,

228 
	etu«bÀ_ty≥_id
 {

229 
	mETHTOOL_TUNABLE_UNSPEC
,

230 
	mETHTOOL_TUNABLE_U8
,

231 
	mETHTOOL_TUNABLE_U16
,

232 
	mETHTOOL_TUNABLE_U32
,

233 
	mETHTOOL_TUNABLE_U64
,

234 
	mETHTOOL_TUNABLE_STRING
,

235 
	mETHTOOL_TUNABLE_S8
,

236 
	mETHTOOL_TUNABLE_S16
,

237 
	mETHTOOL_TUNABLE_S32
,

238 
	mETHTOOL_TUNABLE_S64
,

241 
	sëhtoﬁ_tu«bÀ
 {

242 
__u32
 
	mcmd
;

243 
__u32
 
	mid
;

244 
__u32
 
	mty≥_id
;

245 
__u32
 
	mÀn
;

246 *
	md©a
[0];

264 
	sëhtoﬁ_ªgs
 {

265 
__u32
 
	mcmd
;

266 
__u32
 
	mvîsi⁄
;

267 
__u32
 
	mÀn
;

268 
__u8
 
	md©a
[0];

289 
	sëhtoﬁ_ì¥om
 {

290 
__u32
 
	mcmd
;

291 
__u32
 
	mmagic
;

292 
__u32
 
	moff£t
;

293 
__u32
 
	mÀn
;

294 
__u8
 
	md©a
[0];

314 
	sëhtoﬁ_ìe
 {

315 
__u32
 
	mcmd
;

316 
__u32
 
	msuµ‹ãd
;

317 
__u32
 
	madvîti£d
;

318 
__u32
 
	mÕ_advîti£d
;

319 
__u32
 
	mìe_a˘ive
;

320 
__u32
 
	mìe_íabÀd
;

321 
__u32
 
	mtx_Õi_íabÀd
;

322 
__u32
 
	mtx_Õi_timî
;

323 
__u32
 
	mª£rved
[2];

336 
	sëhtoﬁ_modöfo
 {

337 
__u32
 
	mcmd
;

338 
__u32
 
	mty≥
;

339 
__u32
 
	mì¥om_Àn
;

340 
__u32
 
	mª£rved
[8];

416 
	sëhtoﬁ_cﬂÀs˚
 {

417 
__u32
 
	mcmd
;

418 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

419 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

420 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

421 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

422 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

423 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

424 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

425 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

426 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

427 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

428 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

429 
__u32
 
	mpkt_øã_low
;

430 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

431 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

432 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

433 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

434 
__u32
 
	mpkt_øã_high
;

435 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

436 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

437 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

438 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

439 
__u32
 
	møã_ßm∂e_öãrvÆ
;

467 
	sëhtoﬁ_rög∑øm
 {

468 
__u32
 
	mcmd
;

469 
__u32
 
	mrx_max_≥ndög
;

470 
__u32
 
	mrx_möi_max_≥ndög
;

471 
__u32
 
	mrx_jumbo_max_≥ndög
;

472 
__u32
 
	mtx_max_≥ndög
;

473 
__u32
 
	mrx_≥ndög
;

474 
__u32
 
	mrx_möi_≥ndög
;

475 
__u32
 
	mrx_jumbo_≥ndög
;

476 
__u32
 
	mtx_≥ndög
;

495 
	sëhtoﬁ_ch™√ls
 {

496 
__u32
 
	mcmd
;

497 
__u32
 
	mmax_rx
;

498 
__u32
 
	mmax_tx
;

499 
__u32
 
	mmax_Ÿhî
;

500 
__u32
 
	mmax_comböed
;

501 
__u32
 
	mrx_cou¡
;

502 
__u32
 
	mtx_cou¡
;

503 
__u32
 
	mŸhî_cou¡
;

504 
__u32
 
	mcomböed_cou¡
;

529 
	sëhtoﬁ_∑u£∑øm
 {

530 
__u32
 
	mcmd
;

531 
__u32
 
	maut⁄eg
;

532 
__u32
 
	mrx_∑u£
;

533 
__u32
 
	mtx_∑u£
;

536 
	#ETH_GSTRING_LEN
 32

	)

550 
	eëhtoﬁ_°rög£t
 {

551 
	mETH_SS_TEST
 = 0,

552 
	mETH_SS_STATS
,

553 
	mETH_SS_PRIV_FLAGS
,

554 
	mETH_SS_NTUPLE_FILTERS
,

555 
	mETH_SS_FEATURES
,

556 
	mETH_SS_RSS_HASH_FUNCS
,

557 
	mETH_SS_TUNABLES
,

558 
	mETH_SS_PHY_STATS
,

573 
	sëhtoﬁ_g°rögs
 {

574 
__u32
 
	mcmd
;

575 
__u32
 
	m°rög_£t
;

576 
__u32
 
	mÀn
;

577 
__u8
 
	md©a
[0];

597 
	sëhtoﬁ_s£t_öfo
 {

598 
__u32
 
	mcmd
;

599 
__u32
 
	mª£rved
;

600 
__u64
 
	ms£t_mask
;

601 
__u32
 
	md©a
[0];

614 
	eëhtoﬁ_ã°_Êags
 {

615 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

616 
	mETH_TEST_FL_FAILED
 = (1 << 1),

617 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

618 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

635 
	sëhtoﬁ_ã°
 {

636 
__u32
 
	mcmd
;

637 
__u32
 
	mÊags
;

638 
__u32
 
	mª£rved
;

639 
__u32
 
	mÀn
;

640 
__u64
 
	md©a
[0];

654 
	sëhtoﬁ_°©s
 {

655 
__u32
 
	mcmd
;

656 
__u32
 
	mn_°©s
;

657 
__u64
 
	md©a
[0];

671 
	sëhtoﬁ_≥rm_addr
 {

672 
__u32
 
	mcmd
;

673 
__u32
 
	msize
;

674 
__u8
 
	md©a
[0];

686 
	eëhtoﬁ_Êags
 {

687 
	mETH_FLAG_TXVLAN
 = (1 << 7),

688 
	mETH_FLAG_RXVLAN
 = (1 << 8),

689 
	mETH_FLAG_LRO
 = (1 << 15),

690 
	mETH_FLAG_NTUPLE
 = (1 << 27),

691 
	mETH_FLAG_RXHASH
 = (1 << 28),

710 
	sëhtoﬁ_t˝ù4_•ec
 {

711 
__be32
 
	mù4§c
;

712 
__be32
 
	mù4d°
;

713 
__be16
 
	mp§c
;

714 
__be16
 
	mpd°
;

715 
__u8
 
	mtos
;

727 
	sëhtoﬁ_ah_e•ù4_•ec
 {

728 
__be32
 
	mù4§c
;

729 
__be32
 
	mù4d°
;

730 
__be32
 
	m•i
;

731 
__u8
 
	mtos
;

734 
	#ETH_RX_NFC_IP4
 1

	)

745 
	sëhtoﬁ_u§ù4_•ec
 {

746 
__be32
 
	mù4§c
;

747 
__be32
 
	mù4d°
;

748 
__be32
 
	ml4_4_byãs
;

749 
__u8
 
	mtos
;

750 
__u8
 
	mù_vî
;

751 
__u8
 
	m¥Ÿo
;

764 
	sëhtoﬁ_t˝ù6_•ec
 {

765 
__be32
 
	mù6§c
[4];

766 
__be32
 
	mù6d°
[4];

767 
__be16
 
	mp§c
;

768 
__be16
 
	mpd°
;

769 
__u8
 
	mt˛ass
;

781 
	sëhtoﬁ_ah_e•ù6_•ec
 {

782 
__be32
 
	mù6§c
[4];

783 
__be32
 
	mù6d°
[4];

784 
__be32
 
	m•i
;

785 
__u8
 
	mt˛ass
;

796 
	sëhtoﬁ_u§ù6_•ec
 {

797 
__be32
 
	mù6§c
[4];

798 
__be32
 
	mù6d°
[4];

799 
__be32
 
	ml4_4_byãs
;

800 
__u8
 
	mt˛ass
;

801 
__u8
 
	ml4_¥Ÿo
;

804 
	uëhtoﬁ_Êow_uni⁄
 {

805 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

806 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

807 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

808 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

809 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

810 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

811 
ëhtoﬁ_t˝ù6_•ec
 
	mt˝_ù6_•ec
;

812 
ëhtoﬁ_t˝ù6_•ec
 
	mudp_ù6_•ec
;

813 
ëhtoﬁ_t˝ù6_•ec
 
	ms˘p_ù6_•ec
;

814 
ëhtoﬁ_ah_e•ù6_•ec
 
	mah_ù6_•ec
;

815 
ëhtoﬁ_ah_e•ù6_•ec
 
	me•_ù6_•ec
;

816 
ëhtoﬁ_u§ù6_•ec
 
	mu§_ù6_•ec
;

817 
ëhhdr
 
	mëhî_•ec
;

818 
__u8
 
	mhd©a
[52];

832 
	sëhtoﬁ_Êow_ext
 {

833 
__u8
 
	m∑ddög
[2];

834 
	mh_de°
[
ETH_ALEN
];

835 
__be16
 
	mvœn_ëy≥
;

836 
__be16
 
	mvœn_tci
;

837 
__be32
 
	md©a
[2];

856 
	sëhtoﬁ_rx_Êow_•ec
 {

857 
__u32
 
	mÊow_ty≥
;

858 
ëhtoﬁ_Êow_uni⁄
 
	mh_u
;

859 
ëhtoﬁ_Êow_ext
 
	mh_ext
;

860 
ëhtoﬁ_Êow_uni⁄
 
	mm_u
;

861 
ëhtoﬁ_Êow_ext
 
	mm_ext
;

862 
__u64
 
	mrög_cookõ
;

863 
__u32
 
	mloˇti⁄
;

877 
	#ETHTOOL_RX_FLOW_SPEC_RING
 0x00000000FFFFFFFFLL

	)

878 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF
 0x000000FF00000000LL

	)

879 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
 32

	)

880 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög
(
__u64
 
rög_cookõ
)

882  
ETHTOOL_RX_FLOW_SPEC_RING
 & 
rög_cookõ
;

883 
	}
}

885 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög_vf
(
__u64
 
rög_cookõ
)

887  (
ETHTOOL_RX_FLOW_SPEC_RING_VF
 & 
rög_cookõ
) >>

888 
ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
;

889 
	}
}

943 
	sëhtoﬁ_rxnfc
 {

944 
__u32
 
	mcmd
;

945 
__u32
 
	mÊow_ty≥
;

946 
__u64
 
	md©a
;

947 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

948 
__u32
 
	mruÀ_˙t
;

949 
__u32
 
	mruÀ_locs
[0];

966 
	sëhtoﬁ_rxfh_ödú
 {

967 
__u32
 
	mcmd
;

968 
__u32
 
	msize
;

969 
__u32
 
	mrög_ödex
[0];

996 
	sëhtoﬁ_rxfh
 {

997 
__u32
 
	mcmd
;

998 
__u32
 
	mrss_c⁄ãxt
;

999 
__u32
 
	mödú_size
;

1000 
__u32
 
	mkey_size
;

1001 
__u8
 
	mhfunc
;

1002 
__u8
 
	mrsvd8
[3];

1003 
__u32
 
	mrsvd32
;

1004 
__u32
 
	mrss_c⁄fig
[0];

1006 
	#ETH_RXFH_INDIR_NO_CHANGE
 0xffffffff

	)

1024 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

1025 
__u32
 
	mÊow_ty≥
;

1027 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

1028 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

1029 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

1030 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

1031 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

1032 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

1033 
ëhhdr
 
	mëhî_•ec
;

1034 
__u8
 
	mhd©a
[72];

1035 } 
	mh_u
, 
	mm_u
;

1037 
__u16
 
	mvœn_èg
;

1038 
__u16
 
	mvœn_èg_mask
;

1039 
__u64
 
	md©a
;

1040 
__u64
 
	md©a_mask
;

1042 
__s32
 
	ma˘i⁄
;

1043 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 (-1Ë

	)

1044 
	#ETHTOOL_RXNTUPLE_ACTION_CLEAR
 (-2Ë

	)

1052 
	sëhtoﬁ_rx_¡u∂e
 {

1053 
__u32
 
	mcmd
;

1054 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

1057 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

1058 
	eëhtoﬁ_Êash_›_ty≥
 {

1059 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

1063 
	sëhtoﬁ_Êash
 {

1064 
__u32
 
	mcmd
;

1065 
__u32
 
	mªgi⁄
;

1066 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

1083 
	sëhtoﬁ_dump
 {

1084 
__u32
 
	mcmd
;

1085 
__u32
 
	mvîsi⁄
;

1086 
__u32
 
	mÊag
;

1087 
__u32
 
	mÀn
;

1088 
__u8
 
	md©a
[0];

1091 
	#ETH_FW_DUMP_DISABLE
 0

	)

1102 
	sëhtoﬁ_gë_„©uªs_block
 {

1103 
__u32
 
	mavaûabÀ
;

1104 
__u32
 
	mªque°ed
;

1105 
__u32
 
	ma˘ive
;

1106 
__u32
 
	m√vî_ch™ged
;

1117 
	sëhtoﬁ_g„©uªs
 {

1118 
__u32
 
	mcmd
;

1119 
__u32
 
	msize
;

1120 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[0];

1128 
	sëhtoﬁ_£t_„©uªs_block
 {

1129 
__u32
 
	mvÆid
;

1130 
__u32
 
	mªque°ed
;

1139 
	sëhtoﬁ_s„©uªs
 {

1140 
__u32
 
	mcmd
;

1141 
__u32
 
	msize
;

1142 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[0];

1163 
	sëhtoﬁ_ts_öfo
 {

1164 
__u32
 
	mcmd
;

1165 
__u32
 
	mso_time°ampög
;

1166 
__s32
 
	mphc_ödex
;

1167 
__u32
 
	mtx_ty≥s
;

1168 
__u32
 
	mtx_ª£rved
[3];

1169 
__u32
 
	mrx_fûãrs
;

1170 
__u32
 
	mrx_ª£rved
[3];

1198 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

1199 
	mETHTOOL_F_UNSUPPORTED__BIT
,

1200 
	mETHTOOL_F_WISH__BIT
,

1201 
	mETHTOOL_F_COMPAT__BIT
,

1204 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

1205 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

1206 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

1208 
	#MAX_NUM_QUEUE
 4096

	)

1217 
	sëhtoﬁ_≥r_queue_›
 {

1218 
__u32
 
	mcmd
;

1219 
__u32
 
	msub_comm™d
;

1220 
__u32
 
	mqueue_mask
[
__KERNEL_DIV_ROUND_UP
(
MAX_NUM_QUEUE
, 32)];

1221 
	md©a
[];

1225 
	#ETHTOOL_GSET
 0x00000001

	)

1228 
	#ETHTOOL_SSET
 0x00000002

	)

1231 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

1232 
	#ETHTOOL_GREGS
 0x00000004

	)

1233 
	#ETHTOOL_GWOL
 0x00000005

	)

1234 
	#ETHTOOL_SWOL
 0x00000006

	)

1235 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

1236 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

1237 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

1240 
	#ETHTOOL_GLINK
 0x0000000a

	)

1241 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

1242 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

1243 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

1244 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

1245 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

1246 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

1247 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

1248 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

1249 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

1250 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

1251 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

1252 
	#ETHTOOL_STXCSUM
 0x00000017

	)

1253 
	#ETHTOOL_GSG
 0x00000018

	)

1255 
	#ETHTOOL_SSG
 0x00000019

	)

1257 
	#ETHTOOL_TEST
 0x0000001®

	)

1258 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

1259 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

1260 
	#ETHTOOL_GSTATS
 0x0000001d

	)

1261 
	#ETHTOOL_GTSO
 0x0000001ê

	)

1262 
	#ETHTOOL_STSO
 0x0000001‡

	)

1263 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

1264 
	#ETHTOOL_GUFO
 0x00000021

	)

1265 
	#ETHTOOL_SUFO
 0x00000022

	)

1266 
	#ETHTOOL_GGSO
 0x00000023

	)

1267 
	#ETHTOOL_SGSO
 0x00000024

	)

1268 
	#ETHTOOL_GFLAGS
 0x00000025

	)

1269 
	#ETHTOOL_SFLAGS
 0x00000026

	)

1270 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

1271 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

1273 
	#ETHTOOL_GRXFH
 0x00000029

	)

1274 
	#ETHTOOL_SRXFH
 0x0000002®

	)

1275 
	#ETHTOOL_GGRO
 0x0000002b

	)

1276 
	#ETHTOOL_SGRO
 0x0000002¯

	)

1277 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

1278 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

1279 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

1280 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

1281 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

1282 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

1283 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

1284 
	#ETHTOOL_RESET
 0x00000034

	)

1285 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

1286 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

1287 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

1288 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

1289 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

1291 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

1292 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

1293 
	#ETHTOOL_GCHANNELS
 0x0000003¯

	)

1294 
	#ETHTOOL_SCHANNELS
 0x0000003d

	)

1295 
	#ETHTOOL_SET_DUMP
 0x0000003ê

	)

1296 
	#ETHTOOL_GET_DUMP_FLAG
 0x0000003‡

	)

1297 
	#ETHTOOL_GET_DUMP_DATA
 0x00000040

	)

1298 
	#ETHTOOL_GET_TS_INFO
 0x00000041

	)

1299 
	#ETHTOOL_GMODULEINFO
 0x00000042

	)

1300 
	#ETHTOOL_GMODULEEEPROM
 0x00000043

	)

1301 
	#ETHTOOL_GEEE
 0x00000044

	)

1302 
	#ETHTOOL_SEEE
 0x00000045

	)

1304 
	#ETHTOOL_GRSSH
 0x00000046

	)

1305 
	#ETHTOOL_SRSSH
 0x00000047

	)

1306 
	#ETHTOOL_GTUNABLE
 0x00000048

	)

1307 
	#ETHTOOL_STUNABLE
 0x00000049

	)

1308 
	#ETHTOOL_GPHYSTATS
 0x0000004®

	)

1310 
	#ETHTOOL_PERQUEUE
 0x0000004b

	)

1312 
	#ETHTOOL_GLINKSETTINGS
 0x0000004¯

	)

1313 
	#ETHTOOL_SLINKSETTINGS
 0x0000004d

	)

1317 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

1318 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

1321 
	eëhtoﬁ_lök_mode_bô_ödi˚s
 {

1322 
	mETHTOOL_LINK_MODE_10ba£T_HÆf_BIT
 = 0,

1323 
	mETHTOOL_LINK_MODE_10ba£T_FuŒ_BIT
 = 1,

1324 
	mETHTOOL_LINK_MODE_100ba£T_HÆf_BIT
 = 2,

1325 
	mETHTOOL_LINK_MODE_100ba£T_FuŒ_BIT
 = 3,

1326 
	mETHTOOL_LINK_MODE_1000ba£T_HÆf_BIT
 = 4,

1327 
	mETHTOOL_LINK_MODE_1000ba£T_FuŒ_BIT
 = 5,

1328 
	mETHTOOL_LINK_MODE_Aut⁄eg_BIT
 = 6,

1329 
	mETHTOOL_LINK_MODE_TP_BIT
 = 7,

1330 
	mETHTOOL_LINK_MODE_AUI_BIT
 = 8,

1331 
	mETHTOOL_LINK_MODE_MII_BIT
 = 9,

1332 
	mETHTOOL_LINK_MODE_FIBRE_BIT
 = 10,

1333 
	mETHTOOL_LINK_MODE_BNC_BIT
 = 11,

1334 
	mETHTOOL_LINK_MODE_10000ba£T_FuŒ_BIT
 = 12,

1335 
	mETHTOOL_LINK_MODE_Pau£_BIT
 = 13,

1336 
	mETHTOOL_LINK_MODE_Asym_Pau£_BIT
 = 14,

1337 
	mETHTOOL_LINK_MODE_2500ba£X_FuŒ_BIT
 = 15,

1338 
	mETHTOOL_LINK_MODE_Back∂™e_BIT
 = 16,

1339 
	mETHTOOL_LINK_MODE_1000ba£KX_FuŒ_BIT
 = 17,

1340 
	mETHTOOL_LINK_MODE_10000ba£KX4_FuŒ_BIT
 = 18,

1341 
	mETHTOOL_LINK_MODE_10000ba£KR_FuŒ_BIT
 = 19,

1342 
	mETHTOOL_LINK_MODE_10000ba£R_FEC_BIT
 = 20,

1343 
	mETHTOOL_LINK_MODE_20000ba£MLD2_FuŒ_BIT
 = 21,

1344 
	mETHTOOL_LINK_MODE_20000ba£KR2_FuŒ_BIT
 = 22,

1345 
	mETHTOOL_LINK_MODE_40000ba£KR4_FuŒ_BIT
 = 23,

1346 
	mETHTOOL_LINK_MODE_40000ba£CR4_FuŒ_BIT
 = 24,

1347 
	mETHTOOL_LINK_MODE_40000ba£SR4_FuŒ_BIT
 = 25,

1348 
	mETHTOOL_LINK_MODE_40000ba£LR4_FuŒ_BIT
 = 26,

1349 
	mETHTOOL_LINK_MODE_56000ba£KR4_FuŒ_BIT
 = 27,

1350 
	mETHTOOL_LINK_MODE_56000ba£CR4_FuŒ_BIT
 = 28,

1351 
	mETHTOOL_LINK_MODE_56000ba£SR4_FuŒ_BIT
 = 29,

1352 
	mETHTOOL_LINK_MODE_56000ba£LR4_FuŒ_BIT
 = 30,

1353 
	mETHTOOL_LINK_MODE_25000ba£CR_FuŒ_BIT
 = 31,

1354 
	mETHTOOL_LINK_MODE_25000ba£KR_FuŒ_BIT
 = 32,

1355 
	mETHTOOL_LINK_MODE_25000ba£SR_FuŒ_BIT
 = 33,

1356 
	mETHTOOL_LINK_MODE_50000ba£CR2_FuŒ_BIT
 = 34,

1357 
	mETHTOOL_LINK_MODE_50000ba£KR2_FuŒ_BIT
 = 35,

1358 
	mETHTOOL_LINK_MODE_100000ba£KR4_FuŒ_BIT
 = 36,

1359 
	mETHTOOL_LINK_MODE_100000ba£SR4_FuŒ_BIT
 = 37,

1360 
	mETHTOOL_LINK_MODE_100000ba£CR4_FuŒ_BIT
 = 38,

1361 
	mETHTOOL_LINK_MODE_100000ba£LR4_ER4_FuŒ_BIT
 = 39,

1362 
	mETHTOOL_LINK_MODE_50000ba£SR2_FuŒ_BIT
 = 40,

1363 
	mETHTOOL_LINK_MODE_1000ba£X_FuŒ_BIT
 = 41,

1364 
	mETHTOOL_LINK_MODE_10000ba£CR_FuŒ_BIT
 = 42,

1365 
	mETHTOOL_LINK_MODE_10000ba£SR_FuŒ_BIT
 = 43,

1366 
	mETHTOOL_LINK_MODE_10000ba£LR_FuŒ_BIT
 = 44,

1367 
	mETHTOOL_LINK_MODE_10000ba£LRM_FuŒ_BIT
 = 45,

1368 
	mETHTOOL_LINK_MODE_10000ba£ER_FuŒ_BIT
 = 46,

1369 
	mETHTOOL_LINK_MODE_2500ba£T_FuŒ_BIT
 = 47,

1370 
	mETHTOOL_LINK_MODE_5000ba£T_FuŒ_BIT
 = 48,

1379 
	m__ETHTOOL_LINK_MODE_LAST


1380 
ETHTOOL_LINK_MODE_5000ba£T_FuŒ_BIT
,

1383 
	#__ETHTOOL_LINK_MODE_LEGACY_MASK
(
ba£_«me
) \

1384 (1UL << (
ETHTOOL_LINK_MODE_
 ## 
ba£_«me
 ## 
_BIT
))

	)

1390 
	#SUPPORTED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1391 
	#SUPPORTED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1392 
	#SUPPORTED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1393 
	#SUPPORTED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1394 
	#SUPPORTED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1395 
	#SUPPORTED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1396 
	#SUPPORTED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1397 
	#SUPPORTED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1398 
	#SUPPORTED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1399 
	#SUPPORTED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1400 
	#SUPPORTED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1401 
	#SUPPORTED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1402 
	#SUPPORTED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1403 
	#SUPPORTED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1404 
	#SUPPORTED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1405 
	#SUPPORTED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1406 
	#SUPPORTED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1407 
	#SUPPORTED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1408 
	#SUPPORTED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1409 
	#SUPPORTED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1410 
	#SUPPORTED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1411 
	#SUPPORTED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1412 
	#SUPPORTED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1413 
	#SUPPORTED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1414 
	#SUPPORTED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1415 
	#SUPPORTED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1416 
	#SUPPORTED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1417 
	#SUPPORTED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1418 
	#SUPPORTED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1419 
	#SUPPORTED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1420 
	#SUPPORTED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1430 
	#ADVERTISED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1431 
	#ADVERTISED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1432 
	#ADVERTISED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1433 
	#ADVERTISED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1434 
	#ADVERTISED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1435 
	#ADVERTISED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1436 
	#ADVERTISED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1437 
	#ADVERTISED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1438 
	#ADVERTISED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1439 
	#ADVERTISED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1440 
	#ADVERTISED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1441 
	#ADVERTISED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1442 
	#ADVERTISED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1443 
	#ADVERTISED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1444 
	#ADVERTISED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1445 
	#ADVERTISED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1446 
	#ADVERTISED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1447 
	#ADVERTISED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1448 
	#ADVERTISED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1449 
	#ADVERTISED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1450 
	#ADVERTISED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1451 
	#ADVERTISED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1452 
	#ADVERTISED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1453 
	#ADVERTISED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1454 
	#ADVERTISED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1455 
	#ADVERTISED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1456 
	#ADVERTISED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1457 
	#ADVERTISED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1458 
	#ADVERTISED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1459 
	#ADVERTISED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1460 
	#ADVERTISED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1472 
	#SPEED_10
 10

	)

1473 
	#SPEED_100
 100

	)

1474 
	#SPEED_1000
 1000

	)

1475 
	#SPEED_2500
 2500

	)

1476 
	#SPEED_5000
 5000

	)

1477 
	#SPEED_10000
 10000

	)

1478 
	#SPEED_20000
 20000

	)

1479 
	#SPEED_25000
 25000

	)

1480 
	#SPEED_40000
 40000

	)

1481 
	#SPEED_50000
 50000

	)

1482 
	#SPEED_56000
 56000

	)

1483 
	#SPEED_100000
 100000

	)

1485 
	#SPEED_UNKNOWN
 -1

	)

1487 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_•ìd
(
__u32
 
•ìd
)

1489  
•ìd
 <
INT_MAX
 || s≥ed =
SPEED_UNKNOWN
;

1490 
	}
}

1493 
	#DUPLEX_HALF
 0x00

	)

1494 
	#DUPLEX_FULL
 0x01

	)

1495 
	#DUPLEX_UNKNOWN
 0xff

	)

1497 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_du∂ex
(
__u8
 
du∂ex
)

1499 
du∂ex
) {

1500 
DUPLEX_HALF
:

1501 
DUPLEX_FULL
:

1502 
DUPLEX_UNKNOWN
:

1507 
	}
}

1510 
	#PORT_TP
 0x00

	)

1511 
	#PORT_AUI
 0x01

	)

1512 
	#PORT_MII
 0x02

	)

1513 
	#PORT_FIBRE
 0x03

	)

1514 
	#PORT_BNC
 0x04

	)

1515 
	#PORT_DA
 0x05

	)

1516 
	#PORT_NONE
 0xef

	)

1517 
	#PORT_OTHER
 0xff

	)

1520 
	#XCVR_INTERNAL
 0x00

	)

1521 
	#XCVR_EXTERNAL
 0x01

	)

1522 
	#XCVR_DUMMY1
 0x02

	)

1523 
	#XCVR_DUMMY2
 0x03

	)

1524 
	#XCVR_DUMMY3
 0x04

	)

1527 
	#AUTONEG_DISABLE
 0x00

	)

1528 
	#AUTONEG_ENABLE
 0x01

	)

1533 
	#ETH_TP_MDI_INVALID
 0x00

	)

1534 
	#ETH_TP_MDI
 0x01

	)

1535 
	#ETH_TP_MDI_X
 0x02

	)

1536 
	#ETH_TP_MDI_AUTO
 0x03

	)

1539 
	#WAKE_PHY
 (1 << 0)

	)

1540 
	#WAKE_UCAST
 (1 << 1)

	)

1541 
	#WAKE_MCAST
 (1 << 2)

	)

1542 
	#WAKE_BCAST
 (1 << 3)

	)

1543 
	#WAKE_ARP
 (1 << 4)

	)

1544 
	#WAKE_MAGIC
 (1 << 5)

	)

1545 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

1548 
	#TCP_V4_FLOW
 0x01

	)

1549 
	#UDP_V4_FLOW
 0x02

	)

1550 
	#SCTP_V4_FLOW
 0x03

	)

1551 
	#AH_ESP_V4_FLOW
 0x04

	)

1552 
	#TCP_V6_FLOW
 0x05

	)

1553 
	#UDP_V6_FLOW
 0x06

	)

1554 
	#SCTP_V6_FLOW
 0x07

	)

1555 
	#AH_ESP_V6_FLOW
 0x08

	)

1556 
	#AH_V4_FLOW
 0x09

	)

1557 
	#ESP_V4_FLOW
 0x0®

	)

1558 
	#AH_V6_FLOW
 0x0b

	)

1559 
	#ESP_V6_FLOW
 0x0¯

	)

1560 
	#IPV4_USER_FLOW
 0x0d

	)

1561 
	#IP_USER_FLOW
 
IPV4_USER_FLOW


	)

1562 
	#IPV6_USER_FLOW
 0x0ê

	)

1563 
	#IPV4_FLOW
 0x10

	)

1564 
	#IPV6_FLOW
 0x11

	)

1565 
	#ETHER_FLOW
 0x12

	)

1567 
	#FLOW_EXT
 0x80000000

	)

1568 
	#FLOW_MAC_EXT
 0x40000000

	)

1571 
	#RXH_L2DA
 (1 << 1)

	)

1572 
	#RXH_VLAN
 (1 << 2)

	)

1573 
	#RXH_L3_PROTO
 (1 << 3)

	)

1574 
	#RXH_IP_SRC
 (1 << 4)

	)

1575 
	#RXH_IP_DST
 (1 << 5)

	)

1576 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

1577 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

1578 
	#RXH_DISCARD
 (1 << 31)

	)

1580 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

1583 
	#RX_CLS_LOC_SPECIAL
 0x80000000

	)

1584 
	#RX_CLS_LOC_ANY
 0xffffffff

	)

1585 
	#RX_CLS_LOC_FIRST
 0xffffff„

	)

1586 
	#RX_CLS_LOC_LAST
 0xfffffffd

	)

1589 
	#ETH_MODULE_SFF_8079
 0x1

	)

1590 
	#ETH_MODULE_SFF_8079_LEN
 256

	)

1591 
	#ETH_MODULE_SFF_8472
 0x2

	)

1592 
	#ETH_MODULE_SFF_8472_LEN
 512

	)

1593 
	#ETH_MODULE_SFF_8636
 0x3

	)

1594 
	#ETH_MODULE_SFF_8636_LEN
 256

	)

1595 
	#ETH_MODULE_SFF_8436
 0x4

	)

1596 
	#ETH_MODULE_SFF_8436_LEN
 256

	)

1605 
	eëhtoﬁ_ª£t_Êags
 {

1611 
	mETH_RESET_MGMT
 = 1 << 0,

1612 
	mETH_RESET_IRQ
 = 1 << 1,

1613 
	mETH_RESET_DMA
 = 1 << 2,

1614 
	mETH_RESET_FILTER
 = 1 << 3,

1615 
	mETH_RESET_OFFLOAD
 = 1 << 4,

1616 
	mETH_RESET_MAC
 = 1 << 5,

1617 
	mETH_RESET_PHY
 = 1 << 6,

1618 
	mETH_RESET_RAM
 = 1 << 7,

1621 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

1623 
	mETH_RESET_ALL
 = 0xffffffff,

1626 
	#ETH_RESET_SHARED_SHIFT
 16

	)

1728 
	sëhtoﬁ_lök_£âögs
 {

1729 
__u32
 
	mcmd
;

1730 
__u32
 
	m•ìd
;

1731 
__u8
 
	mdu∂ex
;

1732 
__u8
 
	mp‹t
;

1733 
__u8
 
	mphy_addªss
;

1734 
__u8
 
	maut⁄eg
;

1735 
__u8
 
	mmdio_suµ‹t
;

1736 
__u8
 
	mëh_ç_mdix
;

1737 
__u8
 
	mëh_ç_mdix_˘æ
;

1738 
__s8
 
	mlök_mode_masks_nw‹ds
;

1739 
__u32
 
	mª£rved
[8];

1740 
__u32
 
	mlök_mode_masks
[0];

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

12 
	~<löux/limôs.h
>

13 
	~<löux/io˘l.h
>

14 
	~<löux/ty≥s.h
>

27 #unde‡
NR_OPEN


28 
	#INR_OPEN_CUR
 1024

	)

29 
	#INR_OPEN_MAX
 4096

	)

31 
	#BLOCK_SIZE_BITS
 10

	)

32 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

34 
	#SEEK_SET
 0

	)

35 
	#SEEK_CUR
 1

	)

36 
	#SEEK_END
 2

	)

37 
	#SEEK_DATA
 3

	)

38 
	#SEEK_HOLE
 4

	)

39 
	#SEEK_MAX
 
SEEK_HOLE


	)

41 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

42 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

43 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

45 
	sfûe_˛⁄e_ønge
 {

46 
__s64
 
	m§c_fd
;

47 
__u64
 
	m§c_off£t
;

48 
__u64
 
	m§c_Àngth
;

49 
__u64
 
	mde°_off£t
;

52 
	sf°rim_ønge
 {

53 
__u64
 
	m°¨t
;

54 
__u64
 
	mÀn
;

55 
__u64
 
	mmöÀn
;

59 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

60 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

63 
	sfûe_dedu≥_ønge_öfo
 {

64 
__s64
 
	mde°_fd
;

65 
__u64
 
	mde°_off£t
;

66 
__u64
 
	mbyãs_dedu≥d
;

73 
__s32
 
	m°©us
;

74 
__u32
 
	mª£rved
;

78 
	sfûe_dedu≥_ønge
 {

79 
__u64
 
	m§c_off£t
;

80 
__u64
 
	m§c_Àngth
;

81 
__u16
 
	mde°_cou¡
;

82 
__u16
 
	mª£rved1
;

83 
__u32
 
	mª£rved2
;

84 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

88 
	sfûes_°©_°ru˘
 {

89 
	mƒ_fûes
;

90 
	mƒ_‰ì_fûes
;

91 
	mmax_fûes
;

94 
	söodes_°©_t
 {

95 
	mƒ_öodes
;

96 
	mƒ_unu£d
;

97 
	mdummy
[5];

101 
	#NR_FILE
 8192

	)

107 
	#MS_RDONLY
 1

	)

108 
	#MS_NOSUID
 2

	)

109 
	#MS_NODEV
 4

	)

110 
	#MS_NOEXEC
 8

	)

111 
	#MS_SYNCHRONOUS
 16

	)

112 
	#MS_REMOUNT
 32

	)

113 
	#MS_MANDLOCK
 64

	)

114 
	#MS_DIRSYNC
 128

	)

115 
	#MS_NOATIME
 1024

	)

116 
	#MS_NODIRATIME
 2048

	)

117 
	#MS_BIND
 4096

	)

118 
	#MS_MOVE
 8192

	)

119 
	#MS_REC
 16384

	)

120 
	#MS_VERBOSE
 32768

	)

122 
	#MS_SILENT
 32768

	)

123 
	#MS_POSIXACL
 (1<<16Ë

	)

124 
	#MS_UNBINDABLE
 (1<<17Ë

	)

125 
	#MS_PRIVATE
 (1<<18Ë

	)

126 
	#MS_SLAVE
 (1<<19Ë

	)

127 
	#MS_SHARED
 (1<<20Ë

	)

128 
	#MS_RELATIME
 (1<<21Ë

	)

129 
	#MS_KERNMOUNT
 (1<<22Ë

	)

130 
	#MS_I_VERSION
 (1<<23Ë

	)

131 
	#MS_STRICTATIME
 (1<<24Ë

	)

132 
	#MS_LAZYTIME
 (1<<25Ë

	)

135 
	#MS_SUBMOUNT
 (1<<26)

	)

136 
	#MS_NOREMOTELOCK
 (1<<27)

	)

137 
	#MS_NOSEC
 (1<<28)

	)

138 
	#MS_BORN
 (1<<29)

	)

139 
	#MS_ACTIVE
 (1<<30)

	)

140 
	#MS_NOUSER
 (1<<31)

	)

145 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

146 
MS_LAZYTIME
)

	)

151 
	#MS_MGC_VAL
 0xC0ED0000

	)

152 
	#MS_MGC_MSK
 0xffff0000

	)

157 
	sfsx©å
 {

158 
__u32
 
	mfsx_xÊags
;

159 
__u32
 
	mfsx_extsize
;

160 
__u32
 
	mfsx_√xã¡s
;

161 
__u32
 
	mfsx_¥ojid
;

162 
__u32
 
	mfsx_cowextsize
;

163 
	mfsx_∑d
[8];

169 
	#FS_XFLAG_REALTIME
 0x00000001

	)

170 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

171 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

172 
	#FS_XFLAG_APPEND
 0x00000010

	)

173 
	#FS_XFLAG_SYNC
 0x00000020

	)

174 
	#FS_XFLAG_NOATIME
 0x00000040

	)

175 
	#FS_XFLAG_NODUMP
 0x00000080

	)

176 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

177 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

178 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

179 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

180 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

181 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

182 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

183 
	#FS_XFLAG_DAX
 0x00008000

	)

184 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

185 
	#FS_XFLAG_HASATTR
 0x80000000

	)

190 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

191 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

192 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

193 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

194 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

195 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

196 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

197 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

198 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

199 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

200 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

201 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

203 
	#BLKPG
 
	`_IO
(0x12,105)

	)

207 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

208 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

213 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

214 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

215 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

216 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

217 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

218 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

219 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

220 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

221 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

222 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

223 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

224 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

225 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

226 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

227 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

228 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

230 
	#BMAP_IOCTL
 1

	)

231 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

232 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

233 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

234 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

235 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

236 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

237 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

238 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

240 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

241 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

242 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

243 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

244 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

245 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

246 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

247 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

248 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

249 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

250 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

256 
	#FS_KEY_DESCRIPTOR_SIZE
 8

	)

258 
	sfs¸y±_pﬁicy
 {

259 
__u8
 
	mvîsi⁄
;

260 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

261 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

262 
__u8
 
	mÊags
;

263 
__u8
 
	mma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
];

264 } 
__©åibuã__
((
∑cked
));

266 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

267 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

268 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

290 
	#FS_SECRM_FL
 0x00000001

	)

291 
	#FS_UNRM_FL
 0x00000002

	)

292 
	#FS_COMPR_FL
 0x00000004

	)

293 
	#FS_SYNC_FL
 0x00000008

	)

294 
	#FS_IMMUTABLE_FL
 0x00000010

	)

295 
	#FS_APPEND_FL
 0x00000020

	)

296 
	#FS_NODUMP_FL
 0x00000040

	)

297 
	#FS_NOATIME_FL
 0x00000080

	)

299 
	#FS_DIRTY_FL
 0x00000100

	)

300 
	#FS_COMPRBLK_FL
 0x00000200

	)

301 
	#FS_NOCOMP_FL
 0x00000400

	)

303 
	#FS_ENCRYPT_FL
 0x00000800

	)

304 
	#FS_BTREE_FL
 0x00001000

	)

305 
	#FS_INDEX_FL
 0x00001000

	)

306 
	#FS_IMAGIC_FL
 0x00002000

	)

307 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

308 
	#FS_NOTAIL_FL
 0x00008000

	)

309 
	#FS_DIRSYNC_FL
 0x00010000

	)

310 
	#FS_TOPDIR_FL
 0x00020000

	)

311 
	#FS_HUGE_FILE_FL
 0x00040000

	)

312 
	#FS_EXTENT_FL
 0x00080000

	)

313 
	#FS_EA_INODE_FL
 0x00200000

	)

314 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

315 
	#FS_NOCOW_FL
 0x00800000

	)

316 
	#FS_INLINE_DATA_FL
 0x10000000

	)

317 
	#FS_PROJINHERIT_FL
 0x20000000

	)

318 
	#FS_RESERVED_FL
 0x80000000

	)

320 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

321 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

324 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

325 
	#SYNC_FILE_RANGE_WRITE
 2

	)

326 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

329 
	#RWF_HIPRI
 0x00000001

	)

330 
	#RWF_DSYNC
 0x00000002

	)

331 
	#RWF_SYNC
 0x00000004

	)

	@/usr/include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

24 
	#GENL_UNS_ADMIN_PERM
 0x10

	)

29 
	#GENL_ID_GENERATE
 0

	)

30 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

31 
	#GENL_ID_VFS_DQUOT
 (
NLMSG_MIN_TYPE
 + 1)

	)

32 
	#GENL_ID_PMCRAID
 (
NLMSG_MIN_TYPE
 + 2)

	)

39 
	mCTRL_CMD_UNSPEC
,

40 
	mCTRL_CMD_NEWFAMILY
,

41 
	mCTRL_CMD_DELFAMILY
,

42 
	mCTRL_CMD_GETFAMILY
,

43 
	mCTRL_CMD_NEWOPS
,

44 
	mCTRL_CMD_DELOPS
,

45 
	mCTRL_CMD_GETOPS
,

46 
	mCTRL_CMD_NEWMCAST_GRP
,

47 
	mCTRL_CMD_DELMCAST_GRP
,

48 
	mCTRL_CMD_GETMCAST_GRP
,

49 
	m__CTRL_CMD_MAX
,

52 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

55 
	mCTRL_ATTR_UNSPEC
,

56 
	mCTRL_ATTR_FAMILY_ID
,

57 
	mCTRL_ATTR_FAMILY_NAME
,

58 
	mCTRL_ATTR_VERSION
,

59 
	mCTRL_ATTR_HDRSIZE
,

60 
	mCTRL_ATTR_MAXATTR
,

61 
	mCTRL_ATTR_OPS
,

62 
	mCTRL_ATTR_MCAST_GROUPS
,

63 
	m__CTRL_ATTR_MAX
,

66 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

69 
	mCTRL_ATTR_OP_UNSPEC
,

70 
	mCTRL_ATTR_OP_ID
,

71 
	mCTRL_ATTR_OP_FLAGS
,

72 
	m__CTRL_ATTR_OP_MAX
,

75 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

78 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

79 
	mCTRL_ATTR_MCAST_GRP_NAME
,

80 
	mCTRL_ATTR_MCAST_GRP_ID
,

81 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

84 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@/usr/include/linux/gpio.h

10 #i‚de‡
_GPIO_H_


11 
	#_GPIO_H_


	)

13 
	~<löux/io˘l.h
>

14 
	~<löux/ty≥s.h
>

23 
	sgpiochù_öfo
 {

24 
	m«me
[32];

25 
	mœbñ
[32];

26 
__u32
 
	mlöes
;

30 
	#GPIOLINE_FLAG_KERNEL
 (1UL << 0Ë

	)

31 
	#GPIOLINE_FLAG_IS_OUT
 (1UL << 1)

	)

32 
	#GPIOLINE_FLAG_ACTIVE_LOW
 (1UL << 2)

	)

33 
	#GPIOLINE_FLAG_OPEN_DRAIN
 (1UL << 3)

	)

34 
	#GPIOLINE_FLAG_OPEN_SOURCE
 (1UL << 4)

	)

48 
	sgpiﬁöe_öfo
 {

49 
__u32
 
	mlöe_off£t
;

50 
__u32
 
	mÊags
;

51 
	m«me
[32];

52 
	mc⁄sumî
[32];

56 
	#GPIOHANDLES_MAX
 64

	)

59 
	#GPIOHANDLE_REQUEST_INPUT
 (1UL << 0)

	)

60 
	#GPIOHANDLE_REQUEST_OUTPUT
 (1UL << 1)

	)

61 
	#GPIOHANDLE_REQUEST_ACTIVE_LOW
 (1UL << 2)

	)

62 
	#GPIOHANDLE_REQUEST_OPEN_DRAIN
 (1UL << 3)

	)

63 
	#GPIOHANDLE_REQUEST_OPEN_SOURCE
 (1UL << 4)

	)

87 
	sgpioh™dÀ_ªque°
 {

88 
__u32
 
	mlöeoff£ts
[
GPIOHANDLES_MAX
];

89 
__u32
 
	mÊags
;

90 
__u8
 
	mdeÁu…_vÆues
[
GPIOHANDLES_MAX
];

91 
	mc⁄sumî_œbñ
[32];

92 
__u32
 
	mlöes
;

93 
	mfd
;

102 
	sgpioh™dÀ_d©a
 {

103 
__u8
 
	mvÆues
[
GPIOHANDLES_MAX
];

106 
	#GPIOHANDLE_GET_LINE_VALUES_IOCTL
 
	`_IOWR
(0xB4, 0x08, 
gpioh™dÀ_d©a
)

	)

107 
	#GPIOHANDLE_SET_LINE_VALUES_IOCTL
 
	`_IOWR
(0xB4, 0x09, 
gpioh™dÀ_d©a
)

	)

110 
	#GPIOEVENT_REQUEST_RISING_EDGE
 (1UL << 0)

	)

111 
	#GPIOEVENT_REQUEST_FALLING_EDGE
 (1UL << 1)

	)

112 
	#GPIOEVENT_REQUEST_BOTH_EDGES
 ((1UL << 0Ë| (1UL << 1))

	)

128 
	sgpi€vít_ªque°
 {

129 
__u32
 
	mlöeoff£t
;

130 
__u32
 
	mh™dÀÊags
;

131 
__u32
 
	mevítÊags
;

132 
	mc⁄sumî_œbñ
[32];

133 
	mfd
;

139 
	#GPIOEVENT_EVENT_RISING_EDGE
 0x01

	)

140 
	#GPIOEVENT_EVENT_FALLING_EDGE
 0x02

	)

147 
	sgpi€vít_d©a
 {

148 
__u64
 
	mtime°amp
;

149 
__u32
 
	mid
;

152 
	#GPIO_GET_CHIPINFO_IOCTL
 
	`_IOR
(0xB4, 0x01, 
gpiochù_öfo
)

	)

153 
	#GPIO_GET_LINEINFO_IOCTL
 
	`_IOWR
(0xB4, 0x02, 
gpiﬁöe_öfo
)

	)

154 
	#GPIO_GET_LINEHANDLE_IOCTL
 
	`_IOWR
(0xB4, 0x03, 
gpioh™dÀ_ªque°
)

	)

155 
	#GPIO_GET_LINEEVENT_IOCTL
 
	`_IOWR
(0xB4, 0x04, 
gpi€vít_ªque°
)

	)

	@/usr/include/linux/i2c.h

27 #i‚de‡
_LINUX_I2C_H


28 
	#_LINUX_I2C_H


	)

30 
	~<löux/ty≥s.h
>

68 
	si2c_msg
 {

69 
__u16
 
	maddr
;

70 
__u16
 
	mÊags
;

71 
	#I2C_M_RD
 0x0001

	)

73 
	#I2C_M_TEN
 0x0010

	)

74 
	#I2C_M_RECV_LEN
 0x0400

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_IGNORE_NAK
 0x1000

	)

77 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

78 
	#I2C_M_NOSTART
 0x4000

	)

79 
	#I2C_M_STOP
 0x8000

	)

80 
__u16
 
	mÀn
;

81 
__u8
 *
	mbuf
;

86 
	#I2C_FUNC_I2C
 0x00000001

	)

87 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

88 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

89 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

90 
	#I2C_FUNC_NOSTART
 0x00000010

	)

91 
	#I2C_FUNC_SLAVE
 0x00000020

	)

92 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

93 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

94 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

95 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

96 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

98 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

100 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

101 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

102 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

103 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

104 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

105 
	#I2C_FUNC_SMBUS_HOST_NOTIFY
 0x10000000

	)

107 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

108 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

109 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

110 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

111 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

112 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

113 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

114 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

115 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

116 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

118 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

119 
I2C_FUNC_SMBUS_BYTE
 | \

120 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

121 
I2C_FUNC_SMBUS_WORD_DATA
 | \

122 
I2C_FUNC_SMBUS_PROC_CALL
 | \

123 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

124 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

125 
I2C_FUNC_SMBUS_PEC
)

	)

130 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

131 
	ui2c_smbus_d©a
 {

132 
__u8
 
	mbyã
;

133 
__u16
 
	mw‹d
;

134 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

139 
	#I2C_SMBUS_READ
 1

	)

140 
	#I2C_SMBUS_WRITE
 0

	)

144 
	#I2C_SMBUS_QUICK
 0

	)

145 
	#I2C_SMBUS_BYTE
 1

	)

146 
	#I2C_SMBUS_BYTE_DATA
 2

	)

147 
	#I2C_SMBUS_WORD_DATA
 3

	)

148 
	#I2C_SMBUS_PROC_CALL
 4

	)

149 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

150 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

151 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

152 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IF_IFNAMSIZ


28 
	#IFNAMSIZ
 16

	)

30 
	#IFALIASZ
 256

	)

31 
	~<löux/hdlc/io˘l.h
>

34 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 || \

35 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

76 
	e√t_devi˚_Êags
 {

78 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


79 
IFF_UP
 = 1<<0,

80 
	mIFF_BROADCAST
 = 1<<1,

81 
	mIFF_DEBUG
 = 1<<2,

82 
	mIFF_LOOPBACK
 = 1<<3,

83 
	mIFF_POINTOPOINT
 = 1<<4,

84 
	mIFF_NOTRAILERS
 = 1<<5,

85 
	mIFF_RUNNING
 = 1<<6,

86 
	mIFF_NOARP
 = 1<<7,

87 
	mIFF_PROMISC
 = 1<<8,

88 
	mIFF_ALLMULTI
 = 1<<9,

89 
	mIFF_MASTER
 = 1<<10,

90 
	mIFF_SLAVE
 = 1<<11,

91 
	mIFF_MULTICAST
 = 1<<12,

92 
	mIFF_PORTSEL
 = 1<<13,

93 
	mIFF_AUTOMEDIA
 = 1<<14,

94 
	mIFF_DYNAMIC
 = 1<<15,

96 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


97 
	mIFF_LOWER_UP
 = 1<<16,

98 
	mIFF_DORMANT
 = 1<<17,

99 
	mIFF_ECHO
 = 1<<18,

105 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


106 
	#IFF_UP
 
IFF_UP


	)

107 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

108 
	#IFF_DEBUG
 
IFF_DEBUG


	)

109 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

110 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

111 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

112 
	#IFF_RUNNING
 
IFF_RUNNING


	)

113 
	#IFF_NOARP
 
IFF_NOARP


	)

114 
	#IFF_PROMISC
 
IFF_PROMISC


	)

115 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

116 
	#IFF_MASTER
 
IFF_MASTER


	)

117 
	#IFF_SLAVE
 
IFF_SLAVE


	)

118 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

119 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

120 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

121 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

124 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


125 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

126 
	#IFF_DORMANT
 
IFF_DORMANT


	)

127 
	#IFF_ECHO
 
IFF_ECHO


	)

130 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

131 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

133 
	#IF_GET_IFACE
 0x0001

	)

134 
	#IF_GET_PROTO
 0x0002

	)

137 
	#IF_IFACE_V35
 0x1000

	)

138 
	#IF_IFACE_V24
 0x1001

	)

139 
	#IF_IFACE_X21
 0x1002

	)

140 
	#IF_IFACE_T1
 0x1003

	)

141 
	#IF_IFACE_E1
 0x1004

	)

142 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

143 
	#IF_IFACE_X21D
 0x1006

	)

146 
	#IF_PROTO_HDLC
 0x2000

	)

147 
	#IF_PROTO_PPP
 0x2001

	)

148 
	#IF_PROTO_CISCO
 0x2002

	)

149 
	#IF_PROTO_FR
 0x2003

	)

150 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

151 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

152 
	#IF_PROTO_X25
 0x2006

	)

153 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

154 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

155 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

156 
	#IF_PROTO_FR_PVC
 0x200A

	)

157 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

158 
	#IF_PROTO_RAW
 0x200C

	)

162 
	mIF_OPER_UNKNOWN
,

163 
	mIF_OPER_NOTPRESENT
,

164 
	mIF_OPER_DOWN
,

165 
	mIF_OPER_LOWERLAYERDOWN
,

166 
	mIF_OPER_TESTING
,

167 
	mIF_OPER_DORMANT
,

168 
	mIF_OPER_UP
,

173 
	mIF_LINK_MODE_DEFAULT
,

174 
	mIF_LINK_MODE_DORMANT
,

188 #i‡
__UAPI_DEF_IF_IFMAP


189 
	sifm≠
 {

190 
	mmem_°¨t
;

191 
	mmem_íd
;

192 
	mba£_addr
;

193 
	múq
;

194 
	mdma
;

195 
	mp‹t
;

200 
	sif_£âögs
 {

201 
	mty≥
;

202 
	msize
;

205 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

206 
cisco_¥Ÿo
 *
	mcisco
;

207 
‰_¥Ÿo
 *
	m‰
;

208 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

209 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

212 
sync_£rül_£âögs
 *
	msync
;

213 
ã1_£âögs
 *
	mã1
;

214 } 
	mifs_ifsu
;

225 #i‡
__UAPI_DEF_IF_IFREQ


226 
	si‰eq
 {

227 
	#IFHWADDRLEN
 6

	)

230 
	mi‰n_«me
[
IFNAMSIZ
];

231 } 
	mi‰_i‰n
;

234 
sockaddr
 
	mi‰u_addr
;

235 
sockaddr
 
	mi‰u_d°addr
;

236 
sockaddr
 
	mi‰u_brﬂdaddr
;

237 
sockaddr
 
	mi‰u_√tmask
;

238 
sockaddr
 
	mi‰u_hwaddr
;

239 
	mi‰u_Êags
;

240 
	mi‰u_ivÆue
;

241 
	mi‰u_mtu
;

242 
ifm≠
 
	mi‰u_m≠
;

243 
	mi‰u_¶ave
[
IFNAMSIZ
];

244 
	mi‰u_√w«me
[
IFNAMSIZ
];

245 * 
	mi‰u_d©a
;

246 
if_£âögs
 
	mi‰u_£âögs
;

247 } 
	mi‰_i‰u
;

251 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

252 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

253 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

254 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

255 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

256 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

257 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

258 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

259 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

260 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

261 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

262 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

263 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

264 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

266 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

267 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

277 #i‡
__UAPI_DEF_IF_IFCONF


278 
	sifc⁄f
 {

279 
	mifc_Àn
;

281 *
	mifcu_buf
;

282 
i‰eq
 *
	mifcu_ªq
;

283 } 
	mifc_ifcu
;

287 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

288 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_TLEN
 2

	)

33 
	#ETH_HLEN
 14

	)

34 
	#ETH_ZLEN
 60

	)

35 
	#ETH_DATA_LEN
 1500

	)

36 
	#ETH_FRAME_LEN
 1514

	)

37 
	#ETH_FCS_LEN
 4

	)

43 
	#ETH_P_LOOP
 0x0060

	)

44 
	#ETH_P_PUP
 0x0200

	)

45 
	#ETH_P_PUPAT
 0x0201

	)

46 
	#ETH_P_TSN
 0x22F0

	)

47 
	#ETH_P_IP
 0x0800

	)

48 
	#ETH_P_X25
 0x0805

	)

49 
	#ETH_P_ARP
 0x0806

	)

50 
	#ETH_P_BPQ
 0x08FF

	)

51 
	#ETH_P_IEEEPUP
 0x0a00

	)

52 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

53 
	#ETH_P_BATMAN
 0x4305

	)

54 
	#ETH_P_DEC
 0x6000

	)

55 
	#ETH_P_DNA_DL
 0x6001

	)

56 
	#ETH_P_DNA_RC
 0x6002

	)

57 
	#ETH_P_DNA_RT
 0x6003

	)

58 
	#ETH_P_LAT
 0x6004

	)

59 
	#ETH_P_DIAG
 0x6005

	)

60 
	#ETH_P_CUST
 0x6006

	)

61 
	#ETH_P_SCA
 0x6007

	)

62 
	#ETH_P_TEB
 0x6558

	)

63 
	#ETH_P_RARP
 0x8035

	)

64 
	#ETH_P_ATALK
 0x809B

	)

65 
	#ETH_P_AARP
 0x80F3

	)

66 
	#ETH_P_8021Q
 0x8100

	)

67 
	#ETH_P_IPX
 0x8137

	)

68 
	#ETH_P_IPV6
 0x86DD

	)

69 
	#ETH_P_PAUSE
 0x8808

	)

70 
	#ETH_P_SLOW
 0x8809

	)

71 
	#ETH_P_WCCP
 0x883E

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_PPP_DISC
 0x8863

	)

77 
	#ETH_P_PPP_SES
 0x8864

	)

78 
	#ETH_P_LINK_CTL
 0x886¯

	)

79 
	#ETH_P_ATMFATE
 0x8884

	)

82 
	#ETH_P_PAE
 0x888E

	)

83 
	#ETH_P_AOE
 0x88A2

	)

84 
	#ETH_P_8021AD
 0x88A8

	)

85 
	#ETH_P_802_EX1
 0x88B5

	)

86 
	#ETH_P_TIPC
 0x88CA

	)

87 
	#ETH_P_MACSEC
 0x88E5

	)

88 
	#ETH_P_8021AH
 0x88E7

	)

89 
	#ETH_P_MVRP
 0x88F5

	)

90 
	#ETH_P_1588
 0x88F7

	)

91 
	#ETH_P_NCSI
 0x88F8

	)

92 
	#ETH_P_PRP
 0x88FB

	)

93 
	#ETH_P_FCOE
 0x8906

	)

94 
	#ETH_P_TDLS
 0x890D

	)

95 
	#ETH_P_FIP
 0x8914

	)

96 
	#ETH_P_80221
 0x8917

	)

97 
	#ETH_P_HSR
 0x892F

	)

98 
	#ETH_P_LOOPBACK
 0x9000

	)

99 
	#ETH_P_QINQ1
 0x9100

	)

100 
	#ETH_P_QINQ2
 0x9200

	)

101 
	#ETH_P_QINQ3
 0x9300

	)

102 
	#ETH_P_EDSA
 0xDADA

	)

103 
	#ETH_P_AF_IUCV
 0xFBFB

	)

105 
	#ETH_P_802_3_MIN
 0x0600

	)

112 
	#ETH_P_802_3
 0x0001

	)

113 
	#ETH_P_AX25
 0x0002

	)

114 
	#ETH_P_ALL
 0x0003

	)

115 
	#ETH_P_802_2
 0x0004

	)

116 
	#ETH_P_SNAP
 0x0005

	)

117 
	#ETH_P_DDCMP
 0x0006

	)

118 
	#ETH_P_WAN_PPP
 0x0007

	)

119 
	#ETH_P_PPP_MP
 0x0008

	)

120 
	#ETH_P_LOCALTALK
 0x0009

	)

121 
	#ETH_P_CAN
 0x000C

	)

122 
	#ETH_P_CANFD
 0x000D

	)

123 
	#ETH_P_PPPTALK
 0x0010

	)

124 
	#ETH_P_TR_802_2
 0x0011

	)

125 
	#ETH_P_MOBITEX
 0x0015

	)

126 
	#ETH_P_CONTROL
 0x0016

	)

127 
	#ETH_P_IRDA
 0x0017

	)

128 
	#ETH_P_ECONET
 0x0018

	)

129 
	#ETH_P_HDLC
 0x0019

	)

130 
	#ETH_P_ARCNET
 0x001A

	)

131 
	#ETH_P_DSA
 0x001B

	)

132 
	#ETH_P_TRAILER
 0x001C

	)

133 
	#ETH_P_PHONET
 0x00F5

	)

134 
	#ETH_P_IEEE802154
 0x00F6

	)

135 
	#ETH_P_CAIF
 0x00F7

	)

136 
	#ETH_P_XDSA
 0x00F8

	)

142 
	sëhhdr
 {

143 
	mh_de°
[
ETH_ALEN
];

144 
	mh_sour˚
[
ETH_ALEN
];

145 
__be16
 
	mh_¥Ÿo
;

146 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

37 
	mVLAN_FLAG_MVRP
 = 0x8,

40 
	evœn_«me_ty≥s
 {

41 
	mVLAN_NAME_TYPE_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

43 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

45 
	mVLAN_NAME_TYPE_HIGHEST


48 
	svœn_io˘l_¨gs
 {

49 
	mcmd
;

50 
	mdevi˚1
[24];

53 
	mdevi˚2
[24];

54 
	mVID
;

55 
	mskb_¥i‹ôy
;

56 
	m«me_ty≥
;

57 
	mböd_ty≥
;

58 
	mÊag
;

59 } 
	mu
;

61 
	mvœn_qos
;

	@/usr/include/linux/input.h

8 #i‚de‡
_INPUT_H


9 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<löux/ty≥s.h
>

17 
	~"öput-evít-codes.h
"

23 
	söput_evít
 {

24 
timevÆ
 
	mtime
;

25 
__u16
 
	mty≥
;

26 
__u16
 
	mcode
;

27 
__s32
 
	mvÆue
;

34 
	#EV_VERSION
 0x010001

	)

40 
	söput_id
 {

41 
__u16
 
	mbu°y≥
;

42 
__u16
 
	mvíd‹
;

43 
__u16
 
	m¥odu˘
;

44 
__u16
 
	mvîsi⁄
;

66 
	söput_absöfo
 {

67 
__s32
 
	mvÆue
;

68 
__s32
 
	mmöimum
;

69 
__s32
 
	mmaximum
;

70 
__s32
 
	mfuzz
;

71 
__s32
 
	mÊ©
;

72 
__s32
 
	mªsﬁuti⁄
;

90 
	söput_keym≠_íåy
 {

91 
	#INPUT_KEYMAP_BY_INDEX
 (1 << 0)

	)

92 
__u8
 
	mÊags
;

93 
__u8
 
	mÀn
;

94 
__u16
 
	mödex
;

95 
__u32
 
	mkeycode
;

96 
__u8
 
	msˇncode
[32];

99 
	söput_mask
 {

100 
__u32
 
	mty≥
;

101 
__u32
 
	mcodes_size
;

102 
__u64
 
	mcodes_±r
;

105 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

106 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

107 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

108 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

110 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

111 
	#EVIOCGKEYCODE_V2
 
	`_IOR
('E', 0x04, 
öput_keym≠_íåy
)

	)

112 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

113 
	#EVIOCSKEYCODE_V2
 
	`_IOW
('E', 0x04, 
öput_keym≠_íåy
)

	)

115 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

116 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

117 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

118 
	#EVIOCGPROP
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x09,ÜíË

	)

144 
	#EVIOCGMTSLOTS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x0a,Üí)

	)

146 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

147 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

148 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

149 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

151 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 + (ev),ÜíË

	)

152 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 + (abs), 
öput_absöfo
Ë

	)

153 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 + (abs), 
öput_absöfo
Ë

	)

155 
	#EVIOCSFF
 
	`_IOW
('E', 0x80, 
ff_ef„˘
Ë

	)

156 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

157 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

159 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

160 
	#EVIOCREVOKE
 
	`_IOW
('E', 0x91, Ë

	)

191 
	#EVIOCGMASK
 
	`_IOR
('E', 0x92, 
öput_mask
Ë

	)

214 
	#EVIOCSMASK
 
	`_IOW
('E', 0x93, 
öput_mask
Ë

	)

216 
	#EVIOCSCLOCKID
 
	`_IOW
('E', 0xa0, Ë

	)

222 
	#ID_BUS
 0

	)

223 
	#ID_VENDOR
 1

	)

224 
	#ID_PRODUCT
 2

	)

225 
	#ID_VERSION
 3

	)

227 
	#BUS_PCI
 0x01

	)

228 
	#BUS_ISAPNP
 0x02

	)

229 
	#BUS_USB
 0x03

	)

230 
	#BUS_HIL
 0x04

	)

231 
	#BUS_BLUETOOTH
 0x05

	)

232 
	#BUS_VIRTUAL
 0x06

	)

234 
	#BUS_ISA
 0x10

	)

235 
	#BUS_I8042
 0x11

	)

236 
	#BUS_XTKBD
 0x12

	)

237 
	#BUS_RS232
 0x13

	)

238 
	#BUS_GAMEPORT
 0x14

	)

239 
	#BUS_PARPORT
 0x15

	)

240 
	#BUS_AMIGA
 0x16

	)

241 
	#BUS_ADB
 0x17

	)

242 
	#BUS_I2C
 0x18

	)

243 
	#BUS_HOST
 0x19

	)

244 
	#BUS_GSC
 0x1A

	)

245 
	#BUS_ATARI
 0x1B

	)

246 
	#BUS_SPI
 0x1C

	)

247 
	#BUS_RMI
 0x1D

	)

248 
	#BUS_CEC
 0x1E

	)

249 
	#BUS_INTEL_ISHTP
 0x1F

	)

254 
	#MT_TOOL_FINGER
 0

	)

255 
	#MT_TOOL_PEN
 1

	)

256 
	#MT_TOOL_PALM
 2

	)

257 
	#MT_TOOL_MAX
 2

	)

262 
	#FF_STATUS_STOPPED
 0x00

	)

263 
	#FF_STATUS_PLAYING
 0x01

	)

264 
	#FF_STATUS_MAX
 0x01

	)

281 
	sff_ª∂ay
 {

282 
__u16
 
	mÀngth
;

283 
__u16
 
	mdñay
;

291 
	sff_åiggî
 {

292 
__u16
 
	mbuâ⁄
;

293 
__u16
 
	möãrvÆ
;

308 
	sff_ívñ›e
 {

309 
__u16
 
	m©èck_Àngth
;

310 
__u16
 
	m©èck_Àvñ
;

311 
__u16
 
	mÁde_Àngth
;

312 
__u16
 
	mÁde_Àvñ
;

320 
	sff_c⁄°™t_ef„˘
 {

321 
__s16
 
	mÀvñ
;

322 
ff_ívñ›e
 
	mívñ›e
;

331 
	sff_ømp_ef„˘
 {

332 
__s16
 
	m°¨t_Àvñ
;

333 
__s16
 
	míd_Àvñ
;

334 
ff_ívñ›e
 
	mívñ›e
;

347 
	sff_c⁄dôi⁄_ef„˘
 {

348 
__u16
 
	mright_ßtuøti⁄
;

349 
__u16
 
	mÀ·_ßtuøti⁄
;

351 
__s16
 
	mright_c€ff
;

352 
__s16
 
	mÀ·_c€ff
;

354 
__u16
 
	mdódb™d
;

355 
__s16
 
	m˚¡î
;

376 
	sff_≥riodic_ef„˘
 {

377 
__u16
 
	mwavef‹m
;

378 
__u16
 
	m≥riod
;

379 
__s16
 
	mmagnôude
;

380 
__s16
 
	moff£t
;

381 
__u16
 
	mpha£
;

383 
ff_ívñ›e
 
	mívñ›e
;

385 
__u32
 
	mcu°om_Àn
;

386 
__s16
 *
	mcu°om_d©a
;

397 
	sff_rumbÀ_ef„˘
 {

398 
__u16
 
	m°r⁄g_magnôude
;

399 
__u16
 
	mwók_magnôude
;

425 
	sff_ef„˘
 {

426 
__u16
 
	mty≥
;

427 
__s16
 
	mid
;

428 
__u16
 
	mdúe˘i⁄
;

429 
ff_åiggî
 
	måiggî
;

430 
ff_ª∂ay
 
	mª∂ay
;

433 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

434 
ff_ømp_ef„˘
 
	mømp
;

435 
ff_≥riodic_ef„˘
 
	m≥riodic
;

436 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

437 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

438 } 
	mu
;

445 
	#FF_RUMBLE
 0x50

	)

446 
	#FF_PERIODIC
 0x51

	)

447 
	#FF_CONSTANT
 0x52

	)

448 
	#FF_SPRING
 0x53

	)

449 
	#FF_FRICTION
 0x54

	)

450 
	#FF_DAMPER
 0x55

	)

451 
	#FF_INERTIA
 0x56

	)

452 
	#FF_RAMP
 0x57

	)

454 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

455 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

461 
	#FF_SQUARE
 0x58

	)

462 
	#FF_TRIANGLE
 0x59

	)

463 
	#FF_SINE
 0x5a

	)

464 
	#FF_SAW_UP
 0x5b

	)

465 
	#FF_SAW_DOWN
 0x5c

	)

466 
	#FF_CUSTOM
 0x5d

	)

468 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

469 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

475 
	#FF_GAIN
 0x60

	)

476 
	#FF_AUTOCENTER
 0x61

	)

484 
	#FF_MAX_EFFECTS
 
FF_GAIN


	)

486 
	#FF_MAX
 0x7f

	)

487 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/magic.h

1 #i‚de‡
__LINUX_MAGIC_H__


2 
	#__LINUX_MAGIC_H__


	)

4 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

5 
	#AFFS_SUPER_MAGIC
 0xadff

	)

6 
	#AFS_SUPER_MAGIC
 0x5346414F

	)

7 
	#AUTOFS_SUPER_MAGIC
 0x0187

	)

8 
	#CODA_SUPER_MAGIC
 0x73757245

	)

9 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

10 
	#CRAMFS_MAGIC_WEND
 0x453dcd28

	)

11 
	#DEBUGFS_MAGIC
 0x64626720

	)

12 
	#SECURITYFS_MAGIC
 0x73636673

	)

13 
	#SELINUX_MAGIC
 0xf97cff8c

	)

14 
	#SMACK_MAGIC
 0x43415d53

	)

15 
	#RAMFS_MAGIC
 0x858458f6

	)

16 
	#TMPFS_MAGIC
 0x01021994

	)

17 
	#HUGETLBFS_MAGIC
 0x958458f6

	)

18 
	#SQUASHFS_MAGIC
 0x73717368

	)

19 
	#ECRYPTFS_SUPER_MAGIC
 0xf15f

	)

20 
	#EFS_SUPER_MAGIC
 0x414A53

	)

21 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

22 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

23 
	#XENFS_SUPER_MAGIC
 0xabba1974

	)

24 
	#EXT4_SUPER_MAGIC
 0xEF53

	)

25 
	#BTRFS_SUPER_MAGIC
 0x9123683E

	)

26 
	#NILFS_SUPER_MAGIC
 0x3434

	)

27 
	#F2FS_SUPER_MAGIC
 0xF2F52010

	)

28 
	#HPFS_SUPER_MAGIC
 0xf995e849

	)

29 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

30 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

31 
	#PSTOREFS_MAGIC
 0x6165676C

	)

32 
	#EFIVARFS_MAGIC
 0xde5e81e4

	)

33 
	#HOSTFS_SUPER_MAGIC
 0x00c0f„e

	)

34 
	#OVERLAYFS_SUPER_MAGIC
 0x794c7630

	)

36 
	#MINIX_SUPER_MAGIC
 0x137F

	)

37 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

38 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

39 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

40 
	#MINIX3_SUPER_MAGIC
 0x4d5®

	)

42 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

43 
	#NCP_SUPER_MAGIC
 0x564¯

	)

44 
	#NFS_SUPER_MAGIC
 0x6969

	)

45 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

46 
	#QNX4_SUPER_MAGIC
 0x002‡

	)

47 
	#QNX6_SUPER_MAGIC
 0x68191122

	)

49 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

52 
	#REISERFS_SUPER_MAGIC_STRING
 "ReIsErFs"

	)

53 
	#REISER2FS_SUPER_MAGIC_STRING
 "ReIsEr2Fs"

	)

54 
	#REISER2FS_JR_SUPER_MAGIC_STRING
 "ReIsEr3Fs"

	)

56 
	#SMB_SUPER_MAGIC
 0x517B

	)

57 
	#CGROUP_SUPER_MAGIC
 0x27e0eb

	)

58 
	#CGROUP2_SUPER_MAGIC
 0x63677270

	)

61 
	#STACK_END_MAGIC
 0x57AC6E9D

	)

63 
	#TRACEFS_MAGIC
 0x74726163

	)

65 
	#V9FS_MAGIC
 0x01021997

	)

67 
	#BDEVFS_MAGIC
 0x62646576

	)

68 
	#DAXFS_MAGIC
 0x64646178

	)

69 
	#BINFMTFS_MAGIC
 0x42494e4d

	)

70 
	#DEVPTS_SUPER_MAGIC
 0x1cd1

	)

71 
	#FUTEXFS_SUPER_MAGIC
 0xBAD1DEA

	)

72 
	#PIPEFS_MAGIC
 0x50495045

	)

73 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

74 
	#SOCKFS_MAGIC
 0x534F434B

	)

75 
	#SYSFS_MAGIC
 0x62656572

	)

76 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

77 
	#MTD_INODE_FS_MAGIC
 0x11307854

	)

78 
	#ANON_INODE_FS_MAGIC
 0x09041934

	)

79 
	#BTRFS_TEST_MAGIC
 0x73727279

	)

80 
	#NSFS_MAGIC
 0x6e736673

	)

81 
	#BPF_FS_MAGIC
 0xˇ„4a11

	)

83 
	#UDF_SUPER_MAGIC
 0x15013346

	)

84 
	#BALLOON_KVM_MAGIC
 0x13661366

	)

85 
	#ZSMALLOC_MAGIC
 0x58295829

	)

	@/usr/include/linux/mdio.h

10 #i‚de‡
__LINUX_MDIO_H__


11 
	#__LINUX_MDIO_H__


	)

13 
	~<löux/ty≥s.h
>

14 
	~<löux/mii.h
>

17 
	#MDIO_MMD_PMAPMD
 1

	)

19 
	#MDIO_MMD_WIS
 2

	)

20 
	#MDIO_MMD_PCS
 3

	)

21 
	#MDIO_MMD_PHYXS
 4

	)

22 
	#MDIO_MMD_DTEXS
 5

	)

23 
	#MDIO_MMD_TC
 6

	)

24 
	#MDIO_MMD_AN
 7

	)

25 
	#MDIO_MMD_C22EXT
 29

	)

26 
	#MDIO_MMD_VEND1
 30

	)

27 
	#MDIO_MMD_VEND2
 31

	)

30 
	#MDIO_CTRL1
 
MII_BMCR


	)

31 
	#MDIO_STAT1
 
MII_BMSR


	)

32 
	#MDIO_DEVID1
 
MII_PHYSID1


	)

33 
	#MDIO_DEVID2
 
MII_PHYSID2


	)

34 
	#MDIO_SPEED
 4

	)

35 
	#MDIO_DEVS1
 5

	)

36 
	#MDIO_DEVS2
 6

	)

37 
	#MDIO_CTRL2
 7

	)

38 
	#MDIO_STAT2
 8

	)

39 
	#MDIO_PMA_TXDIS
 9

	)

40 
	#MDIO_PMA_RXDET
 10

	)

41 
	#MDIO_PMA_EXTABLE
 11

	)

42 
	#MDIO_PKGID1
 14

	)

43 
	#MDIO_PKGID2
 15

	)

44 
	#MDIO_AN_ADVERTISE
 16

	)

45 
	#MDIO_AN_LPA
 19

	)

46 
	#MDIO_PCS_EEE_ABLE
 20

	)

47 
	#MDIO_PCS_EEE_WK_ERR
 22

	)

48 
	#MDIO_PHYXS_LNSTAT
 24

	)

49 
	#MDIO_AN_EEE_ADV
 60

	)

50 
	#MDIO_AN_EEE_LPABLE
 61

	)

53 
	#MDIO_PMA_10GBT_SWAPPOL
 130

	)

54 
	#MDIO_PMA_10GBT_TXPWR
 131

	)

55 
	#MDIO_PMA_10GBT_SNR
 133

	)

57 
	#MDIO_PMA_10GBR_FECABLE
 170

	)

58 
	#MDIO_PCS_10GBX_STAT1
 24

	)

59 
	#MDIO_PCS_10GBRT_STAT1
 32

	)

60 
	#MDIO_PCS_10GBRT_STAT2
 33

	)

61 
	#MDIO_AN_10GBT_CTRL
 32

	)

62 
	#MDIO_AN_10GBT_STAT
 33

	)

65 
	#MDIO_PMA_LASI_RXCTRL
 0x9000

	)

66 
	#MDIO_PMA_LASI_TXCTRL
 0x9001

	)

67 
	#MDIO_PMA_LASI_CTRL
 0x9002

	)

68 
	#MDIO_PMA_LASI_RXSTAT
 0x9003

	)

69 
	#MDIO_PMA_LASI_TXSTAT
 0x9004

	)

70 
	#MDIO_PMA_LASI_STAT
 0x9005

	)

74 
	#MDIO_CTRL1_SPEEDSELEXT
 (
BMCR_SPEED1000
 | 
BMCR_SPEED100
)

	)

76 
	#MDIO_CTRL1_SPEEDSEL
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x003c)

	)

77 
	#MDIO_CTRL1_FULLDPLX
 
BMCR_FULLDPLX


	)

78 
	#MDIO_CTRL1_LPOWER
 
BMCR_PDOWN


	)

79 
	#MDIO_CTRL1_RESET
 
BMCR_RESET


	)

80 
	#MDIO_PMA_CTRL1_LOOPBACK
 0x0001

	)

81 
	#MDIO_PMA_CTRL1_SPEED1000
 
BMCR_SPEED1000


	)

82 
	#MDIO_PMA_CTRL1_SPEED100
 
BMCR_SPEED100


	)

83 
	#MDIO_PCS_CTRL1_LOOPBACK
 
BMCR_LOOPBACK


	)

84 
	#MDIO_PHYXS_CTRL1_LOOPBACK
 
BMCR_LOOPBACK


	)

85 
	#MDIO_AN_CTRL1_RESTART
 
BMCR_ANRESTART


	)

86 
	#MDIO_AN_CTRL1_ENABLE
 
BMCR_ANENABLE


	)

87 
	#MDIO_AN_CTRL1_XNP
 0x2000

	)

88 
	#MDIO_PCS_CTRL1_CLKSTOP_EN
 0x400

	)

91 
	#MDIO_CTRL1_SPEED10G
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x00)

	)

93 
	#MDIO_CTRL1_SPEED10P2B
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x04)

	)

96 
	#MDIO_STAT1_LPOWERABLE
 0x0002

	)

97 
	#MDIO_STAT1_LSTATUS
 
BMSR_LSTATUS


	)

98 
	#MDIO_STAT1_FAULT
 0x0080

	)

99 
	#MDIO_AN_STAT1_LPABLE
 0x0001

	)

100 
	#MDIO_AN_STAT1_ABLE
 
BMSR_ANEGCAPABLE


	)

101 
	#MDIO_AN_STAT1_RFAULT
 
BMSR_RFAULT


	)

102 
	#MDIO_AN_STAT1_COMPLETE
 
BMSR_ANEGCOMPLETE


	)

103 
	#MDIO_AN_STAT1_PAGE
 0x0040

	)

104 
	#MDIO_AN_STAT1_XNP
 0x0080

	)

107 
	#MDIO_SPEED_10G
 0x0001

	)

108 
	#MDIO_PMA_SPEED_2B
 0x0002

	)

109 
	#MDIO_PMA_SPEED_10P
 0x0004

	)

110 
	#MDIO_PMA_SPEED_1000
 0x0010

	)

111 
	#MDIO_PMA_SPEED_100
 0x0020

	)

112 
	#MDIO_PMA_SPEED_10
 0x0040

	)

113 
	#MDIO_PCS_SPEED_10P2B
 0x0002

	)

116 
	#MDIO_DEVS_PRESENT
(
devad
Ë(1 << (devad))

	)

117 
	#MDIO_DEVS_PMAPMD
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PMAPMD
)

	)

118 
	#MDIO_DEVS_WIS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_WIS
)

	)

119 
	#MDIO_DEVS_PCS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PCS
)

	)

120 
	#MDIO_DEVS_PHYXS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PHYXS
)

	)

121 
	#MDIO_DEVS_DTEXS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_DTEXS
)

	)

122 
	#MDIO_DEVS_TC
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_TC
)

	)

123 
	#MDIO_DEVS_AN
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_AN
)

	)

124 
	#MDIO_DEVS_C22EXT
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_C22EXT
)

	)

127 
	#MDIO_PMA_CTRL2_TYPE
 0x000‡

	)

128 
	#MDIO_PMA_CTRL2_10GBCX4
 0x0000

	)

129 
	#MDIO_PMA_CTRL2_10GBEW
 0x0001

	)

130 
	#MDIO_PMA_CTRL2_10GBLW
 0x0002

	)

131 
	#MDIO_PMA_CTRL2_10GBSW
 0x0003

	)

132 
	#MDIO_PMA_CTRL2_10GBLX4
 0x0004

	)

133 
	#MDIO_PMA_CTRL2_10GBER
 0x0005

	)

134 
	#MDIO_PMA_CTRL2_10GBLR
 0x0006

	)

135 
	#MDIO_PMA_CTRL2_10GBSR
 0x0007

	)

136 
	#MDIO_PMA_CTRL2_10GBLRM
 0x0008

	)

137 
	#MDIO_PMA_CTRL2_10GBT
 0x0009

	)

138 
	#MDIO_PMA_CTRL2_10GBKX4
 0x000®

	)

139 
	#MDIO_PMA_CTRL2_10GBKR
 0x000b

	)

140 
	#MDIO_PMA_CTRL2_1000BT
 0x000¯

	)

141 
	#MDIO_PMA_CTRL2_1000BKX
 0x000d

	)

142 
	#MDIO_PMA_CTRL2_100BTX
 0x000ê

	)

143 
	#MDIO_PMA_CTRL2_10BT
 0x000‡

	)

144 
	#MDIO_PCS_CTRL2_TYPE
 0x0003

	)

145 
	#MDIO_PCS_CTRL2_10GBR
 0x0000

	)

146 
	#MDIO_PCS_CTRL2_10GBX
 0x0001

	)

147 
	#MDIO_PCS_CTRL2_10GBW
 0x0002

	)

148 
	#MDIO_PCS_CTRL2_10GBT
 0x0003

	)

151 
	#MDIO_STAT2_RXFAULT
 0x0400

	)

152 
	#MDIO_STAT2_TXFAULT
 0x0800

	)

153 
	#MDIO_STAT2_DEVPRST
 0xc000

	)

154 
	#MDIO_STAT2_DEVPRST_VAL
 0x8000

	)

155 
	#MDIO_PMA_STAT2_LBABLE
 0x0001

	)

156 
	#MDIO_PMA_STAT2_10GBEW
 0x0002

	)

157 
	#MDIO_PMA_STAT2_10GBLW
 0x0004

	)

158 
	#MDIO_PMA_STAT2_10GBSW
 0x0008

	)

159 
	#MDIO_PMA_STAT2_10GBLX4
 0x0010

	)

160 
	#MDIO_PMA_STAT2_10GBER
 0x0020

	)

161 
	#MDIO_PMA_STAT2_10GBLR
 0x0040

	)

162 
	#MDIO_PMA_STAT2_10GBSR
 0x0080

	)

163 
	#MDIO_PMD_STAT2_TXDISAB
 0x0100

	)

164 
	#MDIO_PMA_STAT2_EXTABLE
 0x0200

	)

165 
	#MDIO_PMA_STAT2_RXFLTABLE
 0x1000

	)

166 
	#MDIO_PMA_STAT2_TXFLTABLE
 0x2000

	)

167 
	#MDIO_PCS_STAT2_10GBR
 0x0001

	)

168 
	#MDIO_PCS_STAT2_10GBX
 0x0002

	)

169 
	#MDIO_PCS_STAT2_10GBW
 0x0004

	)

170 
	#MDIO_PCS_STAT2_RXFLTABLE
 0x1000

	)

171 
	#MDIO_PCS_STAT2_TXFLTABLE
 0x2000

	)

174 
	#MDIO_PMD_TXDIS_GLOBAL
 0x0001

	)

175 
	#MDIO_PMD_TXDIS_0
 0x0002

	)

176 
	#MDIO_PMD_TXDIS_1
 0x0004

	)

177 
	#MDIO_PMD_TXDIS_2
 0x0008

	)

178 
	#MDIO_PMD_TXDIS_3
 0x0010

	)

181 
	#MDIO_PMD_RXDET_GLOBAL
 0x0001

	)

182 
	#MDIO_PMD_RXDET_0
 0x0002

	)

183 
	#MDIO_PMD_RXDET_1
 0x0004

	)

184 
	#MDIO_PMD_RXDET_2
 0x0008

	)

185 
	#MDIO_PMD_RXDET_3
 0x0010

	)

188 
	#MDIO_PMA_EXTABLE_10GCX4
 0x0001

	)

189 
	#MDIO_PMA_EXTABLE_10GBLRM
 0x0002

	)

190 
	#MDIO_PMA_EXTABLE_10GBT
 0x0004

	)

191 
	#MDIO_PMA_EXTABLE_10GBKX4
 0x0008

	)

192 
	#MDIO_PMA_EXTABLE_10GBKR
 0x0010

	)

193 
	#MDIO_PMA_EXTABLE_1000BT
 0x0020

	)

194 
	#MDIO_PMA_EXTABLE_1000BKX
 0x0040

	)

195 
	#MDIO_PMA_EXTABLE_100BTX
 0x0080

	)

196 
	#MDIO_PMA_EXTABLE_10BT
 0x0100

	)

199 
	#MDIO_PHYXS_LNSTAT_SYNC0
 0x0001

	)

200 
	#MDIO_PHYXS_LNSTAT_SYNC1
 0x0002

	)

201 
	#MDIO_PHYXS_LNSTAT_SYNC2
 0x0004

	)

202 
	#MDIO_PHYXS_LNSTAT_SYNC3
 0x0008

	)

203 
	#MDIO_PHYXS_LNSTAT_ALIGN
 0x1000

	)

206 
	#MDIO_PMA_10GBT_SWAPPOL_ABNX
 0x0001

	)

207 
	#MDIO_PMA_10GBT_SWAPPOL_CDNX
 0x0002

	)

208 
	#MDIO_PMA_10GBT_SWAPPOL_AREV
 0x0100

	)

209 
	#MDIO_PMA_10GBT_SWAPPOL_BREV
 0x0200

	)

210 
	#MDIO_PMA_10GBT_SWAPPOL_CREV
 0x0400

	)

211 
	#MDIO_PMA_10GBT_SWAPPOL_DREV
 0x0800

	)

214 
	#MDIO_PMA_10GBT_TXPWR_SHORT
 0x0001

	)

218 
	#MDIO_PMA_10GBT_SNR_BIAS
 0x8000

	)

219 
	#MDIO_PMA_10GBT_SNR_MAX
 127

	)

222 
	#MDIO_PMA_10GBR_FECABLE_ABLE
 0x0001

	)

223 
	#MDIO_PMA_10GBR_FECABLE_ERRABLE
 0x0002

	)

226 
	#MDIO_PCS_10GBRT_STAT1_BLKLK
 0x0001

	)

229 
	#MDIO_PCS_10GBRT_STAT2_ERR
 0x00ff

	)

230 
	#MDIO_PCS_10GBRT_STAT2_BER
 0x3f00

	)

233 
	#MDIO_AN_10GBT_CTRL_ADV10G
 0x1000

	)

236 
	#MDIO_AN_10GBT_STAT_LPTRR
 0x0200

	)

237 
	#MDIO_AN_10GBT_STAT_LPLTABLE
 0x0400

	)

238 
	#MDIO_AN_10GBT_STAT_LP10G
 0x0800

	)

239 
	#MDIO_AN_10GBT_STAT_REMOK
 0x1000

	)

240 
	#MDIO_AN_10GBT_STAT_LOCOK
 0x2000

	)

241 
	#MDIO_AN_10GBT_STAT_MS
 0x4000

	)

242 
	#MDIO_AN_10GBT_STAT_MSFLT
 0x8000

	)

250 
	#MDIO_AN_EEE_ADV_100TX
 0x0002

	)

251 
	#MDIO_AN_EEE_ADV_1000T
 0x0004

	)

257 
	#MDIO_EEE_100TX
 
MDIO_AN_EEE_ADV_100TX


	)

258 
	#MDIO_EEE_1000T
 
MDIO_AN_EEE_ADV_1000T


	)

259 
	#MDIO_EEE_10GT
 0x0008

	)

260 
	#MDIO_EEE_1000KX
 0x0010

	)

261 
	#MDIO_EEE_10GKX4
 0x0020

	)

262 
	#MDIO_EEE_10GKR
 0x0040

	)

265 
	#MDIO_PMA_LASI_RX_PHYXSLFLT
 0x0001

	)

266 
	#MDIO_PMA_LASI_RX_PCSLFLT
 0x0008

	)

267 
	#MDIO_PMA_LASI_RX_PMALFLT
 0x0010

	)

268 
	#MDIO_PMA_LASI_RX_OPTICPOWERFLT
 0x0020

	)

269 
	#MDIO_PMA_LASI_RX_WISLFLT
 0x0200

	)

272 
	#MDIO_PMA_LASI_TX_PHYXSLFLT
 0x0001

	)

273 
	#MDIO_PMA_LASI_TX_PCSLFLT
 0x0008

	)

274 
	#MDIO_PMA_LASI_TX_PMALFLT
 0x0010

	)

275 
	#MDIO_PMA_LASI_TX_LASERPOWERFLT
 0x0080

	)

276 
	#MDIO_PMA_LASI_TX_LASERTEMPFLT
 0x0100

	)

277 
	#MDIO_PMA_LASI_TX_LASERBICURRFLT
 0x0200

	)

280 
	#MDIO_PMA_LASI_LSALARM
 0x0001

	)

281 
	#MDIO_PMA_LASI_TXALARM
 0x0002

	)

282 
	#MDIO_PMA_LASI_RXALARM
 0x0004

	)

286 
	#MDIO_PHY_ID_C45
 0x8000

	)

287 
	#MDIO_PHY_ID_PRTAD
 0x03e0

	)

288 
	#MDIO_PHY_ID_DEVAD
 0x001f

	)

289 
	#MDIO_PHY_ID_C45_MASK
 \

290 (
MDIO_PHY_ID_C45
 | 
MDIO_PHY_ID_PRTAD
 | 
MDIO_PHY_ID_DEVAD
)

	)

292 
__ölöe__
 
__u16
 
	$mdio_phy_id_c45
(
¥èd
, 
devad
)

294  
MDIO_PHY_ID_C45
 | (
¥èd
 << 5Ë| 
devad
;

295 
	}
}

	@/usr/include/linux/mii.h

8 #i‚de‡
__LINUX_MII_H__


9 
	#__LINUX_MII_H__


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/ëhtoﬁ.h
>

15 
	#MII_BMCR
 0x00

	)

16 
	#MII_BMSR
 0x01

	)

17 
	#MII_PHYSID1
 0x02

	)

18 
	#MII_PHYSID2
 0x03

	)

19 
	#MII_ADVERTISE
 0x04

	)

20 
	#MII_LPA
 0x05

	)

21 
	#MII_EXPANSION
 0x06

	)

22 
	#MII_CTRL1000
 0x09

	)

23 
	#MII_STAT1000
 0x0®

	)

24 
	#MII_MMD_CTRL
 0x0d

	)

25 
	#MII_MMD_DATA
 0x0ê

	)

26 
	#MII_ESTATUS
 0x0‡

	)

27 
	#MII_DCOUNTER
 0x12

	)

28 
	#MII_FCSCOUNTER
 0x13

	)

29 
	#MII_NWAYTEST
 0x14

	)

30 
	#MII_RERRCOUNTER
 0x15

	)

31 
	#MII_SREVISION
 0x16

	)

32 
	#MII_RESV1
 0x17

	)

33 
	#MII_LBRERROR
 0x18

	)

34 
	#MII_PHYADDR
 0x19

	)

35 
	#MII_RESV2
 0x1®

	)

36 
	#MII_TPISTATUS
 0x1b

	)

37 
	#MII_NCONFIG
 0x1¯

	)

40 
	#BMCR_RESV
 0x003‡

	)

41 
	#BMCR_SPEED1000
 0x0040

	)

42 
	#BMCR_CTST
 0x0080

	)

43 
	#BMCR_FULLDPLX
 0x0100

	)

44 
	#BMCR_ANRESTART
 0x0200

	)

45 
	#BMCR_ISOLATE
 0x0400

	)

46 
	#BMCR_PDOWN
 0x0800

	)

47 
	#BMCR_ANENABLE
 0x1000

	)

48 
	#BMCR_SPEED100
 0x2000

	)

49 
	#BMCR_LOOPBACK
 0x4000

	)

50 
	#BMCR_RESET
 0x8000

	)

51 
	#BMCR_SPEED10
 0x0000

	)

54 
	#BMSR_ERCAP
 0x0001

	)

55 
	#BMSR_JCD
 0x0002

	)

56 
	#BMSR_LSTATUS
 0x0004

	)

57 
	#BMSR_ANEGCAPABLE
 0x0008

	)

58 
	#BMSR_RFAULT
 0x0010

	)

59 
	#BMSR_ANEGCOMPLETE
 0x0020

	)

60 
	#BMSR_RESV
 0x00c0

	)

61 
	#BMSR_ESTATEN
 0x0100

	)

62 
	#BMSR_100HALF2
 0x0200

	)

63 
	#BMSR_100FULL2
 0x0400

	)

64 
	#BMSR_10HALF
 0x0800

	)

65 
	#BMSR_10FULL
 0x1000

	)

66 
	#BMSR_100HALF
 0x2000

	)

67 
	#BMSR_100FULL
 0x4000

	)

68 
	#BMSR_100BASE4
 0x8000

	)

71 
	#ADVERTISE_SLCT
 0x001‡

	)

72 
	#ADVERTISE_CSMA
 0x0001

	)

73 
	#ADVERTISE_10HALF
 0x0020

	)

74 
	#ADVERTISE_1000XFULL
 0x0020

	)

75 
	#ADVERTISE_10FULL
 0x0040

	)

76 
	#ADVERTISE_1000XHALF
 0x0040

	)

77 
	#ADVERTISE_100HALF
 0x0080

	)

78 
	#ADVERTISE_1000XPAUSE
 0x0080

	)

79 
	#ADVERTISE_100FULL
 0x0100

	)

80 
	#ADVERTISE_1000XPSE_ASYM
 0x0100

	)

81 
	#ADVERTISE_100BASE4
 0x0200

	)

82 
	#ADVERTISE_PAUSE_CAP
 0x0400

	)

83 
	#ADVERTISE_PAUSE_ASYM
 0x0800

	)

84 
	#ADVERTISE_RESV
 0x1000

	)

85 
	#ADVERTISE_RFAULT
 0x2000

	)

86 
	#ADVERTISE_LPACK
 0x4000

	)

87 
	#ADVERTISE_NPAGE
 0x8000

	)

89 
	#ADVERTISE_FULL
 (
ADVERTISE_100FULL
 | 
ADVERTISE_10FULL
 | \

90 
ADVERTISE_CSMA
)

	)

91 
	#ADVERTISE_ALL
 (
ADVERTISE_10HALF
 | 
ADVERTISE_10FULL
 | \

92 
ADVERTISE_100HALF
 | 
ADVERTISE_100FULL
)

	)

95 
	#LPA_SLCT
 0x001‡

	)

96 
	#LPA_10HALF
 0x0020

	)

97 
	#LPA_1000XFULL
 0x0020

	)

98 
	#LPA_10FULL
 0x0040

	)

99 
	#LPA_1000XHALF
 0x0040

	)

100 
	#LPA_100HALF
 0x0080

	)

101 
	#LPA_1000XPAUSE
 0x0080

	)

102 
	#LPA_100FULL
 0x0100

	)

103 
	#LPA_1000XPAUSE_ASYM
 0x0100

	)

104 
	#LPA_100BASE4
 0x0200

	)

105 
	#LPA_PAUSE_CAP
 0x0400

	)

106 
	#LPA_PAUSE_ASYM
 0x0800

	)

107 
	#LPA_RESV
 0x1000

	)

108 
	#LPA_RFAULT
 0x2000

	)

109 
	#LPA_LPACK
 0x4000

	)

110 
	#LPA_NPAGE
 0x8000

	)

112 
	#LPA_DUPLEX
 (
LPA_10FULL
 | 
LPA_100FULL
)

	)

113 
	#LPA_100
 (
LPA_100FULL
 | 
LPA_100HALF
 | 
LPA_100BASE4
)

	)

116 
	#EXPANSION_NWAY
 0x0001

	)

117 
	#EXPANSION_LCWP
 0x0002

	)

118 
	#EXPANSION_ENABLENPAGE
 0x0004

	)

119 
	#EXPANSION_NPCAPABLE
 0x0008

	)

120 
	#EXPANSION_MFAULTS
 0x0010

	)

121 
	#EXPANSION_RESV
 0xf„0

	)

123 
	#ESTATUS_1000_TFULL
 0x2000

	)

124 
	#ESTATUS_1000_THALF
 0x1000

	)

127 
	#NWAYTEST_RESV1
 0x00f‡

	)

128 
	#NWAYTEST_LOOPBACK
 0x0100

	)

129 
	#NWAYTEST_RESV2
 0x„00

	)

132 
	#ADVERTISE_1000FULL
 0x0200

	)

133 
	#ADVERTISE_1000HALF
 0x0100

	)

134 
	#CTL1000_AS_MASTER
 0x0800

	)

135 
	#CTL1000_ENABLE_MASTER
 0x1000

	)

138 
	#LPA_1000LOCALRXOK
 0x2000

	)

139 
	#LPA_1000REMRXOK
 0x1000

	)

140 
	#LPA_1000FULL
 0x0800

	)

141 
	#LPA_1000HALF
 0x0400

	)

144 
	#FLOW_CTRL_TX
 0x01

	)

145 
	#FLOW_CTRL_RX
 0x02

	)

148 
	#MII_MMD_CTRL_DEVAD_MASK
 0x1‡

	)

149 
	#MII_MMD_CTRL_ADDR
 0x0000

	)

150 
	#MII_MMD_CTRL_NOINCR
 0x4000

	)

151 
	#MII_MMD_CTRL_INCR_RDWT
 0x8000

	)

152 
	#MII_MMD_CTRL_INCR_ON_WT
 0xC000

	)

155 
	smii_io˘l_d©a
 {

156 
__u16
 
	mphy_id
;

157 
__u16
 
	mªg_num
;

158 
__u16
 
	mvÆ_ö
;

159 
__u16
 
	mvÆ_out
;

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

7 
	~<löux/ö.h
>

8 
	~<löux/ö6.h
>

11 
	#NF_DROP
 0

	)

12 
	#NF_ACCEPT
 1

	)

13 
	#NF_STOLEN
 2

	)

14 
	#NF_QUEUE
 3

	)

15 
	#NF_REPEAT
 4

	)

16 
	#NF_STOP
 5

	)

17 
	#NF_MAX_VERDICT
 
NF_STOP


	)

22 
	#NF_VERDICT_MASK
 0x000000ff

	)

25 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

28 
	#NF_VERDICT_QMASK
 0xffff0000

	)

29 
	#NF_VERDICT_QBITS
 16

	)

31 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

33 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

38 
	#NFC_UNKNOWN
 0x4000

	)

39 
	#NFC_ALTERED
 0x8000

	)

42 
	#NF_VERDICT_BITS
 16

	)

44 
	enf_öë_hooks
 {

45 
	mNF_INET_PRE_ROUTING
,

46 
	mNF_INET_LOCAL_IN
,

47 
	mNF_INET_FORWARD
,

48 
	mNF_INET_LOCAL_OUT
,

49 
	mNF_INET_POST_ROUTING
,

50 
	mNF_INET_NUMHOOKS


53 
	enf_dev_hooks
 {

54 
	mNF_NETDEV_INGRESS
,

55 
	mNF_NETDEV_NUMHOOKS


59 
	mNFPROTO_UNSPEC
 = 0,

60 
	mNFPROTO_INET
 = 1,

61 
	mNFPROTO_IPV4
 = 2,

62 
	mNFPROTO_ARP
 = 3,

63 
	mNFPROTO_NETDEV
 = 5,

64 
	mNFPROTO_BRIDGE
 = 7,

65 
	mNFPROTO_IPV6
 = 10,

66 
	mNFPROTO_DECNET
 = 12,

67 
	mNFPROTO_NUMPROTO
,

70 
	unf_öë_addr
 {

71 
__u32
 
	mÆl
[4];

72 
__be32
 
	mù
;

73 
__be32
 
	mù6
[4];

74 
ö_addr
 
	mö
;

75 
ö6_addr
 
	mö6
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_STD_HEADER_SIZEOF
 64

	)

30 
	#PCI_VENDOR_ID
 0x00

	)

31 
	#PCI_DEVICE_ID
 0x02

	)

32 
	#PCI_COMMAND
 0x04

	)

33 
	#PCI_COMMAND_IO
 0x1

	)

34 
	#PCI_COMMAND_MEMORY
 0x2

	)

35 
	#PCI_COMMAND_MASTER
 0x4

	)

36 
	#PCI_COMMAND_SPECIAL
 0x8

	)

37 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

38 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

39 
	#PCI_COMMAND_PARITY
 0x40

	)

40 
	#PCI_COMMAND_WAIT
 0x80

	)

41 
	#PCI_COMMAND_SERR
 0x100

	)

42 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

43 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

45 
	#PCI_STATUS
 0x06

	)

46 
	#PCI_STATUS_INTERRUPT
 0x08

	)

47 
	#PCI_STATUS_CAP_LIST
 0x10

	)

48 
	#PCI_STATUS_66MHZ
 0x20

	)

49 
	#PCI_STATUS_UDF
 0x40

	)

50 
	#PCI_STATUS_FAST_BACK
 0x80

	)

51 
	#PCI_STATUS_PARITY
 0x100

	)

52 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

53 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

54 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

55 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

56 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

57 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

58 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

59 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

60 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

62 
	#PCI_CLASS_REVISION
 0x08

	)

63 
	#PCI_REVISION_ID
 0x08

	)

64 
	#PCI_CLASS_PROG
 0x09

	)

65 
	#PCI_CLASS_DEVICE
 0x0®

	)

67 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

68 
	#PCI_LATENCY_TIMER
 0x0d

	)

69 
	#PCI_HEADER_TYPE
 0x0ê

	)

70 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

71 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

72 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

74 
	#PCI_BIST
 0x0‡

	)

75 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

76 
	#PCI_BIST_START
 0x40

	)

77 
	#PCI_BIST_CAPABLE
 0x80

	)

85 
	#PCI_BASE_ADDRESS_0
 0x10

	)

86 
	#PCI_BASE_ADDRESS_1
 0x14

	)

87 
	#PCI_BASE_ADDRESS_2
 0x18

	)

88 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

89 
	#PCI_BASE_ADDRESS_4
 0x20

	)

90 
	#PCI_BASE_ADDRESS_5
 0x24

	)

91 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

93 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

97 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

98 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

99 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

100 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

104 
	#PCI_CARDBUS_CIS
 0x28

	)

105 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

106 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

107 
	#PCI_ROM_ADDRESS
 0x30

	)

108 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

109 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffU)

	)

111 
	#PCI_CAPABILITY_LIST
 0x34

	)

114 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

115 
	#PCI_INTERRUPT_PIN
 0x3d

	)

116 
	#PCI_MIN_GNT
 0x3ê

	)

117 
	#PCI_MAX_LAT
 0x3‡

	)

120 
	#PCI_PRIMARY_BUS
 0x18

	)

121 
	#PCI_SECONDARY_BUS
 0x19

	)

122 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

123 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

124 
	#PCI_IO_BASE
 0x1¯

	)

125 
	#PCI_IO_LIMIT
 0x1d

	)

126 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

127 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

128 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

129 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

130 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

131 
	#PCI_SEC_STATUS
 0x1ê

	)

132 
	#PCI_MEMORY_BASE
 0x20

	)

133 
	#PCI_MEMORY_LIMIT
 0x22

	)

134 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

135 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

136 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

137 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

138 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

139 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

140 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

141 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

142 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

143 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

144 
	#PCI_IO_BASE_UPPER16
 0x30

	)

145 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

148 
	#PCI_ROM_ADDRESS1
 0x38

	)

150 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

151 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

152 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

153 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

154 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

155 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

156 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

157 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

160 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

162 
	#PCI_CB_SEC_STATUS
 0x16

	)

163 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

164 
	#PCI_CB_CARD_BUS
 0x19

	)

165 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

166 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

167 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

168 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

169 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

170 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

171 
	#PCI_CB_IO_BASE_0
 0x2c

	)

172 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

173 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

174 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

175 
	#PCI_CB_IO_BASE_1
 0x34

	)

176 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

177 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

178 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

179 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

181 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

182 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

183 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

184 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

185 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

186 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

187 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

188 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

189 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

190 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

191 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

192 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

193 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

194 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

199 
	#PCI_CAP_LIST_ID
 0

	)

200 
	#PCI_CAP_ID_PM
 0x01

	)

201 
	#PCI_CAP_ID_AGP
 0x02

	)

202 
	#PCI_CAP_ID_VPD
 0x03

	)

203 
	#PCI_CAP_ID_SLOTID
 0x04

	)

204 
	#PCI_CAP_ID_MSI
 0x05

	)

205 
	#PCI_CAP_ID_CHSWP
 0x06

	)

206 
	#PCI_CAP_ID_PCIX
 0x07

	)

207 
	#PCI_CAP_ID_HT
 0x08

	)

208 
	#PCI_CAP_ID_VNDR
 0x09

	)

209 
	#PCI_CAP_ID_DBG
 0x0A

	)

210 
	#PCI_CAP_ID_CCRC
 0x0B

	)

211 
	#PCI_CAP_ID_SHPC
 0x0C

	)

212 
	#PCI_CAP_ID_SSVID
 0x0D

	)

213 
	#PCI_CAP_ID_AGP3
 0x0E

	)

214 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

215 
	#PCI_CAP_ID_EXP
 0x10

	)

216 
	#PCI_CAP_ID_MSIX
 0x11

	)

217 
	#PCI_CAP_ID_SATA
 0x12

	)

218 
	#PCI_CAP_ID_AF
 0x13

	)

219 
	#PCI_CAP_ID_EA
 0x14

	)

220 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_EA


	)

221 
	#PCI_CAP_LIST_NEXT
 1

	)

222 
	#PCI_CAP_FLAGS
 2

	)

223 
	#PCI_CAP_SIZEOF
 4

	)

227 
	#PCI_PM_PMC
 2

	)

228 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

229 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

230 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

231 
	#PCI_PM_CAP_DSI
 0x0020

	)

232 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

233 
	#PCI_PM_CAP_D1
 0x0200

	)

234 
	#PCI_PM_CAP_D2
 0x0400

	)

235 
	#PCI_PM_CAP_PME
 0x0800

	)

236 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

237 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

238 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

239 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

240 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

241 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

242 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

243 
	#PCI_PM_CTRL
 4

	)

244 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

245 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

246 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

247 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

248 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

249 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

250 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

251 
	#PCI_PM_PPB_B2_B3
 0x40

	)

252 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

253 
	#PCI_PM_DATA_REGISTER
 7

	)

254 
	#PCI_PM_SIZEOF
 8

	)

258 
	#PCI_AGP_VERSION
 2

	)

259 
	#PCI_AGP_RFU
 3

	)

260 
	#PCI_AGP_STATUS
 4

	)

261 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

262 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

263 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

264 
	#PCI_AGP_STATUS_FW
 0x0010

	)

265 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

266 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

267 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

268 
	#PCI_AGP_COMMAND
 8

	)

269 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

270 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

271 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

272 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

273 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

274 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

275 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

276 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

277 
	#PCI_AGP_SIZEOF
 12

	)

281 
	#PCI_VPD_ADDR
 2

	)

282 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

283 
	#PCI_VPD_ADDR_F
 0x8000

	)

284 
	#PCI_VPD_DATA
 4

	)

285 
	#PCI_CAP_VPD_SIZEOF
 8

	)

289 
	#PCI_SID_ESR
 2

	)

290 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

291 
	#PCI_SID_ESR_FIC
 0x20

	)

292 
	#PCI_SID_CHASSIS_NR
 3

	)

296 
	#PCI_MSI_FLAGS
 2

	)

297 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

298 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

299 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

300 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

301 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

302 
	#PCI_MSI_RFU
 3

	)

303 
	#PCI_MSI_ADDRESS_LO
 4

	)

304 
	#PCI_MSI_ADDRESS_HI
 8

	)

305 
	#PCI_MSI_DATA_32
 8

	)

306 
	#PCI_MSI_MASK_32
 12

	)

307 
	#PCI_MSI_PENDING_32
 16

	)

308 
	#PCI_MSI_DATA_64
 12

	)

309 
	#PCI_MSI_MASK_64
 16

	)

310 
	#PCI_MSI_PENDING_64
 20

	)

313 
	#PCI_MSIX_FLAGS
 2

	)

314 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

315 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

316 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

317 
	#PCI_MSIX_TABLE
 4

	)

318 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

319 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

320 
	#PCI_MSIX_PBA
 8

	)

321 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

322 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

323 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

324 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

327 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

328 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

329 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

330 
	#PCI_MSIX_ENTRY_DATA
 8

	)

331 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

332 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

336 
	#PCI_CHSWP_CSR
 2

	)

337 
	#PCI_CHSWP_DHA
 0x01

	)

338 
	#PCI_CHSWP_EIM
 0x02

	)

339 
	#PCI_CHSWP_PIE
 0x04

	)

340 
	#PCI_CHSWP_LOO
 0x08

	)

341 
	#PCI_CHSWP_PI
 0x30

	)

342 
	#PCI_CHSWP_EXT
 0x40

	)

343 
	#PCI_CHSWP_INS
 0x80

	)

347 
	#PCI_AF_LENGTH
 2

	)

348 
	#PCI_AF_CAP
 3

	)

349 
	#PCI_AF_CAP_TP
 0x01

	)

350 
	#PCI_AF_CAP_FLR
 0x02

	)

351 
	#PCI_AF_CTRL
 4

	)

352 
	#PCI_AF_CTRL_FLR
 0x01

	)

353 
	#PCI_AF_STATUS
 5

	)

354 
	#PCI_AF_STATUS_TP
 0x01

	)

355 
	#PCI_CAP_AF_SIZEOF
 6

	)

359 
	#PCI_EA_NUM_ENT
 2

	)

360 
	#PCI_EA_NUM_ENT_MASK
 0x3‡

	)

361 
	#PCI_EA_FIRST_ENT
 4

	)

362 
	#PCI_EA_FIRST_ENT_BRIDGE
 8

	)

363 
	#PCI_EA_ES
 0x00000007

	)

364 
	#PCI_EA_BEI
 0x000000f0

	)

366 
	#PCI_EA_BEI_BAR0
 0

	)

367 
	#PCI_EA_BEI_BAR5
 5

	)

368 
	#PCI_EA_BEI_BRIDGE
 6

	)

369 
	#PCI_EA_BEI_ENI
 7

	)

370 
	#PCI_EA_BEI_ROM
 8

	)

372 
	#PCI_EA_BEI_VF_BAR0
 9

	)

373 
	#PCI_EA_BEI_VF_BAR5
 14

	)

374 
	#PCI_EA_BEI_RESERVED
 15

	)

375 
	#PCI_EA_PP
 0x0000ff00

	)

376 
	#PCI_EA_SP
 0x00ff0000

	)

377 
	#PCI_EA_P_MEM
 0x00

	)

378 
	#PCI_EA_P_MEM_PREFETCH
 0x01

	)

379 
	#PCI_EA_P_IO
 0x02

	)

380 
	#PCI_EA_P_VF_MEM_PREFETCH
 0x03

	)

381 
	#PCI_EA_P_VF_MEM
 0x04

	)

382 
	#PCI_EA_P_BRIDGE_MEM
 0x05

	)

383 
	#PCI_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

384 
	#PCI_EA_P_BRIDGE_IO
 0x07

	)

386 
	#PCI_EA_P_MEM_RESERVED
 0xfd

	)

387 
	#PCI_EA_P_IO_RESERVED
 0x„

	)

388 
	#PCI_EA_P_UNAVAILABLE
 0xf‡

	)

389 
	#PCI_EA_WRITABLE
 0x40000000

	)

390 
	#PCI_EA_ENABLE
 0x80000000

	)

391 
	#PCI_EA_BASE
 4

	)

392 
	#PCI_EA_MAX_OFFSET
 8

	)

394 
	#PCI_EA_IS_64
 0x00000002

	)

395 
	#PCI_EA_FIELD_MASK
 0xfffffff¯

	)

399 
	#PCI_X_CMD
 2

	)

400 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

401 
	#PCI_X_CMD_ERO
 0x0002

	)

402 
	#PCI_X_CMD_READ_512
 0x0000

	)

403 
	#PCI_X_CMD_READ_1K
 0x0004

	)

404 
	#PCI_X_CMD_READ_2K
 0x0008

	)

405 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

406 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

408 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

409 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

410 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

411 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

412 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

413 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

414 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

415 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

416 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

417 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

418 
	#PCI_X_STATUS
 4

	)

419 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

420 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

421 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

422 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

423 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

424 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

425 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

426 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

427 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

428 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

429 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

430 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

431 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

432 
	#PCI_X_ECC_CSR
 8

	)

433 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

434 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

435 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

439 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

440 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

441 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

442 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

443 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

444 
	#PCI_X_SSTATUS_V1
 0x1000

	)

445 
	#PCI_X_SSTATUS_V2
 0x2000

	)

446 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

447 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

448 
	#PCI_X_BRIDGE_STATUS
 4

	)

452 
	#PCI_SSVID_VENDOR_ID
 4

	)

453 
	#PCI_SSVID_DEVICE_ID
 6

	)

457 
	#PCI_EXP_FLAGS
 2

	)

458 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

459 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

460 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

461 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

462 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

463 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

464 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

465 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

466 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

467 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

468 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

469 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

470 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

471 
	#PCI_EXP_DEVCAP
 4

	)

472 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

473 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

474 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

475 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

476 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

477 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

478 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

479 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

480 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

481 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

482 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

483 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

484 
	#PCI_EXP_DEVCTL
 8

	)

485 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

486 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

487 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

488 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

489 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

490 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

491 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

492 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

493 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

494 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

495 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

496 
	#PCI_EXP_DEVCTL_READRQ_128B
 0x0000

	)

497 
	#PCI_EXP_DEVCTL_READRQ_256B
 0x1000

	)

498 
	#PCI_EXP_DEVCTL_READRQ_512B
 0x2000

	)

499 
	#PCI_EXP_DEVCTL_READRQ_1024B
 0x3000

	)

500 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

501 
	#PCI_EXP_DEVSTA
 10

	)

502 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

503 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

504 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

505 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

506 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

507 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

508 
	#PCI_EXP_LNKCAP
 12

	)

509 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

510 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

511 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

512 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

513 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

514 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

515 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

516 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

517 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

518 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

519 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

520 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

521 
	#PCI_EXP_LNKCTL
 16

	)

522 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

523 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

524 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

525 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

526 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

527 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

528 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

529 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

530 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

531 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

532 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

533 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

534 
	#PCI_EXP_LNKSTA
 18

	)

535 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

536 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

537 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

538 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

539 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

540 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

541 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

542 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

543 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

544 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

545 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

546 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

547 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

548 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

549 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

550 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

551 
	#PCI_EXP_SLTCAP
 20

	)

552 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

553 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

554 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

555 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

556 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

557 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

558 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

559 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

560 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

561 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

562 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

563 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

564 
	#PCI_EXP_SLTCTL
 24

	)

565 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

566 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

567 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

568 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

569 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

570 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

571 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

572 
	#PCI_EXP_SLTCTL_ATTN_IND_ON
 0x0040

	)

573 
	#PCI_EXP_SLTCTL_ATTN_IND_BLINK
 0x0080

	)

574 
	#PCI_EXP_SLTCTL_ATTN_IND_OFF
 0x00c0

	)

575 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

576 
	#PCI_EXP_SLTCTL_PWR_IND_ON
 0x0100

	)

577 
	#PCI_EXP_SLTCTL_PWR_IND_BLINK
 0x0200

	)

578 
	#PCI_EXP_SLTCTL_PWR_IND_OFF
 0x0300

	)

579 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

580 
	#PCI_EXP_SLTCTL_PWR_ON
 0x0000

	)

581 
	#PCI_EXP_SLTCTL_PWR_OFF
 0x0400

	)

582 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

583 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

584 
	#PCI_EXP_SLTSTA
 26

	)

585 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

586 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

587 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

588 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

589 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

590 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

591 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

592 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

593 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

594 
	#PCI_EXP_RTCTL
 28

	)

595 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

596 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

597 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

598 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

599 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

600 
	#PCI_EXP_RTCAP
 30

	)

601 
	#PCI_EXP_RTCAP_CRSVIS
 0x0001

	)

602 
	#PCI_EXP_RTSTA
 32

	)

603 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

604 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

613 
	#PCI_EXP_DEVCAP2
 36

	)

614 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

615 
	#PCI_EXP_DEVCAP2_ATOMIC_ROUTE
 0x00000040

	)

616 
	#PCI_EXP_DEVCAP2_ATOMIC_COMP64
 0x00000100

	)

617 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

618 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

619 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

620 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

621 
	#PCI_EXP_DEVCTL2
 40

	)

622 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

623 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

624 
	#PCI_EXP_DEVCTL2_ATOMIC_REQ
 0x0040

	)

625 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

626 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

627 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

628 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

629 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

630 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

631 
	#PCI_EXP_DEVSTA2
 42

	)

632 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 44

	)

633 
	#PCI_EXP_LNKCAP2
 44

	)

634 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

635 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

636 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

637 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

638 
	#PCI_EXP_LNKCTL2
 48

	)

639 
	#PCI_EXP_LNKSTA2
 50

	)

640 
	#PCI_EXP_SLTCAP2
 52

	)

641 
	#PCI_EXP_SLTCTL2
 56

	)

642 
	#PCI_EXP_SLTSTA2
 58

	)

645 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

646 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

647 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

649 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

650 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

651 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

652 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

653 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

654 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

655 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

656 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

657 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

658 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

659 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

660 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

661 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

662 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

663 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

664 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

665 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

666 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

667 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

668 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

669 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

670 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

671 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

672 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

673 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

674 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

675 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

676 
	#PCI_EXT_CAP_ID_DPC
 0x1D

	)

677 
	#PCI_EXT_CAP_ID_PTM
 0x1F

	)

678 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PTM


	)

680 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

681 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

684 
	#PCI_ERR_UNCOR_STATUS
 4

	)

685 
	#PCI_ERR_UNC_UND
 0x00000001

	)

686 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

687 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

688 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

689 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

690 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

691 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

692 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

693 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

694 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

695 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

696 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

697 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

698 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

699 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

700 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

701 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

702 
	#PCI_ERR_UNCOR_MASK
 8

	)

704 
	#PCI_ERR_UNCOR_SEVER
 12

	)

706 
	#PCI_ERR_COR_STATUS
 16

	)

707 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

708 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

709 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

710 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

711 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

712 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

713 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

714 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

715 
	#PCI_ERR_COR_MASK
 20

	)

717 
	#PCI_ERR_CAP
 24

	)

718 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

719 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

720 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

721 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

722 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

723 
	#PCI_ERR_HEADER_LOG
 28

	)

724 
	#PCI_ERR_ROOT_COMMAND
 44

	)

726 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

728 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

730 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

731 
	#PCI_ERR_ROOT_STATUS
 48

	)

732 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

734 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

736 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

738 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

739 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

740 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

741 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

742 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

745 
	#PCI_VC_PORT_CAP1
 4

	)

746 
	#PCI_VC_CAP1_EVCC
 0x00000007

	)

747 
	#PCI_VC_CAP1_LPEVCC
 0x00000070

	)

748 
	#PCI_VC_CAP1_ARB_SIZE
 0x00000c00

	)

749 
	#PCI_VC_PORT_CAP2
 8

	)

750 
	#PCI_VC_CAP2_32_PHASE
 0x00000002

	)

751 
	#PCI_VC_CAP2_64_PHASE
 0x00000004

	)

752 
	#PCI_VC_CAP2_128_PHASE
 0x00000008

	)

753 
	#PCI_VC_CAP2_ARB_OFF
 0xff000000

	)

754 
	#PCI_VC_PORT_CTRL
 12

	)

755 
	#PCI_VC_PORT_CTRL_LOAD_TABLE
 0x00000001

	)

756 
	#PCI_VC_PORT_STATUS
 14

	)

757 
	#PCI_VC_PORT_STATUS_TABLE
 0x00000001

	)

758 
	#PCI_VC_RES_CAP
 16

	)

759 
	#PCI_VC_RES_CAP_32_PHASE
 0x00000002

	)

760 
	#PCI_VC_RES_CAP_64_PHASE
 0x00000004

	)

761 
	#PCI_VC_RES_CAP_128_PHASE
 0x00000008

	)

762 
	#PCI_VC_RES_CAP_128_PHASE_TB
 0x00000010

	)

763 
	#PCI_VC_RES_CAP_256_PHASE
 0x00000020

	)

764 
	#PCI_VC_RES_CAP_ARB_OFF
 0xff000000

	)

765 
	#PCI_VC_RES_CTRL
 20

	)

766 
	#PCI_VC_RES_CTRL_LOAD_TABLE
 0x00010000

	)

767 
	#PCI_VC_RES_CTRL_ARB_SELECT
 0x000e0000

	)

768 
	#PCI_VC_RES_CTRL_ID
 0x07000000

	)

769 
	#PCI_VC_RES_CTRL_ENABLE
 0x80000000

	)

770 
	#PCI_VC_RES_STATUS
 26

	)

771 
	#PCI_VC_RES_STATUS_TABLE
 0x00000001

	)

772 
	#PCI_VC_RES_STATUS_NEGO
 0x00000002

	)

773 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

774 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

777 
	#PCI_PWR_DSR
 4

	)

778 
	#PCI_PWR_DATA
 8

	)

779 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

780 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

781 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

782 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

783 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

784 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

785 
	#PCI_PWR_CAP
 12

	)

786 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

787 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

790 
	#PCI_VNDR_HEADER
 4

	)

791 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

792 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

793 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

803 
	#HT_3BIT_CAP_MASK
 0xE0

	)

804 
	#HT_CAPTYPE_SLAVE
 0x00

	)

805 
	#HT_CAPTYPE_HOST
 0x20

	)

807 
	#HT_5BIT_CAP_MASK
 0xF8

	)

808 
	#HT_CAPTYPE_IRQ
 0x80

	)

809 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

810 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

811 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

812 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

813 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

814 
	#HT_MSI_FLAGS
 0x02

	)

815 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

816 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

817 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

818 
	#HT_MSI_ADDR_LO
 0x04

	)

819 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

820 
	#HT_MSI_ADDR_HI
 0x08

	)

821 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

822 
	#HT_CAPTYPE_VCSET
 0xB8

	)

823 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

824 
	#HT_CAPTYPE_GEN3
 0xD0

	)

825 
	#HT_CAPTYPE_PM
 0xE0

	)

826 
	#HT_CAP_SIZEOF_LONG
 28

	)

827 
	#HT_CAP_SIZEOF_SHORT
 24

	)

830 
	#PCI_ARI_CAP
 0x04

	)

831 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

832 
	#PCI_ARI_CAP_ACS
 0x0002

	)

833 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

834 
	#PCI_ARI_CTRL
 0x06

	)

835 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

836 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

837 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

838 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

841 
	#PCI_ATS_CAP
 0x04

	)

842 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

843 
	#PCI_ATS_MAX_QDEP
 32

	)

844 
	#PCI_ATS_CTRL
 0x06

	)

845 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

846 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

847 
	#PCI_ATS_MIN_STU
 12

	)

848 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

851 
	#PCI_PRI_CTRL
 0x04

	)

852 
	#PCI_PRI_CTRL_ENABLE
 0x01

	)

853 
	#PCI_PRI_CTRL_RESET
 0x02

	)

854 
	#PCI_PRI_STATUS
 0x06

	)

855 
	#PCI_PRI_STATUS_RF
 0x001

	)

856 
	#PCI_PRI_STATUS_UPRGI
 0x002

	)

857 
	#PCI_PRI_STATUS_STOPPED
 0x100

	)

858 
	#PCI_PRI_MAX_REQ
 0x08

	)

859 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

860 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

863 
	#PCI_PASID_CAP
 0x04

	)

864 
	#PCI_PASID_CAP_EXEC
 0x02

	)

865 
	#PCI_PASID_CAP_PRIV
 0x04

	)

866 
	#PCI_PASID_CTRL
 0x06

	)

867 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

868 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

869 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

870 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

873 
	#PCI_SRIOV_CAP
 0x04

	)

874 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

875 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

876 
	#PCI_SRIOV_CTRL
 0x08

	)

877 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

878 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

879 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

880 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

881 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

882 
	#PCI_SRIOV_STATUS
 0x0®

	)

883 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

884 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

885 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

886 
	#PCI_SRIOV_NUM_VF
 0x10

	)

887 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

888 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

889 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

890 
	#PCI_SRIOV_VF_DID
 0x1®

	)

891 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

892 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

893 
	#PCI_SRIOV_BAR
 0x24

	)

894 
	#PCI_SRIOV_NUM_BARS
 6

	)

895 
	#PCI_SRIOV_VFM
 0x3¯

	)

896 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

897 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

898 
	#PCI_SRIOV_VFM_UA
 0x0

	)

899 
	#PCI_SRIOV_VFM_MI
 0x1

	)

900 
	#PCI_SRIOV_VFM_MO
 0x2

	)

901 
	#PCI_SRIOV_VFM_AV
 0x3

	)

902 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

904 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

905 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

906 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

907 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

908 
	#PCI_LTR_SCALE_SHIFT
 10

	)

909 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

912 
	#PCI_ACS_CAP
 0x04

	)

913 
	#PCI_ACS_SV
 0x01

	)

914 
	#PCI_ACS_TB
 0x02

	)

915 
	#PCI_ACS_RR
 0x04

	)

916 
	#PCI_ACS_CR
 0x08

	)

917 
	#PCI_ACS_UF
 0x10

	)

918 
	#PCI_ACS_EC
 0x20

	)

919 
	#PCI_ACS_DT
 0x40

	)

920 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

921 
	#PCI_ACS_CTRL
 0x06

	)

922 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

924 
	#PCI_VSEC_HDR
 4

	)

925 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

928 
	#PCI_SATA_REGS
 4

	)

929 
	#PCI_SATA_REGS_MASK
 0xF

	)

930 
	#PCI_SATA_REGS_INLINE
 0xF

	)

931 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

932 
	#PCI_SATA_SIZEOF_LONG
 16

	)

935 
	#PCI_REBAR_CTRL
 8

	)

936 
	#PCI_REBAR_CTRL_NBAR_MASK
 (7 << 5Ë

	)

937 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

940 
	#PCI_DPA_CAP
 4

	)

941 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

942 
	#PCI_DPA_BASE_SIZEOF
 16

	)

945 
	#PCI_TPH_CAP
 4

	)

946 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

947 
	#PCI_TPH_LOC_NONE
 0x000

	)

948 
	#PCI_TPH_LOC_CAP
 0x200

	)

949 
	#PCI_TPH_LOC_MSIX
 0x400

	)

950 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

951 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

952 
	#PCI_TPH_BASE_SIZEOF
 12

	)

955 
	#PCI_EXP_DPC_CAP
 4

	)

956 
	#PCI_EXP_DPC_CAP_RP_EXT
 0x20

	)

957 
	#PCI_EXP_DPC_CAP_POISONED_TLP
 0x40

	)

958 
	#PCI_EXP_DPC_CAP_SW_TRIGGER
 0x80

	)

959 
	#PCI_EXP_DPC_CAP_DL_ACTIVE
 0x1000

	)

961 
	#PCI_EXP_DPC_CTL
 6

	)

962 
	#PCI_EXP_DPC_CTL_EN_NONFATAL
 0x02

	)

963 
	#PCI_EXP_DPC_CTL_INT_EN
 0x08

	)

965 
	#PCI_EXP_DPC_STATUS
 8

	)

966 
	#PCI_EXP_DPC_STATUS_TRIGGER
 0x01

	)

967 
	#PCI_EXP_DPC_STATUS_INTERRUPT
 0x08

	)

969 
	#PCI_EXP_DPC_SOURCE_ID
 10

	)

972 
	#PCI_PTM_CAP
 0x04

	)

973 
	#PCI_PTM_CAP_REQ
 0x00000001

	)

974 
	#PCI_PTM_CAP_ROOT
 0x00000004

	)

975 
	#PCI_PTM_GRANULARITY_MASK
 0x0000FF00

	)

976 
	#PCI_PTM_CTRL
 0x08

	)

977 
	#PCI_PTM_CTRL_ENABLE
 0x00000001

	)

978 
	#PCI_PTM_CTRL_ROOT
 0x00000002

	)

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/io˘l.h
>

12 
	~<löux/úqƒ.h
>

17 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

20 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

23 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

29 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

32 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

35 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

38 
	#RNDRESEEDCRNG
 
	`_IO
–'R', 0x07 )

	)

40 
	sønd_poﬁ_öfo
 {

41 
	míå›y_cou¡
;

42 
	mbuf_size
;

43 
__u32
 
	mbuf
[0];

52 
	#GRND_NONBLOCK
 0x0001

	)

53 
	#GRND_RANDOM
 0x0002

	)

	@/usr/include/linux/reboot.h

1 #i‚de‡
_LINUX_REBOOT_H


2 
	#_LINUX_REBOOT_H


	)

8 
	#LINUX_REBOOT_MAGIC1
 0x„e1dód

	)

9 
	#LINUX_REBOOT_MAGIC2
 672274793

	)

10 
	#LINUX_REBOOT_MAGIC2A
 85072278

	)

11 
	#LINUX_REBOOT_MAGIC2B
 369367448

	)

12 
	#LINUX_REBOOT_MAGIC2C
 537993216

	)

28 
	#LINUX_REBOOT_CMD_RESTART
 0x01234567

	)

29 
	#LINUX_REBOOT_CMD_HALT
 0xCDEF0123

	)

30 
	#LINUX_REBOOT_CMD_CAD_ON
 0x89ABCDEF

	)

31 
	#LINUX_REBOOT_CMD_CAD_OFF
 0x00000000

	)

32 
	#LINUX_REBOOT_CMD_POWER_OFF
 0x4321FEDC

	)

33 
	#LINUX_REBOOT_CMD_RESTART2
 0xA1B2C3D4

	)

34 
	#LINUX_REBOOT_CMD_SW_SUSPEND
 0xD000FCE2

	)

35 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_NEWCGROUP
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

41 
	#SCHED_DEADLINE
 6

	)

44 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

49 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

	@/usr/include/linux/serial.h

10 #i‚de‡
_LINUX_SERIAL_H


11 
	#_LINUX_SERIAL_H


	)

13 
	~<löux/ty≥s.h
>

15 
	~<löux/ây_Êags.h
>

18 
	s£rül_°ru˘
 {

19 
	mty≥
;

20 
	mlöe
;

21 
	mp‹t
;

22 
	múq
;

23 
	mÊags
;

24 
	mxmô_fifo_size
;

25 
	mcu°om_divis‹
;

26 
	mbaud_ba£
;

27 
	m˛o£_dñay
;

28 
	mio_ty≥
;

29 
	mª£rved_ch¨
[1];

30 
	mhub6
;

31 
	m˛osög_waô
;

32 
	m˛osög_waô2
;

33 *
	miomem_ba£
;

34 
	miomem_ªg_shi·
;

35 
	mp‹t_high
;

36 
	miom≠_ba£
;

43 
	#ASYNC_CLOSING_WAIT_INF
 0

	)

44 
	#ASYNC_CLOSING_WAIT_NONE
 65535

	)

49 
	#PORT_UNKNOWN
 0

	)

50 
	#PORT_8250
 1

	)

51 
	#PORT_16450
 2

	)

52 
	#PORT_16550
 3

	)

53 
	#PORT_16550A
 4

	)

54 
	#PORT_CIRRUS
 5

	)

55 
	#PORT_16650
 6

	)

56 
	#PORT_16650V2
 7

	)

57 
	#PORT_16750
 8

	)

58 
	#PORT_STARTECH
 9

	)

59 
	#PORT_16C950
 10

	)

60 
	#PORT_16654
 11

	)

61 
	#PORT_16850
 12

	)

62 
	#PORT_RSA
 13

	)

63 
	#PORT_MAX
 13

	)

65 
	#SERIAL_IO_PORT
 0

	)

66 
	#SERIAL_IO_HUB6
 1

	)

67 
	#SERIAL_IO_MEM
 2

	)

68 
	#SERIAL_IO_MEM32
 3

	)

69 
	#SERIAL_IO_AU
 4

	)

70 
	#SERIAL_IO_TSI
 5

	)

71 
	#SERIAL_IO_MEM32BE
 6

	)

72 
	#SERIAL_IO_MEM16
 7

	)

74 
	#UART_CLEAR_FIFO
 0x01

	)

75 
	#UART_USE_FIFO
 0x02

	)

76 
	#UART_STARTECH
 0x04

	)

77 
	#UART_NATSEMI
 0x08

	)

83 
	s£rül_mu…ù‹t_°ru˘
 {

84 
	múq
;

85 
	mp‹t1
;

86 
	mmask1
, 
	mm©ch1
;

87 
	mp‹t2
;

88 
	mmask2
, 
	mm©ch2
;

89 
	mp‹t3
;

90 
	mmask3
, 
	mm©ch3
;

91 
	mp‹t4
;

92 
	mmask4
, 
	mm©ch4
;

93 
	mp‹t_m⁄ô‹
;

94 
	mª£rved
[32];

101 
	s£rül_icou¡î_°ru˘
 {

102 
	m˘s
, 
	md§
, 
	m∫g
, 
	mdcd
;

103 
	mrx
, 
	mtx
;

104 
	m‰ame
, 
	movîrun
, 
	m∑rôy
, 
	mbrk
;

105 
	mbuf_ovîrun
;

106 
	mª£rved
[9];

116 
	s£rül_rs485
 {

117 
__u32
 
	mÊags
;

118 
	#SER_RS485_ENABLED
 (1 << 0Ë

	)

119 
	#SER_RS485_RTS_ON_SEND
 (1 << 1Ë

	)

122 
	#SER_RS485_RTS_AFTER_SEND
 (1 << 2Ë

	)

124 
	#SER_RS485_RX_DURING_TX
 (1 << 4)

	)

125 
__u32
 
	mdñay_πs_bef‹e_£nd
;

126 
__u32
 
	mdñay_πs_a·î_£nd
;

127 
__u32
 
	m∑ddög
[5];

	@/usr/include/linux/serial_core.h

20 #i‚de‡
LINUX_SERIAL_CORE_H


21 
	#LINUX_SERIAL_CORE_H


	)

23 
	~<löux/£rül.h
>

28 
	#PORT_UNKNOWN
 0

	)

29 
	#PORT_8250
 1

	)

30 
	#PORT_16450
 2

	)

31 
	#PORT_16550
 3

	)

32 
	#PORT_16550A
 4

	)

33 
	#PORT_CIRRUS
 5

	)

34 
	#PORT_16650
 6

	)

35 
	#PORT_16650V2
 7

	)

36 
	#PORT_16750
 8

	)

37 
	#PORT_STARTECH
 9

	)

38 
	#PORT_16C950
 10

	)

39 
	#PORT_16654
 11

	)

40 
	#PORT_16850
 12

	)

41 
	#PORT_RSA
 13

	)

42 
	#PORT_NS16550A
 14

	)

43 
	#PORT_XSCALE
 15

	)

44 
	#PORT_RM9000
 16

	)

45 
	#PORT_OCTEON
 17

	)

46 
	#PORT_AR7
 18

	)

47 
	#PORT_U6_16550A
 19

	)

48 
	#PORT_TEGRA
 20

	)

49 
	#PORT_XR17D15X
 21

	)

50 
	#PORT_LPC3220
 22

	)

51 
	#PORT_8250_CIR
 23

	)

52 
	#PORT_XR17V35X
 24

	)

53 
	#PORT_BRCM_TRUMANAGE
 25

	)

54 
	#PORT_ALTR_16550_F32
 26

	)

55 
	#PORT_ALTR_16550_F64
 27

	)

56 
	#PORT_ALTR_16550_F128
 28

	)

57 
	#PORT_RT2880
 29

	)

58 
	#PORT_16550A_FSL64
 30

	)

59 
	#PORT_MAX_8250
 30

	)

67 
	#PORT_PXA
 31

	)

68 
	#PORT_AMBA
 32

	)

69 
	#PORT_CLPS711X
 33

	)

70 
	#PORT_SA1100
 34

	)

71 
	#PORT_UART00
 35

	)

72 
	#PORT_21285
 37

	)

75 
	#PORT_SUNZILOG
 38

	)

76 
	#PORT_SUNSAB
 39

	)

79 
	#PORT_DZ
 46

	)

80 
	#PORT_ZS
 47

	)

83 
	#PORT_MUX
 48

	)

86 
	#PORT_ATMEL
 49

	)

89 
	#PORT_MAC_ZILOG
 50

	)

90 
	#PORT_PMAC_ZILOG
 51

	)

93 
	#PORT_SCI
 52

	)

94 
	#PORT_SCIF
 53

	)

95 
	#PORT_IRDA
 54

	)

98 
	#PORT_S3C2410
 55

	)

101 
	#PORT_IP22ZILOG
 56

	)

104 
	#PORT_LH7A40X
 57

	)

107 
	#PORT_CPM
 58

	)

110 
	#PORT_MPC52xx
 59

	)

113 
	#PORT_ICOM
 60

	)

116 
	#PORT_S3C2440
 61

	)

119 
	#PORT_IMX
 62

	)

122 
	#PORT_MPSC
 63

	)

125 
	#PORT_TXX9
 64

	)

128 
	#PORT_VR41XX_SIU
 65

	)

129 
	#PORT_VR41XX_DSIU
 66

	)

132 
	#PORT_S3C2400
 67

	)

135 
	#PORT_M32R_SIO
 68

	)

138 
	#PORT_JSM
 69

	)

140 
	#PORT_PNX8XXX
 70

	)

143 
	#PORT_NETX
 71

	)

146 
	#PORT_SUNHV
 72

	)

148 
	#PORT_S3C2412
 73

	)

151 
	#PORT_UARTLITE
 74

	)

154 
	#PORT_BFIN
 75

	)

157 
	#PORT_KS8695
 76

	)

160 
	#PORT_SB1250_DUART
 77

	)

163 
	#PORT_MCF
 78

	)

166 
	#PORT_BFIN_SPORT
 79

	)

169 
	#PORT_MN10300
 80

	)

170 
	#PORT_MN10300_CTS
 81

	)

172 
	#PORT_SC26XX
 82

	)

175 
	#PORT_SCIFA
 83

	)

177 
	#PORT_S3C6400
 84

	)

180 
	#PORT_NWPSERIAL
 85

	)

183 
	#PORT_MAX3100
 86

	)

186 
	#PORT_TIMBUART
 87

	)

189 
	#PORT_MSM
 88

	)

192 
	#PORT_BCM63XX
 89

	)

195 
	#PORT_APBUART
 90

	)

198 
	#PORT_ALTERA_JTAGUART
 91

	)

199 
	#PORT_ALTERA_UART
 92

	)

202 
	#PORT_SCIFB
 93

	)

205 
	#PORT_MAX310X
 94

	)

208 
	#PORT_MFD
 95

	)

211 
	#PORT_OMAP
 96

	)

214 
	#PORT_VT8500
 97

	)

217 
	#PORT_XUARTPS
 98

	)

220 
	#PORT_AR933X
 99

	)

223 
	#PORT_EFMUART
 100

	)

226 
	#PORT_ARC
 101

	)

229 
	#PORT_RP2
 102

	)

232 
	#PORT_LPUART
 103

	)

235 
	#PORT_HSCIF
 104

	)

238 
	#PORT_ASC
 105

	)

241 
	#PORT_TILEGX
 106

	)

244 
	#PORT_MEN_Z135
 107

	)

247 
	#PORT_SC16IS7XX
 108

	)

250 
	#PORT_MESON
 109

	)

253 
	#PORT_DIGICOLOR
 110

	)

256 
	#PORT_SPRD
 111

	)

259 
	#PORT_CRIS
 112

	)

262 
	#PORT_STM32
 113

	)

265 
	#PORT_MVEBU
 114

	)

268 
	#PORT_PIC32
 115

	)

271 
	#PORT_MPS2UART
 116

	)

	@/usr/include/linux/serial_reg.h

14 #i‚de‡
_LINUX_SERIAL_REG_H


15 
	#_LINUX_SERIAL_REG_H


	)

20 
	#UART_RX
 0

	)

21 
	#UART_TX
 0

	)

23 
	#UART_IER
 1

	)

24 
	#UART_IER_MSI
 0x08

	)

25 
	#UART_IER_RLSI
 0x04

	)

26 
	#UART_IER_THRI
 0x02

	)

27 
	#UART_IER_RDI
 0x01

	)

31 
	#UART_IERX_SLEEP
 0x10

	)

33 
	#UART_IIR
 2

	)

34 
	#UART_IIR_NO_INT
 0x01

	)

35 
	#UART_IIR_ID
 0x0ê

	)

36 
	#UART_IIR_MSI
 0x00

	)

37 
	#UART_IIR_THRI
 0x02

	)

38 
	#UART_IIR_RDI
 0x04

	)

39 
	#UART_IIR_RLSI
 0x06

	)

41 
	#UART_IIR_BUSY
 0x07

	)

43 
	#UART_IIR_RX_TIMEOUT
 0x0¯

	)

44 
	#UART_IIR_XOFF
 0x10

	)

45 
	#UART_IIR_CTS_RTS_DSR
 0x20

	)

47 
	#UART_FCR
 2

	)

48 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

49 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

50 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

51 
	#UART_FCR_DMA_SELECT
 0x08

	)

66 
	#UART_FCR_R_TRIG_00
 0x00

	)

67 
	#UART_FCR_R_TRIG_01
 0x40

	)

68 
	#UART_FCR_R_TRIG_10
 0x80

	)

69 
	#UART_FCR_R_TRIG_11
 0xc0

	)

70 
	#UART_FCR_T_TRIG_00
 0x00

	)

71 
	#UART_FCR_T_TRIG_01
 0x10

	)

72 
	#UART_FCR_T_TRIG_10
 0x20

	)

73 
	#UART_FCR_T_TRIG_11
 0x30

	)

75 
	#UART_FCR_TRIGGER_MASK
 0xC0

	)

76 
	#UART_FCR_TRIGGER_1
 0x00

	)

77 
	#UART_FCR_TRIGGER_4
 0x40

	)

78 
	#UART_FCR_TRIGGER_8
 0x80

	)

79 
	#UART_FCR_TRIGGER_14
 0xC0

	)

81 
	#UART_FCR6_R_TRIGGER_8
 0x00

	)

82 
	#UART_FCR6_R_TRIGGER_16
 0x40

	)

83 
	#UART_FCR6_R_TRIGGER_24
 0x80

	)

84 
	#UART_FCR6_R_TRIGGER_28
 0xC0

	)

85 
	#UART_FCR6_T_TRIGGER_16
 0x00

	)

86 
	#UART_FCR6_T_TRIGGER_8
 0x10

	)

87 
	#UART_FCR6_T_TRIGGER_24
 0x20

	)

88 
	#UART_FCR6_T_TRIGGER_30
 0x30

	)

89 
	#UART_FCR7_64BYTE
 0x20

	)

92 
	#UART_FCR_R_TRIG_SHIFT
 6

	)

93 
	#UART_FCR_R_TRIG_BITS
(
x
) \

94 (((
x
Ë& 
UART_FCR_TRIGGER_MASK
Ë>> 
UART_FCR_R_TRIG_SHIFT
)

	)

95 
	#UART_FCR_R_TRIG_MAX_STATE
 4

	)

97 
	#UART_LCR
 3

	)

102 
	#UART_LCR_DLAB
 0x80

	)

103 
	#UART_LCR_SBC
 0x40

	)

104 
	#UART_LCR_SPAR
 0x20

	)

105 
	#UART_LCR_EPAR
 0x10

	)

106 
	#UART_LCR_PARITY
 0x08

	)

107 
	#UART_LCR_STOP
 0x04

	)

108 
	#UART_LCR_WLEN5
 0x00

	)

109 
	#UART_LCR_WLEN6
 0x01

	)

110 
	#UART_LCR_WLEN7
 0x02

	)

111 
	#UART_LCR_WLEN8
 0x03

	)

117 
	#UART_LCR_CONF_MODE_A
 
UART_LCR_DLAB


	)

118 
	#UART_LCR_CONF_MODE_B
 0xBF

	)

120 
	#UART_MCR
 4

	)

121 
	#UART_MCR_CLKSEL
 0x80

	)

122 
	#UART_MCR_TCRTLR
 0x40

	)

123 
	#UART_MCR_XONANY
 0x20

	)

124 
	#UART_MCR_AFE
 0x20

	)

125 
	#UART_MCR_LOOP
 0x10

	)

126 
	#UART_MCR_OUT2
 0x08

	)

127 
	#UART_MCR_OUT1
 0x04

	)

128 
	#UART_MCR_RTS
 0x02

	)

129 
	#UART_MCR_DTR
 0x01

	)

131 
	#UART_LSR
 5

	)

132 
	#UART_LSR_FIFOE
 0x80

	)

133 
	#UART_LSR_TEMT
 0x40

	)

134 
	#UART_LSR_THRE
 0x20

	)

135 
	#UART_LSR_BI
 0x10

	)

136 
	#UART_LSR_FE
 0x08

	)

137 
	#UART_LSR_PE
 0x04

	)

138 
	#UART_LSR_OE
 0x02

	)

139 
	#UART_LSR_DR
 0x01

	)

140 
	#UART_LSR_BRK_ERROR_BITS
 0x1E

	)

142 
	#UART_MSR
 6

	)

143 
	#UART_MSR_DCD
 0x80

	)

144 
	#UART_MSR_RI
 0x40

	)

145 
	#UART_MSR_DSR
 0x20

	)

146 
	#UART_MSR_CTS
 0x10

	)

147 
	#UART_MSR_DDCD
 0x08

	)

148 
	#UART_MSR_TERI
 0x04

	)

149 
	#UART_MSR_DDSR
 0x02

	)

150 
	#UART_MSR_DCTS
 0x01

	)

151 
	#UART_MSR_ANY_DELTA
 0x0F

	)

153 
	#UART_SCR
 7

	)

158 
	#UART_DLL
 0

	)

159 
	#UART_DLM
 1

	)

164 
	#UART_EFR
 2

	)

165 
	#UART_XR_EFR
 9

	)

166 
	#UART_EFR_CTS
 0x80

	)

167 
	#UART_EFR_RTS
 0x40

	)

168 
	#UART_EFR_SCD
 0x20

	)

169 
	#UART_EFR_ECB
 0x10

	)

177 
	#UART_XON1
 4

	)

178 
	#UART_XON2
 5

	)

179 
	#UART_XOFF1
 6

	)

180 
	#UART_XOFF2
 7

	)

185 
	#UART_TI752_TCR
 6

	)

186 
	#UART_TI752_TLR
 7

	)

191 
	#UART_TRG
 0

	)

197 
	#UART_TRG_1
 0x01

	)

198 
	#UART_TRG_4
 0x04

	)

199 
	#UART_TRG_8
 0x08

	)

200 
	#UART_TRG_16
 0x10

	)

201 
	#UART_TRG_32
 0x20

	)

202 
	#UART_TRG_64
 0x40

	)

203 
	#UART_TRG_96
 0x60

	)

204 
	#UART_TRG_120
 0x78

	)

205 
	#UART_TRG_128
 0x80

	)

207 
	#UART_FCTR
 1

	)

208 
	#UART_FCTR_RTS_NODELAY
 0x00

	)

209 
	#UART_FCTR_RTS_4DELAY
 0x01

	)

210 
	#UART_FCTR_RTS_6DELAY
 0x02

	)

211 
	#UART_FCTR_RTS_8DELAY
 0x03

	)

212 
	#UART_FCTR_IRDA
 0x04

	)

213 
	#UART_FCTR_TX_INT
 0x08

	)

214 
	#UART_FCTR_TRGA
 0x00

	)

215 
	#UART_FCTR_TRGB
 0x10

	)

216 
	#UART_FCTR_TRGC
 0x20

	)

217 
	#UART_FCTR_TRGD
 0x30

	)

218 
	#UART_FCTR_SCR_SWAP
 0x40

	)

219 
	#UART_FCTR_RX
 0x00

	)

220 
	#UART_FCTR_TX
 0x80

	)

225 
	#UART_EMSR
 7

	)

226 
	#UART_EMSR_FIFO_COUNT
 0x01

	)

227 
	#UART_EMSR_ALT_COUNT
 0x02

	)

232 
	#UART_IER_DMAE
 0x80

	)

233 
	#UART_IER_UUE
 0x40

	)

234 
	#UART_IER_NRZE
 0x20

	)

235 
	#UART_IER_RTOIE
 0x10

	)

237 
	#UART_IIR_TOD
 0x08

	)

239 
	#UART_FCR_PXAR1
 0x00

	)

240 
	#UART_FCR_PXAR8
 0x40

	)

241 
	#UART_FCR_PXAR16
 0x80

	)

242 
	#UART_FCR_PXAR32
 0xc0

	)

247 
	#UART_ASR
 0x01

	)

248 
	#UART_RFL
 0x03

	)

249 
	#UART_TFL
 0x04

	)

250 
	#UART_ICR
 0x05

	)

253 
	#UART_ACR
 0x00

	)

254 
	#UART_CPR
 0x01

	)

255 
	#UART_TCR
 0x02

	)

256 
	#UART_CKS
 0x03

	)

257 
	#UART_TTL
 0x04

	)

258 
	#UART_RTL
 0x05

	)

259 
	#UART_FCL
 0x06

	)

260 
	#UART_FCH
 0x07

	)

261 
	#UART_ID1
 0x08

	)

262 
	#UART_ID2
 0x09

	)

263 
	#UART_ID3
 0x0A

	)

264 
	#UART_REV
 0x0B

	)

265 
	#UART_CSR
 0x0C

	)

266 
	#UART_NMR
 0x0D

	)

267 
	#UART_CTR
 0xFF

	)

272 
	#UART_ACR_RXDIS
 0x01

	)

273 
	#UART_ACR_TXDIS
 0x02

	)

274 
	#UART_ACR_DSRFC
 0x04

	)

275 
	#UART_ACR_TLENB
 0x20

	)

276 
	#UART_ACR_ICRRD
 0x40

	)

277 
	#UART_ACR_ASREN
 0x80

	)

287 
	#UART_RSA_BASE
 (-8)

	)

289 
	#UART_RSA_MSR
 ((
UART_RSA_BASE
Ë+ 0Ë

	)

291 
	#UART_RSA_MSR_SWAP
 (1 << 0Ë

	)

292 
	#UART_RSA_MSR_FIFO
 (1 << 2Ë

	)

293 
	#UART_RSA_MSR_FLOW
 (1 << 3Ë

	)

294 
	#UART_RSA_MSR_ITYP
 (1 << 4Ë

	)

296 
	#UART_RSA_IER
 ((
UART_RSA_BASE
Ë+ 1Ë

	)

298 
	#UART_RSA_IER_Rx_FIFO_H
 (1 << 0Ë

	)

299 
	#UART_RSA_IER_Tx_FIFO_H
 (1 << 1Ë

	)

300 
	#UART_RSA_IER_Tx_FIFO_E
 (1 << 2Ë

	)

301 
	#UART_RSA_IER_Rx_TOUT
 (1 << 3Ë

	)

302 
	#UART_RSA_IER_TIMER
 (1 << 4Ë

	)

304 
	#UART_RSA_SRR
 ((
UART_RSA_BASE
Ë+ 2Ë

	)

306 
	#UART_RSA_SRR_Tx_FIFO_NEMP
 (1 << 0Ë

	)

307 
	#UART_RSA_SRR_Tx_FIFO_NHFL
 (1 << 1Ë

	)

308 
	#UART_RSA_SRR_Tx_FIFO_NFUL
 (1 << 2Ë

	)

309 
	#UART_RSA_SRR_Rx_FIFO_NEMP
 (1 << 3Ë

	)

310 
	#UART_RSA_SRR_Rx_FIFO_NHFL
 (1 << 4Ë

	)

311 
	#UART_RSA_SRR_Rx_FIFO_NFUL
 (1 << 5Ë

	)

312 
	#UART_RSA_SRR_Rx_TOUT
 (1 << 6Ë

	)

313 
	#UART_RSA_SRR_TIMER
 (1 << 7Ë

	)

315 
	#UART_RSA_FRR
 ((
UART_RSA_BASE
Ë+ 2Ë

	)

317 
	#UART_RSA_TIVSR
 ((
UART_RSA_BASE
Ë+ 3Ë

	)

319 
	#UART_RSA_TCR
 ((
UART_RSA_BASE
Ë+ 4Ë

	)

321 
	#UART_RSA_TCR_SWITCH
 (1 << 0Ë

	)

327 
	#SERIAL_RSA_BAUD_BASE
 (921600)

	)

328 
	#SERIAL_RSA_BAUD_BASE_LO
 (
SERIAL_RSA_BAUD_BASE
 / 8)

	)

334 
	#OMAP1_UART1_BASE
 0xfffb0000

	)

335 
	#OMAP1_UART2_BASE
 0xfffb0800

	)

336 
	#OMAP1_UART3_BASE
 0xfffb9800

	)

337 
	#UART_OMAP_MDR1
 0x08

	)

338 
	#UART_OMAP_MDR2
 0x09

	)

339 
	#UART_OMAP_SCR
 0x10

	)

340 
	#UART_OMAP_SSR
 0x11

	)

341 
	#UART_OMAP_EBLR
 0x12

	)

342 
	#UART_OMAP_OSC_12M_SEL
 0x13

	)

343 
	#UART_OMAP_MVER
 0x14

	)

344 
	#UART_OMAP_SYSC
 0x15

	)

345 
	#UART_OMAP_SYSS
 0x16

	)

346 
	#UART_OMAP_WER
 0x17

	)

347 
	#UART_OMAP_TX_LVL
 0x1®

	)

352 
	#UART_OMAP_MDR1_16X_MODE
 0x00

	)

353 
	#UART_OMAP_MDR1_SIR_MODE
 0x01

	)

354 
	#UART_OMAP_MDR1_16X_ABAUD_MODE
 0x02

	)

355 
	#UART_OMAP_MDR1_13X_MODE
 0x03

	)

356 
	#UART_OMAP_MDR1_MIR_MODE
 0x04

	)

357 
	#UART_OMAP_MDR1_FIR_MODE
 0x05

	)

358 
	#UART_OMAP_MDR1_CIR_MODE
 0x06

	)

359 
	#UART_OMAP_MDR1_DISABLE
 0x07

	)

364 
	#UART_EXAR_8XMODE
 0x88

	)

365 
	#UART_EXAR_SLEEP
 0x8b

	)

366 
	#UART_EXAR_DVID
 0x8d

	)

368 
	#UART_EXAR_FCTR
 0x08

	)

369 
	#UART_FCTR_EXAR_IRDA
 0x08

	)

370 
	#UART_FCTR_EXAR_485
 0x10

	)

371 
	#UART_FCTR_EXAR_TRGA
 0x00

	)

372 
	#UART_FCTR_EXAR_TRGB
 0x60

	)

373 
	#UART_FCTR_EXAR_TRGC
 0x80

	)

374 
	#UART_FCTR_EXAR_TRGD
 0xc0

	)

376 
	#UART_EXAR_TXTRG
 0x0®

	)

377 
	#UART_EXAR_RXTRG
 0x0b

	)

383 
	#UART_ALTR_AFR
 0x40

	)

384 
	#UART_ALTR_EN_TXFIFO_LW
 0x01

	)

385 
	#UART_ALTR_TX_LOW
 0x41

	)

	@/usr/include/linux/signal.h

1 #i‚de‡
_LINUX_SIGNAL_H


2 
	#_LINUX_SIGNAL_H


	)

4 
	~<asm/sig«l.h
>

5 
	~<asm/sigöfo.h
>

7 
	#SS_ONSTACK
 1

	)

8 
	#SS_DISABLE
 2

	)

11 
	#SS_AUTODISARM
 (1U << 31Ë

	)

13 
	#SS_FLAG_BITS
 
SS_AUTODISARM


	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__c⁄°™t_˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__c⁄°™t_˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__c⁄°™t_˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__c⁄°™t_˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__c⁄°™t_˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__c⁄°™t_˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__c⁄°™t_˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__c⁄°™t_˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__c⁄°™t_˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__c⁄°™t_˝u_to_be32
(0xF0000000)

87 
	#TCP_MSS_DEFAULT
 536U

	)

88 
	#TCP_MSS_DESIRED
 1220U

	)

91 
	#TCP_NODELAY
 1

	)

92 
	#TCP_MAXSEG
 2

	)

93 
	#TCP_CORK
 3

	)

94 
	#TCP_KEEPIDLE
 4

	)

95 
	#TCP_KEEPINTVL
 5

	)

96 
	#TCP_KEEPCNT
 6

	)

97 
	#TCP_SYNCNT
 7

	)

98 
	#TCP_LINGER2
 8

	)

99 
	#TCP_DEFER_ACCEPT
 9

	)

100 
	#TCP_WINDOW_CLAMP
 10

	)

101 
	#TCP_INFO
 11

	)

102 
	#TCP_QUICKACK
 12

	)

103 
	#TCP_CONGESTION
 13

	)

104 
	#TCP_MD5SIG
 14

	)

105 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

106 
	#TCP_THIN_DUPACK
 17

	)

107 
	#TCP_USER_TIMEOUT
 18

	)

108 
	#TCP_REPAIR
 19

	)

109 
	#TCP_REPAIR_QUEUE
 20

	)

110 
	#TCP_QUEUE_SEQ
 21

	)

111 
	#TCP_REPAIR_OPTIONS
 22

	)

112 
	#TCP_FASTOPEN
 23

	)

113 
	#TCP_TIMESTAMP
 24

	)

114 
	#TCP_NOTSENT_LOWAT
 25

	)

115 
	#TCP_CC_INFO
 26

	)

116 
	#TCP_SAVE_SYN
 27

	)

117 
	#TCP_SAVED_SYN
 28

	)

118 
	#TCP_REPAIR_WINDOW
 29

	)

120 
	st˝_ª∑ú_›t
 {

121 
__u32
 
	m›t_code
;

122 
__u32
 
	m›t_vÆ
;

125 
	st˝_ª∑ú_wödow
 {

126 
__u32
 
	m¢d_wl1
;

127 
__u32
 
	m¢d_wnd
;

128 
__u32
 
	mmax_wödow
;

130 
__u32
 
	mrcv_wnd
;

131 
__u32
 
	mrcv_wup
;

135 
	mTCP_NO_QUEUE
,

136 
	mTCP_RECV_QUEUE
,

137 
	mTCP_SEND_QUEUE
,

138 
	mTCP_QUEUES_NR
,

142 
	#TCPI_OPT_TIMESTAMPS
 1

	)

143 
	#TCPI_OPT_SACK
 2

	)

144 
	#TCPI_OPT_WSCALE
 4

	)

145 
	#TCPI_OPT_ECN
 8

	)

146 
	#TCPI_OPT_ECN_SEEN
 16

	)

147 
	#TCPI_OPT_SYN_DATA
 32

	)

149 
	et˝_ˇ_°©e
 {

150 
	mTCP_CA_O≥n
 = 0,

151 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

152 
	mTCP_CA_Dis‹dî
 = 1,

153 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

154 
	mTCP_CA_CWR
 = 2,

155 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

156 
	mTCP_CA_Recovîy
 = 3,

157 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

158 
	mTCP_CA_Loss
 = 4

159 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

162 
	st˝_öfo
 {

163 
__u8
 
	mt˝i_°©e
;

164 
__u8
 
	mt˝i_ˇ_°©e
;

165 
__u8
 
	mt˝i_ªå™smôs
;

166 
__u8
 
	mt˝i_¥obes
;

167 
__u8
 
	mt˝i_backoff
;

168 
__u8
 
	mt˝i_›ti⁄s
;

169 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

170 
__u8
 
	mt˝i_dñivîy_øã_≠p_limôed
:1;

172 
__u32
 
	mt˝i_πo
;

173 
__u32
 
	mt˝i_©o
;

174 
__u32
 
	mt˝i_¢d_mss
;

175 
__u32
 
	mt˝i_rcv_mss
;

177 
__u32
 
	mt˝i_u«cked
;

178 
__u32
 
	mt˝i_ßcked
;

179 
__u32
 
	mt˝i_lo°
;

180 
__u32
 
	mt˝i_ªå™s
;

181 
__u32
 
	mt˝i_Áckës
;

184 
__u32
 
	mt˝i_œ°_d©a_£¡
;

185 
__u32
 
	mt˝i_œ°_ack_£¡
;

186 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

187 
__u32
 
	mt˝i_œ°_ack_ªcv
;

190 
__u32
 
	mt˝i_pmtu
;

191 
__u32
 
	mt˝i_rcv_s°hªsh
;

192 
__u32
 
	mt˝i_πt
;

193 
__u32
 
	mt˝i_πtv¨
;

194 
__u32
 
	mt˝i_¢d_s°hªsh
;

195 
__u32
 
	mt˝i_¢d_cwnd
;

196 
__u32
 
	mt˝i_advmss
;

197 
__u32
 
	mt˝i_ª‹dîög
;

199 
__u32
 
	mt˝i_rcv_πt
;

200 
__u32
 
	mt˝i_rcv_•a˚
;

202 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

204 
__u64
 
	mt˝i_∑cög_øã
;

205 
__u64
 
	mt˝i_max_∑cög_øã
;

206 
__u64
 
	mt˝i_byãs_acked
;

207 
__u64
 
	mt˝i_byãs_ª˚ived
;

208 
__u32
 
	mt˝i_£gs_out
;

209 
__u32
 
	mt˝i_£gs_ö
;

211 
__u32
 
	mt˝i_nŸ£¡_byãs
;

212 
__u32
 
	mt˝i_mö_πt
;

213 
__u32
 
	mt˝i_d©a_£gs_ö
;

214 
__u32
 
	mt˝i_d©a_£gs_out
;

216 
__u64
 
	mt˝i_dñivîy_øã
;

220 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

222 
	st˝_md5sig
 {

223 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

224 
__u16
 
	m__t˝m_∑d1
;

225 
__u16
 
	mt˝m_keyÀn
;

226 
__u32
 
	m__t˝m_∑d2
;

227 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/timex.h

53 #i‚de‡
_LINUX_TIMEX_H


54 
	#_LINUX_TIMEX_H


	)

56 
	~<löux/time.h
>

58 
	#NTP_API
 4

	)

64 
	stimex
 {

65 
	mmodes
;

66 
__kî√l_l⁄g_t
 
	moff£t
;

67 
__kî√l_l⁄g_t
 
	m‰eq
;

68 
__kî√l_l⁄g_t
 
	mmaxîr‹
;

69 
__kî√l_l⁄g_t
 
	me°îr‹
;

70 
	m°©us
;

71 
__kî√l_l⁄g_t
 
	mc⁄°™t
;

72 
__kî√l_l⁄g_t
 
	m¥ecisi⁄
;

73 
__kî√l_l⁄g_t
 
	mtﬁî™˚
;

76 
timevÆ
 
	mtime
;

77 
__kî√l_l⁄g_t
 
	mtick
;

79 
__kî√l_l⁄g_t
 
	mµs‰eq
;

80 
__kî√l_l⁄g_t
 
	mjôãr
;

81 
	mshi·
;

82 
__kî√l_l⁄g_t
 
	m°abû
;

83 
__kî√l_l⁄g_t
 
	mjô˙t
;

84 
__kî√l_l⁄g_t
 
	mˇl˙t
;

85 
__kî√l_l⁄g_t
 
	mîr˙t
;

86 
__kî√l_l⁄g_t
 
	m°b˙t
;

88 
	mèi
;

98 
	#ADJ_OFFSET
 0x0001

	)

99 
	#ADJ_FREQUENCY
 0x0002

	)

100 
	#ADJ_MAXERROR
 0x0004

	)

101 
	#ADJ_ESTERROR
 0x0008

	)

102 
	#ADJ_STATUS
 0x0010

	)

103 
	#ADJ_TIMECONST
 0x0020

	)

104 
	#ADJ_TAI
 0x0080

	)

105 
	#ADJ_SETOFFSET
 0x0100

	)

106 
	#ADJ_MICRO
 0x1000

	)

107 
	#ADJ_NANO
 0x2000

	)

108 
	#ADJ_TICK
 0x4000

	)

110 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

111 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

114 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

115 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

116 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

117 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

118 
	#MOD_STATUS
 
ADJ_STATUS


	)

119 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

120 
	#MOD_TAI
 
ADJ_TAI


	)

121 
	#MOD_MICRO
 
ADJ_MICRO


	)

122 
	#MOD_NANO
 
ADJ_NANO


	)

128 
	#STA_PLL
 0x0001

	)

129 
	#STA_PPSFREQ
 0x0002

	)

130 
	#STA_PPSTIME
 0x0004

	)

131 
	#STA_FLL
 0x0008

	)

133 
	#STA_INS
 0x0010

	)

134 
	#STA_DEL
 0x0020

	)

135 
	#STA_UNSYNC
 0x0040

	)

136 
	#STA_FREQHOLD
 0x0080

	)

138 
	#STA_PPSSIGNAL
 0x0100

	)

139 
	#STA_PPSJITTER
 0x0200

	)

140 
	#STA_PPSWANDER
 0x0400

	)

141 
	#STA_PPSERROR
 0x0800

	)

143 
	#STA_CLOCKERR
 0x1000

	)

144 
	#STA_NANO
 0x2000

	)

145 
	#STA_MODE
 0x4000

	)

146 
	#STA_CLK
 0x8000

	)

149 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

150 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

155 
	#TIME_OK
 0

	)

156 
	#TIME_INS
 1

	)

157 
	#TIME_DEL
 2

	)

158 
	#TIME_OOP
 3

	)

159 
	#TIME_WAIT
 4

	)

160 
	#TIME_ERROR
 5

	)

161 
	#TIME_BAD
 
TIME_ERROR


	)

	@/usr/include/linux/tty.h

1 #i‚de‡
_LINUX_TTY_H


2 
	#_LINUX_TTY_H


	)

8 
	#NR_LDISCS
 30

	)

11 
	#N_TTY
 0

	)

12 
	#N_SLIP
 1

	)

13 
	#N_MOUSE
 2

	)

14 
	#N_PPP
 3

	)

15 
	#N_STRIP
 4

	)

16 
	#N_AX25
 5

	)

17 
	#N_X25
 6

	)

18 
	#N_6PACK
 7

	)

19 
	#N_MASC
 8

	)

20 
	#N_R3964
 9

	)

21 
	#N_PROFIBUS_FDL
 10

	)

22 
	#N_IRDA
 11

	)

23 
	#N_SMSBLOCK
 12

	)

25 
	#N_HDLC
 13

	)

26 
	#N_SYNC_PPP
 14

	)

27 
	#N_HCI
 15

	)

28 
	#N_GIGASET_M101
 16

	)

29 
	#N_SLCAN
 17

	)

30 
	#N_PPS
 18

	)

31 
	#N_V253
 19

	)

32 
	#N_CAIF
 20

	)

33 
	#N_GSM0710
 21

	)

34 
	#N_TI_WL
 22

	)

35 
	#N_TRACESINK
 23

	)

36 
	#N_TRACEROUTER
 24

	)

37 
	#N_NCI
 25

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 264592

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/linux/watchdog.h

9 #i‚de‡
_LINUX_WATCHDOG_H


10 
	#_LINUX_WATCHDOG_H


	)

12 
	~<löux/io˘l.h
>

13 
	~<löux/ty≥s.h
>

15 
	#WATCHDOG_IOCTL_BASE
 'W'

	)

17 
	sw©chdog_öfo
 {

18 
__u32
 
	m›ti⁄s
;

19 
__u32
 
	mfúmw¨e_vîsi⁄
;

20 
__u8
 
	midítôy
[32];

23 
	#WDIOC_GETSUPPORT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 0, 
w©chdog_öfo
)

	)

24 
	#WDIOC_GETSTATUS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 1, )

	)

25 
	#WDIOC_GETBOOTSTATUS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 2, )

	)

26 
	#WDIOC_GETTEMP
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 3, )

	)

27 
	#WDIOC_SETOPTIONS
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 4, )

	)

28 
	#WDIOC_KEEPALIVE
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 5, )

	)

29 
	#WDIOC_SETTIMEOUT
 
	`_IOWR
(
WATCHDOG_IOCTL_BASE
, 6, )

	)

30 
	#WDIOC_GETTIMEOUT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 7, )

	)

31 
	#WDIOC_SETPRETIMEOUT
 
	`_IOWR
(
WATCHDOG_IOCTL_BASE
, 8, )

	)

32 
	#WDIOC_GETPRETIMEOUT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 9, )

	)

33 
	#WDIOC_GETTIMELEFT
 
	`_IOR
(
WATCHDOG_IOCTL_BASE
, 10, )

	)

35 
	#WDIOF_UNKNOWN
 -1

	)

36 
	#WDIOS_UNKNOWN
 -1

	)

38 
	#WDIOF_OVERHEAT
 0x0001

	)

39 
	#WDIOF_FANFAULT
 0x0002

	)

40 
	#WDIOF_EXTERN1
 0x0004

	)

41 
	#WDIOF_EXTERN2
 0x0008

	)

42 
	#WDIOF_POWERUNDER
 0x0010

	)

43 
	#WDIOF_CARDRESET
 0x0020

	)

44 
	#WDIOF_POWEROVER
 0x0040

	)

45 
	#WDIOF_SETTIMEOUT
 0x0080

	)

46 
	#WDIOF_MAGICCLOSE
 0x0100

	)

47 
	#WDIOF_PRETIMEOUT
 0x0200

	)

48 
	#WDIOF_ALARMONLY
 0x0400

	)

50 
	#WDIOF_KEEPALIVEPING
 0x8000

	)

52 
	#WDIOS_DISABLECARD
 0x0001

	)

53 
	#WDIOS_ENABLECARD
 0x0002

	)

54 
	#WDIOS_TEMPPANIC
 0x0004

	)

	@/usr/include/printf.h

18 #i‚def 
_PRINTF_H


20 
	#_PRINTF_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


25 
	#__√ed_FILE


	)

26 
	~<°dio.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_wch¨_t


	)

29 
	~<°ddef.h
>

30 
	~<°d¨g.h
>

33 
	s¥ötf_öfo


35 
	m¥ec
;

36 
	mwidth
;

37 
wch¨_t
 
	m•ec
;

38 
	mis_l⁄g_doubÀ
:1;

39 
	mis_sh‹t
:1;

40 
	mis_l⁄g
:1;

41 
	mÆt
:1;

42 
	m•a˚
:1;

43 
	mÀ·
:1;

44 
	mshowsign
:1;

45 
	mgroup
:1;

46 
	mexåa
:1;

47 
	mis_ch¨
:1;

48 
	mwide
:1;

49 
	mi18n
:1;

50 
	m__∑d
:4;

51 
	mu£r
;

52 
wch¨_t
 
	m∑d
;

66 
	t¥ötf_fun˘i⁄
 (
	tFILE
 *
	t__°ªam
,

67 c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

68 c⁄° *c⁄° *
	t__¨gs
);

78 
	t¥ötf_¨göfo_size_fun˘i⁄
 (c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

79 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
,

80 *
	t__size
);

84 
	t¥ötf_¨göfo_fun˘i⁄
 (c⁄° 
	t¥ötf_öfo
 *
	t__öfo
,

85 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
);

89 
	t¥ötf_va_¨g_fun˘i⁄
 (*
	t__mem
, 
	tva_li°
 *
	t__≠
);

96 
	$ªgi°î_¥ötf_•ecifõr
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

97 
¥ötf_¨göfo_size_fun˘i⁄
 
__¨göfo
)

98 
__THROW
;

105 
	$ªgi°î_¥ötf_fun˘i⁄
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

106 
¥ötf_¨göfo_fun˘i⁄
 
__¨göfo
)

107 
__THROW
 
__©åibuã_dïªˇãd__
;

114 
	$ªgi°î_¥ötf_modifõr
 (c⁄° 
wch¨_t
 *
__°r
Ë
__wur
 
__THROW
;

120 
	$ªgi°î_¥ötf_ty≥
 (
¥ötf_va_¨g_fun˘i⁄
 
__f˘
Ë
__wur
 
__THROW
;

134 
size_t
 
	$∑r£_¥ötf_f‹m©
 (c⁄° *
__ª°ri˘
 
__fmt
, 
size_t
 
__n
,

135 *
__ª°ri˘
 
__¨gty≥s
Ë
__THROW
;

146 
PA_INT
,

147 
PA_CHAR
,

148 
PA_WCHAR
,

149 
PA_STRING
,

150 
PA_WSTRING
,

151 
PA_POINTER
,

152 
PA_FLOAT
,

153 
PA_DOUBLE
,

154 
PA_LAST


158 
	#PA_FLAG_MASK
 0xff00

	)

159 
	#PA_FLAG_LONG_LONG
 (1 << 8)

	)

160 
	#PA_FLAG_LONG_DOUBLE
 
PA_FLAG_LONG_LONG


	)

161 
	#PA_FLAG_LONG
 (1 << 9)

	)

162 
	#PA_FLAG_SHORT
 (1 << 10)

	)

163 
	#PA_FLAG_PTR
 (1 << 11)

	)

173 
	$¥ötf_size
 (
FILE
 *
__ª°ri˘
 
__Â
,

174 c⁄° 
¥ötf_öfo
 *
__öfo
,

175 c⁄° *c⁄° *
__ª°ri˘
 
__¨gs
Ë
__THROW
;

178 
	$¥ötf_size_öfo
 (c⁄° 
¥ötf_öfo
 *
__ª°ri˘


179 
__öfo
, 
size_t
 
__n
, *
__ª°ri˘
 
__¨gty≥s
)

180 
__THROW
;

182 #ifde‡
__LDBL_COMPAT


183 
	~<bôs/¥ötf-ldbl.h
>

186 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 
__u32
 
	mrx_noh™dÀr
;

43 
	sπ∆_lök_°©s64
 {

44 
__u64
 
	mrx_∑ckës
;

45 
__u64
 
	mtx_∑ckës
;

46 
__u64
 
	mrx_byãs
;

47 
__u64
 
	mtx_byãs
;

48 
__u64
 
	mrx_îr‹s
;

49 
__u64
 
	mtx_îr‹s
;

50 
__u64
 
	mrx_dr›≥d
;

51 
__u64
 
	mtx_dr›≥d
;

52 
__u64
 
	mmu…iˇ°
;

53 
__u64
 
	mcﬁlisi⁄s
;

56 
__u64
 
	mrx_Àngth_îr‹s
;

57 
__u64
 
	mrx_ovî_îr‹s
;

58 
__u64
 
	mrx_¸c_îr‹s
;

59 
__u64
 
	mrx_‰ame_îr‹s
;

60 
__u64
 
	mrx_fifo_îr‹s
;

61 
__u64
 
	mrx_mis£d_îr‹s
;

64 
__u64
 
	mtx_ab‹ãd_îr‹s
;

65 
__u64
 
	mtx_ˇºõr_îr‹s
;

66 
__u64
 
	mtx_fifo_îr‹s
;

67 
__u64
 
	mtx_hóπbót_îr‹s
;

68 
__u64
 
	mtx_wödow_îr‹s
;

71 
__u64
 
	mrx_com¥es£d
;

72 
__u64
 
	mtx_com¥es£d
;

74 
__u64
 
	mrx_noh™dÀr
;

78 
	sπ∆_lök_ifm≠
 {

79 
__u64
 
	mmem_°¨t
;

80 
__u64
 
	mmem_íd
;

81 
__u64
 
	mba£_addr
;

82 
__u16
 
	múq
;

83 
__u8
 
	mdma
;

84 
__u8
 
	mp‹t
;

106 
	mIFLA_UNSPEC
,

107 
	mIFLA_ADDRESS
,

108 
	mIFLA_BROADCAST
,

109 
	mIFLA_IFNAME
,

110 
	mIFLA_MTU
,

111 
	mIFLA_LINK
,

112 
	mIFLA_QDISC
,

113 
	mIFLA_STATS
,

114 
	mIFLA_COST
,

115 
	#IFLA_COST
 
IFLA_COST


	)

116 
	mIFLA_PRIORITY
,

117 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

118 
	mIFLA_MASTER
,

119 
	#IFLA_MASTER
 
IFLA_MASTER


	)

120 
	mIFLA_WIRELESS
,

121 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

122 
	mIFLA_PROTINFO
,

123 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

124 
	mIFLA_TXQLEN
,

125 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

126 
	mIFLA_MAP
,

127 
	#IFLA_MAP
 
IFLA_MAP


	)

128 
	mIFLA_WEIGHT
,

129 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

130 
	mIFLA_OPERSTATE
,

131 
	mIFLA_LINKMODE
,

132 
	mIFLA_LINKINFO
,

133 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

134 
	mIFLA_NET_NS_PID
,

135 
	mIFLA_IFALIAS
,

136 
	mIFLA_NUM_VF
,

137 
	mIFLA_VFINFO_LIST
,

138 
	mIFLA_STATS64
,

139 
	mIFLA_VF_PORTS
,

140 
	mIFLA_PORT_SELF
,

141 
	mIFLA_AF_SPEC
,

142 
	mIFLA_GROUP
,

143 
	mIFLA_NET_NS_FD
,

144 
	mIFLA_EXT_MASK
,

145 
	mIFLA_PROMISCUITY
,

146 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

147 
	mIFLA_NUM_TX_QUEUES
,

148 
	mIFLA_NUM_RX_QUEUES
,

149 
	mIFLA_CARRIER
,

150 
	mIFLA_PHYS_PORT_ID
,

151 
	mIFLA_CARRIER_CHANGES
,

152 
	mIFLA_PHYS_SWITCH_ID
,

153 
	mIFLA_LINK_NETNSID
,

154 
	mIFLA_PHYS_PORT_NAME
,

155 
	mIFLA_PROTO_DOWN
,

156 
	mIFLA_GSO_MAX_SEGS
,

157 
	mIFLA_GSO_MAX_SIZE
,

158 
	mIFLA_PAD
,

159 
	mIFLA_XDP
,

160 
	m__IFLA_MAX


164 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

167 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

168 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

171 
	mIFLA_INET_UNSPEC
,

172 
	mIFLA_INET_CONF
,

173 
	m__IFLA_INET_MAX
,

176 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

209 
	mIFLA_INET6_UNSPEC
,

210 
	mIFLA_INET6_FLAGS
,

211 
	mIFLA_INET6_CONF
,

212 
	mIFLA_INET6_STATS
,

213 
	mIFLA_INET6_MCAST
,

214 
	mIFLA_INET6_CACHEINFO
,

215 
	mIFLA_INET6_ICMP6STATS
,

216 
	mIFLA_INET6_TOKEN
,

217 
	mIFLA_INET6_ADDR_GEN_MODE
,

218 
	m__IFLA_INET6_MAX


221 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

223 
	eö6_addr_gí_mode
 {

224 
	mIN6_ADDR_GEN_MODE_EUI64
,

225 
	mIN6_ADDR_GEN_MODE_NONE
,

226 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

227 
	mIN6_ADDR_GEN_MODE_RANDOM
,

233 
	mIFLA_BR_UNSPEC
,

234 
	mIFLA_BR_FORWARD_DELAY
,

235 
	mIFLA_BR_HELLO_TIME
,

236 
	mIFLA_BR_MAX_AGE
,

237 
	mIFLA_BR_AGEING_TIME
,

238 
	mIFLA_BR_STP_STATE
,

239 
	mIFLA_BR_PRIORITY
,

240 
	mIFLA_BR_VLAN_FILTERING
,

241 
	mIFLA_BR_VLAN_PROTOCOL
,

242 
	mIFLA_BR_GROUP_FWD_MASK
,

243 
	mIFLA_BR_ROOT_ID
,

244 
	mIFLA_BR_BRIDGE_ID
,

245 
	mIFLA_BR_ROOT_PORT
,

246 
	mIFLA_BR_ROOT_PATH_COST
,

247 
	mIFLA_BR_TOPOLOGY_CHANGE
,

248 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

249 
	mIFLA_BR_HELLO_TIMER
,

250 
	mIFLA_BR_TCN_TIMER
,

251 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

252 
	mIFLA_BR_GC_TIMER
,

253 
	mIFLA_BR_GROUP_ADDR
,

254 
	mIFLA_BR_FDB_FLUSH
,

255 
	mIFLA_BR_MCAST_ROUTER
,

256 
	mIFLA_BR_MCAST_SNOOPING
,

257 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

258 
	mIFLA_BR_MCAST_QUERIER
,

259 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

260 
	mIFLA_BR_MCAST_HASH_MAX
,

261 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

262 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

263 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

264 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

265 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

266 
	mIFLA_BR_MCAST_QUERY_INTVL
,

267 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

268 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

269 
	mIFLA_BR_NF_CALL_IPTABLES
,

270 
	mIFLA_BR_NF_CALL_IP6TABLES
,

271 
	mIFLA_BR_NF_CALL_ARPTABLES
,

272 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

273 
	mIFLA_BR_PAD
,

274 
	mIFLA_BR_VLAN_STATS_ENABLED
,

275 
	mIFLA_BR_MCAST_STATS_ENABLED
,

276 
	m__IFLA_BR_MAX
,

279 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

281 
	siÊa_bridge_id
 {

282 
__u8
 
	m¥io
[2];

283 
__u8
 
	maddr
[6];

287 
	mBRIDGE_MODE_UNSPEC
,

288 
	mBRIDGE_MODE_HAIRPIN
,

292 
	mIFLA_BRPORT_UNSPEC
,

293 
	mIFLA_BRPORT_STATE
,

294 
	mIFLA_BRPORT_PRIORITY
,

295 
	mIFLA_BRPORT_COST
,

296 
	mIFLA_BRPORT_MODE
,

297 
	mIFLA_BRPORT_GUARD
,

298 
	mIFLA_BRPORT_PROTECT
,

299 
	mIFLA_BRPORT_FAST_LEAVE
,

300 
	mIFLA_BRPORT_LEARNING
,

301 
	mIFLA_BRPORT_UNICAST_FLOOD
,

302 
	mIFLA_BRPORT_PROXYARP
,

303 
	mIFLA_BRPORT_LEARNING_SYNC
,

304 
	mIFLA_BRPORT_PROXYARP_WIFI
,

305 
	mIFLA_BRPORT_ROOT_ID
,

306 
	mIFLA_BRPORT_BRIDGE_ID
,

307 
	mIFLA_BRPORT_DESIGNATED_PORT
,

308 
	mIFLA_BRPORT_DESIGNATED_COST
,

309 
	mIFLA_BRPORT_ID
,

310 
	mIFLA_BRPORT_NO
,

311 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

312 
	mIFLA_BRPORT_CONFIG_PENDING
,

313 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

314 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

315 
	mIFLA_BRPORT_HOLD_TIMER
,

316 
	mIFLA_BRPORT_FLUSH
,

317 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

318 
	mIFLA_BRPORT_PAD
,

319 
	mIFLA_BRPORT_MCAST_FLOOD
,

320 
	m__IFLA_BRPORT_MAX


322 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

324 
	siÊa_ˇcheöfo
 {

325 
__u32
 
	mmax_ªasm_Àn
;

326 
__u32
 
	mt°amp
;

327 
__u32
 
	mªachabÀ_time
;

328 
__u32
 
	mªå™s_time
;

332 
	mIFLA_INFO_UNSPEC
,

333 
	mIFLA_INFO_KIND
,

334 
	mIFLA_INFO_DATA
,

335 
	mIFLA_INFO_XSTATS
,

336 
	mIFLA_INFO_SLAVE_KIND
,

337 
	mIFLA_INFO_SLAVE_DATA
,

338 
	m__IFLA_INFO_MAX
,

341 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

346 
	mIFLA_VLAN_UNSPEC
,

347 
	mIFLA_VLAN_ID
,

348 
	mIFLA_VLAN_FLAGS
,

349 
	mIFLA_VLAN_EGRESS_QOS
,

350 
	mIFLA_VLAN_INGRESS_QOS
,

351 
	mIFLA_VLAN_PROTOCOL
,

352 
	m__IFLA_VLAN_MAX
,

355 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

357 
	siÊa_vœn_Êags
 {

358 
__u32
 
	mÊags
;

359 
__u32
 
	mmask
;

363 
	mIFLA_VLAN_QOS_UNSPEC
,

364 
	mIFLA_VLAN_QOS_MAPPING
,

365 
	m__IFLA_VLAN_QOS_MAX


368 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

370 
	siÊa_vœn_qos_m≠pög
 {

371 
__u32
 
	m‰om
;

372 
__u32
 
	mto
;

377 
	mIFLA_MACVLAN_UNSPEC
,

378 
	mIFLA_MACVLAN_MODE
,

379 
	mIFLA_MACVLAN_FLAGS
,

380 
	mIFLA_MACVLAN_MACADDR_MODE
,

381 
	mIFLA_MACVLAN_MACADDR
,

382 
	mIFLA_MACVLAN_MACADDR_DATA
,

383 
	mIFLA_MACVLAN_MACADDR_COUNT
,

384 
	m__IFLA_MACVLAN_MAX
,

387 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

389 
	emacvœn_mode
 {

390 
	mMACVLAN_MODE_PRIVATE
 = 1,

391 
	mMACVLAN_MODE_VEPA
 = 2,

392 
	mMACVLAN_MODE_BRIDGE
 = 4,

393 
	mMACVLAN_MODE_PASSTHRU
 = 8,

394 
	mMACVLAN_MODE_SOURCE
 = 16,

397 
	emacvœn_maˇddr_mode
 {

398 
	mMACVLAN_MACADDR_ADD
,

399 
	mMACVLAN_MACADDR_DEL
,

400 
	mMACVLAN_MACADDR_FLUSH
,

401 
	mMACVLAN_MACADDR_SET
,

404 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

408 
	mIFLA_VRF_UNSPEC
,

409 
	mIFLA_VRF_TABLE
,

410 
	m__IFLA_VRF_MAX


413 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

416 
	mIFLA_VRF_PORT_UNSPEC
,

417 
	mIFLA_VRF_PORT_TABLE
,

418 
	m__IFLA_VRF_PORT_MAX


421 
	#IFLA_VRF_PORT_MAX
 (
__IFLA_VRF_PORT_MAX
 - 1)

	)

425 
	mIFLA_MACSEC_UNSPEC
,

426 
	mIFLA_MACSEC_SCI
,

427 
	mIFLA_MACSEC_PORT
,

428 
	mIFLA_MACSEC_ICV_LEN
,

429 
	mIFLA_MACSEC_CIPHER_SUITE
,

430 
	mIFLA_MACSEC_WINDOW
,

431 
	mIFLA_MACSEC_ENCODING_SA
,

432 
	mIFLA_MACSEC_ENCRYPT
,

433 
	mIFLA_MACSEC_PROTECT
,

434 
	mIFLA_MACSEC_INC_SCI
,

435 
	mIFLA_MACSEC_ES
,

436 
	mIFLA_MACSEC_SCB
,

437 
	mIFLA_MACSEC_REPLAY_PROTECT
,

438 
	mIFLA_MACSEC_VALIDATION
,

439 
	mIFLA_MACSEC_PAD
,

440 
	m__IFLA_MACSEC_MAX
,

443 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

445 
	emac£c_vÆid©i⁄_ty≥
 {

446 
	mMACSEC_VALIDATE_DISABLED
 = 0,

447 
	mMACSEC_VALIDATE_CHECK
 = 1,

448 
	mMACSEC_VALIDATE_STRICT
 = 2,

449 
	m__MACSEC_VALIDATE_END
,

450 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

455 
	mIFLA_IPVLAN_UNSPEC
,

456 
	mIFLA_IPVLAN_MODE
,

457 
	m__IFLA_IPVLAN_MAX


460 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

462 
	eùvœn_mode
 {

463 
	mIPVLAN_MODE_L2
 = 0,

464 
	mIPVLAN_MODE_L3
,

465 
	mIPVLAN_MODE_L3S
,

466 
	mIPVLAN_MODE_MAX


471 
	mIFLA_VXLAN_UNSPEC
,

472 
	mIFLA_VXLAN_ID
,

473 
	mIFLA_VXLAN_GROUP
,

474 
	mIFLA_VXLAN_LINK
,

475 
	mIFLA_VXLAN_LOCAL
,

476 
	mIFLA_VXLAN_TTL
,

477 
	mIFLA_VXLAN_TOS
,

478 
	mIFLA_VXLAN_LEARNING
,

479 
	mIFLA_VXLAN_AGEING
,

480 
	mIFLA_VXLAN_LIMIT
,

481 
	mIFLA_VXLAN_PORT_RANGE
,

482 
	mIFLA_VXLAN_PROXY
,

483 
	mIFLA_VXLAN_RSC
,

484 
	mIFLA_VXLAN_L2MISS
,

485 
	mIFLA_VXLAN_L3MISS
,

486 
	mIFLA_VXLAN_PORT
,

487 
	mIFLA_VXLAN_GROUP6
,

488 
	mIFLA_VXLAN_LOCAL6
,

489 
	mIFLA_VXLAN_UDP_CSUM
,

490 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

491 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

492 
	mIFLA_VXLAN_REMCSUM_TX
,

493 
	mIFLA_VXLAN_REMCSUM_RX
,

494 
	mIFLA_VXLAN_GBP
,

495 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

496 
	mIFLA_VXLAN_COLLECT_METADATA
,

497 
	mIFLA_VXLAN_LABEL
,

498 
	mIFLA_VXLAN_GPE
,

499 
	m__IFLA_VXLAN_MAX


501 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

503 
	siÊa_vxœn_p‹t_ønge
 {

504 
__be16
 
	mlow
;

505 
__be16
 
	mhigh
;

510 
	mIFLA_GENEVE_UNSPEC
,

511 
	mIFLA_GENEVE_ID
,

512 
	mIFLA_GENEVE_REMOTE
,

513 
	mIFLA_GENEVE_TTL
,

514 
	mIFLA_GENEVE_TOS
,

515 
	mIFLA_GENEVE_PORT
,

516 
	mIFLA_GENEVE_COLLECT_METADATA
,

517 
	mIFLA_GENEVE_REMOTE6
,

518 
	mIFLA_GENEVE_UDP_CSUM
,

519 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

520 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

521 
	mIFLA_GENEVE_LABEL
,

522 
	m__IFLA_GENEVE_MAX


524 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

528 
	mIFLA_PPP_UNSPEC
,

529 
	mIFLA_PPP_DEV_FD
,

530 
	m__IFLA_PPP_MAX


532 
	#IFLA_PPP_MAX
 (
__IFLA_PPP_MAX
 - 1)

	)

536 
	mIFLA_GTP_UNSPEC
,

537 
	mIFLA_GTP_FD0
,

538 
	mIFLA_GTP_FD1
,

539 
	mIFLA_GTP_PDP_HASHSIZE
,

540 
	m__IFLA_GTP_MAX
,

542 
	#IFLA_GTP_MAX
 (
__IFLA_GTP_MAX
 - 1)

	)

547 
	mIFLA_BOND_UNSPEC
,

548 
	mIFLA_BOND_MODE
,

549 
	mIFLA_BOND_ACTIVE_SLAVE
,

550 
	mIFLA_BOND_MIIMON
,

551 
	mIFLA_BOND_UPDELAY
,

552 
	mIFLA_BOND_DOWNDELAY
,

553 
	mIFLA_BOND_USE_CARRIER
,

554 
	mIFLA_BOND_ARP_INTERVAL
,

555 
	mIFLA_BOND_ARP_IP_TARGET
,

556 
	mIFLA_BOND_ARP_VALIDATE
,

557 
	mIFLA_BOND_ARP_ALL_TARGETS
,

558 
	mIFLA_BOND_PRIMARY
,

559 
	mIFLA_BOND_PRIMARY_RESELECT
,

560 
	mIFLA_BOND_FAIL_OVER_MAC
,

561 
	mIFLA_BOND_XMIT_HASH_POLICY
,

562 
	mIFLA_BOND_RESEND_IGMP
,

563 
	mIFLA_BOND_NUM_PEER_NOTIF
,

564 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

565 
	mIFLA_BOND_MIN_LINKS
,

566 
	mIFLA_BOND_LP_INTERVAL
,

567 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

568 
	mIFLA_BOND_AD_LACP_RATE
,

569 
	mIFLA_BOND_AD_SELECT
,

570 
	mIFLA_BOND_AD_INFO
,

571 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

572 
	mIFLA_BOND_AD_USER_PORT_KEY
,

573 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

574 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

575 
	m__IFLA_BOND_MAX
,

578 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

581 
	mIFLA_BOND_AD_INFO_UNSPEC
,

582 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

583 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

584 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

585 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

586 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

587 
	m__IFLA_BOND_AD_INFO_MAX
,

590 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

593 
	mIFLA_BOND_SLAVE_UNSPEC
,

594 
	mIFLA_BOND_SLAVE_STATE
,

595 
	mIFLA_BOND_SLAVE_MII_STATUS
,

596 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

597 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

598 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

599 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

600 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

601 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

602 
	m__IFLA_BOND_SLAVE_MAX
,

605 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

610 
	mIFLA_VF_INFO_UNSPEC
,

611 
	mIFLA_VF_INFO
,

612 
	m__IFLA_VF_INFO_MAX
,

615 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

618 
	mIFLA_VF_UNSPEC
,

619 
	mIFLA_VF_MAC
,

620 
	mIFLA_VF_VLAN
,

621 
	mIFLA_VF_TX_RATE
,

622 
	mIFLA_VF_SPOOFCHK
,

623 
	mIFLA_VF_LINK_STATE
,

624 
	mIFLA_VF_RATE
,

625 
	mIFLA_VF_RSS_QUERY_EN
,

628 
	mIFLA_VF_STATS
,

629 
	mIFLA_VF_TRUST
,

630 
	mIFLA_VF_IB_NODE_GUID
,

631 
	mIFLA_VF_IB_PORT_GUID
,

632 
	mIFLA_VF_VLAN_LIST
,

633 
	m__IFLA_VF_MAX
,

636 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

638 
	siÊa_vf_mac
 {

639 
__u32
 
	mvf
;

640 
__u8
 
	mmac
[32];

643 
	siÊa_vf_vœn
 {

644 
__u32
 
	mvf
;

645 
__u32
 
	mvœn
;

646 
__u32
 
	mqos
;

650 
	mIFLA_VF_VLAN_INFO_UNSPEC
,

651 
	mIFLA_VF_VLAN_INFO
,

652 
	m__IFLA_VF_VLAN_INFO_MAX
,

655 
	#IFLA_VF_VLAN_INFO_MAX
 (
__IFLA_VF_VLAN_INFO_MAX
 - 1)

	)

656 
	#MAX_VLAN_LIST_LEN
 1

	)

658 
	siÊa_vf_vœn_öfo
 {

659 
__u32
 
	mvf
;

660 
__u32
 
	mvœn
;

661 
__u32
 
	mqos
;

662 
__be16
 
	mvœn_¥Ÿo
;

665 
	siÊa_vf_tx_øã
 {

666 
__u32
 
	mvf
;

667 
__u32
 
	møã
;

670 
	siÊa_vf_øã
 {

671 
__u32
 
	mvf
;

672 
__u32
 
	mmö_tx_øã
;

673 
__u32
 
	mmax_tx_øã
;

676 
	siÊa_vf_•oofchk
 {

677 
__u32
 
	mvf
;

678 
__u32
 
	m£âög
;

681 
	siÊa_vf_guid
 {

682 
__u32
 
	mvf
;

683 
__u64
 
	mguid
;

687 
	mIFLA_VF_LINK_STATE_AUTO
,

688 
	mIFLA_VF_LINK_STATE_ENABLE
,

689 
	mIFLA_VF_LINK_STATE_DISABLE
,

690 
	m__IFLA_VF_LINK_STATE_MAX
,

693 
	siÊa_vf_lök_°©e
 {

694 
__u32
 
	mvf
;

695 
__u32
 
	mlök_°©e
;

698 
	siÊa_vf_rss_quîy_í
 {

699 
__u32
 
	mvf
;

700 
__u32
 
	m£âög
;

704 
	mIFLA_VF_STATS_RX_PACKETS
,

705 
	mIFLA_VF_STATS_TX_PACKETS
,

706 
	mIFLA_VF_STATS_RX_BYTES
,

707 
	mIFLA_VF_STATS_TX_BYTES
,

708 
	mIFLA_VF_STATS_BROADCAST
,

709 
	mIFLA_VF_STATS_MULTICAST
,

710 
	mIFLA_VF_STATS_PAD
,

711 
	m__IFLA_VF_STATS_MAX
,

714 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

716 
	siÊa_vf_åu°
 {

717 
__u32
 
	mvf
;

718 
__u32
 
	m£âög
;

737 
	mIFLA_VF_PORT_UNSPEC
,

738 
	mIFLA_VF_PORT
,

739 
	m__IFLA_VF_PORT_MAX
,

742 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

745 
	mIFLA_PORT_UNSPEC
,

746 
	mIFLA_PORT_VF
,

747 
	mIFLA_PORT_PROFILE
,

748 
	mIFLA_PORT_VSI_TYPE
,

749 
	mIFLA_PORT_INSTANCE_UUID
,

750 
	mIFLA_PORT_HOST_UUID
,

751 
	mIFLA_PORT_REQUEST
,

752 
	mIFLA_PORT_RESPONSE
,

753 
	m__IFLA_PORT_MAX
,

756 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

758 
	#PORT_PROFILE_MAX
 40

	)

759 
	#PORT_UUID_MAX
 16

	)

760 
	#PORT_SELF_VF
 -1

	)

763 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

764 
	mPORT_REQUEST_PREASSOCIATE_RR
,

765 
	mPORT_REQUEST_ASSOCIATE
,

766 
	mPORT_REQUEST_DISASSOCIATE
,

770 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

771 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

772 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

773 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

774 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

775 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

776 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

778 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

779 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

780 
	mPORT_PROFILE_RESPONSE_INVALID
,

781 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

782 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

783 
	mPORT_PROFILE_RESPONSE_ERROR
,

786 
	siÊa_p‹t_vsi
 {

787 
__u8
 
	mvsi_mgr_id
;

788 
__u8
 
	mvsi_ty≥_id
[3];

789 
__u8
 
	mvsi_ty≥_vîsi⁄
;

790 
__u8
 
	m∑d
[3];

797 
	mIFLA_IPOIB_UNSPEC
,

798 
	mIFLA_IPOIB_PKEY
,

799 
	mIFLA_IPOIB_MODE
,

800 
	mIFLA_IPOIB_UMCAST
,

801 
	m__IFLA_IPOIB_MAX


805 
	mIPOIB_MODE_DATAGRAM
 = 0,

806 
	mIPOIB_MODE_CONNECTED
 = 1,

809 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

815 
	mIFLA_HSR_UNSPEC
,

816 
	mIFLA_HSR_SLAVE1
,

817 
	mIFLA_HSR_SLAVE2
,

818 
	mIFLA_HSR_MULTICAST_SPEC
,

819 
	mIFLA_HSR_SUPERVISION_ADDR
,

820 
	mIFLA_HSR_SEQ_NR
,

821 
	mIFLA_HSR_VERSION
,

822 
	m__IFLA_HSR_MAX
,

825 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

829 
	sif_°©s_msg
 {

830 
__u8
 
	mÁmûy
;

831 
__u8
 
	m∑d1
;

832 
__u16
 
	m∑d2
;

833 
__u32
 
	mifödex
;

834 
__u32
 
	mfûãr_mask
;

841 
	mIFLA_STATS_UNSPEC
,

842 
	mIFLA_STATS_LINK_64
,

843 
	mIFLA_STATS_LINK_XSTATS
,

844 
	mIFLA_STATS_LINK_XSTATS_SLAVE
,

845 
	mIFLA_STATS_LINK_OFFLOAD_XSTATS
,

846 
	m__IFLA_STATS_MAX
,

849 
	#IFLA_STATS_MAX
 (
__IFLA_STATS_MAX
 - 1)

	)

851 
	#IFLA_STATS_FILTER_BIT
(
ATTR
Ë(1 << (ATTR - 1))

	)

859 
	mLINK_XSTATS_TYPE_UNSPEC
,

860 
	mLINK_XSTATS_TYPE_BRIDGE
,

861 
	m__LINK_XSTATS_TYPE_MAX


863 
	#LINK_XSTATS_TYPE_MAX
 (
__LINK_XSTATS_TYPE_MAX
 - 1)

	)

867 
	mIFLA_OFFLOAD_XSTATS_UNSPEC
,

868 
	mIFLA_OFFLOAD_XSTATS_CPU_HIT
,

869 
	m__IFLA_OFFLOAD_XSTATS_MAX


871 
	#IFLA_OFFLOAD_XSTATS_MAX
 (
__IFLA_OFFLOAD_XSTATS_MAX
 - 1)

	)

876 
	mIFLA_XDP_UNSPEC
,

877 
	mIFLA_XDP_FD
,

878 
	mIFLA_XDP_ATTACHED
,

879 
	m__IFLA_XDP_MAX
,

882 
	#IFLA_XDP_MAX
 (
__IFLA_XDP_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

57 
	#PACKET_ROLLOVER_STATS
 21

	)

58 
	#PACKET_FANOUT_DATA
 22

	)

60 
	#PACKET_FANOUT_HASH
 0

	)

61 
	#PACKET_FANOUT_LB
 1

	)

62 
	#PACKET_FANOUT_CPU
 2

	)

63 
	#PACKET_FANOUT_ROLLOVER
 3

	)

64 
	#PACKET_FANOUT_RND
 4

	)

65 
	#PACKET_FANOUT_QM
 5

	)

66 
	#PACKET_FANOUT_CBPF
 6

	)

67 
	#PACKET_FANOUT_EBPF
 7

	)

68 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

69 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

71 
	sçackë_°©s
 {

72 
	mç_∑ckës
;

73 
	mç_dr›s
;

76 
	sçackë_°©s_v3
 {

77 
	mç_∑ckës
;

78 
	mç_dr›s
;

79 
	mç_‰ìze_q_˙t
;

82 
	sçackë_rﬁlovî_°©s
 {

83 
__Æig√d_u64
 
	mç_Æl
;

84 
__Æig√d_u64
 
	mç_huge
;

85 
__Æig√d_u64
 
	mç_Áûed
;

88 
	uçackë_°©s_u
 {

89 
çackë_°©s
 
	m°©s1
;

90 
çackë_°©s_v3
 
	m°©s3
;

93 
	sçackë_auxd©a
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u16
 
	mç_vœn_tci
;

100 
__u16
 
	mç_vœn_çid
;

104 
	#TP_STATUS_KERNEL
 0

	)

105 
	#TP_STATUS_USER
 (1 << 0)

	)

106 
	#TP_STATUS_COPY
 (1 << 1)

	)

107 
	#TP_STATUS_LOSING
 (1 << 2)

	)

108 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

109 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

110 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

111 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

112 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

115 
	#TP_STATUS_AVAILABLE
 0

	)

116 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

117 
	#TP_STATUS_SENDING
 (1 << 1)

	)

118 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

121 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

122 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

123 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

126 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

128 
	sçackë_hdr
 {

129 
	mç_°©us
;

130 
	mç_Àn
;

131 
	mç_¢≠Àn
;

132 
	mç_mac
;

133 
	mç_√t
;

134 
	mç_£c
;

135 
	mç_u£c
;

138 
	#TPACKET_ALIGNMENT
 16

	)

139 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

140 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

142 
	sçackë2_hdr
 {

143 
__u32
 
	mç_°©us
;

144 
__u32
 
	mç_Àn
;

145 
__u32
 
	mç_¢≠Àn
;

146 
__u16
 
	mç_mac
;

147 
__u16
 
	mç_√t
;

148 
__u32
 
	mç_£c
;

149 
__u32
 
	mç_n£c
;

150 
__u16
 
	mç_vœn_tci
;

151 
__u16
 
	mç_vœn_çid
;

152 
__u8
 
	mç_∑ddög
[4];

155 
	sçackë_hdr_v¨ü¡1
 {

156 
__u32
 
	mç_rxhash
;

157 
__u32
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u16
 
	mç_∑ddög
;

162 
	sçackë3_hdr
 {

163 
__u32
 
	mç_√xt_off£t
;

164 
__u32
 
	mç_£c
;

165 
__u32
 
	mç_n£c
;

166 
__u32
 
	mç_¢≠Àn
;

167 
__u32
 
	mç_Àn
;

168 
__u32
 
	mç_°©us
;

169 
__u16
 
	mç_mac
;

170 
__u16
 
	mç_√t
;

173 
çackë_hdr_v¨ü¡1
 
	mhv1
;

175 
__u8
 
	mç_∑ddög
[8];

178 
	sçackë_bd_ts
 {

179 
	mts_£c
;

181 
	mts_u£c
;

182 
	mts_n£c
;

186 
	sçackë_hdr_v1
 {

187 
__u32
 
	mblock_°©us
;

188 
__u32
 
	mnum_pkts
;

189 
__u32
 
	moff£t_to_fú°_pkt
;

194 
__u32
 
	mblk_Àn
;

205 
__Æig√d_u64
 
	m£q_num
;

232 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

235 
	uçackë_bd_hódî_u
 {

236 
çackë_hdr_v1
 
	mbh1
;

239 
	sçackë_block_desc
 {

240 
__u32
 
	mvîsi⁄
;

241 
__u32
 
	moff£t_to_¥iv
;

242 
çackë_bd_hódî_u
 
	mhdr
;

245 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

246 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

248 
	eçackë_vîsi⁄s
 {

249 
	mTPACKET_V1
,

250 
	mTPACKET_V2
,

251 
	mTPACKET_V3


267 
	sçackë_ªq
 {

268 
	mç_block_size
;

269 
	mç_block_ƒ
;

270 
	mç_‰ame_size
;

271 
	mç_‰ame_ƒ
;

274 
	sçackë_ªq3
 {

275 
	mç_block_size
;

276 
	mç_block_ƒ
;

277 
	mç_‰ame_size
;

278 
	mç_‰ame_ƒ
;

279 
	mç_ªtúe_blk_tov
;

280 
	mç_sizeof_¥iv
;

281 
	mç_„©uª_ªq_w‹d
;

284 
	uçackë_ªq_u
 {

285 
çackë_ªq
 
	mªq
;

286 
çackë_ªq3
 
	mªq3
;

289 
	s∑ckë_mªq
 {

290 
	mmr_ifödex
;

291 
	mmr_ty≥
;

292 
	mmr_Æí
;

293 
	mmr_addªss
[8];

296 
	#PACKET_MR_MULTICAST
 0

	)

297 
	#PACKET_MR_PROMISC
 1

	)

298 
	#PACKET_MR_ALLMULTI
 2

	)

299 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/sockë.h
>

25 #i‡
__UAPI_DEF_IN_IPPROTO


28 
	mIPPROTO_IP
 = 0,

29 
	#IPPROTO_IP
 
IPPROTO_IP


	)

30 
	mIPPROTO_ICMP
 = 1,

31 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

32 
	mIPPROTO_IGMP
 = 2,

33 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

34 
	mIPPROTO_IPIP
 = 4,

35 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

36 
	mIPPROTO_TCP
 = 6,

37 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

38 
	mIPPROTO_EGP
 = 8,

39 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

40 
	mIPPROTO_PUP
 = 12,

41 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

42 
	mIPPROTO_UDP
 = 17,

43 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

44 
	mIPPROTO_IDP
 = 22,

45 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

46 
	mIPPROTO_TP
 = 29,

47 
	#IPPROTO_TP
 
IPPROTO_TP


	)

48 
	mIPPROTO_DCCP
 = 33,

49 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

50 
	mIPPROTO_IPV6
 = 41,

51 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

52 
	mIPPROTO_RSVP
 = 46,

53 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

54 
	mIPPROTO_GRE
 = 47,

55 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

56 
	mIPPROTO_ESP
 = 50,

57 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

58 
	mIPPROTO_AH
 = 51,

59 
	#IPPROTO_AH
 
IPPROTO_AH


	)

60 
	mIPPROTO_MTP
 = 92,

61 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

62 
	mIPPROTO_BEETPH
 = 94,

63 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

64 
	mIPPROTO_ENCAP
 = 98,

65 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

66 
	mIPPROTO_PIM
 = 103,

67 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

68 
	mIPPROTO_COMP
 = 108,

69 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

70 
	mIPPROTO_SCTP
 = 132,

71 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

72 
	mIPPROTO_UDPLITE
 = 136,

73 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

74 
	mIPPROTO_MPLS
 = 137,

75 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

76 
	mIPPROTO_RAW
 = 255,

77 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

78 
	mIPPROTO_MAX


82 #i‡
__UAPI_DEF_IN_ADDR


84 
	sö_addr
 {

85 
__be32
 
	ms_addr
;

89 
	#IP_TOS
 1

	)

90 
	#IP_TTL
 2

	)

91 
	#IP_HDRINCL
 3

	)

92 
	#IP_OPTIONS
 4

	)

93 
	#IP_ROUTER_ALERT
 5

	)

94 
	#IP_RECVOPTS
 6

	)

95 
	#IP_RETOPTS
 7

	)

96 
	#IP_PKTINFO
 8

	)

97 
	#IP_PKTOPTIONS
 9

	)

98 
	#IP_MTU_DISCOVER
 10

	)

99 
	#IP_RECVERR
 11

	)

100 
	#IP_RECVTTL
 12

	)

101 
	#IP_RECVTOS
 13

	)

102 
	#IP_MTU
 14

	)

103 
	#IP_FREEBIND
 15

	)

104 
	#IP_IPSEC_POLICY
 16

	)

105 
	#IP_XFRM_POLICY
 17

	)

106 
	#IP_PASSSEC
 18

	)

107 
	#IP_TRANSPARENT
 19

	)

110 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

113 
	#IP_ORIGDSTADDR
 20

	)

114 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

116 
	#IP_MINTTL
 21

	)

117 
	#IP_NODEFRAG
 22

	)

118 
	#IP_CHECKSUM
 23

	)

119 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

122 
	#IP_PMTUDISC_DONT
 0

	)

123 
	#IP_PMTUDISC_WANT
 1

	)

124 
	#IP_PMTUDISC_DO
 2

	)

125 
	#IP_PMTUDISC_PROBE
 3

	)

130 
	#IP_PMTUDISC_INTERFACE
 4

	)

134 
	#IP_PMTUDISC_OMIT
 5

	)

136 
	#IP_MULTICAST_IF
 32

	)

137 
	#IP_MULTICAST_TTL
 33

	)

138 
	#IP_MULTICAST_LOOP
 34

	)

139 
	#IP_ADD_MEMBERSHIP
 35

	)

140 
	#IP_DROP_MEMBERSHIP
 36

	)

141 
	#IP_UNBLOCK_SOURCE
 37

	)

142 
	#IP_BLOCK_SOURCE
 38

	)

143 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

144 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

145 
	#IP_MSFILTER
 41

	)

146 
	#MCAST_JOIN_GROUP
 42

	)

147 
	#MCAST_BLOCK_SOURCE
 43

	)

148 
	#MCAST_UNBLOCK_SOURCE
 44

	)

149 
	#MCAST_LEAVE_GROUP
 45

	)

150 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

151 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

152 
	#MCAST_MSFILTER
 48

	)

153 
	#IP_MULTICAST_ALL
 49

	)

154 
	#IP_UNICAST_IF
 50

	)

156 
	#MCAST_EXCLUDE
 0

	)

157 
	#MCAST_INCLUDE
 1

	)

160 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

161 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

165 #i‡
__UAPI_DEF_IP_MREQ


166 
	sù_mªq
 {

167 
ö_addr
 
	mimr_mu…üddr
;

168 
ö_addr
 
	mimr_öãrÁ˚
;

171 
	sù_mªqn
 {

172 
ö_addr
 
	mimr_mu…üddr
;

173 
ö_addr
 
	mimr_addªss
;

174 
	mimr_ifödex
;

177 
	sù_mªq_sour˚
 {

178 
__be32
 
	mimr_mu…üddr
;

179 
__be32
 
	mimr_öãrÁ˚
;

180 
__be32
 
	mimr_sour˚addr
;

183 
	sù_msfûãr
 {

184 
__be32
 
	mimsf_mu…üddr
;

185 
__be32
 
	mimsf_öãrÁ˚
;

186 
__u32
 
	mimsf_fmode
;

187 
__u32
 
	mimsf_num§c
;

188 
__be32
 
	mimsf_¶i°
[1];

191 
	#IP_MSFILTER_SIZE
(
num§c
) \

192 ((
ù_msfûãr
Ë- (
__u32
) \

193 + (
num§c
Ë* (
__u32
))

	)

195 
	sgroup_ªq
 {

196 
__u32
 
	mgr_öãrÁ˚
;

197 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

200 
	sgroup_sour˚_ªq
 {

201 
__u32
 
	mg§_öãrÁ˚
;

202 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

203 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

206 
	sgroup_fûãr
 {

207 
__u32
 
	mgf_öãrÁ˚
;

208 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

209 
__u32
 
	mgf_fmode
;

210 
__u32
 
	mgf_num§c
;

211 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

214 
	#GROUP_FILTER_SIZE
(
num§c
) \

215 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

216 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

219 #i‡
__UAPI_DEF_IN_PKTINFO


220 
	sö_pktöfo
 {

221 
	mùi_ifödex
;

222 
ö_addr
 
	mùi_•ec_d°
;

223 
ö_addr
 
	mùi_addr
;

228 #i‡ 
__UAPI_DEF_SOCKADDR_IN


229 
	#__SOCK_SIZE__
 16

	)

230 
	ssockaddr_ö
 {

231 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

232 
__be16
 
	msö_p‹t
;

233 
ö_addr
 
	msö_addr
;

236 
	m__∑d
[
__SOCK_SIZE__
 - () -

237 (Ë- (
ö_addr
)];

239 
	#sö_zîo
 
__∑d


	)

242 #i‡
__UAPI_DEF_IN_CLASS


248 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

249 
	#IN_CLASSA_NET
 0xff000000

	)

250 
	#IN_CLASSA_NSHIFT
 24

	)

251 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

252 
	#IN_CLASSA_MAX
 128

	)

254 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

255 
	#IN_CLASSB_NET
 0xffff0000

	)

256 
	#IN_CLASSB_NSHIFT
 16

	)

257 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

258 
	#IN_CLASSB_MAX
 65536

	)

260 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

261 
	#IN_CLASSC_NET
 0xffffff00

	)

262 
	#IN_CLASSC_NSHIFT
 8

	)

263 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

265 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

266 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

267 
	#IN_MULTICAST_NET
 0xF0000000

	)

269 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

270 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

273 
	#INADDR_ANY
 ((Ë0x00000000)

	)

276 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

279 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

282 
	#IN_LOOPBACKNET
 127

	)

285 
	#INADDR_LOOPBACK
 0x7f000001

	)

286 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

289 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

290 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

291 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

292 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

296 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_CALIPSO
 7

	)

147 
	#IPV6_TLV_JUMBO
 194

	)

148 
	#IPV6_TLV_HAO
 201

	)

153 #i‡
__UAPI_DEF_IPV6_OPTIONS


154 
	#IPV6_ADDRFORM
 1

	)

155 
	#IPV6_2292PKTINFO
 2

	)

156 
	#IPV6_2292HOPOPTS
 3

	)

157 
	#IPV6_2292DSTOPTS
 4

	)

158 
	#IPV6_2292RTHDR
 5

	)

159 
	#IPV6_2292PKTOPTIONS
 6

	)

160 
	#IPV6_CHECKSUM
 7

	)

161 
	#IPV6_2292HOPLIMIT
 8

	)

162 
	#IPV6_NEXTHOP
 9

	)

163 
	#IPV6_AUTHHDR
 10

	)

164 
	#IPV6_FLOWINFO
 11

	)

166 
	#IPV6_UNICAST_HOPS
 16

	)

167 
	#IPV6_MULTICAST_IF
 17

	)

168 
	#IPV6_MULTICAST_HOPS
 18

	)

169 
	#IPV6_MULTICAST_LOOP
 19

	)

170 
	#IPV6_ADD_MEMBERSHIP
 20

	)

171 
	#IPV6_DROP_MEMBERSHIP
 21

	)

172 
	#IPV6_ROUTER_ALERT
 22

	)

173 
	#IPV6_MTU_DISCOVER
 23

	)

174 
	#IPV6_MTU
 24

	)

175 
	#IPV6_RECVERR
 25

	)

176 
	#IPV6_V6ONLY
 26

	)

177 
	#IPV6_JOIN_ANYCAST
 27

	)

178 
	#IPV6_LEAVE_ANYCAST
 28

	)

181 
	#IPV6_PMTUDISC_DONT
 0

	)

182 
	#IPV6_PMTUDISC_WANT
 1

	)

183 
	#IPV6_PMTUDISC_DO
 2

	)

184 
	#IPV6_PMTUDISC_PROBE
 3

	)

188 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

192 
	#IPV6_PMTUDISC_OMIT
 5

	)

195 
	#IPV6_FLOWLABEL_MGR
 32

	)

196 
	#IPV6_FLOWINFO_SEND
 33

	)

198 
	#IPV6_IPSEC_POLICY
 34

	)

199 
	#IPV6_XFRM_POLICY
 35

	)

200 
	#IPV6_HDRINCL
 36

	)

222 
	#IPV6_RECVPKTINFO
 49

	)

223 
	#IPV6_PKTINFO
 50

	)

224 
	#IPV6_RECVHOPLIMIT
 51

	)

225 
	#IPV6_HOPLIMIT
 52

	)

226 
	#IPV6_RECVHOPOPTS
 53

	)

227 
	#IPV6_HOPOPTS
 54

	)

228 
	#IPV6_RTHDRDSTOPTS
 55

	)

229 
	#IPV6_RECVRTHDR
 56

	)

230 
	#IPV6_RTHDR
 57

	)

231 
	#IPV6_RECVDSTOPTS
 58

	)

232 
	#IPV6_DSTOPTS
 59

	)

233 
	#IPV6_RECVPATHMTU
 60

	)

234 
	#IPV6_PATHMTU
 61

	)

235 
	#IPV6_DONTFRAG
 62

	)

237 
	#IPV6_USE_MIN_MTU
 63

	)

253 
	#IPV6_RECVTCLASS
 66

	)

254 
	#IPV6_TCLASS
 67

	)

267 
	#IPV6_AUTOFLOWLABEL
 70

	)

269 
	#IPV6_ADDR_PREFERENCES
 72

	)

271 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

272 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

273 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

274 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

275 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

276 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

277 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

280 
	#IPV6_MINHOPCOUNT
 73

	)

282 
	#IPV6_ORIGDSTADDR
 74

	)

283 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

284 
	#IPV6_TRANSPARENT
 75

	)

285 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

60 
	#__UAPI_DEF_IF_IFCONF
 0

	)

61 
	#__UAPI_DEF_IF_IFMAP
 0

	)

62 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

63 
	#__UAPI_DEF_IF_IFREQ
 0

	)

65 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

67 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


68 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

77 
	#__UAPI_DEF_IF_IFCONF
 1

	)

78 
	#__UAPI_DEF_IF_IFMAP
 1

	)

79 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

80 
	#__UAPI_DEF_IF_IFREQ
 1

	)

82 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

84 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

89 #i‡
deföed
(
_NETINET_IN_H
)

93 
	#__UAPI_DEF_IN_ADDR
 0

	)

94 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

95 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

96 
	#__UAPI_DEF_IP_MREQ
 0

	)

97 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

98 
	#__UAPI_DEF_IN_CLASS
 0

	)

100 
	#__UAPI_DEF_IN6_ADDR
 0

	)

105 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

106 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

108 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

110 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

111 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

112 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

113 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

114 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

115 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

122 
	#__UAPI_DEF_IN_ADDR
 1

	)

123 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

124 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

125 
	#__UAPI_DEF_IP_MREQ
 1

	)

126 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

127 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

132 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

133 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

134 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

135 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

136 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

137 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

138 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

143 #i‡
deföed
(
__NETIPX_IPX_H
)

145 
	#__UAPI_DEF_SOCKADDR_IPX
 0

	)

146 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 0

	)

147 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 0

	)

148 
	#__UAPI_DEF_IPX_CONFIG_DATA
 0

	)

149 
	#__UAPI_DEF_IPX_ROUTE_DEF
 0

	)

153 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

154 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

155 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

156 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

157 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

162 #i‡
deföed
(
_SYS_XATTR_H
)

163 
	#__UAPI_DEF_XATTR
 0

	)

165 
	#__UAPI_DEF_XATTR
 1

	)

175 #i‚de‡
__UAPI_DEF_IF_IFCONF


176 
	#__UAPI_DEF_IF_IFCONF
 1

	)

178 #i‚de‡
__UAPI_DEF_IF_IFMAP


179 
	#__UAPI_DEF_IF_IFMAP
 1

	)

181 #i‚de‡
__UAPI_DEF_IF_IFNAMSIZ


182 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

184 #i‚de‡
__UAPI_DEF_IF_IFREQ


185 
	#__UAPI_DEF_IF_IFREQ
 1

	)

188 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


189 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

192 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


193 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

197 #i‚de‡
__UAPI_DEF_IN_ADDR


198 
	#__UAPI_DEF_IN_ADDR
 1

	)

200 #i‚de‡
__UAPI_DEF_IN_IPPROTO


201 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

203 #i‚de‡
__UAPI_DEF_IN_PKTINFO


204 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

206 #i‚de‡
__UAPI_DEF_IP_MREQ


207 
	#__UAPI_DEF_IP_MREQ
 1

	)

209 #i‚de‡
__UAPI_DEF_SOCKADDR_IN


210 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

212 #i‚de‡
__UAPI_DEF_IN_CLASS


213 
	#__UAPI_DEF_IN_CLASS
 1

	)

217 #i‚de‡
__UAPI_DEF_IN6_ADDR


218 
	#__UAPI_DEF_IN6_ADDR
 1

	)

220 #i‚de‡
__UAPI_DEF_IN6_ADDR_ALT


221 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

223 #i‚de‡
__UAPI_DEF_SOCKADDR_IN6


224 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

226 #i‚de‡
__UAPI_DEF_IPV6_MREQ


227 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

229 #i‚de‡
__UAPI_DEF_IPPROTO_V6


230 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

232 #i‚de‡
__UAPI_DEF_IPV6_OPTIONS


233 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

235 #i‚de‡
__UAPI_DEF_IN6_PKTINFO


236 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

238 #i‚de‡
__UAPI_DEF_IP6_MTUINFO


239 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

243 #i‚de‡
__UAPI_DEF_SOCKADDR_IPX


244 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

246 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEFINITION


247 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

249 #i‚de‡
__UAPI_DEF_IPX_INTERFACE_DEFINITION


250 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

252 #i‚de‡
__UAPI_DEF_IPX_CONFIG_DATA


253 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

255 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEF


256 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

260 #i‚de‡
__UAPI_DEF_XATTR


261 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	#CTL_MAXNAME
 10

	)

34 
	s__sys˘l_¨gs
 {

35 *
	m«me
;

36 
	m∆í
;

37 *
	mﬁdvÆ
;

38 
size_t
 *
	mﬁdÀ≈
;

39 *
	m√wvÆ
;

40 
size_t
 
	m√wÀn
;

41 
	m__unu£d
[4];

50 
	mCTL_KERN
=1,

51 
	mCTL_VM
=2,

52 
	mCTL_NET
=3,

53 
	mCTL_PROC
=4,

54 
	mCTL_FS
=5,

55 
	mCTL_DEBUG
=6,

56 
	mCTL_DEV
=7,

57 
	mCTL_BUS
=8,

58 
	mCTL_ABI
=9,

59 
	mCTL_CPU
=10,

60 
	mCTL_ARLAN
=254,

61 
	mCTL_S390DBF
=5677,

62 
	mCTL_SUNRPC
=7249,

63 
	mCTL_PM
=9899,

64 
	mCTL_FRV
=9898,

70 
	mCTL_BUS_ISA
=1

76 
	mINOTIFY_MAX_USER_INSTANCES
=1,

77 
	mINOTIFY_MAX_USER_WATCHES
=2,

78 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

84 
	mKERN_OSTYPE
=1,

85 
	mKERN_OSRELEASE
=2,

86 
	mKERN_OSREV
=3,

87 
	mKERN_VERSION
=4,

88 
	mKERN_SECUREMASK
=5,

89 
	mKERN_PROF
=6,

90 
	mKERN_NODENAME
=7,

91 
	mKERN_DOMAINNAME
=8,

93 
	mKERN_PANIC
=15,

94 
	mKERN_REALROOTDEV
=16,

96 
	mKERN_SPARC_REBOOT
=21,

97 
	mKERN_CTLALTDEL
=22,

98 
	mKERN_PRINTK
=23,

99 
	mKERN_NAMETRANS
=24,

100 
	mKERN_PPC_HTABRECLAIM
=25,

101 
	mKERN_PPC_ZEROPAGED
=26,

102 
	mKERN_PPC_POWERSAVE_NAP
=27,

103 
	mKERN_MODPROBE
=28,

104 
	mKERN_SG_BIG_BUFF
=29,

105 
	mKERN_ACCT
=30,

106 
	mKERN_PPC_L2CR
=31,

108 
	mKERN_RTSIGNR
=32,

109 
	mKERN_RTSIGMAX
=33,

111 
	mKERN_SHMMAX
=34,

112 
	mKERN_MSGMAX
=35,

113 
	mKERN_MSGMNB
=36,

114 
	mKERN_MSGPOOL
=37,

115 
	mKERN_SYSRQ
=38,

116 
	mKERN_MAX_THREADS
=39,

117 
	mKERN_RANDOM
=40,

118 
	mKERN_SHMALL
=41,

119 
	mKERN_MSGMNI
=42,

120 
	mKERN_SEM
=43,

121 
	mKERN_SPARC_STOP_A
=44,

122 
	mKERN_SHMMNI
=45,

123 
	mKERN_OVERFLOWUID
=46,

124 
	mKERN_OVERFLOWGID
=47,

125 
	mKERN_SHMPATH
=48,

126 
	mKERN_HOTPLUG
=49,

127 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

128 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

129 
	mKERN_CORE_USES_PID
=52,

130 
	mKERN_TAINTED
=53,

131 
	mKERN_CADPID
=54,

132 
	mKERN_PIDMAX
=55,

133 
	mKERN_CORE_PATTERN
=56,

134 
	mKERN_PANIC_ON_OOPS
=57,

135 
	mKERN_HPPA_PWRSW
=58,

136 
	mKERN_HPPA_UNALIGNED
=59,

137 
	mKERN_PRINTK_RATELIMIT
=60,

138 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

139 
	mKERN_PTY
=62,

140 
	mKERN_NGROUPS_MAX
=63,

141 
	mKERN_SPARC_SCONS_PWROFF
=64,

142 
	mKERN_HZ_TIMER
=65,

143 
	mKERN_UNKNOWN_NMI_PANIC
=66,

144 
	mKERN_BOOTLOADER_TYPE
=67,

145 
	mKERN_RANDOMIZE
=68,

146 
	mKERN_SETUID_DUMPABLE
=69,

147 
	mKERN_SPIN_RETRY
=70,

148 
	mKERN_ACPI_VIDEO_FLAGS
=71,

149 
	mKERN_IA64_UNALIGNED
=72,

150 
	mKERN_COMPAT_LOG
=73,

151 
	mKERN_MAX_LOCK_DEPTH
=74,

152 
	mKERN_NMI_WATCHDOG
=75,

153 
	mKERN_PANIC_ON_NMI
=76,

154 
	mKERN_PANIC_ON_WARN
=77,

162 
	mVM_UNUSED1
=1,

163 
	mVM_UNUSED2
=2,

164 
	mVM_UNUSED3
=3,

165 
	mVM_UNUSED4
=4,

166 
	mVM_OVERCOMMIT_MEMORY
=5,

167 
	mVM_UNUSED5
=6,

168 
	mVM_UNUSED7
=7,

169 
	mVM_UNUSED8
=8,

170 
	mVM_UNUSED9
=9,

171 
	mVM_PAGE_CLUSTER
=10,

172 
	mVM_DIRTY_BACKGROUND
=11,

173 
	mVM_DIRTY_RATIO
=12,

174 
	mVM_DIRTY_WB_CS
=13,

175 
	mVM_DIRTY_EXPIRE_CS
=14,

176 
	mVM_NR_PDFLUSH_THREADS
=15,

177 
	mVM_OVERCOMMIT_RATIO
=16,

178 
	mVM_PAGEBUF
=17,

179 
	mVM_HUGETLB_PAGES
=18,

180 
	mVM_SWAPPINESS
=19,

181 
	mVM_LOWMEM_RESERVE_RATIO
=20,

182 
	mVM_MIN_FREE_KBYTES
=21,

183 
	mVM_MAX_MAP_COUNT
=22,

184 
	mVM_LAPTOP_MODE
=23,

185 
	mVM_BLOCK_DUMP
=24,

186 
	mVM_HUGETLB_GROUP
=25,

187 
	mVM_VFS_CACHE_PRESSURE
=26,

188 
	mVM_LEGACY_VA_LAYOUT
=27,

189 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

190 
	mVM_DROP_PAGECACHE
=29,

191 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

192 
	mVM_ZONE_RECLAIM_MODE
=31,

193 
	mVM_MIN_UNMAPPED
=32,

194 
	mVM_PANIC_ON_OOM
=33,

195 
	mVM_VDSO_ENABLED
=34,

196 
	mVM_MIN_SLAB
=35,

203 
	mNET_CORE
=1,

204 
	mNET_ETHER
=2,

205 
	mNET_802
=3,

206 
	mNET_UNIX
=4,

207 
	mNET_IPV4
=5,

208 
	mNET_IPX
=6,

209 
	mNET_ATALK
=7,

210 
	mNET_NETROM
=8,

211 
	mNET_AX25
=9,

212 
	mNET_BRIDGE
=10,

213 
	mNET_ROSE
=11,

214 
	mNET_IPV6
=12,

215 
	mNET_X25
=13,

216 
	mNET_TR
=14,

217 
	mNET_DECNET
=15,

218 
	mNET_ECONET
=16,

219 
	mNET_SCTP
=17,

220 
	mNET_LLC
=18,

221 
	mNET_NETFILTER
=19,

222 
	mNET_DCCP
=20,

223 
	mNET_IRDA
=412,

229 
	mRANDOM_POOLSIZE
=1,

230 
	mRANDOM_ENTROPY_COUNT
=2,

231 
	mRANDOM_READ_THRESH
=3,

232 
	mRANDOM_WRITE_THRESH
=4,

233 
	mRANDOM_BOOT_ID
=5,

234 
	mRANDOM_UUID
=6

240 
	mPTY_MAX
=1,

241 
	mPTY_NR
=2

247 
	mBUS_ISA_MEM_BASE
=1,

248 
	mBUS_ISA_PORT_BASE
=2,

249 
	mBUS_ISA_PORT_SHIFT
=3

255 
	mNET_CORE_WMEM_MAX
=1,

256 
	mNET_CORE_RMEM_MAX
=2,

257 
	mNET_CORE_WMEM_DEFAULT
=3,

258 
	mNET_CORE_RMEM_DEFAULT
=4,

260 
	mNET_CORE_MAX_BACKLOG
=6,

261 
	mNET_CORE_FASTROUTE
=7,

262 
	mNET_CORE_MSG_COST
=8,

263 
	mNET_CORE_MSG_BURST
=9,

264 
	mNET_CORE_OPTMEM_MAX
=10,

265 
	mNET_CORE_HOT_LIST_LENGTH
=11,

266 
	mNET_CORE_DIVERT_VERSION
=12,

267 
	mNET_CORE_NO_CONG_THRESH
=13,

268 
	mNET_CORE_NO_CONG
=14,

269 
	mNET_CORE_LO_CONG
=15,

270 
	mNET_CORE_MOD_CONG
=16,

271 
	mNET_CORE_DEV_WEIGHT
=17,

272 
	mNET_CORE_SOMAXCONN
=18,

273 
	mNET_CORE_BUDGET
=19,

274 
	mNET_CORE_AEVENT_ETIME
=20,

275 
	mNET_CORE_AEVENT_RSEQTH
=21,

276 
	mNET_CORE_WARNINGS
=22,

287 
	mNET_UNIX_DESTROY_DELAY
=1,

288 
	mNET_UNIX_DELETE_DELAY
=2,

289 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

295 
	mNET_NF_CONNTRACK_MAX
=1,

296 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

304 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

306 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

307 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

308 
	mNET_NF_CONNTRACK_BUCKETS
=14,

309 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

310 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

311 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

312 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

313 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

314 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

321 
	mNET_NF_CONNTRACK_COUNT
=27,

322 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

323 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

324 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

325 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

326 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

333 
	mNET_IPV4_FORWARD
=8,

334 
	mNET_IPV4_DYNADDR
=9,

336 
	mNET_IPV4_CONF
=16,

337 
	mNET_IPV4_NEIGH
=17,

338 
	mNET_IPV4_ROUTE
=18,

339 
	mNET_IPV4_FIB_HASH
=19,

340 
	mNET_IPV4_NETFILTER
=20,

342 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

343 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

344 
	mNET_IPV4_TCP_SACK
=35,

345 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

346 
	mNET_IPV4_DEFAULT_TTL
=37,

347 
	mNET_IPV4_AUTOCONFIG
=38,

348 
	mNET_IPV4_NO_PMTU_DISC
=39,

349 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

350 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

351 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

352 
	mNET_IPV4_IPFRAG_TIME
=43,

353 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

354 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

355 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

356 
	mNET_IPV4_TCP_RETRIES1
=47,

357 
	mNET_IPV4_TCP_RETRIES2
=48,

358 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

359 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

360 
	mNET_TCP_SYNCOOKIES
=51,

361 
	mNET_TCP_STDURG
=52,

362 
	mNET_TCP_RFC1337
=53,

363 
	mNET_TCP_SYN_TAILDROP
=54,

364 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

365 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

366 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

368 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

369 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

370 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

371 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

372 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

373 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

374 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

375 
	mNET_TCP_TW_RECYCLE
=66,

376 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

377 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

378 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

379 
	mNET_IPV4_INET_PEER_MINTTL
=70,

380 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

381 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

382 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

383 
	mNET_TCP_ORPHAN_RETRIES
=74,

384 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

385 
	mNET_TCP_SYNACK_RETRIES
=76,

386 
	mNET_TCP_MAX_ORPHANS
=77,

387 
	mNET_TCP_MAX_TW_BUCKETS
=78,

388 
	mNET_TCP_FACK
=79,

389 
	mNET_TCP_REORDERING
=80,

390 
	mNET_TCP_ECN
=81,

391 
	mNET_TCP_DSACK
=82,

392 
	mNET_TCP_MEM
=83,

393 
	mNET_TCP_WMEM
=84,

394 
	mNET_TCP_RMEM
=85,

395 
	mNET_TCP_APP_WIN
=86,

396 
	mNET_TCP_ADV_WIN_SCALE
=87,

397 
	mNET_IPV4_NONLOCAL_BIND
=88,

398 
	mNET_IPV4_ICMP_RATELIMIT
=89,

399 
	mNET_IPV4_ICMP_RATEMASK
=90,

400 
	mNET_TCP_TW_REUSE
=91,

401 
	mNET_TCP_FRTO
=92,

402 
	mNET_TCP_LOW_LATENCY
=93,

403 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

404 
	mNET_IPV4_IGMP_MAX_MSF
=96,

405 
	mNET_TCP_NO_METRICS_SAVE
=97,

406 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

407 
	mNET_TCP_MODERATE_RCVBUF
=106,

408 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

409 
	mNET_TCP_BIC_BETA
=108,

410 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

411 
	mNET_TCP_CONG_CONTROL
=110,

412 
	mNET_TCP_ABC
=111,

413 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

414 
	mNET_TCP_MTU_PROBING
=113,

415 
	mNET_TCP_BASE_MSS
=114,

416 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

417 
	mNET_TCP_DMA_COPYBREAK
=116,

418 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

419 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

420 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

421 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

422 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

423 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

424 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

425 
	mNET_TCP_MAX_SSTHRESH
=124,

426 
	mNET_TCP_FRTO_RESPONSE
=125,

430 
	mNET_IPV4_ROUTE_FLUSH
=1,

431 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

432 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

433 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

434 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

435 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

436 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

437 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

438 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

439 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

440 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

441 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

442 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

443 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

444 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

445 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

446 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

447 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

448 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

453 
	mNET_PROTO_CONF_ALL
=-2,

454 
	mNET_PROTO_CONF_DEFAULT
=-3

461 
	mNET_IPV4_CONF_FORWARDING
=1,

462 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

463 
	mNET_IPV4_CONF_PROXY_ARP
=3,

464 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

465 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

466 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

467 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

468 
	mNET_IPV4_CONF_RP_FILTER
=8,

469 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

470 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

471 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

472 
	mNET_IPV4_CONF_TAG
=12,

473 
	mNET_IPV4_CONF_ARPFILTER
=13,

474 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

475 
	mNET_IPV4_CONF_NOXFRM
=15,

476 
	mNET_IPV4_CONF_NOPOLICY
=16,

477 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

478 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

479 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

480 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

481 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

482 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

488 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

489 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

497 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

499 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

500 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

501 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

502 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

503 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

507 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

514 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

515 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

520 
	mNET_IPV6_CONF
=16,

521 
	mNET_IPV6_NEIGH
=17,

522 
	mNET_IPV6_ROUTE
=18,

523 
	mNET_IPV6_ICMP
=19,

524 
	mNET_IPV6_BINDV6ONLY
=20,

525 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

526 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

527 
	mNET_IPV6_IP6FRAG_TIME
=23,

528 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

529 
	mNET_IPV6_MLD_MAX_MSF
=25,

533 
	mNET_IPV6_ROUTE_FLUSH
=1,

534 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

535 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

536 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

537 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

538 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

539 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

540 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

541 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

542 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

546 
	mNET_IPV6_FORWARDING
=1,

547 
	mNET_IPV6_HOP_LIMIT
=2,

548 
	mNET_IPV6_MTU
=3,

549 
	mNET_IPV6_ACCEPT_RA
=4,

550 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

551 
	mNET_IPV6_AUTOCONF
=6,

552 
	mNET_IPV6_DAD_TRANSMITS
=7,

553 
	mNET_IPV6_RTR_SOLICITS
=8,

554 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

555 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

556 
	mNET_IPV6_USE_TEMPADDR
=11,

557 
	mNET_IPV6_TEMP_VALID_LFT
=12,

558 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

559 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

560 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

561 
	mNET_IPV6_MAX_ADDRESSES
=16,

562 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

563 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

564 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

565 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

566 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

567 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

568 
	mNET_IPV6_PROXY_NDP
=23,

569 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

570 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/tty_flags.h

1 #i‚de‡
_LINUX_TTY_FLAGS_H


2 
	#_LINUX_TTY_FLAGS_H


	)

13 
	#ASYNCB_HUP_NOTIFY
 0

	)

15 
	#ASYNCB_FOURPORT
 1

	)

16 
	#ASYNCB_SAK
 2

	)

17 
	#ASYNCB_SPLIT_TERMIOS
 3

	)

18 
	#ASYNCB_SPD_HI
 4

	)

19 
	#ASYNCB_SPD_VHI
 5

	)

20 
	#ASYNCB_SKIP_TEST
 6

	)

21 
	#ASYNCB_AUTO_IRQ
 7

	)

23 
	#ASYNCB_SESSION_LOCKOUT
 8

	)

24 
	#ASYNCB_PGRP_LOCKOUT
 9

	)

25 
	#ASYNCB_CALLOUT_NOHUP
 10

	)

26 
	#ASYNCB_HARDPPS_CD
 11

	)

27 
	#ASYNCB_SPD_SHI
 12

	)

28 
	#ASYNCB_LOW_LATENCY
 13

	)

29 
	#ASYNCB_BUGGY_UART
 14

	)

31 
	#ASYNCB_AUTOPROBE
 15

	)

32 
	#ASYNCB_MAGIC_MULTIPLIER
 16

	)

33 
	#ASYNCB_LAST_USER
 16

	)

41 #i‚de‡
_KERNEL_


42 
	#ASYNCB_INITIALIZED
 31

	)

43 
	#ASYNCB_SUSPENDED
 30

	)

44 
	#ASYNCB_NORMAL_ACTIVE
 29

	)

45 
	#ASYNCB_BOOT_AUTOCONF
 28

	)

46 
	#ASYNCB_CLOSING
 27

	)

47 
	#ASYNCB_CTS_FLOW
 26

	)

48 
	#ASYNCB_CHECK_CD
 25

	)

49 
	#ASYNCB_SHARE_IRQ
 24

	)

50 
	#ASYNCB_CONS_FLOW
 23

	)

51 
	#ASYNCB_FIRST_KERNEL
 22

	)

55 
	#ASYNC_HUP_NOTIFY
 (1U << 
ASYNCB_HUP_NOTIFY
)

	)

56 
	#ASYNC_SUSPENDED
 (1U << 
ASYNCB_SUSPENDED
)

	)

57 
	#ASYNC_FOURPORT
 (1U << 
ASYNCB_FOURPORT
)

	)

58 
	#ASYNC_SAK
 (1U << 
ASYNCB_SAK
)

	)

59 
	#ASYNC_SPLIT_TERMIOS
 (1U << 
ASYNCB_SPLIT_TERMIOS
)

	)

60 
	#ASYNC_SPD_HI
 (1U << 
ASYNCB_SPD_HI
)

	)

61 
	#ASYNC_SPD_VHI
 (1U << 
ASYNCB_SPD_VHI
)

	)

62 
	#ASYNC_SKIP_TEST
 (1U << 
ASYNCB_SKIP_TEST
)

	)

63 
	#ASYNC_AUTO_IRQ
 (1U << 
ASYNCB_AUTO_IRQ
)

	)

64 
	#ASYNC_SESSION_LOCKOUT
 (1U << 
ASYNCB_SESSION_LOCKOUT
)

	)

65 
	#ASYNC_PGRP_LOCKOUT
 (1U << 
ASYNCB_PGRP_LOCKOUT
)

	)

66 
	#ASYNC_CALLOUT_NOHUP
 (1U << 
ASYNCB_CALLOUT_NOHUP
)

	)

67 
	#ASYNC_HARDPPS_CD
 (1U << 
ASYNCB_HARDPPS_CD
)

	)

68 
	#ASYNC_SPD_SHI
 (1U << 
ASYNCB_SPD_SHI
)

	)

69 
	#ASYNC_LOW_LATENCY
 (1U << 
ASYNCB_LOW_LATENCY
)

	)

70 
	#ASYNC_BUGGY_UART
 (1U << 
ASYNCB_BUGGY_UART
)

	)

71 
	#ASYNC_AUTOPROBE
 (1U << 
ASYNCB_AUTOPROBE
)

	)

72 
	#ASYNC_MAGIC_MULTIPLIER
 (1U << 
ASYNCB_MAGIC_MULTIPLIER
)

	)

74 
	#ASYNC_FLAGS
 ((1U << (
ASYNCB_LAST_USER
 + 1)Ë- 1)

	)

75 
	#ASYNC_DEPRECATED
 (
ASYNC_SESSION_LOCKOUT
 | 
ASYNC_PGRP_LOCKOUT
 | \

76 
ASYNC_CALLOUT_NOHUP
 | 
ASYNC_AUTOPROBE
)

	)

77 
	#ASYNC_USR_MASK
 (
ASYNC_SPD_MASK
|
ASYNC_CALLOUT_NOHUP
| \

78 
ASYNC_LOW_LATENCY
)

	)

79 
	#ASYNC_SPD_CUST
 (
ASYNC_SPD_HI
|
ASYNC_SPD_VHI
)

	)

80 
	#ASYNC_SPD_WARP
 (
ASYNC_SPD_HI
|
ASYNC_SPD_SHI
)

	)

81 
	#ASYNC_SPD_MASK
 (
ASYNC_SPD_HI
|
ASYNC_SPD_VHI
|
ASYNC_SPD_SHI
)

	)

83 #i‚de‡
_KERNEL_


85 
	#ASYNC_INITIALIZED
 (1U << 
ASYNCB_INITIALIZED
)

	)

86 
	#ASYNC_NORMAL_ACTIVE
 (1U << 
ASYNCB_NORMAL_ACTIVE
)

	)

87 
	#ASYNC_BOOT_AUTOCONF
 (1U << 
ASYNCB_BOOT_AUTOCONF
)

	)

88 
	#ASYNC_CLOSING
 (1U << 
ASYNCB_CLOSING
)

	)

89 
	#ASYNC_CTS_FLOW
 (1U << 
ASYNCB_CTS_FLOW
)

	)

90 
	#ASYNC_CHECK_CD
 (1U << 
ASYNCB_CHECK_CD
)

	)

91 
	#ASYNC_SHARE_IRQ
 (1U << 
ASYNCB_SHARE_IRQ
)

	)

92 
	#ASYNC_CONS_FLOW
 (1U << 
ASYNCB_CONS_FLOW
)

	)

93 
	#ASYNC_INTERNAL_FLAGS
 (~((1U << 
ASYNCB_FIRST_KERNEL
Ë- 1))

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
703
35619
linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cas-771.c
linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cellvision.c
linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/cellvision.h
linux/adm5120/files-3.18/arch/mips/adm5120/cellvision/nfs-101.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/adm5120.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/clock.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/early-printk.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/gpio.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/irq.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/memory.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/platform.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/prom.c
linux/adm5120/files-3.18/arch/mips/adm5120/common/setup.c
linux/adm5120/files-3.18/arch/mips/adm5120/compex/compex.c
linux/adm5120/files-3.18/arch/mips/adm5120/compex/compex.h
linux/adm5120/files-3.18/arch/mips/adm5120/compex/np27g.c
linux/adm5120/files-3.18/arch/mips/adm5120/compex/np28g.c
linux/adm5120/files-3.18/arch/mips/adm5120/compex/wp54.c
linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-6104k.c
linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-6104kp.c
linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61x4wg.c
linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61xx.c
linux/adm5120/files-3.18/arch/mips/adm5120/edimax/br-61xx.h
linux/adm5120/files-3.18/arch/mips/adm5120/generic/eb-214a.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120-rt.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120-wvoip.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy5120p-ata.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/easy83000.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/infineon.c
linux/adm5120/files-3.18/arch/mips/adm5120/infineon/infineon.h
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-11x.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-133.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-133c.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-150.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-153.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-192.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-1xx.c
linux/adm5120/files-3.18/arch/mips/adm5120/mikrotik/rb-1xx.h
linux/adm5120/files-3.18/arch/mips/adm5120/motorola/pmugw.c
linux/adm5120/files-3.18/arch/mips/adm5120/osbridge/5gxi.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/admboot.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/bootbase.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/cfe.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/generic.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/myloader.c
linux/adm5120/files-3.18/arch/mips/adm5120/prom/prom_read.h
linux/adm5120/files-3.18/arch/mips/adm5120/prom/routerboot.c
linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-334wt.c
linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-335.c
linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-33x.c
linux/adm5120/files-3.18/arch/mips/adm5120/zyxel/p-33x.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_defs.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_info.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_intc.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_mpmc.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_nand.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_platform.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_switch.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/adm5120_uart.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/asm/sizes.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/cpu-feature-overrides.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/gpio.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/irq.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/admboot.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/cfe.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/generic.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/myloader.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/routerboot.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/prom/zynos.h
linux/adm5120/files-3.18/arch/mips/include/asm/mach-adm5120/war.h
linux/adm5120/files-3.18/arch/mips/pci/pci-adm5120.c
linux/adm5120/files-3.18/drivers/ata/pata_rb153_cf.c
linux/adm5120/files-3.18/drivers/leds/ledtrig-adm5120-switch.c
linux/adm5120/files-3.18/drivers/mtd/maps/adm5120-flash.c
linux/adm5120/files-3.18/drivers/mtd/trxsplit.c
linux/adm5120/files-3.18/drivers/net/adm5120sw.c
linux/adm5120/files-3.18/drivers/net/adm5120sw.h
linux/adm5120/files-3.18/drivers/usb/host/adm5120-dbg.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-drv.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-hcd.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-hub.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-mem.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-pm.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120-q.c
linux/adm5120/files-3.18/drivers/usb/host/adm5120.h
linux/adm5120/files-3.18/drivers/watchdog/adm5120_wdt.c
linux/adm5120/image/lzma-loader/src/LzmaDecode.c
linux/adm5120/image/lzma-loader/src/LzmaDecode.h
linux/adm5120/image/lzma-loader/src/LzmaTypes.h
linux/adm5120/image/lzma-loader/src/board.c
linux/adm5120/image/lzma-loader/src/config.h
linux/adm5120/image/lzma-loader/src/decompress.c
linux/adm5120/image/lzma-loader/src/printf.c
linux/adm5120/image/lzma-loader/src/printf.h
linux/adm8668/files-3.18/arch/mips/adm8668/clock.c
linux/adm8668/files-3.18/arch/mips/adm8668/early_printk.c
linux/adm8668/files-3.18/arch/mips/adm8668/gpio.c
linux/adm8668/files-3.18/arch/mips/adm8668/irq.c
linux/adm8668/files-3.18/arch/mips/adm8668/platform.c
linux/adm8668/files-3.18/arch/mips/adm8668/prom.c
linux/adm8668/files-3.18/arch/mips/adm8668/setup.c
linux/adm8668/files-3.18/arch/mips/adm8668/time.c
linux/adm8668/files-3.18/arch/mips/adm8668/u-boot.h
linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/adm8668.h
linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/asm/sizes.h
linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/gpio.h
linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/irq.h
linux/adm8668/files-3.18/arch/mips/include/asm/mach-adm8668/war.h
linux/adm8668/files-3.18/arch/mips/pci/pci-adm8668.c
linux/adm8668/files-3.18/drivers/mtd/maps/adm8668.c
linux/adm8668/image/lzma-loader/src/LzmaDecode.c
linux/adm8668/image/lzma-loader/src/LzmaDecode.h
linux/adm8668/image/lzma-loader/src/decompress.c
linux/adm8668/image/lzma-loader/src/include/_exports.h
linux/adm8668/image/lzma-loader/src/include/asm/global_data.h
linux/adm8668/image/lzma-loader/src/include/asm/u-boot.h
linux/adm8668/image/lzma-loader/src/include/common.h
linux/adm8668/image/lzma-loader/src/include/exports.h
linux/adm8668/image/lzma-loader/src/include/image.h
linux/adm8668/image/lzma-loader/src/stubs.c
linux/apm821xx/files/arch/powerpc/platforms/44x/wndr4700.c
linux/ar7/files/drivers/mtd/ac49xpart.c
linux/ar7/files/drivers/mtd/titanpart.c
linux/ar7/src/adam2patcher.c
linux/ar71xx/files/arch/mips/ath79/dev-ap9x-pci.c
linux/ar71xx/files/arch/mips/ath79/dev-ap9x-pci.h
linux/ar71xx/files/arch/mips/ath79/dev-dsa.c
linux/ar71xx/files/arch/mips/ath79/dev-dsa.h
linux/ar71xx/files/arch/mips/ath79/dev-eth.c
linux/ar71xx/files/arch/mips/ath79/dev-eth.h
linux/ar71xx/files/arch/mips/ath79/dev-m25p80.c
linux/ar71xx/files/arch/mips/ath79/dev-m25p80.h
linux/ar71xx/files/arch/mips/ath79/dev-nfc.c
linux/ar71xx/files/arch/mips/ath79/dev-nfc.h
linux/ar71xx/files/arch/mips/ath79/mach-a60.c
linux/ar71xx/files/arch/mips/ath79/mach-alfa-ap120c.c
linux/ar71xx/files/arch/mips/ath79/mach-alfa-ap96.c
linux/ar71xx/files/arch/mips/ath79/mach-alfa-nx.c
linux/ar71xx/files/arch/mips/ath79/mach-all0258n.c
linux/ar71xx/files/arch/mips/ath79/mach-all0315n.c
linux/ar71xx/files/arch/mips/ath79/mach-antminer-s1.c
linux/ar71xx/files/arch/mips/ath79/mach-antminer-s3.c
linux/ar71xx/files/arch/mips/ath79/mach-antrouter-r1.c
linux/ar71xx/files/arch/mips/ath79/mach-ap121f.c
linux/ar71xx/files/arch/mips/ath79/mach-ap132.c
linux/ar71xx/files/arch/mips/ath79/mach-ap143.c
linux/ar71xx/files/arch/mips/ath79/mach-ap147.c
linux/ar71xx/files/arch/mips/ath79/mach-ap152.c
linux/ar71xx/files/arch/mips/ath79/mach-ap531b0.c
linux/ar71xx/files/arch/mips/ath79/mach-ap90q.c
linux/ar71xx/files/arch/mips/ath79/mach-ap91-5g.c
linux/ar71xx/files/arch/mips/ath79/mach-ap96.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c25-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c59-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c60-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c7-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c7-v5.c
linux/ar71xx/files/arch/mips/ath79/mach-archer-c7.c
linux/ar71xx/files/arch/mips/ath79/mach-arduino-yun.c
linux/ar71xx/files/arch/mips/ath79/mach-aw-nr580.c
linux/ar71xx/files/arch/mips/ath79/mach-bhr-4grv2.c
linux/ar71xx/files/arch/mips/ath79/mach-bhu-bxu2000n2-a.c
linux/ar71xx/files/arch/mips/ath79/mach-bsb.c
linux/ar71xx/files/arch/mips/ath79/mach-c55.c
linux/ar71xx/files/arch/mips/ath79/mach-c60.c
linux/ar71xx/files/arch/mips/ath79/mach-cap324.c
linux/ar71xx/files/arch/mips/ath79/mach-cap4200ag.c
linux/ar71xx/files/arch/mips/ath79/mach-carambola2.c
linux/ar71xx/files/arch/mips/ath79/mach-cf-e316n-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-cpe510.c
linux/ar71xx/files/arch/mips/ath79/mach-cpe870.c
linux/ar71xx/files/arch/mips/ath79/mach-cr3000.c
linux/ar71xx/files/arch/mips/ath79/mach-cr5000.c
linux/ar71xx/files/arch/mips/ath79/mach-dap-1330-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dap-2695-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dgl-5500-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dhp-1565-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-505-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-600-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-615-c1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-615-i1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-825-b1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-825-c1.c
linux/ar71xx/files/arch/mips/ath79/mach-dir-869-a1.c
linux/ar71xx/files/arch/mips/ath79/mach-dlan-hotspot.c
linux/ar71xx/files/arch/mips/ath79/mach-dlan-pro-1200-ac.c
linux/ar71xx/files/arch/mips/ath79/mach-dlan-pro-500-wp.c
linux/ar71xx/files/arch/mips/ath79/mach-domywifi-dw33d.c
linux/ar71xx/files/arch/mips/ath79/mach-dr344.c
linux/ar71xx/files/arch/mips/ath79/mach-dr531.c
linux/ar71xx/files/arch/mips/ath79/mach-dragino2.c
linux/ar71xx/files/arch/mips/ath79/mach-e1700ac-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-e2100l.c
linux/ar71xx/files/arch/mips/ath79/mach-e558-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-e600g-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-e750a-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-e750g-v8.c
linux/ar71xx/files/arch/mips/ath79/mach-eap120.c
linux/ar71xx/files/arch/mips/ath79/mach-eap300v2.c
linux/ar71xx/files/arch/mips/ath79/mach-eap7660d.c
linux/ar71xx/files/arch/mips/ath79/mach-el-m150.c
linux/ar71xx/files/arch/mips/ath79/mach-el-mini.c
linux/ar71xx/files/arch/mips/ath79/mach-ens202ext.c
linux/ar71xx/files/arch/mips/ath79/mach-epg5000.c
linux/ar71xx/files/arch/mips/ath79/mach-esr1750.c
linux/ar71xx/files/arch/mips/ath79/mach-esr900.c
linux/ar71xx/files/arch/mips/ath79/mach-ew-balin.c
linux/ar71xx/files/arch/mips/ath79/mach-ew-dorin.c
linux/ar71xx/files/arch/mips/ath79/mach-f9k1115v2.c
linux/ar71xx/files/arch/mips/ath79/mach-fritz300e.c
linux/ar71xx/files/arch/mips/ath79/mach-fritz4020.c
linux/ar71xx/files/arch/mips/ath79/mach-fritz450e.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-ar150.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-ar300.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-ar300m.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-ar750.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-ar750s.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-domino.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-inet.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-mifi.c
linux/ar71xx/files/arch/mips/ath79/mach-gl-usb150.c
linux/ar71xx/files/arch/mips/ath79/mach-gs-minibox-v32.c
linux/ar71xx/files/arch/mips/ath79/mach-gs-oolite-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-gs-oolite-v5-2.c
linux/ar71xx/files/arch/mips/ath79/mach-hiveap-121.c
linux/ar71xx/files/arch/mips/ath79/mach-hiwifi-hc6361.c
linux/ar71xx/files/arch/mips/ath79/mach-hornet-ub.c
linux/ar71xx/files/arch/mips/ath79/mach-ja76pf.c
linux/ar71xx/files/arch/mips/ath79/mach-jwap003.c
linux/ar71xx/files/arch/mips/ath79/mach-jwap230.c
linux/ar71xx/files/arch/mips/ath79/mach-koala.c
linux/ar71xx/files/arch/mips/ath79/mach-lan-turtle.c
linux/ar71xx/files/arch/mips/ath79/mach-lima.c
linux/ar71xx/files/arch/mips/ath79/mach-mc-mac1200r.c
linux/ar71xx/files/arch/mips/ath79/mach-mr12.c
linux/ar71xx/files/arch/mips/ath79/mach-mr16.c
linux/ar71xx/files/arch/mips/ath79/mach-mr1750.c
linux/ar71xx/files/arch/mips/ath79/mach-mr18.c
linux/ar71xx/files/arch/mips/ath79/mach-mr600.c
linux/ar71xx/files/arch/mips/ath79/mach-mr900.c
linux/ar71xx/files/arch/mips/ath79/mach-mynet-n600.c
linux/ar71xx/files/arch/mips/ath79/mach-mynet-n750.c
linux/ar71xx/files/arch/mips/ath79/mach-mynet-rext.c
linux/ar71xx/files/arch/mips/ath79/mach-mzk-w04nu.c
linux/ar71xx/files/arch/mips/ath79/mach-mzk-w300nh.c
linux/ar71xx/files/arch/mips/ath79/mach-n5q.c
linux/ar71xx/files/arch/mips/ath79/mach-nbg460n.c
linux/ar71xx/files/arch/mips/ath79/mach-nbg6716.c
linux/ar71xx/files/arch/mips/ath79/mach-om2p.c
linux/ar71xx/files/arch/mips/ath79/mach-om5p.c
linux/ar71xx/files/arch/mips/ath79/mach-om5pac.c
linux/ar71xx/files/arch/mips/ath79/mach-om5pacv2.c
linux/ar71xx/files/arch/mips/ath79/mach-omy-g1.c
linux/ar71xx/files/arch/mips/ath79/mach-omy-x1.c
linux/ar71xx/files/arch/mips/ath79/mach-onion-omega.c
linux/ar71xx/files/arch/mips/ath79/mach-pb42.c
linux/ar71xx/files/arch/mips/ath79/mach-pqi-air-pen.c
linux/ar71xx/files/arch/mips/ath79/mach-qihoo-c301.c
linux/ar71xx/files/arch/mips/ath79/mach-r36a.c
linux/ar71xx/files/arch/mips/ath79/mach-r602n.c
linux/ar71xx/files/arch/mips/ath79/mach-r6100.c
linux/ar71xx/files/arch/mips/ath79/mach-rambutan.c
linux/ar71xx/files/arch/mips/ath79/mach-rb2011.c
linux/ar71xx/files/arch/mips/ath79/mach-rb4xx.c
linux/ar71xx/files/arch/mips/ath79/mach-rb750.c
linux/ar71xx/files/arch/mips/ath79/mach-rb91x.c
linux/ar71xx/files/arch/mips/ath79/mach-rb922.c
linux/ar71xx/files/arch/mips/ath79/mach-rb95x.c
linux/ar71xx/files/arch/mips/ath79/mach-rbspi.c
linux/ar71xx/files/arch/mips/ath79/mach-rbsxtlite.c
linux/ar71xx/files/arch/mips/ath79/mach-re450.c
linux/ar71xx/files/arch/mips/ath79/mach-rme-eg200.c
linux/ar71xx/files/arch/mips/ath79/mach-rut9xx.c
linux/ar71xx/files/arch/mips/ath79/mach-rw2458n.c
linux/ar71xx/files/arch/mips/ath79/mach-sc1750.c
linux/ar71xx/files/arch/mips/ath79/mach-sc300m.c
linux/ar71xx/files/arch/mips/ath79/mach-sc450.c
linux/ar71xx/files/arch/mips/ath79/mach-smart-300.c
linux/ar71xx/files/arch/mips/ath79/mach-som9331.c
linux/ar71xx/files/arch/mips/ath79/mach-sr3200.c
linux/ar71xx/files/arch/mips/ath79/mach-t830.c
linux/ar71xx/files/arch/mips/ath79/mach-tellstick-znet-lite.c
linux/ar71xx/files/arch/mips/ath79/mach-tew-632brp.c
linux/ar71xx/files/arch/mips/ath79/mach-tew-673gru.c
linux/ar71xx/files/arch/mips/ath79/mach-tew-712br.c
linux/ar71xx/files/arch/mips/ath79/mach-tew-732br.c
linux/ar71xx/files/arch/mips/ath79/mach-tew-823dru.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-mr11u.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-mr13u.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3020.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3x20.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-mr6400.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa701nd-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa7210n-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa801nd-v3.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa830re-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wa901nd.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wax50re.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr3320-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr3500.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr4300.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr6500-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wpa8630.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1041n-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd-v2.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr1043nd.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr2543n.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr703n.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr720n-v3.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr741nd-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr741nd.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr802n.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr810n.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n-v8.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n-v9.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr841n.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr902ac-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr940n-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr941nd-v6.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr941nd.c
linux/ar71xx/files/arch/mips/ath79/mach-tl-wr942n-v1.c
linux/ar71xx/files/arch/mips/ath79/mach-ts-d084.c
linux/ar71xx/files/arch/mips/ath79/mach-tube2h.c
linux/ar71xx/files/arch/mips/ath79/mach-ubnt-unifiac.c
linux/ar71xx/files/arch/mips/ath79/mach-ubnt-xm.c
linux/ar71xx/files/arch/mips/ath79/mach-ubnt.c
linux/ar71xx/files/arch/mips/ath79/mach-wam250.c
linux/ar71xx/files/arch/mips/ath79/mach-weio.c
linux/ar71xx/files/arch/mips/ath79/mach-whr-hp-g300n.c
linux/ar71xx/files/arch/mips/ath79/mach-wi2a-ac200i.c
linux/ar71xx/files/arch/mips/ath79/mach-wifi-pineapple-nano.c
linux/ar71xx/files/arch/mips/ath79/mach-wlae-ag300n.c
linux/ar71xx/files/arch/mips/ath79/mach-wlr8100.c
linux/ar71xx/files/arch/mips/ath79/mach-wndap360.c
linux/ar71xx/files/arch/mips/ath79/mach-wndr3700.c
linux/ar71xx/files/arch/mips/ath79/mach-wndr4300.c
linux/ar71xx/files/arch/mips/ath79/mach-wnr2000-v3.c
linux/ar71xx/files/arch/mips/ath79/mach-wnr2000-v4.c
linux/ar71xx/files/arch/mips/ath79/mach-wnr2000.c
linux/ar71xx/files/arch/mips/ath79/mach-wnr2200.c
linux/ar71xx/files/arch/mips/ath79/mach-wp543.c
linux/ar71xx/files/arch/mips/ath79/mach-wpe72.c
linux/ar71xx/files/arch/mips/ath79/mach-wpj342.c
linux/ar71xx/files/arch/mips/ath79/mach-wpj344.c
linux/ar71xx/files/arch/mips/ath79/mach-wpj531.c
linux/ar71xx/files/arch/mips/ath79/mach-wpj558.c
linux/ar71xx/files/arch/mips/ath79/mach-wpj563.c
linux/ar71xx/files/arch/mips/ath79/mach-wrt160nl.c
linux/ar71xx/files/arch/mips/ath79/mach-wrt400n.c
linux/ar71xx/files/arch/mips/ath79/mach-wrtnode2q.c
linux/ar71xx/files/arch/mips/ath79/mach-wzr-450hp2.c
linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-ag300h.c
linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g300nh.c
linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g300nh2.c
linux/ar71xx/files/arch/mips/ath79/mach-wzr-hp-g450h.c
linux/ar71xx/files/arch/mips/ath79/mach-z1.c
linux/ar71xx/files/arch/mips/ath79/mach-zbt-we1526.c
linux/ar71xx/files/arch/mips/ath79/mach-zcn-1523h.c
linux/ar71xx/files/arch/mips/ath79/machtypes.h
linux/ar71xx/files/arch/mips/ath79/nvram.c
linux/ar71xx/files/arch/mips/ath79/nvram.h
linux/ar71xx/files/arch/mips/ath79/pci-ath9k-fixup.c
linux/ar71xx/files/arch/mips/ath79/pci-ath9k-fixup.h
linux/ar71xx/files/arch/mips/ath79/routerboot.c
linux/ar71xx/files/arch/mips/ath79/routerboot.h
linux/ar71xx/files/arch/mips/include/asm/fw/myloader/myloader.h
linux/ar71xx/files/arch/mips/include/asm/mach-ath79/ag71xx_platform.h
linux/ar71xx/files/arch/mips/include/asm/mach-ath79/mach-linino.h
linux/ar71xx/files/arch/mips/include/asm/mach-ath79/mach-rb750.h
linux/ar71xx/files/arch/mips/include/asm/mach-ath79/rb4xx_cpld.h
linux/ar71xx/files/drivers/gpio/gpio-latch.c
linux/ar71xx/files/drivers/gpio/gpio-nxp-74hc153.c
linux/ar71xx/files/drivers/leds/leds-nu801.c
linux/ar71xx/files/drivers/leds/leds-rb750.c
linux/ar71xx/files/drivers/leds/leds-wndr3700-usb.c
linux/ar71xx/files/drivers/mtd/cybertan_part.c
linux/ar71xx/files/drivers/mtd/nand/ar934x_nfc.c
linux/ar71xx/files/drivers/mtd/nand/rb4xx_nand.c
linux/ar71xx/files/drivers/mtd/nand/rb750_nand.c
linux/ar71xx/files/drivers/mtd/nand/rb91x_nand.c
linux/ar71xx/files/drivers/mtd/tplinkpart.c
linux/ar71xx/files/drivers/net/dsa/mv88e6063.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar8216.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_debugfs.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ethtool.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c
linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c
linux/ar71xx/files/drivers/spi/spi-rb4xx-cpld.c
linux/ar71xx/files/drivers/spi/spi-rb4xx.c
linux/ar71xx/files/drivers/spi/spi-tty-ds.c
linux/ar71xx/files/drivers/spi/spi-vsc7385.c
linux/ar71xx/files/include/linux/leds-nu801.h
linux/ar71xx/files/include/linux/nxp_74hc153.h
linux/ar71xx/files/include/linux/platform/ar934x_nfc.h
linux/ar71xx/files/include/linux/platform_data/gpio-latch.h
linux/ar71xx/files/include/linux/platform_data/rb91x_nand.h
linux/ar71xx/files/include/linux/spi/vsc7385.h
linux/ar71xx/image/lzma-loader/src/LzmaDecode.c
linux/ar71xx/image/lzma-loader/src/LzmaDecode.h
linux/ar71xx/image/lzma-loader/src/LzmaTypes.h
linux/ar71xx/image/lzma-loader/src/ar71xx_regs.h
linux/ar71xx/image/lzma-loader/src/board.c
linux/ar71xx/image/lzma-loader/src/cache.c
linux/ar71xx/image/lzma-loader/src/cache.h
linux/ar71xx/image/lzma-loader/src/cacheops.h
linux/ar71xx/image/lzma-loader/src/config.h
linux/ar71xx/image/lzma-loader/src/cp0regdef.h
linux/ar71xx/image/lzma-loader/src/loader.c
linux/ar71xx/image/lzma-loader/src/printf.c
linux/ar71xx/image/lzma-loader/src/printf.h
linux/at91/image/dfboot/src/at45.c
linux/at91/image/dfboot/src/com.c
linux/at91/image/dfboot/src/com.h
linux/at91/image/dfboot/src/config.h
linux/at91/image/dfboot/src/dataflash.c
linux/at91/image/dfboot/src/dataflash.h
linux/at91/image/dfboot/src/div0.c
linux/at91/image/dfboot/src/embedded_services.h
linux/at91/image/dfboot/src/include/AT91C_MCI_Device.h
linux/at91/image/dfboot/src/include/AT91RM9200.h
linux/at91/image/dfboot/src/include/AT91RM9200_inc.h
linux/at91/image/dfboot/src/include/led.h
linux/at91/image/dfboot/src/include/lib_AT91RM9200.h
linux/at91/image/dfboot/src/init.c
linux/at91/image/dfboot/src/led.c
linux/at91/image/dfboot/src/main.c
linux/at91/image/dfboot/src/main.h
linux/at91/image/dfboot/src/mci_device.c
linux/at91/image/dfboot/src/stdio.h
linux/ath79/files/arch/mips/ath79/pci-ath9k-fixup.c
linux/ath79/files/arch/mips/ath79/pci-ath9k-fixup.h
linux/ath79/files/arch/mips/include/asm/fw/myloader/myloader.h
linux/ath79/files/drivers/mtd/parsers/parser_cybertan.c
linux/ath79/files/drivers/mtd/tplinkpart.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_debugfs.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ethtool.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_gmac.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c
linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c
linux/ath79/image/lzma-loader/src/LzmaDecode.c
linux/ath79/image/lzma-loader/src/LzmaDecode.h
linux/ath79/image/lzma-loader/src/LzmaTypes.h
linux/ath79/image/lzma-loader/src/ar71xx_regs.h
linux/ath79/image/lzma-loader/src/board.c
linux/ath79/image/lzma-loader/src/cache.c
linux/ath79/image/lzma-loader/src/cache.h
linux/ath79/image/lzma-loader/src/cacheops.h
linux/ath79/image/lzma-loader/src/config.h
linux/ath79/image/lzma-loader/src/cp0regdef.h
linux/ath79/image/lzma-loader/src/loader.c
linux/ath79/image/lzma-loader/src/printf.c
linux/ath79/image/lzma-loader/src/printf.h
linux/brcm47xx/image/lzma-loader/src/LzmaDecode.c
linux/brcm47xx/image/lzma-loader/src/LzmaDecode.h
linux/brcm47xx/image/lzma-loader/src/decompress.c
linux/brcm63xx/image/lzma-loader/src/LzmaDecode.c
linux/brcm63xx/image/lzma-loader/src/LzmaDecode.h
linux/brcm63xx/image/lzma-loader/src/LzmaTypes.h
linux/brcm63xx/image/lzma-loader/src/board.c
linux/brcm63xx/image/lzma-loader/src/cache.c
linux/brcm63xx/image/lzma-loader/src/cache.h
linux/brcm63xx/image/lzma-loader/src/cacheops.h
linux/brcm63xx/image/lzma-loader/src/config.h
linux/brcm63xx/image/lzma-loader/src/cp0regdef.h
linux/brcm63xx/image/lzma-loader/src/loader.c
linux/brcm63xx/image/lzma-loader/src/printf.c
linux/brcm63xx/image/lzma-loader/src/printf.h
linux/cns3xxx/files/arch/arm/mach-cns3xxx/gpio.c
linux/cns3xxx/files/arch/arm/mach-cns3xxx/hotplug.c
linux/cns3xxx/files/arch/arm/mach-cns3xxx/include/mach/gpio.h
linux/cns3xxx/files/arch/arm/mach-cns3xxx/include/mach/smp.h
linux/cns3xxx/files/arch/arm/mach-cns3xxx/laguna.c
linux/cns3xxx/files/arch/arm/mach-cns3xxx/platsmp.c
linux/cns3xxx/files/drivers/i2c/busses/i2c-cns3xxx.c
linux/cns3xxx/files/drivers/net/ethernet/cavium/cns3xxx_eth.c
linux/cns3xxx/files/drivers/spi/spi-cns3xxx.c
linux/cns3xxx/files/include/linux/platform_data/cns3xxx.h
linux/generic/files/arch/mips/fw/myloader/myloader.c
linux/generic/files/drivers/misc/owl-loader.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit.h
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_brnimage.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_eva.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_fit.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_jimage.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_lzma.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_minor.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_seama.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_squashfs.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_tplink.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_trx.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_uimage.c
linux/generic/files/drivers/mtd/mtdsplit/mtdsplit_wrgg.c
linux/generic/files/drivers/mtd/myloader.c
linux/generic/files/drivers/net/phy/adm6996.c
linux/generic/files/drivers/net/phy/adm6996.h
linux/generic/files/drivers/net/phy/ar8216.c
linux/generic/files/drivers/net/phy/ar8216.h
linux/generic/files/drivers/net/phy/ar8327.c
linux/generic/files/drivers/net/phy/ar8327.h
linux/generic/files/drivers/net/phy/b53/b53_common.c
linux/generic/files/drivers/net/phy/b53/b53_mdio.c
linux/generic/files/drivers/net/phy/b53/b53_mmap.c
linux/generic/files/drivers/net/phy/b53/b53_phy_fixup.c
linux/generic/files/drivers/net/phy/b53/b53_priv.h
linux/generic/files/drivers/net/phy/b53/b53_regs.h
linux/generic/files/drivers/net/phy/b53/b53_spi.c
linux/generic/files/drivers/net/phy/b53/b53_srab.c
linux/generic/files/drivers/net/phy/ip17xx.c
linux/generic/files/drivers/net/phy/mvsw61xx.c
linux/generic/files/drivers/net/phy/mvsw61xx.h
linux/generic/files/drivers/net/phy/mvswitch.c
linux/generic/files/drivers/net/phy/mvswitch.h
linux/generic/files/drivers/net/phy/psb6970.c
linux/generic/files/drivers/net/phy/rtl8306.c
linux/generic/files/drivers/net/phy/rtl8366_smi.c
linux/generic/files/drivers/net/phy/rtl8366_smi.h
linux/generic/files/drivers/net/phy/rtl8366rb.c
linux/generic/files/drivers/net/phy/rtl8366s.c
linux/generic/files/drivers/net/phy/rtl8367.c
linux/generic/files/drivers/net/phy/rtl8367b.c
linux/generic/files/drivers/net/phy/swconfig.c
linux/generic/files/drivers/net/phy/swconfig_leds.c
linux/generic/files/include/linux/ar8216_platform.h
linux/generic/files/include/linux/ath5k_platform.h
linux/generic/files/include/linux/ath9k_platform.h
linux/generic/files/include/linux/myloader.h
linux/generic/files/include/linux/platform_data/adm6996-gpio.h
linux/generic/files/include/linux/routerboot.h
linux/generic/files/include/linux/rt2x00_platform.h
linux/generic/files/include/linux/rtl8366.h
linux/generic/files/include/linux/rtl8367.h
linux/generic/files/include/linux/switch.h
linux/generic/files/include/uapi/linux/switch.h
linux/generic/image/lzma-loader/src/LzmaDecode.c
linux/generic/image/lzma-loader/src/LzmaDecode.h
linux/generic/image/lzma-loader/src/decompress.c
linux/generic/image/lzma-loader/src/print.c
linux/generic/image/lzma-loader/src/print.h
linux/generic/image/lzma-loader/src/printf.c
linux/generic/image/lzma-loader/src/printf.h
linux/generic/image/lzma-loader/src/uart16550.c
linux/generic/image/lzma-loader/src/uart16550.h
linux/generic/image/relocate/cacheops.h
linux/generic/image/relocate/cp0regdef.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/board-mcs8140-dt.c
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/clock.c
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/common.c
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/common.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/cpu.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/gpio.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/hardware.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/io.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/irqs.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/mcs814x.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/param.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/system.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/timex.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/include/mach/uncompress.h
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/irq.c
linux/mcs814x/files-3.18/arch/arm/mach-mcs814x/timer.c
linux/mcs814x/files-3.18/drivers/char/hw_random/mcs814x-rng.c
linux/mcs814x/files-3.18/drivers/gpio/gpio-mcs814x.c
linux/mcs814x/files-3.18/drivers/net/ethernet/mcs8140/nuport_mac.c
linux/mcs814x/files-3.18/drivers/net/phy/mcs814x.c
linux/mcs814x/files-3.18/drivers/usb/host/ehci-mcs814x.c
linux/mcs814x/files-3.18/drivers/usb/host/ohci-mcs814x.c
linux/mcs814x/files-3.18/drivers/watchdog/mcs814x_wdt.c
linux/mpc85xx/files/arch/powerpc/boot/cuboot-tl-wdr4900-v1.c
linux/mpc85xx/files/arch/powerpc/platforms/85xx/hiveap-330.c
linux/mpc85xx/files/arch/powerpc/platforms/85xx/panda.c
linux/mpc85xx/files/arch/powerpc/platforms/85xx/red15w_rev1.c
linux/mpc85xx/files/arch/powerpc/platforms/85xx/tl_wdr4900_v1.c
linux/oxnas/files/arch/arm/include/debug/uncompress-ox820.h
linux/oxnas/files/drivers/ata/sata_oxnas.c
linux/oxnas/files/drivers/pci/host/pcie-oxnas.c
linux/oxnas/files/drivers/usb/host/ehci-oxnas.c
linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/board.h
linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/dbg.c
linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/dbg.h
linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/mt6575_sd.h
linux/ramips/files-4.14/drivers/mmc/host/mtk-mmc/sd.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/esw_rt3050.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/esw_rt3050.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/ethtool.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/ethtool.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7620.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7620.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/gsw_mt7621.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_mt7620.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_rt2880.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mdio_rt2880.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mt7530.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mt7530.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_debugfs.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_eth_soc.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_eth_soc.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_offload.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/mtk_offload.h
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_mt7620.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_mt7621.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt2880.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt3050.c
linux/ramips/files-4.14/drivers/net/ethernet/mediatek/soc_rt3883.c
linux/ramips/image/lzma-loader/src/LzmaDecode.c
linux/ramips/image/lzma-loader/src/LzmaDecode.h
linux/ramips/image/lzma-loader/src/LzmaTypes.h
linux/ramips/image/lzma-loader/src/board-mt7621.c
linux/ramips/image/lzma-loader/src/board-ralink.c
linux/ramips/image/lzma-loader/src/cache.c
linux/ramips/image/lzma-loader/src/cache.h
linux/ramips/image/lzma-loader/src/cacheops.h
linux/ramips/image/lzma-loader/src/config.h
linux/ramips/image/lzma-loader/src/cp0regdef.h
linux/ramips/image/lzma-loader/src/loader.c
linux/ramips/image/lzma-loader/src/printf.c
linux/ramips/image/lzma-loader/src/printf.h
linux/samsung/files-4.14/drivers/mtd/nand/s5pxx_nand.c
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/linux/capability.h
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/fs.h
/usr/include/linux/genetlink.h
/usr/include/linux/gpio.h
/usr/include/linux/i2c.h
/usr/include/linux/if.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_vlan.h
/usr/include/linux/input.h
/usr/include/linux/kernel.h
/usr/include/linux/magic.h
/usr/include/linux/mdio.h
/usr/include/linux/mii.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netlink.h
/usr/include/linux/pci.h
/usr/include/linux/pci_regs.h
/usr/include/linux/random.h
/usr/include/linux/reboot.h
/usr/include/linux/sched.h
/usr/include/linux/serial.h
/usr/include/linux/serial_core.h
/usr/include/linux/serial_reg.h
/usr/include/linux/signal.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/tcp.h
/usr/include/linux/time.h
/usr/include/linux/timex.h
/usr/include/linux/tty.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/linux/watchdog.h
/usr/include/printf.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/libc-compat.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/linux/sysctl.h
/usr/include/linux/sysinfo.h
/usr/include/linux/tty_flags.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
